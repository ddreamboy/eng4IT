{
  "text": "in this course you will learn about\njavascript dom manipulation this is\nwhere you use javascript to modify\nchange or delete elements of a website\nin the first part of this course you\nwill learn the basic features of a\nwebsite dom and the javascript commands\nyou can use to manipulate the dom in the\nsecond part of the course you will use\nwhat you have learned to create\npractical examples from beginner to\nadvanced this course was created by code\nlab\nso just before we begin we're just going\nto take a look at a few prerequisites so\nthis two-part tutorial is primarily for\nbeginners so if you've never heard about\nthe dom or maybe you're a little\nfamiliar with it but don't know how to\nutilize and apply it this tutorial is\nfor you\nnow in order to effectively understand\nthe dom and how it relates to working\nwith the web it's necessary to have an\nexisting knowledge of html and css and i\nhave crash courses on both of those if\nyou want to check those out before you\nstart this tutorial it's also super\nbeneficial to have a familiarity with\nfundamental javascript so the syntax and\nthe code structure if you guys want to\nlearn about fundamentals of javascript\ncheck out my javascript crash course\nwhich covers the fundamentals so there's\na couple things you'll need if you want\nto follow along this tutorial you're\ngoing to need a web browser and a code\neditor now these are all the options you\ncan use and you can mix up these options\nif you like but this tutorial i'm just\ngoing to be using chrome and visual\nstudio code again you guys can choose\nany combination you like now the\nstructure of this tutorial we're first\ngoing to take a look at what the dom is\nthen we're going to take a look at\nmethods to select elements in the dom\nhow we can traverse the dom how we can\nmanipulate the dom and then finally\nwe're going to take a look at event\nhandling so we'll start this off by\nexplaining what the dom is so the dom\nstands for document object model now the\ndocument object is a built-in object\nthat has many properties and methods\nthat we can use to manipulate the\ncontent the structure and the style of a\nproject and this ability to manipulate\nthe dom or the document object model is\none of the most unique and useful\nabilities in javascript so almost any\ntime a website performs an action such\nas toggling a navigation menu or\nrotating between slideshow images or\neven displaying an error when a user\nattempts to submit an incomplete form\nthis is the result of javascript\naccessing and manipulating the dom now\nanother way of thinking about the dom\nand understanding how it works is\nthinking of it as a tree of nodes like\nyou can see on the screen now so this is\njust a basic diagram of a dom tree and\nall of its nodes now everything in this\ndiagram is a type of node the elements\nthe attributes the text content and even\nline breaks and comments which we'll see\na bit later on are even considered nodes\nand all of these make up the dom tree\nnow the dom object itself is actually a\nproperty of the window object which is\nthe global top level object representing\na tab in the browser and this window\nobject has access to such information as\ntoolbars the height and width of the\nwindow prompts and even alerts but in\nthis tutorial we're only interested in\nthe document object which is what is\ninside of the inner window and the stuff\nwe want to manipulate now another\nimportant thing to note here is that\nmost of these nodes in this diagram have\na parent child sibling relationship the\ntopmost node are either document node\nhere is the root node of the dom tree\nwhich we use to access the dom and\nmanipulate all of the content now this\ndocument node has one child node which\nis the html element and the html element\nis a parent node to the head and the\nbody element\nnow the head and body elements are what\nyou would call siblings since they're on\nthe same level in the dom tree\nunderneath the head element you see it\nhas one child node which is the title\nelement and the text this is my website\nis a child node of the title element and\nthese relationships are similar over the\nother side but the body element is the\nparent of the paragraph and the h1 the\nparagraph and the h1 are siblings to\neach other and the text content inside\neach of these elements are child nodes\nto the paragraph and h1 so the my link\nand my header our child nodes to the h1\nand the paragraph element now we can\nalso see by the paragraph tag we have a\nclass attribute now html attributes such\nas ids or classes in this case styles\netc also considers nodes in the dom\nhierarchy but they don't actually\nparticipate in this parent child sibling\nrelationship like the other nodes do the\nway they are accessed is through\nproperties of the element node that\nthey're contained in now often there\nwill be times you want to move\nthroughout the dom so understanding this\nparent-child sibling relationship is\ncrucial to understanding how javascript\nworks with html\nall right guys so now we know a little\nbit more about what the dom is and learn\nabout the dom tree the next thing to\ncover in the tutorial is how to select\nthese nodes or elements in the dom tree\nfor manipulation so before we take a\nlook at all these methods of selecting\nelements let's just quickly go over the\nlayout you see here in the browser so in\nthe index.html file\nwe've got a div of the class of\ncontainer\ninside of that we've got a heading which\nhas the id of main heading and then the\ntext our favorite movie franchise\nunderneath that we have a ul tag which\nhas five list items inside of it and\nthen each of these list items have a\nclass of list items so super creative\nnow this is what we're going to be\nworking on when we're looking at\nselecting styling traversing and\nmanipulating for the rest of this\ntutorial and then underneath that we\nhave a script tag\nwhich has the attribute of source and\nthis is just linked to the\napp.js file\nso again guys in order to be able to\nmanipulate an element in the dom tree we\nfirst have to select that particular\nelement now luckily for us there's\nseveral ways we can do this and the five\nmajor ways of selecting the elements are\nthe ones you see on the screen now so\nwe've got get element by d get element\nby class name tag name query selector\nand query selector all now some of these\nmethods are pretty self-explanatory but\nwe're going to go over each of them one\nby one now so the first one we're going\nto go over is get element by id and as\nyou probably guess you can select an\nelement using this method by its unique\nid and this is the easiest way to find\nthe html element inside the dom tree\nbecause as we know from css the id\nattribute is used for something unique\nnow if we remember back to the html file\nyou can see that we've got the h1 here\nwhich you see in the browser has the id\nof main heading so this is the element\nwe're going to be selecting so first we\nneed to select the document object model\nwhich is just simply document then get\nthe method of get element by id\nsingle quote marks really important that\nyou include those and then we're just\ngoing to grab\nthe id which is main heading\nclose that off now what we can do with\nthis selection is actually place it\ninside of variables so we can manipulate\nit so\nwe're going to go at the front here and\njust say const\ntitle and we'll set this to the id of\nmain heading and if we log this into the\nconsole now\nso we'll just look in title you see it\nshows up on the console now and if i\nhover over this you can see it\nhighlights in the browser there so you\nknow now we've selected this element and\nthen what we can do from here is now\nselect that variable we just created for\nthe element and we can add styles to the\nelement manipulate its attributes\ntraverse the element so all of that good\nstuff which we'll be looking at in just\na moment\nnow next we have the element by class\nname again quite self-explanatory this\nmethod returns a collection of all the\nelements in the document with that\nspecified class name so for example in\nour html file here you can see all of\nour list items have that really creative\nclass name of list items so we can\nselect all of these using the get\nelement by class name method\nso we'll do the same thing we'll put\ninside a variable we'll just say list\nitem\nand we'll set it to the document\nwe'll say get element by class name\nput single quote marks in there and then\nwe'll just say\nlist\nitems i think it's items yes items and\nthen we'll just log this in the console\nso we know we've selected that element\nor these elements\nand as you can see using the method of\nget elements by class name we've now\nselected all of those elements now this\nmethod actually returns an array like\nobject of all the child elements which\nhave all the given class names so if we\nopen this up you can see it's indexed\nand they're in the order that they are\nin the html file\nnow the next method here which is get\nelement by tag name is pretty similar to\nthe get element by class name and that\naccepts a tag name and returns all of\nthe elements of that specified tag name\nin the order in which they appear in a\ndocument so again return an array like\nobject for all the child elements with\nthe given tag name so for this example\ni'm going to do is just copy and paste\nthe class name\nexample comment this out\nand then we'll just say\ntag name\nand because the list items are list\nitems we just type in li and if we take\na look at the console now you can see\nit's got that html collection of all the\nfive list items and they're all indexed\nin the order that they appear in the\nhtml file so you can see this method is\npretty similar to the\ngetelementbyclassname method\nnow the query selected method that you\nsee here is used to select one item or\nthe first item that matches the selector\nis given so if you have multiple items\nwith the same class name or the same id\nor even the same tag it will select the\nfirst one it comes across so the beauty\nof this method as you probably just\nguessed is that it can accept all css\nstyle selectors again allowing it to\nselect it by its tag or its class or\neven its id so we can actually use this\nmethod to actually grab\nany element in our html file here so\nwhat i'm going to do is use it to grab\nthe div of the class of container which\nis acting as a container for the rest of\nthe content\nso\nwe'll just go underneath here\nand we'll create a variable and we'll\nkeep it super creative and call it\ncontainer and we'll grab the document\nand then grab the query selector method\nand again with this method we can grab\nthe div tag or we can grab the class\nname or if i had an id attribute we can\ngrab that instead what i'm going to do\nis grab the div tag\nand then just log this into the console\nso we know it's working\nand as you can see in the console now\nusing the query selector method we've\nselected that uh div with a class of\ncontainer\nnow as i just mentioned when we're using\nthe query selector it selects the first\nitem that matches the selector it's\ngiven which in this case is the div now\nif we go into the index.html file and we\nuse several more divs\nagain it's only going to select this\nfirst div here\nif we had more divs in this example and\nwe wanted to select them all we then use\nthe query selector all instead\nso uh what i'm going to do actually is\njust duplicate this\nuh one more time\nuh just zoom out a little bit and then\nuh just going to change a bit of the\nword in here so favorite\nsports\nand i'm not gonna bother changing the\nnames here but just to show you guys\nthat it selects all of them i'm just\ngonna copy\nand paste this but instead of query\nselector we're gonna say query selector\nall and then\ncomment this out\nand quickly just comment all these out\nso we can only see\nthat variable there\nand if you take a look at the console\nnow you can see that this method returns\na node list of collections of all the\nmatching elements that matches that\nspecific css selector which in this case\nis a div so similar to the get by tag\nname and get by class name where we get\nhtml collection\nin this method we get a node list and as\nyou can see it selected both of the\ncontainers\nbecause unlike the query selector with\nquery selector all it's selecting all of\nthe divs in the index.html file so\nthat's how we can select elements with\nthe query selector and the\nqueryselectoral method so to quickly\nsummarize this section when you need to\nselect a dom element you have five\ndifferent options to choose from five\ndifferent ways of essentially doing the\nsame thing which is selecting an element\nor elements\npersonally i primarily use query\nselector and query select all because\nthese methods select elements through\ncss selection and i primarily use this\nto select ids and classes mainly because\nthese css selectors provide a really\npowerful and efficient way of selecting\nhtml documents especially ids because\nyou likely understand that elements\nshouldn't have the same id that the id\nis a unique identifier of that element\nwithin the document so with that in mind\nselecting an element with its id is a\nsafe bet because you wouldn't go and\napply manipulation to different elements\nunless perhaps that's what you want to\nachieve in that case the query select\nall method and the class selector is\nwhat i typically use so now we know all\nthe different methods that we can use to\nselect an element in the dom tree we\ncould finally start doing some\nmanipulating now so firstly what we'll\ndo is just get rid of all of this\ncontent here\nand then head in the index.html file and\njust get rid of the second container so\nwe don't really need it\nso let's start things off by taking a\nlook at how we can change the styling of\nan element so if you are familiar with\ncss and css properties we have a way we\ncan access these properties in\njavascript so the first thing we'll do\nis just select this main heading which\nwe have in our index.html file here\nwhich is just the title of the container\nand so we're going to put that in a\nvariable\nand we'll call this variable title\nand then document.queryselector\nmethod and we'll grab the id of this\nelement which is main\nheading\noh i need to put these in a\nsingle quote marks\nand then let's just log this in the\nconsole so we know\nthis variable is working and as you can\nsee now we've selected this element and\nstored inside the\nvariable of title so what we can do now\nis actually manipulate the starting of\nthis element and change it around using\ncss properties so to access css\nproperties in javascript we'll just\nfirst grab the variable we want to apply\nthe styling to which in this case\nis the title or the main heading and\nthen we simply type in the style\nproperty and then after this style\nproperty you just use any css property\nyou want to apply to this element so\nwhat we'll do is just change the color\nof the text\nand we'll set this to\nlet's say red\nand as you can see in the browser now\nwe've changed the color of the main\nheading from white to red using the\nstyle property and then the css property\nof color now this type of styling is\nwhat you'd call inline styling and there\nare other methods to style elements with\njavascript but this is probably the most\ndirect method now again if you take a\nlook at the console you can see it's\nactually included the style attribute\nagain because this is actually done\nthrough inline styling now it's\nimportant to know this because with\ninline styling this actually only works\non a single element if i tried let's say\napplying it to all of the list items\nhere this wouldn't actually work so just\ngoing to demonstrate that to you guys\nso let's uh create another variable\nand we'll call it list\nitems\nand we'll grab all of those list items\nwith query selector all\nuh they will have\nthey all have um\na class of list items\nand then let's just log in here\nlist items\nuh\nso you see now in the console we've\nselected all of those list items now\nlet's try and use the style property\nagain on these list items and see if it\nworks so we'll say style\nlet's say let's try and change the color\nagain or let's actually do the font size\nand just quickly guys i wanted to\nmention that it's important to remember\nwhile using the style property css\nproperties are written in camel case and\nnot with a more standard snake case\nwhich has the dash so the camel case is\nessentially just a capital letter to\nbegin the second word and any subsequent\nword in the name or method or even a\nproperty\nfont size in css would be written like\nthis but in javascript we'll use camel\ncase so just so you guys are aware of\nthat now again back to what we were\ntalking about if i tried changing all of\nthe\nfont size of these list items here so\nlet's say to about two rem you can see\nthis isn't actually working because it's\ntrying to apply\nan inline style to uh five different\nlist items which wouldn't work if we\nactually wanted to apply this styling to\nall of the list items we need to loop\nthrough the list items first\nso just to show you guys how that would\nwork\nuh we'll say i equals\nzero\nand then uh we'll say i\nis less than the list\ndot length which just gives us the\namount of list items\ninside of our um ul here which is five\nand then we want to say we want this to\nincrement\nby one\neach time and then what we do now is\njust apply this\nand put it inside of our for loop and\nthen\nwe just need to index the eye and as you\ncan see now it's quite subtle so let's\njust make it a bit bigger\nyou can see all of the list items now\nhave that styling because it's been\nlooped through using the for loop so\nthat's how we can apply inline style\ninto elements um using the style\nproperty or multiple elements if we loop\nthrough them the next thing i want to\ntake a look at is creating elements so\nwhat i'm going to do is just comment all\nof this out first\nget rid of\nthe list items there i'm just going to\nput a comment here for\nstyling\nelements\nand then now we'll do one for\ncreating\nelements\nso again another really cool thing about\ndom manipulation is that we can create\nelements from our javascript file here\nand we do that with a simple method\nreally of the create element\nso let's say we want to add another list\nitem here in our favorite movie\nfranchise uh container what we need to\ndo first is\njust create a variable for the unordered\nlist\num because we need to enter this on\norder list\nuh so we'll say document dot\nquery select that\ngrab the ul\nand then what we'll do now is use the\ncareer elements method to create another\nlist item\nso we'll just use another variable here\nso document\ndot\ncreate\nelement\nand we'll create a list item\nnow this isn't actually going to do\nanything at the moment this element\nwe've just created in this variable here\nneeds to be inserted into our document\nand the way we can add elements inside\nof the document is using the append\nmethod\nso what we'll do is first grab the ul\nbecause we want to append this list item\ninside this ul\nand then we grab the pen method\nand the element we want to append which\nis the variable of li which again is\njust this list item now you won't be\nable to see it currently at the moment\nbut if we take a look at um the document\nhere and if we open this up\nand then open up the div the classic\ncontainer open up the ul you can see\nthere's an extra list item inside of\nthis ul now because we've inserted this\nelement now using the append method now\nwhat we can do from here is add some\ncontent inside of our list item\nso i'm just going to\nbring this back down\ngo back in the console\nand i'm just gonna put a comment here\nfor\nadding\nelements\nand then off this we're just gonna say\num\nmodifying the text\nnow we don't really need this console\nlog anymore so there are several ways we\ncan include text or modify text in our\nhtml and those ways are inner text text\ncontent and in html now there is a\ndifference between three so to\ndemonstrate those differences i'm just\ngoing to put another html tag inside of\nthe first list item here\nso i'm just going to put a span\ni'm going to put neo\nbecause that's relevant to the matrix\nand then i'm just going to create\nanother variable\nto grab that element there so we're\ngoing to say first\nlist\nitem\nset that to the document\nand say query selector and then we'll\ngrab that list item\nand then i'm just going to grab the\nconsole log again actually and put in\nhere first\nlist item\noh forgotten s\nso there's our first list item now what\ni'm going to do here is include in our\ntext first\nso it just displays the text duplicate\nthis a couple more times and i'm going\nto grab text content\nand then also grab\nin\nhtml so if i just pull this up a bit\nmore now if you take a look at the\nconsole you can clearly see the\ndifferences uh between the three now and\nthat is essentially just the way they're\ndisplayed so within a text here you can\nsee we're simply getting the visible\ntext contained inside that node with\ntext content you see it's actually being\ndisplayed the same way it is in the html\nfile so it's got all those indents and\nit's jumping onto a new line\nand within html a similar sort of thing\nwith the indents and jumping on new\nlines but it's also showing the tags so\nshowing us the span tags inside of our\nhtml here so again that's pretty much\nthe differences between the three now\nanother thing here is that within a html\nthere is a bit of a danger using inner\nhtml and that's mainly at security\nissues you don't really want user input\nto be displayed in the inner html\nbecause this actually allows the user to\ncontrol the javascript and the html on\nyour web page which obviously has its\nproblems there so in most cases you're\njust going to use inner text so let's go\nahead and use that and implement that in\nour list item that we created\nso we're just going to grab the li grab\nin a text\nand\nwe're going to set this\nto equal\nlet's say x-men which is another\nfranchise if you take a look at the\nbrowser now you can see that text has\nbeen included inside of our list item\nnow all right guys so we've created our\nlist item here we've added it into the\nul using the append method and we've\nalso given it some text the next thing i\nwant to do now is make our list item\nlook like the rest of the list items so\nto do that we're going to need to learn\nhow to modify and manipulate an\nelement's attributes or classes luckily\nfor us javascript provides several\nmethods and properties for add-in\nremoving or changing the html elements\nattributes or classes\nso we're going to go underneath here and\njust put a comment of\nmodifying\nattributes\nand classes\nand the first method we're going to take\na look at is the set attribute method\nso we'll grab our list item and we'll\nsay set attribute and as you probably\nguessed because it's pretty\nself-explanatory what it does is set an\nattribute to our specified element which\nin this case is our list item so for\nthis attribute we need to include two\nvalues the first is the attribute you\nwant to set which will just put an id\nand then the second is the name you want\nto give that attribute so we'll just\ngive this attribute let's say\nlet's give it the id of main heading\nand as you can see in the browser now\nbecause we've given this list item the\nsame id as our main heading here which\nis main heading\nyou can see it's got the exact same\nstyling so as you can see the set\nattribute method is quite powerful now\nthe next method i want to take a look at\nis how we can actually remove this\nattribute so we'll go underneath here\nand we'll say li dot\nremove\nattribute\nagain pretty self-explanatory so let's\nsay we want to remove the id from our\nlist item there all we put in here is\njust id\nclose that off and you can see now it's\nreverted back to its default styling and\ndoesn't have that styling that the main\nheading does now there's also a way we\ncan access attributes in javascript so\nwhich follows a similar sort of method\nso we'll say let's say we want to get\nthe attribute of our\nmain heading here what we need to do is\nfirst let's just create a variable for\nit so const\nand we'll say title\nequals document\ndot query selector\nand then grab the\nmain heading\nand then let's just log this in the\nconsole so we'll say um title dot get\nattribute\nthat we want is the id\nand as you can see in the console now\nit's giving us main heading which is the\nid associated with our main heading here\nso that's how we can deal with\nattributes here let's take a look at how\nwe can deal with classes\nso i'll just get rid of all of this and\nwe'll grab our list item again and then\nwe'll use the property of class list now\nthis classlist property has quite a few\nmethods we can utilize and the first one\nwe'll take a look at is how we can use\nthe add method which of course will just\nadd a class to our list item so we'll\nsay dot add\nso let's say list\nitems\nand as you can see when we add that\nclass now our last list item here is the\nexact same styling as the other list\nitems because again we've added the same\nclass as the rest of the list items now\nwhat we can also do here is remove this\nso we'll say\nremove\nand again it will just revert back to\nits default styling because of course\nwe've removed that class now\nnow another thing we can find out is\nwhether an element has that specific\nclass\nso um i'm just going to log this item\ninto the console here class list and\nwe'll use the method of contains\nand we're going to find out if it\ncontains\nlist items\nand as you can see it's returning us\nfalse because of course we remove that\nclass now\nup here so it's giving us false if we\nchange this method to add instead you\nsee now it's returning us true because\nof course a list item here now does\ncontain uh this class here\nso that's how we can modify attributes\nand classes in the dom of course the dom\nhas many more methods than this but\nthese are just some of the core methods\nyou'll likely need to use now there is\nstill one method left to use and that's\nhow we can remove an element and the\nmethod to remove an element or our list\nitem in this case is a pretty simple\nmethod to remember i'm just putting here\nfirst remove\nelements\nso all we need is the remove method so\nwe'll say li dot\nremove and if you take a look at the\nconsole now you can see that the list\nitem has been removed and if we just\nopen up\nall of the elements and we'll open up\nthe div here\nand open up our url you can see that\nlist item is no longer there so we've\nlearned quite a bit about the dom now\nwe've learned how to access elements and\ndom we've also learned how to create add\nmodify style and remove elements in the\ndom too the next thing i want to take a\nlook at is how we can navigate the dom\nso i'm just going to bring you guys back\nto the slide which we looked at at the\nbeginning of this video where we have a\nreally basic diagram of a dom tree and\nall of its nodes now everything in this\ndiagram that you see here is a type of\nnode so that includes the elements the\nattributes the text content and even\nline breaks and comments inside the html\ndocument are considered nodes and all\nthese together make up the dom tree now\nthe dom object itself is actually a\nproperty of the window object which is\nthe global top level object representing\nthe tab in the browser the window object\nhas access to so much information such\nas the toolbar the height the width of\nthe window\neven things like prompts and alerts but\nin this tutorial we're only interested\nin the document object which is what is\ninside of the inner window and the stuff\nthat we want to manipulate now if you\nalso remember back to the beginning of\nthis tutorial\nmost of these nodes in this diagram have\na parent child sibling relationship the\ntop most note i.e the document node is\nthe root node of the dom tree which we\nuse to access the dom and manipulate all\nthe content now this document node here\nhas one child node the html element the\nhtml element is a parent node to the\nhead and the body elements now the head\nand body elements are what you would\ncall siblings since they're at the same\nlevel in the dom tree underneath the\nhead element you see it has a child node\nwhich is the title element and the text\nthis is my website is a child node of\nthe title\nelement these relationships similar over\non the other side here where the body\nelement is parent to the paragraph and\nthe h1 the paragraph and h1 are siblings\nand the text content inside of each of\nthese elements are child nodes so the my\nlink and then my header are child nodes\nthe h1 and the paragraph element as you\ncan see here we also have a class\nattribute and html attributes such as\nids styles classes etc also considered\nas nodes in the dom hierarchy but they\ndon't actually participate in the parent\nchild relationship like other nodes do\nthey're accessed as properties of the\nelement node that contains them so they\nwould be a property of the paragraph tag\nfor example in this diagram now often\nthere will be times where you want to\nmove through the dom without specifying\neach and every element or node\nbeforehand so learning how to traverse\nthe dom tree is essential to\nunderstanding how to work with\njavascript and html so let's head back\ninto vs go now and look at the different\nways we can traverse the dom\nalright guys so it's pretty drilled in\nnow that we're aware that the dom is\nfull of different types of nodes which\nhave parent child sibling relationships\nand if we just head into the html file\nhere just to see this in action you can\nsee that the html element is the parent\nof the head and body element and the\nbody element is the parent to the div\nbut not the h1 here or the ul since\nthese are two levels down from the body\nnow the h1 and the ul are what you would\ncall siblings because they're on the\nsame level\nso what we're going to do here is use\nthis ul and traverse upwards in the dom\nand find out what the parent of the ul\nis and also the grandparent so we'll\nhead back into the app.js file and go\nunderneath parent no traversal and let's\njust first create a variable to grab\nthat ul so we'll say let\nul\nequals document\ndot query selector\nand then grab the ul\nand then just log this in the console\nso we've got a ul then you can see it\nhovers over it and as you know nodes in\nthe dom are referred to as parents\nchildren or siblings depend on the\nrelationship to other nodes now the\nparent of any node is a node that is one\nlevel above it or closer to the document\nin the dom hierarchy so to find out the\nparent node here we have two options so\nthe first option\nis parent node\nduplicate this\nand we also have parent element and as\nyou can see in the console now we're\ngetting the div with the class of\ncontainer because this is the parent of\nthe ul here\nnow say we wanted to actually traverse\nupwards again and find out the\ngrandparent of the ul all we need to do\nis double down by chaining the property\ntogether so after parrot node we just\nwrite paranoid again\nand we'll do the same thing with parent\nelement\nand as you can see now in the console\nwe're getting the output of body because\ntwo levels up from the ul here first is\na container and then the body so as you\ncan see what we've done here is managed\nto traverse up the dom tree from the ul\nto figure out what the grandparent is so\nit's really useful to know these kind of\nproperties now you may be wondering what\nthe difference is between these two and\nit will make more sense when we take a\nlook at how we can traverse child nodes\nin just a moment but basically the clue\nis in the name so you can see here we\nhave parent element and parent node and\nwe know that elements are a type of node\nand this is where it can confuse people\nbecause as we know notes can be text it\ncan be a document\ncomments or even line breaks so this\ndistinction can help grasp the\ndifference between the two now that\nmight still confuse you guys a little\nbit so i'm just going to show you\nthis in action so i'm going to comment\nall these out and i'm just going to\ncreate a variable for our html element\nso we're going to set this to document\ndot\ndocument element\nand then i'll just log this in the\nconsole again\nso we'll log in here html\nand you can see we've selected our html\nthere now i'm going to do the same thing\nand apply the parent node and the parent\nelement property to this html\nvariable say parent\nnode duplicate this and we'll say parent\nelement\nand as you can see when we take a look\nat the console now the parent element is\nreturning us null that's because the job\nof the parent element property here is\nto try and retrieve the parent element\nof the html element ie the document node\nhowever the document node and an element\nnode aren't the same type of node hence\nwhy we're getting this null here so the\nparent node property will try to\nretrieve any node regardless that type\nof node so generally parrot node is more\ncommonly used when we're traversing the\ndom again even if you use parent element\nyou likely won't run into this problem\nso that's how we can navigate upwards of\nthe dom let's now take a look at how we\ncan traverse downwards in the dom by\ntaking a look at the child node\ntraversals in the dom tree so for this\nexample we're still going to stick with\nthe ul and we're going to traverse\ndownwards into the list items so i'm\njust going to comment this out\nand then go underneath the comment and\nbecause we're sticking with the ul here\ni'm just going to\nput this\nhere so we can see it and i'm just going\nto console log in ul now just like the\nproperty of paranormal and parent\nelement we also have child node\nproperties and child element properties\nwhich pretty much work in the exact same\nway so let's first take a look at the\nchild nodes property and see what it\ngives us so after the ul i'm just going\nto type in here\nchild nodes you can see in the console\nnow it's giving us a node list and if i\nopen this up we get a list of every\nchild node inside of the ul now again\nthis is where the distinction between\nnodes and elements becomes more evident\nbecause you might have expected this\nproperty here to give us the five list\nitems but in addition to the five list\nitems six text nodes this is because we\nactually wrote out our own html this\nwasn't generated by javascript and\ninside of the html here the indentation\nbetween element nodes is counted in the\ndom tree as text nodes that so just to\nshow you guys what happens if i remove\none of those indentations so i'm just\ngoing to put this list item\nin the same line as the fourth one you\ncan see now in the node list it's saying\n10 instead of 11 again because\nindentations are counting as text nodes\nso again that distinction between nodes\nand element nodes becomes even more\nevident\nso what we'll do is actually just put\nthat in another line again so we get a\nnode list of 11. now as well as this\nchild noise property here we also have\nfirst and last child and as you probably\nguessed this just selects the first and\nlast child node of our list here\nso\ni'm just going to duplicate this a few\nmore times\nand for this example we need to write as\njust\nfirst child\nand\nlast child\nand again this is just returning us text\nnodes because if we take a look at the\num node list here you can see that the\nfirst index is a text node and then the\nlast index is also a text node now when\nwe're using first chart and last child\nhere which is selecting the first and\nlast node we need to be very mindful if\nwe try styling element using this\nproperty so just to show you guys what i\nmean uh if i\ngrab the ul here\nand i say first\nchild\nand we're gonna style\nfirst child\nwe'll say background\ncolor and we'll set it to\nlet's say\nblue\nyou can see we're getting an error now\nbecause the first\nchild here is actually a text node it's\nnot an element now to select the node we\nwant to apply this styling to what we\ncan do instead of using first child here\nis grab the\nchild\nnodes\nproperty\nand then take a look at the node list\nand i think we wanted to apply the style\ninto this item which is indexed.1\nso we grab our square brackets\ngrab the first index number and if you\ntake a look at the browser now you can\nsee that our first list item here has\nthe background color of blue which we\napplied here in this styling now again\nlike the parent element here we also\nhave the same thing for the children\nelements which is only going to select\nthe element nodes\nso what we'll do is just\ncomment all these out\nand we'll use that ul again\nand we'll log in uh let's log in ul and\nthen grab\nchildren\nnow instead of a node list you can see\nit's returning also html collection and\nit says it's five which is these five\nlist items inside of our ul now again\nlike first try on our last child we can\ndo the exact same thing\nfor the first child elements so we'll\nsay first\nchild\nelement\nso that's how we convert downwards into\nthe dom using child node properties so\nlastly now we're just going to take our\nsibling no traversal so again knows that\nour siblings are nodes that are on the\nsame tree level in the dom so if we take\na look at our html again we know that\nthe h1 and the ul are siblings to each\nother because they're all on the same\nlevel now it's also important to note\nhere that siblings don't have to be the\nsame type of node like they are here as\nelement nodes if i put a text comment\nbetween the two of these so i'm just\ngoing to put in here\nuh\nspace\nbetween\nthis too would classify as a sibling to\nthe h1 and the ul because they're all on\nthe same level so let's put that in a\nvisual perspective for you guys so i'll\ngo back into the app.js file and i'll\nunderneath this comment here\nand i'm just going to grab our uo\nagain and comment these out\nand just log this into the console here\nso we get our ul again\nnow just like the two previous traversal\nproperties we have properties for node\nwhich covers all the nodes and we also\nhave properties which just cover element\nnodes so let's first take a look at\nselect all types of nodes so after the\nul here we've got the previous sibling\nand if i duplicate this we've also got\nthe next sibling\nand you can see in the console now we're\ngetting two text nodes and just to show\nyou why we're getting two text nodes i'm\njust gonna create another variable for\nour div just call this div\nwe'll grab the div\nand we want to find out\nall of the child nodes inside of that\ndiv\noh it's about div wrong\nyou can see we'll open this up now and\nas you can see when we've used these two\nproperties here we've got the ul before\nthe ul is a text node and after the ul\nis also a text node so that's how these\ntwo properties here are working now\nagain like the other properties we used\nbeforehand with parent element and all\nof these child element notes we have the\nexact same thing for sibling no\ntraversal so again if you just wanted to\nfind out the sibling element nodes\ninstead of using previous sibling and\nnext sibling we can use\nthe\nprevious element sibling\nand\nwe can also use next\nelement sibling\nand i'm just going to comment out this\nif you take a look at the console now\nyou see we're getting the h1 because\nthis is the previous element sibling\nnode\num beforehand in the html as you can see\nhere and then for the next element\nsibling we're getting a null because\nthere's no element nodes after the\nul all right guys so we've gone through\nquite a bit of information now regarding\nthe dom we've looked at what that dom is\nwe've looked at how we can add elements\nto the dom style elements in the dom\nremove and modify elements in the dom\nand we've just learned how we can\ntraverse the dom the last topic i want\nto cover in this tutorial is taking a\nlook at event listeners now event\nlisteners are among the most frequently\nused javascript structures in web design\nand what they do is basically just allow\nus to add interactive functionality to\nhtml elements by listening to different\nevents that take place on the page such\nas when a user presses a key or when\nelements load or when a user clicks a\nbutton now the most common events you\nmight listen out for are load events\ntouch start events key down events mouse\nover events and of course click events\nnow we'll take a look at some of these\nin just a moment and i will leave a link\nin the description if you guys want to\ncheck out all the other dumb events but\nlet's learn about the two most common\nways we can add event listeners in our\nprojects now the first way we can\ninclude an event is actually inside of\nour index.html and directly inside one\nof these elements so what this event is\nis the global on event attribute and\nthis way of creating an event to an\nelement works pretty much like any\nattribute we inserted directly into the\nhtml element that's present on the page\nor the element we want to apply the\nevent to and then apply a one line of\nscript to that particular element which\nin this case is going to be this button\nhere for our first example so we'll go\ninside the opening tag here like we did\nwith any other sort of attribute and\nthen we include whichever event we'd\nlike to happen for this example we're\ngoing to use an on click event so we'll\nsay on click and what i want to fire off\nwhen we click on this button is just to\nshow us an alert box that has the\ncontent of i love javascript so we'll\nput in here\nalert and then we'll put the content of\ni\nlove\njava\nscript and that's all we need to write\nfor this attribute so the syntax for\nthis as you can see is pretty simple\nwe've included the on click event\nattribute so when we click on the\nspecific button in the browser now the\nevent will fire off and the alert\nfunction will be executed which will\nhave the text i love javascript inside\nof it so we'll head into the browser now\nand i'm going to click on this button\nhere\nand as you can see when i click on the\nbutton the alert box pops up and it's\ngot the content of our love javascript\nwhich we wrote inside of this attribute\nhere so that's the first way we could\ninclude an event in our projects which\nis just direct into the html on that\nelement we will apply the event to so\npretty simple and probably the most\ndirect method of including an event\nlistener inside of our project now the\nnext method to create an event listener\nis the javascript ad event listener\nmethod so to create that we'll head back\ninside our app.js file and the way this\nmethod works is first include a element\nthat we want to apply the event listener\nto so we'll just put in here element\nand then we use the add\nevent\nlistener\nmethod and then inside of here we\ninclude the type of event in this\nexample we'll use another click event\nand then after this the second parameter\nis the function we want to fire off\nand then we also have an option here for\na third parameter which will take in a\nboolean data type so true or false and\nthis is in relation to bubbling and\ncapturing which we will speak about in a\nmoment but we're not going to include\nthat at the moment because by default\nit's already false so it's not too\nimportant yet so we'll just close that\noff so that's essentially the syntax\ni've had an event list now using the ad\nevent listener method so for this\nexample we're going to use the example 2\nbutton here and again we're going to\ncreate another alert box\nso the first thing we want to do is\ncreate a variable\nfor us to\nreference from so we'll call it button\n2.\nand\nthe button\ntwo in the html here you can see has a\nclass of btn so we're gonna retrieve\nthat so document.queryselector\nand then\ngrab the btn\n2\nand then first we want to create a\ncallback function\nso the function we'll call this\nalert\nbtn\nand inside of here we'll just put\nanother alert box\nand then type in here i\nalso love\njava\nscript and then what we need to do now\nis include our event listener so i'm\njust gonna copy the syntax\npaste in here the element\nis that button two so we've got our\nadvent listener method there\nand then the function is gonna be that\nalert\nbtn and we've got a little i'm saying oh\nwe've got the e in listener\nso what we've done now is included a\nclick event on the uh button two which\nis this button here so when we click on\nthis this alert box should fire off and\nshould appear at the top of the screen\nwith the content again of i also love\njavascript so let's test this out\nand as you can see now this event is\nworking and we're getting our alert box\nwhich has the content of i also love\njavascript so that's how we can use the\nadvantage listener method here\nso let's take a look at a another\nexample for example three so instead of\na click event we'll look at a mouse over\nevent\nso uh\nsay mouse over here so for this example\ninstead of clicking on a button here\nwhen i move the mouse over i want the\nbackground of this whole box to change\nso to do that let's first grab i think\nit's\nbox three so we'll create a variable for\nit\nand we'll call this variable new\nbackground color\ngrab the box so document.query selector\nand it's\nbox\nthree then we'll first create the\nfunction so we'll say function\nchange\nvg\ncolor\nso we'll grab that variable now new\nbackground color\nstyle\ndot\nbackground\ncolor\nand let's set it to the color of blue\nand then uh\nwe'll now include that mouse over event\nso we'll grab the variable add event\nlistener method\nuh and we'll say\nmouse over\nand then the function which is change\nvg color\nso if i head over to example three if i\nnow move the mouse over the box here it\nshould change its background color to\nblue\nand as you can see that's working as it\nshould manage to change the style of our\nthird box using the mouse over event and\nthe event listener method now generally\npeople do tend to use the ad event\nlistener method more than the html on\nevent method typically because you can\napply as many event listeners to an\nelement through the ad event listener\nmethod whereas with the html on event\nmethod you can only apply it once so if\nyou had one event already on a html\nelement and then you try to plan another\none that new one would override the old\none but again if you only want to apply\none event the on event method works\nperfectly fine so these were some really\nbasic example guys of how we can\nimplement event listeners we'll now take\nthings a little step further by creating\na reveal hide event where we click a\nbutton to display some text which is\noriginally hidden\nall right guys so the really cool thing\nabout event listeners is that we can\ncombine them with css and other\njavascript tools to create interactive\nand fun constructs which for this part\nof the tutorial is our simple example\nhere where we have a button and then\nwhen i click on this button you can see\nit reveals more text if i click on the\nbutton again it hides the text now the\nhtml for this example is really simple\nso we've got a div here with a colossal\ncontainer inside of that div we've got a\nbutton element which has the class of\nreveal btn and the class of boxes which\nis just a general class underneath that\nwe have it with a class of hidden\ncontent which has all of our dummy text\ninside of it this also has a class of\nboxes\nand this is what it currently looks like\nright now in our live server now the\nfirst thing i want to do here is go into\napp.js file and create two constants so\nwe grab those two elements so the first\none is going to be for our button we'll\njust call this\nreveal\nbtn\nand then we'll say document\ndot query selector\nand we'll grab that element which has a\nclass of reveal btn and then we want to\ncreate another constant for our hidden\nsection so we'll call this uh\nlet's call this hidden content\nand then document.queryselector\nand then grab a class of\nhidden\ncontent which i think\nyeah\nso we've got our two constants there the\nnext thing i want to do now is create a\ncallback function which will check if\nour hidden content here has the class of\nreveal btn now i will explain this in\nmore depth but for now let's just create\nthat function so we're going to create\nthat function we'll call this function\nreveal content\nand then inside the curly braces here we\nwant to use an if else statement so\nwe'll use the if statement first\ninside the brackets is our condition so\nwe'll say\nif our hidden content grab the class\nlist property\ncontains class of reveal btn\nso there's our condition the code that\nwe want to execute if this condition is\ntrue grab the hidden content grab the\nclasslist property and we want to\nactually remove\nthis class if it does contain the class\nso\nwe want to remove the class of reveal\nbtn again this will make more sense in\njust a moment but we're just going to\nwrite this out for now\nelse\nif it doesn't contain that class of\nreveal btn and we want to grab the\nhidden content classes property then we\nwant to add that class\nof reveal\nbtn\nnow the next thing we want to do now\nis\ninclude our event listener so we want to\napply the event list now on our uh\nbutton here\nso say reveal btn\nadd event listener and we want to look\nout for a click event\nand then the function we want to run off\nis the reveal content function we just\ncreated and the last thing we'll do now\nis visually hide our div here which has\nthe dummy text so we do that inside our\nstyle sheet so we'll go inside the\ninternal style sheet here\ngrab the class of hidden\ncontent\nand we'll say display none\nand then when the function runs off and\nit does include our class of reveal btn\nwe want to grab the hidden content grab\nthe reveal\nbtn\nclass and then we want to display as\nblock\nso this now should be working so if i\nclick on our button you can see it\nreveals our paragraph i click on the\nbutton again it hides the content so\nwhat we're essentially saying here is\nthat depending on the current state of\nour hidden content here javascript will\neither add or remove the reveal btn\nclass so in its current state right now\nthis button here does not have the class\nof reveal btn and hence why it's not\ndisplaying because we've set this here\nto none when we do click on this button\nit will display as block because we've\nadded our event listener here which\nlooks out for a click it will run\nthrough this function it will check here\nif it does contain the reveal btn which\nit doesn't so if it doesn't we've got\nour else statement here which will add\nthat class will reveal btn and because\nwe've set it as block here it will now\ndisplay it if we click on the button and\nas you can see it's displaying it now\nand if we click on this button again it\nwill run through our function here and\nit will first check if it contains the\nclass of reveal btn which it does\ncurrently in this state so it will\nremove that class of btn and because in\nour internal style sheet here we've set\nthe display to none it will effectively\nhide our content and just show us the\nbutton here so if i just show you guys\nwhat that looks like if i just comment\nout the remove section if i click on the\nbutton it will display it because\ncurrently right now it's added the class\nof reveal btn if i click on this now you\ncan see now it's still displaying the\ntext because in our if statement here we\nno longer have the ability to remove\nthat class so that's how we can create\nreally basic reveal hard functionality\nusing event listeners which looks pretty\nsimple but this technique actually can\nbe used for many different things so for\ninstance you can use it for things like\ntoggling a menu on small screens so when\nyou see that hamburger menu or you can\ndisplay error messages with this and\nmany more things you can do so guys\nthat's how we can create events in\njavascript how we can fire off different\ntypes of events and again there are\nloads of different types of events we\ncan create and i'll leave a link in the\ndescription for you guys if you guys\nwant to check those out now this is\nactually just scratching at the surface\nof event listeners there are some things\nlurking underneath or more appropriately\nput lurking behind the scenes of event\nlisteners and that is event propagation\nand event delegation let's first take a\nlook at what event propagation is and\nwhat it means now event propagation\nrefers to how an event travels through\nthe document object model or the dom\ntree and you can think of event\npropagation as electricity running\nthrough a wire until it reaches its\ndestination now as we're fully aware the\ndom is full of nodes and when referring\nto event propagation and events the\nevent needs to pass through every node\non the dom until it reaches the end or\nis forcibly stopped\nnow event propagation is also the\numbrella term which is used to cover\nthree phases when dealing with event\nlisteners you first got the event\ncapturing then you've got the target and\nthen you've got the event bubbling now\nin the simplest definition the capturing\nphase starts from the root and travels\nall the way to the target after it's\nreached the target it goes into the\nbubbling phase which travels back up\nfrom the target to the root so to better\nunderstand this let's take a look at a\nvisual representation of the event\npropagation so in this slide you can see\nwe have a basic diagram of our three\nphases now imagine that our button at\nthe bottom here has a click event\nattached to it and is being clicked now\nwhen this happens javascript behind the\nscenes starts three phases first it\nbegins with the capture phase where it\nstarts at the highest level of the dom\nand it'll trickle all the way down i\nwill notify each element so it will\nnotify the html element the body and the\ndiv and tell it that something\nunderneath it is being clicked so again\ngoing back to that analogy of\nelectricity running through a wire so\nthis will trickle until it reaches the\ntarget phase this phase is a dom node in\nwhich we click so in our example the\nbutton here at the bottom has a click\nevent attached to it so this would be\nthe target and essentially our target\nphase so once this target phase is\ntriggered the next phase is what we'd\ncall the bubbling phase which is\nessentially just the opposite of the\ncapture phase this travels back up the\ndom and notifies every element so the\ndiv the body the html the document all\nthe way up to the highest level period\nof the target again this is all\nhappening behind the scenes and it's\nalmost instantaneous so let's go ahead\ninto vs code now and take a look at what\nthis looks like in the browser and the\nconsole all right guys so we're inside\nthis code here and you can see in our\nexample here we have several elements\nnesting inside of each other if you take\na look at the html the markup is pretty\nsimple for this so we've got our div\nwhich has a class of div two inside of\nthat we've got another div with the\nclass of div one and then inside of that\ndiv we have a button element so this is\nwhat it looks like in the browser and as\nyou can see it just has some basic\nstyling now if we head into the\njavascript here you can see we have\nevent listings on pretty much everything\nin the dom tree so we've got one for the\nwindow we've got one for the document\nwe've got one for the div two div one\nand then the button here now as you can\nsee i've set this up a little bit\ndifferently in regards to the event\nlisteners instead of creating a variable\nfor the window the document as well as\nthe elements here i've just added the\nevent listeners directly after now\ncreating a variable and doing it this\nway both work perfectly fine but for\nthis example there's less code here and\nit just saves me scrolling up and down a\nbunch of times which can be a pain for\npeople now in regards to the events\nthemselves you can see their click\nevents and as for the functions they\njust simply log in their respective name\nin the dom tree except for the button\nhere now instead of the text you can see\nwe've included an e inside of the\nfunctions parameters as well as the\ninside the function we're logging in\nthat e now i will explain what this is\nin just a moment but first i just want\nto draw your attention to the third\nparameter inside of all these event\nlisteners so if i highlight them all for\nyou now\nyou can see they all have a boolean\nvalue of true now if you guys remember\nback to a bit earlier in the video when\nwe were learning about the ad event\nlistener method there was a third\noptional parameter we could include well\nthis the parameter dictates whether we\nwant to use event capture or event\nbubbling so let's go ahead and click on\nthe button here in the browser and see\nwhat this gives us in the console so as\nyou can see now in the console it's\ngiving us the first phase which is the\ncapture phase so it's starting from the\nwindow and then it's going down and\nnotifying all the other elements it\ncomes across all the way down to the\ntarget which is saying is this pointer\nevent\nnow the stuff that you see here\nrepresents all of the information about\nthat event so this is exactly what that\ne means inside of our function here\nwhich is inside of our button so this e\nrepresents the event object and again\nthis is exactly what you see here in the\nconsole all this information is about\nthat event that has occurred on this\nbutton so if i open this up you can see\nall the different properties and\ninformation about our event here so\nwe've got all sorts of things we can\ntake a look at and utilize so we can\nfind out what type it is we know it's a\nclick event we can check out where\nexactly that button is exactly on the\nscreen in a browser on the x and y axis\nwe can also check things like whether\nthe shift key here has been pushed down\nsame false because we didn't use the\nshift key\nso all sorts of things that we can use\nhere and utilize now the main property i\nwant to bring your attention to and the\nrelevant one to the three phases is the\ntarget property here so this here you\ncan see it's saying the button so this\nproperty represents the element that the\nevent is actually on so again it relates\nto our target phase so if i actually go\ninto our console here and i type in here\ndot target\nand i'll just refresh this and i click\non the button again you can see now it's\nstarting from the window going to the\ndocument div two div one because we're\nusing the target property to show us\nwhat element the event is on which again\nis our button now again we can do some\nother cool things here so let's just say\nfor example when we click on this button\num we'll just change the text to say\nclicked so after the target\nwe say dot in our text and set this to\nequal it to\nsay clicked\nso what should happen if i click on the\nbutton it should change the text to\nclick so as you can see now in the\nconsole when we've clicked the button\nit's changing the text to click because\nwhat we've done is use the event object\nto grab the target which is the button\nand then from there we use the inner\ntext property and then change it to\nclick so when this function files off\nthe buttons text change to click so as\nyou can see here in the browser and if\nyou also take a look at the console you\ncan see we also see phase one so the\ncapturing phase so we start the window\ndocument div two div one and then click\nwhich is the button so that's the first\nand second phase how do we now initiate\nthe third phase which is the bubbling\nphase well to do that all we need to do\nis just grab all of the true values here\nfor our third parameter\nand just change them to false now these\nare actually false by default and if i\nclick on the button now\nyou can see it started from the button\nand then it's going to div 1 div 2\ndocument and then the window so it's\nbubbling upwards hence the term event\nbubbling so from the target it's\nbubbling up to the highest position in\nthe dom tree now there are ways we can\nactually stop event propagation so let's\njust say we wanted to stop the bubbling\num to happen at the second div we can do\nthat with the stop propagation method\nso let's go to the second div here\ninclude our event object\nthen inside of here we'll just say\ne dot stop\npropagation so what should happen now is\nwhen i click on this button once it\nreaches the second div we want the\npropagation to stop so we'll no longer\nbe able to see the events on the\ndocument and the window so if i click on\nthis you can see it's going from click\nto div one div two because we've stopped\nthe propagation in our function here now\nthis also applies to event capturing so\nif i grab all of the third parameters\nhere and change them to true so we're in\nthe capture phase\nand then i click on this button you can\nsee the opposite is happening because\nwe're starting from the window where the\ncap where the capture phase begins then\ngoes to the document and then goes to\ndiv two and then stops at div two\nbecause we've stopped the propagation so\nthat's how we can stop event propagation\nhappening forward capturing and bubbling\nanother useful ability we can utilize an\nevent bubbling is to have events far off\nonly once\nso for this example again we'll use div\ntwo and i'm just going to comment out\nthe stop propagation method there\ntake out the e and then\nchange with these two false even though\nthey're false by default um we'll just\nkeep it like this for consistency so\nagain if we only want div two to fire\noff once for our third parameter here\nwhat we can do is grab the once property\nand set this to true now if i click on\nthis button you can see it fires it all\noff as normal so it starts from the\nclick and bubbles up all the way to the\nwindow if i now click this button again\nyou can see it's starting from the\nbutton or the target going to div one\nbut now dev2 is no longer firing\nand then it goes on to the document and\nthen the window and then again if i\nclick this again you can see the div 2\nevent isn't far enough because again\nwhat we've done here is defined that we\nonly want this event to fire off once\nnow another common method you likely run\ninto is the prevent default method now\nwhat this method does is pretty\nself-explanatory really it just prevents\nany default behavior that might occur on\nan element or an event so this is quite\ndependent on the type of element\ninvolved and the context of an event so\nto see example of the prevent default\nmethod\nwhat i'm going to do is go into the\nindex.html and i'm just going to change\nthe button\nto an anchor tag\nand i'm going to give this a class\nof a button\nand i'm just going to put in here click\nand then\nuh we'll go where the styling is for the\nbutton and we'll make this a class\nand then what we'll also do is just put\nit on a new line so we'll say display\nblock\nbecause\nanchor tags are inline by default\nso we'll head into the app.js file and\nwhat also do is just make sure our query\nselector here is targeting that class of\nbutton so our anchor tag now and this\nevent listener here is now the target\nand the event and because we've changed\nthe button to an anchor tag if i click\non this now you can see it's firing off\nall the events but they quickly refresh\nand the reason it's doing this is\nbecause the default behavior of an\nanchor tag is to try and redirect us to\nsomewhere else and this is what's\ncausing this quick fire off of all the\nevents and then a refresh now we can\nstop this from happening with the\nprevent default method so to do that\nwe'll go inside\nour button here or the class of button\nand we'll grab the um\nevent object\nprevent\ndefault\nand if i click on the button now you can\nsee it's showing us the bubbling phase\nthe content has changed to click that\nit's staying there and all this has\nhappened now is because we apply the\nprevent default method onto our anchor\ntag so it's no longer trying to direct\nus somewhere else now we will see a more\npractical example of all the methods we\njust learned so the prevent default uh\nthe stop propagation in part two of the\ntutorial where we look at practical\nexamples and projects but i just wanted\nto make you guys aware of these um so\nthey don't confuse you in that\nsubsequent video\nnow the last thing i want to mention in\nthis tutorial guys is event delegation\nnow event delegation is one of the most\npotent event handling patterns inside\njavascript and the dom and what it does\nis allows users to append a single event\nlistener to a parent element that adds\nit to all of its present and future\ndescendants that match that selector now\nwhat we'll do is actually break this\ndefinition down to show you guys exactly\nwhat it means now the first part here\nwhere it says it allows users to append\nthe single event listener to a parent\nelement adds it to all of its present\nchildren to find out why this is useful\nlet's actually just go back a few steps\nand see how we get to event delegation\nso if we head back into the index.html\nfile you can see we've got an unordered\nlist which has a bunch of different\nsports inside of it now this honorable\nlist has an id of sports and then each\nof these list items have their own id\nwhich is equivalent to the content that\nyou see inside of each of the list items\nand this is what it looks like in the\nconsole now if i click on one of these\nlist items you can see it's showing us\nin the console that football's click and\nit also changes its background to a\nlight gray again to highlight that has\nbeen clicked and again this is going to\nbe the same for each individual list\nitem now to achieve this what we can do\nis apply event listeners to each\nindividual\nlist item that we have inside our\nunordered list so we'll head into the\napp.js file and we'll grab the first\nlist item so we'll say document dot\nquery selector grab the id of football\nadd the event list now\nand we're going to look out for a\nclick event\ngrab a function\ninside of the function we'll include the\nevent object\nand then inside of this function\nuh what we want to do is uh first just\nconsole log\nin\nlet's say\nsay football\nis clicked\nand then the next thing i want to do is\nchange that background color when we\nclick on the actual list item so to do\nthat we're going to first need to create\na constant so we're going to say\ncall this target and this is just going\nto equal e dot target which is that list\nitem\nand i'm going to say if\nand the condition we're going to put in\nhere\nis if target\nmatches\nso matches is just a method basically\nwhich essentially checks with the target\nwhich in this case is the list item\nmatches with our css selector which is\ngoing to be li this is going to return\ntrue and then when it returns through\nit's going to change our background\ncolor so after condition we want to\ninclude the code that we want to execute\nso we're going to say target\ndot\nstyle\ndot\nbackground\ncolor\nand we'll set that to\nlight\ngray\nand if we head into this folders live\nserver here you can see we have the\nexact same layout and what should happen\nnow if i click on the football list item\nthe background should change to a color\nof light gray and it should also show\nhere in the console so if i click on\nthis you can see saying football is\nclick and then it's changing the\nbackground to light gray because we've\njust created an event listener for it um\ninside the app.js file\nnow again if we wanted to do it for all\nof these what i need to do is just\nduplicate this\nfour more times\nso\ninstead of football here we have\nbasketball\nand then for the third one we have\nboxed\nfor the fourth one\nwe have\ntennis\nand then we'll create one more\nfor golf\nand now all the starter then the console\nlogs should be working for each of the\nlist items so we'll start with football\nsee that's working basketball's working\nboxing's working\ntennis and golf are also working so\nwe're getting the exact same thing as\nour draft example here\nexcept the text is a little bit\ndifferent but again it's the exact same\nstyling and you can see it's working\nperfectly fine now this is great and\nworks fine there's no real issue with\nthe code here because we're getting the\nexact same result as our draft example\nbut as you'll learn throughout your code\nand journey there are always questions\nto ask when you have written out your\ncode to help improve it so you can ask\nyourself things like can we remove some\nof this code can we remove some of the\nevent listeners and still achieve the\nsame result can this task be done\nwriting less code instead or can we even\noptimize this code and the simple answer\nreally is that we can we can write less\ncode here and achieve exactly the same\nresult using event delegation so the\nidea of event delegation is pretty\nsimple instead of attaching the event\nlisteners directly to each of the list\nitems here we can delegate the listening\nto the parent which is the ul here which\nhas the id of sports so that when the li\nis clicked the listener of the parent\nelement catches the bubbling event and\nperforms our task which change the color\nof our background to light gray when we\nclicked on one of the boxes and also\nshowcased some text inside of our\nconsole here so what we're going to do\nto achieve this now is go back to the\napp.js file and get rid of all this code\nhere\nand then we're first going to grab that\nunordered list element which has the id\nof sports\nso we'll say document dot query selector\nand then we'll say\nwe'll grab the id which is sports\nand add the event listener to this\nso a similar process it's going to be a\nclick event\nrudolph function which has\nthe event object inside its parameters\ninside of our function here\nwe want to say\nlet's console log that bit of text so\nwe'll say\ne dot target\ndot get\nattribute\nmethod of get attribute and we want to\nget the id\nand then we want to say plus\nwe'll put in here is\nclicked\nso what we're saying here is that when\nthe target which is our list items has\nan id attribute which all of them do\nwhichever one that we click on will\ndisplay that specific sport plus the\nextra bit of text here of is clicked so\nif i go ahead and click on one of these\nnow you can see it's saying football is\nclicked if i click on tennis you see\ntennis is click golf boxing and\nbasketball so you can see all of these\nnow are working because we've attached\nthat one event listener to the parent\nelement which catches the bubbling event\nand then performs our task which we've\nwritten in here now we also want to\nchange uh the background color when we\nclick on these so to do that first going\nto need to create a variable of um the\ntarget so we're going to say target\nit's going to equal e dot\ntarget which is those list items\nand then we're going to say\nif the target\nvariable there\nmatches our css selector which is our li\nwe're going to want to change the uh\nbackground so say target dot style dot\nback\nground\ncolor\nto a light gray so again if i click on\none of these now uh we're getting an\nerror um that's because i spelt\nmatches\nwrong\nso again if i click on one of these now\nyou can see the text will appear in the\nconsole highlighting which one i clicked\nand then we also now have the extra\nfeature of where the background changes\nto a light gray for all of our list\nitems there\nnow again this brings us back to our\nfirst um part of our definition which\nallows users to append a single event\nlistener to our parent element that adds\nit to all of its present children and as\nyou can see this is clear benefits\nranging from code quality as well as\ncode maintenance because instead of\nhaving all those lines of code um in the\nprevious example where we attached an\nevent listener to each of the list items\nwe now have it all inside one event\nlistener here now we've also improved\nour performance because having more\nevents in our code will take up a lot of\nmemory and using event delegation we're\ngoing to save a ton on memory which\nagain will vastly improve our\nperformance inside of our\nprojects now another crucial benefit of\nevent delegation is the second part of\nour definition here so the first part\nwas it allows users to append a single\nevent listener to a parent element that\nadds it to all of its present\ndescendants now the second part of this\ndefinition was that it also adds it to\nfuture descendants that match that\nselector so this is actually in regard\nto dynamic elements so let's just say we\nhad an add button here at the end of\nthis box where it allowed us to add\nanother sport to our list\nso let's actually just manually do this\nto show you guys exactly what i mean so\nfirst we're just going to create a\nconstant\nfor our um ul which has the idea of\nsports so we'll say const say sports\nequals document.queryselector\nand then we'll just grab the id of\nsports again which is that ul\nand then what we'll also do is create\nanother list item\nso we'll say const new\nsport\nequals document\ndot create\nelement\nand we'll create another list item\nand then what we'll do\nis uh\nwe'll say\nnew\nsport so that variable which is that new\nlist item\nuh we'll give it\nuh\nin a text\nof uh let's say\nlet's make the sport rugby and then\nwe'll also give it the uh\nid\nof rugby so we'll say set attribute\nfirst an id attribute and then we're\ngonna have\nthe uh id\nof rugby\nand then what we want to do is append\nthis now to our list so we'll grab\nthe sports variable which is the ul and\nwe'll say append\nchild\nand then the chart we want to append is\nof course that new sport so let me say\nnew\nsport\nso as you can see now rugby has been\nadded to our list here so if i click on\nthis it's got the exact same styling and\nthe output in the console like the rest\nof the list items would because we now\nhave an event listener to the parent\nwhich is the ul and because of event\ndelegation we've delegated the event to\nthe parent and as you can see this gives\nus the power to dynamically add new list\nitems and those new list items will\ndisplay the same behavior so again\nwithout the magic of event delegation\nwe'd have to use the method we\npreviously used we would have to include\nevent listeners to each individual list\nitems and that includes any new list\nitems that might get added on along the\nway which will just clog up memory\neffect performance and just create too\nmuch unnecessary code so that's going to\nbe it for this video guys in this video\nwe're going to be using everything we\nlearned in part one and applying it to\nfive different projects ranging from\nbeginner to master level\nso just like in part one guys there's\ngoing to be a few prerequisites in order\nto effectively understand the dom and\nhow it relates to these projects i\nhighly recommend checking out part one\nfirst as well as also having an existing\nknowledge of html and css\nnow in regards to styling we're not\ngonna be focusing too much on it for our\nprojects because this isn't really the\ngoal of the course however there will be\nsubstantial css styling involved and\nthen lastly it's going to be essential\nto have familiarity with the\nfundamentals of javascript and the\nsyntax and the code structure because\nobviously we're going to be using\njavascript in this course all right guys\nso our first project for this course is\ngoing to be this beginner friendly quote\ngenerator that houses a quote and then\nhas a reference by someone famous\nunderneath it now underneath that\nreference of that famous person we have\na button which says new quote and if i\nclick on this you'll see it'll just\ngenerate us some new quotes by someone\nelse famous so pretty cool design and\nquite simple to create now some of the\nkey concepts we're going to need for\nthis project is document.queryselector\nadd event listener of course the math\nobject and in a text property so now we\nknow what we're creating and the key\nconcept we're going to need let's head\ninto vs code now and create our quote\ngenerator\nall right so we're inside vs code and\nyou can see we're inside a folder called\nmaster dom manipulation part 2\ninside of an index.html file as well as\nhaving a style.css file and a javascript\nfile for our project one and also have\nan image folder which has all of our\nimages which is just going to be the\nbackground uh image for all of our\nprojects so the first thing we'll do is\ninclude a link to our style sheet so\nwe'll go inside here\nand we'll grab style.css now the next\nthing i'm going to do is go and get a\ngoogle font so we'll head over to google\nand the global font we're going to be\nusing for our project is going to be a\nroboto regular 400. so we'll just grab\nthe link here inside google fonts\nhead back into vs code and then just\npaste it underneath the style sheet\nthere and then just\ntab this over so it is looking all neat\nand what we'll do as well is just\nput a comment here so uh\nglobal\nfont\nlinks and we'll do the same for the\nstyle sheet\nand then lastly what we'll include in\nthe head tag is just a link to font\nawesome so we can grab all of our icons\nthat we're going to be using throughout\nthe project so we're heading to our font\nawesome cdn here and then we click the\nfirst link so we copy the link tag head\nback into vs code and then just paste it\nunder our google fonts so we'll just say\nfont\nawesome\ni think\nplace that in there\nclose that off and then let's open this\nup with live server so we have our blank\ncanvas\nand we can see all of our work and we'll\nsplit screen this\nand just\na bit smaller\nso we're ready to start a markup for our\nfirst project so if we take a look at\nthe original example you can see we have\ntwo sections here so we have our heading\nand then we also have the main section\nwhich houses the quote uh the famous\nperson and the button so\nwe'll head inside the body\nwe just put a comment here for\nproject\none\nquote\ngenerator\nand\nwe're going to house this project inside\na div the class of container hit tab\nand then again we're going to need a\nheader so we'll just put another div\nhere with\na class of header\nput in here a h2 and we'll say\njava\nscript\nquote\ngenerator so you'll see that there in\nlive server and then underneath the\nheader we're gonna have this content\nhere which has the quote as well as the\nname of that specific person who said\nthe quote and then the button underneath\nwhich will um generate a new quote for\nus\nso we'll get back into this blank canvas\nthere we'll go underneath the header and\nwe'll just create a div with the class\nof main content which again is just\ngoing to house everything\nscroll down a little bit and then the\nfirst thing we need is the actual text\narea so we can just put div\ncall it text\narea\ninside of that we want to have a span\nwhich has the class of quote which is\ngoing to be our quote and then i'm going\nto paste our quote inside of here which\nis the exact same as the original\nexample and then underneath the text\narea div we want to have a div for the\nactual um\nfamous person who said the quote let's\nkeep it simple and just say person\nhit tab\nand then this person for this quote is\nabraham\nlincoln\nso we have our quote now as well as\nhaving the person who said the quote and\nthen of course underneath this\nwe're going to have the button so we'll\nhouse the button inside of a div with\nthe class of button area and this is\ngoing to house our button so this button\nis going to have an id of\nsay new\nquotes we're going to need to\ngrab onto this later\nand we'll just put in here\ntext of new\nquote\nso that's essentially it for our markup\nlet's head into the style sheet now and\njust apply some general styles first\nso what you put in here general\nstyles\nso we use the asterisk to grab\neverything and we're going to say\nmargin zero\npadding\nzero\nbox size into border box\nlet's also make sure that the uh font\nfamily for all of our projects is\nour lato font\nuh we'll just have sans serif as a\nbackup\nand then let's first grab the body\nelement\nbecause we want to\nuse display flex to center everything\nso we'll say justify content to the\ncenter align items\nto the center\nlet's use the height\nand make it\na thousand one hundred viewport heights\nwhich would be the height whole height\nof our um window there and then let's\nalso text the line everything to the\ncenter\nand then the next thing i'll do is\ninclude our background image for our\nfirst project which is this sort of\nlibrary image here\nso to do that we'll grab the background\nproperty url\ngrab the image folder head inside it and\ngrab project one\nnow this is way too big at the moment so\nthe first thing i want to do is\nadd a few more bits of styling so no\nrepeat\nuh we want to center\neverything on the x and y and then we\nwant this to cover\nthe whole body so as you can see now it\nlooks pretty much exactly the same\nas our original example\nso that's it for the body there next\nthing i want to do now is grab the\ncontainer class which houses everything\ni'm going to give this a width of\n550 pixels\na height of 450 pixels\nnow the next thing we'll do is just\nstyle our heading which is the\njavascript quote generator text there\nso we'll grab the header class\nand let's uh increase the font size of\nthis to say about 1.2 rem\nand let's give this a border of solid\nsay about 2 pixels\nand make it a nice white color change\nthe color of the text to white\nuh let's make that a bit clearer so\nwe'll change the background color to uh\na bit of a darker gray\nlet's also add a bit of padding there\nbetween the text and the border so about\nfive pixels\nand let's make the width of this to be\nabout say about\neighty percent\nset the margin\nto uh let's say 20 pixels from top and\nbottom and about\nand then auto on the left and right so\nthis is centered\nnow let's actually make the edges of our\nborder here a bit more rounder\nso we'll use the\nborder radius method\nproperty\nlet's\nmake it about five pixels\ni just think that looks a little bit\nbetter so that's it for our heading now\nlet's grab the uh\nmain content which is basically just all\nof our content here so the um\nquote the\nperson who said the quote and then the\nbutton itself\nso this is a class of main\ncontent\nso what i want to do is just make the\nwidth of this\n100\nthe height\nlet's make about 300 pixels\nthe padding\nlet's give this a background color of\nwhite\nso there's our content\nlet's also\nmake the edges more rounded so\nsay border radius so about 15 pixels\nlet's uh also add a bit of padding here\nbetween the content\nand the edges so we'll say\nit's about 50 pixels on the top and\nbottom about 40 pixels on the left and\nright\nuh\nnext thing i want to do is actually give\nthis a box shadow so it gives it more of\nlike a 3d look so let's say zero on the\nx and y\nlet's put about 10 pixels blur so the\nbox shadows all the way around which i\nthink looks a lot better there\nnow let's uh\nstyle the text or the quote so this is\nthe main content\nand the text\narea\nso let's just give this a font size\nabout let's say 1.5 ram see what that\nlooks like\nyeah i think that looks pretty good\nlet's also add a bit of line height here\n1.5\ngive it a bit of breathing room\nand uh\nyeah i think that looks pretty good\nnow we want to style the person\nwho says the quote\nso we'll say\nmain\nmain content\ndot person\nand let's increase the uh\nsize of the text so we'll say font size\nlet's say about\n1.6 rem\nyeah looks pretty good\nchange the color\nto red\nuh let's\nthink the original is capitalized so\ntext decoration\nuppercase\nso text\ntransform\nuppercase\nnow of course we want to add a bit of\nmargin here so let's say margin\ntop it's about 20 pixels\nso i think that's starting to look a lot\nlike the original\nas you can see there\nnow let's uh\nlet's now start the button\nso\nwe'll grab the uh\nbutton\narea\nwhich uh houses the button\nand we'll grab the actual button itself\nuh so um let's\nchange the background color\nto that dark gray\nlet's change the color of the text so we\ncan see it\nto white\nand let's uh increase the font size of\nthis\nto say 1.2 rem\nlet's actually make that a bit bigger\n1.3\nand then let's add a bit padding of\ncourse so i'll say 10 pixels on the top\nbottom\nabout 15 pixels on the left and right\nlet's also add a bit of margin to the\ntop of this to separate it from that\ntext there\nmargin top let's say about\n20 pixels\nand then let's make it rounded on the\nedges so border radius\nlet's say about five pixels\nso the last thing i want to do here is\nthat when we click on this\num you can see in the original when we\nclick on this it actually uh changes\ncolor\nso we need to change its active state\nso we'll just grab this\nand let's grab the active\npseudo class\nand we'll say the background\ncolor let's make it a light\nblue so that's pretty much it for the\nstyling all we need to do now is start\napplying some logic to this so we can\ngenerate new quotes when we click on\nthis new quote button so the first thing\nwe're going to need to do is head into\nthe index.html\nfile and just go underneath all this\ncontent here and just put\na comment for scripts because this is\nwhere we're gonna be placing all of our\nscripts\nand then we're just gonna link to that\nscript file\nor our first script file so we'll sort\nit to\nit's called project\none dot js\nso we've linked it to our javascript\nfile so we'll head into that the first\nthing we're going to need to do is just\ncreate some variables so we're in the\nvariable for our button here as well as\nthe quote and the person that said the\nquote\nso we'll just put a comment here saying\nvariables and we'll say\nlet btn equal\ndocument dot query selector\nand then we'll select the um\nbutton which has an id of new\nquote so we've stored our button inside\nthat variable there we'll create another\nvariable now for our\nquote itself so we'll just call this\nquote\nwe'll set this to document.queryselector\nand i believe this has a class of\nquote\nclose that off so now we've stored the\nspan which has the quote inside of it\ninside that variable there\nand then lastly we're going to need one\nmore for the person\nand we'll say document dot\nquery selector\nand this has a class of\nperson so we've got our three variables\nthere now the next thing we're going to\nneed is array for all of our quotes so\nwe'll call this array uh let's call it\nquotes now i'm going to copy and paste\nall the quotes i used in the original\nexample um which i just found on the\ninternet i'm not really sure if they\nthose individuals actually said those\nquotes if you guys want to use different\nquotes and people for your\nquote generator feel free to do so so\ni'm just going to paste those in there\nso there's all our quotes there which i\nthink is a total of 10 quotes so the\nnext thing we're going to do here is now\napply an event listener to our button\nhere so when we click on this button of\nnew quote it will generate a new quote\nfor us so one of these quotes by one of\nthese individuals\nso we'll go underneath the array and\nwe'll say\nbtn.ad event listener and we're going to\nlook out for a click event\nand we're going to have a function\nnow inside of our function here we're\nfirst going to need to create a variable\nwhich houses a basic math equation which\nis essentially just going to involve the\nbuilt-in math object and a couple of its\nmethods\nso let's call this variable let's call\nit let random now as i just mentioned\njavascript has that built in math object\nand this object has several methods now\nthe two that we're going to be using in\nthis equation are math.floor and\nmath.random now i will go over the\nequation again but i first just going to\ncreate it quickly because it's just a\nbit easier to explain so let random is\ngoing to equal math\ndot floor and then inside of this method\nhere we're going to have\nmath again dot random\nand we're going to times this by\nour\nquotes array dot length\nwhich is essentially just all the quotes\nin our array so again how this equation\nis working is that the math.random times\nthe quotes dot length will generate a\nnumber between zero and the total number\nof quotes inside of our quote array now\nbecause math.random doesn't actually\ngenerate a whole number we need to wrap\nthis equation in math.floor or the floor\nmethod which essentially just rounds a\nnumber downwards to the nearest integer\nand what this will do now is allow us to\naccess our properties inside of our\narray which are the variables of quote\nand person so that's essentially how\nthis variable and this math equation is\nworking here now this equation will\nrandomize through our quotes array\nhowever we need to display the quote and\nperson inside of our array to a string\nformat so to do that we'll go underneath\nthe variable here and we'll grab\nlet's grab\nuh quote first\nand we need to change the inner\ntext\nand then we're going to set this to\nequal\nthe quotes\narray\nsquare brackets to turn it into a string\nformat and we'll put in the random\nvariable and we'll say\ndot\nquote\nand then we'll do the exact same thing\nbut we'll do it for\nperson\nso i'll just change this to person and\nthis now should randomize through our\nquotes array and display new quotes said\nby different people so if we go to the\nbutton and we click on the button it's\ngenerated us new quotes and it's also\ngiving us different people who have said\nthose quotes\nand that is our first project completed\nso a pretty cool project and pretty\nstraightforward to create all right guys\nso the next project this course is the\nbeginner plus project which is a modal\nnow a motor is essentially just a ui\nelement that appears in the foreground\nof a website and they're usually\ntriggered by the user allowing them to\nview more information or complete an\naction without having to navigate to\nanother url in our case it's just going\nto show more information so we have our\nui element here in the foreground and\nthen if i click on this you can see\nanother box animates downwards the rest\nof the content darkens so it puts a lot\nmore focus in the box in the middle and\nthat's essentially what our model is\nhere now of course in this box you'd\nlikely have more information but i just\nwanted to keep it simple uh for this\nexample\nnow the key concepts we're going to need\nfor this project switched up a little\nbit we're going to be using the\ndocument.elementbyid\nof course the ad event listener method\nthe e.target and we're going to be using\ncss styling throughout javascript and\nwe're also going to include some css\nanimation in this project so let's head\ninto vs code now and create our model\nall right guys so we're back inside our\nmaster dom manipulation part two folder\nand as you can see we've got our blank\ncanvas there open up in live server so\nthe first thing we're going to need uh\nfor our markup it's just gonna be the\nmodal open button so we'll just put a\ncomment in here model\nopen\nbutton\nwhich is the button if we take a look at\nthe original example uh this button here\nwhich is going to trigger our model so\nwe're just going to have a button this\nis going to have an id of\nopen\nbtn because we're going to be using a\nelement by id for this example\nand we're just going to put a paragraph\ntag in here and this is just going to\nhave the text of\nwhere's uh\nmodel\nso that's it for the open button now the\nnext thing we're gonna need is the\nactual model itself so i'm just gonna\nput a comment in here say modal and\nmodal\nbackground\nso we're going to have a div\nwith the id of\nmodal\ncontainer\ninside of that we're going to have our\ndiv with the id of modal which is going\nto be our modal\nparagraph tag inside of that which is\ngoing to say here\ni\nam and then underneath that we're going\nto have another div which is going to be\nour close button so we're just going to\nhave\nlet's say div we'll give this an id of\nclose\nbtn\nand to create that x we're just going to\nbe using a html entity so it's going to\nbe an ampersand times\nsemicolon and that's going to be that\ncross that you can see there so that's\nall we're going to need for the markup\nthe next thing i want to do is\njust quickly\nuh comment out this script for project\none but duplicate this and then\nlink it to project two so if i actually\nopen this up you can see i've created\nanother um js file which is project two\njust close that back up so the next\nthing i want to do now is just apply\nsome styling so we're heading inside the\nstyle shape and the first thing i'm\ngonna do is get that background image\nthat you see here in the original\nexample\nso we're just going to grab the body and\nwe're going to change the background\nto url\nand this is going to be the image folder\nproject two\nand then apply those same rules that we\ndid in the previous example so no repeat\ncenter\ncenter and then we're gonna have cover\nso we'll be able to see the image there\nand then to make it the whole heart of\nthe browser should change the height to\n100 viewport heights\nso there's our image now the next thing\ni want to do is actually position this\nrelative because i want to initially\nposition our button here a little bit\nfurther down and slightly to the right\njust like it is in our example here\nso\nwhat we're going to do is now grab that\nbutton\nwhich has the id of open\nbutton i'm just going to open our module\nset the position of this to be absolute\nso we can now position this anywhere\num on our browser there i'm going to say\ntop\nsay\nabout 70\nand then let's also\nfrom the left\n10\nnow let's start giving this a bit of\nstyling so it looks a little bit better\nuh we'll give this a width of\n350 pixels\nmake it a bit bigger\nand we'll also give it a height\nlet's set about 80 pixels\nuh let's make the font size a bit bigger\nlet's say about two ram see what that\nlooks like\nyeah it looks pretty good and\nlet's\nmake the background\ntransparent just like the original\nchange the color of the text\nto white so we can see it\num let's also\nchange the color of the border\nuh\nlet's make it solid two pixels\nwhite\nnow let's also\nuh let's add a bit of uh border radius\nto the edges\njust because i think it looks a lot\nneater when the edges are rounded uh so\nlet's say about 10 pixels\nand maybe a bit padding\nit's also about five pixels there\nthat looks pretty good let's also\nuse our good friend box shadow\ngive it that nice 3d effect\nso we say zero on the x and y but three\npixels blur so it goes all the way\naround\nuh let's make it black\nyeah looks good\num\nnow\nif we take a look at the original you\ncan see\nthere's an effect on there so we need to\nadd a transition\nuh\ntransition say about\nfive seconds\nuh so that's pretty much it for that\nstyling the next thing i want to do\nobviously is add a bit of a hover effect\nso we'll just grab this\nso we'll just grab\nthis and\npaste it in here over effect\nwe'll hover class and we'll change the\nbackground color\nuh\nlet me choose the background\ncolor to\nwhite and then the text\nto\nuh black\nso there's that effect which is the\nexact same\nas our original there\nthat looks pretty good now the next\nthing i want to do is style our model\nhere which is going to be that box that\num shows up when we click on this button\nhere\nso uh has the class of\nmodal\nand then we'll change the background\ncolor of this to be white\nwe'll\nset the position of this\nto be\nabsolute\nthen we'll say\nscroll down so you can see we'll say top\n50\nleft\n50\nand then transform\ntranslate\nand we'll say uh\nnegative 50\nand negative 50 which would basically\njust uh center this in the middle so\nthis is just another way to actually\ncenter content instead of using flexbox\nor css grid now\ni want this to be a bit bigger so we'll\nsay width so 200 pixels\nheight\nlet's say 100 pixels\num give it a bit of padding\non the top and bottom and then 20 on the\nleft and right\nuh the old classic border radius\ngive it\nrounded edges\nand then uh the font size let's make\nthis a bit bigger\nlet's say 1.5 rim now this is actually\nnot going to display at the moment but i\njust want to create the styling here um\nso we don't have to do it afterwards now\nthis model is actually wrapped inside of\nthe modal container which we're going to\nbe displaying as none initially because\nwe don't actually want this to show but\ni just wanted to start everything first\nbefore i make this sort of disappear\ninitially\nnow the next thing i want to do is if we\ntake a look at the original example\nyou can see that the text is on the left\nand the x is on the right so to do that\nwe're going to be using\ndisplay\nflex\nso we have like a nested flexbox\nand then we'll just say justify\ncontent\nspace\nbetween\nand then we'll align the items\nvertically to the center\nnow if we take a look again at the\nprevious example click off this you can\nsee this actually animates from the top\nso we're going to be using keyframes uh\nto do this\nso\ni'm going to create an animation um\nsay animation animation\nname we're going to call this animate\nmodal\nand then we want the animation\nduration which is going to be 0.4\nseconds we'll create this animation\nright at the end but i just wanted to\nagain put all the styling on this modal\nuh first before we get to that so the\nnext thing i'm going to do is style the\ncross here\nso this has a class\nof not class rated id of\nclosed btn\nfont size\num\nlet's make this about\nthree rem\nso it's nice and big\nand then let's apply a hover to this so\nwhen we hover over it it turns red so\nclose btn\num let's make it also a cursor pointer\nuh font\nsize\nlet's also make sure this is three rem\nand then change the color\nto a red color so say f\n0 0\n0.\nso there's our cross there now just to\nquickly mention guys this is the same\nstyle sheet we were using\nin the previous project so it has those\ngeneral styles there\njust in case that confused some people\nbut anyway uh we've done the modal now\nso what we need to do is actually grab\nthe modal container and actually\ninitially make this disappear so\nwe'll grab the modal\ncontainer\nand we'll display this as none\ncomment this out so we can still see it\nbut what i want to do is actually\nposition this\nto fixed\nso it's right at the top there and we'll\nsay top\nzero\nand then\nleft\nzero\nwidth\none hundred\npercent and then the height\nto also be\n100\nand then have the z index here\nlet's have this at one so it's above\neverything\nso let's just uncomment this now so we\ncan no longer see it so that's nearly it\nfor the styling um there's still some\nstyling in regards to the animation\nwhich we can do in just a moment but\nlet's first start applying some\njavascript to this so we're heading to\nthe project 2.js file and the first\nthing we're going to need to do is just\ncreate some variables so one for the\nopen button one for the modal container\nand then one for the close button so\nwe'll just put in here\ncomment for variables\nwe'll say let open\nvtn equal\ndocument.getelementbyid which you're\ngoing to be using for this example\nand this has an id of\nopen\nvtn\nand then we'll create another one for\nthe\nmodal container so we'll say modal\ncontainer equals document\ndot\nget element by id\nand this has an id of modal\ncontainer\nand then one more for the\nclose button\nso close btn\nequals\ndocument dot\nget element\niid\nand this has an idea of\nclose\nbtn so that's it for the variables the\nnext thing i want to do is now start\nwriting out our of event listeners so\nwe'll just put in here event\nlisteners\nso the first one we're going to apply it\nto\nis the uh open btn variable so the open\nbutton so we'll say open btn so add\nevent listener\nlook out for a click event\nfunction\nand inside of this function we're going\nto be using css styling so we're going\nto grab the modal container\nand we're going to grab the style\nattribute and then inside the star we're\ngoing to be using the display property\nset this equal to block\nbecause if we take a look at the\nstyle.css you can see we have this as\ndisplayed as none now we wanted to\ndisplay it as block when we click on the\nopen button which is this button here\nso if i click on this now it should show\nus our model\nas you can see it's popping up in the\ncenter there so this event listener is\nworking now we can't actually click off\nof this model so we can't really close\nit we're going to need a couple more\nevent listeners so we'll do one for the\nclose button there\nso we'll say close btn\nadd event list now\nlook out for a click event\nfunction\nand inside of this function we'll apply\nthe same sort of styling so we'll say\nmode or container\ndot style\ndisplay attribute\ndisplay property\nand then we'll set this to none so we'll\njust refer back to none so now we've got\ntwo event listeners here we've got our\nopen button and then for our close\nbutton there if we click on this this\nshould get rid of our model and as you\ncan see that's working now now if we\ntake a look at the actual original\nexample if we click on this and we show\nour model it closes if we click on the\nclose button here but if we also click\noutside anywhere of our model here you\ncan see it closes the modal tube so i\nwant to add another event listener so we\ncan do that so we actually apply this to\nthe window object so this is actually\nthe highest object in the dom tree this\ngoes above the document\nso\nwe'll say\nlook out for a click event\nfunction again we'll insert the event\nobject in there\nand then inside of the function itself\nwe're going to use an if statement\nso we're going to say if e dot target if\nyou guys remember back to the um part 1\nof this course the event.target\nessentially just returns the element\nthat triggers the event which in this\ncase is going to be our window so we're\ngoing to say if e.target is equal to\nmodal container we're going to grab the\nmodal container use the same\nstyle attribute display property\ni'm going to equal this\nto\nnone so again what this should do now is\nwhen we click on this to activate our\nmodal so we can see it on the screen we\nshould be able to click anywhere outside\nof this module and the model will\ndisappear so as you can see that's\nworking if i click up here disappears\nclick up there disappears and if we also\nclick on the close button it will\ndisappear so that's pretty much it for\nthe javascript\npretty simple design really and quite\nsimple to create the next thing i'll do\nis just apply some style into the module\nand the modal container because if i\nclick on this you can see that the\nbackground darkens around the modal as\nwell as the modal smoothly\nanimating from the top of the browser\nthere do that we'll head back inside our\nstar.css and to create that nice\nanimation you can see we've got\nanimation name and the animation\nduration we're going to be using\nkeyframes so we'll just say\na comment here first modal animation\nsection\nwe'll say the\nat keyframes rule\nuse the name which is animate\nmodal\nis that oh it's not got a capital m\nwhat you want to say is just use the\nfrom n2\nso from\nwhen i say top\nnegative 300 pixels\nset the opacity to zero so we can't see\nit\nand then two\nlet's say from the top\nfifty percent\nand then the opacity\nto one\nso as you can see when we type in this\nkeyframe out\nthe animation is working so i'm just\ngoing to click off this\nclick on our open button and you can see\nnow the modal is animating exactly the\nsame as the original\nand lastly i just want to create this\nthis dark background when the motor\nappears so to do that\nwe're going to go\nin the modal container here or the id of\na motor container\nadd a background color\nrgba\nwe'll say zero for red zero for green\nzero for blue and then for the alpha\nwhich is the opacity we'll say point two\nand as you can see it just gives the\nmodal container and which is wrapping\naround the model a nice uh dark effect\nwhich just gives us a good emphasis on\nthe model itself this now looks exactly\nlike our original example it looks\npretty good\nso our third project is going to be an\naccordion now what an accordion does is\nlet you squeeze in a lot of content into\na small space and a web page and a\nclassic example is like one in our\nproject here which is an faq or\nfrequently asked question which you'll\nmost likely see in utilized in many\nwebsites so as you can see here we have\na couple of questions just some random\nquestions like a return policy or where\nthey're located and if i click on one of\nthese you'll see it open up and show us\nmore content which again is a really\nuseful project to learn as you're most\nlikely going to be utilizing this type\nof design in many of your own projects\nnow the key concepts we're going to need\nin this tutorial are document dot get\nelement by class name this time of\ncourse the advert listener the for loop\nbut this keyword on the classlist and\ntoggle method so let's head into vs code\nnow and create our accordion\nall right guys so the first thing i'm\ngoing to need to do is create the markup\nfor the accordion so we're going to have\na\nclass of accordion which basically just\nhouses everything or the accordion then\ni'm gonna have a\nh2\nthe class of uh say accordion\ntitle\nand we'll say frequently\nasked\nquestions and underneath that we're\ngoing to have several containers which\nis going to house the question and the\nanswer and you guys can put as many of\nthese containers as you like but i'm\njust going to use three which is the\nexact same as our draft example so we're\ngoing to create that class of content\ncontainer and this is also going to be\nthe class that we link to our javascript\nso we can show that extra content\nso inside of these we're going to have\nclass of question\nso the question first question is what\nis the return\npolicy\nand then we're gonna have\nthe class of answer\nwhich is just going to be some dummy\ntext\nand then we'll just duplicate this\ncontainer two more times again you guys\ncan include more if you like\nbut we're just going to stay the same as\nthe draft\nexample\nso that's essentially it for the markup\nlet's head into the style sheet now and\njust apply some uh styling to this now\nthe first thing we're going to do\nis just grab the body\nand include our background image\nso this can have a url image folder\nproject three\nand then a few more\nbits of styling so no repeat center on\nthe x and y\nand then cover\nso we can see the whole image\nmake this the whole height of the\nbrowser\nand then use flexbox again\nto center our content\nand then align items to the center\nso that's all we need for the body let's\nstart applying some styles to the\naccordion\nwhich pretty much just houses everything\nwe're going to give this a width of 65\nand\nbackground color\nlet's give it a white background color\nadd a bit of padding\nso let's say about\n30 pixels all the way around\nand then of course a good friend border\nradius\njust to make the edges more rounded so\nso we'll apply 30 pixels there\nnow for the title itself\nuh we'll go and give that a bit of\nstyling\nthis has the\naccordion title styling scroll down so\nyou guys can see a bit clearer\nwe'll just add some margin bottom\nof 30 pixels to separate from the rest\nof the content and then\ntext the line to the center\nso it's centered\nthere\nnow let's apply some style into our\nquestions there\nso\ngrab the accordion\ncontent\ncontainer\nand then grab the question\nor class of question\nand let's give this some padding too so\n18 pixels on top and bottom zero pixels\non the left and right\nand let's\nalso\nuh increase the font size a little bit\n22 pixels\nset the cursor to a pointer and then\nlet's add a border bottom here one pixel\nsolid\nblack\nso it has a line underneath the\nquestions just so it's a bit clearer to\nsee the separation between that and the\ncontent and then the next thing we need\nto do here is set position\nof relative that's because we're going\nto be positioning the open and close\nsections that you see here in the\noriginal example absolute to our\nquestion class\nso that's what we're going to go ahead\nand do now so we'll grab the accordion\nclass\ncontent container\nquestion class and we're going to be\nusing the pseudo element of after\nand we'll go inside this and we'll grab\nthe content\nproperty\nand use a plus sign in there\nand then we'll position this\nabsolute\nand then from the right\nwe'll say about negative five pixels\nso i think that looks pretty good there\nlet's now focus on this content here so\nthe dummy text\nso\nwe'll go underneath\nthis bit here\ngrab the accordion class\ngrab the content container and then\nwe'll grab the answer class which is the\ndummy text\nand we'll add a bit of padding\ntop\nof 15 pixels\njust so it separates it from the ball\nthe bottom there\nwill increase the font size of this\nit's about 22 pixels as well\nand then let's add a bit of line height\nlet's say 1.5\nbetween the content\nand then make sure the width of this\nis a hundred percent\nnow of course we want this content to be\nhidden initially like it is in the\noriginal example so to do that what\nwe're going to need to do is change the\nheight of our answer class there to zero\npixels now if you take a look at the\nbrowser you can see that all of the\ncontent is overflowing it's doing\nexactly what we wanted to do by setting\nthe height to zero pixels but of course\nall this content here we want it to be\nhidden so what we can do to hide that is\njust use the overflow property and set\nthat to hidden\nand as you can see all of that content\nisn't showing\nnow one last thing i want to do in here\nis that if we take a look at the\noriginal example we open this up you see\nit's nice and smooth so to do that\nwe're gonna need to set the transition\nof this to be\nabout 0.5\nseconds so that when we do apply the\njavascript and we click on these it'll\nbe nice and smooth so that's almost it\nfor the styling we're going to need a\nfew more bits in just a moment but first\nwe need to create the javascript to get\nthis all working so we'll head into the\njavascript file there and the first\nthing i'm going to do is just create a\nvariable i'm just going to put a comment\nhere variable\nand this variable is\ngoing to be called uh accordion and\nwe're going to be using the document\ndot get element by class name\nso this is going to select all the\nelements with this class name and we\nwant to select the\ncontent\ncontainer classes\nwhich houses the question and the answer\nnow we're going to want to access all of\nthese classes and to do that we're going\nto need a for loop\nso we're just going to put in\n4\nwe're going to have a variable of i\nequals 0.\nand then we're going to say i\nis less than the accordion\ndot\nlength and if it is less than the\naccordion.length which it will be we\nwant to increment this\nour variable by one\nthen inside of this for loop\nbecause we're essentially selecting all\nof the\nclasses of content container we want to\napply an event list now on each of these\nso we'll grab the accordion and then\ngrab the\nvariable of i inside of our for loop\nand then add an event listener here\nin where we want\na click event so on each of the content\ncontainers we want to click event\nthen we're going to include a function\nand then inside of this function what we\nwant to do is reference the object which\nthe function is a property or in other\nwords reference the object that is\ncurrently calling the function which in\nthis case is our accordion and we could\ndo that by using the this keyword and\nthen using this we can insert a class of\nactive on all of those reference points\nwhich are essentially our content\ncontainers so we'll say\nclass\nlist\ndot toggle which is just another method\nwhich i actually forgot to mention in\npart one but what this essentially does\nis just toggle between adding and\nremoving a class name for an element\nwith javascript and the class that we\nwant to toggle is of course the one i\njust mentioned so we want to call this\nclass active which i'll show you guys in\na minute why we need to do this\nso what we've done here is store all our\nelements with a class of content\ncontainer inside of this variable of\naccordion\nwe then loop through this variable\nand this has allowed us to add an event\nlistener to all of our content container\nclasses and inside of the function we\nthen reference this object that is\ncalling the function i.e our accordion\nvariable and then added the toggle\nmethod to either add or remove the class\nof active so all we need to do now is\nhead back into our css and apply the\nstyles to our active class we created\ninside of this function so we'll head\nback to star.css again\nand then what we'll do should put a\ncomment here\nand say java\nscript\nstyling link\ngo underneath here and then just grab\nthe class of accordion grab the content\ncontainer class select the active class\nwe created inside of our javascript\nand then grab the answer\nor the class of answer which is\nall of that content which has a dummy\ntext inside of it\nand then just set a height of this to be\n150 pixels\nso what this should do now is using the\njavascript we just created\ntoggle the class of answer so that when\nwe click on any of the questions the\nheight of the answer container will be\n150 pixels instead of zero pixels and\nthen show us all that content so if i\nclick on this you can see now it's open\nup and showing us all that content so\nyou can see that the javascript is\nworking as well as the styling we just\ncreated with the active class we just\ninserted with the active class so just a\nfew little bits here now to finish off\nso we'll just grab the accordion\ngrab the content container grab the\nactive class again\nand we'll grab the question so i just\nwant to change some style into the\nquestion when this is clicked\nso uh let's\naffect the font size that's a little bit\nsmaller so say about 18 pixels and we\nwant this to be smooth so we'll just put\na transition of\n0.5 seconds\nso as you can see this shrinks down when\nwe click on this um just so it puts more\nemphasis on the content there\nand then lastly let's change the open\nbutton to\na closed section when we click on it\njust like it does in the original\nexample here as you can see there\nso\nlet's go underneath this\ngrab the accordion class again\ncontent\ncontainer\ndot active\nand dot question\nafter pseudo-element\nchange the content\nto a dash\nlet's also increase the font size of\nthis\nto 30 pixels\nlet's give it a nice transition\nby five seconds\nand as you can see there it's all\nworking perfectly fine the javascripts\nare working as well as the styling\nso that's going to be it for this\nproject another really useful project to\nlearn as you'll most likely run into\nneeding something of this project's\nnature\nso for our fourth project we're going to\nbe up in the ante a little bit and\ncreate this pretty cool stopwatch which\nas you can see here we have a play and\nalso a reset button if i hit the play\nbutton you'll see it transform to a\npause button as the stopwatch is\nstarting\nif i pause it it will pause on that\nnumber and then i can also reset this if\ni want to so a pretty cool design and\nwe're going to be implementing much more\njavascript for this project\nsome of the key concepts we're going to\nneed for this project are\ndocument.queryselector\ndocument.elementbyd add event listener\nif statements the tostring method the\nset interval method and inner html\nso now we know the project and the key\nconcept we're going to need for the\nproject let's head into vs code now and\ncreate our stopwatch\nall right guys so inside our index.html\nfile the first thing we'll do is just\ncreate a div with the class of container\nand inside of that div we're going to\nhouse another div which is gonna have an\nid of\ntimer and inside of this we're just\ngonna display our timer then underneath\nthat we're gonna have our buttons so\nwe're gonna have a div with a class of\nbuttons\nand then we'll have\nthe start stop button and this is going\nto have initially when we're first\nshowing this going to have an icon\nand this is going to have a class of\nfa\nsolid\nfa\nplay\nand we're also going to give this an id\nof play\nand then we'll just duplicate this for\nthe reset button\nreset vtn\nand this is gonna have an id of reset\nand instead of\nplay it's gonna have\narrow\ndash row\ntate\ndash left\nso that's all we're gonna need for our\nmarkup let's head into star.css and just\napply some styling here\nso\nfirst thing we're gonna have is the body\nwe're gonna include our background image\njust like in the previous\nexamples but first let's just make the\nheight 100 viewport heights\nbackground\nurl\nimg\nproject 4\nand of course some of that classic\nstyling so no repeat\ncenter\ncenter\ncover\nso we can see the whole image\nso there's our guy there\nand then we want to position everything\nin the center so let's display this as\nflex justify\ncontent center\nalign items to the center\nnow let's grab the container which\nhouses everything\nand this is going to have a width of\n60 percent\na height of\n250 pixels\nbackground\ncolor is gonna be\nwhite\nlet's give it that nice\nborder radius\n30 pixels and then let's just give this\na bit of shadow so zero on the x and y\nand then\nthree pixels blur so it's all the way\naround now the next thing i'm going to\ndo is style the timer here so\nthis is an id of timer\nset the width of this\nto be 100\nfont size\nuh let's make it\n72 pixels so nice and big text align\nthis to the center give it a bit of\nmargin so\nzero on top and bottom auto on the left\nand right and then let's also give this\na bit of padding top let's say about say\n35 pixels\njust to push it down a little bit\nnow as for the buttons themselves\nwe'll grab the button we'll grab the\nbuttons class which houses the buttons\nwe'll text align this to the center\nand then\nlet's give it a bit of margin on the top\nlet's say about 40 pixels\nand then let's style the buttons here so\nso um\nlet's give a bit of margin between them\nso they're not like squished up next to\neach other so let's say zero on the top\nand bottom about 10 pixels on the left\nand right\ngiving that space uh let's also remove\nthe border\nboth of them\nand then let's style the actual icons so\nbutton i\nsay font size\nlet's say about two ram\npadding\nso about\n10 pixels\nand then let's\nchange the color\nto\nwhite\nnow we can't actually see those really\nclearly so let's grab the ids of each of\nthose so we've got one for play\nduplicate that one for\npause\nwhich we'll create later\nand then one before reset\nnow for play this is just gonna have a\nbackground color of green\nfor\nreset\nthis is gonna have that background color\nof red\nand then for pause it's gonna have a\nbackground color of orange\nand that gives them their background\ncolor now the buttons here actually\naren't the same size so\nlet's just quickly make these the same\nsize so we'll say about 50 pixels\nyeah that looks a lot better so that's\npretty much it for styling let's head\ninto the project 4.js file now and start\nadding some functionality to our\nstopwatch here all right guys so the\nfirst thing we need to do is just create\nsome variables for our buttons so\njust going to put here\nvariables for buttons\nand we're going to say const\nstart\nstop\nbtn\nequals document\ndot query selector and then we're just\ngoing to select the id of start\nstop\nbtn and then we're going to have one\nmore for our reset so\nreset btn\nequals\ndocument.queryselector\nand this has the id of\nreset\nbtn\nso there's the variables for our buttons\nthe next thing i'll do now is just\ndefine a few variables to hold time\nvalues\nso\num\nput a comment here again\ntime values\nso we'll say let\nseconds\nequal zero\nlet\nminutes\nalso equal\nzero\nand then let\nhours\nequal zero\nso that's all the variables we're going\nto need at the moment the next thing i\nwant to do is actually create our\nstopwatch function which is going to\ndetermine when our stopwatch needs to\nincrement to the next number ie seconds\nminutes or hours as well as displaying\nthat value in the ui\nso we'll just put in here uh\nstop\nwatch\nfunction\nand then we'll just say function\nwe'll call this stop\nwatch so firstly what we want to do when\nwe invoke this function is actually\nincrement the seconds so when this fires\noff when we press the play button the\nseconds will start to increment so we'll\njust say seconds\nplus plus now of course if we leave it\nlike this it's just going to increment\nthe seconds it's not going to jump to\nthe next value so if we wanted to\nincrement when it gets to the minutes\nand the hours what we're going to need\nto do is just create an if statement and\nthen we're gonna say seconds divided by\n60 which is the amount of seconds\nis equal to\none\nwe then want seconds\nto jump to zero\nand then we want the minutes\nto increment so what we're saying here\nis that once this reaches 60 our seconds\nwill restart and then the minutes will\nstart incrementing so that's how we\nincrement the next value now of course\nwe haven't just got minutes we've also\ngot hours so we need to include that as\nwell\nso we'll apply the same logic here so\nminutes divided by 60 is equal to 1. the\ncondition we want is that minutes\nlet's back to zero and then the hours\nincrement now what we need to do from\nhere is actually create a variable to\ndisplay this if statement in the browser\nso our stopwatch will actually increment\notherwise the numbers will just stay\nstatic the way they are now so to do\nthat we're just going to need to go\nunderneath this if statement here and\nsay\nlet's say let\ndisplay\ntimer equal document dot get element by\nid we're going to get the id of timer\nand we're going to change the inner text\njust scroll down a bit so you guys can\nsee that\nand we're going to set this to\nequal\nhours\nplus uh\ncolon\nplus\nminutes\nplus a\ncolon again\nand then finally seconds\nclose that off so what we're doing with\nthis variable is just making sure that\nwhen our if statements here are working\nwe want it to be displayed in the\nbrowser so the way we can display that\nand check that out is we'll just grab\nthe window object and then we're going\nto grab the set interval function which\nis basically just a method that calls a\nfunction at specified interval and the\nfunction of course that we want is going\nto be our stopwatch and this interval\ntakes in two parameters so first the\nfunction and then the amount of time and\nwe're gonna be putting a thousand which\nis a thousand milliseconds\nso we'll say\nstopwatch\nand then time of a thousand and if we\ntake a look at the browser now you can\nsee that it's beginning to increment\nand then if we just make this a bit\nquicker so we'll lower down to one\nyou can see that the minutes now is also\nincrementing\nand then if we just wait a little bit\nlonger it should jump to the hours\nand as you can see the hours now is also\nincremented when it gets to that 60 so\ni'm just going to put this back to a\nthousand and then comment it out now of\ncourse as you've just seen there when\nthis function fires off the lead in zero\ndisappears and if you take a look at our\ndemo example here and we play this you\ncan see that it starts incrementing as\nit should but the leading zero is still\nthere now to fix this what we're going\nto do is actually create a couple more\nvariables so we'll go underneath these\nvariables here and then create variables\nfor that leading zero so say variables\nfor leading\nzero\nso we'll say let\nleading\nseconds\nequal\nzero\nduplicate this\na few more times\nlet\nleading minutes\nequal zero\nand then obviously hours\nnow what we need to do is go back inside\nour stopwatch function here go\nunderneath uh this if statement here and\nthen create\nsome conditionals to include that\nleading zero if our seconds minutes and\nhours is only one digit so we'll say if\nseconds\nis less than 10\nwe want to grab the\nleading\nseconds\nand then set this to\nthat leading zero\nwhich is a string value but we also want\nto make this a string value so we'll say\nuh two string but we also want to make\nthis a string value so we'll apply the\ntwo string\nmethod which will turn this\nall into a string else we'll just make\nsure that else we'll just leave the\nleading\nseconds to equal\nthe\nnormal seconds variable\nso of course we want to create\ntwo more\nfor\nminutes and hours so we'll say this one\nis for minutes\nand\nleading minutes\nhours\nhours\nand of course we're also going to have\nto change\nuh the variable here too so we'll say\nleading\nhours\nleading\nminutes\nand leading\nseconds\nso again what we're doing here with the\nif statements is making sure that our\nleading zero will show if our stopwatch\nis only showing one digit and as we just\nseen when we invoke the function here\nwith the set interval that lead in zero\nwill disappear but because of the\nstatements we've just created here and\nthis variable which will display in our\nbrowser if i uncomment our set interval\nhere it should start incrementing with\nthat latent zero so i'll uncomment this\nout\nand as you can see now it's incrementing\nwith that leading zero and if i just\nspeed it up it should also apply to the\nseconds minutes and hours\nas you can see it's working in the\nminutes and then if we just wait a\nlittle bit longer again for the hours\nthe leading zero should still stay there\nand as you can see it's working exactly\nthe way it should so i'll just put this\nback to a thousand\nand just comment that out\nnow we're actually invoking this\nstopwatch when the browser loads because\nwe're immediately invoking it through\nthe window object and our set interval\nfunction but of course we want to have\nmore power than this and what we want to\ndo is actually add functionality to our\nbuttons so what we're going to need to\ndo\nnow is actually create a few variables\nto hold the set interval function as\nwell as containing the status of our\nstopwatch and which i'll show you guys\nexactly what i mean so let's create\nthose two variables we'll actually\ncreate them up here\nso\nvariables\nfor\nset interval\nand\ntimer\nstatus\nso we'll say let\ntimer\ninterval\nequal\nnull\njust for the time being because we want\nto choose when we want the stopwatch to\nrun not when the page loads\nand then of course create another\nvariable for\nour timer status\ni'm going to set this equal to a string\nvalue\nof stop we now need to use these\nvariables and apply it to our start stop\nbutton variable there so we'll just go\nunderneath here and then we'll grab that\nstart stop button\nadd the event listener we're going to\nlook out for a click event we'll grab\nthe function\ninside this function is going to be\nwhere we use those variables we just\ncreated so we're going to say if\ntimer status\nis equal to\nstopped\nwe then want to grab that timer interval\nvariable and set it to\nour actual\nset interval function there\npaste that in there close that off\nwe then actually want to change our\nbutton to switch from a play button to\nthat pause button like it does in the uh\ndemo example so we'll say document\ndot get element iid\ngrab the\nstart\nstop\nid there\nand then grab inner html\nset that to\nbackticks and then we are going to grab\nthe icon\nthis has got a class of\nuh\nfa\nsolid\nfa\npause\nand then we want to actually include the\nid\nand which gives it that color of orange\nand this has the id of\npause\nand then we'll close this off and then\nwe also want to change the value of our\nstatus\nso we're going to grab the timer status\nand set this equal to\nstarted\nelse\nif the stopwatch is now running we also\nwant that functionality of where we can\npause the timer so to do that we need to\ngrab the window object again grab the\nclear\ninterval function and what this will do\nis actually stop our timer and then\ninsert us\ntime our interval\nvariable which is in reference to our\ntimer variable there close that off\nand then of course when this statement\nrings true we also want to change our\npause button back to our play button so\nwe're going to say document\ndot get element by id\ngrab that start\nstop btn\nid again and then change the inner html\nthis is going to equal\nanother icon to i\ndot class\nequals f a dash solid\nf a dash play\nand then we also want to grab the id\nof play so it has that\ngreen background color close this off\nand then again obviously change the\ntimer status\nback to stopped so what we've done here\ninside this function was just checking\nif the timer status is equal to stopped\nthe timer will start\nand the play button will also change to\na pause button\nas well as the time of status changing\nto started\nelse we click the pause button the time\nwill stop with our clear interval\nfunction there and the pause button will\nrevert back to our play button as well\nas the timer status we'll change back to\nstopped\nand this now should complete the\nfunctionality for playing and stopping\nour timer so if we go ahead and test\nthis\nyou can see it's changing to a pause\nbutton and our time is starting to\nincrement if i press the pause button\nagain it will stop the timer and our\nbutton revert back to the play button so\nas you can see our function's working\nperfectly fine there now we're almost\ndone we just need to add an event\nlistener to our reset button here so\nwe're going to need this event listener\nhere grab the reset button\nvariable add an event list now look out\nfor a\nclick event grab the function\nkeyword inside of this function scroll\ndown a bit so you guys can see we want\nto grab the window object again clear\nthe interval so it stops and then\nreference that timer interval and then\nwhat we want when we click on this is\ngrab the seconds\nthis is going to equal\nzero duplicate this\ntwo more times the same for the minutes\nand then same for the hours and then\nagain we want this to actually display\nin the browser\nso we'll say document\ndot\nget element by id we want to grab the\ntimer and then grab\ninner html and then set this to the base\nof zero zero for the hours minutes and\nthen for the seconds so with this event\nlistener we just created here for our\nreset button inside of the function\nwe're again stopping our timer interval\nusing the clear interval method which is\nessentially just a method which clears\nthe time i set out with a set interval\nmethod now this of course is referencing\nthis set interval here so again this\nwill stop our stopwatch just like it\ndoes in the else statement that we've\ndone here now of course we don't just\nwant to stop the timer we actually want\nto reset it so we revert all of our\nseconds minutes and hours back to zero\nwhich we've done here just by changing\nthe values back to zero and then of\ncourse we want this actually outputted\ninto the browser so we use the\ndocument.getelementbyid grab the timer\nand change the inner html to zero on the\nminutes hours and seconds so this now\nshould actually reset our stopwatch to\nzero so if we go ahead and test this out\npress the play button so it starts\nincrementing and it also reverts to a\npause we'll pause this reverts back to\nthe play button and our timer stops and\nthen now if i click this reset button it\nshould reset our timer and as you can\nsee our stopwatch is working with full\nfunctionality and this now concludes our\nfourth project so quite a bit more\njavascript to take in for this project\nhowever once it's understood it's\nactually quite a fun exercise to create\nalright guys so for our master level\nproject we're going to be creating a\nto-do list and how this to-do list works\nis that we simply enter a task inside\nthe input tab here and then we enter\nthat task with our add button and what\nthis will do is add that task underneath\nour tab here and when that happens we\nget some extra functionality so let's go\nahead and see what that looks like so\nlet's just enter a task here let's say\ncollect\nshopping\nwe'll enter that task and as you can see\nthat task is added underneath and as\nwell as that we've got some extra\nfunctionality so we've got this orange\nbox here and we've also got this trash\ncan now what this orange box does is\nthat if we complete the task and we\nclick on this it'll put a line through\nit\nand if we want to get rid of the task\ncompletely we'll just click the trash\ncan as you can see it will delete that\nfrom the actual task list now of course\nthis isn't the prettiest to-do list but\nagain this isn't really the objective of\nthis project so feel free to style it\nhowever you like when you guys are\ncreating yours now this project is\nactually going to include quite a lot of\nwhat we learned in part one so i hope\nyou guys are paying attention so far our\nmaster level project project five the\nto-do list these are the key concepts\nwe're going to need for the project so\nwe're going to be using\ndocument.elementby d of course again\nwe're going to be using the event\nlistener e.target we're going to be\nusing the penchal method the create\nelement method the parent element method\nas well as the remove and the\nclasslist.add method so quite a lot of\nthe concepts we learned in part one so\nlet's head into vs code now and create\nour to-do list\nso the first thing we need to do is\ncreate our markup for our to-do list so\nwe're going to wrap this in a div the\nclass of container and then we're going\nto have a div which houses the input and\nthe button so we're going to call this\noh we're going to give this an id of\nadd the task\ncontainer\ninside of that we're going to have our\ninput should be the type of text\nwe're going to give it a placeholder\nvalue\nof enter\ntask\nwhich is just going to be that text\ninside of the input and then we're going\nto give us an id\nof\ninput\ntask because we're going to need to grab\nonto this to give it an event list line\nin the javascript\nand then we'll go underneath this and\ncreate our button this button is going\nto have an id of\nadd task because we're going to need to\ngrab onto this as well we're going to\nhave an icon with a class of\nfa\nsolid dot\nfa plus and there's our input and our\nbutton there and then we'll go outside\nof this container and we're gonna have\nan id which is gonna be a container for\nall of the tasks when we do add them to\nour to-do list\nso we're just going to give this an id\nof\ntask container\nand that's all we're going to need for\nthe markup let's head into the style\nsheet now and give this some styling so\nthe first thing we're going to want to\ndo so the first i'm going to do in here\nis just grab the body give this a height\nof 100 viewport heights and then give it\nthat background\nimage\nwhich is going to be an image folder\nand it's for project 5. then some extra\nstyle in here\njust the same as the others\nnow we want to align all of the content\nin the middle so we're using flexbox\nitems to the center\nso that'll center our content\nlet's now give some styling to the um\nadd task container so it's got the id of\nadd\ntask\ncontainer\nthis is going to have a width of say 350\npixels\nsome padding\nsay 20 pixels on the top and bottom and\n10 pixels on the left and right\nand give it some background\ncolor of white\nand then\nour trusty friend border radius just to\ngive it those rounded edges\nand then give it some box shadow because\nalways looks good with a bit of box\nshadow\nand then we're going to also need to\ndisplay this as flex because we want to\napply some flex rules to the input and\nthe button there\nso let's go ahead and do that let's\ngo and grab the input\ngive this a flex of five so it takes up\nmost of the space\nuh\ngive it some margin\nto the right\nso it's a bit space between that and the\nbutton so we'll say about\nsay about 10 pixels\ngive it the border radius\nfor those rounded edges\nand then font size let's make this a bit\nbigger so let's say 1.2 rem\nand then let's also give it some padding\nso about\nfive pixels see what that looks like\nyeah looks pretty good\nand then for the button itself\nthis has the id of add\ntask\nsay font size for this because it's\nsaying icon we increase the size with\nthe font size property\nsay 1.1 rem maybe 1.2\nyeah that looks good and then\nlet's also give this some padding\nall the way around\nand\ni forgot to actually\napply the flex properties so let's give\nthis a flex of one just so occupies a\nbit of its own space\num let's give it a background color\nof white\nand the color of the\nicon\ngreen and then\nthe border\nlet's make it green\nsolid 2 pixels classic border radius so\nthat's looking pretty good and i think\nin the demo this has a hover effect so\nlet's actually apply a transition to\nthis\nto\n0.3 seconds\ngrab this\nand then apply the hover\nand let's change the background color\nto\ngreen\nand the color of the icon\nto\nwhite\nso let's go ahead and see if that's\nworking as you can see it's got a nice\nhover effect now so we know that we're\ngoing to need to click on this to add a\ntask now we're not completely done with\nthe styling as you'll see in a moment\nwhen we um enter a task but let's first\nadd that functionality of adding a task\nto our to-do list so let's go into the\njavascript file and then we can start to\nenter tasks after this so let's head\ninto our project 5.js file\nso first things first in the javascript\nwe're going to need to create some\nvariables one for the actual button here\none for the input and then one for the\ntask container which is going to hold\nall the tasks\nso we'll do the first one\nput comment here first\nvariables\nand we'll say\nadd\ntask\nequals document dot get element get\nelement by id\nso the add task button\nhas the id of add\ntask\nand then one for the task container\nwe'll call this variable task container\nit's going to equal\ndocument dot\nget element\nby id\nid of task\ncontainer and then we're gonna have one\nfor\nthe input task\ndocument\ndot get element iid\nand this is gonna again be for our input\nwhich has the id of\ninput task\nso we've got our variables the next\nthing we want to do is create an event\nlistener for our add button here which\nis pretty much going to hold\nall of the power\nso\nsay\nevent listener\nfor\nadd button\nso we'll say add task which is that\nvariable there\nadd event listener we're going to look\nout for a click event\nand this is a function\nand inside of this function the first\nthing we're going to do is create div\nand then we're going to store it inside\na variable of task\nso we'll say let task equals document\ndot create\nelement and we're going to be creating a\ndiv\nand this div is essentially just going\nto house um our\ntask as well as that extra functionality\nof the check button and the delete\nbutton\nso we're also going to want to give this\ntask\na class\nso we can style it\nthis is going to have\nclass of task\nso we've got our div there now we're\ngoing to need to insert a list item for\nthe actual task itself as well as that\nagain that functionality of the check\nbutton and the delete button so first\nwe'll do the list item\nit's going to equals document dot create\nelement i'm going to create an li\nthen we're going to want to and then for\nthis list item we're going to want to\ndisplay that text that we insert in the\ninput or the value so to do that\ni'm going to grab the li\nvariable and then we're going to say\ninner\ntext is going to equal\nand we'll do backticks here\nand then we'll insert that variable of\ninput\ntask got the value again it's just what\nthe value is that we're going to be\ninserting so whatever task we insert\ninside of our input\nand then of course we're going to want\nto append this\ninside of that div which is the variable\nof task so we'll\nappend the li so now we've got our list\nitem the next thing we want to include\nnow is the check button and the delete\nbutton so we can include some extra\nfunctionality when we do insert a task\nso\nso we'll say\nlet's create a variable called check\nbutton this is going to equal\ndocument dot create\nelement and we'll create\nour button\nand then we'll say uh let's include the\nicon in here so we'll say check button\ndot in uh html\nis equal to\ni\nsay class of\nf8 solid\nit's insert the quote marks there\nso fa solid fa check\nand then we'll just close that off\nand then we obviously need to style this\nso we need to include a class\nand\ncheck\ntask\nand we'll say task dot\nappend child\nand then obviously you need to include\nthis inside of our div\nso we'll just say task\nstart append\nchild and then we'll append the\ncheck button and then we'll duplicate\nthis\nfor our\ndelete button\nchange release to delete\nbutton and then\nthis one has trash\ncan\nand then let's also change the class to\ndelete\ntask\nso we've created all the elements we're\ngoing to need to include in our task\nthe next thing we need to do now is just\nmake sure this actually shows and\nappears in our browser when we try and\nadd a task so\nthat will say if\nand actually i first just want to show\nyou that we have a bit of validation\nhere so if we take a look at the demo\nexample if we try and enter a task\nwithout actually entering anything in\nthe input you can see we get this alert\nbox which has please enter task so for\nthis button to work we need to either\nadd a task or it's going to show us this\nalert box to tell us to enter a task um\njust so it's like a bit of validation to\nthe project\nso to do that we'll say if\ninput\ntask dot the value so whatever value we\nput inside of our input\nis equal to\nnothing then we'll include that alert\nbox\nplease\nenter\na\ntask\nso we'll just see if that's working as\nyou can see that alert box is working\nso i'll say else\nthen grab the task container\nwhich is going to be the container\nhouses or the task then we're going to\nappend\nchild and we're going to append that\ntask which houses um the check button\nthe list item and the delete button so\nwe'll just close that off and we'll see\nnow if this works so we'll enter a task\nsay collect\nshopping hit enter and as you can see\nthere it's included our list item and\nit's also included our two buttons that\nwe created obviously we're gonna be\nstarting this in just a moment but one\nother thing i want to do just before we\ngo into the style sheet and style this\nis that i want this to revert back to\nthe placeholder text instead of holding\nthe\nvalue we put in the input\nso uh to do that just grab the input\ntask variable\nand the value\nwe want this to equal nothing so if we\ngo ahead and type that out again\ncollect\nshopping\nenter that you see it adds the list item\nbut it also removes it from the input so\nwe can insert another task so we're\nalmost nearly done here inside of the\njavascript we'll come back and add the\nfunctionality um to the checkbox and the\ndelete button but first let's just start\nall of this so it just looks a lot nicer\nand easier to work with so head back\ninto the style sheet\nso let's apply the styling now for our\num\ntasks when they get added to the list so\nwe'll just put a comment here saying\nstyling for tasks\nwhich get\nadded to\nthe\nlist\nso first we'll grab the\ntasks which is the div which is going to\nhouse all of that content so we're going\nto just give this a width of\n100\nand then we're going to give this a\nbackground color\nof white so we can actually see the\ncontent\num\nlet's also\ngive this some\nbroader radius\nabout 10 pixels and then\nalso the box shadow always love a bit of\nbox shadow\nand then um\nadd a bit of padding here now\nsay about\nfive pixels\nand let's push this down a bit actually\nfrom\nour enter tab there so let's\ngive this a margin\nbottom of 20 pixels\nso just to separate the two\nand then let's also\ngive this a bit margin bottom as well so\nit separates um all of the content all\nof the tasks a little bit so just say\nfive pixels\nand then let's grab display\nflex\nand let's say justify content\nspace between\nand then let's now grab the list items\nitself\nso dot task\nli\nremove the list style\nput a point\nlet's give this a flex of four\nso it takes up most of the space\nuh let's give it a bit of padding\nabout five pixels\nand let's increase the font size of\nthese\nto say uh\nlet's say 1.2 rem\na bit bigger 1.3\nit looks good and then\nlet's give this a bit of margin as well\n10 pixels\nnow as for the buttons themselves grab\nthe task grab the buttons\nand we'll give these a flex of one\nand let's also\ngive these rounded edges so border\nradius 10 pixels\nand then the background color of these\nto be uh\nlet's make them white\nnow let's grab the um\nitems themselves actually let's change\nthe cursor to a pointer as well so let's\ngrab the task dot\ncheck\ntask\nit's going to have a color of orange\nand let's give them a bit of space and\nmargin\nright\nfive pixels\nand the border\nsay solid\ntwo pixels orange\nand let's increase the font size of the\ntick there to let's say 1.5 ram\nit's looking good\nand then let's\ndo a similar thing for the delete\ndelete\ntask\nbut instead of color orange i have the\ncolor of\nred\ni don't have any margin on this\nbut we'll change this to red\nand let's\ndecrease the font sizes to say\n1.3 yeah it looks better\nnow both of these have a hover effect so\nlet's\ndo the check first\nsay background color change that to\norange\nand then the color\nto white\ncopy this therefore\nthe delete task\nand the background color is going to be\nred color's going to be white\nso we'll hover over these and you can\nsee\nthose are working so all we need to do\nnow is just go to the javascript and\napply the functionality to this so\ninside of our event listener here we go\nunderneath the input task value there\nand then we'll say check\nbutton\nso add event listener we're going to\nlook out for a click event function\nand we're going to say\ncheck button and then because we need to\ngo\none element above um we need to traverse\nthe dom so just like we learned in part\none we're gonna grab the parent element\ni'm gonna say dot style\ndot text\ndecoration\nand this is going to equal\nline\nthrough\nso we'll check if that works\nso let's enter a task\nas you can see it's putting a line\nthrough um our content there now let's\ndo one more for\nthe delete button\nand we'll add an event listener to this\nand\nwe'll look out for a click event\ngrab the function\nwe're going to need the event object\nand we're going to say\nlet\ntarget\nequals e dot target which if you\nremember back to part one this is\nreference in the actual element that's\nbeen clicked\nand then we want to grab the target and\nthen grab the parent element twice\nso we need to traverse the dom two times\nand then we want to press remove\nso with the target here we're\nreferencing the trash can or the bin or\ndelete button one level up there's a\nlist item and then one level above that\nis the task so that's how it will remove\nit and then we'll just add this to um\nwe'll just check this is working sorry\nso we'll enter this task collect\nshopping\nand then if we click the check button it\nwill cross it out indicating that it's\nbeen completed and then if we want to\ndelete it we just press the delete\nbutton here\nso we can add\nmore than one value here so collect\nshopping add that\nand we'll do another one for\nwalk the dog\nadd that and then we can\ncross this out we can delete the collect\nshop in as you can see the to-do list is\nfully functional so that's actually\ngoing to be it for this project guys\nagain the style wasn't really the\nprettiest for this project again this\nwasn't really the point of the project\nof course this was more about how we can\nmanipulate the dom but this now also\nconcludes the part two video of dom\nmanipulation i hope you guys enjoyed the\nvideo and learned a lot throughout the\ntwo-part course be sure to leave it a\nlike and leave any questions in the\ncomments below that you may have and\ni'll see you guys in the next video\n",
  "words": [
    "course",
    "learn",
    "javascript",
    "dom",
    "manipulation",
    "use",
    "javascript",
    "modify",
    "change",
    "delete",
    "elements",
    "website",
    "first",
    "part",
    "course",
    "learn",
    "basic",
    "features",
    "website",
    "dom",
    "javascript",
    "commands",
    "use",
    "manipulate",
    "dom",
    "second",
    "part",
    "course",
    "use",
    "learned",
    "create",
    "practical",
    "examples",
    "beginner",
    "advanced",
    "course",
    "created",
    "code",
    "lab",
    "begin",
    "going",
    "take",
    "look",
    "prerequisites",
    "tutorial",
    "primarily",
    "beginners",
    "never",
    "heard",
    "dom",
    "maybe",
    "little",
    "familiar",
    "know",
    "utilize",
    "apply",
    "tutorial",
    "order",
    "effectively",
    "understand",
    "dom",
    "relates",
    "working",
    "web",
    "necessary",
    "existing",
    "knowledge",
    "html",
    "css",
    "crash",
    "courses",
    "want",
    "check",
    "start",
    "tutorial",
    "also",
    "super",
    "beneficial",
    "familiarity",
    "fundamental",
    "javascript",
    "syntax",
    "code",
    "structure",
    "guys",
    "want",
    "learn",
    "fundamentals",
    "javascript",
    "check",
    "javascript",
    "crash",
    "course",
    "covers",
    "fundamentals",
    "couple",
    "things",
    "need",
    "want",
    "follow",
    "along",
    "tutorial",
    "going",
    "need",
    "web",
    "browser",
    "code",
    "editor",
    "options",
    "use",
    "mix",
    "options",
    "like",
    "tutorial",
    "going",
    "using",
    "chrome",
    "visual",
    "studio",
    "code",
    "guys",
    "choose",
    "combination",
    "like",
    "structure",
    "tutorial",
    "first",
    "going",
    "take",
    "look",
    "dom",
    "going",
    "take",
    "look",
    "methods",
    "select",
    "elements",
    "dom",
    "traverse",
    "dom",
    "manipulate",
    "dom",
    "finally",
    "going",
    "take",
    "look",
    "event",
    "handling",
    "start",
    "explaining",
    "dom",
    "dom",
    "stands",
    "document",
    "object",
    "model",
    "document",
    "object",
    "object",
    "many",
    "properties",
    "methods",
    "use",
    "manipulate",
    "content",
    "structure",
    "style",
    "project",
    "ability",
    "manipulate",
    "dom",
    "document",
    "object",
    "model",
    "one",
    "unique",
    "useful",
    "abilities",
    "javascript",
    "almost",
    "time",
    "website",
    "performs",
    "action",
    "toggling",
    "navigation",
    "menu",
    "rotating",
    "slideshow",
    "images",
    "even",
    "displaying",
    "error",
    "user",
    "attempts",
    "submit",
    "incomplete",
    "form",
    "result",
    "javascript",
    "accessing",
    "manipulating",
    "dom",
    "another",
    "way",
    "thinking",
    "dom",
    "understanding",
    "works",
    "thinking",
    "tree",
    "nodes",
    "like",
    "see",
    "screen",
    "basic",
    "diagram",
    "dom",
    "tree",
    "nodes",
    "everything",
    "diagram",
    "type",
    "node",
    "elements",
    "attributes",
    "text",
    "content",
    "even",
    "line",
    "breaks",
    "comments",
    "see",
    "bit",
    "later",
    "even",
    "considered",
    "nodes",
    "make",
    "dom",
    "tree",
    "dom",
    "object",
    "actually",
    "property",
    "window",
    "object",
    "global",
    "top",
    "level",
    "object",
    "representing",
    "tab",
    "browser",
    "window",
    "object",
    "access",
    "information",
    "toolbars",
    "height",
    "width",
    "window",
    "prompts",
    "even",
    "alerts",
    "tutorial",
    "interested",
    "document",
    "object",
    "inside",
    "inner",
    "window",
    "stuff",
    "want",
    "manipulate",
    "another",
    "important",
    "thing",
    "note",
    "nodes",
    "diagram",
    "parent",
    "child",
    "sibling",
    "relationship",
    "topmost",
    "node",
    "either",
    "document",
    "node",
    "root",
    "node",
    "dom",
    "tree",
    "use",
    "access",
    "dom",
    "manipulate",
    "content",
    "document",
    "node",
    "one",
    "child",
    "node",
    "html",
    "element",
    "html",
    "element",
    "parent",
    "node",
    "head",
    "body",
    "element",
    "head",
    "body",
    "elements",
    "would",
    "call",
    "siblings",
    "since",
    "level",
    "dom",
    "tree",
    "underneath",
    "head",
    "element",
    "see",
    "one",
    "child",
    "node",
    "title",
    "element",
    "text",
    "website",
    "child",
    "node",
    "title",
    "element",
    "relationships",
    "similar",
    "side",
    "body",
    "element",
    "parent",
    "paragraph",
    "h1",
    "paragraph",
    "h1",
    "siblings",
    "text",
    "content",
    "inside",
    "elements",
    "child",
    "nodes",
    "paragraph",
    "h1",
    "link",
    "header",
    "child",
    "nodes",
    "h1",
    "paragraph",
    "element",
    "also",
    "see",
    "paragraph",
    "tag",
    "class",
    "attribute",
    "html",
    "attributes",
    "ids",
    "classes",
    "case",
    "styles",
    "etc",
    "also",
    "considers",
    "nodes",
    "dom",
    "hierarchy",
    "actually",
    "participate",
    "parent",
    "child",
    "sibling",
    "relationship",
    "like",
    "nodes",
    "way",
    "accessed",
    "properties",
    "element",
    "node",
    "contained",
    "often",
    "times",
    "want",
    "move",
    "throughout",
    "dom",
    "understanding",
    "sibling",
    "relationship",
    "crucial",
    "understanding",
    "javascript",
    "works",
    "html",
    "right",
    "guys",
    "know",
    "little",
    "bit",
    "dom",
    "learn",
    "dom",
    "tree",
    "next",
    "thing",
    "cover",
    "tutorial",
    "select",
    "nodes",
    "elements",
    "dom",
    "tree",
    "manipulation",
    "take",
    "look",
    "methods",
    "selecting",
    "elements",
    "let",
    "quickly",
    "go",
    "layout",
    "see",
    "browser",
    "file",
    "got",
    "div",
    "class",
    "container",
    "inside",
    "got",
    "heading",
    "id",
    "main",
    "heading",
    "text",
    "favorite",
    "movie",
    "franchise",
    "underneath",
    "ul",
    "tag",
    "five",
    "list",
    "items",
    "inside",
    "list",
    "items",
    "class",
    "list",
    "items",
    "super",
    "creative",
    "going",
    "working",
    "looking",
    "selecting",
    "styling",
    "traversing",
    "manipulating",
    "rest",
    "tutorial",
    "underneath",
    "script",
    "tag",
    "attribute",
    "source",
    "linked",
    "file",
    "guys",
    "order",
    "able",
    "manipulate",
    "element",
    "dom",
    "tree",
    "first",
    "select",
    "particular",
    "element",
    "luckily",
    "us",
    "several",
    "ways",
    "five",
    "major",
    "ways",
    "selecting",
    "elements",
    "ones",
    "see",
    "screen",
    "got",
    "get",
    "element",
    "get",
    "element",
    "class",
    "name",
    "tag",
    "name",
    "query",
    "selector",
    "query",
    "selector",
    "methods",
    "pretty",
    "going",
    "go",
    "one",
    "one",
    "first",
    "one",
    "going",
    "go",
    "get",
    "element",
    "id",
    "probably",
    "guess",
    "select",
    "element",
    "using",
    "method",
    "unique",
    "id",
    "easiest",
    "way",
    "find",
    "html",
    "element",
    "inside",
    "dom",
    "tree",
    "know",
    "css",
    "id",
    "attribute",
    "used",
    "something",
    "unique",
    "remember",
    "back",
    "html",
    "file",
    "see",
    "got",
    "h1",
    "see",
    "browser",
    "id",
    "main",
    "heading",
    "element",
    "going",
    "selecting",
    "first",
    "need",
    "select",
    "document",
    "object",
    "model",
    "simply",
    "document",
    "get",
    "method",
    "get",
    "element",
    "id",
    "single",
    "quote",
    "marks",
    "really",
    "important",
    "include",
    "going",
    "grab",
    "id",
    "main",
    "heading",
    "close",
    "selection",
    "actually",
    "place",
    "inside",
    "variables",
    "manipulate",
    "going",
    "go",
    "front",
    "say",
    "const",
    "title",
    "set",
    "id",
    "main",
    "heading",
    "log",
    "console",
    "look",
    "title",
    "see",
    "shows",
    "console",
    "hover",
    "see",
    "highlights",
    "browser",
    "know",
    "selected",
    "element",
    "select",
    "variable",
    "created",
    "element",
    "add",
    "styles",
    "element",
    "manipulate",
    "attributes",
    "traverse",
    "element",
    "good",
    "stuff",
    "looking",
    "moment",
    "next",
    "element",
    "class",
    "name",
    "quite",
    "method",
    "returns",
    "collection",
    "elements",
    "document",
    "specified",
    "class",
    "name",
    "example",
    "html",
    "file",
    "see",
    "list",
    "items",
    "really",
    "creative",
    "class",
    "name",
    "list",
    "items",
    "select",
    "using",
    "get",
    "element",
    "class",
    "name",
    "method",
    "thing",
    "put",
    "inside",
    "variable",
    "say",
    "list",
    "item",
    "set",
    "document",
    "say",
    "get",
    "element",
    "class",
    "name",
    "put",
    "single",
    "quote",
    "marks",
    "say",
    "list",
    "items",
    "think",
    "items",
    "yes",
    "items",
    "log",
    "console",
    "know",
    "selected",
    "element",
    "elements",
    "see",
    "using",
    "method",
    "get",
    "elements",
    "class",
    "name",
    "selected",
    "elements",
    "method",
    "actually",
    "returns",
    "array",
    "like",
    "object",
    "child",
    "elements",
    "given",
    "class",
    "names",
    "open",
    "see",
    "indexed",
    "order",
    "html",
    "file",
    "next",
    "method",
    "get",
    "element",
    "tag",
    "name",
    "pretty",
    "similar",
    "get",
    "element",
    "class",
    "name",
    "accepts",
    "tag",
    "name",
    "returns",
    "elements",
    "specified",
    "tag",
    "name",
    "order",
    "appear",
    "document",
    "return",
    "array",
    "like",
    "object",
    "child",
    "elements",
    "given",
    "tag",
    "name",
    "example",
    "going",
    "copy",
    "paste",
    "class",
    "name",
    "example",
    "comment",
    "say",
    "tag",
    "name",
    "list",
    "items",
    "list",
    "items",
    "type",
    "li",
    "take",
    "look",
    "console",
    "see",
    "got",
    "html",
    "collection",
    "five",
    "list",
    "items",
    "indexed",
    "order",
    "appear",
    "html",
    "file",
    "see",
    "method",
    "pretty",
    "similar",
    "getelementbyclassname",
    "method",
    "query",
    "selected",
    "method",
    "see",
    "used",
    "select",
    "one",
    "item",
    "first",
    "item",
    "matches",
    "selector",
    "given",
    "multiple",
    "items",
    "class",
    "name",
    "id",
    "even",
    "tag",
    "select",
    "first",
    "one",
    "comes",
    "across",
    "beauty",
    "method",
    "probably",
    "guessed",
    "accept",
    "css",
    "style",
    "selectors",
    "allowing",
    "select",
    "tag",
    "class",
    "even",
    "id",
    "actually",
    "use",
    "method",
    "actually",
    "grab",
    "element",
    "html",
    "file",
    "going",
    "use",
    "grab",
    "div",
    "class",
    "container",
    "acting",
    "container",
    "rest",
    "content",
    "go",
    "underneath",
    "create",
    "variable",
    "keep",
    "super",
    "creative",
    "call",
    "container",
    "grab",
    "document",
    "grab",
    "query",
    "selector",
    "method",
    "method",
    "grab",
    "div",
    "tag",
    "grab",
    "class",
    "name",
    "id",
    "attribute",
    "grab",
    "instead",
    "going",
    "grab",
    "div",
    "tag",
    "log",
    "console",
    "know",
    "working",
    "see",
    "console",
    "using",
    "query",
    "selector",
    "method",
    "selected",
    "uh",
    "div",
    "class",
    "container",
    "mentioned",
    "using",
    "query",
    "selector",
    "selects",
    "first",
    "item",
    "matches",
    "selector",
    "given",
    "case",
    "div",
    "go",
    "file",
    "use",
    "several",
    "divs",
    "going",
    "select",
    "first",
    "div",
    "divs",
    "example",
    "wanted",
    "select",
    "use",
    "query",
    "selector",
    "instead",
    "uh",
    "going",
    "actually",
    "duplicate",
    "uh",
    "one",
    "time",
    "uh",
    "zoom",
    "little",
    "bit",
    "uh",
    "going",
    "change",
    "bit",
    "word",
    "favorite",
    "sports",
    "gon",
    "na",
    "bother",
    "changing",
    "names",
    "show",
    "guys",
    "selects",
    "gon",
    "na",
    "copy",
    "paste",
    "instead",
    "query",
    "selector",
    "gon",
    "na",
    "say",
    "query",
    "selector",
    "comment",
    "quickly",
    "comment",
    "see",
    "variable",
    "take",
    "look",
    "console",
    "see",
    "method",
    "returns",
    "node",
    "list",
    "collections",
    "matching",
    "elements",
    "matches",
    "specific",
    "css",
    "selector",
    "case",
    "div",
    "similar",
    "get",
    "tag",
    "name",
    "get",
    "class",
    "name",
    "get",
    "html",
    "collection",
    "method",
    "get",
    "node",
    "list",
    "see",
    "selected",
    "containers",
    "unlike",
    "query",
    "selector",
    "query",
    "selector",
    "selecting",
    "divs",
    "file",
    "select",
    "elements",
    "query",
    "selector",
    "queryselectoral",
    "method",
    "quickly",
    "summarize",
    "section",
    "need",
    "select",
    "dom",
    "element",
    "five",
    "different",
    "options",
    "choose",
    "five",
    "different",
    "ways",
    "essentially",
    "thing",
    "selecting",
    "element",
    "elements",
    "personally",
    "primarily",
    "use",
    "query",
    "selector",
    "query",
    "select",
    "methods",
    "select",
    "elements",
    "css",
    "selection",
    "primarily",
    "use",
    "select",
    "ids",
    "classes",
    "mainly",
    "css",
    "selectors",
    "provide",
    "really",
    "powerful",
    "efficient",
    "way",
    "selecting",
    "html",
    "documents",
    "especially",
    "ids",
    "likely",
    "understand",
    "elements",
    "id",
    "id",
    "unique",
    "identifier",
    "element",
    "within",
    "document",
    "mind",
    "selecting",
    "element",
    "id",
    "safe",
    "bet",
    "would",
    "go",
    "apply",
    "manipulation",
    "different",
    "elements",
    "unless",
    "perhaps",
    "want",
    "achieve",
    "case",
    "query",
    "select",
    "method",
    "class",
    "selector",
    "typically",
    "use",
    "know",
    "different",
    "methods",
    "use",
    "select",
    "element",
    "dom",
    "tree",
    "could",
    "finally",
    "start",
    "manipulating",
    "firstly",
    "get",
    "rid",
    "content",
    "head",
    "file",
    "get",
    "rid",
    "second",
    "container",
    "really",
    "need",
    "let",
    "start",
    "things",
    "taking",
    "look",
    "change",
    "styling",
    "element",
    "familiar",
    "css",
    "css",
    "properties",
    "way",
    "access",
    "properties",
    "javascript",
    "first",
    "thing",
    "select",
    "main",
    "heading",
    "file",
    "title",
    "container",
    "going",
    "put",
    "variable",
    "call",
    "variable",
    "title",
    "method",
    "grab",
    "id",
    "element",
    "main",
    "heading",
    "oh",
    "need",
    "put",
    "single",
    "quote",
    "marks",
    "let",
    "log",
    "console",
    "know",
    "variable",
    "working",
    "see",
    "selected",
    "element",
    "stored",
    "inside",
    "variable",
    "title",
    "actually",
    "manipulate",
    "starting",
    "element",
    "change",
    "around",
    "using",
    "css",
    "properties",
    "access",
    "css",
    "properties",
    "javascript",
    "first",
    "grab",
    "variable",
    "want",
    "apply",
    "styling",
    "case",
    "title",
    "main",
    "heading",
    "simply",
    "type",
    "style",
    "property",
    "style",
    "property",
    "use",
    "css",
    "property",
    "want",
    "apply",
    "element",
    "change",
    "color",
    "text",
    "set",
    "let",
    "say",
    "red",
    "see",
    "browser",
    "changed",
    "color",
    "main",
    "heading",
    "white",
    "red",
    "using",
    "style",
    "property",
    "css",
    "property",
    "color",
    "type",
    "styling",
    "call",
    "inline",
    "styling",
    "methods",
    "style",
    "elements",
    "javascript",
    "probably",
    "direct",
    "method",
    "take",
    "look",
    "console",
    "see",
    "actually",
    "included",
    "style",
    "attribute",
    "actually",
    "done",
    "inline",
    "styling",
    "important",
    "know",
    "inline",
    "styling",
    "actually",
    "works",
    "single",
    "element",
    "tried",
    "let",
    "say",
    "applying",
    "list",
    "items",
    "would",
    "actually",
    "work",
    "going",
    "demonstrate",
    "guys",
    "let",
    "uh",
    "create",
    "another",
    "variable",
    "call",
    "list",
    "items",
    "grab",
    "list",
    "items",
    "query",
    "selector",
    "uh",
    "um",
    "class",
    "list",
    "items",
    "let",
    "log",
    "list",
    "items",
    "uh",
    "see",
    "console",
    "selected",
    "list",
    "items",
    "let",
    "try",
    "use",
    "style",
    "property",
    "list",
    "items",
    "see",
    "works",
    "say",
    "style",
    "let",
    "say",
    "let",
    "try",
    "change",
    "color",
    "let",
    "actually",
    "font",
    "size",
    "quickly",
    "guys",
    "wanted",
    "mention",
    "important",
    "remember",
    "using",
    "style",
    "property",
    "css",
    "properties",
    "written",
    "camel",
    "case",
    "standard",
    "snake",
    "case",
    "dash",
    "camel",
    "case",
    "essentially",
    "capital",
    "letter",
    "begin",
    "second",
    "word",
    "subsequent",
    "word",
    "name",
    "method",
    "even",
    "property",
    "font",
    "size",
    "css",
    "would",
    "written",
    "like",
    "javascript",
    "use",
    "camel",
    "case",
    "guys",
    "aware",
    "back",
    "talking",
    "tried",
    "changing",
    "font",
    "size",
    "list",
    "items",
    "let",
    "say",
    "two",
    "rem",
    "see",
    "actually",
    "working",
    "trying",
    "apply",
    "inline",
    "style",
    "uh",
    "five",
    "different",
    "list",
    "items",
    "would",
    "work",
    "actually",
    "wanted",
    "apply",
    "styling",
    "list",
    "items",
    "need",
    "loop",
    "list",
    "items",
    "first",
    "show",
    "guys",
    "would",
    "work",
    "uh",
    "say",
    "equals",
    "zero",
    "uh",
    "say",
    "less",
    "list",
    "dot",
    "length",
    "gives",
    "us",
    "amount",
    "list",
    "items",
    "inside",
    "um",
    "ul",
    "five",
    "want",
    "say",
    "want",
    "increment",
    "one",
    "time",
    "apply",
    "put",
    "inside",
    "loop",
    "need",
    "index",
    "eye",
    "see",
    "quite",
    "subtle",
    "let",
    "make",
    "bit",
    "bigger",
    "see",
    "list",
    "items",
    "styling",
    "looped",
    "using",
    "loop",
    "apply",
    "inline",
    "style",
    "elements",
    "um",
    "using",
    "style",
    "property",
    "multiple",
    "elements",
    "loop",
    "next",
    "thing",
    "want",
    "take",
    "look",
    "creating",
    "elements",
    "going",
    "comment",
    "first",
    "get",
    "rid",
    "list",
    "items",
    "going",
    "put",
    "comment",
    "styling",
    "elements",
    "one",
    "creating",
    "elements",
    "another",
    "really",
    "cool",
    "thing",
    "dom",
    "manipulation",
    "create",
    "elements",
    "javascript",
    "file",
    "simple",
    "method",
    "really",
    "create",
    "element",
    "let",
    "say",
    "want",
    "add",
    "another",
    "list",
    "item",
    "favorite",
    "movie",
    "franchise",
    "uh",
    "container",
    "need",
    "first",
    "create",
    "variable",
    "unordered",
    "list",
    "um",
    "need",
    "enter",
    "order",
    "list",
    "uh",
    "say",
    "document",
    "dot",
    "query",
    "select",
    "grab",
    "ul",
    "use",
    "career",
    "elements",
    "method",
    "create",
    "another",
    "list",
    "item",
    "use",
    "another",
    "variable",
    "document",
    "dot",
    "create",
    "element",
    "create",
    "list",
    "item",
    "actually",
    "going",
    "anything",
    "moment",
    "element",
    "created",
    "variable",
    "needs",
    "inserted",
    "document",
    "way",
    "add",
    "elements",
    "inside",
    "document",
    "using",
    "append",
    "method",
    "first",
    "grab",
    "ul",
    "want",
    "append",
    "list",
    "item",
    "inside",
    "ul",
    "grab",
    "pen",
    "method",
    "element",
    "want",
    "append",
    "variable",
    "li",
    "list",
    "item",
    "wo",
    "able",
    "see",
    "currently",
    "moment",
    "take",
    "look",
    "um",
    "document",
    "open",
    "open",
    "div",
    "classic",
    "container",
    "open",
    "ul",
    "see",
    "extra",
    "list",
    "item",
    "inside",
    "ul",
    "inserted",
    "element",
    "using",
    "append",
    "method",
    "add",
    "content",
    "inside",
    "list",
    "item",
    "going",
    "bring",
    "back",
    "go",
    "back",
    "console",
    "gon",
    "na",
    "put",
    "comment",
    "adding",
    "elements",
    "gon",
    "na",
    "say",
    "um",
    "modifying",
    "text",
    "really",
    "need",
    "console",
    "log",
    "anymore",
    "several",
    "ways",
    "include",
    "text",
    "modify",
    "text",
    "html",
    "ways",
    "inner",
    "text",
    "text",
    "content",
    "html",
    "difference",
    "three",
    "demonstrate",
    "differences",
    "going",
    "put",
    "another",
    "html",
    "tag",
    "inside",
    "first",
    "list",
    "item",
    "going",
    "put",
    "span",
    "going",
    "put",
    "neo",
    "relevant",
    "matrix",
    "going",
    "create",
    "another",
    "variable",
    "grab",
    "element",
    "going",
    "say",
    "first",
    "list",
    "item",
    "set",
    "document",
    "say",
    "query",
    "selector",
    "grab",
    "list",
    "item",
    "going",
    "grab",
    "console",
    "log",
    "actually",
    "put",
    "first",
    "list",
    "item",
    "oh",
    "forgotten",
    "first",
    "list",
    "item",
    "going",
    "include",
    "text",
    "first",
    "displays",
    "text",
    "duplicate",
    "couple",
    "times",
    "going",
    "grab",
    "text",
    "content",
    "also",
    "grab",
    "html",
    "pull",
    "bit",
    "take",
    "look",
    "console",
    "clearly",
    "see",
    "differences",
    "uh",
    "three",
    "essentially",
    "way",
    "displayed",
    "within",
    "text",
    "see",
    "simply",
    "getting",
    "visible",
    "text",
    "contained",
    "inside",
    "node",
    "text",
    "content",
    "see",
    "actually",
    "displayed",
    "way",
    "html",
    "file",
    "got",
    "indents",
    "jumping",
    "onto",
    "new",
    "line",
    "within",
    "html",
    "similar",
    "sort",
    "thing",
    "indents",
    "jumping",
    "new",
    "lines",
    "also",
    "showing",
    "tags",
    "showing",
    "us",
    "span",
    "tags",
    "inside",
    "html",
    "pretty",
    "much",
    "differences",
    "three",
    "another",
    "thing",
    "within",
    "html",
    "bit",
    "danger",
    "using",
    "inner",
    "html",
    "mainly",
    "security",
    "issues",
    "really",
    "want",
    "user",
    "input",
    "displayed",
    "inner",
    "html",
    "actually",
    "allows",
    "user",
    "control",
    "javascript",
    "html",
    "web",
    "page",
    "obviously",
    "problems",
    "cases",
    "going",
    "use",
    "inner",
    "text",
    "let",
    "go",
    "ahead",
    "use",
    "implement",
    "list",
    "item",
    "created",
    "going",
    "grab",
    "li",
    "grab",
    "text",
    "going",
    "set",
    "equal",
    "let",
    "say",
    "another",
    "franchise",
    "take",
    "look",
    "browser",
    "see",
    "text",
    "included",
    "inside",
    "list",
    "item",
    "right",
    "guys",
    "created",
    "list",
    "item",
    "added",
    "ul",
    "using",
    "append",
    "method",
    "also",
    "given",
    "text",
    "next",
    "thing",
    "want",
    "make",
    "list",
    "item",
    "look",
    "like",
    "rest",
    "list",
    "items",
    "going",
    "need",
    "learn",
    "modify",
    "manipulate",
    "element",
    "attributes",
    "classes",
    "luckily",
    "us",
    "javascript",
    "provides",
    "several",
    "methods",
    "properties",
    "removing",
    "changing",
    "html",
    "elements",
    "attributes",
    "classes",
    "going",
    "go",
    "underneath",
    "put",
    "comment",
    "modifying",
    "attributes",
    "classes",
    "first",
    "method",
    "going",
    "take",
    "look",
    "set",
    "attribute",
    "method",
    "grab",
    "list",
    "item",
    "say",
    "set",
    "attribute",
    "probably",
    "guessed",
    "pretty",
    "set",
    "attribute",
    "specified",
    "element",
    "case",
    "list",
    "item",
    "attribute",
    "need",
    "include",
    "two",
    "values",
    "first",
    "attribute",
    "want",
    "set",
    "put",
    "id",
    "second",
    "name",
    "want",
    "give",
    "attribute",
    "give",
    "attribute",
    "let",
    "say",
    "let",
    "give",
    "id",
    "main",
    "heading",
    "see",
    "browser",
    "given",
    "list",
    "item",
    "id",
    "main",
    "heading",
    "main",
    "heading",
    "see",
    "got",
    "exact",
    "styling",
    "see",
    "set",
    "attribute",
    "method",
    "quite",
    "powerful",
    "next",
    "method",
    "want",
    "take",
    "look",
    "actually",
    "remove",
    "attribute",
    "go",
    "underneath",
    "say",
    "li",
    "dot",
    "remove",
    "attribute",
    "pretty",
    "let",
    "say",
    "want",
    "remove",
    "id",
    "list",
    "item",
    "put",
    "id",
    "close",
    "see",
    "reverted",
    "back",
    "default",
    "styling",
    "styling",
    "main",
    "heading",
    "also",
    "way",
    "access",
    "attributes",
    "javascript",
    "follows",
    "similar",
    "sort",
    "method",
    "say",
    "let",
    "say",
    "want",
    "get",
    "attribute",
    "main",
    "heading",
    "need",
    "first",
    "let",
    "create",
    "variable",
    "const",
    "say",
    "title",
    "equals",
    "document",
    "dot",
    "query",
    "selector",
    "grab",
    "main",
    "heading",
    "let",
    "log",
    "console",
    "say",
    "um",
    "title",
    "dot",
    "get",
    "attribute",
    "want",
    "id",
    "see",
    "console",
    "giving",
    "us",
    "main",
    "heading",
    "id",
    "associated",
    "main",
    "heading",
    "deal",
    "attributes",
    "let",
    "take",
    "look",
    "deal",
    "classes",
    "get",
    "rid",
    "grab",
    "list",
    "item",
    "use",
    "property",
    "class",
    "list",
    "classlist",
    "property",
    "quite",
    "methods",
    "utilize",
    "first",
    "one",
    "take",
    "look",
    "use",
    "add",
    "method",
    "course",
    "add",
    "class",
    "list",
    "item",
    "say",
    "dot",
    "add",
    "let",
    "say",
    "list",
    "items",
    "see",
    "add",
    "class",
    "last",
    "list",
    "item",
    "exact",
    "styling",
    "list",
    "items",
    "added",
    "class",
    "rest",
    "list",
    "items",
    "also",
    "remove",
    "say",
    "remove",
    "revert",
    "back",
    "default",
    "styling",
    "course",
    "removed",
    "class",
    "another",
    "thing",
    "find",
    "whether",
    "element",
    "specific",
    "class",
    "um",
    "going",
    "log",
    "item",
    "console",
    "class",
    "list",
    "use",
    "method",
    "contains",
    "going",
    "find",
    "contains",
    "list",
    "items",
    "see",
    "returning",
    "us",
    "false",
    "course",
    "remove",
    "class",
    "giving",
    "us",
    "false",
    "change",
    "method",
    "add",
    "instead",
    "see",
    "returning",
    "us",
    "true",
    "course",
    "list",
    "item",
    "contain",
    "uh",
    "class",
    "modify",
    "attributes",
    "classes",
    "dom",
    "course",
    "dom",
    "many",
    "methods",
    "core",
    "methods",
    "likely",
    "need",
    "use",
    "still",
    "one",
    "method",
    "left",
    "use",
    "remove",
    "element",
    "method",
    "remove",
    "element",
    "list",
    "item",
    "case",
    "pretty",
    "simple",
    "method",
    "remember",
    "putting",
    "first",
    "remove",
    "elements",
    "need",
    "remove",
    "method",
    "say",
    "li",
    "dot",
    "remove",
    "take",
    "look",
    "console",
    "see",
    "list",
    "item",
    "removed",
    "open",
    "elements",
    "open",
    "div",
    "open",
    "url",
    "see",
    "list",
    "item",
    "longer",
    "learned",
    "quite",
    "bit",
    "dom",
    "learned",
    "access",
    "elements",
    "dom",
    "also",
    "learned",
    "create",
    "add",
    "modify",
    "style",
    "remove",
    "elements",
    "dom",
    "next",
    "thing",
    "want",
    "take",
    "look",
    "navigate",
    "dom",
    "going",
    "bring",
    "guys",
    "back",
    "slide",
    "looked",
    "beginning",
    "video",
    "really",
    "basic",
    "diagram",
    "dom",
    "tree",
    "nodes",
    "everything",
    "diagram",
    "see",
    "type",
    "node",
    "includes",
    "elements",
    "attributes",
    "text",
    "content",
    "even",
    "line",
    "breaks",
    "comments",
    "inside",
    "html",
    "document",
    "considered",
    "nodes",
    "together",
    "make",
    "dom",
    "tree",
    "dom",
    "object",
    "actually",
    "property",
    "window",
    "object",
    "global",
    "top",
    "level",
    "object",
    "representing",
    "tab",
    "browser",
    "window",
    "object",
    "access",
    "much",
    "information",
    "toolbar",
    "height",
    "width",
    "window",
    "even",
    "things",
    "like",
    "prompts",
    "alerts",
    "tutorial",
    "interested",
    "document",
    "object",
    "inside",
    "inner",
    "window",
    "stuff",
    "want",
    "manipulate",
    "also",
    "remember",
    "back",
    "beginning",
    "tutorial",
    "nodes",
    "diagram",
    "parent",
    "child",
    "sibling",
    "relationship",
    "top",
    "note",
    "document",
    "node",
    "root",
    "node",
    "dom",
    "tree",
    "use",
    "access",
    "dom",
    "manipulate",
    "content",
    "document",
    "node",
    "one",
    "child",
    "node",
    "html",
    "element",
    "html",
    "element",
    "parent",
    "node",
    "head",
    "body",
    "elements",
    "head",
    "body",
    "elements",
    "would",
    "call",
    "siblings",
    "since",
    "level",
    "dom",
    "tree",
    "underneath",
    "head",
    "element",
    "see",
    "child",
    "node",
    "title",
    "element",
    "text",
    "website",
    "child",
    "node",
    "title",
    "element",
    "relationships",
    "similar",
    "side",
    "body",
    "element",
    "parent",
    "paragraph",
    "h1",
    "paragraph",
    "h1",
    "siblings",
    "text",
    "content",
    "inside",
    "elements",
    "child",
    "nodes",
    "link",
    "header",
    "child",
    "nodes",
    "h1",
    "paragraph",
    "element",
    "see",
    "also",
    "class",
    "attribute",
    "html",
    "attributes",
    "ids",
    "styles",
    "classes",
    "etc",
    "also",
    "considered",
    "nodes",
    "dom",
    "hierarchy",
    "actually",
    "participate",
    "parent",
    "child",
    "relationship",
    "like",
    "nodes",
    "accessed",
    "properties",
    "element",
    "node",
    "contains",
    "would",
    "property",
    "paragraph",
    "tag",
    "example",
    "diagram",
    "often",
    "times",
    "want",
    "move",
    "dom",
    "without",
    "specifying",
    "every",
    "element",
    "node",
    "beforehand",
    "learning",
    "traverse",
    "dom",
    "tree",
    "essential",
    "understanding",
    "work",
    "javascript",
    "html",
    "let",
    "head",
    "back",
    "vs",
    "go",
    "look",
    "different",
    "ways",
    "traverse",
    "dom",
    "alright",
    "guys",
    "pretty",
    "drilled",
    "aware",
    "dom",
    "full",
    "different",
    "types",
    "nodes",
    "parent",
    "child",
    "sibling",
    "relationships",
    "head",
    "html",
    "file",
    "see",
    "action",
    "see",
    "html",
    "element",
    "parent",
    "head",
    "body",
    "element",
    "body",
    "element",
    "parent",
    "div",
    "h1",
    "ul",
    "since",
    "two",
    "levels",
    "body",
    "h1",
    "ul",
    "would",
    "call",
    "siblings",
    "level",
    "going",
    "use",
    "ul",
    "traverse",
    "upwards",
    "dom",
    "find",
    "parent",
    "ul",
    "also",
    "grandparent",
    "head",
    "back",
    "file",
    "go",
    "underneath",
    "parent",
    "traversal",
    "let",
    "first",
    "create",
    "variable",
    "grab",
    "ul",
    "say",
    "let",
    "ul",
    "equals",
    "document",
    "dot",
    "query",
    "selector",
    "grab",
    "ul",
    "log",
    "console",
    "got",
    "ul",
    "see",
    "hovers",
    "know",
    "nodes",
    "dom",
    "referred",
    "parents",
    "children",
    "siblings",
    "depend",
    "relationship",
    "nodes",
    "parent",
    "node",
    "node",
    "one",
    "level",
    "closer",
    "document",
    "dom",
    "hierarchy",
    "find",
    "parent",
    "node",
    "two",
    "options",
    "first",
    "option",
    "parent",
    "node",
    "duplicate",
    "also",
    "parent",
    "element",
    "see",
    "console",
    "getting",
    "div",
    "class",
    "container",
    "parent",
    "ul",
    "say",
    "wanted",
    "actually",
    "traverse",
    "upwards",
    "find",
    "grandparent",
    "ul",
    "need",
    "double",
    "chaining",
    "property",
    "together",
    "parrot",
    "node",
    "write",
    "paranoid",
    "thing",
    "parent",
    "element",
    "see",
    "console",
    "getting",
    "output",
    "body",
    "two",
    "levels",
    "ul",
    "first",
    "container",
    "body",
    "see",
    "done",
    "managed",
    "traverse",
    "dom",
    "tree",
    "ul",
    "figure",
    "grandparent",
    "really",
    "useful",
    "know",
    "kind",
    "properties",
    "may",
    "wondering",
    "difference",
    "two",
    "make",
    "sense",
    "take",
    "look",
    "traverse",
    "child",
    "nodes",
    "moment",
    "basically",
    "clue",
    "name",
    "see",
    "parent",
    "element",
    "parent",
    "node",
    "know",
    "elements",
    "type",
    "node",
    "confuse",
    "people",
    "know",
    "notes",
    "text",
    "document",
    "comments",
    "even",
    "line",
    "breaks",
    "distinction",
    "help",
    "grasp",
    "difference",
    "two",
    "might",
    "still",
    "confuse",
    "guys",
    "little",
    "bit",
    "going",
    "show",
    "action",
    "going",
    "comment",
    "going",
    "create",
    "variable",
    "html",
    "element",
    "going",
    "set",
    "document",
    "dot",
    "document",
    "element",
    "log",
    "console",
    "log",
    "html",
    "see",
    "selected",
    "html",
    "going",
    "thing",
    "apply",
    "parent",
    "node",
    "parent",
    "element",
    "property",
    "html",
    "variable",
    "say",
    "parent",
    "node",
    "duplicate",
    "say",
    "parent",
    "element",
    "see",
    "take",
    "look",
    "console",
    "parent",
    "element",
    "returning",
    "us",
    "null",
    "job",
    "parent",
    "element",
    "property",
    "try",
    "retrieve",
    "parent",
    "element",
    "html",
    "element",
    "ie",
    "document",
    "node",
    "however",
    "document",
    "node",
    "element",
    "node",
    "type",
    "node",
    "hence",
    "getting",
    "null",
    "parent",
    "node",
    "property",
    "try",
    "retrieve",
    "node",
    "regardless",
    "type",
    "node",
    "generally",
    "parrot",
    "node",
    "commonly",
    "used",
    "traversing",
    "dom",
    "even",
    "use",
    "parent",
    "element",
    "likely",
    "wo",
    "run",
    "problem",
    "navigate",
    "upwards",
    "dom",
    "let",
    "take",
    "look",
    "traverse",
    "downwards",
    "dom",
    "taking",
    "look",
    "child",
    "node",
    "traversals",
    "dom",
    "tree",
    "example",
    "still",
    "going",
    "stick",
    "ul",
    "going",
    "traverse",
    "downwards",
    "list",
    "items",
    "going",
    "comment",
    "go",
    "underneath",
    "comment",
    "sticking",
    "ul",
    "going",
    "put",
    "see",
    "going",
    "console",
    "log",
    "ul",
    "like",
    "property",
    "paranormal",
    "parent",
    "element",
    "also",
    "child",
    "node",
    "properties",
    "child",
    "element",
    "properties",
    "pretty",
    "much",
    "work",
    "exact",
    "way",
    "let",
    "first",
    "take",
    "look",
    "child",
    "nodes",
    "property",
    "see",
    "gives",
    "us",
    "ul",
    "going",
    "type",
    "child",
    "nodes",
    "see",
    "console",
    "giving",
    "us",
    "node",
    "list",
    "open",
    "get",
    "list",
    "every",
    "child",
    "node",
    "inside",
    "ul",
    "distinction",
    "nodes",
    "elements",
    "becomes",
    "evident",
    "might",
    "expected",
    "property",
    "give",
    "us",
    "five",
    "list",
    "items",
    "addition",
    "five",
    "list",
    "items",
    "six",
    "text",
    "nodes",
    "actually",
    "wrote",
    "html",
    "generated",
    "javascript",
    "inside",
    "html",
    "indentation",
    "element",
    "nodes",
    "counted",
    "dom",
    "tree",
    "text",
    "nodes",
    "show",
    "guys",
    "happens",
    "remove",
    "one",
    "indentations",
    "going",
    "put",
    "list",
    "item",
    "line",
    "fourth",
    "one",
    "see",
    "node",
    "list",
    "saying",
    "10",
    "instead",
    "11",
    "indentations",
    "counting",
    "text",
    "nodes",
    "distinction",
    "nodes",
    "element",
    "nodes",
    "becomes",
    "even",
    "evident",
    "actually",
    "put",
    "another",
    "line",
    "get",
    "node",
    "list",
    "well",
    "child",
    "noise",
    "property",
    "also",
    "first",
    "last",
    "child",
    "probably",
    "guessed",
    "selects",
    "first",
    "last",
    "child",
    "node",
    "list",
    "going",
    "duplicate",
    "times",
    "example",
    "need",
    "write",
    "first",
    "child",
    "last",
    "child",
    "returning",
    "us",
    "text",
    "nodes",
    "take",
    "look",
    "um",
    "node",
    "list",
    "see",
    "first",
    "index",
    "text",
    "node",
    "last",
    "index",
    "also",
    "text",
    "node",
    "using",
    "first",
    "chart",
    "last",
    "child",
    "selecting",
    "first",
    "last",
    "node",
    "need",
    "mindful",
    "try",
    "styling",
    "element",
    "using",
    "property",
    "show",
    "guys",
    "mean",
    "uh",
    "grab",
    "ul",
    "say",
    "first",
    "child",
    "gon",
    "na",
    "style",
    "first",
    "child",
    "say",
    "background",
    "color",
    "set",
    "let",
    "say",
    "blue",
    "see",
    "getting",
    "error",
    "first",
    "child",
    "actually",
    "text",
    "node",
    "element",
    "select",
    "node",
    "want",
    "apply",
    "styling",
    "instead",
    "using",
    "first",
    "child",
    "grab",
    "child",
    "nodes",
    "property",
    "take",
    "look",
    "node",
    "list",
    "think",
    "wanted",
    "apply",
    "style",
    "item",
    "grab",
    "square",
    "brackets",
    "grab",
    "first",
    "index",
    "number",
    "take",
    "look",
    "browser",
    "see",
    "first",
    "list",
    "item",
    "background",
    "color",
    "blue",
    "applied",
    "styling",
    "like",
    "parent",
    "element",
    "also",
    "thing",
    "children",
    "elements",
    "going",
    "select",
    "element",
    "nodes",
    "comment",
    "use",
    "ul",
    "log",
    "uh",
    "let",
    "log",
    "ul",
    "grab",
    "children",
    "instead",
    "node",
    "list",
    "see",
    "returning",
    "also",
    "html",
    "collection",
    "says",
    "five",
    "five",
    "list",
    "items",
    "inside",
    "ul",
    "like",
    "first",
    "try",
    "last",
    "child",
    "exact",
    "thing",
    "first",
    "child",
    "elements",
    "say",
    "first",
    "child",
    "element",
    "convert",
    "downwards",
    "dom",
    "using",
    "child",
    "node",
    "properties",
    "lastly",
    "going",
    "take",
    "sibling",
    "traversal",
    "knows",
    "siblings",
    "nodes",
    "tree",
    "level",
    "dom",
    "take",
    "look",
    "html",
    "know",
    "h1",
    "ul",
    "siblings",
    "level",
    "also",
    "important",
    "note",
    "siblings",
    "type",
    "node",
    "like",
    "element",
    "nodes",
    "put",
    "text",
    "comment",
    "two",
    "going",
    "put",
    "uh",
    "space",
    "would",
    "classify",
    "sibling",
    "h1",
    "ul",
    "level",
    "let",
    "put",
    "visual",
    "perspective",
    "guys",
    "go",
    "back",
    "file",
    "underneath",
    "comment",
    "going",
    "grab",
    "uo",
    "comment",
    "log",
    "console",
    "get",
    "ul",
    "like",
    "two",
    "previous",
    "traversal",
    "properties",
    "properties",
    "node",
    "covers",
    "nodes",
    "also",
    "properties",
    "cover",
    "element",
    "nodes",
    "let",
    "first",
    "take",
    "look",
    "select",
    "types",
    "nodes",
    "ul",
    "got",
    "previous",
    "sibling",
    "duplicate",
    "also",
    "got",
    "next",
    "sibling",
    "see",
    "console",
    "getting",
    "two",
    "text",
    "nodes",
    "show",
    "getting",
    "two",
    "text",
    "nodes",
    "gon",
    "na",
    "create",
    "another",
    "variable",
    "div",
    "call",
    "div",
    "grab",
    "div",
    "want",
    "find",
    "child",
    "nodes",
    "inside",
    "div",
    "oh",
    "div",
    "wrong",
    "see",
    "open",
    "see",
    "used",
    "two",
    "properties",
    "got",
    "ul",
    "ul",
    "text",
    "node",
    "ul",
    "also",
    "text",
    "node",
    "two",
    "properties",
    "working",
    "like",
    "properties",
    "used",
    "beforehand",
    "parent",
    "element",
    "child",
    "element",
    "notes",
    "exact",
    "thing",
    "sibling",
    "traversal",
    "wanted",
    "find",
    "sibling",
    "element",
    "nodes",
    "instead",
    "using",
    "previous",
    "sibling",
    "next",
    "sibling",
    "use",
    "previous",
    "element",
    "sibling",
    "also",
    "use",
    "next",
    "element",
    "sibling",
    "going",
    "comment",
    "take",
    "look",
    "console",
    "see",
    "getting",
    "h1",
    "previous",
    "element",
    "sibling",
    "node",
    "um",
    "beforehand",
    "html",
    "see",
    "next",
    "element",
    "sibling",
    "getting",
    "null",
    "element",
    "nodes",
    "ul",
    "right",
    "guys",
    "gone",
    "quite",
    "bit",
    "information",
    "regarding",
    "dom",
    "looked",
    "dom",
    "looked",
    "add",
    "elements",
    "dom",
    "style",
    "elements",
    "dom",
    "remove",
    "modify",
    "elements",
    "dom",
    "learned",
    "traverse",
    "dom",
    "last",
    "topic",
    "want",
    "cover",
    "tutorial",
    "taking",
    "look",
    "event",
    "listeners",
    "event",
    "listeners",
    "among",
    "frequently",
    "used",
    "javascript",
    "structures",
    "web",
    "design",
    "basically",
    "allow",
    "us",
    "add",
    "interactive",
    "functionality",
    "html",
    "elements",
    "listening",
    "different",
    "events",
    "take",
    "place",
    "page",
    "user",
    "presses",
    "key",
    "elements",
    "load",
    "user",
    "clicks",
    "button",
    "common",
    "events",
    "might",
    "listen",
    "load",
    "events",
    "touch",
    "start",
    "events",
    "key",
    "events",
    "mouse",
    "events",
    "course",
    "click",
    "events",
    "take",
    "look",
    "moment",
    "leave",
    "link",
    "description",
    "guys",
    "want",
    "check",
    "dumb",
    "events",
    "let",
    "learn",
    "two",
    "common",
    "ways",
    "add",
    "event",
    "listeners",
    "projects",
    "first",
    "way",
    "include",
    "event",
    "actually",
    "inside",
    "directly",
    "inside",
    "one",
    "elements",
    "event",
    "global",
    "event",
    "attribute",
    "way",
    "creating",
    "event",
    "element",
    "works",
    "pretty",
    "much",
    "like",
    "attribute",
    "inserted",
    "directly",
    "html",
    "element",
    "present",
    "page",
    "element",
    "want",
    "apply",
    "event",
    "apply",
    "one",
    "line",
    "script",
    "particular",
    "element",
    "case",
    "going",
    "button",
    "first",
    "example",
    "go",
    "inside",
    "opening",
    "tag",
    "like",
    "sort",
    "attribute",
    "include",
    "whichever",
    "event",
    "like",
    "happen",
    "example",
    "going",
    "use",
    "click",
    "event",
    "say",
    "click",
    "want",
    "fire",
    "click",
    "button",
    "show",
    "us",
    "alert",
    "box",
    "content",
    "love",
    "javascript",
    "put",
    "alert",
    "put",
    "content",
    "love",
    "java",
    "script",
    "need",
    "write",
    "attribute",
    "syntax",
    "see",
    "pretty",
    "simple",
    "included",
    "click",
    "event",
    "attribute",
    "click",
    "specific",
    "button",
    "browser",
    "event",
    "fire",
    "alert",
    "function",
    "executed",
    "text",
    "love",
    "javascript",
    "inside",
    "head",
    "browser",
    "going",
    "click",
    "button",
    "see",
    "click",
    "button",
    "alert",
    "box",
    "pops",
    "got",
    "content",
    "love",
    "javascript",
    "wrote",
    "inside",
    "attribute",
    "first",
    "way",
    "could",
    "include",
    "event",
    "projects",
    "direct",
    "html",
    "element",
    "apply",
    "event",
    "pretty",
    "simple",
    "probably",
    "direct",
    "method",
    "including",
    "event",
    "listener",
    "inside",
    "project",
    "next",
    "method",
    "create",
    "event",
    "listener",
    "javascript",
    "ad",
    "event",
    "listener",
    "method",
    "create",
    "head",
    "back",
    "inside",
    "file",
    "way",
    "method",
    "works",
    "first",
    "include",
    "element",
    "want",
    "apply",
    "event",
    "listener",
    "put",
    "element",
    "use",
    "add",
    "event",
    "listener",
    "method",
    "inside",
    "include",
    "type",
    "event",
    "example",
    "use",
    "another",
    "click",
    "event",
    "second",
    "parameter",
    "function",
    "want",
    "fire",
    "also",
    "option",
    "third",
    "parameter",
    "take",
    "boolean",
    "data",
    "type",
    "true",
    "false",
    "relation",
    "bubbling",
    "capturing",
    "speak",
    "moment",
    "going",
    "include",
    "moment",
    "default",
    "already",
    "false",
    "important",
    "yet",
    "close",
    "essentially",
    "syntax",
    "event",
    "list",
    "using",
    "ad",
    "event",
    "listener",
    "method",
    "example",
    "going",
    "use",
    "example",
    "2",
    "button",
    "going",
    "create",
    "another",
    "alert",
    "box",
    "first",
    "thing",
    "want",
    "create",
    "variable",
    "us",
    "reference",
    "call",
    "button",
    "button",
    "two",
    "html",
    "see",
    "class",
    "btn",
    "gon",
    "na",
    "retrieve",
    "grab",
    "btn",
    "2",
    "first",
    "want",
    "create",
    "callback",
    "function",
    "function",
    "call",
    "alert",
    "btn",
    "inside",
    "put",
    "another",
    "alert",
    "box",
    "type",
    "also",
    "love",
    "java",
    "script",
    "need",
    "include",
    "event",
    "listener",
    "gon",
    "na",
    "copy",
    "syntax",
    "paste",
    "element",
    "button",
    "two",
    "got",
    "advent",
    "listener",
    "method",
    "function",
    "gon",
    "na",
    "alert",
    "btn",
    "got",
    "little",
    "saying",
    "oh",
    "got",
    "e",
    "listener",
    "done",
    "included",
    "click",
    "event",
    "uh",
    "button",
    "two",
    "button",
    "click",
    "alert",
    "box",
    "fire",
    "appear",
    "top",
    "screen",
    "content",
    "also",
    "love",
    "javascript",
    "let",
    "test",
    "see",
    "event",
    "working",
    "getting",
    "alert",
    "box",
    "content",
    "also",
    "love",
    "javascript",
    "use",
    "advantage",
    "listener",
    "method",
    "let",
    "take",
    "look",
    "another",
    "example",
    "example",
    "three",
    "instead",
    "click",
    "event",
    "look",
    "mouse",
    "event",
    "uh",
    "say",
    "mouse",
    "example",
    "instead",
    "clicking",
    "button",
    "move",
    "mouse",
    "want",
    "background",
    "whole",
    "box",
    "change",
    "let",
    "first",
    "grab",
    "think",
    "box",
    "three",
    "create",
    "variable",
    "call",
    "variable",
    "new",
    "background",
    "color",
    "grab",
    "box",
    "selector",
    "box",
    "three",
    "first",
    "create",
    "function",
    "say",
    "function",
    "change",
    "vg",
    "color",
    "grab",
    "variable",
    "new",
    "background",
    "color",
    "style",
    "dot",
    "background",
    "color",
    "let",
    "set",
    "color",
    "blue",
    "uh",
    "include",
    "mouse",
    "event",
    "grab",
    "variable",
    "add",
    "event",
    "listener",
    "method",
    "uh",
    "say",
    "mouse",
    "function",
    "change",
    "vg",
    "color",
    "head",
    "example",
    "three",
    "move",
    "mouse",
    "box",
    "change",
    "background",
    "color",
    "blue",
    "see",
    "working",
    "manage",
    "change",
    "style",
    "third",
    "box",
    "using",
    "mouse",
    "event",
    "event",
    "listener",
    "method",
    "generally",
    "people",
    "tend",
    "use",
    "ad",
    "event",
    "listener",
    "method",
    "html",
    "event",
    "method",
    "typically",
    "apply",
    "many",
    "event",
    "listeners",
    "element",
    "ad",
    "event",
    "listener",
    "method",
    "whereas",
    "html",
    "event",
    "method",
    "apply",
    "one",
    "event",
    "already",
    "html",
    "element",
    "try",
    "plan",
    "another",
    "one",
    "new",
    "one",
    "would",
    "override",
    "old",
    "one",
    "want",
    "apply",
    "one",
    "event",
    "event",
    "method",
    "works",
    "perfectly",
    "fine",
    "really",
    "basic",
    "example",
    "guys",
    "implement",
    "event",
    "listeners",
    "take",
    "things",
    "little",
    "step",
    "creating",
    "reveal",
    "hide",
    "event",
    "click",
    "button",
    "display",
    "text",
    "originally",
    "hidden",
    "right",
    "guys",
    "really",
    "cool",
    "thing",
    "event",
    "listeners",
    "combine",
    "css",
    "javascript",
    "tools",
    "create",
    "interactive",
    "fun",
    "constructs",
    "part",
    "tutorial",
    "simple",
    "example",
    "button",
    "click",
    "button",
    "see",
    "reveals",
    "text",
    "click",
    "button",
    "hides",
    "text",
    "html",
    "example",
    "really",
    "simple",
    "got",
    "div",
    "colossal",
    "container",
    "inside",
    "div",
    "got",
    "button",
    "element",
    "class",
    "reveal",
    "btn",
    "class",
    "boxes",
    "general",
    "class",
    "underneath",
    "class",
    "hidden",
    "content",
    "dummy",
    "text",
    "inside",
    "also",
    "class",
    "boxes",
    "currently",
    "looks",
    "like",
    "right",
    "live",
    "server",
    "first",
    "thing",
    "want",
    "go",
    "file",
    "create",
    "two",
    "constants",
    "grab",
    "two",
    "elements",
    "first",
    "one",
    "going",
    "button",
    "call",
    "reveal",
    "btn",
    "say",
    "document",
    "dot",
    "query",
    "selector",
    "grab",
    "element",
    "class",
    "reveal",
    "btn",
    "want",
    "create",
    "another",
    "constant",
    "hidden",
    "section",
    "call",
    "uh",
    "let",
    "call",
    "hidden",
    "content",
    "grab",
    "class",
    "hidden",
    "content",
    "think",
    "yeah",
    "got",
    "two",
    "constants",
    "next",
    "thing",
    "want",
    "create",
    "callback",
    "function",
    "check",
    "hidden",
    "content",
    "class",
    "reveal",
    "btn",
    "explain",
    "depth",
    "let",
    "create",
    "function",
    "going",
    "create",
    "function",
    "call",
    "function",
    "reveal",
    "content",
    "inside",
    "curly",
    "braces",
    "want",
    "use",
    "else",
    "statement",
    "use",
    "statement",
    "first",
    "inside",
    "brackets",
    "condition",
    "say",
    "hidden",
    "content",
    "grab",
    "class",
    "list",
    "property",
    "contains",
    "class",
    "reveal",
    "btn",
    "condition",
    "code",
    "want",
    "execute",
    "condition",
    "true",
    "grab",
    "hidden",
    "content",
    "grab",
    "classlist",
    "property",
    "want",
    "actually",
    "remove",
    "class",
    "contain",
    "class",
    "want",
    "remove",
    "class",
    "reveal",
    "btn",
    "make",
    "sense",
    "moment",
    "going",
    "write",
    "else",
    "contain",
    "class",
    "reveal",
    "btn",
    "want",
    "grab",
    "hidden",
    "content",
    "classes",
    "property",
    "want",
    "add",
    "class",
    "reveal",
    "btn",
    "next",
    "thing",
    "want",
    "include",
    "event",
    "listener",
    "want",
    "apply",
    "event",
    "list",
    "uh",
    "button",
    "say",
    "reveal",
    "btn",
    "add",
    "event",
    "listener",
    "want",
    "look",
    "click",
    "event",
    "function",
    "want",
    "run",
    "reveal",
    "content",
    "function",
    "created",
    "last",
    "thing",
    "visually",
    "hide",
    "div",
    "dummy",
    "text",
    "inside",
    "style",
    "sheet",
    "go",
    "inside",
    "internal",
    "style",
    "sheet",
    "grab",
    "class",
    "hidden",
    "content",
    "say",
    "display",
    "none",
    "function",
    "runs",
    "include",
    "class",
    "reveal",
    "btn",
    "want",
    "grab",
    "hidden",
    "content",
    "grab",
    "reveal",
    "btn",
    "class",
    "want",
    "display",
    "block",
    "working",
    "click",
    "button",
    "see",
    "reveals",
    "paragraph",
    "click",
    "button",
    "hides",
    "content",
    "essentially",
    "saying",
    "depending",
    "current",
    "state",
    "hidden",
    "content",
    "javascript",
    "either",
    "add",
    "remove",
    "reveal",
    "btn",
    "class",
    "current",
    "state",
    "right",
    "button",
    "class",
    "reveal",
    "btn",
    "hence",
    "displaying",
    "set",
    "none",
    "click",
    "button",
    "display",
    "block",
    "added",
    "event",
    "listener",
    "looks",
    "click",
    "run",
    "function",
    "check",
    "contain",
    "reveal",
    "btn",
    "got",
    "else",
    "statement",
    "add",
    "class",
    "reveal",
    "btn",
    "set",
    "block",
    "display",
    "click",
    "button",
    "see",
    "displaying",
    "click",
    "button",
    "run",
    "function",
    "first",
    "check",
    "contains",
    "class",
    "reveal",
    "btn",
    "currently",
    "state",
    "remove",
    "class",
    "btn",
    "internal",
    "style",
    "sheet",
    "set",
    "display",
    "none",
    "effectively",
    "hide",
    "content",
    "show",
    "us",
    "button",
    "show",
    "guys",
    "looks",
    "like",
    "comment",
    "remove",
    "section",
    "click",
    "button",
    "display",
    "currently",
    "right",
    "added",
    "class",
    "reveal",
    "btn",
    "click",
    "see",
    "still",
    "displaying",
    "text",
    "statement",
    "longer",
    "ability",
    "remove",
    "class",
    "create",
    "really",
    "basic",
    "reveal",
    "hard",
    "functionality",
    "using",
    "event",
    "listeners",
    "looks",
    "pretty",
    "simple",
    "technique",
    "actually",
    "used",
    "many",
    "different",
    "things",
    "instance",
    "use",
    "things",
    "like",
    "toggling",
    "menu",
    "small",
    "screens",
    "see",
    "hamburger",
    "menu",
    "display",
    "error",
    "messages",
    "many",
    "things",
    "guys",
    "create",
    "events",
    "javascript",
    "fire",
    "different",
    "types",
    "events",
    "loads",
    "different",
    "types",
    "events",
    "create",
    "leave",
    "link",
    "description",
    "guys",
    "guys",
    "want",
    "check",
    "actually",
    "scratching",
    "surface",
    "event",
    "listeners",
    "things",
    "lurking",
    "underneath",
    "appropriately",
    "put",
    "lurking",
    "behind",
    "scenes",
    "event",
    "listeners",
    "event",
    "propagation",
    "event",
    "delegation",
    "let",
    "first",
    "take",
    "look",
    "event",
    "propagation",
    "means",
    "event",
    "propagation",
    "refers",
    "event",
    "travels",
    "document",
    "object",
    "model",
    "dom",
    "tree",
    "think",
    "event",
    "propagation",
    "electricity",
    "running",
    "wire",
    "reaches",
    "destination",
    "fully",
    "aware",
    "dom",
    "full",
    "nodes",
    "referring",
    "event",
    "propagation",
    "events",
    "event",
    "needs",
    "pass",
    "every",
    "node",
    "dom",
    "reaches",
    "end",
    "forcibly",
    "stopped",
    "event",
    "propagation",
    "also",
    "umbrella",
    "term",
    "used",
    "cover",
    "three",
    "phases",
    "dealing",
    "event",
    "listeners",
    "first",
    "got",
    "event",
    "capturing",
    "got",
    "target",
    "got",
    "event",
    "bubbling",
    "simplest",
    "definition",
    "capturing",
    "phase",
    "starts",
    "root",
    "travels",
    "way",
    "target",
    "reached",
    "target",
    "goes",
    "bubbling",
    "phase",
    "travels",
    "back",
    "target",
    "root",
    "better",
    "understand",
    "let",
    "take",
    "look",
    "visual",
    "representation",
    "event",
    "propagation",
    "slide",
    "see",
    "basic",
    "diagram",
    "three",
    "phases",
    "imagine",
    "button",
    "bottom",
    "click",
    "event",
    "attached",
    "clicked",
    "happens",
    "javascript",
    "behind",
    "scenes",
    "starts",
    "three",
    "phases",
    "first",
    "begins",
    "capture",
    "phase",
    "starts",
    "highest",
    "level",
    "dom",
    "trickle",
    "way",
    "notify",
    "element",
    "notify",
    "html",
    "element",
    "body",
    "div",
    "tell",
    "something",
    "underneath",
    "clicked",
    "going",
    "back",
    "analogy",
    "electricity",
    "running",
    "wire",
    "trickle",
    "reaches",
    "target",
    "phase",
    "phase",
    "dom",
    "node",
    "click",
    "example",
    "button",
    "bottom",
    "click",
    "event",
    "attached",
    "would",
    "target",
    "essentially",
    "target",
    "phase",
    "target",
    "phase",
    "triggered",
    "next",
    "phase",
    "call",
    "bubbling",
    "phase",
    "essentially",
    "opposite",
    "capture",
    "phase",
    "travels",
    "back",
    "dom",
    "notifies",
    "every",
    "element",
    "div",
    "body",
    "html",
    "document",
    "way",
    "highest",
    "level",
    "period",
    "target",
    "happening",
    "behind",
    "scenes",
    "almost",
    "instantaneous",
    "let",
    "go",
    "ahead",
    "vs",
    "code",
    "take",
    "look",
    "looks",
    "like",
    "browser",
    "console",
    "right",
    "guys",
    "inside",
    "code",
    "see",
    "example",
    "several",
    "elements",
    "nesting",
    "inside",
    "take",
    "look",
    "html",
    "markup",
    "pretty",
    "simple",
    "got",
    "div",
    "class",
    "div",
    "two",
    "inside",
    "got",
    "another",
    "div",
    "class",
    "div",
    "one",
    "inside",
    "div",
    "button",
    "element",
    "looks",
    "like",
    "browser",
    "see",
    "basic",
    "styling",
    "head",
    "javascript",
    "see",
    "event",
    "listings",
    "pretty",
    "much",
    "everything",
    "dom",
    "tree",
    "got",
    "one",
    "window",
    "got",
    "one",
    "document",
    "got",
    "one",
    "div",
    "two",
    "div",
    "one",
    "button",
    "see",
    "set",
    "little",
    "bit",
    "differently",
    "regards",
    "event",
    "listeners",
    "instead",
    "creating",
    "variable",
    "window",
    "document",
    "well",
    "elements",
    "added",
    "event",
    "listeners",
    "directly",
    "creating",
    "variable",
    "way",
    "work",
    "perfectly",
    "fine",
    "example",
    "less",
    "code",
    "saves",
    "scrolling",
    "bunch",
    "times",
    "pain",
    "people",
    "regards",
    "events",
    "see",
    "click",
    "events",
    "functions",
    "simply",
    "log",
    "respective",
    "name",
    "dom",
    "tree",
    "except",
    "button",
    "instead",
    "text",
    "see",
    "included",
    "e",
    "inside",
    "functions",
    "parameters",
    "well",
    "inside",
    "function",
    "logging",
    "e",
    "explain",
    "moment",
    "first",
    "want",
    "draw",
    "attention",
    "third",
    "parameter",
    "inside",
    "event",
    "listeners",
    "highlight",
    "see",
    "boolean",
    "value",
    "true",
    "guys",
    "remember",
    "back",
    "bit",
    "earlier",
    "video",
    "learning",
    "ad",
    "event",
    "listener",
    "method",
    "third",
    "optional",
    "parameter",
    "could",
    "include",
    "well",
    "parameter",
    "dictates",
    "whether",
    "want",
    "use",
    "event",
    "capture",
    "event",
    "bubbling",
    "let",
    "go",
    "ahead",
    "click",
    "button",
    "browser",
    "see",
    "gives",
    "us",
    "console",
    "see",
    "console",
    "giving",
    "us",
    "first",
    "phase",
    "capture",
    "phase",
    "starting",
    "window",
    "going",
    "notifying",
    "elements",
    "comes",
    "across",
    "way",
    "target",
    "saying",
    "pointer",
    "event",
    "stuff",
    "see",
    "represents",
    "information",
    "event",
    "exactly",
    "e",
    "means",
    "inside",
    "function",
    "inside",
    "button",
    "e",
    "represents",
    "event",
    "object",
    "exactly",
    "see",
    "console",
    "information",
    "event",
    "occurred",
    "button",
    "open",
    "see",
    "different",
    "properties",
    "information",
    "event",
    "got",
    "sorts",
    "things",
    "take",
    "look",
    "utilize",
    "find",
    "type",
    "know",
    "click",
    "event",
    "check",
    "exactly",
    "button",
    "exactly",
    "screen",
    "browser",
    "x",
    "axis",
    "also",
    "check",
    "things",
    "like",
    "whether",
    "shift",
    "key",
    "pushed",
    "false",
    "use",
    "shift",
    "key",
    "sorts",
    "things",
    "use",
    "utilize",
    "main",
    "property",
    "want",
    "bring",
    "attention",
    "relevant",
    "one",
    "three",
    "phases",
    "target",
    "property",
    "see",
    "saying",
    "button",
    "property",
    "represents",
    "element",
    "event",
    "actually",
    "relates",
    "target",
    "phase",
    "actually",
    "go",
    "console",
    "type",
    "dot",
    "target",
    "refresh",
    "click",
    "button",
    "see",
    "starting",
    "window",
    "going",
    "document",
    "div",
    "two",
    "div",
    "one",
    "using",
    "target",
    "property",
    "show",
    "us",
    "element",
    "event",
    "button",
    "cool",
    "things",
    "let",
    "say",
    "example",
    "click",
    "button",
    "um",
    "change",
    "text",
    "say",
    "clicked",
    "target",
    "say",
    "dot",
    "text",
    "set",
    "equal",
    "say",
    "clicked",
    "happen",
    "click",
    "button",
    "change",
    "text",
    "click",
    "see",
    "console",
    "clicked",
    "button",
    "changing",
    "text",
    "click",
    "done",
    "use",
    "event",
    "object",
    "grab",
    "target",
    "button",
    "use",
    "inner",
    "text",
    "property",
    "change",
    "click",
    "function",
    "files",
    "buttons",
    "text",
    "change",
    "click",
    "see",
    "browser",
    "also",
    "take",
    "look",
    "console",
    "see",
    "also",
    "see",
    "phase",
    "one",
    "capturing",
    "phase",
    "start",
    "window",
    "document",
    "div",
    "two",
    "div",
    "one",
    "click",
    "button",
    "first",
    "second",
    "phase",
    "initiate",
    "third",
    "phase",
    "bubbling",
    "phase",
    "well",
    "need",
    "grab",
    "true",
    "values",
    "third",
    "parameter",
    "change",
    "false",
    "actually",
    "false",
    "default",
    "click",
    "button",
    "see",
    "started",
    "button",
    "going",
    "div",
    "1",
    "div",
    "2",
    "document",
    "window",
    "bubbling",
    "upwards",
    "hence",
    "term",
    "event",
    "bubbling",
    "target",
    "bubbling",
    "highest",
    "position",
    "dom",
    "tree",
    "ways",
    "actually",
    "stop",
    "event",
    "propagation",
    "let",
    "say",
    "wanted",
    "stop",
    "bubbling",
    "um",
    "happen",
    "second",
    "div",
    "stop",
    "propagation",
    "method",
    "let",
    "go",
    "second",
    "div",
    "include",
    "event",
    "object",
    "inside",
    "say",
    "e",
    "dot",
    "stop",
    "propagation",
    "happen",
    "click",
    "button",
    "reaches",
    "second",
    "div",
    "want",
    "propagation",
    "stop",
    "longer",
    "able",
    "see",
    "events",
    "document",
    "window",
    "click",
    "see",
    "going",
    "click",
    "div",
    "one",
    "div",
    "two",
    "stopped",
    "propagation",
    "function",
    "also",
    "applies",
    "event",
    "capturing",
    "grab",
    "third",
    "parameters",
    "change",
    "true",
    "capture",
    "phase",
    "click",
    "button",
    "see",
    "opposite",
    "happening",
    "starting",
    "window",
    "cap",
    "capture",
    "phase",
    "begins",
    "goes",
    "document",
    "goes",
    "div",
    "two",
    "stops",
    "div",
    "two",
    "stopped",
    "propagation",
    "stop",
    "event",
    "propagation",
    "happening",
    "forward",
    "capturing",
    "bubbling",
    "another",
    "useful",
    "ability",
    "utilize",
    "event",
    "bubbling",
    "events",
    "far",
    "example",
    "use",
    "div",
    "two",
    "going",
    "comment",
    "stop",
    "propagation",
    "method",
    "take",
    "e",
    "change",
    "two",
    "false",
    "even",
    "though",
    "false",
    "default",
    "um",
    "keep",
    "like",
    "consistency",
    "want",
    "div",
    "two",
    "fire",
    "third",
    "parameter",
    "grab",
    "property",
    "set",
    "true",
    "click",
    "button",
    "see",
    "fires",
    "normal",
    "starts",
    "click",
    "bubbles",
    "way",
    "window",
    "click",
    "button",
    "see",
    "starting",
    "button",
    "target",
    "going",
    "div",
    "one",
    "dev2",
    "longer",
    "firing",
    "goes",
    "document",
    "window",
    "click",
    "see",
    "div",
    "2",
    "event",
    "far",
    "enough",
    "done",
    "defined",
    "want",
    "event",
    "fire",
    "another",
    "common",
    "method",
    "likely",
    "run",
    "prevent",
    "default",
    "method",
    "method",
    "pretty",
    "really",
    "prevents",
    "default",
    "behavior",
    "might",
    "occur",
    "element",
    "event",
    "quite",
    "dependent",
    "type",
    "element",
    "involved",
    "context",
    "event",
    "see",
    "example",
    "prevent",
    "default",
    "method",
    "going",
    "go",
    "going",
    "change",
    "button",
    "anchor",
    "tag",
    "going",
    "give",
    "class",
    "button",
    "going",
    "put",
    "click",
    "uh",
    "go",
    "styling",
    "button",
    "make",
    "class",
    "also",
    "put",
    "new",
    "line",
    "say",
    "display",
    "block",
    "anchor",
    "tags",
    "inline",
    "default",
    "head",
    "file",
    "also",
    "make",
    "sure",
    "query",
    "selector",
    "targeting",
    "class",
    "button",
    "anchor",
    "tag",
    "event",
    "listener",
    "target",
    "event",
    "changed",
    "button",
    "anchor",
    "tag",
    "click",
    "see",
    "firing",
    "events",
    "quickly",
    "refresh",
    "reason",
    "default",
    "behavior",
    "anchor",
    "tag",
    "try",
    "redirect",
    "us",
    "somewhere",
    "else",
    "causing",
    "quick",
    "fire",
    "events",
    "refresh",
    "stop",
    "happening",
    "prevent",
    "default",
    "method",
    "go",
    "inside",
    "button",
    "class",
    "button",
    "grab",
    "um",
    "event",
    "object",
    "prevent",
    "default",
    "click",
    "button",
    "see",
    "showing",
    "us",
    "bubbling",
    "phase",
    "content",
    "changed",
    "click",
    "staying",
    "happened",
    "apply",
    "prevent",
    "default",
    "method",
    "onto",
    "anchor",
    "tag",
    "longer",
    "trying",
    "direct",
    "us",
    "somewhere",
    "else",
    "see",
    "practical",
    "example",
    "methods",
    "learned",
    "prevent",
    "default",
    "uh",
    "stop",
    "propagation",
    "part",
    "two",
    "tutorial",
    "look",
    "practical",
    "examples",
    "projects",
    "wanted",
    "make",
    "guys",
    "aware",
    "um",
    "confuse",
    "subsequent",
    "video",
    "last",
    "thing",
    "want",
    "mention",
    "tutorial",
    "guys",
    "event",
    "delegation",
    "event",
    "delegation",
    "one",
    "potent",
    "event",
    "handling",
    "patterns",
    "inside",
    "javascript",
    "dom",
    "allows",
    "users",
    "append",
    "single",
    "event",
    "listener",
    "parent",
    "element",
    "adds",
    "present",
    "future",
    "descendants",
    "match",
    "selector",
    "actually",
    "break",
    "definition",
    "show",
    "guys",
    "exactly",
    "means",
    "first",
    "part",
    "says",
    "allows",
    "users",
    "append",
    "single",
    "event",
    "listener",
    "parent",
    "element",
    "adds",
    "present",
    "children",
    "find",
    "useful",
    "let",
    "actually",
    "go",
    "back",
    "steps",
    "see",
    "get",
    "event",
    "delegation",
    "head",
    "back",
    "file",
    "see",
    "got",
    "unordered",
    "list",
    "bunch",
    "different",
    "sports",
    "inside",
    "honorable",
    "list",
    "id",
    "sports",
    "list",
    "items",
    "id",
    "equivalent",
    "content",
    "see",
    "inside",
    "list",
    "items",
    "looks",
    "like",
    "console",
    "click",
    "one",
    "list",
    "items",
    "see",
    "showing",
    "us",
    "console",
    "football",
    "click",
    "also",
    "changes",
    "background",
    "light",
    "gray",
    "highlight",
    "clicked",
    "going",
    "individual",
    "list",
    "item",
    "achieve",
    "apply",
    "event",
    "listeners",
    "individual",
    "list",
    "item",
    "inside",
    "unordered",
    "list",
    "head",
    "file",
    "grab",
    "first",
    "list",
    "item",
    "say",
    "document",
    "dot",
    "query",
    "selector",
    "grab",
    "id",
    "football",
    "add",
    "event",
    "list",
    "going",
    "look",
    "click",
    "event",
    "grab",
    "function",
    "inside",
    "function",
    "include",
    "event",
    "object",
    "inside",
    "function",
    "uh",
    "want",
    "uh",
    "first",
    "console",
    "log",
    "let",
    "say",
    "say",
    "football",
    "clicked",
    "next",
    "thing",
    "want",
    "change",
    "background",
    "color",
    "click",
    "actual",
    "list",
    "item",
    "going",
    "first",
    "need",
    "create",
    "constant",
    "going",
    "say",
    "call",
    "target",
    "going",
    "equal",
    "e",
    "dot",
    "target",
    "list",
    "item",
    "going",
    "say",
    "condition",
    "going",
    "put",
    "target",
    "matches",
    "matches",
    "method",
    "basically",
    "essentially",
    "checks",
    "target",
    "case",
    "list",
    "item",
    "matches",
    "css",
    "selector",
    "going",
    "li",
    "going",
    "return",
    "true",
    "returns",
    "going",
    "change",
    "background",
    "color",
    "condition",
    "want",
    "include",
    "code",
    "want",
    "execute",
    "going",
    "say",
    "target",
    "dot",
    "style",
    "dot",
    "background",
    "color",
    "set",
    "light",
    "gray",
    "head",
    "folders",
    "live",
    "server",
    "see",
    "exact",
    "layout",
    "happen",
    "click",
    "football",
    "list",
    "item",
    "background",
    "change",
    "color",
    "light",
    "gray",
    "also",
    "show",
    "console",
    "click",
    "see",
    "saying",
    "football",
    "click",
    "changing",
    "background",
    "light",
    "gray",
    "created",
    "event",
    "listener",
    "um",
    "inside",
    "file",
    "wanted",
    "need",
    "duplicate",
    "four",
    "times",
    "instead",
    "football",
    "basketball",
    "third",
    "one",
    "boxed",
    "fourth",
    "one",
    "tennis",
    "create",
    "one",
    "golf",
    "starter",
    "console",
    "logs",
    "working",
    "list",
    "items",
    "start",
    "football",
    "see",
    "working",
    "basketball",
    "working",
    "boxing",
    "working",
    "tennis",
    "golf",
    "also",
    "working",
    "getting",
    "exact",
    "thing",
    "draft",
    "example",
    "except",
    "text",
    "little",
    "bit",
    "different",
    "exact",
    "styling",
    "see",
    "working",
    "perfectly",
    "fine",
    "great",
    "works",
    "fine",
    "real",
    "issue",
    "code",
    "getting",
    "exact",
    "result",
    "draft",
    "example",
    "learn",
    "throughout",
    "code",
    "journey",
    "always",
    "questions",
    "ask",
    "written",
    "code",
    "help",
    "improve",
    "ask",
    "things",
    "like",
    "remove",
    "code",
    "remove",
    "event",
    "listeners",
    "still",
    "achieve",
    "result",
    "task",
    "done",
    "writing",
    "less",
    "code",
    "instead",
    "even",
    "optimize",
    "code",
    "simple",
    "answer",
    "really",
    "write",
    "less",
    "code",
    "achieve",
    "exactly",
    "result",
    "using",
    "event",
    "delegation",
    "idea",
    "event",
    "delegation",
    "pretty",
    "simple",
    "instead",
    "attaching",
    "event",
    "listeners",
    "directly",
    "list",
    "items",
    "delegate",
    "listening",
    "parent",
    "ul",
    "id",
    "sports",
    "li",
    "clicked",
    "listener",
    "parent",
    "element",
    "catches",
    "bubbling",
    "event",
    "performs",
    "task",
    "change",
    "color",
    "background",
    "light",
    "gray",
    "clicked",
    "one",
    "boxes",
    "also",
    "showcased",
    "text",
    "inside",
    "console",
    "going",
    "achieve",
    "go",
    "back",
    "file",
    "get",
    "rid",
    "code",
    "first",
    "going",
    "grab",
    "unordered",
    "list",
    "element",
    "id",
    "sports",
    "say",
    "document",
    "dot",
    "query",
    "selector",
    "say",
    "grab",
    "id",
    "sports",
    "add",
    "event",
    "listener",
    "similar",
    "process",
    "going",
    "click",
    "event",
    "rudolph",
    "function",
    "event",
    "object",
    "inside",
    "parameters",
    "inside",
    "function",
    "want",
    "say",
    "let",
    "console",
    "log",
    "bit",
    "text",
    "say",
    "e",
    "dot",
    "target",
    "dot",
    "get",
    "attribute",
    "method",
    "get",
    "attribute",
    "want",
    "get",
    "id",
    "want",
    "say",
    "plus",
    "put",
    "clicked",
    "saying",
    "target",
    "list",
    "items",
    "id",
    "attribute",
    "whichever",
    "one",
    "click",
    "display",
    "specific",
    "sport",
    "plus",
    "extra",
    "bit",
    "text",
    "clicked",
    "go",
    "ahead",
    "click",
    "one",
    "see",
    "saying",
    "football",
    "clicked",
    "click",
    "tennis",
    "see",
    "tennis",
    "click",
    "golf",
    "boxing",
    "basketball",
    "see",
    "working",
    "attached",
    "one",
    "event",
    "listener",
    "parent",
    "element",
    "catches",
    "bubbling",
    "event",
    "performs",
    "task",
    "written",
    "also",
    "want",
    "change",
    "uh",
    "background",
    "color",
    "click",
    "first",
    "going",
    "need",
    "create",
    "variable",
    "um",
    "target",
    "going",
    "say",
    "target",
    "going",
    "equal",
    "e",
    "dot",
    "target",
    "list",
    "items",
    "going",
    "say",
    "target",
    "variable",
    "matches",
    "css",
    "selector",
    "li",
    "going",
    "want",
    "change",
    "uh",
    "background",
    "say",
    "target",
    "dot",
    "style",
    "dot",
    "back",
    "ground",
    "color",
    "light",
    "gray",
    "click",
    "one",
    "uh",
    "getting",
    "error",
    "um",
    "spelt",
    "matches",
    "wrong",
    "click",
    "one",
    "see",
    "text",
    "appear",
    "console",
    "highlighting",
    "one",
    "clicked",
    "also",
    "extra",
    "feature",
    "background",
    "changes",
    "light",
    "gray",
    "list",
    "items",
    "brings",
    "us",
    "back",
    "first",
    "um",
    "part",
    "definition",
    "allows",
    "users",
    "append",
    "single",
    "event",
    "listener",
    "parent",
    "element",
    "adds",
    "present",
    "children",
    "see",
    "clear",
    "benefits",
    "ranging",
    "code",
    "quality",
    "well",
    "code",
    "maintenance",
    "instead",
    "lines",
    "code",
    "um",
    "previous",
    "example",
    "attached",
    "event",
    "listener",
    "list",
    "items",
    "inside",
    "one",
    "event",
    "listener",
    "also",
    "improved",
    "performance",
    "events",
    "code",
    "take",
    "lot",
    "memory",
    "using",
    "event",
    "delegation",
    "going",
    "save",
    "ton",
    "memory",
    "vastly",
    "improve",
    "performance",
    "inside",
    "projects",
    "another",
    "crucial",
    "benefit",
    "event",
    "delegation",
    "second",
    "part",
    "definition",
    "first",
    "part",
    "allows",
    "users",
    "append",
    "single",
    "event",
    "listener",
    "parent",
    "element",
    "adds",
    "present",
    "descendants",
    "second",
    "part",
    "definition",
    "also",
    "adds",
    "future",
    "descendants",
    "match",
    "selector",
    "actually",
    "regard",
    "dynamic",
    "elements",
    "let",
    "say",
    "add",
    "button",
    "end",
    "box",
    "allowed",
    "us",
    "add",
    "another",
    "sport",
    "list",
    "let",
    "actually",
    "manually",
    "show",
    "guys",
    "exactly",
    "mean",
    "first",
    "going",
    "create",
    "constant",
    "um",
    "ul",
    "idea",
    "sports",
    "say",
    "const",
    "say",
    "sports",
    "equals",
    "grab",
    "id",
    "sports",
    "ul",
    "also",
    "create",
    "another",
    "list",
    "item",
    "say",
    "const",
    "new",
    "sport",
    "equals",
    "document",
    "dot",
    "create",
    "element",
    "create",
    "another",
    "list",
    "item",
    "uh",
    "say",
    "new",
    "sport",
    "variable",
    "new",
    "list",
    "item",
    "uh",
    "give",
    "uh",
    "text",
    "uh",
    "let",
    "say",
    "let",
    "make",
    "sport",
    "rugby",
    "also",
    "give",
    "uh",
    "id",
    "rugby",
    "say",
    "set",
    "attribute",
    "first",
    "id",
    "attribute",
    "gon",
    "na",
    "uh",
    "id",
    "rugby",
    "want",
    "append",
    "list",
    "grab",
    "sports",
    "variable",
    "ul",
    "say",
    "append",
    "child",
    "chart",
    "want",
    "append",
    "course",
    "new",
    "sport",
    "let",
    "say",
    "new",
    "sport",
    "see",
    "rugby",
    "added",
    "list",
    "click",
    "got",
    "exact",
    "styling",
    "output",
    "console",
    "like",
    "rest",
    "list",
    "items",
    "would",
    "event",
    "listener",
    "parent",
    "ul",
    "event",
    "delegation",
    "delegated",
    "event",
    "parent",
    "see",
    "gives",
    "us",
    "power",
    "dynamically",
    "add",
    "new",
    "list",
    "items",
    "new",
    "list",
    "items",
    "display",
    "behavior",
    "without",
    "magic",
    "event",
    "delegation",
    "use",
    "method",
    "previously",
    "used",
    "would",
    "include",
    "event",
    "listeners",
    "individual",
    "list",
    "items",
    "includes",
    "new",
    "list",
    "items",
    "might",
    "get",
    "added",
    "along",
    "way",
    "clog",
    "memory",
    "effect",
    "performance",
    "create",
    "much",
    "unnecessary",
    "code",
    "going",
    "video",
    "guys",
    "video",
    "going",
    "using",
    "everything",
    "learned",
    "part",
    "one",
    "applying",
    "five",
    "different",
    "projects",
    "ranging",
    "beginner",
    "master",
    "level",
    "like",
    "part",
    "one",
    "guys",
    "going",
    "prerequisites",
    "order",
    "effectively",
    "understand",
    "dom",
    "relates",
    "projects",
    "highly",
    "recommend",
    "checking",
    "part",
    "one",
    "first",
    "well",
    "also",
    "existing",
    "knowledge",
    "html",
    "css",
    "regards",
    "styling",
    "gon",
    "na",
    "focusing",
    "much",
    "projects",
    "really",
    "goal",
    "course",
    "however",
    "substantial",
    "css",
    "styling",
    "involved",
    "lastly",
    "going",
    "essential",
    "familiarity",
    "fundamentals",
    "javascript",
    "syntax",
    "code",
    "structure",
    "obviously",
    "going",
    "using",
    "javascript",
    "course",
    "right",
    "guys",
    "first",
    "project",
    "course",
    "going",
    "beginner",
    "friendly",
    "quote",
    "generator",
    "houses",
    "quote",
    "reference",
    "someone",
    "famous",
    "underneath",
    "underneath",
    "reference",
    "famous",
    "person",
    "button",
    "says",
    "new",
    "quote",
    "click",
    "see",
    "generate",
    "us",
    "new",
    "quotes",
    "someone",
    "else",
    "famous",
    "pretty",
    "cool",
    "design",
    "quite",
    "simple",
    "create",
    "key",
    "concepts",
    "going",
    "need",
    "project",
    "add",
    "event",
    "listener",
    "course",
    "math",
    "object",
    "text",
    "property",
    "know",
    "creating",
    "key",
    "concept",
    "going",
    "need",
    "let",
    "head",
    "vs",
    "code",
    "create",
    "quote",
    "generator",
    "right",
    "inside",
    "vs",
    "code",
    "see",
    "inside",
    "folder",
    "called",
    "master",
    "dom",
    "manipulation",
    "part",
    "2",
    "inside",
    "file",
    "well",
    "file",
    "javascript",
    "file",
    "project",
    "one",
    "also",
    "image",
    "folder",
    "images",
    "going",
    "background",
    "uh",
    "image",
    "projects",
    "first",
    "thing",
    "include",
    "link",
    "style",
    "sheet",
    "go",
    "inside",
    "grab",
    "next",
    "thing",
    "going",
    "go",
    "get",
    "google",
    "font",
    "head",
    "google",
    "global",
    "font",
    "going",
    "using",
    "project",
    "going",
    "roboto",
    "regular",
    "grab",
    "link",
    "inside",
    "google",
    "fonts",
    "head",
    "back",
    "vs",
    "code",
    "paste",
    "underneath",
    "style",
    "sheet",
    "tab",
    "looking",
    "neat",
    "well",
    "put",
    "comment",
    "uh",
    "global",
    "font",
    "links",
    "style",
    "sheet",
    "lastly",
    "include",
    "head",
    "tag",
    "link",
    "font",
    "awesome",
    "grab",
    "icons",
    "going",
    "using",
    "throughout",
    "project",
    "heading",
    "font",
    "awesome",
    "cdn",
    "click",
    "first",
    "link",
    "copy",
    "link",
    "tag",
    "head",
    "back",
    "vs",
    "code",
    "paste",
    "google",
    "fonts",
    "say",
    "font",
    "awesome",
    "think",
    "place",
    "close",
    "let",
    "open",
    "live",
    "server",
    "blank",
    "canvas",
    "see",
    "work",
    "split",
    "screen",
    "bit",
    "smaller",
    "ready",
    "start",
    "markup",
    "first",
    "project",
    "take",
    "look",
    "original",
    "example",
    "see",
    "two",
    "sections",
    "heading",
    "also",
    "main",
    "section",
    "houses",
    "quote",
    "uh",
    "famous",
    "person",
    "button",
    "head",
    "inside",
    "body",
    "put",
    "comment",
    "project",
    "one",
    "quote",
    "generator",
    "going",
    "house",
    "project",
    "inside",
    "div",
    "class",
    "container",
    "hit",
    "tab",
    "going",
    "need",
    "header",
    "put",
    "another",
    "div",
    "class",
    "header",
    "put",
    "h2",
    "say",
    "java",
    "script",
    "quote",
    "generator",
    "see",
    "live",
    "server",
    "underneath",
    "header",
    "gon",
    "na",
    "content",
    "quote",
    "well",
    "name",
    "specific",
    "person",
    "said",
    "quote",
    "button",
    "underneath",
    "um",
    "generate",
    "new",
    "quote",
    "us",
    "get",
    "back",
    "blank",
    "canvas",
    "go",
    "underneath",
    "header",
    "create",
    "div",
    "class",
    "main",
    "content",
    "going",
    "house",
    "everything",
    "scroll",
    "little",
    "bit",
    "first",
    "thing",
    "need",
    "actual",
    "text",
    "area",
    "put",
    "div",
    "call",
    "text",
    "area",
    "inside",
    "want",
    "span",
    "class",
    "quote",
    "going",
    "quote",
    "going",
    "paste",
    "quote",
    "inside",
    "exact",
    "original",
    "example",
    "underneath",
    "text",
    "area",
    "div",
    "want",
    "div",
    "actual",
    "um",
    "famous",
    "person",
    "said",
    "quote",
    "let",
    "keep",
    "simple",
    "say",
    "person",
    "hit",
    "tab",
    "person",
    "quote",
    "abraham",
    "lincoln",
    "quote",
    "well",
    "person",
    "said",
    "quote",
    "course",
    "underneath",
    "going",
    "button",
    "house",
    "button",
    "inside",
    "div",
    "class",
    "button",
    "area",
    "going",
    "house",
    "button",
    "button",
    "going",
    "id",
    "say",
    "new",
    "quotes",
    "going",
    "need",
    "grab",
    "onto",
    "later",
    "put",
    "text",
    "new",
    "quote",
    "essentially",
    "markup",
    "let",
    "head",
    "style",
    "sheet",
    "apply",
    "general",
    "styles",
    "first",
    "put",
    "general",
    "styles",
    "use",
    "asterisk",
    "grab",
    "everything",
    "going",
    "say",
    "margin",
    "zero",
    "padding",
    "zero",
    "box",
    "size",
    "border",
    "box",
    "let",
    "also",
    "make",
    "sure",
    "uh",
    "font",
    "family",
    "projects",
    "lato",
    "font",
    "uh",
    "sans",
    "serif",
    "backup",
    "let",
    "first",
    "grab",
    "body",
    "element",
    "want",
    "use",
    "display",
    "flex",
    "center",
    "everything",
    "say",
    "justify",
    "content",
    "center",
    "align",
    "items",
    "center",
    "let",
    "use",
    "height",
    "make",
    "thousand",
    "one",
    "hundred",
    "viewport",
    "heights",
    "would",
    "height",
    "whole",
    "height",
    "um",
    "window",
    "let",
    "also",
    "text",
    "line",
    "everything",
    "center",
    "next",
    "thing",
    "include",
    "background",
    "image",
    "first",
    "project",
    "sort",
    "library",
    "image",
    "grab",
    "background",
    "property",
    "url",
    "grab",
    "image",
    "folder",
    "head",
    "inside",
    "grab",
    "project",
    "one",
    "way",
    "big",
    "moment",
    "first",
    "thing",
    "want",
    "add",
    "bits",
    "styling",
    "repeat",
    "uh",
    "want",
    "center",
    "everything",
    "x",
    "want",
    "cover",
    "whole",
    "body",
    "see",
    "looks",
    "pretty",
    "much",
    "exactly",
    "original",
    "example",
    "body",
    "next",
    "thing",
    "want",
    "grab",
    "container",
    "class",
    "houses",
    "everything",
    "going",
    "give",
    "width",
    "550",
    "pixels",
    "height",
    "450",
    "pixels",
    "next",
    "thing",
    "style",
    "heading",
    "javascript",
    "quote",
    "generator",
    "text",
    "grab",
    "header",
    "class",
    "let",
    "uh",
    "increase",
    "font",
    "size",
    "say",
    "rem",
    "let",
    "give",
    "border",
    "solid",
    "say",
    "2",
    "pixels",
    "make",
    "nice",
    "white",
    "color",
    "change",
    "color",
    "text",
    "white",
    "uh",
    "let",
    "make",
    "bit",
    "clearer",
    "change",
    "background",
    "color",
    "uh",
    "bit",
    "darker",
    "gray",
    "let",
    "also",
    "add",
    "bit",
    "padding",
    "text",
    "border",
    "five",
    "pixels",
    "let",
    "make",
    "width",
    "say",
    "eighty",
    "percent",
    "set",
    "margin",
    "uh",
    "let",
    "say",
    "20",
    "pixels",
    "top",
    "bottom",
    "auto",
    "left",
    "right",
    "centered",
    "let",
    "actually",
    "make",
    "edges",
    "border",
    "bit",
    "rounder",
    "use",
    "border",
    "radius",
    "method",
    "property",
    "let",
    "make",
    "five",
    "pixels",
    "think",
    "looks",
    "little",
    "bit",
    "better",
    "heading",
    "let",
    "grab",
    "uh",
    "main",
    "content",
    "basically",
    "content",
    "um",
    "quote",
    "person",
    "said",
    "quote",
    "button",
    "class",
    "main",
    "content",
    "want",
    "make",
    "width",
    "100",
    "height",
    "let",
    "make",
    "300",
    "pixels",
    "padding",
    "let",
    "give",
    "background",
    "color",
    "white",
    "content",
    "let",
    "also",
    "make",
    "edges",
    "rounded",
    "say",
    "border",
    "radius",
    "15",
    "pixels",
    "let",
    "uh",
    "also",
    "add",
    "bit",
    "padding",
    "content",
    "edges",
    "say",
    "50",
    "pixels",
    "top",
    "bottom",
    "40",
    "pixels",
    "left",
    "right",
    "uh",
    "next",
    "thing",
    "want",
    "actually",
    "give",
    "box",
    "shadow",
    "gives",
    "like",
    "3d",
    "look",
    "let",
    "say",
    "zero",
    "x",
    "let",
    "put",
    "10",
    "pixels",
    "blur",
    "box",
    "shadows",
    "way",
    "around",
    "think",
    "looks",
    "lot",
    "better",
    "let",
    "uh",
    "style",
    "text",
    "quote",
    "main",
    "content",
    "text",
    "area",
    "let",
    "give",
    "font",
    "size",
    "let",
    "say",
    "ram",
    "see",
    "looks",
    "like",
    "yeah",
    "think",
    "looks",
    "pretty",
    "good",
    "let",
    "also",
    "add",
    "bit",
    "line",
    "height",
    "give",
    "bit",
    "breathing",
    "room",
    "uh",
    "yeah",
    "think",
    "looks",
    "pretty",
    "good",
    "want",
    "style",
    "person",
    "says",
    "quote",
    "say",
    "main",
    "main",
    "content",
    "dot",
    "person",
    "let",
    "increase",
    "uh",
    "size",
    "text",
    "say",
    "font",
    "size",
    "let",
    "say",
    "rem",
    "yeah",
    "looks",
    "pretty",
    "good",
    "change",
    "color",
    "red",
    "uh",
    "let",
    "think",
    "original",
    "capitalized",
    "text",
    "decoration",
    "uppercase",
    "text",
    "transform",
    "uppercase",
    "course",
    "want",
    "add",
    "bit",
    "margin",
    "let",
    "say",
    "margin",
    "top",
    "20",
    "pixels",
    "think",
    "starting",
    "look",
    "lot",
    "like",
    "original",
    "see",
    "let",
    "uh",
    "let",
    "start",
    "button",
    "grab",
    "uh",
    "button",
    "area",
    "uh",
    "houses",
    "button",
    "grab",
    "actual",
    "button",
    "uh",
    "um",
    "let",
    "change",
    "background",
    "color",
    "dark",
    "gray",
    "let",
    "change",
    "color",
    "text",
    "see",
    "white",
    "let",
    "uh",
    "increase",
    "font",
    "size",
    "say",
    "rem",
    "let",
    "actually",
    "make",
    "bit",
    "bigger",
    "let",
    "add",
    "bit",
    "padding",
    "course",
    "say",
    "10",
    "pixels",
    "top",
    "bottom",
    "15",
    "pixels",
    "left",
    "right",
    "let",
    "also",
    "add",
    "bit",
    "margin",
    "top",
    "separate",
    "text",
    "margin",
    "top",
    "let",
    "say",
    "20",
    "pixels",
    "let",
    "make",
    "rounded",
    "edges",
    "border",
    "radius",
    "let",
    "say",
    "five",
    "pixels",
    "last",
    "thing",
    "want",
    "click",
    "um",
    "see",
    "original",
    "click",
    "actually",
    "uh",
    "changes",
    "color",
    "need",
    "change",
    "active",
    "state",
    "grab",
    "let",
    "grab",
    "active",
    "pseudo",
    "class",
    "say",
    "background",
    "color",
    "let",
    "make",
    "light",
    "blue",
    "pretty",
    "much",
    "styling",
    "need",
    "start",
    "applying",
    "logic",
    "generate",
    "new",
    "quotes",
    "click",
    "new",
    "quote",
    "button",
    "first",
    "thing",
    "going",
    "need",
    "head",
    "file",
    "go",
    "underneath",
    "content",
    "put",
    "comment",
    "scripts",
    "gon",
    "na",
    "placing",
    "scripts",
    "gon",
    "na",
    "link",
    "script",
    "file",
    "first",
    "script",
    "file",
    "sort",
    "called",
    "project",
    "one",
    "dot",
    "js",
    "linked",
    "javascript",
    "file",
    "head",
    "first",
    "thing",
    "going",
    "need",
    "create",
    "variables",
    "variable",
    "button",
    "well",
    "quote",
    "person",
    "said",
    "quote",
    "put",
    "comment",
    "saying",
    "variables",
    "say",
    "let",
    "btn",
    "equal",
    "document",
    "dot",
    "query",
    "selector",
    "select",
    "um",
    "button",
    "id",
    "new",
    "quote",
    "stored",
    "button",
    "inside",
    "variable",
    "create",
    "another",
    "variable",
    "quote",
    "call",
    "quote",
    "set",
    "believe",
    "class",
    "quote",
    "close",
    "stored",
    "span",
    "quote",
    "inside",
    "inside",
    "variable",
    "lastly",
    "going",
    "need",
    "one",
    "person",
    "say",
    "document",
    "dot",
    "query",
    "selector",
    "class",
    "person",
    "got",
    "three",
    "variables",
    "next",
    "thing",
    "going",
    "need",
    "array",
    "quotes",
    "call",
    "array",
    "uh",
    "let",
    "call",
    "quotes",
    "going",
    "copy",
    "paste",
    "quotes",
    "used",
    "original",
    "example",
    "um",
    "found",
    "internet",
    "really",
    "sure",
    "individuals",
    "actually",
    "said",
    "quotes",
    "guys",
    "want",
    "use",
    "different",
    "quotes",
    "people",
    "quote",
    "generator",
    "feel",
    "free",
    "going",
    "paste",
    "quotes",
    "think",
    "total",
    "10",
    "quotes",
    "next",
    "thing",
    "going",
    "apply",
    "event",
    "listener",
    "button",
    "click",
    "button",
    "new",
    "quote",
    "generate",
    "new",
    "quote",
    "us",
    "one",
    "quotes",
    "one",
    "individuals",
    "go",
    "underneath",
    "array",
    "say",
    "event",
    "listener",
    "going",
    "look",
    "click",
    "event",
    "going",
    "function",
    "inside",
    "function",
    "first",
    "going",
    "need",
    "create",
    "variable",
    "houses",
    "basic",
    "math",
    "equation",
    "essentially",
    "going",
    "involve",
    "math",
    "object",
    "couple",
    "methods",
    "let",
    "call",
    "variable",
    "let",
    "call",
    "let",
    "random",
    "mentioned",
    "javascript",
    "built",
    "math",
    "object",
    "object",
    "several",
    "methods",
    "two",
    "going",
    "using",
    "equation",
    "go",
    "equation",
    "first",
    "going",
    "create",
    "quickly",
    "bit",
    "easier",
    "explain",
    "let",
    "random",
    "going",
    "equal",
    "math",
    "dot",
    "floor",
    "inside",
    "method",
    "going",
    "math",
    "dot",
    "random",
    "going",
    "times",
    "quotes",
    "array",
    "dot",
    "length",
    "essentially",
    "quotes",
    "array",
    "equation",
    "working",
    "times",
    "quotes",
    "dot",
    "length",
    "generate",
    "number",
    "zero",
    "total",
    "number",
    "quotes",
    "inside",
    "quote",
    "array",
    "actually",
    "generate",
    "whole",
    "number",
    "need",
    "wrap",
    "equation",
    "floor",
    "method",
    "essentially",
    "rounds",
    "number",
    "downwards",
    "nearest",
    "integer",
    "allow",
    "us",
    "access",
    "properties",
    "inside",
    "array",
    "variables",
    "quote",
    "person",
    "essentially",
    "variable",
    "math",
    "equation",
    "working",
    "equation",
    "randomize",
    "quotes",
    "array",
    "however",
    "need",
    "display",
    "quote",
    "person",
    "inside",
    "array",
    "string",
    "format",
    "go",
    "underneath",
    "variable",
    "grab",
    "let",
    "grab",
    "uh",
    "quote",
    "first",
    "need",
    "change",
    "inner",
    "text",
    "going",
    "set",
    "equal",
    "quotes",
    "array",
    "square",
    "brackets",
    "turn",
    "string",
    "format",
    "put",
    "random",
    "variable",
    "say",
    "dot",
    "quote",
    "exact",
    "thing",
    "person",
    "change",
    "person",
    "randomize",
    "quotes",
    "array",
    "display",
    "new",
    "quotes",
    "said",
    "different",
    "people",
    "go",
    "button",
    "click",
    "button",
    "generated",
    "us",
    "new",
    "quotes",
    "also",
    "giving",
    "us",
    "different",
    "people",
    "said",
    "quotes",
    "first",
    "project",
    "completed",
    "pretty",
    "cool",
    "project",
    "pretty",
    "straightforward",
    "create",
    "right",
    "guys",
    "next",
    "project",
    "course",
    "beginner",
    "plus",
    "project",
    "modal",
    "motor",
    "essentially",
    "ui",
    "element",
    "appears",
    "foreground",
    "website",
    "usually",
    "triggered",
    "user",
    "allowing",
    "view",
    "information",
    "complete",
    "action",
    "without",
    "navigate",
    "another",
    "url",
    "case",
    "going",
    "show",
    "information",
    "ui",
    "element",
    "foreground",
    "click",
    "see",
    "another",
    "box",
    "animates",
    "downwards",
    "rest",
    "content",
    "darkens",
    "puts",
    "lot",
    "focus",
    "box",
    "middle",
    "essentially",
    "model",
    "course",
    "box",
    "likely",
    "information",
    "wanted",
    "keep",
    "simple",
    "uh",
    "example",
    "key",
    "concepts",
    "going",
    "need",
    "project",
    "switched",
    "little",
    "bit",
    "going",
    "using",
    "course",
    "ad",
    "event",
    "listener",
    "method",
    "going",
    "using",
    "css",
    "styling",
    "throughout",
    "javascript",
    "also",
    "going",
    "include",
    "css",
    "animation",
    "project",
    "let",
    "head",
    "vs",
    "code",
    "create",
    "model",
    "right",
    "guys",
    "back",
    "inside",
    "master",
    "dom",
    "manipulation",
    "part",
    "two",
    "folder",
    "see",
    "got",
    "blank",
    "canvas",
    "open",
    "live",
    "server",
    "first",
    "thing",
    "going",
    "need",
    "uh",
    "markup",
    "gon",
    "na",
    "modal",
    "open",
    "button",
    "put",
    "comment",
    "model",
    "open",
    "button",
    "button",
    "take",
    "look",
    "original",
    "example",
    "uh",
    "button",
    "going",
    "trigger",
    "model",
    "going",
    "button",
    "going",
    "id",
    "open",
    "btn",
    "going",
    "using",
    "element",
    "id",
    "example",
    "going",
    "put",
    "paragraph",
    "tag",
    "going",
    "text",
    "uh",
    "model",
    "open",
    "button",
    "next",
    "thing",
    "gon",
    "na",
    "need",
    "actual",
    "model",
    "gon",
    "na",
    "put",
    "comment",
    "say",
    "modal",
    "modal",
    "background",
    "going",
    "div",
    "id",
    "modal",
    "container",
    "inside",
    "going",
    "div",
    "id",
    "modal",
    "going",
    "modal",
    "paragraph",
    "tag",
    "inside",
    "going",
    "say",
    "underneath",
    "going",
    "another",
    "div",
    "going",
    "close",
    "button",
    "going",
    "let",
    "say",
    "div",
    "give",
    "id",
    "close",
    "btn",
    "create",
    "x",
    "going",
    "using",
    "html",
    "entity",
    "going",
    "ampersand",
    "times",
    "semicolon",
    "going",
    "cross",
    "see",
    "going",
    "need",
    "markup",
    "next",
    "thing",
    "want",
    "quickly",
    "uh",
    "comment",
    "script",
    "project",
    "one",
    "duplicate",
    "link",
    "project",
    "two",
    "actually",
    "open",
    "see",
    "created",
    "another",
    "um",
    "js",
    "file",
    "project",
    "two",
    "close",
    "back",
    "next",
    "thing",
    "want",
    "apply",
    "styling",
    "heading",
    "inside",
    "style",
    "shape",
    "first",
    "thing",
    "gon",
    "na",
    "get",
    "background",
    "image",
    "see",
    "original",
    "example",
    "going",
    "grab",
    "body",
    "going",
    "change",
    "background",
    "url",
    "going",
    "image",
    "folder",
    "project",
    "two",
    "apply",
    "rules",
    "previous",
    "example",
    "repeat",
    "center",
    "center",
    "gon",
    "na",
    "cover",
    "able",
    "see",
    "image",
    "make",
    "whole",
    "heart",
    "browser",
    "change",
    "height",
    "100",
    "viewport",
    "heights",
    "image",
    "next",
    "thing",
    "want",
    "actually",
    "position",
    "relative",
    "want",
    "initially",
    "position",
    "button",
    "little",
    "bit",
    "slightly",
    "right",
    "like",
    "example",
    "going",
    "grab",
    "button",
    "id",
    "open",
    "button",
    "going",
    "open",
    "module",
    "set",
    "position",
    "absolute",
    "position",
    "anywhere",
    "um",
    "browser",
    "going",
    "say",
    "top",
    "say",
    "70",
    "let",
    "also",
    "left",
    "10",
    "let",
    "start",
    "giving",
    "bit",
    "styling",
    "looks",
    "little",
    "bit",
    "better",
    "uh",
    "give",
    "width",
    "350",
    "pixels",
    "make",
    "bit",
    "bigger",
    "also",
    "give",
    "height",
    "let",
    "set",
    "80",
    "pixels",
    "uh",
    "let",
    "make",
    "font",
    "size",
    "bit",
    "bigger",
    "let",
    "say",
    "two",
    "ram",
    "see",
    "looks",
    "like",
    "yeah",
    "looks",
    "pretty",
    "good",
    "let",
    "make",
    "background",
    "transparent",
    "like",
    "original",
    "change",
    "color",
    "text",
    "white",
    "see",
    "um",
    "let",
    "also",
    "change",
    "color",
    "border",
    "uh",
    "let",
    "make",
    "solid",
    "two",
    "pixels",
    "white",
    "let",
    "also",
    "uh",
    "let",
    "add",
    "bit",
    "uh",
    "border",
    "radius",
    "edges",
    "think",
    "looks",
    "lot",
    "neater",
    "edges",
    "rounded",
    "uh",
    "let",
    "say",
    "10",
    "pixels",
    "maybe",
    "bit",
    "padding",
    "also",
    "five",
    "pixels",
    "looks",
    "pretty",
    "good",
    "let",
    "also",
    "use",
    "good",
    "friend",
    "box",
    "shadow",
    "give",
    "nice",
    "3d",
    "effect",
    "say",
    "zero",
    "x",
    "three",
    "pixels",
    "blur",
    "goes",
    "way",
    "around",
    "uh",
    "let",
    "make",
    "black",
    "yeah",
    "looks",
    "good",
    "um",
    "take",
    "look",
    "original",
    "see",
    "effect",
    "need",
    "add",
    "transition",
    "uh",
    "transition",
    "say",
    "five",
    "seconds",
    "uh",
    "pretty",
    "much",
    "styling",
    "next",
    "thing",
    "want",
    "obviously",
    "add",
    "bit",
    "hover",
    "effect",
    "grab",
    "grab",
    "paste",
    "effect",
    "hover",
    "class",
    "change",
    "background",
    "color",
    "uh",
    "let",
    "choose",
    "background",
    "color",
    "white",
    "text",
    "uh",
    "black",
    "effect",
    "exact",
    "original",
    "looks",
    "pretty",
    "good",
    "next",
    "thing",
    "want",
    "style",
    "model",
    "going",
    "box",
    "um",
    "shows",
    "click",
    "button",
    "uh",
    "class",
    "modal",
    "change",
    "background",
    "color",
    "white",
    "set",
    "position",
    "absolute",
    "say",
    "scroll",
    "see",
    "say",
    "top",
    "50",
    "left",
    "50",
    "transform",
    "translate",
    "say",
    "uh",
    "negative",
    "50",
    "negative",
    "50",
    "would",
    "basically",
    "uh",
    "center",
    "middle",
    "another",
    "way",
    "actually",
    "center",
    "content",
    "instead",
    "using",
    "flexbox",
    "css",
    "grid",
    "want",
    "bit",
    "bigger",
    "say",
    "width",
    "200",
    "pixels",
    "height",
    "let",
    "say",
    "100",
    "pixels",
    "um",
    "give",
    "bit",
    "padding",
    "top",
    "bottom",
    "20",
    "left",
    "right",
    "uh",
    "old",
    "classic",
    "border",
    "radius",
    "give",
    "rounded",
    "edges",
    "uh",
    "font",
    "size",
    "let",
    "make",
    "bit",
    "bigger",
    "let",
    "say",
    "rim",
    "actually",
    "going",
    "display",
    "moment",
    "want",
    "create",
    "styling",
    "um",
    "afterwards",
    "model",
    "actually",
    "wrapped",
    "inside",
    "modal",
    "container",
    "going",
    "displaying",
    "none",
    "initially",
    "actually",
    "want",
    "show",
    "wanted",
    "start",
    "everything",
    "first",
    "make",
    "sort",
    "disappear",
    "initially",
    "next",
    "thing",
    "want",
    "take",
    "look",
    "original",
    "example",
    "see",
    "text",
    "left",
    "x",
    "right",
    "going",
    "using",
    "display",
    "flex",
    "like",
    "nested",
    "flexbox",
    "say",
    "justify",
    "content",
    "space",
    "align",
    "items",
    "vertically",
    "center",
    "take",
    "look",
    "previous",
    "example",
    "click",
    "see",
    "actually",
    "animates",
    "top",
    "going",
    "using",
    "keyframes",
    "uh",
    "going",
    "create",
    "animation",
    "um",
    "say",
    "animation",
    "animation",
    "name",
    "going",
    "call",
    "animate",
    "modal",
    "want",
    "animation",
    "duration",
    "going",
    "seconds",
    "create",
    "animation",
    "right",
    "end",
    "wanted",
    "put",
    "styling",
    "modal",
    "uh",
    "first",
    "get",
    "next",
    "thing",
    "going",
    "style",
    "cross",
    "class",
    "class",
    "rated",
    "id",
    "closed",
    "btn",
    "font",
    "size",
    "um",
    "let",
    "make",
    "three",
    "rem",
    "nice",
    "big",
    "let",
    "apply",
    "hover",
    "hover",
    "turns",
    "red",
    "close",
    "btn",
    "um",
    "let",
    "make",
    "also",
    "cursor",
    "pointer",
    "uh",
    "font",
    "size",
    "let",
    "also",
    "make",
    "sure",
    "three",
    "rem",
    "change",
    "color",
    "red",
    "color",
    "say",
    "f",
    "0",
    "0",
    "cross",
    "quickly",
    "mention",
    "guys",
    "style",
    "sheet",
    "using",
    "previous",
    "project",
    "general",
    "styles",
    "case",
    "confused",
    "people",
    "anyway",
    "uh",
    "done",
    "modal",
    "need",
    "actually",
    "grab",
    "modal",
    "container",
    "actually",
    "initially",
    "make",
    "disappear",
    "grab",
    "modal",
    "container",
    "display",
    "none",
    "comment",
    "still",
    "see",
    "want",
    "actually",
    "position",
    "fixed",
    "right",
    "top",
    "say",
    "top",
    "zero",
    "left",
    "zero",
    "width",
    "one",
    "hundred",
    "percent",
    "height",
    "also",
    "100",
    "z",
    "index",
    "let",
    "one",
    "everything",
    "let",
    "uncomment",
    "longer",
    "see",
    "nearly",
    "styling",
    "um",
    "still",
    "styling",
    "regards",
    "animation",
    "moment",
    "let",
    "first",
    "start",
    "applying",
    "javascript",
    "heading",
    "project",
    "file",
    "first",
    "thing",
    "going",
    "need",
    "create",
    "variables",
    "one",
    "open",
    "button",
    "one",
    "modal",
    "container",
    "one",
    "close",
    "button",
    "put",
    "comment",
    "variables",
    "say",
    "let",
    "open",
    "vtn",
    "equal",
    "going",
    "using",
    "example",
    "id",
    "open",
    "vtn",
    "create",
    "another",
    "one",
    "modal",
    "container",
    "say",
    "modal",
    "container",
    "equals",
    "document",
    "dot",
    "get",
    "element",
    "id",
    "id",
    "modal",
    "container",
    "one",
    "close",
    "button",
    "close",
    "btn",
    "equals",
    "document",
    "dot",
    "get",
    "element",
    "iid",
    "idea",
    "close",
    "btn",
    "variables",
    "next",
    "thing",
    "want",
    "start",
    "writing",
    "event",
    "listeners",
    "put",
    "event",
    "listeners",
    "first",
    "one",
    "going",
    "apply",
    "uh",
    "open",
    "btn",
    "variable",
    "open",
    "button",
    "say",
    "open",
    "btn",
    "add",
    "event",
    "listener",
    "look",
    "click",
    "event",
    "function",
    "inside",
    "function",
    "going",
    "using",
    "css",
    "styling",
    "going",
    "grab",
    "modal",
    "container",
    "going",
    "grab",
    "style",
    "attribute",
    "inside",
    "star",
    "going",
    "using",
    "display",
    "property",
    "set",
    "equal",
    "block",
    "take",
    "look",
    "see",
    "displayed",
    "none",
    "wanted",
    "display",
    "block",
    "click",
    "open",
    "button",
    "button",
    "click",
    "show",
    "us",
    "model",
    "see",
    "popping",
    "center",
    "event",
    "listener",
    "working",
    "ca",
    "actually",
    "click",
    "model",
    "ca",
    "really",
    "close",
    "going",
    "need",
    "couple",
    "event",
    "listeners",
    "one",
    "close",
    "button",
    "say",
    "close",
    "btn",
    "add",
    "event",
    "list",
    "look",
    "click",
    "event",
    "function",
    "inside",
    "function",
    "apply",
    "sort",
    "styling",
    "say",
    "mode",
    "container",
    "dot",
    "style",
    "display",
    "attribute",
    "display",
    "property",
    "set",
    "none",
    "refer",
    "back",
    "none",
    "got",
    "two",
    "event",
    "listeners",
    "got",
    "open",
    "button",
    "close",
    "button",
    "click",
    "get",
    "rid",
    "model",
    "see",
    "working",
    "take",
    "look",
    "actual",
    "original",
    "example",
    "click",
    "show",
    "model",
    "closes",
    "click",
    "close",
    "button",
    "also",
    "click",
    "outside",
    "anywhere",
    "model",
    "see",
    "closes",
    "modal",
    "tube",
    "want",
    "add",
    "another",
    "event",
    "listener",
    "actually",
    "apply",
    "window",
    "object",
    "actually",
    "highest",
    "object",
    "dom",
    "tree",
    "goes",
    "document",
    "say",
    "look",
    "click",
    "event",
    "function",
    "insert",
    "event",
    "object",
    "inside",
    "function",
    "going",
    "use",
    "statement",
    "going",
    "say",
    "e",
    "dot",
    "target",
    "guys",
    "remember",
    "back",
    "um",
    "part",
    "1",
    "course",
    "essentially",
    "returns",
    "element",
    "triggers",
    "event",
    "case",
    "going",
    "window",
    "going",
    "say",
    "equal",
    "modal",
    "container",
    "going",
    "grab",
    "modal",
    "container",
    "use",
    "style",
    "attribute",
    "display",
    "property",
    "going",
    "equal",
    "none",
    "click",
    "activate",
    "modal",
    "see",
    "screen",
    "able",
    "click",
    "anywhere",
    "outside",
    "module",
    "model",
    "disappear",
    "see",
    "working",
    "click",
    "disappears",
    "click",
    "disappears",
    "also",
    "click",
    "close",
    "button",
    "disappear",
    "pretty",
    "much",
    "javascript",
    "pretty",
    "simple",
    "design",
    "really",
    "quite",
    "simple",
    "create",
    "next",
    "thing",
    "apply",
    "style",
    "module",
    "modal",
    "container",
    "click",
    "see",
    "background",
    "darkens",
    "around",
    "modal",
    "well",
    "modal",
    "smoothly",
    "animating",
    "top",
    "browser",
    "head",
    "back",
    "inside",
    "create",
    "nice",
    "animation",
    "see",
    "got",
    "animation",
    "name",
    "animation",
    "duration",
    "going",
    "using",
    "keyframes",
    "say",
    "comment",
    "first",
    "modal",
    "animation",
    "section",
    "say",
    "keyframes",
    "rule",
    "use",
    "name",
    "animate",
    "modal",
    "oh",
    "got",
    "capital",
    "want",
    "say",
    "use",
    "n2",
    "say",
    "top",
    "negative",
    "300",
    "pixels",
    "set",
    "opacity",
    "zero",
    "ca",
    "see",
    "two",
    "let",
    "say",
    "top",
    "fifty",
    "percent",
    "opacity",
    "one",
    "see",
    "type",
    "keyframe",
    "animation",
    "working",
    "going",
    "click",
    "click",
    "open",
    "button",
    "see",
    "modal",
    "animating",
    "exactly",
    "original",
    "lastly",
    "want",
    "create",
    "dark",
    "background",
    "motor",
    "appears",
    "going",
    "go",
    "modal",
    "container",
    "id",
    "motor",
    "container",
    "add",
    "background",
    "color",
    "rgba",
    "say",
    "zero",
    "red",
    "zero",
    "green",
    "zero",
    "blue",
    "alpha",
    "opacity",
    "say",
    "point",
    "two",
    "see",
    "gives",
    "modal",
    "container",
    "wrapping",
    "around",
    "model",
    "nice",
    "uh",
    "dark",
    "effect",
    "gives",
    "us",
    "good",
    "emphasis",
    "model",
    "looks",
    "exactly",
    "like",
    "original",
    "example",
    "looks",
    "pretty",
    "good",
    "third",
    "project",
    "going",
    "accordion",
    "accordion",
    "let",
    "squeeze",
    "lot",
    "content",
    "small",
    "space",
    "web",
    "page",
    "classic",
    "example",
    "like",
    "one",
    "project",
    "faq",
    "frequently",
    "asked",
    "question",
    "likely",
    "see",
    "utilized",
    "many",
    "websites",
    "see",
    "couple",
    "questions",
    "random",
    "questions",
    "like",
    "return",
    "policy",
    "located",
    "click",
    "one",
    "see",
    "open",
    "show",
    "us",
    "content",
    "really",
    "useful",
    "project",
    "learn",
    "likely",
    "going",
    "utilizing",
    "type",
    "design",
    "many",
    "projects",
    "key",
    "concepts",
    "going",
    "need",
    "tutorial",
    "document",
    "dot",
    "get",
    "element",
    "class",
    "name",
    "time",
    "course",
    "advert",
    "listener",
    "loop",
    "keyword",
    "classlist",
    "toggle",
    "method",
    "let",
    "head",
    "vs",
    "code",
    "create",
    "accordion",
    "right",
    "guys",
    "first",
    "thing",
    "going",
    "need",
    "create",
    "markup",
    "accordion",
    "going",
    "class",
    "accordion",
    "basically",
    "houses",
    "everything",
    "accordion",
    "gon",
    "na",
    "h2",
    "class",
    "uh",
    "say",
    "accordion",
    "title",
    "say",
    "frequently",
    "asked",
    "questions",
    "underneath",
    "going",
    "several",
    "containers",
    "going",
    "house",
    "question",
    "answer",
    "guys",
    "put",
    "many",
    "containers",
    "like",
    "going",
    "use",
    "three",
    "exact",
    "draft",
    "example",
    "going",
    "create",
    "class",
    "content",
    "container",
    "also",
    "going",
    "class",
    "link",
    "javascript",
    "show",
    "extra",
    "content",
    "inside",
    "going",
    "class",
    "question",
    "question",
    "first",
    "question",
    "return",
    "policy",
    "gon",
    "na",
    "class",
    "answer",
    "going",
    "dummy",
    "text",
    "duplicate",
    "container",
    "two",
    "times",
    "guys",
    "include",
    "like",
    "going",
    "stay",
    "draft",
    "example",
    "essentially",
    "markup",
    "let",
    "head",
    "style",
    "sheet",
    "apply",
    "uh",
    "styling",
    "first",
    "thing",
    "going",
    "grab",
    "body",
    "include",
    "background",
    "image",
    "url",
    "image",
    "folder",
    "project",
    "three",
    "bits",
    "styling",
    "repeat",
    "center",
    "x",
    "cover",
    "see",
    "whole",
    "image",
    "make",
    "whole",
    "height",
    "browser",
    "use",
    "flexbox",
    "center",
    "content",
    "align",
    "items",
    "center",
    "need",
    "body",
    "let",
    "start",
    "applying",
    "styles",
    "accordion",
    "pretty",
    "much",
    "houses",
    "everything",
    "going",
    "give",
    "width",
    "65",
    "background",
    "color",
    "let",
    "give",
    "white",
    "background",
    "color",
    "add",
    "bit",
    "padding",
    "let",
    "say",
    "30",
    "pixels",
    "way",
    "around",
    "course",
    "good",
    "friend",
    "border",
    "radius",
    "make",
    "edges",
    "rounded",
    "apply",
    "30",
    "pixels",
    "title",
    "uh",
    "go",
    "give",
    "bit",
    "styling",
    "accordion",
    "title",
    "styling",
    "scroll",
    "guys",
    "see",
    "bit",
    "clearer",
    "add",
    "margin",
    "bottom",
    "30",
    "pixels",
    "separate",
    "rest",
    "content",
    "text",
    "line",
    "center",
    "centered",
    "let",
    "apply",
    "style",
    "questions",
    "grab",
    "accordion",
    "content",
    "container",
    "grab",
    "question",
    "class",
    "question",
    "let",
    "give",
    "padding",
    "18",
    "pixels",
    "top",
    "bottom",
    "zero",
    "pixels",
    "left",
    "right",
    "let",
    "also",
    "uh",
    "increase",
    "font",
    "size",
    "little",
    "bit",
    "22",
    "pixels",
    "set",
    "cursor",
    "pointer",
    "let",
    "add",
    "border",
    "bottom",
    "one",
    "pixel",
    "solid",
    "black",
    "line",
    "underneath",
    "questions",
    "bit",
    "clearer",
    "see",
    "separation",
    "content",
    "next",
    "thing",
    "need",
    "set",
    "position",
    "relative",
    "going",
    "positioning",
    "open",
    "close",
    "sections",
    "see",
    "original",
    "example",
    "absolute",
    "question",
    "class",
    "going",
    "go",
    "ahead",
    "grab",
    "accordion",
    "class",
    "content",
    "container",
    "question",
    "class",
    "going",
    "using",
    "pseudo",
    "element",
    "go",
    "inside",
    "grab",
    "content",
    "property",
    "use",
    "plus",
    "sign",
    "position",
    "absolute",
    "right",
    "say",
    "negative",
    "five",
    "pixels",
    "think",
    "looks",
    "pretty",
    "good",
    "let",
    "focus",
    "content",
    "dummy",
    "text",
    "go",
    "underneath",
    "bit",
    "grab",
    "accordion",
    "class",
    "grab",
    "content",
    "container",
    "grab",
    "answer",
    "class",
    "dummy",
    "text",
    "add",
    "bit",
    "padding",
    "top",
    "15",
    "pixels",
    "separates",
    "ball",
    "bottom",
    "increase",
    "font",
    "size",
    "22",
    "pixels",
    "well",
    "let",
    "add",
    "bit",
    "line",
    "height",
    "let",
    "say",
    "content",
    "make",
    "sure",
    "width",
    "hundred",
    "percent",
    "course",
    "want",
    "content",
    "hidden",
    "initially",
    "like",
    "original",
    "example",
    "going",
    "need",
    "change",
    "height",
    "answer",
    "class",
    "zero",
    "pixels",
    "take",
    "look",
    "browser",
    "see",
    "content",
    "overflowing",
    "exactly",
    "wanted",
    "setting",
    "height",
    "zero",
    "pixels",
    "course",
    "content",
    "want",
    "hidden",
    "hide",
    "use",
    "overflow",
    "property",
    "set",
    "hidden",
    "see",
    "content",
    "showing",
    "one",
    "last",
    "thing",
    "want",
    "take",
    "look",
    "original",
    "example",
    "open",
    "see",
    "nice",
    "smooth",
    "gon",
    "na",
    "need",
    "set",
    "transition",
    "seconds",
    "apply",
    "javascript",
    "click",
    "nice",
    "smooth",
    "almost",
    "styling",
    "going",
    "need",
    "bits",
    "moment",
    "first",
    "need",
    "create",
    "javascript",
    "get",
    "working",
    "head",
    "javascript",
    "file",
    "first",
    "thing",
    "going",
    "create",
    "variable",
    "going",
    "put",
    "comment",
    "variable",
    "variable",
    "going",
    "called",
    "uh",
    "accordion",
    "going",
    "using",
    "document",
    "dot",
    "get",
    "element",
    "class",
    "name",
    "going",
    "select",
    "elements",
    "class",
    "name",
    "want",
    "select",
    "content",
    "container",
    "classes",
    "houses",
    "question",
    "answer",
    "going",
    "want",
    "access",
    "classes",
    "going",
    "need",
    "loop",
    "going",
    "put",
    "4",
    "going",
    "variable",
    "equals",
    "going",
    "say",
    "less",
    "accordion",
    "dot",
    "length",
    "less",
    "want",
    "increment",
    "variable",
    "one",
    "inside",
    "loop",
    "essentially",
    "selecting",
    "classes",
    "content",
    "container",
    "want",
    "apply",
    "event",
    "list",
    "grab",
    "accordion",
    "grab",
    "variable",
    "inside",
    "loop",
    "add",
    "event",
    "listener",
    "want",
    "click",
    "event",
    "content",
    "containers",
    "want",
    "click",
    "event",
    "going",
    "include",
    "function",
    "inside",
    "function",
    "want",
    "reference",
    "object",
    "function",
    "property",
    "words",
    "reference",
    "object",
    "currently",
    "calling",
    "function",
    "case",
    "accordion",
    "could",
    "using",
    "keyword",
    "using",
    "insert",
    "class",
    "active",
    "reference",
    "points",
    "essentially",
    "content",
    "containers",
    "say",
    "class",
    "list",
    "dot",
    "toggle",
    "another",
    "method",
    "actually",
    "forgot",
    "mention",
    "part",
    "one",
    "essentially",
    "toggle",
    "adding",
    "removing",
    "class",
    "name",
    "element",
    "javascript",
    "class",
    "want",
    "toggle",
    "course",
    "one",
    "mentioned",
    "want",
    "call",
    "class",
    "active",
    "show",
    "guys",
    "minute",
    "need",
    "done",
    "store",
    "elements",
    "class",
    "content",
    "container",
    "inside",
    "variable",
    "accordion",
    "loop",
    "variable",
    "allowed",
    "us",
    "add",
    "event",
    "listener",
    "content",
    "container",
    "classes",
    "inside",
    "function",
    "reference",
    "object",
    "calling",
    "function",
    "accordion",
    "variable",
    "added",
    "toggle",
    "method",
    "either",
    "add",
    "remove",
    "class",
    "active",
    "need",
    "head",
    "back",
    "css",
    "apply",
    "styles",
    "active",
    "class",
    "created",
    "inside",
    "function",
    "head",
    "back",
    "put",
    "comment",
    "say",
    "java",
    "script",
    "styling",
    "link",
    "go",
    "underneath",
    "grab",
    "class",
    "accordion",
    "grab",
    "content",
    "container",
    "class",
    "select",
    "active",
    "class",
    "created",
    "inside",
    "javascript",
    "grab",
    "answer",
    "class",
    "answer",
    "content",
    "dummy",
    "text",
    "inside",
    "set",
    "height",
    "150",
    "pixels",
    "using",
    "javascript",
    "created",
    "toggle",
    "class",
    "answer",
    "click",
    "questions",
    "height",
    "answer",
    "container",
    "150",
    "pixels",
    "instead",
    "zero",
    "pixels",
    "show",
    "us",
    "content",
    "click",
    "see",
    "open",
    "showing",
    "us",
    "content",
    "see",
    "javascript",
    "working",
    "well",
    "styling",
    "created",
    "active",
    "class",
    "inserted",
    "active",
    "class",
    "little",
    "bits",
    "finish",
    "grab",
    "accordion",
    "grab",
    "content",
    "container",
    "grab",
    "active",
    "class",
    "grab",
    "question",
    "want",
    "change",
    "style",
    "question",
    "clicked",
    "uh",
    "let",
    "affect",
    "font",
    "size",
    "little",
    "bit",
    "smaller",
    "say",
    "18",
    "pixels",
    "want",
    "smooth",
    "put",
    "transition",
    "seconds",
    "see",
    "shrinks",
    "click",
    "um",
    "puts",
    "emphasis",
    "content",
    "lastly",
    "let",
    "change",
    "open",
    "button",
    "closed",
    "section",
    "click",
    "like",
    "original",
    "example",
    "see",
    "let",
    "go",
    "underneath",
    "grab",
    "accordion",
    "class",
    "content",
    "container",
    "dot",
    "active",
    "dot",
    "question",
    "change",
    "content",
    "dash",
    "let",
    "also",
    "increase",
    "font",
    "size",
    "30",
    "pixels",
    "let",
    "give",
    "nice",
    "transition",
    "five",
    "seconds",
    "see",
    "working",
    "perfectly",
    "fine",
    "javascripts",
    "working",
    "well",
    "styling",
    "going",
    "project",
    "another",
    "really",
    "useful",
    "project",
    "learn",
    "likely",
    "run",
    "needing",
    "something",
    "project",
    "nature",
    "fourth",
    "project",
    "going",
    "ante",
    "little",
    "bit",
    "create",
    "pretty",
    "cool",
    "stopwatch",
    "see",
    "play",
    "also",
    "reset",
    "button",
    "hit",
    "play",
    "button",
    "see",
    "transform",
    "pause",
    "button",
    "stopwatch",
    "starting",
    "pause",
    "pause",
    "number",
    "also",
    "reset",
    "want",
    "pretty",
    "cool",
    "design",
    "going",
    "implementing",
    "much",
    "javascript",
    "project",
    "key",
    "concepts",
    "going",
    "need",
    "project",
    "add",
    "event",
    "listener",
    "statements",
    "tostring",
    "method",
    "set",
    "interval",
    "method",
    "inner",
    "html",
    "know",
    "project",
    "key",
    "concept",
    "going",
    "need",
    "project",
    "let",
    "head",
    "vs",
    "code",
    "create",
    "stopwatch",
    "right",
    "guys",
    "inside",
    "file",
    "first",
    "thing",
    "create",
    "div",
    "class",
    "container",
    "inside",
    "div",
    "going",
    "house",
    "another",
    "div",
    "gon",
    "na",
    "id",
    "timer",
    "inside",
    "gon",
    "na",
    "display",
    "timer",
    "underneath",
    "gon",
    "na",
    "buttons",
    "gon",
    "na",
    "div",
    "class",
    "buttons",
    "start",
    "stop",
    "button",
    "going",
    "initially",
    "first",
    "showing",
    "going",
    "icon",
    "going",
    "class",
    "fa",
    "solid",
    "fa",
    "play",
    "also",
    "going",
    "give",
    "id",
    "play",
    "duplicate",
    "reset",
    "button",
    "reset",
    "vtn",
    "gon",
    "na",
    "id",
    "reset",
    "instead",
    "play",
    "gon",
    "na",
    "arrow",
    "dash",
    "row",
    "tate",
    "dash",
    "left",
    "gon",
    "na",
    "need",
    "markup",
    "let",
    "head",
    "apply",
    "styling",
    "first",
    "thing",
    "gon",
    "na",
    "body",
    "gon",
    "na",
    "include",
    "background",
    "image",
    "like",
    "previous",
    "examples",
    "first",
    "let",
    "make",
    "height",
    "100",
    "viewport",
    "heights",
    "background",
    "url",
    "img",
    "project",
    "4",
    "course",
    "classic",
    "styling",
    "repeat",
    "center",
    "center",
    "cover",
    "see",
    "whole",
    "image",
    "guy",
    "want",
    "position",
    "everything",
    "center",
    "let",
    "display",
    "flex",
    "justify",
    "content",
    "center",
    "align",
    "items",
    "center",
    "let",
    "grab",
    "container",
    "houses",
    "everything",
    "going",
    "width",
    "60",
    "percent",
    "height",
    "250",
    "pixels",
    "background",
    "color",
    "gon",
    "na",
    "white",
    "let",
    "give",
    "nice",
    "border",
    "radius",
    "30",
    "pixels",
    "let",
    "give",
    "bit",
    "shadow",
    "zero",
    "x",
    "three",
    "pixels",
    "blur",
    "way",
    "around",
    "next",
    "thing",
    "going",
    "style",
    "timer",
    "id",
    "timer",
    "set",
    "width",
    "100",
    "font",
    "size",
    "uh",
    "let",
    "make",
    "72",
    "pixels",
    "nice",
    "big",
    "text",
    "align",
    "center",
    "give",
    "bit",
    "margin",
    "zero",
    "top",
    "bottom",
    "auto",
    "left",
    "right",
    "let",
    "also",
    "give",
    "bit",
    "padding",
    "top",
    "let",
    "say",
    "say",
    "35",
    "pixels",
    "push",
    "little",
    "bit",
    "buttons",
    "grab",
    "button",
    "grab",
    "buttons",
    "class",
    "houses",
    "buttons",
    "text",
    "align",
    "center",
    "let",
    "give",
    "bit",
    "margin",
    "top",
    "let",
    "say",
    "40",
    "pixels",
    "let",
    "style",
    "buttons",
    "um",
    "let",
    "give",
    "bit",
    "margin",
    "like",
    "squished",
    "next",
    "let",
    "say",
    "zero",
    "top",
    "bottom",
    "10",
    "pixels",
    "left",
    "right",
    "giving",
    "space",
    "uh",
    "let",
    "also",
    "remove",
    "border",
    "let",
    "style",
    "actual",
    "icons",
    "button",
    "say",
    "font",
    "size",
    "let",
    "say",
    "two",
    "ram",
    "padding",
    "10",
    "pixels",
    "let",
    "change",
    "color",
    "white",
    "ca",
    "actually",
    "see",
    "really",
    "clearly",
    "let",
    "grab",
    "ids",
    "got",
    "one",
    "play",
    "duplicate",
    "one",
    "pause",
    "create",
    "later",
    "one",
    "reset",
    "play",
    "gon",
    "na",
    "background",
    "color",
    "green",
    "reset",
    "gon",
    "na",
    "background",
    "color",
    "red",
    "pause",
    "gon",
    "na",
    "background",
    "color",
    "orange",
    "gives",
    "background",
    "color",
    "buttons",
    "actually",
    "size",
    "let",
    "quickly",
    "make",
    "size",
    "say",
    "50",
    "pixels",
    "yeah",
    "looks",
    "lot",
    "better",
    "pretty",
    "much",
    "styling",
    "let",
    "head",
    "project",
    "file",
    "start",
    "adding",
    "functionality",
    "stopwatch",
    "right",
    "guys",
    "first",
    "thing",
    "need",
    "create",
    "variables",
    "buttons",
    "going",
    "put",
    "variables",
    "buttons",
    "going",
    "say",
    "const",
    "start",
    "stop",
    "btn",
    "equals",
    "document",
    "dot",
    "query",
    "selector",
    "going",
    "select",
    "id",
    "start",
    "stop",
    "btn",
    "going",
    "one",
    "reset",
    "reset",
    "btn",
    "equals",
    "id",
    "reset",
    "btn",
    "variables",
    "buttons",
    "next",
    "thing",
    "define",
    "variables",
    "hold",
    "time",
    "values",
    "um",
    "put",
    "comment",
    "time",
    "values",
    "say",
    "let",
    "seconds",
    "equal",
    "zero",
    "let",
    "minutes",
    "also",
    "equal",
    "zero",
    "let",
    "hours",
    "equal",
    "zero",
    "variables",
    "going",
    "need",
    "moment",
    "next",
    "thing",
    "want",
    "actually",
    "create",
    "stopwatch",
    "function",
    "going",
    "determine",
    "stopwatch",
    "needs",
    "increment",
    "next",
    "number",
    "ie",
    "seconds",
    "minutes",
    "hours",
    "well",
    "displaying",
    "value",
    "ui",
    "put",
    "uh",
    "stop",
    "watch",
    "function",
    "say",
    "function",
    "call",
    "stop",
    "watch",
    "firstly",
    "want",
    "invoke",
    "function",
    "actually",
    "increment",
    "seconds",
    "fires",
    "press",
    "play",
    "button",
    "seconds",
    "start",
    "increment",
    "say",
    "seconds",
    "plus",
    "plus",
    "course",
    "leave",
    "like",
    "going",
    "increment",
    "seconds",
    "going",
    "jump",
    "next",
    "value",
    "wanted",
    "increment",
    "gets",
    "minutes",
    "hours",
    "going",
    "need",
    "create",
    "statement",
    "gon",
    "na",
    "say",
    "seconds",
    "divided",
    "60",
    "amount",
    "seconds",
    "equal",
    "one",
    "want",
    "seconds",
    "jump",
    "zero",
    "want",
    "minutes",
    "increment",
    "saying",
    "reaches",
    "60",
    "seconds",
    "restart",
    "minutes",
    "start",
    "incrementing",
    "increment",
    "next",
    "value",
    "course",
    "got",
    "minutes",
    "also",
    "got",
    "hours",
    "need",
    "include",
    "well",
    "apply",
    "logic",
    "minutes",
    "divided",
    "60",
    "equal",
    "condition",
    "want",
    "minutes",
    "let",
    "back",
    "zero",
    "hours",
    "increment",
    "need",
    "actually",
    "create",
    "variable",
    "display",
    "statement",
    "browser",
    "stopwatch",
    "actually",
    "increment",
    "otherwise",
    "numbers",
    "stay",
    "static",
    "way",
    "going",
    "need",
    "go",
    "underneath",
    "statement",
    "say",
    "let",
    "say",
    "let",
    "display",
    "timer",
    "equal",
    "document",
    "dot",
    "get",
    "element",
    "id",
    "going",
    "get",
    "id",
    "timer",
    "going",
    "change",
    "inner",
    "text",
    "scroll",
    "bit",
    "guys",
    "see",
    "going",
    "set",
    "equal",
    "hours",
    "plus",
    "uh",
    "colon",
    "plus",
    "minutes",
    "plus",
    "colon",
    "finally",
    "seconds",
    "close",
    "variable",
    "making",
    "sure",
    "statements",
    "working",
    "want",
    "displayed",
    "browser",
    "way",
    "display",
    "check",
    "grab",
    "window",
    "object",
    "going",
    "grab",
    "set",
    "interval",
    "function",
    "basically",
    "method",
    "calls",
    "function",
    "specified",
    "interval",
    "function",
    "course",
    "want",
    "going",
    "stopwatch",
    "interval",
    "takes",
    "two",
    "parameters",
    "first",
    "function",
    "amount",
    "time",
    "gon",
    "na",
    "putting",
    "thousand",
    "thousand",
    "milliseconds",
    "say",
    "stopwatch",
    "time",
    "thousand",
    "take",
    "look",
    "browser",
    "see",
    "beginning",
    "increment",
    "make",
    "bit",
    "quicker",
    "lower",
    "one",
    "see",
    "minutes",
    "also",
    "incrementing",
    "wait",
    "little",
    "bit",
    "longer",
    "jump",
    "hours",
    "see",
    "hours",
    "also",
    "incremented",
    "gets",
    "60",
    "going",
    "put",
    "back",
    "thousand",
    "comment",
    "course",
    "seen",
    "function",
    "fires",
    "lead",
    "zero",
    "disappears",
    "take",
    "look",
    "demo",
    "example",
    "play",
    "see",
    "starts",
    "incrementing",
    "leading",
    "zero",
    "still",
    "fix",
    "going",
    "actually",
    "create",
    "couple",
    "variables",
    "go",
    "underneath",
    "variables",
    "create",
    "variables",
    "leading",
    "zero",
    "say",
    "variables",
    "leading",
    "zero",
    "say",
    "let",
    "leading",
    "seconds",
    "equal",
    "zero",
    "duplicate",
    "times",
    "let",
    "leading",
    "minutes",
    "equal",
    "zero",
    "obviously",
    "hours",
    "need",
    "go",
    "back",
    "inside",
    "stopwatch",
    "function",
    "go",
    "underneath",
    "uh",
    "statement",
    "create",
    "conditionals",
    "include",
    "leading",
    "zero",
    "seconds",
    "minutes",
    "hours",
    "one",
    "digit",
    "say",
    "seconds",
    "less",
    "10",
    "want",
    "grab",
    "leading",
    "seconds",
    "set",
    "leading",
    "zero",
    "string",
    "value",
    "also",
    "want",
    "make",
    "string",
    "value",
    "say",
    "uh",
    "two",
    "string",
    "also",
    "want",
    "make",
    "string",
    "value",
    "apply",
    "two",
    "string",
    "method",
    "turn",
    "string",
    "else",
    "make",
    "sure",
    "else",
    "leave",
    "leading",
    "seconds",
    "equal",
    "normal",
    "seconds",
    "variable",
    "course",
    "want",
    "create",
    "two",
    "minutes",
    "hours",
    "say",
    "one",
    "minutes",
    "leading",
    "minutes",
    "hours",
    "hours",
    "course",
    "also",
    "going",
    "change",
    "uh",
    "variable",
    "say",
    "leading",
    "hours",
    "leading",
    "minutes",
    "leading",
    "seconds",
    "statements",
    "making",
    "sure",
    "leading",
    "zero",
    "show",
    "stopwatch",
    "showing",
    "one",
    "digit",
    "seen",
    "invoke",
    "function",
    "set",
    "interval",
    "lead",
    "zero",
    "disappear",
    "statements",
    "created",
    "variable",
    "display",
    "browser",
    "uncomment",
    "set",
    "interval",
    "start",
    "incrementing",
    "latent",
    "zero",
    "uncomment",
    "see",
    "incrementing",
    "leading",
    "zero",
    "speed",
    "also",
    "apply",
    "seconds",
    "minutes",
    "hours",
    "see",
    "working",
    "minutes",
    "wait",
    "little",
    "bit",
    "longer",
    "hours",
    "leading",
    "zero",
    "still",
    "stay",
    "see",
    "working",
    "exactly",
    "way",
    "put",
    "back",
    "thousand",
    "comment",
    "actually",
    "invoking",
    "stopwatch",
    "browser",
    "loads",
    "immediately",
    "invoking",
    "window",
    "object",
    "set",
    "interval",
    "function",
    "course",
    "want",
    "power",
    "want",
    "actually",
    "add",
    "functionality",
    "buttons",
    "going",
    "need",
    "actually",
    "create",
    "variables",
    "hold",
    "set",
    "interval",
    "function",
    "well",
    "containing",
    "status",
    "stopwatch",
    "show",
    "guys",
    "exactly",
    "mean",
    "let",
    "create",
    "two",
    "variables",
    "actually",
    "create",
    "variables",
    "set",
    "interval",
    "timer",
    "status",
    "say",
    "let",
    "timer",
    "interval",
    "equal",
    "null",
    "time",
    "want",
    "choose",
    "want",
    "stopwatch",
    "run",
    "page",
    "loads",
    "course",
    "create",
    "another",
    "variable",
    "timer",
    "status",
    "going",
    "set",
    "equal",
    "string",
    "value",
    "stop",
    "need",
    "use",
    "variables",
    "apply",
    "start",
    "stop",
    "button",
    "variable",
    "go",
    "underneath",
    "grab",
    "start",
    "stop",
    "button",
    "add",
    "event",
    "listener",
    "going",
    "look",
    "click",
    "event",
    "grab",
    "function",
    "inside",
    "function",
    "going",
    "use",
    "variables",
    "created",
    "going",
    "say",
    "timer",
    "status",
    "equal",
    "stopped",
    "want",
    "grab",
    "timer",
    "interval",
    "variable",
    "set",
    "actual",
    "set",
    "interval",
    "function",
    "paste",
    "close",
    "actually",
    "want",
    "change",
    "button",
    "switch",
    "play",
    "button",
    "pause",
    "button",
    "like",
    "uh",
    "demo",
    "example",
    "say",
    "document",
    "dot",
    "get",
    "element",
    "iid",
    "grab",
    "start",
    "stop",
    "id",
    "grab",
    "inner",
    "html",
    "set",
    "backticks",
    "going",
    "grab",
    "icon",
    "got",
    "class",
    "uh",
    "fa",
    "solid",
    "fa",
    "pause",
    "want",
    "actually",
    "include",
    "id",
    "gives",
    "color",
    "orange",
    "id",
    "pause",
    "close",
    "also",
    "want",
    "change",
    "value",
    "status",
    "going",
    "grab",
    "timer",
    "status",
    "set",
    "equal",
    "started",
    "else",
    "stopwatch",
    "running",
    "also",
    "want",
    "functionality",
    "pause",
    "timer",
    "need",
    "grab",
    "window",
    "object",
    "grab",
    "clear",
    "interval",
    "function",
    "actually",
    "stop",
    "timer",
    "insert",
    "us",
    "time",
    "interval",
    "variable",
    "reference",
    "timer",
    "variable",
    "close",
    "course",
    "statement",
    "rings",
    "true",
    "also",
    "want",
    "change",
    "pause",
    "button",
    "back",
    "play",
    "button",
    "going",
    "say",
    "document",
    "dot",
    "get",
    "element",
    "id",
    "grab",
    "start",
    "stop",
    "btn",
    "id",
    "change",
    "inner",
    "html",
    "going",
    "equal",
    "another",
    "icon",
    "dot",
    "class",
    "equals",
    "f",
    "dash",
    "solid",
    "f",
    "dash",
    "play",
    "also",
    "want",
    "grab",
    "id",
    "play",
    "green",
    "background",
    "color",
    "close",
    "obviously",
    "change",
    "timer",
    "status",
    "back",
    "stopped",
    "done",
    "inside",
    "function",
    "checking",
    "timer",
    "status",
    "equal",
    "stopped",
    "timer",
    "start",
    "play",
    "button",
    "also",
    "change",
    "pause",
    "button",
    "well",
    "time",
    "status",
    "changing",
    "started",
    "else",
    "click",
    "pause",
    "button",
    "time",
    "stop",
    "clear",
    "interval",
    "function",
    "pause",
    "button",
    "revert",
    "back",
    "play",
    "button",
    "well",
    "timer",
    "status",
    "change",
    "back",
    "stopped",
    "complete",
    "functionality",
    "playing",
    "stopping",
    "timer",
    "go",
    "ahead",
    "test",
    "see",
    "changing",
    "pause",
    "button",
    "time",
    "starting",
    "increment",
    "press",
    "pause",
    "button",
    "stop",
    "timer",
    "button",
    "revert",
    "back",
    "play",
    "button",
    "see",
    "function",
    "working",
    "perfectly",
    "fine",
    "almost",
    "done",
    "need",
    "add",
    "event",
    "listener",
    "reset",
    "button",
    "going",
    "need",
    "event",
    "listener",
    "grab",
    "reset",
    "button",
    "variable",
    "add",
    "event",
    "list",
    "look",
    "click",
    "event",
    "grab",
    "function",
    "keyword",
    "inside",
    "function",
    "scroll",
    "bit",
    "guys",
    "see",
    "want",
    "grab",
    "window",
    "object",
    "clear",
    "interval",
    "stops",
    "reference",
    "timer",
    "interval",
    "want",
    "click",
    "grab",
    "seconds",
    "going",
    "equal",
    "zero",
    "duplicate",
    "two",
    "times",
    "minutes",
    "hours",
    "want",
    "actually",
    "display",
    "browser",
    "say",
    "document",
    "dot",
    "get",
    "element",
    "id",
    "want",
    "grab",
    "timer",
    "grab",
    "inner",
    "html",
    "set",
    "base",
    "zero",
    "zero",
    "hours",
    "minutes",
    "seconds",
    "event",
    "listener",
    "created",
    "reset",
    "button",
    "inside",
    "function",
    "stopping",
    "timer",
    "interval",
    "using",
    "clear",
    "interval",
    "method",
    "essentially",
    "method",
    "clears",
    "time",
    "set",
    "set",
    "interval",
    "method",
    "course",
    "referencing",
    "set",
    "interval",
    "stop",
    "stopwatch",
    "like",
    "else",
    "statement",
    "done",
    "course",
    "want",
    "stop",
    "timer",
    "actually",
    "want",
    "reset",
    "revert",
    "seconds",
    "minutes",
    "hours",
    "back",
    "zero",
    "done",
    "changing",
    "values",
    "back",
    "zero",
    "course",
    "want",
    "actually",
    "outputted",
    "browser",
    "use",
    "grab",
    "timer",
    "change",
    "inner",
    "html",
    "zero",
    "minutes",
    "hours",
    "seconds",
    "actually",
    "reset",
    "stopwatch",
    "zero",
    "go",
    "ahead",
    "test",
    "press",
    "play",
    "button",
    "starts",
    "incrementing",
    "also",
    "reverts",
    "pause",
    "pause",
    "reverts",
    "back",
    "play",
    "button",
    "timer",
    "stops",
    "click",
    "reset",
    "button",
    "reset",
    "timer",
    "see",
    "stopwatch",
    "working",
    "full",
    "functionality",
    "concludes",
    "fourth",
    "project",
    "quite",
    "bit",
    "javascript",
    "take",
    "project",
    "however",
    "understood",
    "actually",
    "quite",
    "fun",
    "exercise",
    "create",
    "alright",
    "guys",
    "master",
    "level",
    "project",
    "going",
    "creating",
    "list",
    "list",
    "works",
    "simply",
    "enter",
    "task",
    "inside",
    "input",
    "tab",
    "enter",
    "task",
    "add",
    "button",
    "add",
    "task",
    "underneath",
    "tab",
    "happens",
    "get",
    "extra",
    "functionality",
    "let",
    "go",
    "ahead",
    "see",
    "looks",
    "like",
    "let",
    "enter",
    "task",
    "let",
    "say",
    "collect",
    "shopping",
    "enter",
    "task",
    "see",
    "task",
    "added",
    "underneath",
    "well",
    "got",
    "extra",
    "functionality",
    "got",
    "orange",
    "box",
    "also",
    "got",
    "trash",
    "orange",
    "box",
    "complete",
    "task",
    "click",
    "put",
    "line",
    "want",
    "get",
    "rid",
    "task",
    "completely",
    "click",
    "trash",
    "see",
    "delete",
    "actual",
    "task",
    "list",
    "course",
    "prettiest",
    "list",
    "really",
    "objective",
    "project",
    "feel",
    "free",
    "style",
    "however",
    "like",
    "guys",
    "creating",
    "project",
    "actually",
    "going",
    "include",
    "quite",
    "lot",
    "learned",
    "part",
    "one",
    "hope",
    "guys",
    "paying",
    "attention",
    "far",
    "master",
    "level",
    "project",
    "project",
    "five",
    "list",
    "key",
    "concepts",
    "going",
    "need",
    "project",
    "going",
    "using",
    "course",
    "going",
    "using",
    "event",
    "listener",
    "going",
    "using",
    "penchal",
    "method",
    "create",
    "element",
    "method",
    "parent",
    "element",
    "method",
    "well",
    "remove",
    "method",
    "quite",
    "lot",
    "concepts",
    "learned",
    "part",
    "one",
    "let",
    "head",
    "vs",
    "code",
    "create",
    "list",
    "first",
    "thing",
    "need",
    "create",
    "markup",
    "list",
    "going",
    "wrap",
    "div",
    "class",
    "container",
    "going",
    "div",
    "houses",
    "input",
    "button",
    "going",
    "call",
    "oh",
    "going",
    "give",
    "id",
    "add",
    "task",
    "container",
    "inside",
    "going",
    "input",
    "type",
    "text",
    "going",
    "give",
    "placeholder",
    "value",
    "enter",
    "task",
    "going",
    "text",
    "inside",
    "input",
    "going",
    "give",
    "us",
    "id",
    "input",
    "task",
    "going",
    "need",
    "grab",
    "onto",
    "give",
    "event",
    "list",
    "line",
    "javascript",
    "go",
    "underneath",
    "create",
    "button",
    "button",
    "going",
    "id",
    "add",
    "task",
    "going",
    "need",
    "grab",
    "onto",
    "well",
    "going",
    "icon",
    "class",
    "fa",
    "solid",
    "dot",
    "fa",
    "plus",
    "input",
    "button",
    "go",
    "outside",
    "container",
    "gon",
    "na",
    "id",
    "gon",
    "na",
    "container",
    "tasks",
    "add",
    "list",
    "going",
    "give",
    "id",
    "task",
    "container",
    "going",
    "need",
    "markup",
    "let",
    "head",
    "style",
    "sheet",
    "give",
    "styling",
    "first",
    "thing",
    "going",
    "want",
    "first",
    "going",
    "grab",
    "body",
    "give",
    "height",
    "100",
    "viewport",
    "heights",
    "give",
    "background",
    "image",
    "going",
    "image",
    "folder",
    "project",
    "extra",
    "style",
    "others",
    "want",
    "align",
    "content",
    "middle",
    "using",
    "flexbox",
    "items",
    "center",
    "center",
    "content",
    "let",
    "give",
    "styling",
    "um",
    "add",
    "task",
    "container",
    "got",
    "id",
    "add",
    "task",
    "container",
    "going",
    "width",
    "say",
    "350",
    "pixels",
    "padding",
    "say",
    "20",
    "pixels",
    "top",
    "bottom",
    "10",
    "pixels",
    "left",
    "right",
    "give",
    "background",
    "color",
    "white",
    "trusty",
    "friend",
    "border",
    "radius",
    "give",
    "rounded",
    "edges",
    "give",
    "box",
    "shadow",
    "always",
    "looks",
    "good",
    "bit",
    "box",
    "shadow",
    "going",
    "also",
    "need",
    "display",
    "flex",
    "want",
    "apply",
    "flex",
    "rules",
    "input",
    "button",
    "let",
    "go",
    "ahead",
    "let",
    "go",
    "grab",
    "input",
    "give",
    "flex",
    "five",
    "takes",
    "space",
    "uh",
    "give",
    "margin",
    "right",
    "bit",
    "space",
    "button",
    "say",
    "say",
    "10",
    "pixels",
    "give",
    "border",
    "radius",
    "rounded",
    "edges",
    "font",
    "size",
    "let",
    "make",
    "bit",
    "bigger",
    "let",
    "say",
    "rem",
    "let",
    "also",
    "give",
    "padding",
    "five",
    "pixels",
    "see",
    "looks",
    "like",
    "yeah",
    "looks",
    "pretty",
    "good",
    "button",
    "id",
    "add",
    "task",
    "say",
    "font",
    "size",
    "saying",
    "icon",
    "increase",
    "size",
    "font",
    "size",
    "property",
    "say",
    "rem",
    "maybe",
    "yeah",
    "looks",
    "good",
    "let",
    "also",
    "give",
    "padding",
    "way",
    "around",
    "forgot",
    "actually",
    "apply",
    "flex",
    "properties",
    "let",
    "give",
    "flex",
    "one",
    "occupies",
    "bit",
    "space",
    "um",
    "let",
    "give",
    "background",
    "color",
    "white",
    "color",
    "icon",
    "green",
    "border",
    "let",
    "make",
    "green",
    "solid",
    "2",
    "pixels",
    "classic",
    "border",
    "radius",
    "looking",
    "pretty",
    "good",
    "think",
    "demo",
    "hover",
    "effect",
    "let",
    "actually",
    "apply",
    "transition",
    "seconds",
    "grab",
    "apply",
    "hover",
    "let",
    "change",
    "background",
    "color",
    "green",
    "color",
    "icon",
    "white",
    "let",
    "go",
    "ahead",
    "see",
    "working",
    "see",
    "got",
    "nice",
    "hover",
    "effect",
    "know",
    "going",
    "need",
    "click",
    "add",
    "task",
    "completely",
    "done",
    "styling",
    "see",
    "moment",
    "um",
    "enter",
    "task",
    "let",
    "first",
    "add",
    "functionality",
    "adding",
    "task",
    "list",
    "let",
    "go",
    "javascript",
    "file",
    "start",
    "enter",
    "tasks",
    "let",
    "head",
    "project",
    "file",
    "first",
    "things",
    "first",
    "javascript",
    "going",
    "need",
    "create",
    "variables",
    "one",
    "actual",
    "button",
    "one",
    "input",
    "one",
    "task",
    "container",
    "going",
    "hold",
    "tasks",
    "first",
    "one",
    "put",
    "comment",
    "first",
    "variables",
    "say",
    "add",
    "task",
    "equals",
    "document",
    "dot",
    "get",
    "element",
    "get",
    "element",
    "id",
    "add",
    "task",
    "button",
    "id",
    "add",
    "task",
    "one",
    "task",
    "container",
    "call",
    "variable",
    "task",
    "container",
    "going",
    "equal",
    "document",
    "dot",
    "get",
    "element",
    "id",
    "id",
    "task",
    "container",
    "gon",
    "na",
    "one",
    "input",
    "task",
    "document",
    "dot",
    "get",
    "element",
    "iid",
    "gon",
    "na",
    "input",
    "id",
    "input",
    "task",
    "got",
    "variables",
    "next",
    "thing",
    "want",
    "create",
    "event",
    "listener",
    "add",
    "button",
    "pretty",
    "much",
    "going",
    "hold",
    "power",
    "say",
    "event",
    "listener",
    "add",
    "button",
    "say",
    "add",
    "task",
    "variable",
    "add",
    "event",
    "listener",
    "going",
    "look",
    "click",
    "event",
    "function",
    "inside",
    "function",
    "first",
    "thing",
    "going",
    "create",
    "div",
    "going",
    "store",
    "inside",
    "variable",
    "task",
    "say",
    "let",
    "task",
    "equals",
    "document",
    "dot",
    "create",
    "element",
    "going",
    "creating",
    "div",
    "div",
    "essentially",
    "going",
    "house",
    "um",
    "task",
    "well",
    "extra",
    "functionality",
    "check",
    "button",
    "delete",
    "button",
    "also",
    "going",
    "want",
    "give",
    "task",
    "class",
    "style",
    "going",
    "class",
    "task",
    "got",
    "div",
    "going",
    "need",
    "insert",
    "list",
    "item",
    "actual",
    "task",
    "well",
    "functionality",
    "check",
    "button",
    "delete",
    "button",
    "first",
    "list",
    "item",
    "going",
    "equals",
    "document",
    "dot",
    "create",
    "element",
    "going",
    "create",
    "li",
    "going",
    "want",
    "list",
    "item",
    "going",
    "want",
    "display",
    "text",
    "insert",
    "input",
    "value",
    "going",
    "grab",
    "li",
    "variable",
    "going",
    "say",
    "inner",
    "text",
    "going",
    "equal",
    "backticks",
    "insert",
    "variable",
    "input",
    "task",
    "got",
    "value",
    "value",
    "going",
    "inserting",
    "whatever",
    "task",
    "insert",
    "inside",
    "input",
    "course",
    "going",
    "want",
    "append",
    "inside",
    "div",
    "variable",
    "task",
    "append",
    "li",
    "got",
    "list",
    "item",
    "next",
    "thing",
    "want",
    "include",
    "check",
    "button",
    "delete",
    "button",
    "include",
    "extra",
    "functionality",
    "insert",
    "task",
    "say",
    "let",
    "create",
    "variable",
    "called",
    "check",
    "button",
    "going",
    "equal",
    "document",
    "dot",
    "create",
    "element",
    "create",
    "button",
    "say",
    "uh",
    "let",
    "include",
    "icon",
    "say",
    "check",
    "button",
    "dot",
    "uh",
    "html",
    "equal",
    "say",
    "class",
    "f8",
    "solid",
    "insert",
    "quote",
    "marks",
    "fa",
    "solid",
    "fa",
    "check",
    "close",
    "obviously",
    "need",
    "style",
    "need",
    "include",
    "class",
    "check",
    "task",
    "say",
    "task",
    "dot",
    "append",
    "child",
    "obviously",
    "need",
    "include",
    "inside",
    "div",
    "say",
    "task",
    "start",
    "append",
    "child",
    "append",
    "check",
    "button",
    "duplicate",
    "delete",
    "button",
    "change",
    "release",
    "delete",
    "button",
    "one",
    "trash",
    "let",
    "also",
    "change",
    "class",
    "delete",
    "task",
    "created",
    "elements",
    "going",
    "need",
    "include",
    "task",
    "next",
    "thing",
    "need",
    "make",
    "sure",
    "actually",
    "shows",
    "appears",
    "browser",
    "try",
    "add",
    "task",
    "say",
    "actually",
    "first",
    "want",
    "show",
    "bit",
    "validation",
    "take",
    "look",
    "demo",
    "example",
    "try",
    "enter",
    "task",
    "without",
    "actually",
    "entering",
    "anything",
    "input",
    "see",
    "get",
    "alert",
    "box",
    "please",
    "enter",
    "task",
    "button",
    "work",
    "need",
    "either",
    "add",
    "task",
    "going",
    "show",
    "us",
    "alert",
    "box",
    "tell",
    "us",
    "enter",
    "task",
    "um",
    "like",
    "bit",
    "validation",
    "project",
    "say",
    "input",
    "task",
    "dot",
    "value",
    "whatever",
    "value",
    "put",
    "inside",
    "input",
    "equal",
    "nothing",
    "include",
    "alert",
    "box",
    "please",
    "enter",
    "task",
    "see",
    "working",
    "see",
    "alert",
    "box",
    "working",
    "say",
    "else",
    "grab",
    "task",
    "container",
    "going",
    "container",
    "houses",
    "task",
    "going",
    "append",
    "child",
    "going",
    "append",
    "task",
    "houses",
    "um",
    "check",
    "button",
    "list",
    "item",
    "delete",
    "button",
    "close",
    "see",
    "works",
    "enter",
    "task",
    "say",
    "collect",
    "shopping",
    "hit",
    "enter",
    "see",
    "included",
    "list",
    "item",
    "also",
    "included",
    "two",
    "buttons",
    "created",
    "obviously",
    "gon",
    "na",
    "starting",
    "moment",
    "one",
    "thing",
    "want",
    "go",
    "style",
    "sheet",
    "style",
    "want",
    "revert",
    "back",
    "placeholder",
    "text",
    "instead",
    "holding",
    "value",
    "put",
    "input",
    "uh",
    "grab",
    "input",
    "task",
    "variable",
    "value",
    "want",
    "equal",
    "nothing",
    "go",
    "ahead",
    "type",
    "collect",
    "shopping",
    "enter",
    "see",
    "adds",
    "list",
    "item",
    "also",
    "removes",
    "input",
    "insert",
    "another",
    "task",
    "almost",
    "nearly",
    "done",
    "inside",
    "javascript",
    "come",
    "back",
    "add",
    "functionality",
    "um",
    "checkbox",
    "delete",
    "button",
    "first",
    "let",
    "start",
    "looks",
    "lot",
    "nicer",
    "easier",
    "work",
    "head",
    "back",
    "style",
    "sheet",
    "let",
    "apply",
    "styling",
    "um",
    "tasks",
    "get",
    "added",
    "list",
    "put",
    "comment",
    "saying",
    "styling",
    "tasks",
    "get",
    "added",
    "list",
    "first",
    "grab",
    "tasks",
    "div",
    "going",
    "house",
    "content",
    "going",
    "give",
    "width",
    "100",
    "going",
    "give",
    "background",
    "color",
    "white",
    "actually",
    "see",
    "content",
    "um",
    "let",
    "also",
    "give",
    "broader",
    "radius",
    "10",
    "pixels",
    "also",
    "box",
    "shadow",
    "always",
    "love",
    "bit",
    "box",
    "shadow",
    "um",
    "add",
    "bit",
    "padding",
    "say",
    "five",
    "pixels",
    "let",
    "push",
    "bit",
    "actually",
    "enter",
    "tab",
    "let",
    "give",
    "margin",
    "bottom",
    "20",
    "pixels",
    "separate",
    "two",
    "let",
    "also",
    "give",
    "bit",
    "margin",
    "bottom",
    "well",
    "separates",
    "um",
    "content",
    "tasks",
    "little",
    "bit",
    "say",
    "five",
    "pixels",
    "let",
    "grab",
    "display",
    "flex",
    "let",
    "say",
    "justify",
    "content",
    "space",
    "let",
    "grab",
    "list",
    "items",
    "dot",
    "task",
    "li",
    "remove",
    "list",
    "style",
    "put",
    "point",
    "let",
    "give",
    "flex",
    "four",
    "takes",
    "space",
    "uh",
    "let",
    "give",
    "bit",
    "padding",
    "five",
    "pixels",
    "let",
    "increase",
    "font",
    "size",
    "say",
    "uh",
    "let",
    "say",
    "rem",
    "bit",
    "bigger",
    "looks",
    "good",
    "let",
    "give",
    "bit",
    "margin",
    "well",
    "10",
    "pixels",
    "buttons",
    "grab",
    "task",
    "grab",
    "buttons",
    "give",
    "flex",
    "one",
    "let",
    "also",
    "give",
    "rounded",
    "edges",
    "border",
    "radius",
    "10",
    "pixels",
    "background",
    "color",
    "uh",
    "let",
    "make",
    "white",
    "let",
    "grab",
    "um",
    "items",
    "actually",
    "let",
    "change",
    "cursor",
    "pointer",
    "well",
    "let",
    "grab",
    "task",
    "dot",
    "check",
    "task",
    "going",
    "color",
    "orange",
    "let",
    "give",
    "bit",
    "space",
    "margin",
    "right",
    "five",
    "pixels",
    "border",
    "say",
    "solid",
    "two",
    "pixels",
    "orange",
    "let",
    "increase",
    "font",
    "size",
    "tick",
    "let",
    "say",
    "ram",
    "looking",
    "good",
    "let",
    "similar",
    "thing",
    "delete",
    "delete",
    "task",
    "instead",
    "color",
    "orange",
    "color",
    "red",
    "margin",
    "change",
    "red",
    "let",
    "decrease",
    "font",
    "sizes",
    "say",
    "yeah",
    "looks",
    "better",
    "hover",
    "effect",
    "let",
    "check",
    "first",
    "say",
    "background",
    "color",
    "change",
    "orange",
    "color",
    "white",
    "copy",
    "therefore",
    "delete",
    "task",
    "background",
    "color",
    "going",
    "red",
    "color",
    "going",
    "white",
    "hover",
    "see",
    "working",
    "need",
    "go",
    "javascript",
    "apply",
    "functionality",
    "inside",
    "event",
    "listener",
    "go",
    "underneath",
    "input",
    "task",
    "value",
    "say",
    "check",
    "button",
    "add",
    "event",
    "listener",
    "going",
    "look",
    "click",
    "event",
    "function",
    "going",
    "say",
    "check",
    "button",
    "need",
    "go",
    "one",
    "element",
    "um",
    "need",
    "traverse",
    "dom",
    "like",
    "learned",
    "part",
    "one",
    "gon",
    "na",
    "grab",
    "parent",
    "element",
    "gon",
    "na",
    "say",
    "dot",
    "style",
    "dot",
    "text",
    "decoration",
    "going",
    "equal",
    "line",
    "check",
    "works",
    "let",
    "enter",
    "task",
    "see",
    "putting",
    "line",
    "um",
    "content",
    "let",
    "one",
    "delete",
    "button",
    "add",
    "event",
    "listener",
    "look",
    "click",
    "event",
    "grab",
    "function",
    "going",
    "need",
    "event",
    "object",
    "going",
    "say",
    "let",
    "target",
    "equals",
    "e",
    "dot",
    "target",
    "remember",
    "back",
    "part",
    "one",
    "reference",
    "actual",
    "element",
    "clicked",
    "want",
    "grab",
    "target",
    "grab",
    "parent",
    "element",
    "twice",
    "need",
    "traverse",
    "dom",
    "two",
    "times",
    "want",
    "press",
    "remove",
    "target",
    "referencing",
    "trash",
    "bin",
    "delete",
    "button",
    "one",
    "level",
    "list",
    "item",
    "one",
    "level",
    "task",
    "remove",
    "add",
    "um",
    "check",
    "working",
    "sorry",
    "enter",
    "task",
    "collect",
    "shopping",
    "click",
    "check",
    "button",
    "cross",
    "indicating",
    "completed",
    "want",
    "delete",
    "press",
    "delete",
    "button",
    "add",
    "one",
    "value",
    "collect",
    "shopping",
    "add",
    "another",
    "one",
    "walk",
    "dog",
    "add",
    "cross",
    "delete",
    "collect",
    "shop",
    "see",
    "list",
    "fully",
    "functional",
    "actually",
    "going",
    "project",
    "guys",
    "style",
    "really",
    "prettiest",
    "project",
    "really",
    "point",
    "project",
    "course",
    "manipulate",
    "dom",
    "also",
    "concludes",
    "part",
    "two",
    "video",
    "dom",
    "manipulation",
    "hope",
    "guys",
    "enjoyed",
    "video",
    "learned",
    "lot",
    "throughout",
    "course",
    "sure",
    "leave",
    "like",
    "leave",
    "questions",
    "comments",
    "may",
    "see",
    "guys",
    "next",
    "video"
  ],
  "keywords": [
    "course",
    "javascript",
    "dom",
    "use",
    "change",
    "delete",
    "elements",
    "first",
    "part",
    "manipulate",
    "second",
    "learned",
    "create",
    "created",
    "code",
    "going",
    "take",
    "look",
    "tutorial",
    "little",
    "know",
    "apply",
    "working",
    "html",
    "css",
    "want",
    "check",
    "start",
    "also",
    "guys",
    "things",
    "need",
    "browser",
    "like",
    "using",
    "methods",
    "select",
    "traverse",
    "event",
    "document",
    "object",
    "model",
    "properties",
    "content",
    "style",
    "project",
    "one",
    "time",
    "even",
    "another",
    "way",
    "works",
    "tree",
    "nodes",
    "see",
    "everything",
    "type",
    "node",
    "attributes",
    "text",
    "line",
    "bit",
    "make",
    "actually",
    "property",
    "window",
    "top",
    "level",
    "access",
    "height",
    "width",
    "inside",
    "inner",
    "thing",
    "parent",
    "child",
    "sibling",
    "element",
    "head",
    "body",
    "would",
    "call",
    "underneath",
    "title",
    "paragraph",
    "h1",
    "link",
    "tag",
    "class",
    "attribute",
    "classes",
    "case",
    "times",
    "right",
    "next",
    "selecting",
    "let",
    "go",
    "file",
    "got",
    "div",
    "container",
    "heading",
    "id",
    "main",
    "ul",
    "five",
    "list",
    "items",
    "styling",
    "us",
    "get",
    "name",
    "query",
    "selector",
    "pretty",
    "method",
    "find",
    "used",
    "back",
    "quote",
    "really",
    "include",
    "grab",
    "close",
    "variables",
    "say",
    "set",
    "log",
    "console",
    "hover",
    "variable",
    "add",
    "good",
    "moment",
    "quite",
    "example",
    "put",
    "item",
    "think",
    "array",
    "open",
    "paste",
    "comment",
    "li",
    "instead",
    "uh",
    "wanted",
    "duplicate",
    "sports",
    "gon",
    "na",
    "show",
    "different",
    "essentially",
    "color",
    "red",
    "white",
    "done",
    "um",
    "try",
    "font",
    "size",
    "two",
    "equals",
    "zero",
    "dot",
    "increment",
    "creating",
    "simple",
    "enter",
    "append",
    "three",
    "getting",
    "new",
    "much",
    "input",
    "ahead",
    "equal",
    "added",
    "give",
    "exact",
    "remove",
    "default",
    "last",
    "left",
    "vs",
    "saying",
    "10",
    "well",
    "background",
    "space",
    "previous",
    "listeners",
    "functionality",
    "events",
    "key",
    "button",
    "click",
    "projects",
    "alert",
    "box",
    "function",
    "listener",
    "third",
    "bubbling",
    "reference",
    "btn",
    "e",
    "reveal",
    "display",
    "hidden",
    "looks",
    "yeah",
    "else",
    "statement",
    "sheet",
    "propagation",
    "delegation",
    "target",
    "phase",
    "bottom",
    "clicked",
    "markup",
    "value",
    "exactly",
    "buttons",
    "position",
    "stop",
    "sure",
    "actual",
    "task",
    "answer",
    "plus",
    "lot",
    "effect",
    "houses",
    "person",
    "quotes",
    "image",
    "original",
    "margin",
    "padding",
    "border",
    "flex",
    "center",
    "pixels",
    "solid",
    "nice",
    "edges",
    "radius",
    "active",
    "modal",
    "animation",
    "seconds",
    "insert",
    "accordion",
    "question",
    "stopwatch",
    "play",
    "reset",
    "pause",
    "interval",
    "timer",
    "minutes",
    "hours",
    "leading",
    "status"
  ]
}