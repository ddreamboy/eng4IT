{
  "text": "what is going on guys welcome back in\ntoday's video we're going to learn how\nto properly import our own custom python\nmodules into our scripts and also with\nthe role of the init py files is in that\ncontext so let us get right into it\n[Music]\nall right so today we're going to work\nwith multiple files and multiple\ndirectories and please don't be confused\nby my development environment I'm using\nneovim inside of the windows subsystem\nfor Linux so inside of a terminal on\nWindows but that is completely\nirrelevant to you you can use whatever\nyou want you can use vs code pycharm\nnotepad plus plus that python idle\ndoesn't matter all you need is a\ndirectory where you can create multiple\npython files and directories and you\nneed a python editor and a python\ndevelopment environment that's basically\nit you just need to be able to run\nPython scripts I'm going to use this\nenvironment but don't be confused by\nthat so the first thing you want to do\nis we want to create a file called\nmain.py and this is going to be\nobviously our main file here we're going\nto run code and the goal is now to have\nfunctionality in different python files\nthat we can then import into the main\nfile so for example let's create a\nsecond file here let's say we have\num a file I'm going to call it\nfunctionality.py we just create this\nfile here\num and essentially we're going to open\nthis now in Split mode here I'm gonna\njust Define a couple of arithmetic\nfunctions so I'm going to say def add\nnow let me just briefly before it fires\nup again\ndisable the auto completion so we're\ngonna have ADD taking parameters X and Y\nreturning X Plus y very simple functions\nand we're gonna copy this now\nand we're gonna have the same function\nhere for sub we're gonna have the same\nfunction for malt and we're going to\nhave the same function for diff\nand we're going to change the respective\noperators here\nso those are the functions that we would\nlike to use in the main file how can we\ndo that now when we have just one file\nthis is kind of simple all we need to do\nis we need to say uh from\nfunctionality import and then I can say\nfor example add\nthen I can print print at 10 and 20. so\nthat's quite simple\num\nI can now open up a terminal here I\nnavigate to the directory that I'm\nworking in and I can now run\nthe python file again don't be confused\nby the environment all I did is I\ncreated two python files in the same\ndirectory in a random in the terminal so\nyou can do that as well\num and you can see it worked so now I\nuse the add function of the\nfunctionality python uh file and I used\nit in the main file without having the\nfunction defined in the main file by\njust saying from functionality import at\nso this is kind of simple nothing too\ncomplicated here\num now what I can also do is I can say\nfrom functionality import Star\nand then I can also use add and I can\nalso use sup and let's see if that works\nPython 3 main py you can see it works\nwithout problems\num so that is how you do that if you\njust have a file in the same directory\nnow let's say you don't have just a\nsingle file but you have an actual\nmodule so you actually have a directory\nwith multiple python files that have\ndifferent functionality uh in those\nfiles so let's say here I'm going to\ncreate now a new directory let's call it\num other module\nand inside of that I'm going to create a\npython file called\nsecond.py I don't know just just some\nfile here and let's open this file and\nlet's say we have a function my function\nhere\nand let's say I just want to print\nhello with this function\nso in order to use this function now I\ndon't have to do anything fancy I just\ngo again to my main file I say from uh\nand in this case other module import\nand um I can just import here now the\nsecond so the difference here is that\nI'm importing now the full file so if I\nhave multiple functions this is not a\nfunction here I'm saying from the file\nfunctionality import the different\nfunctions whereas here I'm saying from\nthe module from the directory other\nmodule import one of the Python files\nand if I now want to access the function\nI have to say second dot my function\nlike this\nin order to execute it in order to call\nit or of course alternatively I can also\nsay import uh or actually I can say from\nuh other module dot second import\neverything and then I could just run I\ncould just call the function without\nreferring to Second specifically so that\nworks as well the interesting thing now\nis what if we have multiple files and\nthis is maybe something new to you\nbecause that's up until now this was\nactually quite clear let's say I have\nanother file here third Dot py and\num I have I don't know another function\nand this time it prints ABC or something\nlike that\nand uh now let's say I want to do\nsomething else I want to go into my main\nfile and I want to say from other module\nimport absolutely everything so I want\nto import second and third and I want to\nbe able to do something like second dot\nmy function\nhow do we do that because if I try to do\nit like this if I just say from other\nmodule import everything and I want to\nimport those two files you can see it\ndoesn't work and this now is why we need\nthe so-called init py file so underscore\nunderscore init underscore underscore py\nfiles that you see in so many projects\nthat you've seen so many packages\nsometimes it's Auto automatically\ncreated in pycharm for example this file\nhas the functionality to actually make a\ndirectory into a module so if I go here\ninto other module and I create this file\nso underscore underscore init underscore\nunderscore Dot py\nif I just create it this now makes this\ndirectory to a module so now this is\nrecognized as a module and inside of\nthis file I can also write the following\nline I can say underscore underscore all\nunderscore underscore equals and then I\ncan provide a list with strings and\nthese strings refer to the file name so\nI can say here second and third\nand now this already this file here this\ninit py file with this line of code\nbeing in the same directory as those two\nfiles this will allow me to use\nthis notation from other module import\nStar because what happens here is the\nStars decoded into second and third and\nif I now run this you can see this works\nso this is how that works another thing\nof course is you can go ahead and create\na sub module so I can create another\ndirectory sub module for example inside\nof other module and here I can create a\nfile let's call it fourth\ndot py\num and if I open it and I say last\nfunction\nprint I promise\nthere you go\nnow I can go into my main file and say\nfrom other module.submodule\nimport for example fourth\nso this should work I think if I now say\num\nfourth dot last function like this\nthis works as you can see and I think it\nshould also be possible to say\nuh dot fourth\nimport and then last\nfct\nthen we don't have to use default\nso as you can see this works as well now\none last thing that I want to show you\nis a notation I'm not sure if we\nactually need it anymore but one thing\nat least to make it Backward Compatible\ncompatible and if you publish your own\npackage this is also always a good thing\nto do you can also write the import\nstatements of the respective module here\ninside of the npy file for clarity so\nyou can say from dot another\nuh not another sorry this is my prepared\ncode uh from the dot second we want to\nimport uh what did we have here my\nfunction\nso my function and from third import\nanother function what's the name I think\nso this is how this is done\nprofessionally\num another function another function\nthere you go so this also works and this\nis how you allow for the usage of the uh\nof the Wild Card import here so this is\nhow you do that and those are the basics\nof working with your own custom modules\nin Python you can just import them if\nthey're in the same directory by just\nspecifying the file or if you have a\nmodule structure it's always useful to\nDefine init py files to allow for this\nspecial type of import but yeah that is\nhow you do that in Python so that's it\nfor today's video I hope you enjoyed it\nand hope you learned something if so let\nme know by hitting the like button and\nleaving a comment in the comment section\ndown below and of course don't forget to\nsubscribe to this Channel and hit the\nnotification Bell to not miss a single\nfuture video for free other than that\nthank you much for watching see you in\nthe next video and bye\nthank you\n[Music]\n",
  "words": [
    "going",
    "guys",
    "welcome",
    "back",
    "today",
    "video",
    "going",
    "learn",
    "properly",
    "import",
    "custom",
    "python",
    "modules",
    "scripts",
    "also",
    "role",
    "init",
    "py",
    "files",
    "context",
    "let",
    "us",
    "get",
    "right",
    "music",
    "right",
    "today",
    "going",
    "work",
    "multiple",
    "files",
    "multiple",
    "directories",
    "please",
    "confused",
    "development",
    "environment",
    "using",
    "neovim",
    "inside",
    "windows",
    "subsystem",
    "linux",
    "inside",
    "terminal",
    "windows",
    "completely",
    "irrelevant",
    "use",
    "whatever",
    "want",
    "use",
    "vs",
    "code",
    "pycharm",
    "notepad",
    "plus",
    "plus",
    "python",
    "idle",
    "matter",
    "need",
    "directory",
    "create",
    "multiple",
    "python",
    "files",
    "directories",
    "need",
    "python",
    "editor",
    "python",
    "development",
    "environment",
    "basically",
    "need",
    "able",
    "run",
    "python",
    "scripts",
    "going",
    "use",
    "environment",
    "confused",
    "first",
    "thing",
    "want",
    "want",
    "create",
    "file",
    "called",
    "going",
    "obviously",
    "main",
    "file",
    "going",
    "run",
    "code",
    "goal",
    "functionality",
    "different",
    "python",
    "files",
    "import",
    "main",
    "file",
    "example",
    "let",
    "create",
    "second",
    "file",
    "let",
    "say",
    "um",
    "file",
    "going",
    "call",
    "create",
    "file",
    "um",
    "essentially",
    "going",
    "open",
    "split",
    "mode",
    "gon",
    "na",
    "define",
    "couple",
    "arithmetic",
    "functions",
    "going",
    "say",
    "def",
    "add",
    "let",
    "briefly",
    "fires",
    "disable",
    "auto",
    "completion",
    "gon",
    "na",
    "add",
    "taking",
    "parameters",
    "x",
    "returning",
    "x",
    "plus",
    "simple",
    "functions",
    "gon",
    "na",
    "copy",
    "gon",
    "na",
    "function",
    "sub",
    "gon",
    "na",
    "function",
    "malt",
    "going",
    "function",
    "diff",
    "going",
    "change",
    "respective",
    "operators",
    "functions",
    "would",
    "like",
    "use",
    "main",
    "file",
    "one",
    "file",
    "kind",
    "simple",
    "need",
    "need",
    "say",
    "uh",
    "functionality",
    "import",
    "say",
    "example",
    "add",
    "print",
    "print",
    "10",
    "quite",
    "simple",
    "um",
    "open",
    "terminal",
    "navigate",
    "directory",
    "working",
    "run",
    "python",
    "file",
    "confused",
    "environment",
    "created",
    "two",
    "python",
    "files",
    "directory",
    "random",
    "terminal",
    "well",
    "um",
    "see",
    "worked",
    "use",
    "add",
    "function",
    "functionality",
    "python",
    "uh",
    "file",
    "used",
    "main",
    "file",
    "without",
    "function",
    "defined",
    "main",
    "file",
    "saying",
    "functionality",
    "import",
    "kind",
    "simple",
    "nothing",
    "complicated",
    "um",
    "also",
    "say",
    "functionality",
    "import",
    "star",
    "also",
    "use",
    "add",
    "also",
    "use",
    "sup",
    "let",
    "see",
    "works",
    "python",
    "3",
    "main",
    "py",
    "see",
    "works",
    "without",
    "problems",
    "um",
    "file",
    "directory",
    "let",
    "say",
    "single",
    "file",
    "actual",
    "module",
    "actually",
    "directory",
    "multiple",
    "python",
    "files",
    "different",
    "functionality",
    "uh",
    "files",
    "let",
    "say",
    "going",
    "create",
    "new",
    "directory",
    "let",
    "call",
    "um",
    "module",
    "inside",
    "going",
    "create",
    "python",
    "file",
    "called",
    "know",
    "file",
    "let",
    "open",
    "file",
    "let",
    "say",
    "function",
    "function",
    "let",
    "say",
    "want",
    "print",
    "hello",
    "function",
    "order",
    "use",
    "function",
    "anything",
    "fancy",
    "go",
    "main",
    "file",
    "say",
    "uh",
    "case",
    "module",
    "import",
    "um",
    "import",
    "second",
    "difference",
    "importing",
    "full",
    "file",
    "multiple",
    "functions",
    "function",
    "saying",
    "file",
    "functionality",
    "import",
    "different",
    "functions",
    "whereas",
    "saying",
    "module",
    "directory",
    "module",
    "import",
    "one",
    "python",
    "files",
    "want",
    "access",
    "function",
    "say",
    "second",
    "dot",
    "function",
    "like",
    "order",
    "execute",
    "order",
    "call",
    "course",
    "alternatively",
    "also",
    "say",
    "import",
    "uh",
    "actually",
    "say",
    "uh",
    "module",
    "dot",
    "second",
    "import",
    "everything",
    "could",
    "run",
    "could",
    "call",
    "function",
    "without",
    "referring",
    "second",
    "specifically",
    "works",
    "well",
    "interesting",
    "thing",
    "multiple",
    "files",
    "maybe",
    "something",
    "new",
    "actually",
    "quite",
    "clear",
    "let",
    "say",
    "another",
    "file",
    "third",
    "dot",
    "py",
    "um",
    "know",
    "another",
    "function",
    "time",
    "prints",
    "abc",
    "something",
    "like",
    "uh",
    "let",
    "say",
    "want",
    "something",
    "else",
    "want",
    "go",
    "main",
    "file",
    "want",
    "say",
    "module",
    "import",
    "absolutely",
    "everything",
    "want",
    "import",
    "second",
    "third",
    "want",
    "able",
    "something",
    "like",
    "second",
    "dot",
    "function",
    "try",
    "like",
    "say",
    "module",
    "import",
    "everything",
    "want",
    "import",
    "two",
    "files",
    "see",
    "work",
    "need",
    "init",
    "py",
    "file",
    "underscore",
    "underscore",
    "init",
    "underscore",
    "underscore",
    "py",
    "files",
    "see",
    "many",
    "projects",
    "seen",
    "many",
    "packages",
    "sometimes",
    "auto",
    "automatically",
    "created",
    "pycharm",
    "example",
    "file",
    "functionality",
    "actually",
    "make",
    "directory",
    "module",
    "go",
    "module",
    "create",
    "file",
    "underscore",
    "underscore",
    "init",
    "underscore",
    "underscore",
    "dot",
    "py",
    "create",
    "makes",
    "directory",
    "module",
    "recognized",
    "module",
    "inside",
    "file",
    "also",
    "write",
    "following",
    "line",
    "say",
    "underscore",
    "underscore",
    "underscore",
    "underscore",
    "equals",
    "provide",
    "list",
    "strings",
    "strings",
    "refer",
    "file",
    "name",
    "say",
    "second",
    "third",
    "already",
    "file",
    "init",
    "py",
    "file",
    "line",
    "code",
    "directory",
    "two",
    "files",
    "allow",
    "use",
    "notation",
    "module",
    "import",
    "star",
    "happens",
    "stars",
    "decoded",
    "second",
    "third",
    "run",
    "see",
    "works",
    "works",
    "another",
    "thing",
    "course",
    "go",
    "ahead",
    "create",
    "sub",
    "module",
    "create",
    "another",
    "directory",
    "sub",
    "module",
    "example",
    "inside",
    "module",
    "create",
    "file",
    "let",
    "call",
    "fourth",
    "dot",
    "py",
    "um",
    "open",
    "say",
    "last",
    "function",
    "print",
    "promise",
    "go",
    "go",
    "main",
    "file",
    "say",
    "import",
    "example",
    "fourth",
    "work",
    "think",
    "say",
    "um",
    "fourth",
    "dot",
    "last",
    "function",
    "like",
    "works",
    "see",
    "think",
    "also",
    "possible",
    "say",
    "uh",
    "dot",
    "fourth",
    "import",
    "last",
    "fct",
    "use",
    "default",
    "see",
    "works",
    "well",
    "one",
    "last",
    "thing",
    "want",
    "show",
    "notation",
    "sure",
    "actually",
    "need",
    "anymore",
    "one",
    "thing",
    "least",
    "make",
    "backward",
    "compatible",
    "compatible",
    "publish",
    "package",
    "also",
    "always",
    "good",
    "thing",
    "also",
    "write",
    "import",
    "statements",
    "respective",
    "module",
    "inside",
    "npy",
    "file",
    "clarity",
    "say",
    "dot",
    "another",
    "uh",
    "another",
    "sorry",
    "prepared",
    "code",
    "uh",
    "dot",
    "second",
    "want",
    "import",
    "uh",
    "function",
    "function",
    "third",
    "import",
    "another",
    "function",
    "name",
    "think",
    "done",
    "professionally",
    "um",
    "another",
    "function",
    "another",
    "function",
    "go",
    "also",
    "works",
    "allow",
    "usage",
    "uh",
    "wild",
    "card",
    "import",
    "basics",
    "working",
    "custom",
    "modules",
    "python",
    "import",
    "directory",
    "specifying",
    "file",
    "module",
    "structure",
    "always",
    "useful",
    "define",
    "init",
    "py",
    "files",
    "allow",
    "special",
    "type",
    "import",
    "yeah",
    "python",
    "today",
    "video",
    "hope",
    "enjoyed",
    "hope",
    "learned",
    "something",
    "let",
    "know",
    "hitting",
    "like",
    "button",
    "leaving",
    "comment",
    "comment",
    "section",
    "course",
    "forget",
    "subscribe",
    "channel",
    "hit",
    "notification",
    "bell",
    "miss",
    "single",
    "future",
    "video",
    "free",
    "thank",
    "much",
    "watching",
    "see",
    "next",
    "video",
    "bye",
    "thank",
    "music"
  ],
  "keywords": [
    "going",
    "today",
    "video",
    "import",
    "python",
    "also",
    "init",
    "py",
    "files",
    "let",
    "work",
    "multiple",
    "confused",
    "environment",
    "inside",
    "terminal",
    "use",
    "want",
    "code",
    "plus",
    "need",
    "directory",
    "create",
    "run",
    "thing",
    "file",
    "main",
    "functionality",
    "different",
    "example",
    "second",
    "say",
    "um",
    "call",
    "open",
    "gon",
    "na",
    "functions",
    "add",
    "simple",
    "function",
    "sub",
    "like",
    "one",
    "uh",
    "print",
    "two",
    "well",
    "see",
    "without",
    "saying",
    "works",
    "module",
    "actually",
    "know",
    "order",
    "go",
    "dot",
    "course",
    "everything",
    "something",
    "another",
    "third",
    "underscore",
    "allow",
    "fourth",
    "last",
    "think"
  ]
}