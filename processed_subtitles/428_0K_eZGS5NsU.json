{
  "text": "hey everyone welcome back and let's\nwrite some more neat code today so today\nI want to cover everything you need to\nknow about python for coding interviews\nif you're new here a little bit about my\nbackground I started the channel a\ncouple years ago at the beginning of the\npandemic I was unemployed and I made\nsolutions to coding interview questions\nin python and a little over a year after\nthat I eventually got a job at Google\nand I pretty much used python throughout\nall my interviews and I think it was\nreally helpful because python is so much\neasier than most languages it's super\nconcise I've actually never written a\nline of python code at any jobs or\ninternships I've ever had I literally\nlearned python just for coding\ninterviews and it's definitely been\nworth it if you're already familiar with\npython I hope you learned some tips and\ntricks from this video and if you use\nother languages like Java or C plus plus\nI hope by the end of this video you see\nthe benefits and then join the church of\npython I think you'll be able to learn\nit faster than you expect especially if\nyou're already familiar with programming\nand by the way if you're studying for\ncoding interviews check out neco.io it's\na side I created has a bunch of free\nresources to help you prepare and I've\nalso started making courses I just\nfinished up the advanced algorithms\ncourse and I'm going to get started on\nthe system design course for beginners\nso you definitely don't want to miss out\non that okay now let's get started the\nfirst thing you should know about python\nis that it's a dynamically typed\nlanguage so when we declare a variable\nlike n and set it to zero we don't have\nto declare the type at all so now if we\nrun the code in print and you can see\nit's equal to zero but types are\ndetermined at run time so we can\nreassign n to a string now and that's\nperfectly fine because n has no type the\ntype is determined at run time so now we\ncan run the code again and we can see\nthat n was originally a zero and then it\nchanged to a string ABC we can also do\nmultiple assignments but it's a bit\ndifferent than most languages if we have\ntwo variables we put them both on the\nleft hand side and then we have our\nequal sign and then we put the two\nvalues on the right side it's okay to\nhave multiple types in a single line\nline incrementing is a bit different of\ncourse we can increment a very simple\nway like this n is equal to n plus one\nwe can also do the shorthand and plus\nequal to one just like most languages\nbut we can't do plus plus you can see it\neven gives us a syntax error we can't do\nplus plus that's related to the python\ninterpreter but it's not a big deal I\nmean this is one of the few cases where\npython is a bit less concise python also\nhas null but it's called none in Python\nwhich is basically the absence of a\nvalue unlike most languages though we\ncan have a value that's initially a\nnumber or it's supposed to store a\nnumber like four but then we can\nreassign It To None which means null and\nthen we see it is equal to none if\nstatements are pretty straightforward in\nPython at least conceptually but\nsyntactically there's a couple\ndifferences namely that we don't need\nparentheses so if we have an if\nstatement like this we don't need to put\nthe conditional in parentheses and we\ndon't need curly braces to represent\nwhat is the block that corresponds to\nthis conditional we use indentation\nstation for that so you can see here we\nhave a tab that indicates that this code\nbelongs to this statement we have a\ncolon that goes after the conditional\nelse if Works a bit differently we don't\nactually have both keywords else if we\neven shorten that I don't really care\ntoo much for this but I'm guessing it\njust has to do with the python\ninterpreter because we already have two\nkeywords for if and else so we have to\ncreate a new keyword for else if at\nleast that's what I'm guessing while\nparentheses aren't required for\nconditionals in Python they are needed\nif we have multi-line conditionals and\nby the way logic and in most languages\nis the double Ampersand character but in\nPython it's just the keyword and or is\njust the keyword or so not that this is\nshorter but it just makes things a\nlittle bit more readable for example if\nwe have an if statement that looks like\nthis we use the keyword and and we use\nthe keyword or to mean logic and and\nlogic war and since we have a multi-line\nconditional like this these two lines\nare part of the conditional we have to\nput them inside of parentheses otherwise\nif we get a syntax error syntax\npractically while Loops are pretty\nsimilar for example we have a variable n\nequals zero we can create a while loop\nwhere the condition doesn't have to go\nin parentheses the block is followed by\na colon and the code itself is indented\nwith a tab we're printing n so running\nthe code we get to print zero through\nfour four Loops are pretty similar so if\nwe want to do the exact same thing go\nfrom zero through four we create a for\nLoop where our variable I is going to go\nin the range of five that basically\nmeans it's going to start at zero and\nkeep going until it reaches 5 and then\nstop and I is incremented implicitly so\nwe don't have to tell this Loop to\nincrement I I is just going to be\nincremented on every iteration of the\nloop by default so running the code\nyou'll see we get pretty much the exact\nsame thing zero through four so five is\nnot included as the loop execute to\nbetter illustrate the for Loop let's\ntake a look at another example where\nwe're going from two through five so in\nthat case we'd use the same keywords for\nI in range but we'd pass in two values\ninto range we're starting at two and\nwe're going up until six but not\nincluding six so now when we print this\nwe go from two all the way up until five\nand if you want to go in reverse\nstarting at five and going down to two\nit would be similar we'd start at five\nwe'd go up until one but not including\none and we'd pass in a negative one as\nthe third argument because in this case\nwe're decrementing if you don't pass in\na negative one we increment the I but\nwhen you pass in negative one that means\nwe're decrementing the I and we actually\ncould have passed in a negative two here\nas well if we wanted to decrement by two\nevery single time but just decrementing\nthis going from five down to two and you\ncan see we get what we expected I will\nadmit this was one of the annoying\nthings when I first learned python\ncompared to most languages where you can\ndo something like this explicitly\ndeclare the variable explicitly State\nthe condition and explicitly increment\nour decrement this python syntax is\ndifferent definitely a bit trickier but\nI think as you get used to it it's\neasier to type out than this bottom\nstuff that I have here division is also\na bit tricky in Python it's decimal\ndivision by default whereas most\nlanguages use integer division so 5\ndivided by 2 will actually give us 2.5\nwhereas in most languages it'll round\ntowards Zero by default if you want\ninteger division you have to use double\nslash like this so printing this will\nactually round down you can see we get\ntwo as the result but if you caught what\nI just said you have to be careful\nbecause most languages will round\ntowards Zero by default but in Python if\nwe do integer division we're rounding\ndown so you can see negative 3 divided\nby 2 will actually round down to be\nnegative 2 where the decimal value would\nbe negative 1.5 in most languages there\nwould be negative one a workaround for\nthis is to use decimal division but then\nconvert the result to an integer because\nwhen you convert to an integer it will\nround towards zero this is kind of a\nannoying but it's just something you\nhave to do you can see running this will\ngive us a negative one which is what you\nmight want in certain cases though I'll\nmention it's pretty rare to have to need\nto know this I'm just mentioning it in\ncase you run into any issues using the\nmodulo operator is pretty similar to\nmost languages so 10 divided by three\nwe're getting the remainder we would\nexpect a one and that's exactly what we\nget except the issue is once again with\nnegative values just like dividing\nnegative values when we mod negative\nvalues we get unexpected results and\nnegative 10 modded by three well the\nanswer is actually two and this is\ndifferent from most C based languages\nlike Java C plus plus I think even\nJavaScript so if you want to be\nconsistent with those other languages\nyou can import math and then do F mods\nusing this will give us negative one\nwhich is what you might have expected a\nfew more useful math helpers we have\nfloor which will explicitly round down\nwe can also do the opposite which is the\nceiling so three divided by two rounding\nup if you need to take the square root\nthere's a Helper and if you need to take\nthe power of a variable raised to\nanother so 2 to the power of 3 would be\nthis if you ever need a maximum integer\nyou can use float infinity and if you\never need a minimum integer you can use\nfloat negative infinity and part of the\nreason that they come up is because\npython numbers are infinite so they\nactually never overflow so if we have a\nnumber like this 2 to the power of 200\nwhich is a very large number as you can\nsee on the right after we print it it's\nso large that we can't even print it\nit's 60 additional digits but even this\nlarge integer is still less than\ninfinity checking if this number is less\nthan infinity we get true arrays which\nare called lists in Python are probably\nthe most common data structure you're\ngoing to use next to Hash Maps so an\narray can be declared just like this but\ninitializing it is pretty\nstraightforward you just put the values\ninside of some brackets and printing it\nis just as simple arrays in Python are\nDynamic arrays by Define fault so just\nlike in most languages Dynamic arrays\ncan be used as Stacks so you can push to\nthe array AKA append and you can also\npop from the array which will pop from\nthe end of course so after we push a\nfour and we push a five we can print\nthat and then after we pop the last\nvalue you can see that we popped the\nfive because this is technically an\narray and not a stack we can actually\ninsert into the middle so at index one\nwe can insert a value seven printing\nthat you can see we indeed inserted a 7\ninto the middle of the array but unlike\npushing and popping from an array\ninserting into the middle is a big O of\nend time operation but it's not a big O\nof end time operation to index an array\nso at index 0 we can read the value and\nwe can also reassign the value to zero\nin this case and we can reassign the\nvalue at index three and these\noperations are constant time operations\nto initialize an array of variable size\nlet's say we wanted an array of size\nfive and we wanted all values to be 1\none we could do it pretty easily it\nmight be kind of weird to use the\nmultiplication operator here but\nsyntactically it's pretty easy printing\nthe array and the length of the array\nyou can see we do get what we expect but\nbe careful when indexing an array\nespecially when you're using negative\nvalues because negative one is actually\nnot out of bounds in Python negative one\nwill actually read the last value as you\ncan see on the right and to read the\nsecond to last value you can use\nnegative two now in my opinion this\nisn't super useful but sometimes it can\nbe when you want to quickly read the\nlast value getting sub lists AKA slicing\nan array is one of the most useful\nfeatures of python so here we're taking\nthe values of the array from index 1 to\nindex 3 but not including index three\njust like with for loops and then\nprinting those values so we would expect\ntwo and three and that's what we get and\nwe could also go from index 0 to 4 which\nis pretty much the entire array and\nthat's valid as well unpacking is also a\nsuper useful feature basically we can\ntake all the individual elements of an\narray and assign them to variables in\nthis case ABC this can be super helpful\nwhen you want to go through a list of\npairs for example be careful though\nbecause you do have to make sure that\nthe number of variables on the left hand\nside does match the number that you're\nexpecting from the array we can Loop\nthrough arrays in many different ways\nusing the simple for Loop syntax we\ntalked about earlier we can take the\nlength of the array and then iterate\nthat many times using an index I and\nthen printing the individual value an\neasier way to accomplish the exact same\nthing is without using an index so we\ncan actually go through every value in\nnums and then just print that individual\nvalue if for some reason you needed both\nthe index and the value you could use\nthe first for loop I have shown up here\nbut another way to do it is to use the\nenumerate function in Python so a\nnumerate will actually give you the\nindex which will be the first value\nthat's unpacked and the second value\nthat's unpacked will be the number and\nthen we can print both of those if for\nsome reason we needed both of them and\nall three of these Loops execute as you\nwould expect now if we want to iterate\nthrough multiple arrays simultaneously\nwe can do that with unpacking and a\nhelper function called Zip Zip will\nbasically take both of these arrays and\ncombine them into an array of pairs and\nthen we can unpack those pair of values\nwhich are values from nums 1 and nums\ntwo we get pretty much what we expect\nreversing an array is as simple as\ncalling the reverse method on that array\nso one two three becomes three two one\nsorting an array is just as easy taking\nthis array we can call sort on it so\nthis will sort it in ascending order by\ndefault if we want to sort it in reverse\norder we just pass in the parameter\nreverse equals true and then the array\nwill be sorted in descending order we\ncan also sort a list of strings by\ndefault they will be sorted based on\nalphabetical order as you can see on the\nright but if we want to implement a\ncustom sort for example if we want to\nsort based on the length of each string\nthen we can do that by passing in a\nLambda function so in this case the key\nis equal to Lambda which is basically a\nfunction without a name and we're going\nto take every single value from the\narray call it X and then return from\nthat the length of X and this is the key\nthat's going to be used to sort the\nstring so each string is going to be\nmapped to its length and then we're\ngoing to sort those strings based on\ntheir length so by default it's going to\nbe in ascending order as we can confirm\non the right another sort of advanced\nway to initialize lists is using list\ncomprehension so if we wanted to go\nthrough every value in range 5 and to\ncall that value I and we want to add\nthat value to this array this is the\nshorthand so we're iterating for I in\nrange 5 and then I is going here so\nwe're taking that I value and adding it\nto the array and printing it you can see\nthat we indeed have zero through four\nnow maybe we want to go through every\nvalue in that range but we want to take\nI and add I plus I to the result so for\nevery index we want 2 times that index\nadded to the result you can see we can\nalso do that pretty easily if you want\nto do something similar for a 2d list\nit's also pretty easy but maybe a bit\ndifferent than you would expect the\neasiest way to do it is the shorthand\nthat we talked about earlier where we\ntake an array with zero and then\nmultiply it by four this will give us an\narray of size 4 with all zeros and we\nwant this array to be added to the outer\narray for time so we have an inner loop\nfor I in range four we're not even using\nthe variable I here but this will build\na 4x4 grid of all zeros you might be\nthinking isn't there an easier way to do\nthat well actually not you might be\nthinking can we just do this create an\narray of size 4 and then multiply that\nby four well technically this will work\nbut each of the four rows of this array\nare going to be the same so if we modify\none of the rows we're going to be\nmodifying all of the other rows we're\nnot actually creating four unique rows\nin this case it's a common thing that\ncan throw people off if you have more\nquestions about this feel free to ask in\nthe comments it's something that tripped\nme up a lot when I first started strings\nare pretty similar to arrays so we can\ndeclare one with double quotes you can\nalso use single quotes if you want and\nwe can slice them the same way we do\nwith arrays and printing it works the\nsame but a key point is that they are\nimmutable that means we can't modify\nthis string that means we can't reassign\nthe character at index zero we can\nhowever update the string but updating\nit will actually create a new string so\nadding def to the end of the string will\ncreate a new string so basically any\ntime you modify a string it's considered\nan end time operation strings can be\nconverted into integers and then those\nintegers can be added integers can also\nbe converted into Strings and then those\nstrings can be added together so when\nyou add two integers together we get an\ninteger as the result adding two strings\ntogether appends those strings together\nso we get one two three one two three if\nfor some reason you need the ASCII value\nof a character you can do that with the\nORD function so printing this you can\nsee we get 97 is the ASCII value of\nlowercase a 98 is the ASCII value of\nlowercase b you can also join a list of\nstrings together with a delimiter in\nthis example we have three strings and\nwe're joining them with the empty string\ndelimiter here so we're basically just\nappending these three strings together\nwe could also have had a delimiter maybe\na space in between all of them and\nprinting the result we get all three\nstrings appended cues in Python are\ndouble ended cues by default you can\nimport them adding values to the right\nside is as easy as appending to the\nqueue so at this point our queue isn't\nmuch different from a stack but the\nbenefit is that we can actually pop from\nthe left of the queue and we can do this\noperation in constant time unlike with a\nstack as you can confirm on the right\nsince it's double ended we can also add\nvalues to the left of the queue so the\none that we popped we can add back to\nthe left side and also we can choose to\npop from the right side if we want to so\nrunning this we can confirm that the one\nis added back and then we pop the two\nafter that Ash sets are really useful\nbecause we can search them in constant\ntime and we can insert values also in\nconstant time of course there won't be\nany duplicates in our set of course\nunlike a list there can't be any\nduplicates in a hash set but we can just\nas easily get the length of the hash set\nto know how many elements have been\ninserted we can also search the hash set\nwithout a function we can use the in\noperator so if we want to know if one\nexists in the hashtag same thing with\ntwo same thing with three which we know\ndoes not exist in the hash set as we can\nconfirm we can remove values also in\nconstant time time and confirm that the\nvalue has indeed been removed to\ninitialize a hash set with a bunch of\nvalues we can actually pass in a list\nbut just like with lists we can also do\nset comprehension and manually\ninitialize it with a loop inside of the\nhash set so here we're going through\nevery value in the range of I and taking\nthat value I adding it to the hash set\nand initializing it this way is\nidentical hashmaps are probably the\nsingle most common data structure you're\ngoing to be used and this is what we\nwere saving those curly braces for to\ninsert we simply take some key value in\nthis case a string and assign it to\nanother value in this case a number 88\nand we can add a bunch more just like\nwith hash sets we can't have duplicate\nkeys inside of the hash map printing it\nis just as simple taking the length will\ngive us the number of keys that exist in\nour hash map we can modify the value\nthat's mapped to a key so we can change\nAlice from being 88 to 80. we can also\nsearch if a key exists in a hashmap in\nconstant time and we can also remove\nthat key which will also remove the\nvalue as we can confirm on the right to\ninitialize a hashmap we can add pairs\ninside of the curly braces where each\npair is separated by a comma and the key\ngoes on the left side of the colon and\nthe value goes on the right side this is\nthe same as manually inserting values\ninto the hash map but if you want to get\neven more fancy you can use dict\ncomprehension hash maps are basically\ncalled dictionaries in Python and the\nsyntax is pretty similar but in this\ncase if our looping I in the range of 3\nwe're going to have two values I in this\ncase is the key then a colon and then\nthe value goes after that in this case\nwe're mapping I to 2 times I this is\npretty powerful and I find that I use it\nmost frequently when I'm doing graph\nproblems and trying to build like an\nadjacency list looping through a map is\npretty interesting because there's many\nways to do it by default we iterate\nthrough every single key and then we can\nyou know print that key and also print\nthe value that that key maps to but also\nwe can directly iterate through the list\nof values of that hash map if we we\ndon't even need the key lastly using\nunpacking we can actually go through the\nitems of that map which will give us the\nkey and the value this is pretty similar\nto the first Loop that we have I guess\nit's a bit more concise to write it this\nway python also has tuples which are\npretty similar to arrays except to\ninitialize them we use parentheses\nrather than brackets and they are\nimmutable so while we can index them we\ncan't modify them so this won't work\nyou'll mainly be using tuples as keys\nfor a hash map or a hash set so in this\ncase we're mapping a pair of values one\ntwo to three so this Tuple is basically\nour hashable key we can do the same\nthing for hash sets of course and then\nwe can use that Tuple to search the hash\nset the reason we do this is because\nlists are not hashable and can't be keys\nfor hash sets or hash Maps so this here\nwill not work heaps are another really\ncommon data structure to find the Min\nand Max of a set of values frequently\nunder the hood in Python they're\nimplemented with array days of course so\nactually to create an empty Heap we just\ncreate an empty list and to push values\nto that Heap we use Heap Q dot heat push\nto that Min Heap the value three by\ndefault heaps in Python are Min heaps so\nwe push a few more values and then to\nget the minimum value it'll always be at\nindex 0. that's just how heaps are\nimplemented to Loop through a heap while\nthe length of the Heap is non-zero we\ncan also pop values from the Heap with\nHeap Q dot heat pop from that Min heat\nand then print the corresponding value\nthat we just popped since it's a Min\nHeap we'll see the values are printed\nfrom smallest to largest while python\ndoesn't have Max heaps by default the\nworkaround is basically to multiply each\nvalue that we push by negative one and\nthen after we pop that value we also\nmultiply it by negative one to negate\nthe original negative one so if we\nwanted to implement a Max Heap and push\nthe value 3 we would actually push\nnegative three and if we wanted to push\ntwo we'd push negative two same thing\nwith four again the max will always be\nat index 0 but we know we have to\nmultiply it by negative one to negate\nthe original negative one by popping\neach value and multiplying it by\nnegative one we can confirm that the\nvalues are printed from greatest to\nsmallest now if you already have the\ninitial set of values that you want to\nbuild the Heap from you can do it in\nlinear Time by calling build Heap or in\nPython it's called heapify so we can\ncall Heap Q dot heapify this array and\nwhile that array is not empty we're\ngoing to keep printing the values and we\ncan confirm that they're printed from\nsmallest to largest functions in Python\nare pretty straightforward and concisely\nuse the def keyword we name the function\nand then we pass in some parameters in\nthis case n and M just like with\nconditionals and Loops we use a colon\nafter the Declaration of the function\nand the body of the function is going to\nbe indented so we're returning the\nmultiplication of those two values and\nprinting the result one functionality I\nuse a lot in coding interviews is nested\nfunctions this can be really helpful in\nrecursive problems because if you have\nan outer function that takes in a couple\nparameters and you also declare some\nvalues in that outer function the inner\nfunction will actually have access to\nall of those variables by default so\nthen if we called the inner function we\ndon't even have to pass in a b and c now\nthis is a pretty simple example but if\nyou've watched any of my graph videos\nyou know how nice this can be in keeping\nour code concise one thing that trips a\nlot of people up with nested functions\nis that you can modify objects but you\ncan't reassign values unless you use the\nnon-local keyword so if we have a\nfunction that's going to double every\nvalue inside of an array and also double\nthis value itself this is not an array\nwe can have a helper function it'll have\naccess to both of those outer variables\nwe can modify the array pretty easily by\ngoing through each value in the array\nand then doubling it this works and will\nupdate the original array but if we\ndoubled the value it'll only double the\nvalue in the scope of the helper\nfunction if you want to update the value\noutside of the helper scope you'll have\nto declare it as a non-local value and\ndoing this and and then modifying the\nvalue will modify the original values\nand then in the outer function we can\ncall the helper function without passing\nin the variables and then print the\nvariables not actually called the double\nfunction we can create some variables\ncall it run the code and we can see that\neach variable was doubled again this is\na trivial example but if you're familiar\nwith my videos you know that this can be\nhelpful classes are also pretty concise\nbut a bit more limited than other\nlanguages a Constructor is basically\ndouble underscore init double underscore\nafter that that's kind of the name of\nthe Constructor in Python self is passed\ninto every method of a class it's\nbasically like the this keyword in other\nlanguages in this case our Constructor\nis maybe taking a list of numbers to\ncreate member variables we also use the\nself keyword so this is creating a\nmember variable called nums and\nassigning it to the nums that were\npassed in as a parameter to the\nConstructor we can also create a member\nvariable for the size of nums by taking\nthe length of the parameter to create a\nmethod for this class class for example\nget length we don't want to pass in any\nparameters to this but we have to pass\nin the self keyword always that'll give\nus access to Our member variable which\nwe're going to return self.size if we\nwant to call another member variable\nfrom a member variable in this case we\nwant to call get length from this other\nfunction get double length we can do\nthat again with the self keyword this is\na pretty useless example but I'm mainly\ntrying to explain the syntax and the\nstructure of classes in Python now this\nis more or less everything I've needed\nto know for coding interviews it's\nsurprisingly not a lot and you don't\nhave to memorize any of this as you\nsolve coding problems and as you prepare\nfor interviews you might have to look up\nthe syntax or how exactly do I use heaps\nhow exactly do you use double ended cues\nthings like that it's perfectly okay but\nafter you practice enough most of this\nstuff is pretty easy to get down it\ndoesn't even feel like you're writing\ncode after a while python is a pretty\nbig reason I was able to get a job at\nGoogle in my opinion now if you're\npreparing for coding interviews check\nout neco.io there's is a ton of free\nresources to help you prepare each\npractice problem listed has a thorough\nvideo explanation and we have code\nsupport for python C plus plus Java and\nJavaScript if you're new to data\nstructures and algorithms I've got some\nreally helpful courses not only for\nbeginners but also for advanced users\nthank you so much for watching and\nhopefully I'll see you pretty soon\n",
  "words": [
    "hey",
    "everyone",
    "welcome",
    "back",
    "let",
    "write",
    "neat",
    "code",
    "today",
    "today",
    "want",
    "cover",
    "everything",
    "need",
    "know",
    "python",
    "coding",
    "interviews",
    "new",
    "little",
    "bit",
    "background",
    "started",
    "channel",
    "couple",
    "years",
    "ago",
    "beginning",
    "pandemic",
    "unemployed",
    "made",
    "solutions",
    "coding",
    "interview",
    "questions",
    "python",
    "little",
    "year",
    "eventually",
    "got",
    "job",
    "google",
    "pretty",
    "much",
    "used",
    "python",
    "throughout",
    "interviews",
    "think",
    "really",
    "helpful",
    "python",
    "much",
    "easier",
    "languages",
    "super",
    "concise",
    "actually",
    "never",
    "written",
    "line",
    "python",
    "code",
    "jobs",
    "internships",
    "ever",
    "literally",
    "learned",
    "python",
    "coding",
    "interviews",
    "definitely",
    "worth",
    "already",
    "familiar",
    "python",
    "hope",
    "learned",
    "tips",
    "tricks",
    "video",
    "use",
    "languages",
    "like",
    "java",
    "c",
    "plus",
    "plus",
    "hope",
    "end",
    "video",
    "see",
    "benefits",
    "join",
    "church",
    "python",
    "think",
    "able",
    "learn",
    "faster",
    "expect",
    "especially",
    "already",
    "familiar",
    "programming",
    "way",
    "studying",
    "coding",
    "interviews",
    "check",
    "side",
    "created",
    "bunch",
    "free",
    "resources",
    "help",
    "prepare",
    "also",
    "started",
    "making",
    "courses",
    "finished",
    "advanced",
    "algorithms",
    "course",
    "going",
    "get",
    "started",
    "system",
    "design",
    "course",
    "beginners",
    "definitely",
    "want",
    "miss",
    "okay",
    "let",
    "get",
    "started",
    "first",
    "thing",
    "know",
    "python",
    "dynamically",
    "typed",
    "language",
    "declare",
    "variable",
    "like",
    "n",
    "set",
    "zero",
    "declare",
    "type",
    "run",
    "code",
    "print",
    "see",
    "equal",
    "zero",
    "types",
    "determined",
    "run",
    "time",
    "reassign",
    "n",
    "string",
    "perfectly",
    "fine",
    "n",
    "type",
    "type",
    "determined",
    "run",
    "time",
    "run",
    "code",
    "see",
    "n",
    "originally",
    "zero",
    "changed",
    "string",
    "abc",
    "also",
    "multiple",
    "assignments",
    "bit",
    "different",
    "languages",
    "two",
    "variables",
    "put",
    "left",
    "hand",
    "side",
    "equal",
    "sign",
    "put",
    "two",
    "values",
    "right",
    "side",
    "okay",
    "multiple",
    "types",
    "single",
    "line",
    "line",
    "incrementing",
    "bit",
    "different",
    "course",
    "increment",
    "simple",
    "way",
    "like",
    "n",
    "equal",
    "n",
    "plus",
    "one",
    "also",
    "shorthand",
    "plus",
    "equal",
    "one",
    "like",
    "languages",
    "ca",
    "plus",
    "plus",
    "see",
    "even",
    "gives",
    "us",
    "syntax",
    "error",
    "ca",
    "plus",
    "plus",
    "related",
    "python",
    "interpreter",
    "big",
    "deal",
    "mean",
    "one",
    "cases",
    "python",
    "bit",
    "less",
    "concise",
    "python",
    "also",
    "null",
    "called",
    "none",
    "python",
    "basically",
    "absence",
    "value",
    "unlike",
    "languages",
    "though",
    "value",
    "initially",
    "number",
    "supposed",
    "store",
    "number",
    "like",
    "four",
    "reassign",
    "none",
    "means",
    "null",
    "see",
    "equal",
    "none",
    "statements",
    "pretty",
    "straightforward",
    "python",
    "least",
    "conceptually",
    "syntactically",
    "couple",
    "differences",
    "namely",
    "need",
    "parentheses",
    "statement",
    "like",
    "need",
    "put",
    "conditional",
    "parentheses",
    "need",
    "curly",
    "braces",
    "represent",
    "block",
    "corresponds",
    "conditional",
    "use",
    "indentation",
    "station",
    "see",
    "tab",
    "indicates",
    "code",
    "belongs",
    "statement",
    "colon",
    "goes",
    "conditional",
    "else",
    "works",
    "bit",
    "differently",
    "actually",
    "keywords",
    "else",
    "even",
    "shorten",
    "really",
    "care",
    "much",
    "guessing",
    "python",
    "interpreter",
    "already",
    "two",
    "keywords",
    "else",
    "create",
    "new",
    "keyword",
    "else",
    "least",
    "guessing",
    "parentheses",
    "required",
    "conditionals",
    "python",
    "needed",
    "conditionals",
    "way",
    "logic",
    "languages",
    "double",
    "ampersand",
    "character",
    "python",
    "keyword",
    "keyword",
    "shorter",
    "makes",
    "things",
    "little",
    "bit",
    "readable",
    "example",
    "statement",
    "looks",
    "like",
    "use",
    "keyword",
    "use",
    "keyword",
    "mean",
    "logic",
    "logic",
    "war",
    "since",
    "conditional",
    "like",
    "two",
    "lines",
    "part",
    "conditional",
    "put",
    "inside",
    "parentheses",
    "otherwise",
    "get",
    "syntax",
    "error",
    "syntax",
    "practically",
    "loops",
    "pretty",
    "similar",
    "example",
    "variable",
    "n",
    "equals",
    "zero",
    "create",
    "loop",
    "condition",
    "go",
    "parentheses",
    "block",
    "followed",
    "colon",
    "code",
    "indented",
    "tab",
    "printing",
    "n",
    "running",
    "code",
    "get",
    "print",
    "zero",
    "four",
    "four",
    "loops",
    "pretty",
    "similar",
    "want",
    "exact",
    "thing",
    "go",
    "zero",
    "four",
    "create",
    "loop",
    "variable",
    "going",
    "go",
    "range",
    "five",
    "basically",
    "means",
    "going",
    "start",
    "zero",
    "keep",
    "going",
    "reaches",
    "5",
    "stop",
    "incremented",
    "implicitly",
    "tell",
    "loop",
    "increment",
    "going",
    "incremented",
    "every",
    "iteration",
    "loop",
    "default",
    "running",
    "code",
    "see",
    "get",
    "pretty",
    "much",
    "exact",
    "thing",
    "zero",
    "four",
    "five",
    "included",
    "loop",
    "execute",
    "better",
    "illustrate",
    "loop",
    "let",
    "take",
    "look",
    "another",
    "example",
    "going",
    "two",
    "five",
    "case",
    "use",
    "keywords",
    "range",
    "pass",
    "two",
    "values",
    "range",
    "starting",
    "two",
    "going",
    "six",
    "including",
    "six",
    "print",
    "go",
    "two",
    "way",
    "five",
    "want",
    "go",
    "reverse",
    "starting",
    "five",
    "going",
    "two",
    "would",
    "similar",
    "start",
    "five",
    "go",
    "one",
    "including",
    "one",
    "pass",
    "negative",
    "one",
    "third",
    "argument",
    "case",
    "decrementing",
    "pass",
    "negative",
    "one",
    "increment",
    "pass",
    "negative",
    "one",
    "means",
    "decrementing",
    "actually",
    "could",
    "passed",
    "negative",
    "two",
    "well",
    "wanted",
    "decrement",
    "two",
    "every",
    "single",
    "time",
    "decrementing",
    "going",
    "five",
    "two",
    "see",
    "get",
    "expected",
    "admit",
    "one",
    "annoying",
    "things",
    "first",
    "learned",
    "python",
    "compared",
    "languages",
    "something",
    "like",
    "explicitly",
    "declare",
    "variable",
    "explicitly",
    "state",
    "condition",
    "explicitly",
    "increment",
    "decrement",
    "python",
    "syntax",
    "different",
    "definitely",
    "bit",
    "trickier",
    "think",
    "get",
    "used",
    "easier",
    "type",
    "bottom",
    "stuff",
    "division",
    "also",
    "bit",
    "tricky",
    "python",
    "decimal",
    "division",
    "default",
    "whereas",
    "languages",
    "use",
    "integer",
    "division",
    "5",
    "divided",
    "2",
    "actually",
    "give",
    "us",
    "whereas",
    "languages",
    "round",
    "towards",
    "zero",
    "default",
    "want",
    "integer",
    "division",
    "use",
    "double",
    "slash",
    "like",
    "printing",
    "actually",
    "round",
    "see",
    "get",
    "two",
    "result",
    "caught",
    "said",
    "careful",
    "languages",
    "round",
    "towards",
    "zero",
    "default",
    "python",
    "integer",
    "division",
    "rounding",
    "see",
    "negative",
    "3",
    "divided",
    "2",
    "actually",
    "round",
    "negative",
    "2",
    "decimal",
    "value",
    "would",
    "negative",
    "languages",
    "would",
    "negative",
    "one",
    "workaround",
    "use",
    "decimal",
    "division",
    "convert",
    "result",
    "integer",
    "convert",
    "integer",
    "round",
    "towards",
    "zero",
    "kind",
    "annoying",
    "something",
    "see",
    "running",
    "give",
    "us",
    "negative",
    "one",
    "might",
    "want",
    "certain",
    "cases",
    "though",
    "mention",
    "pretty",
    "rare",
    "need",
    "know",
    "mentioning",
    "case",
    "run",
    "issues",
    "using",
    "modulo",
    "operator",
    "pretty",
    "similar",
    "languages",
    "10",
    "divided",
    "three",
    "getting",
    "remainder",
    "would",
    "expect",
    "one",
    "exactly",
    "get",
    "except",
    "issue",
    "negative",
    "values",
    "like",
    "dividing",
    "negative",
    "values",
    "mod",
    "negative",
    "values",
    "get",
    "unexpected",
    "results",
    "negative",
    "10",
    "modded",
    "three",
    "well",
    "answer",
    "actually",
    "two",
    "different",
    "c",
    "based",
    "languages",
    "like",
    "java",
    "c",
    "plus",
    "plus",
    "think",
    "even",
    "javascript",
    "want",
    "consistent",
    "languages",
    "import",
    "math",
    "f",
    "mods",
    "using",
    "give",
    "us",
    "negative",
    "one",
    "might",
    "expected",
    "useful",
    "math",
    "helpers",
    "floor",
    "explicitly",
    "round",
    "also",
    "opposite",
    "ceiling",
    "three",
    "divided",
    "two",
    "rounding",
    "need",
    "take",
    "square",
    "root",
    "helper",
    "need",
    "take",
    "power",
    "variable",
    "raised",
    "another",
    "2",
    "power",
    "3",
    "would",
    "ever",
    "need",
    "maximum",
    "integer",
    "use",
    "float",
    "infinity",
    "ever",
    "need",
    "minimum",
    "integer",
    "use",
    "float",
    "negative",
    "infinity",
    "part",
    "reason",
    "come",
    "python",
    "numbers",
    "infinite",
    "actually",
    "never",
    "overflow",
    "number",
    "like",
    "2",
    "power",
    "200",
    "large",
    "number",
    "see",
    "right",
    "print",
    "large",
    "ca",
    "even",
    "print",
    "60",
    "additional",
    "digits",
    "even",
    "large",
    "integer",
    "still",
    "less",
    "infinity",
    "checking",
    "number",
    "less",
    "infinity",
    "get",
    "true",
    "arrays",
    "called",
    "lists",
    "python",
    "probably",
    "common",
    "data",
    "structure",
    "going",
    "use",
    "next",
    "hash",
    "maps",
    "array",
    "declared",
    "like",
    "initializing",
    "pretty",
    "straightforward",
    "put",
    "values",
    "inside",
    "brackets",
    "printing",
    "simple",
    "arrays",
    "python",
    "dynamic",
    "arrays",
    "define",
    "fault",
    "like",
    "languages",
    "dynamic",
    "arrays",
    "used",
    "stacks",
    "push",
    "array",
    "aka",
    "append",
    "also",
    "pop",
    "array",
    "pop",
    "end",
    "course",
    "push",
    "four",
    "push",
    "five",
    "print",
    "pop",
    "last",
    "value",
    "see",
    "popped",
    "five",
    "technically",
    "array",
    "stack",
    "actually",
    "insert",
    "middle",
    "index",
    "one",
    "insert",
    "value",
    "seven",
    "printing",
    "see",
    "indeed",
    "inserted",
    "7",
    "middle",
    "array",
    "unlike",
    "pushing",
    "popping",
    "array",
    "inserting",
    "middle",
    "big",
    "end",
    "time",
    "operation",
    "big",
    "end",
    "time",
    "operation",
    "index",
    "array",
    "index",
    "0",
    "read",
    "value",
    "also",
    "reassign",
    "value",
    "zero",
    "case",
    "reassign",
    "value",
    "index",
    "three",
    "operations",
    "constant",
    "time",
    "operations",
    "initialize",
    "array",
    "variable",
    "size",
    "let",
    "say",
    "wanted",
    "array",
    "size",
    "five",
    "wanted",
    "values",
    "1",
    "one",
    "could",
    "pretty",
    "easily",
    "might",
    "kind",
    "weird",
    "use",
    "multiplication",
    "operator",
    "syntactically",
    "pretty",
    "easy",
    "printing",
    "array",
    "length",
    "array",
    "see",
    "get",
    "expect",
    "careful",
    "indexing",
    "array",
    "especially",
    "using",
    "negative",
    "values",
    "negative",
    "one",
    "actually",
    "bounds",
    "python",
    "negative",
    "one",
    "actually",
    "read",
    "last",
    "value",
    "see",
    "right",
    "read",
    "second",
    "last",
    "value",
    "use",
    "negative",
    "two",
    "opinion",
    "super",
    "useful",
    "sometimes",
    "want",
    "quickly",
    "read",
    "last",
    "value",
    "getting",
    "sub",
    "lists",
    "aka",
    "slicing",
    "array",
    "one",
    "useful",
    "features",
    "python",
    "taking",
    "values",
    "array",
    "index",
    "1",
    "index",
    "3",
    "including",
    "index",
    "three",
    "like",
    "loops",
    "printing",
    "values",
    "would",
    "expect",
    "two",
    "three",
    "get",
    "could",
    "also",
    "go",
    "index",
    "0",
    "4",
    "pretty",
    "much",
    "entire",
    "array",
    "valid",
    "well",
    "unpacking",
    "also",
    "super",
    "useful",
    "feature",
    "basically",
    "take",
    "individual",
    "elements",
    "array",
    "assign",
    "variables",
    "case",
    "abc",
    "super",
    "helpful",
    "want",
    "go",
    "list",
    "pairs",
    "example",
    "careful",
    "though",
    "make",
    "sure",
    "number",
    "variables",
    "left",
    "hand",
    "side",
    "match",
    "number",
    "expecting",
    "array",
    "loop",
    "arrays",
    "many",
    "different",
    "ways",
    "using",
    "simple",
    "loop",
    "syntax",
    "talked",
    "earlier",
    "take",
    "length",
    "array",
    "iterate",
    "many",
    "times",
    "using",
    "index",
    "printing",
    "individual",
    "value",
    "easier",
    "way",
    "accomplish",
    "exact",
    "thing",
    "without",
    "using",
    "index",
    "actually",
    "go",
    "every",
    "value",
    "nums",
    "print",
    "individual",
    "value",
    "reason",
    "needed",
    "index",
    "value",
    "could",
    "use",
    "first",
    "loop",
    "shown",
    "another",
    "way",
    "use",
    "enumerate",
    "function",
    "python",
    "numerate",
    "actually",
    "give",
    "index",
    "first",
    "value",
    "unpacked",
    "second",
    "value",
    "unpacked",
    "number",
    "print",
    "reason",
    "needed",
    "three",
    "loops",
    "execute",
    "would",
    "expect",
    "want",
    "iterate",
    "multiple",
    "arrays",
    "simultaneously",
    "unpacking",
    "helper",
    "function",
    "called",
    "zip",
    "zip",
    "basically",
    "take",
    "arrays",
    "combine",
    "array",
    "pairs",
    "unpack",
    "pair",
    "values",
    "values",
    "nums",
    "1",
    "nums",
    "two",
    "get",
    "pretty",
    "much",
    "expect",
    "reversing",
    "array",
    "simple",
    "calling",
    "reverse",
    "method",
    "array",
    "one",
    "two",
    "three",
    "becomes",
    "three",
    "two",
    "one",
    "sorting",
    "array",
    "easy",
    "taking",
    "array",
    "call",
    "sort",
    "sort",
    "ascending",
    "order",
    "default",
    "want",
    "sort",
    "reverse",
    "order",
    "pass",
    "parameter",
    "reverse",
    "equals",
    "true",
    "array",
    "sorted",
    "descending",
    "order",
    "also",
    "sort",
    "list",
    "strings",
    "default",
    "sorted",
    "based",
    "alphabetical",
    "order",
    "see",
    "right",
    "want",
    "implement",
    "custom",
    "sort",
    "example",
    "want",
    "sort",
    "based",
    "length",
    "string",
    "passing",
    "lambda",
    "function",
    "case",
    "key",
    "equal",
    "lambda",
    "basically",
    "function",
    "without",
    "name",
    "going",
    "take",
    "every",
    "single",
    "value",
    "array",
    "call",
    "x",
    "return",
    "length",
    "x",
    "key",
    "going",
    "used",
    "sort",
    "string",
    "string",
    "going",
    "mapped",
    "length",
    "going",
    "sort",
    "strings",
    "based",
    "length",
    "default",
    "going",
    "ascending",
    "order",
    "confirm",
    "right",
    "another",
    "sort",
    "advanced",
    "way",
    "initialize",
    "lists",
    "using",
    "list",
    "comprehension",
    "wanted",
    "go",
    "every",
    "value",
    "range",
    "5",
    "call",
    "value",
    "want",
    "add",
    "value",
    "array",
    "shorthand",
    "iterating",
    "range",
    "5",
    "going",
    "taking",
    "value",
    "adding",
    "array",
    "printing",
    "see",
    "indeed",
    "zero",
    "four",
    "maybe",
    "want",
    "go",
    "every",
    "value",
    "range",
    "want",
    "take",
    "add",
    "plus",
    "result",
    "every",
    "index",
    "want",
    "2",
    "times",
    "index",
    "added",
    "result",
    "see",
    "also",
    "pretty",
    "easily",
    "want",
    "something",
    "similar",
    "2d",
    "list",
    "also",
    "pretty",
    "easy",
    "maybe",
    "bit",
    "different",
    "would",
    "expect",
    "easiest",
    "way",
    "shorthand",
    "talked",
    "earlier",
    "take",
    "array",
    "zero",
    "multiply",
    "four",
    "give",
    "us",
    "array",
    "size",
    "4",
    "zeros",
    "want",
    "array",
    "added",
    "outer",
    "array",
    "time",
    "inner",
    "loop",
    "range",
    "four",
    "even",
    "using",
    "variable",
    "build",
    "4x4",
    "grid",
    "zeros",
    "might",
    "thinking",
    "easier",
    "way",
    "well",
    "actually",
    "might",
    "thinking",
    "create",
    "array",
    "size",
    "4",
    "multiply",
    "four",
    "well",
    "technically",
    "work",
    "four",
    "rows",
    "array",
    "going",
    "modify",
    "one",
    "rows",
    "going",
    "modifying",
    "rows",
    "actually",
    "creating",
    "four",
    "unique",
    "rows",
    "case",
    "common",
    "thing",
    "throw",
    "people",
    "questions",
    "feel",
    "free",
    "ask",
    "comments",
    "something",
    "tripped",
    "lot",
    "first",
    "started",
    "strings",
    "pretty",
    "similar",
    "arrays",
    "declare",
    "one",
    "double",
    "quotes",
    "also",
    "use",
    "single",
    "quotes",
    "want",
    "slice",
    "way",
    "arrays",
    "printing",
    "works",
    "key",
    "point",
    "immutable",
    "means",
    "ca",
    "modify",
    "string",
    "means",
    "ca",
    "reassign",
    "character",
    "index",
    "zero",
    "however",
    "update",
    "string",
    "updating",
    "actually",
    "create",
    "new",
    "string",
    "adding",
    "def",
    "end",
    "string",
    "create",
    "new",
    "string",
    "basically",
    "time",
    "modify",
    "string",
    "considered",
    "end",
    "time",
    "operation",
    "strings",
    "converted",
    "integers",
    "integers",
    "added",
    "integers",
    "also",
    "converted",
    "strings",
    "strings",
    "added",
    "together",
    "add",
    "two",
    "integers",
    "together",
    "get",
    "integer",
    "result",
    "adding",
    "two",
    "strings",
    "together",
    "appends",
    "strings",
    "together",
    "get",
    "one",
    "two",
    "three",
    "one",
    "two",
    "three",
    "reason",
    "need",
    "ascii",
    "value",
    "character",
    "ord",
    "function",
    "printing",
    "see",
    "get",
    "97",
    "ascii",
    "value",
    "lowercase",
    "98",
    "ascii",
    "value",
    "lowercase",
    "b",
    "also",
    "join",
    "list",
    "strings",
    "together",
    "delimiter",
    "example",
    "three",
    "strings",
    "joining",
    "empty",
    "string",
    "delimiter",
    "basically",
    "appending",
    "three",
    "strings",
    "together",
    "could",
    "also",
    "delimiter",
    "maybe",
    "space",
    "printing",
    "result",
    "get",
    "three",
    "strings",
    "appended",
    "cues",
    "python",
    "double",
    "ended",
    "cues",
    "default",
    "import",
    "adding",
    "values",
    "right",
    "side",
    "easy",
    "appending",
    "queue",
    "point",
    "queue",
    "much",
    "different",
    "stack",
    "benefit",
    "actually",
    "pop",
    "left",
    "queue",
    "operation",
    "constant",
    "time",
    "unlike",
    "stack",
    "confirm",
    "right",
    "since",
    "double",
    "ended",
    "also",
    "add",
    "values",
    "left",
    "queue",
    "one",
    "popped",
    "add",
    "back",
    "left",
    "side",
    "also",
    "choose",
    "pop",
    "right",
    "side",
    "want",
    "running",
    "confirm",
    "one",
    "added",
    "back",
    "pop",
    "two",
    "ash",
    "sets",
    "really",
    "useful",
    "search",
    "constant",
    "time",
    "insert",
    "values",
    "also",
    "constant",
    "time",
    "course",
    "wo",
    "duplicates",
    "set",
    "course",
    "unlike",
    "list",
    "ca",
    "duplicates",
    "hash",
    "set",
    "easily",
    "get",
    "length",
    "hash",
    "set",
    "know",
    "many",
    "elements",
    "inserted",
    "also",
    "search",
    "hash",
    "set",
    "without",
    "function",
    "use",
    "operator",
    "want",
    "know",
    "one",
    "exists",
    "hashtag",
    "thing",
    "two",
    "thing",
    "three",
    "know",
    "exist",
    "hash",
    "set",
    "confirm",
    "remove",
    "values",
    "also",
    "constant",
    "time",
    "time",
    "confirm",
    "value",
    "indeed",
    "removed",
    "initialize",
    "hash",
    "set",
    "bunch",
    "values",
    "actually",
    "pass",
    "list",
    "like",
    "lists",
    "also",
    "set",
    "comprehension",
    "manually",
    "initialize",
    "loop",
    "inside",
    "hash",
    "set",
    "going",
    "every",
    "value",
    "range",
    "taking",
    "value",
    "adding",
    "hash",
    "set",
    "initializing",
    "way",
    "identical",
    "hashmaps",
    "probably",
    "single",
    "common",
    "data",
    "structure",
    "going",
    "used",
    "saving",
    "curly",
    "braces",
    "insert",
    "simply",
    "take",
    "key",
    "value",
    "case",
    "string",
    "assign",
    "another",
    "value",
    "case",
    "number",
    "88",
    "add",
    "bunch",
    "like",
    "hash",
    "sets",
    "ca",
    "duplicate",
    "keys",
    "inside",
    "hash",
    "map",
    "printing",
    "simple",
    "taking",
    "length",
    "give",
    "us",
    "number",
    "keys",
    "exist",
    "hash",
    "map",
    "modify",
    "value",
    "mapped",
    "key",
    "change",
    "alice",
    "88",
    "also",
    "search",
    "key",
    "exists",
    "hashmap",
    "constant",
    "time",
    "also",
    "remove",
    "key",
    "also",
    "remove",
    "value",
    "confirm",
    "right",
    "initialize",
    "hashmap",
    "add",
    "pairs",
    "inside",
    "curly",
    "braces",
    "pair",
    "separated",
    "comma",
    "key",
    "goes",
    "left",
    "side",
    "colon",
    "value",
    "goes",
    "right",
    "side",
    "manually",
    "inserting",
    "values",
    "hash",
    "map",
    "want",
    "get",
    "even",
    "fancy",
    "use",
    "dict",
    "comprehension",
    "hash",
    "maps",
    "basically",
    "called",
    "dictionaries",
    "python",
    "syntax",
    "pretty",
    "similar",
    "case",
    "looping",
    "range",
    "3",
    "going",
    "two",
    "values",
    "case",
    "key",
    "colon",
    "value",
    "goes",
    "case",
    "mapping",
    "2",
    "times",
    "pretty",
    "powerful",
    "find",
    "use",
    "frequently",
    "graph",
    "problems",
    "trying",
    "build",
    "like",
    "adjacency",
    "list",
    "looping",
    "map",
    "pretty",
    "interesting",
    "many",
    "ways",
    "default",
    "iterate",
    "every",
    "single",
    "key",
    "know",
    "print",
    "key",
    "also",
    "print",
    "value",
    "key",
    "maps",
    "also",
    "directly",
    "iterate",
    "list",
    "values",
    "hash",
    "map",
    "even",
    "need",
    "key",
    "lastly",
    "using",
    "unpacking",
    "actually",
    "go",
    "items",
    "map",
    "give",
    "us",
    "key",
    "value",
    "pretty",
    "similar",
    "first",
    "loop",
    "guess",
    "bit",
    "concise",
    "write",
    "way",
    "python",
    "also",
    "tuples",
    "pretty",
    "similar",
    "arrays",
    "except",
    "initialize",
    "use",
    "parentheses",
    "rather",
    "brackets",
    "immutable",
    "index",
    "ca",
    "modify",
    "wo",
    "work",
    "mainly",
    "using",
    "tuples",
    "keys",
    "hash",
    "map",
    "hash",
    "set",
    "case",
    "mapping",
    "pair",
    "values",
    "one",
    "two",
    "three",
    "tuple",
    "basically",
    "hashable",
    "key",
    "thing",
    "hash",
    "sets",
    "course",
    "use",
    "tuple",
    "search",
    "hash",
    "set",
    "reason",
    "lists",
    "hashable",
    "ca",
    "keys",
    "hash",
    "sets",
    "hash",
    "maps",
    "work",
    "heaps",
    "another",
    "really",
    "common",
    "data",
    "structure",
    "find",
    "min",
    "max",
    "set",
    "values",
    "frequently",
    "hood",
    "python",
    "implemented",
    "array",
    "days",
    "course",
    "actually",
    "create",
    "empty",
    "heap",
    "create",
    "empty",
    "list",
    "push",
    "values",
    "heap",
    "use",
    "heap",
    "q",
    "dot",
    "heat",
    "push",
    "min",
    "heap",
    "value",
    "three",
    "default",
    "heaps",
    "python",
    "min",
    "heaps",
    "push",
    "values",
    "get",
    "minimum",
    "value",
    "always",
    "index",
    "heaps",
    "implemented",
    "loop",
    "heap",
    "length",
    "heap",
    "also",
    "pop",
    "values",
    "heap",
    "heap",
    "q",
    "dot",
    "heat",
    "pop",
    "min",
    "heat",
    "print",
    "corresponding",
    "value",
    "popped",
    "since",
    "min",
    "heap",
    "see",
    "values",
    "printed",
    "smallest",
    "largest",
    "python",
    "max",
    "heaps",
    "default",
    "workaround",
    "basically",
    "multiply",
    "value",
    "push",
    "negative",
    "one",
    "pop",
    "value",
    "also",
    "multiply",
    "negative",
    "one",
    "negate",
    "original",
    "negative",
    "one",
    "wanted",
    "implement",
    "max",
    "heap",
    "push",
    "value",
    "3",
    "would",
    "actually",
    "push",
    "negative",
    "three",
    "wanted",
    "push",
    "two",
    "push",
    "negative",
    "two",
    "thing",
    "four",
    "max",
    "always",
    "index",
    "0",
    "know",
    "multiply",
    "negative",
    "one",
    "negate",
    "original",
    "negative",
    "one",
    "popping",
    "value",
    "multiplying",
    "negative",
    "one",
    "confirm",
    "values",
    "printed",
    "greatest",
    "smallest",
    "already",
    "initial",
    "set",
    "values",
    "want",
    "build",
    "heap",
    "linear",
    "time",
    "calling",
    "build",
    "heap",
    "python",
    "called",
    "heapify",
    "call",
    "heap",
    "q",
    "dot",
    "heapify",
    "array",
    "array",
    "empty",
    "going",
    "keep",
    "printing",
    "values",
    "confirm",
    "printed",
    "smallest",
    "largest",
    "functions",
    "python",
    "pretty",
    "straightforward",
    "concisely",
    "use",
    "def",
    "keyword",
    "name",
    "function",
    "pass",
    "parameters",
    "case",
    "n",
    "like",
    "conditionals",
    "loops",
    "use",
    "colon",
    "declaration",
    "function",
    "body",
    "function",
    "going",
    "indented",
    "returning",
    "multiplication",
    "two",
    "values",
    "printing",
    "result",
    "one",
    "functionality",
    "use",
    "lot",
    "coding",
    "interviews",
    "nested",
    "functions",
    "really",
    "helpful",
    "recursive",
    "problems",
    "outer",
    "function",
    "takes",
    "couple",
    "parameters",
    "also",
    "declare",
    "values",
    "outer",
    "function",
    "inner",
    "function",
    "actually",
    "access",
    "variables",
    "default",
    "called",
    "inner",
    "function",
    "even",
    "pass",
    "b",
    "c",
    "pretty",
    "simple",
    "example",
    "watched",
    "graph",
    "videos",
    "know",
    "nice",
    "keeping",
    "code",
    "concise",
    "one",
    "thing",
    "trips",
    "lot",
    "people",
    "nested",
    "functions",
    "modify",
    "objects",
    "ca",
    "reassign",
    "values",
    "unless",
    "use",
    "keyword",
    "function",
    "going",
    "double",
    "every",
    "value",
    "inside",
    "array",
    "also",
    "double",
    "value",
    "array",
    "helper",
    "function",
    "access",
    "outer",
    "variables",
    "modify",
    "array",
    "pretty",
    "easily",
    "going",
    "value",
    "array",
    "doubling",
    "works",
    "update",
    "original",
    "array",
    "doubled",
    "value",
    "double",
    "value",
    "scope",
    "helper",
    "function",
    "want",
    "update",
    "value",
    "outside",
    "helper",
    "scope",
    "declare",
    "value",
    "modifying",
    "value",
    "modify",
    "original",
    "values",
    "outer",
    "function",
    "call",
    "helper",
    "function",
    "without",
    "passing",
    "variables",
    "print",
    "variables",
    "actually",
    "called",
    "double",
    "function",
    "create",
    "variables",
    "call",
    "run",
    "code",
    "see",
    "variable",
    "doubled",
    "trivial",
    "example",
    "familiar",
    "videos",
    "know",
    "helpful",
    "classes",
    "also",
    "pretty",
    "concise",
    "bit",
    "limited",
    "languages",
    "constructor",
    "basically",
    "double",
    "underscore",
    "init",
    "double",
    "underscore",
    "kind",
    "name",
    "constructor",
    "python",
    "self",
    "passed",
    "every",
    "method",
    "class",
    "basically",
    "like",
    "keyword",
    "languages",
    "case",
    "constructor",
    "maybe",
    "taking",
    "list",
    "numbers",
    "create",
    "member",
    "variables",
    "also",
    "use",
    "self",
    "keyword",
    "creating",
    "member",
    "variable",
    "called",
    "nums",
    "assigning",
    "nums",
    "passed",
    "parameter",
    "constructor",
    "also",
    "create",
    "member",
    "variable",
    "size",
    "nums",
    "taking",
    "length",
    "parameter",
    "create",
    "method",
    "class",
    "class",
    "example",
    "get",
    "length",
    "want",
    "pass",
    "parameters",
    "pass",
    "self",
    "keyword",
    "always",
    "give",
    "us",
    "access",
    "member",
    "variable",
    "going",
    "return",
    "want",
    "call",
    "another",
    "member",
    "variable",
    "member",
    "variable",
    "case",
    "want",
    "call",
    "get",
    "length",
    "function",
    "get",
    "double",
    "length",
    "self",
    "keyword",
    "pretty",
    "useless",
    "example",
    "mainly",
    "trying",
    "explain",
    "syntax",
    "structure",
    "classes",
    "python",
    "less",
    "everything",
    "needed",
    "know",
    "coding",
    "interviews",
    "surprisingly",
    "lot",
    "memorize",
    "solve",
    "coding",
    "problems",
    "prepare",
    "interviews",
    "might",
    "look",
    "syntax",
    "exactly",
    "use",
    "heaps",
    "exactly",
    "use",
    "double",
    "ended",
    "cues",
    "things",
    "like",
    "perfectly",
    "okay",
    "practice",
    "enough",
    "stuff",
    "pretty",
    "easy",
    "get",
    "even",
    "feel",
    "like",
    "writing",
    "code",
    "python",
    "pretty",
    "big",
    "reason",
    "able",
    "get",
    "job",
    "google",
    "opinion",
    "preparing",
    "coding",
    "interviews",
    "check",
    "ton",
    "free",
    "resources",
    "help",
    "prepare",
    "practice",
    "problem",
    "listed",
    "thorough",
    "video",
    "explanation",
    "code",
    "support",
    "python",
    "c",
    "plus",
    "plus",
    "java",
    "javascript",
    "new",
    "data",
    "structures",
    "algorithms",
    "got",
    "really",
    "helpful",
    "courses",
    "beginners",
    "also",
    "advanced",
    "users",
    "thank",
    "much",
    "watching",
    "hopefully",
    "see",
    "pretty",
    "soon"
  ],
  "keywords": [
    "let",
    "code",
    "want",
    "need",
    "know",
    "python",
    "coding",
    "interviews",
    "new",
    "bit",
    "started",
    "pretty",
    "much",
    "used",
    "think",
    "really",
    "helpful",
    "easier",
    "languages",
    "super",
    "concise",
    "actually",
    "already",
    "use",
    "like",
    "c",
    "plus",
    "end",
    "see",
    "expect",
    "way",
    "side",
    "also",
    "course",
    "going",
    "get",
    "first",
    "thing",
    "declare",
    "variable",
    "n",
    "set",
    "zero",
    "type",
    "run",
    "print",
    "equal",
    "time",
    "reassign",
    "string",
    "different",
    "two",
    "variables",
    "put",
    "left",
    "values",
    "right",
    "single",
    "increment",
    "simple",
    "one",
    "ca",
    "even",
    "us",
    "syntax",
    "big",
    "less",
    "called",
    "basically",
    "value",
    "unlike",
    "number",
    "four",
    "means",
    "parentheses",
    "conditional",
    "colon",
    "goes",
    "else",
    "create",
    "keyword",
    "needed",
    "double",
    "example",
    "inside",
    "loops",
    "similar",
    "loop",
    "go",
    "printing",
    "running",
    "range",
    "five",
    "5",
    "every",
    "default",
    "take",
    "another",
    "case",
    "pass",
    "reverse",
    "would",
    "negative",
    "could",
    "well",
    "wanted",
    "something",
    "explicitly",
    "division",
    "integer",
    "divided",
    "2",
    "give",
    "round",
    "result",
    "3",
    "might",
    "using",
    "three",
    "based",
    "useful",
    "helper",
    "infinity",
    "reason",
    "arrays",
    "lists",
    "common",
    "data",
    "structure",
    "hash",
    "maps",
    "array",
    "push",
    "pop",
    "last",
    "insert",
    "index",
    "operation",
    "read",
    "constant",
    "initialize",
    "size",
    "easily",
    "easy",
    "length",
    "taking",
    "list",
    "many",
    "iterate",
    "without",
    "nums",
    "function",
    "call",
    "sort",
    "order",
    "strings",
    "key",
    "confirm",
    "add",
    "adding",
    "maybe",
    "added",
    "multiply",
    "outer",
    "build",
    "rows",
    "modify",
    "lot",
    "integers",
    "together",
    "empty",
    "queue",
    "sets",
    "search",
    "keys",
    "map",
    "heaps",
    "min",
    "max",
    "heap",
    "original",
    "constructor",
    "self",
    "member"
  ]
}