{
  "text": "Zach galwitzer created our extremely\npopular front-end web development boot\ncamp course now he's back with this\nproject-based course that will help you\nsolidify your understanding of a variety\nof front-end web development Concepts\nyou'll practice HTML CSS JavaScript\ntypescript react and more so let's get\nstarted hey free code Camp my name is\nZach and today I'm really excited to\nshare a video I've been working on for a\nwhile where I take a tic-tac-toe game\nand build it in vanilla JavaScript HTML\nand CSS and then refactor that to go to\ntypescript and then finally typescript\nplus react this is going to be a super\nfun tutorial it's going to be long but I\nhope that you're going to learn a ton\nfrom this and get some practical Real\nWorld Experience building this with me\nnow this is actually what I would call\nkind of a sequel to another video that I\nposted on this very Channel free code\nCamp a couple months ago I posted a\nfront-end developer boot camp and since\nthen it has gotten over a million views\nso thank you all for watching that I'm\nglad that you enjoyed it this video is\nmeant to be a direct follow-up to that\nbecause all the lessons that you learned\nthroughout are going to be applied in\nthis video we're going to take all of\nthat stuff and put it into action and\ngive you a project that is a little bit\nmore real world a bit more challenging\nbut a great learning experience as\nalways want to give a big shout out to\nfree code camp for allowing me to come\non the channel and giving me the\nexposure to to teach a broader audience\nI have a smaller Channel myself you can\ncheck that out got a link in the\ndescription and I will also make a note\nthat this video is actually three videos\nsquashed together so I originally posted\nthese three on my channel this is just\nall combined so if you kind of hear me\ntalking about the next video or the\nprevious video that's why and finally\nthere is a GitHub repository I'll\nmention this a couple times in the\ndescription that you should check out as\nit's got all of the source code that I\nwill be writing in this project as well\nas some attribution because this was\nactually originally a subscriber\nrefactor I react I reached out to my\nsubscribers and said hey submit your\ncode I'll review it and redo it and show\nyou how I would approach it so that's\nhow this originally started so thank you\nYvonne and Meg for submitting that their\nhandles are also in that GitHub\nrepository so without further Ado let's\njump in and build this tic-tac-toe game\nin this video I'm going to walk you\nthrough the step-by-step process of\nbuilding this tic-tac-toe game which is\nmobily responsive you can play it on a\nmobile device and it works across\nbrowser tabs leveraging local storage so\nthat you know you can have different\nplayers playing from different browser\ntabs and it also is going to have a\nbunch of different things such as some\nanimations going on up here you've got\nsome an actions menu that allows you to\nreset the game and then once you get\nthrough and start recording different\nwins so you don't really have to play on\nthese separate tabs but you can once\nsomeone wins you'll see a modal pop up\nand gray out the entire background and\nyou can click play again you'll see that\nthat state is tracked over time and even\nif we refresh the browser tab that's\ngoing to stay there you can even reset\nthat and make it a new round all of the\ncode that I'm writing here is going to\nbe in this tic-tac-toe subscriber\nrefactor repository that is on my GitHub\nand I'll drop that in the video\ndescription\nall right so this video is going to\ncover all sorts of Concepts\num this is actually loaded with useful\nConcepts doing anything with vanilla\nJavaScript HTML and CSS really requires\nyou to think about things because you\ndon't get all of the backstops that some\nlibraries and Frameworks like react or\nvue.js give you so it will really\nrequire us to think a bit but it will be\nfun to explore some different concepts\nand patterns for example we're going to\nbe looking at what is a MVC\narchitectural pattern or model view\ncontroller we're going to be talking\nabout what is State what does that\nactually represent\nwe're going to talk a little bit about\nevent delegation so in other words what\nthat means\nis when you go to this game and you\nclick one of these squares it's actually\nregistering a click listener on the\nparent component and then delegating\nthat event so that we can find which\nSquare was clicked so that will be fun\nto go through\nmobile responsiveness as I showed you\nsome CSS animations that uh tic-tac-toe\ngrid is actually using CSS grid and then\na lot more so all of these Concepts will\nbe fun to go through and if you are not\nfamiliar with HTML CSS in JavaScript I\nrecommend you go through my full stack\nwhich kind of became a front-end\ndevelopment roadmap and it's like over\n21 hours and it's all posted on my\nchannel here and I'm probably going to\nput this video as the next video in that\nseries because it is a perfect\ntransition from all of those Concepts\nthat we covered throughout that series\nand applying them in a very real world\ntype scenario to build this game out so\nthis is kind of doubling as a subscriber\nrefactor and just a very useful project\nto build and learn a bunch of cool\nconcepts with but you definitely have to\nknow HTML CSS in JavaScript at least at\na basic level to get through this video\nand I recommend you watch the prior\nvideo where I kind of walk through the\noriginal project that this was based on\nand I kind of talked through what are\nsome of the good things that they did\nthere what were some of the things that\ncould be improved and I'll be\nreferencing kind of back to that to kind\nof show how we can improve on certain\nthings so I recommend you at least watch\nthe first part of that video or kind of\nskim through it now I will forewarn you\nI've put that this is a beginner to\nintermediate level video\num because we're going to be covering a\nlot of ground here this will be very\nchallenging to you if you are just kind\nof starting out and I did this on\npurpose because I think there's not a\nlot of tutorials out there that really\nfocus on the vanilla side and vanilla\njust means no extra Frameworks or\nlibraries involved I don't think there's\na lot tutorials out there that really\nshow you how to take a vanilla app and\nactually put some design patterns behind\nit and do it in a way that you could\nextend it into the future and you can\ncome back to this project and understand\nwhat's going on and have a quick\nstraightforward way to add new features\nto the game with all that said let's get\nstarted this is going to be a long and\nfun video so I'll put some time stamps\nin there and\num probably want to grab a hot drink and\nget situated because this is gonna it's\ngonna take a while so\num these brand or this uh repository is\nthe repository that I will post in the\nput in the video description it has the\ncompleted projects so you can see I have\na reactory factor that'll actually be\nthe next video where we take our build\nfrom this video and we throw that into\nwell not throw it we rebuild it as a\nreact application and show you kind of\nthe progression of how do you go from\nvanilla to react and what are some of\nthe commonalities and differences\nbetween the two and it will really help\nyou understand why we use something like\nreact and why it makes our lives easier\nas a developer so that's what those are\nthe original is the original project\njust as a reference\num but what I'm going to do is actually\ncreate a new folder\nuh live vanilla build and this is where\nwe're going to be working out of for\nthis video I'll basically be recruit\nrecreating everything here in the\nvanilla refactor and I may reference\nthis\num a little bit here and there just so\nthat we're not getting too far off from\nthat code so just as a forewarning the\nlive build that we're going to do might\nhave like some tiny little differences\nbetween the final state that you see on\nGitHub but overall it will go in the\nsame exact Direction all right so what\nis the first thing that we do when we\nstart a new project well we're doing a\nfront-end project here so the natural\nthing to do is create an index.html\ndocument but before that I want to do\nsome administrative stuff\num with Visual Studio code I'm going to\nassume that you are using visual studio\ncode\num and the reason is because it's an\nawesome editor and most people use it so\nthe first thing you'll need to do is go\nover to extensions and open up live\nserver this is an extension that\nbasically allows you to view HTML\ndocuments in your browser on Port 5500\nis the default so you can see that's\nalready running let me go ahead and\nclick close\nso that'll dispose that\num let me get these windows\nfigured out here\nokay so if you see I reload this it\nwon't reload let's go ahead and close\nthat\nand then if you go down\nget rid of my bar down there if you\nclick go live once this live server is\ninstalled with Visual Studio it will\nopen up Port 5500 so let's go to\nthis and it'll show you just the\ndirectories you're working with so it's\njust replicating this right here and\nwhat we're going to do is click on the\nlive vanilla build right now it's empty\nso it's not going to show anything but\nwhat we're going to do is create an\nindex.html file so we'll say index.html\nand then we'll use vs code's built-in\nemit Snippets to type HTML and then\nwe'll click\nHTML5 to get some boilerplate built out\nfor us\nnow the second thing that I'm going to\nshow you is format on Save and this\nshould be really part of your Dev\nworkflow no matter where you go because\nit's just useful so as you can see this\nboilerplate is not indented correctly\nand when I click command s on my Mac to\nsave you can see that it formats this\ndocument\nso the way that I got that working is\nthrough another extension called\nprettier and prettier is a code\nformatter used by pretty much everyone\nat this point or at least it feels like\nso it's a very industry standard and\nwhat you can do is hit command P\nhit the little bracket or not bracket\nwhatever that carrot and type open user\nsettings and it's right here because\nI've used it recently\ndon't worry about all this stuff these\nare the only lines that really matter so\nyou'll add these two configuration lines\nthis is also documented uh in the\nextension it'll show you right here that\nyou need to add those and once you've\nadded the added those it's going to\ndetect every time you save and reformat\nthe file\nall right so that is kind of the\nadministrative stuff that we're dealing\nwith\num I don't think I missed anything so\nmake sure that you you get set up with\nboth of those things so now that I have\nsaved this we can go back to our live\nserver and we should have an empty HTML\ndocument so if you inspect\nyou can see that here the elements and\nlet's just go ahead and change this to\nvanilla Js\nT3 for Tic-tac-toe and then we'll go\nahead and just put a placeholder\nP tag in there so you can see something\nand you can see that when we save that\nit auto loads\num or it you know has hot reloading so\nthat all the changes are reflected\nimmediately in the browser alright so\nthe very next thing that I will always\ndo when I'm starting a project and this\nis really kind of the starting point for\nme at least for any project whether we\nhave a back end involved if it's full\nstack or just like we're doing here\nwhere it's just front end\nI'm going to start with the UI and build\nthe layout for the entire application\nand I actually have a video on that that\nkind of explains that process in depth\nin my front end course on this channel\nso you can go revisit that if you need\nbut basically the goal here is to build\nout the HTML structure and then build\nout the layout with CSS now I debated\nthis in my head a bit of how much time I\nwas going to spend on this portion of\nthe video and I ultimately decided that\nthis is going to be deprioritized a\nlittle bit so that we can focus more on\nthe JavaScript patterns behind all this\nI have plenty of previous videos where\nwe go in depth like in excruciating\ndetail of how to build HTML and CSS how\nto bring those together and design\nthings and if you watched my front end\ncourse the last\num a series of videos in that course was\nall about CSS grid so we're going to\nleverage that we're going to use that in\na real world project here but I am not\ngoing to be getting into every last\nlittle detail we're going to take some\nLiberty and do a little bit of copy\npasting from this\num\nvanilla refactor that I've already built\num as as kind of a precursor to this\nvideo that said we're going to take it\npiece by piece so that you can at least\nsee how it's coming together in the\nthought process behind that but I will\nnot be typing the HTML and CSS line by\nline because we will be here for the\nnext 10 years if um if if I do that my\nvideos are already quite long and they\ndo not need to be longer especially when\nthis is not what we're focusing on so\nlet's go ahead and do some copy pasting\nhere so if we look at this index.html\nthis is the final HTML of this project\nthe one that we're going for so the\nfirst thing I want to focus in on is the\ngrid so that's the hardest thing to\nconceptualize with building this out and\nwhen I say that grid we're going to\nactually duplicate this tab so that we\nhave a reference to look at\nand my\nvanilla refactor will give us that\ncomplete picture that we want and so\nwhat we're trying to do here is build a\ngrid that has all of these squares here\nbut then as you can see there's also\nthese uh State variables down here I\nshouldn't call them State variables but\na little scoreboard that lines up\nperfectly with this grid and something a\nlittle bit less obvious up here the\nactions menu also lines up perfectly\nwith the grid and this player one you're\nup indicator this spans kind of two\nsections of the grid so really what\nwe've got here\nand what we need to replicate is a grid\nthat is let's count it you've got three\ncolumns so one two three and then the\nnumber of rows is going to be one so\nthis this top kind of header section is\ngoing to be one section of our grid then\ntwo three four and then this five bottom\none so really what we have is a how does\nthis go which one goes first is it the\nfive by three or three by five grid\num hard hard to remember that while I'm\ntalking here on video but that's\nbasically what we're going to be\nbuilding and if I Collapse this finished\ndocument so vs code has these code\ncollapse things that can really help for\nto see kind of how things are structured\num so what we can do is collapse\neverything until it's a lot more clear\nas to what the grid items are\nso you can see that my\ncontainer has a class of grid and that\ngrid is going to give us the display\ngrid so if we go to our index.css\nand we go to the grid class you'll see\nthat that is initializing the grid\ncontainer\num and let's go back to this\nHTML and then as we know if you watched\nthat previous series on grid is that\ngrid is going to have child Elements\nwhich are called The Grid items now\nthese are direct descendants of its\ncontainer and as you can see we have one\ntwo and then there's nine of these\nsquares and then there's three little\nscoreboard squares there at the bottom\nso that's the basic structure but we are\nnot going to start with all of these\ndifferent styles and markup you want to\nstart simple and the way that we're\ngoing to do that is by creating a bunch\nof divs and just starting with a basic\ngrid here in order to do that we need an\nindex.css file so if you see in the\nvanilla refactor we've got some folders\nfor the different types of files you\ndon't really need that that was just an\norganization thing\nfor this rebuild I'm just going to try\nto mirror that so we'll create a CSS\nfolder and then a new file in there\ncalled index.css\nand then let's go ahead this is\nsomething that I always do let's just\nthrow uh an all selector and then color\nred\nand that means every text everything is\ngoing to be or all the text is going to\nbe red and the reason I do that is just\nto make sure we're hooked up correctly\nso let me close all these files out out\nthis index.html is our starter you can\nsee I have a placeholder here and what I\nneed to do is right above the title\nwe're going to add a link\nand we're going to go down and hit enter\non the link CSS and you can see it\nalready knows to go grab the style.css\nbut that's not what we want because we\nhave a custom directory\nso let's go to CSS and select index\nsave that and now if this is hooked up\ncorrectly this should be red\nso let's go right here and you can see\nthat it is red and it is connected up so\nthe very first thing that we need to do\nis put in a main\nHTML tag and the reason that we put the\nmain tag in there is because this should\nrepresent the dominant content of the\ndocument now if you wanted to figure\nthat out on your own you can just type\nin mdn main so mdn Main and it'll be the\nfirst result and it says it represents\nthe dominant content if you scroll down\nhere on the usage notes it says it\nshould be unique for the document\ncontent that is repeated such as\nsidebars nav links copyright should not\nbe within main so in our case this\ntic-tac-toe board is the dominant\ncontent of this index.html document so\nwe want it inside Main\nfurthermore we'll need a div container\nwhich will be the grid container itself\nand we want to give that a class of grid\nwhich we will style within index.css but\nif you remember let me hit command B on\nmy Mac to close out that sidebar\nif you remember on this original we had\nthe grid class and then we had all these\ngrid items so we had one two\num nine more right here so 11 12 13 14.\nif I can count basic math right but\nbasically we just need a bunch of divs\nwithin here so we can make one command C\ncopy that all the way down and how many\nis that three six nine eleven\nokay we'll we'll come back to this if we\ndidn't get that right but anyways we've\ngot the skeleton of our grid and now if\nwe come into index.css\nwe can make that grid class and say\ndisplay grid another thing that we'll\nwant to do just to start us out is the\nCSS reset this was in the original\nproject already\nand we can just copy it over\nso the CSS reset is just gonna reset\neverything so that we don't have any\nweird padding going on and\nanything like that so let's go ahead and\nput that at the top\nand then we can also initialize our\nfonts and colors like I said I'm not\ngoing to spend a ton of time on this\nportion of the video\num I've got prior videos that go into\nmore depth here but basically we're\nimporting uh a Google font right here\nand then we are initializing our set of\ncolors as CSS variables on the root\nselector so we'll be able to use that\nwith the VAR and then dash dash whatever\nvariable it is within our CSS so we'll\nsave this we'll come back to our\ndocument here and you'll see that it's\ncompletely empty which is kind of what\nwe're looking for now if you looked at\nthe vanilla refactor here got it zoomed\nin way too much\nit has this darker background so the\nfirst thing that we can do is actually\nactually get that in there and that\nwould be I believe the dark gray right\nhere so let's just copy that over we're\ngoing to select the HTML in the body\nand\ngive it that background color now the\nreason that we have a hundred percent\nheight this is something that's useful\nfor mobile devices because there's\nanother strategy of 100 of the screen\nheight but that screen height is\ndifferent on a mobile device versus a\ndesktop and you'll actually get some\nlittle padding at the bottom so I prefer\nto do height of a hundred percent but\nanyways the main point here is we're\ngiving it that background color and this\nis actually kind of a mistake from the\noriginal we should be just putting in a\nCSS variable there\nall right so we'll come back and it\nlooks like we've got our background\nmatching that looks good and now we can\nstart to initialize this grid so at the\nmoment you should be able to find in the\nmain that we have all of these grid\nitems they're just not showing up at all\nso we need to give them some space\nwithin the document so that we can start\nto work with them so if we wanted to do\nthat the quickest way to come in here\nand do that is to go right below the\ngrid and then just select any div that's\nwithin the grid class and let's just\ngive it a height of 20 pixels and a\nwidth of 20 pixels we'll get rid of this\nin just a moment but oh and then we also\nneed to give it a background color of\nlet's just say red something annoying\nand you can see there's our grid items\nwe could also give it you know a margin\nof 10 pixels you can start to see that\nseparation so right there there are our\ngrid items and they obviously don't look\nnear what we want them to so what we\nneed to do is set the boundaries of this\ngrid rather than doing this height and\nwidth we can actually dictate how large\nthese items are using the grid container\nso if you look in our original\nCSS that was built out\nyou'll see that the grid container has\ntemplate columns and template rows and\nthen a grid Gap\nso let's start with the columns we will\ncopy that over and what this is going to\ndo when we say repeat three times 80\npixels that means that each column is\ngoing to be 80 pixels wide so let's save\nthat and you can start to see that we've\ngot some columns going here and\nimmediately you can see that I've added\none too many div elements\nso we can come over to the index.html\nand delete those\nso now we have this perfect grid right\nhere\nand then\nwe can come back to the CSS and then add\nour template rows now our template rows\nare going to be a little bit different\nso I'll explain this in a second but\nwe'll copy that in and what we're saying\nis that the first row is going to be 50\npixels tall then we're going to have\nthree rows so we're repeating three\ntimes the next three rows are going to\nbe 80 pixels tall so that will\ncorrespond with our columns so we'll\nhave those perfect squares and then the\nfinal row which is kind of like that\nscoreboard at the bottom will be 60\npixels high so that once we save it\nyou'll see that expressed within the\ngrid here and I believe\nwe actually need more grid items here\nI'm sorry I'm it's hard to count while\nI'm teaching here but let's make three\nmore\nand now I think we're getting what we're\nlooking for so we can now get rid of the\num explicit height and width of these\nitems\nbecause the grid will take care of that\nso now you can see that we've got the\nskeleton of this grid but let's go ahead\nand start isolating things so we want to\nmaybe style the top row as a different\ncolor than the main grid and the\nscoreboard at the bottom so this will\nevolve and change but just to kind of\ndemonstrate the concepts I'm going to\nquickly put something in there so for\nthe top three we're going to hit option\nin click in vs code and that should\nallow us to click three things at once\nwe'll give these first ones a class of\nturn\nand then we'll come down and give these\ndivs here\na class of square\nhow many is that three six and then nine\nso class equals Square\nand then finally at the bottom we're\ngoing to give these a class\noops clicking too many things at once\nwe'll give these a class of the score\nokay so now we'll come back and instead\nof grid selecting all the divs all the\ngrid items we'll select them based on\nwhat they are so let's get rid of this\nmargin also because we will have a gap\nwe'll go ahead and add a gap of five\npixels to every grid item so that\neverything's spaced evenly and then\ninstead of this we're going to say\num uh what was it turn was the top row\nSquare was the middle one and then score\nwas the bottom so we'll give these\ndifferent background colors the squares\nwill stay red we'll make these turn ones\ngreen and then the score will be blue at\nthe bottom so we'll save that and then\nif we come back now we've got all of\nthese highlighted a little bit\ndifferently and if you look at the final\nyou can see that this matches almost\nperfectly but this little\nturn indicator seems to take up two full\ncolumns and in order to get that working\nwe can actually do this within the child\nthe grid item itself we can tell it how\nmany columns to to span at once so we\nactually have to go to the HTML\nand\num highlight we we can remove one of\nthese div items and keep that as turn\nand then this will be actions\nso this will be the little drop down and\nthen this will be the turn indicator\nso let's save that and it should be all\nkind of messed up now at this point but\nhere in red that should be our actions\nmenu and if we go to the CSS\nlet's go actions what do we call that\nactions yep and then this will be a\nbackground color of I don't know\num\nlet's go purple\nlike that\nand then finally the turn is going to\nstay green but we're going to say grid\ncolumn start and that's going to be one\nso we're going to start the first column\nand then grid column end is going to be\nthree so it spans two columns wide so\nonce we do that we should be able to go\nback and now you see this green is\ntaking up two full columns we've got the\nactions in the top right scoreboard at\nthe bottom and Grid in the middle so if\nyou compare this right here to our final\nthat's pretty much what's happening we\nhave two spaces here actions full grid\nand then scoreboard at the bottom so\nthis is the hardest and First Step that\nyou'll do when building any sort of\nproject like this you have to nail the\nlayout and then we can start you know\nmaking it look a little bit better\narranging it on the screen\nso I'm going to keep it looking just\nlike this and we're going to continue\nthis process and get it centered within\nthe document and then also make sure\nthat as we resize things you know as you\nsee when we resize it down to this small\ndevice it just kind of breaks out we're\ngoing to make sure that it resizes\nappropriately now if you just take a\nlook at the underlying HTML that we've\ngot going on here let's make this a\nlittle bit larger\nyou can see that we've got the main\ncontainer sitting here and then the body\ncontainer so if we wanted to Center this\nmain container really all we would have\nto do is go to the body element itself\nand I believe we can just display flex\nand then justify content Center and then\nalign items Center and you can see how\nthat brings everything to the middle of\nthe screen so that's generally what\nwe're going to be doing here so if we\ncome back to our project and then if you\nlook at this original so this is the\ncompleted version and if we go to the\nCSS you'll see that on the body element\nwhat we've done is we've displayed Flex\nwe've set the flex Direction column so\nthat it's going up and down rather than\nleft to right and then basically\naligning everything to the to the center\nso what I'll do is I'll just copy this\nsnippet here\nfrom our completed CSS and we'll bring\nthis to the top or right under HTML and\nbody and then save that and now when we\nrefresh you should see that it looks\nvery similar the last thing that we need\nto do as you can see we don't have a\nfooter at the bottom so I've added this\nlittle attribution at the bottom which\nprovides some spacing so that it pushes\nthis grid up a little bit so we can\nquickly go add that\nso if we come to the final uh the final\nproject here I'm just going to copy this\nfooter markup because it's relatively\nsimple doesn't really add a whole lot to\nthis so I'm just going to copy that\nverbatim and we will put that under the\nmain tag so remember footer is repeated\ncontent that if we added Pages we would\nprobably have that on every page so it\ndoesn't belong in the main content of\nthat page\nso if we save that let's see what we are\nlooking like\nyou can see that the footer has been\nadded down there and that's because it\ndoesn't look good because we haven't\nadded those Styles yet\nso let's go back to our completed one\nand I have a section at the bottom that\nhas the Styles just for the footer\nso let's see they're all right here so I\nwill copy those styles\num to our current working CSS\nso let's go ahead and say footer styles\ncopy those in and then hopefully this\nwill start to look a little bit better\nso now we've got the workings of our\nproject this is pretty much the skeleton\nof things and the last thing we need to\ndo is make sure that it resizes\nappropriately when we're on a mobile\ndevice versus a larger desktop device\nso to do that we will also go to the to\nthe final project here\nand I'll point you to where this is\nhappening\nyou can see right here I have a media\nselector and so this we've talked about\nin the responsive web design uh\nvideo that I've done in the past of the\nfront end series and basically what\nwe're doing is we're saying that we want\nthe grid container itself to resize a\nlittle bit differently based on what\nscreen we're on so what this rule is\nsaying is any screen that is 768 pixels\nor higher so basically like a tablet or\ndesktop device\nwe want the grid to have a width an\nexplicit width of 490 pixels because we\nknow we have enough space for that and\nthen we want to explicitly set the\ncolumns and rows to be a different size\nthan these Originals\nso right now if you were to select one\nof these squares it's 80 by 80. so you\ncan see as we hover over that it's 80 by\n80. now on a desktop device we've got\nsome more space so we would want that to\nbe 150 by 150. so let's go ahead and\ncopy that and paste it right under the\nmain grid selector\nso essentially this will be the mobile\nStyles and this will be the desktop\nstyles\nso once we refresh here\nwe're still on a mobile device in this\nscenario and it looks a lot smaller and\nthen yes it will cut off eventually but\nreally no mobile devices this small so\nthis is about what it would look like\nand then as we resize you'll see it jump\nup so let me go into responsive mode so\nthat we can see this a little bit better\nand watch this up here you'll see as we\nhit 768 right here it resizes so we have\na much bigger game to work with on these\ndesktop devices all right at this point\nwe have the bulk of the\num HTML and CSS the structure of our\nproject in the rest of the work that we\nneed to do here is primarily going to be\njust details of just finessing the look\nand feel of this until it matches our\nfinal product here where you can see\nwe've got this drop down menu that's\ngoing to be controlled with some\nJavaScript you can see when I hover over\neach Square it kind of uh gets a little\nbit darker we've got a pointer cursor\nyou can see the mouse is a little\ndifferent depending if we're on a\nclickable element or not and then of\ncourse as we take a turn watch this up\nhere it will do this little animation in\nwhere it kind of Zooms in and then\nslides out so these are all just little\ndetails that we need to add and like I\nsaid we've done a lot of in a lot of\nHTML and CSS work in Prior videos and\nthe main focus of this one is going to\nbe kind of the JavaScript side so I will\nwalk through over the next several\nminutes of how we take this right here\nand turn it into this but I will\nintentionally be moving a bit quicker\nthan normal so be sure to just pause the\nvideo If you see something that you know\ndoesn't make sense and just kind of walk\nthrough it on your own to understand you\nknow what's happening here I'm just\ngoing to be basically referencing the\noriginal CSS document in HTML and I'm\ngoing to be progressively building this\nout I'll try to walk you through the\nthought process as we go but just a\nheads up it's going to be a bit quicker\nthan usual the first thing that I want\nto tackle is this green area which is\nthe animated turn indicator now this is\nobviously going to be controlled by\nJavaScript at some point but we just\nwant to get the animation right so in\norder to do that let me close things out\nthis is our working CSS document and\nworking HTML document from here on out I\nthink what I'm going to do is keep the\ncompleted CSS here on the right as well\nas the completed HTML on the right and\nthen we'll close that out so on the left\nis our working project on the right is\nthe reference to the final one\num and I'll I'll try to just kind of\nhide this a little bit only for\nreference\nokay so what we're working on is this\ndiv right here so let's go ahead and put\nsome placeholder content in there just\nso that you see what's going on so\nthere's our placeholder I'm going to go\nback into a larger mode here so the\nfirst thing that we need to do is get\nthis all centered get the text in there\nlooking good so if we come to our final\nproject\nyou'll see that we have this\nturn class right here so within the turn\nclass we're going to have some font\nawesome icons\nand then a turn indicator so\nwe'll copy that in there and if you\nnotice we have these classes fa solid\nand fax these are being provided by\nsomething that we have not added to the\nhead of the document yet so we will need\nto do that\nthis was taken originally from the uh\nthe Yvonne who submitted this project\nhad put this font awesome uh kit in here\nso if you just copy this script over\nright under the style sheet that will\nadd these classes so that they actually\nshow up within the document and give you\nan icon to work with so once we've added\nthat script these should show up and you\ncan see there's the little X right there\nso we know that our our icons are\nworking and then finally we need to just\nstyle this so as you can see in the\noriginal we've got the turn class on\nthere so we need to go down and Ctrl F\nto find\nuh let's see where's the turn class\nhere it is okay so we will copy these\nstyles\non over we've got some of them already\nlooks like we've got the\num so the background color we're going\nto keep\nwe want to actually display this as a\nflex container\num with a center alignment of the items\nand a gap of 20. so that's the only\nthing that we need to add and then we\nneed to align self-center so that's\ngoing to tell\num the grid where to align things so\nreally what we have here is just some\ndevelopment only background colors this\ntells it how to align itself when within\nthe grid and then this is the\nspecification for how the content within\nthis container is going to be aligned so\nif we come back over you can see that\nit's now looking a little bit better and\nif we were to remove this background\ncolor now you can see that things are\nlooking great this is exactly the\nalignment and positioning of the final\none now obviously there are different\ncolors going on here but we're going to\nbe controlling a lot of that with\nJavaScript so we can move on from here\nat this point just for the moment I'm\ngoing to turn this to uh let's make it\nthat yellow text so we can give it a\ncolor and then use one of our variables\nand you remember we had defined a\nvariable of yellow here at the top under\nour root so we should be able to throw\nthat in there and get that yellow color\nright here and then we need to animate\nthis so in order to do that this is a\nlittle bit more intermediate level CSS\nstuff but in order to do that we need to\nadd some keyframes\num in an animation to animate both the\nicon and the text\nfirst though you can see that we have\nsome selectors for the icon in selectors\nfor the text so I'm going to copy those\nover\nright under turn so we've got the\nparagraph text and then the icon text\nI'm going to get rid of this animation\nstuff for just a second and save that so\nnow you can see that we've got this\nlooking a lot closer to what's going on\nhere\nand now we need to do the animation\nitself so when we do an animation you\nhave to\nfirst specify the animation's name\non the animation\nproperty the CSS property and you'll\ngive it a duration and then some\nbehavior that you want it to have and\nthen of course the reference so for the\nicon itself that's what we'll start with\nthis is going to\num be the animation that makes it kind\nof pop in and out get a little bit\nbigger and then smaller so you can see\nthat we have referenced turn icon\nanimation now this is an arbitrary value\nthat we have actually defined as some\nkeyframes so this uh selector right here\nmatches this the need to match because\nright here you were referencing to these\nkeyframes and what it's saying is that\nat zero percent of the duration it's\ngoing to scale to a hundred percent and\nthen 25 percent into the animation it\nwill scale to 140 percent and then once\nit's finally done it will scale back\ndown to a hundred percent so it kind of\npops in and then comes out and when we\nsave this you should be able to see that\nso every time we refresh you can see\nthat this little icon is just popping in\nand out in and out every time it reloads\nso that icon is going to be complete now\nthe same thing applies for the text\nwe want that text right now all it's\ndoing is popping in and out and then\nthis right here is staying in one place\nbut in the final you can see what\nhappens is that text kind of Fades from\nthe left and animates out so to get that\nto work\num once again we need to copy in the\nanimation so we find our paragraph of\nthe turn selector and copy that in\nand right now it's going to be the same\nanimation time as the icon just so that\nthey match up same type of behavior and\nthen turn text animation that doesn't\nexist yet we need to copy that\nkeyframe right here so now that we've\ndefined our keyframes of keyframes in\nthe turn text animation you can see that\nwe're transforming it at zero percent to\nnegative 20 pixels so it will kind of\npull it to the left 20 pixels and then\nas the animation animates it will\ntranslate it\nto go back to its original positioning\nwhich is where the final position we\nwant is so once again turn text to\nanimation references this key right here\nso when we save it now every time we\nrefresh you'll see that animation is\nhappening really nicely so we've got\nthis indicator done now obviously we've\ngotten X it should be an O so on and so\nforth but that's going to be controlled\nwith JavaScript and we are not quite\nthere yet now the next thing that we'll\ndo is we'll build this actions menu now\nonce again this is has to be controlled\nwith JavaScript to toggle the open and\nclose Behavior but what we can do for\nnow is just put a placeholder in here\nthat is styled like this and when you\nclick it it won't do anything\nso in order to get that we'll come back\nto our original\nso let's come back to our original\nindex.html document once again this is\nthe completed one and you can see that\nwe've called this menu and we've got\nsome markup within here we've got a\nbutton this is going to actually be what\nis shown and then down here this is\ngoing to be the popover that is initial\ninitially hidden and then as you click\nthe button this is going to show and\nthen hide every time you click\nso what we can do is just copy this\nmarkup\nand I think I've named it something\ndifferently so yeah I gave it a name of\nactions right here\nbut we'll update that in our CSS\nso let's see this is the\ndrop down menu turn that into a comment\nthis is the turn indicator\nand then this\noops\ndeleted that\nthis is going to be the game board\nand then finally this will be the\nscoreboard\njust a little bit of organization\nso what I'm going to do is actually\ncomment out the popover just for a\nminute and work on this button so if we\nsave this right now it's not going to\nshow up very well it's just showing up\njust like this and when you click it\nnothing happens we have the correct icon\nin here and then the correct text but\nnow we need to actually Center this and\nstyle it so you can see that I've given\nthis a menu class which in the original\nindex.css we'll go find this\num\nI've just given the menu class a\nposition of relative the reason for that\nis because\num we need that popover that opens to\nhave a relative reference so that it\nknows where to open relative to in the\nDom because it's going to have absolute\npositioning\nso we will put this where should we put\nthis here so we've got our turn stuff\nlet's just make a different section so\nthis will be the menu Styles just trying\nto keep this straight for everyone here\nso give that a position of relative\nthat's not going to do anything to it\nit's still going to look the same but\nthen once we add the menu items so if we\ngo back to our markup in HTML\nyou can see that we should have\nsome items those are commented out so\nwe're not quite ready for that\nLet's see we just need to style the menu\nbutton right now and I'll get rid of\nthis just for the moment that's going to\ncome in later as well as this data ID I\njust don't want to add anything earlier\nthan it applies\nso the only thing we don't have styled\nis this menu button so let's find that\nhere\nthere's our completed style so let's\ncopy that in right under menu\nyou can see that we want it to be a\nhundred percent width and height of its\ncontainer and if you remember from this\noriginal the container that we're\nworking with is what's highlighted here\nso this is just one grid item so if we\nsay it's a hundred percent of that it's\njust gonna be 150 by 50.\nand then we're going to display Flex so\nthe items within it are going to be Flex\nitems and we're going to give them space\naround and justify them Center\nso let's go ahead and\nshow you what that looks like for now\nso you can see that we've got this\nmenu item that's looking a lot better\nit's got the wrong Styles but we're\ngetting closer\nso let's come down\nuncomment these and here we're going to\ngive it a background color I believe\nthis was like a one-off color that\ndidn't fit into the color scheme so\nthat's why I'm defining it here without\na variable\nand then we want the text to be white\nwe want to give it a border and then\nmake that border rounded a little bit so\nwe'll go ahead and save that save the\nHTML and now you can see that our\nactions menu is looking exactly the same\nas this one\nnow the final thing that we have to do\num we can't we don't have JavaScript\nfunctionality to this yet but we can\nstill uh kind of mock out what this menu\nlooks like so as we click this and open\nthe menu we can still build this even\nthough we don't have JavaScript so to do\nthat all we need to do is uncomment this\ndiv\nand at the moment we haven't styled\nthese classes so it's going to look very\nweird you're just going to see it right\nbelow the actions menu\nbut what we want to do is make this\nitems class and then more importantly\nit's going to be hidden initially and\nthen our JavaScript is going to be\nwhat's responsible for unhiding that\nso here's what I'm going to do let's go\nahead and remove well no let's keep it\nas is and Define the items class\nso where is that search for items\nall right so here are the menu items\nI've actually selected the any element\nwith an items class that's within an uh\nelement with a menu class you don't\nreally have to do that we could just\ncopy in items directly because we don't\nhave\nany additional Styles going on there so\nwe've got the menu button that's always\ngoing to show and then the items are\ngoing to be\nthese items that you can click once\nthey're expanded so there's a couple\nreally important things going on here\nthe first thing is position absolute so\nbecause these items are within the menu\nclass the absolute positioning is going\nto be relative to the nearest parent\nelement that has a relative position on\nit and as you can see we've given that\nmenu a relative position so these items\nare going to be positioned absolutely\nrelative to that menu\nelement a little bit confusing but we've\ngone over that in Prior videos in the\nseries that I built out\nso we want to give that absolute\npositioning and a z index of 10 which\nmeans that it will sit over the grid of\nitems you don't want that to go behind\nso the top it'll be 60 pixels offset\nfrom the button itself\nso I'll show you what that looks like\nlet's go ahead and\njust look at those Styles right there\num actually let's let's go ahead and\ntake out everything except for the\nabsolute positioning\nokay so absolute position\nyou can see that nothing really has\nhappened here quite yet now once we\nuncomment the rest of this stuff\num let's go ahead and\ncomment that out for a second and we're\njust going to give it a the actual\npositioning that we want\nand now you're going to see that things\nare looking a little bit better now the\npositioning is going to be relative to\nthis right here so the top left corner\nso if you see the total height of this\nbutton is 50 pixels so that's why I gave\nit an offset of 60 pixels from the top\nso it will offset 50 pixels from this to\nget it to the bottom of the button and\nthen another 10 pixels to give it this\nlittle Gap that you're seeing right here\nand then of course we need to give it a\nbackground color a rounded border radius\nand some padding within the container\nso you'll see now it's looking a little\nbit better we still haven't styled the\nbuttons within it\num but then finally We'll add the Z\nindex we just want that there to make\nsure that it's O is sitting on top of\nthese items now the last thing we need\nto do is style the buttons in there\nbecause they don't look very good as\nyou'll see here they're just they're not\nsuper well styled or anything but they\nlook a little bit better so in the HTML\nyou can see that we've got a reset\nbutton and a new round button\nthese have data IDs on them I'm going to\nget rid of those because we don't need\nthat quite yet we're just going to style\nthem based on uh their parent so we're\ngoing to look for the menu and then\nitems within the menu and then any\nbutton that is within that is going to\nbe styled like this\nso\nwe can actually just remove the menu\nit'll still work if we\ndo the buttons relative to items so if\nwe save that now you'll see that the\nbuttons are looking a little bit better\nalthough you can see we don't have any\nlike hover effects we want the cursor to\nbecome a pointer so that the user knows\nthat they can click on them\nand to do that we're just going to need\nsome hover Styles so if you pop that in\nthere we're going to underline the text\nand give it a cursor pointer and now you\ncan see that this looks a little bit\nbetter in that regard so as you'll see\nthere's no border around this button in\nthe final until we actually click it and\nonce we click it it's been focused and\neverything's going to have a border so\nwe'll have to wait on that until we have\nsome JavaScript but for now you can see\nthat everything is being aligned\ncorrectly\nand then the last thing we need to do is\njust create that hidden class because as\nyou can see we've got the hidden class\nhere and then a border class these were\nshared styles that we would use across\nmultiple elements so I put them in\nshared utility classes within the CSS\nfile so we'll bring this to the top\nwe'll put it right under the body\nas shared utility classes and I'm just\ngoing to copy these in all right now so\nwe don't have to come back and do this\nin the future\nso we'll copy those in just a hidden\nclass that displays none and it has\nimportant on it just to make sure that\nnothing conflicts with it then we have\nsome shortcuts for yellow and turquoise\nyou don't have to do this it's just a\nlittle bit easier once we get into\nJavaScript and then just some standard\nborders and shadows that we'll be\nputting on different elements so once we\nadd those you'll see that given these\ntwo classes we've put on this it will\nhide that menu so you can go ahead and\nremove that hidden right there and it\nwill be showing back up with the Border\nbut for now we just want that hidden and\nthen JavaScript will unhide it for us\nonce we Implement that all right at this\npoint you can see now we've got some\nconflicting Styles going on over here\nwe'll be sure to come back to that and\nhandle that with some JavaScript as well\nas our actions menu that we can't really\ndo anything with at the moment it's not\nreally clickable because we need some\nJavaScript to enable that so we're done\nwith this first kind of row now these\ngrid squares or game board squares these\nwill be relatively easy to style so\nlet's get in and do that real quick\nso uh here's our game board and then\nlet's go ahead and look at the reference\num the final one\nyou can see that I've given each of\nthose a square class which dictates\ntheir Styles and then we've put a shadow\nremember we just defined those shared\nutility classes and I've defined a\nshared Shadow class that will apply to\neverything so that's just kind of\nkeeping the code dry making sure we're\nnot repeating ourselves too much\nso what I can do is now add those in so\nonce again I'm going to hit hold down\noption and click through this within vs\ncode to select multiple at once\nand we will add that shadow class\nnow furthermore we're going to want to\ngive\nwe don't need the IDS quite yet that\nwill come when we add some JavaScript so\nlet's save that and then finally we can\nget rid of our background red\nso wherever we put our squares\nwe don't want that background color\nanymore we want a much nicer looking one\nso you can see here are our Square\ncolors we wanted to span 100 the width\nand height of its container which as you\ncan see\num this is going to be the grid item\nitself so we want that to span 100 and I\ndon't think that is actually necessary\nnow that I'm looking at this because the\ngrid will control those so let's go\nahead and just copy this gray background\nI'm going to put a little rounded border\nand then we're going to make sure the\ncontent within is a it's a flex\ncontainer so that the content is\ncentered within and then the font size\nis going to be three Rems because we\nwant those icons that are sitting within\nto be extra large so we'll copy that\ninto the square class save it and now\nour board just started to look a lot\nbetter\nso you can see that we've got those\nShadows that you see on the final the\nonly thing that we're missing here is\nwhen we hover over them it doesn't do\nanything so it doesn't feel like to the\nuser that you can click\nso in order to cover that we need the\nhover Styles so that's what this is for\nthe hover style for a square we'll copy\nthat in we want to give it a cursor\npointer and then just a 90 opacity so\nnow when we hover it's going to act like\nit's actually clickable for now we're\ngoing to leave the icons kind of off of\nthis at the moment because that's once\nagain going to be controlled by\nJavaScript when we actually click these\num so the last thing we have is the\nscoreboard down here at the bottom this\nis relatively simple markup so we'll\nlook at the final project and you can\nsee we've um just got some basic HTML a\nbunch of div containers with some\nparagraph text and then a little styled\nscoreboard where it shows how many wins\nthey have so I'm going to just copy all\nof this stuff verbatim it's not very\ncomplicated you can read through it on\nyour own so we'll put that in the\nscoreboard section\nwe've already implemented the shadow\nclass in our shared Styles and I've\nadded an inline style here with the\ncolor mainly because it's just easier to\nread it's easier to see that within the\nHTML what color it is rather than making\na different class for each of these you\ncould do whatever you could add this to\nthe index.css but I just thought this\nwas a little more straightforward to\nread\nso once again let's get rid of the data\nIDs for the moment because those are\nmore applicable when we get to the\nJavaScript\nso this is our scoreboard and the last\nthing we need to do is implement the\nscore class because if we come over here\nyou can see that nothing looks very good\nwe've got the different colors but\nthey're not centering the text or\nstyling the text or anything like that\nso we need the score class implemented\nwhich we can go find in the final\nindex.css\num all right so here's the score class\nwe're going to replace the background\ncolor blue\noops\nwe need to get rid of that\nokay so we're just going to display Flex\nso that each uh each box is a flex\ncontainer and we're going to give it a\ntop to bottom Flex Direction and we're\ngoing to justify all the content and\nalign all the content to the center of\nit and then we're giving it a height of\n60 pixels which once again I don't think\nthat that was probably left over\nstuff because the grid should be\ndictating that and then we're going to\ngive it a little border radius so that\nit's rounded so let's save and you can\nsee that things show up uh okay here the\nlast thing we need is this text it's\nobviously not styled very well yet\ncompared to the final you can see that\nthere's a little bold Style on the title\nand then the number of wins is going to\nbe a little bit smaller\nso to do that we're going to do some sub\nselectors\nso the paragraph text within the score\nbox is going to have a font size of 14\npixels and a font weight of 600 if you\nscroll to the very top where we've\nimported our Google fonts\nyou can see that we've imported a font\nweight of four five in six hundred so\nthat's what allows us to use that font\nweight if you didn't import that then\nthis is not going to do anything\nso just a note there and then the span\nelement so this is where we actually\nshow how many wins the person has we're\ngoing to give it a font size of 12\npixels and a little margin on top\nso we'll save that and now you can see\nthat everything is styled correctly so\nat this point\num looking between the two we pretty\nmuch have the same exact design going\nhere and we're uh for the most part\ncompleted with this HTML and CSS portion\nso let's go ahead and scroll through\nthis final completed one and just make\nsure that we've got everything uh\nmatched up so we've got the footer in\nhere that's that's perfect uh looks like\nthe modal we need to still do I forgot\nabout that so we'll get to that and then\nin the main content we've got the scores\nscoreboard right there we've got all the\nsquares for the game board we've got the\nmenu implemented and then the turns\nimplemented and then I think pretty much\neverything else is done so HTML looks\ngood aside from this modal and then of\ncourse we'll add the script once we get\nto the JavaScript section and then from\na CSS standpoint let's go to the top\nmake sure we've got everything we've got\nthe import correct we've got our Styles\nthe CSS reset Global HTML and body\nstyles\num\nuh let's see\nwe added this Global style that looks\nlike it got\nput in the wrong place so let's go ahead\nand add that to our shared utility\nclasses\num that's not really supposed to be a\nutility class but that's Global so I\nforgot to add that\nand then the grid we've got that done\nthis is the responsiveness we got all\nthe utility classes we added the turn\nalong with the animations\nwe added the menu\nlooks like we covered all of this\nwe got the footer okay so really we have\ncompleted everything except for the\nmodal and when I say modal I'm talking\nabout\nwhat happens here when someone wins the\ngame so you can see it pops up this uh\nkind of focused element and then it puts\nthe game in the background makes it look\nas if this is the only thing that you\ncan click so in order to implement that\nwe obviously need some JavaScript but we\ncan implement it with just HTML and CSS\nand then we will come back to it once we\nhave some JavaScript available to us so\nthe first thing that you need to do when\nyou're implementing a modal is give it\nthe HTML markup so we will copy this\nover and you can notice that I'm putting\nit at the very bottom under the footer\nand one could argue that this might\nbelong in the main content\nbut really this is going to be hidden\ninitially and it's going to be\nabsolutely positioned or fixed\npositioning I think so it doesn't really\nmatter where in the document it goes it\nwill show up correctly\nso I think one could make the argument\nthat it goes in Maine like I said but\nlet's go ahead just to stay consistent\nand put it at the bottom and then since\nwe've got this hidden class of the you\nknow this will do display none let's get\nrid of that for the moment just because\nwe want to see what it looks like\nand if we go back to our project you can\nsee that the modal is right here it's at\nthe very bottom it's got this P tag and\nthen a button that says play again\nobviously this is nowhere near what we\nwant we want this centered and have a\nlittle backdrop so we've got some CSS\nthat we need to write\num and if you see in the final we've got\nall these modal Styles so I'm going to\ncopy all of this over at once at the\nvery bottom\ngive it its own section and then what\nI'm going to do is just comment things\nout so that we can progressively see\nwhat things are doing here\nokay\nso we've got everything copied in here\nthe first thing we need to do is Target\nthe container so this is the div\ncontainer with the class of modal\nso what we're doing here with this modal\ncontainer is we're giving a a display\nproperty of flex and then positioning of\nfixed now fixed positioning is relative\nto the entire document so what that or\nthe the viewport I should probably say\nso if we're looking at our viewport this\nentire screen here is the viewport\nitself so this is going to be relative\nto to the entire viewport well something\nlike absolute positioning is relative to\nthe nearest relatively displayed element\nso in this case since it's a full screen\ntakeover we want this to be a position\nof fixed we want to give it a width and\nheight of a hundred percent\nand that will work because up here at\nthe top we have given the HTML and body\na height of 100 and it's automatically\ngoing to expand the width of a hundred\npercent just based on how block elements\nare displayed so by giving it just this\nstuff\ndisplay Flex or we don't even need that\nyet position fixed with 100 height 100\nlet's save that and now you can see up\nhere it has moved so now this takeover\nthe modal spans the entire screen as you\ncan see now we want to take this content\nand put it right in the middle and give\nit some styles\nso what we need to do is uncomment\nthe justify content and align items and\nthen also the display Flex so really we\nneed to bring those up\njust so that not for functionality just\nso you can see it all together so\ndisplay flex and now you can see it's\nright in the middle and then finally if\nwe give it a background color it's\nreally going to start to pop out so this\nentire modal has this dark background\ncolor\nnow of course we need to style the\ncontents of the modal to also have a\nbackground color and that's where the\nmodal contents come in so if you see in\nthe index.html\nthe container within it has a class of\nmodal contents\nand what we want to do is just uncomment\nall of this stuff so I'll quickly walk\nyou through what's going on\num let's see\nthe first thing let's get rid of that\nfor a moment\nheight with okay let's get rid of these\nlast ones and start with this so the\nfirst thing we're doing is giving this\ncontainer a height of 150 pixels in a\nwidth of a hundred percent\nand then a Max width of 300 pixels so in\nother words what we're saying here is\nthat by default we want it to be 100\nwidth but if the screen is big enough to\nwear 100 width is larger than 300 pixels\nthen default to that Max width this is\njust a little trick that I use a lot for\nmobily responsive\num or mobile first CSS and that way it\nwill just look good on everything so\nlet's go ahead and save this and then go\nback and you can see our our modal\ncontent is coming together so to display\nor to show you what I mean here let's go\ndown to a smaller device and you can see\nthat that's kind of resizing\nas we are on the smaller device and then\nas it gets to a bigger one it's going to\nstop right now it's 238 pixels but once\nit reaches 300 it's going to stop\ngetting bigger so right there it reached\n300 stops getting bigger and it stays\ncentered\nso that's what this little trick is\ndoing right here now we want to display\nflex and basically align everything\nCenter so let's get rid of these\ncomments and now this right here should\nbasically Center everything so now you\ncan see player one wins and play again\nit's all centered so that looks good and\nthen finally we want to give it a flex\ngap of 20 pixels so that the content\nwithin it has some spacing we want the\ncontent to have text color of white and\nthen we want the whole thing to have a\nmargin of 10 pixels so let me comment\nthat out for a second here's our spacing\nwhite text and then you'll notice on the\nmobile device once it gets too small it\npushes right up against the edge so if\nwe just add a margin of 10 pixels you\ncan see it adds that little Gap there so\nthat's only for mobile device then the\nlast thing we just need to style this\nbutton so you can see that I've targeted\nany button button within the modal\ncontents and just giving it a padding of\n10 pixels background color of turquoise\ntext color of something a little darker\nthan that and then some rounded borders\nso if we save that you can see that the\nbutton now has these nice Styles so our\nmodal is complete and if we just give it\nthat hidden class back so if we put\nhidden on there it's going to be\ncompletely gone and then we comment that\nout\nand it's back so you can see how our\nJavaScript is basically going to take\nthat hidden class and it's going to\nremove it add it back remove it add it\nback based on when someone wins the game\nand then the play again button will also\ntrigger a JavaScript action\nall right so I know I said that I was\ngoing to kind of gloss over a lot of the\nHTML and CSS which I sort of did we did\na lot of copy pasting but hopefully that\nwas a good blend of you know how did we\nget to this final state but not typing\nevery last little letter\nso if you just toggle between the final\none final game right here and our\ncurrent game everything looks pretty\nmuch the same so HTML CSS that's done\nbut obviously when you click anything on\nthis board nothing is going to happen\nbecause we haven't hooked up JavaScript\nwhich is going to actually control the\ngame\num so we want to be able to you know\nmake plays and reset the game and do\nthings like that\nso at this point I would recommend if\nyou're watching this video to take a\nlittle break\num because we're going to switch from uh\nHTML and CSS mode to JavaScript mode\nwhich requires a little bit different\ntype of thinking\nso we're in the JavaScript section but\nsomething that happened to me when I was\nfirst starting out is I would always\njust be asking this simple question of\nwhen we're looking at JavaScript where\ndo you even start like what's the first\nthing that you think about when you're\ntrying to connect up some JavaScript\nfunctionality to a static HTML and CSS\napplication\nso looking at this we can click stuff\nbut it's not going to do anything and so\nthe question is where do we even start\nthinking about adding this these event\nlisteners and you know all the different\nState Management that happens to make\nthis game work\nso in asking this question I think the\nnext question that we need to ask is\nwhat actions can a user take in my app\nso we're building a game and there's\nreally three actions that a user can\ntake let's go back and look at the\nfinished game this is the the refactor\nthat I've done that's actually working\nand if we\nlet's reset everything new round get\neverything cleared out\nand the first action that a user can\ntake is they can click on one of these\nsquares on the game board\nso this is just you know a Player move\nthat is happening\nso that is the first thing that we need\nto jot down a player can make a game\nmove\nnow the second thing that they can do\nonce someone actually wins the game so\nplayer one wins we play again and you\ncan see down here player one has one win\nzero ties player two has zero wins\nso the next action that they can do is\nhit new round and that's going to clear\nout this scoreboard down here at the\nbottom\nso we can say clear or actually new\nround\nand then finally the last thing that\nthey can do is if they started a game\nand just want to reset it you can go to\nthe reset button and that will clear\nthings out and it won't touch the\nscoreboard\nso we can make a new round or reset the\ncurrent gain so I think with any\napplication any you know front-end\nproject like this that we do this is a\ngreat first question to ask yourself\njust so that you can get a better\nunderstanding of these requirements now\nof course once we have this question\nanswered you obviously have to start\nwriting code to make this happen within\nyour static HTML and CSS\nso there's a lot of different ways to\napproach that and ultimately where we're\nheaded by the end of this video is to\nhave some sort of model view controller\npattern that's going to help us organize\nour code to make this stuff happen and\nhandle these events correctly so model\nview controller is just a pretty common\narchitectural pattern that's commonly\nused for developing user interfaces\nso this is actually me from the future I\nwas editing this video and realizing\nthat I had created I had created this\ndiagram to kind of give an overview of\nthe MVC pattern and I didn't actually go\nthrough it so this is the MVC pattern\nmodel view controller and I wanted to\njust walk through kind of the the flow\nof this\nso as we're building our application\nthere's three separate concerns\nbasically we have the view which as\nyou'll see this is um event listeners\nthat handle either UI only events so\nlike toggling a menu\nas we'll see here just toggling this\nactions menu\nor we can manipulate the Dom and respond\nto State changes and what happens is the\nstore over here is kind of the the model\nand this is responsible for getting\nState and saving State and emitting\nState change events and this app in the\nmiddle is the controller and this is\nresponsible for kind of orchestrating\nbetween State and the view and making\nsure that you know State updates and the\nview updates all in one concise\nConsolidated place so I know this\nprobably doesn't make a whole lot of\nsense so I'll stop here but just keep\nthis in mind come back to it as we go\nthrough this build and hopefully this\ngives you a little visual representation\nof this pattern we're using now this is\ngoing to be a very challenging pattern\nto implement straight off you know right\noff the bat and it's not going to make a\nwhole lot of sense so what I've decided\nto do is almost a contrived example\nwhere we basically start with a more\nnaive approach where everything kind of\nsits in one file and we don't have\nreally any architectural patterns behind\nthis and we're going to progressively\niterate on that and get to that MVC\npattern that's a little bit more stable\nso we'll call this the video progression\nwe're going to start with you know a\nnaive approach all in one file\nthen we're going to refactor and iterate\nas we go\nand then finally we're going to end up\nwith MVC pattern that is\nand this is very important it is going\nto be easy or easier to debug later\nand it's going to be\neasier to extend and add features to\nlater\nnow these are really important parts of\nbuilding software because anytime you're\nbuilding software you're going to have\nusers that expect things to be improved\nand fixed and extended you want to add\nmore features so for example in our\nbasic tic-tac-toe game you might want to\nadd some leaderboard over here to the\nleft side or the right side and you\nmight want to be able to add user logins\nand you know registration and whatnot\nand being able to do that is going to be\nvery difficult if we haven't planned out\na little bit of architecture in a little\nbit of software design behind what we're\ndoing\nin other words everything in one file is\ngoing to quickly become unmanageable\nwith that said I think we can go ahead\nand get started now just thinking about\nthis a little bit\num\nlet's enter this down so we got some\nmore room\nwhat actions can a user take in my app\nwe've defined these and what I want to\nkind of point out is that these pretty\ndirectly oops did not mean to do that\nthese pretty directly map to event\nlisteners on HTML elements so in each\ncase when we look at this\nwe have individual elements so reset is\ngoing to be some sort of button new\nround is going to be a button and then\neach of these squares on the game board\nare going to be like a button or a div\nor something like that\nin every HTML element has event\nlisteners that you can hook up and then\nwhen that event happens you'll put in\nsome JavaScript logic that will maybe\nmanipulate the Dom and update some sort\nof persistent state in local storage or\nsession storage so on and so forth all\nright so I think that's enough planning\nfor the moment we're going to kind of\ncome back to this whiteboard a little\nbit to to plan out some more features in\nthe as we build this out but I want to\nget started just to kind of jump in so\nif we're looking at our HTML document we\nhave to ask the question how are we\ngoing to add JavaScript to this\nwell theoretically you can put\nJavascript pretty much anywhere in this\ndocument but you will always see a best\npractice of putting that JavaScript at\nthe end of the body tag in almost all\ncases and the reason for that is because\nwhen we are loading an HTML document in\na browser the browser has a bunch of\ncode that's running in the background\nthat actually has to read through this\nHTML document and parse it and parse all\nof the elements there and all the Styles\nattaching those to the elements and it\nhas to actually paint that to the screen\nnow this is called the critical\nrendering path and I would say this is a\nmore intermediate to Advanced concept\nthat you can kind of check out on your\nown\nbut the point of this is to say that\nwhen we load this HTML document in the\nbrowser it's actually going to make a\nnetwork request to get the document you\ncan see that over in the network tab\nyou'll see this first 200 get request\nlet's make this a little bit larger this\nis the initiator is the document and\nit's a type HTML and when we click this\nit's going to render the HTML here but\nif we look at the raw response that\nwe're getting this is the HTML document\nthat has been sent over to the browser\nand the browser has to go through and\nparse that now why is this significant\nwell the reason being is if we have\nJavaScript that happens or is placed\nhere at the top of the body what that\nmeans is that before the browser can\nparse any of the HTML and show that to\nthe user they have to run all of that\nJavaScript that is sitting there at the\ntop of the body and if you've got a\nlarge enough JavaScript bundle\nthat's going to block things and the\nuser's not going to see anything in the\nbrowser until that's done so that's just\na poor user experience and that's the\nreason that we'll generally put a script\ntag at the bottom of the body\nso once we've got the script tag here\nwe can run arbitrary JavaScript in it so\nwe can say hello world and save that and\nthen our live server is going to reload\ngo to the console and you'll see Hello\nWorld and just a side note you'll see\nthis get request that's airing out on\nthe favicon we don't even have this in\nour HTML document the browser just by\ndefault is going to look for this\nbecause it's kind of a standard so we\ncan safely ignore that but anyways you\ncan see we've got JavaScript running but\nobviously we don't want to do all of our\nJavaScript inline here because we're\ngoing to have to write enough of it to\nwhere this will get pretty cumbersome so\nideally what we need to do is make a\nscript that has a source tag and that\nSource tag is going to point to a\nJavascript file that we're going to add\nto our directory so we'll come over here\nto the live vanilla build add a new\nfolder called Js\nit could be anywhere but we can put this\nin and we'll call it app.js you can call\nit whatever you want main.js index.js\nany of those work\nso here let's go ahead and put our\nconsole.log\nhello\nworld\nsave that and at the moment it's not\ngoing to do anything if we refresh\nwell I guess we haven't saved the HTML\nyet so let's save that\nrefresh and you're not going to see\nanything you'll just see the source\nattribute of script is empty and that's\nbecause we need to populate that with a\npath to our app.js Javascript file so\nonce we save this you should see\neverything's hooked up we get Hello\nWorld in the browser and we have our\nbasic Javascript file so at this point\nnow that we've got a basic Javascript\nfile set up I want to go ahead and start\non these user actions that can happen so\nremember we've got these three user\nactions and there's actually a fourth\none that we are going to start with\nbecause it's probably the simplest\nimplementation and that one is toggle\nthe menu so this new round and reset\ncurrent game these are part of the menu\nbut we actually have to implement that\nso that this menu pops open and closes\nevery time it's clicked and that can't\nhappen with just HTML and CSS at least\nwithout something crazy going on so\nthat's the first thing that I want to do\nbecause it's rather simple to implement\nand then we'll start working on those\nuser actions and how do we track the\nstate of the game\nso the first thing that we're going to\ndo is kind of scaffold out our actions\nand to do that we need to identify the\nelements that we are going to select\nso I'll show you a better way to do this\nin a couple of minutes but we're going\nto start with kind of as I said the\nnaive approach of what you might think\nto do first\nso if we're looking for that menu\nyou're going to come to the drop down\nmenu section of our HTML and you'll see\nthat we've got a div with the class of\nmenu so probably the easiest way to\nselect this element with JavaScript is\ngoing to be let's call it menu and we're\ngoing to select the document which\nshould be globally available to us in\nthe browser runtime so that should be\navailable\nand you can see vs code has already kind\nof detected that this is available to us\nso it's giving us all this auto complete\nstuff of the browser apis\nso we can say\ndocument.queryselector and we can select\nby a class and select any element that\nhas the menu class which we know just to\nbe one div element now from this menu\nwhat we can do is add an event listener\nand we want to listen for the click\nevent and then on that callback we're\ngoing to get an event object which has a\nTarget which represents this element\nright here so if we were to console.log\nevent dot Target\nwe should see when that is clicked in\nthe user interface we're going to see\nthe element itself printed to the\nconsole and you can see that we've got\nthe button and if you open this up\nyou'll see all of these different\nattributes and these are all the things\nthat we can read off of this element\nTarget now to get this to actually\ntoggle down that menu if you remember\nfrom our HTML all we needed to do here\nis go down I'm sorry not there\nright here\nthis is the menu items and you can see\nthat we've put a hidden class on there\nso if we were to go back to the browser\nand select this element and go find that\ndiv that is hidden and then we can\nuncheck this hidden\nCSS class you'll see that well this\nactually shows the modal because we're\nsharing this hidden class with that\nmodal as well so let me refresh and just\nremove that class for a moment and\nyou'll see that now by default it is\nshowing so really all we need to do with\nJavaScript is toggle that class on and\noff every time that button is clicked so\nthis is the class we're targeting\nbut in order to do that we need the\nability to select this item so that we\ncan manipulate it so there's multiple\nways that we can do this but you can see\nwe've already selected this div element\nthat has a class of menu so we've\nalready got that context within\nJavaScript in the menu variable\nnow we can use that and select any div\nthat has the items class within it so a\nsimple way to do this is to say menu\nitems and we can say menu dot query\nselector\nand then look for the items class and\nfrom there we can then manipulate that\nso when we see that the button on the\nmenu has been clicked we can come down\nand say menu items\nand we can say class list and then we\nhave this method available called toggle\nand we can pass in a class of hidden and\nthat's going to toggle the hidden class\nback and forth every time the button is\nclicked\nso let's see if that works we click this\nclick it again click it again and you\ncan see over here on the right that\nhidden class is just being added and\nremoved each time\nso the question is how did I know to do\nthat that's always a good good question\nto ask and let's go ahead and go to mdn\nwhich is our favorite documentation for\nthe web and what are we going to search\nwe want to look for class\nlet's start with element\nso element is a base class it's the most\nGeneral base class from which all\nelement objects in document inherit in\nother words what that's saying is when\nwe do a query selector and get an\nelement back then all of those are going\nto have are going to inherit the\ninstance properties in instance methods\nof the element and if you look at\ninstance properties you'll see that we\nhave a class list available to us and\nfrom that class list if you look at the\nvalue you can see that we have a toggle\nmethod so the toggle method of Dom token\nlist removes an existing token from the\nlist and returns false if the token\ndoesn't exist it's added and the\nfunction returns true so that's how I\nwould go to find that this is available\nto us and that's how I knew that we had\na class list on the menu items which\nbasically is going to map to this right\nhere that's what we're dealing with in\nJavaScript and then the toggle method is\njust a convenience method that allows us\nto add and remove this class or whatever\nclass we pass in as an argument\nso just with a couple lines of code we\nnow have some functionality in our\napplication we can toggle this actions\nmenu now of course we can't click we\ncan't click the new round to reset and\nexpect it to do anything because we\nhaven't set click listeners on those yet\nbut what we do know is that we can\ntoggle it now there's already something\nwrong here and there's nothing terribly\nwrong but I'm going to start making a\nlist over here if we can remember where\nthis is\nwe'll say let's zoom in a little bit\nmake this a better font\nso best practices when\ndeveloping user interfaces\nall right so the first one that we're\ngoing to talk about here is global scope\nand namespaces\nso if we go back to our application\nthere's something that's a little bit\nwrong here and could cause you problems\nin the future if your app gets bigger\nand you start splitting this across\nmultiple script files and using similar\nvariables so let's say that we went\nahead and added another script to our\nindex.html so let's copy this down we'll\nsay second app.js\nand over here we're going to add a new\nfile called second app.js that will\ndelete in just a minute\nand I'm going to Define a variable\ncalled menu and this is just going to be\nsome object some JavaScript object\nOkay so we've got in our second app.js a\nvariable called menu in our in our first\napp.js we also have menu but they\nrepresent two different values so the\nquestion becomes which one's going to\nwin which one's going to take precedent\nor precedence so let's go in here and\nclick our button again and it seems to\nbe working okay so let's go back here\nand flip the order of these scripts and\nsave it now let's click here and this is\nno longer working and the reason being\nis because we have a redeclaration of\nthe menu variable and so it no longer\nknows what to do because we're trying to\nset an event listener on a constant\nobject variable because they're\nconflicting so as you can see this is\nalready a bit of a problem and the\nproblem here is not that we're defining\ntwo variables of the same name that's\ntotally acceptable within you know\nprogramming it's the fact that we're\ndeclaring the same name in the same\nscope furthermore we're putting it all\nin the global scope so believe it or not\nif we would go to this console here and\ntype menu\nyou can see that that value is an empty\nobject and then if we type menu items\nlet's see menu items will be undefined\nbecause we're deriving That Base Time\nmenu but let's go ahead and flip this\nscript\num oops\nokay so we're flipping them in the\ndifferent order so now this menu will\nwork okay and if we type menu it's now\nback to that element and menu items is\ngoing to be another element so you can\nsee that these are available in the\nglobal scope which is usually not a\ngreat idea so something that your o is\ngoing to want to do when you're\ndeveloping applications is make it into\na namespace\nso when I say namespace all I'm\nreferring to is a one variable that a\nsingle name that we can Encompass and\nstore\nbasically put a closure over all of our\nother variables so that it's not going\nto expose all these different variable\nnames in the global scope so a way that\nwe can do that is just defining a\nvariable called app and this will just\nbe a basic object to start with\nand within this app we're going to store\nsome of our selected items and then\nwe're also going to add an\ninitialization method\nso the first thing we'll do let's get\nthese the menu and menu items on this\nwithin this namespace and something\nthat's really nice to do is put a prefix\nin front of that so we'll just put a\ndollar sign that's a pretty standard\nconvention that people would use and so\nthis will be a property of this\nnamespace and this is where we're going\nto put\nall of our selected HTML elements okay\nso right here we're going to call it\nmenu and we can say\ndocument.queryselector looking for the\nmenu class and then we will also put\nmenu items but now we no longer can\nderive this based on menu because at\nthis point in the initialization of this\nobject we don't have menu available to\nus now you could try to do something\nlike app.menu in reference or sorry app\ndot dollar sign\ndot menu and then query selector and\nthen look for items so you could try\nthat but if we save that and go to the\ndocument here it's going to say unclot\nreference error can't access lexical\ndeclaration app before initialization so\nin other words we can't reference it\nhere because it hasn't initialized yet\nso a quick solution to that is to just\nreplace this instead of deriving it\nbased on that element we'll just look\nfor it in the document there's only one\nelement with a class of items so that\nshould not conflict with anything\nso we've got our selected elements we're\nlooking a lot better here and now if we\ngo back and let's go back down in our\nindex.html and flip the order to where\nit was broken before and now if we\nrefresh\num it's going to say menu is not defined\nwhere did we what are we doing here\noh I'm sorry that's because the event\nlistener is no longer going to work so\nlet's comment that out for just a second\nand things should work now you're not\ngoing to get any namespace errors this\nmenu is not going to conflict with this\nmenu because this is uh has a closure\nover it with app as the namespace so\nlet's get rid of second app that was\njust for demonstration we'll delete that\nand then in the HTML we can delete that\nreference so we're back to where we\nstarted\nand now what you'll see is if we go to\ntry to access the menu variable it's not\ngoing to be available so I guess there's\na built-in called menu bar but menu is\nnot available but if we go to app\ndot dollar sign dot menu that is how we\ncould access that element that we've\nselected so now all we have is a single\nnamespace called app and theoretically\nwe could Define that same variable in a\ndifferent file and it would conflict but\nit's much less likely and much easier to\ntrack all the variables we're defining\nwhen we only have one namespace that's\ncovering everything else that we're\ndefining so the next thing that we'll do\nto make this a little bit better we\ncould of course uncomment this down here\nand say app dot dollar sign\ndot menu dot add event listener and save\nthat and then we come here and it's\ngoing to say menu items is not defined\nI'm sorry because I have to reference\napp.dollarsign dot menu items as well\nand we're going to toggle this and it'll\nwork just fine now there's one\nImprovement we can make because right\nhere we're doing this in the global\nscope so a better way to do this is to\nmake an init method within our app\nnamespace\nso the init method is going to be where\nwe're going to add event listeners to\nour application and just to note this is\nes6 syntax this is just a shorthand way\nto define a function property on an\nobject that we're calling app\nso another way to do this would just be\na property and then you could add like\nan anonymous function just like that or\nyou could do an anonymous function like\nthat so on and so forth you could even\nDefine a function up here and assign it\nthere but this is just a quick way to do\nthat shorthand and then what we're going\nto do is move this initialization logic\ninto that method right here and what\nthat does for us is now it allows us to\ncontrol when our app is initialized and\nwhat we can do here is if we save this\nthis is no longer going to work because\nwe haven't initialized our app but a\nnice way to do this is say document dot\nadd event listener and we'll wait for\nthe document to fully load and you can\nsee in the documentation vs code\npopulates\num\nactually this is not for the load event\nbut this is basically waiting for the\nentire document to load so we know\nthings are safe to use and select and\nthen from here we can have a callback\nfunction that we'll call app.anit so\nanother way of doing that we could call\nit like this so app dot init and save it\nand if we do this it's not going to work\nand I believe the reason is this should\nbe window instead of document\nso let's try that looks like it works\nlet's go ahead and look at the reference\nhere so mdn document\nso we can look at the\num\ndocument here and then let's look at the\nevents reference\nso listen to these events using add\nevent listener on the document and it\nlooks like the load event is not\navailable there\nbut if we look at the window if we can\nfind that so let's look at window\nand then events here and this is where\nwe're going to find the loaded event I\nbelieve\nand you can see here in the load in\nunload events reference here's the load\nevent we're listening to and that's\nfired when the whole page has loaded\nincluding all dependent resources\nsuch as stylesheet images\nin other words this happens when all the\nHTML is in the document and we can start\nselecting it safely\nso that's why we're listening on the\nwindow here and basically we're just\nlistening for the load and then we're\ninitializing our application which will\nselect these elements and add that click\nlistener to our menu now a shorthand way\nto refactor this rather than this syntax\nwe can just remove this and remove the\ncall and that's a more concise way to\nwrite that and we'll have the same exact\nfunctionality just like this all right\nso we have a basic toggle menu that's\nworking but the next thing that we need\nto do is kind of start on this game and\nand working on the state of tracking the\ndifferent moves that a player can do\nso let's first scaffold out kind of the\nevents that we're going to have to\nlisten to and the elements that we're\ngoing to have to select\nand then we will come back and fill in\nthat logic with an actual implementation\nso as you know init is where we're going\nto register all of these event listeners\nto handle these\num user events so what we can do is\nfirst Define the elements that we are\ngoing to trigger those events on so\nlet's go back to the game and the first\ntwo are pretty easy we need to Target\nthe reset button in the new round button\nso one way that we could do that you can\nsee that we've got two buttons reset in\nnew round\nso\nthere's no selectors on either of these\nbuttons so what you could do is just add\na class but one thing that I'm going to\nshow you here to refactor and we're\ngoing to do this as we go is add a data\nID so this is a much more stable way to\nselect elements when you're querying\nthem in the Dom\nso if you go to mdn and type data dash\nstar\nyou will see this attribute which is\nglobal attributes form a class of\nattributes called custom data attributes\nthis allows you to add proprietary\ninformation to be exchanged between HTML\nand its Dom representation in other\nwords we can give data ID or data\nwhatever we want to Define and that's\ngoing to allow us to have a stable\nselector so\nlet's come back\nfirst to Excalibur uh Excalibur here\nso we've got Global scope and namespaces\nand now let's talk about stable\nselectors\ndata\nstar attributes\nokay so what do I mean by that if we go\nto index.html\nyou know we could select these buttons\nindirectly by looking for the menu div\nand then looking for items and then\ngetting the index of the button to\nselect which one we want but a more\nstable way to do this let's start with\nmenu up here is to just add a data ID\nand we're going to call this menu\nso let's save this document and go back\nto app.js and update our query selector\nhere for menu so instead of selecting\nthe class we're going to select\nsomething we'll put some brackets which\nsays we're selecting an attribute called\nData Dash ID and that will be equal to\nmenu so let's save that and see if\nthings are working okay in our app and\nit looks like they are we're allowed to\nselect that and let's break it on\npurpose so take out that U just to break\nthings and now it's going to say\nuncaught type air app dot menu is null\nso you know that this is working\nand we could also call this whatever we\nwanted so\ndata custom selector just to demonstrate\nand you could update this to say custom\nselector and that's going to work just\nfine we'll still have that being\nselected appropriately so data ID is\njust a convention that Avo has used and\nI think it's a good succinct one that\nyou can use as well so we're going to\nput a data ID on each of these elements\nthat we want to select and the main\nreason for doing this is to have\nstability so if you changed the name of\nthis class for menu or if you rearranged\nthe HTML elements in the future you\ndon't want all of your JavaScript to all\nof a sudden break because you changed a\nstyle element of your document you don't\nwant to couple those two pieces together\nand so this is a way to keep things a\nlot more stable\nso we'll come down here and add a data\nID for this of menu items\nand then we'll add a data ID for this\nreset button\nsame thing here oops\nnew round button okay so now we have\nselectors that are a lot more stable for\nall those and we're going to register\nthem here\nso we need two more we need\na reset button\nin the new round button\nand we're going to just copy these query\nselectors so we don't have to rewrite\nthat every time\nand then we'll replace this with menu\nDash items is what we named it this one\nwe called it reset button and this one\nwas new round button so if we got that\nright we should have all of these being\nselected and we should see no errors\nwithin the document and you don't see\nany errors other than this one we know\nabout and this is working fine so this\nhas been updated correctly at this point\nit should be relatively simple to add\nthe rest of our actions here\nso we've already got the event listener\nfor the menu toggling now we're going to\nselect the reset button and add an event\nlistener\nwe want to wait for a click on that\nand then open up a callback function\nthat receives the event\nand we'll just say\nreset the game\nthat'll be our placeholder for now\nwe can just copy this down almost do it\nverbatim instead of reset button it will\nbe new round button\nand we'll say\nadd a new round\nso we've registered those click\nlisteners and now if we open up the\nactions it'll toggle if we hit reset it\nwill reset the game and if we hit new\nround it will add a new round so we've\ngot these hooked up okay and then the\nlast thing that we need to do is\nregister a click listener on each of\nthese squares now there's a better way\nto do this than what I'm about to show\nyou but the way that I'm about to show\nyou is probably the most intuitive in\nthe simplest way to do it so what we\nwill do is let's look at the index.html\nand find these game board squares that\nwe're trying to select\nso the quickest way to do to do this is\nlook let's go ahead and add a data ID\nand I believe we can duplicate these\ndata IDs so let's just call it square\nand then we'll add that for all of these\nproperties here so I'll hold down option\nand just click in vs code you can\nhighlight a bunch at once\nand then we'll add data Dash ID equal to\nSquare\nokay so now we have a stable selector on\nall of these and what we can do here\nin our selectors\nis say let's say squares\nand we'll say document but instead of\nquery selector we're going to do query\nselector all so we want all of the\nelements that have a data ID\nof the square\nand if we go to the init method and just\nconsole.log app dot dollar sign dot\nsquares\nand look at that in the Dom you can see\nthat we have the node a node list which\nhas all nine of those squares\nrepresented here now the last thing we\ndon't have a unique ID on each of these\nwe of course have an index to our array\nbut it would be nice if we just had an\nID so that we had kind of a coordinate\nto map this to\nso one way we can do that is to just\nclick here and go down to each of these\nand give it\na basic HTML ID property or attribute\nokay so I'll start every all of them\nwith one and then we'll just go down and\nreplace all these\nso now when we select these the node\nlist is going to have an ID on each of\nthem so we know when they're clicked\nwhich ID that we're dealing with\nso going back we can add an event\nlistener to all of these but since it's\na node list we need to iterate through\nthem so we can say app.dollarsine dot\nsquares and then we'll just do a four\neach so for each Square this should be a\nnode in the Dom so we should be able to\nsay Square dot add event listener\nand then add a click listener and then\nthe event that is returned from there\nshould give us an ID so let's go ahead\nand console log\nsquare with ID and then we'll\ninterpolate event dot Target dot ID\nwas clicked so we can remove this\nconsole log and now what we would expect\nis every time we click them we will get\nthe ID back of the square that was\nclicked so this one should be square id1\nthis should be nine so we're going one\ntwo three four five six seven eight nine\nso let's click one\nand you can see square with id1 was\nclicked go down here square with id9 was\nclicked so that's a pretty simple way to\nregister an event listener there for\neach of those squares so now going back\nto our initial question that we had\nasked\nlet's go over to what actions can the\nuser take in the app we came up with\nfour of them a player can make a game\nmove new round reset current game and\ntoggle menu and if we now look at our\ninit method we have four events that are\nbeing listened to on different Dom\nelements\nso one organization method that we can\nuse instead of putting this all in the\ninit method we'll leave the init method\nthere and Define a new one and let's\njust call this register uh\nregister events or event listeners or\nsomething like that\nand this is just going to be an\norganizational uh technique here where\nwe can just put all of that same type of\nfunctionality\nwithin that method and then we'll keep\nthe init method pretty clean so all\nwe'll say is app.register event\nlisteners\nso now what's happening is when the\nwindow loads the document we're going to\ncall init and a knit is going to\nregister all of those event listeners\nfor us and if we go back to our app we\nshould be able to toggle this reset the\ngame\nnew round and then click any of these\nsquares and get an ID returned from the\nsquares so at this point we have a\ntemplate for our application and we've\nstubbed out some methods that we're\ngoing to need to implement so as you can\nsee here we basically we've got this one\ndone\nthis is toggling the menu so we'll call\nthat done I'll just add some comments\nhere so we can track this one is going\nto be a to do item\nbecause we have not implemented what\nhappens when we reset the game or add a\nnew round\nand then this bottom one is also to do\num but this is probably what we're going\nto work on next but speaking of what to\nwork on next that is a really good\nquestion as you're building an app like\nthis how do you know what comes next\nwell in this case we can kind of go\nthrough the process of elimination with\nthese actions reset and new round those\nare not going to be possible to\nimplement until we have a functioning\ntic-tac-toe game that we can actually\nreset\nso let's go back to our notes here and I\nwant to take a minute to go off of this\npoint here\nlet me get my arrows worked out here not\nsuper familiar with how to use this\nquite yet\nso we're going off of this point of\nplayer can make a game move so the next\nquestion we've got to ask is what is a\ngame move well there's a couple\nconsiderations that we'll have to think\nabout here\none being how do we determine who is up\nwho is the player that is up next so let\nme add that as a requirement here\num who is currently up\nthe next thing we want to know is did\nthe latest move cause a tie or a game\nwin\nand then we also want to know\nwho won or was it a tie\nand then what else can we think about\nhere let's go to our final refactor the\none that's actually working here up here\nthis is our question of whose turn is it\nwe need to know that so we can display\nthat we also need to know that so we\nknow which icon to display when it's\nclicked and then as you see we have a\nmodal that pop up pops up when someone\nactually wins the game so we need to\nknow when that happens and then at that\npoint when we click play again we need\nto be able to reset all of the state to\na blank fresh game so those are the main\nquestions that we have to ask\num so who is currently up this is for\nthe turn\nindicator icon to play\num and I think that's pretty much it so\nwe'll take these step by step because\num it's kind of tough to think through\nall of this at once\nas you get more advanced in building\nthese things you can probably map all\nthis stuff out from the beginning and\nthat's kind of my first step when I'm\nbuilding this is trying to map out what\ndoes the state of this application\nrequire and what do I need to track\num one thing I'll add here is also the\nquestion of what state do I need to\ntrack\nso we'll talk about this concept a\nlittle bit here in a minute but I'm\ngoing to kind of organically talk about\nthis throughout the rest of the video\nbecause it's quite challenging at times\nif you're not super familiar so when I\nsay state I'm really just talking about\nyou know what does the current state of\nthe game look like so that might be\nthings like\num current player might be total wins by\nplayer\nwe can also track total type here total\nties and then prior game history those\nkind of things are the things that we'll\nwant to track and to do that we're going\nto just build this you know step by step\nand we'll eventually come to some sort\nof model that we'll use to track that\nstate so not going to talk too much\nabout that at the moment let's dive in\nand start building this out and you'll\nstart to see how this makes more sense\nin a minute\nso the first thing that I'm going to do\nis try to implement a basic move so in\nother words I want to display an icon in\nthese squares when they're clicked we're\nobviously already registering event and\ngetting the ID of the square that was\nclicked so that is useful to us but we\nneed to change the Dom or the UI when\nthat happens\nand to do that the first thing I will\ngenerally do is go to the HTML and just\nmock something up so just figure out how\nto statically display that for the first\ntime\nso I believe all we're going to need to\ndo is put in an I tag with a class\nand then that's going to be one of our\nfont awesome icons so let me just check\nmy references right here to see which\nicon we're dealing with\nokay so it really should just be fa\nsolid is the base class and then it's\ngoing to be fax or FAO so we'll uh\nsimulate both of those here just to make\nsure that our game board is going to\ndisplay things correctly\nso fax and FAO\nand you can see that we've got those\ndisplaying correctly so this is the\nright size obviously these are not the\nright colors\nif we were to open up our CSS if you\nremember from earlier in the video we\nhad some of these shared classes here at\nthe top somewhere and in these shared\nutility classes I gave us a yellow and a\nturquoise class just so that things are\na little bit easier to deal with and\neasier to remember so what we can do is\njust pass in yellow\nand then turquoise\ninto that class list and then our X's\nand O's will be the right color now\nobviously you can see we've got\nmismatches just about everywhere we'll\nget that worked out in just a moment\nso if we're trying to do this with\nJavaScript obviously we can't just\nstatically put in these different icons\nwe're going to basically build these\nelements and add them as children to the\nappropriate div that has been clicked so\nwhat I'm going to do is open up app.js\nagain\nand right down here in our event\nlisteners for each of the squares I'm\ngoing to just copy over this HTML and\nadd it as a comment and that's just for\nreference so that we can look at it and\ntranslate it into JavaScript\nso we've got fax and then FAO\nthese are the two that we're dealing\nwith\nso we can get rid of those here in the\nHTML\nand then in app.js we know which ID was\nclicked and the event itself carries a\nTarget which represents the individual\nsquare that was clicked so what we could\ndo just to start us out\nis actually derive that or not derived\nbut create this I tag so let's call it\nan icon and we can say\ndocument.create element is one of the\nbuilt-in browser API or Dom methods and\nwe just need to give that a tag of I\nso we've created the element and then we\ncan say icon I'm sorry not redefining it\nwe can say icon.class list and then I\nbelieve we can just\num add an array of tokens and what that\nwould be the classes themselves\nso we would want to add f a solid\nf a x and then let's say yellow so we're\njust kind of hard coding an element\nwe'll hard code a yellow X in this case\nand then from here we've created the\nelement but we need to insert it into\nthe Target that was clicked so really\nwhat we could do is just say\nevent.target dot replace children\nand then I think we can just pass in the\nicon so that should work let's go ahead\nand click\nand you can see something's going on\nit's not working so let's inspect\nyou can see there's some sort of content\nin these div elements\nand it looks like our icon class or icon\nelement has been added but the class\nlist has commas\nso we need to not do it that way we're\nnot supposed to pass an array I guess\nmaybe we're just supposed to pass\num multiple arguments let's try that\nokay so that's working better and now\nyou can see that the\ncontent within here or where did we go\nthe content within the one we clicked\nhas the correct class list now so now\nanytime we click any of these we're\ngoing to get a yellow X\nand obviously this is not useful yet\nwe're just filling them up with x's and\nif we click them twice we also can have\nproblematic Behavior because\nwe're not checking to see if there's an\nX already there we're just adding it no\nmatter what so that is problematic but\nat least we've got something working\nhere\nso ideally what we want to do is know\nwhose turn it is and then depending on\nthat turn we'll choose either fax or FAO\nand then the yellow or turquoise color\nand at this point we've finally reached\na place where we can start talking about\nwhat state is and what state management\nreally represents here for us\nso to do that I'm going to pop over to\nthe Whiteboard again and we're talking\nabout game moves and what state do I\nneed to track well I think the next\nquestion really is\nwhat is state\nwell there's really two types of state\nthat we can talk about so we have client\nState and then we have server State and\nthese are very loose terms so there's a\nlittle bit of an overlap between the two\nbut these are the two kind of\ncategorizations that I would be using so\nwhen we're talking about client state\nthe way that I think about that is any\nsort of\num\nuh state that we have within the Dom\nthat does not need to change anything\nthat is persisted long term so I guess\nthat's a complicated way of saying\nsomething like this actions menu popping\nopen and closed every time we open and\nclose this the client-side state is\nchanging\nbut we're not actually doing anything\nyou know to persist that change so if we\nopened this actions menu up and then\nrefreshed the page it's going to close\nevery time because we're not tracking\nthat state across browser refreshes it's\njust temporary in-memory state that\nwe're tracking so in other words client\nstate\na good example of that let's just\nmake an example over here\nlet's add some code here so let's say\nclient state\nequal to and make this a hopefully was\ngoing to get that a little smaller but\nlet's open up some brackets\nso client State might be something like\nis menu open and we'll start that with\nfalse and so as you can see when we\nclick this menu that state variable is\ngoing to update it's going to be either\nopen or closed true or false and that's\nnot going to persist across browser\nrefreshes now server State and server\nagain is kind of a loose term here\nbecause we don't actually have a server\nwe're going to be working with local\nstorage to kind of emulate that but\ngenerally server state is kind of what\nyou would think of as a database so it's\na snapshot in time it's a snapshot of\nwhat the current data looks like\nso this would be more conducive to\nsomething like a game move so we could\ncopy this down\nforeign\nState could be something like a current\nplayer\nand let's just put an ID in there let's\nsay player one is the current player and\nthen we could also add things like we've\ngot the current player how about the\nhistory of games so we might have an\narray filled with all the different\ngames that we had played in the past\nwe could also track things like\num we can also track things like the\ncurrent game so this might be an array\nof game moves that have happened and\nthat way we can track across browser\nrefreshes you know who has moved in\nwhich Square\nso these two types of State we're going\nto need to track and we're going to\neventually refactor this to be a little\nbit more stable but as I said in our\nkind of game plan over here in this\nvideo progression we're doing everything\nin one file as a naive approach and then\nwe're going to refactor it to be a\nlittle bit more stable so what that\nlooks like for us in terms of state I'm\njust going to create a state property on\nthe app\nokay and to start out state is not going\nto be persistent across browser\nrefreshes because this is just a\nvariable and every time we refresh this\nis going to be re-initialized and\nreassigned so the first piece of state\nthat we want to track is current\nplayer and for now I'm just going to\nkeep things very simple and we're going\nto say that each player is represented\nby a number it's going to be either one\nor two so we'll say that player one is\ngoing to always start the game so we'll\ntrack the current player and that alone\nwill allow us to decide down here in our\nevent listener which icon that we need\nto put in the Square\nso obviously we need to update that\nstate each time a move happens so if we\nwere to\num\nwe'll leave this console log here but\nevery time something is clicked what\nwe're going to need to do is say the\ncurrent player is going to be equal to\napp.state.current player now you don't\nneed to save that to a variable I'm just\ndoing that to kind of be a little more\nclear here\nand then we're going to say if the\ncurrent player equals one\nwe're going to add a certain element to\nthe Dom otherwise we'll just assume\nthere's only two players here we'll add\na different one so in this case let's\njust say that player one is going to be\na yellow X so we can create the icon no\nmatter what because\nit doesn't matter that's not styled at\nall but the class list is what we're\ngoing to use based on the player so if\nit's player one we're going to have a\nyellow X and if it's player 2 we're\ngoing to have a turquoise o\nso we'll put in turquoise right there\nbut the thing is we need to of course\nupdate that state every time this move\nhappens so we'll go ahead and create\nthis icon add the class list and then\nwhat we're going to do here is say app\ndot state DOT currentplayer\nis going to be set equal to whoever is\nnot playing this move so in other words\nif let's say the current player is one\nand has created you know this class list\nso we're going to say if the app dot\nstate that current player equals one\nthen we're going to set the current\nplayer equal to two otherwise we're\ngoing to set it equal to one so in other\nwords it's sort of just a toggle on\nwho's playing the game and then finally\nwe'll take the event Target which is the\nsquare and replace the contents of that\nsquare with the appropriate icon and so\nnext time this is clicked we'll know\nwhich player to use so I'm going to also\nlog this up top\nwe'll say the current player is and then\nwe'll say\napp.state.current player so we can get\nrid of these down here\nand then there's one more important\nthing as you saw earlier we can't play\nin a square twice so we need to know if\nthe square already has some sort of\nelement within it let's go ahead and\njust save this and see what we're\ndealing with now in our game\nso we'll click a square and then the\nnext one should be an o\nand it is and that's because we've\nupdated the state every time we see a\nnew play now I think if I'm not mistaken\nwhat's going to happen if we click this\ntwice\nso let's say that we click this Square\nagain it's going to add an X to next to\nthe O which is obviously invalid and now\nit's going to think that the O's turn is\nup even though X should still be up\nbecause they played in the wrong spot so\nthat's obviously a problem and the way\nthat we fix that is basically putting a\ncheck within this click event and we're\njust going to say is there something in\nthat square and if so we're going to\nreturn early and we're not going to\nallow the player to actually play\nand this will prevent us from updating\nthe current player in state and it will\nforce them to replay before the next\nplayer can go so the question is how do\nwe check that well we're going to\neventually do this to be\num we're going to eventually check this\nin a much more stable way but for now\nI'm just going to keep things simple\nwe're going to go to mdn and go back to\nthe element reference\nso elements reference\noops I clicked the wrong one I just want\nliterally the element class\nso which one is that\nI think this will work so we've got\nelement.get attribute now we can look\nthrough all of the different methods\nthat are available on\nan element and there should be one to\ncheck if there are children already\nwithin that element I'm not finding it\nhere so I'm just going to search what I\nknow here has child nodes and we're not\nfinding it on element because it exists\non the base class of node\nthis is like the abstract Base Class pun\nwhich many other Dom API objects are\nbased so basically any element as it\nmentions here will inherit all the\nmethods of node\nso we can use this has child nodes\nmethod and this returns a Boolean value\nindicating whether the given node has\nchild nodes or not\nin other words what we can do here is\nthe first thing we do is say if\nevent.target dot has child nodes\nso if there's any X or o in there we're\njust going to return we're not going to\nupdate anything we're not going to\nupdate the state we'll just return from\nthat function early so by adding that I\nbelieve we should get the desired\nBehavior here so we'll click one click\ntwo and then try to click this one again\nand it's not working let's see why so I\nhad to pause the video to figure out\nwhat was going wrong here and it's a\nlittle bit tricky bad programming on my\npart but basically what happened here\nis when we clicked on the icon itself\nyou can see if I like specifically click\non one of these icons it's going to\ncontinue adding icons now if I click\nsomewhere else in the Square it's going\nto have the correct behavior and what's\nactually happening here\nis the event Target so right here is\ngoing to represent what was actually\nclicked so the element that was actually\nclicked in the Dom now the square up\nhere is going to represent the square\nthat we're actually looking to Target\nfor this Behavior\nso if I were to\nconsole log this\nlet's go ahead and say\num console log\nwe'll say the square\nand then we'll pass in the Square itself\nand then we'll console log the event\nTarget\nand then we'll pass in event dot Target\nnow what you're going to see is as we\nclick right here\nthe square\nis going to represent that div and the\nevent Target represents the div because\nwe clicked on the same thing now if I\nput the mouse in the middle of that icon\nremember we now have a new HTML element\nright here if I click that it's going to\nregister the event Target as that I tag\nrather than the div so what you'll see\nhere is that the square and the event\nTarget will not match up when I click\nthis and we'll have that weird Behavior\nso you see the square is the div and the\nevent Target is the actual icon to make\nthis Behavior more stable\nand just better programming practice in\ngeneral\nwe should be updating the square element\nitself and not relying on the event\nTarget because we can't control whether\nthe user is going to click\nthe icon or the square we need it to\nwork no matter what\nso let's remove these console logs and\nthen instead of checking whether the\nevent target has child nodes we're going\nto check if the square has child nodes\nand then furthermore where we're\nreplacing the children down here we\ndon't want to replace the event targets\nchildren we want to replace the square\nso that will make all of this Behavior a\nlot more stable and when we save this we\nshould be able to click in any Square as\nmany times as we want and you can see\nour console log is going to say the\ncurrent player is one still so if I'm\nclicking any of these the turn is not\nchanging the Turn Only changes when we\nthe player clicks a valid square and\nthen we're going to have a different\ncurrent player so we've got this working\nthis is kind of some boilerplate for\nwhat we're going for we will refactor\nthis to be a little bit more stable some\nbetter practices but for now this works\njust fine I'm going to clean this up we\ndon't need these console logs anymore\num the next thing that we're going to\nneed to do\nis if we just keep clicking these and\nplaying the game\nyou can see when the O player I think\nthat's player two when they win the game\nnothing happens and that's because we\nhaven't programmed anything to happen so\nwe need a way to detect when this game\nends and there's going to be different\npatterns that represent a winning game\nand then of course we can also if we\nrefresh reset everything we can also end\nup in a tie so I believe if we\nlet's see if I can even produce a tie\nhere\num\nrequires a little bit of thinking to do\nthat so in this case the game should be\na tie and we should be able to recognize\nthat now they're in the original project\nthat I'm I was refactoring here they had\na pretty nice way of handling this and\nthey'll want to highlight that\nso if we open up main.js from the\noriginal project\num what they were doing to check whether\nthe game was won is they had an uh\nbasically an array of winning patterns\nand they were basically just checking\nwhich squares were currently\num had plays in them and did they match\nthese winning patterns and that's how\nthey would determine whether the game\nwas a winning game so I'm going to copy\nthis array here and I'll show you how\nwe're going to use this\nso let's start writing some comments\nhere because our method is getting a\nlittle bit large so check if there is\nalready a play if so return early\nbecause we don't want any turns to\nchange or anything like that\nthen we'll come down here and we'll get\nthe current player we'll create the icon\nand we will add that icon to the div\nright down here and then the next thing\nthat we need to do is let's let's\nactually put a comment here\ndetermine\nwhich player\nicon to add to the square\nand then finally check if there is a\nwinner or tie game once again we're\ngoing to refactor all this so I know\nit's getting pretty busy in this method\nwe're going to refactor it I'll show you\na better way to do this for now we're\ngoing to paste in those winning patterns\nand so the question becomes how do we\nknow the current state of this game how\ndo we know what squares have been played\nin and which ones have not been and\nfurthermore which player has played in\neach of the squares now we could of\ncourse do some elaborate check where we\nbasically say you know we search the\ncurrent Square we check if it has\nanything in it and then we could maybe\ncheck the class list and check if it's\nan fax or an FAO and then basically Loop\nthrough all of the squares on the board\nto determine what the current state of\nthe game is but what's a lot easier to\ndo is to just track that and State as we\ngo so rather than doing this sort of\ncheck we can just check the state but\nfirst we need to Define what that state\nis so what we'll say is that we need to\ntrack an array of game moves\nand those game moves are just going to\nbe the player that has played\nso what it might look like is something\nlike this where we have\num I'm sorry we we need to track the\nsquare itself too so we're going to say\nthe square ID is going to be 1 and then\nthe player is going to be one so that\nmove right there would represent if\nplayer one clicks this top left Square\nso we basically are just tracking a\nsquare ID and a player ID in the moves\narray so let's empty that out that's\ngoing to be our default state is an\nempty game\nand then down here within this event\nlistener\nas you can see we're updating the\ncurrent player in state\nbut what we also want to do is we want\nto push a move to state so app.state dot\nmoves and then we want to push a new\nmove that is going to be an object with\na square ID\nand let's just\num reference the square itself\nor we could also say the yeah we'll just\nsay the square dot ID and this needs to\nbe a number so we'll add a little\ncoercion there to make that a number\ntype\nand then the player we'll just call it\nthe player ID just for consistency\nthat's going to be equal to the current\nplayer of the game so\nwe've already updated the current player\nright here to be the next player so we\nneed to actually put this state update\nright above that so that the current\nplayer is right so we'll say\num\nI don't know why we're checking this\nright here we've already extracted that\nthere so let me refactor that real quick\nand then we can put current player right\nthere\nand then just for us to see what's going\non here I'm going to console log\napp.state after those updates have\nhappened\nat the moment this isn't going to change\nany of the behavior we're just tracking\nanother state variable so let's click\nsomething click another click another\nand you can start to see we're building\nup State we're building up an array of\nmoves and you can see that square id1\nhas a move from player id1 so the x\nsquare 2 has a player ID of 2 an O and\nsquare 3 has a player ID of 1 and an X\nso you can see as we add moves we are\nadding to that array of moves now what's\ninteresting about this is that we can\nalso derive some State here we can\nsimplify things a little bit so if we go\nback up to our state you got to ask\nyourself well who is currently up based\non the number of moves that are in that\narray we actually don't need to track\nthe current player because we will be\nable to derive that based on the moves\nthat have been played\nso let's actually delete the current\nplayer from State all we really need to\ntrack is moves and I'll show you how to\nderive that right here so the first\nthing that we want to update\num is let's see\nthe current player variable right here\nso\nwhat we can do is we can say if\napp.state.moves\num\nthat length\nequals zero so if there's been no plays\nat all then we're going to say the\ncurrent player is one we'll just always\nsay that the current player is one they\nstart the game every time\nif it is not equal to zero then we're\ngoing to check for the last move of the\ngame so the last element of that array\nand then grab the player who is opposite\nof that player so this is going to\nrequire a little bit more logic than we\nhave right here\num so I'm going to break that out\nso we'll say the last move\nis\napp.state.moves and then you can use a\nlittle convenience method you could of\ncourse check it by saying\napp.state.moves\ndot length minus one that's a typical\nway that you could grab the last element\nof the array but there's a more concise\nway with JavaScript you can just say at\nnegative one which will grab the last\nelement of that array now of course we\ndon't know if that array has anything in\nit so\nthat could be I believe undefined if\nthere's nothing in the array\nso now we can come down to the current\nplayer\nwe can say if the length of the array is\nzero we'll go with one otherwise we're\ngoing to grab the last move and that\nmove\nhas a player ID in it so it's going to\nnot be the player ID of the last move\nit's actually going to be the opposite\nof that so what we can say is a little\nconvenience method get opposite player\nand we'll just pass in a player ID\nand we'll say if player ID\nequals one then we're going to pass in\nplayer two otherwise one\nso we'll say get opposite player of the\nlast move\nsorry this is getting a little\ncomplicated we'll break this out into\nsome helper methods later\nbut basically what we're doing is we're\nfinding the last move we've got a helper\nmethod that gets the opposite player and\nthen we're checking to see if there's\nany moves if there is\nif there's not any moves then player one\nis up because it's the beginning of the\ngame otherwise we're going to get the\nopposite player to the last move that\nwas played and that will give us our\ncurrent player and that way we don't\nhave to track any of that state and that\nshould flow down to here where we're\nchecking and adding moves to the game so\nlet's save that and see if it works\nyou can see that we're alternating and\nwe can click on these as many times as\nwe want and it's pretty stable now\nthere's one more thing that we can do\nnow that we're tracking the game moves\nwe don't really need to check whether\nthe square has child nodes because\nthat's really relying on the Dom itself\nit would be better\njust to express what we're trying to do\nto check the state of the game so let's\nsay\num\nwe need a helper method called has move\nand what we're going to do is just\nDefine a function\nthat takes a square\nactually a square ID so it'll be a\nnumber and then we're going to just\nbasically return or we're going to say\nexisting move is equal to\napp.state.moves and then we're going to\nlook for that square ID in that array so\nwe're going to call find\nand we're going to look at the move\nand check if the square ID matches the\nsquare ID that we're passing into this\nhelper function and then we're going to\nreturn the existing move does not equal\nnull and that's another way of saying\ndoes not equal undefined or null so we\ncould also say does not equal double\nequals undefined\nokay and that will give us whether\nthere's a move so now we can replace\nthis with has move and then we can just\npass in the Square dot ID\nand make sure that's a number so that\nit's comparing the same type\nI think if we got this right we should\nbe able to click squares multiple times\nand it will not do anything which is\ntelling us that our check has worked\nokay\nso at this point\nI know that we've done a lot of\nrefactoring and it seems like for\nnothing but the goal of this is whenever\nyou're tracking state within an\napplication you want to keep it as\nsimple as humanly possible and the\nreason being is as we've seen down here\nwhere we're actually updating the state\nto the current player which by the way\nwe can get rid of now because we're\nderiving that information\nbut when we update State as we're doing\nhere in the moves pushing a move to the\narray\nevery time you track something in state\nyou also have to update it somewhere and\nthe more things you track in state the\nmore updates you're responsible for and\ntherefore the more possible errors that\nyou're going to introduce to your\napplication so the goal with tracking\nstate is to keep it as simple as\npossible so that you have the least\nnumber of variables to keep track of\nover the life cycle of your application\nin this case all we're doing is tracking\nan array of moves and then from that\nlittle piece of information we're able\nto then derive who is the current player\nand from that we can then you know\nupdate state to to make another move\nwithin the game at this point we've\nrefactored our state and we're updating\nit to just have an array of moves\nwhich is a lot it allows us to derive\npretty much everything that we need to\nknow about the current game\nnow the next thing that we need to do\nthat we can now actually do with this\nstate is find whether someone has won\nthe game or if it's a tie or if it's\nstill in progress\nso what we're going to do is actually\nmake a utility function for this and I'm\ngoing to add this\njust at the top and this is not going to\nbe the final destination of it\num actually we could even just put it\nwithin the app but we'll probably\nrearrange this in the future so what we\nwant to do is call it something like get\ngame status\nand this function is going to take\nan argument here so what are we going to\npass in will be an array of moves\nand then we also probably need well I\nthink that's pretty much all we need we\njust need an array of moves which is\ntracked in state so with that array of\nmoves we should be able to give a couple\npieces of information so we'll Define\nthe return value of this just to start\nthe first thing is going to be the\nstatus which this can either be\num we'll call it in progress\nor complete\nso we will put a placeholder in there\nfor right now but this will become\ndynamic\nand then we will also give a winner\nwhich again will put a placeholder in\nthere but this is going to either be one\nor two so player one or player two and\nthen also it could be null which would\nrepresent a tie so that's kind of how\nwe're going to\num represent this\nand based on these two pieces of\ninformation we should be able to know\nwhether the game you know what to show\nin the UI whether we show the modal that\npops up and gives the result or we keep\nplaying\nso to do this the first thing we need to\ndo is get player one moves and the moves\narray that we're going to be passing is\nthe entire game\nso all we need to do is filter that\nand then check on each move whether the\nplayer ID\nis equal to one\nso that will give us player one moves\nand then we can copy that down and\nchange the ID to get player 2 moves from\nthere we should be able to bring up our\nwinning patterns so this will now come\nup in that utility method\nwe'll paste that right there and what we\nwant to do is Loop through each of these\nwinning patterns and check if either of\nthe player moves have all three of these\nwithin their array and if all three of\nthem match then we know that one of the\nplayers has actually won the game\nso the way we can do that is start out\nby saying the winner equals null so\nwe'll just assume to start that it's\nthere's no winner and what we'll do is\nmap through the winning patterns so\nwe'll do a loop for each Loop and we'll\ncall each of them a pattern because this\nvariable will represent one of these\narrays\nand then we'll break that down into a\nfunction that will check for this\ncondition so we'll say player one wins\nand that is only going to be true if\nevery value within the pattern so we'll\njust say V for value\nwe'll say player one moves includes\nthat value so again we've got player\none's moves the array of moves they've\nmade and then we have an individual\npattern and if there's a hundred percent\noverlap between player one's moves and a\ngiven pattern we know that they've won\nso the same thing can be said about\nplayer two so we can copy that down\nagain and just update that array and\nthat should tell us whether each of the\nplayers have won so then we can write an\nif statement and we'll say if player one\nwins then we just update the winner to\nbe equal to one so that's their ID\num and then if player 2 wins we'll\nupdate the winner to be equal to So in\ntheory this should only be one player\nthat can win and if we don't hit a true\ncondition for either of these then the\nwinner will stay equal to null and we'll\njust assume that's a tie if the game is\ncomplete\nso we come down here and instead of hard\ncoding that we can just remove that and\nwinner will be assigned to this variable\nright here so that's either going to be\nnull for a tie one or two and then the\nstatus of the game is going to be in\nprogress if there are either no winner\nor the game moves does not equal nine so\nif we look at our game there's nine\nsquares so if all of them have a move\nthen we know that the game is over so\nthat will be our first check we'll say\nif the moves dot length\nis equal to nine\nthen\nwe can say that is going to be a\ncomplete Game otherwise it will be in\nprogress now we of course need one more\ncheck here so if the moves that length\nequals nine or the winner does not equal\nno yeah so we're checking whether the\nwinner does not equal null because that\nwould represent that someone has won\nbefore the game reached a final state of\nnine plays which would be a tie so that\nwill help us figure out what the status\nis\nso now with this utility function get\ngame status we can come down here\nand where we're checking if there's a\nwinner or a tie game let's just assign\nthat to a variable called status so\nwe'll say\napp.getgame status and then we will pass\nin the\napp.state.moves and that's going to\nrepresent the newest array of moves that\nhas been played\nlet's console.log that status just to\nsee what we're dealing with\nand let's play a couple moves so you can\nsee the status is going to print every\ntime so our game's in progress there's\nno winner\nstill in progress\nand then this click right here should\nchange the status\nand you see that it doesn't and we'll\nhave to check out why because that\nshould have updated to complete and\npopulated a winner of player one\nso let's go ahead and check that see\nwhat is happening here just to debug\nthis let's go ahead and just do a\nclassic console log\nthis will be quite a few logs because\nwe're going to be printing on every\npattern here\nso let's just console log the pattern\nand then player one moves in player 2\nmoves\njust so we can get that in one big\nobject\nand then we'll play all these moves and\nthen right here this is where we should\nbe getting a different result than we're\ngetting\noh and I can already see what's\nhappening here\nso what we did wrong what I missed\nis when I was filtering the player one\nmoves this is just going to give me the\nentire move so if we print that out\nto the console\nwhat you'll see is in this array we're\nprinting an object with a square ID and\na player ID and when we're comparing\nthat down here in the every utility\nmethod we're actually comparing a number\nwhich is the key of the square\nto that object which will never equal\neach other so what we really need to do\nis actually add a map utility at the end\nand we're going to map that move to be a\nnumber value that is equal to the square\nID\nof those moves so now if we print this\nout into the console\nplayer one moves this should represent\nan array of numbers now as you can see\nrepresenting the coordinate\num of this of the place so this should\nbe one two and then one two three and\nnow you can see that the status is\ncomplete and the winner is equal to\nplayer one so our utility method seems\nto be working let's reset the game and\ntry to tie the game\nso let's mix this up here\noops I accidentally won it's kind of\nhard to tie this game okay so now we've\ngot a tie game and you can see that the\nstatus is complete and the winner is\nnull so that should tell us that it was\na tie game so now we can Implement that\nlogic\ndown in our event listener\nso down here at the bottom where we're\njust console logging the status what\nwe'll say is if the status equals\ncomplete\nthen what I'm going to do is just make\nan alert in the in the browser so we'll\nsay if the status I'm sorry this should\nreally be\nstatus dot status so we should probably\nrename this variable\nwe'll say game\nand this will be game dot status\nand now we'll say if the game\num\nif the game has a winner\nthen we're going to alert\nplayer\nwinner wins\notherwise we know that it's a tie\nso we'll say tie\nlet's try this out so let's go ahead and\nmake player one a winner\nsays Winner's not defined for some\nreason\nand that's because I'm not referencing\nit correctly\ntry that one more time\nand there we go player one wins so kind\nof small but you can see now we've got\nthe essential functionality hooked up\nand at this point I think the next step\nis to trigger that modal to open when\nsomeone has won the game or there's a\ntie but before we do that let's just\nrecap what this big long event listener\nis doing\nso first We're looping through each of\nthe squares on the game board and we are\nadding a click listener to that square\nwhen that square is clicked all this\ncode is going to run\nso the first thing we'll do is check if\nthere's a move already present within\nthat square\nif there is we're going to exit early\nand not do anything because someone can\nnever play twice in the same square\nonce we get past that we know that there\nis a valid move so we're going to check\nwho Moved last based on the state\nwe're going to then get the opposite\nplayer\nof that last move and set the current\nplayer of the game\nwe will then take and create an icon\nand based on the player who is up we'll\nadd an X or an O as an icon and then\nwe'll put that in the Dom and we'll add\nthat icon to the square we'll also push\na move a new move to the state so that\nwe're tracking the history of moves in\nthe game\nwe'll then check the game's status after\nthat move has happened and if the status\nis complete we then know we can do\nsomething and open a modal to explain\nwhether someone has won or if the game\nwas a tie and now our goal is to open\nthat modal and give the user an action\nto actually reset the game and start\nover\nif you remember from our index.html\nwhen we built this\na couple hours ago you'll see down here\nwith the modal we just have that hidden\nclass sitting on there and if we remove\nthat and save the file you'll see that\nwe get this dialog to open and it's\ngoing to cover the screen with a play\nagain button so the things that we have\nto do is number one we have to trigger\nthis to actually open and then close\nwhen we're done with it and number two\nwe have to add a click listener to this\nbutton right here so that when someone\nclicks play again the game state has\nreset and you know everything goes back\nto the beginning so let me add this\nhidden class back because that's our\ndefault state\nand as I said this is going to be\nrefactored at some point we've got a lot\nof code all sitting in one place which\nis going to be hard to follow long term\nbut at the moment we're just putting\neverything in one method\nkeeping it simple so that we don't have\nto refactor anything quite yet\nso the way that we're going to do this\nis First add a selector to this modal so\njust like we've done up here with let's\nsee\nwe've given data IDs to the elements\nthat we're going to select and control\nwith JavaScript so we'll do the same\nthing with this modal\nlet's just call it modal and then the\nmodal contents will also give it a data\nID\nand we'll set that equal to modal\ncontents\nand what we're going to do here\nlet's see or actually we're not going to\nput it there because we don't really\nneed to control that we need to control\nthis text element so data ID equals\nmodal text\nand then this will be the data ID\nmodal button\nso you don't really need to add these\ndata IDs to all of them because really\nyou could just select the modal and then\ngrab those elements dynamically I'm just\nbeing pretty explicit about it just for\nclarity so let's go ahead and select\nthese within our app because that's kind\nof what we've been doing I'm just\ncollecting all of these elements that\nwe've selected so let's copy this down\nand we'll name this one modal\nthis data ID will be modal\nand then we'll say modal text\nand modal button\nand as you can see we're doing a lot of\nrepetitive stuff here so if you're\nthinking this will be refactored too to\nbe a little bit simpler and to eliminate\nthe need to write all of this boiler\nplayed out but I'm leaving it here now\nbecause it's it's pretty clear what's\nhappening\nso now that we've got these three we can\npretty much control them\ndown here in this check on the game\nstatus\nso if the game status is complete and we\nhave a winner\nthe one thing that we know we need to do\nis print to the modal who has won that\ngame so let's just say app dot dollar\nsign because that's our namespace for\nall of those elements\num\nactually first we need to open the modal\nI'm sorry so if the game's complete we\nknow that we need to open the modal\nso modal and then what we're what we're\ngoing to do is look at the class list in\ntoggle\nthe hidden class on that but to be a\nlittle bit more explicit since we know\nthat we're opening it here rather than\ntoggling the hidden class which could\nwork there what we're going to do is\nactually remove\nwhat is the yeah we should be able to\nsay classlist.remove\nthat hidden class\nso let's try that first let's make sure\nthat that's working so someone wins the\ngame here\nand says modal.classlist is undefined so\nwe mess something up here oh and that\nthe problem is we're using query\nselector all because that's what we had\nfor squares this should just be a basic\nquery selector so now I believe this\npart should work\nso let's win the game for someone and we\nget the alert but we also get the modal\nso let's remove this alert\num for the moment because it's kind of\ngetting in the way but now that we know\nthere's a game winner what we can do is\nwe can say that the text is going to be\nequal to player and then give the\ngame.winner so that'll be the ID\nso that's the message that we want to\nput so let's call that message actually\nand here our message is going to be\ntie game\nand then all we have to do\nwe can actually extract that to a\nmessage up here\num\nand then\nassign that there and then no matter\nwhat we're going to say app\ndot dollar sign dot modaltext dot inner\ntext or is it inner HTML I can't\nremember\nuh it's not in or anything it's text\ncontent is equal to the message\nso let's save that and see if that works\nso someone's going to win the game here\nand it's player one\nnow let's refresh the page and this time\nlet's let player 2 win so player 2 wins\nand you can see that dynamically will\npopulate\nnow the last thing that we need to do is\nput that click listener on the play\nagain button\nwe're not going to do that in this\nmethod because remember we're\nregistering our event listeners all at\nthe top level of this function\nso let's just put that right here we'll\nsay app dot dollar sign dot modal button\nadd event listener\nwe're going to listen for a click event\nand then with that event all we're going\nto do is set set the state DOT moves\nequal to an empty array because we want\nto reset the game and then we also want\nto close the modal if it's open so the\nway that we'll do that is app.d dollar\nsign dot modal and then classlist dot\nactually not remove we want to add the\nhidden class back so that will hide the\nmodal\nso now that should be hooked up\nand if we go through the game someone\nwins and we click this button it closes\nit and you can see there's still game\nmoves here because resetting the state\ndoesn't actually change the UI quite yet\nwe will refactor that at some point\nbut at the moment it does not so not\nonly do we have to reset the state but\nwe also have to Loop through each of\nthose squares and empty out their\ncontents so let's see how we would do\nthat is we'd say app.dollarsign squares\nand then we'll say for each Square\nwe're going to say Square dot replace\nchildren and just leave that empty and\nthat's just a shortcut to clear\neverything out of the squares\nso now let's go back and try it one more\ntime someone wins the game we click play\nagain and everything has cleared\nso we now have a functioning tic-tac-toe\ngame\nplayer one wins again see if we can get\na tie here\nyou have to really think about this one\nto get a tie\num let's see that should work okay\nthere's a tie game play again clears it\nout the last thing that is not working\nhere is this turn indicator you can see\nthat no matter what we play it's just\nstaying the same and we obviously want\nto update that now a great place to do\nthat is going to be within this super\nlong event listener for each of the\nsquare clicks where we're updating the\ncurrent player so we'll actually do that\nin this if else statement but first we\nhave to grab those elements that we want\nto update\nso let's find the turn indicator\nand you can see right here this is where\nwe're doing it and we've got an icon\nthat we need to update and some text\nthat we need to update so here what\nwe're going to do is add a data ID and\ncall that turn\nso we'll now go select that in our list\nof elements\nso we'll say turn\nand then just copy this down again\nand one thing that we need to do here\nthat I kind of missed is we've got the\nturquoise class set on the individual\nicon but we want these both to match so\nit would be a little bit easier\nif we just put that up here on the turn\nelement and we also need to match things\nup so the first player is player one\nwhich we're just determining is going to\nbe X and that's going to be yellow so we\nneed to match those up let's save that\nand just make sure that this is matching\nnow which it is so this is what we're\nlooking for as a starting point and now\nall we need to do is just toggle this\nfrom yellow to turquoise and back and\nthen we'll toggle the elements within it\nto indicate the turn\nso we can do that here\num\none thing we'll need to check is get a\nlittle bit more clear on who's up next\nso the current player represents who's\nactually clicking right now\nthe next player is going to be the one\nthat we want to change the turn\nindicator for\nso you've got the current player and\nthen\nwe can say next player and reuse that\nget opposite player I know we're a\nlittle redundant here\num\nbut we'll go ahead and use it so this\nshould represent it in the ID of the\nnext player\nnow we can come down here and say the\nturn label\nis going to be a new element\nyou could have replaced the element\nthat's already there but I'm just going\nto create a p element\nand then that turn label\ndot inner text\nis going to be equal to\nplayer\nnext player\nwhat we determined up there\nyou are up\nand we'll copy that down\num actually we can just put that right\nthere\nand then from here\nwe can just say app.d dollar sign and\nselect the turn element so remember\nwe're just selecting this entire div and\nwe want to replace the contents of it\nso all we need to do is say replace\nchildren and then we can pass as it\nshows here we can spread out parameters\nas individual nodes so it will replace\nthem in order\nso if we want the icon to go first we\njust pass that there and then we'll pass\nthe turn label\nwhen we save this let's see if we get\nthe correct result so I'll go here\nand you can see that we're getting the\ncorrect text but the color is not\nupdating and we're not getting the icon\nto also be added\nI believe the problem here is we're\nactually adding this same icon to two\ndifferent places so we probably need to\nbreak that out into two separate\nelements\nso we'll say turn icon\nand then this will be the square icon\nso those will be two separate elements\nand down here\nwe'll pass the square icon\nand then here we'll pass the turn icon\nand we of course want the same exact\ncolors here I believe\nor actually no these need to be opposite\nbecause once again we have the next\nplayer is going to be the opposite color\nof the current player\nso we'll say the\nSquare icon\nand then we'll copy this down and this\nwill be the turn icon and this will be\nthe exact opposite\nso this will be the o\nand it will be turquoise\nthis will be turn icon with an X that is\nyellow\nonce again we are going to refactor this\nit's not going to be this confusing and\nverbose here in the future\nso hopefully this works\nnow we're getting a lot closer we have\neverything correct except for it looks\nlike this text is O is yellow\nand it's because we're not setting the\ncolor of that so we need to say the turn\nlabel\ndot class list\nand let's go ahead and do that down\nhere so turn\nbabel.class list\nand we'll set that equal to turquoise\nto match what we're making the turn icon\nright here and then we'll copy that down\nand make this one yellow if it's player\ntwo\nso now it looks like we're getting\neverything correct so if we play in O\nnow X player one is up if we play an X\nwell we've got to play again but you can\nsee that that is updating correctly now\nas you noticed if we end the game and\nplayer one wins you'll see up here\nplayer 2 has it is up next and that's\ntheir turn\nand if we click play again that's not\ngoing to reset so we need to remember to\nreset the turn and since we've coupled\nall of that turn logic within this event\nlistener we have no easy way to do that\nup here when we're resetting everything\nso at this point we've reached a place\nin our code where we've got a lot of\nstuff going on\nright in this method that we would like\nto be able to reuse in different places\nto like reset the state and whatnot but\nright now it's very hard to do that so\nthe next segment of this video is going\nto be taking this code and refactoring\nit to look a little bit cleaner and be\nmore reusable and easy to follow so\nwe'll go through that but as of right\nnow we have a working game for the most\npart as long as we refresh things\nand we can determine who wins the game\nso once again we'll refactor things then\nwe'll start talking about keeping this\nstate for the scoreboard and then moving\ninto the MVC pattern so as we talked\nabout\nwe've got the naive approach all in one\nfile that's what we're still on we've\nbeen refactoring iterating as we go and\nthen we'll end up with something pretty\nclean that we can reuse and extend into\nthe future so we've reached a point\nwhere our code is getting a bit\nconfusing and if we continued to add\nthis functionality so if we were trying\nto reset this turn indicator when the\ngame ends remember we've got a problem\nhere it doesn't reset and then we also\nhave to be able to reset the whole game\nand reset the round track all of this\nstate you know the history of the games\nthere's a lot to do here and given our\ncurrent code it's going to be very\nconfusing to do because we've got all\nthis stuff in one method there's all\nsorts of stuff we're updating State\nwe're updating the view all in one spot\nso this is where a pattern comes in and\nhelps us out a bit I waited until this\npoint\num to mainly simulate a real life\nscenario where generally you're going to\nstart off in one file just to understand\nthe logic that you need within your\napplication and then as you go you you\nhave to refactor to keep things clear in\nyour head and to make the code\nmaintainable\nso at this point we understand what\npatterns we actually need here and that\nmakes it a lot easier to introduce\nsomething like an MVC or model view\ncontroller pattern just as a side note\nthe MVC pattern is really relevant to\nsomething like Ruby on Rails so if you\ntyped Ruby on Rails\nand you go to the documentation you'll\nstart to see a lot of these patterns and\nif we were I'm introducing this not\nbecause I think you need to use Ruby on\nRails but more so because it's kind of\nthe Premier example of a framework that\nleverages this model view controller\npattern and has gained a lot of\npopularity so if we go to the docs let's\nsee if we go to the API Maybe\nthat's probably not where we want to go\nso as we're scrolling through the docs\nyou can already see there's a header\nsection called models\nthen there's views\nand then there's controllers so they\nvery explicitly build out this pattern\nso this is just a good reference you\ndon't need to check this out I just\nwanted to point it out\nso enough Theory here let's get into\nthis the way that we're going to build\nthis model view controller pattern is\nactually by breaking this single file\nout into those three different\nresponsibilities\nand that kind of brings us back to our\nbest practices so whether or not you're\nusing a model view controller pattern\nthere's other patterns that you could\nuse the main point here is that we want\nto separate\num logic by\num\nresponsibility\nin other words this is the separation of\nconcerns principle that is just a good\nprogramming principle in general it's\nsomething that you would always want to\ntry to aim for no matter what pattern\nyou're using so let's jump back over\nwe've obviously got quite a bit of\nfunctionality here that we don't want to\nhave to completely redo a lot of this is\ngood stuff that we've worked out but we\ndo need to refactor this into a couple\nfiles\nso in our JS directory I'm going to add\na new file one called the view.js one is\ngoing to be called store.js and this\nwill actually represent the model I'm\njust calling it store because it kind of\nrepresents the storage that we're using\nyou could call it whatever you want\num so we'll call that store\nand then app.js this is really going to\nbe our quote unquote controller it's not\na super explicit\num adherence to the pattern but we're\ngetting very close and the goal of a\ndesign pattern is to make things easier\nfor you so you don't need to follow it\nso rigidly that everything matches up\none to one as long as it's useful it is\ngoing to be okay so as we go and build\nthis out I'm going to be kind of looking\nup here\num to my other screen because I've\nactually as you know I've already built\nthis app out in preparation for this\nvideo and I just want to make sure that\nthis live build that we're doing matches\nup with the final code that you're going\nto see in the GitHub repository that is\nlinked in the video description so\nthat's all I'm doing I'm just making\nsure that I'm naming the methods the\nsame so on and so forth so what we need\nto start with I think is going to be\num let's go ahead and do the view\nbecause that is what most of this logic\nwe have in our application is pertaining\nto at the moment\nso let's open up View and we're going to\nbe jumping into some object-oriented\nprogramming Concepts here so that's just\nanother way of saying we're going to be\nworking with some JavaScript classes and\nspecifically es6 syntax 4 classes I'll\ntry to point out some of the syntax that\nI'm using and what it means but if you\nare not at all familiar with classes and\nwhat they are and how they work I would\nrecommend brushing up on that pausing\nthe video\nand just reading a couple you know\noverview guides just to get yourself a\nlittle bit up to speed that said I will\ntry to explain things as we go and I'm\nnot going to assume that you have any\nsort of advanced knowledge here so we'll\nwe'll walk through it together\nso the first thing that we need to do in\nour view is Define that class that we're\nwe're going to be using\nnow we can call this a class of view\nand that's really all the syntax that we\nneed we of course will use a Constructor\nthis is kind of the initialization of\nthe class and it belongs on it's\navailable on any class that you use\nand then furthermore we're going to\nstart to bring over our methods so there\nare things\num that are available on the class\ninstances\num called class properties and that's\nwhere we're going to store those\nelements that we had defined earlier so\nwe'll just initialize the dollar sign to\nan empty object and we'll start\npopulating that here in a second so the\nfirst thing that we want to do in our\nclass and we'll do this in the\nConstructor because we want all of these\nelements to be selected when the class\nis initialized so we'll go back to our\napp.js and we'll take all of these\nselectors that we've used\nand we will assign them in the\nConstructor so we'll have to update some\nof the syntax here but really we'll just\nclick down and select a bunch at once\nand what we'll say is this dot dollar\nsign dot whatever the variable is\nbecause we are basically referencing\nwhen we say this we're referencing the\nclass instance itself and on that class\ninstance we have defined a property uh\nwhich is the dollar sign this could be\nany variable we're just using a short\nname space for easy easy way to access\nand so what we're doing is we're saying\nthe class instance\nthe property that we want and then the\num another nested property that will\nrepresent the element itself so now\ninstead of colons we'll need to set\nthose to equal signs\nand then we'll hit command s to format\nthings and save it although we've got\nsome\ncommas here at the end that we need to\nget rid of first\nnow we can save it in a prettier we'll\nformat this for us remember as I\nmentioned earlier in the video I've got\nformat on Save setup with the prettier\nextension in vs code so that's why it's\nsaving like that and formatting\neverything\nso at this point we've got our basic\nclass and when it initializes we're\ngoing to select all the elements in the\ndocument but just having this alone it's\nnot going to actually work quite yet we\nneed to connect this to our app.js\nfurthermore we're not going to really\nneed this namespace anymore because\nwe're going to be working with\num or we we may use the namespace but\nwe're going to be moving pretty much all\nof this code out but in order to do that\nwithout completely breaking everything\nI'm going to leave all the code intact\nit's just a good way to do it when\nyou're refactoring something you want to\nleave the original code intact and just\nbuild the new code side by side and then\nyou'll replace it at the end but since\nwe're not going to have any of this code\nhere anymore what I'm going to do is\nbuild this side by side and we're going\nto just make a standalone function\ncalled init and yes this is in the\nglobal namespace but this should could\nreally be the only thing this and maybe\none other variable that we'll put in the\nglobal scope so that should be fine\nand what we'll do in the init method is\nbasically initialize the class itself so\nwe'll say the view is going to be equal\nto New View\nso that is going to make a class\ninstance of this class right here and\nthen what I'm going to do just to test\nthings is console.log view dot dollar\nsign and then let's just say turn\nbecause that was one of the elements\nthat we selected in other words we're\njust testing to make sure that this was\ninitialized correctly\nfurthermore we want to duplicate this\nevent listener we will eventually remove\nthis once we've refactored everything\nbut for now we just want to use this\nknit method when the the window loads so\nlet's save that and then go back to our\nbrowser let me get these tabs organized\nagain\nokay so we'll go to our browser here and\ngo to the console\nand it's going to say uncut reference\nerror the view is not defined and\nthere's a good reason for this it's\nbecause we have not imported that script\nnow obviously app.js has been imported\nright here at the bottom but we would\nalso need to import the view.js for that\nto be defined and if we come back now\nyou'll see that our console log worked\nbecause that's now defined\nbut let's go back\nand flip these let's put them in a\ndifferent order so we first load the\nview and then we load the app\ndoes it still work well the answer is\nyes and I believe that's because of\nhoisting that happens with JavaScript\num but what's confusing about this is\nwe've got these two separate files\nwith different variables and they kind\nof reference each other but that can get\nconfusing when you have more and more\nfiles so one solution to this that will\nhelp us out quite a bit and allows us to\njust import one script is to use es6\nmodules so instead of adding this\nadditional script import which gets\nmessy once you have five or six Scripts\nwe're just going to import app.js and\nthen we're going to set a type attribute\non the script and we're going to name it\nmodule what this is going to do is it's\ngoing to tell the browser that this\nscript is an es6 module and now in\npretty much every major browser es6\nsyntax is\nsupported as well as modules so this is\na nice way to handle imports and exports\nso now in app.js rather than just\nreferencing this view class variable\nwe can import that so at the very top of\nour file\nwhat we'll do is we'll say import view\nfrom\nview.js\nnow right now this is not going to work\nand it's not going to work because we\nhaven't exported anything from this\nmodule\nwhat we need to do is put an export\nand then we want to export this as the\ndefault export so that we can reference\nit in our file just like this now if we\nleft out this keyword of default\nwe would need to put this in Brackets\nin reference it just like this so if we\ndid that this should work if we go to\nthe browser you'll see that this is\nbeing printed out which is what we're\ndoing here at the bottom\nright here that's the console log but I\nthink it's a little cleaner if we just\nexport the default\ngo back to app and then remove these\nbrackets\nsave it and then we'll check to make\nsure this console log is working and it\nis\nnow another property\num or feature of using modules is that\nby default they use strict so if you've\never seen use strict in JavaScript\nuse strict we'll look that up\nstrict mode is something in JavaScript\nthat used to be really relevant as you\nhad different files that would have\ndifferent modes nowadays you'll pretty\nmuch see strict mode on every file that\nyou ever write but this has a lot of\nuseful defaults to kind of protect your\ncode from all sorts of problematic\npatterns so by default these es6 modules\nor in strict mode which means that in\nthe view.js you might say well oh this\nview is in the global scope but that's\nnot the case we haven't actually\nattached it to the window so if we were\nto go to our console and type view it's\ngoing to say view is not defined the\nonly way that that would be possible\nas if we said if we explicitly attached\nit to the window like this so\nwindow.view equals View and now we\nshould be able to see the class that\nwe've defined but this is not what we\nwant and I just wanted to point that out\nas a feature of es6 modules by default\nthey're going to behave this way and\nwe're going to protect the global scope\nthat way what this also means is that\nour init method if you remember from\nearlier\nscrolling up we had defined this app\nvariable as the namespace around our\nentire app so that we didn't litter the\nglobal scope with all of these variable\ndeclarations\nbut now if we try to access app at all\num we're not going to be able to because\nit's in an es6 module and by default\nthat is not exposed to the global\nnamespace so that's basically why I'm\nokay adding this init method in the\nglobal scope because I know that's not\ngoing to be exposed in the in the\nbrowser\nunnecessarily so that's just a little\ntidbit but let's keep moving here on our\nrefactor so looking through our app\nlet's also find other things that relate\nto The View\none of those things that is very\nrelevant to just a view class is these\nevent listeners we want the event we\nwant the view to register event\nlisteners initially so we can copy all\nof this over\nin my final code I want to see how I\nwhich method I put this under so in my\nfinal code each of these event listeners\nhas its own method in the view so I'm\ngoing to open up two\ncode Windows here and make it a little\nbit smaller for us hopefully you can\nstill see that\nand what we'll do is we'll basically\ntake each of these event listeners and\nmake it its own method within the view\nclass\nso just to stay consistent with my\nnaming we will call the first one bind\ngame reset event\nso that is the game reset and this is\nactually a new pattern that we're\nintroducing rather than handling the\nevent listeners within the view we want\nto do that in the controller and the\nreason being is because the controller\nis going to read the current state of\nthe application and based on that state\nit may have to do different things to\nthe view so you don't want to leave it\njust to the view itself to handle these\nevents so we're going to put a Handler\ncallback function passed as an argument\nto each of these event listeners\nso we'll use some es6 syntax to Define\nthis function and then here we're going\nto actually register those event\nlisteners so I'll type out the first one\njust so you can see it slowly and then\nwe'll copy things over so for example\nlet's look at this one\num or no that's not a good example\nwe'll use the reset game here\nso all we're going to do is reference\nthese initialized selected elements that\nwe have\nso this dot dollar sign\ndot which one are we selecting here\nreset button and then just like we're\ndoing over here we're going to add the\nevent listener\nlistening for a click event and then in\nthe Callback\nwe're going to do something but the\ndifference here is instead of handling\nthis in the view we're just going to\npass the Handler itself so we can just\npass that Handler\nfrom here down to this event listener\nand then all of that is going to be\nhandled in app.js so let me add the rest\nof them so bind new round event\npass that Handler\nand then bind Player move event with a\nHandler\nand here what we can do is basically\njust copy this over so this is the\num\nthe move event\nso we'll just copy this over so this is\nthe new round\nso we just add this dot dollar sign and\nthat should work okay but of course we\nwant to handle this elsewhere so we'll\npass the Handler from the function\nparameters\nor arguments I mean\nand then for the player move event this\nis the one where We're looping through\neach of the squares and adding those\nlisteners so at this point I don't want\nto just copy everything over because\nwe're going to do this a little bit\ndifferently moving forward so we're\ngoing to start to diverge from our\noriginal implementation and just start\nto use it as a reference only not trying\nto copy things verbatim\nso what we want to do here is Select\nthose squares\nand for each of those squares similar to\nhow we're doing it here we'll want to\nbind an event listener so we'll say\nSquare dot add event listener\nlistening for a click and then we're\npassing this Handler right here now\nlet's talk about\num event listeners that are going to be\nview only things so you'll notice that I\nskipped over\nhere on the left I skipped over this one\nright here where we are clicking on the\nbutton to reset the game although that\nshould probably be added here but\nspecifically let's look at this one\nwhere we're just toggling something in\nthe UI so remember we just have this\nactions menu That's opening and closing\nthis is not going to affect the state of\nthe game whatsoever it's purely a view\num client only piece of state that we're\ntracking and therefore\nin terms of responsibilities The View\ncan handle a hundred percent of that it\ndoesn't need to change any state or\nanything so we can actually register\nthat in the Constructor and keep it\nentirely encapsulated here so we'll call\nthis section UI only event listeners\nand here what we're going to say is this\ndot dollar sign that menu\nitems I'm sorry we need the modal button\nfor menu button menu items and then\nwe're just going to toggle the class\nlist\nso we'll say menu items that add event\nlistener listening for a click\nand then we'll go back in that callback\nand we're handling this in the view\nitself\nso we'll say this dot dollar sign dot\nmenu items dot class list\nthat toggle hidden and we're going to\nactually improve this Handler just a\nlittle bit\nfor some reusability but let's start\nwith that and at this point I think it's\ntime to kind of\ncomment out this app that we had before\nso we're going to be resetting a good\namount of functionality for the time\nbeing\noops\nso we'll just go through this whole app\nhere\nthe whole thing including the uh load\nevent you can comment that out\nwe'll keep it here for reference but\nit's all commented out at this point\nso all we have now is just the view so\nlet me collapse all that because it's\njust going to be easier to see and we'll\nsave this and now let's see what the UI\nlooks like so right now I can't really\ndo anything I can click stuff but\nnothing is going to actually happen now\nthe reason nothing is working is because\nI actually grabbed the wrong thing here\non the right let's bring this over so we\nhave a full screen\num in our new view class I'm actually\nactually adding a click listener on menu\nitems it should just be menu\nbecause if we go back to our index.html\nand look for that we want to register\nregister The Listener on menu\nor probably more specifically we want to\nadd a data ID and call this menu button\nso let's go back to our view\nwe've got the menu menu items and let's\nadd one more\nmenu button\nand then we'll add the selector here\nand now we're listening for a click on\nthe menu button and then when that\nhappens we're toggling the hidden class\non many items\nso going back we should now be able to\ntoggle the menu open and closed but\nthat's just about it we can't do\nanything clicking the reset button new\nround a square it doesn't do anything\nanymore\nand we need to start wiring up those\nevents just to show you the pattern that\nwe'll be using you can see that we are\nwe have methods to bind these event\nlisteners but remember by default when\nthis class is initialized\num are instantiated these methods are\nnot going to run because they're just\nmethods of the class\nsomeone needs to actually call these for\nthese event listeners to be added\nso that's what we're going to do in the\napps init method so right here below the\nclass initialization we now have a class\ninstance called View\nwhich we should be able to bind all of\nthese events so we'll bind the game\nreset event and you can see that our\nautocomplete tells us that we need to\npass a Handler in there and that Handler\nis going to give us an event\nso we can stub it out just like this and\nwe can consult that log the event\nwill also console.log the name so\nreset event\nso we'll copy this down for all of them\nwe just had three of them so let's see\nwhat we call bind new round event\nand then bind Player move event\nso now we're actually calling those\nmethods that are registering the event\nlisteners so now when we go back to our\nUI we should be able to at least click\nthings and see things happening so new\nround event\nor if I click the first Square it says\nPlayer move event and you'll see the\nclick Target is\num the square with the ID of one so div\nID equals one or if we click down here\nwe'll see in the ID of nine now with\nthis pattern we want to keep our\ncontroller logic which is in this app as\nsimple as possible we want this to\nreally just orchestrate what happens to\nthe state in the view but we don't want\nto add a lot of logic to this file most\nof the logic needs to happen in view.js\nor store.js which we haven't created\nquite yet\nI will get to this and show you why we\nhave this\nbut let's continue with the view and\nstart implementing some of these methods\nhere I think a good place to start is to\ngo back to our app open up our original\nimplementation\nand let's let's go ahead and go down\nto this big event listener that we have\nor no we'll start with these these\nlittler ones\nand just so that we can see this better\nI'm going to uncomment everything\nand we're just not going to initialize\nit so I'll uncomment the whole app but\nbecause we're not initializing it here\nwe can delete that this is just going to\nbe a variable that's initialized it's\nnot going to actually do anything or\nregister any sort of event listeners\nso this is just for reference so if we\ngo down and look at some of the code\nthat we've already written we've\nimplemented this toggle method over here\nin view as a UI only event that doesn't\nneed to happen anywhere else now these\nhave not been implemented we have a\nclick listener on the modal button\nwhich allows us to hide the modal once\nthe game ends we'll get to that in a\nsecond\nbut really what we want to start looking\nat is all of this logic because it's a\nlittle bit messy and we could probably\ncreate individual methods to achieve\nwhat we're doing here\nlet's start by improving our menu toggle\nright now in the UI what you'll see is\nthat it opens and closes but this little\nChevron down icon it's not going to\nchange and generally when you have\nsomething like this the icon will rotate\n180 degrees and go up when it's open and\ndown when it's closed or vice versa I\ncan't even remember which one is the\ncorrect design\nthe correct way to do it from a design\nperspective but anyways we can improve\nthis a little bit and we can also add\nlike a selected state so that there's\nlike a border when it's open so this\nwill help us to kind of ease into this\nnew pattern so as you can see I'm\nhandling this UI only event in the\nConstructor and directly toggling that\nhidden class but what we'll do is break\nout this view into a couple sections\nso this section is going to be register\nall the\nevent listeners\nthen the next section is going to be\nsome utility methods so uh Dom helper\nmethods and that just means we're going\nto have some methods to change the UI in\nsome way in the first one we'll Define\nis toggle menu\nand that's going to be called\nwe're going to move this logic\ninto that method and then we will just\nsay this dot toggle menu and call that\nso we've just refactored it a little bit\nand we're going to add some stuff to\nthis so let's make sure it works if we\nclick this it toggles the menu okay and\nwe're set but now we want to add\nsomething a little bit better to this so\nwhat I want to do is First add a border\nwhen the menu is selected so we're going\nto say this dot menu button because\nthat's what we're going to put the\nborder around and then let's toggle on\nthe class list a border which if you\nremember from our styles\nindex.css we have the shared utility\nclasses and we've got this border class\nso we can just toggle that to get a\nborder on it so now if we click you'll\nsee that when it's open we have a border\nand when it's closed there's no border\nso that's just kind of a nice addition\nyou could probably achieve this with CSS\nbut I thought it'd be\num nice to just demonstrate some\nJavaScript\num and then furthermore we want that\nlittle icon to flip up and down\ndepending on the open or closed state\nso to do that we need to actually\num\ncreate a different icon based on that\nstate and what I'll do is Define that in\na variable and from here I'm going to\nlet's see I'm going to grab from the\nmenu button so the menu button is going\nto be\nthis right here and you can see that\nI've got an icon down here at the bottom\nso basically what I'm doing is I'm\nselecting the button itself and then I'm\ngrabbing any eye tag that is within it\nso we'll say query selector and we're\ngoing to look for any I tag that we can\nfind which should represent that icon\nand then what we're going to do is look\nat the class list of that and since\nwe're using font awesome we can just\ntoggle\nfa Chevron down and then also Chevron up\nand this should basically just flip it\nevery time the menu is toggled so if we\nclick here you'll see this little icon\njust flips every time it opens and\ncloses so that's just a nice addition to\npolish that up but more importantly it\ndemonstrates in a pretty simple way how\nwe can Define all of these Dom helper\nmethods and then within our event\nlisteners we'll just call those to\nbasically change the Dom and change what\nthe user is seeing from A View\nperspective\nbefore we uh go to the next set of event\nlisteners I want to do one little\nrefactor here and add a utility method\nfor selecting elements as you can see\nwe're using a lot of markup here just to\nselect kind of basically using the same\nsyntax and more importantly this is the\nthe better reason to do this refactor\nwe're not entirely certain whether this\nis going to result in a element being\nselected we can put these\nselectors in and check them over and\nover again but we really have no\nassurances that what we have attached to\nthis list of elements is going to\nactually be valid selected elements so\nwhat we can do is at the very bottom of\nthis class we can add a few helper\nmethods\nwhat I'm going to call this is a Qs for\nthat's short for query selector and then\nyou should be able to pass in a string\nselector to that method and all I'm\ngoing to do is look for the element\nand that's going to be on the document\ndot query selector and then we'll pass\nin that selector that was in the\nparameters and then what we're going to\ndo is make a check so we're going to say\nif there is no element that was selected\nso in other words we passed the wrong\nselector something went wrong\nwe're going to throw a new error and the\nreason for that is we don't really want\nto continue\num with our application and trying to\nperform all the additional logic if\nthese selectors don't work in the first\nplace because that will just mess up\neverything so we're going to say could\nnot find elements\nand this will just give us as the\ndeveloper some confidence that we're\npassing in the right selectors and here\nwe can just return the element which we\nknow is defined now\nso there's a few improvements we'll make\nto this but let's go ahead and try this\nout\nso with the menu we can just say this\ndot Qs and then we pass in the data ID\nand that should select the menu so let's\ngo back to the UI you can see that\nthere's no errors I'm going to get rid\nof this for for the moment because that\nwas something left over from\nright here so let's get rid of that so\nwe're not confused\nbut this worked and so now what we can\ndo is go down with the query selectors\nand replace these now you'll notice\nwe've got a query selector all which\nwill not work with our utility method so\nwe'll leave that one alone for the time\nbeing\nso this dot Qs\nand then we'll replace all of these\nand save and as you'll see it all works\nthere's no errors let's just demonstrate\nin air so let's pass an invalid selector\nnow you're going to see unclawed error\ncould not find elements we want this\nerror to happen so that we know that we\nshould go back to our code and fix it\nnow just a few improve improvements that\nwe can make with es6 class syntax the\nway that you define a private class\nmethod which is something that we don't\nwant to expose to the outside world of\nthis class\nyou can put a dollar sign or not a\ndollar sign but a hashtag in front of\nthe method so let me just demonstrate\nthe difference here right now we have\nthis as a public method on the class so\nif we go to app.js and we call the\ninstance view dot Qs you're going to see\nin autocomplete on in vs code because it\nthinks that this is a public method but\nwe really don't want to be calling this\nquery selector from anywhere outside of\nThe View\num we don't want to be doing that from\nour controller so to make that private\nwe'll put that hashtag save it and now\nwhen we try to grab this on The View you\nwon't see it as a possible method that\nwe can use now you could I think you can\noverride this I'm not sure if it's\nenforced at runtime but it's just a good\npractice to keep everything private that\nyou don't need outside that class\nwe can also do that for the toggle menu\nso we'll put a hashtag there and we need\nto Now update the calls to this so this\ndot toggle menu or actually we may not\nlet me let me check this let's go to the\nUI\nyep okay we need to update that so we'll\nsay\n#toggle menu don't know what just\nhappened\nand then query selector so this dot\nquery selector\njust highlighting them all\nand let's grab the right one there and\nthen the last thing we need to do is\nimplement this query selector all as a\nsafe method so one thing I want to do\nwith the query selector is enable\nus to add like a parent element that we\ncan pass\nso basically this will just give us some\nflexibility so we don't always have to\nsearch on the document\nso we'll say if there's a parent\nargument we're going to search from the\nparent\notherwise we're going to search from\nthe document\nso just a quick little refactor there\nthen we're going to copy this whole\nmethod down\nwe probably don't need the parent for\nthis one but we'll call this query\nselector all\nand in this one\nit's going to be the same thing we're\npassing a selector but now we're just\ngoing to use a different Dom method so\nif there's not an element list\nwe're gonna throw could not find\nelements otherwise we're going to return\nit so now we can replace\nthat query selector all with this dot\nquery selector all\nsave it and make sure we don't have any\nerrors which we don't and then finally\nlet's just make a different name space\nfor for\num squares because it represents a node\nlist well these just represent\nindividual elements so we'll just make\nanother namespace a double dollar sign\nwhich will represent the ones that we're\npicking\nas a node list so we'll assign the\nsquares to that one just so that we have\nsome separation\na little bit of organization there\nall right let's continue our refactor\nlooking at our app.js in the original\nimplementation here the next thing that\nI want to cover and break out into a\nmore concise method is some of this\nstuff right here so if you remember what\nwe're doing here is we are adding an\nicon with a certain color to the square\nthat was clicked and we're also updating\nthis turn indicator up here in the top\nleft so I think what we can do looks\nlike we actually have an error here this\ndollar sign squares is undefined\nlet's fix that before we keep going\nand the problem is is we've reassigned\nthe squares to that double dollar sign\nbut we did not update that down here in\nour event handler\nso let's save that and we should have\nthat working again all right back to it\nwe need to update this turn indicator\nand then of course when we click\nsomething we need to turn that event\ninto an element in the Dom\nso we can break these out into two\nseparate functions I think the first one\nis going to be setting a turn indicator\nso down here in our helper methods\nlet's add a method called set turn\nindicator\nand for right now since we're not really\nwe don't have the context of what player\nhas actually made the move\num we're just going to hard code\nsomething and then we'll fill it in\nlater with something more dynamic\nso the first thing that we need to do is\njust look back at what what we're doing\nbefore we were basically creating a turn\nicon and a label and then giving some\ninner text to the label and setting a\ncolor on the icon so we'll do that same\nlogic in the set turn indicator I will\nput a player\nas an argument but we're not going to\nleverage that just quite yet it'll just\nbe kind of a placeholder so what we need\nto do is create an icon we can say\ndocument dot create element\nwe want an i element and then we want a\nlabel\nwhich is going to be\na paragraph element for now let's just\nassume that player is going to be either\nequal to one or two\nand we'll style it according to that\nwe're going to update that in the future\nbut just for now we'll assume that\nso for the icon we're going to look at\nthe class list\nand we're going to add a certain color\nclass based on the player so if player\nequals one we're going to call that\nyellow otherwise it's going to be\nturquoise\nthat is similar to our logic here so if\nthe current player is one we were\ncalling the\nI'm sorry the square icon was the yellow\nand we're doing the opposite for the\nturn icon but this gets a bit simpler\nbecause right here we're tracking\nbasically two pieces of State we're\ntrying to see who was the current player\nthat made the move and then for the next\nturn\num we're trying to decide who's the\nplayer after that so we're mixing a lot\nof things and it's a little confusing\nreally over here in the view we want to\nbe more declarative and explicit we're\njust saying that player one is\nassociated with yellow in player 2 is\nassociated with turquoise\nsame thing goes for the label\nwe'll add the class list\nplayer equals one\nthat's yellow otherwise turquoise now I\nthink in our original implementation we\nweren't updating the color\nof the label or were we\nlet's look at our HTML\nyou can see we have an element called\nTurn which we really could just select\nthis and add the color class to that so\nthat's what we're already doing so let's\nstay consistent\nand do that here\nso instead of setting the color based on\nthe player let's just say player one is\nfax\nand then for the message that were sent\nthat we're adding we need to set the\ntext content so let's delete that\nso if it's player one fax otherwise FAO\nwe need to select one more element so\nturn\ndiv and I think we already have this it\nshould be at the top here\nso right here we've selected the turn\nelement\nso we'll say this dot dollar sign dot\nturn dot class list\nand we are going to add\nthe color based on the player now there\ncould be an existing color so we'll have\nto do two calls here so add and remove\nso we'll say if the player equals one\nwe're going to add a yellow color\notherwise we're going to add a turquoise\nand then what we're going to remove is\nif it's the player is one then we want\nto remove any turquoise class\nand otherwise we want to remove any\nyellow class so let's just make sure\nthat we remove The Unwanted one and add\nThe Wanted class\nthis down here we're setting the actual\nicon that we're rendering and then the\nlabel we can set the inner text of that\nand we'll basically say if it is player\none we'll say player one you're up\notherwise we will say player 2.\nyou're up now at this point this isn't\ngoing to do anything because we just\nkind of created these elements in memory\nwe actually have to commit those to the\nDom so what we need to do is select the\nturn div that we had modified up here\nwith the classes and we need to replace\nchildren so that will just replace the\nchild elements with first the icon and\nthen the label that we created right\nhere\nso let's save that and right now set\nturn indicator is not hooked up to\nanything\nbut let's put that in our controller\nlogic\nso if you remember we are binding a\nPlayer move event right here and we're\njust uh printing that to the console at\nthe moment but what we can do now is\nreference The View\nand grab that utility method that we\nused now it is a private method by\ndefault so let me check if we need to\nmake that public yeah let's go ahead\nlet's make that public for now so that\nwe can use it here\nso we'll say set turn indicator and for\nnow we're just going to hard code the\nplayer ID we're not tracking any state\nyet so we're going to always say that\nwe're going to pass in player one\nso let's save that and see what happens\nif we click a square\nit's not doing anything and we need to\nfind out why so let's inspect the HTML\nif we click this Square\njust looks like it's not doing anything\nokay so now every time we click one of\nthe squares we'd expect this to update\nto player one now it's already player\none so you won't see a change so let's\ngo back and instead of setting it to\nplayer one we'll set it to player two\nand when we click it now changes that to\nan O but we're not getting the right\ncolors we're getting the right text\ngetting the right icon but not the right\nColors oh okay so our problem here is\nthat by default our class\nof turn so this one right here is\nsetting the color and then we're adding\nthis turquoise class later which is not\ngetting over it's not overriding that so\na better way to probably approach this\nwe'll go back to our CSS\nand instead of making that turn have\nthis initial color we will handle that\nwith the class so let me show you what I\nmean so I'll remove that from turn in\nCSS and then if we go to the HTML you'll\nsee I'm just passing yellow as a class\nto style the initial icon and message\nand so now we're not coupling the color\nto the turn class so this should work\nyou can see player two you're up\num and it's going to set that every\nsingle time let's refresh\nso player one you're up and now we're\ngoing to hard code that to player two\none other thing that you'll notice that\nI think I've kind of messed up is this\nicon has almost like italics to it\num and that's because we're not adding\nthe fa solid class so with font awesome\nyou have to add fa solid\nand when we hit enter on that now it\nlooks a lot better so we need to\nremember to add that\nlet's go to our view\nand when we create this icon\num let's\nmake sure and add that class so\nclasslist dot add\nf a solid\nand what you can actually do is pass\nthis as two arguments so instead of\ndoing that twice we can just pass f a\nsolid and then give it a comma to do\nanother argument and then we'll give it\nthe actual icon to render\nso now you see we start with that X it's\nyellow it's player one and when we click\nwe are hard coding it to be player two\nso we click and now it's an O player two\nand everything is that turquoise color\nso we know that our set turn indicator\nmethod is working correctly the next\nthing that we need to do is actually\npopulate\nthe square so we have to put an icon\nwithin the square and you can see in our\noriginal app logic somewhere right here\nwe are adding the square icon and doing\nsomething pretty similar so let's go\nback to the view\nand this one is going to be called\nhandle\nPlayer move\nand for this function we're going to\npass the square element that was clicked\nso the reference to that and then the\nplayer that made the move so that we\nknow which icon to put in there\nso this one will be rather simple we\njust need to create an icon similar to\nhow we're doing here so we'll copy that\nlogic so we're creating a new icon HTML\nelement we are then adding a class list\nwhich we are going to put the fa solid\nremember we did that right here and then\nwe can use the same logic to figure out\nwhether it's going to be an X or an O so\ndepending on the player and then finally\nwe're going to reference the square\nelement so whatever Square was actually\nclicked\nand we're going to replace children with\nthat new icon that we have just set now\nof course we don't have a color\nspecified so we can just group that here\nso if it's player one it's going to be\nan X and that's going to be yellow if\nit's player 2 it's going to be an O and\nthat will be turquoise\nso let's save that and now we will call\nhandle Player move in our controller so\nnow you can start to see what the\ncontroller is supposed to be doing it's\nsupposed to be kind of orchestrating the\nevents that take place so we're going to\nset the turn indicator and then we are\ngoing to handle the player move and\nlet's hard code player two so those are\nsynced up\nso now when I click this Square we would\nexpect that this turn indicator will\nturn turquoise with an O and this Square\nwill\num or actually now that I'm thinking\nthrough this we want the player move to\nbe player one and then the turn will be\nset to the next player which will be\nplayer two once again we will refactor\nthis so it's dynamic in the future we're\njust trying to get our view logic to\nwork\nso let's save that\nand we'll click here and this should be\na yellow X and then this will turn to a\nturquoise o\nand you can see it has not done anything\nand it says Dom token list add the token\ncannot contain white space\nso let's see what I did here okay so I\ncannot do this I actually messed that\none up we need to duplicate this logic\nso that\nwe're just doing one token per argument\nso just two little just a little\nrefactor there and that should probably\nwork\nso make sure we're refreshed and click\nSquare element replace children's not a\nfunction because I'm just\ngetting tired here\num we can't just pass in that one we\nneed to pass in the event Target so this\nwill represent the square that was\nclicked and so we want to pass that into\nour method\nand hopefully third time's a charm as\nyou can see it did work finally and just\ngoing to put X's everywhere yellow X's\nbecause we've hard-coded that in player\ntwo Zoe is going to be up\nobviously we want to make this a little\nbetter experience so at this point\nwe have reached a place where we need to\naddress this file\nstore.js because we are doing some you\nknow view logic but right now we're hard\ncoding which player is up and if you\nremember from the earlier implementation\nwe had the state variable right here\nwhere we're tracking the moves and then\nbased on those moves we're getting a\ngame status if there's a winner and\nwe're also using that information to\ndetermine you know what's the current\nplayer and which you know icon and which\ncolors am I going to add looking at our\nprevious implementation this is kind of\na critical moment in the refactor where\nwe start to see things separating into\ndifferent concerns so separation of\nconcerns\nas you can see in our event listener for\nthe player move we're doing multiple\nthings we are changing what the user is\nseeing in the Dom so we're updating\nclasses HTML elements so on and so forth\nand that's happening in logic just like\nthis\nwhere we're replacing the children with\nsome new elements now we're also doing\nsomething completely separate and that\nis reading and updating the state of our\ngame\nso as you can see uh sprinkled\nthroughout this uh listener we are doing\nthings like checking if the square has a\nmove and we're reading the state of the\napplication to figure that out\nfurthermore we're coming down here and\nwe're actually mutating or changing the\nstate of the application\nright alongside the changes to the view\nthese two things are separate concerns\nand that's why we need this store.js\nfile\nso similar to the view.js we're going to\ncreate a default class and Export it\nso we'll copy the syntax\nand this one's going to be called the\nstore\nwe of course need a Constructor\nand now one new thing that I'm going to\nintroduce we're going to set two private\nmethods\nwe're going to add a get State method\nand a Save State method\nand what these are going to represent\nfor us is a way to get a read-only copy\nof our current game State and then save\nstate is going to change\num and basically transition to the next\nstate of the application now there's\nsome really good articles online about\nState Management one of those is the\nRedux\ndocumentation Redux\nis I guess probably better to say it was\nthe leading State Management solution\nfor client-side apps for a long time now\nthat react has kind of refactored and\nmoved towards a functional component\napproach with use State and stuff like\nthat it hasn't been used quite as much\nbut there are some best practices that\nthey have written over years of managing\nstate within an application and they're\nvery good to read through\nthe one that I'm going to point us to is\nthe Do Not mutate State best practice\nso mutating state is the most common\ncause of bugs in Redux applications or\nin applications in general including\ncomponents failing to re-render properly\nand will also break time travel\ndebugging in the Redux Dev tools so\nthat's kind of specific to Redux\num but actual mutation of State value\nshould be avoided and we're going to\nstick to this approach because it's\ngenerally just a good idea and reduces\nthe surface area for bugs to occur\nif you see from our original\nimplementation we are directly mutating\nstate so we're reading it up here where\nwe're checking for something like the\nlast move and then we're directly\nupdating it here there's nothing\nterribly wrong with this at for the size\nof our application but it's just better\nto make sure that we're not doing that\nso what we're going to do here is\nactually add a private\nState variable and that's going to be\nequal to an array of moves so that's\nvery similar to what we had up here\nright here but it's going to be private\nso only\nthis class itself can read the state and\nwrite to it and we have to use an\nintermediate method to actually retrieve\nthe state as I'll show in just a second\nso when we get the state all we're going\nto do is return this Dot\nState now this is kind of a redundant\nmethod you'll see why this is useful for\nus\nlater in this video when we refactor\nthis to use a little bit more persistent\nState Storage so we'll be looking into\nlocal storage right now that's not\num needed so we're going to keep it like\nthis but the get State method will just\nreturn this private State variable\nor property and then the save state is\ngoing to set it so we'll say this dot\nhashtag State and then that's going to\nbe equal to whatever new state is passed\nin\nnow something that's very useful when\nyou have a Save State method is being\nable to reference the prior state within\nthat method so rather than just passing\na hard-coded object\nas new state I'm going to make a\nparameter called state or function\nand this can be passed as one of two\nthings you can pass just a raw object or\nyou can pass a callback function that we\nare going to give the previous value of\nstate to so let me just walk through\nthis it's a little bit confusing if\nyou're not familiar but this will really\nhelp us out later\nso we'll say the previous state is equal\nto this dot get state\nso that's the previous state we're\ndealing with that's reading here\nand then we need to check what kind of\nargument that we're actually dealing\nwith so we'll say let new state\nthat's going to be just a\nvariable that we're going to initialize\nbut not assign yet and now we're going\nto say switch\non the type of state or function\nso we've got a switch statement and\nwe're going to look for a function type\nand we'll break from that or a object\ntype because our state is an object and\nwe'll break from that and then the\ndefault is going to be throw a new error\ninvalid param or invalid argument passed\nto save state\nbecause we only want to handle these two\ncases\nso it's pretty simple from here if it's\na function all we're going to do is say\nthe new state is equal to the state or\nfunction which we know is a function\nhere and then we're going to pass in the\nprevious state so that whoever calls\nthis has access to that\nnow if it's an object we're just going\nto set the new state is equal to the\num not the previous state\nbut the state or function so in this\ncase we've just passed a literal object\nand we just want to assign that to state\nthen from here all we're going to do is\nbasically later we'll save this to local\nstorage but for now it's all good\nwe'll just say this dot state\nis equal to the new state that we had\njust assigned right here\nso let's save that now we've got our get\nState and save State functions\nimplemented and now we need to actually\ninitialize this so we'll have a default\nvalue that we're passing into this store\nand this default value\nis going to\nwe'll just call it initial value and\nwe'll set that equal to moves and that\nwill be an empty array so as you can see\nwe've initialized it right there but\nreally we can just refactor that to say\ninitial value once again I know this is\na bit contrived we're doing a little bit\nof indirect stuff but you'll see later\nwhy this makes sense once we start\ngetting into local storage\nat this point if you're paying attention\nyou'll probably notice that everything\nthat we've defined here is a private\nmethod or property and therefore this\nclass is not very useful so what we want\nto do is expose a getter method that\nallows us to read the state and then our\napplication can take that state that\nwe've read and do something with it so\nif you'll see in app.js one of the\nthings that we had defined was get game\nstatus and we just passed in the moves\nthat was you know in state and that's\ngoing to give us things like the status\nof the game if it's complete or in\nprogress and then if there's a winner it\nwill Define that so this is something\nthat we'll need and we can Define that\nin the store now something I like to use\nwhen we're just reading a read-only\nvalue from a class is to add a getter\nmethod so if we add the get keyword\nfollowed by something like game and then\nwe Define a method this is going to be\nevaluated at runtime and basically what\nwe can do here\nwhere we initialize the store which we\nstill need to do so store equals new\nstore\nand that should have Auto imported\nthings for us so import store from\nstore.js\nso when we initialize that now\nstore.game is a property that is\navailable\nso let's just console.log store.game\nright now\nand we'll just return dummy value\nso let's go back to our UI and you can\nsee that it prints dummy value now just\nto demonstrate if we remove that getter\nit's going to break we're just going to\nget a function called game so we would\nneed to go over here and actually call\nthat as a function to get the dummy\nvalue that we're looking for so that's\nwhy I like to just use a getter because\nyou don't have to call anything you can\njust add that get keyword and then this\nacts as a property on the class instance\nso as you can see in our Handler for a\nPlayer move we are hard coding right now\nthe player that is up so we obviously\nwant to get that from the state of our\ngame or from the store\nso to do that we're going to update this\nclass property\nto basically derive some state so the\ngoal with saving State as we talked\nabout earlier is to keep it as simple as\nhumanly possible and then we're going to\nderive as much as we can at runtime from\nthat so that just makes it so that we\nonly have to update a small piece of\nstate and then we can just dynamically\nget the rest\nso I'm going to basically take this\nmethod that we had defined earlier\nget game status and I'm going to kind of\nrefactor this make it a little bit\nsimpler and the first thing that I'll do\nhere is Define our list of players this\nis going to make things a lot easier for\nus and I'm just going to copy in from\nthe completed app so we don't have to\ntype things out and then I'll explain\nwhat we're doing here\nso down here I think at this point I'm\ngoing to collapse\nour app because we're once again not\nusing this we're just using it as a\nreference\nso here we're going to define the\nplayers of the game how I've decided to\nrepresent these players is just a tuple\nor an array of players and we'll just\nknow that the zero index is player one\nand the one index is player two\nnow what we're doing is basically adding\nsome configuration here so this is a\nconfiguration array that's saying we\nhave got two players this is the name of\nplayer one they are going to be the X\nicon and they're going to have a color\nclass of turquoise likewise player 2 O\nin color of yellow so this is going to\nhelp us with our internal logic quite a\nbit and I'll show you what I mean uh\nhere in a second so before we even touch\nthe store anymore let me just pass in uh\nplayers and then the first index so that\nwould represent player two obviously\nthis is going to break that method\nbecause we're not expecting an object so\nif we click stuff it's just not going to\nwork correctly\nbut if we go to The View\nand go down to that method that we had\ndefined so set turn indicator\nthis player now represents that object\nso now that we're passing an object as\nthe player this logic here gets a bit\nsimpler but the problem is if you look\nat our index.html we're defining the\ncolor on that top level which means we\nhave to add and remove classes so really\nwe would need to pass in player and then\nopponent and then here what we would do\nis say player dot let's see color class\nand then this one would be opponent\ndot color class so we're adding the\nplayers the current players color class\nand then we're removing the opponent's\ncolor class now a bit simpler way to\nhandle this I know I'm kind of going\nback and forth here\num but let's go back to index.html and\nremove the color property from this\nouter div and instead let's just\ninitialize the color property of this\neach element Within\nso to start the game out we're going to\nhave a yellow X for player one because\nthat will be o is the first player so\nlet's save that and then here in the\nview that means that we no longer have\nto remove classes\nand instead of looking at the turn we\ncan just directly add these to the icon\nso icon.class list\ndot add and then we'll say player dot\ncolor class and then label dot\num class list\nwill also be color class\nwe can remove the opponent here\nand then if we come down here let's just\nkind of group these icon classes\ntogether this is where we're defining\nwhich icon it is and rather than doing\nthis switch here we can just say player\ndot icon class so remember we defined an\nicon class and a color class on each\nplayer so here we're adding the color\nclass here we're adding the icon class\nand since we're doing the doing this to\nthe same icon we can actually combine\nall of this\nso we'll say f a solid\nthen a color class\nand then an icon class and we can delete\nthis line so this will pass to all three\nof those\nthen finally the label gets a color\nclass and then we need to update the\nlabel inner text but instead of these\nstatic strings once again we've made it\neasy for ourselves in our configuration\nso we can just say player.name\nas you can see right here we've defined\na player name so we can just add some\nstring interpolation here\nand we'll say player one\nyou're up\nand then finally we're getting the\ncontainer and we're replacing it with\nthe icon in the label so now that we've\ndone that we should be able to uh see\nthis working so we don't need to pass\nthat opponent anymore just the player so\nlet's go back and click something so\nthis should be turquoise not yellow so\nlet's see what's happening here\nwe're passing in players index of one so\nwe're basically passing this object\nwe'll bring that over to The View\njust so that we have a reference\nto see what we're passing\nso that's the object that is being\npassed in this case\nand we are grabbing the color class\nwhich is defined as yellow and the icon\nclass which is O so that's our problem\nour configuration object is actually\ndifferent\nlet's check the final implementation so\nthe vanilla refactor\nyou can see that the x is turquoise and\nthe O is yellow so I actually had things\nbackwards this whole time I apologize\nthe O should be yellow and the X should\nbe turquoise\nso I think this is intended Behavior\nlet's delete that\nand then instead of player two we'll\npass in player one\nand let's see that is working a little\nbit better\nwe've got a blue X and then if we load\nby default we need to update that as\nwell\nso this should start as turquoise\nthis should start is turquoise so player\none you're up\na turquoise X is that the same thing we\nget here let's reset yep we get a\nturquoise X so we're starting in the\nright State and then as we click\nsomething\nwe should be getting that to change so\nlet's\nclick for player two\nand there we go we've got a yellow o\nwith player two text added in there\nand then the last thing we can kind of\nre-factor here is the handle Player move\ninstead of just hard coding in one we\ncan hard code in players at one\nso we'll go back to handle Player move\nand this player is now an object\nso we can replace this here with player\ndot icon class\nand then player.color class\nsave that make sure our icons are going\nin correctly and it looks like they are\nso that is refactored that makes things\na little bit easier for us to handle and\nnow we can go to the store and start\ndefining this read-only game State\nvariable right now we're just returning\na dummy value which is not useful to us\nbut the purpose of this getter method\nis to basically take the raw State\nobject which is just an array of game\nmoves and calculate all sorts of useful\ninformation from that\nyou can already see we've done that\num with our get game stats right here or\nget game status so the the things that\nwe're really doing here is checking for\na winner and then also at some point\nwe're going to have to figure out who's\nthe current move\num or who's up to play so we can\nEncompass all of that within a single\nmethod here and we're going to build\nthis uh kind of piece by piece until we\nhave something to read from so that we\ncan determine down here in our\ncontroller method where we're setting\nthe turn indicator and handling the\nplayer move that way we can just pass in\nthat derived state so that these methods\nknow what to actually do with the UI\nso let's start out by getting the\ncurrent player so we will First grab\nstate\nwhich can be read\nwith the get State method so this is\njust a assignment we could just read\nthis directly but nice to have a\nvariable to work with here\nso that is the first step and then we're\ngoing to derive the current player with\na little trick and I believe the\noriginal\ncreators of this game that I'm\nrefactoring here already had this little\ntrick and they were using it but we can\nuse the modulus operator to basically\ndetermine the current player so what\nthat looks like is we'll say the current\nplayer is equal to\num the list of players which we do not\nhave access to here but really just a\nlist of players and then we can grab the\nindex of that based on\num how many moves have been made within\nthe game but like I said we don't have\nthe list of players so one thing that we\nneed to do is pass that to the store so\nthat it has access to that\nso we'll pass that array of players and\nthen we'll set a player's\nproperty on the class and so that way we\ncan access it right here and then grab\nwhichever player we want so we'll put in\nzero for now as a hard-coded value let's\ngo back to app and where we initialize\nthe store\nsince we have the list of players right\nhere we can just pass that array down to\nthe store via the Constructor so at this\npoint what we can do is we can say State\nDOT moves dot length so that will tell\nus how many moves are in this current\ngame\nand we can use the modulus operator and\nuse it modulo 2 which will basically\ngive us either a 1 or a zero based on\nthe the number of moves so if we just\nopen up a terminal here and open up a\nlittle playground with node.js\nyou can see that if we have let's say an\narray of moves and let's just say it's\none two one two just to fill it up so we\ncurrently have a moves.length of four So\nbased on this if player one is the\nstarting player then we know that player\none made this move player two made this\nmove one made this move and two made\nthis move so who's up next\nwell the way that we can determine that\nis basically just doing moves.linked\nmodulo 2. and that will give us a zero\nand since our players array is just two\nobjects the zero index is going to be\nplayer one and the one index is going to\nbe player two so if we were to push a\nnew move to that array so let's say\nplayer one moves now if we do\nmoves.length modulo two we get one which\nis the index of player two so you can\nsee how based on the length of this\narray we can quickly determine who the\ncurrent move belongs to so we'll go to\nthe store and we will do this operation\nto get the current player and then from\nthere we can also derive the next player\nin the game so we'll say but we actually\nmight not need that let's hold off on\nthat one for the moment\nso let's go ahead and return the current\nplayer as part of an object so we now\nhave that as part of our game state\nand then we can come down here to the\nset turn indicator and we're going to\nreverse this because first we need to\nactually handle the player move and I'm\ngoing to make a variable to keep things\nclear\nwe will say that the clicked square is\nequal to the event.target because that's\nwhat that actually represents if you go\nback to the view where we are binding\nthat move we're just looping through the\nsquares and adding that event listener\nlistener which is going to pass the\nindividual Square to that Handler that\nwas clicked so that's what that\nrepresents and just for clarity we can\npass it like that and then for the\ncurrent player that we want to move now\nwe have some game state so we can say\nstore Dot Game Dot currentplayer\nand that should satisfy the stub of this\nmethod so we are now passing the current\nplayer in and at this point we need to\nupdate some of our state because we of\ncourse have made a move by this player\nand now we want to set the turn\nindicator but we don't want to set that\nfor the current player because they have\njust moved we want to do it for the next\nplayer so we need a way to update the\nstate to advance it to the next play\nso the way we can do that is make a\nmethod in store a public method called\nlet's see what I called it in the final\nproject I think I just called it Player\nmove and what we're doing here is\npassing a square ID so that's one\nthrough nine based on which one was\nclicked and to follow our Convention of\nnot mutating State directly we first\nneed to grab state from the getter\nmethod that we've defined right here so\nwe're returning that private variable\nthen we need to make a clone of it so\nwe're going to go ahead and\ncall that state clone and there's a\nbuilt-in method to browsers called\nstructured clone which you can pass an\narray an object pretty much anything and\nit will give you a clone of that object\nso we're no longer referencing we're no\nlonger passing a value by reference\nwhere we've got a completely different\nobject that we're able to mutate here\nso from this point we can go ahead and\ntake the state clone and push a new move\nto this array\num actually we don't want to push it\ndirectly there because the the state\nobject has an array of moves but that is\na property so what we're really saying\nis State clone dot moves dot push and\nthen we need to pass in the Square ID\nright here and then also the player ID\nso or not the ID we'll just pass in the\nplayer that is currently up so that\nwould be state or not state but this Dot\nGame remember we just derived that up\nhere so we can actually access that\nproperty within the class\nand we can pass it the current player so\nwhen we call Player move it's going to\ntake the square ID that was clicked and\nthe current player that was up and push\nthat as a move to the state object so\nthat's going to actually update our\nstate for us\num but the last step we need to call is\nthis dot Save State in this case our\nstate object's pretty simple so we can\njust pass in that literal object rather\nthan a callback function but we'll come\nback and refactor this as we develop our\nstate handling a little bit further\nlater on so let's save that and then\nback in app.js all we need to do now is\ncall store dot Player move\nin here we just need to pass the click\nsquare but we need to pass an ID so\nreally what that is is going to be dot\nID and we need to cast that to a number\nbecause uh the event ID or the event\ntargets ID will come as a string by\ndefault so we're passing in a number ID\nand we're updating state so at this\npoint we're allowed to Now set the turn\nindicator to the current player because\nthat has been updated with this method\nso we can go back to the store.game dot\ncurrentplayer and set the turn indicator\nnow the important thing to notice here\nis that this store.game.current player\nis a different player than this\nstore.game.current player and that is\nbecause we have made a state change\nhappen in between the two and every time\nthat state changes that getter value\nthat we've defined right here is going\nto automatically re-evaluate and update\nso if all worked when we click a square\nit should update things dynamically so\nit says player one you're up and we\nclick\nand now we've played with player one\nwith that X and you can see player 2 is\nnow up now we should be able to click\nand we get an O and now player one is up\nso now we have this working again but if\nyou remember from the original\nimplementation we had one big problem\nand that's if you click twice on a\nsquare so we need to make sure that we\nare not updating a square twice and that\nshould be relatively simple to handle so\nlet me comment some things in here we\nwill say\num\nplace an icon of the current player in a\nsquare\nadvance to the next state by pushing a\nmove to the moves array\nand then\nset the next players turn indicator\nnow up here at the top this is where we\nneed to check whether there's an\nexisting move\nso you can see in our original\nimplementation what we did here was we\nmade a little helper method that says\nwhether a square ID has an existing move\nand then we checked if that current\nTarget matched that and if it did we\nreturned early\nso we can actually we could make a\nhelper method to do this\nwithin the store or we could just check\nit inline I'm going to go ahead and just\ncheck this inline as you'll see in just\na second\nso let's collapse the app\nand let's say the existing move is going\nto be equal to the store dot game\nthat moves dot find and so we're looking\nfor a specific move that has a square ID\nequal to the clicked Square dot ID and\nwe need to make sure that that is a\nnumber\nso we're comparing the same thing\nso if there's an existing move\nif that's not undefined basically we're\ngoing to return early and we're not\ngoing to handle that Player move\nsave the state or set the turn indicator\nlet's save that and now let's play and\nit looks like we've got a problem and\nyou can see that we're getting an error\nhere by reading the\nstore.game.moves it says that it is\nundefined and that makes sense because\nwe have not actually added that to our\ngetter so let's go back to the store and\nremember game is only returning the\ncurrent player so it would be nice if we\nalso just gave it uh the moves array\njust so we have access to that\nso we'll save that and now things should\nwork a lot better so now if we click\nsomething twice it's actually still\nmessing up and I believe this is because\nof the same reason we ran into earlier\nthat I failed to recognize once again\nwhen we're binding to this Player move\nevent if you look in the view\nwe are basically just passing\num the event\nuh to the Handler and that event could\nhave been an icon that was clicked so\ninstead of just blindly passing the\nHandler right here what we really need\nto do is break this out into a function\nand pass the square itself that we are\nsetting the event listener on rather\nthan the event Target which was the\ndefault that was passed\nso let's update that go back and see if\nthat fixed things for us\nSquare element is undefined\nwe just need to make one adjustment here\nit is no longer an event that's being\npassed it's a square reference so this\nis actually more expressive anyways so\nwe will check\nSquare\nand then update these references\nand hopefully finally this will work\nso we're clicking clicking click it\nagain and it does not do anything as we\nexpected so now we've got a lot more\nstable behavior and we're almost back to\nwhere we started but of course we've got\na tic-tac-toe in two places and the game\nhas not recognized that yet and that's\nbecause we need to once again build up\nour\nderived state which is in this method\nright here the last piece of state that\nwe need to derive in this game property\nor getter is who has won the game we've\nalready done this in our previous\nimplementation\nwe did this right here where we were\nchecking the player moves the winning\npatterns and then checking the player\nmoves against those winning patterns\nwe were then deriving it as a status and\na winner so I'm going to do something\nsimilar to this but we're going to\nsimplify just a little bit in this new\nderived State method\nso the first thing we'll do is copy in\nthose winning patterns because those are\njust static and then we'll initialize\nthe winner to be equal to null\njust to get a variable in place\nand then what we're going to say is four\nwe're going to do a for Loop\nwe're going to Loop through each player\nso for player of this dot players so\nremember we initialized the list of\nplayers which is just two people in the\nConstructor so we can Loop through each\nplayer and then within that Loop we can\nget the selected Square IDs of that\nplayer so we'll say this\ndot game\ndot moves\nand remember this is just the current\nstate of the game so this.game.moves\nor I'm sorry we should probably not do\nthat because we're referencing this\nmethod from itself\nso what we need to reference is this\nstate uh\nvariable right here where we're getting\nthe raw state so we'll say state DOT\nmoves and we're going to filter those\nmoves to only be the moves of the\ncurrent player\nthat we are looking at\nso just walking through this logic a\nlittle bit we've got the array of raw\nstate of moves and we're going to filter\nout\nany player that does not match the\ncurrent player in our Loop furthermore\nwe're going to map that resulting array\nand just grab the square ID off of the\nindividual move so if you remember we're\npushing a square ID and a player to that\nmoves array so that's basically what\nwe're reading\noff of this right here so we've got a\nlist of selected Square IDs for the\ncurrent user and now we're going to do\nan inner loop\nand we're going to say for pattern of\nwinning patterns\nnow we're going to check check if the\npattern\nmatches every one of those selected\nSquare IDs\nor actually I should probably say if the\nsquare IDs has every element of the\npattern so we'll say selected Square IDs\nincludes that value\nand so this will check if there is a\nwinning pattern and if that's the case\nwe're going to set that winner variable\nthat we initialized up here to whatever\nplayer we're in during that Loop in\nother words we're going to go through\nthis Loop and if no winning patterns are\nfound the winner is going to be left\nequal to null which is going to tell us\nthat this was a tie game\nalong with the status of the game so\nwe'll come down here and add a status\nproperty\nand we're going to say is the game\ncomplete this is going to be true if the\nwinner does not equal null so if the if\nthere is a winner populated we know the\ngame's complete or if the\nstate.moves.length is equal to nine\nbecause we know that that's the maximum\nnumber of moves that can be be played in\na given game\nand then finally we'll pass the winner\nvariable right here which will either be\nnull or set equal to some player\nso now we have some derived State and\nI'll just remind you that we are\nderiving all of this information\nthe current player the status whether\nit's complete whether there's a winner\nwe're driving all that off of one simple\narray of game moves so that's going\nalong with our pattern of trying to keep\nState as simple as possible and then\nderiving what we need to know from it\nlater on dynamically now that we have\nthis information populated we should be\nable to come back to our app.js or our\ncontroller and this is where we will\ncheck whether there's a winner and if\nthere is we're going to open up some\nsort of modal\nto show that status to the user if you\nremember from our first implementation\nwe had\num let me collapse some of this stuff\nwe're not using\nso if you remember from here at the very\nbottom this is where we're checking the\ngame status and if the game is complete\nwe're going to remove the hidden class\non that modal so that it opens up\nand then we're going to set a message so\nwe can make some utility classes or some\nDom helper methods within our view class\nto achieve this so let's go back to the\nview class and hook up some of those\nmethods we can put them pretty much\nanywhere I'll just put them at the top\nhere the first one that we'll want is an\nopen modal method and we're going to\npass in a message\nand what we'll do with that is select\nthe modal itself\nand that's going to be the one that we\nremoved the class from\nso there's the modal in our index.html\nthat is this entire div that's got\nhidden on it so let's remove that real\nquick and you can see how it pops that\nup\nso really what we're trying to do is\njust toggle that class\nin the way we'll do that\nso we'll come down to our helper method\nand we'll look at the class list and we\nwill remove\nthe hidden class\nso very similar to what we were doing\nbefore\nso let's just try this little\num\nhelper out right now to make sure that\nit's working and then we'll come back\nand improve it with\nan actual message that we can show\nso we're coming down here we've set the\nturn indicator for the next player\nand now it's probably time to check\nwhether someone has won the game\nso really we need to do this before we\nset the turn indicator because this will\nupdate that text up here and if the\ngame's over we don't really want that to\nchange\nso here's where we check that state\nwe're going to say if the store dot game\ndot status is complete\nthis is where we're going to perform\nthis logic and we're going to add a\nreturn statement here because if it's\ncomplete we know we don't want to run\nthis logic so we always want to return\nat this point we'll call View\nDot openmodal and that should open\nthings up for us so let's go to the game\nand play it\nand see if it recognizes this winning\npattern\nand it does so we see player one wins if\nwe click play again it's not going to do\nanything because we haven't updated that\nevent listener\nso let's refresh the game start over\nand at this point we need to pass in\nsome a message to say who won the game\nand we can go ahead and derive that\nso we'll put in a variable here\nor actually we should probably not do\nthat yet\nwe want to say if the store.game\ndot status\ndot is complete or no we already know\nthat dot winner\nif there is a winner then we want to say\nstore.game.status.winner dot name\nbecause that's a player that we're\nreferring to\nand then we'll say wins otherwise it's\ngoing to be Thai\nso that should be the correct Logic for\nopening the message in the modal\nwe still don't have any listener for\nresetting the game but player one wins\nlet's reset real quick in this case\nlet's make sure that player 2 wins\nand it's still saying that player one\nhas won the game so we've got a little\nbit of a problem here and it's actually\nnot a problem I'm just getting tired and\nforgetting things in our view when we're\nopening the modal we have to actually\nupdate the text within it so this dot\nmodal text\ndot inner text is going to be equal to\nthe message\nso let's try that again\nlet's make sure player 2 wins\nso here we go we got player two wins\nrefresh and then if we have player one\nwins that'll show up there so the last\nthing we need to do is register an event\nlistener on this play again button which\nwill reset the game State since we're\nresetting the state we need to do this\nevent listener outside of the view this\nbind game reset event is meant to be\num\na Handler for whenever we click this\nreset button but we can also overlap and\nuse it for when the game is complete so\nnot only do we want to register that on\nthe reset uh button we also want to\nregister that on the modal button\nbecause that is going to also reset the\ngame and do the same exact thing\nso we'll pass in the same event and the\nsame Handler and make sure that's hooked\nup\nthen when we go back to app\nand we go to the bind game reset event\nthis is what we need to now fill in\nso whenever this pops up\nand we have\nan end State when we click this we want\neverything to close and reset so one\nthing we need to implement is the close\nmodal helper method\nso right next to open modal\nwe'll make one that says close modal\nand this will be very simple\nwe will just add the hidden class\nthis time so let's go ahead and call\nthat\nclose modal\nand see if that works so we should be\nbound to this button here and when we\nclick it it should now close the modal\nwhich it does but you can see the state\nhas not reset which we want to have\nhappen so this is a job for the store\nclass\nand we need to just Implement a method\nlet's put it under Player move and I\nthink I called this just reset in the\nfinal implementation so we'll say reset\nwithin this method we're basically going\nto read\nor we're going to just set the state to\nbe empty so we can\njust call Save State and we'll set it to\nthe initial value\nso initial value is referencing this\nright here so this is basically\nresetting the game now if you'll notice\nwe're not saving any history of past\ngames we'll eventually add that but for\nright now we just want to get things to\nreset correctly so over in app.js we are\nclosing the modal and then we're calling\nfrom the store we want to reset the game\nand then the one last thing we need to\ndo just to make sure that player one is\ngoing to be up at the beginning of the\nnext game is say view dot set turn\nindicator and you remember we can just\npass a player there\nso we should be able to just pass\nplayers zero because that represents\nplayer one and we always want to reset\nto player one\nnow another way to do this is we know\nthat the after we've reset the state we\nknow that if we access\nstore.game.current player\nthat's going to also give us player one\nso that's probably a more semantic way\nto do that\nso let's command s to save so we're\ngoing to close the modal reset the state\nand set the next turn indicator so\neverything should be cleared out at that\npoint the only thing that we're probably\nmissing is we don't have a method to\nclear the game board so we're resetting\nthis state itself but we're not clearing\nthe game board so let's go to the view\nand we'll say clear moves\nand what we're going to do is just\nlook at these squares\nhow did I access this hold on yep so I'm\njust accessing it like this so for each\nSquare\nI just want to clear things out so\nSquare dot replace\nchildren and leave that empty to\nbasically just clear everything out\nso we need to clear the moves\nafter we've reset the store so view dot\nclear moves and then we'll set the turn\nindicator and this should pretty\nsufficiently clear everything from the\nstate and The View\nso let's refresh and play the game\nplayer one wins and when we click play\nagain everything clears and player one\nis going to be up\nso if we do the same thing for player\ntwo player two wins you can see player\ntwo is up but that will reset to player\none you are up at the end\nbut obviously at this point we have a\nworking game but if we started to play\nthen we refresh the browser it's going\nto reset\nif we play and player one wins and we\nclick play again none of this stuff is\nbeing tracked down here we have no\nhistory of games of the past so if we\nwanted to implement that that's going to\nbasically be the next phase of this\nvideo and it's going to get into some\nreally cool concepts with local storage\nand finally we will kind of refactor\nthis to be a little bit more declarative\nso that we can just kind of react to all\nof these State changes and render\nwhatever UI should be based on that\ncurrent state one last thing I wanted to\ntest let's make a move on the game board\nand I believe we should be able to click\nreset\nand everything resets okay\nnow this does not close which we're\ngoing to want to implement but just\nwanted to show you that because we\nactually indirectly implemented this\nreset method when we were working on\nhandling a winning game and how we did\nthat remember when we binded to the game\nreset event that is actually linked to\nboth the reset button and the modal\nreset button so it's running the same\nHandler regardless now as you saw that\ndoesn't close everything so in app.js\nwhere we are closing the modal let's\nrefactor this to not do closed modal but\nclose all\nand we need to implement that method\nwe'll put that right under close modal\nand we'll say close all\nand this is basically going to\num\ncall the close modal so we're going to\nclose the modal and then we want to\nclose the menu we currently have a\ntoggle menu method but we also want to\nhave a close menu method so this is\ngoing to look pretty similar to this\nmethod we're just going to say this dot\ndollar sign dot menu items\nand then on that class list we're going\nto add hidden to make sure that it's\nclosed we're going to also remove the\nBorder\nso remove the border on the menu button\nbecause when that's closed we know that\nshould not be there\nand then we'll reselect the icon because\nwe always want to make sure that that is\ngoing to be the icon that points down\nso let's just copy these two\nand instead of toggle we're going to add\nthis one and remove this one so when we\ncall close menu it's just going to make\nsure that everything is in its closed\nstate\nand then we'll add that to\nthe close all method and at this point\nwe can make this close menu a private\nmethod because that's only being called\nhere\nwe can also make closed modal it's put\nthat down here and make that a private\nmethod because it's only being called\nhere\nso now we have a helper method close all\nthat is being called when the game is\nreset and that should clear all the\nstate so if we make a move open this\nactions and reset\nit's going to say closed modal is not a\nfunction\nand that's because we are not\nreferencing it from its private\ndeclaration so now that should work\nso make a move\nreset that closes this resets game board\nis cleared and everything is working\ngreat so as I mentioned we're not\ntracking down here the history of all\nthe games that have been played and we\nalso don't have anything happening here\nwhen we click new round\nso in order to track that we need to\nupdate our state object\nso right now this is the initial value\nwe're just tracking an array of moves\nbut really what we need to be doing is\ntracking an array of moves and a history\nobject that has the current round gains\nand that should be an array and then all\ngames which is just basically all the\nhistory from\nyou know all the time so with this\ninformation right here we should be able\nto calculate some statistics of how many\nwins each player has so just for clarity\nI'm going to also update update this to\ncurrent\num or current game moves\nso this will still represent the same\nthing we just need to update\nour references to here so current game\nmoves\ncurrent game moves do we have it\nanywhere else\nokay I think that's it so if that worked\num we should be\nable to see the same functionality\nthings should still be working\nand it looks like it is\nand so now all we need to do to start\ntracking this is when we reset the game\ninstead of just saving the state back to\nthe initial value we should update the\nstate to basically take that finished\ngame that we just completed push that to\nthe history and then start a new game\nso what does that look like so to start\ntracking the history here let's just\nrefactor a little bit right up here so\nwe don't really need two variables let's\njust pass\nget State into structured clone\nand we'll just call this one state clone\nso that's for the player move\nand that should remain the same the\nreset method is where we're really going\nto do some updating in the reset method\nwe're going to have to check for a very\nspecific condition\nand that is if this dot game so we're\nreading that getter up here that we've\ndefined\num dot status is complete\nif it's complete we want to push this\ngame that we're resetting to the history\nobject or the history array\nand if it's not complete then we just\nwant to reset it totally because\nremember\nin the view we're adding this reset to\ntwo different places we're adding it to\nthis drop down right here which could\nreset the game even if it's incomplete\nwe're also adding it to this button\nright here when the game is complete so\nwe need to make sure that we're checking\nthat before we push an incomplete game\nto the history\nso all we need to do is check for\num the moves we can destructure that\nfrom this Dot Game really we should just\ndestructure all of this stuff\nso we'll say status moves and then I\nthink that's it\nso now we can reference status that is\ncomplete\nand we should also make a state clone\nbecause we're not going to mutate State\ndirectly\nso in here we'll say state\nclone and then remember our state now\nlooks like this so we can grab the\nhistory and then current round games\narray is where we want to Target this\nso State clone dot history dot current\nround games\nand we're going to push the final game\nhere so I believe that would just look\nlike\num let's see\nwe probably just want to push the moves\nin the status\nwe don't want to just push the moves\nbecause we want a easy way to Loop\nthrough all the history of games and see\nthe status on those which is that\nderived state right here so we want to\nkind of archive that as well now after\nwe get past this block this is where\nwe're going to look at the state clone\nand set the current game moves equal to\nan empty array because we want to reset\nthat and then instead of saving it to\nthe initial value we're going to State\nsave it to the state clone that we've\njust mutated here in these two places so\nat this point if we've done everything\ncorrectly here we should be able to add\na new getter so we've got the current\ngame and then let's also make a stat\nskidder so this will be responsible for\ngetting us the total number of wins by\nplayer\nand to start us off let's just console\nlog this Dot\num\nget state\nso we'll go back to our game let's play\nat least one round\nand reset and so right there that should\nhave pushed\num a few or it should have pushed a game\nto history and since we're not actually\ncalling this anywhere it's not showing\nup\num so we need to call that somewhere\nwe'll just call it at the end of the\ngame reset so console log store dot\nstats\nwe'll remove that in just a second but\nlet's play one more game so I think\nplayer one should have two wins at this\npoint when we reset so you can see in\nhistory we have current round games is\nan array\nof one and it shows all the moves from\nthat game and then the status\nshowing that the winner was player one\nand if we play this again I'm hoping\nthings will update correctly\nyep so now in history we have two games\nin history so if we keep playing these\nthat's basically what's going to happen\nso at this point player one has won\nthree games and you can retrieve all of\nthose in history right here\nso now our job is to go back to the\nstats method on our store class and\nactually derive some useful state that\nwe can use to update those that\nscoreboard down here at the bottom so\nwhat I want to return from this it\nshould be pretty simple so player with\nstats\num what I'm going to do here is map\nthrough the players array which remember\nwe initialized the Constructor with\nplayers and then assigned that as a\nproperty of the class\nso we have that and we can map through\nand look at each player\nand then all we're going to do is add\nwhether they have a win\nor add how many wins they have so we'll\ncalculate wins by looking at the current\nstate so this Dot Game or I'm sorry not\nthis dot game but we will look at the\nhistory so we need to grab\nthe current state which is this Dot\noops\nget state\nso we'll say state DOT history we're\nlooking in the history of the current\nround games\nand we're going to filter that\nand we're going to look at the game\nand check for the status\nof that and see if there's a winner and\nif there's a winner we'll use a\nan operator here that JavaScript has\navailable to basically coalesce any\nundefined values uh when we're accessing\nthis property\nso we can pass ID and check if that's\nequal to the current player.id so we're\nchecking the player we're mapping\nthrough against the game status of the\ncurrent game we're mapping and at the\nend of that we should be able to get the\nlength of that array so that will give\nus the number of wins that this player\nhas we will then from this map\nfunction we will then spread the player\nobject\nto this object and then we'll pass the\nnumber of wins so essentially this is\ngiving us a list of players where it has\nthis additional property called wins\nthat will tell tell us later how many\nwins that player has\nfurthermore we then have ties and that\none's pretty easy we'll just look\nthrough the history again\nand this time we're going to filter it\nfor games where the game.status dot\nwinner is equal to null so that will\ntell us when we have a tie if there's no\nwinner\nand we'll give it the length there as\nwell so now when we read the stats\nobject we should be getting a much\ndifferent picture so let's go ahead and\nplay another game\nand now we've got the stats object we've\ngot player with stats and you can see\nthat's an array of two players and if we\nopen up those players we get all of\ntheir attributes of course and then we\nalso get how many wins that they've had\nso far in history we get the ties is\nequal to zero and you can all already\nsee that we can basically take this\ninformation and just update the HTML to\nshow that in these three boxes down here\nso populating these will be relatively\nquick I think\nwe just need to go to view\nand make one more helper method I'll\njust keep putting it here at the top\nlet's go ahead and say update scoreboard\nis the method that we're going to use\nand I think we might need to put a data\nID on some of these\nyep so I'm going to put a data ID\nand we're going to call this one uh\nplayer one\nscoreboard\nor let's let's actually just make it\nshorter P1 wins\nso we'll copy that one down\nto player two so P2 wins and then we\nalready have a data ID because I guess I\nforgot to pull that out during our HTML\nbuild so that's already there for ties\nso if we go to our view\nwe just need to select these elements\num\nwe could just do it in this method we\nreally could do all this in that method\nI just like to consolidate stuff up here\nso we're going to select the player one\nwins and this is going to be selected\nP1 wins let's make sure that's right\nokay\nthen let's copy that down\nplayer two wins\nand then ties\nand then now we have these three\nelements to work with\nso we can update the scoreboard by\nsaying this dot dollar sign that player\none wins\nand we'll set the inner text\nequal to\nand then we'll get the number there and\nwe'll say that number of wins\nso that'll be this dot game I'm sorry\nthis dot stats\nnope never mind we are in the view I was\ngotta gotta be careful where you're\nputting stuff we don't have access to\nthat information yet so we're just going\nto pass that information directly to the\nmethod so player one wins player two\nwins and ties\nso we'll just pass that in and then\nwe'll take care of actually getting\nthese values into this method later\nokay so that method should update the\nscoreboard\nwe just need to call it\nfrom somewhere\nso just checking looks good so we just\nneed to call that from somewhere and I\nthink the best place to do that at the\nmoment is to do it in the game reset\nevent because that's the only place that\nwe are actually\ncataloging the end of the game\nso after we have set the turn indicator\nwe're going to call from The View\nto update the scoreboard and at this\npoint we're going to pass in store dot\nstats Dot\nplayer with stats\nwe're going to select the first player\nand pass the number of wins\nwe'll do the same thing\nfor player two\nand then finally\nwith the ties\nwe can get rid of this console log\nand hopefully if that worked correctly\nthis will update things and our game\nwill be sort of done\nwe've gotten error it says it cannot\nfind elements and that's because we did\nnot save the index.html\nso now it's finding it\nand you can see player one has one win\nplayer two to win one\nthere's a win and then if we can somehow\nget a tie going here\num\nI guess that one's not gonna work\nah I can't get a tie going so we got\nplayer two with three wins player one\nwith one win so that is the current\nhistory now the very last thing that we\nneed to do\num when we reset right here it's not\ngoing to clear any of this the only\nthing that's going to clear this\nscoreboard is the new round so we need\nto implement that method\nand let's go ahead and do that in the\nstore first because\nthat's pretty close to the reset\nso we'll say new round\nand what we want to do with the new\nround is basically take all of the games\nthat are in the current round games and\npush them to this all games array and\nwe're basically going to clear out this\none and clear this one so one way that\nwe can do that\nsince we know that a new round is going\nto also be a reset\nwhat we can first do is call this dot\nreset so that will take any completed\ngames put them into the current round\ngames in clear everything out\nand after we've reset we need a state\nclone because we can't update State\ndirectly just to best practice as we\ntalked about\nand what we're going to do is take the\nstate clone\ngrab the history\nand we're going to populate the all\ngames\num\nwith the most recent current round games\nso one quick way that we can do this\nbecause this is going to be an array is\nwe can spread that out to the push\nmethod so State clone dot history dot\ncurrent round games so that will just\npush that to all games and then at last\nwe will take\nthat current round games and set that to\nan empty array\nand then finally we will save the state\npass in that state clone that we have\nmodified\nnow there's one thing that's going to be\nmessed up\nand it's probably not super apparent so\nif we go through and play some games\nand then we go and reset everything\nlet me see\nand at this point we really just need to\nhook this up\nto the view so we have bound the new\nround event\nand in app.js we just have a placeholder\nhere\nso what we need to do is basically call\nthe store\ncall for a new round and then I think\nwe'll want to clear everything so\nsimilar to the the reset we'll want to\nclose everything\nwe will want to clear the moves so this\nis the UI not the store\nwe'll want to set the turn indicator\nand then we'll want to update the\nscoreboard\nso this call actually needs to go first\nso that the state is updated and then\nall of these will read from that state\nto appropriately populate the um the UI\nso let's go try this\nwe've got so far\num let's populate some state\nso player one has two wins if we click\nsomething and reset it'll just clear the\nboard but keep this if we go and hit new\nround you can see that it clears\neverything and now the scoreboard is\nalso cleared\nso at this point we have a fully\nfunctioning game and everything works\neverything's being updated\nthe last thing that we're going to look\nat here is persisting State across\nrefreshes as you can see if we play a\ngame\nand you get player one having one win\nand then you refresh the page this is\nall cleared out and ideally we would\nwant to be able to refresh the page and\nstill keep a record of the games in\nhistory and the only way that we can\nreally do that is by using local storage\nnow to make our game more persistent\nacross browser refreshes and\nadditionally to allow two users to\nbasically play at the same time in\ndifferent browser tabs we can use local\nstorage so if we go to the documentation\nfor local storage\nyou can see that it is a property of the\nwindow interface allows you to access a\nstorage object for the document's origin\nso it's similar to session storage\nexcept that while local storage data has\nno expiration session storage data gets\ncleared when the page session ends that\nis when the page is closed local storage\ndoes not do that so you can actually\nclose the page entirely and reopen it it\nwill still be there so it's just a\nlittle bit more persistent and it's also\navailable across browser tabs so if we\ngo to the event reference let me see if\nI can find that\nlet's click on storage Maybe\nand then look at storage event alright\nso this is what we're looking for in\nWool eventually implement this but the\nstorage event is implemented by or the\nstorage event interface is implemented\nby the storage event which is\nsent to a window when a storage area the\nwindow has access to is changed within\nthe context of another document\nthat is a long way of saying that\nbasically you can add an event listener\non the window for this storage event and\nif you have one tab sitting open\nwith our tic-tac-toe game and a player\nis clicking in it then that's going to\ntrigger this event and you can have\nanother tab listening for this event and\nit will recognize when that player has\nplayed in a different tab so that will\nallow us to sync the two tabs together\nand allow us to basically have two\nplayers in simulate a more realistic\ngame so we're going to implement local\nstorage but as we know with local\nstorage you need a key so we will\nImplement that but first let's get rid\nof our previous app we can finally hit\nthe delete button on that because\neverything's working in our refactor\neverything's a lot cleaner\nand now it's time to go over to the\nstore\nand in the Constructor to this store\nrather than just passing players we're\ngoing to also pass a key\nand this key is going to represent the\nkey of local storage that we're going to\nactually keep the data so if we go to\nstorage and we go to the local storage\nright there you'll see I've already\npopulated this because it's happening in\nthe the finished game over here\nbut the key is what's going to be\nreferenced to get it and save it and\nthen here's all the game state that\nwe're tracking so let's go ahead and go\nback to our app and we will give this a\nspecial key so in app.js where we\ninitialize\nthe store right here we'll say live\num\ntic-tac-toe so T3\nstorage key it could literally be\nanything\nso we're passing that key and now what\nwe need to do is save that so we'll say\nthis dot storage key is equal to key\nand then this dot players is equal to\nplayers so that should be working and\nthen the last thing that we need to\nactually do is go down to our get get\nState and save State and now instead of\nsaving this in memory on a property of\nthe class instance we're going to\nreplace this with local storage\nso that's why as I was talking about\nearlier this seemed a little redundant\nwhy would we access this through another\nmethod well it's so that we can refactor\nit to this a lot easier so we'll get rid\nof that instance property and in the get\nState this is where we're going to\nretrieve from local storage but as we\nknow uh if the local storage is empty\nit's going to give us undefined so\nremember at the top we have this initial\nvalue and that's go that's what will\nreturn if there's nothing found within\nlocal storage for that key\nso what we'll do is we'll first try to\ngrab an item and we'll say window dot\nlocal storage\ndot get item that's a built-in method\nand then we will pass the storage key\nthat we initialized in the Constructor\nof this class\nso this is going to return us either\nundefined or the string representation\nof this value so basically what we're\ngoing to return here is we're going to\nsay if we have found an item that is\ndefined we're going to parse it\nbecause it's a string\notherwise we're going to return the\ninitial value as a JavaScript object so\nin other words we're going to return the\nsame type we're just falling back to\nthis value so that's the get State\nimplementation\nand then for the Save State we'll\nreplace this call down here and we will\nsay\nwindow.localstorage that's set item\nand this is going to\num\nbe the storage key\nand then we need to actually do the\nopposite of\njson.parse and we need to stringify our\nobject so you can see here this is where\nwe're storing the new state after we've\nsaved it so we can just pass that raw\nobject right here\nand that should persist things to local\nstorage just fine\nlet's go back to our game and see if\nthings are working better\nso we'll play the game\nplayer one wins\nyou can see it's tracked down here in\nthe scoreboard let's get player 2 to win\na game\nthat's tracked down here and now for the\nthe big tell all let's refresh the\nbrowser\nwhen we refresh the browser it looks\nlike there's zero wins but in reality\nwe're actually tracking this state we\njust have one big problem here and that\nproblem is that on the initialization of\nthe page\nso let's go to our app at the bottom\nwhen we were waiting for the load event\nwe are not actually updating the Dom\nwith the latest state so you can see in\nthe reset we the reset and the new round\nwe're calling all of these changes to\nthe view well we really need to call\nthis on the first load of the page as\nwell and as you can see we're repeating\nthings quite a lot so it would be best\nto put this in a little helper method\nso we'll say init View\nwe can put that right there\nand basically when we init The View\nlet's make sure everything's closed\nlet's clear all the moves\nlet's set the turn indicator to whatever\nthe current player is in state and that\nstate value is now coming from local\nstorage so we have\nwe have some\nthings that we need to update in\naddition to this in a second\nso last we'll update the scoreboard to\nbe the current stats\nand now we can basically call this down\nhere in the reset\nso we can get rid of all this\nand a knit View\nafter we've reset the store\nso that's just a little helper method\nfor us let's check to make sure we\ndidn't break anything\nso we'll play in the game someone wins\nand we reset so it looks like everything\nworked now we've got two wins for player\none one win for player two and if we\nrefresh the page still nothing is going\nto happen but if we go down to\n[Music]\num\nbasically if we call this a knit View\nfrom the scope of the init method then\nthat's going to populate things because\nwe're doing that on page load so now the\nnext time we refresh we're gonna stick\nwith those two wins and one wins we can\nrefresh it as many times as we want it's\nO is going to end up in the same thing\nbut we have one last problem to to\nReally solve here and that is what\nhappens if there's like three moves on\nthe game board when we refresh the page\nit's going to clear that but you can see\nin state player 2 is up not player one\nso we need a way to actually reconstruct\nthe moves that have been made on the\ngame board on the initialization of the\npage so if you remember from our view we\nhad some helper methods and one of those\nhelper methods was handle a Player move\nand what that does is creates an icon\nand it replaces the square that that\nbelongs in and all you have to do is\npass it the square element that you want\nto replace\nso one thing that we could do is we\ncould Loop through all the squares and\nbasically update it in state so we\nreally need to implement this method\nso initialize\nmoves\nand what we're going to be doing is\ncalling this\ndot squares\nso let's take a look at a previous\nimplementation\nso we're clearing the moves here so\nlet's let's move this\nup closer to that because it kind of\nrelates\nso when we're clearing the moves we're\njust replacing children like that but\nwhen we're adding the moves\nwe need to go through each Square\nand we basically need to check if\nthere's an existing move in state so\nthis needs to pass a moves array of the\ncurrent game moves and then what we'll\ndo is we'll check moves dot find\nand we'll look on that move for a square\nID\nthat is equal to the square dot ID\nwhich is what We're looping through\nright here\nand if there is an existing move\nwe're going to call this dot handle\nPlayer move and now we can pass in the\nsquare and then we can pass in the\nplayer that made the move which is going\nto be the existing move dot player\nso that should initialize the moves\nlet's go back to our app and right after\nwe init The View\num we want to call view dot initialize\nmoves and these seem pretty similar but\num when we init the view in the reset we\ndon't want to\nactually it should be okay because the\nstate would be cleared so let's go ahead\nand put that as as the last\nmethod here\nso we'll reinitialize the moves and\nsince we've cleared the moves right here\num or I'm sorry not not because of that\nbut in the reset event we're resetting\nthe store or new round on the store so\nthat should clear all the current moves\nand this will basically be an empty call\nbecause it's not going to find any\nexisting elements\nso let's go ahead and save that\nand let's refresh the page\nlooks like we've broken something\nmoves is undefined\noh because I haven't passed in the\ncurrent state\nso we cannot just call this with an\nempty\nfunction call we need to pass in the\nstore.game\ndot moves and now you can see that it's\ninitialized so no matter how how many\ntimes we refresh it's always going to\nreconstruct the latest moves of the game\nlet's reset that so it resets up here\nand now we refresh and it's empty let's\nput a play down here\nrefresh keeps that there and you can see\nhow we can just\nrecreate the state every single time so\nlet's set this to a new round which\nclears everything including the\nscoreboard and just play through one\nmore time player one wins\nplayer 2 wins got one win on each side\nand then Place something there refresh\nreset\nrefresh everything looks like it's\nworking great now the real test as I\ntalked about earlier is we should be\nable to play this in two separate tabs\nso let me copy this URL and paste it\nhere so we are now looking at the same\nexact game running\nbut if we update in this tab and put an\nX there and then go to this tab you will\nnot see it update and that's going to\ncause all sorts of problems because when\nwe click here\nit's really going to be out of sync with\nthe other Tab and you don't really have\na way to play this game\nwe have a pretty quick way to fix this\nas I mentioned with this storage event\nwe just need to go to the app.js and in\nour initialization we can just listen\nfor that event\nso let's go ahead\nlet's find a good spot for that\nso right here this is where we're\nlistening for The View events we're\nknitting initializing The View here\nlet's put this at the very top\nor actually let's put it right here next\nto a net View\nso we'll say window dot add event\nlistener\nand we're listening for the storage\nevent\nso this is when the other tab updates\nit's not when the current tab updates\nwhere the other tab updates we'll put a\nconsole log in here we'll say State\nchanged from another tab\nlet's just see what that looks like\nfirst\nokay so we\nclick and go to the other Tab and you\ncan see the state change from another\ntab we'll click here and then see that\nstate change from another tab over here\nso basically every time the opposite tab\nchanges you'll get this event fired\nwe'll leave that there and what we\nbasically need to do is when that\nhappens we need to initialize the view\nagain\nso we're initializing The View on the\nfirst page load and we're initializing\nThe View when the storage changes\nlet's go back refresh the page and like\nreset everything\nso we'll make a move let's first look at\nthis board this is empty this tab is\nempty and if we make a move in the top\nleft corner what I would expect now is\nthat we'll get a console log on this tab\nand we'll also see this x recreated\nand you can see when I clicked there we\ngot it let's put an o in the bottom\nright\nand you'll see when I clicked over to\nthis tab it showed up here and we got\nthat console log so that's just a cool\nlittle trick so that you can play in\nmultiple tabs now the last thing that I\nwant to do before we\ngo into the optional typescript refactor\nthat's totally optional this has been\nobviously a long enough video at this\npoint but hopefully you've learned a lot\nand maybe give a subscribe to the\nchannel or something\num but if you're still here we're going\nto now kind of connect some dots\nif you have not used react you've\nprobably heard of it and react is what\nthey call a reactive UI framework\nalthough that is only partially true if\nyou really look under the hood\nbut the idea the overarching idea is\nthat in react you program declaratively\nI have a blog post on my website so\nlet's go to my website\nand go search for some Concepts\nand I've written about imperative versus\ndeclarative programming and if you come\ndown to the middle of this you'll see a\nsection called react declarative versus\njQuery imperative\nso far what we have done is been\nprogramming imperatively in other words\nwhat that means you can go ahead and\nread over these examples but I'm about\nto explain it here in this video\nwhen we program imperatively that means\nthat we are saying okay here's the\noutcome that I want and here are the\nseven different steps that you have to\ntake to get to that outcome now\ndeclarative programming\nis basically saying here's the outcome I\nwant go figure out how to make that\nhappen and I think I have an example in\nthis blog post about building a house\nimperatively versus declaratively so if\nyou're doing this imperatively you're\ngoing to specify the steps you build the\nfoundation you put in the framework\ninstall the utilities add the walls\nfinishing touches so on and so forth\nif you're building a house declaratively\nthe only step is basically saying I\ndon't care how you build it but I want a\nnice fireplace a Lakefront View and a\nbig kitchen so these are the outcomes\nthat you are declaring that you want and\nyou let the Builder of that house\ndetermine the best way to make that\nhappen\nso the same thing happens with the react\nLibrary some people would call it a\nframework even\nreact is basically looking at the state\nof your application and based on that\nstate and based on The View that you\nhave defined that links that state it's\ngoing to figure out how to render the\npage to the screen\nand if we look back at our program\nwe have a lot of imperative stuff going\non\nso we are binding to all of these\ndifferent clicks so when when these\nbuttons are clicked we have a lot of\nvery explicit steps written out of how\nwe want the UI and this state to\nactually update now we can do a rather\nsmall it's not going to be huge refactor\nwhere we can basically take all of these\nindividual steps and we can wrap them in\na render method from there then the idea\nis that the render method is all that\nyou need to call on The View and then\nyou need to pass the state of the\napplication so remember the store\ngives us that state of the game\num the game right here and then the\nstats so that's basically our state and\nall we need to do is pass all of that\ninformation to the Views render method\nand then we can basically Define all\nthose steps to figure out how to show\nthe page to the user\nso let's try to do that I think this\nwill be\num a really nice way to clean this thing\nup for once and for all and will kind of\nget us to our final state of this\napplication finally believe it or not\nthis init view method actually\nrepresents a lot of what we're trying to\ndo\nso we will be copying a lot of this\nstuff so let's make this a little\nsmaller open up the view over here to\nthe right\nactually we'll make it a little bigger\nthat's kind of tough to see so now that\nI've you know talked about all this\nstuff in the render method basically\nwhat we can do at this point is we can\nput a hashtag in front of pretty much\nall of these methods because they're all\ngoing to be called from within the\nrender method\nso these are all internal implementation\ndetails of our view class and nobody\nneeds to know about them except for the\nview itself\nso you can think of all of these methods\nas basically just Dom helpers that we're\ngoing to call from the main render\nmethod so these event listeners are\ngoing to be public methods that can be\ncalled from the app or the controller\nand then we will have one render method\nhere at the top\nso we're going to call that render\nnothing significant about this name\nnecessarily other than convention this\nis generally what you would call it in\nwhen react was using class-based\ncomponents that was the method that you\nhad to put all of your jsx into and\nwhatnot so this is more of a convention\nnaming convention than anything\nso what we're going to pass into this is\nthe store itself\nin that store as we know has those\ngetter methods on it\nbut I'm going to be more explicit\nactually I want to pass the game and the\nstats you could pass the entire store\nobject and I think maybe in the final\nimplementation that's what I've done but\nwe'll be explicit with this so that we\nknow exactly what we're dealing with so\nin other words the game and the stats\nare represented by this method stats in\nthis method the game and based on this\ninformation we should be able to build\nour UI entirely so let's start building\nthis up the first thing that we know\nneeds to happen no matter what no matter\nwhat the state of this application we\nknow that we want to populate this\nscoreboard based on the current state of\nthe game\nso that'll be the first thing we'll do\nwe'll call this dot update scoreboard\nand we have to pass in player one wins\nplayer two wins and number of ties and\nas we know we have all of that state\navailable to the render method so we'll\ncome back to app.js and you can see this\nis where we're extracting that stuff\nbut we can actually do some\ndestructuring to make this a little\neasier to deal with\nso from the stats\nwe can grab the\nplayer with stats\nand the ties and then from the game what\ncan we grab we can grab\nlet's take a look\nwe can grab moves the current player\nand the status which we can also\ndestructure that is complete\nand the winner property so that's from\nthe game\nso all of these this is just\ndestructuring with es6 to get these\nvariable references so we don't have to\nDefine all of them or have this you know\nnested\nobject property access going on\nso with the update scoreboard let's go\nback to our app and see how we did that\nwe basically basically just looked at\nthe stats\ndot player with stats so this will be\nthe first player\nand we're finding the first player's\nnumber of wins\nplayer with stats one so that would be\nthe second player their wins and then\nthe ties will pass straight into that\nso right there we are rendering\nrendering the scoreboard and we can go\nahead and start pulling all of this\ninitialize functionality out of this\nmethod\nso we can remove this\nor actually we're going to replace a\nknit View\nwith view.render\nand this is where we're going to pass\nthe store dot game in store.stats\nwe will also pass this right here to\nthat storage event listener\nand now we can\nalso pass it down here\nin these event listeners\nso let's save that\nand let's go back to our app\nand refresh the page and you can see\nthat at least the scoreboard has been\nupdated because we implemented that one\nmethod within render so the next thing\nthat we need to do\num let's see is probably reconstruct the\ngame board\nwe can really just follow this init view\nso\nwe're updating the scoreboard we need to\nclose everything and clear the moves so\nlet's let's actually put that right\nabove this\nso this\nDot close all\nthis dot clear\nall the moves we're going to update the\nscoreboard\nthen we're going to initialize the moves\nso that's going to cover a lot of ground\njust there\nwe need to set the turn indicator I\nmissed that one\nso that one will come right here\nand that one takes a player so we need\nto pass in the current player that we're\ngrabbing from the state\nso that will grab the current player and\nset that\nso now if we refresh and go back\nwe should see a good amount of stuff\nbeing updated\nI don't think we'll be able to play\nquite yet and we've got a moves is\nundefined and once again I've forgotten\nto pass the correct data to this\nso we need to pass the moves\nfrom here down to the initialize method\nlet's make sure we're not missing\nanything here\nokay we'll save that\nand right now we can't click anything\nbecause we have removed all of the\nfunctionality from the main app but we\ncan get rid of this\nwe'll keep this event listener because\nthat's going to listen for changes on a\ndifferent tab\nthis is our initialization where on the\nfirst page load it's going to render The\nView\nthen on each of our\nreset and new round events we're going\nto update the store and then render the\nnew view\nour last thing to handle is that click\nevent that happens on each Square so I\nthink this logic can stay because this\nis just a check\nagainst the state and it's going to\nreturn early if it finds there's an\nexisting move on the Square so that's\nnot view related at all\nbut right here we are handling the\nplayer move\nwhich\num\nthis should be covered every time we\ncall render\nbecause all we have to do now is update\nthe state and then the render method\nwill then figure out how to recreate the\nmoves that the next state represents\nso we can actually comment this out we\ncan also comment out the player move\nI believe or I'm sorry we should not do\nthat this is where we are updating State\nthis is very important we need to update\nstate with that Player move so that the\nrender method gets the latest version of\nthe state to actually recreate the game\nwith\nso we can remove this view.handle Player\nmove\nthis is fine\nthen we check if the game is complete\nand if it is we'll open the modal but we\ncan actually do this check within the\nrender method\nso let's see where's the best place to\ndo that though so we've we're closing\neverything clear and move send the turn\nindicator\nupdate the scoreboard so we can really\njust do this at the end so we're really\njust checking to see if the status\nLet's see we can just grab that Inc is\ncomplete\nvariable that we've destructured so if\neverything is complete the game's\ncomplete we will call this\ndot open modal\nand then from there we will grab the\nwinner and check if there's a winner and\nif there is we will pass in this string\notherwise we will pass in a tie\nso this check right here basically takes\ncare of all of this\nright here and then at the end we're\nsetting the turn indicator so maybe we\nshould bring this one down to the very\nend of this render method because we\ndon't want to set the turn indicator\nuntil\num we know that the game is\nnot complete so we're going to return\nearly if we see that the game is\ncomplete okay so I think we can remove\nall of this\nfrom our method so at this point the\nplayer move event is really just\nchecking State and updating it so we're\nchecking for an existing move if we find\nit we're not going to do anything with\nthe UI we're not going to re-render it\nif that doesn't if there is not an\nexisting move that means it's a valid\nplay\nand we're going to update state by\nmaking a Player move and then once we\nhave updated State we can render The\nView with the new state\nthat we have retrieved\nlet's go back to our game\nit says this dot handle Player move is\nnot a function so let's figure out where\nwe're trying to call that\nI believe that's happening in the\ninitialize moves\nyep so right here we just need since we\nmade this a private method we just need\nto add that hashtag so that it can\nhandle the player move just like this\nlet's go back see if we got any errors\nand it looks like things are being\npopulated so let's try to play\nagain\nall right so when it detected a win it\nsays the store is not defined\nso we're referencing something here in\nincorrectly\noh okay so over here\nin the render method you can see I'm\ngrabbing the winner name from the store\nexcept that's not available to us we\nreally just need to grab this value\nright here so we can get rid of all this\nand just grab winner.name\nand so now we don't have any invalid\nreferences\nand it looks like player one wins so we\ncan play again and it clears things\nto play through the game once more\nand you can see player one is racking up\nthe wins here we can reset to a new\nround\nthat works\nwe can reset the game board that seems\nto work\nand I think we should see everything\npopulating across these two tabs which\nappears to be the case so that is also\nworking\nI know it's been a complete Marathon\nhere\num but we just have two more things to\nimprove on this application and I think\nthey're just really cool additions to\nthis app\num the first one is somewhat easy to\ngrasp the second one is maybe not so\neasy so you can feel free to kind of\nskip over\neither of these but I wanted to add them\nin as a supplement to this video\nas you can see in our app.js\nwe are calling view.render\nin a lot of different places\nso you can see we're calling this like\nwhat five six times five times\nthere's probably an easier way to do\nthis and one thing that we can do is go\nback to our store class\nand make one little update to this and\nit will make our lives a lot easier and\nautomate a lot\nso right now this is just a plain es6\nclass\nbut if we put the keyword extends we can\nextend an event Target\nso if we go and look on mdn\nfor event Target\nyou can look and see that this is an\ninterface that's implemented by objects\nthat can receive events and may have\nlisteners for them in other words any\nTarget of events implements the three\nmethods associated with this interface\nand if you look at the instance methods\nwe have add event listener remove event\nlistener and dispatch event\nthis is basically what we've been doing\nwith all of our elements and by default\nall of these Dom elements are going to\ninherit\nthis class from this class so\nwe can also create a store that extends\nthis in that way we can send a custom\nevent every time that store changes\nso\nthe first thing we need to do\nis\nand I'm sorry I think I extended The\nView which is I'm getting tired here\nlet's remove this from The View and\ninstead we're putting this on store\nso this becomes an event Target and then\nat the top of the Constructor we just\nneed to call Super and super is the\nkeyword that will basically allow us to\ninherit from this event Target so this\nis kind of some object-oriented\nprogramming Concepts but in other words\nonce we add super we should be able to\nget access to those three methods so\nlet's comment out super and go to app.js\nand go to store\num let's see\nit says that we can add event add an\nevent listener but I think that's\nprobably just\nconfused let's reload\noh I'm sorry that's because we we called\nsuper there but we need to remove this\nso if we remove this for one second and\nthen go to store you're going to see\nthat we these are the available\nproperties in methods and you don't see\nad event listener anywhere because vs\ncode has not detected that as part of\nthe interface\nbut the second we add this back and\nextend the event Target\nand then call Super\nwe will now have access to an event\nlistener and we want to listen to a\nspecific event\nand this event we're going to Define as\na state change\nso we'll say State change is the custom\nevent we're going to be listening for\nand then in the Callback to that\nwe're going to render The View\nso we'll render The View with the\nstore.game and store.stats\nand that will allow us to basically\nremove the view.render from pretty much\nall of these\nso we can remove it from here because\nwhen we call store.reset that's going to\ntrigger this event and it's going to\ncall view.render\nwe can remove it from here same thing\nwe're updating the store so it's going\nto trigger this event\nand then finally down here we are\nupdating the store so it will trigger\nthat event\nas we stand right now it's not going to\ndo anything because we haven't actually\ndispatched any sort of event but since\nwe've Consolidated everything into the\nSave State method we know that this is\nthe only place in the entire class where\nstate is actually being updated\nso if we come down to the set item call\nfor local storage all we have to do is\ncall this which represents the store\nwhich extends an event emitter which has\nthese properties available\nwe can dispatch an event\nand what we can do is pass a new event\nso event right here is just\nlet's go to the reference\nlet me just type this in mdn event\nso the event interface represents an\nevent which takes place in the Dom an\nevent can be triggered by the user\naction clicking the mouse blah blah blah\nand you can basically customize this\nwith whatever method you want so let's\nlook at the Constructor\nthe event Constructor creates a new\nevent object and you can pass a type to\nit which is a string with the name of\nthe event so that's what we're doing and\nwe're calling it State change\nso when state has changed we're going to\ndispatch this new event\nand therefore our event listener for the\nstate change key is going to be fired\nand we're going to render The View\nnow of course we need to keep\nview.render in this event listener\nbecause that's not going to be fired\nhere these are two very separate events\nthis one is when the current tab State\nchanges\nand this is when a different tab\nState changes\nand then finally this one\nis the first\nload of the document\nso let's save this and see if things are\nworking correctly\nso we refresh it looks like we've got a\nproblem\n[Music]\nI don't know what happened it looks like\nour live server timed out or something\nso let's refresh that page\nreset the game and you can see on all of\nthese actions that we're clicking\nit's re-rendering the page so clicking\nall these actions player one wins we\nplay again it resets we get a scoreboard\nupdate\nand let's keep playing player one wins\nagain and now we can reset the game\nwe can reset the round and then if we\nclick here we can see that populated in\nthe other tab actually we cannot\nsays must call Super Constructor before\nusing this in the derived class\nConstructor\nlet's see what that's all about\nokay I think that might have just been\nold\nI just needed to refresh\nyeah okay that was just old that was\nfrom when live server cut out so now\nthings are being kept in sync and we can\nplay from multiple tabs\nso let's win the game from this tab\nplayer 2 wins and we should see over in\nthis tab the same message\nwhen we reset\nthis is reset as well so at this point\neverything is pretty much complete\num there's just one helper method that\nwe can refactor that will make things a\nlittle more performant and I'm going to\njust plug this in and you can kind of\nstudy it on your own time\nso let's go ahead and look at the view\nso I'm going back to the view here and\nat the very bottom\nI'm going to add something called\ndelegate\nnow this is a pattern that I did not\ncome up with on my own this kind of a\nwell-known pattern when you're working\nwith the Dom and the purpose of this\nhelper method is so that we don't have\nto do what we're doing up here and that\nis looping through each of the squares\num not that not those specifically\nbut right here where we're binding an\nevent listener to every single Square\nelement\nthis results in a lot of event listeners\nand it's a little bit more performant\nand efficient to just register an event\nlistener on the parent element and then\nwe can kind of match match up which\nchild element was clicked on that event\nand figure out which Square we're\ndealing with for this so if we look at\nthe index.html you can see that we have\nthis entire grid\nand then we have these squares so\nwouldn't it be nice if we could just\nregister an event listener on this grid\nand then we can basically figure out\nwhich element was clicked within it\num based on that you know helper method\nso we can go back to view and instead of\ndoing this dot squares for each\nwe can just call this dot delegate\nand the element that we pass is going to\nbe this dot dollar sign dot grid\nlet's see if we've selected that\nit looks like we have not\nso we'll say this dot dollar sign dot\ngrid\nand we will select\nthe data ID of grid let's make sure that\nwe add that right here\nso now we're adding the event listener\nto this parent div\nthe selector that we're looking for\nis going to be a class called Square or\na data ID called Square so this will be\na little bit more stable\nso we'll use that\nso we'll just grab an example here\nand then pass this as a square\nand then the event that we're listening\nto is a click event in the Handler is\ngoing to be\nhandled by the controller\nso instead of looping through all of\nthem adding an event listener to each\nwe're just going to do it once with the\ndelegate method\nand I believe this should work for us\nlet's go back to app.js\nand just get a sense of what's being\npassed here\nso console log Square\nand when we click\nit's going to give us a div with an ID\nequal to the square that we have clicked\nso as we're clicking through this\neverything works just the same and that\nlittle refactor just made things a\nlittle bit more performant and we're\nusing kind of a pattern that you'll see\nquite often is kind of the main reason I\nwanted to expose it here is you'll see\nthis out in the wild and it's just good\nto know kind of what it's trying to\nachieve all right so there you have it\nwe've got a tic-tac-toe game that is\nworking and most importantly we learned\na lot along the way so if you're looking\nfor some next steps\num to kind of continue Connecting the\nDots here I'm going to be creating a\ncouple more videos that kind of play\nalong from this original build so put in\nthe work to get this built and now I\npromised what we would do at the end of\nthis video is refactor this with\ntypescript which is a pretty popular\nsuperset of JavaScript that a lot of\nemployers are looking for at the moment\nhere in early 2023\nbut I realized that this is kind of a\ndiverging concept from what we've just\nworked on so I thought it deserved its\nown Standalone video so I will link in\nthe description to that video and then\nafter that we will actually do a\nrefactor to react so how do we take this\nvanilla game and make it into a react\napp and then the last video there I'm\nhoping to do the same thing and take the\nvanilla react app and make it into\ntypescript so I made a video where I\nrefactored subscribers code and we\nworked on this tic-tac-toe game and we\nbuilt this in vanilla JavaScript it took\nus quite a while because I went through\na lot of uh different concepts and\npatterns to build this out but now it's\ntime to refactor this to typescript and\nthe question is why am I doing this what\nis the point of using typescript in the\nfirst place so this video is going to be\na refactor where we take a vanilla\nJavaScript tic-tac-toe game and we\nrefactor it to use typescript and along\nthe way I'm going to explain and point\nout why typescript is so helpful and why\nso many employers look for this skill in\ndevelopers let me start by saying that\nthis video is specifically Geared for\npeople who either have not used\ntypescript and are trying to understand\nwhat the hype is about or are just a\nbeginner developer you're looking to\nland a job and you're trying to\nunderstand what that path to getting\nthat job looks like and I can assure you\nthere are many companies out there using\ntypescript today I write it in my\nday-to-day job and it's an awesome thing\nif you learn how to use it correctly so\nwith that said we're going to just jump\ninto this video I recommend that if you\nwant the most out of this video you\nshould probably watch the original build\nso like I said we built or we refactored\nsome subscriber code and built this\ntic-tac-toe game and took several hours\nso I know it's it's a bit of a pain to\ngo re-watch all of that but this is\ngoing to be a much clearer video if you\nhave that background and you understand\nthe steps that we took to get here at\nthe very very least be sure to go to my\nGitHub repository I've linked to it in\nthe video description\num but let me just show you the one that\nI'm talking about here\num so let's go nope that's not the right\none\nso tic-tac-toe subscriber refactor at\nthe very very least you need to go\nthrough and open up this vanilla\nrefactor and then read through all of\nthe code here okay and we have a second\nbranch called typescript which this is\nthe final version of the video that I'm\ndoing right now so we're going to head\ntowards this right here and we're going\nto start with the vanilla JavaScript\nso without further Ado let's jump in and\nget this refactored to typescript all\nright so the first thing I'm going to do\nis just copy this entire folder\num so let's see\npaste\nall right and then we're going to call\nthis a uh typescript\nactually let's say live\nTS refactor\nokay so here forget about this for one\nsecond we'll get to that that's very\nimportant for this refactor it was just\nin my git ignore so just to overview\nwe've got an index.html file that's got\nsome Styles and it has this script down\nhere that connects to these the App\nStore and Views so the MVC pattern that\nwe talked about in that prior video once\nagain Linked In the video description\nand here's the CSS file nothing crazy\ngoing on here like I said you need to be\nfamiliar with this application because\nI'm not going to explain uh it in any\ndetail here so the question is if you\nwant to move towards a typescript code\nbase and you've got a vanilla JS code\nbase to start with how do you go about\nmigrating it if you are dealing with a\nvery large vanilla JavaScript code base\nthis is not the video to teach you how\nto migrate that this video is basically\ngoing to walk you through the the most\nsimple steps the initial setup of a\ntypescript app\nso the first thing that we need to do\nand to understand is that when we're\nwriting typescript we will now need\ndeveloper dependencies so talking about\nlike a package.json if you notice in our\noriginal build we don't have a package\nJson or node modules or anything like\nthat because we don't need them we can\njust write uh vanilla JavaScript es6\nsyntax and run that directly in the\nbrowser so there's no developer\ndependencies there's no build steps\ntranspiling any of that stuff\nso the biggest thing you need to\nunderstand to start out is that we need\nsome dependencies and the dependency we\nneed is typescript\num itself as well as the typescript\ncompiler now I'll be honest I don't set\nup uh blank typescript projects from\nscratch every day it's not a very common\nthing because once you get your stuff\nset up you don't really think about it\nso I'm going to imagine that you know\nyou're starting from scratch trying to\nfigure out how to get this started and\nwe're going to just use documentation to\nget ourselves there so let's go to the\ntypescript documentation this is the\nfirst place that you would obviously go\nto figure this out\nso there's a get started a handbook and\na reference these are going to come in\nonce you're kind of well into things the\nget started is where we want to start\nso let's go ahead and look maybe\ntypescript Tooling in five minutes looks\nlike a good starting place so if we look\nat this page it's going to tell us how\nto get started so we can install\ntypescript in two main ways through npm\nor yarn or pnpm or whatever we're using\nor by installing the visual studio\nplugins now I believe this is talking\nabout Visual Studio the full on IDE not\nnecessarily Visual Studio code I think\nthere's a there's a big difference\nbetween those two we'll get to that\nthough and it says you can install it\njust like this\nbut what I want to find out vs code\ntypescript let's see how it pairs with\nVisual Studio code which is what we are\nusing here\nit says you know typescript is a\nsuperset of JavaScript blah blah\nand it says it comes with the language\nsupport but it does not come with the\nTSC or typescript compiler so just\nzooming out for a second remember\ntypescript is a superset of JavaScript\nit does not natively run in any browser\nin other words you have a build step\num or not not necessarily a build step\nbut a compile step where you have to\ntranspile that typescript syntax to\nplain JavaScript and once it's compiled\nto plain JavaScript then it can run in a\nbrowser so that's kind of our goal here\nand to do that we need the typescript\ncompiler or TSC\nso here it's telling us to do the same\nthing as over here so if we go back to\nvisual studio code I am using the yarn\npackage manager you can also use npm but\nwe'll just say yarn Global add this is\nthe same as npm G or npm install Dash G\nand I'm going to add typescript and I\nalready have it installed but it will\ninstall the latest version and there's\nthe compiler and then the TS server as\nwell now Visual Studio code I believe\ncomes with this server so if you hit\ncommand p and you hit the little carrot\nand then type\ntypescript let's see\nuh it's not going to show up quite yet\nbecause we don't have a typescript file\nopen so let's just try something here\nOkay so we've created a TS file and just\nI've added a basic type just to fill\nsomething up and what you'll see down\nhere in the the bottom right is that vs\ncode has detected that we're using\ntypescript and it's kind of kicked off\nthe TS server I believe that's how it\nworks uh leave a comment if I'm wrong on\nthat but if we hit command p and then\ntype a little carrot you can see that we\ncan search for typescript and restart\nthe TS server or reload the project so\njust know that in the background\ntypescript vs code is working and\nactively looking through your code and\nrecognizing the different types that are\nadded so let's go back to the\ndocumentation it says building your\nfirst typescript file\nand it's giving you basic typescript and\nthen it's saying you can compile it by\npassing the file name to the typescript\ncompiler\nand then I think it just goes through\nsome like basic introduction to\ntypescript which this tutorial is not\ngoing to be necessarily an introduction\nto typescript but more of a like why\nwould I need typescript and what does it\nsolve for me so it'll be a light\nintroduction but we're not going to\nreally get into the meat of of\ntypescript\nso let's go back and clear the terminal\nhere and with our index.ts let's just\nDefine some variable equal to 20 and\nthen\num\nlet's give it a custom object type okay\nso we'll we'll say that some variable\nis a number another variable is a string\nand then if we assign this type\nto our object now typescript is going to\nkick in and it's going to start telling\nyou\num you know that you've missed certain\ntypings so we've got these red\nsquigglies because vs code has detected\nthat you are typing this object as a\ncustom object type which has these two\nproperties so we need to actually fill\nthese in with their matching types\nso if we put these in just like that and\nthen finish off the object now this is\nmatching the type that we've assigned it\nand if we tried to add an extra prop\nit's going to yell at us because that\ndoes not exist in the type that we gave\nit so anyways the point of this is to\njust give a Bare Bones introduction to\nwhat typescript is doing and we'll see\nhow this kind of plays out to benefit us\nin the refactor for right now I'm just\ngoing to compile this so we've got the\nTSC or the typescript compiler installed\nglobally\nlet's go ahead and check so we'll pass\nthe version it gives us 4.9.5 and now\nlet's go and call for help so this will\nbasically give you all the options which\nis pretty\noverwhelming to start with but you can\nsee that\nif we just run TSC it compiles the\ncurrent project\nso let's pass this file to it so TSC\nuh app or I'm sorry JS and then\nno we need to get into our live TS\nrefactor first\nnow we'll say TSC Js index.ts\nand you can see that we ran that command\nand now we have an index.js sitting over\nhere which is the compiled version of\nindex.ts so let's open up the two files\nnext to each other and what you're going\nto see here is typescript in action over\non the left is our DOT TS file this is\nwhat we're writing our source code in\nand we're able to use custom typings and\nassigning those typings to a variable\nnow looks like something is going wrong\nhere\nand it looks like the two files are\nactually conflicting so let's uh name\nthis let's put something at the end\nthere and it will solve this error for\nus so just know that because they're in\nthe same directory and vs code is pretty\nsmart it's detecting that we have two\nvariables that are the same name now\nthis is not going to happen in our final\ncode because we're going to configure it\nnot to but just know that that's what's\nhappening here but anyways the point is\nthat we've got a type here which is\nactually not valid JavaScript code you\ncan't run that in a browser or node.js\nor any JavaScript or runtime so what the\ntypescript compiler does is it removes\nthis type and it removes this type\nannotation right here and it gets us to\nthis just vanilla JavaScript object that\ncan actually run in the browser so\nthere's really two questions that come\nout of this number one why would we want\nto do this this what is the purpose of\nadding these types and then number two\nhow do we get more control over how this\ncompiles to this because there's going\nto be different\num options that we can use to make that\ntransformation happen and furthermore\nyou know we don't want them going in the\nsame directory because obviously that\nscrews things up with you know variable\ndeclarations happening twice and so on\nand so forth so there's some\nconfiguration that we can do to make\nthis better for us so let's go back to\nExcalibur here\nand come down here and say\nbenefits of typescript\nso you could definitely go through a\nlaundry list of things that typescript\nhelps with and you know there's plenty\nof people that go and do that but I'm\ngoing to keep it simple here and just\ngive one or two reasons why it is\nbeneficial for your code base the first\none is just\num\ncode checking in general so in other\nwords it's going to if you're using\nvisual studio code and you're using\ntypescript visual studio code is\nbasically walking through all of your\ncode base and making sure that\neverything talks to each other\nappropriately so we will see this in\naction as we start to refactor but if we\ngo back to our original application let\nme delete this index.ts file\num and then the index.js\nif we go back to our original project\nwhich once again if you haven't seen\nthis already if you didn't watch the\nprior video at least make sure that\nyou've skimmed over the code and know\nwhat's there if we go to app.js\num and let's try to find a good example\nof this\nso here's a good one when we are calling\nview dot render and we are passing in\nall of our state of the application\nthese State objects have a certain type\nand as you can see Visual Studio code is\ngiving you some you know suggestions as\nto what types these are already even\nthough we're not using typescript and\nit's just inferring this from the\nfunction definitions over here in store\nso it can read through the functions and\nit can see you know what we are\nreturning so the return type here and\nthen it kind of infers okay what\nproperties are on this object that was\nreturned so on and so forth but if we go\nback to app.js it doesn't really know\nwhat type anything really is it can\nfigure out the Boolean type but the\nmoves in the current player in the\nwinner these are all any types because\nbecause it can't really figure that out\nwith plain vanilla JavaScript and what's\nDifficult about this and hard to\nmaintain as your project grows is as\nyou're typing things\num quite literally as you're like typing\non the keyboard and passing variables\naround in your application it's very\nuseful to know are you passing something\nvalid into a function and typescript\nallows you to do this very easily you'll\nreally start to see this benefit as we\nstart to refactor so the second benefit\nthat I've personally found with\ntypescript is refactoring so very soon\nyou know for this video since we're\nrefactoring stuff but if you have a big\ncode base and you're trying to go\nthrough and refactor an entire feature\nit is extremely difficult to do so if\nyou just have vanilla JavaScript and you\ndon't have any strong typings throughout\nyour application\nwith typescript it's a lot easier\nbecause as you change things you know\nVisual Studio code or your editor that\nruns the typescript server is going to\nbe able to tell hey did you move things\naround correctly and are you passing you\nknow is your refactor going to break the\ncompilation of the code\nbut enough talk let's get started\num so the first thing that we need to do\nnow that we've got typescript installed\nand we kind of understand the general\nconcept of what's going on is get it set\nup for this specific application\nso I know we've got it installed\nglobally if you use TSC and you know\ntype the version that's that binary is\ninstalled on our computer globally but\nit's always a good practice to install\nit as a developer dependency within your\nproject and the reason being is you know\nthe the global version is going to be\ndifferent on each developer's computer\nso if you're collaborating on a project\nit's good to pin that typescript version\nfor the application so that you have\npredictable builds in compiles when you\nwhen you compile that code to plain\nJavaScript so to do that I'm going to\ntype yarn init\nand pass the dash Y flag just to say yes\nto all the options and just get a\npackage.json file created so here's our\npackage Json and we've got live TS\nrefactor blah blah and the first thing\nwe'll do is\num yarn add and then patch a dash dash D\nfor developer dependency and then I want\nto install typescript\nso now you can see dev dependencies has\ntypescript now why is this a developer\ndependency and not a regular dependency\nwell this is super important and the\nreason being is because as we talked\nabout typescript is only going to happen\nbefore you deploy your application so\nyou write all your code in typescript\nbut obviously that's not correct or it\nis correct it's not valid for running in\nthe browser or a node.js runtime so\nbefore you deploy your application you\nknow out on some server like AWS or\nrender or digitalocean what what have\nyou you need to First build it to the\nappropriate runtime that you're using\nwhich is probably going to be common JS\nor es6 so the point of having this as a\nDev dependency is to express the fact\nthat you're not going to need this to\nactually run the application you just\nneed it to to build the application to\nthe point where then it can run\nthe next thing that we need to do is\ninitialize a TS config so this file is\ngoing to be a special file that sits in\nthe root directory of your project and\nit tells this compiler so remember TSC\nis the compiler we don't want to use the\nglobal version anymore so in this case\nwe can run yarn TSC to grab it\nspecifically from the project and then\njust run that and it's going to try to\ncompile stuff but it doesn't find any\ntypescript files to actually compile so\nanyways we need to set up a TS config to\ntell it how to compile things so how we\ndo that is we say\nyarn TSC I think init is the right thing\nso let's go to help\nand let's read through the options okay\nso here's the start of the options and\nyou can see TSC dash dash init creates a\ntsconfig.json with the recommended\nsettings in the working directory so\nthat is what we want to do so we'll run\nyarn TSC dash dash init\nand you can see that it created a nuke\ntsconfig.json which we can open up up\nhere and this these are the options that\nit gave it by default so let's go read\nthrough this\nand right off the bat you can see that\nthere's quite a lot going on so by\ndefault it's going to have everything\ncommented out\nand we're going to get rid of all this\nthese are just kind of all the different\noptions and you can go to this link here\nto view the reference for this so the TS\nconfig and it basically just takes you\nthrough all the different compiler\noptions you can click on these links to\nto figure out what they do\nbut most of these options are not going\nto be relevant starting out\nespecially for a beginner these are more\nof just options to control you know your\ndeveloper experience as you're building\nin a typescript code base and also of\ncourse how it actually builds and\ncompiles the typescript to JavaScript so\nlet's go ahead and get rid of all the\ncomments just to see what it gave us so\nthese are the defaults that you're going\nto get and we'll go from the kind of\nleast important to most starting from\nthe bottom skip lib check this just\ntells uh typescript to ignore kind of\nthe node modules dot d dot TS files\num that's not super relevant here strict\ntrue this is always going to be a good\nthing to turn on because as you go\nthrough your code and write typescript\nthe intellisense that's provided by\nVisual Studio code will make sure that\neverything\nchecks out and all the types are\nconsistent so this is always good to\nhave on these two options are just\nrelated to some maintenance of your code\nbase so forces you know file naming\nconsistency this allows you to\num\nhave interoperability between common JS\nmodules and es6 modules so I actually\nwrote a whole post on this if you go to\nmy site\nscripts versus common JS versus UMD AMD\nand es6 modules so this is a mouthful\nbut this kind of explains what that is\ntalking about\nand then most importantly is the Target\nand the module options so this is\ntelling the typescript compiler\nwhat kind of code that needs to be\noutput into you know code that can\nactually run within a browser and that's\nour goal is to get our typescript files\nto run regular JavaScript files so that\nwe can just write our code and\ntypescript and then the compiler deals\nwith getting that to a place where it\ncan run in the browser so let's go to\nthe reference\num we'll go to the the reference guide\nhere so we'll start with the first one\nwhich is the target\nnow I believe this is going to be in the\num let's see where is this so just to\norient ourselves it's in this is the\ncompiler options uh field so if you\nyou'll notice all this is defined in\ncompiler options and here in the\nlanguage and environment section you'll\nfind Target right here\nlet's click on that it'll scroll down\nand it says modern browsers support all\nes6 features as we've been talking about\nand we wrote our original project in so\nes6 is a good choice you might choose to\nset a lower Target if your code is\ndeployed to older environments or a\nhigher Target if your code is guaranteed\nto run in newer ones so in other words\nwhat Target represents is the end state\nof the code that is going to be compiled\nso we are going to Target es6 because\nthat is going to mirror what we did the\noriginal refactor the Vino the vanilla\nJS one\num so you can see we've already got that\nes2016\num you can pass a couple different\noptions I think it yeah it gives you all\nthe options right here\num but es6 es2015 yes 2016\num all the way up to es next so let's\njust grab es6 because we know that\nthat's available in all browsers\num I'm not sure why they did es\n2016 when they say es6 is a good choice\nkind of mismatching their defaults but\nanyways this is what the code compiles\nto the next one is module so let's go\nlook at that we'll go back to the top\nand if you see modules you will find the\nmodule property\nthis sets the module system for the\nprogram\nand\num see the modules reference you very\nlikely want common JS for node projects\nso not to backtrack at all but going\nback to that post\nthat I wrote here scripts common JS es6\nmodules this really talks about these\ndifferent module systems but basically\nif we look at let me do a sample file\nso sample.ts basically if we look at you\nknow this syntax import something from\nsome uh Library this is what we would\nconsider es6 module syntax now if we did\nsomething like this const\nsomething equals require\nsome lib this is going to be common JS\nsyntax so the require syntax and then\nalso module dot exports\nat the bottom of your file this is all\ngoing to be common JS syntax now if we\ndo es6 once again it's import something\nfrom some web and then you can come down\nand you can export\num you know some object or export\ndefault and this will export things from\nyour file which is uh one to one with a\nmodule so that's what that is talking\nabout and you'll see that it defaults to\nCommon JS which again is a little bit of\na mismatch it says the default is common\nJS if the target is ES3 or es5 es6\notherwise I'm not really sure given this\ndocumentation and the fact that we're on\nthe latest version of typescript\nwhy it defaulted to that but we really\nwant to just have es6\nbecause we want to deal with that nice\nmodule syntax\num that es6 comes with and then going\ndown the list es module interoperability\nas I said is the ability to basically\ncombine the syntax that we just went\nthrough and have files from multiple\nmodule systems being able to compile\ntogether this is going to be important\nespecially if you have certain you know\nlibraries that still use old common JS\nmodule systems or newer ones that you\nknow use es6 modules and don't support\ncommon JS so having that\ninteroperability is really nice\nespecially in larger projects\nso at this point we've gone through most\nof this and once again you can read\nthrough the documentation if you have\nquestions on any other properties but\nfor now I want to build a sample project\njust to get our our bearings here so\nlet's make a folder called test\nTS and this is just going to have a test\nTS file just something to work with and\nin this file we're going to just you\nknow\nDefine a sample type\nand the sample type is going to have a\nname which is a string and an age which\nis a number and then we will say let's\nactually\ncall this a person type and then we'll\nsay const person is a variable and this\nwill be of person type and then we will\njust give it a string so Bob and then\nage\nso something like that so this is our\nbasic TS file let's save our TS config\nand now we should be able to compile\nsome things so the first question is\nwell how does it know where to look how\ndoes it know that we want to compile\nthat test.ts file well let's go ahead\nand try it so yarn TSC and run it\nand it says done in 0.73 seconds and it\nobviously found the correct file to\ncompile so the question is how did it\nactually know that well let's go to the\ndocumentation and look outside of the\ncompiler options at the top level\noptions\nlet's go to include\nand this is an array that specifies an\narray of file names or patterns to\ninclude in the program and then over\nhere in the default the array if files\nis specified all otherwise so as you can\nsee in our code base we ran the TSC\ncompiler and it automatically just\nlooked for any dot TS file in the entire\nfolder and compiled it and that's\nbecause it's got this default glob that\nis including everything\nso given that behavior I think we're\nfine now the um the problem with\ncompiling your TS files in the same\ndirectory as where they're written is it\njust starts to get really messy and then\nfurthermore you really want to Output\nthem into their own build folder now\nthere's a lot more to this subject in\ngeneral like uh creating a bundle and\nthat involves things like webpack or\nparcel or whatever have you whatever now\nthere's a lot more to this specific\nsubject we could talk all day about you\nknow how things are compiled where\nthey're stored all that kind of stuff\nthis gets into bundling and code\nsplitting and you know build tools like\nwebpack or roll up or parcel or whatever\nwe're not going to get into that because\nwe don't need it for this simple of a\nproject our goal is to basically take\nall of our TS files and put them in one\nspot and then that will be imported to\nthe index.html and it will run just like\nour vanilla project would so to do that\nwe have a option that we can specify\nand let's see where it is so\nlooking under a mitt\nthis is probably where we want to look\nand yes here's the out directory\nthis is if it's specified\ndot JS files will be emitted into this\ndirectory the directory structure of the\noriginal source files is preserved see\nroot directory if the computed root is\nnot what you intended so that's probably\nnot going to apply for us\num but you can see it gives an example\nwhere it outputs to a dist directory or\ndistribution which is a very common\ndirectory to Output compiled files so\nthat's what we're going to do\nwe'll come back to compiler options and\ngive it a out directory you can see vs\ncode knows all these options gives you\nsome autocomplete so if we specify out\ndirectory gives us the documentation\nwhich is very useful\nand we're going to say that we want to\nput this to the dist folder\nso we're getting some errors here and\nthat's because we need a comma\nand once we save this and we rerun the\ncompilation now it's going to Output\neverything into dist and there's our\ntest.js file so you can see use strict\nis put in there and we've got a person\ncompiled you'll notice that from earlier\nin the video this is a different syntax\nthan we saw earlier earlier we saw this\nwas a VAR and there wasn't any use\nstrict going on at the top and that's\nbecause we didn't have a TS config we\ndidn't have all of these targets and\nmodules that were specifying how we\nwanted things to be output\nso anyways this is the basics of\ncompiling a typescript project now our\nnext order of business here is to look\nin our JS directory from our original\nrefactor and convert these files to\ntypescript so I'll leave this test TS\nfolder for us let me get rid of the dot\nJS compiled file because that's now\ngoing to be over in dist\num one thing that you would want to do\nhere\nbefore we get too far is add a git\nignore if you're working with Git and\nput the dist directory\nas well as node modules because we've\nadded both of those neither of those\nneed to be uploaded to Source control\nbecause node modules obviously can be\ninstalled by yarn and then the dist\ndirectory is the build itself which is\ngoing to be created with yarn TSC so\nlet's close out TS config and let's\nstart in the app.js file so now that\nwe're working with typescript we can\njust rename this to dot TS and now vs\ncode is going to automatically recognize\nthat this is a typescript file and it's\ngoing to start underlining things and\nit's going to yell at us for all sorts\nof stuff because nothing is typed here\nnow there are some strategies that you\ncan use to migrate a JS project to\ntypescript but in our case things are\nsmall enough that the best strategy here\nis to just rename all of these to TS so\nthat we're dealing with typescript\nacross the board\nnow if we were to go through and\njust try to compile this right now it's\ngoing to throw all sorts of errors and\nthe reason that it does that is kind of\nthe whole purpose of typescript and that\nis it's going to check the types and\nmake sure that they're all compatible\nacross all the files with the Imports\nexports you know function calls\nparameters all of that stuff and that's\na good thing that's what you want but\nwhen we first start out and everything\nhas these red squiggly underlines and\ntypescript is really mad at us it's not\nso fun\nbut I'm going to work through this it's\nnot as\num it's not as intimidating as you'll\nthink\num and we'll get this thing worked out\nshortly so just as a reminder\num the current project is no longer\ngoing to work because in index.html\nwe are importing app.js and that does\nnot exist any longer we have app.ts if\nwe tried to replace this it's just not\ngoing to work because typescript is not\nvalid in our JS runtimes so what we\nreally need to adjust here I'm just\ngoing to do this right off the bat so\nthat we don't forget is now that\neverything's being compiled to the dist\ndirectory we need to now specify instead\nof JS we're going to look in the dist\ndirectory and import\napp.js\nso same thing as the original project\nit's just going and looking in a\ndifferent directory instead of the\nsource code that you know in our prior\nrefactor was able to run in the browser\nnow we have to use the compiled code and\nyou can see in dist it's going to\nmaintain that folder structure so we\nactually need to say dist slash JS slash\napp.js\nand you can see that it will you know\nthis this has been compiled\num it through a bunch of errors but it\nstill compiled it so we could probably\nget this to work actually let's just see\nreal quick\nthe way that we'll do this\nis we already have live server running\njust I had this before the video so it's\non Port 5500\nand we're looking in dist Js app.js\nso let's go to\nthe vanilla refactor and instead we'll\ngo to the live TS or let's just go to\nlet's go to localhost localhost 5500\nlive TS refactor and let's see it seems\nto be working\nso even though there was all those type\nerrors\num it still compiled the JavaScript and\nthis makes sense because typescript is\njust a superset of JavaScript so while\nnot all typescript is valid JavaScript\nall JavaScript is valid typescript so in\nother words when we went to compile\nthese vanilla JS files just in a\ndifferent form it still knew how to do\nit it just was complaining about all the\ntypes so in this case where we're\nmigrating an existing vanilla JS project\nthis behavior is actually good because\nwe can you know gradually migrate our\ncode over and not break everything from\nthe start so there are some options\nthough once we get to a more final state\nif we go to the documentation let's\nclose some things out here\nif we go back to this reference there\nshould be some sort of configuration\nproperty that allows us to basically\nfail the build if there are any errors\nso we ran yarn TSC\nand it it's going to give us all of\nthese errors if we just look through\nthem\num but it's going to still compile all\nthose files to our output directory but\njust to demonstrate how you can change\nthis behavior I'm going to get rid of\nthe test TS directory now just so that\nthat's not clouding anything up and then\nI'm going to completely delete the dist\ndirectory\nso that's okay because remember we can\njust run yarn TSC and it's going to\ncreate the disk directory interestingly\nenough now that we deleted that other\ndirectory that had typescript this Now\ndoes not maintain the JS directory\nstructure so before I forget I'm sure\nthere's an option to change that but\nbefore I forget let's go and remove that\npath\nand if we go back to our browser\num let me get rid of this\nlet's refresh and we can still play our\ngame\nso this is looking at the live TS\nrefactor\nso it's still working but if we go to\nthe options reference there should be\nsome options in the emit so if we're\nscrolling through there's this option\ncalled No emit on air\nand I think that's\num\nwhat we want let's just scroll through a\nfew more things okay so let's click on\nno omit on air\nthis says do not emit compiler output\nfiles like JavaScript source code Source\nMaps or declarations if any errors were\nreported this defaults to false making\nit easier to work with typescript in a\nwatch-like environment where you may\nwant to see results of changes to your\ncode in another environment before\nmaking sure all errors are resolved so\nlet's just take this property no emit on\nair\nwe'll open up our TS config\nand we'll throw this at the end so no\nemit on air\nand this defaults to false but we're\ngoing to say true\nnow let's once again delete the dist\ndirectory\nand let's try the yarn TSC to compile\nour typescript files\nand now you'll see that even though we\nran this there's no dist directory\nbecause we've said if there are errors\ndo not emit any you know output files\nnow once again we don't really want this\nbecause when we are converting our\nproject over we want the ability to you\nknow just compile the typescript files\nwith errors so that we get a build\noutput and then in a final State you\nmight you know once you've converted\nyour project over you might add that\nback or have other sort of build checks\nto make sure that you know you get a\nclean build before you deploy your\napplication so now that we have\neverything set up and we've got the app\nworking with this disk directory we will\njust jump into this JS folder it's\nprobably you know not the best name for\nit anymore JS but technically typescript\nis a superset of JavaScript so it's\nsomewhat valid\nbut what we'll do is we will start\num I think rather than starting an app\nwhich kind of consumes both the store\nand The View\nlet's just start with the store because\num it's always good to Define the types\nof your state at the beginning that just\nkind of helps you inform you know the\nrest of the files in the project design\nin general so this is just in general a\ngood place to start now in this folder\nI'm also going to make a new file called\ntypes dot TS and this is going to be a\nmodule that exports a bunch of types\nthat the rest of our files are going to\nconsume and pass around\nto keep things more clear in our heads\nand to also satisfy the compiler so let\nme just reference\num my final to make sure I'm getting the\nright types here okay so let's close\nthis out our types will go on the left\nand then we'll put our store on the\nright so the first thing that we'll see\nas we're going through aside from all\nthe red squigglies is this initial state\nso this is the\num the shape of the object that we're\nstoring in local storage as you can see\nhere so if we open up our app and\ninspect and we go over to storage and\nlocal storage\nyou'll see that I've already played the\ngame and you can see this updates on\nevery move\nand if we open this up you can see the\nparsed value so we've got the current\ngame moves the history all games current\nround games and then you can go through\nand just see all the moves that have\nbeen made by the different players so\nthat is the shape of that object that\nwe're storing in state now the benefit\nof typescript is to just have confidence\nover you know the types we're passing\naround so it would be a great idea to\nDefine that state so in typescript you\ndefine a typing with either the type\nkeyword or the interface keyword the\ndifference between the two is a\ndiscussion for another day I generally\nprefer types\num but you know some people will get\nvery in you know heated with a\ndiscussion about which one is better in\nwhich situation\nbut we'll start with just a type\nand I'm going to call this the game\nstate so game state is an arbitrary name\nI'm giving this type similar to how we\nwould you know Define a variable name\nand the type is defined using you know\nbasic object syntax so I'm just going to\nmatch this so let me copy this shape\nover and get rid of this comment\nso right now this is not really a valid\ntype\num it's not really complaining about\nanything but this is not a valid type\nlet's go ahead and give this a type of\nlet's see current game moves\nlet's just say it's any for right now\nand it's going to be an array so it's\ngoing to be an array that has objects\nthat are have any shape so this is just\nour starting point now we need to Define\nall of these types right here so this is\nkind of our final thing that we need to\nget to but we need to decompose our\ntypes into you know smaller units so\nthat we can pass them around our files a\nlittle bit easier\nso the first thing I want to do is\nDefine a player so you can see that\nwe've got squiggly lines under the\nplayers param or argument that we're\npassing into the class Constructor and\nif we were to open up the app.ts\nyou can see the player's array that\nwe've defined so let's give a type to\nthese objects you can see that they have\nthe same exact object shape so we can\ngive this a representation of player\nand a player is going to have an ID a\nname an icon class and a color class now\nthese are the actual values\nbut we want to give these a type so a 1\nis going to be a number type\nplayer one is going to be a string type\nthe icon class is also a string type and\nthe color class is a string type so here\nwe have defined a player type now you'll\nnotice that all of these just have\nregular you know primitive typings\nand they don't have anything crazy going\non here now with typescript you can make\na property optional by adding a little\nquestion mark after the property or I\nguess not sure if you'd call that a\nproperty but you put this question mark\nhere and now the color class would be an\noptional property so you can hover over\nit and it says it's either string a\nstring or undefined and if we remove\nthat it is just going to be a string for\nour game since this is a configuration\nproperty we want this to be all required\nproperties so this is the correct shape\nso now what we can do is go back to\nstored.ts and move on to the next type\nthat we'll need\nthis does not satisfy anything that\nwe've got going on here but it will be a\nbuilding block for us to work from so\nthe first thing I want to do is Define\nthe current game moves so what is a move\nin our game if you we scroll down to\nPlayer move you can see that what we're\npushing to state is a property with a\nsquare ID and a player so we just\ndefined the player interface or type but\nwhat is square ID well this is just\ngoing to be a number and we can Define\nthis as a move so let's call it a move\nand it's going to have a square ID which\nis a number and then a player which will\nbasically be this type right here so if\nwe hover over move you can see that this\nis the type that we've given it we can\nnow take this move type and replace the\nany type in the current game moves with\nmove so now the current gave game moves\nis an array of moves and that lines up\nwith what we've done here where we are\npushing a move to the array of current\ngame moves which is our state now to\nfigure out what we're going to type the\nhistory object with we need to go down\ninto the store class and figure out what\nwe're doing\nso in the reset method\nwhat we are doing is pushing games to\nthe history object under the current\nround games property\nso this is the type that we're looking\nfor we are pushing an object\nthat has a moves property and a status\nproperty now it's pretty clear what\nmoves represents moves is going to be\nwhat we just defined an array of moves\nso we can start with that and we're\ngoing to call this a game\nso a game is going to be represented by\nan array of moves and then we have a\nstatus property\nwe don't really know what that is yet so\nlet's give it a type of any to start\nwith and now we can kind of go look\nthrough our code base and Define what\nthat type is so if we track backwards\nand look at status it's coming from a\ndestructured property off of this Dot\nGame and if we look what this dot game\nis\nthat is a getter method on the class and\nthe return type of that getter method is\nall of this stuff so we have a moves\narray we have a current player and we\nhave a status\nthis object right here the status is\nwhat we are trying to Define so let's\nmake one more type called game status\nand that's going to be an object with an\nis complete property which is going to\nbe a Boolean value value as you can see\nand then the winner is going to be a\nplayer so the winner is going to be\nrepresented by a player which we defined\nright up here so now we can take this\ngame status\nand this is going to be the\nrepresentation of status within the game\ntype\nso once again we're coming down here and\nthis is where we're pushing a game to\nthe history of current round games we've\ngot a moves property which is now\nrepresented by an array of moves and we\nhave a status property which is now\nrepresented by a game status which has\nthis type and now we're finally ready to\nreplace some things here so we have a\ngame and a game status\nlet's put game right here for current\nround games now the last thing we have\nto fill in is the all games we have to\nfigure out what type of array that is\nand I'll just save us some pain of\nlooking through this and just say it's\ngoing to be the same thing so the\ncurrent round games in all games going\nto have the same exact type\nat this point we have defined all of\nthese supporting types for our game and\nin this case we had just looked at our\nreference code our JavaScript and we're\nbasically just looking at you know what\nkind of objects are we passing around\nwhat are we returning from our different\nfunctions and we're just looking and\nanalyzing our code to see that\ninformation\nif you're starting this project from\nscratch and you intended to use\ntypescript all the way through\nthis is actually a great exercise to go\nthrough before you even write any code\ndefining the types of your game is a\ngreat way to define the functionality\nbehind it without writing any code it's\nactually one of the first things that I\nwill do when I'm building a new feature\nis just map out the different types that\nI'm going to be dealing with and then\nI'll figure out what functions do I need\nwhat types are going to be accepted as\narguments to each of these functions\nwhat are the return types of these\nfunctions so on and so forth so as you\ncan see\ntypescript is already making us think a\nlot more clearly about what types of\nobjects we're passing you know objects\narrays so on and so forth what types\nwere passing through our code and it\nmakes us a lot more explicit about that\nand more organized so if we go back to\nour Excalibur where I was briefly\nlisting out the benefits of typescript\num I think one of the other benefits is\nmakes you think more clearly and\nexplicitly about your code\nso that's what we just experienced we're\nwe're having to explicitly type out our\ngame now at this point we still have\nsquiggly lines and that is because we\nhave not assigned these types to\nanything here\nso I will keep both of these open I'm\ngoing to just collapse this a little bit\nand let's just start working from the\ntop of our file\nso the first thing let's look at is the\nConstructor with typescript we can add\ntypes to things by adding a colon and\nthen giving it a type in in this case\nthe key is our local storage key and\nthat's just a primitive string type so\nwe can just pass that in directly we\ndon't need to do anything over in our\ntypes file because you know we don't\nneed to redefine a string now players is\ngoing to be an array of players so we'll\ngive it a colon and then we will say\nplayer and then array so that is going\nto be the type we're dealing with now\nyou can see that it figured out that\ntype already even though we didn't\nimport it now this is not always going\nto be the case it works works okay here\nbut generally what you'd want to do is\nimport that type explicitly so with es6\nmodules what we can do is import a type\nand then that type will be called player\nand that type will come from the types\nfile so types.ts is what we're looking\nfor now you're going to see an import\npath cannot end with a TS extension\nconsider importing types.js instead\nlet's Google this it's probably some\nconfiguration property that we missed\nthis person is just saying that we can\njust remove the extension let's just try\nthat I don't think that worked now it's\nsaying that types.ts is not a module oh\nI actually know what's going on here I'm\nsorry I messed this up so these are all\njust scoped to the types.ts file and\nit's also not saved so that that would\nbe a big problem that we cannot import\nthat so the first thing we do is save\nthis file that will help us out quite a\nbit it will not solve this error because\nwe have not exported any of these from\nthe file so to use them throughout our\ncode we need to export them just like we\nwould export you know if we had some\nvariable equals 20 and then we export\nsome variable or\nexport default something like that or we\ncould just export it like this\nand it would do the same thing and now\nwe can you know import some variable\nfrom\nthe types file\nso that's just a regular JavaScript\nvariable I will get rid of this and\nlet's keep exporting all of these Okay\nso we've exported all of our types let's\nsave it\nand now we should not get so much uh\ngrief from the typescript server now\nthere's no red squigglies we've got the\nplayer type and you can see we can hover\nover it and you can see that type which\nis really nice to just be able to hover\nover this you can also hover over it\ndown here and now we have a strongly\ntyped Constructor and it knows exactly\nwhat's being passed in but at this point\nwe get these problems storage key and\nplayers these are instance properties of\nthe store class\nand since we have not explicitly typed\nthose it's complaining now one way that\nwe could do this is come up here at the\ntop\nand say that storage\nkey\nis a string and that will satisfy it\nbecause we're passing in this key and\nthen in the Constructor we are assigning\nthis to a string so there's actually a\nshortcut to doing this a more concise\nway to do it and instead of calling this\nkey and then this storage key and having\nthat mismatch there we can short circuit\nthis delete that\nrename this to storage key\nand so far it's not going to do anything\nso if we tried to assign this dot\nstorage key equal to storage key it's\nnot going to work\nwe can remove that entirely now this is\nnot going to work but if we say this is\na read-only property of the class it\nwill Define it so that we can access it\nlater in the class so if we go to the\nbottom where we are saving the state you\ncan see we're accessing this dot storage\nkey in these two places and if we hover\nover that it's going to know that it's a\nstring now if we come to the top and we\nget rid of that read only\nand just leave it to storage key\nit will complain about that because it\nsays it does not exist on the type store\nso all we need to do is give it a\nread-only and you can also give it\neither a public\nor private just to define whether it's\naccessible in from outside the class or\nnot we'll call it private because only\nthe internal methods of this class can\naccess this and then same goes with\nplayers so once again we can delete all\nof this\nand this can just become a private\nread-only array of players and so right\nhere this is basically the shortcut for\npassing in these\num parameters and then assigning it to\nthe class all in one step and you can\nsee if we look for this dot players it\nknows that it's of type player all right\nso we're getting closer we're seeing a\nlot less little squiggly red lines\nwe just have a few more things to work\nout in this file\num let's go ahead and start here at the\nbottom this is pretty isolated so this\nstate or function has an implicit any\ntype which basically means typescript is\nyelling at us because we haven't defined\nany type one thing that we could do\nif we really wanted to as we are\nrefactoring this and migrating our code\nbase if we change strict to false\nand save that\nand then restart the TS server you'll\nsee that this no longer complains about\nthis at all we can Define this as an any\ntype and typescript's not going to be\nmad about it this of course comes with\nthe detriment that now you don't have\nany red squiggly lines to tell you where\nyou've messed up that is why most people\nwould encourage you to put on strict\nmode\nrestart the TS server here\nbut I just wanted to show you that just\nso you can see now let's start at the\nbottom Here Again State or function this\nis a great use case for typescript this\nis where your life becomes a lot easier\nand that is because in this case we are\nallowing\num\nsomeone that is using this function to\npass either an object that represents\nstate or a function that we will pass\nthe previous state to and then it\nreturns a new state so two different\ntypes of parameters that you can expect\nhere and so we can type this a lot\nbetter now that we know or now that\nwe're using typescript so saving the\nstate we are going to be passing game\nstate so that is the type that we're\nlooking to pass in there so we'll say\ngame state\nand it's going to complain about this\nbecause it cannot find that name\nlet's go to the top\nand let's import game state from our\ntypes so we're importing that type\nnow it's not complaining anymore\nbut it complains right here because it\nthinks this function thinks that state\nor function is just an object that is\nrepresented by game State and right here\nwe are trying to call it as a function\nso the problem here is that we've only\ndefined one of the possible types so\nhere we can define a typescript union\nlet's go to the documentation and\nbriefly look at this\nso let me make a new tab and typescript\ndocs let's start over\nand let's go to either the reference or\nthe handbook I'm a little surprised that\nwe don't see unions\num starting out but let's go to the\nbasics\nthat's not what we're looking for\nlet's just search the docs so Union\ntypescript unions uh looks like\ntypescript for functional programmers is\nwhere we found that one\num but anyways in typescript Union types\nare untagged in other words they're not\ndiscriminated unions like data and\nHaskell I I don't use Haskell so I don't\nknow what that means\num but what this is trying to basically\nsay is that if you put this little pipe\ncharacter that means that the type can\nbe you know either this or that so it's\nkind of like an or\num an or operator but for types so you\ncan read more about that but let me just\nshow you what this looks like it's going\nto be game state or and then this is\nwhere we Define our function that we're\nlooking for so the function is going to\nbe a separate type and I'm going to\nactually add this to\num let's add it to the top of the file\nso since we're in typescript we can just\nadd types within our files so we'll say\nSave State\nCB for callback\nand to define a function there's a\ncouple ways you can do it but one quick\nway is to basically just give it an\narrow function and tell it what it needs\nto return so in this case we want to\nreturn the game State and we're going to\npass the previous state which is going\nto be a game state so basically I talked\nabout this in the previous video when we\ndid this build but it's always nice in\nyour Save State function to be able to\naccess the previous state so that you\ncan derive that next state so that's why\nwe're passing this but this is the type\nthat we can Define and if we took this\nkey right here the type\nand we passed it right here Save State\ncallback you'll see that there's no more\ncomplaints from the typescript server\ncompiler because state or function\nmatches the type that we gave in\nprevious state\num is not typed yet but it satisfies\nthat constraint so I can actually take\nthis to be a little more concise and\ncopy that type itself\nand just pass it in right here and then\nyou need to put some parentheses around\nit\nand that should work just fine now we\ncan get rid of this\nI just wanted to break it out so that it\nwas more clear now everything's working\nhere but if we hover over previous state\nthat's going to have an any type which\nno one's complaining about this here\nwith typescript but it would be nice to\nknow what that is\none way that we can do this and this is\na little bit tricky with typescript it's\num not super obvious but when we do\nlocal storage dot get item and set item\nit's not going to return a type so get\nitem is going to by default return in\nany type\num or actually sorry a string or null\nand the Json parse method\nthis is where it's going to return in\nany type so what we want to do if we\nwant to actually give this a strong\ntyping is we will cast the type\nso we can say\njson.parse item and then this is going\nto be as game\nstate\nso now get state is going to have a\nreturn type of game State and you can\nactually explicitly Define that\non the function itself and if we remove\nthis now\num and we say as string or something\nlike that it's going to yell at us\nbecause we're not returning the correct\ntype that this function was declared as\nnow that's for a whole nother day we're\nnot going to be typing all of our\nfunctions\nexplicitly with return types some\nprogrammers really like that to be\nexplicit about typing all the functions\nthis is just a refactor and I just want\nto get this working so for the moment\nI'm not going to worry about that\nbut just know that you can Define the\nreturn Types on your functions\nso now that we have done this we can\ncome back here in previous state will be\na type of game State and it still works\nto pass it into state or function the\ngame State can go into state or function\nbecause that is what we typed it as\nall right\nlet's keep scrolling up I think we have\none or two more errors\nthe square ID this should be very easy\nlet's just give this a number that's the\nexpected type now if we hover over\ncurrent game moves we would expect that\nto have the\num move type but it does not it has an\nany type and I believe we can fix that\nwhere would we fix that one thing we can\ndo is give this initial state\na game State type so now anywhere we\npass that it's going to recognize it so\nright here the initial state is of type\ngame state so if we look here the\nstructured clone method\nis actually similar to local storage\nwhere it's a a browser API and by\ndefault it's not going to type anything\nso in this case we're going to cast this\nto a game State object because we know\nthat this state is going to be\nrepresented there\nso now where we're pushing to all games\nit's going to recognize that current\nround games is of type game so you can\nstart to see how this comes together and\nhow we are starting to get stronger\ntypes across our code okay so I think\nthe only thing we have left here is that\nred squiggly\nnot saying that the red squiggles are\nyour map necessarily you obviously need\nto check other things but just given the\nfact that we know that this code worked\nbefore and we have strict mode on we can\nreally use those as a guide for our\nrefactor to to find areas that we have\nnot strongly typed things\nso let's dig in into this error it says\nproperty includes does not exist on type\nnumber array do you need to change your\ntarget Library try changing the lib\ncompiler option\nto es2016 or later all right so it's\ngoing to say 2016 or later\nso this is es7 I believe\nso let's target es2016\nand then restart the TS server\nand now you can see that will go away\nbecause that built-in method on an array\nis available in the ecmascript 2016 spec\nso we are let me be clear about this we\nare using es6 modules which tells us how\nwe can export and import things from\nmodules and then we're compiling our\ntypescript code to this standard of\nJavaScript\nso that standard of JavaScript has this\nmethod\nand at this point we have completed\nthis file\nwe've imported our types that we need\nand there are no red squiggly lines so\nthat's a good indication that we're\npretty much done with this file\nlet's save that and go to the next one\nso we are done with the store\nlet's go to The View\nthis one will be slightly more difficult\nbecause we're going to have to deal with\num\nDom element types which are a little bit\nmore confusing\nso we've got a bunch of red squiggly\nlines here but they're all coming from\nthis query selector helper method that\nwe defined\nlet's go straight down to that\nand let's start typing it so the\nselector itself is just going to be a\nstring\nthat's like the class or you know\nselector that we're passing into the\nquery selector method and then when\nwe're typing things with typescript\nsomething useful you can do is just\nhover over these methods\num it's not going to work because we're\nusing it on the parent but if we go to\nthe document there's some built-in types\nfor the Dom\nmethods and Global types so document is\nof type document and query selector this\nwill give you a stub giving you the\ntypes that are available here\nyou can see the selectors are string\nthat's how I knew to give that a string\nand then element is what's going to be\nreturned from it so we're going to pass\na parent which is of type element\nand now we should see that's of element\nand then query selector is now available\non that\nand we're passing in a string so let's\nlet's retype this to a number real quick\nand you'll see that that's an invalid\nthing to pass to a query selector so\nthat's how we know that string is going\nto be the correct thing and then\nfurthermore we can go to query selector\nall and just give that a string type as\nwell\nso these two methods are now strongly\ntyped and if we come to the top\nit's still going to be yelling at us\njust a little bit\nit's saying it expected two arguments\nbut it got one so what we have to do is\ncome down to our methods and in this\ncase the parent element is totally\noptional\nso what we can do is pass a question\nmark right after that and that will now\nmake this an element or undefined and\nthat's okay because we are first\nchecking with our ternary operator\nwhether that parent\nargument is has a value and if it does\nhave a value we're going to use it\notherwise we're going to fall back to\nthe document so if we were to refactor\nthis a little bit\nand intentionally break it if we just\ntried to access the parent element and\ngrab a query selector off of it and then\npass the selector it's going to work\nbecause Visual Studio code already knew\nwhat we were trying to do but if we\nremove that right there it's going to\nyell at us because it says parent is\npossibly undefined and you can't access\na method like this on an undefined\nparameter now you'll see that vs code\nadded this question mark here which is\nthe optional chaining so let's type that\nin optional chaining\nthis is actually not a typescript\nconcept this is an operator in newer\nversions of JavaScript which we're using\nthat accesses an object's property or\ncalls a function\nand if it cannot find what it's looking\nfor if the if the type is undefined or\nnull as shown here it will short circuit\nand evaluate to undefined so the reason\nthat that works to do this is because\nwe're first this operator right here is\njust checking hey is the parent element\ndefined if it is let me call this method\notherwise let's turn element to\nundefined and then as you can see here\nwe're checking if element is defined\nthrowing an error and if it's not or if\nit is defined we're returning it so that\ntechnically does work but in this case\nwe want to use this logic just to be\nexplicit and say if it exists grab from\nthe parent otherwise fall back back to\nthe document and that gives us assurance\nthat we're going to find that element\nso we've fixed all these red squiggly\nlines but now we have a problem here and\nit says property menu does not exist on\ntype\nobject and you can see here we've\ndefined this as an object\nwhat we really want to do\nis retype this\nand we're going to use a built-in\ntypescript utility let me make sure I'm\ndoing this the same as my example or my\nfinal\nso if we go to the documentation for\ntypescript\nlet's go back and\nfind ourselves the utility types so in\nthe reference there's this utility types\nand if you come over here to record\nthis constructs an object type whose\nproperty keys are keys right here in\nwhose property values are type right\nhere so this is actually leveraging\nsomething called generics in typescript\nwhich is kind of beyond the scope of\nthis video you can look it up and and\nread about it but keys and type are\ngoing to be generics and record is going\nto be the type that allows us to define\nsomething so in other words this is just\nbasically defining a basic object\nso right here this is where we will type\nthis so remember dollar sign is just a\nproperty an instance property of the\nclass you could have named this pretty\nmuch anything\num\nso you could have named this element\nobject store or something like that but\nwe're just doing this for a shortcut and\nif we want to type it we can type record\nand then this is where we pass our\ngeneric values so we want to pass a\nstring because we're defining arbitrary\nstrings\nas the properties of this object and\nthen the value is all going to be the\nsame it's going to be a an element type\nso if we pass an element now things are\nsatisfied satisfied here because we are\npassing an arbitrary string property\nname right here and then the value\nis going to return an element which as\nyou can see down here\nwe are returning a type of element so\nthat is satisfied so all these are happy\nnow\nbut we need to type the double dollar\nsign which is the node list now if you\ncome down here to query selector all\nlet's just take a peek at what this\nelement list is it is typed as a node\nlist of elements so that is the native\ntyping that the query selector all\nbuilt-in method is returning and you can\nsee that's defined right here so let's\njust copy that because we'll need it\ncome back to the top and now let's\ndefine this as a record where we can\ngive it an arbitrary string\nso squares is an arbitrary string\nproperty name and then the type that\nwe're going to give it we'll just paste\nthat in so it's a node list of elements\nand we'll initialize that to an empty\nobject and now the element list is happy\nbecause query selector all returns that\nnode list of in squares is that\narbitrary property value so it satisfies\nthis type so that's just a use of a\nbuilt-in utility type in typescript\nusing some generics I just want to show\nyou another way that you could have done\nthis so if you wanted to not use a\nutility type what you could do is Define\na custom type so let's say\num element\nobject\nuh\ndictionary that's just our type name\nthat we're giving it and here what we\ncan do is pass in a key\nof string\nand this can be an element\nvalue and then we'll pass this element\nobject dictionary\nI'm sorry it should not be of it should\nbe in\nstring so what this is basically saying\nis I want an object that can have an\narbitrary number of properties in the\nkey of that property so menu menu button\nmenu items is a string and then the\nvalue of that property is an element as\nassigned here so this type right here is\nreally the equivalent to what we did\nearlier where we said\nrecord string element and then closed it\noff and if you really really wanted to\nget fancy\nyou could do this with generics so sorry\nI'm going on a little bit of a tangent\nhere but this is just to give you an\nidea of the power of typescript so we\ncould say custom record utility\nso what we're trying to produce here is\nthe built-in utility record and just\nrecreating that from scratch\nwhat we can do is pass in a generic so a\nkey and a value and usually with\ngenerics you're going to put a t in\nfront of it\nthat's just kind of a convention that I\nuse to kind of signify or you know\nExpress this is a generic and then we'll\nuse the same syntax so the key is in\nt\nkey\nand then the value is T value now we\nknow in JavaScript the only valid type\nof property you can give an object is\nreally a string you can't just Define an\nobject\nlike this and start adding numbers to it\nlike this is\nI guess this might be valid is this\nvalid JavaScript\noh that's funny I I guess I don't know I\ndon't think this is valid but let's\nlet's just try it out because now I'm\ncurious\nI wouldn't be surprised\nso we'll say this is a test\nand it looks like it is that is\ninteresting I didn't know that you could\ndo that I don't know why you would ever\ndo this other than maybe a map which is\nkind of similar to what that does but\nanyways\num I guess I'll learn something new\ntoday while making a tutorial about\ncoding\nthat's probably not the best thing but\nanyways let's just be honest so anyways\nwe want this to be a string so let's\njust say it extends a string type and\nnow that's going to be fine and then we\ncan just replace this record with custom\nrecord utility and it's going to work\nfine everything's going to be happy\nbecause we've basically just implemented\nthat built-in utility type that\ntypescript provides so just a\ninteresting tidbit that you can kind of\nroll over a little bit so let's get rid\nof that because that is unnecessarily\ncomplex\nyou can see at the top here I had\nimported the store just for JS doc\ntypings when we had of the vanilla\nJavaScript project so now that we're\nusing typescript we really don't need to\ndo that\nso we'll get rid of that\nso moving down\nwe can now implement the rest of these\nokay so we'll move on to the render\nmethod\num\nthe render method takes\ntwo State objects and the reason I\noriginally passed this as two separate\nobjects is because we were not working\nin typescript\nnow that we are working in typescript I\nprobably would just pass the entire\nState object as one parameter but we'll\nwe'll stay consistent here so if we look\nat our types that we've defined\nwe have a game type so that one's pretty\neasy we'll just type that as a game\nand we need to import that but instead\nof going to the top of the file\nin doing it there I'll show you a little\ntrick so if you hold down on a Mac or on\na command or on Windows control so\ncommand and then period\nin vs code will give you a suggestion\nand usually it can find out where it's\nlooking\nnow it's looking for types.js\num\nnot types.ts I'm not quite sure what's\ngoing on there\num why it's saying that\nI don't even know if there's a there\nisn't a types JS I'm not sure what it\ndid there but anyways we'll add the type\nuh import just so it's not importing\nanything but typescript types\nand then we can remove that extension\nand that should work\nso now that's working let's see if it\nworks on this one so we need to do stats\nwhere we I don't know if we have typed\nthat yet okay so I've actually\num in my final copy of this that you'll\nsee on GitHub I've used a slightly\ndifferent strategy so we do not have a\ntype already defined for stats if we go\nto store.ts\nthe object we're looking for is this one\nand specifically we're looking for this\nreturn type which has a player with\nstats which is an array of players\nwith this wins property added and then\nwe have ties which is just a number now\nif we hover over stats it will give us\nthis inferred type which is correct\nand furthermore the store class is in\nhas an inferred type that has all of the\nmethods on it so something that we can\ndo is derive types from other types\nand in this case since we don't have a\nstats type what we can do is go back to\nthe view and we can import\ntype store from store\nand that will give us the store class\nthat we had defined\nand then here what we can do is say\nstore and then we can actually access\nproperties on that so you can scroll\ndown just like we're accessing you know\nproperties of an array we can scroll\ndown and see all the methods and\nproperties that we can grab from the\nstore and stats is one of those so now\nstats is defined because we derived it\nfrom the store\nnow someone argued that this is maybe\nnot the best way to do this and I would\nprobably recommend\num having stronger types and actually\ndefining a stats type but for now this\ndoes work and it's a easy way to get\nthat type without having to define it\nwe can also grab the game uh getter from\nthe store which will properly type our\ngame and that is going to give us the\ncorrect types for the render method and\nagain I'm using this to demonstrate\nsomething in reality you'd probably want\nto Define these as actual types over\nhere and we do have that for game so we\ncould use game ready oops\nscrolling around we could just use game\nright there but actually it will yell at\nus because this game is slightly\ndifferent this is derived state so this\ngame is this the state that we're\nstoring in local storage\nand then the game that we're trying to\nrepresent in this method is derive state\nso in our store remember we have this\nmethod called game and we are reading\nthe state the raw State and we are\nderiving some useful properties that\nwe're returning for our game to use\nright here at the bottom so obviously\ncurrent player is not saved in local\nstorage and not represented in this type\nso I guess that's another reason why\njust using the store\ngame is a good way to do it but yeah\nbasically I would say that you'd want to\ntype this function now coming down to\nthe the bind events all these methods\nthe Handler is of type any right now but\nbasically what we're passing to the\nHandler is the Callback of add event\nlistener so if you look at the stub for\nthis add event listener you'll see it's\ngot some overloads which is kind of an\nadvanced typescript concept\nbut one thing you can do to kind of zoom\nin on some types\nlet's command click on add event\nlistener and this will take us to\nlib.dom.d.ts these are the typings for\nthe Dom that are basically provided\nalready\num to us and if we open up this in the\nfile pane\num I don't even think you're going to\nsee it because\nthis is kind of I believe this is built\ninto vs code just to give you these\ntypings\num I could be wrong on that\nbut anyways at event listener it gives\nyou a couple types that you can deal\nwith here\nand then you can hit command click on\nthis\nand then you just kind of go until you\nfind the type that you're looking for so\nevent listener\nand now you can see event listener is\nactually a type that we can use\nso we don't even need to define it\nwe can just use\nevent listener which you can see is\npopulated\nand pass that right there\nso event listener\nit's always best to use built-in types\nif you can if they're not defined then\nyou obviously have to type them yourself\nbut with something as common as an event\nlistener Handler like this you can\nalways expect that there's going to be a\ntype already defined for you that you\ncan use\nso those are done\nupdate scoreboard I believe these are\nall just numbers\nsay number\nnumber\nand number\nhere it's going to tell us something\ninner text does not exist on type\nelement\nI might have used this wrong\nin my original actually I think this\nshould be text content\nyeah so that that's actually the right\nthing to use I don't know why I was\nusing inner text it seemed to work\nthough\nso let's update all those\nopen modal message is just going to be a\nstring because we're passing a string of\nwho won\nand then we have the same error here\nthat needs to be changed to text content\ncoming down to initialize moves this one\nis somewhat simple we've already defined\nthe move type over here so it's going to\nbe a move but right now it's going to\ncomplain because it cannot find it so\nhit command period and we'll update the\nimport and you can see that that\nactually added the move right there and\nwe're not using game anymore so we can\nget rid of that\nbut now it's going to complain right\nhere and that's because I've\nintentionally messed this type up\nwe want an array of moves not just a\nmove so to specify that we can either\nsay array which is a helper utility of\ntypescript\nor you can just do it shorthand and pass\nthe brackets at the end of it which\nspecifies that moves is now a moves\narray so now this is valid and you can\nsee everything's working\njust to start demonstrating the value of\ntypescript let's say that we removed\nthis plus sign so in the original build\nI remembered to do this but it's pretty\neasy to forget to cast the ID that you\nextract from the the element Target to a\nnumber so what if I got rid of that\nnow it's going to yell at me because\nit's an unintentional\nbecause types number and string have no\noverlap and what that's saying is we are\ndoing a triple equals equality which\ntypes or which checks the type and the\nvalue\nand we're looking at a move which has a\nsquare ID of number and then the default\nevent Target ID is going to be a string\nso element.id is going to type to a\nstring so these will never evaluate to\ntrue\nnow we can of course remove the triple\nequals and that would technically work\nbecause things would be cast but you\nalways want to use triple equals if you\ncan so here that's just a very explicit\nexample of where typescript comes in\nhandy is it reminds you of these little\ndetails that you might have kind of\nglossed over before all right so let's\nkeep going you can see that it's\ncomplaining here about icon possibly\nbeing null\nand this is just a case where\nwe could do better so remember earlier\nin the prior video actually not this\nvideo we Define query selector and this\nis like a safe query selector where we\nare checking uh whether the element\nexists and if it doesn't we're throwing\nin error which is kind of the behavior\nthat we want we don't we don't want to\nproceed if we can't find the element so\none solution to this problem is to put a\nquestion mark there because that will be\nthe\nthe optional chaining that we talked\nabout earlier where we're saying hey\nlet's check the icon and if it's an\nelement grab the class list and add this\nto the class list if it's not an element\nand it's null let's just uh evaluate\nthis to undefined and not throw any\nerrors now that works you could add that\nthere and it solves your problems but\nthis is kind of an anti-pattern a little\nbit because you know you throw this in\nhere and all of a sudden you know your\napp is not grabbing this correctly and\nyou're clicking your toggle menu and\nit's not working well how do you find\nthat error it's better to be explicit\nabout this kind of thing so let's leave\nthat and take some Clues from typescript\nand refactor this to instead\num let's comment this out and say icon\nis equal to this\nand we'll use our safe query selector\nmethod in this case we're going to look\nfor an I tag and the parent is going to\nbe this dot dollar sign dot menu button\nand that is basically how we can safely\nselect that and now icon is definitely\nan element because we're going to throw\nan error if it's not so these calls down\nhere are now valid this is actually a\nconcept called type narrowing\num that you can read more about in the\ntypescript documentation\nso I wonder if this is actually\nsomewhere I can show you\nokay yeah so narrowing\nand this whole page kind of describes\nthat process of of narrowing the types\nthat I just explained here same thing\ngoes right here we can just copy this\ndown and replace this\nlet's get rid of this and these two\nfunctions are good\nnow a couple more the square element\nyou can see that we are\nreplacing the children on it so we know\nthat that should be an element\nand then the player\nis going to be a player and command\nperiod to update that import at the top\nsame thing here this is going to be a\nplayer\nand then finally we get this fun\ndelegate method that we really it's\ntough to understand in the first place\nand now we have to type it\nbut let's just walk you know\nparameter by parameter and get this done\nso element\npretty self-explanatory this is going to\nbe an element\nthe selector is going to be a string\nthe event key\nis going to be a string\nand then the Handler is going to be an\nevent\nuh\nwhat do we call this\nwe have an example of this right up here\nevent listener\nnow we've got a little bit of a tricky\nsituation so you can see right here\nevent Target is possibly null so okay\nlet's put that question mark the\noptional chaining but we still have this\nproblem property matches does not exist\non type event Target so we're going to\nuse this narrowing concept again to\nnarrow these types and get rid of these\nerrors\nso this is where typescript is actually\nhelping us in a way it's kind of making\nus more explicitly check things that we\notherwise probably wouldn't\nso the first thing that I want to do\nlet's get rid of this question mark or\nno we'll leave it there for now\nand we'll say\nif\nthe event dot Target\nis an instance of element so this is a\nway that we can check if the target is\nan element\nso if that's an instance of the element\nand we actually want to negate this so\nif it's not an instance of an element\nthen we want to throw a new error\nand we say event Target not found\nso this is just a guard that basically\nsays Hey the purpose of the delegate\nmethod is\num to delegate an event Target and find\nsomething within it and if we can't find\nthat in the first place and it's not an\nelement then the rest of this method is\nuseless like we can't really proceed\nsafely so we might as well throw an\nerror exit early and then the developer\nis you know responsible for fixing that\nso that solves one of our problems the\nmatches keyword or function Now does not\ncomplain about anything\nnow in the Handler it says argument of\ntype element is not assignable to\nparameter of type event\nand that is actually because I typed\nthis incorrectly\nin this Handler we're actually passing\nthe element itself so I have typed this\nas if we were passing the event but\nreally what we're passing is the element\nso I need to type it accordingly\nso we're just passing a function that is\ncalled with the element as the first\nargument and it doesn't return anything\nso now there's nothing wrong here and\nwe're okay but let's remove this\nquestion mark\nand see what happens so\nlooks like we're okay\nall right so we're we're good here this\nworks it's typed okay\nI think this whole file is now strongly\ntyped and we're ready to move on to the\nfinal one\napp.ts and we're going to tie it all\ntogether and get it working\nnow just as a reminder this is this app\nreally we haven't done anything\nstructurally to it other than a few\nthings so it should still be working and\nif we open things up\nand ran yarn TSC\nlet's look at the disk directory it\noutputs everything\nand then if we go to our page\nlet's inspect the page and go to the end\nof the body\nand you can see the script is looking in\ndist Dash app.js\nand if we click things we can play the\ngame still\nso there's really nothing that we've\nchanged and it's been working this whole\ntime we're just trying to make our\nproject more maintainable with\ntypescript so that if we want to extend\nit in the future it's easier to do so\nwant to debug it easier to debug all\nthat kind of stuff\nokay at this point by fixing those other\nfiles we basically fixed a lot of the\ntypings here in in these files now it's\nalways nice to just be pretty explicit\nabout your typings some would argue that\nyou want to infer types as much as\npossible but\nlet's just go ahead and add a player\ntype to this array\nand once again it's trying to go to\ntypestop JS for some reason\nso we've got type player and this is a\narray of players\nnow remember the store we've typed that\nso you can hover over it and you can see\nthe storage key should be a string and\nthe players should be a player array\nso this is a player array and this is a\nstring let's say that we passed in a\nnumber it's not going to be happy with\nthat it'll say numbers not assignable to\ntype string so that's kind of the\nassurance that we're getting here\nnow coming down here let's see what it\nsays property ID does not exist on type\nevent\nso this is actually I think a mistyping\nthat we had from the bind Player move\nevent\nlet's go back to the view\nand you can see this is where we're\nusing our delegate\nand then our Handler we've typed that as\nan event listener and if you remember\ndown here I made that same mistake\num where I was incorrectly typing the\nHandler so let's copy this handle or\ntype\nand instead of event listener for the\nHandler it's just going to pass a\nfunction with the element\nthat it's selected\nso now we come back and these type\nerrors are fixed so this you know fixing\ntype error is really about just reading\nthe error message and being able to you\nknow respond to it and know what it's\ntrying to say which comes with time it's\nnot easy to start and figure that out\nwhen you're first starting with\ntypescript\nall right so at this point everything is\nstrongly typed and our app is working so\nour last step here is to compile things\nlet's make sure that we're not getting\nany errors\nso yarn TSC\nand there's no errors we're done in a\nsecond\nand the disk directory now has our\ncompiled code\nand as you'll see as you read through\nthis none of it's really minified or\nanything like that\num and our Target was es2016 so you'll\nactually see all of these\nmethods that we are using\nlet's see if we can find the includes\nmethod\nhere's some interesting stuff this is uh\ntypescript dealing with like the class\nsyntax and private fields and properties\nit has like a helper method to deal with\nthat\nso\nthat is kind of interesting\nso let me just show you if we\ndowngraded this to like ES3 a prior spec\nof JavaScript as our Target\nI just want to show you how that plays\nout with the output\nit'll be tough to see so let's open up\nview.js and just kind of watch the code\nas we recompile this to a different\nTarget\nyou can see that all of this stuff\nchanged and if we go back to es 2016\nand then recompile and you can also see\nwe get all these errors because we're\nusing things we're using language\nfeatures that were not available back in\nthat ES3 spec so the compiler is going\nto give errors so now let's go back to\nour valid syntax and you'll see like\nthis will update so\nyou can see the modules that we're using\nbut anyways that's just a kind of fun\nlittle tidbit to kind of explain that TS\nconfig a little bit more\nbut I want to wrap this up by just\nwalking through\nwhy this was so important to refactor to\ntypescripts and why someone would go to\nthe effort to do this\nthe value in typescript does not really\ncome as you are you know retyping things\nit comes when you're trying to refactor\nthings or add new features\nso if we went to the JS folder and we\nwent to\nlet's say\nthe store\nand let's say that we came down and we\nwanted to I don't know change the type\nthat stats uh returned or something like\nthat\nwell if we went through here and let's\nsay\nwe updated this property wins to like\nwin count\nokay so it's not going to complain at\nall right here\nbut what you'll see is that if we try to\nrecompile this\nso yarn TSC\nit's going to give us errors that were\nno longer there and the reason being is\nin our view on line 59 so let's open The\nView\nand go to line 59\nyou'll see that we have this underline\nbecause we are referencing the output of\nthis stats getter\nfrom another place in the code base and\nwe are using the original property so we\nwould need to update that to win count\nbefore it's going to stop complaining\nand what typescript has done for us\nthere is you know as the developer\nyou're going through and you're changing\na method and this method is dependent on\nby other methods in other parts of the\ncode base and so typescript is smart\nenough to know like hey if you change\nthis and it does not match up with the\nrest of the code base we're going to not\ncompile this code base because it's just\nnot going to work so otherwise if you\nhad a vanilla JavaScript code base and\nyou try to do something like this\nnothing would happen you you would just\nthink oh I I'm okay I changed that\nthat's fine and then you would find out\nthat you had errors in your project once\nyou started playing the game\nand it was not working as intended so\nthat's kind of the benefit of typescript\nis you get that proactive checking of\nyour code and you find out about errors\na lot sooner so rather than pushing a\nbunch of code up to GitHub and deploying\nit and finding out that something's\nbroken in your app you just don't it it\njust does not get deployed correctly and\nit doesn't build correctly if it's not\ncorrect code so that's kind of the the\nappeal of typescript I'm going to put\nthis back to wins now\nnow like I was saying you would probably\nwant to type this A Little Bit Stronger\nso if you were going back to the stats\ngetter what you can also do is set a\nreturn type on this so if we wanted to\nopen up our types.ts file\nlet's bring that over here to the right\nand maybe we wanted to actually annotate\nthe expected return of this function\nwhich is usually a good idea with\nfunctions it's it's better to be\nexplicit and I'll show you exactly why\nin a second\nso let's say this type is called derived\ngame\nstate or something like that and you\ndon't have to Define this here you could\nDefine it in this file itself and I\nwould actually say that that's probably\nthe better place for it because it's\nspecific to this file\nso let's actually get rid of types.ts\nand we'll open this same file twice just\nso we can edit it in different places\nand I'll usually throw types at the top\nof the file so derived game state\nand that is what\num or actually we don't want to call it\nthat we'll say\nderived stats is what we want to call it\nand now I'm going to assign the return\nvalue\nof stats to derive stats and as we see\nit right now\nlooks like\nnobody's complaining and that's because\nwe've defined this as an empty object\nbut let's say that we defined it as a\nstring now this is going to complain\nbecause our return type does not match\nthe explicitly annotated return type\nthat we had assigned it\nso now our job is to Define this\nand we can see that ties is an easy one\nthat's going to be a number\nso you can see that immediately we get\nthis feedback where this looks okay but\nplayer with stats does not\nso we can come up and say player with\nstats\nand you could just say any\nthat satisfies it but what does that get\nyou it doesn't really help you\nthroughout your code base because now\nanything can be passed here you don't\nget that explicit type checking\nso what we want to do is say that this\nis going to be a player array\nnow let's see it doesn't seem to be\ncomplaining about that because\nthis does satisfy player array it also\nhas this wins property so we need to\ndocument that too\nso really what we need to do\nis make another type\nthat is player with wins and that is\ngoing to be an intersection type or a\nunion type I should say\nand we can actually use this and symbol\nto add properties so we can say wins\nand that will be a number\nso now player with wins represents what\nwe're returning here\nand we can pass that in right here now\nif we would call this once again\num\nwin count now it's going to be mad\nbecause we're calling this wins here but\nour actual type is Win count\nso let's match this back up and now let\nme show you why explicitly uh making\nthese types is advantageous the first\nthing is if we go over to The View\ndot TS where we had originally\nreferenced these stats\nyou can see that we can now import the\nderived stats\nand we'll import that from the store\nso we no longer need this right here\nwe'll get rid of that entirely and then\nwe'll add a type annotation so we're\njust importing the types\nso now stats is derived stats and then\nlet's also say derived game this has not\nbeen defined yet but we can export that\nas derived game\nand then we'll import that from the\nstore\nnow it's complaining because we're\ntrying to destructure properties off of\nderived game which at the moment is just\nan empty object\nnow we know\nlooking at the store that what we're\nreturning from the game method\nis going to be the derived game\nand if we look at the return type here\nit has a array of moves\nso we can import that here\nit has a current player\nso we can assign it a player\nand then a status which is an object\nthat has\nwe've actually already defined that too\nso that is the game\nstatus from our types\nso remember if we go to types.ts\nwe had the move type already defined so\nwe just use that there we had the player\ntype right here so we defined it here\nand then we had the game status right\nhere which we passed to status so using\nthese types we composed a derived game\nwhich is returned\nfrom this game getter method we've\nexplicitly typed that as well\nand you can see winner is not\ncorrect here because I think we have a\nmismatch\nand I think I pointed this out earlier\nbut I\nI don't know let's see\nah so explicitly typing this actually\num exposed I believe a little problem\nhere it says player or null is not\nassignable to type player\num so we're allowing the winner to be\nequal to null\nso if we go to our original types\nand go to game status this should\nactually be player or null it should not\njust be player because if it's null that\nmeans we have a tie a tie game\nso that was something that we fixed by\nbeing more explicit which is a good\nthing and why you should always\nexplicitly you know Define your types\nwhere where appropriate\nso now it's not yelling at us for this\nanymore\nuh we're looking good let's see if that\nbroke anything elsewhere\nso now we have explicitly typed the\nrender method to pass in a derived game\nand derived stats\nand now the benefit of doing this if we\ncome back to store\nand we go back to this game method or\nlet's say stats\nearlier we were looking at Stats and we\nchanged a property on stats so remember\nwe previously had no explicit return\ntype so we just passed win count\njust like that and nothing highlighted\nhere so if I was a developer and this\nwas a big project and someone else had\nwritten this function\nit's not very clear to me\nwhat the contract of this function is\nhow it's being used outside or anything\nlike that so I could come in and change\nthis name to win count and not have any\nclue that that affected something in\nanother file until I compile it so if we\nexplicitly say derived stats now when we\nchange it it's going to complain because\nit the wins is declared here but we are\ncalling that win count so if we put that\nback to wins\nnow it's going to be happy and it gives\nus the assurance that we didn't break\nsomething elsewhere within our code base\nso having done these additional typings\nlet's close things out\nand run TSC\nand everything compiled and if we come\nback our game is working\njust fine so that's kind of the benefit\num kind of bringing this full circle got\nthe benefits of typescript I've\ndemonstrated a lot of this but really I\nhope that this video has given you a\nbrief introduction to typescript\num just giving you some practical\nexamples and kind of a code along\num to to get your feet wet with this and\nalso to kind of see how we can take a\nvanilla project and Port it over to\ntypescript and get that setup done so if\nyou like this video give it a like\nsubscribe to the channel and I will see\nyou in the next video which is going to\nbe the same project but we're going to\nbuild it in react so we're going to take\nthat vanilla JS and make it you know\ninto a react app and then eventually\nwe'll actually do another typescript\nrefactor where we'll take that react app\nand do this same process of typing\nthings so I'll see you in those next\ncouple videos in this video I'm going to\nbe rebuilding a vanilla JavaScript\napplication to a react application and\nthe purpose of this video is to show you\nhow you transition from that vanilla to\nreact and what problems react is\nbasically solving for you why you would\nwant to do this in the first place and\njust some basic introduction to you know\nbuilding with react in general the app\nthat we're going to be rebuilding is\nthis tic-tac-toe game and this is\nactually a game that I had created in a\nprior video and I'd shown you how to go\nfrom complete scratch nothing on paper\nto a fully working vanilla HTML CSS in\nJavaScript tic-tac-toe game so the first\nthing we're going to do is learn how to\nset up a react\nso what that means we're going to learn\nhow to take a vanilla react app so just\nregular JavaScript and set it up from\nscratch so from scratch let me zoom out\na little bit this step right here is\ngoing to take I think it's going to be\nlike over an hour so if you want to skip\nthat if you don't care how it's set up I\nwould highly suggest that you learn this\nif you haven't dug into it on your own\nbut if you already know how this all\nworks and you know what's going on under\nthe hood to set up react app you can\nskip this the next chapter is going to\nbe convert from JS to typescript so\nwe're going to take that react app and\nimplement it in typescript before we\neven write anything and the reason being\nis I just want to do this project in\ntypescript because it's you know just\nthe best best way to write a react app\nin my opinion just that you have strong\ntype safety and then finally we're going\nto take\nthe vanilla Javascript app\nand convert it to a react typescript app\nso I'm going to basically show you how\nyou take the ideas that we put together\nin that prior video that you should have\nwatched or at least gone over we take\nthat MVC model view controller pattern\nand we translate that to the paradigms\nthat react actually works with so you'll\nget to see how that translation looks\nand what problems react is trying to\nsolve for us so that'll be a really fun\nconversion that we'll be doing\nand I will just highlight that this\nconversion is not me walking you through\nhow to build step-by-step this app it's\nreally to just recognize those patterns\nwe're not going to be going through like\nokay now we're putting this element in\nand styling it adding this event\nlistener we're going to be doing a lot\nof lifting and shifting you know copy\npasting and reorganization so that's\nkind of what you should expect for this\nvideo let me be a abundantly clear from\nthe beginning if you are looking for a\nvideo that is going to hold your hand to\ncreate a react app from scratch this is\nnot the video to watch you should not be\nwatching this video\nI'll say this a couple times but if you\nreally want the best introduction to\nreact go to the new react docs and go to\nthe tic-tac-toe tutorial no relation\nnecessarily to the one that we're doing\nhere and go through this step by step\nand build this react app this is going\nto be the best and most straightforward\nway to learn that there are just a\ncouple prerequisites to this video\nnumber one and most importantly make\nsure you're familiar with the code base\nfor the tic-tac-toe game and the reason\nI say that is because I'm going to be\nglossing over a lot of the\nimplementation details in the logic of\nlike how the game works\nso if you haven't seen the prior videos\nwhich will be in the description as\nlinks\nor at least read through the code base\nto the point where you understand the\ncontrol flow\nand understand the goals of what we're\ndoing with this game right here so you\ncan play the game you can reset it you\ncan reset the scoreboard down here with\na new round it's a relatively simple\ngame but definitely need to understand\nwhat's going on\nso that's the first prerequisite then\nHTML CSS and JavaScript you need to be\nat least a basic Proficiency in them I\nhave a 21 hour course in the description\nthat you can go through if you need to\nget up to speed with that so go check\nthat out if you feel behind on those\nthree\nand then finally a basic understanding\nof react and understanding what jsx is\nin the first place you know the idea of\na functional component those basic\nconcepts and to do that I would go to\nthe react documentation and make sure\nthat you're on the beta react docs not\nthe old ones because this these\ndocumentation or this documentation is\nway better it was completely Rewritten\nover the course of like two years\nand they did an excellent job with this\nso I would actually go to the\ntic-tac-toe tutorial this is kind of\nfunny that this is the example that they\ngive and this is what we're building I\nactually did not mean to do that\nbut anyways go through this tic-tac-toe\ntutorial and just skim through it you\ndon't need to you know build it all from\nscratch but the goal here is to just get\na basic understanding because I'm not\ngoing to be going through all the like\nreally basic concepts like react props\nor component props and passing props\ndown that kind of stuff we're just going\nto kind of jump into things\nso that'll be great for you if you've\nalready kind of gone through the basics\nyou just need to see a real life example\nbuilt live and that way you know you can\njust follow along and try to pick things\nup as we go and when I say a basic\nunderstanding of react what does that\nactually mean well I would expect that\nanyone watching this video has can at\nleast get some sort of react App working\nthey understand you know what jsx is all\nabout so let's just write this down\nunderstand what jsx is you should\nunderstand\nwhat a prop\nis so this is just a property that you\nare passing to a component that that\ncomponent reads as part of their render\ncycle so\nthese are some pretty basic Bare Bones\nconcepts of react and then finally you\nshould understand what a functional\ncomponent is so just at a very basic\nlevel and in the react documentation\nmake sure that you're on the new beta or\nat least at the time of this video it's\nin beta but make sure you're on these\ndocs the new ones they're great they\nwere Rewritten over the course of two\nyears and lots of effort was put into to\nthis and they're just awesome so you can\nlearn a lot from this and I honestly\npart of the reason I'm not making a\nbeginner level react tutorial is because\nof these docs right here I think that\nthis is the best place to go learn how\nto build a react application and\nspecifically before you start in this\nvideo if you have no react experience I\nwould go to the Quick Start\nand at least skim through the tutorial\non building a tic-tac-toe game this is\nactually kind of ironic I did not mean\nto replicate the same thing as the react\ndocs I actually didn't know that this\nwas the example so that'll be good you\ncan kind of read through their\nimplementation and how they approach\nthis problem and then how I approached\nit in this video because I was not\nlooking at this when\nI originally built it so skim through\nthis build it if you want to can't hurt\nand most importantly go to thinking and\nreact and make sure that you've\nunderstood kind of the ideas here\nand then finally this will just help you\nalong the tutorial that we're doing here\nI would go down to managing state or\nactually let's see\nso adding interactivity and go to the\narticle or page that's called State a\ncomponents memory and just skim through\nthis just so that you have a basic\nunderstanding of the use State hook\nwhich is linked right here because we\nwill be using this throughout the video\nand it'll be good to just have a basic\nunderstanding of it now I could sit here\nand say go read this go read that but\nultimately we're gonna just jump into\nsome code and the best way to learn is\nto just do things so I will be sure to\npoint out different parts of this\ndocumentation as we approach those\nspecific Concepts within the build\nobviously you're welcome to read through\nany of this and I would recommend\nreading the entire react docs at some\npoint because it's just a good learning\nexperience but with that you don't want\nto waste any more time if you meet these\nprerequisites we will go ahead and get\nstarted okay so we're going to look at\nreact here and specifically where do we\nstart so as a beginner or honestly even\nas an intermediate level developer the\nquestion of where do you start when\nyou're building a react application is\nactually more valid than you might think\nseems like a silly question but there's\na lot of ways that you can start\nbuilding a react application you could\nstart as simple as just including a\nscript tag in your HTML and using react\nlike that you could even include Babel\nor Babel however you say that which\ntakes the jsx and turns it into\nJavaScript and you could use that all\nwithin the HTML document so\nif we went over to our our refactor here\nwhat I'm talking about is literally just\nputting scripts right here and you could\nserve react from a CDN and you have\nreact in your project so that's one\noption another option is you could use\nlike a code sandbox so if we went to\ncode sandbox and here you can go new\nfrom template and you've got these\ntemplates react typescript or react and\nif you click react it will just spin up\nreact application for you it's working\nand you can go ahead go ahead and add\nadditional things to it so hello again\nand you're already programming in react\nso this is probably the quickest way now\nyou could also go to things like as\nwhich is kind of a meta framework\nsitting around react you can go to\ncreate react app\nI'm not even going to go through all the\npossibilities just know that there's a\nlot of different options here and the\none that I'm going to choose is actually\nnot recommended by really any\ndocumentation that you would see if you\ngo to the react quick start it's going\nto give you an idea of where to\nstart so start a new react project and\nif you go down to this section it says\nif you're learning react we recommend\ncreate react app now the unfortunate\nthing about create react app and you\nknow other Alternatives that kind of\njust spin it up for you is that you\ndon't get to understand what's happening\nbehind the scenes you don't really\nunderstand what what react really is at\nits core so the approach that I'm going\nto take here is actually a lot more\nsimilar to how code sandbox sets this up\nso as you can see in code sandbox if you\ngo to index.js you'll see this file\nright here where we're actually creating\na root element in the Dom and then we're\nusing some react helper methods to\nbasically render that react application\nin the root element that we've specified\nfor react to use this gets us a lot\ncloser to what react is doing at its\ncore and so this is where I'm going to\nstart now you might notice over here in\nthe files pane I know this is kind of\nsmall let me make it bigger you're not\ngoing to see any sort of build tools\ngoing on so you're not going to see\nwebpack or anything like that it just\nworks and unfortunately this also makes\nan abstraction over react that makes you\nnot really understand what's going on so\nnot only are we going to start right\nhere at its most basic level we're also\ngoing to kind of spin up our own to\nbuild tools so that we understand how\nwe're taking the jsx\nconverting it to JavaScript bundling it\ninto one file and then including that in\nour index.html again the purpose of this\nvideo is primarily to show you how you\ntake a vanilla JavaScript application\nand Port that over to react and to show\nthe problems that react is solving for\nyou and to do that we need to basically\ndo everything from scratch so consider\nthis a learning opportunity not so much\nhey how do I most quickly get a react\napplication working furthermore the\napproach we're going to take in this\nvideo is not what I would recommend you\nuse to create a production ready app\nthat you're gonna you know deploy and\nwork on with a ton of people this is\nkind of the most minimal setup that you\ncould possibly have and is great for\nsmaller projects some people would\nprobably disagree but I think next.js is\nprobably your best bet in terms of a\nproduction ready react framework this is\nbasically a react meta framework that\ntakes a lot of the common things that\nyou might have to do in react such as\nlike managing images and routing and all\nthat kind of stuff different rendering\nmethods and it just comes out of the box\nready to go so this is what I would\ncheck out if you're wanting to build\nsomething in production anyways not\ngoing to get too distracted there let's\nget started building our react app so\nthe first step with any project is to\nset up the initial you know\nindex.html and get it working in\ndevelopment development mode so that you\ncan basically just go over to the\nbrowser and anytime the code changes it\nwill update the application so that is\nthe first step and the way that we'll do\nthat with react is let's go ahead and\ncreate a new folder called live react\nrefactor and then our folder structure\nhere is going to be the public folder\nwhich is going to have like public\nstatic assets that will serve\nand then we'll also have an SRC or\nSource folder this is where our react\napplication and components are going to\ngo\nso in the public folder this is actually\nwhere the index.html file is going to go\nbecause this is a static file there's\nreally nothing Dynamic about HTML so we\ncan just serve that directly so let's go\nahead and just copy that we'll go back\nto the vanilla refactor once again you\nshould be familiar with this before\nwatching this video so we'll copy\nindex.html and we will paste it over to\nthe public directory now with react we\nare building things with different\nparadigms we are not including all of\nthis HTML in this index file\nwe're going to be creating components to\ndeal with this HTML so therefore we can\nactually strip a lot of this stuff out\nso let's take pretty much all of the\nbody content\nand delete it the second thing that\nwe're going to do is change the title\nthis is going to be the react refactor\nand then just for the moment we're going\nto comment out the script\nand save this we'll put a little text in\nhere hello world\nso this should be a basic HTML document\nnow you'll see in the bottom right\ncorner I'm using live server so I talked\nabout this in Prior videos it's a vs\ncode extension that you can set up it's\nrunning on Port 5500 and that's actually\nwhat we're looking at here with the\nvanilla refactor but if we go back to\nthe base of this you'll see that we now\ncan look at the live react refactor\nand go to the public directory and now\nwe have a Hello World document now if we\nwanted to connect some styles to this\nyou can see we have this style sheet\nleft over from the previous project but\nit is referencing the CSS directory\nindex.css now for this react refactor\nI'm going to name this something a\nlittle differently we're going to put a\nnew file in here called\nglobals.css and the reason that I call\nit globals is because with react we're\nable to kind of scope our CSS per\ncomponent rather than per the whole\nproject and so this is just a naming\nconvention that I'm using to make it\nexplicit that anything that we put in\nglobal CSS is going to apply to\neverything that we use in every\ncomponent that we make and that's\nbecause we're putting it in the\nindex.html to start us out I'm going to\ngo to the vanilla refactor and just copy\neverything from that index.css and paste\nit here\nand we will eventually move some of this\nstuff out of this globals file into\ncomponent specific CSS files but for now\nit's just going to all be there and now\nwe have to update our path and this is\ngoing to be\nglobals.css and if we save this and go\nback to the browser you can see that\nhere's our hello world pretty small\nthere but then we also have the correct\nbackground color so we know that the CSS\nfile is connected now if we're just\nlooking at this document this is not a\nreact application yet there's nothing\nhere that tells us that this is react\nin order to actually convert this to a\nreact application we need the JavaScript\nto be controlled by react and therefore\nwe need a script tag\nso what we're going to do is create\nsomething called an entry point you\nmight see this called\nindex.js or\nyou know entry point or it could be\nnamed pretty much whatever but in our\nsource folder I'm going to be very\nexplicit and just call this\nentrypoint.js and in this file this is\nwhere we're going to initialize react\nnow going back to the code sandbox that\nI had shown you a little bit earlier you\ncan see this pattern right here where\nthe code sandbox is basically importing\nreact and importing the react Dom client\nand then doing something you can\nactually find this in the react\ndocumentation if you go to add react to\na website and then I think at the bottom\nrun the jss jsx preprocessor let's see\nso somewhere right here you can see\nwhere it's you know calling create root\nand then root dot render it's not really\ncalled out explicitly which is a little\nbit unfortunate but it kind of shows you\nhow you know you might know to do this\nbut anyways we're going to write this\nout in our file so the first thing that\nwe'll do is we will import the strict\nmode for react and the reason we'll do\nthis is because it basically parses\nthrough your code and it finds all sorts\nof mistakes that you might make when\nwriting a react application it's just a\ngood practice to get into to have that\nin strict mode\nbut you might say well how are we\nimporting from react when we don't even\nhave that included in our index.html or\nnode modules and the answer is we're\nreally not if we tried this it's going\nto break so at this point we're going to\ninstall some dependencies for our\nproject so let's CD into the live react\nrefactor\nthen I'm going to run yarn init Dash y\nto accept all the defaults\nthis will save a package Json to our our\nfolder here\nnow what I'm going to do is add the\nrequired react dependencies so really\nthe only things that you need from react\nyarn add react and then react Dom\nso let's go ahead and add those you'll\nsee those populate in our dependencies\nthis is all we need to create a react\napplication\nso now we can go back to our entry point\nand this should work okay now we need to\nimport the create root method\nand this will be from react Dom slash\nclient and now here is where we\nbasically insert react into our HTML\ndocument remember react is just a bunch\nof JavaScript that knows how to\nbasically manipulate the Dom and render\nthings\nit doesn't actually you know create HTML\nfiles for you\nyou have to have an index.html to put it\nin so what we'll do is we will Define a\nroot element\nand this is going to be a element that\nwe select from the Dom so if you\nremember from our vanilla refactor if we\ngo to the JS and go to view.js where we\nare selecting all of these elements via\nthe query selector\nand then we're in the query selector\nwe're basically just looking at the\ndocument and selecting an element well\nwe're going to do the same exact thing\nhere we're going to say document\ndot get element by ID this is the same\nas doing query selector with a hashtag\nin front to select an ID it's just a\nlittle bit more specific\nif you have an ID assigned to an element\nso we're going to get an element by ID\nand we're going to call this the react\nroot now where did I get this name well\nI made it up and we're going to connect\nit here over in the body so what you\nneed to do is make a div\nand then you're going to give it an ID\nand call it react root\nso what this is doing is it's saying hey\nhere's a container div now react find\nthis container div and put all of your\napplication code right here inside of it\nso basically we're giving it a container\nto render into\nand at this point we've just selected\nthe root element this is just going to\nbe an element now we have to create the\nreact root so we'll call that root and\nwe will call the create root function\nthat we imported from the react Dom\nclient\nand we're going to pass in that root\nelement that we had selected so that is\nthe react root and then finally we can\nnow call a react Dom specific method\ncalled render\nand what we're going to render is a\nstrict mode container\nso now we're using jsx and we're going\nto render strict mode and then we're\ngoing to say hello\nWorld react\nand this is just arbitrary jsx code\nnow what you might notice is that this\nis a DOT JS file we could call this dot\njsx because we're using jsx in here and\nthen we'll get JavaScript react down\nhere in the vs code language mode so it\nwill just give us some better syntax\nhighlight highlighting in addition to\nthat when we go to basically transpile\nthese from jsx to JS this file extension\nwill allow us to kind of Target this\nfile to do that for so let's save this\nentry point\nnow let's go to index.html we will for\nnow keep this script out of here and\nsave this at this point you might say\nwell okay all right we're done with the\ninitial setup for react we've got this\nreact root div and then we've got this\nentry point.jsx which is selecting it\nand rendering the react application\nwithin it but if we were to go to the\nindex.html in the browser\nso our live refactor and let's inspect\nthis\nif you inspect this it's just going to\nshow you the react root but there's not\ngoing to be anything within it and this\nmakes sense if you really think about it\nbecause what's happening when we re\nrequest this right here from like some\nserver in this case our local computer\nis the server that is serving that\nindex.html file to the browser\nbut basically what's going to happen is\nthe browser is going to load some path\nand that path is going to make a get\nrequest to some server the server is\ngoing to send back an index.html\ndocument\nthen what the browser is going to do is\nit's going to read through the document\nand it's going to parse through all of\nthe HTML and it's going to also parse\nthrough any script tag that it sees you\ncan see that we've got a script tag here\nbut that's just injected by live server\nthat's not anything to do with the\napplication that we've built so what's\nmissing well as you can see in our HTML\ndocument aside from this live server\nscript we don't have any script so this\ncode that we wrote in the entry\npoint.jsx\nthis is just living in isolation right\nnow it's not actually imported and run\nwithin our index.html document yet and\nso therefore it has no way to select\nthat route and render anything so your\nnext option your next guess might be\nokay let's just uncomment this script\nscript and then we'll go to the source\nslash entry point\ndot jsx all right so we're trying to\nimport that script but if we go to the\nbrowser that's obviously not going to\nwork if you go to the console you're\ngoing to get loading module from blah\nblah because the mime type was wrong\nthere's just going to be all sorts of\nproblems here and the reason is because\na jsx file one that has actual jsx in it\nis not going to natively run inside the\nbrowser you might get this stuff to run\nwe could probably see if that worked so\nlet's console log the root element looks\nlike even that's not going to work and I\ndon't really care to debug that because\nwe know that this is just not a good\nstrategy in the first place so pause the\nvideo and just ask yourself if we can't\ndo this then what can we do how do we\nactually get that JavaScript to run\ninside the browser in a script tag and\nthe answer is that we need to transform\nthe code that we have written the jsx\ncode into vanilla JavaScript script and\nthen put that into another file and then\nimport that other file right here if you\nwatch the prior video also linked in the\ndescription where we took the vanilla\nJavaScript build and we refactored it to\ntypescript you might remember that we\nhad some sort of build step where we had\nto take the typescript code that was not\nvalid in the browser and we had to\ncompile that with the typescript\ncompiler into valid JavaScript that we\ncould run in the browser this is no\ndifferent what we have to do here is we\nhave to\nnot necessarily compile I think the\ncorrect term here is to transpile so\nlet's actually go look that up so\ntranspile versus compile\nI should know this so compiling is the\nprocess of taking the source code\nwritten in one language and transforming\nit to another transpiling is the process\nof taking source code written in one\nlanguage and transforming it into\nanother language that has a similar\nlevel of abstraction so in other words\nit's not a real huge difference and we\ndon't need to get hung up on the the\ndifferences there but what I want to\ntake you to now is a website\nsome documentation for Babel or Babel I\nnever know how to say this and on the\nhome page if we just zoom in a little\nbit\nwhat you'll see is that it gives you an\nexample of how you put in some Next\nGeneration JavaScript and then you get\nbrowser compatible JavaScript out in\nother words Babble I'm just going to go\nwith Babel is a tool that will take some\nsort of JavaScript some a flavor of it\nthat doesn't work in a browser and make\nit work in a browser one of those things\nthat it can do is jsx so if we come down\nto the presets this is just the the\nplayground you can see that it's using\nthe react preset so it knows you know\nthat we can write jsx code and if we\nwere to write you know something like\njust a regular P tag\nhello world and then close that P tag\noff what you'll see on the right\nis that it's using the react library to\ncreate a new element in the Dom and then\nrender the hello world text within it\nwe could also wrap this in say a div\nso we're just writing what looks like\nHTML but really this is jsx\nso now we're creating elements and we\ncould probably I think in this\nplayground even write a component so\nthis will be a function component and\ninstead of just this isolated jsx we\nwill return that from the function\nand oops\nformat this a little bit better so you\ncan see that worked and it's returning a\nJavaScript function that returns these\ncreate element calls and then we could\neven render that so let's make our app\nand then we want to return\nthe component as a jsx component and now\nyou can see that all of this is going to\nbe valid JavaScript so this is just a\nDOT JS file that we could include in\nthat index.html file so this right here\nis totally valid to put in this script\ntag\nthis right here is not valid and it will\nnot work now Babel under the hood is\nrunning a bunch of code against this to\nget it to this state and therefore we're\ngoing to need some intermediate step to\nget it to this point now once again just\nlike there's many ways to create a react\napplication there's also many ways to\ntranspile code and Babel is not your\nonly option\nanother option is you could use if\nyou're writing this in typescript which\nhint we are actually going to convert\nthis to typescript in just a few minutes\nyou could use the typescript compiler to\ndo this because the typescript compiler\nactually supports jsx you could use\nBabel and you could also use something\nlike webpack which is a build tool so\nthat's what we're going to do I know\nit's not it this is not the latest and\ngreatest tool chain this is mainly for\neducational purposes but if we go to\nsome more documentation let's go to\nwebpack docs and now we're dealing with\na bundler so it does more than just\nbundle code but the purpose of using\nwebpack is to take a bunch of different\nJavaScript files and squash them into\none Javascript file that we call a\nbundle if you really want to understand\nwhy we need a bundler\nI've written a post that I've referenced\na couple times at this point throughout\nthis video series and it's the Scripps\nversus common JS UMD AMD es6 modules and\nif you come down to the bottom let's see\nso the last step module bundlers this is\nwhere I go through and explain why do we\nneed a module bundler in the first place\nso I'd recommend reading this short post\njust to get a better understanding there\nbut our goal is to basically take this\nentry point jsx file\nand then we're going to have many many\nother jsx files that will have all our\ndifferent components and instead of\ncoming to index.html and copying this\ndown and importing every single script\nthat's been transpiled from jsx to JS\nthis is going to get very confusing\nour goal is to just do this we're going\nto have one file and it's going to come\nfrom the public directory and it's going\nto be called\nbundle.js and we don't need the type\nmodule anymore because we're using react\ncode and we don't need to worry about\nthat but this is our end State and I\nactually need to update this because\nremember\nindex.html is actually in the public\ndirectory so we just need to reference\nit relatively so the bundle.js will be\noutput keyword output it's not created\nyet into this public folder and will sit\nnext to globals.css and\nindex.html so the question becomes how\ndo we get it there how do we get this\nbundle.js to compile into the public\nfolder the answer is webpack or\nsomething similar once again this has\nkind of gone a little bit out of style\nbut that doesn't matter our purposes\nhere are educational to understand\nwhat's going on under the hood of react\nwhen we set it up in the first place and\nyou'll hear all sorts of things like oh\nwebpacks so outdated but ultimately tons\nof projects are still highly dependent\non this and will be for many years to\ncome so don't get spooked by you know\nanyone saying that this is irrelevant\nthis is very relevant and the concepts\nthat we'll learn through it are even\nmore relevant so let's get started\nthere's a lot to this documentation lots\nof different configuration Concepts and\nI'm not going to go through these\nbecause you really don't need 90 of this\nfor our purposes so what I will do is\njust start writing the configuration and\nwe'll come back to the documentation to\npoint out the individual options that\nwe're using\nso in order to start a webpack a project\nwe need to initialize it with a\nconfiguration file now if you go to the\ndocumentation there should be something\nabout the configuration here\nso introductory configuration and you\ncan see it's called\nwebpack.config.js so let's just copy\nthis let's copy that default and we will\nmake in the base of our directory a\nwebpack.config.js file\nand let's just copy that basic example\nin there now bear with me a little bit\nfor the next couple minutes this is\ngoing to get slightly confusing and\nyou're welcome to skip over this section\nif you want I have time for this video\nso if you want to skip over these\ndetails and just get started building\nthe react application you can do so but\nI would highly recommend going through\nthis section it's really a good thing to\nunderstand what's going on here and\nwe'll serve you for the rest of you know\nyour developer lifetime just\nunderstanding this stuff you probably\nwon't have to touch it again but it's\ngood to just know what's going on under\nthe hood so let's take this line by line\nfirst off the mode this is in\ndevelopment and if you go to the\nconcepts\nlet's go to environment and right here\nit says the mode is an option that can\nbe development production or none and\nthis is going to enable certain\noptimizations that are done in\nproduction so webpack will do certain\nthings I believe it's like like\nminifying the code and stuff like that\ndepending on your environment so we are\nin development what we can do to make\nsure that this runs depending on our\nactual environment let's say that we\nwere deploying this somewhere what we\nknow is that the\nprocess.env.node EnV is going to equal\nproduction when we deploy it on some\nserver this is just a default that you\nknow any deployment site or Cloud host\nis going to assign so if there is a\nprocess node EnV we're going to use that\notherwise we're going to use development\nso in other words development is our\nfallback but we're going to look at the\nnode EnV to determine\nwhat to use for this mode now this of\ncourse assumes that you're only allowed\nto assign development or production to\nnode EnV if you were you know had like a\nstaging environment then this wouldn't\nwork but\nmost of the time it's either production\nor development so this should work now\nour entry this is a little\nself-explanatory so we don't need to go\nto the docs for this this is going to be\nthe file that webpack will start from it\nwill start reading that file and then it\nwill Trace all of the Imports that have\ncome into that file and kind of just\nwalk down the code tree to find all the\nrelevant files that it needs to\nbasically bundle up so in our case\nentrypoint.jsx is going to be that\nand we are in the root of our folder so\nwe need to look in the source folder\nentry point jsx so we'll say relative to\nsource\nentrypoint.jsx\nthat's going to be our entry point and\nthen output is also somewhat\nself-explanatory it's going to Output a\nsingle file we're going to call this\njust\nbundle.js and it's going to put it into\nthe dist director now we're going to\njust rename this instead of dist which\nis stands for distribution and it's a\nvery common place to Output your your\nbuild output we'll just call this public\nand the reason being is we've got this\npublic folder and what we want is that\nbundle.js file to get output to public\nnow some would argue that you kind of\nwant to separate these concerns and\nmaybe you want to Output this to dist\nand then copy over your index.html and\nCSS to dist so that it's all kind of\nisolated into this you know build output\nbut for our project it's pretty simple\nthis makes sense and we can just output\nthis to the public directory so let's\nsave this we will save entry point and\nnow the question becomes well how do we\nactually use webpack well you could\ninstall webpack globally in your path or\nbetter than that you can install webpack\npin it to a specific version for this\nproject that's what we're going to do\nwe're going to say yarn add then we're\ngoing to add a Dash D because this is a\ndevelopment dependency remember webpack\nis just here to look at all of our code\nand bundle it up into something that can\nactually run in the browser we don't\nneed it after it has done its job we can\njust run the code that output and not\ndeal with anything else so what we can\ndo is just add webpack so\ngo ahead and do that and now what I'm\ngoing to do is go to package Json and\nwe're going to add some Scripts not\nnecessary but it's just convenience here\nand something that I want to add is a\nbuild script so this will run when we\nsay yarn build\nis it's going to run this script right\nhere and what I want it to do is look in\nthe development dependencies and just\nrun webpack so we'll save that and now\nwhat's going to happen if we run yarn\nbuild\nso yarn build it's going to invoke the\nwebpack binary that we just installed\nand webpack automatically knows to look\nfor the\nwebpack.config.js file in the root\ndirectory and then this config has\nbasically told the the binary to look at\nthis entry point\nread through all the code and output it\nto this bundle.js but if we were to run\nthis we really haven't given it any\ninstructions as to like how to do this\nso let's just try to run yarn build and\nit's saying that we need to install the\nwebpack client I guess I had forgotten\nto do that so we'll say yes that's going\nto actually update our package Json you\ncan see that here in Dev dependencies\nor I'm sorry we're in the final one\nthere\nlive react refactor\nso now we have webpack and webpack\nclient\nso at this point we run yarn build and\nyou can see that we're going to get an\nair of some sort and it says module\nparse failed unexpected token you may\nneed an appropriate loader to handle\nthis file type currently no loaders are\nconfigured to process this file\nand what it's complaining about is this\njsx that we have written\nso if we go to entry point by default\nwebpack does not know how to deal with\njsx it doesn't know how to transpile\nthis right here\nand this is where Babel will come in so\ngoing back to Babel we talked about how\nits job is to take this code and turn it\ninto this code and so therefore we need\nto add something called a loader to\nwebpack so if we go to the documentation\nthere it says loaders are\ntransformations that are applied to the\nsource code of a module they allow you\nto pre-process files as you import or\nload them so I'm going to save us quite\na bit of pain here and I'm just going to\nshow you how to get this working with\nreact I'll be completely honest this is\nconfusing stuff I would not spend a\nwhole lot of time beating your head\nagainst the wall to try to understand it\nat a super deep level the overall goal\nhere is to just understand the process\nthat our code is going through not\nnecessarily all of these implementation\ndetails so what we need to do is add a\nmodule property and this module is a\nvalid on the config\nand then we'll say rules and then we\ngive it an array of rules now each of\nthese rules is going to basically say\nlike hey once you see this certain type\nof file in you know coming from the\nentry point here's how you actually you\nknow look at it and transpile it and\nbundle it so the first rule that we're\ngoing to do is we're going to test so\nthis is going to be a regular expression\nthat we're handing it and we're going to\nsay if you see any file that has a jsx\nextension at the end of it then go ahead\nand apply this rule\nbut\nif you see anything in node modules\nexclude it because we don't want to put\nthat into our bundle and then finally\nhere's where we're going to use a\nspecific loader\nand that loader is going to be called\nthe Babel loader okay so right here\nwe're importing something that's\nexternal so we need to install that as a\nDev dependency if you go to Babel let's\nwe're getting\ngot a lot of tabs open here at this\npoint let's open one more\nso Babble docs and then let's just go\ndown if you go to presets you can see\nthere's a preset for react and it gives\nyou all this really confusing stuff okay\nso here we get a list of all the\ndifferent loaders that we can use so\nlet's start with the babble loader so we\nclick on that\nand it says disclaimer it's a\nthird-party package maintained by\ncommunity members\nso this will need to be installed and\nhere's the install command you need to\ninstall the babble loader Babble core\nand preset now I also happen to know\nthat if we go to the preset react we'll\nneed this as well so we're going to just\nkind of combine all this into one\ncommand\nso we will\nclear the terminal here and then these\nare all going to be developer\ndependencies remember because we're just\ntranspiling code\nso we need to grab the Babel loader so\nthat's for webpack then we're going to\ngrab Babel specific packages so we need\nthe core module\nwe need the preset M this is basically\nto just kind of normalize all the\ndifferent ecmascript versions and\nwhatnot so that we can run JavaScript in\nall browsers\nand then finally Babel preset react\nso we'll install all of those and we go\nto our package Json\nyou'll see that they're all added right\nthere and now we can come back to our\nwebpack config\nand this is going to work because we\nhave that installed\nand then we'll give it some options now\nthis I'm not going to go into a lot of\ndepth because it's more on the advanced\nside and we'll just assume that this is\ngoing to work so what we first need to\ngive it as a preset is the Babel preset\nM and once again this is just to make\nsure that you know all the different\nversions of ecmascript so ES3 456 2016\nblah blah all of those it kind of\nnormalizes it so that the JS that is\nloaded is going to work in all browsers\nand then we're going to give it an array\nwhere we give it the Babel or Babel\npreset react\nand then this is really important we\nneed to give it a run time of automatic\nand the reason that we need that is\nbecause when we come to entry point over\nhere we are going to need that so that\nit automatically infers that react is\npart of this application and we don't\nhave to explicitly import react every\ntime we want to use it so that's the\nloader that we've set up I know that\nthis whole blob is a a bit confusing but\njust zooming out the point of this is\nsaying like hey anytime you see a jsx\nfile that came you know as a result of\nlooking in entry point\nso in other words anytime you see a jsx\nfile in our project go ahead and use the\nbabble loader and make sure you use the\npreset react which is basically what we\nwere looking at here in this sandbox so\nthat it takes this and creates this out\nof it\nso now\nwe might be able to build our apps so\nyarn build remember that's going to run\nour webpack script and you can see that\nwe got no errors so that's a good thing\nnow we're not 100 sure that this worked\nyet but you can see in the public folder\nwe now have a bundle.js and it's a bunch\nof ugly code that has been you know\ntranspiled and this is not something\nthat you want to actually read through\nbefore we get any further let's add a\nDOT get ignore to our project because\nwe've added some developer dependencies\nand build output and all that stuff does\nnot belong in source code so first let's\nlook for node modules and ignore that\nand then I'm going to do this but this\nis probably not a best practice in any\nway we're going to look in the public\ndirectory and ignore anything called\nbundle.js and that's just because if you\nlook at this this is a lot of gibberish\nthat doesn't not belong in Source\ncontrol this is an output of a build\nand that includes pretty much the whole\nreact library in it so we do not want to\nput that in our GitHub repository so\nwe'll ignore that let's make sure that\nthat is working so we should not see any\nbundle.js sorry there's actually some\nleftover code from my typescript\nrefactor from the prior video but the\nthe main point is there's no bundle.js\nand if you look in Visual Studio code\nwhen it's ignored it's actually grayed\nout a little bit compared to the other\nfiles and folders so that's just a quick\ntrick to know whether your your file's\nbeen ignored correct so the ultimate\ntest is if we visit this index.html\nwhich is importing the bundle.js that we\njust output\nusing entry point as the source does it\nwork so let's go to the browser we can\nclose this out I'll leave it open just\nso that we have reference to it\nand now you can see right here I gotta\nzoom in a bunch hello worldreact so\nsomething worked here because if you\nlook at entry point you can see that\nthat's where we're rendering the hello\nworld react and so we know that our\nwebpack config worked and we are able to\nrender jsx in our browser\nand if we go ahead and inspect this now\nyou can see in the react root that's\nwhere that P tag has been added but\nthere is one problem still and that is\nif we go back to our code\nand we say\nby Zach or something like that and then\nwe save this\nentrypoint.jsx well let's refresh the\npage and uh oh it's not actually working\nand the reason being is because every\ntime we want to add something we need to\nrebuild the application so we need to\nrun yarn build again\nthat's going to compile everything and\nbundle it up and now you'll see Hello\nWorld by Zach\nobviously this is a poor experience as a\ndeveloper we do not want this to\nyou know we don't want to have to come\nand say yarn build every time we make a\nchange\nso this is where the webpack dev server\ncomes in and that is basically going to\nlook at your webpack config and on any\nchange to any file that is included\nthere it's going to rerun this build\nstep and output it to the bundle which\nis then going to be served to index.html\nand believe it or not this didn't used\nto be this easy but now you can\nbasically just add one extra command\nhere\nso instead of build we're going to give\na Dev command which is our development\nonly command and we're going to say\nwebpacks serve and while we're here I'm\nalso going to add a build production\nscript and you know how we talked about\nover in the config we've got this\nprocess node EnV if we want to build it\nto production we could just pass\nsomething like this so set the\nenvironment variable and then call\nwebpack\nso if we ran yarn build prod it's going\nto just apply some optimizations to\neverything and if we look at the\nbundle.js you'll also see that there's a\nlicense emitted here that would probably\nbe\ngood to include so let's let's go ahead\nand just say bundle all\nand that will include the license as\nwell but if you look at this now it's\noptimized where like everything is\nminified it's all you know squashed\ntogether which makes it a smaller bundle\nto load over the wire over an HTTP\nrequest so yarn build is going to create\nsomething with lots of spaces and it's\nnot optimized and then yarn build prod\nis going to optimize that but anyways we\nwant to run this in development mode so\nlet's run yarn Dev which is going to run\nthe webpack serve command and this is\ngoing to say for using this command we\nneed the webpack dev server package so\nwe'll accept that you'll see that that\nwas added down here at the bottom and\nnow you can see that it's a running\nprocess that is just waiting for changes\nso we'll go back to our our index.html\nyou can see Hello World by Zach and then\nif we go to the entry point jsx let's\nremove that and save it you'll see that\nthis just refreshed Reloaded\nand if we refresh this page it's not\ndoing anything ah so I am just not\nthinking whatsoever and totally totally\nmessed this up so if we try to go\ndirectly to index.html in the browser\nand we are running this over live server\nso localhost 5500 we're just going to\nget the static contents of the public\ndirectory now if we look at the output\nof the webpack dev server it says that\nthe project is running at localhost\n8080. so we can kill the live server at\nthis point so we'll close that server\nnow if you reload this page we got it\nway zoomed in\nbut if you reload this page it's going\nto say unable to connect but if we go to\nlocalhost 8080\nnow you'll see here's our hello world\nreact is working again and then if we go\nback and make a change\nand save that it's going to hot reload\nand update in the browser automatically\nso the mistake I made I just I was\ntrying to look at the static contents\nfrom live server we need to go to a\ndifferent port here the next step here\nis to replace this content with our app\nso we can come over to our files and\nnext to entry point let's call it\napp.jsx\nand this is just going to return a basic\napplication wrapper that we're just\ngoing to consolidate all of that logic\nto we can go ahead and use es6 modules\nso we'll export a default function\ncalled app\nand then this will return some div and\nthen say my app\nnow we can import that into the entry\npoint\nso import app from app\nand then replace this content with the\njsx element just like that\nand we're getting an error I think we\nmight need to say app.jsx\nyep that's all we needed to do it\ncouldn't resolve that without the\nextension and I believe that happens\nbecause our webpack config doesn't know\nhow to kind of parse through and import\nthat if we don't have the extension on\nit so now\nthis entry point is basically done we\ndon't have to look at this anymore\nbecause it's all set up and now we're\ngoing to be working from this app.jsx so\nlet's go make sure that it works my app\nnow let's connect some per component\nstyles\nso we're going to use just vanilla CSS\nand one way that we can do that is by\nusing CSS modules so we can say app.css\nand let's go ahead and select everything\nin this app and make it the color red\nso this is not going to work by default\nif we just look at our app but all we\nhave to do is import\nand then we just import the app.css now\nyou'll see that there's some errors down\nhere and we're not able to compile and\nthat is because we have not specified a\nCSS loader right now we're in we have an\nentry point of this which is going to\neventually make it to app.jsx then it's\ngoing to import\napp.css but we don't have any rule for\nthat right now we're only looking for\njsx files so if we go back to the\ndocumentation for webpack right here and\nwe go back to loaders\nyou'll see that there's some different\ndifferent categories and one of them is\nstyling so we have the style loader add\nexports of a module as style to adopt to\nthe Dom or css loader load CSS file with\nresolved Imports in return CSS code\nwe're going to need both of these and\nthese are third-party packages so we'll\nhave to install them\nso let's come down to our terminal open\nup another one actually we'll let's just\ncut this cut the server for now\nand we'll add\nthis as a developer dependency we'll\ncall it we got to get the style loader\nand the CSS loader\nonce we've done that we can add another\nrule so remember rules is going to be an\narray and we can specify a CSS rule so\nhere we're going to test and look for\nany dot CSS files\nso that's what we're looking for and if\nwe find them we're going to use the\nstyle loader and the CSS\nloader\nso let's save that that's our final rule\nthat we'll add\nand let's run yarn Dev\nand now you'll see everything compiled\nsuccessfully and if we go back to the\nreact refactor in refresh we had to\nrefresh that first time because we had\nrestarted the server so it's red and now\nif we change this\nto Green it's going to hot reload and\neverything is going to be green\nso at this point we have our entire\nwebpack configuration done we have our\nentry point to the react app setup and\nour index.html is importing that bundle\nthat we are you know basically\ncompiling and bundling together with the\nhelp of webpack and Babel I know we've\nspent a solid amount of time just\nsetting up this react app in the first\nplace but I hope that it has been\neducational and given you a better sense\nof what's going on under the hood this\nis basically what the create react app\nand all of the other you know Frameworks\nthat lets you set up a react app they're\nall doing some version of this under the\nhood but that's abstracted away from you\nand so oftentimes you don't understand\nwhat react actually is at its core level\nso there's one more thing that we're\ngoing to do and I kind of debated this a\nlittle bit but I want to build this\nreact app with typescript rather than\nyou know doing a whole another\nadditional video where we refactor it to\ntypescript I think using typescript is\nreally awesome especially with react\napps and across the stack and it's not\ngoing to be too difficult to translate\nwhat we have here to typescript and it\nwill also give you a better idea of how\nwe translate vanilla to typescript from\na build step perspective if you're not\ninterested in this and you just can't\nwait to get started once again\ntimestamps are in this video skip to the\nbuild where we actually start building\nout this application and you know\ntranslating it from that vanilla\nJavaScript to react so let's cut this\nserver and I will also add that there is\na typescript branch and then a main\nbranch for the repository in the\ndescription that follows and basically\nhas all the final code here this is a\ncombined video so you can find the\nvanilla JavaScript react app in the main\nbranch and then the one that we're\nbuilding in this video will end up in\nthe typescript branch so I'll leave that\nin the description and kind of label it\nso that it's clear so if you haven't\nwatched the prior video where I\nconverted a vanilla Javascript app to a\nbasically vanilla typescript app go\nwatch that because it will cover a lot\nof the basic concepts that I'm going to\ngloss over in the next few minutes\nso I'll leave that in this the\ndescription but the first thing we need\nto do is install typescript so we'll add\nthat as a developer dependency\nonce we have that then we can run yarn\nTSC which is the compiler and we can run\ninit\nthis will create a TS config although\nI missed something here it's not a knit\nit is dash dash init\nso that creates a tsconfig DOT Json\nfile\nnow there's all these different options\nhere I'm going to go ahead and just copy\nthe final one just because it's going to\nsave us some time okay so this is the\nbasics\num the things that I'll point out here\nthis is pretty much the same as that\nprior video that we did but just to\npoint out we're targeting es6 so that's\nthe version of JavaScript that the build\noutput will be and there's one thing\nthat I've left out on purpose here and\nthat is a property called jsx so let's\ngo to the typescript documentation\nso typescript\nand then docs and then go to the\nreference for the configuration file so\nI'm not really sure where this would be\ntypescript tooling\nreference let's just search it config\nwriting a configuration file gosh this\nis very indirect I want to just go to\nthe reference for this\nlet's go typescript config reference\nnot sure why that's not searchable\neasier but maybe I'm doing something\nwrong so anyways let's look at the let's\nfind that jsx property that we had just\ntalked about so that's down in language\nand environment so jsx\nand it says controls how jss jsx\nconstruct constructs are emitted in\nJavaScript files This only affects\noutput of JS files that started in TSX\nfiles so we have a couple of options\nhere we have react react.jsx jsx Dev\npreserve and Native this preserve option\nwould be good if we were wanting to\nbasically compile our typescript to\nJavaScript but leave the jsx as it was\nand then use Babel to take jsx and\nconvert it to JS now for this simple of\na project we don't really need all that\nin direction we can just use react jsx\nand get all of that to happen for us\nso let's give it to the jsx pro property\nand we'll pass in react jsx and so now\nthe typescript compiler is not only\ngoing to look at our typescript and\nconvert it to JavaScript it's also going\nto recognize jsx and convert that to\nJavaScript so it's kind of an all-in-one\nsolution which means that we can remove\nall of the Babel stuff that we had just\nadded that was good to understand you\nknow how you would do something with a\nvanilla application but if you're using\ntypescript we can remove a lot of this\ncomplexity so instead of using all of\nthis Babble stuff we're going to use the\nTS loader and if we and we're also going\nto need to change this to TSX so it only\nsearches for TSX files finally we'll\nneed to update all our file extensions\nto TSX so that it knows to grab those\nwe'll come back to these errors in a\nsecond those are type errors that we're\ngetting let's just save this for now so\nnow we have all TSX files and let's go\nback to this TS loader if we find this\nin the loaders\nit's right here for transpiling it says\nit loads typescript 2.0 like JavaScript\nso this is also going to be an external\none I believe so we'll need to install\nit so let's open up our terminal here\nand look at our package Json right now\nwe've got all these Dev dependencies we\nhave Babel core preset M you know all of\nthese Babel stuff and we don't really\nneed it anymore because typescript has\ntaken over the typescript compiler is\ntaken over and done all of that job in\naddition to compiling typescript for us\nso we can yarn remove all of that stuff\nI'm just gonna take a little shortcut\nand just delete all that\nwe still need the CSS and style loader\nand then we of course need webpack\nbecause we're still using that so let me\nsave that and just yarn install\nso that's gonna refresh everything and\nthen let's go ahead and add a developer\ndependency called TS loader\nso now we have the CSS style in TS\nloaders in our project and that should\nwork for the webpack config\nnow if we try to build this\nwe're going to get some errors oh okay\nduh I need to update this to TSX because\nwe're not able to read the entry point\nall right so now we're getting some\nerrors but it's a much better error it's\nlooking for type files for everything\nfor react and all that stuff and so now\nwe just need to install those you'll see\nan entry point it's going to say try npm\nsave Dev types react so that's all we're\ngoing to do is save the react types and\nthen I believe we also need the react\nDom types and you can see this goes away\nroot elements just complaining that it\ncould possibly be null so one thing we\ncould do is we could say if there's no\nroot element then throw new air react to\napp configured incorrectly and now\nthat's going to solve that because we\nknow that that will exist\nI tend to just put a exclamation at the\nend to say like hey we know that this\nroot element is going to be found that's\nokay to do in this case I think but yeah\nif you wanted to be safe you'd throw an\nair or log something or whatever to make\nsure that that root element was selected\ncorrectly let's try one more time yarn\nbuild\nand now it's successfully built things\ninto the public bundle.js so that\ncompiled typescript to JS and jsx to JS\nso everything can now run in the browser\nand let's make sure that that worked by\ngoing not to localhost 8080\nbut to the static app that we had so\nlocalhost\n5500 we cannot connect to that because\nlive server is not running\nbut if we hit go live on live server and\nthen refresh and go to live react RE\nFactor and then the public directory you\ncan see that we have an app running with\nsome styled green text\nso that means that our our final build\nworked okay\nand then if we were to go to yarn Dev\nand run that Dev server at localhost\n8080.\nand refresh you'll see that it refreshes\nand once again we can go change this to\nyou know red again and that should hot\nreload and change the the CSS of this\napp let me close a bunch of stuff out\nwe'll close all the save files collapse\nall this\nand I'm going to collapse this terminal\nit's just going to be running in the\nbackground and if we run into some\nerrors we'll we'll pull it up again so\nif you remember from the prior video\nthat we did where we refactored\neverything the live TS refactor we\nbasically took the tic-tac-toe game and\nwe turned it to a typescript code base\nso we've got the app we've got the store\nand we've got the view and then we have\nour types file this is what we're going\nto be referencing and we're going to be\njust lifting it over and putting it into\nreact code while we're doing this I'm\ngoing to run a live server and that's\ngoing to be over here\non this tab\nwe'll just grab localhost 5500 and I'm\njust going to run the vanilla refactor\njust so that we have a working final\nversion of the game so this is just\nvanilla JS nothing fancy this was from\nthe first video this is just our\nreference point and we will eventually\nreach that same point over here in the\nreact refactor the first thing I want to\ndo is bring over our types file so\nlet's copy this file of our types\nand put that in source\nand looking at the types we just have a\nplayer a move game status game and game\nState the next thing that I want to do\nis copy over the HTML\nso we had index.html that had all of\nthis structure for us and we had the\nmain tag as well as the footer and then\nfinally a modal that opens when the game\nends I'm going to go ahead and copy all\nof this\nand just to start us out we're in the\nlive react refactor again\nand we'll go to app.tsx\nand instead of my app we're going to\nreturn all of this HTML\nso all that HTML is going in there it's\ngoing to yell at you because we need to\nput a fragment around this because we\nhave no parent element to all of these\nand then of course we need to update all\nof our class attributes to be react\ncompatible or jsx compatible attributes\nwhich will be class name so let's add\nthat as a class name so that should fix\na few things then all of our comments\nwe'll just get rid of them right now\nthose are not valid jsx and then finally\nyou'll see that the style needs to be\nconverted this one will be will be a\nlittle bit annoying to do so let me just\nkind of speed through this real quick so\nI'm just copy pasting everything from\nthe final version Okay so we've\nconverted the HTML to valid jsx\nno errors going on here so we should\nremember we have this server I'm just I\nguess I'll keep it open here just so we\ncan see a little bit of it so that\nshould be reloading every time we save\nand now you can see in our react\nrefactor we've got something working we\nhave red text everywhere because I have\nnot removed\nfrom our globals\nor no not globals it was app.css where\nwe added this\nlet's get rid of that because that's\nannoying\nand you can see now we have all of the\nstructure and style to our application\nbut if we try to click anything it's not\ngoing to do much because we don't have\nany event listeners or anything hooked\nup let me go ahead and just close all\nthese tabs we don't really need them\nanymore so the first thing that you'll\nwant to do when you convert something\nover to a react application or you're\njust building a react app from scratch\nis look through your structure of your\nHTML and find what parts of this will be\nbest as an individual component\nso the first one that's pretty obvious\nthat I'd like to kind of rebuild is the\nfooter this could be its own component\nand so what I'll do is I'll just start\nusing this convention let's add a new\nfolder\ncalled components\nand then in components I will just add a\nfooter.tsx\nand then the styles for that footer will\nbe footer.css\none could argue that you know this\norganization is not the best but it'll\nwork for now so the template that we're\ngoing to work with here is basically\nwe're going to export the default\nfunction\nfrom each of these component files\nand I'm trying to do this in the CSS\nfile\noops\nokay so that looks a little bit better\nso we're going to export a default\nfunction and then return some jsx from\nthat and then we're going to import the\nfooter.css at the top so it gets all of\nthe component specific styles\nand then here we can just go back to our\napp.tsx and let's just copy the footer\nentirely and paste it right in here\nso this will self-contain the footer and\nI don't think there's anything that we\nneed to modify here so we can just leave\nthat as is and I don't actually think\nthat we yes we do have some styles for\nthat so in our globals.css where we have\nall of our Styles right now that applies\nto everything we want to come down and\nfind the footer Styles so right here\nthis is where all the footer styles are\nlet's rip those out\nand add those to footer.css\nand then save both of those\nand so now the Styles and the HTML\nshould be scoped to this one component\nand we can finally come back to app.tsx\nand remove the footer and replace it\nwith our footer component\nand if you hit command period it will\nadd that import for us as you can see\nright here so it's added the footer and\nour webpack is going to hot reload\nand you'll see the footer right here\ndown at the bottom it's working and if\nyou go to your developer tools let's\nactually look at Firefox extensions\nand let's look for react\nand grab some grab the react developer\ntools all right so now we have some\nreact developer tools and I think if we\nrefresh this\nyep we can now see the components so you\ncan see that the footer is one of our\ncomponents now so this is let's zoom in\na little bit\nI guess I can't zoom in unfortunately I\ndon't think I can zoom on\nthe developer tools too much it's pretty\nsmall okay the next thing that we can do\nis break out the modal itself so this\nright here is the modal that we will pop\nopen when someone wins the game\nwe can bring this over to the components\nand call it modal.tsx with modal.css as\nthe styles\nand I'm just going to use this template\nagain so export default function\nremember to import our\nCSS and now what we'll do is we'll grab\nall of this right here\nand return it from this component\nwe'll go to globals.css and find all the\nmodal Styles which we've organized\nis another reason to organize your CSS\nso that when you refactor\nit's pretty easy to know what goes where\nso we put the modal CSS here\nwe'll save Global Styles we'll save that\ncomponent and then we will once again\nadd the modal\noops we need to import that\nfrom our components and you're going to\nnotice that this is going to mess things\nup a little bit so if we come to our\nrefactor\nwell actually it doesn't mess anything\nup because we still have that hidden\nclass\nso if you'll see the modal hidden class\nwe're going to now control these sorts\nof things with react rather than classes\nso I'm going to get rid of that I'm also\ngoing to start removing all these data\nIDs because we're no longer having to\nselect the elements we can just grab\nthem directly from react so now once we\nremove those classes you'll see down\nhere at the bottom\nyou get this weird modal happening and\nlet me see what's going on there so if\nwe look at these Styles I think what's\nhappening is we are setting the position\nto be fixed but we're not giving it a\nreference point of where it should start\nso let's give it left to zero and top\nzero and now that should work okay\nonce again you can't click anything\nthere's no JavaScript functionality\nquite yet but that should be styled\ncorrectly and then if we come to app.tsx\nnow instead of using a hidden class that\nwill toggle with some in you know\nimplicit\nevent listener we can just be more\ndeclarative about this and keep a state\nof whether the modal is open or not and\nthen render it conditionally here so I'm\ngoing to just create a variable right\nnow you'll see how this comes into play\na little bit later but we'll just make a\nstatic variable called show modal and\nwe'll set that to false to start once\nagain you'll see how this changes in the\nfuture so don't get caught up on how I'm\nnot using State correctly and stuff like\nthat\nso show modal we're just going to wrap\nit in this just like that so now we will\nbe able to conditionally show the modal\nand then furthermore what we might want\nto do is add some props to modals so we\ncan pass what we want to show\nremember we are going to control this\ntext right here with JavaScript so it\nwould be good to add a message as props\nand then we can define a\nprops type up here that has a message of\ntype string\nso right here we're destructuring from\nthe props object and we're typing it\nright here and now instead of player one\nwins we can say that is set to the\nmessage that we passed to the modal as\nprops\nnow since this is a required message if\nwe go back it's going to complain\nbecause we haven't given it all of the\nprops for now we're just going to say\nplayer one wins because we don't have\nanything Dynamic to pass quite yet\nbut now you can see if we were to toggle\nthis from false to true\nit's going to show the modal in pass in\nplayer one wins and just to check we can\nlook at our components again and now we\nhave a footer and a modal in our app\nso let's put this back to false for now\nso that's not going to show and move on\nto the next part that we're going to\nrefactor into components all right so\nlooking through the rest of this we\ncould of course make a scoreboard\ncomponent but this is not a whole lot of\nHTML I think we'll just leave this here\nthat's really a style preference whether\nyou'd split that out this right here we\ncan simplify using some react\nconventions so this will be rather\nsimple to do so we'll just open up some\nbrackets here and I'm going to make an\narray that goes one through nine\nand you could of course create this with\nsome JavaScript but let's just be\nexpressive about what we're doing it's a\nlot easier to follow\nand then from here we're just going to\nmap and we're going to call this the\nsquare ID is what each of those numbers\nwill represent\nand then for each of the square IDs\nwe're going to one of these div elements\nnow whenever you map across multiple you\nknow elements in an array react needs to\nknow the key that you're giving it and\nthe reason is so that it has a\npredictable order that it can put these\nelements in and when it goes to\nre-render and figure out whether each\nelement has changed and it needs to\nre-render in the Dom it will look at\nthat key to tell tell it that so we\ndon't need this ID anymore we also don't\nneed this data ID because we're not\nusing that old vanilla syntax we do need\nthe key here as I just described and we\ncan pass it the square ID which is\nbasically going to be the number on that\nsquare\nand then furthermore clean our vanilla\napplication we were using JavaScript to\nrender an i element or basically an icon\nin this div so if we look back when we\nclick something or sorry this is the\nreact app we have if we click something\nin the finished app it will put one of\nthose icons within the Box\nso what we can do in react is instead of\nimplicitly doing this we can be or\nimperatively doing this we can be more\ndeclarative and just say let's just put\nan i tag in there\ngive it a class name and we know this is\ngoing to be fa solid now we're going to\nhave conditional classes based on which\nplayer is currently up we haven't\nimplemented that quite yet but for now\nI'm just going to pass in fax\nand then we'll say I think that was\nyellow\nwas X or no I think it was turquoise is\nwhat we had for player one\nwe will of course come back to this but\nif we render this now and then at this\npoint we can get rid of all of these\nso just reducing that amount of code now\nyou'll see there's an X rendered into\neach of those so we'll leave that there\nfor now we'll come back and make that\nDynamic later scrolling through we've\ngot the menu this could actually be a\ngood use case for another component so\nwe'll make it a menu component\nand we'll export the default menu\nfunction oops and then this menu is\ngoing to have some props so we'll\ninitialize that and then we also want to\nimport the menu.css which we need to add\nover here so there's your menu CSS let\nme close a bunch of these\nclean this up and we'll just open\noops this is from the final so there's\nour menu and our menu CSS\nnow the first thing we'll do is let's go\nover to globals and look for those menu\nstyles\nso it looks like we got them right here\nso let's copy all of those I think\nthat's all that we need\nthrow those in menu CSS\nsave globals\nand then we'll go to index.html or I'm\nsorry not index app.tsx\nand at this point we can grab all that\nHTML whoops did that wrong\nso we'll cut that out of there\nand then in our component we'll just\nrender that div right there\nlet's clean all of these data IDs up\nbecause once again we don't need that\nsince we're working in react now but\npretty much anywhere that we have one of\nthese data IDs means that we're\nregistering it for a click listener so\nwe'll have to set up those click\nlisteners here so what I'm going to do\nfor this menu is give it an on action\nproperty which is going to have an\naction type which will either be a reset\nor it's going to be a new round\nyou could of course do this differently\nhowever you want I'm just simplifying\nthings so that all we have to do is\ncheck the action type and then we know\nwhich of these buttons was clicked so\nwe'll come down to the buttons\nthemselves and we'll say on click\nand this one\nwill be an on action\noops we haven't passed the props yet so\nlet's initialize these so there's your\non action and then there's your props so\nthat's grabbing from here and typing it\nout\nso now we can say on action and this\nwill be a reset as you can see we get\nthis typescript support because we have\nthis Union type\nso there's your reset\nand then here's another click listener\nwe'll say this one is going to be the\nnew round\nso once again you could split this into\ntwo it's just stylistic you could\ncomment this out and say on reset\nvoid and then on new round\nvoid and then replace these\nwith those two different ones\nand then come down here and instead of\npassing\nthe key we'll just say on reset and on\nnew round and that would be the same so\nsame thing just a stylistic concern so\nI'm going to go back to my original I\nlike that a little bit so now we can\nthrow the menu here where we took that\njsx out so there's your menu and then we\nof course need the on action we'll fill\nthat out in a second\nso let's import the menu command period\nto get vs code to do that for you you\ncan see it got imported right there\nand then the on action for right now\nwe're going to just put a placeholder in\nthere\nand it's going to pass us an action\nbecause that's what we defined and we're\njust going to console log it for right\nnow\nwe'll eventually hook that up to\nsomething now if we go to our app when\nyou click the actions menu you're going\nto see in the console it should and\nlet's refresh oh we're not getting\nanything because we set those listeners\non the menu items\nbut we also need to listen for a click\nto the topmost menu so what we're going\nto do is put a click listener on the\nactions button\nand we'll handle this internal to the\nmenu\nso we'll say whether this is menu open\nwill be a piece of state that we're\ngoing to introduce using the use State\nhook\nand then what we'll do is we will look\nat the\nlet's see\nwe've got a function and we're going to\nset menu open\nand basically we're going to implement\ntoggle functionality by looking at the\nprevious state and returning the\nopposite of that so it's complaining\nabout this because we haven't\ninitialized this to anything so by\ngiving it a false default State that's\ngoing to type our use State and this is\nBoolean\nbecause it's going to use type inference\nand it's going to initialize this to be\nclosed but when we click that actions\nbutton it's going to basically toggle\nthe menu open and closed we can verify\nthis by going to the UI and clicking\nthis and it's not going to do anything\nbecause we're not actually reading this\nmenu open state\nwe want to conditionally render this\npiece of jsx based on whether the menu\nis open\nnow we have this leftover hidden class\nwhich we need to get rid of because that\nwill override this Behavior so now let's\nopen this up click actions and you can\nsee we can toggle this back and forth\nthe last thing is we need to look at\nthis icon and remember in the the\nvanilla app we had this flipping\ndepending on the open state\nso we can come down here where we're\nrendering that icon and basically say\nhey if the menu is open we're going to\nrender something otherwise we'll render\nthis\nso I'll copy\nthis to both of them so right now it's\ngoing to be down on both but let's go\nahead and put menu or Chevron up when\nthe menu is open and Chevron down when\nit is closed\nso there you can see it flips now\nthere's a slightly better way to do this\nand while we don't necessarily need this\ndependency it's something that I use and\nit's pretty helpful so we're going to\nadd something called class names so\nwe'll say yarn add class names this is\njust a utility really just a utility\nfunction is all this represents and if\nwe use that\nwe can refactor this code right here\nand\nin our class name\nwe can import class names so we'll go to\nthe top and say\nimport class names from class names\nand you can see this is just a utility a\nsimple JavaScript utility for\nconditionally joining class names\ntogether\npretty common that you'll see this\nwithin react so now what we can do is we\ncan say we always know it's going to be\nf a solid\nso that's similar across the two the two\nand then depending on whether the menu\nis open we will either use the Chevron\nup\nor the Chevron\ndown\nand delete all this\nso now rather than conditionally\nrendering the entire element we're just\nconditionally rendering the class names\nwhich is similar to our original\nimplementation so this is a good one for\nme to pause on and kind of show you what\nreact is doing for you versus what you'd\nhave to do in a vanilla app\nso if you remember so this is just the\nmenu and if you remember in our vanilla\nrefactor\nor actually let's go to the live TS\nrefactors the latest one we did and we\ngo to JS and look at the view\nand then let's go to the event listeners\nwhere we binded the click on the menu so\nthis first one is where we're binding\nThe Click event on the menu button\nand that let me let me just do this side\nby side so you can see it better\nso here's our react on the on the right\nand then vanilla is going to be on the\nleft\nso vanilla react and you can see that\nlet me zoom out just a little bit here's\nour actions button and here is our click\nlistener on that button then here's the\nstate that controls whether it's open or\nclosed now that right there is the same\nas registering an event listener on the\nbutton over here in The View\nand then we're calling the toggle menu\nclass which is down here somewhere in\nthe toggle menu class is going to select\nthe items in the button and toggle some\nStyles in a border and then figure out\nwhich icon to throw on that and that is\nbeing implemented right here where we're\ndeciding which one which icon to put and\nthen whether to show it as open or\nclosed then furthermore when we come\ndown here to the menu being open or\nclosed here we're conditionally\nrendering the menu items based on\nwhether it's open\nand you can see we have to implement\nthis whole toggle menu and entire close\nmenu to do that when it's pretty easy to\njust say like hey if that state is true\nthen render it otherwise don't so that's\njust kind of how we can simplify our\nlives a little bit and then finally we\nhave the action handlers where we\nregister something that happens when the\ngame resets or there's a new round\nand you can see that we will register\nthat on the game reset right here so\nthat's what we're doing with these on\nclick listeners so just kind of a before\nand after look to see how We're\ntranslating things so at this point we\ncan come back to our game and we can\nopen and close the menu and if we click\none of these we'll get something printed\nto the console telling us which one was\nclicked now we haven't actually handled\nthose events yet but we will do those\nshortly at this point our app.tsx is\npretty much done you could of course\nrefactor this even a little more and add\nmore components to clean this up but\nthis is pretty readable at this point\nand I don't really want to try to go any\nfurther because there's no reason to\nso now we need to add the concept of\nstate to our application and if you\nremember from the TS refactor we had\nthis entire store class\nwhich was responsible for\nat the very bottom basically saving our\nstate to local storage and then\ndispatching an event that said hey this\nstate has actually changed and then the\napp.ts\nwas listening for that event here and\nwhen it heard that event it would\nre-render The View with the new state\nnow this whole process is totally native\nto react it is in if you think about it\nwhat this is really doing is the view is\nreacting to a state change in\nre-rendering something so the pattern\nthat we've used here is a very\nsimplified oversimplified version of\nwhat react is doing and what the purpose\nof react is\nwe just had to do it in a much more\nindirect imperative fashion rather than\nthe declarative fashion that we're doing\nit in by just you know saying like hey\nif this state exists like if show modal\nis true render the modal we really don't\nneed to do anything more complex than\nthat but because we're using react now\njust because we're using react does not\nmean that our state is going to like\nchange its shape or anything we're still\ntracking the same\nfundamental types as defined here so all\nwe can all we really need to do is\nredefine a use State hook that will keep\ntrack of that game state in the main app\nand then we'll read that state in our\njsx to conditionally render things and\nmake things happen and make it\ninteractive since all of the state works\ntogether and none of it's like isolated\nfrom one another it makes sense that we\nwould throw this in a single state\nvariable\nso we're going to call it State and then\njust use the convention for a use State\nhook\nand we'll import that to react and we of\ncourse need an initial state that will\npass here if you remember from the\noriginal so let's go back to the store\nthe initial state that we passed was\nthis right here so what we can do is\njust copy this object\nand paste it into the default or\nbasically the the function parameter is\ngoing to be the default State now\nbecause we're passing this object shape\nto the use State hook use state is going\nto use typescript generics to infer the\ntype of state and if you hover over\nState it's going to give you that object\nshape so we could explicitly Define that\nright here\nand put it in the generic and Define the\ntype of state that we're dealing with\nbut it's just easier to let it infer\nthat and so now we have a strongly typed\nState object now this is where things\nget interesting so we have this state\nobject and if you remember from store we\nare just mutating this state or changing\nit in a couple of places so when a\nplayer moves we are pushing a move to\nthe current game moves array\nand when we reset the game we are\npushing current round games to the\nhistory and then when we do a new round\nwe're pushing to all the all games array\nso those are really the only places that\nwe're changing the state and then the\nrest of it is going to be something\ncalled derived State and that is\nbasically where you are constructing a\ndifferent or you're constructing a set\nof information that you have derived\nfrom that raw State object and two good\nexamples of this would be our stats\ngetter\nand our game getter and in the previous\nrefactor that's why I called that\nderived stats and derived game is\nbecause we're basically in both of these\nwe're reading the current raw State and\nthen we are calculating things and\nreturning that to our application so\nthat it can use that information to do\nthings\nso same thing here we're grabbing the\nraw State and then calculating all this\nstuff we're calculating if there's a\ngame winner the current player in the\nstatus of everything so this is all\nderived State and we can actually you\nknow what you might be tempted to do is\nput you know derived State and then set\nderived state in some use State call but\nreally you don't need to do that there's\nno point in doing that because now you\nhave to keep these two State variables\nin sync with each other\nif you read through the react\ndocumentation it will kind of explain to\nyou why that's a bad idea\nall we really need to do since this is a\npure function is come down here and\nDefine our game object and then we need\nto make a method to derive that so let's\ncall it derive game\nand then we also need to derive stats\nnot State we need stats\nso these are two empty functions that\nwe've defined and here we're going to\nderive the game\nand then stats we're going to derive the\nstats now of course we need to pass the\nstate object into each of these and it's\ngoing to yell at us because we haven't\ndefined that as a argument\nso all we need to do here is say State\nand then we need to define the state\nshape now this is where we need to start\ntyping it if we go back to our types.ts\nthat we had defined at the very\nbeginning\nwe have this game State key that we can\nuse so we can pass that here as game\nstate\nand then import that as a type we'll\nalso put it right here so state is game\nstate\nand now when we pass the state object\ninto derived game and derived stats it's\ngoing to accept it and at this point\nit's just a copy paste exercise we'll go\nback to our store which was again let me\nremind you this is from our prior\nrefactor this is our vanilla application\nnot our react one all we need to do is\ngrab from stats we can copy the return\ntype of stats\nand then in our derived stats we'll just\nreturn that and now we're no longer\nreferencing this dot player that is\ngoing to be we need to Define that so\nwe'll do that up here so if we go back\nto store I think we have a players array\nor no this was in our original app is\nwhere we put that\nso here's our players config so let's\ncopy that\nto the top of our app.tsx file\nso there's our players config and then\nnow we can just grab that from that\nscope the global scope here and map\nthrough it and we have a derived stats\nobject so before we get any further\nlet's just console that log this so\nconsole log stats because we've\nimplemented that function\nand if you go to the console here and\nrefresh you'll see that we have printed\nthis here twice and the reason that it\ngets printed twice is because we are in\nstrict mode so if you go back to entry\npoint and see this wrapper right here\nwhen we're in strict mode react is going\nto re-render each component two times\nand that is to catch bugs that happen\nand I'm not going to go too far into\nthat but that's why we're getting both\nof these re-renders not just one\nbut anyways we get the player with stats\nand this derived object where it says\nplayer one has zero wins and player two\nhas zero wins and there are zero ties\nso just with that information we can\nstart to populate our react application\nso if you go down here to the bottom you\ncan see that we have this static numbers\ndown here denoting who has what number\nof wins so what I'm going to do is grab\nthe stats array and we know from our\nconfig that player one is the zero index\nand player two is the one index of that\narray\nso all I'm going to do is interpolate a\nvariable here and we're going to grab\nthe stats derived state\nand we're going to look at the players\nwith stats and grab the first player and\nthen we're going to print the number of\nwins in that slot right there\nthen we can also throw the number of\nties so stats dot ties\nand then finally\nstats.players with stats we'll grab the\nfirst index which is player 2. and pass\nin wins right there\nso at this point our player one ties and\nplayer 2 are getting dynamically\npopulated and that part is done so the\nlast thing that we need to do is\nImplement our derived game\nfunction right here and we can do that\nby another copy paste so store.ts from\nour original project not the react one\nwe had this getter called game\nand that was basically just\nrecalculating some things and returning\nsome derived state\nso let's paste that in there\nwe need to reference players from the\nglobal scope here and there you have it\nI think that should be pretty much it\nwe're referencing state right here and\nthat should work so now if we print the\ngame so console log game and refresh\nhere's the game we've got the current\nplayer which is player one\nthere are no moves yet and the status is\ncomplete is false there's a couple\nthings we can do now let's get rid of\nthis console log and let's also get rid\nof this show modal static variable so\nget rid of that we can grab that from\nthe game derived State now\nso instead of show modal what we can say\nis hey is the game dot status\ncomplete\nand if the status is complete then we're\ngoing to open up the modal and instead\nof a static message we will say game dot\nstatus I think we're going to need to do\nthis dynamically so if there is a winner\nwe're going to say\ngame.status.winner dot name\nwins\notherwise it's going to be a tie so you\ncan see how we're just reading directly\nfrom the state\nto get what we need whether we need to\nrender this and open it up and what the\nmessage should be when it happens but of\ncourse this isn't going to matter if\nwe're not rendering it within the game\nitself\nso now what we can do is read the\ncurrent state in the current game and\nfigure out which squares need to be\npopulated\nso right here remember this is where we\nare looping through all nine of our\nsquares on the game board\nand rendering an icon if there's a move\nin that slot so what we can do is grab\nan existing move\nso let me show you where this originated\nfrom\nso if we go to our original project and\nwe go to the app.ts\nI believe that's here you can see that\nwhen a player moves we are checking for\nan existing move and if there's an\nexisting move we are returning because a\nplayer can't click that twice and then\nwe are calling Player move furthermore\nin The View\nto figure out you know which squares\nneed to have icons we have this\ninitialize moves method and what it's\ndoing is it's saying for each Square on\nthe game board see if there's an\nexisting move and if there is an\nexisting move then we're going to\nbasically simulate a move and populate\nthat square\nso with react all of this logic is way\neasier to do so we can basically just\ncopy that logic right here\nand we're not looking at moves we're\nlooking at we need to look at the\ncurrent game\nmoves and now the square ID is already a\nnumber so we can just replace this\nentirely with square ID So within this\nmap function we're figuring out if\nthere's an existing move and if there is\nan existing move\nwe're going to render\nthat icon there now also remember on\neach move we are we have the player\nobject available to us\nso let's refactor this right here the\nclass name on this icon\nrather than a Static X that is turquoise\nwe can use class names so we'll wrap\nthat\nand let's just start over here so it'll\nbe fa solid no matter what and then\nwe're going to take the existing move\ngrab the player and then give it the\ncolor class and then we'll also take the\nexisting move dot player dot icon class\nand that will tell us what color and\nwhat icon to render right here if there\nis an existing move so now if we go back\nto our game the board is going to be\nempty and we still can't click anything\nbecause we haven't listened for that\nevent so the last thing that we have to\ndo to make this game interactive is add\na click listener\non this div for this square that we're\nlistening for so we will attach a\ncallback function to this\nand we'll say if there's an existing\nmove\nwe're going to return early\nso we're reusing this that we\nestablished up here so if there's an\nexisting move don't do anything\notherwise we need to handle the player\nmove and this is going to require all\nthe logic for handling a Player move so\nI'm going to separate this out into a\nhand handle Player move function and\nthen I'm going to pass it the square ID\nof the clicked Square\nand then I'm going to grab the game dot\ncurrent player and then we need to\nDefine this function now\nso we'll come up here\nand we'll say function handle Player\nmove it's going to take a square ID\nwhich is a number\nand then it will take the what do we say\nthe current player\nso player is a player\nso now what happens is if there's an\nexisting move return early otherwise\nhandle the player move and that's going\nto be defined in this function right\nhere so thinking back to our prior game\nhow did we handle a Player move\nwell let's go to the view this is our\noriginal game not a react app anymore\nand looking at the view this is actually\nnot what we should be looking at because\nthis is all handled by react we already\nimplemented that so we need to look at\nthe store\nso here is the player move Handler\nbasically what we're doing is we're\ngetting a copy of State we are pushing a\nmove to the current game moves and then\nwe are saving that state so\nlet's go ahead and just copy that\npaste it here and instead of this dot\nget state\nwe will just grab actually let's comment\nthis out for just a second\nwhen a player moves we know that we need\nto set the state so let's call set State\nand to get the prior state that we need\nto deal with we can pass a callback and\nthis previous will represent the prior\nstate from the prior render snapshot\nso we can access that here\nso if we wanted to now place this logic\nin the set State callback and uncomment\nit we can do a structured clone of the\nprevious state right here\nthen we can push something to the\ncurrent game moves and then instead of\nsaving State we will just return the\nstate clone from this set State callback\nand then the only thing we update here\nis we're grabbing this from the argument\nso player goes directly here\nand then what's it complaining about\nthis argument is not assignable to\nparameter of type never and it's saying\nthat current game moves is of type never\narray and that's because we did not\nexplicitly type this as a game move\nso now we'll come through and actually\ntype this out a little bit and if we\nwanted to what we could do\nis just cast this we can say as game\nState and game state is from our\ntypes.ts right here\nso we can cast that to a game State\nobject and that's going to fix this\nbecause now it knows that the current\ngame moves is a move array you could\neither do that or a better way to do it\nis just say use state is of type game\nState and now that will explicitly say\nlike hey the object I'm assigning here\nis of type game state so now if we\nhandle the player move we should start\nto see some interactivity here\nso you can see that our app is starting\nto work and it detects a player win now\nif we click play again it's not going to\ndo anything and that's because we\nhaven't set an event listener on the\nmodal\nso if we command click the modal to open\nthat file\nyou can see that we're going to need an\non click Handler\nand that's going to happen when the user\nclicks play again so on click and then\nwe'll pass it that on click Handler\nwhich is going to be in props so this is\nreally just a way of us to basically\ntell the outside world that's consuming\nthis modal component hey there's an\nevent and it's an on click event that\nmeans that the user wants to play again\nso now we'll come down here and we'll\nsay on click and we need to do something\nto close the modal and update the state\nso in this case we need to reset the\ngame\nso reset game but the problem is we\ndon't have this implemented yet so\nsimilar to how we implemented the handle\nPlayer move we will also say reset game\noops\nand now this is going to be a function\nthat we'll call when that modal is\nclicked so similar to how we are just\ncalling set State and using the previous\nstate to find our next state we can do\nthat here in reset game so set state\nwill grab the previous state and now we\nhave to do something with that previous\nstate and derive something and return\nthe new state that we want the game to\nbe in once again we have already\nimplemented implemented this in our\nprior refactor so let's go back to\nstore.ts which is where we implemented\nthis and you can see that we have a\nreset method and then we have a new\nround method we can pretty much combine\nthese into the same method and just have\nlike a Boolean check to see whether it's\na reset or new round\nso let's first copy over the reset\nso we'll paste that in\nand instead of get State we're just\ngoing to pass the previous Right Here\nand Now what we're going to do is we're\ngoing to read from the game which is our\nderived state\nand we're going to destructure the\nstatus in the moves from there\nand then finally we'll return the state\nclone\nwhich will set that new state for us\nnow like I said in our original we had a\nreset in a new round\nso all we have to do is conditionally\nlet's just add a prop or not a prop but\na parameter up here and say is this a\nnew round\nand have that as a Boolean so if we come\ndown here to this reset game we're going\nto say that's false it is not a new\nround it's just a game reset and then if\nyou remember from our menu we have this\non action so\nwhat we can say here is we want to reset\nthe game and then to detect whether this\nis a new round or not we'll just say\ndoes the action equal new Round And if\nthat evaluates to true then we have\nreset the game otherwise it will\nevaluate to false and that'll just be a\nplain old reset\nso we've hooked up this listener we just\nhave to implement that have to actually\nuse this variable to figure out what to\ndo so all we need to do is come down\nhere after we've reset the current game\nmoves and we'll say if this is a new\nround so is new round\nwe also want to push to the history so\nwe'll say State clone dot history\nand then all games\nand then we'll basically just push and\nspread the state clone\ndot history dot current round games\nand then we will set that\ncurrent round games equal to an empty\narray so if there's a new round we're\nalso going to reset that so at this\npoint we've got the reset game completed\nand I think this is the majority of the\nlogic so let's go try our game out\nso it detects a win and if we click play\nagain it closes things everything resets\nand down here player one has one win\nlet's get player two to win one so\nplayer two wins we play again player two\nhas one win\nlet's click a square reset that it seems\nto work let's go ahead and reset the\nscoreboard down here\nand that seems to work as well\nso I think we're pretty much done let me\njust kind of pause the video here and go\nthrough and see if there's any cleanup\nthat we need to do and then we'll be on\nour way okay so there's actually one big\nthing that I forgot to come back to and\nthat is local storage at the moment\nwe're not persisting this game across\nbrowser refreshes\nso let me let me collapse some things\nwe'll collapse the players derived game\nand derive stats\nwe will collapse reset game and handle\nPlayer move just to hide them from our\nview and you can see with our use State\nhook this is where we're storing the\nstate of the game so if we were to play\na couple moves and then refresh this\nbrowser it's going to basically reset\neverything because we're not storing\nthis to local storage any longer and\nthen furthermore I realized that this\nturn indicator is not implemented so\nlet's go ahead and do that we'll get rid\nof these data IDs because we don't need\nthose anymore and then this becomes\npretty easy so we just add class names\naround this\nso fa solid and then we will just figure\nout whose turn it is by saying the game\ndot currentplayer.color class\ngame.currentplayer.icon class\nsave that\nand so now this will be dynamic and then\nfinally we need to just replace this\nright here with the game\nDot currentplayer.name\nso this should make the color the icon\nand the name Dynamic let's make sure\nthat that's correct\nlooks like everything's working except\nfor that part\nbecause we have this as a static style I\nthink maybe an easier way to do this is\njust remove this class name altogether\nremove that from there and then\nuse the entire div to\nspecify the color so we'll say\ngame.currentplayer.color class is going\nto apply to the entire div which will\nstyle its child elements and then we're\ntoggling on the icon\nso player one player two player one and\nseems to be working now\nand once again the last thing is local\nstorage and this is something that I'm\nnot going to spend a ton of time on the\nimplementation to but there is a way\nthat you can extract the local storage\nfunction to a react hook\nso we can basically make a replica of\nuse state but instead of just using\nstate it will also keep it in sync with\nlocal storage\nand in that manner we can use we can\nbasically have the same interface while\ngetting that additional functionality so\njust so that we're not getting into\ncrazy detail or anything we already did\nwe already do that in these videos\nI'm going to go into source and make a\nhook called uselocalstorage.ts\nthis is a react hook you can learn more\nabout this if you are in the react Docs\nand go to the beta docs then the new\nones and then you can go to should be\nsome hooks a hooks reference somewhere\nlet's go to the reference so you've got\nthe built-in react hooks\nI don't know if it does say anything\nabout like custom Hooks and how you\nwould do that\noh here reusing logic with custom hooks\nthis is a good place to check out what\nI'm about to do and understand\nwhy we would do this but I'm just going\nto copy paste everything in here to this\nfile this is a use local storage hook\nyou know basically what we're doing is\nwe are adopting the same interface as\nthe use State except we are also keeping\nit in sync with local storage and you'll\nsee right here this is where we're like\nsetting a value to local storage this is\nwhere we are getting the value from\nlocal storage and then in the parameters\nwe'll pass the key that we'll use to\ntrack that in local storage\nso I've documented this a little bit you\ncan read through it on your own time\nit's not necessarily super important to\nunderstand all the internals here I'll\nalso note that I've added this effect\nright here that basically keeps track of\nother tabs that change\nso if you were let me close some things\nout and if you went back to our original\nimplementation app.ts this is not the\nreact app this is the prior videos\nyou can see that we're listening for the\nstate change this has pretty much become\nirrelevant now that we're using react\nbecause that is kind of built into the\nParadigm of react but we also have this\nwhere we're listening to the local\nstorage of another Tab and re-rendering\nthe view if that changes so I've created\nthis effect here which does the same\nthing and it will update the state\nvariable every time another tab changes\nits state so I will close this\nand you'll see how easy this is we'll go\nback to our app.tsx and we'll just\ncomment out this original state and all\nwe need to do we can name it the same\nthing so set state state and set State\nand now instead of use State we're going\nto use local storage and import that\nnow it's going to ask us for a key so\nwe'll say game State key\nand then it will ask us for our initial\nvalue which is going to be this right\nhere the same thing that we passed\nearlier so we'll uncomment that so\nyou're going to see how quick and easy\nthis is to update so remember if we go\nto our react game play some moves and\nrefresh\nnot going to work\nbut all we have to do is replace use\nstate with use local storage and import\nthat from our file\nand then we need to give it a game State\nkey that's just the key that will be\nused in local storage as that first\nargument and then our default value is\nthe second\nand that should do it that will keep the\nstate in sync with local storage and we\ndon't even have to think about it so we\ncan play the game refresh and it will\nfind the state that we're in after a\nrefresh you can also duplicate the tab\nplay something over here and then that's\ngoing to sync up over on this side and\nvice versa\nso now that we've got it synced up with\na local storage I think we have\nreplicated that original application in\nfull so the last part of this is just\ngoing to be some cleanup and making\nthings easier to kind of find and read\nthrough\nso let's go through and look for any\nlike data IDs we don't need any of these\nbecause that was a paradigm from\nthe original implementation where we\nneeded a stable way to select\na Dom element\nso we'll get rid of all those let's go\nthrough our components\nshould be okay there on the menu\nno data IDs there and we're good\nand then furthermore we can just extract\nsome of these things out so let's make a\nfile called\nutils.ts this will just be some utility\nfunctions\nand if you remember we have this derived\nderived game and derived stats and then\nwe also have the players up here outside\nof our component itself\nso we can take all of this stuff\nyou could leave it here there's no\nproblem with that either but I can throw\nall that into a utils file\nand then we can export them from it okay\nand then we just need to import a few\ntypes from the types file\nso we'll import the player and then the\ngame state\nand that should satisfy these functions\nso those are now isolated to the utils\nfile and then we of course need to\nimport them so command period to import\nfrom utils\ndo that again here and you can see we've\ngot that import\nand that should work okay so that kind\nof cleans up our app file\nwe no longer need use State because\nwe're doing the use local storage hook\nwhich uses State under the hood so we'll\nexpand this out and this is pretty much\nthe final game once again you can find\nall of this code in the repository I've\nleft in the video description be sure to\nlook at the typescript branch to find\nthis exact implementation I just did\nthere's also a non-typescript version of\nthe same app so now that we're done we\ncan close out this develop developer\nserver the webpack dev server and a good\nthing to do is always to just check to\nmake sure that it builds correctly so we\nhave these build scripts and let's just\nrun yarn build\nand what this will do is basically check\nall your types type checking compile\neverything bundle it up and output it to\nthe public directory with bundle.js\nand we can also try the build prod to\nmake sure that it does its optimizations\nokay and it doesn't complain about\nanything\nso there you go and then finally we've\ngot live server running on Port 5500\nalready and since we just built this app\nit's totally static and you can actually\nview this directly from the public\ndirectory rather than using the webpack\ndev server\nso you can think of it as webpack came\nin did its job compiled everything\ntranspiled everything and gave us one\nnice clean bundle output and now we're\njust ready to go we've got what we need\nand the browser knows how to load the\napp\nso let's go back to the browser\nand we'll go to localhost 5500 close\neverything out and I know we've got a\nlot of folders here but let's go to the\nlive react refactor and then if we click\npublic it should give us the game and we\nshould be able to use it just like we\nwere with the dev server so we can reset\nwe can get a new round going and just\nplay the game so just wanted to show you\nthat's a good thing to do check your\nbuild make sure it works and then you\ncould really just you could deploy that\nthis game right here over any CDN\nbecause it's static assets so you could\nput it on cloudflare you know whatever\nyou want and it can be served to your\nusers thrown on GitHub Pages what have\nyou\nso hopefully this was an educational\nvideo that hopefully you enjoyed seeing\nhow we can go from a vanilla JavaScript\napplication and Port that over to react\nand kind of see the benefits of using\nreact it makes a lot of our code a lot\nsimpler we basically went from let's\njust kind of recap we went from this\nlive TS refactor where we had an app\nlet's just close all this out you can\njust scroll through this is our main app\nfile where we're registering all the\nevent listeners controlling everything\nthis is our state\nwhere we have our store class\nand this is our view where we are\nhandling selecting all the elements up\nhere\nwe are rendering here so this basically\nwhat react is doing for us and then\nwe're binding event listeners got all of\nour helper methods here and all of this\nstuff it's pretty verbose what we've had\nto write here we even have the delegate\nmethod so that we could figure out which\nSquare was clicked and that was pretty\nconfusing so we've gone from this\nover to our react application which as\nyou can tell if we go to app.tsx\nit's pretty concise what we've got here\nwe don't have any delegate methods we\ncan just handle everything\nbasically right here with some event\nhandlers we've got a hook that helps us\ndeal with local storage and then we have\nour components split out by their\nseparate concerns also with their\nseparate CSS so that's just a much\ncleaner way to write an application and\nit's a lot easier to extend into the\nfuture let me know what you thought of\nthis video be sure to give it a like And\nsubscribe to the channel and I will see\nyou next time\n",
  "words": [
    "zach",
    "galwitzer",
    "created",
    "extremely",
    "popular",
    "web",
    "development",
    "boot",
    "camp",
    "course",
    "back",
    "course",
    "help",
    "solidify",
    "understanding",
    "variety",
    "web",
    "development",
    "concepts",
    "practice",
    "html",
    "css",
    "javascript",
    "typescript",
    "react",
    "let",
    "get",
    "started",
    "hey",
    "free",
    "code",
    "camp",
    "name",
    "zach",
    "today",
    "really",
    "excited",
    "share",
    "video",
    "working",
    "take",
    "game",
    "build",
    "vanilla",
    "javascript",
    "html",
    "css",
    "refactor",
    "go",
    "typescript",
    "finally",
    "typescript",
    "plus",
    "react",
    "going",
    "super",
    "fun",
    "tutorial",
    "going",
    "long",
    "hope",
    "going",
    "learn",
    "ton",
    "get",
    "practical",
    "real",
    "world",
    "experience",
    "building",
    "actually",
    "would",
    "call",
    "kind",
    "sequel",
    "another",
    "video",
    "posted",
    "channel",
    "free",
    "code",
    "camp",
    "couple",
    "months",
    "ago",
    "posted",
    "developer",
    "boot",
    "camp",
    "since",
    "gotten",
    "million",
    "views",
    "thank",
    "watching",
    "glad",
    "enjoyed",
    "video",
    "meant",
    "direct",
    "lessons",
    "learned",
    "throughout",
    "going",
    "applied",
    "video",
    "going",
    "take",
    "stuff",
    "put",
    "action",
    "give",
    "project",
    "little",
    "bit",
    "real",
    "world",
    "bit",
    "challenging",
    "great",
    "learning",
    "experience",
    "always",
    "want",
    "give",
    "big",
    "shout",
    "free",
    "code",
    "camp",
    "allowing",
    "come",
    "channel",
    "giving",
    "exposure",
    "teach",
    "broader",
    "audience",
    "smaller",
    "channel",
    "check",
    "got",
    "link",
    "description",
    "also",
    "make",
    "note",
    "video",
    "actually",
    "three",
    "videos",
    "squashed",
    "together",
    "originally",
    "posted",
    "three",
    "channel",
    "combined",
    "kind",
    "hear",
    "talking",
    "next",
    "video",
    "previous",
    "video",
    "finally",
    "github",
    "repository",
    "mention",
    "couple",
    "times",
    "description",
    "check",
    "got",
    "source",
    "code",
    "writing",
    "project",
    "well",
    "attribution",
    "actually",
    "originally",
    "subscriber",
    "refactor",
    "react",
    "reached",
    "subscribers",
    "said",
    "hey",
    "submit",
    "code",
    "review",
    "redo",
    "show",
    "would",
    "approach",
    "originally",
    "started",
    "thank",
    "yvonne",
    "meg",
    "submitting",
    "handles",
    "also",
    "github",
    "repository",
    "without",
    "ado",
    "let",
    "jump",
    "build",
    "game",
    "video",
    "going",
    "walk",
    "process",
    "building",
    "game",
    "mobily",
    "responsive",
    "play",
    "mobile",
    "device",
    "works",
    "across",
    "browser",
    "tabs",
    "leveraging",
    "local",
    "storage",
    "know",
    "different",
    "players",
    "playing",
    "different",
    "browser",
    "tabs",
    "also",
    "going",
    "bunch",
    "different",
    "things",
    "animations",
    "going",
    "got",
    "actions",
    "menu",
    "allows",
    "reset",
    "game",
    "get",
    "start",
    "recording",
    "different",
    "wins",
    "really",
    "play",
    "separate",
    "tabs",
    "someone",
    "wins",
    "see",
    "modal",
    "pop",
    "gray",
    "entire",
    "background",
    "click",
    "play",
    "see",
    "state",
    "tracked",
    "time",
    "even",
    "refresh",
    "browser",
    "tab",
    "going",
    "stay",
    "even",
    "reset",
    "make",
    "new",
    "round",
    "code",
    "writing",
    "going",
    "subscriber",
    "refactor",
    "repository",
    "github",
    "drop",
    "video",
    "description",
    "right",
    "video",
    "going",
    "cover",
    "sorts",
    "concepts",
    "um",
    "actually",
    "loaded",
    "useful",
    "concepts",
    "anything",
    "vanilla",
    "javascript",
    "html",
    "css",
    "really",
    "requires",
    "think",
    "things",
    "get",
    "backstops",
    "libraries",
    "frameworks",
    "like",
    "react",
    "give",
    "really",
    "require",
    "us",
    "think",
    "bit",
    "fun",
    "explore",
    "different",
    "concepts",
    "patterns",
    "example",
    "going",
    "looking",
    "mvc",
    "architectural",
    "pattern",
    "model",
    "view",
    "controller",
    "going",
    "talking",
    "state",
    "actually",
    "represent",
    "going",
    "talk",
    "little",
    "bit",
    "event",
    "delegation",
    "words",
    "means",
    "go",
    "game",
    "click",
    "one",
    "squares",
    "actually",
    "registering",
    "click",
    "listener",
    "parent",
    "component",
    "delegating",
    "event",
    "find",
    "square",
    "clicked",
    "fun",
    "go",
    "mobile",
    "responsiveness",
    "showed",
    "css",
    "animations",
    "uh",
    "grid",
    "actually",
    "using",
    "css",
    "grid",
    "lot",
    "concepts",
    "fun",
    "go",
    "familiar",
    "html",
    "css",
    "javascript",
    "recommend",
    "go",
    "full",
    "stack",
    "kind",
    "became",
    "development",
    "roadmap",
    "like",
    "21",
    "hours",
    "posted",
    "channel",
    "probably",
    "going",
    "put",
    "video",
    "next",
    "video",
    "series",
    "perfect",
    "transition",
    "concepts",
    "covered",
    "throughout",
    "series",
    "applying",
    "real",
    "world",
    "type",
    "scenario",
    "build",
    "game",
    "kind",
    "doubling",
    "subscriber",
    "refactor",
    "useful",
    "project",
    "build",
    "learn",
    "bunch",
    "cool",
    "concepts",
    "definitely",
    "know",
    "html",
    "css",
    "javascript",
    "least",
    "basic",
    "level",
    "get",
    "video",
    "recommend",
    "watch",
    "prior",
    "video",
    "kind",
    "walk",
    "original",
    "project",
    "based",
    "kind",
    "talked",
    "good",
    "things",
    "things",
    "could",
    "improved",
    "referencing",
    "kind",
    "back",
    "kind",
    "show",
    "improve",
    "certain",
    "things",
    "recommend",
    "least",
    "watch",
    "first",
    "part",
    "video",
    "kind",
    "skim",
    "forewarn",
    "put",
    "beginner",
    "intermediate",
    "level",
    "video",
    "um",
    "going",
    "covering",
    "lot",
    "ground",
    "challenging",
    "kind",
    "starting",
    "purpose",
    "think",
    "lot",
    "tutorials",
    "really",
    "focus",
    "vanilla",
    "side",
    "vanilla",
    "means",
    "extra",
    "frameworks",
    "libraries",
    "involved",
    "think",
    "lot",
    "tutorials",
    "really",
    "show",
    "take",
    "vanilla",
    "app",
    "actually",
    "put",
    "design",
    "patterns",
    "behind",
    "way",
    "could",
    "extend",
    "future",
    "come",
    "back",
    "project",
    "understand",
    "going",
    "quick",
    "straightforward",
    "way",
    "add",
    "new",
    "features",
    "game",
    "said",
    "let",
    "get",
    "started",
    "going",
    "long",
    "fun",
    "video",
    "put",
    "time",
    "stamps",
    "um",
    "probably",
    "want",
    "grab",
    "hot",
    "drink",
    "get",
    "situated",
    "gon",
    "na",
    "gon",
    "na",
    "take",
    "um",
    "brand",
    "uh",
    "repository",
    "repository",
    "post",
    "put",
    "video",
    "description",
    "completed",
    "projects",
    "see",
    "reactory",
    "factor",
    "actually",
    "next",
    "video",
    "take",
    "build",
    "video",
    "throw",
    "well",
    "throw",
    "rebuild",
    "react",
    "application",
    "show",
    "kind",
    "progression",
    "go",
    "vanilla",
    "react",
    "commonalities",
    "differences",
    "two",
    "really",
    "help",
    "understand",
    "use",
    "something",
    "like",
    "react",
    "makes",
    "lives",
    "easier",
    "developer",
    "original",
    "original",
    "project",
    "reference",
    "um",
    "going",
    "actually",
    "create",
    "new",
    "folder",
    "uh",
    "live",
    "vanilla",
    "build",
    "going",
    "working",
    "video",
    "basically",
    "recruit",
    "recreating",
    "everything",
    "vanilla",
    "refactor",
    "may",
    "reference",
    "um",
    "little",
    "bit",
    "getting",
    "far",
    "code",
    "forewarning",
    "live",
    "build",
    "going",
    "might",
    "like",
    "tiny",
    "little",
    "differences",
    "final",
    "state",
    "see",
    "github",
    "overall",
    "go",
    "exact",
    "direction",
    "right",
    "first",
    "thing",
    "start",
    "new",
    "project",
    "well",
    "project",
    "natural",
    "thing",
    "create",
    "document",
    "want",
    "administrative",
    "stuff",
    "um",
    "visual",
    "studio",
    "code",
    "going",
    "assume",
    "using",
    "visual",
    "studio",
    "code",
    "um",
    "reason",
    "awesome",
    "editor",
    "people",
    "use",
    "first",
    "thing",
    "need",
    "go",
    "extensions",
    "open",
    "live",
    "server",
    "extension",
    "basically",
    "allows",
    "view",
    "html",
    "documents",
    "browser",
    "port",
    "5500",
    "default",
    "see",
    "already",
    "running",
    "let",
    "go",
    "ahead",
    "click",
    "close",
    "dispose",
    "um",
    "let",
    "get",
    "windows",
    "figured",
    "okay",
    "see",
    "reload",
    "wo",
    "reload",
    "let",
    "go",
    "ahead",
    "close",
    "go",
    "get",
    "rid",
    "bar",
    "click",
    "go",
    "live",
    "live",
    "server",
    "installed",
    "visual",
    "studio",
    "open",
    "port",
    "5500",
    "let",
    "go",
    "show",
    "directories",
    "working",
    "replicating",
    "right",
    "going",
    "click",
    "live",
    "vanilla",
    "build",
    "right",
    "empty",
    "going",
    "show",
    "anything",
    "going",
    "create",
    "file",
    "say",
    "use",
    "vs",
    "code",
    "emit",
    "snippets",
    "type",
    "html",
    "click",
    "html5",
    "get",
    "boilerplate",
    "built",
    "us",
    "second",
    "thing",
    "going",
    "show",
    "format",
    "save",
    "really",
    "part",
    "dev",
    "workflow",
    "matter",
    "go",
    "useful",
    "see",
    "boilerplate",
    "indented",
    "correctly",
    "click",
    "command",
    "mac",
    "save",
    "see",
    "formats",
    "document",
    "way",
    "got",
    "working",
    "another",
    "extension",
    "called",
    "prettier",
    "prettier",
    "code",
    "formatter",
    "used",
    "pretty",
    "much",
    "everyone",
    "point",
    "least",
    "feels",
    "like",
    "industry",
    "standard",
    "hit",
    "command",
    "p",
    "hit",
    "little",
    "bracket",
    "bracket",
    "whatever",
    "carrot",
    "type",
    "open",
    "user",
    "settings",
    "right",
    "used",
    "recently",
    "worry",
    "stuff",
    "lines",
    "really",
    "matter",
    "add",
    "two",
    "configuration",
    "lines",
    "also",
    "documented",
    "uh",
    "extension",
    "show",
    "right",
    "need",
    "add",
    "added",
    "added",
    "going",
    "detect",
    "every",
    "time",
    "save",
    "reformat",
    "file",
    "right",
    "kind",
    "administrative",
    "stuff",
    "dealing",
    "um",
    "think",
    "missed",
    "anything",
    "make",
    "sure",
    "get",
    "set",
    "things",
    "saved",
    "go",
    "back",
    "live",
    "server",
    "empty",
    "html",
    "document",
    "inspect",
    "see",
    "elements",
    "let",
    "go",
    "ahead",
    "change",
    "vanilla",
    "js",
    "t3",
    "go",
    "ahead",
    "put",
    "placeholder",
    "p",
    "tag",
    "see",
    "something",
    "see",
    "save",
    "auto",
    "loads",
    "um",
    "know",
    "hot",
    "reloading",
    "changes",
    "reflected",
    "immediately",
    "browser",
    "alright",
    "next",
    "thing",
    "always",
    "starting",
    "project",
    "really",
    "kind",
    "starting",
    "point",
    "least",
    "project",
    "whether",
    "back",
    "end",
    "involved",
    "full",
    "stack",
    "like",
    "front",
    "end",
    "going",
    "start",
    "ui",
    "build",
    "layout",
    "entire",
    "application",
    "actually",
    "video",
    "kind",
    "explains",
    "process",
    "depth",
    "front",
    "end",
    "course",
    "channel",
    "go",
    "revisit",
    "need",
    "basically",
    "goal",
    "build",
    "html",
    "structure",
    "build",
    "layout",
    "css",
    "debated",
    "head",
    "bit",
    "much",
    "time",
    "going",
    "spend",
    "portion",
    "video",
    "ultimately",
    "decided",
    "going",
    "deprioritized",
    "little",
    "bit",
    "focus",
    "javascript",
    "patterns",
    "behind",
    "plenty",
    "previous",
    "videos",
    "go",
    "depth",
    "like",
    "excruciating",
    "detail",
    "build",
    "html",
    "css",
    "bring",
    "together",
    "design",
    "things",
    "watched",
    "front",
    "end",
    "course",
    "last",
    "um",
    "series",
    "videos",
    "course",
    "css",
    "grid",
    "going",
    "leverage",
    "going",
    "use",
    "real",
    "world",
    "project",
    "going",
    "getting",
    "every",
    "last",
    "little",
    "detail",
    "going",
    "take",
    "liberty",
    "little",
    "bit",
    "copy",
    "pasting",
    "um",
    "vanilla",
    "refactor",
    "already",
    "built",
    "um",
    "kind",
    "precursor",
    "video",
    "said",
    "going",
    "take",
    "piece",
    "piece",
    "least",
    "see",
    "coming",
    "together",
    "thought",
    "process",
    "behind",
    "typing",
    "html",
    "css",
    "line",
    "line",
    "next",
    "10",
    "years",
    "um",
    "videos",
    "already",
    "quite",
    "long",
    "need",
    "longer",
    "especially",
    "focusing",
    "let",
    "go",
    "ahead",
    "copy",
    "pasting",
    "look",
    "final",
    "html",
    "project",
    "one",
    "going",
    "first",
    "thing",
    "want",
    "focus",
    "grid",
    "hardest",
    "thing",
    "conceptualize",
    "building",
    "say",
    "grid",
    "going",
    "actually",
    "duplicate",
    "tab",
    "reference",
    "look",
    "vanilla",
    "refactor",
    "give",
    "us",
    "complete",
    "picture",
    "want",
    "trying",
    "build",
    "grid",
    "squares",
    "see",
    "also",
    "uh",
    "state",
    "variables",
    "call",
    "state",
    "variables",
    "little",
    "scoreboard",
    "lines",
    "perfectly",
    "grid",
    "something",
    "little",
    "bit",
    "less",
    "obvious",
    "actions",
    "menu",
    "also",
    "lines",
    "perfectly",
    "grid",
    "player",
    "one",
    "indicator",
    "spans",
    "kind",
    "two",
    "sections",
    "grid",
    "really",
    "got",
    "need",
    "replicate",
    "grid",
    "let",
    "count",
    "got",
    "three",
    "columns",
    "one",
    "two",
    "three",
    "number",
    "rows",
    "going",
    "one",
    "top",
    "kind",
    "header",
    "section",
    "going",
    "one",
    "section",
    "grid",
    "two",
    "three",
    "four",
    "five",
    "bottom",
    "one",
    "really",
    "go",
    "one",
    "goes",
    "first",
    "five",
    "three",
    "three",
    "five",
    "grid",
    "um",
    "hard",
    "hard",
    "remember",
    "talking",
    "video",
    "basically",
    "going",
    "building",
    "collapse",
    "finished",
    "document",
    "vs",
    "code",
    "code",
    "collapse",
    "things",
    "really",
    "help",
    "see",
    "kind",
    "things",
    "structured",
    "um",
    "collapse",
    "everything",
    "lot",
    "clear",
    "grid",
    "items",
    "see",
    "container",
    "class",
    "grid",
    "grid",
    "going",
    "give",
    "us",
    "display",
    "grid",
    "go",
    "go",
    "grid",
    "class",
    "see",
    "initializing",
    "grid",
    "container",
    "um",
    "let",
    "go",
    "back",
    "html",
    "know",
    "watched",
    "previous",
    "series",
    "grid",
    "grid",
    "going",
    "child",
    "elements",
    "called",
    "grid",
    "items",
    "direct",
    "descendants",
    "container",
    "see",
    "one",
    "two",
    "nine",
    "squares",
    "three",
    "little",
    "scoreboard",
    "squares",
    "bottom",
    "basic",
    "structure",
    "going",
    "start",
    "different",
    "styles",
    "markup",
    "want",
    "start",
    "simple",
    "way",
    "going",
    "creating",
    "bunch",
    "divs",
    "starting",
    "basic",
    "grid",
    "order",
    "need",
    "file",
    "see",
    "vanilla",
    "refactor",
    "got",
    "folders",
    "different",
    "types",
    "files",
    "really",
    "need",
    "organization",
    "thing",
    "rebuild",
    "going",
    "try",
    "mirror",
    "create",
    "css",
    "folder",
    "new",
    "file",
    "called",
    "let",
    "go",
    "ahead",
    "something",
    "always",
    "let",
    "throw",
    "uh",
    "selector",
    "color",
    "red",
    "means",
    "every",
    "text",
    "everything",
    "going",
    "text",
    "going",
    "red",
    "reason",
    "make",
    "sure",
    "hooked",
    "correctly",
    "let",
    "close",
    "files",
    "starter",
    "see",
    "placeholder",
    "need",
    "right",
    "title",
    "going",
    "add",
    "link",
    "going",
    "go",
    "hit",
    "enter",
    "link",
    "css",
    "see",
    "already",
    "knows",
    "go",
    "grab",
    "want",
    "custom",
    "directory",
    "let",
    "go",
    "css",
    "select",
    "index",
    "save",
    "hooked",
    "correctly",
    "red",
    "let",
    "go",
    "right",
    "see",
    "red",
    "connected",
    "first",
    "thing",
    "need",
    "put",
    "main",
    "html",
    "tag",
    "reason",
    "put",
    "main",
    "tag",
    "represent",
    "dominant",
    "content",
    "document",
    "wanted",
    "figure",
    "type",
    "mdn",
    "main",
    "mdn",
    "main",
    "first",
    "result",
    "says",
    "represents",
    "dominant",
    "content",
    "scroll",
    "usage",
    "notes",
    "says",
    "unique",
    "document",
    "content",
    "repeated",
    "sidebars",
    "nav",
    "links",
    "copyright",
    "within",
    "main",
    "case",
    "board",
    "dominant",
    "content",
    "document",
    "want",
    "inside",
    "main",
    "furthermore",
    "need",
    "div",
    "container",
    "grid",
    "container",
    "want",
    "give",
    "class",
    "grid",
    "style",
    "within",
    "remember",
    "let",
    "hit",
    "command",
    "b",
    "mac",
    "close",
    "sidebar",
    "remember",
    "original",
    "grid",
    "class",
    "grid",
    "items",
    "one",
    "two",
    "um",
    "nine",
    "right",
    "11",
    "12",
    "13",
    "count",
    "basic",
    "math",
    "right",
    "basically",
    "need",
    "bunch",
    "divs",
    "within",
    "make",
    "one",
    "command",
    "c",
    "copy",
    "way",
    "many",
    "three",
    "six",
    "nine",
    "eleven",
    "okay",
    "come",
    "back",
    "get",
    "right",
    "anyways",
    "got",
    "skeleton",
    "grid",
    "come",
    "make",
    "grid",
    "class",
    "say",
    "display",
    "grid",
    "another",
    "thing",
    "want",
    "start",
    "us",
    "css",
    "reset",
    "original",
    "project",
    "already",
    "copy",
    "css",
    "reset",
    "gon",
    "na",
    "reset",
    "everything",
    "weird",
    "padding",
    "going",
    "anything",
    "like",
    "let",
    "go",
    "ahead",
    "put",
    "top",
    "also",
    "initialize",
    "fonts",
    "colors",
    "like",
    "said",
    "going",
    "spend",
    "ton",
    "time",
    "portion",
    "video",
    "um",
    "got",
    "prior",
    "videos",
    "go",
    "depth",
    "basically",
    "importing",
    "uh",
    "google",
    "font",
    "right",
    "initializing",
    "set",
    "colors",
    "css",
    "variables",
    "root",
    "selector",
    "able",
    "use",
    "var",
    "dash",
    "dash",
    "whatever",
    "variable",
    "within",
    "css",
    "save",
    "come",
    "back",
    "document",
    "see",
    "completely",
    "empty",
    "kind",
    "looking",
    "looked",
    "vanilla",
    "refactor",
    "got",
    "zoomed",
    "way",
    "much",
    "darker",
    "background",
    "first",
    "thing",
    "actually",
    "actually",
    "get",
    "would",
    "believe",
    "dark",
    "gray",
    "right",
    "let",
    "copy",
    "going",
    "select",
    "html",
    "body",
    "give",
    "background",
    "color",
    "reason",
    "hundred",
    "percent",
    "height",
    "something",
    "useful",
    "mobile",
    "devices",
    "another",
    "strategy",
    "100",
    "screen",
    "height",
    "screen",
    "height",
    "different",
    "mobile",
    "device",
    "versus",
    "desktop",
    "actually",
    "get",
    "little",
    "padding",
    "bottom",
    "prefer",
    "height",
    "hundred",
    "percent",
    "anyways",
    "main",
    "point",
    "giving",
    "background",
    "color",
    "actually",
    "kind",
    "mistake",
    "original",
    "putting",
    "css",
    "variable",
    "right",
    "come",
    "back",
    "looks",
    "like",
    "got",
    "background",
    "matching",
    "looks",
    "good",
    "start",
    "initialize",
    "grid",
    "moment",
    "able",
    "find",
    "main",
    "grid",
    "items",
    "showing",
    "need",
    "give",
    "space",
    "within",
    "document",
    "start",
    "work",
    "wanted",
    "quickest",
    "way",
    "come",
    "go",
    "right",
    "grid",
    "select",
    "div",
    "within",
    "grid",
    "class",
    "let",
    "give",
    "height",
    "20",
    "pixels",
    "width",
    "20",
    "pixels",
    "get",
    "rid",
    "moment",
    "oh",
    "also",
    "need",
    "give",
    "background",
    "color",
    "let",
    "say",
    "red",
    "something",
    "annoying",
    "see",
    "grid",
    "items",
    "could",
    "also",
    "give",
    "know",
    "margin",
    "10",
    "pixels",
    "start",
    "see",
    "separation",
    "right",
    "grid",
    "items",
    "obviously",
    "look",
    "near",
    "want",
    "need",
    "set",
    "boundaries",
    "grid",
    "rather",
    "height",
    "width",
    "actually",
    "dictate",
    "large",
    "items",
    "using",
    "grid",
    "container",
    "look",
    "original",
    "css",
    "built",
    "see",
    "grid",
    "container",
    "template",
    "columns",
    "template",
    "rows",
    "grid",
    "gap",
    "let",
    "start",
    "columns",
    "copy",
    "going",
    "say",
    "repeat",
    "three",
    "times",
    "80",
    "pixels",
    "means",
    "column",
    "going",
    "80",
    "pixels",
    "wide",
    "let",
    "save",
    "start",
    "see",
    "got",
    "columns",
    "going",
    "immediately",
    "see",
    "added",
    "one",
    "many",
    "div",
    "elements",
    "come",
    "delete",
    "perfect",
    "grid",
    "right",
    "come",
    "back",
    "css",
    "add",
    "template",
    "rows",
    "template",
    "rows",
    "going",
    "little",
    "bit",
    "different",
    "explain",
    "second",
    "copy",
    "saying",
    "first",
    "row",
    "going",
    "50",
    "pixels",
    "tall",
    "going",
    "three",
    "rows",
    "repeating",
    "three",
    "times",
    "next",
    "three",
    "rows",
    "going",
    "80",
    "pixels",
    "tall",
    "correspond",
    "columns",
    "perfect",
    "squares",
    "final",
    "row",
    "kind",
    "like",
    "scoreboard",
    "bottom",
    "60",
    "pixels",
    "high",
    "save",
    "see",
    "expressed",
    "within",
    "grid",
    "believe",
    "actually",
    "need",
    "grid",
    "items",
    "sorry",
    "hard",
    "count",
    "teaching",
    "let",
    "make",
    "three",
    "think",
    "getting",
    "looking",
    "get",
    "rid",
    "um",
    "explicit",
    "height",
    "width",
    "items",
    "grid",
    "take",
    "care",
    "see",
    "got",
    "skeleton",
    "grid",
    "let",
    "go",
    "ahead",
    "start",
    "isolating",
    "things",
    "want",
    "maybe",
    "style",
    "top",
    "row",
    "different",
    "color",
    "main",
    "grid",
    "scoreboard",
    "bottom",
    "evolve",
    "change",
    "kind",
    "demonstrate",
    "concepts",
    "going",
    "quickly",
    "put",
    "something",
    "top",
    "three",
    "going",
    "hit",
    "option",
    "click",
    "vs",
    "code",
    "allow",
    "us",
    "click",
    "three",
    "things",
    "give",
    "first",
    "ones",
    "class",
    "turn",
    "come",
    "give",
    "divs",
    "class",
    "square",
    "many",
    "three",
    "six",
    "nine",
    "class",
    "equals",
    "square",
    "finally",
    "bottom",
    "going",
    "give",
    "class",
    "oops",
    "clicking",
    "many",
    "things",
    "give",
    "class",
    "score",
    "okay",
    "come",
    "back",
    "instead",
    "grid",
    "selecting",
    "divs",
    "grid",
    "items",
    "select",
    "based",
    "let",
    "get",
    "rid",
    "margin",
    "also",
    "gap",
    "go",
    "ahead",
    "add",
    "gap",
    "five",
    "pixels",
    "every",
    "grid",
    "item",
    "everything",
    "spaced",
    "evenly",
    "instead",
    "going",
    "say",
    "um",
    "uh",
    "turn",
    "top",
    "row",
    "square",
    "middle",
    "one",
    "score",
    "bottom",
    "give",
    "different",
    "background",
    "colors",
    "squares",
    "stay",
    "red",
    "make",
    "turn",
    "ones",
    "green",
    "score",
    "blue",
    "bottom",
    "save",
    "come",
    "back",
    "got",
    "highlighted",
    "little",
    "bit",
    "differently",
    "look",
    "final",
    "see",
    "matches",
    "almost",
    "perfectly",
    "little",
    "turn",
    "indicator",
    "seems",
    "take",
    "two",
    "full",
    "columns",
    "order",
    "get",
    "working",
    "actually",
    "within",
    "child",
    "grid",
    "item",
    "tell",
    "many",
    "columns",
    "span",
    "actually",
    "go",
    "html",
    "um",
    "highlight",
    "remove",
    "one",
    "div",
    "items",
    "keep",
    "turn",
    "actions",
    "little",
    "drop",
    "turn",
    "indicator",
    "let",
    "save",
    "kind",
    "messed",
    "point",
    "red",
    "actions",
    "menu",
    "go",
    "css",
    "let",
    "go",
    "actions",
    "call",
    "actions",
    "yep",
    "background",
    "color",
    "know",
    "um",
    "let",
    "go",
    "purple",
    "like",
    "finally",
    "turn",
    "going",
    "stay",
    "green",
    "going",
    "say",
    "grid",
    "column",
    "start",
    "going",
    "one",
    "going",
    "start",
    "first",
    "column",
    "grid",
    "column",
    "end",
    "going",
    "three",
    "spans",
    "two",
    "columns",
    "wide",
    "able",
    "go",
    "back",
    "see",
    "green",
    "taking",
    "two",
    "full",
    "columns",
    "got",
    "actions",
    "top",
    "right",
    "scoreboard",
    "bottom",
    "grid",
    "middle",
    "compare",
    "right",
    "final",
    "pretty",
    "much",
    "happening",
    "two",
    "spaces",
    "actions",
    "full",
    "grid",
    "scoreboard",
    "bottom",
    "hardest",
    "first",
    "step",
    "building",
    "sort",
    "project",
    "like",
    "nail",
    "layout",
    "start",
    "know",
    "making",
    "look",
    "little",
    "bit",
    "better",
    "arranging",
    "screen",
    "going",
    "keep",
    "looking",
    "like",
    "going",
    "continue",
    "process",
    "get",
    "centered",
    "within",
    "document",
    "also",
    "make",
    "sure",
    "resize",
    "things",
    "know",
    "see",
    "resize",
    "small",
    "device",
    "kind",
    "breaks",
    "going",
    "make",
    "sure",
    "resizes",
    "appropriately",
    "take",
    "look",
    "underlying",
    "html",
    "got",
    "going",
    "let",
    "make",
    "little",
    "bit",
    "larger",
    "see",
    "got",
    "main",
    "container",
    "sitting",
    "body",
    "container",
    "wanted",
    "center",
    "main",
    "container",
    "really",
    "would",
    "go",
    "body",
    "element",
    "believe",
    "display",
    "flex",
    "justify",
    "content",
    "center",
    "align",
    "items",
    "center",
    "see",
    "brings",
    "everything",
    "middle",
    "screen",
    "generally",
    "going",
    "come",
    "back",
    "project",
    "look",
    "original",
    "completed",
    "version",
    "go",
    "css",
    "see",
    "body",
    "element",
    "done",
    "displayed",
    "flex",
    "set",
    "flex",
    "direction",
    "column",
    "going",
    "rather",
    "left",
    "right",
    "basically",
    "aligning",
    "everything",
    "center",
    "copy",
    "snippet",
    "completed",
    "css",
    "bring",
    "top",
    "right",
    "html",
    "body",
    "save",
    "refresh",
    "see",
    "looks",
    "similar",
    "last",
    "thing",
    "need",
    "see",
    "footer",
    "bottom",
    "added",
    "little",
    "attribution",
    "bottom",
    "provides",
    "spacing",
    "pushes",
    "grid",
    "little",
    "bit",
    "quickly",
    "go",
    "add",
    "come",
    "final",
    "uh",
    "final",
    "project",
    "going",
    "copy",
    "footer",
    "markup",
    "relatively",
    "simple",
    "really",
    "add",
    "whole",
    "lot",
    "going",
    "copy",
    "verbatim",
    "put",
    "main",
    "tag",
    "remember",
    "footer",
    "repeated",
    "content",
    "added",
    "pages",
    "would",
    "probably",
    "every",
    "page",
    "belong",
    "main",
    "content",
    "page",
    "save",
    "let",
    "see",
    "looking",
    "like",
    "see",
    "footer",
    "added",
    "look",
    "good",
    "added",
    "styles",
    "yet",
    "let",
    "go",
    "back",
    "completed",
    "one",
    "section",
    "bottom",
    "styles",
    "footer",
    "let",
    "see",
    "right",
    "copy",
    "styles",
    "um",
    "current",
    "working",
    "css",
    "let",
    "go",
    "ahead",
    "say",
    "footer",
    "styles",
    "copy",
    "hopefully",
    "start",
    "look",
    "little",
    "bit",
    "better",
    "got",
    "workings",
    "project",
    "pretty",
    "much",
    "skeleton",
    "things",
    "last",
    "thing",
    "need",
    "make",
    "sure",
    "resizes",
    "appropriately",
    "mobile",
    "device",
    "versus",
    "larger",
    "desktop",
    "device",
    "also",
    "go",
    "final",
    "project",
    "point",
    "happening",
    "see",
    "right",
    "media",
    "selector",
    "talked",
    "responsive",
    "web",
    "design",
    "uh",
    "video",
    "done",
    "past",
    "front",
    "end",
    "series",
    "basically",
    "saying",
    "want",
    "grid",
    "container",
    "resize",
    "little",
    "bit",
    "differently",
    "based",
    "screen",
    "rule",
    "saying",
    "screen",
    "768",
    "pixels",
    "higher",
    "basically",
    "like",
    "tablet",
    "desktop",
    "device",
    "want",
    "grid",
    "width",
    "explicit",
    "width",
    "490",
    "pixels",
    "know",
    "enough",
    "space",
    "want",
    "explicitly",
    "set",
    "columns",
    "rows",
    "different",
    "size",
    "originals",
    "right",
    "select",
    "one",
    "squares",
    "80",
    "see",
    "hover",
    "80",
    "desktop",
    "device",
    "got",
    "space",
    "would",
    "want",
    "150",
    "let",
    "go",
    "ahead",
    "copy",
    "paste",
    "right",
    "main",
    "grid",
    "selector",
    "essentially",
    "mobile",
    "styles",
    "desktop",
    "styles",
    "refresh",
    "still",
    "mobile",
    "device",
    "scenario",
    "looks",
    "lot",
    "smaller",
    "yes",
    "cut",
    "eventually",
    "really",
    "mobile",
    "devices",
    "small",
    "would",
    "look",
    "like",
    "resize",
    "see",
    "jump",
    "let",
    "go",
    "responsive",
    "mode",
    "see",
    "little",
    "bit",
    "better",
    "watch",
    "see",
    "hit",
    "768",
    "right",
    "resizes",
    "much",
    "bigger",
    "game",
    "work",
    "desktop",
    "devices",
    "right",
    "point",
    "bulk",
    "um",
    "html",
    "css",
    "structure",
    "project",
    "rest",
    "work",
    "need",
    "primarily",
    "going",
    "details",
    "finessing",
    "look",
    "feel",
    "matches",
    "final",
    "product",
    "see",
    "got",
    "drop",
    "menu",
    "going",
    "controlled",
    "javascript",
    "see",
    "hover",
    "square",
    "kind",
    "uh",
    "gets",
    "little",
    "bit",
    "darker",
    "got",
    "pointer",
    "cursor",
    "see",
    "mouse",
    "little",
    "different",
    "depending",
    "clickable",
    "element",
    "course",
    "take",
    "turn",
    "watch",
    "little",
    "animation",
    "kind",
    "zooms",
    "slides",
    "little",
    "details",
    "need",
    "add",
    "like",
    "said",
    "done",
    "lot",
    "lot",
    "html",
    "css",
    "work",
    "prior",
    "videos",
    "main",
    "focus",
    "one",
    "going",
    "kind",
    "javascript",
    "side",
    "walk",
    "next",
    "several",
    "minutes",
    "take",
    "right",
    "turn",
    "intentionally",
    "moving",
    "bit",
    "quicker",
    "normal",
    "sure",
    "pause",
    "video",
    "see",
    "something",
    "know",
    "make",
    "sense",
    "kind",
    "walk",
    "understand",
    "know",
    "happening",
    "going",
    "basically",
    "referencing",
    "original",
    "css",
    "document",
    "html",
    "going",
    "progressively",
    "building",
    "try",
    "walk",
    "thought",
    "process",
    "go",
    "heads",
    "going",
    "bit",
    "quicker",
    "usual",
    "first",
    "thing",
    "want",
    "tackle",
    "green",
    "area",
    "animated",
    "turn",
    "indicator",
    "obviously",
    "going",
    "controlled",
    "javascript",
    "point",
    "want",
    "get",
    "animation",
    "right",
    "order",
    "let",
    "close",
    "things",
    "working",
    "css",
    "document",
    "working",
    "html",
    "document",
    "think",
    "going",
    "keep",
    "completed",
    "css",
    "right",
    "well",
    "completed",
    "html",
    "right",
    "close",
    "left",
    "working",
    "project",
    "right",
    "reference",
    "final",
    "one",
    "um",
    "try",
    "kind",
    "hide",
    "little",
    "bit",
    "reference",
    "okay",
    "working",
    "div",
    "right",
    "let",
    "go",
    "ahead",
    "put",
    "placeholder",
    "content",
    "see",
    "going",
    "placeholder",
    "going",
    "go",
    "back",
    "larger",
    "mode",
    "first",
    "thing",
    "need",
    "get",
    "centered",
    "get",
    "text",
    "looking",
    "good",
    "come",
    "final",
    "project",
    "see",
    "turn",
    "class",
    "right",
    "within",
    "turn",
    "class",
    "going",
    "font",
    "awesome",
    "icons",
    "turn",
    "indicator",
    "copy",
    "notice",
    "classes",
    "fa",
    "solid",
    "fax",
    "provided",
    "something",
    "added",
    "head",
    "document",
    "yet",
    "need",
    "taken",
    "originally",
    "uh",
    "yvonne",
    "submitted",
    "project",
    "put",
    "font",
    "awesome",
    "uh",
    "kit",
    "copy",
    "script",
    "right",
    "style",
    "sheet",
    "add",
    "classes",
    "actually",
    "show",
    "within",
    "document",
    "give",
    "icon",
    "work",
    "added",
    "script",
    "show",
    "see",
    "little",
    "x",
    "right",
    "know",
    "icons",
    "working",
    "finally",
    "need",
    "style",
    "see",
    "original",
    "got",
    "turn",
    "class",
    "need",
    "go",
    "ctrl",
    "f",
    "find",
    "uh",
    "let",
    "see",
    "turn",
    "class",
    "okay",
    "copy",
    "styles",
    "got",
    "already",
    "looks",
    "like",
    "got",
    "um",
    "background",
    "color",
    "going",
    "keep",
    "want",
    "actually",
    "display",
    "flex",
    "container",
    "um",
    "center",
    "alignment",
    "items",
    "gap",
    "thing",
    "need",
    "add",
    "need",
    "align",
    "going",
    "tell",
    "um",
    "grid",
    "align",
    "things",
    "really",
    "development",
    "background",
    "colors",
    "tells",
    "align",
    "within",
    "grid",
    "specification",
    "content",
    "within",
    "container",
    "going",
    "aligned",
    "come",
    "back",
    "see",
    "looking",
    "little",
    "bit",
    "better",
    "remove",
    "background",
    "color",
    "see",
    "things",
    "looking",
    "great",
    "exactly",
    "alignment",
    "positioning",
    "final",
    "one",
    "obviously",
    "different",
    "colors",
    "going",
    "going",
    "controlling",
    "lot",
    "javascript",
    "move",
    "point",
    "moment",
    "going",
    "turn",
    "uh",
    "let",
    "make",
    "yellow",
    "text",
    "give",
    "color",
    "use",
    "one",
    "variables",
    "remember",
    "defined",
    "variable",
    "yellow",
    "top",
    "root",
    "able",
    "throw",
    "get",
    "yellow",
    "color",
    "right",
    "need",
    "animate",
    "order",
    "little",
    "bit",
    "intermediate",
    "level",
    "css",
    "stuff",
    "order",
    "need",
    "add",
    "keyframes",
    "um",
    "animation",
    "animate",
    "icon",
    "text",
    "first",
    "though",
    "see",
    "selectors",
    "icon",
    "selectors",
    "text",
    "going",
    "copy",
    "right",
    "turn",
    "got",
    "paragraph",
    "text",
    "icon",
    "text",
    "going",
    "get",
    "rid",
    "animation",
    "stuff",
    "second",
    "save",
    "see",
    "got",
    "looking",
    "lot",
    "closer",
    "going",
    "need",
    "animation",
    "animation",
    "first",
    "specify",
    "animation",
    "name",
    "animation",
    "property",
    "css",
    "property",
    "give",
    "duration",
    "behavior",
    "want",
    "course",
    "reference",
    "icon",
    "start",
    "going",
    "um",
    "animation",
    "makes",
    "kind",
    "pop",
    "get",
    "little",
    "bit",
    "bigger",
    "smaller",
    "see",
    "referenced",
    "turn",
    "icon",
    "animation",
    "arbitrary",
    "value",
    "actually",
    "defined",
    "keyframes",
    "uh",
    "selector",
    "right",
    "matches",
    "need",
    "match",
    "right",
    "referencing",
    "keyframes",
    "saying",
    "zero",
    "percent",
    "duration",
    "going",
    "scale",
    "hundred",
    "percent",
    "25",
    "percent",
    "animation",
    "scale",
    "140",
    "percent",
    "finally",
    "done",
    "scale",
    "back",
    "hundred",
    "percent",
    "kind",
    "pops",
    "comes",
    "save",
    "able",
    "see",
    "every",
    "time",
    "refresh",
    "see",
    "little",
    "icon",
    "popping",
    "every",
    "time",
    "reloads",
    "icon",
    "going",
    "complete",
    "thing",
    "applies",
    "text",
    "want",
    "text",
    "right",
    "popping",
    "right",
    "staying",
    "one",
    "place",
    "final",
    "see",
    "happens",
    "text",
    "kind",
    "fades",
    "left",
    "animates",
    "get",
    "work",
    "um",
    "need",
    "copy",
    "animation",
    "find",
    "paragraph",
    "turn",
    "selector",
    "copy",
    "right",
    "going",
    "animation",
    "time",
    "icon",
    "match",
    "type",
    "behavior",
    "turn",
    "text",
    "animation",
    "exist",
    "yet",
    "need",
    "copy",
    "keyframe",
    "right",
    "defined",
    "keyframes",
    "keyframes",
    "turn",
    "text",
    "animation",
    "see",
    "transforming",
    "zero",
    "percent",
    "negative",
    "20",
    "pixels",
    "kind",
    "pull",
    "left",
    "20",
    "pixels",
    "animation",
    "animates",
    "translate",
    "go",
    "back",
    "original",
    "positioning",
    "final",
    "position",
    "want",
    "turn",
    "text",
    "animation",
    "references",
    "key",
    "right",
    "save",
    "every",
    "time",
    "refresh",
    "see",
    "animation",
    "happening",
    "really",
    "nicely",
    "got",
    "indicator",
    "done",
    "obviously",
    "gotten",
    "x",
    "forth",
    "going",
    "controlled",
    "javascript",
    "quite",
    "yet",
    "next",
    "thing",
    "build",
    "actions",
    "menu",
    "controlled",
    "javascript",
    "toggle",
    "open",
    "close",
    "behavior",
    "put",
    "placeholder",
    "styled",
    "like",
    "click",
    "wo",
    "anything",
    "order",
    "get",
    "come",
    "back",
    "original",
    "let",
    "come",
    "back",
    "original",
    "document",
    "completed",
    "one",
    "see",
    "called",
    "menu",
    "got",
    "markup",
    "within",
    "got",
    "button",
    "going",
    "actually",
    "shown",
    "going",
    "popover",
    "initial",
    "initially",
    "hidden",
    "click",
    "button",
    "going",
    "show",
    "hide",
    "every",
    "time",
    "click",
    "copy",
    "markup",
    "think",
    "named",
    "something",
    "differently",
    "yeah",
    "gave",
    "name",
    "actions",
    "right",
    "update",
    "css",
    "let",
    "see",
    "drop",
    "menu",
    "turn",
    "comment",
    "turn",
    "indicator",
    "oops",
    "deleted",
    "going",
    "game",
    "board",
    "finally",
    "scoreboard",
    "little",
    "bit",
    "organization",
    "going",
    "actually",
    "comment",
    "popover",
    "minute",
    "work",
    "button",
    "save",
    "right",
    "going",
    "show",
    "well",
    "showing",
    "like",
    "click",
    "nothing",
    "happens",
    "correct",
    "icon",
    "correct",
    "text",
    "need",
    "actually",
    "center",
    "style",
    "see",
    "given",
    "menu",
    "class",
    "original",
    "go",
    "find",
    "um",
    "given",
    "menu",
    "class",
    "position",
    "relative",
    "reason",
    "um",
    "need",
    "popover",
    "opens",
    "relative",
    "reference",
    "knows",
    "open",
    "relative",
    "dom",
    "going",
    "absolute",
    "positioning",
    "put",
    "put",
    "got",
    "turn",
    "stuff",
    "let",
    "make",
    "different",
    "section",
    "menu",
    "styles",
    "trying",
    "keep",
    "straight",
    "everyone",
    "give",
    "position",
    "relative",
    "going",
    "anything",
    "still",
    "going",
    "look",
    "add",
    "menu",
    "items",
    "go",
    "back",
    "markup",
    "html",
    "see",
    "items",
    "commented",
    "quite",
    "ready",
    "let",
    "see",
    "need",
    "style",
    "menu",
    "button",
    "right",
    "get",
    "rid",
    "moment",
    "going",
    "come",
    "later",
    "well",
    "data",
    "id",
    "want",
    "add",
    "anything",
    "earlier",
    "applies",
    "thing",
    "styled",
    "menu",
    "button",
    "let",
    "find",
    "completed",
    "style",
    "let",
    "copy",
    "right",
    "menu",
    "see",
    "want",
    "hundred",
    "percent",
    "width",
    "height",
    "container",
    "remember",
    "original",
    "container",
    "working",
    "highlighted",
    "one",
    "grid",
    "item",
    "say",
    "hundred",
    "percent",
    "gon",
    "na",
    "150",
    "going",
    "display",
    "flex",
    "items",
    "within",
    "going",
    "flex",
    "items",
    "going",
    "give",
    "space",
    "around",
    "justify",
    "center",
    "let",
    "go",
    "ahead",
    "show",
    "looks",
    "like",
    "see",
    "got",
    "menu",
    "item",
    "looking",
    "lot",
    "better",
    "got",
    "wrong",
    "styles",
    "getting",
    "closer",
    "let",
    "come",
    "uncomment",
    "going",
    "give",
    "background",
    "color",
    "believe",
    "like",
    "color",
    "fit",
    "color",
    "scheme",
    "defining",
    "without",
    "variable",
    "want",
    "text",
    "white",
    "want",
    "give",
    "border",
    "make",
    "border",
    "rounded",
    "little",
    "bit",
    "go",
    "ahead",
    "save",
    "save",
    "html",
    "see",
    "actions",
    "menu",
    "looking",
    "exactly",
    "one",
    "final",
    "thing",
    "um",
    "ca",
    "javascript",
    "functionality",
    "yet",
    "still",
    "uh",
    "kind",
    "mock",
    "menu",
    "looks",
    "like",
    "click",
    "open",
    "menu",
    "still",
    "build",
    "even",
    "though",
    "javascript",
    "need",
    "uncomment",
    "div",
    "moment",
    "styled",
    "classes",
    "going",
    "look",
    "weird",
    "going",
    "see",
    "right",
    "actions",
    "menu",
    "want",
    "make",
    "items",
    "class",
    "importantly",
    "going",
    "hidden",
    "initially",
    "javascript",
    "going",
    "responsible",
    "unhiding",
    "going",
    "let",
    "go",
    "ahead",
    "remove",
    "well",
    "let",
    "keep",
    "define",
    "items",
    "class",
    "search",
    "items",
    "right",
    "menu",
    "items",
    "actually",
    "selected",
    "element",
    "items",
    "class",
    "within",
    "uh",
    "element",
    "menu",
    "class",
    "really",
    "could",
    "copy",
    "items",
    "directly",
    "additional",
    "styles",
    "going",
    "got",
    "menu",
    "button",
    "always",
    "going",
    "show",
    "items",
    "going",
    "items",
    "click",
    "expanded",
    "couple",
    "really",
    "important",
    "things",
    "going",
    "first",
    "thing",
    "position",
    "absolute",
    "items",
    "within",
    "menu",
    "class",
    "absolute",
    "positioning",
    "going",
    "relative",
    "nearest",
    "parent",
    "element",
    "relative",
    "position",
    "see",
    "given",
    "menu",
    "relative",
    "position",
    "items",
    "going",
    "positioned",
    "absolutely",
    "relative",
    "menu",
    "element",
    "little",
    "bit",
    "confusing",
    "gone",
    "prior",
    "videos",
    "series",
    "built",
    "want",
    "give",
    "absolute",
    "positioning",
    "z",
    "index",
    "10",
    "means",
    "sit",
    "grid",
    "items",
    "want",
    "go",
    "behind",
    "top",
    "60",
    "pixels",
    "offset",
    "button",
    "show",
    "looks",
    "like",
    "let",
    "go",
    "ahead",
    "look",
    "styles",
    "right",
    "um",
    "actually",
    "let",
    "let",
    "go",
    "ahead",
    "take",
    "everything",
    "except",
    "absolute",
    "positioning",
    "okay",
    "absolute",
    "position",
    "see",
    "nothing",
    "really",
    "happened",
    "quite",
    "yet",
    "uncomment",
    "rest",
    "stuff",
    "um",
    "let",
    "go",
    "ahead",
    "comment",
    "second",
    "going",
    "give",
    "actual",
    "positioning",
    "want",
    "going",
    "see",
    "things",
    "looking",
    "little",
    "bit",
    "better",
    "positioning",
    "going",
    "relative",
    "right",
    "top",
    "left",
    "corner",
    "see",
    "total",
    "height",
    "button",
    "50",
    "pixels",
    "gave",
    "offset",
    "60",
    "pixels",
    "top",
    "offset",
    "50",
    "pixels",
    "get",
    "bottom",
    "button",
    "another",
    "10",
    "pixels",
    "give",
    "little",
    "gap",
    "seeing",
    "right",
    "course",
    "need",
    "give",
    "background",
    "color",
    "rounded",
    "border",
    "radius",
    "padding",
    "within",
    "container",
    "see",
    "looking",
    "little",
    "bit",
    "better",
    "still",
    "styled",
    "buttons",
    "within",
    "um",
    "finally",
    "add",
    "z",
    "index",
    "want",
    "make",
    "sure",
    "sitting",
    "top",
    "items",
    "last",
    "thing",
    "need",
    "style",
    "buttons",
    "look",
    "good",
    "see",
    "super",
    "well",
    "styled",
    "anything",
    "look",
    "little",
    "bit",
    "better",
    "html",
    "see",
    "got",
    "reset",
    "button",
    "new",
    "round",
    "button",
    "data",
    "ids",
    "going",
    "get",
    "rid",
    "need",
    "quite",
    "yet",
    "going",
    "style",
    "based",
    "uh",
    "parent",
    "going",
    "look",
    "menu",
    "items",
    "within",
    "menu",
    "button",
    "within",
    "going",
    "styled",
    "like",
    "actually",
    "remove",
    "menu",
    "still",
    "work",
    "buttons",
    "relative",
    "items",
    "save",
    "see",
    "buttons",
    "looking",
    "little",
    "bit",
    "better",
    "although",
    "see",
    "like",
    "hover",
    "effects",
    "want",
    "cursor",
    "become",
    "pointer",
    "user",
    "knows",
    "click",
    "going",
    "need",
    "hover",
    "styles",
    "pop",
    "going",
    "underline",
    "text",
    "give",
    "cursor",
    "pointer",
    "see",
    "looks",
    "little",
    "bit",
    "better",
    "regard",
    "see",
    "border",
    "around",
    "button",
    "final",
    "actually",
    "click",
    "click",
    "focused",
    "everything",
    "going",
    "border",
    "wait",
    "javascript",
    "see",
    "everything",
    "aligned",
    "correctly",
    "last",
    "thing",
    "need",
    "create",
    "hidden",
    "class",
    "see",
    "got",
    "hidden",
    "class",
    "border",
    "class",
    "shared",
    "styles",
    "would",
    "use",
    "across",
    "multiple",
    "elements",
    "put",
    "shared",
    "utility",
    "classes",
    "within",
    "css",
    "file",
    "bring",
    "top",
    "put",
    "right",
    "body",
    "shared",
    "utility",
    "classes",
    "going",
    "copy",
    "right",
    "come",
    "back",
    "future",
    "copy",
    "hidden",
    "class",
    "displays",
    "none",
    "important",
    "make",
    "sure",
    "nothing",
    "conflicts",
    "shortcuts",
    "yellow",
    "turquoise",
    "little",
    "bit",
    "easier",
    "get",
    "javascript",
    "standard",
    "borders",
    "shadows",
    "putting",
    "different",
    "elements",
    "add",
    "see",
    "given",
    "two",
    "classes",
    "put",
    "hide",
    "menu",
    "go",
    "ahead",
    "remove",
    "hidden",
    "right",
    "showing",
    "back",
    "border",
    "want",
    "hidden",
    "javascript",
    "unhide",
    "us",
    "implement",
    "right",
    "point",
    "see",
    "got",
    "conflicting",
    "styles",
    "going",
    "sure",
    "come",
    "back",
    "handle",
    "javascript",
    "well",
    "actions",
    "menu",
    "ca",
    "really",
    "anything",
    "moment",
    "really",
    "clickable",
    "need",
    "javascript",
    "enable",
    "done",
    "first",
    "kind",
    "row",
    "grid",
    "squares",
    "game",
    "board",
    "squares",
    "relatively",
    "easy",
    "style",
    "let",
    "get",
    "real",
    "quick",
    "uh",
    "game",
    "board",
    "let",
    "go",
    "ahead",
    "look",
    "reference",
    "um",
    "final",
    "one",
    "see",
    "given",
    "square",
    "class",
    "dictates",
    "styles",
    "put",
    "shadow",
    "remember",
    "defined",
    "shared",
    "utility",
    "classes",
    "defined",
    "shared",
    "shadow",
    "class",
    "apply",
    "everything",
    "kind",
    "keeping",
    "code",
    "dry",
    "making",
    "sure",
    "repeating",
    "much",
    "add",
    "going",
    "hit",
    "hold",
    "option",
    "click",
    "within",
    "vs",
    "code",
    "select",
    "multiple",
    "add",
    "shadow",
    "class",
    "furthermore",
    "going",
    "want",
    "give",
    "need",
    "ids",
    "quite",
    "yet",
    "come",
    "add",
    "javascript",
    "let",
    "save",
    "finally",
    "get",
    "rid",
    "background",
    "red",
    "wherever",
    "put",
    "squares",
    "want",
    "background",
    "color",
    "anymore",
    "want",
    "much",
    "nicer",
    "looking",
    "one",
    "see",
    "square",
    "colors",
    "wanted",
    "span",
    "100",
    "width",
    "height",
    "container",
    "see",
    "um",
    "going",
    "grid",
    "item",
    "want",
    "span",
    "100",
    "think",
    "actually",
    "necessary",
    "looking",
    "grid",
    "control",
    "let",
    "go",
    "ahead",
    "copy",
    "gray",
    "background",
    "going",
    "put",
    "little",
    "rounded",
    "border",
    "going",
    "make",
    "sure",
    "content",
    "within",
    "flex",
    "container",
    "content",
    "centered",
    "within",
    "font",
    "size",
    "going",
    "three",
    "rems",
    "want",
    "icons",
    "sitting",
    "within",
    "extra",
    "large",
    "copy",
    "square",
    "class",
    "save",
    "board",
    "started",
    "look",
    "lot",
    "better",
    "see",
    "got",
    "shadows",
    "see",
    "final",
    "thing",
    "missing",
    "hover",
    "anything",
    "feel",
    "like",
    "user",
    "click",
    "order",
    "cover",
    "need",
    "hover",
    "styles",
    "hover",
    "style",
    "square",
    "copy",
    "want",
    "give",
    "cursor",
    "pointer",
    "90",
    "opacity",
    "hover",
    "going",
    "act",
    "like",
    "actually",
    "clickable",
    "going",
    "leave",
    "icons",
    "kind",
    "moment",
    "going",
    "controlled",
    "javascript",
    "actually",
    "click",
    "um",
    "last",
    "thing",
    "scoreboard",
    "bottom",
    "relatively",
    "simple",
    "markup",
    "look",
    "final",
    "project",
    "see",
    "um",
    "got",
    "basic",
    "html",
    "bunch",
    "div",
    "containers",
    "paragraph",
    "text",
    "little",
    "styled",
    "scoreboard",
    "shows",
    "many",
    "wins",
    "going",
    "copy",
    "stuff",
    "verbatim",
    "complicated",
    "read",
    "put",
    "scoreboard",
    "section",
    "already",
    "implemented",
    "shadow",
    "class",
    "shared",
    "styles",
    "added",
    "inline",
    "style",
    "color",
    "mainly",
    "easier",
    "read",
    "easier",
    "see",
    "within",
    "html",
    "color",
    "rather",
    "making",
    "different",
    "class",
    "could",
    "whatever",
    "could",
    "add",
    "thought",
    "little",
    "straightforward",
    "read",
    "let",
    "get",
    "rid",
    "data",
    "ids",
    "moment",
    "applicable",
    "get",
    "javascript",
    "scoreboard",
    "last",
    "thing",
    "need",
    "implement",
    "score",
    "class",
    "come",
    "see",
    "nothing",
    "looks",
    "good",
    "got",
    "different",
    "colors",
    "centering",
    "text",
    "styling",
    "text",
    "anything",
    "like",
    "need",
    "score",
    "class",
    "implemented",
    "go",
    "find",
    "final",
    "um",
    "right",
    "score",
    "class",
    "going",
    "replace",
    "background",
    "color",
    "blue",
    "oops",
    "need",
    "get",
    "rid",
    "okay",
    "going",
    "display",
    "flex",
    "uh",
    "box",
    "flex",
    "container",
    "going",
    "give",
    "top",
    "bottom",
    "flex",
    "direction",
    "going",
    "justify",
    "content",
    "align",
    "content",
    "center",
    "giving",
    "height",
    "60",
    "pixels",
    "think",
    "probably",
    "left",
    "stuff",
    "grid",
    "dictating",
    "going",
    "give",
    "little",
    "border",
    "radius",
    "rounded",
    "let",
    "save",
    "see",
    "things",
    "show",
    "uh",
    "okay",
    "last",
    "thing",
    "need",
    "text",
    "obviously",
    "styled",
    "well",
    "yet",
    "compared",
    "final",
    "see",
    "little",
    "bold",
    "style",
    "title",
    "number",
    "wins",
    "going",
    "little",
    "bit",
    "smaller",
    "going",
    "sub",
    "selectors",
    "paragraph",
    "text",
    "within",
    "score",
    "box",
    "going",
    "font",
    "size",
    "14",
    "pixels",
    "font",
    "weight",
    "600",
    "scroll",
    "top",
    "imported",
    "google",
    "fonts",
    "see",
    "imported",
    "font",
    "weight",
    "four",
    "five",
    "six",
    "hundred",
    "allows",
    "us",
    "use",
    "font",
    "weight",
    "import",
    "going",
    "anything",
    "note",
    "span",
    "element",
    "actually",
    "show",
    "many",
    "wins",
    "person",
    "going",
    "give",
    "font",
    "size",
    "12",
    "pixels",
    "little",
    "margin",
    "top",
    "save",
    "see",
    "everything",
    "styled",
    "correctly",
    "point",
    "um",
    "looking",
    "two",
    "pretty",
    "much",
    "exact",
    "design",
    "going",
    "uh",
    "part",
    "completed",
    "html",
    "css",
    "portion",
    "let",
    "go",
    "ahead",
    "scroll",
    "final",
    "completed",
    "one",
    "make",
    "sure",
    "got",
    "everything",
    "uh",
    "matched",
    "got",
    "footer",
    "perfect",
    "uh",
    "looks",
    "like",
    "modal",
    "need",
    "still",
    "forgot",
    "get",
    "main",
    "content",
    "got",
    "scores",
    "scoreboard",
    "right",
    "got",
    "squares",
    "game",
    "board",
    "got",
    "menu",
    "implemented",
    "turns",
    "implemented",
    "think",
    "pretty",
    "much",
    "everything",
    "else",
    "done",
    "html",
    "looks",
    "good",
    "aside",
    "modal",
    "course",
    "add",
    "script",
    "get",
    "javascript",
    "section",
    "css",
    "standpoint",
    "let",
    "go",
    "top",
    "make",
    "sure",
    "got",
    "everything",
    "got",
    "import",
    "correct",
    "got",
    "styles",
    "css",
    "reset",
    "global",
    "html",
    "body",
    "styles",
    "um",
    "uh",
    "let",
    "see",
    "added",
    "global",
    "style",
    "looks",
    "like",
    "got",
    "put",
    "wrong",
    "place",
    "let",
    "go",
    "ahead",
    "add",
    "shared",
    "utility",
    "classes",
    "um",
    "really",
    "supposed",
    "utility",
    "class",
    "global",
    "forgot",
    "add",
    "grid",
    "got",
    "done",
    "responsiveness",
    "got",
    "utility",
    "classes",
    "added",
    "turn",
    "along",
    "animations",
    "added",
    "menu",
    "looks",
    "like",
    "covered",
    "got",
    "footer",
    "okay",
    "really",
    "completed",
    "everything",
    "except",
    "modal",
    "say",
    "modal",
    "talking",
    "happens",
    "someone",
    "wins",
    "game",
    "see",
    "pops",
    "uh",
    "kind",
    "focused",
    "element",
    "puts",
    "game",
    "background",
    "makes",
    "look",
    "thing",
    "click",
    "order",
    "implement",
    "obviously",
    "need",
    "javascript",
    "implement",
    "html",
    "css",
    "come",
    "back",
    "javascript",
    "available",
    "us",
    "first",
    "thing",
    "need",
    "implementing",
    "modal",
    "give",
    "html",
    "markup",
    "copy",
    "notice",
    "putting",
    "bottom",
    "footer",
    "one",
    "could",
    "argue",
    "might",
    "belong",
    "main",
    "content",
    "really",
    "going",
    "hidden",
    "initially",
    "going",
    "absolutely",
    "positioned",
    "fixed",
    "positioning",
    "think",
    "really",
    "matter",
    "document",
    "goes",
    "show",
    "correctly",
    "think",
    "one",
    "could",
    "make",
    "argument",
    "goes",
    "maine",
    "like",
    "said",
    "let",
    "go",
    "ahead",
    "stay",
    "consistent",
    "put",
    "bottom",
    "since",
    "got",
    "hidden",
    "class",
    "know",
    "display",
    "none",
    "let",
    "get",
    "rid",
    "moment",
    "want",
    "see",
    "looks",
    "like",
    "go",
    "back",
    "project",
    "see",
    "modal",
    "right",
    "bottom",
    "got",
    "p",
    "tag",
    "button",
    "says",
    "play",
    "obviously",
    "nowhere",
    "near",
    "want",
    "want",
    "centered",
    "little",
    "backdrop",
    "got",
    "css",
    "need",
    "write",
    "um",
    "see",
    "final",
    "got",
    "modal",
    "styles",
    "going",
    "copy",
    "bottom",
    "give",
    "section",
    "going",
    "comment",
    "things",
    "progressively",
    "see",
    "things",
    "okay",
    "got",
    "everything",
    "copied",
    "first",
    "thing",
    "need",
    "target",
    "container",
    "div",
    "container",
    "class",
    "modal",
    "modal",
    "container",
    "giving",
    "display",
    "property",
    "flex",
    "positioning",
    "fixed",
    "fixed",
    "positioning",
    "relative",
    "entire",
    "document",
    "viewport",
    "probably",
    "say",
    "looking",
    "viewport",
    "entire",
    "screen",
    "viewport",
    "going",
    "relative",
    "entire",
    "viewport",
    "well",
    "something",
    "like",
    "absolute",
    "positioning",
    "relative",
    "nearest",
    "relatively",
    "displayed",
    "element",
    "case",
    "since",
    "full",
    "screen",
    "takeover",
    "want",
    "position",
    "fixed",
    "want",
    "give",
    "width",
    "height",
    "hundred",
    "percent",
    "work",
    "top",
    "given",
    "html",
    "body",
    "height",
    "100",
    "automatically",
    "going",
    "expand",
    "width",
    "hundred",
    "percent",
    "based",
    "block",
    "elements",
    "displayed",
    "giving",
    "stuff",
    "display",
    "flex",
    "even",
    "need",
    "yet",
    "position",
    "fixed",
    "100",
    "height",
    "100",
    "let",
    "save",
    "see",
    "moved",
    "takeover",
    "modal",
    "spans",
    "entire",
    "screen",
    "see",
    "want",
    "take",
    "content",
    "put",
    "right",
    "middle",
    "give",
    "styles",
    "need",
    "uncomment",
    "justify",
    "content",
    "align",
    "items",
    "also",
    "display",
    "flex",
    "really",
    "need",
    "bring",
    "functionality",
    "see",
    "together",
    "display",
    "flex",
    "see",
    "right",
    "middle",
    "finally",
    "give",
    "background",
    "color",
    "really",
    "going",
    "start",
    "pop",
    "entire",
    "modal",
    "dark",
    "background",
    "color",
    "course",
    "need",
    "style",
    "contents",
    "modal",
    "also",
    "background",
    "color",
    "modal",
    "contents",
    "come",
    "see",
    "container",
    "within",
    "class",
    "modal",
    "contents",
    "want",
    "uncomment",
    "stuff",
    "quickly",
    "walk",
    "going",
    "um",
    "let",
    "see",
    "first",
    "thing",
    "let",
    "get",
    "rid",
    "moment",
    "height",
    "okay",
    "let",
    "get",
    "rid",
    "last",
    "ones",
    "start",
    "first",
    "thing",
    "giving",
    "container",
    "height",
    "150",
    "pixels",
    "width",
    "hundred",
    "percent",
    "max",
    "width",
    "300",
    "pixels",
    "words",
    "saying",
    "default",
    "want",
    "100",
    "width",
    "screen",
    "big",
    "enough",
    "wear",
    "100",
    "width",
    "larger",
    "300",
    "pixels",
    "default",
    "max",
    "width",
    "little",
    "trick",
    "use",
    "lot",
    "mobily",
    "responsive",
    "um",
    "mobile",
    "first",
    "css",
    "way",
    "look",
    "good",
    "everything",
    "let",
    "go",
    "ahead",
    "save",
    "go",
    "back",
    "see",
    "modal",
    "content",
    "coming",
    "together",
    "display",
    "show",
    "mean",
    "let",
    "go",
    "smaller",
    "device",
    "see",
    "kind",
    "resizing",
    "smaller",
    "device",
    "gets",
    "bigger",
    "one",
    "going",
    "stop",
    "right",
    "238",
    "pixels",
    "reaches",
    "300",
    "going",
    "stop",
    "getting",
    "bigger",
    "right",
    "reached",
    "300",
    "stops",
    "getting",
    "bigger",
    "stays",
    "centered",
    "little",
    "trick",
    "right",
    "want",
    "display",
    "flex",
    "basically",
    "align",
    "everything",
    "center",
    "let",
    "get",
    "rid",
    "comments",
    "right",
    "basically",
    "center",
    "everything",
    "see",
    "player",
    "one",
    "wins",
    "play",
    "centered",
    "looks",
    "good",
    "finally",
    "want",
    "give",
    "flex",
    "gap",
    "20",
    "pixels",
    "content",
    "within",
    "spacing",
    "want",
    "content",
    "text",
    "color",
    "white",
    "want",
    "whole",
    "thing",
    "margin",
    "10",
    "pixels",
    "let",
    "comment",
    "second",
    "spacing",
    "white",
    "text",
    "notice",
    "mobile",
    "device",
    "gets",
    "small",
    "pushes",
    "right",
    "edge",
    "add",
    "margin",
    "10",
    "pixels",
    "see",
    "adds",
    "little",
    "gap",
    "mobile",
    "device",
    "last",
    "thing",
    "need",
    "style",
    "button",
    "see",
    "targeted",
    "button",
    "button",
    "within",
    "modal",
    "contents",
    "giving",
    "padding",
    "10",
    "pixels",
    "background",
    "color",
    "turquoise",
    "text",
    "color",
    "something",
    "little",
    "darker",
    "rounded",
    "borders",
    "save",
    "see",
    "button",
    "nice",
    "styles",
    "modal",
    "complete",
    "give",
    "hidden",
    "class",
    "back",
    "put",
    "hidden",
    "going",
    "completely",
    "gone",
    "comment",
    "back",
    "see",
    "javascript",
    "basically",
    "going",
    "take",
    "hidden",
    "class",
    "going",
    "remove",
    "add",
    "back",
    "remove",
    "add",
    "back",
    "based",
    "someone",
    "wins",
    "game",
    "play",
    "button",
    "also",
    "trigger",
    "javascript",
    "action",
    "right",
    "know",
    "said",
    "going",
    "kind",
    "gloss",
    "lot",
    "html",
    "css",
    "sort",
    "lot",
    "copy",
    "pasting",
    "hopefully",
    "good",
    "blend",
    "know",
    "get",
    "final",
    "state",
    "typing",
    "every",
    "last",
    "little",
    "letter",
    "toggle",
    "final",
    "one",
    "final",
    "game",
    "right",
    "current",
    "game",
    "everything",
    "looks",
    "pretty",
    "much",
    "html",
    "css",
    "done",
    "obviously",
    "click",
    "anything",
    "board",
    "nothing",
    "going",
    "happen",
    "hooked",
    "javascript",
    "going",
    "actually",
    "control",
    "game",
    "um",
    "want",
    "able",
    "know",
    "make",
    "plays",
    "reset",
    "game",
    "things",
    "like",
    "point",
    "would",
    "recommend",
    "watching",
    "video",
    "take",
    "little",
    "break",
    "um",
    "going",
    "switch",
    "uh",
    "html",
    "css",
    "mode",
    "javascript",
    "mode",
    "requires",
    "little",
    "bit",
    "different",
    "type",
    "thinking",
    "javascript",
    "section",
    "something",
    "happened",
    "first",
    "starting",
    "would",
    "always",
    "asking",
    "simple",
    "question",
    "looking",
    "javascript",
    "even",
    "start",
    "like",
    "first",
    "thing",
    "think",
    "trying",
    "connect",
    "javascript",
    "functionality",
    "static",
    "html",
    "css",
    "application",
    "looking",
    "click",
    "stuff",
    "going",
    "anything",
    "question",
    "even",
    "start",
    "thinking",
    "adding",
    "event",
    "listeners",
    "know",
    "different",
    "state",
    "management",
    "happens",
    "make",
    "game",
    "work",
    "asking",
    "question",
    "think",
    "next",
    "question",
    "need",
    "ask",
    "actions",
    "user",
    "take",
    "app",
    "building",
    "game",
    "really",
    "three",
    "actions",
    "user",
    "take",
    "let",
    "go",
    "back",
    "look",
    "finished",
    "game",
    "refactor",
    "done",
    "actually",
    "working",
    "let",
    "reset",
    "everything",
    "new",
    "round",
    "get",
    "everything",
    "cleared",
    "first",
    "action",
    "user",
    "take",
    "click",
    "one",
    "squares",
    "game",
    "board",
    "know",
    "player",
    "move",
    "happening",
    "first",
    "thing",
    "need",
    "jot",
    "player",
    "make",
    "game",
    "move",
    "second",
    "thing",
    "someone",
    "actually",
    "wins",
    "game",
    "player",
    "one",
    "wins",
    "play",
    "see",
    "player",
    "one",
    "one",
    "win",
    "zero",
    "ties",
    "player",
    "two",
    "zero",
    "wins",
    "next",
    "action",
    "hit",
    "new",
    "round",
    "going",
    "clear",
    "scoreboard",
    "bottom",
    "say",
    "clear",
    "actually",
    "new",
    "round",
    "finally",
    "last",
    "thing",
    "started",
    "game",
    "want",
    "reset",
    "go",
    "reset",
    "button",
    "clear",
    "things",
    "wo",
    "touch",
    "scoreboard",
    "make",
    "new",
    "round",
    "reset",
    "current",
    "gain",
    "think",
    "application",
    "know",
    "project",
    "like",
    "great",
    "first",
    "question",
    "ask",
    "get",
    "better",
    "understanding",
    "requirements",
    "course",
    "question",
    "answered",
    "obviously",
    "start",
    "writing",
    "code",
    "make",
    "happen",
    "within",
    "static",
    "html",
    "css",
    "lot",
    "different",
    "ways",
    "approach",
    "ultimately",
    "headed",
    "end",
    "video",
    "sort",
    "model",
    "view",
    "controller",
    "pattern",
    "going",
    "help",
    "us",
    "organize",
    "code",
    "make",
    "stuff",
    "happen",
    "handle",
    "events",
    "correctly",
    "model",
    "view",
    "controller",
    "pretty",
    "common",
    "architectural",
    "pattern",
    "commonly",
    "used",
    "developing",
    "user",
    "interfaces",
    "actually",
    "future",
    "editing",
    "video",
    "realizing",
    "created",
    "created",
    "diagram",
    "kind",
    "give",
    "overview",
    "mvc",
    "pattern",
    "actually",
    "go",
    "mvc",
    "pattern",
    "model",
    "view",
    "controller",
    "wanted",
    "walk",
    "kind",
    "flow",
    "building",
    "application",
    "three",
    "separate",
    "concerns",
    "basically",
    "view",
    "see",
    "um",
    "event",
    "listeners",
    "handle",
    "either",
    "ui",
    "events",
    "like",
    "toggling",
    "menu",
    "see",
    "toggling",
    "actions",
    "menu",
    "manipulate",
    "dom",
    "respond",
    "state",
    "changes",
    "happens",
    "store",
    "kind",
    "model",
    "responsible",
    "getting",
    "state",
    "saving",
    "state",
    "emitting",
    "state",
    "change",
    "events",
    "app",
    "middle",
    "controller",
    "responsible",
    "kind",
    "orchestrating",
    "state",
    "view",
    "making",
    "sure",
    "know",
    "state",
    "updates",
    "view",
    "updates",
    "one",
    "concise",
    "consolidated",
    "place",
    "know",
    "probably",
    "make",
    "whole",
    "lot",
    "sense",
    "stop",
    "keep",
    "mind",
    "come",
    "back",
    "go",
    "build",
    "hopefully",
    "gives",
    "little",
    "visual",
    "representation",
    "pattern",
    "using",
    "going",
    "challenging",
    "pattern",
    "implement",
    "straight",
    "know",
    "right",
    "bat",
    "going",
    "make",
    "whole",
    "lot",
    "sense",
    "decided",
    "almost",
    "contrived",
    "example",
    "basically",
    "start",
    "naive",
    "approach",
    "everything",
    "kind",
    "sits",
    "one",
    "file",
    "really",
    "architectural",
    "patterns",
    "behind",
    "going",
    "progressively",
    "iterate",
    "get",
    "mvc",
    "pattern",
    "little",
    "bit",
    "stable",
    "call",
    "video",
    "progression",
    "going",
    "start",
    "know",
    "naive",
    "approach",
    "one",
    "file",
    "going",
    "refactor",
    "iterate",
    "go",
    "finally",
    "going",
    "end",
    "mvc",
    "pattern",
    "important",
    "going",
    "easy",
    "easier",
    "debug",
    "later",
    "going",
    "easier",
    "extend",
    "add",
    "features",
    "later",
    "really",
    "important",
    "parts",
    "building",
    "software",
    "anytime",
    "building",
    "software",
    "going",
    "users",
    "expect",
    "things",
    "improved",
    "fixed",
    "extended",
    "want",
    "add",
    "features",
    "example",
    "basic",
    "game",
    "might",
    "want",
    "add",
    "leaderboard",
    "left",
    "side",
    "right",
    "side",
    "might",
    "want",
    "able",
    "add",
    "user",
    "logins",
    "know",
    "registration",
    "whatnot",
    "able",
    "going",
    "difficult",
    "planned",
    "little",
    "bit",
    "architecture",
    "little",
    "bit",
    "software",
    "design",
    "behind",
    "words",
    "everything",
    "one",
    "file",
    "going",
    "quickly",
    "become",
    "unmanageable",
    "said",
    "think",
    "go",
    "ahead",
    "get",
    "started",
    "thinking",
    "little",
    "bit",
    "um",
    "let",
    "enter",
    "got",
    "room",
    "actions",
    "user",
    "take",
    "app",
    "defined",
    "want",
    "kind",
    "point",
    "pretty",
    "directly",
    "oops",
    "mean",
    "pretty",
    "directly",
    "map",
    "event",
    "listeners",
    "html",
    "elements",
    "case",
    "look",
    "individual",
    "elements",
    "reset",
    "going",
    "sort",
    "button",
    "new",
    "round",
    "going",
    "button",
    "squares",
    "game",
    "board",
    "going",
    "like",
    "button",
    "div",
    "something",
    "like",
    "every",
    "html",
    "element",
    "event",
    "listeners",
    "hook",
    "event",
    "happens",
    "put",
    "javascript",
    "logic",
    "maybe",
    "manipulate",
    "dom",
    "update",
    "sort",
    "persistent",
    "state",
    "local",
    "storage",
    "session",
    "storage",
    "forth",
    "right",
    "think",
    "enough",
    "planning",
    "moment",
    "going",
    "kind",
    "come",
    "back",
    "whiteboard",
    "little",
    "bit",
    "plan",
    "features",
    "build",
    "want",
    "get",
    "started",
    "kind",
    "jump",
    "looking",
    "html",
    "document",
    "ask",
    "question",
    "going",
    "add",
    "javascript",
    "well",
    "theoretically",
    "put",
    "javascript",
    "pretty",
    "much",
    "anywhere",
    "document",
    "always",
    "see",
    "best",
    "practice",
    "putting",
    "javascript",
    "end",
    "body",
    "tag",
    "almost",
    "cases",
    "reason",
    "loading",
    "html",
    "document",
    "browser",
    "browser",
    "bunch",
    "code",
    "running",
    "background",
    "actually",
    "read",
    "html",
    "document",
    "parse",
    "parse",
    "elements",
    "styles",
    "attaching",
    "elements",
    "actually",
    "paint",
    "screen",
    "called",
    "critical",
    "rendering",
    "path",
    "would",
    "say",
    "intermediate",
    "advanced",
    "concept",
    "kind",
    "check",
    "point",
    "say",
    "load",
    "html",
    "document",
    "browser",
    "actually",
    "going",
    "make",
    "network",
    "request",
    "get",
    "document",
    "see",
    "network",
    "tab",
    "see",
    "first",
    "200",
    "get",
    "request",
    "let",
    "make",
    "little",
    "bit",
    "larger",
    "initiator",
    "document",
    "type",
    "html",
    "click",
    "going",
    "render",
    "html",
    "look",
    "raw",
    "response",
    "getting",
    "html",
    "document",
    "sent",
    "browser",
    "browser",
    "go",
    "parse",
    "significant",
    "well",
    "reason",
    "javascript",
    "happens",
    "placed",
    "top",
    "body",
    "means",
    "browser",
    "parse",
    "html",
    "show",
    "user",
    "run",
    "javascript",
    "sitting",
    "top",
    "body",
    "got",
    "large",
    "enough",
    "javascript",
    "bundle",
    "going",
    "block",
    "things",
    "user",
    "going",
    "see",
    "anything",
    "browser",
    "done",
    "poor",
    "user",
    "experience",
    "reason",
    "generally",
    "put",
    "script",
    "tag",
    "bottom",
    "body",
    "got",
    "script",
    "tag",
    "run",
    "arbitrary",
    "javascript",
    "say",
    "hello",
    "world",
    "save",
    "live",
    "server",
    "going",
    "reload",
    "go",
    "console",
    "see",
    "hello",
    "world",
    "side",
    "note",
    "see",
    "get",
    "request",
    "airing",
    "favicon",
    "even",
    "html",
    "document",
    "browser",
    "default",
    "going",
    "look",
    "kind",
    "standard",
    "safely",
    "ignore",
    "anyways",
    "see",
    "got",
    "javascript",
    "running",
    "obviously",
    "want",
    "javascript",
    "inline",
    "going",
    "write",
    "enough",
    "get",
    "pretty",
    "cumbersome",
    "ideally",
    "need",
    "make",
    "script",
    "source",
    "tag",
    "source",
    "tag",
    "going",
    "point",
    "javascript",
    "file",
    "going",
    "add",
    "directory",
    "come",
    "live",
    "vanilla",
    "build",
    "add",
    "new",
    "folder",
    "called",
    "js",
    "could",
    "anywhere",
    "put",
    "call",
    "call",
    "whatever",
    "want",
    "work",
    "let",
    "go",
    "ahead",
    "put",
    "hello",
    "world",
    "save",
    "moment",
    "going",
    "anything",
    "refresh",
    "well",
    "guess",
    "saved",
    "html",
    "yet",
    "let",
    "save",
    "refresh",
    "going",
    "see",
    "anything",
    "see",
    "source",
    "attribute",
    "script",
    "empty",
    "need",
    "populate",
    "path",
    "javascript",
    "file",
    "save",
    "see",
    "everything",
    "hooked",
    "get",
    "hello",
    "world",
    "browser",
    "basic",
    "javascript",
    "file",
    "point",
    "got",
    "basic",
    "javascript",
    "file",
    "set",
    "want",
    "go",
    "ahead",
    "start",
    "user",
    "actions",
    "happen",
    "remember",
    "got",
    "three",
    "user",
    "actions",
    "actually",
    "fourth",
    "one",
    "going",
    "start",
    "probably",
    "simplest",
    "implementation",
    "one",
    "toggle",
    "menu",
    "new",
    "round",
    "reset",
    "current",
    "game",
    "part",
    "menu",
    "actually",
    "implement",
    "menu",
    "pops",
    "open",
    "closes",
    "every",
    "time",
    "clicked",
    "ca",
    "happen",
    "html",
    "css",
    "least",
    "without",
    "something",
    "crazy",
    "going",
    "first",
    "thing",
    "want",
    "rather",
    "simple",
    "implement",
    "start",
    "working",
    "user",
    "actions",
    "track",
    "state",
    "game",
    "first",
    "thing",
    "going",
    "kind",
    "scaffold",
    "actions",
    "need",
    "identify",
    "elements",
    "going",
    "select",
    "show",
    "better",
    "way",
    "couple",
    "minutes",
    "going",
    "start",
    "kind",
    "said",
    "naive",
    "approach",
    "might",
    "think",
    "first",
    "looking",
    "menu",
    "going",
    "come",
    "drop",
    "menu",
    "section",
    "html",
    "see",
    "got",
    "div",
    "class",
    "menu",
    "probably",
    "easiest",
    "way",
    "select",
    "element",
    "javascript",
    "going",
    "let",
    "call",
    "menu",
    "going",
    "select",
    "document",
    "globally",
    "available",
    "us",
    "browser",
    "runtime",
    "available",
    "see",
    "vs",
    "code",
    "already",
    "kind",
    "detected",
    "available",
    "us",
    "giving",
    "us",
    "auto",
    "complete",
    "stuff",
    "browser",
    "apis",
    "say",
    "select",
    "class",
    "select",
    "element",
    "menu",
    "class",
    "know",
    "one",
    "div",
    "element",
    "menu",
    "add",
    "event",
    "listener",
    "want",
    "listen",
    "click",
    "event",
    "callback",
    "going",
    "get",
    "event",
    "object",
    "target",
    "represents",
    "element",
    "right",
    "event",
    "dot",
    "target",
    "see",
    "clicked",
    "user",
    "interface",
    "going",
    "see",
    "element",
    "printed",
    "console",
    "see",
    "got",
    "button",
    "open",
    "see",
    "different",
    "attributes",
    "things",
    "read",
    "element",
    "target",
    "get",
    "actually",
    "toggle",
    "menu",
    "remember",
    "html",
    "needed",
    "go",
    "sorry",
    "right",
    "menu",
    "items",
    "see",
    "put",
    "hidden",
    "class",
    "go",
    "back",
    "browser",
    "select",
    "element",
    "go",
    "find",
    "div",
    "hidden",
    "uncheck",
    "hidden",
    "css",
    "class",
    "see",
    "well",
    "actually",
    "shows",
    "modal",
    "sharing",
    "hidden",
    "class",
    "modal",
    "well",
    "let",
    "refresh",
    "remove",
    "class",
    "moment",
    "see",
    "default",
    "showing",
    "really",
    "need",
    "javascript",
    "toggle",
    "class",
    "every",
    "time",
    "button",
    "clicked",
    "class",
    "targeting",
    "order",
    "need",
    "ability",
    "select",
    "item",
    "manipulate",
    "multiple",
    "ways",
    "see",
    "already",
    "selected",
    "div",
    "element",
    "class",
    "menu",
    "already",
    "got",
    "context",
    "within",
    "javascript",
    "menu",
    "variable",
    "use",
    "select",
    "div",
    "items",
    "class",
    "within",
    "simple",
    "way",
    "say",
    "menu",
    "items",
    "say",
    "menu",
    "dot",
    "query",
    "selector",
    "look",
    "items",
    "class",
    "manipulate",
    "see",
    "button",
    "menu",
    "clicked",
    "come",
    "say",
    "menu",
    "items",
    "say",
    "class",
    "list",
    "method",
    "available",
    "called",
    "toggle",
    "pass",
    "class",
    "hidden",
    "going",
    "toggle",
    "hidden",
    "class",
    "back",
    "forth",
    "every",
    "time",
    "button",
    "clicked",
    "let",
    "see",
    "works",
    "click",
    "click",
    "click",
    "see",
    "right",
    "hidden",
    "class",
    "added",
    "removed",
    "time",
    "question",
    "know",
    "always",
    "good",
    "good",
    "question",
    "ask",
    "let",
    "go",
    "ahead",
    "go",
    "mdn",
    "favorite",
    "documentation",
    "web",
    "going",
    "search",
    "want",
    "look",
    "class",
    "let",
    "start",
    "element",
    "element",
    "base",
    "class",
    "general",
    "base",
    "class",
    "element",
    "objects",
    "document",
    "inherit",
    "words",
    "saying",
    "query",
    "selector",
    "get",
    "element",
    "back",
    "going",
    "going",
    "inherit",
    "instance",
    "properties",
    "instance",
    "methods",
    "element",
    "look",
    "instance",
    "properties",
    "see",
    "class",
    "list",
    "available",
    "us",
    "class",
    "list",
    "look",
    "value",
    "see",
    "toggle",
    "method",
    "toggle",
    "method",
    "dom",
    "token",
    "list",
    "removes",
    "existing",
    "token",
    "list",
    "returns",
    "false",
    "token",
    "exist",
    "added",
    "function",
    "returns",
    "true",
    "would",
    "go",
    "find",
    "available",
    "us",
    "knew",
    "class",
    "list",
    "menu",
    "items",
    "basically",
    "going",
    "map",
    "right",
    "dealing",
    "javascript",
    "toggle",
    "method",
    "convenience",
    "method",
    "allows",
    "us",
    "add",
    "remove",
    "class",
    "whatever",
    "class",
    "pass",
    "argument",
    "couple",
    "lines",
    "code",
    "functionality",
    "application",
    "toggle",
    "actions",
    "menu",
    "course",
    "ca",
    "click",
    "ca",
    "click",
    "new",
    "round",
    "reset",
    "expect",
    "anything",
    "set",
    "click",
    "listeners",
    "yet",
    "know",
    "toggle",
    "already",
    "something",
    "wrong",
    "nothing",
    "terribly",
    "wrong",
    "going",
    "start",
    "making",
    "list",
    "remember",
    "say",
    "let",
    "zoom",
    "little",
    "bit",
    "make",
    "better",
    "font",
    "best",
    "practices",
    "developing",
    "user",
    "interfaces",
    "right",
    "first",
    "one",
    "going",
    "talk",
    "global",
    "scope",
    "namespaces",
    "go",
    "back",
    "application",
    "something",
    "little",
    "bit",
    "wrong",
    "could",
    "cause",
    "problems",
    "future",
    "app",
    "gets",
    "bigger",
    "start",
    "splitting",
    "across",
    "multiple",
    "script",
    "files",
    "using",
    "similar",
    "variables",
    "let",
    "say",
    "went",
    "ahead",
    "added",
    "another",
    "script",
    "let",
    "copy",
    "say",
    "second",
    "going",
    "add",
    "new",
    "file",
    "called",
    "second",
    "delete",
    "minute",
    "going",
    "define",
    "variable",
    "called",
    "menu",
    "going",
    "object",
    "javascript",
    "object",
    "okay",
    "got",
    "second",
    "variable",
    "called",
    "menu",
    "first",
    "also",
    "menu",
    "represent",
    "two",
    "different",
    "values",
    "question",
    "becomes",
    "one",
    "going",
    "win",
    "one",
    "going",
    "take",
    "precedent",
    "precedence",
    "let",
    "go",
    "click",
    "button",
    "seems",
    "working",
    "okay",
    "let",
    "go",
    "back",
    "flip",
    "order",
    "scripts",
    "save",
    "let",
    "click",
    "longer",
    "working",
    "reason",
    "redeclaration",
    "menu",
    "variable",
    "longer",
    "knows",
    "trying",
    "set",
    "event",
    "listener",
    "constant",
    "object",
    "variable",
    "conflicting",
    "see",
    "already",
    "bit",
    "problem",
    "problem",
    "defining",
    "two",
    "variables",
    "name",
    "totally",
    "acceptable",
    "within",
    "know",
    "programming",
    "fact",
    "declaring",
    "name",
    "scope",
    "furthermore",
    "putting",
    "global",
    "scope",
    "believe",
    "would",
    "go",
    "console",
    "type",
    "menu",
    "see",
    "value",
    "empty",
    "object",
    "type",
    "menu",
    "items",
    "let",
    "see",
    "menu",
    "items",
    "undefined",
    "deriving",
    "base",
    "time",
    "menu",
    "let",
    "go",
    "ahead",
    "flip",
    "script",
    "um",
    "oops",
    "okay",
    "flipping",
    "different",
    "order",
    "menu",
    "work",
    "okay",
    "type",
    "menu",
    "back",
    "element",
    "menu",
    "items",
    "going",
    "another",
    "element",
    "see",
    "available",
    "global",
    "scope",
    "usually",
    "great",
    "idea",
    "something",
    "going",
    "want",
    "developing",
    "applications",
    "make",
    "namespace",
    "say",
    "namespace",
    "referring",
    "one",
    "variable",
    "single",
    "name",
    "encompass",
    "store",
    "basically",
    "put",
    "closure",
    "variables",
    "going",
    "expose",
    "different",
    "variable",
    "names",
    "global",
    "scope",
    "way",
    "defining",
    "variable",
    "called",
    "app",
    "basic",
    "object",
    "start",
    "within",
    "app",
    "going",
    "store",
    "selected",
    "items",
    "also",
    "going",
    "add",
    "initialization",
    "method",
    "first",
    "thing",
    "let",
    "get",
    "menu",
    "menu",
    "items",
    "within",
    "namespace",
    "something",
    "really",
    "nice",
    "put",
    "prefix",
    "front",
    "put",
    "dollar",
    "sign",
    "pretty",
    "standard",
    "convention",
    "people",
    "would",
    "use",
    "property",
    "namespace",
    "going",
    "put",
    "selected",
    "html",
    "elements",
    "okay",
    "right",
    "going",
    "call",
    "menu",
    "say",
    "looking",
    "menu",
    "class",
    "also",
    "put",
    "menu",
    "items",
    "longer",
    "derive",
    "based",
    "menu",
    "point",
    "initialization",
    "object",
    "menu",
    "available",
    "us",
    "could",
    "try",
    "something",
    "like",
    "reference",
    "sorry",
    "app",
    "dot",
    "dollar",
    "sign",
    "dot",
    "menu",
    "query",
    "selector",
    "look",
    "items",
    "could",
    "try",
    "save",
    "go",
    "document",
    "going",
    "say",
    "unclot",
    "reference",
    "error",
    "ca",
    "access",
    "lexical",
    "declaration",
    "app",
    "initialization",
    "words",
    "ca",
    "reference",
    "initialized",
    "yet",
    "quick",
    "solution",
    "replace",
    "instead",
    "deriving",
    "based",
    "element",
    "look",
    "document",
    "one",
    "element",
    "class",
    "items",
    "conflict",
    "anything",
    "got",
    "selected",
    "elements",
    "looking",
    "lot",
    "better",
    "go",
    "back",
    "let",
    "go",
    "back",
    "flip",
    "order",
    "broken",
    "refresh",
    "um",
    "going",
    "say",
    "menu",
    "defined",
    "oh",
    "sorry",
    "event",
    "listener",
    "longer",
    "going",
    "work",
    "let",
    "comment",
    "second",
    "things",
    "work",
    "going",
    "get",
    "namespace",
    "errors",
    "menu",
    "going",
    "conflict",
    "menu",
    "uh",
    "closure",
    "app",
    "namespace",
    "let",
    "get",
    "rid",
    "second",
    "app",
    "demonstration",
    "delete",
    "html",
    "delete",
    "reference",
    "back",
    "started",
    "see",
    "go",
    "try",
    "access",
    "menu",
    "variable",
    "going",
    "available",
    "guess",
    "called",
    "menu",
    "bar",
    "menu",
    "available",
    "go",
    "app",
    "dot",
    "dollar",
    "sign",
    "dot",
    "menu",
    "could",
    "access",
    "element",
    "selected",
    "single",
    "namespace",
    "called",
    "app",
    "theoretically",
    "could",
    "define",
    "variable",
    "different",
    "file",
    "would",
    "conflict",
    "much",
    "less",
    "likely",
    "much",
    "easier",
    "track",
    "variables",
    "defining",
    "one",
    "namespace",
    "covering",
    "everything",
    "else",
    "defining",
    "next",
    "thing",
    "make",
    "little",
    "bit",
    "better",
    "could",
    "course",
    "uncomment",
    "say",
    "app",
    "dot",
    "dollar",
    "sign",
    "dot",
    "menu",
    "dot",
    "add",
    "event",
    "listener",
    "save",
    "come",
    "going",
    "say",
    "menu",
    "items",
    "defined",
    "sorry",
    "reference",
    "dot",
    "menu",
    "items",
    "well",
    "going",
    "toggle",
    "work",
    "fine",
    "one",
    "improvement",
    "make",
    "right",
    "global",
    "scope",
    "better",
    "way",
    "make",
    "init",
    "method",
    "within",
    "app",
    "namespace",
    "init",
    "method",
    "going",
    "going",
    "add",
    "event",
    "listeners",
    "application",
    "note",
    "es6",
    "syntax",
    "shorthand",
    "way",
    "define",
    "function",
    "property",
    "object",
    "calling",
    "app",
    "another",
    "way",
    "would",
    "property",
    "could",
    "add",
    "like",
    "anonymous",
    "function",
    "like",
    "could",
    "anonymous",
    "function",
    "like",
    "forth",
    "could",
    "even",
    "define",
    "function",
    "assign",
    "quick",
    "way",
    "shorthand",
    "going",
    "move",
    "initialization",
    "logic",
    "method",
    "right",
    "us",
    "allows",
    "us",
    "control",
    "app",
    "initialized",
    "save",
    "longer",
    "going",
    "work",
    "initialized",
    "app",
    "nice",
    "way",
    "say",
    "document",
    "dot",
    "add",
    "event",
    "listener",
    "wait",
    "document",
    "fully",
    "load",
    "see",
    "documentation",
    "vs",
    "code",
    "populates",
    "um",
    "actually",
    "load",
    "event",
    "basically",
    "waiting",
    "entire",
    "document",
    "load",
    "know",
    "things",
    "safe",
    "use",
    "select",
    "callback",
    "function",
    "call",
    "another",
    "way",
    "could",
    "call",
    "like",
    "app",
    "dot",
    "init",
    "save",
    "going",
    "work",
    "believe",
    "reason",
    "window",
    "instead",
    "document",
    "let",
    "try",
    "looks",
    "like",
    "works",
    "let",
    "go",
    "ahead",
    "look",
    "reference",
    "mdn",
    "document",
    "look",
    "um",
    "document",
    "let",
    "look",
    "events",
    "reference",
    "listen",
    "events",
    "using",
    "add",
    "event",
    "listener",
    "document",
    "looks",
    "like",
    "load",
    "event",
    "available",
    "look",
    "window",
    "find",
    "let",
    "look",
    "window",
    "events",
    "going",
    "find",
    "loaded",
    "event",
    "believe",
    "see",
    "load",
    "unload",
    "events",
    "reference",
    "load",
    "event",
    "listening",
    "fired",
    "whole",
    "page",
    "loaded",
    "including",
    "dependent",
    "resources",
    "stylesheet",
    "images",
    "words",
    "happens",
    "html",
    "document",
    "start",
    "selecting",
    "safely",
    "listening",
    "window",
    "basically",
    "listening",
    "load",
    "initializing",
    "application",
    "select",
    "elements",
    "add",
    "click",
    "listener",
    "menu",
    "shorthand",
    "way",
    "refactor",
    "rather",
    "syntax",
    "remove",
    "remove",
    "call",
    "concise",
    "way",
    "write",
    "exact",
    "functionality",
    "like",
    "right",
    "basic",
    "toggle",
    "menu",
    "working",
    "next",
    "thing",
    "need",
    "kind",
    "start",
    "game",
    "working",
    "state",
    "tracking",
    "different",
    "moves",
    "player",
    "let",
    "first",
    "scaffold",
    "kind",
    "events",
    "going",
    "listen",
    "elements",
    "going",
    "select",
    "come",
    "back",
    "fill",
    "logic",
    "actual",
    "implementation",
    "know",
    "init",
    "going",
    "register",
    "event",
    "listeners",
    "handle",
    "um",
    "user",
    "events",
    "first",
    "define",
    "elements",
    "going",
    "trigger",
    "events",
    "let",
    "go",
    "back",
    "game",
    "first",
    "two",
    "pretty",
    "easy",
    "need",
    "target",
    "reset",
    "button",
    "new",
    "round",
    "button",
    "one",
    "way",
    "could",
    "see",
    "got",
    "two",
    "buttons",
    "reset",
    "new",
    "round",
    "selectors",
    "either",
    "buttons",
    "could",
    "add",
    "class",
    "one",
    "thing",
    "going",
    "show",
    "refactor",
    "going",
    "go",
    "add",
    "data",
    "id",
    "much",
    "stable",
    "way",
    "select",
    "elements",
    "querying",
    "dom",
    "go",
    "mdn",
    "type",
    "data",
    "dash",
    "star",
    "see",
    "attribute",
    "global",
    "attributes",
    "form",
    "class",
    "attributes",
    "called",
    "custom",
    "data",
    "attributes",
    "allows",
    "add",
    "proprietary",
    "information",
    "exchanged",
    "html",
    "dom",
    "representation",
    "words",
    "give",
    "data",
    "id",
    "data",
    "whatever",
    "want",
    "define",
    "going",
    "allow",
    "us",
    "stable",
    "selector",
    "let",
    "come",
    "back",
    "first",
    "excalibur",
    "uh",
    "excalibur",
    "got",
    "global",
    "scope",
    "namespaces",
    "let",
    "talk",
    "stable",
    "selectors",
    "data",
    "star",
    "attributes",
    "okay",
    "mean",
    "go",
    "know",
    "could",
    "select",
    "buttons",
    "indirectly",
    "looking",
    "menu",
    "div",
    "looking",
    "items",
    "getting",
    "index",
    "button",
    "select",
    "one",
    "want",
    "stable",
    "way",
    "let",
    "start",
    "menu",
    "add",
    "data",
    "id",
    "going",
    "call",
    "menu",
    "let",
    "save",
    "document",
    "go",
    "back",
    "update",
    "query",
    "selector",
    "menu",
    "instead",
    "selecting",
    "class",
    "going",
    "select",
    "something",
    "put",
    "brackets",
    "says",
    "selecting",
    "attribute",
    "called",
    "data",
    "dash",
    "id",
    "equal",
    "menu",
    "let",
    "save",
    "see",
    "things",
    "working",
    "okay",
    "app",
    "looks",
    "like",
    "allowed",
    "select",
    "let",
    "break",
    "purpose",
    "take",
    "u",
    "break",
    "things",
    "going",
    "say",
    "uncaught",
    "type",
    "air",
    "app",
    "dot",
    "menu",
    "null",
    "know",
    "working",
    "could",
    "also",
    "call",
    "whatever",
    "wanted",
    "data",
    "custom",
    "selector",
    "demonstrate",
    "could",
    "update",
    "say",
    "custom",
    "selector",
    "going",
    "work",
    "fine",
    "still",
    "selected",
    "appropriately",
    "data",
    "id",
    "convention",
    "avo",
    "used",
    "think",
    "good",
    "succinct",
    "one",
    "use",
    "well",
    "going",
    "put",
    "data",
    "id",
    "elements",
    "want",
    "select",
    "main",
    "reason",
    "stability",
    "changed",
    "name",
    "class",
    "menu",
    "rearranged",
    "html",
    "elements",
    "future",
    "want",
    "javascript",
    "sudden",
    "break",
    "changed",
    "style",
    "element",
    "document",
    "want",
    "couple",
    "two",
    "pieces",
    "together",
    "way",
    "keep",
    "things",
    "lot",
    "stable",
    "come",
    "add",
    "data",
    "id",
    "menu",
    "items",
    "add",
    "data",
    "id",
    "reset",
    "button",
    "thing",
    "oops",
    "new",
    "round",
    "button",
    "okay",
    "selectors",
    "lot",
    "stable",
    "going",
    "register",
    "need",
    "two",
    "need",
    "reset",
    "button",
    "new",
    "round",
    "button",
    "going",
    "copy",
    "query",
    "selectors",
    "rewrite",
    "every",
    "time",
    "replace",
    "menu",
    "dash",
    "items",
    "named",
    "one",
    "called",
    "reset",
    "button",
    "one",
    "new",
    "round",
    "button",
    "got",
    "right",
    "selected",
    "see",
    "errors",
    "within",
    "document",
    "see",
    "errors",
    "one",
    "know",
    "working",
    "fine",
    "updated",
    "correctly",
    "point",
    "relatively",
    "simple",
    "add",
    "rest",
    "actions",
    "already",
    "got",
    "event",
    "listener",
    "menu",
    "toggling",
    "going",
    "select",
    "reset",
    "button",
    "add",
    "event",
    "listener",
    "want",
    "wait",
    "click",
    "open",
    "callback",
    "function",
    "receives",
    "event",
    "say",
    "reset",
    "game",
    "placeholder",
    "copy",
    "almost",
    "verbatim",
    "instead",
    "reset",
    "button",
    "new",
    "round",
    "button",
    "say",
    "add",
    "new",
    "round",
    "registered",
    "click",
    "listeners",
    "open",
    "actions",
    "toggle",
    "hit",
    "reset",
    "reset",
    "game",
    "hit",
    "new",
    "round",
    "add",
    "new",
    "round",
    "got",
    "hooked",
    "okay",
    "last",
    "thing",
    "need",
    "register",
    "click",
    "listener",
    "squares",
    "better",
    "way",
    "show",
    "way",
    "show",
    "probably",
    "intuitive",
    "simplest",
    "way",
    "let",
    "look",
    "find",
    "game",
    "board",
    "squares",
    "trying",
    "select",
    "quickest",
    "way",
    "look",
    "let",
    "go",
    "ahead",
    "add",
    "data",
    "id",
    "believe",
    "duplicate",
    "data",
    "ids",
    "let",
    "call",
    "square",
    "add",
    "properties",
    "hold",
    "option",
    "click",
    "vs",
    "code",
    "highlight",
    "bunch",
    "add",
    "data",
    "dash",
    "id",
    "equal",
    "square",
    "okay",
    "stable",
    "selector",
    "selectors",
    "say",
    "let",
    "say",
    "squares",
    "say",
    "document",
    "instead",
    "query",
    "selector",
    "going",
    "query",
    "selector",
    "want",
    "elements",
    "data",
    "id",
    "square",
    "go",
    "init",
    "method",
    "app",
    "dot",
    "dollar",
    "sign",
    "dot",
    "squares",
    "look",
    "dom",
    "see",
    "node",
    "node",
    "list",
    "nine",
    "squares",
    "represented",
    "last",
    "thing",
    "unique",
    "id",
    "course",
    "index",
    "array",
    "would",
    "nice",
    "id",
    "kind",
    "coordinate",
    "map",
    "one",
    "way",
    "click",
    "go",
    "give",
    "basic",
    "html",
    "id",
    "property",
    "attribute",
    "okay",
    "start",
    "every",
    "one",
    "go",
    "replace",
    "select",
    "node",
    "list",
    "going",
    "id",
    "know",
    "clicked",
    "id",
    "dealing",
    "going",
    "back",
    "add",
    "event",
    "listener",
    "since",
    "node",
    "list",
    "need",
    "iterate",
    "say",
    "dot",
    "squares",
    "four",
    "square",
    "node",
    "dom",
    "able",
    "say",
    "square",
    "dot",
    "add",
    "event",
    "listener",
    "add",
    "click",
    "listener",
    "event",
    "returned",
    "give",
    "us",
    "id",
    "let",
    "go",
    "ahead",
    "console",
    "log",
    "square",
    "id",
    "interpolate",
    "event",
    "dot",
    "target",
    "dot",
    "id",
    "clicked",
    "remove",
    "console",
    "log",
    "would",
    "expect",
    "every",
    "time",
    "click",
    "get",
    "id",
    "back",
    "square",
    "clicked",
    "one",
    "square",
    "id1",
    "nine",
    "going",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "let",
    "click",
    "one",
    "see",
    "square",
    "id1",
    "clicked",
    "go",
    "square",
    "id9",
    "clicked",
    "pretty",
    "simple",
    "way",
    "register",
    "event",
    "listener",
    "squares",
    "going",
    "back",
    "initial",
    "question",
    "asked",
    "let",
    "go",
    "actions",
    "user",
    "take",
    "app",
    "came",
    "four",
    "player",
    "make",
    "game",
    "move",
    "new",
    "round",
    "reset",
    "current",
    "game",
    "toggle",
    "menu",
    "look",
    "init",
    "method",
    "four",
    "events",
    "listened",
    "different",
    "dom",
    "elements",
    "one",
    "organization",
    "method",
    "use",
    "instead",
    "putting",
    "init",
    "method",
    "leave",
    "init",
    "method",
    "define",
    "new",
    "one",
    "let",
    "call",
    "register",
    "uh",
    "register",
    "events",
    "event",
    "listeners",
    "something",
    "like",
    "going",
    "organizational",
    "uh",
    "technique",
    "put",
    "type",
    "functionality",
    "within",
    "method",
    "keep",
    "init",
    "method",
    "pretty",
    "clean",
    "say",
    "event",
    "listeners",
    "happening",
    "window",
    "loads",
    "document",
    "going",
    "call",
    "init",
    "knit",
    "going",
    "register",
    "event",
    "listeners",
    "us",
    "go",
    "back",
    "app",
    "able",
    "toggle",
    "reset",
    "game",
    "new",
    "round",
    "click",
    "squares",
    "get",
    "id",
    "returned",
    "squares",
    "point",
    "template",
    "application",
    "stubbed",
    "methods",
    "going",
    "need",
    "implement",
    "see",
    "basically",
    "got",
    "one",
    "done",
    "toggling",
    "menu",
    "call",
    "done",
    "add",
    "comments",
    "track",
    "one",
    "going",
    "item",
    "implemented",
    "happens",
    "reset",
    "game",
    "add",
    "new",
    "round",
    "bottom",
    "one",
    "also",
    "um",
    "probably",
    "going",
    "work",
    "next",
    "speaking",
    "work",
    "next",
    "really",
    "good",
    "question",
    "building",
    "app",
    "like",
    "know",
    "comes",
    "next",
    "well",
    "case",
    "kind",
    "go",
    "process",
    "elimination",
    "actions",
    "reset",
    "new",
    "round",
    "going",
    "possible",
    "implement",
    "functioning",
    "game",
    "actually",
    "reset",
    "let",
    "go",
    "back",
    "notes",
    "want",
    "take",
    "minute",
    "go",
    "point",
    "let",
    "get",
    "arrows",
    "worked",
    "super",
    "familiar",
    "use",
    "quite",
    "yet",
    "going",
    "point",
    "player",
    "make",
    "game",
    "move",
    "next",
    "question",
    "got",
    "ask",
    "game",
    "move",
    "well",
    "couple",
    "considerations",
    "think",
    "one",
    "determine",
    "player",
    "next",
    "let",
    "add",
    "requirement",
    "um",
    "currently",
    "next",
    "thing",
    "want",
    "know",
    "latest",
    "move",
    "cause",
    "tie",
    "game",
    "win",
    "also",
    "want",
    "know",
    "tie",
    "else",
    "think",
    "let",
    "go",
    "final",
    "refactor",
    "one",
    "actually",
    "working",
    "question",
    "whose",
    "turn",
    "need",
    "know",
    "display",
    "also",
    "need",
    "know",
    "know",
    "icon",
    "display",
    "clicked",
    "see",
    "modal",
    "pop",
    "pops",
    "someone",
    "actually",
    "wins",
    "game",
    "need",
    "know",
    "happens",
    "point",
    "click",
    "play",
    "need",
    "able",
    "reset",
    "state",
    "blank",
    "fresh",
    "game",
    "main",
    "questions",
    "ask",
    "um",
    "currently",
    "turn",
    "indicator",
    "icon",
    "play",
    "um",
    "think",
    "pretty",
    "much",
    "take",
    "step",
    "step",
    "um",
    "kind",
    "tough",
    "think",
    "get",
    "advanced",
    "building",
    "things",
    "probably",
    "map",
    "stuff",
    "beginning",
    "kind",
    "first",
    "step",
    "building",
    "trying",
    "map",
    "state",
    "application",
    "require",
    "need",
    "track",
    "um",
    "one",
    "thing",
    "add",
    "also",
    "question",
    "state",
    "need",
    "track",
    "talk",
    "concept",
    "little",
    "bit",
    "minute",
    "going",
    "kind",
    "organically",
    "talk",
    "throughout",
    "rest",
    "video",
    "quite",
    "challenging",
    "times",
    "super",
    "familiar",
    "say",
    "state",
    "really",
    "talking",
    "know",
    "current",
    "state",
    "game",
    "look",
    "like",
    "might",
    "things",
    "like",
    "um",
    "current",
    "player",
    "might",
    "total",
    "wins",
    "player",
    "also",
    "track",
    "total",
    "type",
    "total",
    "ties",
    "prior",
    "game",
    "history",
    "kind",
    "things",
    "things",
    "want",
    "track",
    "going",
    "build",
    "know",
    "step",
    "step",
    "eventually",
    "come",
    "sort",
    "model",
    "use",
    "track",
    "state",
    "going",
    "talk",
    "much",
    "moment",
    "let",
    "dive",
    "start",
    "building",
    "start",
    "see",
    "makes",
    "sense",
    "minute",
    "first",
    "thing",
    "going",
    "try",
    "implement",
    "basic",
    "move",
    "words",
    "want",
    "display",
    "icon",
    "squares",
    "clicked",
    "obviously",
    "already",
    "registering",
    "event",
    "getting",
    "id",
    "square",
    "clicked",
    "useful",
    "us",
    "need",
    "change",
    "dom",
    "ui",
    "happens",
    "first",
    "thing",
    "generally",
    "go",
    "html",
    "mock",
    "something",
    "figure",
    "statically",
    "display",
    "first",
    "time",
    "believe",
    "going",
    "need",
    "put",
    "tag",
    "class",
    "going",
    "one",
    "font",
    "awesome",
    "icons",
    "let",
    "check",
    "references",
    "right",
    "see",
    "icon",
    "dealing",
    "okay",
    "really",
    "fa",
    "solid",
    "base",
    "class",
    "going",
    "fax",
    "fao",
    "uh",
    "simulate",
    "make",
    "sure",
    "game",
    "board",
    "going",
    "display",
    "things",
    "correctly",
    "fax",
    "fao",
    "see",
    "got",
    "displaying",
    "correctly",
    "right",
    "size",
    "obviously",
    "right",
    "colors",
    "open",
    "css",
    "remember",
    "earlier",
    "video",
    "shared",
    "classes",
    "top",
    "somewhere",
    "shared",
    "utility",
    "classes",
    "gave",
    "us",
    "yellow",
    "turquoise",
    "class",
    "things",
    "little",
    "bit",
    "easier",
    "deal",
    "easier",
    "remember",
    "pass",
    "yellow",
    "turquoise",
    "class",
    "list",
    "x",
    "right",
    "color",
    "obviously",
    "see",
    "got",
    "mismatches",
    "everywhere",
    "get",
    "worked",
    "moment",
    "trying",
    "javascript",
    "obviously",
    "ca",
    "statically",
    "put",
    "different",
    "icons",
    "going",
    "basically",
    "build",
    "elements",
    "add",
    "children",
    "appropriate",
    "div",
    "clicked",
    "going",
    "open",
    "right",
    "event",
    "listeners",
    "squares",
    "going",
    "copy",
    "html",
    "add",
    "comment",
    "reference",
    "look",
    "translate",
    "javascript",
    "got",
    "fax",
    "fao",
    "two",
    "dealing",
    "get",
    "rid",
    "html",
    "know",
    "id",
    "clicked",
    "event",
    "carries",
    "target",
    "represents",
    "individual",
    "square",
    "clicked",
    "could",
    "start",
    "us",
    "actually",
    "derive",
    "derived",
    "create",
    "tag",
    "let",
    "call",
    "icon",
    "say",
    "element",
    "one",
    "browser",
    "api",
    "dom",
    "methods",
    "need",
    "give",
    "tag",
    "created",
    "element",
    "say",
    "icon",
    "sorry",
    "redefining",
    "say",
    "list",
    "believe",
    "um",
    "add",
    "array",
    "tokens",
    "would",
    "classes",
    "would",
    "want",
    "add",
    "f",
    "solid",
    "f",
    "x",
    "let",
    "say",
    "yellow",
    "kind",
    "hard",
    "coding",
    "element",
    "hard",
    "code",
    "yellow",
    "x",
    "case",
    "created",
    "element",
    "need",
    "insert",
    "target",
    "clicked",
    "really",
    "could",
    "say",
    "dot",
    "replace",
    "children",
    "think",
    "pass",
    "icon",
    "work",
    "let",
    "go",
    "ahead",
    "click",
    "see",
    "something",
    "going",
    "working",
    "let",
    "inspect",
    "see",
    "sort",
    "content",
    "div",
    "elements",
    "looks",
    "like",
    "icon",
    "class",
    "icon",
    "element",
    "added",
    "class",
    "list",
    "commas",
    "need",
    "way",
    "supposed",
    "pass",
    "array",
    "guess",
    "maybe",
    "supposed",
    "pass",
    "um",
    "multiple",
    "arguments",
    "let",
    "try",
    "okay",
    "working",
    "better",
    "see",
    "content",
    "within",
    "go",
    "content",
    "within",
    "one",
    "clicked",
    "correct",
    "class",
    "list",
    "anytime",
    "click",
    "going",
    "get",
    "yellow",
    "x",
    "obviously",
    "useful",
    "yet",
    "filling",
    "x",
    "click",
    "twice",
    "also",
    "problematic",
    "behavior",
    "checking",
    "see",
    "x",
    "already",
    "adding",
    "matter",
    "problematic",
    "least",
    "got",
    "something",
    "working",
    "ideally",
    "want",
    "know",
    "whose",
    "turn",
    "depending",
    "turn",
    "choose",
    "either",
    "fax",
    "fao",
    "yellow",
    "turquoise",
    "color",
    "point",
    "finally",
    "reached",
    "place",
    "start",
    "talking",
    "state",
    "state",
    "management",
    "really",
    "represents",
    "us",
    "going",
    "pop",
    "whiteboard",
    "talking",
    "game",
    "moves",
    "state",
    "need",
    "track",
    "well",
    "think",
    "next",
    "question",
    "really",
    "state",
    "well",
    "really",
    "two",
    "types",
    "state",
    "talk",
    "client",
    "state",
    "server",
    "state",
    "loose",
    "terms",
    "little",
    "bit",
    "overlap",
    "two",
    "two",
    "kind",
    "categorizations",
    "would",
    "using",
    "talking",
    "client",
    "state",
    "way",
    "think",
    "sort",
    "um",
    "uh",
    "state",
    "within",
    "dom",
    "need",
    "change",
    "anything",
    "persisted",
    "long",
    "term",
    "guess",
    "complicated",
    "way",
    "saying",
    "something",
    "like",
    "actions",
    "menu",
    "popping",
    "open",
    "closed",
    "every",
    "time",
    "open",
    "close",
    "state",
    "changing",
    "actually",
    "anything",
    "know",
    "persist",
    "change",
    "opened",
    "actions",
    "menu",
    "refreshed",
    "page",
    "going",
    "close",
    "every",
    "time",
    "tracking",
    "state",
    "across",
    "browser",
    "refreshes",
    "temporary",
    "state",
    "tracking",
    "words",
    "client",
    "state",
    "good",
    "example",
    "let",
    "make",
    "example",
    "let",
    "add",
    "code",
    "let",
    "say",
    "client",
    "state",
    "equal",
    "make",
    "hopefully",
    "going",
    "get",
    "little",
    "smaller",
    "let",
    "open",
    "brackets",
    "client",
    "state",
    "might",
    "something",
    "like",
    "menu",
    "open",
    "start",
    "false",
    "see",
    "click",
    "menu",
    "state",
    "variable",
    "going",
    "update",
    "going",
    "either",
    "open",
    "closed",
    "true",
    "false",
    "going",
    "persist",
    "across",
    "browser",
    "refreshes",
    "server",
    "state",
    "server",
    "kind",
    "loose",
    "term",
    "actually",
    "server",
    "going",
    "working",
    "local",
    "storage",
    "kind",
    "emulate",
    "generally",
    "server",
    "state",
    "kind",
    "would",
    "think",
    "database",
    "snapshot",
    "time",
    "snapshot",
    "current",
    "data",
    "looks",
    "like",
    "would",
    "conducive",
    "something",
    "like",
    "game",
    "move",
    "could",
    "copy",
    "foreign",
    "state",
    "could",
    "something",
    "like",
    "current",
    "player",
    "let",
    "put",
    "id",
    "let",
    "say",
    "player",
    "one",
    "current",
    "player",
    "could",
    "also",
    "add",
    "things",
    "like",
    "got",
    "current",
    "player",
    "history",
    "games",
    "might",
    "array",
    "filled",
    "different",
    "games",
    "played",
    "past",
    "could",
    "also",
    "track",
    "things",
    "like",
    "um",
    "also",
    "track",
    "things",
    "like",
    "current",
    "game",
    "might",
    "array",
    "game",
    "moves",
    "happened",
    "way",
    "track",
    "across",
    "browser",
    "refreshes",
    "know",
    "moved",
    "square",
    "two",
    "types",
    "state",
    "going",
    "need",
    "track",
    "going",
    "eventually",
    "refactor",
    "little",
    "bit",
    "stable",
    "said",
    "kind",
    "game",
    "plan",
    "video",
    "progression",
    "everything",
    "one",
    "file",
    "naive",
    "approach",
    "going",
    "refactor",
    "little",
    "bit",
    "stable",
    "looks",
    "like",
    "us",
    "terms",
    "state",
    "going",
    "create",
    "state",
    "property",
    "app",
    "okay",
    "start",
    "state",
    "going",
    "persistent",
    "across",
    "browser",
    "refreshes",
    "variable",
    "every",
    "time",
    "refresh",
    "going",
    "reassigned",
    "first",
    "piece",
    "state",
    "want",
    "track",
    "current",
    "player",
    "going",
    "keep",
    "things",
    "simple",
    "going",
    "say",
    "player",
    "represented",
    "number",
    "going",
    "either",
    "one",
    "two",
    "say",
    "player",
    "one",
    "going",
    "always",
    "start",
    "game",
    "track",
    "current",
    "player",
    "alone",
    "allow",
    "us",
    "decide",
    "event",
    "listener",
    "icon",
    "need",
    "put",
    "square",
    "obviously",
    "need",
    "update",
    "state",
    "time",
    "move",
    "happens",
    "um",
    "leave",
    "console",
    "log",
    "every",
    "time",
    "something",
    "clicked",
    "going",
    "need",
    "say",
    "current",
    "player",
    "going",
    "equal",
    "player",
    "need",
    "save",
    "variable",
    "kind",
    "little",
    "clear",
    "going",
    "say",
    "current",
    "player",
    "equals",
    "one",
    "going",
    "add",
    "certain",
    "element",
    "dom",
    "otherwise",
    "assume",
    "two",
    "players",
    "add",
    "different",
    "one",
    "case",
    "let",
    "say",
    "player",
    "one",
    "going",
    "yellow",
    "x",
    "create",
    "icon",
    "matter",
    "matter",
    "styled",
    "class",
    "list",
    "going",
    "use",
    "based",
    "player",
    "player",
    "one",
    "going",
    "yellow",
    "x",
    "player",
    "2",
    "going",
    "turquoise",
    "put",
    "turquoise",
    "right",
    "thing",
    "need",
    "course",
    "update",
    "state",
    "every",
    "time",
    "move",
    "happens",
    "go",
    "ahead",
    "create",
    "icon",
    "add",
    "class",
    "list",
    "going",
    "say",
    "app",
    "dot",
    "state",
    "dot",
    "currentplayer",
    "going",
    "set",
    "equal",
    "whoever",
    "playing",
    "move",
    "words",
    "let",
    "say",
    "current",
    "player",
    "one",
    "created",
    "know",
    "class",
    "list",
    "going",
    "say",
    "app",
    "dot",
    "state",
    "current",
    "player",
    "equals",
    "one",
    "going",
    "set",
    "current",
    "player",
    "equal",
    "two",
    "otherwise",
    "going",
    "set",
    "equal",
    "one",
    "words",
    "sort",
    "toggle",
    "playing",
    "game",
    "finally",
    "take",
    "event",
    "target",
    "square",
    "replace",
    "contents",
    "square",
    "appropriate",
    "icon",
    "next",
    "time",
    "clicked",
    "know",
    "player",
    "use",
    "going",
    "also",
    "log",
    "top",
    "say",
    "current",
    "player",
    "say",
    "player",
    "get",
    "rid",
    "one",
    "important",
    "thing",
    "saw",
    "earlier",
    "ca",
    "play",
    "square",
    "twice",
    "need",
    "know",
    "square",
    "already",
    "sort",
    "element",
    "within",
    "let",
    "go",
    "ahead",
    "save",
    "see",
    "dealing",
    "game",
    "click",
    "square",
    "next",
    "one",
    "updated",
    "state",
    "every",
    "time",
    "see",
    "new",
    "play",
    "think",
    "mistaken",
    "going",
    "happen",
    "click",
    "twice",
    "let",
    "say",
    "click",
    "square",
    "going",
    "add",
    "x",
    "next",
    "obviously",
    "invalid",
    "going",
    "think",
    "turn",
    "even",
    "though",
    "x",
    "still",
    "played",
    "wrong",
    "spot",
    "obviously",
    "problem",
    "way",
    "fix",
    "basically",
    "putting",
    "check",
    "within",
    "click",
    "event",
    "going",
    "say",
    "something",
    "square",
    "going",
    "return",
    "early",
    "going",
    "allow",
    "player",
    "actually",
    "play",
    "prevent",
    "us",
    "updating",
    "current",
    "player",
    "state",
    "force",
    "replay",
    "next",
    "player",
    "go",
    "question",
    "check",
    "well",
    "going",
    "eventually",
    "um",
    "going",
    "eventually",
    "check",
    "much",
    "stable",
    "way",
    "going",
    "keep",
    "things",
    "simple",
    "going",
    "go",
    "mdn",
    "go",
    "back",
    "element",
    "reference",
    "elements",
    "reference",
    "oops",
    "clicked",
    "wrong",
    "one",
    "want",
    "literally",
    "element",
    "class",
    "one",
    "think",
    "work",
    "got",
    "attribute",
    "look",
    "different",
    "methods",
    "available",
    "element",
    "one",
    "check",
    "children",
    "already",
    "within",
    "element",
    "finding",
    "going",
    "search",
    "know",
    "child",
    "nodes",
    "finding",
    "element",
    "exists",
    "base",
    "class",
    "node",
    "like",
    "abstract",
    "base",
    "class",
    "pun",
    "many",
    "dom",
    "api",
    "objects",
    "based",
    "basically",
    "element",
    "mentions",
    "inherit",
    "methods",
    "node",
    "use",
    "child",
    "nodes",
    "method",
    "returns",
    "boolean",
    "value",
    "indicating",
    "whether",
    "given",
    "node",
    "child",
    "nodes",
    "words",
    "first",
    "thing",
    "say",
    "dot",
    "child",
    "nodes",
    "x",
    "going",
    "return",
    "going",
    "update",
    "anything",
    "going",
    "update",
    "state",
    "return",
    "function",
    "early",
    "adding",
    "believe",
    "get",
    "desired",
    "behavior",
    "click",
    "one",
    "click",
    "two",
    "try",
    "click",
    "one",
    "working",
    "let",
    "see",
    "pause",
    "video",
    "figure",
    "going",
    "wrong",
    "little",
    "bit",
    "tricky",
    "bad",
    "programming",
    "part",
    "basically",
    "happened",
    "clicked",
    "icon",
    "see",
    "like",
    "specifically",
    "click",
    "one",
    "icons",
    "going",
    "continue",
    "adding",
    "icons",
    "click",
    "somewhere",
    "else",
    "square",
    "going",
    "correct",
    "behavior",
    "actually",
    "happening",
    "event",
    "target",
    "right",
    "going",
    "represent",
    "actually",
    "clicked",
    "element",
    "actually",
    "clicked",
    "dom",
    "square",
    "going",
    "represent",
    "square",
    "actually",
    "looking",
    "target",
    "behavior",
    "console",
    "log",
    "let",
    "go",
    "ahead",
    "say",
    "um",
    "console",
    "log",
    "say",
    "square",
    "pass",
    "square",
    "console",
    "log",
    "event",
    "target",
    "pass",
    "event",
    "dot",
    "target",
    "going",
    "see",
    "click",
    "right",
    "square",
    "going",
    "represent",
    "div",
    "event",
    "target",
    "represents",
    "div",
    "clicked",
    "thing",
    "put",
    "mouse",
    "middle",
    "icon",
    "remember",
    "new",
    "html",
    "element",
    "right",
    "click",
    "going",
    "register",
    "event",
    "target",
    "tag",
    "rather",
    "div",
    "see",
    "square",
    "event",
    "target",
    "match",
    "click",
    "weird",
    "behavior",
    "see",
    "square",
    "div",
    "event",
    "target",
    "actual",
    "icon",
    "make",
    "behavior",
    "stable",
    "better",
    "programming",
    "practice",
    "general",
    "updating",
    "square",
    "element",
    "relying",
    "event",
    "target",
    "ca",
    "control",
    "whether",
    "user",
    "going",
    "click",
    "icon",
    "square",
    "need",
    "work",
    "matter",
    "let",
    "remove",
    "console",
    "logs",
    "instead",
    "checking",
    "whether",
    "event",
    "target",
    "child",
    "nodes",
    "going",
    "check",
    "square",
    "child",
    "nodes",
    "furthermore",
    "replacing",
    "children",
    "want",
    "replace",
    "event",
    "targets",
    "children",
    "want",
    "replace",
    "square",
    "make",
    "behavior",
    "lot",
    "stable",
    "save",
    "able",
    "click",
    "square",
    "many",
    "times",
    "want",
    "see",
    "console",
    "log",
    "going",
    "say",
    "current",
    "player",
    "one",
    "still",
    "clicking",
    "turn",
    "changing",
    "turn",
    "changes",
    "player",
    "clicks",
    "valid",
    "square",
    "going",
    "different",
    "current",
    "player",
    "got",
    "working",
    "kind",
    "boilerplate",
    "going",
    "refactor",
    "little",
    "bit",
    "stable",
    "better",
    "practices",
    "works",
    "fine",
    "going",
    "clean",
    "need",
    "console",
    "logs",
    "anymore",
    "um",
    "next",
    "thing",
    "going",
    "need",
    "keep",
    "clicking",
    "playing",
    "game",
    "see",
    "player",
    "think",
    "player",
    "two",
    "win",
    "game",
    "nothing",
    "happens",
    "programmed",
    "anything",
    "happen",
    "need",
    "way",
    "detect",
    "game",
    "ends",
    "going",
    "different",
    "patterns",
    "represent",
    "winning",
    "game",
    "course",
    "also",
    "refresh",
    "reset",
    "everything",
    "also",
    "end",
    "tie",
    "believe",
    "let",
    "see",
    "even",
    "produce",
    "tie",
    "um",
    "requires",
    "little",
    "bit",
    "thinking",
    "case",
    "game",
    "tie",
    "able",
    "recognize",
    "original",
    "project",
    "refactoring",
    "pretty",
    "nice",
    "way",
    "handling",
    "want",
    "highlight",
    "open",
    "original",
    "project",
    "um",
    "check",
    "whether",
    "game",
    "uh",
    "basically",
    "array",
    "winning",
    "patterns",
    "basically",
    "checking",
    "squares",
    "currently",
    "um",
    "plays",
    "match",
    "winning",
    "patterns",
    "would",
    "determine",
    "whether",
    "game",
    "winning",
    "game",
    "going",
    "copy",
    "array",
    "show",
    "going",
    "use",
    "let",
    "start",
    "writing",
    "comments",
    "method",
    "getting",
    "little",
    "bit",
    "large",
    "check",
    "already",
    "play",
    "return",
    "early",
    "want",
    "turns",
    "change",
    "anything",
    "like",
    "come",
    "get",
    "current",
    "player",
    "create",
    "icon",
    "add",
    "icon",
    "div",
    "right",
    "next",
    "thing",
    "need",
    "let",
    "let",
    "actually",
    "put",
    "comment",
    "determine",
    "player",
    "icon",
    "add",
    "square",
    "finally",
    "check",
    "winner",
    "tie",
    "game",
    "going",
    "refactor",
    "know",
    "getting",
    "pretty",
    "busy",
    "method",
    "going",
    "refactor",
    "show",
    "better",
    "way",
    "going",
    "paste",
    "winning",
    "patterns",
    "question",
    "becomes",
    "know",
    "current",
    "state",
    "game",
    "know",
    "squares",
    "played",
    "ones",
    "furthermore",
    "player",
    "played",
    "squares",
    "could",
    "course",
    "elaborate",
    "check",
    "basically",
    "say",
    "know",
    "search",
    "current",
    "square",
    "check",
    "anything",
    "could",
    "maybe",
    "check",
    "class",
    "list",
    "check",
    "fax",
    "fao",
    "basically",
    "loop",
    "squares",
    "board",
    "determine",
    "current",
    "state",
    "game",
    "lot",
    "easier",
    "track",
    "state",
    "go",
    "rather",
    "sort",
    "check",
    "check",
    "state",
    "first",
    "need",
    "define",
    "state",
    "say",
    "need",
    "track",
    "array",
    "game",
    "moves",
    "game",
    "moves",
    "going",
    "player",
    "played",
    "might",
    "look",
    "like",
    "something",
    "like",
    "um",
    "sorry",
    "need",
    "track",
    "square",
    "going",
    "say",
    "square",
    "id",
    "going",
    "1",
    "player",
    "going",
    "one",
    "move",
    "right",
    "would",
    "represent",
    "player",
    "one",
    "clicks",
    "top",
    "left",
    "square",
    "basically",
    "tracking",
    "square",
    "id",
    "player",
    "id",
    "moves",
    "array",
    "let",
    "empty",
    "going",
    "default",
    "state",
    "empty",
    "game",
    "within",
    "event",
    "listener",
    "see",
    "updating",
    "current",
    "player",
    "state",
    "also",
    "want",
    "want",
    "push",
    "move",
    "state",
    "dot",
    "moves",
    "want",
    "push",
    "new",
    "move",
    "going",
    "object",
    "square",
    "id",
    "let",
    "um",
    "reference",
    "square",
    "could",
    "also",
    "say",
    "yeah",
    "say",
    "square",
    "dot",
    "id",
    "needs",
    "number",
    "add",
    "little",
    "coercion",
    "make",
    "number",
    "type",
    "player",
    "call",
    "player",
    "id",
    "consistency",
    "going",
    "equal",
    "current",
    "player",
    "game",
    "already",
    "updated",
    "current",
    "player",
    "right",
    "next",
    "player",
    "need",
    "actually",
    "put",
    "state",
    "update",
    "right",
    "current",
    "player",
    "right",
    "say",
    "um",
    "know",
    "checking",
    "right",
    "already",
    "extracted",
    "let",
    "refactor",
    "real",
    "quick",
    "put",
    "current",
    "player",
    "right",
    "us",
    "see",
    "going",
    "going",
    "console",
    "log",
    "updates",
    "happened",
    "moment",
    "going",
    "change",
    "behavior",
    "tracking",
    "another",
    "state",
    "variable",
    "let",
    "click",
    "something",
    "click",
    "another",
    "click",
    "another",
    "start",
    "see",
    "building",
    "state",
    "building",
    "array",
    "moves",
    "see",
    "square",
    "id1",
    "move",
    "player",
    "id1",
    "x",
    "square",
    "2",
    "player",
    "id",
    "2",
    "square",
    "3",
    "player",
    "id",
    "1",
    "x",
    "see",
    "add",
    "moves",
    "adding",
    "array",
    "moves",
    "interesting",
    "also",
    "derive",
    "state",
    "simplify",
    "things",
    "little",
    "bit",
    "go",
    "back",
    "state",
    "got",
    "ask",
    "well",
    "currently",
    "based",
    "number",
    "moves",
    "array",
    "actually",
    "need",
    "track",
    "current",
    "player",
    "able",
    "derive",
    "based",
    "moves",
    "played",
    "let",
    "actually",
    "delete",
    "current",
    "player",
    "state",
    "really",
    "need",
    "track",
    "moves",
    "show",
    "derive",
    "right",
    "first",
    "thing",
    "want",
    "update",
    "um",
    "let",
    "see",
    "current",
    "player",
    "variable",
    "right",
    "say",
    "um",
    "length",
    "equals",
    "zero",
    "plays",
    "going",
    "say",
    "current",
    "player",
    "one",
    "always",
    "say",
    "current",
    "player",
    "one",
    "start",
    "game",
    "every",
    "time",
    "equal",
    "zero",
    "going",
    "check",
    "last",
    "move",
    "game",
    "last",
    "element",
    "array",
    "grab",
    "player",
    "opposite",
    "player",
    "going",
    "require",
    "little",
    "bit",
    "logic",
    "right",
    "um",
    "going",
    "break",
    "say",
    "last",
    "move",
    "use",
    "little",
    "convenience",
    "method",
    "could",
    "course",
    "check",
    "saying",
    "dot",
    "length",
    "minus",
    "one",
    "typical",
    "way",
    "could",
    "grab",
    "last",
    "element",
    "array",
    "concise",
    "way",
    "javascript",
    "say",
    "negative",
    "one",
    "grab",
    "last",
    "element",
    "array",
    "course",
    "know",
    "array",
    "anything",
    "could",
    "believe",
    "undefined",
    "nothing",
    "array",
    "come",
    "current",
    "player",
    "say",
    "length",
    "array",
    "zero",
    "go",
    "one",
    "otherwise",
    "going",
    "grab",
    "last",
    "move",
    "move",
    "player",
    "id",
    "going",
    "player",
    "id",
    "last",
    "move",
    "actually",
    "going",
    "opposite",
    "say",
    "little",
    "convenience",
    "method",
    "get",
    "opposite",
    "player",
    "pass",
    "player",
    "id",
    "say",
    "player",
    "id",
    "equals",
    "one",
    "going",
    "pass",
    "player",
    "two",
    "otherwise",
    "one",
    "say",
    "get",
    "opposite",
    "player",
    "last",
    "move",
    "sorry",
    "getting",
    "little",
    "complicated",
    "break",
    "helper",
    "methods",
    "later",
    "basically",
    "finding",
    "last",
    "move",
    "got",
    "helper",
    "method",
    "gets",
    "opposite",
    "player",
    "checking",
    "see",
    "moves",
    "moves",
    "player",
    "one",
    "beginning",
    "game",
    "otherwise",
    "going",
    "get",
    "opposite",
    "player",
    "last",
    "move",
    "played",
    "give",
    "us",
    "current",
    "player",
    "way",
    "track",
    "state",
    "flow",
    "checking",
    "adding",
    "moves",
    "game",
    "let",
    "save",
    "see",
    "works",
    "see",
    "alternating",
    "click",
    "many",
    "times",
    "want",
    "pretty",
    "stable",
    "one",
    "thing",
    "tracking",
    "game",
    "moves",
    "really",
    "need",
    "check",
    "whether",
    "square",
    "child",
    "nodes",
    "really",
    "relying",
    "dom",
    "would",
    "better",
    "express",
    "trying",
    "check",
    "state",
    "game",
    "let",
    "say",
    "um",
    "need",
    "helper",
    "method",
    "called",
    "move",
    "going",
    "define",
    "function",
    "takes",
    "square",
    "actually",
    "square",
    "id",
    "number",
    "going",
    "basically",
    "return",
    "going",
    "say",
    "existing",
    "move",
    "equal",
    "going",
    "look",
    "square",
    "id",
    "array",
    "going",
    "call",
    "find",
    "going",
    "look",
    "move",
    "check",
    "square",
    "id",
    "matches",
    "square",
    "id",
    "passing",
    "helper",
    "function",
    "going",
    "return",
    "existing",
    "move",
    "equal",
    "null",
    "another",
    "way",
    "saying",
    "equal",
    "undefined",
    "null",
    "could",
    "also",
    "say",
    "equal",
    "double",
    "equals",
    "undefined",
    "okay",
    "give",
    "us",
    "whether",
    "move",
    "replace",
    "move",
    "pass",
    "square",
    "dot",
    "id",
    "make",
    "sure",
    "number",
    "comparing",
    "type",
    "think",
    "got",
    "right",
    "able",
    "click",
    "squares",
    "multiple",
    "times",
    "anything",
    "telling",
    "us",
    "check",
    "worked",
    "okay",
    "point",
    "know",
    "done",
    "lot",
    "refactoring",
    "seems",
    "like",
    "nothing",
    "goal",
    "whenever",
    "tracking",
    "state",
    "within",
    "application",
    "want",
    "keep",
    "simple",
    "humanly",
    "possible",
    "reason",
    "seen",
    "actually",
    "updating",
    "state",
    "current",
    "player",
    "way",
    "get",
    "rid",
    "deriving",
    "information",
    "update",
    "state",
    "moves",
    "pushing",
    "move",
    "array",
    "every",
    "time",
    "track",
    "something",
    "state",
    "also",
    "update",
    "somewhere",
    "things",
    "track",
    "state",
    "updates",
    "responsible",
    "therefore",
    "possible",
    "errors",
    "going",
    "introduce",
    "application",
    "goal",
    "tracking",
    "state",
    "keep",
    "simple",
    "possible",
    "least",
    "number",
    "variables",
    "keep",
    "track",
    "life",
    "cycle",
    "application",
    "case",
    "tracking",
    "array",
    "moves",
    "little",
    "piece",
    "information",
    "able",
    "derive",
    "current",
    "player",
    "know",
    "update",
    "state",
    "make",
    "another",
    "move",
    "within",
    "game",
    "point",
    "refactored",
    "state",
    "updating",
    "array",
    "moves",
    "lot",
    "allows",
    "us",
    "derive",
    "pretty",
    "much",
    "everything",
    "need",
    "know",
    "current",
    "game",
    "next",
    "thing",
    "need",
    "actually",
    "state",
    "find",
    "whether",
    "someone",
    "game",
    "tie",
    "still",
    "progress",
    "going",
    "actually",
    "make",
    "utility",
    "function",
    "going",
    "add",
    "top",
    "going",
    "final",
    "destination",
    "um",
    "actually",
    "could",
    "even",
    "put",
    "within",
    "app",
    "probably",
    "rearrange",
    "future",
    "want",
    "call",
    "something",
    "like",
    "get",
    "game",
    "status",
    "function",
    "going",
    "take",
    "argument",
    "going",
    "pass",
    "array",
    "moves",
    "also",
    "probably",
    "need",
    "well",
    "think",
    "pretty",
    "much",
    "need",
    "need",
    "array",
    "moves",
    "tracked",
    "state",
    "array",
    "moves",
    "able",
    "give",
    "couple",
    "pieces",
    "information",
    "define",
    "return",
    "value",
    "start",
    "first",
    "thing",
    "going",
    "status",
    "either",
    "um",
    "call",
    "progress",
    "complete",
    "put",
    "placeholder",
    "right",
    "become",
    "dynamic",
    "also",
    "give",
    "winner",
    "put",
    "placeholder",
    "going",
    "either",
    "one",
    "two",
    "player",
    "one",
    "player",
    "two",
    "also",
    "could",
    "null",
    "would",
    "represent",
    "tie",
    "kind",
    "going",
    "um",
    "represent",
    "based",
    "two",
    "pieces",
    "information",
    "able",
    "know",
    "whether",
    "game",
    "know",
    "show",
    "ui",
    "whether",
    "show",
    "modal",
    "pops",
    "gives",
    "result",
    "keep",
    "playing",
    "first",
    "thing",
    "need",
    "get",
    "player",
    "one",
    "moves",
    "moves",
    "array",
    "going",
    "passing",
    "entire",
    "game",
    "need",
    "filter",
    "check",
    "move",
    "whether",
    "player",
    "id",
    "equal",
    "one",
    "give",
    "us",
    "player",
    "one",
    "moves",
    "copy",
    "change",
    "id",
    "get",
    "player",
    "2",
    "moves",
    "able",
    "bring",
    "winning",
    "patterns",
    "come",
    "utility",
    "method",
    "paste",
    "right",
    "want",
    "loop",
    "winning",
    "patterns",
    "check",
    "either",
    "player",
    "moves",
    "three",
    "within",
    "array",
    "three",
    "match",
    "know",
    "one",
    "players",
    "actually",
    "game",
    "way",
    "start",
    "saying",
    "winner",
    "equals",
    "null",
    "assume",
    "start",
    "winner",
    "map",
    "winning",
    "patterns",
    "loop",
    "loop",
    "call",
    "pattern",
    "variable",
    "represent",
    "one",
    "arrays",
    "break",
    "function",
    "check",
    "condition",
    "say",
    "player",
    "one",
    "wins",
    "going",
    "true",
    "every",
    "value",
    "within",
    "pattern",
    "say",
    "v",
    "value",
    "say",
    "player",
    "one",
    "moves",
    "includes",
    "value",
    "got",
    "player",
    "one",
    "moves",
    "array",
    "moves",
    "made",
    "individual",
    "pattern",
    "hundred",
    "percent",
    "overlap",
    "player",
    "one",
    "moves",
    "given",
    "pattern",
    "know",
    "thing",
    "said",
    "player",
    "two",
    "copy",
    "update",
    "array",
    "tell",
    "us",
    "whether",
    "players",
    "write",
    "statement",
    "say",
    "player",
    "one",
    "wins",
    "update",
    "winner",
    "equal",
    "one",
    "id",
    "um",
    "player",
    "2",
    "wins",
    "update",
    "winner",
    "equal",
    "theory",
    "one",
    "player",
    "win",
    "hit",
    "true",
    "condition",
    "either",
    "winner",
    "stay",
    "equal",
    "null",
    "assume",
    "tie",
    "game",
    "complete",
    "come",
    "instead",
    "hard",
    "coding",
    "remove",
    "winner",
    "assigned",
    "variable",
    "right",
    "either",
    "going",
    "null",
    "tie",
    "one",
    "two",
    "status",
    "game",
    "going",
    "progress",
    "either",
    "winner",
    "game",
    "moves",
    "equal",
    "nine",
    "look",
    "game",
    "nine",
    "squares",
    "move",
    "know",
    "game",
    "first",
    "check",
    "say",
    "moves",
    "dot",
    "length",
    "equal",
    "nine",
    "say",
    "going",
    "complete",
    "game",
    "otherwise",
    "progress",
    "course",
    "need",
    "one",
    "check",
    "moves",
    "length",
    "equals",
    "nine",
    "winner",
    "equal",
    "yeah",
    "checking",
    "whether",
    "winner",
    "equal",
    "null",
    "would",
    "represent",
    "someone",
    "game",
    "reached",
    "final",
    "state",
    "nine",
    "plays",
    "would",
    "tie",
    "help",
    "us",
    "figure",
    "status",
    "utility",
    "function",
    "get",
    "game",
    "status",
    "come",
    "checking",
    "winner",
    "tie",
    "game",
    "let",
    "assign",
    "variable",
    "called",
    "status",
    "say",
    "status",
    "pass",
    "going",
    "represent",
    "newest",
    "array",
    "moves",
    "played",
    "let",
    "status",
    "see",
    "dealing",
    "let",
    "play",
    "couple",
    "moves",
    "see",
    "status",
    "going",
    "print",
    "every",
    "time",
    "game",
    "progress",
    "winner",
    "still",
    "progress",
    "click",
    "right",
    "change",
    "status",
    "see",
    "check",
    "updated",
    "complete",
    "populated",
    "winner",
    "player",
    "one",
    "let",
    "go",
    "ahead",
    "check",
    "see",
    "happening",
    "debug",
    "let",
    "go",
    "ahead",
    "classic",
    "console",
    "log",
    "quite",
    "logs",
    "going",
    "printing",
    "every",
    "pattern",
    "let",
    "console",
    "log",
    "pattern",
    "player",
    "one",
    "moves",
    "player",
    "2",
    "moves",
    "get",
    "one",
    "big",
    "object",
    "play",
    "moves",
    "right",
    "getting",
    "different",
    "result",
    "getting",
    "oh",
    "already",
    "see",
    "happening",
    "wrong",
    "missed",
    "filtering",
    "player",
    "one",
    "moves",
    "going",
    "give",
    "entire",
    "move",
    "print",
    "console",
    "see",
    "array",
    "printing",
    "object",
    "square",
    "id",
    "player",
    "id",
    "comparing",
    "every",
    "utility",
    "method",
    "actually",
    "comparing",
    "number",
    "key",
    "square",
    "object",
    "never",
    "equal",
    "really",
    "need",
    "actually",
    "add",
    "map",
    "utility",
    "end",
    "going",
    "map",
    "move",
    "number",
    "value",
    "equal",
    "square",
    "id",
    "moves",
    "print",
    "console",
    "player",
    "one",
    "moves",
    "represent",
    "array",
    "numbers",
    "see",
    "representing",
    "coordinate",
    "um",
    "place",
    "one",
    "two",
    "one",
    "two",
    "three",
    "see",
    "status",
    "complete",
    "winner",
    "equal",
    "player",
    "one",
    "utility",
    "method",
    "seems",
    "working",
    "let",
    "reset",
    "game",
    "try",
    "tie",
    "game",
    "let",
    "mix",
    "oops",
    "accidentally",
    "kind",
    "hard",
    "tie",
    "game",
    "okay",
    "got",
    "tie",
    "game",
    "see",
    "status",
    "complete",
    "winner",
    "null",
    "tell",
    "us",
    "tie",
    "game",
    "implement",
    "logic",
    "event",
    "listener",
    "bottom",
    "console",
    "logging",
    "status",
    "say",
    "status",
    "equals",
    "complete",
    "going",
    "make",
    "alert",
    "browser",
    "say",
    "status",
    "sorry",
    "really",
    "status",
    "dot",
    "status",
    "probably",
    "rename",
    "variable",
    "say",
    "game",
    "game",
    "dot",
    "status",
    "say",
    "game",
    "um",
    "game",
    "winner",
    "going",
    "alert",
    "player",
    "winner",
    "wins",
    "otherwise",
    "know",
    "tie",
    "say",
    "tie",
    "let",
    "try",
    "let",
    "go",
    "ahead",
    "make",
    "player",
    "one",
    "winner",
    "says",
    "winner",
    "defined",
    "reason",
    "referencing",
    "correctly",
    "try",
    "one",
    "time",
    "go",
    "player",
    "one",
    "wins",
    "kind",
    "small",
    "see",
    "got",
    "essential",
    "functionality",
    "hooked",
    "point",
    "think",
    "next",
    "step",
    "trigger",
    "modal",
    "open",
    "someone",
    "game",
    "tie",
    "let",
    "recap",
    "big",
    "long",
    "event",
    "listener",
    "first",
    "looping",
    "squares",
    "game",
    "board",
    "adding",
    "click",
    "listener",
    "square",
    "square",
    "clicked",
    "code",
    "going",
    "run",
    "first",
    "thing",
    "check",
    "move",
    "already",
    "present",
    "within",
    "square",
    "going",
    "exit",
    "early",
    "anything",
    "someone",
    "never",
    "play",
    "twice",
    "square",
    "get",
    "past",
    "know",
    "valid",
    "move",
    "going",
    "check",
    "moved",
    "last",
    "based",
    "state",
    "going",
    "get",
    "opposite",
    "player",
    "last",
    "move",
    "set",
    "current",
    "player",
    "game",
    "take",
    "create",
    "icon",
    "based",
    "player",
    "add",
    "x",
    "icon",
    "put",
    "dom",
    "add",
    "icon",
    "square",
    "also",
    "push",
    "move",
    "new",
    "move",
    "state",
    "tracking",
    "history",
    "moves",
    "game",
    "check",
    "game",
    "status",
    "move",
    "happened",
    "status",
    "complete",
    "know",
    "something",
    "open",
    "modal",
    "explain",
    "whether",
    "someone",
    "game",
    "tie",
    "goal",
    "open",
    "modal",
    "give",
    "user",
    "action",
    "actually",
    "reset",
    "game",
    "start",
    "remember",
    "built",
    "couple",
    "hours",
    "ago",
    "see",
    "modal",
    "hidden",
    "class",
    "sitting",
    "remove",
    "save",
    "file",
    "see",
    "get",
    "dialog",
    "open",
    "going",
    "cover",
    "screen",
    "play",
    "button",
    "things",
    "number",
    "one",
    "trigger",
    "actually",
    "open",
    "close",
    "done",
    "number",
    "two",
    "add",
    "click",
    "listener",
    "button",
    "right",
    "someone",
    "clicks",
    "play",
    "game",
    "state",
    "reset",
    "know",
    "everything",
    "goes",
    "back",
    "beginning",
    "let",
    "add",
    "hidden",
    "class",
    "back",
    "default",
    "state",
    "said",
    "going",
    "refactored",
    "point",
    "got",
    "lot",
    "code",
    "sitting",
    "one",
    "place",
    "going",
    "hard",
    "follow",
    "long",
    "term",
    "moment",
    "putting",
    "everything",
    "one",
    "method",
    "keeping",
    "simple",
    "refactor",
    "anything",
    "quite",
    "yet",
    "way",
    "going",
    "first",
    "add",
    "selector",
    "modal",
    "like",
    "done",
    "let",
    "see",
    "given",
    "data",
    "ids",
    "elements",
    "going",
    "select",
    "control",
    "javascript",
    "thing",
    "modal",
    "let",
    "call",
    "modal",
    "modal",
    "contents",
    "also",
    "give",
    "data",
    "id",
    "set",
    "equal",
    "modal",
    "contents",
    "going",
    "let",
    "see",
    "actually",
    "going",
    "put",
    "really",
    "need",
    "control",
    "need",
    "control",
    "text",
    "element",
    "data",
    "id",
    "equals",
    "modal",
    "text",
    "data",
    "id",
    "modal",
    "button",
    "really",
    "need",
    "add",
    "data",
    "ids",
    "really",
    "could",
    "select",
    "modal",
    "grab",
    "elements",
    "dynamically",
    "pretty",
    "explicit",
    "clarity",
    "let",
    "go",
    "ahead",
    "select",
    "within",
    "app",
    "kind",
    "collecting",
    "elements",
    "selected",
    "let",
    "copy",
    "name",
    "one",
    "modal",
    "data",
    "id",
    "modal",
    "say",
    "modal",
    "text",
    "modal",
    "button",
    "see",
    "lot",
    "repetitive",
    "stuff",
    "thinking",
    "refactored",
    "little",
    "bit",
    "simpler",
    "eliminate",
    "need",
    "write",
    "boiler",
    "played",
    "leaving",
    "pretty",
    "clear",
    "happening",
    "got",
    "three",
    "pretty",
    "much",
    "control",
    "check",
    "game",
    "status",
    "game",
    "status",
    "complete",
    "winner",
    "one",
    "thing",
    "know",
    "need",
    "print",
    "modal",
    "game",
    "let",
    "say",
    "app",
    "dot",
    "dollar",
    "sign",
    "namespace",
    "elements",
    "um",
    "actually",
    "first",
    "need",
    "open",
    "modal",
    "sorry",
    "game",
    "complete",
    "know",
    "need",
    "open",
    "modal",
    "modal",
    "going",
    "look",
    "class",
    "list",
    "toggle",
    "hidden",
    "class",
    "little",
    "bit",
    "explicit",
    "since",
    "know",
    "opening",
    "rather",
    "toggling",
    "hidden",
    "class",
    "could",
    "work",
    "going",
    "actually",
    "remove",
    "yeah",
    "able",
    "say",
    "hidden",
    "class",
    "let",
    "try",
    "first",
    "let",
    "make",
    "sure",
    "working",
    "someone",
    "wins",
    "game",
    "says",
    "undefined",
    "mess",
    "something",
    "oh",
    "problem",
    "using",
    "query",
    "selector",
    "squares",
    "basic",
    "query",
    "selector",
    "believe",
    "part",
    "work",
    "let",
    "win",
    "game",
    "someone",
    "get",
    "alert",
    "also",
    "get",
    "modal",
    "let",
    "remove",
    "alert",
    "um",
    "moment",
    "kind",
    "getting",
    "way",
    "know",
    "game",
    "winner",
    "say",
    "text",
    "going",
    "equal",
    "player",
    "give",
    "id",
    "message",
    "want",
    "put",
    "let",
    "call",
    "message",
    "actually",
    "message",
    "going",
    "tie",
    "game",
    "actually",
    "extract",
    "message",
    "um",
    "assign",
    "matter",
    "going",
    "say",
    "app",
    "dot",
    "dollar",
    "sign",
    "dot",
    "modaltext",
    "dot",
    "inner",
    "text",
    "inner",
    "html",
    "ca",
    "remember",
    "uh",
    "anything",
    "text",
    "content",
    "equal",
    "message",
    "let",
    "save",
    "see",
    "works",
    "someone",
    "going",
    "win",
    "game",
    "player",
    "one",
    "let",
    "refresh",
    "page",
    "time",
    "let",
    "let",
    "player",
    "2",
    "win",
    "player",
    "2",
    "wins",
    "see",
    "dynamically",
    "populate",
    "last",
    "thing",
    "need",
    "put",
    "click",
    "listener",
    "play",
    "button",
    "going",
    "method",
    "remember",
    "registering",
    "event",
    "listeners",
    "top",
    "level",
    "function",
    "let",
    "put",
    "right",
    "say",
    "app",
    "dot",
    "dollar",
    "sign",
    "dot",
    "modal",
    "button",
    "add",
    "event",
    "listener",
    "going",
    "listen",
    "click",
    "event",
    "event",
    "going",
    "set",
    "set",
    "state",
    "dot",
    "moves",
    "equal",
    "empty",
    "array",
    "want",
    "reset",
    "game",
    "also",
    "want",
    "close",
    "modal",
    "open",
    "way",
    "dollar",
    "sign",
    "dot",
    "modal",
    "classlist",
    "dot",
    "actually",
    "remove",
    "want",
    "add",
    "hidden",
    "class",
    "back",
    "hide",
    "modal",
    "hooked",
    "go",
    "game",
    "someone",
    "wins",
    "click",
    "button",
    "closes",
    "see",
    "still",
    "game",
    "moves",
    "resetting",
    "state",
    "actually",
    "change",
    "ui",
    "quite",
    "yet",
    "refactor",
    "point",
    "moment",
    "reset",
    "state",
    "also",
    "loop",
    "squares",
    "empty",
    "contents",
    "let",
    "see",
    "would",
    "say",
    "squares",
    "say",
    "square",
    "going",
    "say",
    "square",
    "dot",
    "replace",
    "children",
    "leave",
    "empty",
    "shortcut",
    "clear",
    "everything",
    "squares",
    "let",
    "go",
    "back",
    "try",
    "one",
    "time",
    "someone",
    "wins",
    "game",
    "click",
    "play",
    "everything",
    "cleared",
    "functioning",
    "game",
    "player",
    "one",
    "wins",
    "see",
    "get",
    "tie",
    "really",
    "think",
    "one",
    "get",
    "tie",
    "um",
    "let",
    "see",
    "work",
    "okay",
    "tie",
    "game",
    "play",
    "clears",
    "last",
    "thing",
    "working",
    "turn",
    "indicator",
    "see",
    "matter",
    "play",
    "staying",
    "obviously",
    "want",
    "update",
    "great",
    "place",
    "going",
    "within",
    "super",
    "long",
    "event",
    "listener",
    "square",
    "clicks",
    "updating",
    "current",
    "player",
    "actually",
    "else",
    "statement",
    "first",
    "grab",
    "elements",
    "want",
    "update",
    "let",
    "find",
    "turn",
    "indicator",
    "see",
    "right",
    "got",
    "icon",
    "need",
    "update",
    "text",
    "need",
    "update",
    "going",
    "add",
    "data",
    "id",
    "call",
    "turn",
    "go",
    "select",
    "list",
    "elements",
    "say",
    "turn",
    "copy",
    "one",
    "thing",
    "need",
    "kind",
    "missed",
    "got",
    "turquoise",
    "class",
    "set",
    "individual",
    "icon",
    "want",
    "match",
    "would",
    "little",
    "bit",
    "easier",
    "put",
    "turn",
    "element",
    "also",
    "need",
    "match",
    "things",
    "first",
    "player",
    "player",
    "one",
    "determining",
    "going",
    "x",
    "going",
    "yellow",
    "need",
    "match",
    "let",
    "save",
    "make",
    "sure",
    "matching",
    "looking",
    "starting",
    "point",
    "need",
    "toggle",
    "yellow",
    "turquoise",
    "back",
    "toggle",
    "elements",
    "within",
    "indicate",
    "turn",
    "um",
    "one",
    "thing",
    "need",
    "check",
    "get",
    "little",
    "bit",
    "clear",
    "next",
    "current",
    "player",
    "represents",
    "actually",
    "clicking",
    "right",
    "next",
    "player",
    "going",
    "one",
    "want",
    "change",
    "turn",
    "indicator",
    "got",
    "current",
    "player",
    "say",
    "next",
    "player",
    "reuse",
    "get",
    "opposite",
    "player",
    "know",
    "little",
    "redundant",
    "um",
    "go",
    "ahead",
    "use",
    "represent",
    "id",
    "next",
    "player",
    "come",
    "say",
    "turn",
    "label",
    "going",
    "new",
    "element",
    "could",
    "replaced",
    "element",
    "already",
    "going",
    "create",
    "p",
    "element",
    "turn",
    "label",
    "dot",
    "inner",
    "text",
    "going",
    "equal",
    "player",
    "next",
    "player",
    "determined",
    "copy",
    "um",
    "actually",
    "put",
    "right",
    "say",
    "dollar",
    "sign",
    "select",
    "turn",
    "element",
    "remember",
    "selecting",
    "entire",
    "div",
    "want",
    "replace",
    "contents",
    "need",
    "say",
    "replace",
    "children",
    "pass",
    "shows",
    "spread",
    "parameters",
    "individual",
    "nodes",
    "replace",
    "order",
    "want",
    "icon",
    "go",
    "first",
    "pass",
    "pass",
    "turn",
    "label",
    "save",
    "let",
    "see",
    "get",
    "correct",
    "result",
    "go",
    "see",
    "getting",
    "correct",
    "text",
    "color",
    "updating",
    "getting",
    "icon",
    "also",
    "added",
    "believe",
    "problem",
    "actually",
    "adding",
    "icon",
    "two",
    "different",
    "places",
    "probably",
    "need",
    "break",
    "two",
    "separate",
    "elements",
    "say",
    "turn",
    "icon",
    "square",
    "icon",
    "two",
    "separate",
    "elements",
    "pass",
    "square",
    "icon",
    "pass",
    "turn",
    "icon",
    "course",
    "want",
    "exact",
    "colors",
    "believe",
    "actually",
    "need",
    "opposite",
    "next",
    "player",
    "going",
    "opposite",
    "color",
    "current",
    "player",
    "say",
    "square",
    "icon",
    "copy",
    "turn",
    "icon",
    "exact",
    "opposite",
    "turquoise",
    "turn",
    "icon",
    "x",
    "yellow",
    "going",
    "refactor",
    "going",
    "confusing",
    "verbose",
    "future",
    "hopefully",
    "works",
    "getting",
    "lot",
    "closer",
    "everything",
    "correct",
    "except",
    "looks",
    "like",
    "text",
    "yellow",
    "setting",
    "color",
    "need",
    "say",
    "turn",
    "label",
    "dot",
    "class",
    "list",
    "let",
    "go",
    "ahead",
    "turn",
    "list",
    "set",
    "equal",
    "turquoise",
    "match",
    "making",
    "turn",
    "icon",
    "right",
    "copy",
    "make",
    "one",
    "yellow",
    "player",
    "two",
    "looks",
    "like",
    "getting",
    "everything",
    "correct",
    "play",
    "x",
    "player",
    "one",
    "play",
    "x",
    "well",
    "got",
    "play",
    "see",
    "updating",
    "correctly",
    "noticed",
    "end",
    "game",
    "player",
    "one",
    "wins",
    "see",
    "player",
    "2",
    "next",
    "turn",
    "click",
    "play",
    "going",
    "reset",
    "need",
    "remember",
    "reset",
    "turn",
    "since",
    "coupled",
    "turn",
    "logic",
    "within",
    "event",
    "listener",
    "easy",
    "way",
    "resetting",
    "everything",
    "point",
    "reached",
    "place",
    "code",
    "got",
    "lot",
    "stuff",
    "going",
    "right",
    "method",
    "would",
    "like",
    "able",
    "reuse",
    "different",
    "places",
    "like",
    "reset",
    "state",
    "whatnot",
    "right",
    "hard",
    "next",
    "segment",
    "video",
    "going",
    "taking",
    "code",
    "refactoring",
    "look",
    "little",
    "bit",
    "cleaner",
    "reusable",
    "easy",
    "follow",
    "go",
    "right",
    "working",
    "game",
    "part",
    "long",
    "refresh",
    "things",
    "determine",
    "wins",
    "game",
    "refactor",
    "things",
    "start",
    "talking",
    "keeping",
    "state",
    "scoreboard",
    "moving",
    "mvc",
    "pattern",
    "talked",
    "got",
    "naive",
    "approach",
    "one",
    "file",
    "still",
    "refactoring",
    "iterating",
    "go",
    "end",
    "something",
    "pretty",
    "clean",
    "reuse",
    "extend",
    "future",
    "reached",
    "point",
    "code",
    "getting",
    "bit",
    "confusing",
    "continued",
    "add",
    "functionality",
    "trying",
    "reset",
    "turn",
    "indicator",
    "game",
    "ends",
    "remember",
    "got",
    "problem",
    "reset",
    "also",
    "able",
    "reset",
    "whole",
    "game",
    "reset",
    "round",
    "track",
    "state",
    "know",
    "history",
    "games",
    "lot",
    "given",
    "current",
    "code",
    "going",
    "confusing",
    "got",
    "stuff",
    "one",
    "method",
    "sorts",
    "stuff",
    "updating",
    "state",
    "updating",
    "view",
    "one",
    "spot",
    "pattern",
    "comes",
    "helps",
    "us",
    "bit",
    "waited",
    "point",
    "um",
    "mainly",
    "simulate",
    "real",
    "life",
    "scenario",
    "generally",
    "going",
    "start",
    "one",
    "file",
    "understand",
    "logic",
    "need",
    "within",
    "application",
    "go",
    "refactor",
    "keep",
    "things",
    "clear",
    "head",
    "make",
    "code",
    "maintainable",
    "point",
    "understand",
    "patterns",
    "actually",
    "need",
    "makes",
    "lot",
    "easier",
    "introduce",
    "something",
    "like",
    "mvc",
    "model",
    "view",
    "controller",
    "pattern",
    "side",
    "note",
    "mvc",
    "pattern",
    "really",
    "relevant",
    "something",
    "like",
    "ruby",
    "rails",
    "typed",
    "ruby",
    "rails",
    "go",
    "documentation",
    "start",
    "see",
    "lot",
    "patterns",
    "introducing",
    "think",
    "need",
    "use",
    "ruby",
    "rails",
    "kind",
    "premier",
    "example",
    "framework",
    "leverages",
    "model",
    "view",
    "controller",
    "pattern",
    "gained",
    "lot",
    "popularity",
    "go",
    "docs",
    "let",
    "see",
    "go",
    "api",
    "maybe",
    "probably",
    "want",
    "go",
    "scrolling",
    "docs",
    "already",
    "see",
    "header",
    "section",
    "called",
    "models",
    "views",
    "controllers",
    "explicitly",
    "build",
    "pattern",
    "good",
    "reference",
    "need",
    "check",
    "wanted",
    "point",
    "enough",
    "theory",
    "let",
    "get",
    "way",
    "going",
    "build",
    "model",
    "view",
    "controller",
    "pattern",
    "actually",
    "breaking",
    "single",
    "file",
    "three",
    "different",
    "responsibilities",
    "kind",
    "brings",
    "us",
    "back",
    "best",
    "practices",
    "whether",
    "using",
    "model",
    "view",
    "controller",
    "pattern",
    "patterns",
    "could",
    "use",
    "main",
    "point",
    "want",
    "separate",
    "um",
    "logic",
    "um",
    "responsibility",
    "words",
    "separation",
    "concerns",
    "principle",
    "good",
    "programming",
    "principle",
    "general",
    "something",
    "would",
    "always",
    "want",
    "try",
    "aim",
    "matter",
    "pattern",
    "using",
    "let",
    "jump",
    "back",
    "obviously",
    "got",
    "quite",
    "bit",
    "functionality",
    "want",
    "completely",
    "redo",
    "lot",
    "good",
    "stuff",
    "worked",
    "need",
    "refactor",
    "couple",
    "files",
    "js",
    "directory",
    "going",
    "add",
    "new",
    "file",
    "one",
    "called",
    "one",
    "going",
    "called",
    "actually",
    "represent",
    "model",
    "calling",
    "store",
    "kind",
    "represents",
    "storage",
    "using",
    "could",
    "call",
    "whatever",
    "want",
    "um",
    "call",
    "store",
    "really",
    "going",
    "quote",
    "unquote",
    "controller",
    "super",
    "explicit",
    "um",
    "adherence",
    "pattern",
    "getting",
    "close",
    "goal",
    "design",
    "pattern",
    "make",
    "things",
    "easier",
    "need",
    "follow",
    "rigidly",
    "everything",
    "matches",
    "one",
    "one",
    "long",
    "useful",
    "going",
    "okay",
    "go",
    "build",
    "going",
    "kind",
    "looking",
    "um",
    "screen",
    "actually",
    "know",
    "already",
    "built",
    "app",
    "preparation",
    "video",
    "want",
    "make",
    "sure",
    "live",
    "build",
    "matches",
    "final",
    "code",
    "going",
    "see",
    "github",
    "repository",
    "linked",
    "video",
    "description",
    "making",
    "sure",
    "naming",
    "methods",
    "forth",
    "need",
    "start",
    "think",
    "going",
    "um",
    "let",
    "go",
    "ahead",
    "view",
    "logic",
    "application",
    "pertaining",
    "moment",
    "let",
    "open",
    "view",
    "going",
    "jumping",
    "programming",
    "concepts",
    "another",
    "way",
    "saying",
    "going",
    "working",
    "javascript",
    "classes",
    "specifically",
    "es6",
    "syntax",
    "4",
    "classes",
    "try",
    "point",
    "syntax",
    "using",
    "means",
    "familiar",
    "classes",
    "work",
    "would",
    "recommend",
    "brushing",
    "pausing",
    "video",
    "reading",
    "couple",
    "know",
    "overview",
    "guides",
    "get",
    "little",
    "bit",
    "speed",
    "said",
    "try",
    "explain",
    "things",
    "go",
    "going",
    "assume",
    "sort",
    "advanced",
    "knowledge",
    "walk",
    "together",
    "first",
    "thing",
    "need",
    "view",
    "define",
    "class",
    "going",
    "using",
    "call",
    "class",
    "view",
    "really",
    "syntax",
    "need",
    "course",
    "use",
    "constructor",
    "kind",
    "initialization",
    "class",
    "belongs",
    "available",
    "class",
    "use",
    "furthermore",
    "going",
    "start",
    "bring",
    "methods",
    "things",
    "um",
    "available",
    "class",
    "instances",
    "um",
    "called",
    "class",
    "properties",
    "going",
    "store",
    "elements",
    "defined",
    "earlier",
    "initialize",
    "dollar",
    "sign",
    "empty",
    "object",
    "start",
    "populating",
    "second",
    "first",
    "thing",
    "want",
    "class",
    "constructor",
    "want",
    "elements",
    "selected",
    "class",
    "initialized",
    "go",
    "back",
    "take",
    "selectors",
    "used",
    "assign",
    "constructor",
    "update",
    "syntax",
    "really",
    "click",
    "select",
    "bunch",
    "say",
    "dot",
    "dollar",
    "sign",
    "dot",
    "whatever",
    "variable",
    "basically",
    "referencing",
    "say",
    "referencing",
    "class",
    "instance",
    "class",
    "instance",
    "defined",
    "property",
    "uh",
    "dollar",
    "sign",
    "could",
    "variable",
    "using",
    "short",
    "name",
    "space",
    "easy",
    "easy",
    "way",
    "access",
    "saying",
    "class",
    "instance",
    "property",
    "want",
    "um",
    "another",
    "nested",
    "property",
    "represent",
    "element",
    "instead",
    "colons",
    "need",
    "set",
    "equal",
    "signs",
    "hit",
    "command",
    "format",
    "things",
    "save",
    "although",
    "got",
    "commas",
    "end",
    "need",
    "get",
    "rid",
    "first",
    "save",
    "prettier",
    "format",
    "us",
    "remember",
    "mentioned",
    "earlier",
    "video",
    "got",
    "format",
    "save",
    "setup",
    "prettier",
    "extension",
    "vs",
    "code",
    "saving",
    "like",
    "formatting",
    "everything",
    "point",
    "got",
    "basic",
    "class",
    "initializes",
    "going",
    "select",
    "elements",
    "document",
    "alone",
    "going",
    "actually",
    "work",
    "quite",
    "yet",
    "need",
    "connect",
    "furthermore",
    "going",
    "really",
    "need",
    "namespace",
    "anymore",
    "going",
    "working",
    "um",
    "may",
    "use",
    "namespace",
    "going",
    "moving",
    "pretty",
    "much",
    "code",
    "order",
    "without",
    "completely",
    "breaking",
    "everything",
    "going",
    "leave",
    "code",
    "intact",
    "good",
    "way",
    "refactoring",
    "something",
    "want",
    "leave",
    "original",
    "code",
    "intact",
    "build",
    "new",
    "code",
    "side",
    "side",
    "replace",
    "end",
    "since",
    "going",
    "code",
    "anymore",
    "going",
    "build",
    "side",
    "side",
    "going",
    "make",
    "standalone",
    "function",
    "called",
    "init",
    "yes",
    "global",
    "namespace",
    "could",
    "really",
    "thing",
    "maybe",
    "one",
    "variable",
    "put",
    "global",
    "scope",
    "fine",
    "init",
    "method",
    "basically",
    "initialize",
    "class",
    "say",
    "view",
    "going",
    "equal",
    "new",
    "view",
    "going",
    "make",
    "class",
    "instance",
    "class",
    "right",
    "going",
    "test",
    "things",
    "view",
    "dot",
    "dollar",
    "sign",
    "let",
    "say",
    "turn",
    "one",
    "elements",
    "selected",
    "words",
    "testing",
    "make",
    "sure",
    "initialized",
    "correctly",
    "furthermore",
    "want",
    "duplicate",
    "event",
    "listener",
    "eventually",
    "remove",
    "refactored",
    "everything",
    "want",
    "use",
    "knit",
    "method",
    "window",
    "loads",
    "let",
    "save",
    "go",
    "back",
    "browser",
    "let",
    "get",
    "tabs",
    "organized",
    "okay",
    "go",
    "browser",
    "go",
    "console",
    "going",
    "say",
    "uncut",
    "reference",
    "error",
    "view",
    "defined",
    "good",
    "reason",
    "imported",
    "script",
    "obviously",
    "imported",
    "right",
    "bottom",
    "would",
    "also",
    "need",
    "import",
    "defined",
    "come",
    "back",
    "see",
    "console",
    "log",
    "worked",
    "defined",
    "let",
    "go",
    "back",
    "flip",
    "let",
    "put",
    "different",
    "order",
    "first",
    "load",
    "view",
    "load",
    "app",
    "still",
    "work",
    "well",
    "answer",
    "yes",
    "believe",
    "hoisting",
    "happens",
    "javascript",
    "um",
    "confusing",
    "got",
    "two",
    "separate",
    "files",
    "different",
    "variables",
    "kind",
    "reference",
    "get",
    "confusing",
    "files",
    "one",
    "solution",
    "help",
    "us",
    "quite",
    "bit",
    "allows",
    "us",
    "import",
    "one",
    "script",
    "use",
    "es6",
    "modules",
    "instead",
    "adding",
    "additional",
    "script",
    "import",
    "gets",
    "messy",
    "five",
    "six",
    "scripts",
    "going",
    "import",
    "going",
    "set",
    "type",
    "attribute",
    "script",
    "going",
    "name",
    "module",
    "going",
    "going",
    "tell",
    "browser",
    "script",
    "es6",
    "module",
    "pretty",
    "much",
    "every",
    "major",
    "browser",
    "es6",
    "syntax",
    "supported",
    "well",
    "modules",
    "nice",
    "way",
    "handle",
    "imports",
    "exports",
    "rather",
    "referencing",
    "view",
    "class",
    "variable",
    "import",
    "top",
    "file",
    "say",
    "import",
    "view",
    "right",
    "going",
    "work",
    "going",
    "work",
    "exported",
    "anything",
    "module",
    "need",
    "put",
    "export",
    "want",
    "export",
    "default",
    "export",
    "reference",
    "file",
    "like",
    "left",
    "keyword",
    "default",
    "would",
    "need",
    "put",
    "brackets",
    "reference",
    "like",
    "work",
    "go",
    "browser",
    "see",
    "printed",
    "bottom",
    "right",
    "console",
    "log",
    "think",
    "little",
    "cleaner",
    "export",
    "default",
    "go",
    "back",
    "app",
    "remove",
    "brackets",
    "save",
    "check",
    "make",
    "sure",
    "console",
    "log",
    "working",
    "another",
    "property",
    "um",
    "feature",
    "using",
    "modules",
    "default",
    "use",
    "strict",
    "ever",
    "seen",
    "use",
    "strict",
    "javascript",
    "use",
    "strict",
    "look",
    "strict",
    "mode",
    "something",
    "javascript",
    "used",
    "really",
    "relevant",
    "different",
    "files",
    "would",
    "different",
    "modes",
    "nowadays",
    "pretty",
    "much",
    "see",
    "strict",
    "mode",
    "every",
    "file",
    "ever",
    "write",
    "lot",
    "useful",
    "defaults",
    "kind",
    "protect",
    "code",
    "sorts",
    "problematic",
    "patterns",
    "default",
    "es6",
    "modules",
    "strict",
    "mode",
    "means",
    "might",
    "say",
    "well",
    "oh",
    "view",
    "global",
    "scope",
    "case",
    "actually",
    "attached",
    "window",
    "go",
    "console",
    "type",
    "view",
    "going",
    "say",
    "view",
    "defined",
    "way",
    "would",
    "possible",
    "said",
    "explicitly",
    "attached",
    "window",
    "like",
    "equals",
    "view",
    "able",
    "see",
    "class",
    "defined",
    "want",
    "wanted",
    "point",
    "feature",
    "es6",
    "modules",
    "default",
    "going",
    "behave",
    "way",
    "going",
    "protect",
    "global",
    "scope",
    "way",
    "also",
    "means",
    "init",
    "method",
    "remember",
    "earlier",
    "scrolling",
    "defined",
    "app",
    "variable",
    "namespace",
    "around",
    "entire",
    "app",
    "litter",
    "global",
    "scope",
    "variable",
    "declarations",
    "try",
    "access",
    "app",
    "um",
    "going",
    "able",
    "es6",
    "module",
    "default",
    "exposed",
    "global",
    "namespace",
    "basically",
    "okay",
    "adding",
    "init",
    "method",
    "global",
    "scope",
    "know",
    "going",
    "exposed",
    "browser",
    "unnecessarily",
    "little",
    "tidbit",
    "let",
    "keep",
    "moving",
    "refactor",
    "looking",
    "app",
    "let",
    "also",
    "find",
    "things",
    "relate",
    "view",
    "one",
    "things",
    "relevant",
    "view",
    "class",
    "event",
    "listeners",
    "want",
    "event",
    "want",
    "view",
    "register",
    "event",
    "listeners",
    "initially",
    "copy",
    "final",
    "code",
    "want",
    "see",
    "method",
    "put",
    "final",
    "code",
    "event",
    "listeners",
    "method",
    "view",
    "going",
    "open",
    "two",
    "code",
    "windows",
    "make",
    "little",
    "bit",
    "smaller",
    "us",
    "hopefully",
    "still",
    "see",
    "basically",
    "take",
    "event",
    "listeners",
    "make",
    "method",
    "within",
    "view",
    "class",
    "stay",
    "consistent",
    "naming",
    "call",
    "first",
    "one",
    "bind",
    "game",
    "reset",
    "event",
    "game",
    "reset",
    "actually",
    "new",
    "pattern",
    "introducing",
    "rather",
    "handling",
    "event",
    "listeners",
    "within",
    "view",
    "want",
    "controller",
    "reason",
    "controller",
    "going",
    "read",
    "current",
    "state",
    "application",
    "based",
    "state",
    "may",
    "different",
    "things",
    "view",
    "want",
    "leave",
    "view",
    "handle",
    "events",
    "going",
    "put",
    "handler",
    "callback",
    "function",
    "passed",
    "argument",
    "event",
    "listeners",
    "use",
    "es6",
    "syntax",
    "define",
    "function",
    "going",
    "actually",
    "register",
    "event",
    "listeners",
    "type",
    "first",
    "one",
    "see",
    "slowly",
    "copy",
    "things",
    "example",
    "let",
    "look",
    "one",
    "um",
    "good",
    "example",
    "use",
    "reset",
    "game",
    "going",
    "reference",
    "initialized",
    "selected",
    "elements",
    "dot",
    "dollar",
    "sign",
    "dot",
    "one",
    "selecting",
    "reset",
    "button",
    "like",
    "going",
    "add",
    "event",
    "listener",
    "listening",
    "click",
    "event",
    "callback",
    "going",
    "something",
    "difference",
    "instead",
    "handling",
    "view",
    "going",
    "pass",
    "handler",
    "pass",
    "handler",
    "event",
    "listener",
    "going",
    "handled",
    "let",
    "add",
    "rest",
    "bind",
    "new",
    "round",
    "event",
    "pass",
    "handler",
    "bind",
    "player",
    "move",
    "event",
    "handler",
    "basically",
    "copy",
    "um",
    "move",
    "event",
    "copy",
    "new",
    "round",
    "add",
    "dot",
    "dollar",
    "sign",
    "work",
    "okay",
    "course",
    "want",
    "handle",
    "elsewhere",
    "pass",
    "handler",
    "function",
    "parameters",
    "arguments",
    "mean",
    "player",
    "move",
    "event",
    "one",
    "looping",
    "squares",
    "adding",
    "listeners",
    "point",
    "want",
    "copy",
    "everything",
    "going",
    "little",
    "bit",
    "differently",
    "moving",
    "forward",
    "going",
    "start",
    "diverge",
    "original",
    "implementation",
    "start",
    "use",
    "reference",
    "trying",
    "copy",
    "things",
    "verbatim",
    "want",
    "select",
    "squares",
    "squares",
    "similar",
    "want",
    "bind",
    "event",
    "listener",
    "say",
    "square",
    "dot",
    "add",
    "event",
    "listener",
    "listening",
    "click",
    "passing",
    "handler",
    "right",
    "let",
    "talk",
    "um",
    "event",
    "listeners",
    "going",
    "view",
    "things",
    "notice",
    "skipped",
    "left",
    "skipped",
    "one",
    "right",
    "clicking",
    "button",
    "reset",
    "game",
    "although",
    "probably",
    "added",
    "specifically",
    "let",
    "look",
    "one",
    "toggling",
    "something",
    "ui",
    "remember",
    "actions",
    "menu",
    "opening",
    "closing",
    "going",
    "affect",
    "state",
    "game",
    "whatsoever",
    "purely",
    "view",
    "um",
    "client",
    "piece",
    "state",
    "tracking",
    "therefore",
    "terms",
    "responsibilities",
    "view",
    "handle",
    "hundred",
    "percent",
    "need",
    "change",
    "state",
    "anything",
    "actually",
    "register",
    "constructor",
    "keep",
    "entirely",
    "encapsulated",
    "call",
    "section",
    "ui",
    "event",
    "listeners",
    "going",
    "say",
    "dot",
    "dollar",
    "sign",
    "menu",
    "items",
    "sorry",
    "need",
    "modal",
    "button",
    "menu",
    "button",
    "menu",
    "items",
    "going",
    "toggle",
    "class",
    "list",
    "say",
    "menu",
    "items",
    "add",
    "event",
    "listener",
    "listening",
    "click",
    "go",
    "back",
    "callback",
    "handling",
    "view",
    "say",
    "dot",
    "dollar",
    "sign",
    "dot",
    "menu",
    "items",
    "dot",
    "class",
    "list",
    "toggle",
    "hidden",
    "going",
    "actually",
    "improve",
    "handler",
    "little",
    "bit",
    "reusability",
    "let",
    "start",
    "point",
    "think",
    "time",
    "kind",
    "comment",
    "app",
    "going",
    "resetting",
    "good",
    "amount",
    "functionality",
    "time",
    "oops",
    "go",
    "whole",
    "app",
    "whole",
    "thing",
    "including",
    "uh",
    "load",
    "event",
    "comment",
    "keep",
    "reference",
    "commented",
    "point",
    "view",
    "let",
    "collapse",
    "going",
    "easier",
    "see",
    "save",
    "let",
    "see",
    "ui",
    "looks",
    "like",
    "right",
    "ca",
    "really",
    "anything",
    "click",
    "stuff",
    "nothing",
    "going",
    "actually",
    "happen",
    "reason",
    "nothing",
    "working",
    "actually",
    "grabbed",
    "wrong",
    "thing",
    "right",
    "let",
    "bring",
    "full",
    "screen",
    "um",
    "new",
    "view",
    "class",
    "actually",
    "actually",
    "adding",
    "click",
    "listener",
    "menu",
    "items",
    "menu",
    "go",
    "back",
    "look",
    "want",
    "register",
    "register",
    "listener",
    "menu",
    "probably",
    "specifically",
    "want",
    "add",
    "data",
    "id",
    "call",
    "menu",
    "button",
    "let",
    "go",
    "back",
    "view",
    "got",
    "menu",
    "menu",
    "items",
    "let",
    "add",
    "one",
    "menu",
    "button",
    "add",
    "selector",
    "listening",
    "click",
    "menu",
    "button",
    "happens",
    "toggling",
    "hidden",
    "class",
    "many",
    "items",
    "going",
    "back",
    "able",
    "toggle",
    "menu",
    "open",
    "closed",
    "ca",
    "anything",
    "clicking",
    "reset",
    "button",
    "new",
    "round",
    "square",
    "anything",
    "anymore",
    "need",
    "start",
    "wiring",
    "events",
    "show",
    "pattern",
    "using",
    "see",
    "methods",
    "bind",
    "event",
    "listeners",
    "remember",
    "default",
    "class",
    "initialized",
    "um",
    "instantiated",
    "methods",
    "going",
    "run",
    "methods",
    "class",
    "someone",
    "needs",
    "actually",
    "call",
    "event",
    "listeners",
    "added",
    "going",
    "apps",
    "init",
    "method",
    "right",
    "class",
    "initialization",
    "class",
    "instance",
    "called",
    "view",
    "able",
    "bind",
    "events",
    "bind",
    "game",
    "reset",
    "event",
    "see",
    "autocomplete",
    "tells",
    "us",
    "need",
    "pass",
    "handler",
    "handler",
    "going",
    "give",
    "us",
    "event",
    "stub",
    "like",
    "consult",
    "log",
    "event",
    "also",
    "name",
    "reset",
    "event",
    "copy",
    "three",
    "let",
    "see",
    "call",
    "bind",
    "new",
    "round",
    "event",
    "bind",
    "player",
    "move",
    "event",
    "actually",
    "calling",
    "methods",
    "registering",
    "event",
    "listeners",
    "go",
    "back",
    "ui",
    "able",
    "least",
    "click",
    "things",
    "see",
    "things",
    "happening",
    "new",
    "round",
    "event",
    "click",
    "first",
    "square",
    "says",
    "player",
    "move",
    "event",
    "see",
    "click",
    "target",
    "um",
    "square",
    "id",
    "one",
    "div",
    "id",
    "equals",
    "one",
    "click",
    "see",
    "id",
    "nine",
    "pattern",
    "want",
    "keep",
    "controller",
    "logic",
    "app",
    "simple",
    "possible",
    "want",
    "really",
    "orchestrate",
    "happens",
    "state",
    "view",
    "want",
    "add",
    "lot",
    "logic",
    "file",
    "logic",
    "needs",
    "happen",
    "created",
    "quite",
    "yet",
    "get",
    "show",
    "let",
    "continue",
    "view",
    "start",
    "implementing",
    "methods",
    "think",
    "good",
    "place",
    "start",
    "go",
    "back",
    "app",
    "open",
    "original",
    "implementation",
    "let",
    "let",
    "go",
    "ahead",
    "go",
    "big",
    "event",
    "listener",
    "start",
    "littler",
    "ones",
    "see",
    "better",
    "going",
    "uncomment",
    "everything",
    "going",
    "initialize",
    "uncomment",
    "whole",
    "app",
    "initializing",
    "delete",
    "going",
    "variable",
    "initialized",
    "going",
    "actually",
    "anything",
    "register",
    "sort",
    "event",
    "listeners",
    "reference",
    "go",
    "look",
    "code",
    "already",
    "written",
    "implemented",
    "toggle",
    "method",
    "view",
    "ui",
    "event",
    "need",
    "happen",
    "anywhere",
    "else",
    "implemented",
    "click",
    "listener",
    "modal",
    "button",
    "allows",
    "us",
    "hide",
    "modal",
    "game",
    "ends",
    "get",
    "second",
    "really",
    "want",
    "start",
    "looking",
    "logic",
    "little",
    "bit",
    "messy",
    "could",
    "probably",
    "create",
    "individual",
    "methods",
    "achieve",
    "let",
    "start",
    "improving",
    "menu",
    "toggle",
    "right",
    "ui",
    "see",
    "opens",
    "closes",
    "little",
    "chevron",
    "icon",
    "going",
    "change",
    "generally",
    "something",
    "like",
    "icon",
    "rotate",
    "180",
    "degrees",
    "go",
    "open",
    "closed",
    "vice",
    "versa",
    "ca",
    "even",
    "remember",
    "one",
    "correct",
    "design",
    "correct",
    "way",
    "design",
    "perspective",
    "anyways",
    "improve",
    "little",
    "bit",
    "also",
    "add",
    "like",
    "selected",
    "state",
    "like",
    "border",
    "open",
    "help",
    "us",
    "kind",
    "ease",
    "new",
    "pattern",
    "see",
    "handling",
    "ui",
    "event",
    "constructor",
    "directly",
    "toggling",
    "hidden",
    "class",
    "break",
    "view",
    "couple",
    "sections",
    "section",
    "going",
    "register",
    "event",
    "listeners",
    "next",
    "section",
    "going",
    "utility",
    "methods",
    "uh",
    "dom",
    "helper",
    "methods",
    "means",
    "going",
    "methods",
    "change",
    "ui",
    "way",
    "first",
    "one",
    "define",
    "toggle",
    "menu",
    "going",
    "called",
    "going",
    "move",
    "logic",
    "method",
    "say",
    "dot",
    "toggle",
    "menu",
    "call",
    "refactored",
    "little",
    "bit",
    "going",
    "add",
    "stuff",
    "let",
    "make",
    "sure",
    "works",
    "click",
    "toggles",
    "menu",
    "okay",
    "set",
    "want",
    "add",
    "something",
    "little",
    "bit",
    "better",
    "want",
    "first",
    "add",
    "border",
    "menu",
    "selected",
    "going",
    "say",
    "dot",
    "menu",
    "button",
    "going",
    "put",
    "border",
    "around",
    "let",
    "toggle",
    "class",
    "list",
    "border",
    "remember",
    "styles",
    "shared",
    "utility",
    "classes",
    "got",
    "border",
    "class",
    "toggle",
    "get",
    "border",
    "click",
    "see",
    "open",
    "border",
    "closed",
    "border",
    "kind",
    "nice",
    "addition",
    "could",
    "probably",
    "achieve",
    "css",
    "thought",
    "um",
    "nice",
    "demonstrate",
    "javascript",
    "um",
    "furthermore",
    "want",
    "little",
    "icon",
    "flip",
    "depending",
    "open",
    "closed",
    "state",
    "need",
    "actually",
    "um",
    "create",
    "different",
    "icon",
    "based",
    "state",
    "define",
    "variable",
    "going",
    "let",
    "see",
    "going",
    "grab",
    "menu",
    "button",
    "menu",
    "button",
    "going",
    "right",
    "see",
    "got",
    "icon",
    "bottom",
    "basically",
    "selecting",
    "button",
    "grabbing",
    "eye",
    "tag",
    "within",
    "say",
    "query",
    "selector",
    "going",
    "look",
    "tag",
    "find",
    "represent",
    "icon",
    "going",
    "look",
    "class",
    "list",
    "since",
    "using",
    "font",
    "awesome",
    "toggle",
    "fa",
    "chevron",
    "also",
    "chevron",
    "basically",
    "flip",
    "every",
    "time",
    "menu",
    "toggled",
    "click",
    "see",
    "little",
    "icon",
    "flips",
    "every",
    "time",
    "opens",
    "closes",
    "nice",
    "addition",
    "polish",
    "importantly",
    "demonstrates",
    "pretty",
    "simple",
    "way",
    "define",
    "dom",
    "helper",
    "methods",
    "within",
    "event",
    "listeners",
    "call",
    "basically",
    "change",
    "dom",
    "change",
    "user",
    "seeing",
    "view",
    "perspective",
    "uh",
    "go",
    "next",
    "set",
    "event",
    "listeners",
    "want",
    "one",
    "little",
    "refactor",
    "add",
    "utility",
    "method",
    "selecting",
    "elements",
    "see",
    "using",
    "lot",
    "markup",
    "select",
    "kind",
    "basically",
    "using",
    "syntax",
    "importantly",
    "better",
    "reason",
    "refactor",
    "entirely",
    "certain",
    "whether",
    "going",
    "result",
    "element",
    "selected",
    "put",
    "selectors",
    "check",
    "really",
    "assurances",
    "attached",
    "list",
    "elements",
    "going",
    "actually",
    "valid",
    "selected",
    "elements",
    "bottom",
    "class",
    "add",
    "helper",
    "methods",
    "going",
    "call",
    "qs",
    "short",
    "query",
    "selector",
    "able",
    "pass",
    "string",
    "selector",
    "method",
    "going",
    "look",
    "element",
    "going",
    "document",
    "dot",
    "query",
    "selector",
    "pass",
    "selector",
    "parameters",
    "going",
    "make",
    "check",
    "going",
    "say",
    "element",
    "selected",
    "words",
    "passed",
    "wrong",
    "selector",
    "something",
    "went",
    "wrong",
    "going",
    "throw",
    "new",
    "error",
    "reason",
    "really",
    "want",
    "continue",
    "um",
    "application",
    "trying",
    "perform",
    "additional",
    "logic",
    "selectors",
    "work",
    "first",
    "place",
    "mess",
    "everything",
    "going",
    "say",
    "could",
    "find",
    "elements",
    "give",
    "us",
    "developer",
    "confidence",
    "passing",
    "right",
    "selectors",
    "return",
    "element",
    "know",
    "defined",
    "improvements",
    "make",
    "let",
    "go",
    "ahead",
    "try",
    "menu",
    "say",
    "dot",
    "qs",
    "pass",
    "data",
    "id",
    "select",
    "menu",
    "let",
    "go",
    "back",
    "ui",
    "see",
    "errors",
    "going",
    "get",
    "rid",
    "moment",
    "something",
    "left",
    "right",
    "let",
    "get",
    "rid",
    "confused",
    "worked",
    "go",
    "query",
    "selectors",
    "replace",
    "notice",
    "got",
    "query",
    "selector",
    "work",
    "utility",
    "method",
    "leave",
    "one",
    "alone",
    "time",
    "dot",
    "qs",
    "replace",
    "save",
    "see",
    "works",
    "errors",
    "let",
    "demonstrate",
    "air",
    "let",
    "pass",
    "invalid",
    "selector",
    "going",
    "see",
    "unclawed",
    "error",
    "could",
    "find",
    "elements",
    "want",
    "error",
    "happen",
    "know",
    "go",
    "back",
    "code",
    "fix",
    "improve",
    "improvements",
    "make",
    "es6",
    "class",
    "syntax",
    "way",
    "define",
    "private",
    "class",
    "method",
    "something",
    "want",
    "expose",
    "outside",
    "world",
    "class",
    "put",
    "dollar",
    "sign",
    "dollar",
    "sign",
    "hashtag",
    "front",
    "method",
    "let",
    "demonstrate",
    "difference",
    "right",
    "public",
    "method",
    "class",
    "go",
    "call",
    "instance",
    "view",
    "dot",
    "qs",
    "going",
    "see",
    "autocomplete",
    "vs",
    "code",
    "thinks",
    "public",
    "method",
    "really",
    "want",
    "calling",
    "query",
    "selector",
    "anywhere",
    "outside",
    "view",
    "um",
    "want",
    "controller",
    "make",
    "private",
    "put",
    "hashtag",
    "save",
    "try",
    "grab",
    "view",
    "wo",
    "see",
    "possible",
    "method",
    "use",
    "could",
    "think",
    "override",
    "sure",
    "enforced",
    "runtime",
    "good",
    "practice",
    "keep",
    "everything",
    "private",
    "need",
    "outside",
    "class",
    "also",
    "toggle",
    "menu",
    "put",
    "hashtag",
    "need",
    "update",
    "calls",
    "dot",
    "toggle",
    "menu",
    "actually",
    "may",
    "let",
    "let",
    "check",
    "let",
    "go",
    "ui",
    "yep",
    "okay",
    "need",
    "update",
    "say",
    "toggle",
    "menu",
    "know",
    "happened",
    "query",
    "selector",
    "dot",
    "query",
    "selector",
    "highlighting",
    "let",
    "grab",
    "right",
    "one",
    "last",
    "thing",
    "need",
    "implement",
    "query",
    "selector",
    "safe",
    "method",
    "one",
    "thing",
    "want",
    "query",
    "selector",
    "enable",
    "us",
    "add",
    "like",
    "parent",
    "element",
    "pass",
    "basically",
    "give",
    "us",
    "flexibility",
    "always",
    "search",
    "document",
    "say",
    "parent",
    "argument",
    "going",
    "search",
    "parent",
    "otherwise",
    "going",
    "search",
    "document",
    "quick",
    "little",
    "refactor",
    "going",
    "copy",
    "whole",
    "method",
    "probably",
    "need",
    "parent",
    "one",
    "call",
    "query",
    "selector",
    "one",
    "going",
    "thing",
    "passing",
    "selector",
    "going",
    "use",
    "different",
    "dom",
    "method",
    "element",
    "list",
    "gon",
    "na",
    "throw",
    "could",
    "find",
    "elements",
    "otherwise",
    "going",
    "return",
    "replace",
    "query",
    "selector",
    "dot",
    "query",
    "selector",
    "save",
    "make",
    "sure",
    "errors",
    "finally",
    "let",
    "make",
    "different",
    "name",
    "space",
    "um",
    "squares",
    "represents",
    "node",
    "list",
    "well",
    "represent",
    "individual",
    "elements",
    "make",
    "another",
    "namespace",
    "double",
    "dollar",
    "sign",
    "represent",
    "ones",
    "picking",
    "node",
    "list",
    "assign",
    "squares",
    "one",
    "separation",
    "little",
    "bit",
    "organization",
    "right",
    "let",
    "continue",
    "refactor",
    "looking",
    "original",
    "implementation",
    "next",
    "thing",
    "want",
    "cover",
    "break",
    "concise",
    "method",
    "stuff",
    "right",
    "remember",
    "adding",
    "icon",
    "certain",
    "color",
    "square",
    "clicked",
    "also",
    "updating",
    "turn",
    "indicator",
    "top",
    "left",
    "think",
    "looks",
    "like",
    "actually",
    "error",
    "dollar",
    "sign",
    "squares",
    "undefined",
    "let",
    "fix",
    "keep",
    "going",
    "problem",
    "reassigned",
    "squares",
    "double",
    "dollar",
    "sign",
    "update",
    "event",
    "handler",
    "let",
    "save",
    "working",
    "right",
    "back",
    "need",
    "update",
    "turn",
    "indicator",
    "course",
    "click",
    "something",
    "need",
    "turn",
    "event",
    "element",
    "dom",
    "break",
    "two",
    "separate",
    "functions",
    "think",
    "first",
    "one",
    "going",
    "setting",
    "turn",
    "indicator",
    "helper",
    "methods",
    "let",
    "add",
    "method",
    "called",
    "set",
    "turn",
    "indicator",
    "right",
    "since",
    "really",
    "context",
    "player",
    "actually",
    "made",
    "move",
    "um",
    "going",
    "hard",
    "code",
    "something",
    "fill",
    "later",
    "something",
    "dynamic",
    "first",
    "thing",
    "need",
    "look",
    "back",
    "basically",
    "creating",
    "turn",
    "icon",
    "label",
    "giving",
    "inner",
    "text",
    "label",
    "setting",
    "color",
    "icon",
    "logic",
    "set",
    "turn",
    "indicator",
    "put",
    "player",
    "argument",
    "going",
    "leverage",
    "quite",
    "yet",
    "kind",
    "placeholder",
    "need",
    "create",
    "icon",
    "say",
    "document",
    "dot",
    "create",
    "element",
    "want",
    "element",
    "want",
    "label",
    "going",
    "paragraph",
    "element",
    "let",
    "assume",
    "player",
    "going",
    "either",
    "equal",
    "one",
    "two",
    "style",
    "according",
    "going",
    "update",
    "future",
    "assume",
    "icon",
    "going",
    "look",
    "class",
    "list",
    "going",
    "add",
    "certain",
    "color",
    "class",
    "based",
    "player",
    "player",
    "equals",
    "one",
    "going",
    "call",
    "yellow",
    "otherwise",
    "going",
    "turquoise",
    "similar",
    "logic",
    "current",
    "player",
    "one",
    "calling",
    "sorry",
    "square",
    "icon",
    "yellow",
    "opposite",
    "turn",
    "icon",
    "gets",
    "bit",
    "simpler",
    "right",
    "tracking",
    "basically",
    "two",
    "pieces",
    "state",
    "trying",
    "see",
    "current",
    "player",
    "made",
    "move",
    "next",
    "turn",
    "um",
    "trying",
    "decide",
    "player",
    "mixing",
    "lot",
    "things",
    "little",
    "confusing",
    "really",
    "view",
    "want",
    "declarative",
    "explicit",
    "saying",
    "player",
    "one",
    "associated",
    "yellow",
    "player",
    "2",
    "associated",
    "turquoise",
    "thing",
    "goes",
    "label",
    "add",
    "class",
    "list",
    "player",
    "equals",
    "one",
    "yellow",
    "otherwise",
    "turquoise",
    "think",
    "original",
    "implementation",
    "updating",
    "color",
    "label",
    "let",
    "look",
    "html",
    "see",
    "element",
    "called",
    "turn",
    "really",
    "could",
    "select",
    "add",
    "color",
    "class",
    "already",
    "let",
    "stay",
    "consistent",
    "instead",
    "setting",
    "color",
    "based",
    "player",
    "let",
    "say",
    "player",
    "one",
    "fax",
    "message",
    "sent",
    "adding",
    "need",
    "set",
    "text",
    "content",
    "let",
    "delete",
    "player",
    "one",
    "fax",
    "otherwise",
    "fao",
    "need",
    "select",
    "one",
    "element",
    "turn",
    "div",
    "think",
    "already",
    "top",
    "right",
    "selected",
    "turn",
    "element",
    "say",
    "dot",
    "dollar",
    "sign",
    "dot",
    "turn",
    "dot",
    "class",
    "list",
    "going",
    "add",
    "color",
    "based",
    "player",
    "could",
    "existing",
    "color",
    "two",
    "calls",
    "add",
    "remove",
    "say",
    "player",
    "equals",
    "one",
    "going",
    "add",
    "yellow",
    "color",
    "otherwise",
    "going",
    "add",
    "turquoise",
    "going",
    "remove",
    "player",
    "one",
    "want",
    "remove",
    "turquoise",
    "class",
    "otherwise",
    "want",
    "remove",
    "yellow",
    "class",
    "let",
    "make",
    "sure",
    "remove",
    "unwanted",
    "one",
    "add",
    "wanted",
    "class",
    "setting",
    "actual",
    "icon",
    "rendering",
    "label",
    "set",
    "inner",
    "text",
    "basically",
    "say",
    "player",
    "one",
    "say",
    "player",
    "one",
    "otherwise",
    "say",
    "player",
    "point",
    "going",
    "anything",
    "kind",
    "created",
    "elements",
    "memory",
    "actually",
    "commit",
    "dom",
    "need",
    "select",
    "turn",
    "div",
    "modified",
    "classes",
    "need",
    "replace",
    "children",
    "replace",
    "child",
    "elements",
    "first",
    "icon",
    "label",
    "created",
    "right",
    "let",
    "save",
    "right",
    "set",
    "turn",
    "indicator",
    "hooked",
    "anything",
    "let",
    "put",
    "controller",
    "logic",
    "remember",
    "binding",
    "player",
    "move",
    "event",
    "right",
    "uh",
    "printing",
    "console",
    "moment",
    "reference",
    "view",
    "grab",
    "utility",
    "method",
    "used",
    "private",
    "method",
    "default",
    "let",
    "check",
    "need",
    "make",
    "public",
    "yeah",
    "let",
    "go",
    "ahead",
    "let",
    "make",
    "public",
    "use",
    "say",
    "set",
    "turn",
    "indicator",
    "going",
    "hard",
    "code",
    "player",
    "id",
    "tracking",
    "state",
    "yet",
    "going",
    "always",
    "say",
    "going",
    "pass",
    "player",
    "one",
    "let",
    "save",
    "see",
    "happens",
    "click",
    "square",
    "anything",
    "need",
    "find",
    "let",
    "inspect",
    "html",
    "click",
    "square",
    "looks",
    "like",
    "anything",
    "okay",
    "every",
    "time",
    "click",
    "one",
    "squares",
    "expect",
    "update",
    "player",
    "one",
    "already",
    "player",
    "one",
    "wo",
    "see",
    "change",
    "let",
    "go",
    "back",
    "instead",
    "setting",
    "player",
    "one",
    "set",
    "player",
    "two",
    "click",
    "changes",
    "getting",
    "right",
    "colors",
    "getting",
    "right",
    "text",
    "getting",
    "right",
    "icon",
    "right",
    "colors",
    "oh",
    "okay",
    "problem",
    "default",
    "class",
    "turn",
    "one",
    "right",
    "setting",
    "color",
    "adding",
    "turquoise",
    "class",
    "later",
    "getting",
    "overriding",
    "better",
    "way",
    "probably",
    "approach",
    "go",
    "back",
    "css",
    "instead",
    "making",
    "turn",
    "initial",
    "color",
    "handle",
    "class",
    "let",
    "show",
    "mean",
    "remove",
    "turn",
    "css",
    "go",
    "html",
    "see",
    "passing",
    "yellow",
    "class",
    "style",
    "initial",
    "icon",
    "message",
    "coupling",
    "color",
    "turn",
    "class",
    "work",
    "see",
    "player",
    "two",
    "um",
    "going",
    "set",
    "every",
    "single",
    "time",
    "let",
    "refresh",
    "player",
    "one",
    "going",
    "hard",
    "code",
    "player",
    "two",
    "one",
    "thing",
    "notice",
    "think",
    "kind",
    "messed",
    "icon",
    "almost",
    "like",
    "italics",
    "um",
    "adding",
    "fa",
    "solid",
    "class",
    "font",
    "awesome",
    "add",
    "fa",
    "solid",
    "hit",
    "enter",
    "looks",
    "lot",
    "better",
    "need",
    "remember",
    "add",
    "let",
    "go",
    "view",
    "create",
    "icon",
    "um",
    "let",
    "make",
    "sure",
    "add",
    "class",
    "classlist",
    "dot",
    "add",
    "f",
    "solid",
    "actually",
    "pass",
    "two",
    "arguments",
    "instead",
    "twice",
    "pass",
    "f",
    "solid",
    "give",
    "comma",
    "another",
    "argument",
    "give",
    "actual",
    "icon",
    "render",
    "see",
    "start",
    "x",
    "yellow",
    "player",
    "one",
    "click",
    "hard",
    "coding",
    "player",
    "two",
    "click",
    "player",
    "two",
    "everything",
    "turquoise",
    "color",
    "know",
    "set",
    "turn",
    "indicator",
    "method",
    "working",
    "correctly",
    "next",
    "thing",
    "need",
    "actually",
    "populate",
    "square",
    "put",
    "icon",
    "within",
    "square",
    "see",
    "original",
    "app",
    "logic",
    "somewhere",
    "right",
    "adding",
    "square",
    "icon",
    "something",
    "pretty",
    "similar",
    "let",
    "go",
    "back",
    "view",
    "one",
    "going",
    "called",
    "handle",
    "player",
    "move",
    "function",
    "going",
    "pass",
    "square",
    "element",
    "clicked",
    "reference",
    "player",
    "made",
    "move",
    "know",
    "icon",
    "put",
    "one",
    "rather",
    "simple",
    "need",
    "create",
    "icon",
    "similar",
    "copy",
    "logic",
    "creating",
    "new",
    "icon",
    "html",
    "element",
    "adding",
    "class",
    "list",
    "going",
    "put",
    "fa",
    "solid",
    "remember",
    "right",
    "use",
    "logic",
    "figure",
    "whether",
    "going",
    "x",
    "depending",
    "player",
    "finally",
    "going",
    "reference",
    "square",
    "element",
    "whatever",
    "square",
    "actually",
    "clicked",
    "going",
    "replace",
    "children",
    "new",
    "icon",
    "set",
    "course",
    "color",
    "specified",
    "group",
    "player",
    "one",
    "going",
    "x",
    "going",
    "yellow",
    "player",
    "2",
    "going",
    "turquoise",
    "let",
    "save",
    "call",
    "handle",
    "player",
    "move",
    "controller",
    "start",
    "see",
    "controller",
    "supposed",
    "supposed",
    "kind",
    "orchestrating",
    "events",
    "take",
    "place",
    "going",
    "set",
    "turn",
    "indicator",
    "going",
    "handle",
    "player",
    "move",
    "let",
    "hard",
    "code",
    "player",
    "two",
    "synced",
    "click",
    "square",
    "would",
    "expect",
    "turn",
    "indicator",
    "turn",
    "turquoise",
    "square",
    "um",
    "actually",
    "thinking",
    "want",
    "player",
    "move",
    "player",
    "one",
    "turn",
    "set",
    "next",
    "player",
    "player",
    "two",
    "refactor",
    "dynamic",
    "future",
    "trying",
    "get",
    "view",
    "logic",
    "work",
    "let",
    "save",
    "click",
    "yellow",
    "x",
    "turn",
    "turquoise",
    "see",
    "done",
    "anything",
    "says",
    "dom",
    "token",
    "list",
    "add",
    "token",
    "contain",
    "white",
    "space",
    "let",
    "see",
    "okay",
    "actually",
    "messed",
    "one",
    "need",
    "duplicate",
    "logic",
    "one",
    "token",
    "per",
    "argument",
    "two",
    "little",
    "little",
    "refactor",
    "probably",
    "work",
    "make",
    "sure",
    "refreshed",
    "click",
    "square",
    "element",
    "replace",
    "children",
    "function",
    "getting",
    "tired",
    "um",
    "ca",
    "pass",
    "one",
    "need",
    "pass",
    "event",
    "target",
    "represent",
    "square",
    "clicked",
    "want",
    "pass",
    "method",
    "hopefully",
    "third",
    "time",
    "charm",
    "see",
    "work",
    "finally",
    "going",
    "put",
    "x",
    "everywhere",
    "yellow",
    "x",
    "player",
    "two",
    "zoe",
    "going",
    "obviously",
    "want",
    "make",
    "little",
    "better",
    "experience",
    "point",
    "reached",
    "place",
    "need",
    "address",
    "file",
    "know",
    "view",
    "logic",
    "right",
    "hard",
    "coding",
    "player",
    "remember",
    "earlier",
    "implementation",
    "state",
    "variable",
    "right",
    "tracking",
    "moves",
    "based",
    "moves",
    "getting",
    "game",
    "status",
    "winner",
    "also",
    "using",
    "information",
    "determine",
    "know",
    "current",
    "player",
    "know",
    "icon",
    "colors",
    "going",
    "add",
    "looking",
    "previous",
    "implementation",
    "kind",
    "critical",
    "moment",
    "refactor",
    "start",
    "see",
    "things",
    "separating",
    "different",
    "concerns",
    "separation",
    "concerns",
    "see",
    "event",
    "listener",
    "player",
    "move",
    "multiple",
    "things",
    "changing",
    "user",
    "seeing",
    "dom",
    "updating",
    "classes",
    "html",
    "elements",
    "forth",
    "happening",
    "logic",
    "like",
    "replacing",
    "children",
    "new",
    "elements",
    "also",
    "something",
    "completely",
    "separate",
    "reading",
    "updating",
    "state",
    "game",
    "see",
    "uh",
    "sprinkled",
    "throughout",
    "uh",
    "listener",
    "things",
    "like",
    "checking",
    "square",
    "move",
    "reading",
    "state",
    "application",
    "figure",
    "furthermore",
    "coming",
    "actually",
    "mutating",
    "changing",
    "state",
    "application",
    "right",
    "alongside",
    "changes",
    "view",
    "two",
    "things",
    "separate",
    "concerns",
    "need",
    "file",
    "similar",
    "going",
    "create",
    "default",
    "class",
    "export",
    "copy",
    "syntax",
    "one",
    "going",
    "called",
    "store",
    "course",
    "need",
    "constructor",
    "one",
    "new",
    "thing",
    "going",
    "introduce",
    "going",
    "set",
    "two",
    "private",
    "methods",
    "going",
    "add",
    "get",
    "state",
    "method",
    "save",
    "state",
    "method",
    "going",
    "represent",
    "us",
    "way",
    "get",
    "copy",
    "current",
    "game",
    "state",
    "save",
    "state",
    "going",
    "change",
    "um",
    "basically",
    "transition",
    "next",
    "state",
    "application",
    "really",
    "good",
    "articles",
    "online",
    "state",
    "management",
    "one",
    "redux",
    "documentation",
    "redux",
    "guess",
    "probably",
    "better",
    "say",
    "leading",
    "state",
    "management",
    "solution",
    "apps",
    "long",
    "time",
    "react",
    "kind",
    "refactored",
    "moved",
    "towards",
    "functional",
    "component",
    "approach",
    "use",
    "state",
    "stuff",
    "like",
    "used",
    "quite",
    "much",
    "best",
    "practices",
    "written",
    "years",
    "managing",
    "state",
    "within",
    "application",
    "good",
    "read",
    "one",
    "going",
    "point",
    "us",
    "mutate",
    "state",
    "best",
    "practice",
    "mutating",
    "state",
    "common",
    "cause",
    "bugs",
    "redux",
    "applications",
    "applications",
    "general",
    "including",
    "components",
    "failing",
    "properly",
    "also",
    "break",
    "time",
    "travel",
    "debugging",
    "redux",
    "dev",
    "tools",
    "kind",
    "specific",
    "redux",
    "um",
    "actual",
    "mutation",
    "state",
    "value",
    "avoided",
    "going",
    "stick",
    "approach",
    "generally",
    "good",
    "idea",
    "reduces",
    "surface",
    "area",
    "bugs",
    "occur",
    "see",
    "original",
    "implementation",
    "directly",
    "mutating",
    "state",
    "reading",
    "checking",
    "something",
    "like",
    "last",
    "move",
    "directly",
    "updating",
    "nothing",
    "terribly",
    "wrong",
    "size",
    "application",
    "better",
    "make",
    "sure",
    "going",
    "actually",
    "add",
    "private",
    "state",
    "variable",
    "going",
    "equal",
    "array",
    "moves",
    "similar",
    "right",
    "going",
    "private",
    "class",
    "read",
    "state",
    "write",
    "use",
    "intermediate",
    "method",
    "actually",
    "retrieve",
    "state",
    "show",
    "second",
    "get",
    "state",
    "going",
    "return",
    "dot",
    "state",
    "kind",
    "redundant",
    "method",
    "see",
    "useful",
    "us",
    "later",
    "video",
    "refactor",
    "use",
    "little",
    "bit",
    "persistent",
    "state",
    "storage",
    "looking",
    "local",
    "storage",
    "right",
    "um",
    "needed",
    "going",
    "keep",
    "like",
    "get",
    "state",
    "method",
    "return",
    "private",
    "state",
    "variable",
    "property",
    "save",
    "state",
    "going",
    "set",
    "say",
    "dot",
    "hashtag",
    "state",
    "going",
    "equal",
    "whatever",
    "new",
    "state",
    "passed",
    "something",
    "useful",
    "save",
    "state",
    "method",
    "able",
    "reference",
    "prior",
    "state",
    "within",
    "method",
    "rather",
    "passing",
    "object",
    "new",
    "state",
    "going",
    "make",
    "parameter",
    "called",
    "state",
    "function",
    "passed",
    "one",
    "two",
    "things",
    "pass",
    "raw",
    "object",
    "pass",
    "callback",
    "function",
    "going",
    "give",
    "previous",
    "value",
    "state",
    "let",
    "walk",
    "little",
    "bit",
    "confusing",
    "familiar",
    "really",
    "help",
    "us",
    "later",
    "say",
    "previous",
    "state",
    "equal",
    "dot",
    "get",
    "state",
    "previous",
    "state",
    "dealing",
    "reading",
    "need",
    "check",
    "kind",
    "argument",
    "actually",
    "dealing",
    "say",
    "let",
    "new",
    "state",
    "going",
    "variable",
    "going",
    "initialize",
    "assign",
    "yet",
    "going",
    "say",
    "switch",
    "type",
    "state",
    "function",
    "got",
    "switch",
    "statement",
    "going",
    "look",
    "function",
    "type",
    "break",
    "object",
    "type",
    "state",
    "object",
    "break",
    "default",
    "going",
    "throw",
    "new",
    "error",
    "invalid",
    "param",
    "invalid",
    "argument",
    "passed",
    "save",
    "state",
    "want",
    "handle",
    "two",
    "cases",
    "pretty",
    "simple",
    "function",
    "going",
    "say",
    "new",
    "state",
    "equal",
    "state",
    "function",
    "know",
    "function",
    "going",
    "pass",
    "previous",
    "state",
    "whoever",
    "calls",
    "access",
    "object",
    "going",
    "set",
    "new",
    "state",
    "equal",
    "um",
    "previous",
    "state",
    "state",
    "function",
    "case",
    "passed",
    "literal",
    "object",
    "want",
    "assign",
    "state",
    "going",
    "basically",
    "later",
    "save",
    "local",
    "storage",
    "good",
    "say",
    "dot",
    "state",
    "equal",
    "new",
    "state",
    "assigned",
    "right",
    "let",
    "save",
    "got",
    "get",
    "state",
    "save",
    "state",
    "functions",
    "implemented",
    "need",
    "actually",
    "initialize",
    "default",
    "value",
    "passing",
    "store",
    "default",
    "value",
    "going",
    "call",
    "initial",
    "value",
    "set",
    "equal",
    "moves",
    "empty",
    "array",
    "see",
    "initialized",
    "right",
    "really",
    "refactor",
    "say",
    "initial",
    "value",
    "know",
    "bit",
    "contrived",
    "little",
    "bit",
    "indirect",
    "stuff",
    "see",
    "later",
    "makes",
    "sense",
    "start",
    "getting",
    "local",
    "storage",
    "point",
    "paying",
    "attention",
    "probably",
    "notice",
    "everything",
    "defined",
    "private",
    "method",
    "property",
    "therefore",
    "class",
    "useful",
    "want",
    "expose",
    "getter",
    "method",
    "allows",
    "us",
    "read",
    "state",
    "application",
    "take",
    "state",
    "read",
    "something",
    "see",
    "one",
    "things",
    "defined",
    "get",
    "game",
    "status",
    "passed",
    "moves",
    "know",
    "state",
    "going",
    "give",
    "us",
    "things",
    "like",
    "status",
    "game",
    "complete",
    "progress",
    "winner",
    "define",
    "something",
    "need",
    "define",
    "store",
    "something",
    "like",
    "use",
    "reading",
    "value",
    "class",
    "add",
    "getter",
    "method",
    "add",
    "get",
    "keyword",
    "followed",
    "something",
    "like",
    "game",
    "define",
    "method",
    "going",
    "evaluated",
    "runtime",
    "basically",
    "initialize",
    "store",
    "still",
    "need",
    "store",
    "equals",
    "new",
    "store",
    "auto",
    "imported",
    "things",
    "us",
    "import",
    "store",
    "initialize",
    "property",
    "available",
    "let",
    "right",
    "return",
    "dummy",
    "value",
    "let",
    "go",
    "back",
    "ui",
    "see",
    "prints",
    "dummy",
    "value",
    "demonstrate",
    "remove",
    "getter",
    "going",
    "break",
    "going",
    "get",
    "function",
    "called",
    "game",
    "would",
    "need",
    "go",
    "actually",
    "call",
    "function",
    "get",
    "dummy",
    "value",
    "looking",
    "like",
    "use",
    "getter",
    "call",
    "anything",
    "add",
    "get",
    "keyword",
    "acts",
    "property",
    "class",
    "instance",
    "see",
    "handler",
    "player",
    "move",
    "hard",
    "coding",
    "right",
    "player",
    "obviously",
    "want",
    "get",
    "state",
    "game",
    "store",
    "going",
    "update",
    "class",
    "property",
    "basically",
    "derive",
    "state",
    "goal",
    "saving",
    "state",
    "talked",
    "earlier",
    "keep",
    "simple",
    "humanly",
    "possible",
    "going",
    "derive",
    "much",
    "runtime",
    "makes",
    "update",
    "small",
    "piece",
    "state",
    "dynamically",
    "get",
    "rest",
    "going",
    "basically",
    "take",
    "method",
    "defined",
    "earlier",
    "get",
    "game",
    "status",
    "going",
    "kind",
    "refactor",
    "make",
    "little",
    "bit",
    "simpler",
    "first",
    "thing",
    "define",
    "list",
    "players",
    "going",
    "make",
    "things",
    "lot",
    "easier",
    "us",
    "going",
    "copy",
    "completed",
    "app",
    "type",
    "things",
    "explain",
    "think",
    "point",
    "going",
    "collapse",
    "app",
    "using",
    "using",
    "reference",
    "going",
    "define",
    "players",
    "game",
    "decided",
    "represent",
    "players",
    "tuple",
    "array",
    "players",
    "know",
    "zero",
    "index",
    "player",
    "one",
    "one",
    "index",
    "player",
    "two",
    "basically",
    "adding",
    "configuration",
    "configuration",
    "array",
    "saying",
    "got",
    "two",
    "players",
    "name",
    "player",
    "one",
    "going",
    "x",
    "icon",
    "going",
    "color",
    "class",
    "turquoise",
    "likewise",
    "player",
    "2",
    "color",
    "yellow",
    "going",
    "help",
    "us",
    "internal",
    "logic",
    "quite",
    "bit",
    "show",
    "mean",
    "uh",
    "second",
    "even",
    "touch",
    "store",
    "anymore",
    "let",
    "pass",
    "uh",
    "players",
    "first",
    "index",
    "would",
    "represent",
    "player",
    "two",
    "obviously",
    "going",
    "break",
    "method",
    "expecting",
    "object",
    "click",
    "stuff",
    "going",
    "work",
    "correctly",
    "go",
    "view",
    "go",
    "method",
    "defined",
    "set",
    "turn",
    "indicator",
    "player",
    "represents",
    "object",
    "passing",
    "object",
    "player",
    "logic",
    "gets",
    "bit",
    "simpler",
    "problem",
    "look",
    "defining",
    "color",
    "top",
    "level",
    "means",
    "add",
    "remove",
    "classes",
    "really",
    "would",
    "need",
    "pass",
    "player",
    "opponent",
    "would",
    "say",
    "player",
    "dot",
    "let",
    "see",
    "color",
    "class",
    "one",
    "would",
    "opponent",
    "dot",
    "color",
    "class",
    "adding",
    "players",
    "current",
    "players",
    "color",
    "class",
    "removing",
    "opponent",
    "color",
    "class",
    "bit",
    "simpler",
    "way",
    "handle",
    "know",
    "kind",
    "going",
    "back",
    "forth",
    "um",
    "let",
    "go",
    "back",
    "remove",
    "color",
    "property",
    "outer",
    "div",
    "instead",
    "let",
    "initialize",
    "color",
    "property",
    "element",
    "within",
    "start",
    "game",
    "going",
    "yellow",
    "x",
    "player",
    "one",
    "first",
    "player",
    "let",
    "save",
    "view",
    "means",
    "longer",
    "remove",
    "classes",
    "instead",
    "looking",
    "turn",
    "directly",
    "add",
    "icon",
    "list",
    "dot",
    "add",
    "say",
    "player",
    "dot",
    "color",
    "class",
    "label",
    "dot",
    "um",
    "class",
    "list",
    "also",
    "color",
    "class",
    "remove",
    "opponent",
    "come",
    "let",
    "kind",
    "group",
    "icon",
    "classes",
    "together",
    "defining",
    "icon",
    "rather",
    "switch",
    "say",
    "player",
    "dot",
    "icon",
    "class",
    "remember",
    "defined",
    "icon",
    "class",
    "color",
    "class",
    "player",
    "adding",
    "color",
    "class",
    "adding",
    "icon",
    "class",
    "since",
    "icon",
    "actually",
    "combine",
    "say",
    "f",
    "solid",
    "color",
    "class",
    "icon",
    "class",
    "delete",
    "line",
    "pass",
    "three",
    "finally",
    "label",
    "gets",
    "color",
    "class",
    "need",
    "update",
    "label",
    "inner",
    "text",
    "instead",
    "static",
    "strings",
    "made",
    "easy",
    "configuration",
    "say",
    "see",
    "right",
    "defined",
    "player",
    "name",
    "add",
    "string",
    "interpolation",
    "say",
    "player",
    "one",
    "finally",
    "getting",
    "container",
    "replacing",
    "icon",
    "label",
    "done",
    "able",
    "uh",
    "see",
    "working",
    "need",
    "pass",
    "opponent",
    "anymore",
    "player",
    "let",
    "go",
    "back",
    "click",
    "something",
    "turquoise",
    "yellow",
    "let",
    "see",
    "happening",
    "passing",
    "players",
    "index",
    "one",
    "basically",
    "passing",
    "object",
    "bring",
    "view",
    "reference",
    "see",
    "passing",
    "object",
    "passed",
    "case",
    "grabbing",
    "color",
    "class",
    "defined",
    "yellow",
    "icon",
    "class",
    "problem",
    "configuration",
    "object",
    "actually",
    "different",
    "let",
    "check",
    "final",
    "implementation",
    "vanilla",
    "refactor",
    "see",
    "x",
    "turquoise",
    "yellow",
    "actually",
    "things",
    "backwards",
    "whole",
    "time",
    "apologize",
    "yellow",
    "x",
    "turquoise",
    "think",
    "intended",
    "behavior",
    "let",
    "delete",
    "instead",
    "player",
    "two",
    "pass",
    "player",
    "one",
    "let",
    "see",
    "working",
    "little",
    "bit",
    "better",
    "got",
    "blue",
    "x",
    "load",
    "default",
    "need",
    "update",
    "well",
    "start",
    "turquoise",
    "start",
    "turquoise",
    "player",
    "one",
    "turquoise",
    "x",
    "thing",
    "get",
    "let",
    "reset",
    "yep",
    "get",
    "turquoise",
    "x",
    "starting",
    "right",
    "state",
    "click",
    "something",
    "getting",
    "change",
    "let",
    "click",
    "player",
    "two",
    "go",
    "got",
    "yellow",
    "player",
    "two",
    "text",
    "added",
    "last",
    "thing",
    "kind",
    "handle",
    "player",
    "move",
    "instead",
    "hard",
    "coding",
    "one",
    "hard",
    "code",
    "players",
    "one",
    "go",
    "back",
    "handle",
    "player",
    "move",
    "player",
    "object",
    "replace",
    "player",
    "dot",
    "icon",
    "class",
    "class",
    "save",
    "make",
    "sure",
    "icons",
    "going",
    "correctly",
    "looks",
    "like",
    "refactored",
    "makes",
    "things",
    "little",
    "bit",
    "easier",
    "us",
    "handle",
    "go",
    "store",
    "start",
    "defining",
    "game",
    "state",
    "variable",
    "right",
    "returning",
    "dummy",
    "value",
    "useful",
    "us",
    "purpose",
    "getter",
    "method",
    "basically",
    "take",
    "raw",
    "state",
    "object",
    "array",
    "game",
    "moves",
    "calculate",
    "sorts",
    "useful",
    "information",
    "already",
    "see",
    "done",
    "um",
    "get",
    "game",
    "stats",
    "right",
    "get",
    "game",
    "status",
    "things",
    "really",
    "checking",
    "winner",
    "also",
    "point",
    "going",
    "figure",
    "current",
    "move",
    "um",
    "play",
    "encompass",
    "within",
    "single",
    "method",
    "going",
    "build",
    "uh",
    "kind",
    "piece",
    "piece",
    "something",
    "read",
    "determine",
    "controller",
    "method",
    "setting",
    "turn",
    "indicator",
    "handling",
    "player",
    "move",
    "way",
    "pass",
    "derived",
    "state",
    "methods",
    "know",
    "actually",
    "ui",
    "let",
    "start",
    "getting",
    "current",
    "player",
    "first",
    "grab",
    "state",
    "read",
    "get",
    "state",
    "method",
    "assignment",
    "could",
    "read",
    "directly",
    "nice",
    "variable",
    "work",
    "first",
    "step",
    "going",
    "derive",
    "current",
    "player",
    "little",
    "trick",
    "believe",
    "original",
    "creators",
    "game",
    "refactoring",
    "already",
    "little",
    "trick",
    "using",
    "use",
    "modulus",
    "operator",
    "basically",
    "determine",
    "current",
    "player",
    "looks",
    "like",
    "say",
    "current",
    "player",
    "equal",
    "um",
    "list",
    "players",
    "access",
    "really",
    "list",
    "players",
    "grab",
    "index",
    "based",
    "um",
    "many",
    "moves",
    "made",
    "within",
    "game",
    "like",
    "said",
    "list",
    "players",
    "one",
    "thing",
    "need",
    "pass",
    "store",
    "access",
    "pass",
    "array",
    "players",
    "set",
    "player",
    "property",
    "class",
    "way",
    "access",
    "right",
    "grab",
    "whichever",
    "player",
    "want",
    "put",
    "zero",
    "value",
    "let",
    "go",
    "back",
    "app",
    "initialize",
    "store",
    "since",
    "list",
    "players",
    "right",
    "pass",
    "array",
    "store",
    "via",
    "constructor",
    "point",
    "say",
    "state",
    "dot",
    "moves",
    "dot",
    "length",
    "tell",
    "us",
    "many",
    "moves",
    "current",
    "game",
    "use",
    "modulus",
    "operator",
    "use",
    "modulo",
    "2",
    "basically",
    "give",
    "us",
    "either",
    "1",
    "zero",
    "based",
    "number",
    "moves",
    "open",
    "terminal",
    "open",
    "little",
    "playground",
    "see",
    "let",
    "say",
    "array",
    "moves",
    "let",
    "say",
    "one",
    "two",
    "one",
    "two",
    "fill",
    "currently",
    "four",
    "based",
    "player",
    "one",
    "starting",
    "player",
    "know",
    "player",
    "one",
    "made",
    "move",
    "player",
    "two",
    "made",
    "move",
    "one",
    "made",
    "move",
    "two",
    "made",
    "move",
    "next",
    "well",
    "way",
    "determine",
    "basically",
    "modulo",
    "give",
    "us",
    "zero",
    "since",
    "players",
    "array",
    "two",
    "objects",
    "zero",
    "index",
    "going",
    "player",
    "one",
    "one",
    "index",
    "going",
    "player",
    "two",
    "push",
    "new",
    "move",
    "array",
    "let",
    "say",
    "player",
    "one",
    "moves",
    "modulo",
    "two",
    "get",
    "one",
    "index",
    "player",
    "two",
    "see",
    "based",
    "length",
    "array",
    "quickly",
    "determine",
    "current",
    "move",
    "belongs",
    "go",
    "store",
    "operation",
    "get",
    "current",
    "player",
    "also",
    "derive",
    "next",
    "player",
    "game",
    "say",
    "actually",
    "might",
    "need",
    "let",
    "hold",
    "one",
    "moment",
    "let",
    "go",
    "ahead",
    "return",
    "current",
    "player",
    "part",
    "object",
    "part",
    "game",
    "state",
    "come",
    "set",
    "turn",
    "indicator",
    "going",
    "reverse",
    "first",
    "need",
    "actually",
    "handle",
    "player",
    "move",
    "going",
    "make",
    "variable",
    "keep",
    "things",
    "clear",
    "say",
    "clicked",
    "square",
    "equal",
    "actually",
    "represents",
    "go",
    "back",
    "view",
    "binding",
    "move",
    "looping",
    "squares",
    "adding",
    "event",
    "listener",
    "listener",
    "going",
    "pass",
    "individual",
    "square",
    "handler",
    "clicked",
    "represents",
    "clarity",
    "pass",
    "like",
    "current",
    "player",
    "want",
    "move",
    "game",
    "state",
    "say",
    "store",
    "dot",
    "game",
    "dot",
    "currentplayer",
    "satisfy",
    "stub",
    "method",
    "passing",
    "current",
    "player",
    "point",
    "need",
    "update",
    "state",
    "course",
    "made",
    "move",
    "player",
    "want",
    "set",
    "turn",
    "indicator",
    "want",
    "set",
    "current",
    "player",
    "moved",
    "want",
    "next",
    "player",
    "need",
    "way",
    "update",
    "state",
    "advance",
    "next",
    "play",
    "way",
    "make",
    "method",
    "store",
    "public",
    "method",
    "called",
    "let",
    "see",
    "called",
    "final",
    "project",
    "think",
    "called",
    "player",
    "move",
    "passing",
    "square",
    "id",
    "one",
    "nine",
    "based",
    "one",
    "clicked",
    "follow",
    "convention",
    "mutating",
    "state",
    "directly",
    "first",
    "need",
    "grab",
    "state",
    "getter",
    "method",
    "defined",
    "right",
    "returning",
    "private",
    "variable",
    "need",
    "make",
    "clone",
    "going",
    "go",
    "ahead",
    "call",
    "state",
    "clone",
    "method",
    "browsers",
    "called",
    "structured",
    "clone",
    "pass",
    "array",
    "object",
    "pretty",
    "much",
    "anything",
    "give",
    "clone",
    "object",
    "longer",
    "referencing",
    "longer",
    "passing",
    "value",
    "reference",
    "got",
    "completely",
    "different",
    "object",
    "able",
    "mutate",
    "point",
    "go",
    "ahead",
    "take",
    "state",
    "clone",
    "push",
    "new",
    "move",
    "array",
    "um",
    "actually",
    "want",
    "push",
    "directly",
    "state",
    "object",
    "array",
    "moves",
    "property",
    "really",
    "saying",
    "state",
    "clone",
    "dot",
    "moves",
    "dot",
    "push",
    "need",
    "pass",
    "square",
    "id",
    "right",
    "also",
    "player",
    "id",
    "id",
    "pass",
    "player",
    "currently",
    "would",
    "state",
    "state",
    "dot",
    "game",
    "remember",
    "derived",
    "actually",
    "access",
    "property",
    "within",
    "class",
    "pass",
    "current",
    "player",
    "call",
    "player",
    "move",
    "going",
    "take",
    "square",
    "id",
    "clicked",
    "current",
    "player",
    "push",
    "move",
    "state",
    "object",
    "going",
    "actually",
    "update",
    "state",
    "us",
    "um",
    "last",
    "step",
    "need",
    "call",
    "dot",
    "save",
    "state",
    "case",
    "state",
    "object",
    "pretty",
    "simple",
    "pass",
    "literal",
    "object",
    "rather",
    "callback",
    "function",
    "come",
    "back",
    "refactor",
    "develop",
    "state",
    "handling",
    "little",
    "bit",
    "later",
    "let",
    "save",
    "back",
    "need",
    "call",
    "store",
    "dot",
    "player",
    "move",
    "need",
    "pass",
    "click",
    "square",
    "need",
    "pass",
    "id",
    "really",
    "going",
    "dot",
    "id",
    "need",
    "cast",
    "number",
    "uh",
    "event",
    "id",
    "event",
    "targets",
    "id",
    "come",
    "string",
    "default",
    "passing",
    "number",
    "id",
    "updating",
    "state",
    "point",
    "allowed",
    "set",
    "turn",
    "indicator",
    "current",
    "player",
    "updated",
    "method",
    "go",
    "back",
    "dot",
    "currentplayer",
    "set",
    "turn",
    "indicator",
    "important",
    "thing",
    "notice",
    "player",
    "different",
    "player",
    "player",
    "made",
    "state",
    "change",
    "happen",
    "two",
    "every",
    "time",
    "state",
    "changes",
    "getter",
    "value",
    "defined",
    "right",
    "going",
    "automatically",
    "update",
    "worked",
    "click",
    "square",
    "update",
    "things",
    "dynamically",
    "says",
    "player",
    "one",
    "click",
    "played",
    "player",
    "one",
    "x",
    "see",
    "player",
    "2",
    "able",
    "click",
    "get",
    "player",
    "one",
    "working",
    "remember",
    "original",
    "implementation",
    "one",
    "big",
    "problem",
    "click",
    "twice",
    "square",
    "need",
    "make",
    "sure",
    "updating",
    "square",
    "twice",
    "relatively",
    "simple",
    "handle",
    "let",
    "comment",
    "things",
    "say",
    "um",
    "place",
    "icon",
    "current",
    "player",
    "square",
    "advance",
    "next",
    "state",
    "pushing",
    "move",
    "moves",
    "array",
    "set",
    "next",
    "players",
    "turn",
    "indicator",
    "top",
    "need",
    "check",
    "whether",
    "existing",
    "move",
    "see",
    "original",
    "implementation",
    "made",
    "little",
    "helper",
    "method",
    "says",
    "whether",
    "square",
    "id",
    "existing",
    "move",
    "checked",
    "current",
    "target",
    "matched",
    "returned",
    "early",
    "actually",
    "could",
    "make",
    "helper",
    "method",
    "within",
    "store",
    "could",
    "check",
    "inline",
    "going",
    "go",
    "ahead",
    "check",
    "inline",
    "see",
    "second",
    "let",
    "collapse",
    "app",
    "let",
    "say",
    "existing",
    "move",
    "going",
    "equal",
    "store",
    "dot",
    "game",
    "moves",
    "dot",
    "find",
    "looking",
    "specific",
    "move",
    "square",
    "id",
    "equal",
    "clicked",
    "square",
    "dot",
    "id",
    "need",
    "make",
    "sure",
    "number",
    "comparing",
    "thing",
    "existing",
    "move",
    "undefined",
    "basically",
    "going",
    "return",
    "early",
    "going",
    "handle",
    "player",
    "move",
    "save",
    "state",
    "set",
    "turn",
    "indicator",
    "let",
    "save",
    "let",
    "play",
    "looks",
    "like",
    "got",
    "problem",
    "see",
    "getting",
    "error",
    "reading",
    "says",
    "undefined",
    "makes",
    "sense",
    "actually",
    "added",
    "getter",
    "let",
    "go",
    "back",
    "store",
    "remember",
    "game",
    "returning",
    "current",
    "player",
    "would",
    "nice",
    "also",
    "gave",
    "uh",
    "moves",
    "array",
    "access",
    "save",
    "things",
    "work",
    "lot",
    "better",
    "click",
    "something",
    "twice",
    "actually",
    "still",
    "messing",
    "believe",
    "reason",
    "ran",
    "earlier",
    "failed",
    "recognize",
    "binding",
    "player",
    "move",
    "event",
    "look",
    "view",
    "basically",
    "passing",
    "um",
    "event",
    "uh",
    "handler",
    "event",
    "could",
    "icon",
    "clicked",
    "instead",
    "blindly",
    "passing",
    "handler",
    "right",
    "really",
    "need",
    "break",
    "function",
    "pass",
    "square",
    "setting",
    "event",
    "listener",
    "rather",
    "event",
    "target",
    "default",
    "passed",
    "let",
    "update",
    "go",
    "back",
    "see",
    "fixed",
    "things",
    "us",
    "square",
    "element",
    "undefined",
    "need",
    "make",
    "one",
    "adjustment",
    "longer",
    "event",
    "passed",
    "square",
    "reference",
    "actually",
    "expressive",
    "anyways",
    "check",
    "square",
    "update",
    "references",
    "hopefully",
    "finally",
    "work",
    "clicking",
    "clicking",
    "click",
    "anything",
    "expected",
    "got",
    "lot",
    "stable",
    "behavior",
    "almost",
    "back",
    "started",
    "course",
    "got",
    "two",
    "places",
    "game",
    "recognized",
    "yet",
    "need",
    "build",
    "derived",
    "state",
    "method",
    "right",
    "last",
    "piece",
    "state",
    "need",
    "derive",
    "game",
    "property",
    "getter",
    "game",
    "already",
    "done",
    "previous",
    "implementation",
    "right",
    "checking",
    "player",
    "moves",
    "winning",
    "patterns",
    "checking",
    "player",
    "moves",
    "winning",
    "patterns",
    "deriving",
    "status",
    "winner",
    "going",
    "something",
    "similar",
    "going",
    "simplify",
    "little",
    "bit",
    "new",
    "derived",
    "state",
    "method",
    "first",
    "thing",
    "copy",
    "winning",
    "patterns",
    "static",
    "initialize",
    "winner",
    "equal",
    "null",
    "get",
    "variable",
    "place",
    "going",
    "say",
    "four",
    "going",
    "loop",
    "going",
    "loop",
    "player",
    "player",
    "dot",
    "players",
    "remember",
    "initialized",
    "list",
    "players",
    "two",
    "people",
    "constructor",
    "loop",
    "player",
    "within",
    "loop",
    "get",
    "selected",
    "square",
    "ids",
    "player",
    "say",
    "dot",
    "game",
    "dot",
    "moves",
    "remember",
    "current",
    "state",
    "game",
    "sorry",
    "probably",
    "referencing",
    "method",
    "need",
    "reference",
    "state",
    "uh",
    "variable",
    "right",
    "getting",
    "raw",
    "state",
    "say",
    "state",
    "dot",
    "moves",
    "going",
    "filter",
    "moves",
    "moves",
    "current",
    "player",
    "looking",
    "walking",
    "logic",
    "little",
    "bit",
    "got",
    "array",
    "raw",
    "state",
    "moves",
    "going",
    "filter",
    "player",
    "match",
    "current",
    "player",
    "loop",
    "furthermore",
    "going",
    "map",
    "resulting",
    "array",
    "grab",
    "square",
    "id",
    "individual",
    "move",
    "remember",
    "pushing",
    "square",
    "id",
    "player",
    "moves",
    "array",
    "basically",
    "reading",
    "right",
    "got",
    "list",
    "selected",
    "square",
    "ids",
    "current",
    "user",
    "going",
    "inner",
    "loop",
    "going",
    "say",
    "pattern",
    "winning",
    "patterns",
    "going",
    "check",
    "check",
    "pattern",
    "matches",
    "every",
    "one",
    "selected",
    "square",
    "ids",
    "actually",
    "probably",
    "say",
    "square",
    "ids",
    "every",
    "element",
    "pattern",
    "say",
    "selected",
    "square",
    "ids",
    "includes",
    "value",
    "check",
    "winning",
    "pattern",
    "case",
    "going",
    "set",
    "winner",
    "variable",
    "initialized",
    "whatever",
    "player",
    "loop",
    "words",
    "going",
    "go",
    "loop",
    "winning",
    "patterns",
    "found",
    "winner",
    "going",
    "left",
    "equal",
    "null",
    "going",
    "tell",
    "us",
    "tie",
    "game",
    "along",
    "status",
    "game",
    "come",
    "add",
    "status",
    "property",
    "going",
    "say",
    "game",
    "complete",
    "going",
    "true",
    "winner",
    "equal",
    "null",
    "winner",
    "populated",
    "know",
    "game",
    "complete",
    "equal",
    "nine",
    "know",
    "maximum",
    "number",
    "moves",
    "played",
    "given",
    "game",
    "finally",
    "pass",
    "winner",
    "variable",
    "right",
    "either",
    "null",
    "set",
    "equal",
    "player",
    "derived",
    "state",
    "remind",
    "deriving",
    "information",
    "current",
    "player",
    "status",
    "whether",
    "complete",
    "whether",
    "winner",
    "driving",
    "one",
    "simple",
    "array",
    "game",
    "moves",
    "going",
    "along",
    "pattern",
    "trying",
    "keep",
    "state",
    "simple",
    "possible",
    "deriving",
    "need",
    "know",
    "later",
    "dynamically",
    "information",
    "populated",
    "able",
    "come",
    "back",
    "controller",
    "check",
    "whether",
    "winner",
    "going",
    "open",
    "sort",
    "modal",
    "show",
    "status",
    "user",
    "remember",
    "first",
    "implementation",
    "um",
    "let",
    "collapse",
    "stuff",
    "using",
    "remember",
    "bottom",
    "checking",
    "game",
    "status",
    "game",
    "complete",
    "going",
    "remove",
    "hidden",
    "class",
    "modal",
    "opens",
    "going",
    "set",
    "message",
    "make",
    "utility",
    "classes",
    "dom",
    "helper",
    "methods",
    "within",
    "view",
    "class",
    "achieve",
    "let",
    "go",
    "back",
    "view",
    "class",
    "hook",
    "methods",
    "put",
    "pretty",
    "much",
    "anywhere",
    "put",
    "top",
    "first",
    "one",
    "want",
    "open",
    "modal",
    "method",
    "going",
    "pass",
    "message",
    "select",
    "modal",
    "going",
    "one",
    "removed",
    "class",
    "modal",
    "entire",
    "div",
    "got",
    "hidden",
    "let",
    "remove",
    "real",
    "quick",
    "see",
    "pops",
    "really",
    "trying",
    "toggle",
    "class",
    "way",
    "come",
    "helper",
    "method",
    "look",
    "class",
    "list",
    "remove",
    "hidden",
    "class",
    "similar",
    "let",
    "try",
    "little",
    "um",
    "helper",
    "right",
    "make",
    "sure",
    "working",
    "come",
    "back",
    "improve",
    "actual",
    "message",
    "show",
    "coming",
    "set",
    "turn",
    "indicator",
    "next",
    "player",
    "probably",
    "time",
    "check",
    "whether",
    "someone",
    "game",
    "really",
    "need",
    "set",
    "turn",
    "indicator",
    "update",
    "text",
    "game",
    "really",
    "want",
    "change",
    "check",
    "state",
    "going",
    "say",
    "store",
    "dot",
    "game",
    "dot",
    "status",
    "complete",
    "going",
    "perform",
    "logic",
    "going",
    "add",
    "return",
    "statement",
    "complete",
    "know",
    "want",
    "run",
    "logic",
    "always",
    "want",
    "return",
    "point",
    "call",
    "view",
    "dot",
    "openmodal",
    "open",
    "things",
    "us",
    "let",
    "go",
    "game",
    "play",
    "see",
    "recognizes",
    "winning",
    "pattern",
    "see",
    "player",
    "one",
    "wins",
    "click",
    "play",
    "going",
    "anything",
    "updated",
    "event",
    "listener",
    "let",
    "refresh",
    "game",
    "start",
    "point",
    "need",
    "pass",
    "message",
    "say",
    "game",
    "go",
    "ahead",
    "derive",
    "put",
    "variable",
    "actually",
    "probably",
    "yet",
    "want",
    "say",
    "dot",
    "status",
    "dot",
    "complete",
    "already",
    "know",
    "dot",
    "winner",
    "winner",
    "want",
    "say",
    "dot",
    "name",
    "player",
    "referring",
    "say",
    "wins",
    "otherwise",
    "going",
    "thai",
    "correct",
    "logic",
    "opening",
    "message",
    "modal",
    "still",
    "listener",
    "resetting",
    "game",
    "player",
    "one",
    "wins",
    "let",
    "reset",
    "real",
    "quick",
    "case",
    "let",
    "make",
    "sure",
    "player",
    "2",
    "wins",
    "still",
    "saying",
    "player",
    "one",
    "game",
    "got",
    "little",
    "bit",
    "problem",
    "actually",
    "problem",
    "getting",
    "tired",
    "forgetting",
    "things",
    "view",
    "opening",
    "modal",
    "actually",
    "update",
    "text",
    "within",
    "dot",
    "modal",
    "text",
    "dot",
    "inner",
    "text",
    "going",
    "equal",
    "message",
    "let",
    "try",
    "let",
    "make",
    "sure",
    "player",
    "2",
    "wins",
    "go",
    "got",
    "player",
    "two",
    "wins",
    "refresh",
    "player",
    "one",
    "wins",
    "show",
    "last",
    "thing",
    "need",
    "register",
    "event",
    "listener",
    "play",
    "button",
    "reset",
    "game",
    "state",
    "since",
    "resetting",
    "state",
    "need",
    "event",
    "listener",
    "outside",
    "view",
    "bind",
    "game",
    "reset",
    "event",
    "meant",
    "um",
    "handler",
    "whenever",
    "click",
    "reset",
    "button",
    "also",
    "overlap",
    "use",
    "game",
    "complete",
    "want",
    "register",
    "reset",
    "uh",
    "button",
    "also",
    "want",
    "register",
    "modal",
    "button",
    "going",
    "also",
    "reset",
    "game",
    "exact",
    "thing",
    "pass",
    "event",
    "handler",
    "make",
    "sure",
    "hooked",
    "go",
    "back",
    "app",
    "go",
    "bind",
    "game",
    "reset",
    "event",
    "need",
    "fill",
    "whenever",
    "pops",
    "end",
    "state",
    "click",
    "want",
    "everything",
    "close",
    "reset",
    "one",
    "thing",
    "need",
    "implement",
    "close",
    "modal",
    "helper",
    "method",
    "right",
    "next",
    "open",
    "modal",
    "make",
    "one",
    "says",
    "close",
    "modal",
    "simple",
    "add",
    "hidden",
    "class",
    "time",
    "let",
    "go",
    "ahead",
    "call",
    "close",
    "modal",
    "see",
    "works",
    "bound",
    "button",
    "click",
    "close",
    "modal",
    "see",
    "state",
    "reset",
    "want",
    "happen",
    "job",
    "store",
    "class",
    "need",
    "implement",
    "method",
    "let",
    "put",
    "player",
    "move",
    "think",
    "called",
    "reset",
    "final",
    "implementation",
    "say",
    "reset",
    "within",
    "method",
    "basically",
    "going",
    "read",
    "going",
    "set",
    "state",
    "empty",
    "call",
    "save",
    "state",
    "set",
    "initial",
    "value",
    "initial",
    "value",
    "referencing",
    "right",
    "basically",
    "resetting",
    "game",
    "notice",
    "saving",
    "history",
    "past",
    "games",
    "eventually",
    "add",
    "right",
    "want",
    "get",
    "things",
    "reset",
    "correctly",
    "closing",
    "modal",
    "calling",
    "store",
    "want",
    "reset",
    "game",
    "one",
    "last",
    "thing",
    "need",
    "make",
    "sure",
    "player",
    "one",
    "going",
    "beginning",
    "next",
    "game",
    "say",
    "view",
    "dot",
    "set",
    "turn",
    "indicator",
    "remember",
    "pass",
    "player",
    "able",
    "pass",
    "players",
    "zero",
    "represents",
    "player",
    "one",
    "always",
    "want",
    "reset",
    "player",
    "one",
    "another",
    "way",
    "know",
    "reset",
    "state",
    "know",
    "access",
    "player",
    "going",
    "also",
    "give",
    "us",
    "player",
    "one",
    "probably",
    "semantic",
    "way",
    "let",
    "command",
    "save",
    "going",
    "close",
    "modal",
    "reset",
    "state",
    "set",
    "next",
    "turn",
    "indicator",
    "everything",
    "cleared",
    "point",
    "thing",
    "probably",
    "missing",
    "method",
    "clear",
    "game",
    "board",
    "resetting",
    "state",
    "clearing",
    "game",
    "board",
    "let",
    "go",
    "view",
    "say",
    "clear",
    "moves",
    "going",
    "look",
    "squares",
    "access",
    "hold",
    "yep",
    "accessing",
    "like",
    "square",
    "want",
    "clear",
    "things",
    "square",
    "dot",
    "replace",
    "children",
    "leave",
    "empty",
    "basically",
    "clear",
    "everything",
    "need",
    "clear",
    "moves",
    "reset",
    "store",
    "view",
    "dot",
    "clear",
    "moves",
    "set",
    "turn",
    "indicator",
    "pretty",
    "sufficiently",
    "clear",
    "everything",
    "state",
    "view",
    "let",
    "refresh",
    "play",
    "game",
    "player",
    "one",
    "wins",
    "click",
    "play",
    "everything",
    "clears",
    "player",
    "one",
    "going",
    "thing",
    "player",
    "two",
    "player",
    "two",
    "wins",
    "see",
    "player",
    "two",
    "reset",
    "player",
    "one",
    "end",
    "obviously",
    "point",
    "working",
    "game",
    "started",
    "play",
    "refresh",
    "browser",
    "going",
    "reset",
    "play",
    "player",
    "one",
    "wins",
    "click",
    "play",
    "none",
    "stuff",
    "tracked",
    "history",
    "games",
    "past",
    "wanted",
    "implement",
    "going",
    "basically",
    "next",
    "phase",
    "video",
    "going",
    "get",
    "really",
    "cool",
    "concepts",
    "local",
    "storage",
    "finally",
    "kind",
    "refactor",
    "little",
    "bit",
    "declarative",
    "kind",
    "react",
    "state",
    "changes",
    "render",
    "whatever",
    "ui",
    "based",
    "current",
    "state",
    "one",
    "last",
    "thing",
    "wanted",
    "test",
    "let",
    "make",
    "move",
    "game",
    "board",
    "believe",
    "able",
    "click",
    "reset",
    "everything",
    "resets",
    "okay",
    "close",
    "going",
    "want",
    "implement",
    "wanted",
    "show",
    "actually",
    "indirectly",
    "implemented",
    "reset",
    "method",
    "working",
    "handling",
    "winning",
    "game",
    "remember",
    "binded",
    "game",
    "reset",
    "event",
    "actually",
    "linked",
    "reset",
    "button",
    "modal",
    "reset",
    "button",
    "running",
    "handler",
    "regardless",
    "saw",
    "close",
    "everything",
    "closing",
    "modal",
    "let",
    "refactor",
    "closed",
    "modal",
    "close",
    "need",
    "implement",
    "method",
    "put",
    "right",
    "close",
    "modal",
    "say",
    "close",
    "basically",
    "going",
    "um",
    "call",
    "close",
    "modal",
    "going",
    "close",
    "modal",
    "want",
    "close",
    "menu",
    "currently",
    "toggle",
    "menu",
    "method",
    "also",
    "want",
    "close",
    "menu",
    "method",
    "going",
    "look",
    "pretty",
    "similar",
    "method",
    "going",
    "say",
    "dot",
    "dollar",
    "sign",
    "dot",
    "menu",
    "items",
    "class",
    "list",
    "going",
    "add",
    "hidden",
    "make",
    "sure",
    "closed",
    "going",
    "also",
    "remove",
    "border",
    "remove",
    "border",
    "menu",
    "button",
    "closed",
    "know",
    "reselect",
    "icon",
    "always",
    "want",
    "make",
    "sure",
    "going",
    "icon",
    "points",
    "let",
    "copy",
    "two",
    "instead",
    "toggle",
    "going",
    "add",
    "one",
    "remove",
    "one",
    "call",
    "close",
    "menu",
    "going",
    "make",
    "sure",
    "everything",
    "closed",
    "state",
    "add",
    "close",
    "method",
    "point",
    "make",
    "close",
    "menu",
    "private",
    "method",
    "called",
    "also",
    "make",
    "closed",
    "modal",
    "put",
    "make",
    "private",
    "method",
    "called",
    "helper",
    "method",
    "close",
    "called",
    "game",
    "reset",
    "clear",
    "state",
    "make",
    "move",
    "open",
    "actions",
    "reset",
    "going",
    "say",
    "closed",
    "modal",
    "function",
    "referencing",
    "private",
    "declaration",
    "work",
    "make",
    "move",
    "reset",
    "closes",
    "resets",
    "game",
    "board",
    "cleared",
    "everything",
    "working",
    "great",
    "mentioned",
    "tracking",
    "history",
    "games",
    "played",
    "also",
    "anything",
    "happening",
    "click",
    "new",
    "round",
    "order",
    "track",
    "need",
    "update",
    "state",
    "object",
    "right",
    "initial",
    "value",
    "tracking",
    "array",
    "moves",
    "really",
    "need",
    "tracking",
    "array",
    "moves",
    "history",
    "object",
    "current",
    "round",
    "gains",
    "array",
    "games",
    "basically",
    "history",
    "know",
    "time",
    "information",
    "right",
    "able",
    "calculate",
    "statistics",
    "many",
    "wins",
    "player",
    "clarity",
    "going",
    "also",
    "update",
    "update",
    "current",
    "um",
    "current",
    "game",
    "moves",
    "still",
    "represent",
    "thing",
    "need",
    "update",
    "references",
    "current",
    "game",
    "moves",
    "current",
    "game",
    "moves",
    "anywhere",
    "else",
    "okay",
    "think",
    "worked",
    "um",
    "able",
    "see",
    "functionality",
    "things",
    "still",
    "working",
    "looks",
    "like",
    "need",
    "start",
    "tracking",
    "reset",
    "game",
    "instead",
    "saving",
    "state",
    "back",
    "initial",
    "value",
    "update",
    "state",
    "basically",
    "take",
    "finished",
    "game",
    "completed",
    "push",
    "history",
    "start",
    "new",
    "game",
    "look",
    "like",
    "start",
    "tracking",
    "history",
    "let",
    "refactor",
    "little",
    "bit",
    "right",
    "really",
    "need",
    "two",
    "variables",
    "let",
    "pass",
    "get",
    "state",
    "structured",
    "clone",
    "call",
    "one",
    "state",
    "clone",
    "player",
    "move",
    "remain",
    "reset",
    "method",
    "really",
    "going",
    "updating",
    "reset",
    "method",
    "going",
    "check",
    "specific",
    "condition",
    "dot",
    "game",
    "reading",
    "getter",
    "defined",
    "um",
    "dot",
    "status",
    "complete",
    "complete",
    "want",
    "push",
    "game",
    "resetting",
    "history",
    "object",
    "history",
    "array",
    "complete",
    "want",
    "reset",
    "totally",
    "remember",
    "view",
    "adding",
    "reset",
    "two",
    "different",
    "places",
    "adding",
    "drop",
    "right",
    "could",
    "reset",
    "game",
    "even",
    "incomplete",
    "also",
    "adding",
    "button",
    "right",
    "game",
    "complete",
    "need",
    "make",
    "sure",
    "checking",
    "push",
    "incomplete",
    "game",
    "history",
    "need",
    "check",
    "um",
    "moves",
    "destructure",
    "dot",
    "game",
    "really",
    "destructure",
    "stuff",
    "say",
    "status",
    "moves",
    "think",
    "reference",
    "status",
    "complete",
    "also",
    "make",
    "state",
    "clone",
    "going",
    "mutate",
    "state",
    "directly",
    "say",
    "state",
    "clone",
    "remember",
    "state",
    "looks",
    "like",
    "grab",
    "history",
    "current",
    "round",
    "games",
    "array",
    "want",
    "target",
    "state",
    "clone",
    "dot",
    "history",
    "dot",
    "current",
    "round",
    "games",
    "going",
    "push",
    "final",
    "game",
    "believe",
    "would",
    "look",
    "like",
    "um",
    "let",
    "see",
    "probably",
    "want",
    "push",
    "moves",
    "status",
    "want",
    "push",
    "moves",
    "want",
    "easy",
    "way",
    "loop",
    "history",
    "games",
    "see",
    "status",
    "derived",
    "state",
    "right",
    "want",
    "kind",
    "archive",
    "well",
    "get",
    "past",
    "block",
    "going",
    "look",
    "state",
    "clone",
    "set",
    "current",
    "game",
    "moves",
    "equal",
    "empty",
    "array",
    "want",
    "reset",
    "instead",
    "saving",
    "initial",
    "value",
    "going",
    "state",
    "save",
    "state",
    "clone",
    "mutated",
    "two",
    "places",
    "point",
    "done",
    "everything",
    "correctly",
    "able",
    "add",
    "new",
    "getter",
    "got",
    "current",
    "game",
    "let",
    "also",
    "make",
    "stat",
    "skidder",
    "responsible",
    "getting",
    "us",
    "total",
    "number",
    "wins",
    "player",
    "start",
    "us",
    "let",
    "console",
    "log",
    "dot",
    "um",
    "get",
    "state",
    "go",
    "back",
    "game",
    "let",
    "play",
    "least",
    "one",
    "round",
    "reset",
    "right",
    "pushed",
    "um",
    "pushed",
    "game",
    "history",
    "since",
    "actually",
    "calling",
    "anywhere",
    "showing",
    "um",
    "need",
    "call",
    "somewhere",
    "call",
    "end",
    "game",
    "reset",
    "console",
    "log",
    "store",
    "dot",
    "stats",
    "remove",
    "second",
    "let",
    "play",
    "one",
    "game",
    "think",
    "player",
    "one",
    "two",
    "wins",
    "point",
    "reset",
    "see",
    "history",
    "current",
    "round",
    "games",
    "array",
    "one",
    "shows",
    "moves",
    "game",
    "status",
    "showing",
    "winner",
    "player",
    "one",
    "play",
    "hoping",
    "things",
    "update",
    "correctly",
    "yep",
    "history",
    "two",
    "games",
    "history",
    "keep",
    "playing",
    "basically",
    "going",
    "happen",
    "point",
    "player",
    "one",
    "three",
    "games",
    "retrieve",
    "history",
    "right",
    "job",
    "go",
    "back",
    "stats",
    "method",
    "store",
    "class",
    "actually",
    "derive",
    "useful",
    "state",
    "use",
    "update",
    "scoreboard",
    "bottom",
    "want",
    "return",
    "pretty",
    "simple",
    "player",
    "stats",
    "um",
    "going",
    "map",
    "players",
    "array",
    "remember",
    "initialized",
    "constructor",
    "players",
    "assigned",
    "property",
    "class",
    "map",
    "look",
    "player",
    "going",
    "add",
    "whether",
    "win",
    "add",
    "many",
    "wins",
    "calculate",
    "wins",
    "looking",
    "current",
    "state",
    "dot",
    "game",
    "sorry",
    "dot",
    "game",
    "look",
    "history",
    "need",
    "grab",
    "current",
    "state",
    "dot",
    "oops",
    "get",
    "state",
    "say",
    "state",
    "dot",
    "history",
    "looking",
    "history",
    "current",
    "round",
    "games",
    "going",
    "filter",
    "going",
    "look",
    "game",
    "check",
    "status",
    "see",
    "winner",
    "winner",
    "use",
    "operator",
    "javascript",
    "available",
    "basically",
    "coalesce",
    "undefined",
    "values",
    "uh",
    "accessing",
    "property",
    "pass",
    "id",
    "check",
    "equal",
    "current",
    "checking",
    "player",
    "mapping",
    "game",
    "status",
    "current",
    "game",
    "mapping",
    "end",
    "able",
    "get",
    "length",
    "array",
    "give",
    "us",
    "number",
    "wins",
    "player",
    "map",
    "function",
    "spread",
    "player",
    "object",
    "object",
    "pass",
    "number",
    "wins",
    "essentially",
    "giving",
    "us",
    "list",
    "players",
    "additional",
    "property",
    "called",
    "wins",
    "tell",
    "tell",
    "us",
    "later",
    "many",
    "wins",
    "player",
    "furthermore",
    "ties",
    "one",
    "pretty",
    "easy",
    "look",
    "history",
    "time",
    "going",
    "filter",
    "games",
    "dot",
    "winner",
    "equal",
    "null",
    "tell",
    "us",
    "tie",
    "winner",
    "give",
    "length",
    "well",
    "read",
    "stats",
    "object",
    "getting",
    "much",
    "different",
    "picture",
    "let",
    "go",
    "ahead",
    "play",
    "another",
    "game",
    "got",
    "stats",
    "object",
    "got",
    "player",
    "stats",
    "see",
    "array",
    "two",
    "players",
    "open",
    "players",
    "get",
    "attributes",
    "course",
    "also",
    "get",
    "many",
    "wins",
    "far",
    "history",
    "get",
    "ties",
    "equal",
    "zero",
    "already",
    "see",
    "basically",
    "take",
    "information",
    "update",
    "html",
    "show",
    "three",
    "boxes",
    "populating",
    "relatively",
    "quick",
    "think",
    "need",
    "go",
    "view",
    "make",
    "one",
    "helper",
    "method",
    "keep",
    "putting",
    "top",
    "let",
    "go",
    "ahead",
    "say",
    "update",
    "scoreboard",
    "method",
    "going",
    "use",
    "think",
    "might",
    "need",
    "put",
    "data",
    "id",
    "yep",
    "going",
    "put",
    "data",
    "id",
    "going",
    "call",
    "one",
    "uh",
    "player",
    "one",
    "scoreboard",
    "let",
    "let",
    "actually",
    "make",
    "shorter",
    "p1",
    "wins",
    "copy",
    "one",
    "player",
    "two",
    "p2",
    "wins",
    "already",
    "data",
    "id",
    "guess",
    "forgot",
    "pull",
    "html",
    "build",
    "already",
    "ties",
    "go",
    "view",
    "need",
    "select",
    "elements",
    "um",
    "could",
    "method",
    "really",
    "could",
    "method",
    "like",
    "consolidate",
    "stuff",
    "going",
    "select",
    "player",
    "one",
    "wins",
    "going",
    "selected",
    "p1",
    "wins",
    "let",
    "make",
    "sure",
    "right",
    "okay",
    "let",
    "copy",
    "player",
    "two",
    "wins",
    "ties",
    "three",
    "elements",
    "work",
    "update",
    "scoreboard",
    "saying",
    "dot",
    "dollar",
    "sign",
    "player",
    "one",
    "wins",
    "set",
    "inner",
    "text",
    "equal",
    "get",
    "number",
    "say",
    "number",
    "wins",
    "dot",
    "game",
    "sorry",
    "dot",
    "stats",
    "nope",
    "never",
    "mind",
    "view",
    "got",
    "ta",
    "got",
    "ta",
    "careful",
    "putting",
    "stuff",
    "access",
    "information",
    "yet",
    "going",
    "pass",
    "information",
    "directly",
    "method",
    "player",
    "one",
    "wins",
    "player",
    "two",
    "wins",
    "ties",
    "pass",
    "take",
    "care",
    "actually",
    "getting",
    "values",
    "method",
    "later",
    "okay",
    "method",
    "update",
    "scoreboard",
    "need",
    "call",
    "somewhere",
    "checking",
    "looks",
    "good",
    "need",
    "call",
    "somewhere",
    "think",
    "best",
    "place",
    "moment",
    "game",
    "reset",
    "event",
    "place",
    "actually",
    "cataloging",
    "end",
    "game",
    "set",
    "turn",
    "indicator",
    "going",
    "call",
    "view",
    "update",
    "scoreboard",
    "point",
    "going",
    "pass",
    "store",
    "dot",
    "stats",
    "dot",
    "player",
    "stats",
    "going",
    "select",
    "first",
    "player",
    "pass",
    "number",
    "wins",
    "thing",
    "player",
    "two",
    "finally",
    "ties",
    "get",
    "rid",
    "console",
    "log",
    "hopefully",
    "worked",
    "correctly",
    "update",
    "things",
    "game",
    "sort",
    "done",
    "gotten",
    "error",
    "says",
    "find",
    "elements",
    "save",
    "finding",
    "see",
    "player",
    "one",
    "one",
    "win",
    "player",
    "two",
    "win",
    "one",
    "win",
    "somehow",
    "get",
    "tie",
    "going",
    "um",
    "guess",
    "one",
    "gon",
    "na",
    "work",
    "ah",
    "ca",
    "get",
    "tie",
    "going",
    "got",
    "player",
    "two",
    "three",
    "wins",
    "player",
    "one",
    "one",
    "win",
    "current",
    "history",
    "last",
    "thing",
    "need",
    "um",
    "reset",
    "right",
    "going",
    "clear",
    "thing",
    "going",
    "clear",
    "scoreboard",
    "new",
    "round",
    "need",
    "implement",
    "method",
    "let",
    "go",
    "ahead",
    "store",
    "first",
    "pretty",
    "close",
    "reset",
    "say",
    "new",
    "round",
    "want",
    "new",
    "round",
    "basically",
    "take",
    "games",
    "current",
    "round",
    "games",
    "push",
    "games",
    "array",
    "basically",
    "going",
    "clear",
    "one",
    "clear",
    "one",
    "one",
    "way",
    "since",
    "know",
    "new",
    "round",
    "going",
    "also",
    "reset",
    "first",
    "call",
    "dot",
    "reset",
    "take",
    "completed",
    "games",
    "put",
    "current",
    "round",
    "games",
    "clear",
    "everything",
    "reset",
    "need",
    "state",
    "clone",
    "ca",
    "update",
    "state",
    "directly",
    "best",
    "practice",
    "talked",
    "going",
    "take",
    "state",
    "clone",
    "grab",
    "history",
    "going",
    "populate",
    "games",
    "um",
    "recent",
    "current",
    "round",
    "games",
    "one",
    "quick",
    "way",
    "going",
    "array",
    "spread",
    "push",
    "method",
    "state",
    "clone",
    "dot",
    "history",
    "dot",
    "current",
    "round",
    "games",
    "push",
    "games",
    "last",
    "take",
    "current",
    "round",
    "games",
    "set",
    "empty",
    "array",
    "finally",
    "save",
    "state",
    "pass",
    "state",
    "clone",
    "modified",
    "one",
    "thing",
    "going",
    "messed",
    "probably",
    "super",
    "apparent",
    "go",
    "play",
    "games",
    "go",
    "reset",
    "everything",
    "let",
    "see",
    "point",
    "really",
    "need",
    "hook",
    "view",
    "bound",
    "new",
    "round",
    "event",
    "placeholder",
    "need",
    "basically",
    "call",
    "store",
    "call",
    "new",
    "round",
    "think",
    "want",
    "clear",
    "everything",
    "similar",
    "reset",
    "want",
    "close",
    "everything",
    "want",
    "clear",
    "moves",
    "ui",
    "store",
    "want",
    "set",
    "turn",
    "indicator",
    "want",
    "update",
    "scoreboard",
    "call",
    "actually",
    "needs",
    "go",
    "first",
    "state",
    "updated",
    "read",
    "state",
    "appropriately",
    "populate",
    "um",
    "ui",
    "let",
    "go",
    "try",
    "got",
    "far",
    "um",
    "let",
    "populate",
    "state",
    "player",
    "one",
    "two",
    "wins",
    "click",
    "something",
    "reset",
    "clear",
    "board",
    "keep",
    "go",
    "hit",
    "new",
    "round",
    "see",
    "clears",
    "everything",
    "scoreboard",
    "also",
    "cleared",
    "point",
    "fully",
    "functioning",
    "game",
    "everything",
    "works",
    "everything",
    "updated",
    "last",
    "thing",
    "going",
    "look",
    "persisting",
    "state",
    "across",
    "refreshes",
    "see",
    "play",
    "game",
    "get",
    "player",
    "one",
    "one",
    "win",
    "refresh",
    "page",
    "cleared",
    "ideally",
    "would",
    "want",
    "able",
    "refresh",
    "page",
    "still",
    "keep",
    "record",
    "games",
    "history",
    "way",
    "really",
    "using",
    "local",
    "storage",
    "make",
    "game",
    "persistent",
    "across",
    "browser",
    "refreshes",
    "additionally",
    "allow",
    "two",
    "users",
    "basically",
    "play",
    "time",
    "different",
    "browser",
    "tabs",
    "use",
    "local",
    "storage",
    "go",
    "documentation",
    "local",
    "storage",
    "see",
    "property",
    "window",
    "interface",
    "allows",
    "access",
    "storage",
    "object",
    "document",
    "origin",
    "similar",
    "session",
    "storage",
    "except",
    "local",
    "storage",
    "data",
    "expiration",
    "session",
    "storage",
    "data",
    "gets",
    "cleared",
    "page",
    "session",
    "ends",
    "page",
    "closed",
    "local",
    "storage",
    "actually",
    "close",
    "page",
    "entirely",
    "reopen",
    "still",
    "little",
    "bit",
    "persistent",
    "also",
    "available",
    "across",
    "browser",
    "tabs",
    "go",
    "event",
    "reference",
    "let",
    "see",
    "find",
    "let",
    "click",
    "storage",
    "maybe",
    "look",
    "storage",
    "event",
    "alright",
    "looking",
    "wool",
    "eventually",
    "implement",
    "storage",
    "event",
    "implemented",
    "storage",
    "event",
    "interface",
    "implemented",
    "storage",
    "event",
    "sent",
    "window",
    "storage",
    "area",
    "window",
    "access",
    "changed",
    "within",
    "context",
    "another",
    "document",
    "long",
    "way",
    "saying",
    "basically",
    "add",
    "event",
    "listener",
    "window",
    "storage",
    "event",
    "one",
    "tab",
    "sitting",
    "open",
    "game",
    "player",
    "clicking",
    "going",
    "trigger",
    "event",
    "another",
    "tab",
    "listening",
    "event",
    "recognize",
    "player",
    "played",
    "different",
    "tab",
    "allow",
    "us",
    "sync",
    "two",
    "tabs",
    "together",
    "allow",
    "us",
    "basically",
    "two",
    "players",
    "simulate",
    "realistic",
    "game",
    "going",
    "implement",
    "local",
    "storage",
    "know",
    "local",
    "storage",
    "need",
    "key",
    "implement",
    "first",
    "let",
    "get",
    "rid",
    "previous",
    "app",
    "finally",
    "hit",
    "delete",
    "button",
    "everything",
    "working",
    "refactor",
    "everything",
    "lot",
    "cleaner",
    "time",
    "go",
    "store",
    "constructor",
    "store",
    "rather",
    "passing",
    "players",
    "going",
    "also",
    "pass",
    "key",
    "key",
    "going",
    "represent",
    "key",
    "local",
    "storage",
    "going",
    "actually",
    "keep",
    "data",
    "go",
    "storage",
    "go",
    "local",
    "storage",
    "right",
    "see",
    "already",
    "populated",
    "happening",
    "finished",
    "game",
    "key",
    "going",
    "referenced",
    "get",
    "save",
    "game",
    "state",
    "tracking",
    "let",
    "go",
    "ahead",
    "go",
    "back",
    "app",
    "give",
    "special",
    "key",
    "initialize",
    "store",
    "right",
    "say",
    "live",
    "um",
    "t3",
    "storage",
    "key",
    "could",
    "literally",
    "anything",
    "passing",
    "key",
    "need",
    "save",
    "say",
    "dot",
    "storage",
    "key",
    "equal",
    "key",
    "dot",
    "players",
    "equal",
    "players",
    "working",
    "last",
    "thing",
    "need",
    "actually",
    "go",
    "get",
    "get",
    "state",
    "save",
    "state",
    "instead",
    "saving",
    "memory",
    "property",
    "class",
    "instance",
    "going",
    "replace",
    "local",
    "storage",
    "talking",
    "earlier",
    "seemed",
    "little",
    "redundant",
    "would",
    "access",
    "another",
    "method",
    "well",
    "refactor",
    "lot",
    "easier",
    "get",
    "rid",
    "instance",
    "property",
    "get",
    "state",
    "going",
    "retrieve",
    "local",
    "storage",
    "know",
    "uh",
    "local",
    "storage",
    "empty",
    "going",
    "give",
    "us",
    "undefined",
    "remember",
    "top",
    "initial",
    "value",
    "go",
    "return",
    "nothing",
    "found",
    "within",
    "local",
    "storage",
    "key",
    "first",
    "try",
    "grab",
    "item",
    "say",
    "window",
    "dot",
    "local",
    "storage",
    "dot",
    "get",
    "item",
    "method",
    "pass",
    "storage",
    "key",
    "initialized",
    "constructor",
    "class",
    "going",
    "return",
    "us",
    "either",
    "undefined",
    "string",
    "representation",
    "value",
    "basically",
    "going",
    "return",
    "going",
    "say",
    "found",
    "item",
    "defined",
    "going",
    "parse",
    "string",
    "otherwise",
    "going",
    "return",
    "initial",
    "value",
    "javascript",
    "object",
    "words",
    "going",
    "return",
    "type",
    "falling",
    "back",
    "value",
    "get",
    "state",
    "implementation",
    "save",
    "state",
    "replace",
    "call",
    "say",
    "set",
    "item",
    "going",
    "um",
    "storage",
    "key",
    "need",
    "actually",
    "opposite",
    "need",
    "stringify",
    "object",
    "see",
    "storing",
    "new",
    "state",
    "saved",
    "pass",
    "raw",
    "object",
    "right",
    "persist",
    "things",
    "local",
    "storage",
    "fine",
    "let",
    "go",
    "back",
    "game",
    "see",
    "things",
    "working",
    "better",
    "play",
    "game",
    "player",
    "one",
    "wins",
    "see",
    "tracked",
    "scoreboard",
    "let",
    "get",
    "player",
    "2",
    "win",
    "game",
    "tracked",
    "big",
    "tell",
    "let",
    "refresh",
    "browser",
    "refresh",
    "browser",
    "looks",
    "like",
    "zero",
    "wins",
    "reality",
    "actually",
    "tracking",
    "state",
    "one",
    "big",
    "problem",
    "problem",
    "initialization",
    "page",
    "let",
    "go",
    "app",
    "bottom",
    "waiting",
    "load",
    "event",
    "actually",
    "updating",
    "dom",
    "latest",
    "state",
    "see",
    "reset",
    "reset",
    "new",
    "round",
    "calling",
    "changes",
    "view",
    "well",
    "really",
    "need",
    "call",
    "first",
    "load",
    "page",
    "well",
    "see",
    "repeating",
    "things",
    "quite",
    "lot",
    "would",
    "best",
    "put",
    "little",
    "helper",
    "method",
    "say",
    "init",
    "view",
    "put",
    "right",
    "basically",
    "init",
    "view",
    "let",
    "make",
    "sure",
    "everything",
    "closed",
    "let",
    "clear",
    "moves",
    "let",
    "set",
    "turn",
    "indicator",
    "whatever",
    "current",
    "player",
    "state",
    "state",
    "value",
    "coming",
    "local",
    "storage",
    "things",
    "need",
    "update",
    "addition",
    "second",
    "last",
    "update",
    "scoreboard",
    "current",
    "stats",
    "basically",
    "call",
    "reset",
    "get",
    "rid",
    "knit",
    "view",
    "reset",
    "store",
    "little",
    "helper",
    "method",
    "us",
    "let",
    "check",
    "make",
    "sure",
    "break",
    "anything",
    "play",
    "game",
    "someone",
    "wins",
    "reset",
    "looks",
    "like",
    "everything",
    "worked",
    "got",
    "two",
    "wins",
    "player",
    "one",
    "one",
    "win",
    "player",
    "two",
    "refresh",
    "page",
    "still",
    "nothing",
    "going",
    "happen",
    "go",
    "music",
    "um",
    "basically",
    "call",
    "knit",
    "view",
    "scope",
    "init",
    "method",
    "going",
    "populate",
    "things",
    "page",
    "load",
    "next",
    "time",
    "refresh",
    "gon",
    "na",
    "stick",
    "two",
    "wins",
    "one",
    "wins",
    "refresh",
    "many",
    "times",
    "want",
    "going",
    "end",
    "thing",
    "one",
    "last",
    "problem",
    "really",
    "solve",
    "happens",
    "like",
    "three",
    "moves",
    "game",
    "board",
    "refresh",
    "page",
    "going",
    "clear",
    "see",
    "state",
    "player",
    "2",
    "player",
    "one",
    "need",
    "way",
    "actually",
    "reconstruct",
    "moves",
    "made",
    "game",
    "board",
    "initialization",
    "page",
    "remember",
    "view",
    "helper",
    "methods",
    "one",
    "helper",
    "methods",
    "handle",
    "player",
    "move",
    "creates",
    "icon",
    "replaces",
    "square",
    "belongs",
    "pass",
    "square",
    "element",
    "want",
    "replace",
    "one",
    "thing",
    "could",
    "could",
    "loop",
    "squares",
    "basically",
    "update",
    "state",
    "really",
    "need",
    "implement",
    "method",
    "initialize",
    "moves",
    "going",
    "calling",
    "dot",
    "squares",
    "let",
    "take",
    "look",
    "previous",
    "implementation",
    "clearing",
    "moves",
    "let",
    "let",
    "move",
    "closer",
    "kind",
    "relates",
    "clearing",
    "moves",
    "replacing",
    "children",
    "like",
    "adding",
    "moves",
    "need",
    "go",
    "square",
    "basically",
    "need",
    "check",
    "existing",
    "move",
    "state",
    "needs",
    "pass",
    "moves",
    "array",
    "current",
    "game",
    "moves",
    "check",
    "moves",
    "dot",
    "find",
    "look",
    "move",
    "square",
    "id",
    "equal",
    "square",
    "dot",
    "id",
    "looping",
    "right",
    "existing",
    "move",
    "going",
    "call",
    "dot",
    "handle",
    "player",
    "move",
    "pass",
    "square",
    "pass",
    "player",
    "made",
    "move",
    "going",
    "existing",
    "move",
    "dot",
    "player",
    "initialize",
    "moves",
    "let",
    "go",
    "back",
    "app",
    "right",
    "init",
    "view",
    "um",
    "want",
    "call",
    "view",
    "dot",
    "initialize",
    "moves",
    "seem",
    "pretty",
    "similar",
    "um",
    "init",
    "view",
    "reset",
    "want",
    "actually",
    "okay",
    "state",
    "would",
    "cleared",
    "let",
    "go",
    "ahead",
    "put",
    "last",
    "method",
    "reinitialize",
    "moves",
    "since",
    "cleared",
    "moves",
    "right",
    "um",
    "sorry",
    "reset",
    "event",
    "resetting",
    "store",
    "new",
    "round",
    "store",
    "clear",
    "current",
    "moves",
    "basically",
    "empty",
    "call",
    "going",
    "find",
    "existing",
    "elements",
    "let",
    "go",
    "ahead",
    "save",
    "let",
    "refresh",
    "page",
    "looks",
    "like",
    "broken",
    "something",
    "moves",
    "undefined",
    "oh",
    "passed",
    "current",
    "state",
    "call",
    "empty",
    "function",
    "call",
    "need",
    "pass",
    "dot",
    "moves",
    "see",
    "initialized",
    "matter",
    "many",
    "times",
    "refresh",
    "always",
    "going",
    "reconstruct",
    "latest",
    "moves",
    "game",
    "let",
    "reset",
    "resets",
    "refresh",
    "empty",
    "let",
    "put",
    "play",
    "refresh",
    "keeps",
    "see",
    "recreate",
    "state",
    "every",
    "single",
    "time",
    "let",
    "set",
    "new",
    "round",
    "clears",
    "everything",
    "including",
    "scoreboard",
    "play",
    "one",
    "time",
    "player",
    "one",
    "wins",
    "player",
    "2",
    "wins",
    "got",
    "one",
    "win",
    "side",
    "place",
    "something",
    "refresh",
    "reset",
    "refresh",
    "everything",
    "looks",
    "like",
    "working",
    "great",
    "real",
    "test",
    "talked",
    "earlier",
    "able",
    "play",
    "two",
    "separate",
    "tabs",
    "let",
    "copy",
    "url",
    "paste",
    "looking",
    "exact",
    "game",
    "running",
    "update",
    "tab",
    "put",
    "x",
    "go",
    "tab",
    "see",
    "update",
    "going",
    "cause",
    "sorts",
    "problems",
    "click",
    "really",
    "going",
    "sync",
    "tab",
    "really",
    "way",
    "play",
    "game",
    "pretty",
    "quick",
    "way",
    "fix",
    "mentioned",
    "storage",
    "event",
    "need",
    "go",
    "initialization",
    "listen",
    "event",
    "let",
    "go",
    "ahead",
    "let",
    "find",
    "good",
    "spot",
    "right",
    "listening",
    "view",
    "events",
    "knitting",
    "initializing",
    "view",
    "let",
    "put",
    "top",
    "actually",
    "let",
    "put",
    "right",
    "next",
    "net",
    "view",
    "say",
    "window",
    "dot",
    "add",
    "event",
    "listener",
    "listening",
    "storage",
    "event",
    "tab",
    "updates",
    "current",
    "tab",
    "updates",
    "tab",
    "updates",
    "put",
    "console",
    "log",
    "say",
    "state",
    "changed",
    "another",
    "tab",
    "let",
    "see",
    "looks",
    "like",
    "first",
    "okay",
    "click",
    "go",
    "tab",
    "see",
    "state",
    "change",
    "another",
    "tab",
    "click",
    "see",
    "state",
    "change",
    "another",
    "tab",
    "basically",
    "every",
    "time",
    "opposite",
    "tab",
    "changes",
    "get",
    "event",
    "fired",
    "leave",
    "basically",
    "need",
    "happens",
    "need",
    "initialize",
    "view",
    "initializing",
    "view",
    "first",
    "page",
    "load",
    "initializing",
    "view",
    "storage",
    "changes",
    "let",
    "go",
    "back",
    "refresh",
    "page",
    "like",
    "reset",
    "everything",
    "make",
    "move",
    "let",
    "first",
    "look",
    "board",
    "empty",
    "tab",
    "empty",
    "make",
    "move",
    "top",
    "left",
    "corner",
    "would",
    "expect",
    "get",
    "console",
    "log",
    "tab",
    "also",
    "see",
    "x",
    "recreated",
    "see",
    "clicked",
    "got",
    "let",
    "put",
    "bottom",
    "right",
    "see",
    "clicked",
    "tab",
    "showed",
    "got",
    "console",
    "log",
    "cool",
    "little",
    "trick",
    "play",
    "multiple",
    "tabs",
    "last",
    "thing",
    "want",
    "go",
    "optional",
    "typescript",
    "refactor",
    "totally",
    "optional",
    "obviously",
    "long",
    "enough",
    "video",
    "point",
    "hopefully",
    "learned",
    "lot",
    "maybe",
    "give",
    "subscribe",
    "channel",
    "something",
    "um",
    "still",
    "going",
    "kind",
    "connect",
    "dots",
    "used",
    "react",
    "probably",
    "heard",
    "react",
    "call",
    "reactive",
    "ui",
    "framework",
    "although",
    "partially",
    "true",
    "really",
    "look",
    "hood",
    "idea",
    "overarching",
    "idea",
    "react",
    "program",
    "declaratively",
    "blog",
    "post",
    "website",
    "let",
    "go",
    "website",
    "go",
    "search",
    "concepts",
    "written",
    "imperative",
    "versus",
    "declarative",
    "programming",
    "come",
    "middle",
    "see",
    "section",
    "called",
    "react",
    "declarative",
    "versus",
    "jquery",
    "imperative",
    "far",
    "done",
    "programming",
    "imperatively",
    "words",
    "means",
    "go",
    "ahead",
    "read",
    "examples",
    "explain",
    "video",
    "program",
    "imperatively",
    "means",
    "saying",
    "okay",
    "outcome",
    "want",
    "seven",
    "different",
    "steps",
    "take",
    "get",
    "outcome",
    "declarative",
    "programming",
    "basically",
    "saying",
    "outcome",
    "want",
    "go",
    "figure",
    "make",
    "happen",
    "think",
    "example",
    "blog",
    "post",
    "building",
    "house",
    "imperatively",
    "versus",
    "declaratively",
    "imperatively",
    "going",
    "specify",
    "steps",
    "build",
    "foundation",
    "put",
    "framework",
    "install",
    "utilities",
    "add",
    "walls",
    "finishing",
    "touches",
    "forth",
    "building",
    "house",
    "declaratively",
    "step",
    "basically",
    "saying",
    "care",
    "build",
    "want",
    "nice",
    "fireplace",
    "lakefront",
    "view",
    "big",
    "kitchen",
    "outcomes",
    "declaring",
    "want",
    "let",
    "builder",
    "house",
    "determine",
    "best",
    "way",
    "make",
    "happen",
    "thing",
    "happens",
    "react",
    "library",
    "people",
    "would",
    "call",
    "framework",
    "even",
    "react",
    "basically",
    "looking",
    "state",
    "application",
    "based",
    "state",
    "based",
    "view",
    "defined",
    "links",
    "state",
    "going",
    "figure",
    "render",
    "page",
    "screen",
    "look",
    "back",
    "program",
    "lot",
    "imperative",
    "stuff",
    "going",
    "binding",
    "different",
    "clicks",
    "buttons",
    "clicked",
    "lot",
    "explicit",
    "steps",
    "written",
    "want",
    "ui",
    "state",
    "actually",
    "update",
    "rather",
    "small",
    "going",
    "huge",
    "refactor",
    "basically",
    "take",
    "individual",
    "steps",
    "wrap",
    "render",
    "method",
    "idea",
    "render",
    "method",
    "need",
    "call",
    "view",
    "need",
    "pass",
    "state",
    "application",
    "remember",
    "store",
    "gives",
    "us",
    "state",
    "game",
    "um",
    "game",
    "right",
    "stats",
    "basically",
    "state",
    "need",
    "pass",
    "information",
    "views",
    "render",
    "method",
    "basically",
    "define",
    "steps",
    "figure",
    "show",
    "page",
    "user",
    "let",
    "try",
    "think",
    "um",
    "really",
    "nice",
    "way",
    "clean",
    "thing",
    "kind",
    "get",
    "us",
    "final",
    "state",
    "application",
    "finally",
    "believe",
    "init",
    "view",
    "method",
    "actually",
    "represents",
    "lot",
    "trying",
    "copying",
    "lot",
    "stuff",
    "let",
    "make",
    "little",
    "smaller",
    "open",
    "view",
    "right",
    "actually",
    "make",
    "little",
    "bigger",
    "kind",
    "tough",
    "see",
    "know",
    "talked",
    "stuff",
    "render",
    "method",
    "basically",
    "point",
    "put",
    "hashtag",
    "front",
    "pretty",
    "much",
    "methods",
    "going",
    "called",
    "within",
    "render",
    "method",
    "internal",
    "implementation",
    "details",
    "view",
    "class",
    "nobody",
    "needs",
    "know",
    "except",
    "view",
    "think",
    "methods",
    "basically",
    "dom",
    "helpers",
    "going",
    "call",
    "main",
    "render",
    "method",
    "event",
    "listeners",
    "going",
    "public",
    "methods",
    "called",
    "app",
    "controller",
    "one",
    "render",
    "method",
    "top",
    "going",
    "call",
    "render",
    "nothing",
    "significant",
    "name",
    "necessarily",
    "convention",
    "generally",
    "would",
    "call",
    "react",
    "using",
    "components",
    "method",
    "put",
    "jsx",
    "whatnot",
    "convention",
    "naming",
    "convention",
    "anything",
    "going",
    "pass",
    "store",
    "store",
    "know",
    "getter",
    "methods",
    "going",
    "explicit",
    "actually",
    "want",
    "pass",
    "game",
    "stats",
    "could",
    "pass",
    "entire",
    "store",
    "object",
    "think",
    "maybe",
    "final",
    "implementation",
    "done",
    "explicit",
    "know",
    "exactly",
    "dealing",
    "words",
    "game",
    "stats",
    "represented",
    "method",
    "stats",
    "method",
    "game",
    "based",
    "information",
    "able",
    "build",
    "ui",
    "entirely",
    "let",
    "start",
    "building",
    "first",
    "thing",
    "know",
    "needs",
    "happen",
    "matter",
    "matter",
    "state",
    "application",
    "know",
    "want",
    "populate",
    "scoreboard",
    "based",
    "current",
    "state",
    "game",
    "first",
    "thing",
    "call",
    "dot",
    "update",
    "scoreboard",
    "pass",
    "player",
    "one",
    "wins",
    "player",
    "two",
    "wins",
    "number",
    "ties",
    "know",
    "state",
    "available",
    "render",
    "method",
    "come",
    "back",
    "see",
    "extracting",
    "stuff",
    "actually",
    "destructuring",
    "make",
    "little",
    "easier",
    "deal",
    "stats",
    "grab",
    "player",
    "stats",
    "ties",
    "game",
    "grab",
    "grab",
    "let",
    "take",
    "look",
    "grab",
    "moves",
    "current",
    "player",
    "status",
    "also",
    "destructure",
    "complete",
    "winner",
    "property",
    "game",
    "destructuring",
    "es6",
    "get",
    "variable",
    "references",
    "define",
    "know",
    "nested",
    "object",
    "property",
    "access",
    "going",
    "update",
    "scoreboard",
    "let",
    "go",
    "back",
    "app",
    "see",
    "basically",
    "basically",
    "looked",
    "stats",
    "dot",
    "player",
    "stats",
    "first",
    "player",
    "finding",
    "first",
    "player",
    "number",
    "wins",
    "player",
    "stats",
    "one",
    "would",
    "second",
    "player",
    "wins",
    "ties",
    "pass",
    "straight",
    "right",
    "rendering",
    "rendering",
    "scoreboard",
    "go",
    "ahead",
    "start",
    "pulling",
    "initialize",
    "functionality",
    "method",
    "remove",
    "actually",
    "going",
    "replace",
    "knit",
    "view",
    "going",
    "pass",
    "store",
    "dot",
    "game",
    "also",
    "pass",
    "right",
    "storage",
    "event",
    "listener",
    "also",
    "pass",
    "event",
    "listeners",
    "let",
    "save",
    "let",
    "go",
    "back",
    "app",
    "refresh",
    "page",
    "see",
    "least",
    "scoreboard",
    "updated",
    "implemented",
    "one",
    "method",
    "within",
    "render",
    "next",
    "thing",
    "need",
    "um",
    "let",
    "see",
    "probably",
    "reconstruct",
    "game",
    "board",
    "really",
    "follow",
    "init",
    "view",
    "updating",
    "scoreboard",
    "need",
    "close",
    "everything",
    "clear",
    "moves",
    "let",
    "let",
    "actually",
    "put",
    "right",
    "dot",
    "close",
    "dot",
    "clear",
    "moves",
    "going",
    "update",
    "scoreboard",
    "going",
    "initialize",
    "moves",
    "going",
    "cover",
    "lot",
    "ground",
    "need",
    "set",
    "turn",
    "indicator",
    "missed",
    "one",
    "one",
    "come",
    "right",
    "one",
    "takes",
    "player",
    "need",
    "pass",
    "current",
    "player",
    "grabbing",
    "state",
    "grab",
    "current",
    "player",
    "set",
    "refresh",
    "go",
    "back",
    "see",
    "good",
    "amount",
    "stuff",
    "updated",
    "think",
    "able",
    "play",
    "quite",
    "yet",
    "got",
    "moves",
    "undefined",
    "forgotten",
    "pass",
    "correct",
    "data",
    "need",
    "pass",
    "moves",
    "initialize",
    "method",
    "let",
    "make",
    "sure",
    "missing",
    "anything",
    "okay",
    "save",
    "right",
    "ca",
    "click",
    "anything",
    "removed",
    "functionality",
    "main",
    "app",
    "get",
    "rid",
    "keep",
    "event",
    "listener",
    "going",
    "listen",
    "changes",
    "different",
    "tab",
    "initialization",
    "first",
    "page",
    "load",
    "going",
    "render",
    "view",
    "reset",
    "new",
    "round",
    "events",
    "going",
    "update",
    "store",
    "render",
    "new",
    "view",
    "last",
    "thing",
    "handle",
    "click",
    "event",
    "happens",
    "square",
    "think",
    "logic",
    "stay",
    "check",
    "state",
    "going",
    "return",
    "early",
    "finds",
    "existing",
    "move",
    "square",
    "view",
    "related",
    "right",
    "handling",
    "player",
    "move",
    "um",
    "covered",
    "every",
    "time",
    "call",
    "render",
    "update",
    "state",
    "render",
    "method",
    "figure",
    "recreate",
    "moves",
    "next",
    "state",
    "represents",
    "actually",
    "comment",
    "also",
    "comment",
    "player",
    "move",
    "believe",
    "sorry",
    "updating",
    "state",
    "important",
    "need",
    "update",
    "state",
    "player",
    "move",
    "render",
    "method",
    "gets",
    "latest",
    "version",
    "state",
    "actually",
    "recreate",
    "game",
    "remove",
    "player",
    "move",
    "fine",
    "check",
    "game",
    "complete",
    "open",
    "modal",
    "actually",
    "check",
    "within",
    "render",
    "method",
    "let",
    "see",
    "best",
    "place",
    "though",
    "closing",
    "everything",
    "clear",
    "move",
    "send",
    "turn",
    "indicator",
    "update",
    "scoreboard",
    "really",
    "end",
    "really",
    "checking",
    "see",
    "status",
    "let",
    "see",
    "grab",
    "inc",
    "complete",
    "variable",
    "destructured",
    "everything",
    "complete",
    "game",
    "complete",
    "call",
    "dot",
    "open",
    "modal",
    "grab",
    "winner",
    "check",
    "winner",
    "pass",
    "string",
    "otherwise",
    "pass",
    "tie",
    "check",
    "right",
    "basically",
    "takes",
    "care",
    "right",
    "end",
    "setting",
    "turn",
    "indicator",
    "maybe",
    "bring",
    "one",
    "end",
    "render",
    "method",
    "want",
    "set",
    "turn",
    "indicator",
    "um",
    "know",
    "game",
    "complete",
    "going",
    "return",
    "early",
    "see",
    "game",
    "complete",
    "okay",
    "think",
    "remove",
    "method",
    "point",
    "player",
    "move",
    "event",
    "really",
    "checking",
    "state",
    "updating",
    "checking",
    "existing",
    "move",
    "find",
    "going",
    "anything",
    "ui",
    "going",
    "existing",
    "move",
    "means",
    "valid",
    "play",
    "going",
    "update",
    "state",
    "making",
    "player",
    "move",
    "updated",
    "state",
    "render",
    "view",
    "new",
    "state",
    "retrieved",
    "let",
    "go",
    "back",
    "game",
    "says",
    "dot",
    "handle",
    "player",
    "move",
    "function",
    "let",
    "figure",
    "trying",
    "call",
    "believe",
    "happening",
    "initialize",
    "moves",
    "yep",
    "right",
    "need",
    "since",
    "made",
    "private",
    "method",
    "need",
    "add",
    "hashtag",
    "handle",
    "player",
    "move",
    "like",
    "let",
    "go",
    "back",
    "see",
    "got",
    "errors",
    "looks",
    "like",
    "things",
    "populated",
    "let",
    "try",
    "play",
    "right",
    "detected",
    "win",
    "says",
    "store",
    "defined",
    "referencing",
    "something",
    "incorrectly",
    "oh",
    "okay",
    "render",
    "method",
    "see",
    "grabbing",
    "winner",
    "name",
    "store",
    "except",
    "available",
    "us",
    "really",
    "need",
    "grab",
    "value",
    "right",
    "get",
    "rid",
    "grab",
    "invalid",
    "references",
    "looks",
    "like",
    "player",
    "one",
    "wins",
    "play",
    "clears",
    "things",
    "play",
    "game",
    "see",
    "player",
    "one",
    "racking",
    "wins",
    "reset",
    "new",
    "round",
    "works",
    "reset",
    "game",
    "board",
    "seems",
    "work",
    "think",
    "see",
    "everything",
    "populating",
    "across",
    "two",
    "tabs",
    "appears",
    "case",
    "also",
    "working",
    "know",
    "complete",
    "marathon",
    "um",
    "two",
    "things",
    "improve",
    "application",
    "think",
    "really",
    "cool",
    "additions",
    "app",
    "um",
    "first",
    "one",
    "somewhat",
    "easy",
    "grasp",
    "second",
    "one",
    "maybe",
    "easy",
    "feel",
    "free",
    "kind",
    "skip",
    "either",
    "wanted",
    "add",
    "supplement",
    "video",
    "see",
    "calling",
    "lot",
    "different",
    "places",
    "see",
    "calling",
    "like",
    "five",
    "six",
    "times",
    "five",
    "times",
    "probably",
    "easier",
    "way",
    "one",
    "thing",
    "go",
    "back",
    "store",
    "class",
    "make",
    "one",
    "little",
    "update",
    "make",
    "lives",
    "lot",
    "easier",
    "automate",
    "lot",
    "right",
    "plain",
    "es6",
    "class",
    "put",
    "keyword",
    "extends",
    "extend",
    "event",
    "target",
    "go",
    "look",
    "mdn",
    "event",
    "target",
    "look",
    "see",
    "interface",
    "implemented",
    "objects",
    "receive",
    "events",
    "may",
    "listeners",
    "words",
    "target",
    "events",
    "implements",
    "three",
    "methods",
    "associated",
    "interface",
    "look",
    "instance",
    "methods",
    "add",
    "event",
    "listener",
    "remove",
    "event",
    "listener",
    "dispatch",
    "event",
    "basically",
    "elements",
    "default",
    "dom",
    "elements",
    "going",
    "inherit",
    "class",
    "class",
    "also",
    "create",
    "store",
    "extends",
    "way",
    "send",
    "custom",
    "event",
    "every",
    "time",
    "store",
    "changes",
    "first",
    "thing",
    "need",
    "sorry",
    "think",
    "extended",
    "view",
    "getting",
    "tired",
    "let",
    "remove",
    "view",
    "instead",
    "putting",
    "store",
    "becomes",
    "event",
    "target",
    "top",
    "constructor",
    "need",
    "call",
    "super",
    "super",
    "keyword",
    "basically",
    "allow",
    "us",
    "inherit",
    "event",
    "target",
    "kind",
    "programming",
    "concepts",
    "words",
    "add",
    "super",
    "able",
    "get",
    "access",
    "three",
    "methods",
    "let",
    "comment",
    "super",
    "go",
    "go",
    "store",
    "um",
    "let",
    "see",
    "says",
    "add",
    "event",
    "add",
    "event",
    "listener",
    "think",
    "probably",
    "confused",
    "let",
    "reload",
    "oh",
    "sorry",
    "called",
    "super",
    "need",
    "remove",
    "remove",
    "one",
    "second",
    "go",
    "store",
    "going",
    "see",
    "available",
    "properties",
    "methods",
    "see",
    "ad",
    "event",
    "listener",
    "anywhere",
    "vs",
    "code",
    "detected",
    "part",
    "interface",
    "second",
    "add",
    "back",
    "extend",
    "event",
    "target",
    "call",
    "super",
    "access",
    "event",
    "listener",
    "want",
    "listen",
    "specific",
    "event",
    "event",
    "going",
    "define",
    "state",
    "change",
    "say",
    "state",
    "change",
    "custom",
    "event",
    "going",
    "listening",
    "callback",
    "going",
    "render",
    "view",
    "render",
    "view",
    "allow",
    "us",
    "basically",
    "remove",
    "pretty",
    "much",
    "remove",
    "call",
    "going",
    "trigger",
    "event",
    "going",
    "call",
    "remove",
    "thing",
    "updating",
    "store",
    "going",
    "trigger",
    "event",
    "finally",
    "updating",
    "store",
    "trigger",
    "event",
    "stand",
    "right",
    "going",
    "anything",
    "actually",
    "dispatched",
    "sort",
    "event",
    "since",
    "consolidated",
    "everything",
    "save",
    "state",
    "method",
    "know",
    "place",
    "entire",
    "class",
    "state",
    "actually",
    "updated",
    "come",
    "set",
    "item",
    "call",
    "local",
    "storage",
    "call",
    "represents",
    "store",
    "extends",
    "event",
    "emitter",
    "properties",
    "available",
    "dispatch",
    "event",
    "pass",
    "new",
    "event",
    "event",
    "right",
    "let",
    "go",
    "reference",
    "let",
    "type",
    "mdn",
    "event",
    "event",
    "interface",
    "represents",
    "event",
    "takes",
    "place",
    "dom",
    "event",
    "triggered",
    "user",
    "action",
    "clicking",
    "mouse",
    "blah",
    "blah",
    "blah",
    "basically",
    "customize",
    "whatever",
    "method",
    "want",
    "let",
    "look",
    "constructor",
    "event",
    "constructor",
    "creates",
    "new",
    "event",
    "object",
    "pass",
    "type",
    "string",
    "name",
    "event",
    "calling",
    "state",
    "change",
    "state",
    "changed",
    "going",
    "dispatch",
    "new",
    "event",
    "therefore",
    "event",
    "listener",
    "state",
    "change",
    "key",
    "going",
    "fired",
    "going",
    "render",
    "view",
    "course",
    "need",
    "keep",
    "event",
    "listener",
    "going",
    "fired",
    "two",
    "separate",
    "events",
    "one",
    "current",
    "tab",
    "state",
    "changes",
    "different",
    "tab",
    "state",
    "changes",
    "finally",
    "one",
    "first",
    "load",
    "document",
    "let",
    "save",
    "see",
    "things",
    "working",
    "correctly",
    "refresh",
    "looks",
    "like",
    "got",
    "problem",
    "music",
    "know",
    "happened",
    "looks",
    "like",
    "live",
    "server",
    "timed",
    "something",
    "let",
    "refresh",
    "page",
    "reset",
    "game",
    "see",
    "actions",
    "clicking",
    "page",
    "clicking",
    "actions",
    "player",
    "one",
    "wins",
    "play",
    "resets",
    "get",
    "scoreboard",
    "update",
    "let",
    "keep",
    "playing",
    "player",
    "one",
    "wins",
    "reset",
    "game",
    "reset",
    "round",
    "click",
    "see",
    "populated",
    "tab",
    "actually",
    "says",
    "must",
    "call",
    "super",
    "constructor",
    "using",
    "derived",
    "class",
    "constructor",
    "let",
    "see",
    "okay",
    "think",
    "might",
    "old",
    "needed",
    "refresh",
    "yeah",
    "okay",
    "old",
    "live",
    "server",
    "cut",
    "things",
    "kept",
    "sync",
    "play",
    "multiple",
    "tabs",
    "let",
    "win",
    "game",
    "tab",
    "player",
    "2",
    "wins",
    "see",
    "tab",
    "message",
    "reset",
    "reset",
    "well",
    "point",
    "everything",
    "pretty",
    "much",
    "complete",
    "um",
    "one",
    "helper",
    "method",
    "refactor",
    "make",
    "things",
    "little",
    "performant",
    "going",
    "plug",
    "kind",
    "study",
    "time",
    "let",
    "go",
    "ahead",
    "look",
    "view",
    "going",
    "back",
    "view",
    "bottom",
    "going",
    "add",
    "something",
    "called",
    "delegate",
    "pattern",
    "come",
    "kind",
    "pattern",
    "working",
    "dom",
    "purpose",
    "helper",
    "method",
    "looping",
    "squares",
    "um",
    "specifically",
    "right",
    "binding",
    "event",
    "listener",
    "every",
    "single",
    "square",
    "element",
    "results",
    "lot",
    "event",
    "listeners",
    "little",
    "bit",
    "performant",
    "efficient",
    "register",
    "event",
    "listener",
    "parent",
    "element",
    "kind",
    "match",
    "match",
    "child",
    "element",
    "clicked",
    "event",
    "figure",
    "square",
    "dealing",
    "look",
    "see",
    "entire",
    "grid",
    "squares",
    "would",
    "nice",
    "could",
    "register",
    "event",
    "listener",
    "grid",
    "basically",
    "figure",
    "element",
    "clicked",
    "within",
    "um",
    "based",
    "know",
    "helper",
    "method",
    "go",
    "back",
    "view",
    "instead",
    "dot",
    "squares",
    "call",
    "dot",
    "delegate",
    "element",
    "pass",
    "going",
    "dot",
    "dollar",
    "sign",
    "dot",
    "grid",
    "let",
    "see",
    "selected",
    "looks",
    "like",
    "say",
    "dot",
    "dollar",
    "sign",
    "dot",
    "grid",
    "select",
    "data",
    "id",
    "grid",
    "let",
    "make",
    "sure",
    "add",
    "right",
    "adding",
    "event",
    "listener",
    "parent",
    "div",
    "selector",
    "looking",
    "going",
    "class",
    "called",
    "square",
    "data",
    "id",
    "called",
    "square",
    "little",
    "bit",
    "stable",
    "use",
    "grab",
    "example",
    "pass",
    "square",
    "event",
    "listening",
    "click",
    "event",
    "handler",
    "going",
    "handled",
    "controller",
    "instead",
    "looping",
    "adding",
    "event",
    "listener",
    "going",
    "delegate",
    "method",
    "believe",
    "work",
    "us",
    "let",
    "go",
    "back",
    "get",
    "sense",
    "passed",
    "console",
    "log",
    "square",
    "click",
    "going",
    "give",
    "us",
    "div",
    "id",
    "equal",
    "square",
    "clicked",
    "clicking",
    "everything",
    "works",
    "little",
    "refactor",
    "made",
    "things",
    "little",
    "bit",
    "performant",
    "using",
    "kind",
    "pattern",
    "see",
    "quite",
    "often",
    "kind",
    "main",
    "reason",
    "wanted",
    "expose",
    "see",
    "wild",
    "good",
    "know",
    "kind",
    "trying",
    "achieve",
    "right",
    "got",
    "game",
    "working",
    "importantly",
    "learned",
    "lot",
    "along",
    "way",
    "looking",
    "next",
    "steps",
    "um",
    "kind",
    "continue",
    "connecting",
    "dots",
    "going",
    "creating",
    "couple",
    "videos",
    "kind",
    "play",
    "along",
    "original",
    "build",
    "put",
    "work",
    "get",
    "built",
    "promised",
    "would",
    "end",
    "video",
    "refactor",
    "typescript",
    "pretty",
    "popular",
    "superset",
    "javascript",
    "lot",
    "employers",
    "looking",
    "moment",
    "early",
    "2023",
    "realized",
    "kind",
    "diverging",
    "concept",
    "worked",
    "thought",
    "deserved",
    "standalone",
    "video",
    "link",
    "description",
    "video",
    "actually",
    "refactor",
    "react",
    "take",
    "vanilla",
    "game",
    "make",
    "react",
    "app",
    "last",
    "video",
    "hoping",
    "thing",
    "take",
    "vanilla",
    "react",
    "app",
    "make",
    "typescript",
    "made",
    "video",
    "refactored",
    "subscribers",
    "code",
    "worked",
    "game",
    "built",
    "vanilla",
    "javascript",
    "took",
    "us",
    "quite",
    "went",
    "lot",
    "uh",
    "different",
    "concepts",
    "patterns",
    "build",
    "time",
    "refactor",
    "typescript",
    "question",
    "point",
    "using",
    "typescript",
    "first",
    "place",
    "video",
    "going",
    "refactor",
    "take",
    "vanilla",
    "javascript",
    "game",
    "refactor",
    "use",
    "typescript",
    "along",
    "way",
    "going",
    "explain",
    "point",
    "typescript",
    "helpful",
    "many",
    "employers",
    "look",
    "skill",
    "developers",
    "let",
    "start",
    "saying",
    "video",
    "specifically",
    "geared",
    "people",
    "either",
    "used",
    "typescript",
    "trying",
    "understand",
    "hype",
    "beginner",
    "developer",
    "looking",
    "land",
    "job",
    "trying",
    "understand",
    "path",
    "getting",
    "job",
    "looks",
    "like",
    "assure",
    "many",
    "companies",
    "using",
    "typescript",
    "today",
    "write",
    "job",
    "awesome",
    "thing",
    "learn",
    "use",
    "correctly",
    "said",
    "going",
    "jump",
    "video",
    "recommend",
    "want",
    "video",
    "probably",
    "watch",
    "original",
    "build",
    "like",
    "said",
    "built",
    "refactored",
    "subscriber",
    "code",
    "built",
    "game",
    "took",
    "several",
    "hours",
    "know",
    "bit",
    "pain",
    "go",
    "going",
    "much",
    "clearer",
    "video",
    "background",
    "understand",
    "steps",
    "took",
    "get",
    "least",
    "sure",
    "go",
    "github",
    "repository",
    "linked",
    "video",
    "description",
    "um",
    "let",
    "show",
    "one",
    "talking",
    "um",
    "let",
    "go",
    "nope",
    "right",
    "one",
    "subscriber",
    "refactor",
    "least",
    "need",
    "go",
    "open",
    "vanilla",
    "refactor",
    "read",
    "code",
    "okay",
    "second",
    "branch",
    "called",
    "typescript",
    "final",
    "version",
    "video",
    "right",
    "going",
    "head",
    "towards",
    "right",
    "going",
    "start",
    "vanilla",
    "javascript",
    "without",
    "ado",
    "let",
    "jump",
    "get",
    "refactored",
    "typescript",
    "right",
    "first",
    "thing",
    "going",
    "copy",
    "entire",
    "folder",
    "um",
    "let",
    "see",
    "paste",
    "right",
    "going",
    "call",
    "uh",
    "typescript",
    "actually",
    "let",
    "say",
    "live",
    "ts",
    "refactor",
    "okay",
    "forget",
    "one",
    "second",
    "get",
    "important",
    "refactor",
    "git",
    "ignore",
    "overview",
    "got",
    "file",
    "got",
    "styles",
    "script",
    "connects",
    "app",
    "store",
    "views",
    "mvc",
    "pattern",
    "talked",
    "prior",
    "video",
    "linked",
    "video",
    "description",
    "css",
    "file",
    "nothing",
    "crazy",
    "going",
    "like",
    "said",
    "need",
    "familiar",
    "application",
    "going",
    "explain",
    "uh",
    "detail",
    "question",
    "want",
    "move",
    "towards",
    "typescript",
    "code",
    "base",
    "got",
    "vanilla",
    "js",
    "code",
    "base",
    "start",
    "go",
    "migrating",
    "dealing",
    "large",
    "vanilla",
    "javascript",
    "code",
    "base",
    "video",
    "teach",
    "migrate",
    "video",
    "basically",
    "going",
    "walk",
    "simple",
    "steps",
    "initial",
    "setup",
    "typescript",
    "app",
    "first",
    "thing",
    "need",
    "understand",
    "writing",
    "typescript",
    "need",
    "developer",
    "dependencies",
    "talking",
    "like",
    "notice",
    "original",
    "build",
    "package",
    "json",
    "node",
    "modules",
    "anything",
    "like",
    "need",
    "write",
    "uh",
    "vanilla",
    "javascript",
    "es6",
    "syntax",
    "run",
    "directly",
    "browser",
    "developer",
    "dependencies",
    "build",
    "steps",
    "transpiling",
    "stuff",
    "biggest",
    "thing",
    "need",
    "understand",
    "start",
    "need",
    "dependencies",
    "dependency",
    "need",
    "typescript",
    "um",
    "well",
    "typescript",
    "compiler",
    "honest",
    "set",
    "uh",
    "blank",
    "typescript",
    "projects",
    "scratch",
    "every",
    "day",
    "common",
    "thing",
    "get",
    "stuff",
    "set",
    "really",
    "think",
    "going",
    "imagine",
    "know",
    "starting",
    "scratch",
    "trying",
    "figure",
    "get",
    "started",
    "going",
    "use",
    "documentation",
    "get",
    "let",
    "go",
    "typescript",
    "documentation",
    "first",
    "place",
    "would",
    "obviously",
    "go",
    "figure",
    "get",
    "started",
    "handbook",
    "reference",
    "going",
    "come",
    "kind",
    "well",
    "things",
    "get",
    "started",
    "want",
    "start",
    "let",
    "go",
    "ahead",
    "look",
    "maybe",
    "typescript",
    "tooling",
    "five",
    "minutes",
    "looks",
    "like",
    "good",
    "starting",
    "place",
    "look",
    "page",
    "going",
    "tell",
    "us",
    "get",
    "started",
    "install",
    "typescript",
    "two",
    "main",
    "ways",
    "npm",
    "yarn",
    "pnpm",
    "whatever",
    "using",
    "installing",
    "visual",
    "studio",
    "plugins",
    "believe",
    "talking",
    "visual",
    "studio",
    "full",
    "ide",
    "necessarily",
    "visual",
    "studio",
    "code",
    "think",
    "big",
    "difference",
    "two",
    "get",
    "though",
    "says",
    "install",
    "like",
    "want",
    "find",
    "vs",
    "code",
    "typescript",
    "let",
    "see",
    "pairs",
    "visual",
    "studio",
    "code",
    "using",
    "says",
    "know",
    "typescript",
    "superset",
    "javascript",
    "blah",
    "blah",
    "says",
    "comes",
    "language",
    "support",
    "come",
    "tsc",
    "typescript",
    "compiler",
    "zooming",
    "second",
    "remember",
    "typescript",
    "superset",
    "javascript",
    "natively",
    "run",
    "browser",
    "words",
    "build",
    "step",
    "um",
    "necessarily",
    "build",
    "step",
    "compile",
    "step",
    "transpile",
    "typescript",
    "syntax",
    "plain",
    "javascript",
    "compiled",
    "plain",
    "javascript",
    "run",
    "browser",
    "kind",
    "goal",
    "need",
    "typescript",
    "compiler",
    "tsc",
    "telling",
    "us",
    "thing",
    "go",
    "back",
    "visual",
    "studio",
    "code",
    "using",
    "yarn",
    "package",
    "manager",
    "also",
    "use",
    "npm",
    "say",
    "yarn",
    "global",
    "add",
    "npm",
    "g",
    "npm",
    "install",
    "dash",
    "g",
    "going",
    "add",
    "typescript",
    "already",
    "installed",
    "install",
    "latest",
    "version",
    "compiler",
    "ts",
    "server",
    "well",
    "visual",
    "studio",
    "code",
    "believe",
    "comes",
    "server",
    "hit",
    "command",
    "p",
    "hit",
    "little",
    "carrot",
    "type",
    "typescript",
    "let",
    "see",
    "uh",
    "going",
    "show",
    "quite",
    "yet",
    "typescript",
    "file",
    "open",
    "let",
    "try",
    "something",
    "okay",
    "created",
    "ts",
    "file",
    "added",
    "basic",
    "type",
    "fill",
    "something",
    "see",
    "bottom",
    "right",
    "vs",
    "code",
    "detected",
    "using",
    "typescript",
    "kind",
    "kicked",
    "ts",
    "server",
    "believe",
    "works",
    "uh",
    "leave",
    "comment",
    "wrong",
    "hit",
    "command",
    "p",
    "type",
    "little",
    "carrot",
    "see",
    "search",
    "typescript",
    "restart",
    "ts",
    "server",
    "reload",
    "project",
    "know",
    "background",
    "typescript",
    "vs",
    "code",
    "working",
    "actively",
    "looking",
    "code",
    "recognizing",
    "different",
    "types",
    "added",
    "let",
    "go",
    "back",
    "documentation",
    "says",
    "building",
    "first",
    "typescript",
    "file",
    "giving",
    "basic",
    "typescript",
    "saying",
    "compile",
    "passing",
    "file",
    "name",
    "typescript",
    "compiler",
    "think",
    "goes",
    "like",
    "basic",
    "introduction",
    "typescript",
    "tutorial",
    "going",
    "necessarily",
    "introduction",
    "typescript",
    "like",
    "would",
    "need",
    "typescript",
    "solve",
    "light",
    "introduction",
    "going",
    "really",
    "get",
    "meat",
    "typescript",
    "let",
    "go",
    "back",
    "clear",
    "terminal",
    "let",
    "define",
    "variable",
    "equal",
    "20",
    "um",
    "let",
    "give",
    "custom",
    "object",
    "type",
    "okay",
    "say",
    "variable",
    "number",
    "another",
    "variable",
    "string",
    "assign",
    "type",
    "object",
    "typescript",
    "going",
    "kick",
    "going",
    "start",
    "telling",
    "um",
    "know",
    "missed",
    "certain",
    "typings",
    "got",
    "red",
    "squigglies",
    "vs",
    "code",
    "detected",
    "typing",
    "object",
    "custom",
    "object",
    "type",
    "two",
    "properties",
    "need",
    "actually",
    "fill",
    "matching",
    "types",
    "put",
    "like",
    "finish",
    "object",
    "matching",
    "type",
    "assigned",
    "tried",
    "add",
    "extra",
    "prop",
    "going",
    "yell",
    "us",
    "exist",
    "type",
    "gave",
    "anyways",
    "point",
    "give",
    "bare",
    "bones",
    "introduction",
    "typescript",
    "see",
    "kind",
    "plays",
    "benefit",
    "us",
    "refactor",
    "right",
    "going",
    "compile",
    "got",
    "tsc",
    "typescript",
    "compiler",
    "installed",
    "globally",
    "let",
    "go",
    "ahead",
    "check",
    "pass",
    "version",
    "gives",
    "us",
    "let",
    "go",
    "call",
    "help",
    "basically",
    "give",
    "options",
    "pretty",
    "overwhelming",
    "start",
    "see",
    "run",
    "tsc",
    "compiles",
    "current",
    "project",
    "let",
    "pass",
    "file",
    "tsc",
    "uh",
    "app",
    "sorry",
    "js",
    "need",
    "get",
    "live",
    "ts",
    "refactor",
    "first",
    "say",
    "tsc",
    "js",
    "see",
    "ran",
    "command",
    "sitting",
    "compiled",
    "version",
    "let",
    "open",
    "two",
    "files",
    "next",
    "going",
    "see",
    "typescript",
    "action",
    "left",
    "dot",
    "ts",
    "file",
    "writing",
    "source",
    "code",
    "able",
    "use",
    "custom",
    "typings",
    "assigning",
    "typings",
    "variable",
    "looks",
    "like",
    "something",
    "going",
    "wrong",
    "looks",
    "like",
    "two",
    "files",
    "actually",
    "conflicting",
    "let",
    "uh",
    "name",
    "let",
    "put",
    "something",
    "end",
    "solve",
    "error",
    "us",
    "know",
    "directory",
    "vs",
    "code",
    "pretty",
    "smart",
    "detecting",
    "two",
    "variables",
    "name",
    "going",
    "happen",
    "final",
    "code",
    "going",
    "configure",
    "know",
    "happening",
    "anyways",
    "point",
    "got",
    "type",
    "actually",
    "valid",
    "javascript",
    "code",
    "ca",
    "run",
    "browser",
    "javascript",
    "runtime",
    "typescript",
    "compiler",
    "removes",
    "type",
    "removes",
    "type",
    "annotation",
    "right",
    "gets",
    "us",
    "vanilla",
    "javascript",
    "object",
    "actually",
    "run",
    "browser",
    "really",
    "two",
    "questions",
    "come",
    "number",
    "one",
    "would",
    "want",
    "purpose",
    "adding",
    "types",
    "number",
    "two",
    "get",
    "control",
    "compiles",
    "going",
    "different",
    "um",
    "options",
    "use",
    "make",
    "transformation",
    "happen",
    "furthermore",
    "know",
    "want",
    "going",
    "directory",
    "obviously",
    "screws",
    "things",
    "know",
    "variable",
    "declarations",
    "happening",
    "twice",
    "forth",
    "configuration",
    "make",
    "better",
    "us",
    "let",
    "go",
    "back",
    "excalibur",
    "come",
    "say",
    "benefits",
    "typescript",
    "could",
    "definitely",
    "go",
    "laundry",
    "list",
    "things",
    "typescript",
    "helps",
    "know",
    "plenty",
    "people",
    "go",
    "going",
    "keep",
    "simple",
    "give",
    "one",
    "two",
    "reasons",
    "beneficial",
    "code",
    "base",
    "first",
    "one",
    "um",
    "code",
    "checking",
    "general",
    "words",
    "going",
    "using",
    "visual",
    "studio",
    "code",
    "using",
    "typescript",
    "visual",
    "studio",
    "code",
    "basically",
    "walking",
    "code",
    "base",
    "making",
    "sure",
    "everything",
    "talks",
    "appropriately",
    "see",
    "action",
    "start",
    "refactor",
    "go",
    "back",
    "original",
    "application",
    "let",
    "delete",
    "file",
    "um",
    "go",
    "back",
    "original",
    "project",
    "seen",
    "already",
    "watch",
    "prior",
    "video",
    "least",
    "make",
    "sure",
    "skimmed",
    "code",
    "know",
    "go",
    "um",
    "let",
    "try",
    "find",
    "good",
    "example",
    "good",
    "one",
    "calling",
    "view",
    "dot",
    "render",
    "passing",
    "state",
    "application",
    "state",
    "objects",
    "certain",
    "type",
    "see",
    "visual",
    "studio",
    "code",
    "giving",
    "know",
    "suggestions",
    "types",
    "already",
    "even",
    "though",
    "using",
    "typescript",
    "inferring",
    "function",
    "definitions",
    "store",
    "read",
    "functions",
    "see",
    "know",
    "returning",
    "return",
    "type",
    "kind",
    "infers",
    "okay",
    "properties",
    "object",
    "returned",
    "forth",
    "go",
    "back",
    "really",
    "know",
    "type",
    "anything",
    "really",
    "figure",
    "boolean",
    "type",
    "moves",
    "current",
    "player",
    "winner",
    "types",
    "ca",
    "really",
    "figure",
    "plain",
    "vanilla",
    "javascript",
    "difficult",
    "hard",
    "maintain",
    "project",
    "grows",
    "typing",
    "things",
    "um",
    "quite",
    "literally",
    "like",
    "typing",
    "keyboard",
    "passing",
    "variables",
    "around",
    "application",
    "useful",
    "know",
    "passing",
    "something",
    "valid",
    "function",
    "typescript",
    "allows",
    "easily",
    "really",
    "start",
    "see",
    "benefit",
    "start",
    "refactor",
    "second",
    "benefit",
    "personally",
    "found",
    "typescript",
    "refactoring",
    "soon",
    "know",
    "video",
    "since",
    "refactoring",
    "stuff",
    "big",
    "code",
    "base",
    "trying",
    "go",
    "refactor",
    "entire",
    "feature",
    "extremely",
    "difficult",
    "vanilla",
    "javascript",
    "strong",
    "typings",
    "throughout",
    "application",
    "typescript",
    "lot",
    "easier",
    "change",
    "things",
    "know",
    "visual",
    "studio",
    "code",
    "editor",
    "runs",
    "typescript",
    "server",
    "going",
    "able",
    "tell",
    "hey",
    "move",
    "things",
    "around",
    "correctly",
    "passing",
    "know",
    "refactor",
    "going",
    "break",
    "compilation",
    "code",
    "enough",
    "talk",
    "let",
    "get",
    "started",
    "um",
    "first",
    "thing",
    "need",
    "got",
    "typescript",
    "installed",
    "kind",
    "understand",
    "general",
    "concept",
    "going",
    "get",
    "set",
    "specific",
    "application",
    "know",
    "got",
    "installed",
    "globally",
    "use",
    "tsc",
    "know",
    "type",
    "version",
    "binary",
    "installed",
    "computer",
    "globally",
    "always",
    "good",
    "practice",
    "install",
    "developer",
    "dependency",
    "within",
    "project",
    "reason",
    "know",
    "global",
    "version",
    "going",
    "different",
    "developer",
    "computer",
    "collaborating",
    "project",
    "good",
    "pin",
    "typescript",
    "version",
    "application",
    "predictable",
    "builds",
    "compiles",
    "compile",
    "code",
    "plain",
    "javascript",
    "going",
    "type",
    "yarn",
    "init",
    "pass",
    "dash",
    "flag",
    "say",
    "yes",
    "options",
    "get",
    "file",
    "created",
    "package",
    "json",
    "got",
    "live",
    "ts",
    "refactor",
    "blah",
    "blah",
    "first",
    "thing",
    "um",
    "yarn",
    "add",
    "patch",
    "dash",
    "dash",
    "developer",
    "dependency",
    "want",
    "install",
    "typescript",
    "see",
    "dev",
    "dependencies",
    "typescript",
    "developer",
    "dependency",
    "regular",
    "dependency",
    "well",
    "super",
    "important",
    "reason",
    "talked",
    "typescript",
    "going",
    "happen",
    "deploy",
    "application",
    "write",
    "code",
    "typescript",
    "obviously",
    "correct",
    "correct",
    "valid",
    "running",
    "browser",
    "runtime",
    "deploy",
    "application",
    "know",
    "server",
    "like",
    "aws",
    "render",
    "digitalocean",
    "need",
    "first",
    "build",
    "appropriate",
    "runtime",
    "using",
    "probably",
    "going",
    "common",
    "js",
    "es6",
    "point",
    "dev",
    "dependency",
    "express",
    "fact",
    "going",
    "need",
    "actually",
    "run",
    "application",
    "need",
    "build",
    "application",
    "point",
    "run",
    "next",
    "thing",
    "need",
    "initialize",
    "ts",
    "config",
    "file",
    "going",
    "special",
    "file",
    "sits",
    "root",
    "directory",
    "project",
    "tells",
    "compiler",
    "remember",
    "tsc",
    "compiler",
    "want",
    "use",
    "global",
    "version",
    "anymore",
    "case",
    "run",
    "yarn",
    "tsc",
    "grab",
    "specifically",
    "project",
    "run",
    "going",
    "try",
    "compile",
    "stuff",
    "find",
    "typescript",
    "files",
    "actually",
    "compile",
    "anyways",
    "need",
    "set",
    "ts",
    "config",
    "tell",
    "compile",
    "things",
    "say",
    "yarn",
    "tsc",
    "think",
    "init",
    "right",
    "thing",
    "let",
    "go",
    "help",
    "let",
    "read",
    "options",
    "okay",
    "start",
    "options",
    "see",
    "tsc",
    "dash",
    "dash",
    "init",
    "creates",
    "recommended",
    "settings",
    "working",
    "directory",
    "want",
    "run",
    "yarn",
    "tsc",
    "dash",
    "dash",
    "init",
    "see",
    "created",
    "nuke",
    "open",
    "options",
    "gave",
    "default",
    "let",
    "go",
    "read",
    "right",
    "bat",
    "see",
    "quite",
    "lot",
    "going",
    "default",
    "going",
    "everything",
    "commented",
    "going",
    "get",
    "rid",
    "kind",
    "different",
    "options",
    "go",
    "link",
    "view",
    "reference",
    "ts",
    "config",
    "basically",
    "takes",
    "different",
    "compiler",
    "options",
    "click",
    "links",
    "figure",
    "options",
    "going",
    "relevant",
    "starting",
    "especially",
    "beginner",
    "options",
    "control",
    "know",
    "developer",
    "experience",
    "building",
    "typescript",
    "code",
    "base",
    "also",
    "course",
    "actually",
    "builds",
    "compiles",
    "typescript",
    "javascript",
    "let",
    "go",
    "ahead",
    "get",
    "rid",
    "comments",
    "see",
    "gave",
    "us",
    "defaults",
    "going",
    "get",
    "go",
    "kind",
    "least",
    "important",
    "starting",
    "bottom",
    "skip",
    "lib",
    "check",
    "tells",
    "uh",
    "typescript",
    "ignore",
    "kind",
    "node",
    "modules",
    "dot",
    "dot",
    "ts",
    "files",
    "um",
    "super",
    "relevant",
    "strict",
    "true",
    "always",
    "going",
    "good",
    "thing",
    "turn",
    "go",
    "code",
    "write",
    "typescript",
    "intellisense",
    "provided",
    "visual",
    "studio",
    "code",
    "make",
    "sure",
    "everything",
    "checks",
    "types",
    "consistent",
    "always",
    "good",
    "two",
    "options",
    "related",
    "maintenance",
    "code",
    "base",
    "forces",
    "know",
    "file",
    "naming",
    "consistency",
    "allows",
    "um",
    "interoperability",
    "common",
    "js",
    "modules",
    "es6",
    "modules",
    "actually",
    "wrote",
    "whole",
    "post",
    "go",
    "site",
    "scripts",
    "versus",
    "common",
    "js",
    "versus",
    "umd",
    "amd",
    "es6",
    "modules",
    "mouthful",
    "kind",
    "explains",
    "talking",
    "importantly",
    "target",
    "module",
    "options",
    "telling",
    "typescript",
    "compiler",
    "kind",
    "code",
    "needs",
    "output",
    "know",
    "code",
    "actually",
    "run",
    "within",
    "browser",
    "goal",
    "get",
    "typescript",
    "files",
    "run",
    "regular",
    "javascript",
    "files",
    "write",
    "code",
    "typescript",
    "compiler",
    "deals",
    "getting",
    "place",
    "run",
    "browser",
    "let",
    "go",
    "reference",
    "um",
    "go",
    "reference",
    "guide",
    "start",
    "first",
    "one",
    "target",
    "believe",
    "going",
    "um",
    "let",
    "see",
    "orient",
    "compiler",
    "options",
    "uh",
    "field",
    "notice",
    "defined",
    "compiler",
    "options",
    "language",
    "environment",
    "section",
    "find",
    "target",
    "right",
    "let",
    "click",
    "scroll",
    "says",
    "modern",
    "browsers",
    "support",
    "es6",
    "features",
    "talking",
    "wrote",
    "original",
    "project",
    "es6",
    "good",
    "choice",
    "might",
    "choose",
    "set",
    "lower",
    "target",
    "code",
    "deployed",
    "older",
    "environments",
    "higher",
    "target",
    "code",
    "guaranteed",
    "run",
    "newer",
    "ones",
    "words",
    "target",
    "represents",
    "end",
    "state",
    "code",
    "going",
    "compiled",
    "going",
    "target",
    "es6",
    "going",
    "mirror",
    "original",
    "refactor",
    "vino",
    "vanilla",
    "js",
    "one",
    "um",
    "see",
    "already",
    "got",
    "es2016",
    "um",
    "pass",
    "couple",
    "different",
    "options",
    "think",
    "yeah",
    "gives",
    "options",
    "right",
    "um",
    "es6",
    "es2015",
    "yes",
    "2016",
    "um",
    "way",
    "es",
    "next",
    "let",
    "grab",
    "es6",
    "know",
    "available",
    "browsers",
    "um",
    "sure",
    "es",
    "2016",
    "say",
    "es6",
    "good",
    "choice",
    "kind",
    "mismatching",
    "defaults",
    "anyways",
    "code",
    "compiles",
    "next",
    "one",
    "module",
    "let",
    "go",
    "look",
    "go",
    "back",
    "top",
    "see",
    "modules",
    "find",
    "module",
    "property",
    "sets",
    "module",
    "system",
    "program",
    "um",
    "see",
    "modules",
    "reference",
    "likely",
    "want",
    "common",
    "js",
    "node",
    "projects",
    "backtrack",
    "going",
    "back",
    "post",
    "wrote",
    "scripts",
    "common",
    "js",
    "es6",
    "modules",
    "really",
    "talks",
    "different",
    "module",
    "systems",
    "basically",
    "look",
    "let",
    "sample",
    "file",
    "basically",
    "look",
    "know",
    "syntax",
    "import",
    "something",
    "uh",
    "library",
    "would",
    "consider",
    "es6",
    "module",
    "syntax",
    "something",
    "like",
    "const",
    "something",
    "equals",
    "require",
    "lib",
    "going",
    "common",
    "js",
    "syntax",
    "require",
    "syntax",
    "also",
    "module",
    "dot",
    "exports",
    "bottom",
    "file",
    "going",
    "common",
    "js",
    "syntax",
    "es6",
    "import",
    "something",
    "web",
    "come",
    "export",
    "um",
    "know",
    "object",
    "export",
    "default",
    "export",
    "things",
    "file",
    "uh",
    "one",
    "one",
    "module",
    "talking",
    "see",
    "defaults",
    "common",
    "js",
    "little",
    "bit",
    "mismatch",
    "says",
    "default",
    "common",
    "js",
    "target",
    "es3",
    "es5",
    "es6",
    "otherwise",
    "really",
    "sure",
    "given",
    "documentation",
    "fact",
    "latest",
    "version",
    "typescript",
    "defaulted",
    "really",
    "want",
    "es6",
    "want",
    "deal",
    "nice",
    "module",
    "syntax",
    "um",
    "es6",
    "comes",
    "going",
    "list",
    "es",
    "module",
    "interoperability",
    "said",
    "ability",
    "basically",
    "combine",
    "syntax",
    "went",
    "files",
    "multiple",
    "module",
    "systems",
    "able",
    "compile",
    "together",
    "going",
    "important",
    "especially",
    "certain",
    "know",
    "libraries",
    "still",
    "use",
    "old",
    "common",
    "js",
    "module",
    "systems",
    "newer",
    "ones",
    "know",
    "use",
    "es6",
    "modules",
    "support",
    "common",
    "js",
    "interoperability",
    "really",
    "nice",
    "especially",
    "larger",
    "projects",
    "point",
    "gone",
    "read",
    "documentation",
    "questions",
    "properties",
    "want",
    "build",
    "sample",
    "project",
    "get",
    "bearings",
    "let",
    "make",
    "folder",
    "called",
    "test",
    "ts",
    "going",
    "test",
    "ts",
    "file",
    "something",
    "work",
    "file",
    "going",
    "know",
    "define",
    "sample",
    "type",
    "sample",
    "type",
    "going",
    "name",
    "string",
    "age",
    "number",
    "say",
    "let",
    "actually",
    "call",
    "person",
    "type",
    "say",
    "const",
    "person",
    "variable",
    "person",
    "type",
    "give",
    "string",
    "bob",
    "age",
    "something",
    "like",
    "basic",
    "ts",
    "file",
    "let",
    "save",
    "ts",
    "config",
    "able",
    "compile",
    "things",
    "first",
    "question",
    "well",
    "know",
    "look",
    "know",
    "want",
    "compile",
    "file",
    "well",
    "let",
    "go",
    "ahead",
    "try",
    "yarn",
    "tsc",
    "run",
    "says",
    "done",
    "seconds",
    "obviously",
    "found",
    "correct",
    "file",
    "compile",
    "question",
    "actually",
    "know",
    "well",
    "let",
    "go",
    "documentation",
    "look",
    "outside",
    "compiler",
    "options",
    "top",
    "level",
    "options",
    "let",
    "go",
    "include",
    "array",
    "specifies",
    "array",
    "file",
    "names",
    "patterns",
    "include",
    "program",
    "default",
    "array",
    "files",
    "specified",
    "otherwise",
    "see",
    "code",
    "base",
    "ran",
    "tsc",
    "compiler",
    "automatically",
    "looked",
    "dot",
    "ts",
    "file",
    "entire",
    "folder",
    "compiled",
    "got",
    "default",
    "glob",
    "including",
    "everything",
    "given",
    "behavior",
    "think",
    "fine",
    "um",
    "problem",
    "compiling",
    "ts",
    "files",
    "directory",
    "written",
    "starts",
    "get",
    "really",
    "messy",
    "furthermore",
    "really",
    "want",
    "output",
    "build",
    "folder",
    "lot",
    "subject",
    "general",
    "like",
    "uh",
    "creating",
    "bundle",
    "involves",
    "things",
    "like",
    "webpack",
    "parcel",
    "whatever",
    "whatever",
    "lot",
    "specific",
    "subject",
    "could",
    "talk",
    "day",
    "know",
    "things",
    "compiled",
    "stored",
    "kind",
    "stuff",
    "gets",
    "bundling",
    "code",
    "splitting",
    "know",
    "build",
    "tools",
    "like",
    "webpack",
    "roll",
    "parcel",
    "whatever",
    "going",
    "get",
    "need",
    "simple",
    "project",
    "goal",
    "basically",
    "take",
    "ts",
    "files",
    "put",
    "one",
    "spot",
    "imported",
    "run",
    "like",
    "vanilla",
    "project",
    "would",
    "option",
    "specify",
    "let",
    "see",
    "looking",
    "mitt",
    "probably",
    "want",
    "look",
    "yes",
    "directory",
    "specified",
    "dot",
    "js",
    "files",
    "emitted",
    "directory",
    "directory",
    "structure",
    "original",
    "source",
    "files",
    "preserved",
    "see",
    "root",
    "directory",
    "computed",
    "root",
    "intended",
    "probably",
    "going",
    "apply",
    "us",
    "um",
    "see",
    "gives",
    "example",
    "outputs",
    "dist",
    "directory",
    "distribution",
    "common",
    "directory",
    "output",
    "compiled",
    "files",
    "going",
    "come",
    "back",
    "compiler",
    "options",
    "give",
    "directory",
    "see",
    "vs",
    "code",
    "knows",
    "options",
    "gives",
    "autocomplete",
    "specify",
    "directory",
    "gives",
    "us",
    "documentation",
    "useful",
    "going",
    "say",
    "want",
    "put",
    "dist",
    "folder",
    "getting",
    "errors",
    "need",
    "comma",
    "save",
    "rerun",
    "compilation",
    "going",
    "output",
    "everything",
    "dist",
    "file",
    "see",
    "use",
    "strict",
    "put",
    "got",
    "person",
    "compiled",
    "notice",
    "earlier",
    "video",
    "different",
    "syntax",
    "saw",
    "earlier",
    "earlier",
    "saw",
    "var",
    "use",
    "strict",
    "going",
    "top",
    "ts",
    "config",
    "targets",
    "modules",
    "specifying",
    "wanted",
    "things",
    "output",
    "anyways",
    "basics",
    "compiling",
    "typescript",
    "project",
    "next",
    "order",
    "business",
    "look",
    "js",
    "directory",
    "original",
    "refactor",
    "convert",
    "files",
    "typescript",
    "leave",
    "test",
    "ts",
    "folder",
    "us",
    "let",
    "get",
    "rid",
    "dot",
    "js",
    "compiled",
    "file",
    "going",
    "dist",
    "um",
    "one",
    "thing",
    "would",
    "want",
    "get",
    "far",
    "add",
    "git",
    "ignore",
    "working",
    "git",
    "put",
    "dist",
    "directory",
    "well",
    "node",
    "modules",
    "added",
    "neither",
    "need",
    "uploaded",
    "source",
    "control",
    "node",
    "modules",
    "obviously",
    "installed",
    "yarn",
    "dist",
    "directory",
    "build",
    "going",
    "created",
    "yarn",
    "tsc",
    "let",
    "close",
    "ts",
    "config",
    "let",
    "start",
    "file",
    "working",
    "typescript",
    "rename",
    "dot",
    "ts",
    "vs",
    "code",
    "going",
    "automatically",
    "recognize",
    "typescript",
    "file",
    "going",
    "start",
    "underlining",
    "things",
    "going",
    "yell",
    "us",
    "sorts",
    "stuff",
    "nothing",
    "typed",
    "strategies",
    "use",
    "migrate",
    "js",
    "project",
    "typescript",
    "case",
    "things",
    "small",
    "enough",
    "best",
    "strategy",
    "rename",
    "ts",
    "dealing",
    "typescript",
    "across",
    "board",
    "go",
    "try",
    "compile",
    "right",
    "going",
    "throw",
    "sorts",
    "errors",
    "reason",
    "kind",
    "whole",
    "purpose",
    "typescript",
    "going",
    "check",
    "types",
    "make",
    "sure",
    "compatible",
    "across",
    "files",
    "imports",
    "exports",
    "know",
    "function",
    "calls",
    "parameters",
    "stuff",
    "good",
    "thing",
    "want",
    "first",
    "start",
    "everything",
    "red",
    "squiggly",
    "underlines",
    "typescript",
    "really",
    "mad",
    "us",
    "fun",
    "going",
    "work",
    "um",
    "intimidating",
    "think",
    "um",
    "get",
    "thing",
    "worked",
    "shortly",
    "reminder",
    "um",
    "current",
    "project",
    "longer",
    "going",
    "work",
    "importing",
    "exist",
    "longer",
    "tried",
    "replace",
    "going",
    "work",
    "typescript",
    "valid",
    "js",
    "runtimes",
    "really",
    "need",
    "adjust",
    "going",
    "right",
    "bat",
    "forget",
    "everything",
    "compiled",
    "dist",
    "directory",
    "need",
    "specify",
    "instead",
    "js",
    "going",
    "look",
    "dist",
    "directory",
    "import",
    "thing",
    "original",
    "project",
    "going",
    "looking",
    "different",
    "directory",
    "instead",
    "source",
    "code",
    "know",
    "prior",
    "refactor",
    "able",
    "run",
    "browser",
    "use",
    "compiled",
    "code",
    "see",
    "dist",
    "going",
    "maintain",
    "folder",
    "structure",
    "actually",
    "need",
    "say",
    "dist",
    "slash",
    "js",
    "slash",
    "see",
    "know",
    "compiled",
    "um",
    "bunch",
    "errors",
    "still",
    "compiled",
    "could",
    "probably",
    "get",
    "work",
    "actually",
    "let",
    "see",
    "real",
    "quick",
    "way",
    "already",
    "live",
    "server",
    "running",
    "video",
    "port",
    "5500",
    "looking",
    "dist",
    "js",
    "let",
    "go",
    "vanilla",
    "refactor",
    "instead",
    "go",
    "live",
    "ts",
    "let",
    "go",
    "let",
    "go",
    "localhost",
    "localhost",
    "5500",
    "live",
    "ts",
    "refactor",
    "let",
    "see",
    "seems",
    "working",
    "even",
    "though",
    "type",
    "errors",
    "um",
    "still",
    "compiled",
    "javascript",
    "makes",
    "sense",
    "typescript",
    "superset",
    "javascript",
    "typescript",
    "valid",
    "javascript",
    "javascript",
    "valid",
    "typescript",
    "words",
    "went",
    "compile",
    "vanilla",
    "js",
    "files",
    "different",
    "form",
    "still",
    "knew",
    "complaining",
    "types",
    "case",
    "migrating",
    "existing",
    "vanilla",
    "js",
    "project",
    "behavior",
    "actually",
    "good",
    "know",
    "gradually",
    "migrate",
    "code",
    "break",
    "everything",
    "start",
    "options",
    "though",
    "get",
    "final",
    "state",
    "go",
    "documentation",
    "let",
    "close",
    "things",
    "go",
    "back",
    "reference",
    "sort",
    "configuration",
    "property",
    "allows",
    "us",
    "basically",
    "fail",
    "build",
    "errors",
    "ran",
    "yarn",
    "tsc",
    "going",
    "give",
    "us",
    "errors",
    "look",
    "um",
    "going",
    "still",
    "compile",
    "files",
    "output",
    "directory",
    "demonstrate",
    "change",
    "behavior",
    "going",
    "get",
    "rid",
    "test",
    "ts",
    "directory",
    "clouding",
    "anything",
    "going",
    "completely",
    "delete",
    "dist",
    "directory",
    "okay",
    "remember",
    "run",
    "yarn",
    "tsc",
    "going",
    "create",
    "disk",
    "directory",
    "interestingly",
    "enough",
    "deleted",
    "directory",
    "typescript",
    "maintain",
    "js",
    "directory",
    "structure",
    "forget",
    "sure",
    "option",
    "change",
    "forget",
    "let",
    "go",
    "remove",
    "path",
    "go",
    "back",
    "browser",
    "um",
    "let",
    "get",
    "rid",
    "let",
    "refresh",
    "still",
    "play",
    "game",
    "looking",
    "live",
    "ts",
    "refactor",
    "still",
    "working",
    "go",
    "options",
    "reference",
    "options",
    "emit",
    "scrolling",
    "option",
    "called",
    "emit",
    "air",
    "think",
    "um",
    "want",
    "let",
    "scroll",
    "things",
    "okay",
    "let",
    "click",
    "omit",
    "air",
    "says",
    "emit",
    "compiler",
    "output",
    "files",
    "like",
    "javascript",
    "source",
    "code",
    "source",
    "maps",
    "declarations",
    "errors",
    "reported",
    "defaults",
    "false",
    "making",
    "easier",
    "work",
    "typescript",
    "environment",
    "may",
    "want",
    "see",
    "results",
    "changes",
    "code",
    "another",
    "environment",
    "making",
    "sure",
    "errors",
    "resolved",
    "let",
    "take",
    "property",
    "emit",
    "air",
    "open",
    "ts",
    "config",
    "throw",
    "end",
    "emit",
    "air",
    "defaults",
    "false",
    "going",
    "say",
    "true",
    "let",
    "delete",
    "dist",
    "directory",
    "let",
    "try",
    "yarn",
    "tsc",
    "compile",
    "typescript",
    "files",
    "see",
    "even",
    "though",
    "ran",
    "dist",
    "directory",
    "said",
    "errors",
    "emit",
    "know",
    "output",
    "files",
    "really",
    "want",
    "converting",
    "project",
    "want",
    "ability",
    "know",
    "compile",
    "typescript",
    "files",
    "errors",
    "get",
    "build",
    "output",
    "final",
    "state",
    "might",
    "know",
    "converted",
    "project",
    "might",
    "add",
    "back",
    "sort",
    "build",
    "checks",
    "make",
    "sure",
    "know",
    "get",
    "clean",
    "build",
    "deploy",
    "application",
    "everything",
    "set",
    "got",
    "app",
    "working",
    "disk",
    "directory",
    "jump",
    "js",
    "folder",
    "probably",
    "know",
    "best",
    "name",
    "anymore",
    "js",
    "technically",
    "typescript",
    "superset",
    "javascript",
    "somewhat",
    "valid",
    "start",
    "um",
    "think",
    "rather",
    "starting",
    "app",
    "kind",
    "consumes",
    "store",
    "view",
    "let",
    "start",
    "store",
    "um",
    "always",
    "good",
    "define",
    "types",
    "state",
    "beginning",
    "kind",
    "helps",
    "inform",
    "know",
    "rest",
    "files",
    "project",
    "design",
    "general",
    "general",
    "good",
    "place",
    "start",
    "folder",
    "also",
    "going",
    "make",
    "new",
    "file",
    "called",
    "types",
    "dot",
    "ts",
    "going",
    "module",
    "exports",
    "bunch",
    "types",
    "rest",
    "files",
    "going",
    "consume",
    "pass",
    "around",
    "keep",
    "things",
    "clear",
    "heads",
    "also",
    "satisfy",
    "compiler",
    "let",
    "reference",
    "um",
    "final",
    "make",
    "sure",
    "getting",
    "right",
    "types",
    "okay",
    "let",
    "close",
    "types",
    "go",
    "left",
    "put",
    "store",
    "right",
    "first",
    "thing",
    "see",
    "going",
    "aside",
    "red",
    "squigglies",
    "initial",
    "state",
    "um",
    "shape",
    "object",
    "storing",
    "local",
    "storage",
    "see",
    "open",
    "app",
    "inspect",
    "go",
    "storage",
    "local",
    "storage",
    "see",
    "already",
    "played",
    "game",
    "see",
    "updates",
    "every",
    "move",
    "open",
    "see",
    "parsed",
    "value",
    "got",
    "current",
    "game",
    "moves",
    "history",
    "games",
    "current",
    "round",
    "games",
    "go",
    "see",
    "moves",
    "made",
    "different",
    "players",
    "shape",
    "object",
    "storing",
    "state",
    "benefit",
    "typescript",
    "confidence",
    "know",
    "types",
    "passing",
    "around",
    "would",
    "great",
    "idea",
    "define",
    "state",
    "typescript",
    "define",
    "typing",
    "either",
    "type",
    "keyword",
    "interface",
    "keyword",
    "difference",
    "two",
    "discussion",
    "another",
    "day",
    "generally",
    "prefer",
    "types",
    "um",
    "know",
    "people",
    "get",
    "know",
    "heated",
    "discussion",
    "one",
    "better",
    "situation",
    "start",
    "type",
    "going",
    "call",
    "game",
    "state",
    "game",
    "state",
    "arbitrary",
    "name",
    "giving",
    "type",
    "similar",
    "would",
    "know",
    "define",
    "variable",
    "name",
    "type",
    "defined",
    "using",
    "know",
    "basic",
    "object",
    "syntax",
    "going",
    "match",
    "let",
    "copy",
    "shape",
    "get",
    "rid",
    "comment",
    "right",
    "really",
    "valid",
    "type",
    "um",
    "really",
    "complaining",
    "anything",
    "valid",
    "type",
    "let",
    "go",
    "ahead",
    "give",
    "type",
    "let",
    "see",
    "current",
    "game",
    "moves",
    "let",
    "say",
    "right",
    "going",
    "array",
    "going",
    "array",
    "objects",
    "shape",
    "starting",
    "point",
    "need",
    "define",
    "types",
    "right",
    "kind",
    "final",
    "thing",
    "need",
    "get",
    "need",
    "decompose",
    "types",
    "know",
    "smaller",
    "units",
    "pass",
    "around",
    "files",
    "little",
    "bit",
    "easier",
    "first",
    "thing",
    "want",
    "define",
    "player",
    "see",
    "got",
    "squiggly",
    "lines",
    "players",
    "param",
    "argument",
    "passing",
    "class",
    "constructor",
    "open",
    "see",
    "player",
    "array",
    "defined",
    "let",
    "give",
    "type",
    "objects",
    "see",
    "exact",
    "object",
    "shape",
    "give",
    "representation",
    "player",
    "player",
    "going",
    "id",
    "name",
    "icon",
    "class",
    "color",
    "class",
    "actual",
    "values",
    "want",
    "give",
    "type",
    "1",
    "going",
    "number",
    "type",
    "player",
    "one",
    "going",
    "string",
    "type",
    "icon",
    "class",
    "also",
    "string",
    "type",
    "color",
    "class",
    "string",
    "type",
    "defined",
    "player",
    "type",
    "notice",
    "regular",
    "know",
    "primitive",
    "typings",
    "anything",
    "crazy",
    "going",
    "typescript",
    "make",
    "property",
    "optional",
    "adding",
    "little",
    "question",
    "mark",
    "property",
    "guess",
    "sure",
    "call",
    "property",
    "put",
    "question",
    "mark",
    "color",
    "class",
    "would",
    "optional",
    "property",
    "hover",
    "says",
    "either",
    "string",
    "string",
    "undefined",
    "remove",
    "going",
    "string",
    "game",
    "since",
    "configuration",
    "property",
    "want",
    "required",
    "properties",
    "correct",
    "shape",
    "go",
    "back",
    "move",
    "next",
    "type",
    "need",
    "satisfy",
    "anything",
    "got",
    "going",
    "building",
    "block",
    "us",
    "work",
    "first",
    "thing",
    "want",
    "define",
    "current",
    "game",
    "moves",
    "move",
    "game",
    "scroll",
    "player",
    "move",
    "see",
    "pushing",
    "state",
    "property",
    "square",
    "id",
    "player",
    "defined",
    "player",
    "interface",
    "type",
    "square",
    "id",
    "well",
    "going",
    "number",
    "define",
    "move",
    "let",
    "call",
    "move",
    "going",
    "square",
    "id",
    "number",
    "player",
    "basically",
    "type",
    "right",
    "hover",
    "move",
    "see",
    "type",
    "given",
    "take",
    "move",
    "type",
    "replace",
    "type",
    "current",
    "game",
    "moves",
    "move",
    "current",
    "gave",
    "game",
    "moves",
    "array",
    "moves",
    "lines",
    "done",
    "pushing",
    "move",
    "array",
    "current",
    "game",
    "moves",
    "state",
    "figure",
    "going",
    "type",
    "history",
    "object",
    "need",
    "go",
    "store",
    "class",
    "figure",
    "reset",
    "method",
    "pushing",
    "games",
    "history",
    "object",
    "current",
    "round",
    "games",
    "property",
    "type",
    "looking",
    "pushing",
    "object",
    "moves",
    "property",
    "status",
    "property",
    "pretty",
    "clear",
    "moves",
    "represents",
    "moves",
    "going",
    "defined",
    "array",
    "moves",
    "start",
    "going",
    "call",
    "game",
    "game",
    "going",
    "represented",
    "array",
    "moves",
    "status",
    "property",
    "really",
    "know",
    "yet",
    "let",
    "give",
    "type",
    "start",
    "kind",
    "go",
    "look",
    "code",
    "base",
    "define",
    "type",
    "track",
    "backwards",
    "look",
    "status",
    "coming",
    "destructured",
    "property",
    "dot",
    "game",
    "look",
    "dot",
    "game",
    "getter",
    "method",
    "class",
    "return",
    "type",
    "getter",
    "method",
    "stuff",
    "moves",
    "array",
    "current",
    "player",
    "status",
    "object",
    "right",
    "status",
    "trying",
    "define",
    "let",
    "make",
    "one",
    "type",
    "called",
    "game",
    "status",
    "going",
    "object",
    "complete",
    "property",
    "going",
    "boolean",
    "value",
    "value",
    "see",
    "winner",
    "going",
    "player",
    "winner",
    "going",
    "represented",
    "player",
    "defined",
    "right",
    "take",
    "game",
    "status",
    "going",
    "representation",
    "status",
    "within",
    "game",
    "type",
    "coming",
    "pushing",
    "game",
    "history",
    "current",
    "round",
    "games",
    "got",
    "moves",
    "property",
    "represented",
    "array",
    "moves",
    "status",
    "property",
    "represented",
    "game",
    "status",
    "type",
    "finally",
    "ready",
    "replace",
    "things",
    "game",
    "game",
    "status",
    "let",
    "put",
    "game",
    "right",
    "current",
    "round",
    "games",
    "last",
    "thing",
    "fill",
    "games",
    "figure",
    "type",
    "array",
    "save",
    "us",
    "pain",
    "looking",
    "say",
    "going",
    "thing",
    "current",
    "round",
    "games",
    "games",
    "going",
    "exact",
    "type",
    "point",
    "defined",
    "supporting",
    "types",
    "game",
    "case",
    "looked",
    "reference",
    "code",
    "javascript",
    "basically",
    "looking",
    "know",
    "kind",
    "objects",
    "passing",
    "around",
    "returning",
    "different",
    "functions",
    "looking",
    "analyzing",
    "code",
    "see",
    "information",
    "starting",
    "project",
    "scratch",
    "intended",
    "use",
    "typescript",
    "way",
    "actually",
    "great",
    "exercise",
    "go",
    "even",
    "write",
    "code",
    "defining",
    "types",
    "game",
    "great",
    "way",
    "define",
    "functionality",
    "behind",
    "without",
    "writing",
    "code",
    "actually",
    "one",
    "first",
    "things",
    "building",
    "new",
    "feature",
    "map",
    "different",
    "types",
    "going",
    "dealing",
    "figure",
    "functions",
    "need",
    "types",
    "going",
    "accepted",
    "arguments",
    "functions",
    "return",
    "types",
    "functions",
    "forth",
    "see",
    "typescript",
    "already",
    "making",
    "us",
    "think",
    "lot",
    "clearly",
    "types",
    "objects",
    "passing",
    "know",
    "objects",
    "arrays",
    "forth",
    "types",
    "passing",
    "code",
    "makes",
    "us",
    "lot",
    "explicit",
    "organized",
    "go",
    "back",
    "excalibur",
    "briefly",
    "listing",
    "benefits",
    "typescript",
    "um",
    "think",
    "one",
    "benefits",
    "makes",
    "think",
    "clearly",
    "explicitly",
    "code",
    "experienced",
    "explicitly",
    "type",
    "game",
    "point",
    "still",
    "squiggly",
    "lines",
    "assigned",
    "types",
    "anything",
    "keep",
    "open",
    "going",
    "collapse",
    "little",
    "bit",
    "let",
    "start",
    "working",
    "top",
    "file",
    "first",
    "thing",
    "let",
    "look",
    "constructor",
    "typescript",
    "add",
    "types",
    "things",
    "adding",
    "colon",
    "giving",
    "type",
    "case",
    "key",
    "local",
    "storage",
    "key",
    "primitive",
    "string",
    "type",
    "pass",
    "directly",
    "need",
    "anything",
    "types",
    "file",
    "know",
    "need",
    "redefine",
    "string",
    "players",
    "going",
    "array",
    "players",
    "give",
    "colon",
    "say",
    "player",
    "array",
    "going",
    "type",
    "dealing",
    "see",
    "figured",
    "type",
    "already",
    "even",
    "though",
    "import",
    "always",
    "going",
    "case",
    "works",
    "works",
    "okay",
    "generally",
    "want",
    "import",
    "type",
    "explicitly",
    "es6",
    "modules",
    "import",
    "type",
    "type",
    "called",
    "player",
    "type",
    "come",
    "types",
    "file",
    "looking",
    "going",
    "see",
    "import",
    "path",
    "end",
    "ts",
    "extension",
    "consider",
    "importing",
    "instead",
    "let",
    "google",
    "probably",
    "configuration",
    "property",
    "missed",
    "person",
    "saying",
    "remove",
    "extension",
    "let",
    "try",
    "think",
    "worked",
    "saying",
    "module",
    "oh",
    "actually",
    "know",
    "going",
    "sorry",
    "messed",
    "scoped",
    "file",
    "also",
    "saved",
    "would",
    "big",
    "problem",
    "import",
    "first",
    "thing",
    "save",
    "file",
    "help",
    "us",
    "quite",
    "bit",
    "solve",
    "error",
    "exported",
    "file",
    "use",
    "throughout",
    "code",
    "need",
    "export",
    "like",
    "would",
    "export",
    "know",
    "variable",
    "equals",
    "20",
    "export",
    "variable",
    "export",
    "default",
    "something",
    "like",
    "could",
    "export",
    "like",
    "would",
    "thing",
    "know",
    "import",
    "variable",
    "types",
    "file",
    "regular",
    "javascript",
    "variable",
    "get",
    "rid",
    "let",
    "keep",
    "exporting",
    "okay",
    "exported",
    "types",
    "let",
    "save",
    "get",
    "much",
    "uh",
    "grief",
    "typescript",
    "server",
    "red",
    "squigglies",
    "got",
    "player",
    "type",
    "see",
    "hover",
    "see",
    "type",
    "really",
    "nice",
    "able",
    "hover",
    "also",
    "hover",
    "strongly",
    "typed",
    "constructor",
    "knows",
    "exactly",
    "passed",
    "point",
    "get",
    "problems",
    "storage",
    "key",
    "players",
    "instance",
    "properties",
    "store",
    "class",
    "since",
    "explicitly",
    "typed",
    "complaining",
    "one",
    "way",
    "could",
    "come",
    "top",
    "say",
    "storage",
    "key",
    "string",
    "satisfy",
    "passing",
    "key",
    "constructor",
    "assigning",
    "string",
    "actually",
    "shortcut",
    "concise",
    "way",
    "instead",
    "calling",
    "key",
    "storage",
    "key",
    "mismatch",
    "short",
    "circuit",
    "delete",
    "rename",
    "storage",
    "key",
    "far",
    "going",
    "anything",
    "tried",
    "assign",
    "dot",
    "storage",
    "key",
    "equal",
    "storage",
    "key",
    "going",
    "work",
    "remove",
    "entirely",
    "going",
    "work",
    "say",
    "property",
    "class",
    "define",
    "access",
    "later",
    "class",
    "go",
    "bottom",
    "saving",
    "state",
    "see",
    "accessing",
    "dot",
    "storage",
    "key",
    "two",
    "places",
    "hover",
    "going",
    "know",
    "string",
    "come",
    "top",
    "get",
    "rid",
    "read",
    "leave",
    "storage",
    "key",
    "complain",
    "says",
    "exist",
    "type",
    "store",
    "need",
    "give",
    "also",
    "give",
    "either",
    "public",
    "private",
    "define",
    "whether",
    "accessible",
    "outside",
    "class",
    "call",
    "private",
    "internal",
    "methods",
    "class",
    "access",
    "goes",
    "players",
    "delete",
    "become",
    "private",
    "array",
    "players",
    "right",
    "basically",
    "shortcut",
    "passing",
    "um",
    "parameters",
    "assigning",
    "class",
    "one",
    "step",
    "see",
    "look",
    "dot",
    "players",
    "knows",
    "type",
    "player",
    "right",
    "getting",
    "closer",
    "seeing",
    "lot",
    "less",
    "little",
    "squiggly",
    "red",
    "lines",
    "things",
    "work",
    "file",
    "um",
    "let",
    "go",
    "ahead",
    "start",
    "bottom",
    "pretty",
    "isolated",
    "state",
    "function",
    "implicit",
    "type",
    "basically",
    "means",
    "typescript",
    "yelling",
    "us",
    "defined",
    "type",
    "one",
    "thing",
    "could",
    "really",
    "wanted",
    "refactoring",
    "migrating",
    "code",
    "base",
    "change",
    "strict",
    "false",
    "save",
    "restart",
    "ts",
    "server",
    "see",
    "longer",
    "complains",
    "define",
    "type",
    "typescript",
    "going",
    "mad",
    "course",
    "comes",
    "detriment",
    "red",
    "squiggly",
    "lines",
    "tell",
    "messed",
    "people",
    "would",
    "encourage",
    "put",
    "strict",
    "mode",
    "restart",
    "ts",
    "server",
    "wanted",
    "show",
    "see",
    "let",
    "start",
    "bottom",
    "state",
    "function",
    "great",
    "use",
    "case",
    "typescript",
    "life",
    "becomes",
    "lot",
    "easier",
    "case",
    "allowing",
    "um",
    "someone",
    "using",
    "function",
    "pass",
    "either",
    "object",
    "represents",
    "state",
    "function",
    "pass",
    "previous",
    "state",
    "returns",
    "new",
    "state",
    "two",
    "different",
    "types",
    "parameters",
    "expect",
    "type",
    "lot",
    "better",
    "know",
    "using",
    "typescript",
    "saving",
    "state",
    "going",
    "passing",
    "game",
    "state",
    "type",
    "looking",
    "pass",
    "say",
    "game",
    "state",
    "going",
    "complain",
    "find",
    "name",
    "let",
    "go",
    "top",
    "let",
    "import",
    "game",
    "state",
    "types",
    "importing",
    "type",
    "complaining",
    "anymore",
    "complains",
    "right",
    "thinks",
    "function",
    "thinks",
    "state",
    "function",
    "object",
    "represented",
    "game",
    "state",
    "right",
    "trying",
    "call",
    "function",
    "problem",
    "defined",
    "one",
    "possible",
    "types",
    "define",
    "typescript",
    "union",
    "let",
    "go",
    "documentation",
    "briefly",
    "look",
    "let",
    "make",
    "new",
    "tab",
    "typescript",
    "docs",
    "let",
    "start",
    "let",
    "go",
    "either",
    "reference",
    "handbook",
    "little",
    "surprised",
    "see",
    "unions",
    "um",
    "starting",
    "let",
    "go",
    "basics",
    "looking",
    "let",
    "search",
    "docs",
    "union",
    "typescript",
    "unions",
    "uh",
    "looks",
    "like",
    "typescript",
    "functional",
    "programmers",
    "found",
    "one",
    "um",
    "anyways",
    "typescript",
    "union",
    "types",
    "untagged",
    "words",
    "discriminated",
    "unions",
    "like",
    "data",
    "haskell",
    "use",
    "haskell",
    "know",
    "means",
    "um",
    "trying",
    "basically",
    "say",
    "put",
    "little",
    "pipe",
    "character",
    "means",
    "type",
    "know",
    "either",
    "kind",
    "like",
    "um",
    "operator",
    "types",
    "read",
    "let",
    "show",
    "looks",
    "like",
    "going",
    "game",
    "state",
    "define",
    "function",
    "looking",
    "function",
    "going",
    "separate",
    "type",
    "going",
    "actually",
    "add",
    "um",
    "let",
    "add",
    "top",
    "file",
    "since",
    "typescript",
    "add",
    "types",
    "within",
    "files",
    "say",
    "save",
    "state",
    "cb",
    "callback",
    "define",
    "function",
    "couple",
    "ways",
    "one",
    "quick",
    "way",
    "basically",
    "give",
    "arrow",
    "function",
    "tell",
    "needs",
    "return",
    "case",
    "want",
    "return",
    "game",
    "state",
    "going",
    "pass",
    "previous",
    "state",
    "going",
    "game",
    "state",
    "basically",
    "talked",
    "previous",
    "video",
    "build",
    "always",
    "nice",
    "save",
    "state",
    "function",
    "able",
    "access",
    "previous",
    "state",
    "derive",
    "next",
    "state",
    "passing",
    "type",
    "define",
    "took",
    "key",
    "right",
    "type",
    "passed",
    "right",
    "save",
    "state",
    "callback",
    "see",
    "complaints",
    "typescript",
    "server",
    "compiler",
    "state",
    "function",
    "matches",
    "type",
    "gave",
    "previous",
    "state",
    "um",
    "typed",
    "yet",
    "satisfies",
    "constraint",
    "actually",
    "take",
    "little",
    "concise",
    "copy",
    "type",
    "pass",
    "right",
    "need",
    "put",
    "parentheses",
    "around",
    "work",
    "fine",
    "get",
    "rid",
    "wanted",
    "break",
    "clear",
    "everything",
    "working",
    "hover",
    "previous",
    "state",
    "going",
    "type",
    "one",
    "complaining",
    "typescript",
    "would",
    "nice",
    "know",
    "one",
    "way",
    "little",
    "bit",
    "tricky",
    "typescript",
    "um",
    "super",
    "obvious",
    "local",
    "storage",
    "dot",
    "get",
    "item",
    "set",
    "item",
    "going",
    "return",
    "type",
    "get",
    "item",
    "going",
    "default",
    "return",
    "type",
    "um",
    "actually",
    "sorry",
    "string",
    "null",
    "json",
    "parse",
    "method",
    "going",
    "return",
    "type",
    "want",
    "want",
    "actually",
    "give",
    "strong",
    "typing",
    "cast",
    "type",
    "say",
    "item",
    "going",
    "game",
    "state",
    "get",
    "state",
    "going",
    "return",
    "type",
    "game",
    "state",
    "actually",
    "explicitly",
    "define",
    "function",
    "remove",
    "um",
    "say",
    "string",
    "something",
    "like",
    "going",
    "yell",
    "us",
    "returning",
    "correct",
    "type",
    "function",
    "declared",
    "whole",
    "nother",
    "day",
    "going",
    "typing",
    "functions",
    "explicitly",
    "return",
    "types",
    "programmers",
    "really",
    "like",
    "explicit",
    "typing",
    "functions",
    "refactor",
    "want",
    "get",
    "working",
    "moment",
    "going",
    "worry",
    "know",
    "define",
    "return",
    "types",
    "functions",
    "done",
    "come",
    "back",
    "previous",
    "state",
    "type",
    "game",
    "state",
    "still",
    "works",
    "pass",
    "state",
    "function",
    "game",
    "state",
    "go",
    "state",
    "function",
    "typed",
    "right",
    "let",
    "keep",
    "scrolling",
    "think",
    "one",
    "two",
    "errors",
    "square",
    "id",
    "easy",
    "let",
    "give",
    "number",
    "expected",
    "type",
    "hover",
    "current",
    "game",
    "moves",
    "would",
    "expect",
    "um",
    "move",
    "type",
    "type",
    "believe",
    "fix",
    "would",
    "fix",
    "one",
    "thing",
    "give",
    "initial",
    "state",
    "game",
    "state",
    "type",
    "anywhere",
    "pass",
    "going",
    "recognize",
    "right",
    "initial",
    "state",
    "type",
    "game",
    "state",
    "look",
    "structured",
    "clone",
    "method",
    "actually",
    "similar",
    "local",
    "storage",
    "browser",
    "api",
    "default",
    "going",
    "type",
    "anything",
    "case",
    "going",
    "cast",
    "game",
    "state",
    "object",
    "know",
    "state",
    "going",
    "represented",
    "pushing",
    "games",
    "going",
    "recognize",
    "current",
    "round",
    "games",
    "type",
    "game",
    "start",
    "see",
    "comes",
    "together",
    "starting",
    "get",
    "stronger",
    "types",
    "across",
    "code",
    "okay",
    "think",
    "thing",
    "left",
    "red",
    "squiggly",
    "saying",
    "red",
    "squiggles",
    "map",
    "necessarily",
    "obviously",
    "need",
    "check",
    "things",
    "given",
    "fact",
    "know",
    "code",
    "worked",
    "strict",
    "mode",
    "really",
    "use",
    "guide",
    "refactor",
    "find",
    "areas",
    "strongly",
    "typed",
    "things",
    "let",
    "dig",
    "error",
    "says",
    "property",
    "includes",
    "exist",
    "type",
    "number",
    "array",
    "need",
    "change",
    "target",
    "library",
    "try",
    "changing",
    "lib",
    "compiler",
    "option",
    "es2016",
    "later",
    "right",
    "going",
    "say",
    "2016",
    "later",
    "es7",
    "believe",
    "let",
    "target",
    "es2016",
    "restart",
    "ts",
    "server",
    "see",
    "go",
    "away",
    "method",
    "array",
    "available",
    "ecmascript",
    "2016",
    "spec",
    "let",
    "clear",
    "using",
    "es6",
    "modules",
    "tells",
    "us",
    "export",
    "import",
    "things",
    "modules",
    "compiling",
    "typescript",
    "code",
    "standard",
    "javascript",
    "standard",
    "javascript",
    "method",
    "point",
    "completed",
    "file",
    "imported",
    "types",
    "need",
    "red",
    "squiggly",
    "lines",
    "good",
    "indication",
    "pretty",
    "much",
    "done",
    "file",
    "let",
    "save",
    "go",
    "next",
    "one",
    "done",
    "store",
    "let",
    "go",
    "view",
    "one",
    "slightly",
    "difficult",
    "going",
    "deal",
    "um",
    "dom",
    "element",
    "types",
    "little",
    "bit",
    "confusing",
    "got",
    "bunch",
    "red",
    "squiggly",
    "lines",
    "coming",
    "query",
    "selector",
    "helper",
    "method",
    "defined",
    "let",
    "go",
    "straight",
    "let",
    "start",
    "typing",
    "selector",
    "going",
    "string",
    "like",
    "class",
    "know",
    "selector",
    "passing",
    "query",
    "selector",
    "method",
    "typing",
    "things",
    "typescript",
    "something",
    "useful",
    "hover",
    "methods",
    "um",
    "going",
    "work",
    "using",
    "parent",
    "go",
    "document",
    "types",
    "dom",
    "methods",
    "global",
    "types",
    "document",
    "type",
    "document",
    "query",
    "selector",
    "give",
    "stub",
    "giving",
    "types",
    "available",
    "see",
    "selectors",
    "string",
    "knew",
    "give",
    "string",
    "element",
    "going",
    "returned",
    "going",
    "pass",
    "parent",
    "type",
    "element",
    "see",
    "element",
    "query",
    "selector",
    "available",
    "passing",
    "string",
    "let",
    "let",
    "retype",
    "number",
    "real",
    "quick",
    "see",
    "invalid",
    "thing",
    "pass",
    "query",
    "selector",
    "know",
    "string",
    "going",
    "correct",
    "thing",
    "furthermore",
    "go",
    "query",
    "selector",
    "give",
    "string",
    "type",
    "well",
    "two",
    "methods",
    "strongly",
    "typed",
    "come",
    "top",
    "still",
    "going",
    "yelling",
    "us",
    "little",
    "bit",
    "saying",
    "expected",
    "two",
    "arguments",
    "got",
    "one",
    "come",
    "methods",
    "case",
    "parent",
    "element",
    "totally",
    "optional",
    "pass",
    "question",
    "mark",
    "right",
    "make",
    "element",
    "undefined",
    "okay",
    "first",
    "checking",
    "ternary",
    "operator",
    "whether",
    "parent",
    "argument",
    "value",
    "value",
    "going",
    "use",
    "otherwise",
    "going",
    "fall",
    "back",
    "document",
    "refactor",
    "little",
    "bit",
    "intentionally",
    "break",
    "tried",
    "access",
    "parent",
    "element",
    "grab",
    "query",
    "selector",
    "pass",
    "selector",
    "going",
    "work",
    "visual",
    "studio",
    "code",
    "already",
    "knew",
    "trying",
    "remove",
    "right",
    "going",
    "yell",
    "us",
    "says",
    "parent",
    "possibly",
    "undefined",
    "ca",
    "access",
    "method",
    "like",
    "undefined",
    "parameter",
    "see",
    "vs",
    "code",
    "added",
    "question",
    "mark",
    "optional",
    "chaining",
    "let",
    "type",
    "optional",
    "chaining",
    "actually",
    "typescript",
    "concept",
    "operator",
    "newer",
    "versions",
    "javascript",
    "using",
    "accesses",
    "object",
    "property",
    "calls",
    "function",
    "find",
    "looking",
    "type",
    "undefined",
    "null",
    "shown",
    "short",
    "circuit",
    "evaluate",
    "undefined",
    "reason",
    "works",
    "first",
    "operator",
    "right",
    "checking",
    "hey",
    "parent",
    "element",
    "defined",
    "let",
    "call",
    "method",
    "otherwise",
    "let",
    "turn",
    "element",
    "undefined",
    "see",
    "checking",
    "element",
    "defined",
    "throwing",
    "error",
    "defined",
    "returning",
    "technically",
    "work",
    "case",
    "want",
    "use",
    "logic",
    "explicit",
    "say",
    "exists",
    "grab",
    "parent",
    "otherwise",
    "fall",
    "back",
    "back",
    "document",
    "gives",
    "us",
    "assurance",
    "going",
    "find",
    "element",
    "fixed",
    "red",
    "squiggly",
    "lines",
    "problem",
    "says",
    "property",
    "menu",
    "exist",
    "type",
    "object",
    "see",
    "defined",
    "object",
    "really",
    "want",
    "retype",
    "going",
    "use",
    "typescript",
    "utility",
    "let",
    "make",
    "sure",
    "example",
    "final",
    "go",
    "documentation",
    "typescript",
    "let",
    "go",
    "back",
    "find",
    "utility",
    "types",
    "reference",
    "utility",
    "types",
    "come",
    "record",
    "constructs",
    "object",
    "type",
    "whose",
    "property",
    "keys",
    "keys",
    "right",
    "whose",
    "property",
    "values",
    "type",
    "right",
    "actually",
    "leveraging",
    "something",
    "called",
    "generics",
    "typescript",
    "kind",
    "beyond",
    "scope",
    "video",
    "look",
    "read",
    "keys",
    "type",
    "going",
    "generics",
    "record",
    "going",
    "type",
    "allows",
    "us",
    "define",
    "something",
    "words",
    "basically",
    "defining",
    "basic",
    "object",
    "right",
    "type",
    "remember",
    "dollar",
    "sign",
    "property",
    "instance",
    "property",
    "class",
    "could",
    "named",
    "pretty",
    "much",
    "anything",
    "um",
    "could",
    "named",
    "element",
    "object",
    "store",
    "something",
    "like",
    "shortcut",
    "want",
    "type",
    "type",
    "record",
    "pass",
    "generic",
    "values",
    "want",
    "pass",
    "string",
    "defining",
    "arbitrary",
    "strings",
    "properties",
    "object",
    "value",
    "going",
    "going",
    "element",
    "type",
    "pass",
    "element",
    "things",
    "satisfied",
    "satisfied",
    "passing",
    "arbitrary",
    "string",
    "property",
    "name",
    "right",
    "value",
    "going",
    "return",
    "element",
    "see",
    "returning",
    "type",
    "element",
    "satisfied",
    "happy",
    "need",
    "type",
    "double",
    "dollar",
    "sign",
    "node",
    "list",
    "come",
    "query",
    "selector",
    "let",
    "take",
    "peek",
    "element",
    "list",
    "typed",
    "node",
    "list",
    "elements",
    "native",
    "typing",
    "query",
    "selector",
    "method",
    "returning",
    "see",
    "defined",
    "right",
    "let",
    "copy",
    "need",
    "come",
    "back",
    "top",
    "let",
    "define",
    "record",
    "give",
    "arbitrary",
    "string",
    "squares",
    "arbitrary",
    "string",
    "property",
    "name",
    "type",
    "going",
    "give",
    "paste",
    "node",
    "list",
    "elements",
    "initialize",
    "empty",
    "object",
    "element",
    "list",
    "happy",
    "query",
    "selector",
    "returns",
    "node",
    "list",
    "squares",
    "arbitrary",
    "property",
    "value",
    "satisfies",
    "type",
    "use",
    "utility",
    "type",
    "typescript",
    "using",
    "generics",
    "want",
    "show",
    "another",
    "way",
    "could",
    "done",
    "wanted",
    "use",
    "utility",
    "type",
    "could",
    "define",
    "custom",
    "type",
    "let",
    "say",
    "um",
    "element",
    "object",
    "uh",
    "dictionary",
    "type",
    "name",
    "giving",
    "pass",
    "key",
    "string",
    "element",
    "value",
    "pass",
    "element",
    "object",
    "dictionary",
    "sorry",
    "string",
    "basically",
    "saying",
    "want",
    "object",
    "arbitrary",
    "number",
    "properties",
    "key",
    "property",
    "menu",
    "menu",
    "button",
    "menu",
    "items",
    "string",
    "value",
    "property",
    "element",
    "assigned",
    "type",
    "right",
    "really",
    "equivalent",
    "earlier",
    "said",
    "record",
    "string",
    "element",
    "closed",
    "really",
    "really",
    "wanted",
    "get",
    "fancy",
    "could",
    "generics",
    "sorry",
    "going",
    "little",
    "bit",
    "tangent",
    "give",
    "idea",
    "power",
    "typescript",
    "could",
    "say",
    "custom",
    "record",
    "utility",
    "trying",
    "produce",
    "utility",
    "record",
    "recreating",
    "scratch",
    "pass",
    "generic",
    "key",
    "value",
    "usually",
    "generics",
    "going",
    "put",
    "front",
    "kind",
    "convention",
    "use",
    "kind",
    "signify",
    "know",
    "express",
    "generic",
    "use",
    "syntax",
    "key",
    "key",
    "value",
    "value",
    "know",
    "javascript",
    "valid",
    "type",
    "property",
    "give",
    "object",
    "really",
    "string",
    "ca",
    "define",
    "object",
    "like",
    "start",
    "adding",
    "numbers",
    "like",
    "guess",
    "might",
    "valid",
    "valid",
    "javascript",
    "oh",
    "funny",
    "guess",
    "know",
    "think",
    "valid",
    "let",
    "let",
    "try",
    "curious",
    "would",
    "surprised",
    "say",
    "test",
    "looks",
    "like",
    "interesting",
    "know",
    "could",
    "know",
    "would",
    "ever",
    "maybe",
    "map",
    "kind",
    "similar",
    "anyways",
    "um",
    "guess",
    "learn",
    "something",
    "new",
    "today",
    "making",
    "tutorial",
    "coding",
    "probably",
    "best",
    "thing",
    "anyways",
    "let",
    "honest",
    "anyways",
    "want",
    "string",
    "let",
    "say",
    "extends",
    "string",
    "type",
    "going",
    "fine",
    "replace",
    "record",
    "custom",
    "record",
    "utility",
    "going",
    "work",
    "fine",
    "everything",
    "going",
    "happy",
    "basically",
    "implemented",
    "utility",
    "type",
    "typescript",
    "provides",
    "interesting",
    "tidbit",
    "kind",
    "roll",
    "little",
    "bit",
    "let",
    "get",
    "rid",
    "unnecessarily",
    "complex",
    "see",
    "top",
    "imported",
    "store",
    "js",
    "doc",
    "typings",
    "vanilla",
    "javascript",
    "project",
    "using",
    "typescript",
    "really",
    "need",
    "get",
    "rid",
    "moving",
    "implement",
    "rest",
    "okay",
    "move",
    "render",
    "method",
    "um",
    "render",
    "method",
    "takes",
    "two",
    "state",
    "objects",
    "reason",
    "originally",
    "passed",
    "two",
    "separate",
    "objects",
    "working",
    "typescript",
    "working",
    "typescript",
    "probably",
    "would",
    "pass",
    "entire",
    "state",
    "object",
    "one",
    "parameter",
    "stay",
    "consistent",
    "look",
    "types",
    "defined",
    "game",
    "type",
    "one",
    "pretty",
    "easy",
    "type",
    "game",
    "need",
    "import",
    "instead",
    "going",
    "top",
    "file",
    "show",
    "little",
    "trick",
    "hold",
    "mac",
    "command",
    "windows",
    "control",
    "command",
    "period",
    "vs",
    "code",
    "give",
    "suggestion",
    "usually",
    "find",
    "looking",
    "looking",
    "um",
    "quite",
    "sure",
    "going",
    "um",
    "saying",
    "even",
    "know",
    "types",
    "js",
    "sure",
    "anyways",
    "add",
    "type",
    "uh",
    "import",
    "importing",
    "anything",
    "typescript",
    "types",
    "remove",
    "extension",
    "work",
    "working",
    "let",
    "see",
    "works",
    "one",
    "need",
    "stats",
    "know",
    "typed",
    "yet",
    "okay",
    "actually",
    "um",
    "final",
    "copy",
    "see",
    "github",
    "used",
    "slightly",
    "different",
    "strategy",
    "type",
    "already",
    "defined",
    "stats",
    "go",
    "object",
    "looking",
    "one",
    "specifically",
    "looking",
    "return",
    "type",
    "player",
    "stats",
    "array",
    "players",
    "wins",
    "property",
    "added",
    "ties",
    "number",
    "hover",
    "stats",
    "give",
    "us",
    "inferred",
    "type",
    "correct",
    "furthermore",
    "store",
    "class",
    "inferred",
    "type",
    "methods",
    "something",
    "derive",
    "types",
    "types",
    "case",
    "since",
    "stats",
    "type",
    "go",
    "back",
    "view",
    "import",
    "type",
    "store",
    "store",
    "give",
    "us",
    "store",
    "class",
    "defined",
    "say",
    "store",
    "actually",
    "access",
    "properties",
    "scroll",
    "like",
    "accessing",
    "know",
    "properties",
    "array",
    "scroll",
    "see",
    "methods",
    "properties",
    "grab",
    "store",
    "stats",
    "one",
    "stats",
    "defined",
    "derived",
    "store",
    "someone",
    "argued",
    "maybe",
    "best",
    "way",
    "would",
    "probably",
    "recommend",
    "um",
    "stronger",
    "types",
    "actually",
    "defining",
    "stats",
    "type",
    "work",
    "easy",
    "way",
    "get",
    "type",
    "without",
    "define",
    "also",
    "grab",
    "game",
    "uh",
    "getter",
    "store",
    "properly",
    "type",
    "game",
    "going",
    "give",
    "us",
    "correct",
    "types",
    "render",
    "method",
    "using",
    "demonstrate",
    "something",
    "reality",
    "probably",
    "want",
    "define",
    "actual",
    "types",
    "game",
    "could",
    "use",
    "game",
    "ready",
    "oops",
    "scrolling",
    "around",
    "could",
    "use",
    "game",
    "right",
    "actually",
    "yell",
    "us",
    "game",
    "slightly",
    "different",
    "derived",
    "state",
    "game",
    "state",
    "storing",
    "local",
    "storage",
    "game",
    "trying",
    "represent",
    "method",
    "derive",
    "state",
    "store",
    "remember",
    "method",
    "called",
    "game",
    "reading",
    "state",
    "raw",
    "state",
    "deriving",
    "useful",
    "properties",
    "returning",
    "game",
    "use",
    "right",
    "bottom",
    "obviously",
    "current",
    "player",
    "saved",
    "local",
    "storage",
    "represented",
    "type",
    "guess",
    "another",
    "reason",
    "using",
    "store",
    "game",
    "good",
    "way",
    "yeah",
    "basically",
    "would",
    "say",
    "want",
    "type",
    "function",
    "coming",
    "bind",
    "events",
    "methods",
    "handler",
    "type",
    "right",
    "basically",
    "passing",
    "handler",
    "callback",
    "add",
    "event",
    "listener",
    "look",
    "stub",
    "add",
    "event",
    "listener",
    "see",
    "got",
    "overloads",
    "kind",
    "advanced",
    "typescript",
    "concept",
    "one",
    "thing",
    "kind",
    "zoom",
    "types",
    "let",
    "command",
    "click",
    "add",
    "event",
    "listener",
    "take",
    "us",
    "typings",
    "dom",
    "basically",
    "provided",
    "already",
    "um",
    "us",
    "open",
    "file",
    "pane",
    "um",
    "even",
    "think",
    "going",
    "see",
    "kind",
    "believe",
    "built",
    "vs",
    "code",
    "give",
    "typings",
    "um",
    "could",
    "wrong",
    "anyways",
    "event",
    "listener",
    "gives",
    "couple",
    "types",
    "deal",
    "hit",
    "command",
    "click",
    "kind",
    "go",
    "find",
    "type",
    "looking",
    "event",
    "listener",
    "see",
    "event",
    "listener",
    "actually",
    "type",
    "use",
    "even",
    "need",
    "define",
    "use",
    "event",
    "listener",
    "see",
    "populated",
    "pass",
    "right",
    "event",
    "listener",
    "always",
    "best",
    "use",
    "types",
    "defined",
    "obviously",
    "type",
    "something",
    "common",
    "event",
    "listener",
    "handler",
    "like",
    "always",
    "expect",
    "going",
    "type",
    "already",
    "defined",
    "use",
    "done",
    "update",
    "scoreboard",
    "believe",
    "numbers",
    "say",
    "number",
    "number",
    "number",
    "going",
    "tell",
    "us",
    "something",
    "inner",
    "text",
    "exist",
    "type",
    "element",
    "might",
    "used",
    "wrong",
    "original",
    "actually",
    "think",
    "text",
    "content",
    "yeah",
    "actually",
    "right",
    "thing",
    "use",
    "know",
    "using",
    "inner",
    "text",
    "seemed",
    "work",
    "though",
    "let",
    "update",
    "open",
    "modal",
    "message",
    "going",
    "string",
    "passing",
    "string",
    "error",
    "needs",
    "changed",
    "text",
    "content",
    "coming",
    "initialize",
    "moves",
    "one",
    "somewhat",
    "simple",
    "already",
    "defined",
    "move",
    "type",
    "going",
    "move",
    "right",
    "going",
    "complain",
    "find",
    "hit",
    "command",
    "period",
    "update",
    "import",
    "see",
    "actually",
    "added",
    "move",
    "right",
    "using",
    "game",
    "anymore",
    "get",
    "rid",
    "going",
    "complain",
    "right",
    "intentionally",
    "messed",
    "type",
    "want",
    "array",
    "moves",
    "move",
    "specify",
    "either",
    "say",
    "array",
    "helper",
    "utility",
    "typescript",
    "shorthand",
    "pass",
    "brackets",
    "end",
    "specifies",
    "moves",
    "moves",
    "array",
    "valid",
    "see",
    "everything",
    "working",
    "start",
    "demonstrating",
    "value",
    "typescript",
    "let",
    "say",
    "removed",
    "plus",
    "sign",
    "original",
    "build",
    "remembered",
    "pretty",
    "easy",
    "forget",
    "cast",
    "id",
    "extract",
    "element",
    "target",
    "number",
    "got",
    "rid",
    "going",
    "yell",
    "unintentional",
    "types",
    "number",
    "string",
    "overlap",
    "saying",
    "triple",
    "equals",
    "equality",
    "types",
    "checks",
    "type",
    "value",
    "looking",
    "move",
    "square",
    "id",
    "number",
    "default",
    "event",
    "target",
    "id",
    "going",
    "string",
    "going",
    "type",
    "string",
    "never",
    "evaluate",
    "true",
    "course",
    "remove",
    "triple",
    "equals",
    "would",
    "technically",
    "work",
    "things",
    "would",
    "cast",
    "always",
    "want",
    "use",
    "triple",
    "equals",
    "explicit",
    "example",
    "typescript",
    "comes",
    "handy",
    "reminds",
    "little",
    "details",
    "might",
    "kind",
    "glossed",
    "right",
    "let",
    "keep",
    "going",
    "see",
    "complaining",
    "icon",
    "possibly",
    "null",
    "case",
    "could",
    "better",
    "remember",
    "earlier",
    "prior",
    "video",
    "actually",
    "video",
    "define",
    "query",
    "selector",
    "like",
    "safe",
    "query",
    "selector",
    "checking",
    "uh",
    "whether",
    "element",
    "exists",
    "throwing",
    "error",
    "kind",
    "behavior",
    "want",
    "want",
    "proceed",
    "ca",
    "find",
    "element",
    "one",
    "solution",
    "problem",
    "put",
    "question",
    "mark",
    "optional",
    "chaining",
    "talked",
    "earlier",
    "saying",
    "hey",
    "let",
    "check",
    "icon",
    "element",
    "grab",
    "class",
    "list",
    "add",
    "class",
    "list",
    "element",
    "null",
    "let",
    "uh",
    "evaluate",
    "undefined",
    "throw",
    "errors",
    "works",
    "could",
    "add",
    "solves",
    "problems",
    "kind",
    "little",
    "bit",
    "know",
    "throw",
    "sudden",
    "know",
    "app",
    "grabbing",
    "correctly",
    "clicking",
    "toggle",
    "menu",
    "working",
    "well",
    "find",
    "error",
    "better",
    "explicit",
    "kind",
    "thing",
    "let",
    "leave",
    "take",
    "clues",
    "typescript",
    "refactor",
    "instead",
    "um",
    "let",
    "comment",
    "say",
    "icon",
    "equal",
    "use",
    "safe",
    "query",
    "selector",
    "method",
    "case",
    "going",
    "look",
    "tag",
    "parent",
    "going",
    "dot",
    "dollar",
    "sign",
    "dot",
    "menu",
    "button",
    "basically",
    "safely",
    "select",
    "icon",
    "definitely",
    "element",
    "going",
    "throw",
    "error",
    "calls",
    "valid",
    "actually",
    "concept",
    "called",
    "type",
    "narrowing",
    "um",
    "read",
    "typescript",
    "documentation",
    "wonder",
    "actually",
    "somewhere",
    "show",
    "okay",
    "yeah",
    "narrowing",
    "whole",
    "page",
    "kind",
    "describes",
    "process",
    "narrowing",
    "types",
    "explained",
    "thing",
    "goes",
    "right",
    "copy",
    "replace",
    "let",
    "get",
    "rid",
    "two",
    "functions",
    "good",
    "couple",
    "square",
    "element",
    "see",
    "replacing",
    "children",
    "know",
    "element",
    "player",
    "going",
    "player",
    "command",
    "period",
    "update",
    "import",
    "top",
    "thing",
    "going",
    "player",
    "finally",
    "get",
    "fun",
    "delegate",
    "method",
    "really",
    "tough",
    "understand",
    "first",
    "place",
    "type",
    "let",
    "walk",
    "know",
    "parameter",
    "parameter",
    "get",
    "done",
    "element",
    "pretty",
    "going",
    "element",
    "selector",
    "going",
    "string",
    "event",
    "key",
    "going",
    "string",
    "handler",
    "going",
    "event",
    "uh",
    "call",
    "example",
    "right",
    "event",
    "listener",
    "got",
    "little",
    "bit",
    "tricky",
    "situation",
    "see",
    "right",
    "event",
    "target",
    "possibly",
    "null",
    "okay",
    "let",
    "put",
    "question",
    "mark",
    "optional",
    "chaining",
    "still",
    "problem",
    "property",
    "matches",
    "exist",
    "type",
    "event",
    "target",
    "going",
    "use",
    "narrowing",
    "concept",
    "narrow",
    "types",
    "get",
    "rid",
    "errors",
    "typescript",
    "actually",
    "helping",
    "us",
    "way",
    "kind",
    "making",
    "us",
    "explicitly",
    "check",
    "things",
    "otherwise",
    "probably",
    "would",
    "first",
    "thing",
    "want",
    "let",
    "get",
    "rid",
    "question",
    "mark",
    "leave",
    "say",
    "event",
    "dot",
    "target",
    "instance",
    "element",
    "way",
    "check",
    "target",
    "element",
    "instance",
    "element",
    "actually",
    "want",
    "negate",
    "instance",
    "element",
    "want",
    "throw",
    "new",
    "error",
    "say",
    "event",
    "target",
    "found",
    "guard",
    "basically",
    "says",
    "hey",
    "purpose",
    "delegate",
    "method",
    "um",
    "delegate",
    "event",
    "target",
    "find",
    "something",
    "within",
    "ca",
    "find",
    "first",
    "place",
    "element",
    "rest",
    "method",
    "useless",
    "like",
    "ca",
    "really",
    "proceed",
    "safely",
    "might",
    "well",
    "throw",
    "error",
    "exit",
    "early",
    "developer",
    "know",
    "responsible",
    "fixing",
    "solves",
    "one",
    "problems",
    "matches",
    "keyword",
    "function",
    "complain",
    "anything",
    "handler",
    "says",
    "argument",
    "type",
    "element",
    "assignable",
    "parameter",
    "type",
    "event",
    "actually",
    "typed",
    "incorrectly",
    "handler",
    "actually",
    "passing",
    "element",
    "typed",
    "passing",
    "event",
    "really",
    "passing",
    "element",
    "need",
    "type",
    "accordingly",
    "passing",
    "function",
    "called",
    "element",
    "first",
    "argument",
    "return",
    "anything",
    "nothing",
    "wrong",
    "okay",
    "let",
    "remove",
    "question",
    "mark",
    "see",
    "happens",
    "looks",
    "like",
    "okay",
    "right",
    "good",
    "works",
    "typed",
    "okay",
    "think",
    "whole",
    "file",
    "strongly",
    "typed",
    "ready",
    "move",
    "final",
    "one",
    "going",
    "tie",
    "together",
    "get",
    "working",
    "reminder",
    "app",
    "really",
    "done",
    "anything",
    "structurally",
    "things",
    "still",
    "working",
    "open",
    "things",
    "ran",
    "yarn",
    "tsc",
    "let",
    "look",
    "disk",
    "directory",
    "outputs",
    "everything",
    "go",
    "page",
    "let",
    "inspect",
    "page",
    "go",
    "end",
    "body",
    "see",
    "script",
    "looking",
    "dist",
    "dash",
    "click",
    "things",
    "play",
    "game",
    "still",
    "really",
    "nothing",
    "changed",
    "working",
    "whole",
    "time",
    "trying",
    "make",
    "project",
    "maintainable",
    "typescript",
    "want",
    "extend",
    "future",
    "easier",
    "want",
    "debug",
    "easier",
    "debug",
    "kind",
    "stuff",
    "okay",
    "point",
    "fixing",
    "files",
    "basically",
    "fixed",
    "lot",
    "typings",
    "files",
    "always",
    "nice",
    "pretty",
    "explicit",
    "typings",
    "would",
    "argue",
    "want",
    "infer",
    "types",
    "much",
    "possible",
    "let",
    "go",
    "ahead",
    "add",
    "player",
    "type",
    "array",
    "trying",
    "go",
    "typestop",
    "js",
    "reason",
    "got",
    "type",
    "player",
    "array",
    "players",
    "remember",
    "store",
    "typed",
    "hover",
    "see",
    "storage",
    "key",
    "string",
    "players",
    "player",
    "array",
    "player",
    "array",
    "string",
    "let",
    "say",
    "passed",
    "number",
    "going",
    "happy",
    "say",
    "numbers",
    "assignable",
    "type",
    "string",
    "kind",
    "assurance",
    "getting",
    "coming",
    "let",
    "see",
    "says",
    "property",
    "id",
    "exist",
    "type",
    "event",
    "actually",
    "think",
    "mistyping",
    "bind",
    "player",
    "move",
    "event",
    "let",
    "go",
    "back",
    "view",
    "see",
    "using",
    "delegate",
    "handler",
    "typed",
    "event",
    "listener",
    "remember",
    "made",
    "mistake",
    "um",
    "incorrectly",
    "typing",
    "handler",
    "let",
    "copy",
    "handle",
    "type",
    "instead",
    "event",
    "listener",
    "handler",
    "going",
    "pass",
    "function",
    "element",
    "selected",
    "come",
    "back",
    "type",
    "errors",
    "fixed",
    "know",
    "fixing",
    "type",
    "error",
    "really",
    "reading",
    "error",
    "message",
    "able",
    "know",
    "respond",
    "know",
    "trying",
    "say",
    "comes",
    "time",
    "easy",
    "start",
    "figure",
    "first",
    "starting",
    "typescript",
    "right",
    "point",
    "everything",
    "strongly",
    "typed",
    "app",
    "working",
    "last",
    "step",
    "compile",
    "things",
    "let",
    "make",
    "sure",
    "getting",
    "errors",
    "yarn",
    "tsc",
    "errors",
    "done",
    "second",
    "disk",
    "directory",
    "compiled",
    "code",
    "see",
    "read",
    "none",
    "really",
    "minified",
    "anything",
    "like",
    "um",
    "target",
    "es2016",
    "actually",
    "see",
    "methods",
    "using",
    "let",
    "see",
    "find",
    "includes",
    "method",
    "interesting",
    "stuff",
    "uh",
    "typescript",
    "dealing",
    "like",
    "class",
    "syntax",
    "private",
    "fields",
    "properties",
    "like",
    "helper",
    "method",
    "deal",
    "kind",
    "interesting",
    "let",
    "show",
    "downgraded",
    "like",
    "es3",
    "prior",
    "spec",
    "javascript",
    "target",
    "want",
    "show",
    "plays",
    "output",
    "tough",
    "see",
    "let",
    "open",
    "kind",
    "watch",
    "code",
    "recompile",
    "different",
    "target",
    "see",
    "stuff",
    "changed",
    "go",
    "back",
    "es",
    "2016",
    "recompile",
    "also",
    "see",
    "get",
    "errors",
    "using",
    "things",
    "using",
    "language",
    "features",
    "available",
    "back",
    "es3",
    "spec",
    "compiler",
    "going",
    "give",
    "errors",
    "let",
    "go",
    "back",
    "valid",
    "syntax",
    "see",
    "like",
    "update",
    "see",
    "modules",
    "using",
    "anyways",
    "kind",
    "fun",
    "little",
    "tidbit",
    "kind",
    "explain",
    "ts",
    "config",
    "little",
    "bit",
    "want",
    "wrap",
    "walking",
    "important",
    "refactor",
    "typescripts",
    "someone",
    "would",
    "go",
    "effort",
    "value",
    "typescript",
    "really",
    "come",
    "know",
    "retyping",
    "things",
    "comes",
    "trying",
    "refactor",
    "things",
    "add",
    "new",
    "features",
    "went",
    "js",
    "folder",
    "went",
    "let",
    "say",
    "store",
    "let",
    "say",
    "came",
    "wanted",
    "know",
    "change",
    "type",
    "stats",
    "uh",
    "returned",
    "something",
    "like",
    "well",
    "went",
    "let",
    "say",
    "updated",
    "property",
    "wins",
    "like",
    "win",
    "count",
    "okay",
    "going",
    "complain",
    "right",
    "see",
    "try",
    "recompile",
    "yarn",
    "tsc",
    "going",
    "give",
    "us",
    "errors",
    "longer",
    "reason",
    "view",
    "line",
    "59",
    "let",
    "open",
    "view",
    "go",
    "line",
    "59",
    "see",
    "underline",
    "referencing",
    "output",
    "stats",
    "getter",
    "another",
    "place",
    "code",
    "base",
    "using",
    "original",
    "property",
    "would",
    "need",
    "update",
    "win",
    "count",
    "going",
    "stop",
    "complaining",
    "typescript",
    "done",
    "us",
    "know",
    "developer",
    "going",
    "changing",
    "method",
    "method",
    "dependent",
    "methods",
    "parts",
    "code",
    "base",
    "typescript",
    "smart",
    "enough",
    "know",
    "like",
    "hey",
    "change",
    "match",
    "rest",
    "code",
    "base",
    "going",
    "compile",
    "code",
    "base",
    "going",
    "work",
    "otherwise",
    "vanilla",
    "javascript",
    "code",
    "base",
    "try",
    "something",
    "like",
    "nothing",
    "would",
    "happen",
    "would",
    "think",
    "oh",
    "okay",
    "changed",
    "fine",
    "would",
    "find",
    "errors",
    "project",
    "started",
    "playing",
    "game",
    "working",
    "intended",
    "kind",
    "benefit",
    "typescript",
    "get",
    "proactive",
    "checking",
    "code",
    "find",
    "errors",
    "lot",
    "sooner",
    "rather",
    "pushing",
    "bunch",
    "code",
    "github",
    "deploying",
    "finding",
    "something",
    "broken",
    "app",
    "get",
    "deployed",
    "correctly",
    "build",
    "correctly",
    "correct",
    "code",
    "kind",
    "appeal",
    "typescript",
    "going",
    "put",
    "back",
    "wins",
    "like",
    "saying",
    "would",
    "probably",
    "want",
    "type",
    "little",
    "bit",
    "stronger",
    "going",
    "back",
    "stats",
    "getter",
    "also",
    "set",
    "return",
    "type",
    "wanted",
    "open",
    "file",
    "let",
    "bring",
    "right",
    "maybe",
    "wanted",
    "actually",
    "annotate",
    "expected",
    "return",
    "function",
    "usually",
    "good",
    "idea",
    "functions",
    "better",
    "explicit",
    "show",
    "exactly",
    "second",
    "let",
    "say",
    "type",
    "called",
    "derived",
    "game",
    "state",
    "something",
    "like",
    "define",
    "could",
    "define",
    "file",
    "would",
    "actually",
    "say",
    "probably",
    "better",
    "place",
    "specific",
    "file",
    "let",
    "actually",
    "get",
    "rid",
    "open",
    "file",
    "twice",
    "edit",
    "different",
    "places",
    "usually",
    "throw",
    "types",
    "top",
    "file",
    "derived",
    "game",
    "state",
    "um",
    "actually",
    "want",
    "call",
    "say",
    "derived",
    "stats",
    "want",
    "call",
    "going",
    "assign",
    "return",
    "value",
    "stats",
    "derive",
    "stats",
    "see",
    "right",
    "looks",
    "like",
    "nobody",
    "complaining",
    "defined",
    "empty",
    "object",
    "let",
    "say",
    "defined",
    "string",
    "going",
    "complain",
    "return",
    "type",
    "match",
    "explicitly",
    "annotated",
    "return",
    "type",
    "assigned",
    "job",
    "define",
    "see",
    "ties",
    "easy",
    "one",
    "going",
    "number",
    "see",
    "immediately",
    "get",
    "feedback",
    "looks",
    "okay",
    "player",
    "stats",
    "come",
    "say",
    "player",
    "stats",
    "could",
    "say",
    "satisfies",
    "get",
    "really",
    "help",
    "throughout",
    "code",
    "base",
    "anything",
    "passed",
    "get",
    "explicit",
    "type",
    "checking",
    "want",
    "say",
    "going",
    "player",
    "array",
    "let",
    "see",
    "seem",
    "complaining",
    "satisfy",
    "player",
    "array",
    "also",
    "wins",
    "property",
    "need",
    "document",
    "really",
    "need",
    "make",
    "another",
    "type",
    "player",
    "wins",
    "going",
    "intersection",
    "type",
    "union",
    "type",
    "say",
    "actually",
    "use",
    "symbol",
    "add",
    "properties",
    "say",
    "wins",
    "number",
    "player",
    "wins",
    "represents",
    "returning",
    "pass",
    "right",
    "would",
    "call",
    "um",
    "win",
    "count",
    "going",
    "mad",
    "calling",
    "wins",
    "actual",
    "type",
    "win",
    "count",
    "let",
    "match",
    "back",
    "let",
    "show",
    "explicitly",
    "uh",
    "making",
    "types",
    "advantageous",
    "first",
    "thing",
    "go",
    "view",
    "dot",
    "ts",
    "originally",
    "referenced",
    "stats",
    "see",
    "import",
    "derived",
    "stats",
    "import",
    "store",
    "longer",
    "need",
    "right",
    "get",
    "rid",
    "entirely",
    "add",
    "type",
    "annotation",
    "importing",
    "types",
    "stats",
    "derived",
    "stats",
    "let",
    "also",
    "say",
    "derived",
    "game",
    "defined",
    "yet",
    "export",
    "derived",
    "game",
    "import",
    "store",
    "complaining",
    "trying",
    "destructure",
    "properties",
    "derived",
    "game",
    "moment",
    "empty",
    "object",
    "know",
    "looking",
    "store",
    "returning",
    "game",
    "method",
    "going",
    "derived",
    "game",
    "look",
    "return",
    "type",
    "array",
    "moves",
    "import",
    "current",
    "player",
    "assign",
    "player",
    "status",
    "object",
    "actually",
    "already",
    "defined",
    "game",
    "status",
    "types",
    "remember",
    "go",
    "move",
    "type",
    "already",
    "defined",
    "use",
    "player",
    "type",
    "right",
    "defined",
    "game",
    "status",
    "right",
    "passed",
    "status",
    "using",
    "types",
    "composed",
    "derived",
    "game",
    "returned",
    "game",
    "getter",
    "method",
    "explicitly",
    "typed",
    "well",
    "see",
    "winner",
    "correct",
    "think",
    "mismatch",
    "think",
    "pointed",
    "earlier",
    "know",
    "let",
    "see",
    "ah",
    "explicitly",
    "typing",
    "actually",
    "um",
    "exposed",
    "believe",
    "little",
    "problem",
    "says",
    "player",
    "null",
    "assignable",
    "type",
    "player",
    "um",
    "allowing",
    "winner",
    "equal",
    "null",
    "go",
    "original",
    "types",
    "go",
    "game",
    "status",
    "actually",
    "player",
    "null",
    "player",
    "null",
    "means",
    "tie",
    "tie",
    "game",
    "something",
    "fixed",
    "explicit",
    "good",
    "thing",
    "always",
    "explicitly",
    "know",
    "define",
    "types",
    "appropriate",
    "yelling",
    "us",
    "anymore",
    "uh",
    "looking",
    "good",
    "let",
    "see",
    "broke",
    "anything",
    "elsewhere",
    "explicitly",
    "typed",
    "render",
    "method",
    "pass",
    "derived",
    "game",
    "derived",
    "stats",
    "benefit",
    "come",
    "back",
    "store",
    "go",
    "back",
    "game",
    "method",
    "let",
    "say",
    "stats",
    "earlier",
    "looking",
    "stats",
    "changed",
    "property",
    "stats",
    "remember",
    "previously",
    "explicit",
    "return",
    "type",
    "passed",
    "win",
    "count",
    "like",
    "nothing",
    "highlighted",
    "developer",
    "big",
    "project",
    "someone",
    "else",
    "written",
    "function",
    "clear",
    "contract",
    "function",
    "used",
    "outside",
    "anything",
    "like",
    "could",
    "come",
    "change",
    "name",
    "win",
    "count",
    "clue",
    "affected",
    "something",
    "another",
    "file",
    "compile",
    "explicitly",
    "say",
    "derived",
    "stats",
    "change",
    "going",
    "complain",
    "wins",
    "declared",
    "calling",
    "win",
    "count",
    "put",
    "back",
    "wins",
    "going",
    "happy",
    "gives",
    "us",
    "assurance",
    "break",
    "something",
    "elsewhere",
    "within",
    "code",
    "base",
    "done",
    "additional",
    "typings",
    "let",
    "close",
    "things",
    "run",
    "tsc",
    "everything",
    "compiled",
    "come",
    "back",
    "game",
    "working",
    "fine",
    "kind",
    "benefit",
    "um",
    "kind",
    "bringing",
    "full",
    "circle",
    "got",
    "benefits",
    "typescript",
    "demonstrated",
    "lot",
    "really",
    "hope",
    "video",
    "given",
    "brief",
    "introduction",
    "typescript",
    "um",
    "giving",
    "practical",
    "examples",
    "kind",
    "code",
    "along",
    "um",
    "get",
    "feet",
    "wet",
    "also",
    "kind",
    "see",
    "take",
    "vanilla",
    "project",
    "port",
    "typescript",
    "get",
    "setup",
    "done",
    "like",
    "video",
    "give",
    "like",
    "subscribe",
    "channel",
    "see",
    "next",
    "video",
    "going",
    "project",
    "going",
    "build",
    "react",
    "going",
    "take",
    "vanilla",
    "js",
    "make",
    "know",
    "react",
    "app",
    "eventually",
    "actually",
    "another",
    "typescript",
    "refactor",
    "take",
    "react",
    "app",
    "process",
    "typing",
    "things",
    "see",
    "next",
    "couple",
    "videos",
    "video",
    "going",
    "rebuilding",
    "vanilla",
    "javascript",
    "application",
    "react",
    "application",
    "purpose",
    "video",
    "show",
    "transition",
    "vanilla",
    "react",
    "problems",
    "react",
    "basically",
    "solving",
    "would",
    "want",
    "first",
    "place",
    "basic",
    "introduction",
    "know",
    "building",
    "react",
    "general",
    "app",
    "going",
    "rebuilding",
    "game",
    "actually",
    "game",
    "created",
    "prior",
    "video",
    "shown",
    "go",
    "complete",
    "scratch",
    "nothing",
    "paper",
    "fully",
    "working",
    "vanilla",
    "html",
    "css",
    "javascript",
    "game",
    "first",
    "thing",
    "going",
    "learn",
    "set",
    "react",
    "means",
    "going",
    "learn",
    "take",
    "vanilla",
    "react",
    "app",
    "regular",
    "javascript",
    "set",
    "scratch",
    "scratch",
    "let",
    "zoom",
    "little",
    "bit",
    "step",
    "right",
    "going",
    "take",
    "think",
    "going",
    "like",
    "hour",
    "want",
    "skip",
    "care",
    "set",
    "would",
    "highly",
    "suggest",
    "learn",
    "dug",
    "already",
    "know",
    "works",
    "know",
    "going",
    "hood",
    "set",
    "react",
    "app",
    "skip",
    "next",
    "chapter",
    "going",
    "convert",
    "js",
    "typescript",
    "going",
    "take",
    "react",
    "app",
    "implement",
    "typescript",
    "even",
    "write",
    "anything",
    "reason",
    "want",
    "project",
    "typescript",
    "know",
    "best",
    "best",
    "way",
    "write",
    "react",
    "app",
    "opinion",
    "strong",
    "type",
    "safety",
    "finally",
    "going",
    "take",
    "vanilla",
    "javascript",
    "app",
    "convert",
    "react",
    "typescript",
    "app",
    "going",
    "basically",
    "show",
    "take",
    "ideas",
    "put",
    "together",
    "prior",
    "video",
    "watched",
    "least",
    "gone",
    "take",
    "mvc",
    "model",
    "view",
    "controller",
    "pattern",
    "translate",
    "paradigms",
    "react",
    "actually",
    "works",
    "get",
    "see",
    "translation",
    "looks",
    "problems",
    "react",
    "trying",
    "solve",
    "us",
    "really",
    "fun",
    "conversion",
    "highlight",
    "conversion",
    "walking",
    "build",
    "app",
    "really",
    "recognize",
    "patterns",
    "going",
    "going",
    "like",
    "okay",
    "putting",
    "element",
    "styling",
    "adding",
    "event",
    "listener",
    "going",
    "lot",
    "lifting",
    "shifting",
    "know",
    "copy",
    "pasting",
    "reorganization",
    "kind",
    "expect",
    "video",
    "let",
    "abundantly",
    "clear",
    "beginning",
    "looking",
    "video",
    "going",
    "hold",
    "hand",
    "create",
    "react",
    "app",
    "scratch",
    "video",
    "watch",
    "watching",
    "video",
    "say",
    "couple",
    "times",
    "really",
    "want",
    "best",
    "introduction",
    "react",
    "go",
    "new",
    "react",
    "docs",
    "go",
    "tutorial",
    "relation",
    "necessarily",
    "one",
    "go",
    "step",
    "step",
    "build",
    "react",
    "app",
    "going",
    "best",
    "straightforward",
    "way",
    "learn",
    "couple",
    "prerequisites",
    "video",
    "number",
    "one",
    "importantly",
    "make",
    "sure",
    "familiar",
    "code",
    "base",
    "game",
    "reason",
    "say",
    "going",
    "glossing",
    "lot",
    "implementation",
    "details",
    "logic",
    "like",
    "game",
    "works",
    "seen",
    "prior",
    "videos",
    "description",
    "links",
    "least",
    "read",
    "code",
    "base",
    "point",
    "understand",
    "control",
    "flow",
    "understand",
    "goals",
    "game",
    "right",
    "play",
    "game",
    "reset",
    "reset",
    "scoreboard",
    "new",
    "round",
    "relatively",
    "simple",
    "game",
    "definitely",
    "need",
    "understand",
    "going",
    "first",
    "prerequisite",
    "html",
    "css",
    "javascript",
    "need",
    "least",
    "basic",
    "proficiency",
    "21",
    "hour",
    "course",
    "description",
    "go",
    "need",
    "get",
    "speed",
    "go",
    "check",
    "feel",
    "behind",
    "three",
    "finally",
    "basic",
    "understanding",
    "react",
    "understanding",
    "jsx",
    "first",
    "place",
    "know",
    "idea",
    "functional",
    "component",
    "basic",
    "concepts",
    "would",
    "go",
    "react",
    "documentation",
    "make",
    "sure",
    "beta",
    "react",
    "docs",
    "old",
    "ones",
    "documentation",
    "documentation",
    "way",
    "better",
    "completely",
    "rewritten",
    "course",
    "like",
    "two",
    "years",
    "excellent",
    "job",
    "would",
    "actually",
    "go",
    "tutorial",
    "kind",
    "funny",
    "example",
    "give",
    "building",
    "actually",
    "mean",
    "anyways",
    "go",
    "tutorial",
    "skim",
    "need",
    "know",
    "build",
    "scratch",
    "goal",
    "get",
    "basic",
    "understanding",
    "going",
    "going",
    "like",
    "really",
    "basic",
    "concepts",
    "like",
    "react",
    "props",
    "component",
    "props",
    "passing",
    "props",
    "kind",
    "stuff",
    "going",
    "kind",
    "jump",
    "things",
    "great",
    "already",
    "kind",
    "gone",
    "basics",
    "need",
    "see",
    "real",
    "life",
    "example",
    "built",
    "live",
    "way",
    "know",
    "follow",
    "along",
    "try",
    "pick",
    "things",
    "go",
    "say",
    "basic",
    "understanding",
    "react",
    "actually",
    "mean",
    "well",
    "would",
    "expect",
    "anyone",
    "watching",
    "video",
    "least",
    "get",
    "sort",
    "react",
    "app",
    "working",
    "understand",
    "know",
    "jsx",
    "let",
    "write",
    "understand",
    "jsx",
    "understand",
    "prop",
    "property",
    "passing",
    "component",
    "component",
    "reads",
    "part",
    "render",
    "cycle",
    "pretty",
    "basic",
    "bare",
    "bones",
    "concepts",
    "react",
    "finally",
    "understand",
    "functional",
    "component",
    "basic",
    "level",
    "react",
    "documentation",
    "make",
    "sure",
    "new",
    "beta",
    "least",
    "time",
    "video",
    "beta",
    "make",
    "sure",
    "docs",
    "new",
    "ones",
    "great",
    "rewritten",
    "course",
    "two",
    "years",
    "lots",
    "effort",
    "put",
    "awesome",
    "learn",
    "lot",
    "honestly",
    "part",
    "reason",
    "making",
    "beginner",
    "level",
    "react",
    "tutorial",
    "docs",
    "right",
    "think",
    "best",
    "place",
    "go",
    "learn",
    "build",
    "react",
    "application",
    "specifically",
    "start",
    "video",
    "react",
    "experience",
    "would",
    "go",
    "quick",
    "start",
    "least",
    "skim",
    "tutorial",
    "building",
    "game",
    "actually",
    "kind",
    "ironic",
    "mean",
    "replicate",
    "thing",
    "react",
    "docs",
    "actually",
    "know",
    "example",
    "good",
    "kind",
    "read",
    "implementation",
    "approach",
    "problem",
    "approached",
    "video",
    "looking",
    "originally",
    "built",
    "skim",
    "build",
    "want",
    "ca",
    "hurt",
    "importantly",
    "go",
    "thinking",
    "react",
    "make",
    "sure",
    "understood",
    "kind",
    "ideas",
    "finally",
    "help",
    "along",
    "tutorial",
    "would",
    "go",
    "managing",
    "state",
    "actually",
    "let",
    "see",
    "adding",
    "interactivity",
    "go",
    "article",
    "page",
    "called",
    "state",
    "components",
    "memory",
    "skim",
    "basic",
    "understanding",
    "use",
    "state",
    "hook",
    "linked",
    "right",
    "using",
    "throughout",
    "video",
    "good",
    "basic",
    "understanding",
    "could",
    "sit",
    "say",
    "go",
    "read",
    "go",
    "read",
    "ultimately",
    "gon",
    "na",
    "jump",
    "code",
    "best",
    "way",
    "learn",
    "things",
    "sure",
    "point",
    "different",
    "parts",
    "documentation",
    "approach",
    "specific",
    "concepts",
    "within",
    "build",
    "obviously",
    "welcome",
    "read",
    "would",
    "recommend",
    "reading",
    "entire",
    "react",
    "docs",
    "point",
    "good",
    "learning",
    "experience",
    "want",
    "waste",
    "time",
    "meet",
    "prerequisites",
    "go",
    "ahead",
    "get",
    "started",
    "okay",
    "going",
    "look",
    "react",
    "specifically",
    "start",
    "beginner",
    "honestly",
    "even",
    "intermediate",
    "level",
    "developer",
    "question",
    "start",
    "building",
    "react",
    "application",
    "actually",
    "valid",
    "might",
    "think",
    "seems",
    "like",
    "silly",
    "question",
    "lot",
    "ways",
    "start",
    "building",
    "react",
    "application",
    "could",
    "start",
    "simple",
    "including",
    "script",
    "tag",
    "html",
    "using",
    "react",
    "like",
    "could",
    "even",
    "include",
    "babel",
    "babel",
    "however",
    "say",
    "takes",
    "jsx",
    "turns",
    "javascript",
    "could",
    "use",
    "within",
    "html",
    "document",
    "went",
    "refactor",
    "talking",
    "literally",
    "putting",
    "scripts",
    "right",
    "could",
    "serve",
    "react",
    "cdn",
    "react",
    "project",
    "one",
    "option",
    "another",
    "option",
    "could",
    "use",
    "like",
    "code",
    "sandbox",
    "went",
    "code",
    "sandbox",
    "go",
    "new",
    "template",
    "got",
    "templates",
    "react",
    "typescript",
    "react",
    "click",
    "react",
    "spin",
    "react",
    "application",
    "working",
    "go",
    "ahead",
    "go",
    "ahead",
    "add",
    "additional",
    "things",
    "hello",
    "already",
    "programming",
    "react",
    "probably",
    "quickest",
    "way",
    "could",
    "also",
    "go",
    "things",
    "like",
    "kind",
    "meta",
    "framework",
    "sitting",
    "around",
    "react",
    "go",
    "create",
    "react",
    "app",
    "even",
    "going",
    "go",
    "possibilities",
    "know",
    "lot",
    "different",
    "options",
    "one",
    "going",
    "choose",
    "actually",
    "recommended",
    "really",
    "documentation",
    "would",
    "see",
    "go",
    "react",
    "quick",
    "start",
    "going",
    "give",
    "idea",
    "start",
    "start",
    "new",
    "react",
    "project",
    "go",
    "section",
    "says",
    "learning",
    "react",
    "recommend",
    "create",
    "react",
    "app",
    "unfortunate",
    "thing",
    "create",
    "react",
    "app",
    "know",
    "alternatives",
    "kind",
    "spin",
    "get",
    "understand",
    "happening",
    "behind",
    "scenes",
    "really",
    "understand",
    "react",
    "really",
    "core",
    "approach",
    "going",
    "take",
    "actually",
    "lot",
    "similar",
    "code",
    "sandbox",
    "sets",
    "see",
    "code",
    "sandbox",
    "go",
    "see",
    "file",
    "right",
    "actually",
    "creating",
    "root",
    "element",
    "dom",
    "using",
    "react",
    "helper",
    "methods",
    "basically",
    "render",
    "react",
    "application",
    "root",
    "element",
    "specified",
    "react",
    "use",
    "gets",
    "us",
    "lot",
    "closer",
    "react",
    "core",
    "going",
    "start",
    "might",
    "notice",
    "files",
    "pane",
    "know",
    "kind",
    "small",
    "let",
    "make",
    "bigger",
    "going",
    "see",
    "sort",
    "build",
    "tools",
    "going",
    "going",
    "see",
    "webpack",
    "anything",
    "like",
    "works",
    "unfortunately",
    "also",
    "makes",
    "abstraction",
    "react",
    "makes",
    "really",
    "understand",
    "going",
    "going",
    "start",
    "right",
    "basic",
    "level",
    "also",
    "going",
    "kind",
    "spin",
    "build",
    "tools",
    "understand",
    "taking",
    "jsx",
    "converting",
    "javascript",
    "bundling",
    "one",
    "file",
    "including",
    "purpose",
    "video",
    "primarily",
    "show",
    "take",
    "vanilla",
    "javascript",
    "application",
    "port",
    "react",
    "show",
    "problems",
    "react",
    "solving",
    "need",
    "basically",
    "everything",
    "scratch",
    "consider",
    "learning",
    "opportunity",
    "much",
    "hey",
    "quickly",
    "get",
    "react",
    "application",
    "working",
    "furthermore",
    "approach",
    "going",
    "take",
    "video",
    "would",
    "recommend",
    "use",
    "create",
    "production",
    "ready",
    "app",
    "gon",
    "na",
    "know",
    "deploy",
    "work",
    "ton",
    "people",
    "kind",
    "minimal",
    "setup",
    "could",
    "possibly",
    "great",
    "smaller",
    "projects",
    "people",
    "would",
    "probably",
    "disagree",
    "think",
    "probably",
    "best",
    "bet",
    "terms",
    "production",
    "ready",
    "react",
    "framework",
    "basically",
    "react",
    "meta",
    "framework",
    "takes",
    "lot",
    "common",
    "things",
    "might",
    "react",
    "like",
    "managing",
    "images",
    "routing",
    "kind",
    "stuff",
    "different",
    "rendering",
    "methods",
    "comes",
    "box",
    "ready",
    "go",
    "would",
    "check",
    "wanting",
    "build",
    "something",
    "production",
    "anyways",
    "going",
    "get",
    "distracted",
    "let",
    "get",
    "started",
    "building",
    "react",
    "app",
    "first",
    "step",
    "project",
    "set",
    "initial",
    "know",
    "get",
    "working",
    "development",
    "development",
    "mode",
    "basically",
    "go",
    "browser",
    "anytime",
    "code",
    "changes",
    "update",
    "application",
    "first",
    "step",
    "way",
    "react",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "folder",
    "called",
    "live",
    "react",
    "refactor",
    "folder",
    "structure",
    "going",
    "public",
    "folder",
    "going",
    "like",
    "public",
    "static",
    "assets",
    "serve",
    "also",
    "src",
    "source",
    "folder",
    "react",
    "application",
    "components",
    "going",
    "go",
    "public",
    "folder",
    "actually",
    "file",
    "going",
    "go",
    "static",
    "file",
    "really",
    "nothing",
    "dynamic",
    "html",
    "serve",
    "directly",
    "let",
    "go",
    "ahead",
    "copy",
    "go",
    "back",
    "vanilla",
    "refactor",
    "familiar",
    "watching",
    "video",
    "copy",
    "paste",
    "public",
    "directory",
    "react",
    "building",
    "things",
    "different",
    "paradigms",
    "including",
    "html",
    "index",
    "file",
    "going",
    "creating",
    "components",
    "deal",
    "html",
    "therefore",
    "actually",
    "strip",
    "lot",
    "stuff",
    "let",
    "take",
    "pretty",
    "much",
    "body",
    "content",
    "delete",
    "second",
    "thing",
    "going",
    "change",
    "title",
    "going",
    "react",
    "refactor",
    "moment",
    "going",
    "comment",
    "script",
    "save",
    "put",
    "little",
    "text",
    "hello",
    "world",
    "basic",
    "html",
    "document",
    "see",
    "bottom",
    "right",
    "corner",
    "using",
    "live",
    "server",
    "talked",
    "prior",
    "videos",
    "vs",
    "code",
    "extension",
    "set",
    "running",
    "port",
    "5500",
    "actually",
    "looking",
    "vanilla",
    "refactor",
    "go",
    "back",
    "base",
    "see",
    "look",
    "live",
    "react",
    "refactor",
    "go",
    "public",
    "directory",
    "hello",
    "world",
    "document",
    "wanted",
    "connect",
    "styles",
    "see",
    "style",
    "sheet",
    "left",
    "previous",
    "project",
    "referencing",
    "css",
    "directory",
    "react",
    "refactor",
    "going",
    "name",
    "something",
    "little",
    "differently",
    "going",
    "put",
    "new",
    "file",
    "called",
    "reason",
    "call",
    "globals",
    "react",
    "able",
    "kind",
    "scope",
    "css",
    "per",
    "component",
    "rather",
    "per",
    "whole",
    "project",
    "naming",
    "convention",
    "using",
    "make",
    "explicit",
    "anything",
    "put",
    "global",
    "css",
    "going",
    "apply",
    "everything",
    "use",
    "every",
    "component",
    "make",
    "putting",
    "start",
    "us",
    "going",
    "go",
    "vanilla",
    "refactor",
    "copy",
    "everything",
    "paste",
    "eventually",
    "move",
    "stuff",
    "globals",
    "file",
    "component",
    "specific",
    "css",
    "files",
    "going",
    "update",
    "path",
    "going",
    "save",
    "go",
    "back",
    "browser",
    "see",
    "hello",
    "world",
    "pretty",
    "small",
    "also",
    "correct",
    "background",
    "color",
    "know",
    "css",
    "file",
    "connected",
    "looking",
    "document",
    "react",
    "application",
    "yet",
    "nothing",
    "tells",
    "us",
    "react",
    "order",
    "actually",
    "convert",
    "react",
    "application",
    "need",
    "javascript",
    "controlled",
    "react",
    "therefore",
    "need",
    "script",
    "tag",
    "going",
    "create",
    "something",
    "called",
    "entry",
    "point",
    "might",
    "see",
    "called",
    "know",
    "entry",
    "point",
    "could",
    "named",
    "pretty",
    "much",
    "whatever",
    "source",
    "folder",
    "going",
    "explicit",
    "call",
    "file",
    "going",
    "initialize",
    "react",
    "going",
    "back",
    "code",
    "sandbox",
    "shown",
    "little",
    "bit",
    "earlier",
    "see",
    "pattern",
    "right",
    "code",
    "sandbox",
    "basically",
    "importing",
    "react",
    "importing",
    "react",
    "dom",
    "client",
    "something",
    "actually",
    "find",
    "react",
    "documentation",
    "go",
    "add",
    "react",
    "website",
    "think",
    "bottom",
    "run",
    "jss",
    "jsx",
    "preprocessor",
    "let",
    "see",
    "somewhere",
    "right",
    "see",
    "know",
    "calling",
    "create",
    "root",
    "root",
    "dot",
    "render",
    "really",
    "called",
    "explicitly",
    "little",
    "bit",
    "unfortunate",
    "kind",
    "shows",
    "know",
    "might",
    "know",
    "anyways",
    "going",
    "write",
    "file",
    "first",
    "thing",
    "import",
    "strict",
    "mode",
    "react",
    "reason",
    "basically",
    "parses",
    "code",
    "finds",
    "sorts",
    "mistakes",
    "might",
    "make",
    "writing",
    "react",
    "application",
    "good",
    "practice",
    "get",
    "strict",
    "mode",
    "might",
    "say",
    "well",
    "importing",
    "react",
    "even",
    "included",
    "node",
    "modules",
    "answer",
    "really",
    "tried",
    "going",
    "break",
    "point",
    "going",
    "install",
    "dependencies",
    "project",
    "let",
    "cd",
    "live",
    "react",
    "refactor",
    "going",
    "run",
    "yarn",
    "init",
    "dash",
    "accept",
    "defaults",
    "save",
    "package",
    "json",
    "folder",
    "going",
    "add",
    "required",
    "react",
    "dependencies",
    "really",
    "things",
    "need",
    "react",
    "yarn",
    "add",
    "react",
    "react",
    "dom",
    "let",
    "go",
    "ahead",
    "add",
    "see",
    "populate",
    "dependencies",
    "need",
    "create",
    "react",
    "application",
    "go",
    "back",
    "entry",
    "point",
    "work",
    "okay",
    "need",
    "import",
    "create",
    "root",
    "method",
    "react",
    "dom",
    "slash",
    "client",
    "basically",
    "insert",
    "react",
    "html",
    "document",
    "remember",
    "react",
    "bunch",
    "javascript",
    "knows",
    "basically",
    "manipulate",
    "dom",
    "render",
    "things",
    "actually",
    "know",
    "create",
    "html",
    "files",
    "put",
    "define",
    "root",
    "element",
    "going",
    "element",
    "select",
    "dom",
    "remember",
    "vanilla",
    "refactor",
    "go",
    "js",
    "go",
    "selecting",
    "elements",
    "via",
    "query",
    "selector",
    "query",
    "selector",
    "basically",
    "looking",
    "document",
    "selecting",
    "element",
    "well",
    "going",
    "exact",
    "thing",
    "going",
    "say",
    "document",
    "dot",
    "get",
    "element",
    "id",
    "query",
    "selector",
    "hashtag",
    "front",
    "select",
    "id",
    "little",
    "bit",
    "specific",
    "id",
    "assigned",
    "element",
    "going",
    "get",
    "element",
    "id",
    "going",
    "call",
    "react",
    "root",
    "get",
    "name",
    "well",
    "made",
    "going",
    "connect",
    "body",
    "need",
    "make",
    "div",
    "going",
    "give",
    "id",
    "call",
    "react",
    "root",
    "saying",
    "hey",
    "container",
    "div",
    "react",
    "find",
    "container",
    "div",
    "put",
    "application",
    "code",
    "right",
    "inside",
    "basically",
    "giving",
    "container",
    "render",
    "point",
    "selected",
    "root",
    "element",
    "going",
    "element",
    "create",
    "react",
    "root",
    "call",
    "root",
    "call",
    "create",
    "root",
    "function",
    "imported",
    "react",
    "dom",
    "client",
    "going",
    "pass",
    "root",
    "element",
    "selected",
    "react",
    "root",
    "finally",
    "call",
    "react",
    "dom",
    "specific",
    "method",
    "called",
    "render",
    "going",
    "render",
    "strict",
    "mode",
    "container",
    "using",
    "jsx",
    "going",
    "render",
    "strict",
    "mode",
    "going",
    "say",
    "hello",
    "world",
    "react",
    "arbitrary",
    "jsx",
    "code",
    "might",
    "notice",
    "dot",
    "js",
    "file",
    "could",
    "call",
    "dot",
    "jsx",
    "using",
    "jsx",
    "get",
    "javascript",
    "react",
    "vs",
    "code",
    "language",
    "mode",
    "give",
    "us",
    "better",
    "syntax",
    "highlight",
    "highlighting",
    "addition",
    "go",
    "basically",
    "transpile",
    "jsx",
    "js",
    "file",
    "extension",
    "allow",
    "us",
    "kind",
    "target",
    "file",
    "let",
    "save",
    "entry",
    "point",
    "let",
    "go",
    "keep",
    "script",
    "save",
    "point",
    "might",
    "say",
    "well",
    "okay",
    "right",
    "done",
    "initial",
    "setup",
    "react",
    "got",
    "react",
    "root",
    "div",
    "got",
    "entry",
    "selecting",
    "rendering",
    "react",
    "application",
    "within",
    "go",
    "browser",
    "live",
    "refactor",
    "let",
    "inspect",
    "inspect",
    "going",
    "show",
    "react",
    "root",
    "going",
    "anything",
    "within",
    "makes",
    "sense",
    "really",
    "think",
    "happening",
    "request",
    "right",
    "like",
    "server",
    "case",
    "local",
    "computer",
    "server",
    "serving",
    "file",
    "browser",
    "basically",
    "going",
    "happen",
    "browser",
    "going",
    "load",
    "path",
    "path",
    "going",
    "make",
    "get",
    "request",
    "server",
    "server",
    "going",
    "send",
    "back",
    "document",
    "browser",
    "going",
    "going",
    "read",
    "document",
    "going",
    "parse",
    "html",
    "going",
    "also",
    "parse",
    "script",
    "tag",
    "sees",
    "see",
    "got",
    "script",
    "tag",
    "injected",
    "live",
    "server",
    "anything",
    "application",
    "built",
    "missing",
    "well",
    "see",
    "html",
    "document",
    "aside",
    "live",
    "server",
    "script",
    "script",
    "code",
    "wrote",
    "entry",
    "living",
    "isolation",
    "right",
    "actually",
    "imported",
    "run",
    "within",
    "document",
    "yet",
    "therefore",
    "way",
    "select",
    "route",
    "render",
    "anything",
    "next",
    "option",
    "next",
    "guess",
    "might",
    "okay",
    "let",
    "uncomment",
    "script",
    "script",
    "go",
    "source",
    "slash",
    "entry",
    "point",
    "dot",
    "jsx",
    "right",
    "trying",
    "import",
    "script",
    "go",
    "browser",
    "obviously",
    "going",
    "work",
    "go",
    "console",
    "going",
    "get",
    "loading",
    "module",
    "blah",
    "blah",
    "mime",
    "type",
    "wrong",
    "going",
    "sorts",
    "problems",
    "reason",
    "jsx",
    "file",
    "one",
    "actual",
    "jsx",
    "going",
    "natively",
    "run",
    "inside",
    "browser",
    "might",
    "get",
    "stuff",
    "run",
    "could",
    "probably",
    "see",
    "worked",
    "let",
    "console",
    "log",
    "root",
    "element",
    "looks",
    "like",
    "even",
    "going",
    "work",
    "really",
    "care",
    "debug",
    "know",
    "good",
    "strategy",
    "first",
    "place",
    "pause",
    "video",
    "ask",
    "ca",
    "actually",
    "get",
    "javascript",
    "run",
    "inside",
    "browser",
    "script",
    "tag",
    "answer",
    "need",
    "transform",
    "code",
    "written",
    "jsx",
    "code",
    "vanilla",
    "javascript",
    "script",
    "put",
    "another",
    "file",
    "import",
    "file",
    "right",
    "watch",
    "prior",
    "video",
    "also",
    "linked",
    "description",
    "took",
    "vanilla",
    "javascript",
    "build",
    "refactored",
    "typescript",
    "might",
    "remember",
    "sort",
    "build",
    "step",
    "take",
    "typescript",
    "code",
    "valid",
    "browser",
    "compile",
    "typescript",
    "compiler",
    "valid",
    "javascript",
    "could",
    "run",
    "browser",
    "different",
    "necessarily",
    "compile",
    "think",
    "correct",
    "term",
    "transpile",
    "let",
    "actually",
    "go",
    "look",
    "transpile",
    "versus",
    "compile",
    "know",
    "compiling",
    "process",
    "taking",
    "source",
    "code",
    "written",
    "one",
    "language",
    "transforming",
    "another",
    "transpiling",
    "process",
    "taking",
    "source",
    "code",
    "written",
    "one",
    "language",
    "transforming",
    "another",
    "language",
    "similar",
    "level",
    "abstraction",
    "words",
    "real",
    "huge",
    "difference",
    "need",
    "get",
    "hung",
    "differences",
    "want",
    "take",
    "website",
    "documentation",
    "babel",
    "babel",
    "never",
    "know",
    "say",
    "home",
    "page",
    "zoom",
    "little",
    "bit",
    "see",
    "gives",
    "example",
    "put",
    "next",
    "generation",
    "javascript",
    "get",
    "browser",
    "compatible",
    "javascript",
    "words",
    "babble",
    "going",
    "go",
    "babel",
    "tool",
    "take",
    "sort",
    "javascript",
    "flavor",
    "work",
    "browser",
    "make",
    "work",
    "browser",
    "one",
    "things",
    "jsx",
    "come",
    "presets",
    "playground",
    "see",
    "using",
    "react",
    "preset",
    "knows",
    "know",
    "write",
    "jsx",
    "code",
    "write",
    "know",
    "something",
    "like",
    "regular",
    "p",
    "tag",
    "hello",
    "world",
    "close",
    "p",
    "tag",
    "see",
    "right",
    "using",
    "react",
    "library",
    "create",
    "new",
    "element",
    "dom",
    "render",
    "hello",
    "world",
    "text",
    "within",
    "could",
    "also",
    "wrap",
    "say",
    "div",
    "writing",
    "looks",
    "like",
    "html",
    "really",
    "jsx",
    "creating",
    "elements",
    "could",
    "probably",
    "think",
    "playground",
    "even",
    "write",
    "component",
    "function",
    "component",
    "instead",
    "isolated",
    "jsx",
    "return",
    "function",
    "oops",
    "format",
    "little",
    "bit",
    "better",
    "see",
    "worked",
    "returning",
    "javascript",
    "function",
    "returns",
    "create",
    "element",
    "calls",
    "could",
    "even",
    "render",
    "let",
    "make",
    "app",
    "want",
    "return",
    "component",
    "jsx",
    "component",
    "see",
    "going",
    "valid",
    "javascript",
    "dot",
    "js",
    "file",
    "could",
    "include",
    "file",
    "right",
    "totally",
    "valid",
    "put",
    "script",
    "tag",
    "right",
    "valid",
    "work",
    "babel",
    "hood",
    "running",
    "bunch",
    "code",
    "get",
    "state",
    "therefore",
    "going",
    "need",
    "intermediate",
    "step",
    "get",
    "point",
    "like",
    "many",
    "ways",
    "create",
    "react",
    "application",
    "also",
    "many",
    "ways",
    "transpile",
    "code",
    "babel",
    "option",
    "another",
    "option",
    "could",
    "use",
    "writing",
    "typescript",
    "hint",
    "actually",
    "going",
    "convert",
    "typescript",
    "minutes",
    "could",
    "use",
    "typescript",
    "compiler",
    "typescript",
    "compiler",
    "actually",
    "supports",
    "jsx",
    "could",
    "use",
    "babel",
    "could",
    "also",
    "use",
    "something",
    "like",
    "webpack",
    "build",
    "tool",
    "going",
    "know",
    "latest",
    "greatest",
    "tool",
    "chain",
    "mainly",
    "educational",
    "purposes",
    "go",
    "documentation",
    "let",
    "go",
    "webpack",
    "docs",
    "dealing",
    "bundler",
    "bundle",
    "code",
    "purpose",
    "using",
    "webpack",
    "take",
    "bunch",
    "different",
    "javascript",
    "files",
    "squash",
    "one",
    "javascript",
    "file",
    "call",
    "bundle",
    "really",
    "want",
    "understand",
    "need",
    "bundler",
    "written",
    "post",
    "referenced",
    "couple",
    "times",
    "point",
    "throughout",
    "video",
    "series",
    "scripps",
    "versus",
    "common",
    "js",
    "umd",
    "amd",
    "es6",
    "modules",
    "come",
    "bottom",
    "let",
    "see",
    "last",
    "step",
    "module",
    "bundlers",
    "go",
    "explain",
    "need",
    "module",
    "bundler",
    "first",
    "place",
    "recommend",
    "reading",
    "short",
    "post",
    "get",
    "better",
    "understanding",
    "goal",
    "basically",
    "take",
    "entry",
    "point",
    "jsx",
    "file",
    "going",
    "many",
    "many",
    "jsx",
    "files",
    "different",
    "components",
    "instead",
    "coming",
    "copying",
    "importing",
    "every",
    "single",
    "script",
    "transpiled",
    "jsx",
    "js",
    "going",
    "get",
    "confusing",
    "goal",
    "going",
    "one",
    "file",
    "going",
    "come",
    "public",
    "directory",
    "going",
    "called",
    "need",
    "type",
    "module",
    "anymore",
    "using",
    "react",
    "code",
    "need",
    "worry",
    "end",
    "state",
    "actually",
    "need",
    "update",
    "remember",
    "actually",
    "public",
    "directory",
    "need",
    "reference",
    "relatively",
    "output",
    "keyword",
    "output",
    "created",
    "yet",
    "public",
    "folder",
    "sit",
    "next",
    "question",
    "becomes",
    "get",
    "get",
    "compile",
    "public",
    "folder",
    "answer",
    "webpack",
    "something",
    "similar",
    "kind",
    "gone",
    "little",
    "bit",
    "style",
    "matter",
    "purposes",
    "educational",
    "understand",
    "going",
    "hood",
    "react",
    "set",
    "first",
    "place",
    "hear",
    "sorts",
    "things",
    "like",
    "oh",
    "webpacks",
    "outdated",
    "ultimately",
    "tons",
    "projects",
    "still",
    "highly",
    "dependent",
    "many",
    "years",
    "come",
    "get",
    "spooked",
    "know",
    "anyone",
    "saying",
    "irrelevant",
    "relevant",
    "concepts",
    "learn",
    "even",
    "relevant",
    "let",
    "get",
    "started",
    "lot",
    "documentation",
    "lots",
    "different",
    "configuration",
    "concepts",
    "going",
    "go",
    "really",
    "need",
    "90",
    "purposes",
    "start",
    "writing",
    "configuration",
    "come",
    "back",
    "documentation",
    "point",
    "individual",
    "options",
    "using",
    "order",
    "start",
    "webpack",
    "project",
    "need",
    "initialize",
    "configuration",
    "file",
    "go",
    "documentation",
    "something",
    "configuration",
    "introductory",
    "configuration",
    "see",
    "called",
    "let",
    "copy",
    "let",
    "copy",
    "default",
    "make",
    "base",
    "directory",
    "file",
    "let",
    "copy",
    "basic",
    "example",
    "bear",
    "little",
    "bit",
    "next",
    "couple",
    "minutes",
    "going",
    "get",
    "slightly",
    "confusing",
    "welcome",
    "skip",
    "section",
    "want",
    "time",
    "video",
    "want",
    "skip",
    "details",
    "get",
    "started",
    "building",
    "react",
    "application",
    "would",
    "highly",
    "recommend",
    "going",
    "section",
    "really",
    "good",
    "thing",
    "understand",
    "going",
    "serve",
    "rest",
    "know",
    "developer",
    "lifetime",
    "understanding",
    "stuff",
    "probably",
    "wo",
    "touch",
    "good",
    "know",
    "going",
    "hood",
    "let",
    "take",
    "line",
    "line",
    "first",
    "mode",
    "development",
    "go",
    "concepts",
    "let",
    "go",
    "environment",
    "right",
    "says",
    "mode",
    "option",
    "development",
    "production",
    "none",
    "going",
    "enable",
    "certain",
    "optimizations",
    "done",
    "production",
    "webpack",
    "certain",
    "things",
    "believe",
    "like",
    "like",
    "minifying",
    "code",
    "stuff",
    "like",
    "depending",
    "environment",
    "development",
    "make",
    "sure",
    "runs",
    "depending",
    "actual",
    "environment",
    "let",
    "say",
    "deploying",
    "somewhere",
    "know",
    "env",
    "going",
    "equal",
    "production",
    "deploy",
    "server",
    "default",
    "know",
    "deployment",
    "site",
    "cloud",
    "host",
    "going",
    "assign",
    "process",
    "node",
    "env",
    "going",
    "use",
    "otherwise",
    "going",
    "use",
    "development",
    "words",
    "development",
    "fallback",
    "going",
    "look",
    "node",
    "env",
    "determine",
    "use",
    "mode",
    "course",
    "assumes",
    "allowed",
    "assign",
    "development",
    "production",
    "node",
    "env",
    "know",
    "like",
    "staging",
    "environment",
    "would",
    "work",
    "time",
    "either",
    "production",
    "development",
    "work",
    "entry",
    "little",
    "need",
    "go",
    "docs",
    "going",
    "file",
    "webpack",
    "start",
    "start",
    "reading",
    "file",
    "trace",
    "imports",
    "come",
    "file",
    "kind",
    "walk",
    "code",
    "tree",
    "find",
    "relevant",
    "files",
    "needs",
    "basically",
    "bundle",
    "case",
    "going",
    "root",
    "folder",
    "need",
    "look",
    "source",
    "folder",
    "entry",
    "point",
    "jsx",
    "say",
    "relative",
    "source",
    "going",
    "entry",
    "point",
    "output",
    "also",
    "somewhat",
    "going",
    "output",
    "single",
    "file",
    "going",
    "call",
    "going",
    "put",
    "dist",
    "director",
    "going",
    "rename",
    "instead",
    "dist",
    "stands",
    "distribution",
    "common",
    "place",
    "output",
    "build",
    "output",
    "call",
    "public",
    "reason",
    "got",
    "public",
    "folder",
    "want",
    "file",
    "get",
    "output",
    "public",
    "would",
    "argue",
    "kind",
    "want",
    "separate",
    "concerns",
    "maybe",
    "want",
    "output",
    "dist",
    "copy",
    "css",
    "dist",
    "kind",
    "isolated",
    "know",
    "build",
    "output",
    "project",
    "pretty",
    "simple",
    "makes",
    "sense",
    "output",
    "public",
    "directory",
    "let",
    "save",
    "save",
    "entry",
    "point",
    "question",
    "becomes",
    "well",
    "actually",
    "use",
    "webpack",
    "well",
    "could",
    "install",
    "webpack",
    "globally",
    "path",
    "better",
    "install",
    "webpack",
    "pin",
    "specific",
    "version",
    "project",
    "going",
    "going",
    "say",
    "yarn",
    "add",
    "going",
    "add",
    "dash",
    "development",
    "dependency",
    "remember",
    "webpack",
    "look",
    "code",
    "bundle",
    "something",
    "actually",
    "run",
    "browser",
    "need",
    "done",
    "job",
    "run",
    "code",
    "output",
    "deal",
    "anything",
    "else",
    "add",
    "webpack",
    "go",
    "ahead",
    "going",
    "go",
    "package",
    "json",
    "going",
    "add",
    "scripts",
    "necessary",
    "convenience",
    "something",
    "want",
    "add",
    "build",
    "script",
    "run",
    "say",
    "yarn",
    "build",
    "going",
    "run",
    "script",
    "right",
    "want",
    "look",
    "development",
    "dependencies",
    "run",
    "webpack",
    "save",
    "going",
    "happen",
    "run",
    "yarn",
    "build",
    "yarn",
    "build",
    "going",
    "invoke",
    "webpack",
    "binary",
    "installed",
    "webpack",
    "automatically",
    "knows",
    "look",
    "file",
    "root",
    "directory",
    "config",
    "basically",
    "told",
    "binary",
    "look",
    "entry",
    "point",
    "read",
    "code",
    "output",
    "run",
    "really",
    "given",
    "instructions",
    "like",
    "let",
    "try",
    "run",
    "yarn",
    "build",
    "saying",
    "need",
    "install",
    "webpack",
    "client",
    "guess",
    "forgotten",
    "say",
    "yes",
    "going",
    "actually",
    "update",
    "package",
    "json",
    "see",
    "dev",
    "dependencies",
    "sorry",
    "final",
    "one",
    "live",
    "react",
    "refactor",
    "webpack",
    "webpack",
    "client",
    "point",
    "run",
    "yarn",
    "build",
    "see",
    "going",
    "get",
    "air",
    "sort",
    "says",
    "module",
    "parse",
    "failed",
    "unexpected",
    "token",
    "may",
    "need",
    "appropriate",
    "loader",
    "handle",
    "file",
    "type",
    "currently",
    "loaders",
    "configured",
    "process",
    "file",
    "complaining",
    "jsx",
    "written",
    "go",
    "entry",
    "point",
    "default",
    "webpack",
    "know",
    "deal",
    "jsx",
    "know",
    "transpile",
    "right",
    "babel",
    "come",
    "going",
    "back",
    "babel",
    "talked",
    "job",
    "take",
    "code",
    "turn",
    "code",
    "therefore",
    "need",
    "add",
    "something",
    "called",
    "loader",
    "webpack",
    "go",
    "documentation",
    "says",
    "loaders",
    "transformations",
    "applied",
    "source",
    "code",
    "module",
    "allow",
    "files",
    "import",
    "load",
    "going",
    "save",
    "us",
    "quite",
    "bit",
    "pain",
    "going",
    "show",
    "get",
    "working",
    "react",
    "completely",
    "honest",
    "confusing",
    "stuff",
    "would",
    "spend",
    "whole",
    "lot",
    "time",
    "beating",
    "head",
    "wall",
    "try",
    "understand",
    "super",
    "deep",
    "level",
    "overall",
    "goal",
    "understand",
    "process",
    "code",
    "going",
    "necessarily",
    "implementation",
    "details",
    "need",
    "add",
    "module",
    "property",
    "module",
    "valid",
    "config",
    "say",
    "rules",
    "give",
    "array",
    "rules",
    "rules",
    "going",
    "basically",
    "say",
    "like",
    "hey",
    "see",
    "certain",
    "type",
    "file",
    "know",
    "coming",
    "entry",
    "point",
    "actually",
    "know",
    "look",
    "transpile",
    "bundle",
    "first",
    "rule",
    "going",
    "going",
    "test",
    "going",
    "regular",
    "expression",
    "handing",
    "going",
    "say",
    "see",
    "file",
    "jsx",
    "extension",
    "end",
    "go",
    "ahead",
    "apply",
    "rule",
    "see",
    "anything",
    "node",
    "modules",
    "exclude",
    "want",
    "put",
    "bundle",
    "finally",
    "going",
    "use",
    "specific",
    "loader",
    "loader",
    "going",
    "called",
    "babel",
    "loader",
    "okay",
    "right",
    "importing",
    "something",
    "external",
    "need",
    "install",
    "dev",
    "dependency",
    "go",
    "babel",
    "let",
    "getting",
    "got",
    "lot",
    "tabs",
    "open",
    "point",
    "let",
    "open",
    "one",
    "babble",
    "docs",
    "let",
    "go",
    "go",
    "presets",
    "see",
    "preset",
    "react",
    "gives",
    "really",
    "confusing",
    "stuff",
    "okay",
    "get",
    "list",
    "different",
    "loaders",
    "use",
    "let",
    "start",
    "babble",
    "loader",
    "click",
    "says",
    "disclaimer",
    "package",
    "maintained",
    "community",
    "members",
    "need",
    "installed",
    "install",
    "command",
    "need",
    "install",
    "babble",
    "loader",
    "babble",
    "core",
    "preset",
    "also",
    "happen",
    "know",
    "go",
    "preset",
    "react",
    "need",
    "well",
    "going",
    "kind",
    "combine",
    "one",
    "command",
    "clear",
    "terminal",
    "going",
    "developer",
    "dependencies",
    "remember",
    "transpiling",
    "code",
    "need",
    "grab",
    "babel",
    "loader",
    "webpack",
    "going",
    "grab",
    "babel",
    "specific",
    "packages",
    "need",
    "core",
    "module",
    "need",
    "preset",
    "basically",
    "kind",
    "normalize",
    "different",
    "ecmascript",
    "versions",
    "whatnot",
    "run",
    "javascript",
    "browsers",
    "finally",
    "babel",
    "preset",
    "react",
    "install",
    "go",
    "package",
    "json",
    "see",
    "added",
    "right",
    "come",
    "back",
    "webpack",
    "config",
    "going",
    "work",
    "installed",
    "give",
    "options",
    "going",
    "go",
    "lot",
    "depth",
    "advanced",
    "side",
    "assume",
    "going",
    "work",
    "first",
    "need",
    "give",
    "preset",
    "babel",
    "preset",
    "make",
    "sure",
    "know",
    "different",
    "versions",
    "ecmascript",
    "es3",
    "456",
    "2016",
    "blah",
    "blah",
    "kind",
    "normalizes",
    "js",
    "loaded",
    "going",
    "work",
    "browsers",
    "going",
    "give",
    "array",
    "give",
    "babel",
    "babel",
    "preset",
    "react",
    "really",
    "important",
    "need",
    "give",
    "run",
    "time",
    "automatic",
    "reason",
    "need",
    "come",
    "entry",
    "point",
    "going",
    "need",
    "automatically",
    "infers",
    "react",
    "part",
    "application",
    "explicitly",
    "import",
    "react",
    "every",
    "time",
    "want",
    "use",
    "loader",
    "set",
    "know",
    "whole",
    "blob",
    "bit",
    "confusing",
    "zooming",
    "point",
    "saying",
    "like",
    "hey",
    "anytime",
    "see",
    "jsx",
    "file",
    "came",
    "know",
    "result",
    "looking",
    "entry",
    "point",
    "words",
    "anytime",
    "see",
    "jsx",
    "file",
    "project",
    "go",
    "ahead",
    "use",
    "babble",
    "loader",
    "make",
    "sure",
    "use",
    "preset",
    "react",
    "basically",
    "looking",
    "sandbox",
    "takes",
    "creates",
    "might",
    "able",
    "build",
    "apps",
    "yarn",
    "build",
    "remember",
    "going",
    "run",
    "webpack",
    "script",
    "see",
    "got",
    "errors",
    "good",
    "thing",
    "100",
    "sure",
    "worked",
    "yet",
    "see",
    "public",
    "folder",
    "bunch",
    "ugly",
    "code",
    "know",
    "transpiled",
    "something",
    "want",
    "actually",
    "read",
    "get",
    "let",
    "add",
    "dot",
    "get",
    "ignore",
    "project",
    "added",
    "developer",
    "dependencies",
    "build",
    "output",
    "stuff",
    "belong",
    "source",
    "code",
    "first",
    "let",
    "look",
    "node",
    "modules",
    "ignore",
    "going",
    "probably",
    "best",
    "practice",
    "way",
    "going",
    "look",
    "public",
    "directory",
    "ignore",
    "anything",
    "called",
    "look",
    "lot",
    "gibberish",
    "belong",
    "source",
    "control",
    "output",
    "build",
    "includes",
    "pretty",
    "much",
    "whole",
    "react",
    "library",
    "want",
    "put",
    "github",
    "repository",
    "ignore",
    "let",
    "make",
    "sure",
    "working",
    "see",
    "sorry",
    "actually",
    "leftover",
    "code",
    "typescript",
    "refactor",
    "prior",
    "video",
    "main",
    "point",
    "look",
    "visual",
    "studio",
    "code",
    "ignored",
    "actually",
    "grayed",
    "little",
    "bit",
    "compared",
    "files",
    "folders",
    "quick",
    "trick",
    "know",
    "whether",
    "file",
    "ignored",
    "correct",
    "ultimate",
    "test",
    "visit",
    "importing",
    "output",
    "using",
    "entry",
    "point",
    "source",
    "work",
    "let",
    "go",
    "browser",
    "close",
    "leave",
    "open",
    "reference",
    "see",
    "right",
    "got",
    "ta",
    "zoom",
    "bunch",
    "hello",
    "worldreact",
    "something",
    "worked",
    "look",
    "entry",
    "point",
    "see",
    "rendering",
    "hello",
    "world",
    "react",
    "know",
    "webpack",
    "config",
    "worked",
    "able",
    "render",
    "jsx",
    "browser",
    "go",
    "ahead",
    "inspect",
    "see",
    "react",
    "root",
    "p",
    "tag",
    "added",
    "one",
    "problem",
    "still",
    "go",
    "back",
    "code",
    "say",
    "zach",
    "something",
    "like",
    "save",
    "well",
    "let",
    "refresh",
    "page",
    "uh",
    "oh",
    "actually",
    "working",
    "reason",
    "every",
    "time",
    "want",
    "add",
    "something",
    "need",
    "rebuild",
    "application",
    "need",
    "run",
    "yarn",
    "build",
    "going",
    "compile",
    "everything",
    "bundle",
    "see",
    "hello",
    "world",
    "zach",
    "obviously",
    "poor",
    "experience",
    "developer",
    "want",
    "know",
    "want",
    "come",
    "say",
    "yarn",
    "build",
    "every",
    "time",
    "make",
    "change",
    "webpack",
    "dev",
    "server",
    "comes",
    "basically",
    "going",
    "look",
    "webpack",
    "config",
    "change",
    "file",
    "included",
    "going",
    "rerun",
    "build",
    "step",
    "output",
    "bundle",
    "going",
    "served",
    "believe",
    "used",
    "easy",
    "basically",
    "add",
    "one",
    "extra",
    "command",
    "instead",
    "build",
    "going",
    "give",
    "dev",
    "command",
    "development",
    "command",
    "going",
    "say",
    "webpacks",
    "serve",
    "also",
    "going",
    "add",
    "build",
    "production",
    "script",
    "know",
    "talked",
    "config",
    "got",
    "process",
    "node",
    "env",
    "want",
    "build",
    "production",
    "could",
    "pass",
    "something",
    "like",
    "set",
    "environment",
    "variable",
    "call",
    "webpack",
    "ran",
    "yarn",
    "build",
    "prod",
    "going",
    "apply",
    "optimizations",
    "everything",
    "look",
    "also",
    "see",
    "license",
    "emitted",
    "would",
    "probably",
    "good",
    "include",
    "let",
    "let",
    "go",
    "ahead",
    "say",
    "bundle",
    "include",
    "license",
    "well",
    "look",
    "optimized",
    "like",
    "everything",
    "minified",
    "know",
    "squashed",
    "together",
    "makes",
    "smaller",
    "bundle",
    "load",
    "wire",
    "http",
    "request",
    "yarn",
    "build",
    "going",
    "create",
    "something",
    "lots",
    "spaces",
    "optimized",
    "yarn",
    "build",
    "prod",
    "going",
    "optimize",
    "anyways",
    "want",
    "run",
    "development",
    "mode",
    "let",
    "run",
    "yarn",
    "dev",
    "going",
    "run",
    "webpack",
    "serve",
    "command",
    "going",
    "say",
    "using",
    "command",
    "need",
    "webpack",
    "dev",
    "server",
    "package",
    "accept",
    "see",
    "added",
    "bottom",
    "see",
    "running",
    "process",
    "waiting",
    "changes",
    "go",
    "back",
    "see",
    "hello",
    "world",
    "zach",
    "go",
    "entry",
    "point",
    "jsx",
    "let",
    "remove",
    "save",
    "see",
    "refreshed",
    "reloaded",
    "refresh",
    "page",
    "anything",
    "ah",
    "thinking",
    "whatsoever",
    "totally",
    "totally",
    "messed",
    "try",
    "go",
    "directly",
    "browser",
    "running",
    "live",
    "server",
    "localhost",
    "5500",
    "going",
    "get",
    "static",
    "contents",
    "public",
    "directory",
    "look",
    "output",
    "webpack",
    "dev",
    "server",
    "says",
    "project",
    "running",
    "localhost",
    "kill",
    "live",
    "server",
    "point",
    "close",
    "server",
    "reload",
    "page",
    "got",
    "way",
    "zoomed",
    "reload",
    "page",
    "going",
    "say",
    "unable",
    "connect",
    "go",
    "localhost",
    "8080",
    "see",
    "hello",
    "world",
    "react",
    "working",
    "go",
    "back",
    "make",
    "change",
    "save",
    "going",
    "hot",
    "reload",
    "update",
    "browser",
    "automatically",
    "mistake",
    "made",
    "trying",
    "look",
    "static",
    "contents",
    "live",
    "server",
    "need",
    "go",
    "different",
    "port",
    "next",
    "step",
    "replace",
    "content",
    "app",
    "come",
    "files",
    "next",
    "entry",
    "point",
    "let",
    "call",
    "going",
    "return",
    "basic",
    "application",
    "wrapper",
    "going",
    "consolidate",
    "logic",
    "go",
    "ahead",
    "use",
    "es6",
    "modules",
    "export",
    "default",
    "function",
    "called",
    "app",
    "return",
    "div",
    "say",
    "app",
    "import",
    "entry",
    "point",
    "import",
    "app",
    "app",
    "replace",
    "content",
    "jsx",
    "element",
    "like",
    "getting",
    "error",
    "think",
    "might",
    "need",
    "say",
    "yep",
    "needed",
    "could",
    "resolve",
    "without",
    "extension",
    "believe",
    "happens",
    "webpack",
    "config",
    "know",
    "kind",
    "parse",
    "import",
    "extension",
    "entry",
    "point",
    "basically",
    "done",
    "look",
    "anymore",
    "set",
    "going",
    "working",
    "let",
    "go",
    "make",
    "sure",
    "works",
    "app",
    "let",
    "connect",
    "per",
    "component",
    "styles",
    "going",
    "use",
    "vanilla",
    "css",
    "one",
    "way",
    "using",
    "css",
    "modules",
    "say",
    "let",
    "go",
    "ahead",
    "select",
    "everything",
    "app",
    "make",
    "color",
    "red",
    "going",
    "work",
    "default",
    "look",
    "app",
    "import",
    "import",
    "see",
    "errors",
    "able",
    "compile",
    "specified",
    "css",
    "loader",
    "right",
    "entry",
    "point",
    "going",
    "eventually",
    "make",
    "going",
    "import",
    "rule",
    "right",
    "looking",
    "jsx",
    "files",
    "go",
    "back",
    "documentation",
    "webpack",
    "right",
    "go",
    "back",
    "loaders",
    "see",
    "different",
    "different",
    "categories",
    "one",
    "styling",
    "style",
    "loader",
    "add",
    "exports",
    "module",
    "style",
    "adopt",
    "dom",
    "css",
    "loader",
    "load",
    "css",
    "file",
    "resolved",
    "imports",
    "return",
    "css",
    "code",
    "going",
    "need",
    "packages",
    "install",
    "let",
    "come",
    "terminal",
    "open",
    "another",
    "one",
    "actually",
    "let",
    "cut",
    "cut",
    "server",
    "add",
    "developer",
    "dependency",
    "call",
    "got",
    "get",
    "style",
    "loader",
    "css",
    "loader",
    "done",
    "add",
    "another",
    "rule",
    "remember",
    "rules",
    "going",
    "array",
    "specify",
    "css",
    "rule",
    "going",
    "test",
    "look",
    "dot",
    "css",
    "files",
    "looking",
    "find",
    "going",
    "use",
    "style",
    "loader",
    "css",
    "loader",
    "let",
    "save",
    "final",
    "rule",
    "add",
    "let",
    "run",
    "yarn",
    "dev",
    "see",
    "everything",
    "compiled",
    "successfully",
    "go",
    "back",
    "react",
    "refactor",
    "refresh",
    "refresh",
    "first",
    "time",
    "restarted",
    "server",
    "red",
    "change",
    "green",
    "going",
    "hot",
    "reload",
    "everything",
    "going",
    "green",
    "point",
    "entire",
    "webpack",
    "configuration",
    "done",
    "entry",
    "point",
    "react",
    "app",
    "setup",
    "importing",
    "bundle",
    "know",
    "basically",
    "compiling",
    "bundling",
    "together",
    "help",
    "webpack",
    "babel",
    "know",
    "spent",
    "solid",
    "amount",
    "time",
    "setting",
    "react",
    "app",
    "first",
    "place",
    "hope",
    "educational",
    "given",
    "better",
    "sense",
    "going",
    "hood",
    "basically",
    "create",
    "react",
    "app",
    "know",
    "frameworks",
    "lets",
    "set",
    "react",
    "app",
    "version",
    "hood",
    "abstracted",
    "away",
    "oftentimes",
    "understand",
    "react",
    "actually",
    "core",
    "level",
    "one",
    "thing",
    "going",
    "kind",
    "debated",
    "little",
    "bit",
    "want",
    "build",
    "react",
    "app",
    "typescript",
    "rather",
    "know",
    "whole",
    "another",
    "additional",
    "video",
    "refactor",
    "typescript",
    "think",
    "using",
    "typescript",
    "really",
    "awesome",
    "especially",
    "react",
    "apps",
    "across",
    "stack",
    "going",
    "difficult",
    "translate",
    "typescript",
    "also",
    "give",
    "better",
    "idea",
    "translate",
    "vanilla",
    "typescript",
    "build",
    "step",
    "perspective",
    "interested",
    "ca",
    "wait",
    "get",
    "started",
    "timestamps",
    "video",
    "skip",
    "build",
    "actually",
    "start",
    "building",
    "application",
    "know",
    "translating",
    "vanilla",
    "javascript",
    "react",
    "let",
    "cut",
    "server",
    "also",
    "add",
    "typescript",
    "branch",
    "main",
    "branch",
    "repository",
    "description",
    "follows",
    "basically",
    "final",
    "code",
    "combined",
    "video",
    "find",
    "vanilla",
    "javascript",
    "react",
    "app",
    "main",
    "branch",
    "one",
    "building",
    "video",
    "end",
    "typescript",
    "branch",
    "leave",
    "description",
    "kind",
    "label",
    "clear",
    "watched",
    "prior",
    "video",
    "converted",
    "vanilla",
    "javascript",
    "app",
    "basically",
    "vanilla",
    "typescript",
    "app",
    "go",
    "watch",
    "cover",
    "lot",
    "basic",
    "concepts",
    "going",
    "gloss",
    "next",
    "minutes",
    "leave",
    "description",
    "first",
    "thing",
    "need",
    "install",
    "typescript",
    "add",
    "developer",
    "dependency",
    "run",
    "yarn",
    "tsc",
    "compiler",
    "run",
    "init",
    "create",
    "ts",
    "config",
    "although",
    "missed",
    "something",
    "knit",
    "dash",
    "dash",
    "init",
    "creates",
    "tsconfig",
    "dot",
    "json",
    "file",
    "different",
    "options",
    "going",
    "go",
    "ahead",
    "copy",
    "final",
    "one",
    "going",
    "save",
    "us",
    "time",
    "okay",
    "basics",
    "um",
    "things",
    "point",
    "pretty",
    "much",
    "prior",
    "video",
    "point",
    "targeting",
    "es6",
    "version",
    "javascript",
    "build",
    "output",
    "one",
    "thing",
    "left",
    "purpose",
    "property",
    "called",
    "jsx",
    "let",
    "go",
    "typescript",
    "documentation",
    "typescript",
    "docs",
    "go",
    "reference",
    "configuration",
    "file",
    "really",
    "sure",
    "would",
    "typescript",
    "tooling",
    "reference",
    "let",
    "search",
    "config",
    "writing",
    "configuration",
    "file",
    "gosh",
    "indirect",
    "want",
    "go",
    "reference",
    "let",
    "go",
    "typescript",
    "config",
    "reference",
    "sure",
    "searchable",
    "easier",
    "maybe",
    "something",
    "wrong",
    "anyways",
    "let",
    "look",
    "let",
    "find",
    "jsx",
    "property",
    "talked",
    "language",
    "environment",
    "jsx",
    "says",
    "controls",
    "jss",
    "jsx",
    "construct",
    "constructs",
    "emitted",
    "javascript",
    "files",
    "affects",
    "output",
    "js",
    "files",
    "started",
    "tsx",
    "files",
    "couple",
    "options",
    "react",
    "jsx",
    "dev",
    "preserve",
    "native",
    "preserve",
    "option",
    "would",
    "good",
    "wanting",
    "basically",
    "compile",
    "typescript",
    "javascript",
    "leave",
    "jsx",
    "use",
    "babel",
    "take",
    "jsx",
    "convert",
    "js",
    "simple",
    "project",
    "really",
    "need",
    "direction",
    "use",
    "react",
    "jsx",
    "get",
    "happen",
    "us",
    "let",
    "give",
    "jsx",
    "pro",
    "property",
    "pass",
    "react",
    "jsx",
    "typescript",
    "compiler",
    "going",
    "look",
    "typescript",
    "convert",
    "javascript",
    "also",
    "going",
    "recognize",
    "jsx",
    "convert",
    "javascript",
    "kind",
    "solution",
    "means",
    "remove",
    "babel",
    "stuff",
    "added",
    "good",
    "understand",
    "know",
    "would",
    "something",
    "vanilla",
    "application",
    "using",
    "typescript",
    "remove",
    "lot",
    "complexity",
    "instead",
    "using",
    "babble",
    "stuff",
    "going",
    "use",
    "ts",
    "loader",
    "also",
    "going",
    "need",
    "change",
    "tsx",
    "searches",
    "tsx",
    "files",
    "finally",
    "need",
    "update",
    "file",
    "extensions",
    "tsx",
    "knows",
    "grab",
    "come",
    "back",
    "errors",
    "second",
    "type",
    "errors",
    "getting",
    "let",
    "save",
    "tsx",
    "files",
    "let",
    "go",
    "back",
    "ts",
    "loader",
    "find",
    "loaders",
    "right",
    "transpiling",
    "says",
    "loads",
    "typescript",
    "like",
    "javascript",
    "also",
    "going",
    "external",
    "one",
    "believe",
    "need",
    "install",
    "let",
    "open",
    "terminal",
    "look",
    "package",
    "json",
    "right",
    "got",
    "dev",
    "dependencies",
    "babel",
    "core",
    "preset",
    "know",
    "babel",
    "stuff",
    "really",
    "need",
    "anymore",
    "typescript",
    "taken",
    "typescript",
    "compiler",
    "taken",
    "done",
    "job",
    "addition",
    "compiling",
    "typescript",
    "us",
    "yarn",
    "remove",
    "stuff",
    "gon",
    "na",
    "take",
    "little",
    "shortcut",
    "delete",
    "still",
    "need",
    "css",
    "style",
    "loader",
    "course",
    "need",
    "webpack",
    "still",
    "using",
    "let",
    "save",
    "yarn",
    "install",
    "gon",
    "na",
    "refresh",
    "everything",
    "let",
    "go",
    "ahead",
    "add",
    "developer",
    "dependency",
    "called",
    "ts",
    "loader",
    "css",
    "style",
    "ts",
    "loaders",
    "project",
    "work",
    "webpack",
    "config",
    "try",
    "build",
    "going",
    "get",
    "errors",
    "oh",
    "okay",
    "duh",
    "need",
    "update",
    "tsx",
    "able",
    "read",
    "entry",
    "point",
    "right",
    "getting",
    "errors",
    "much",
    "better",
    "error",
    "looking",
    "type",
    "files",
    "everything",
    "react",
    "stuff",
    "need",
    "install",
    "see",
    "entry",
    "point",
    "going",
    "say",
    "try",
    "npm",
    "save",
    "dev",
    "types",
    "react",
    "going",
    "save",
    "react",
    "types",
    "believe",
    "also",
    "need",
    "react",
    "dom",
    "types",
    "see",
    "goes",
    "away",
    "root",
    "elements",
    "complaining",
    "could",
    "possibly",
    "null",
    "one",
    "thing",
    "could",
    "could",
    "say",
    "root",
    "element",
    "throw",
    "new",
    "air",
    "react",
    "app",
    "configured",
    "incorrectly",
    "going",
    "solve",
    "know",
    "exist",
    "tend",
    "put",
    "exclamation",
    "end",
    "say",
    "like",
    "hey",
    "know",
    "root",
    "element",
    "going",
    "found",
    "okay",
    "case",
    "think",
    "yeah",
    "wanted",
    "safe",
    "throw",
    "air",
    "log",
    "something",
    "whatever",
    "make",
    "sure",
    "root",
    "element",
    "selected",
    "correctly",
    "let",
    "try",
    "one",
    "time",
    "yarn",
    "build",
    "successfully",
    "built",
    "things",
    "public",
    "compiled",
    "typescript",
    "js",
    "jsx",
    "js",
    "everything",
    "run",
    "browser",
    "let",
    "make",
    "sure",
    "worked",
    "going",
    "localhost",
    "8080",
    "static",
    "app",
    "localhost",
    "5500",
    "connect",
    "live",
    "server",
    "running",
    "hit",
    "go",
    "live",
    "live",
    "server",
    "refresh",
    "go",
    "live",
    "react",
    "factor",
    "public",
    "directory",
    "see",
    "app",
    "running",
    "styled",
    "green",
    "text",
    "means",
    "final",
    "build",
    "worked",
    "okay",
    "go",
    "yarn",
    "dev",
    "run",
    "dev",
    "server",
    "localhost",
    "refresh",
    "see",
    "refreshes",
    "go",
    "change",
    "know",
    "red",
    "hot",
    "reload",
    "change",
    "css",
    "app",
    "let",
    "close",
    "bunch",
    "stuff",
    "close",
    "save",
    "files",
    "collapse",
    "going",
    "collapse",
    "terminal",
    "going",
    "running",
    "background",
    "run",
    "errors",
    "pull",
    "remember",
    "prior",
    "video",
    "refactored",
    "everything",
    "live",
    "ts",
    "refactor",
    "basically",
    "took",
    "game",
    "turned",
    "typescript",
    "code",
    "base",
    "got",
    "app",
    "got",
    "store",
    "got",
    "view",
    "types",
    "file",
    "going",
    "referencing",
    "going",
    "lifting",
    "putting",
    "react",
    "code",
    "going",
    "run",
    "live",
    "server",
    "going",
    "tab",
    "grab",
    "localhost",
    "5500",
    "going",
    "run",
    "vanilla",
    "refactor",
    "working",
    "final",
    "version",
    "game",
    "vanilla",
    "js",
    "nothing",
    "fancy",
    "first",
    "video",
    "reference",
    "point",
    "eventually",
    "reach",
    "point",
    "react",
    "refactor",
    "first",
    "thing",
    "want",
    "bring",
    "types",
    "file",
    "let",
    "copy",
    "file",
    "types",
    "put",
    "source",
    "looking",
    "types",
    "player",
    "move",
    "game",
    "status",
    "game",
    "game",
    "state",
    "next",
    "thing",
    "want",
    "copy",
    "html",
    "structure",
    "us",
    "main",
    "tag",
    "well",
    "footer",
    "finally",
    "modal",
    "opens",
    "game",
    "ends",
    "going",
    "go",
    "ahead",
    "copy",
    "start",
    "us",
    "live",
    "react",
    "refactor",
    "go",
    "instead",
    "app",
    "going",
    "return",
    "html",
    "html",
    "going",
    "going",
    "yell",
    "need",
    "put",
    "fragment",
    "around",
    "parent",
    "element",
    "course",
    "need",
    "update",
    "class",
    "attributes",
    "react",
    "compatible",
    "jsx",
    "compatible",
    "attributes",
    "class",
    "name",
    "let",
    "add",
    "class",
    "name",
    "fix",
    "things",
    "comments",
    "get",
    "rid",
    "right",
    "valid",
    "jsx",
    "finally",
    "see",
    "style",
    "needs",
    "converted",
    "one",
    "little",
    "bit",
    "annoying",
    "let",
    "kind",
    "speed",
    "real",
    "quick",
    "copy",
    "pasting",
    "everything",
    "final",
    "version",
    "okay",
    "converted",
    "html",
    "valid",
    "jsx",
    "errors",
    "going",
    "remember",
    "server",
    "guess",
    "keep",
    "open",
    "see",
    "little",
    "bit",
    "reloading",
    "every",
    "time",
    "save",
    "see",
    "react",
    "refactor",
    "got",
    "something",
    "working",
    "red",
    "text",
    "everywhere",
    "removed",
    "globals",
    "globals",
    "added",
    "let",
    "get",
    "rid",
    "annoying",
    "see",
    "structure",
    "style",
    "application",
    "try",
    "click",
    "anything",
    "going",
    "much",
    "event",
    "listeners",
    "anything",
    "hooked",
    "let",
    "go",
    "ahead",
    "close",
    "tabs",
    "really",
    "need",
    "anymore",
    "first",
    "thing",
    "want",
    "convert",
    "something",
    "react",
    "application",
    "building",
    "react",
    "app",
    "scratch",
    "look",
    "structure",
    "html",
    "find",
    "parts",
    "best",
    "individual",
    "component",
    "first",
    "one",
    "pretty",
    "obvious",
    "like",
    "kind",
    "rebuild",
    "footer",
    "could",
    "component",
    "start",
    "using",
    "convention",
    "let",
    "add",
    "new",
    "folder",
    "called",
    "components",
    "components",
    "add",
    "styles",
    "footer",
    "one",
    "could",
    "argue",
    "know",
    "organization",
    "best",
    "work",
    "template",
    "going",
    "work",
    "basically",
    "going",
    "export",
    "default",
    "function",
    "component",
    "files",
    "trying",
    "css",
    "file",
    "oops",
    "okay",
    "looks",
    "little",
    "bit",
    "better",
    "going",
    "export",
    "default",
    "function",
    "return",
    "jsx",
    "going",
    "import",
    "top",
    "gets",
    "component",
    "specific",
    "styles",
    "go",
    "back",
    "let",
    "copy",
    "footer",
    "entirely",
    "paste",
    "right",
    "footer",
    "think",
    "anything",
    "need",
    "modify",
    "leave",
    "actually",
    "think",
    "yes",
    "styles",
    "styles",
    "right",
    "applies",
    "everything",
    "want",
    "come",
    "find",
    "footer",
    "styles",
    "right",
    "footer",
    "styles",
    "let",
    "rip",
    "add",
    "save",
    "styles",
    "html",
    "scoped",
    "one",
    "component",
    "finally",
    "come",
    "back",
    "remove",
    "footer",
    "replace",
    "footer",
    "component",
    "hit",
    "command",
    "period",
    "add",
    "import",
    "us",
    "see",
    "right",
    "added",
    "footer",
    "webpack",
    "going",
    "hot",
    "reload",
    "see",
    "footer",
    "right",
    "bottom",
    "working",
    "go",
    "developer",
    "tools",
    "let",
    "actually",
    "look",
    "firefox",
    "extensions",
    "let",
    "look",
    "react",
    "grab",
    "grab",
    "react",
    "developer",
    "tools",
    "right",
    "react",
    "developer",
    "tools",
    "think",
    "refresh",
    "yep",
    "see",
    "components",
    "see",
    "footer",
    "one",
    "components",
    "let",
    "zoom",
    "little",
    "bit",
    "guess",
    "ca",
    "zoom",
    "unfortunately",
    "think",
    "zoom",
    "developer",
    "tools",
    "much",
    "pretty",
    "small",
    "okay",
    "next",
    "thing",
    "break",
    "modal",
    "right",
    "modal",
    "pop",
    "open",
    "someone",
    "wins",
    "game",
    "bring",
    "components",
    "call",
    "styles",
    "going",
    "use",
    "template",
    "export",
    "default",
    "function",
    "remember",
    "import",
    "css",
    "grab",
    "right",
    "return",
    "component",
    "go",
    "find",
    "modal",
    "styles",
    "organized",
    "another",
    "reason",
    "organize",
    "css",
    "refactor",
    "pretty",
    "easy",
    "know",
    "goes",
    "put",
    "modal",
    "css",
    "save",
    "global",
    "styles",
    "save",
    "component",
    "add",
    "modal",
    "oops",
    "need",
    "import",
    "components",
    "going",
    "notice",
    "going",
    "mess",
    "things",
    "little",
    "bit",
    "come",
    "refactor",
    "well",
    "actually",
    "mess",
    "anything",
    "still",
    "hidden",
    "class",
    "see",
    "modal",
    "hidden",
    "class",
    "going",
    "control",
    "sorts",
    "things",
    "react",
    "rather",
    "classes",
    "going",
    "get",
    "rid",
    "also",
    "going",
    "start",
    "removing",
    "data",
    "ids",
    "longer",
    "select",
    "elements",
    "grab",
    "directly",
    "react",
    "remove",
    "classes",
    "see",
    "bottom",
    "get",
    "weird",
    "modal",
    "happening",
    "let",
    "see",
    "going",
    "look",
    "styles",
    "think",
    "happening",
    "setting",
    "position",
    "fixed",
    "giving",
    "reference",
    "point",
    "start",
    "let",
    "give",
    "left",
    "zero",
    "top",
    "zero",
    "work",
    "okay",
    "ca",
    "click",
    "anything",
    "javascript",
    "functionality",
    "quite",
    "yet",
    "styled",
    "correctly",
    "come",
    "instead",
    "using",
    "hidden",
    "class",
    "toggle",
    "know",
    "implicit",
    "event",
    "listener",
    "declarative",
    "keep",
    "state",
    "whether",
    "modal",
    "open",
    "render",
    "conditionally",
    "going",
    "create",
    "variable",
    "right",
    "see",
    "comes",
    "play",
    "little",
    "bit",
    "later",
    "make",
    "static",
    "variable",
    "called",
    "show",
    "modal",
    "set",
    "false",
    "start",
    "see",
    "changes",
    "future",
    "get",
    "caught",
    "using",
    "state",
    "correctly",
    "stuff",
    "like",
    "show",
    "modal",
    "going",
    "wrap",
    "like",
    "able",
    "conditionally",
    "show",
    "modal",
    "furthermore",
    "might",
    "want",
    "add",
    "props",
    "modals",
    "pass",
    "want",
    "show",
    "remember",
    "going",
    "control",
    "text",
    "right",
    "javascript",
    "would",
    "good",
    "add",
    "message",
    "props",
    "define",
    "props",
    "type",
    "message",
    "type",
    "string",
    "right",
    "destructuring",
    "props",
    "object",
    "typing",
    "right",
    "instead",
    "player",
    "one",
    "wins",
    "say",
    "set",
    "message",
    "passed",
    "modal",
    "props",
    "since",
    "required",
    "message",
    "go",
    "back",
    "going",
    "complain",
    "given",
    "props",
    "going",
    "say",
    "player",
    "one",
    "wins",
    "anything",
    "dynamic",
    "pass",
    "quite",
    "yet",
    "see",
    "toggle",
    "false",
    "true",
    "going",
    "show",
    "modal",
    "pass",
    "player",
    "one",
    "wins",
    "check",
    "look",
    "components",
    "footer",
    "modal",
    "app",
    "let",
    "put",
    "back",
    "false",
    "going",
    "show",
    "move",
    "next",
    "part",
    "going",
    "refactor",
    "components",
    "right",
    "looking",
    "rest",
    "could",
    "course",
    "make",
    "scoreboard",
    "component",
    "whole",
    "lot",
    "html",
    "think",
    "leave",
    "really",
    "style",
    "preference",
    "whether",
    "split",
    "right",
    "simplify",
    "using",
    "react",
    "conventions",
    "rather",
    "simple",
    "open",
    "brackets",
    "going",
    "make",
    "array",
    "goes",
    "one",
    "nine",
    "could",
    "course",
    "create",
    "javascript",
    "let",
    "expressive",
    "lot",
    "easier",
    "follow",
    "going",
    "map",
    "going",
    "call",
    "square",
    "id",
    "numbers",
    "represent",
    "square",
    "ids",
    "going",
    "one",
    "div",
    "elements",
    "whenever",
    "map",
    "across",
    "multiple",
    "know",
    "elements",
    "array",
    "react",
    "needs",
    "know",
    "key",
    "giving",
    "reason",
    "predictable",
    "order",
    "put",
    "elements",
    "goes",
    "figure",
    "whether",
    "element",
    "changed",
    "needs",
    "dom",
    "look",
    "key",
    "tell",
    "tell",
    "need",
    "id",
    "anymore",
    "also",
    "need",
    "data",
    "id",
    "using",
    "old",
    "vanilla",
    "syntax",
    "need",
    "key",
    "described",
    "pass",
    "square",
    "id",
    "basically",
    "going",
    "number",
    "square",
    "furthermore",
    "clean",
    "vanilla",
    "application",
    "using",
    "javascript",
    "render",
    "element",
    "basically",
    "icon",
    "div",
    "look",
    "back",
    "click",
    "something",
    "sorry",
    "react",
    "app",
    "click",
    "something",
    "finished",
    "app",
    "put",
    "one",
    "icons",
    "within",
    "box",
    "react",
    "instead",
    "implicitly",
    "imperatively",
    "declarative",
    "say",
    "let",
    "put",
    "tag",
    "give",
    "class",
    "name",
    "know",
    "going",
    "fa",
    "solid",
    "going",
    "conditional",
    "classes",
    "based",
    "player",
    "currently",
    "implemented",
    "quite",
    "yet",
    "going",
    "pass",
    "fax",
    "say",
    "think",
    "yellow",
    "x",
    "think",
    "turquoise",
    "player",
    "one",
    "course",
    "come",
    "back",
    "render",
    "point",
    "get",
    "rid",
    "reducing",
    "amount",
    "code",
    "see",
    "x",
    "rendered",
    "leave",
    "come",
    "back",
    "make",
    "dynamic",
    "later",
    "scrolling",
    "got",
    "menu",
    "could",
    "actually",
    "good",
    "use",
    "case",
    "another",
    "component",
    "make",
    "menu",
    "component",
    "export",
    "default",
    "menu",
    "function",
    "oops",
    "menu",
    "going",
    "props",
    "initialize",
    "also",
    "want",
    "import",
    "need",
    "add",
    "menu",
    "css",
    "let",
    "close",
    "bunch",
    "clean",
    "open",
    "oops",
    "final",
    "menu",
    "menu",
    "css",
    "first",
    "thing",
    "let",
    "go",
    "globals",
    "look",
    "menu",
    "styles",
    "looks",
    "like",
    "got",
    "right",
    "let",
    "copy",
    "think",
    "need",
    "throw",
    "menu",
    "css",
    "save",
    "globals",
    "go",
    "sorry",
    "index",
    "point",
    "grab",
    "html",
    "whoops",
    "wrong",
    "cut",
    "component",
    "render",
    "div",
    "right",
    "let",
    "clean",
    "data",
    "ids",
    "need",
    "since",
    "working",
    "react",
    "pretty",
    "much",
    "anywhere",
    "one",
    "data",
    "ids",
    "means",
    "registering",
    "click",
    "listener",
    "set",
    "click",
    "listeners",
    "going",
    "menu",
    "give",
    "action",
    "property",
    "going",
    "action",
    "type",
    "either",
    "reset",
    "going",
    "new",
    "round",
    "could",
    "course",
    "differently",
    "however",
    "want",
    "simplifying",
    "things",
    "check",
    "action",
    "type",
    "know",
    "buttons",
    "clicked",
    "come",
    "buttons",
    "say",
    "click",
    "one",
    "action",
    "oops",
    "passed",
    "props",
    "yet",
    "let",
    "initialize",
    "action",
    "props",
    "grabbing",
    "typing",
    "say",
    "action",
    "reset",
    "see",
    "get",
    "typescript",
    "support",
    "union",
    "type",
    "reset",
    "another",
    "click",
    "listener",
    "say",
    "one",
    "going",
    "new",
    "round",
    "could",
    "split",
    "two",
    "stylistic",
    "could",
    "comment",
    "say",
    "reset",
    "void",
    "new",
    "round",
    "void",
    "replace",
    "two",
    "different",
    "ones",
    "come",
    "instead",
    "passing",
    "key",
    "say",
    "reset",
    "new",
    "round",
    "would",
    "thing",
    "stylistic",
    "concern",
    "going",
    "go",
    "back",
    "original",
    "like",
    "little",
    "bit",
    "throw",
    "menu",
    "took",
    "jsx",
    "menu",
    "course",
    "need",
    "action",
    "fill",
    "second",
    "let",
    "import",
    "menu",
    "command",
    "period",
    "get",
    "vs",
    "code",
    "see",
    "got",
    "imported",
    "right",
    "action",
    "right",
    "going",
    "put",
    "placeholder",
    "going",
    "pass",
    "us",
    "action",
    "defined",
    "going",
    "console",
    "log",
    "right",
    "eventually",
    "hook",
    "something",
    "go",
    "app",
    "click",
    "actions",
    "menu",
    "going",
    "see",
    "console",
    "let",
    "refresh",
    "oh",
    "getting",
    "anything",
    "set",
    "listeners",
    "menu",
    "items",
    "also",
    "need",
    "listen",
    "click",
    "topmost",
    "menu",
    "going",
    "put",
    "click",
    "listener",
    "actions",
    "button",
    "handle",
    "internal",
    "menu",
    "say",
    "whether",
    "menu",
    "open",
    "piece",
    "state",
    "going",
    "introduce",
    "using",
    "use",
    "state",
    "hook",
    "look",
    "let",
    "see",
    "got",
    "function",
    "going",
    "set",
    "menu",
    "open",
    "basically",
    "going",
    "implement",
    "toggle",
    "functionality",
    "looking",
    "previous",
    "state",
    "returning",
    "opposite",
    "complaining",
    "initialized",
    "anything",
    "giving",
    "false",
    "default",
    "state",
    "going",
    "type",
    "use",
    "state",
    "boolean",
    "going",
    "use",
    "type",
    "inference",
    "going",
    "initialize",
    "closed",
    "click",
    "actions",
    "button",
    "going",
    "basically",
    "toggle",
    "menu",
    "open",
    "closed",
    "verify",
    "going",
    "ui",
    "clicking",
    "going",
    "anything",
    "actually",
    "reading",
    "menu",
    "open",
    "state",
    "want",
    "conditionally",
    "render",
    "piece",
    "jsx",
    "based",
    "whether",
    "menu",
    "open",
    "leftover",
    "hidden",
    "class",
    "need",
    "get",
    "rid",
    "override",
    "behavior",
    "let",
    "open",
    "click",
    "actions",
    "see",
    "toggle",
    "back",
    "forth",
    "last",
    "thing",
    "need",
    "look",
    "icon",
    "remember",
    "vanilla",
    "app",
    "flipping",
    "depending",
    "open",
    "state",
    "come",
    "rendering",
    "icon",
    "basically",
    "say",
    "hey",
    "menu",
    "open",
    "going",
    "render",
    "something",
    "otherwise",
    "render",
    "copy",
    "right",
    "going",
    "let",
    "go",
    "ahead",
    "put",
    "menu",
    "chevron",
    "menu",
    "open",
    "chevron",
    "closed",
    "see",
    "flips",
    "slightly",
    "better",
    "way",
    "necessarily",
    "need",
    "dependency",
    "something",
    "use",
    "pretty",
    "helpful",
    "going",
    "add",
    "something",
    "called",
    "class",
    "names",
    "say",
    "yarn",
    "add",
    "class",
    "names",
    "utility",
    "really",
    "utility",
    "function",
    "represents",
    "use",
    "refactor",
    "code",
    "right",
    "class",
    "name",
    "import",
    "class",
    "names",
    "go",
    "top",
    "say",
    "import",
    "class",
    "names",
    "class",
    "names",
    "see",
    "utility",
    "simple",
    "javascript",
    "utility",
    "conditionally",
    "joining",
    "class",
    "names",
    "together",
    "pretty",
    "common",
    "see",
    "within",
    "react",
    "say",
    "always",
    "know",
    "going",
    "f",
    "solid",
    "similar",
    "across",
    "two",
    "two",
    "depending",
    "whether",
    "menu",
    "open",
    "either",
    "use",
    "chevron",
    "chevron",
    "delete",
    "rather",
    "conditionally",
    "rendering",
    "entire",
    "element",
    "conditionally",
    "rendering",
    "class",
    "names",
    "similar",
    "original",
    "implementation",
    "good",
    "one",
    "pause",
    "kind",
    "show",
    "react",
    "versus",
    "vanilla",
    "app",
    "remember",
    "menu",
    "remember",
    "vanilla",
    "refactor",
    "actually",
    "let",
    "go",
    "live",
    "ts",
    "refactors",
    "latest",
    "one",
    "go",
    "js",
    "look",
    "view",
    "let",
    "go",
    "event",
    "listeners",
    "binded",
    "click",
    "menu",
    "first",
    "one",
    "binding",
    "click",
    "event",
    "menu",
    "button",
    "let",
    "let",
    "side",
    "side",
    "see",
    "better",
    "react",
    "right",
    "vanilla",
    "going",
    "left",
    "vanilla",
    "react",
    "see",
    "let",
    "zoom",
    "little",
    "bit",
    "actions",
    "button",
    "click",
    "listener",
    "button",
    "state",
    "controls",
    "whether",
    "open",
    "closed",
    "right",
    "registering",
    "event",
    "listener",
    "button",
    "view",
    "calling",
    "toggle",
    "menu",
    "class",
    "somewhere",
    "toggle",
    "menu",
    "class",
    "going",
    "select",
    "items",
    "button",
    "toggle",
    "styles",
    "border",
    "figure",
    "icon",
    "throw",
    "implemented",
    "right",
    "deciding",
    "one",
    "icon",
    "put",
    "whether",
    "show",
    "open",
    "closed",
    "furthermore",
    "come",
    "menu",
    "open",
    "closed",
    "conditionally",
    "rendering",
    "menu",
    "items",
    "based",
    "whether",
    "open",
    "see",
    "implement",
    "whole",
    "toggle",
    "menu",
    "entire",
    "close",
    "menu",
    "pretty",
    "easy",
    "say",
    "like",
    "hey",
    "state",
    "true",
    "render",
    "otherwise",
    "kind",
    "simplify",
    "lives",
    "little",
    "bit",
    "finally",
    "action",
    "handlers",
    "register",
    "something",
    "happens",
    "game",
    "resets",
    "new",
    "round",
    "see",
    "register",
    "game",
    "reset",
    "right",
    "click",
    "listeners",
    "kind",
    "look",
    "see",
    "translating",
    "things",
    "point",
    "come",
    "back",
    "game",
    "open",
    "close",
    "menu",
    "click",
    "one",
    "get",
    "something",
    "printed",
    "console",
    "telling",
    "us",
    "one",
    "clicked",
    "actually",
    "handled",
    "events",
    "yet",
    "shortly",
    "point",
    "pretty",
    "much",
    "done",
    "could",
    "course",
    "refactor",
    "even",
    "little",
    "add",
    "components",
    "clean",
    "pretty",
    "readable",
    "point",
    "really",
    "want",
    "try",
    "go",
    "reason",
    "need",
    "add",
    "concept",
    "state",
    "application",
    "remember",
    "ts",
    "refactor",
    "entire",
    "store",
    "class",
    "responsible",
    "bottom",
    "basically",
    "saving",
    "state",
    "local",
    "storage",
    "dispatching",
    "event",
    "said",
    "hey",
    "state",
    "actually",
    "changed",
    "listening",
    "event",
    "heard",
    "event",
    "would",
    "view",
    "new",
    "state",
    "whole",
    "process",
    "totally",
    "native",
    "react",
    "think",
    "really",
    "view",
    "reacting",
    "state",
    "change",
    "something",
    "pattern",
    "used",
    "simplified",
    "oversimplified",
    "version",
    "react",
    "purpose",
    "react",
    "much",
    "indirect",
    "imperative",
    "fashion",
    "rather",
    "declarative",
    "fashion",
    "know",
    "saying",
    "like",
    "hey",
    "state",
    "exists",
    "like",
    "show",
    "modal",
    "true",
    "render",
    "modal",
    "really",
    "need",
    "anything",
    "complex",
    "using",
    "react",
    "using",
    "react",
    "mean",
    "state",
    "going",
    "like",
    "change",
    "shape",
    "anything",
    "still",
    "tracking",
    "fundamental",
    "types",
    "defined",
    "really",
    "need",
    "redefine",
    "use",
    "state",
    "hook",
    "keep",
    "track",
    "game",
    "state",
    "main",
    "app",
    "read",
    "state",
    "jsx",
    "conditionally",
    "render",
    "things",
    "make",
    "things",
    "happen",
    "make",
    "interactive",
    "since",
    "state",
    "works",
    "together",
    "none",
    "like",
    "isolated",
    "one",
    "another",
    "makes",
    "sense",
    "would",
    "throw",
    "single",
    "state",
    "variable",
    "going",
    "call",
    "state",
    "use",
    "convention",
    "use",
    "state",
    "hook",
    "import",
    "react",
    "course",
    "need",
    "initial",
    "state",
    "pass",
    "remember",
    "original",
    "let",
    "go",
    "back",
    "store",
    "initial",
    "state",
    "passed",
    "right",
    "copy",
    "object",
    "paste",
    "default",
    "basically",
    "function",
    "parameter",
    "going",
    "default",
    "state",
    "passing",
    "object",
    "shape",
    "use",
    "state",
    "hook",
    "use",
    "state",
    "going",
    "use",
    "typescript",
    "generics",
    "infer",
    "type",
    "state",
    "hover",
    "state",
    "going",
    "give",
    "object",
    "shape",
    "could",
    "explicitly",
    "define",
    "right",
    "put",
    "generic",
    "define",
    "type",
    "state",
    "dealing",
    "easier",
    "let",
    "infer",
    "strongly",
    "typed",
    "state",
    "object",
    "things",
    "get",
    "interesting",
    "state",
    "object",
    "remember",
    "store",
    "mutating",
    "state",
    "changing",
    "couple",
    "places",
    "player",
    "moves",
    "pushing",
    "move",
    "current",
    "game",
    "moves",
    "array",
    "reset",
    "game",
    "pushing",
    "current",
    "round",
    "games",
    "history",
    "new",
    "round",
    "pushing",
    "games",
    "array",
    "really",
    "places",
    "changing",
    "state",
    "rest",
    "going",
    "something",
    "called",
    "derived",
    "state",
    "basically",
    "constructing",
    "different",
    "constructing",
    "set",
    "information",
    "derived",
    "raw",
    "state",
    "object",
    "two",
    "good",
    "examples",
    "would",
    "stats",
    "getter",
    "game",
    "getter",
    "previous",
    "refactor",
    "called",
    "derived",
    "stats",
    "derived",
    "game",
    "basically",
    "reading",
    "current",
    "raw",
    "state",
    "calculating",
    "things",
    "returning",
    "application",
    "use",
    "information",
    "things",
    "thing",
    "grabbing",
    "raw",
    "state",
    "calculating",
    "stuff",
    "calculating",
    "game",
    "winner",
    "current",
    "player",
    "status",
    "everything",
    "derived",
    "state",
    "actually",
    "know",
    "might",
    "tempted",
    "put",
    "know",
    "derived",
    "state",
    "set",
    "derived",
    "state",
    "use",
    "state",
    "call",
    "really",
    "need",
    "point",
    "keep",
    "two",
    "state",
    "variables",
    "sync",
    "read",
    "react",
    "documentation",
    "kind",
    "explain",
    "bad",
    "idea",
    "really",
    "need",
    "since",
    "pure",
    "function",
    "come",
    "define",
    "game",
    "object",
    "need",
    "make",
    "method",
    "derive",
    "let",
    "call",
    "derive",
    "game",
    "also",
    "need",
    "derive",
    "stats",
    "state",
    "need",
    "stats",
    "two",
    "empty",
    "functions",
    "defined",
    "going",
    "derive",
    "game",
    "stats",
    "going",
    "derive",
    "stats",
    "course",
    "need",
    "pass",
    "state",
    "object",
    "going",
    "yell",
    "us",
    "defined",
    "argument",
    "need",
    "say",
    "state",
    "need",
    "define",
    "state",
    "shape",
    "need",
    "start",
    "typing",
    "go",
    "back",
    "defined",
    "beginning",
    "game",
    "state",
    "key",
    "use",
    "pass",
    "game",
    "state",
    "import",
    "type",
    "also",
    "put",
    "right",
    "state",
    "game",
    "state",
    "pass",
    "state",
    "object",
    "derived",
    "game",
    "derived",
    "stats",
    "going",
    "accept",
    "point",
    "copy",
    "paste",
    "exercise",
    "go",
    "back",
    "store",
    "let",
    "remind",
    "prior",
    "refactor",
    "vanilla",
    "application",
    "react",
    "one",
    "need",
    "grab",
    "stats",
    "copy",
    "return",
    "type",
    "stats",
    "derived",
    "stats",
    "return",
    "longer",
    "referencing",
    "dot",
    "player",
    "going",
    "need",
    "define",
    "go",
    "back",
    "store",
    "think",
    "players",
    "array",
    "original",
    "app",
    "put",
    "players",
    "config",
    "let",
    "copy",
    "top",
    "file",
    "players",
    "config",
    "grab",
    "scope",
    "global",
    "scope",
    "map",
    "derived",
    "stats",
    "object",
    "get",
    "let",
    "console",
    "log",
    "console",
    "log",
    "stats",
    "implemented",
    "function",
    "go",
    "console",
    "refresh",
    "see",
    "printed",
    "twice",
    "reason",
    "gets",
    "printed",
    "twice",
    "strict",
    "mode",
    "go",
    "back",
    "entry",
    "point",
    "see",
    "wrapper",
    "right",
    "strict",
    "mode",
    "react",
    "going",
    "component",
    "two",
    "times",
    "catch",
    "bugs",
    "happen",
    "going",
    "go",
    "far",
    "getting",
    "one",
    "anyways",
    "get",
    "player",
    "stats",
    "derived",
    "object",
    "says",
    "player",
    "one",
    "zero",
    "wins",
    "player",
    "two",
    "zero",
    "wins",
    "zero",
    "ties",
    "information",
    "start",
    "populate",
    "react",
    "application",
    "go",
    "bottom",
    "see",
    "static",
    "numbers",
    "denoting",
    "number",
    "wins",
    "going",
    "grab",
    "stats",
    "array",
    "know",
    "config",
    "player",
    "one",
    "zero",
    "index",
    "player",
    "two",
    "one",
    "index",
    "array",
    "going",
    "interpolate",
    "variable",
    "going",
    "grab",
    "stats",
    "derived",
    "state",
    "going",
    "look",
    "players",
    "stats",
    "grab",
    "first",
    "player",
    "going",
    "print",
    "number",
    "wins",
    "slot",
    "right",
    "also",
    "throw",
    "number",
    "ties",
    "stats",
    "dot",
    "ties",
    "finally",
    "stats",
    "grab",
    "first",
    "index",
    "player",
    "pass",
    "wins",
    "right",
    "point",
    "player",
    "one",
    "ties",
    "player",
    "2",
    "getting",
    "dynamically",
    "populated",
    "part",
    "done",
    "last",
    "thing",
    "need",
    "implement",
    "derived",
    "game",
    "function",
    "right",
    "another",
    "copy",
    "paste",
    "original",
    "project",
    "react",
    "one",
    "getter",
    "called",
    "game",
    "basically",
    "recalculating",
    "things",
    "returning",
    "derived",
    "state",
    "let",
    "paste",
    "need",
    "reference",
    "players",
    "global",
    "scope",
    "think",
    "pretty",
    "much",
    "referencing",
    "state",
    "right",
    "work",
    "print",
    "game",
    "console",
    "log",
    "game",
    "refresh",
    "game",
    "got",
    "current",
    "player",
    "player",
    "one",
    "moves",
    "yet",
    "status",
    "complete",
    "false",
    "couple",
    "things",
    "let",
    "get",
    "rid",
    "console",
    "log",
    "let",
    "also",
    "get",
    "rid",
    "show",
    "modal",
    "static",
    "variable",
    "get",
    "rid",
    "grab",
    "game",
    "derived",
    "state",
    "instead",
    "show",
    "modal",
    "say",
    "hey",
    "game",
    "dot",
    "status",
    "complete",
    "status",
    "complete",
    "going",
    "open",
    "modal",
    "instead",
    "static",
    "message",
    "say",
    "game",
    "dot",
    "status",
    "think",
    "going",
    "need",
    "dynamically",
    "winner",
    "going",
    "say",
    "dot",
    "name",
    "wins",
    "otherwise",
    "going",
    "tie",
    "see",
    "reading",
    "directly",
    "state",
    "get",
    "need",
    "whether",
    "need",
    "render",
    "open",
    "message",
    "happens",
    "course",
    "going",
    "matter",
    "rendering",
    "within",
    "game",
    "read",
    "current",
    "state",
    "current",
    "game",
    "figure",
    "squares",
    "need",
    "populated",
    "right",
    "remember",
    "looping",
    "nine",
    "squares",
    "game",
    "board",
    "rendering",
    "icon",
    "move",
    "slot",
    "grab",
    "existing",
    "move",
    "let",
    "show",
    "originated",
    "go",
    "original",
    "project",
    "go",
    "believe",
    "see",
    "player",
    "moves",
    "checking",
    "existing",
    "move",
    "existing",
    "move",
    "returning",
    "player",
    "ca",
    "click",
    "twice",
    "calling",
    "player",
    "move",
    "furthermore",
    "view",
    "figure",
    "know",
    "squares",
    "need",
    "icons",
    "initialize",
    "moves",
    "method",
    "saying",
    "square",
    "game",
    "board",
    "see",
    "existing",
    "move",
    "existing",
    "move",
    "going",
    "basically",
    "simulate",
    "move",
    "populate",
    "square",
    "react",
    "logic",
    "way",
    "easier",
    "basically",
    "copy",
    "logic",
    "right",
    "looking",
    "moves",
    "looking",
    "need",
    "look",
    "current",
    "game",
    "moves",
    "square",
    "id",
    "already",
    "number",
    "replace",
    "entirely",
    "square",
    "id",
    "within",
    "map",
    "function",
    "figuring",
    "existing",
    "move",
    "existing",
    "move",
    "going",
    "render",
    "icon",
    "also",
    "remember",
    "move",
    "player",
    "object",
    "available",
    "us",
    "let",
    "refactor",
    "right",
    "class",
    "name",
    "icon",
    "rather",
    "static",
    "x",
    "turquoise",
    "use",
    "class",
    "names",
    "wrap",
    "let",
    "start",
    "fa",
    "solid",
    "matter",
    "going",
    "take",
    "existing",
    "move",
    "grab",
    "player",
    "give",
    "color",
    "class",
    "also",
    "take",
    "existing",
    "move",
    "dot",
    "player",
    "dot",
    "icon",
    "class",
    "tell",
    "us",
    "color",
    "icon",
    "render",
    "right",
    "existing",
    "move",
    "go",
    "back",
    "game",
    "board",
    "going",
    "empty",
    "still",
    "ca",
    "click",
    "anything",
    "listened",
    "event",
    "last",
    "thing",
    "make",
    "game",
    "interactive",
    "add",
    "click",
    "listener",
    "div",
    "square",
    "listening",
    "attach",
    "callback",
    "function",
    "say",
    "existing",
    "move",
    "going",
    "return",
    "early",
    "reusing",
    "established",
    "existing",
    "move",
    "anything",
    "otherwise",
    "need",
    "handle",
    "player",
    "move",
    "going",
    "require",
    "logic",
    "handling",
    "player",
    "move",
    "going",
    "separate",
    "hand",
    "handle",
    "player",
    "move",
    "function",
    "going",
    "pass",
    "square",
    "id",
    "clicked",
    "square",
    "going",
    "grab",
    "game",
    "dot",
    "current",
    "player",
    "need",
    "define",
    "function",
    "come",
    "say",
    "function",
    "handle",
    "player",
    "move",
    "going",
    "take",
    "square",
    "id",
    "number",
    "take",
    "say",
    "current",
    "player",
    "player",
    "player",
    "happens",
    "existing",
    "move",
    "return",
    "early",
    "otherwise",
    "handle",
    "player",
    "move",
    "going",
    "defined",
    "function",
    "right",
    "thinking",
    "back",
    "prior",
    "game",
    "handle",
    "player",
    "move",
    "well",
    "let",
    "go",
    "view",
    "original",
    "game",
    "react",
    "app",
    "anymore",
    "looking",
    "view",
    "actually",
    "looking",
    "handled",
    "react",
    "already",
    "implemented",
    "need",
    "look",
    "store",
    "player",
    "move",
    "handler",
    "basically",
    "getting",
    "copy",
    "state",
    "pushing",
    "move",
    "current",
    "game",
    "moves",
    "saving",
    "state",
    "let",
    "go",
    "ahead",
    "copy",
    "paste",
    "instead",
    "dot",
    "get",
    "state",
    "grab",
    "actually",
    "let",
    "comment",
    "second",
    "player",
    "moves",
    "know",
    "need",
    "set",
    "state",
    "let",
    "call",
    "set",
    "state",
    "get",
    "prior",
    "state",
    "need",
    "deal",
    "pass",
    "callback",
    "previous",
    "represent",
    "prior",
    "state",
    "prior",
    "render",
    "snapshot",
    "access",
    "wanted",
    "place",
    "logic",
    "set",
    "state",
    "callback",
    "uncomment",
    "structured",
    "clone",
    "previous",
    "state",
    "right",
    "push",
    "something",
    "current",
    "game",
    "moves",
    "instead",
    "saving",
    "state",
    "return",
    "state",
    "clone",
    "set",
    "state",
    "callback",
    "thing",
    "update",
    "grabbing",
    "argument",
    "player",
    "goes",
    "directly",
    "complaining",
    "argument",
    "assignable",
    "parameter",
    "type",
    "never",
    "saying",
    "current",
    "game",
    "moves",
    "type",
    "never",
    "array",
    "explicitly",
    "type",
    "game",
    "move",
    "come",
    "actually",
    "type",
    "little",
    "bit",
    "wanted",
    "could",
    "cast",
    "say",
    "game",
    "state",
    "game",
    "state",
    "right",
    "cast",
    "game",
    "state",
    "object",
    "going",
    "fix",
    "knows",
    "current",
    "game",
    "moves",
    "move",
    "array",
    "could",
    "either",
    "better",
    "way",
    "say",
    "use",
    "state",
    "type",
    "game",
    "state",
    "explicitly",
    "say",
    "like",
    "hey",
    "object",
    "assigning",
    "type",
    "game",
    "state",
    "handle",
    "player",
    "move",
    "start",
    "see",
    "interactivity",
    "see",
    "app",
    "starting",
    "work",
    "detects",
    "player",
    "win",
    "click",
    "play",
    "going",
    "anything",
    "set",
    "event",
    "listener",
    "modal",
    "command",
    "click",
    "modal",
    "open",
    "file",
    "see",
    "going",
    "need",
    "click",
    "handler",
    "going",
    "happen",
    "user",
    "clicks",
    "play",
    "click",
    "pass",
    "click",
    "handler",
    "going",
    "props",
    "really",
    "way",
    "us",
    "basically",
    "tell",
    "outside",
    "world",
    "consuming",
    "modal",
    "component",
    "hey",
    "event",
    "click",
    "event",
    "means",
    "user",
    "wants",
    "play",
    "come",
    "say",
    "click",
    "need",
    "something",
    "close",
    "modal",
    "update",
    "state",
    "case",
    "need",
    "reset",
    "game",
    "reset",
    "game",
    "problem",
    "implemented",
    "yet",
    "similar",
    "implemented",
    "handle",
    "player",
    "move",
    "also",
    "say",
    "reset",
    "game",
    "oops",
    "going",
    "function",
    "call",
    "modal",
    "clicked",
    "similar",
    "calling",
    "set",
    "state",
    "using",
    "previous",
    "state",
    "find",
    "next",
    "state",
    "reset",
    "game",
    "set",
    "state",
    "grab",
    "previous",
    "state",
    "something",
    "previous",
    "state",
    "derive",
    "something",
    "return",
    "new",
    "state",
    "want",
    "game",
    "already",
    "implemented",
    "implemented",
    "prior",
    "refactor",
    "let",
    "go",
    "back",
    "implemented",
    "see",
    "reset",
    "method",
    "new",
    "round",
    "method",
    "pretty",
    "much",
    "combine",
    "method",
    "like",
    "boolean",
    "check",
    "see",
    "whether",
    "reset",
    "new",
    "round",
    "let",
    "first",
    "copy",
    "reset",
    "paste",
    "instead",
    "get",
    "state",
    "going",
    "pass",
    "previous",
    "right",
    "going",
    "going",
    "read",
    "game",
    "derived",
    "state",
    "going",
    "destructure",
    "status",
    "moves",
    "finally",
    "return",
    "state",
    "clone",
    "set",
    "new",
    "state",
    "us",
    "like",
    "said",
    "original",
    "reset",
    "new",
    "round",
    "conditionally",
    "let",
    "add",
    "prop",
    "prop",
    "parameter",
    "say",
    "new",
    "round",
    "boolean",
    "come",
    "reset",
    "game",
    "going",
    "say",
    "false",
    "new",
    "round",
    "game",
    "reset",
    "remember",
    "menu",
    "action",
    "say",
    "want",
    "reset",
    "game",
    "detect",
    "whether",
    "new",
    "round",
    "say",
    "action",
    "equal",
    "new",
    "round",
    "evaluates",
    "true",
    "reset",
    "game",
    "otherwise",
    "evaluate",
    "false",
    "plain",
    "old",
    "reset",
    "hooked",
    "listener",
    "implement",
    "actually",
    "use",
    "variable",
    "figure",
    "need",
    "come",
    "reset",
    "current",
    "game",
    "moves",
    "say",
    "new",
    "round",
    "new",
    "round",
    "also",
    "want",
    "push",
    "history",
    "say",
    "state",
    "clone",
    "dot",
    "history",
    "games",
    "basically",
    "push",
    "spread",
    "state",
    "clone",
    "dot",
    "history",
    "dot",
    "current",
    "round",
    "games",
    "set",
    "current",
    "round",
    "games",
    "equal",
    "empty",
    "array",
    "new",
    "round",
    "also",
    "going",
    "reset",
    "point",
    "got",
    "reset",
    "game",
    "completed",
    "think",
    "majority",
    "logic",
    "let",
    "go",
    "try",
    "game",
    "detects",
    "win",
    "click",
    "play",
    "closes",
    "things",
    "everything",
    "resets",
    "player",
    "one",
    "one",
    "win",
    "let",
    "get",
    "player",
    "two",
    "win",
    "one",
    "player",
    "two",
    "wins",
    "play",
    "player",
    "two",
    "one",
    "win",
    "let",
    "click",
    "square",
    "reset",
    "seems",
    "work",
    "let",
    "go",
    "ahead",
    "reset",
    "scoreboard",
    "seems",
    "work",
    "well",
    "think",
    "pretty",
    "much",
    "done",
    "let",
    "kind",
    "pause",
    "video",
    "go",
    "see",
    "cleanup",
    "need",
    "way",
    "okay",
    "actually",
    "one",
    "big",
    "thing",
    "forgot",
    "come",
    "back",
    "local",
    "storage",
    "moment",
    "persisting",
    "game",
    "across",
    "browser",
    "refreshes",
    "let",
    "let",
    "collapse",
    "things",
    "collapse",
    "players",
    "derived",
    "game",
    "derive",
    "stats",
    "collapse",
    "reset",
    "game",
    "handle",
    "player",
    "move",
    "hide",
    "view",
    "see",
    "use",
    "state",
    "hook",
    "storing",
    "state",
    "game",
    "play",
    "couple",
    "moves",
    "refresh",
    "browser",
    "going",
    "basically",
    "reset",
    "everything",
    "storing",
    "local",
    "storage",
    "longer",
    "furthermore",
    "realized",
    "turn",
    "indicator",
    "implemented",
    "let",
    "go",
    "ahead",
    "get",
    "rid",
    "data",
    "ids",
    "need",
    "anymore",
    "becomes",
    "pretty",
    "easy",
    "add",
    "class",
    "names",
    "around",
    "fa",
    "solid",
    "figure",
    "whose",
    "turn",
    "saying",
    "game",
    "dot",
    "class",
    "class",
    "save",
    "dynamic",
    "finally",
    "need",
    "replace",
    "right",
    "game",
    "dot",
    "make",
    "color",
    "icon",
    "name",
    "dynamic",
    "let",
    "make",
    "sure",
    "correct",
    "looks",
    "like",
    "everything",
    "working",
    "except",
    "part",
    "static",
    "style",
    "think",
    "maybe",
    "easier",
    "way",
    "remove",
    "class",
    "name",
    "altogether",
    "remove",
    "use",
    "entire",
    "div",
    "specify",
    "color",
    "say",
    "class",
    "going",
    "apply",
    "entire",
    "div",
    "style",
    "child",
    "elements",
    "toggling",
    "icon",
    "player",
    "one",
    "player",
    "two",
    "player",
    "one",
    "seems",
    "working",
    "last",
    "thing",
    "local",
    "storage",
    "something",
    "going",
    "spend",
    "ton",
    "time",
    "implementation",
    "way",
    "extract",
    "local",
    "storage",
    "function",
    "react",
    "hook",
    "basically",
    "make",
    "replica",
    "use",
    "state",
    "instead",
    "using",
    "state",
    "also",
    "keep",
    "sync",
    "local",
    "storage",
    "manner",
    "use",
    "basically",
    "interface",
    "getting",
    "additional",
    "functionality",
    "getting",
    "crazy",
    "detail",
    "anything",
    "already",
    "already",
    "videos",
    "going",
    "go",
    "source",
    "make",
    "hook",
    "called",
    "react",
    "hook",
    "learn",
    "react",
    "docs",
    "go",
    "beta",
    "docs",
    "new",
    "ones",
    "go",
    "hooks",
    "hooks",
    "reference",
    "somewhere",
    "let",
    "go",
    "reference",
    "got",
    "react",
    "hooks",
    "know",
    "say",
    "anything",
    "like",
    "custom",
    "hooks",
    "would",
    "oh",
    "reusing",
    "logic",
    "custom",
    "hooks",
    "good",
    "place",
    "check",
    "understand",
    "would",
    "going",
    "copy",
    "paste",
    "everything",
    "file",
    "use",
    "local",
    "storage",
    "hook",
    "know",
    "basically",
    "adopting",
    "interface",
    "use",
    "state",
    "except",
    "also",
    "keeping",
    "sync",
    "local",
    "storage",
    "see",
    "right",
    "like",
    "setting",
    "value",
    "local",
    "storage",
    "getting",
    "value",
    "local",
    "storage",
    "parameters",
    "pass",
    "key",
    "use",
    "track",
    "local",
    "storage",
    "documented",
    "little",
    "bit",
    "read",
    "time",
    "necessarily",
    "super",
    "important",
    "understand",
    "internals",
    "also",
    "note",
    "added",
    "effect",
    "right",
    "basically",
    "keeps",
    "track",
    "tabs",
    "change",
    "let",
    "close",
    "things",
    "went",
    "back",
    "original",
    "implementation",
    "react",
    "app",
    "prior",
    "videos",
    "see",
    "listening",
    "state",
    "change",
    "pretty",
    "much",
    "become",
    "irrelevant",
    "using",
    "react",
    "kind",
    "built",
    "paradigm",
    "react",
    "also",
    "listening",
    "local",
    "storage",
    "another",
    "tab",
    "view",
    "changes",
    "created",
    "effect",
    "thing",
    "update",
    "state",
    "variable",
    "every",
    "time",
    "another",
    "tab",
    "changes",
    "state",
    "close",
    "see",
    "easy",
    "go",
    "back",
    "comment",
    "original",
    "state",
    "need",
    "name",
    "thing",
    "set",
    "state",
    "state",
    "set",
    "state",
    "instead",
    "use",
    "state",
    "going",
    "use",
    "local",
    "storage",
    "import",
    "going",
    "ask",
    "us",
    "key",
    "say",
    "game",
    "state",
    "key",
    "ask",
    "us",
    "initial",
    "value",
    "going",
    "right",
    "thing",
    "passed",
    "earlier",
    "uncomment",
    "going",
    "see",
    "quick",
    "easy",
    "update",
    "remember",
    "go",
    "react",
    "game",
    "play",
    "moves",
    "refresh",
    "going",
    "work",
    "replace",
    "use",
    "state",
    "use",
    "local",
    "storage",
    "import",
    "file",
    "need",
    "give",
    "game",
    "state",
    "key",
    "key",
    "used",
    "local",
    "storage",
    "first",
    "argument",
    "default",
    "value",
    "second",
    "keep",
    "state",
    "sync",
    "local",
    "storage",
    "even",
    "think",
    "play",
    "game",
    "refresh",
    "find",
    "state",
    "refresh",
    "also",
    "duplicate",
    "tab",
    "play",
    "something",
    "going",
    "sync",
    "side",
    "vice",
    "versa",
    "got",
    "synced",
    "local",
    "storage",
    "think",
    "replicated",
    "original",
    "application",
    "full",
    "last",
    "part",
    "going",
    "cleanup",
    "making",
    "things",
    "easier",
    "kind",
    "find",
    "read",
    "let",
    "go",
    "look",
    "like",
    "data",
    "ids",
    "need",
    "paradigm",
    "original",
    "implementation",
    "needed",
    "stable",
    "way",
    "select",
    "dom",
    "element",
    "get",
    "rid",
    "let",
    "go",
    "components",
    "okay",
    "menu",
    "data",
    "ids",
    "good",
    "furthermore",
    "extract",
    "things",
    "let",
    "make",
    "file",
    "called",
    "utility",
    "functions",
    "remember",
    "derived",
    "derived",
    "game",
    "derived",
    "stats",
    "also",
    "players",
    "outside",
    "component",
    "take",
    "stuff",
    "could",
    "leave",
    "problem",
    "either",
    "throw",
    "utils",
    "file",
    "export",
    "okay",
    "need",
    "import",
    "types",
    "types",
    "file",
    "import",
    "player",
    "game",
    "state",
    "satisfy",
    "functions",
    "isolated",
    "utils",
    "file",
    "course",
    "need",
    "import",
    "command",
    "period",
    "import",
    "utils",
    "see",
    "got",
    "import",
    "work",
    "okay",
    "kind",
    "cleans",
    "app",
    "file",
    "longer",
    "need",
    "use",
    "state",
    "use",
    "local",
    "storage",
    "hook",
    "uses",
    "state",
    "hood",
    "expand",
    "pretty",
    "much",
    "final",
    "game",
    "find",
    "code",
    "repository",
    "left",
    "video",
    "description",
    "sure",
    "look",
    "typescript",
    "branch",
    "find",
    "exact",
    "implementation",
    "also",
    "version",
    "app",
    "done",
    "close",
    "develop",
    "developer",
    "server",
    "webpack",
    "dev",
    "server",
    "good",
    "thing",
    "always",
    "check",
    "make",
    "sure",
    "builds",
    "correctly",
    "build",
    "scripts",
    "let",
    "run",
    "yarn",
    "build",
    "basically",
    "check",
    "types",
    "type",
    "checking",
    "compile",
    "everything",
    "bundle",
    "output",
    "public",
    "directory",
    "also",
    "try",
    "build",
    "prod",
    "make",
    "sure",
    "optimizations",
    "okay",
    "complain",
    "anything",
    "go",
    "finally",
    "got",
    "live",
    "server",
    "running",
    "port",
    "5500",
    "already",
    "since",
    "built",
    "app",
    "totally",
    "static",
    "actually",
    "view",
    "directly",
    "public",
    "directory",
    "rather",
    "using",
    "webpack",
    "dev",
    "server",
    "think",
    "webpack",
    "came",
    "job",
    "compiled",
    "everything",
    "transpiled",
    "everything",
    "gave",
    "us",
    "one",
    "nice",
    "clean",
    "bundle",
    "output",
    "ready",
    "go",
    "got",
    "need",
    "browser",
    "knows",
    "load",
    "app",
    "let",
    "go",
    "back",
    "browser",
    "go",
    "localhost",
    "5500",
    "close",
    "everything",
    "know",
    "got",
    "lot",
    "folders",
    "let",
    "go",
    "live",
    "react",
    "refactor",
    "click",
    "public",
    "give",
    "us",
    "game",
    "able",
    "use",
    "like",
    "dev",
    "server",
    "reset",
    "get",
    "new",
    "round",
    "going",
    "play",
    "game",
    "wanted",
    "show",
    "good",
    "thing",
    "check",
    "build",
    "make",
    "sure",
    "works",
    "could",
    "really",
    "could",
    "deploy",
    "game",
    "right",
    "cdn",
    "static",
    "assets",
    "could",
    "put",
    "cloudflare",
    "know",
    "whatever",
    "want",
    "served",
    "users",
    "thrown",
    "github",
    "pages",
    "hopefully",
    "educational",
    "video",
    "hopefully",
    "enjoyed",
    "seeing",
    "go",
    "vanilla",
    "javascript",
    "application",
    "port",
    "react",
    "kind",
    "see",
    "benefits",
    "using",
    "react",
    "makes",
    "lot",
    "code",
    "lot",
    "simpler",
    "basically",
    "went",
    "let",
    "kind",
    "recap",
    "went",
    "live",
    "ts",
    "refactor",
    "app",
    "let",
    "close",
    "scroll",
    "main",
    "app",
    "file",
    "registering",
    "event",
    "listeners",
    "controlling",
    "everything",
    "state",
    "store",
    "class",
    "view",
    "handling",
    "selecting",
    "elements",
    "rendering",
    "basically",
    "react",
    "us",
    "binding",
    "event",
    "listeners",
    "got",
    "helper",
    "methods",
    "stuff",
    "pretty",
    "verbose",
    "write",
    "even",
    "delegate",
    "method",
    "could",
    "figure",
    "square",
    "clicked",
    "pretty",
    "confusing",
    "gone",
    "react",
    "application",
    "tell",
    "go",
    "pretty",
    "concise",
    "got",
    "delegate",
    "methods",
    "handle",
    "everything",
    "basically",
    "right",
    "event",
    "handlers",
    "got",
    "hook",
    "helps",
    "us",
    "deal",
    "local",
    "storage",
    "components",
    "split",
    "separate",
    "concerns",
    "also",
    "separate",
    "css",
    "much",
    "cleaner",
    "way",
    "write",
    "application",
    "lot",
    "easier",
    "extend",
    "future",
    "let",
    "know",
    "thought",
    "video",
    "sure",
    "give",
    "like",
    "subscribe",
    "channel",
    "see",
    "next",
    "time"
  ],
  "keywords": [
    "created",
    "development",
    "course",
    "back",
    "concepts",
    "html",
    "css",
    "javascript",
    "typescript",
    "react",
    "let",
    "get",
    "started",
    "hey",
    "code",
    "name",
    "really",
    "video",
    "working",
    "take",
    "game",
    "build",
    "vanilla",
    "refactor",
    "go",
    "finally",
    "going",
    "super",
    "world",
    "building",
    "actually",
    "would",
    "call",
    "kind",
    "another",
    "couple",
    "developer",
    "since",
    "stuff",
    "put",
    "action",
    "give",
    "project",
    "little",
    "bit",
    "always",
    "want",
    "come",
    "giving",
    "check",
    "got",
    "also",
    "make",
    "three",
    "together",
    "talking",
    "next",
    "previous",
    "source",
    "well",
    "said",
    "show",
    "process",
    "play",
    "works",
    "across",
    "browser",
    "local",
    "storage",
    "know",
    "different",
    "players",
    "bunch",
    "things",
    "actions",
    "menu",
    "reset",
    "start",
    "wins",
    "separate",
    "someone",
    "see",
    "modal",
    "entire",
    "background",
    "click",
    "state",
    "time",
    "even",
    "refresh",
    "tab",
    "new",
    "round",
    "right",
    "um",
    "useful",
    "anything",
    "think",
    "like",
    "us",
    "patterns",
    "example",
    "looking",
    "pattern",
    "view",
    "controller",
    "represent",
    "event",
    "words",
    "means",
    "one",
    "squares",
    "listener",
    "parent",
    "component",
    "find",
    "square",
    "clicked",
    "uh",
    "grid",
    "using",
    "lot",
    "probably",
    "type",
    "least",
    "basic",
    "prior",
    "original",
    "based",
    "good",
    "could",
    "referencing",
    "first",
    "part",
    "starting",
    "app",
    "way",
    "understand",
    "quick",
    "add",
    "grab",
    "completed",
    "throw",
    "application",
    "two",
    "use",
    "something",
    "makes",
    "easier",
    "reference",
    "create",
    "folder",
    "live",
    "basically",
    "everything",
    "getting",
    "might",
    "final",
    "thing",
    "document",
    "visual",
    "studio",
    "reason",
    "need",
    "open",
    "server",
    "default",
    "already",
    "running",
    "ahead",
    "close",
    "okay",
    "rid",
    "empty",
    "file",
    "say",
    "vs",
    "built",
    "second",
    "save",
    "dev",
    "matter",
    "correctly",
    "command",
    "called",
    "used",
    "pretty",
    "much",
    "point",
    "hit",
    "whatever",
    "user",
    "configuration",
    "added",
    "every",
    "dealing",
    "sure",
    "set",
    "elements",
    "change",
    "js",
    "tag",
    "changes",
    "whether",
    "end",
    "ui",
    "last",
    "copy",
    "typing",
    "quite",
    "longer",
    "look",
    "complete",
    "trying",
    "scoreboard",
    "player",
    "indicator",
    "number",
    "top",
    "section",
    "bottom",
    "hard",
    "remember",
    "clear",
    "items",
    "container",
    "class",
    "display",
    "nine",
    "styles",
    "simple",
    "order",
    "types",
    "files",
    "try",
    "selector",
    "color",
    "red",
    "text",
    "directory",
    "select",
    "index",
    "main",
    "content",
    "wanted",
    "figure",
    "says",
    "represents",
    "within",
    "case",
    "board",
    "furthermore",
    "div",
    "style",
    "many",
    "anyways",
    "initialize",
    "root",
    "able",
    "dash",
    "variable",
    "believe",
    "height",
    "looks",
    "moment",
    "work",
    "pixels",
    "oh",
    "obviously",
    "rather",
    "delete",
    "saying",
    "sorry",
    "explicit",
    "maybe",
    "turn",
    "equals",
    "oops",
    "instead",
    "item",
    "tell",
    "remove",
    "keep",
    "happening",
    "step",
    "sort",
    "making",
    "better",
    "element",
    "flex",
    "version",
    "done",
    "left",
    "similar",
    "footer",
    "whole",
    "page",
    "yet",
    "current",
    "explicitly",
    "hover",
    "paste",
    "still",
    "mode",
    "gets",
    "animation",
    "notice",
    "classes",
    "script",
    "icon",
    "x",
    "move",
    "yellow",
    "defined",
    "property",
    "behavior",
    "value",
    "match",
    "zero",
    "place",
    "happens",
    "key",
    "toggle",
    "button",
    "initial",
    "hidden",
    "update",
    "comment",
    "nothing",
    "correct",
    "given",
    "dom",
    "later",
    "data",
    "id",
    "earlier",
    "wrong",
    "border",
    "ca",
    "functionality",
    "define",
    "selected",
    "directly",
    "ids",
    "utility",
    "turquoise",
    "implement",
    "handle",
    "easy",
    "anymore",
    "control",
    "leave",
    "read",
    "implemented",
    "replace",
    "import",
    "global",
    "available",
    "argument",
    "write",
    "target",
    "nice",
    "happen",
    "break",
    "question",
    "static",
    "adding",
    "listeners",
    "win",
    "ties",
    "events",
    "common",
    "either",
    "store",
    "stable",
    "map",
    "hook",
    "logic",
    "best",
    "load",
    "render",
    "run",
    "hello",
    "console",
    "guess",
    "implementation",
    "track",
    "callback",
    "object",
    "dot",
    "query",
    "list",
    "method",
    "pass",
    "documentation",
    "base",
    "instance",
    "properties",
    "methods",
    "existing",
    "function",
    "scope",
    "problem",
    "undefined",
    "namespace",
    "dollar",
    "sign",
    "derive",
    "error",
    "access",
    "errors",
    "init",
    "es6",
    "syntax",
    "calling",
    "listening",
    "tracking",
    "moves",
    "register",
    "information",
    "equal",
    "null",
    "node",
    "array",
    "log",
    "worked",
    "tie",
    "history",
    "derived",
    "checking",
    "closed",
    "games",
    "otherwise",
    "2",
    "return",
    "updating",
    "valid",
    "winning",
    "winner",
    "push",
    "helper",
    "passing",
    "status",
    "made",
    "message",
    "label",
    "typed",
    "docs",
    "reading",
    "constructor",
    "modules",
    "module",
    "export",
    "strict",
    "handler",
    "passed",
    "string",
    "private",
    "public",
    "components",
    "getter",
    "returning",
    "stats",
    "clone",
    "install",
    "jsx",
    "ts",
    "compiler",
    "yarn",
    "tsc",
    "compile",
    "compiled",
    "options",
    "config",
    "output",
    "webpack",
    "dist",
    "babel",
    "entry",
    "loader"
  ]
}