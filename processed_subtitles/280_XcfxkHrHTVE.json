{
  "text": "Hello friends it's me again today I'm\ngoing to explain modules a module is\njust a python file containing code you\nwant to include in your program you use\nthe import keyword to include a module\nyou can use built-in modules or create\nyour own sometimes it's useful to break\nup a large program into reusable\nseparate files for a list of all the\nmodules found within the standard python\nLibrary you can use the help function\npass in the word modules and then we\nwould need to print this\nhere are many of the different modules\navailable to you a few you may recognize\nwould be math string time one of my\nfavorite names of a module is the pickle\nmodule unfortunately it doesn't have\nanything to do with Pickles it's used\nfor serialization to list all of the\ndifferent variables and functions found\nwithin a module you can place that name\nof the module within the help function\nfor example with the math module here\nare a few different variables we would\nhave access to and a few different\nfunctions\nto include a module we would type import\nthe name of the module for example math\nI now have access to everything found\nwithin the math module including those\nvariables and functions to access those\nvariables and functions I would normally\ntype the name of the module dot the name\nof the variable or function such as Pi\nthen let's print this\nPI from the math module\nis 3.14 and some change another way to\nimport is to type import the name of the\nmodule as you can give your module a\nnickname an alias whatever you think of\nsuch as m m short for math we would no\nlonger refer to this module as math we\nwould refer to it as our Alias m\nusing an alias would reduce some of the\ntyping you have to use if you have a\nvery long module name another way to\nimport is to use from the name of the\nmodule import something specific Pi for\ninstance\nyou would no longer need the module name\nfrom math import Pi Pi would be included\nwithin our namespace however I tend to\nnot use from import as much just because\nit's possible there could be name\nconflicts here's an example let's say\nfrom math import e e is an exponential\nconstant\ne is 2.71 what if I was to create a\nprogram where we have four variables\nnamed a b c d a equals one b equals two\nC equals three D equals four then I'm\ngoing to print\nE from the math module\nto the power of a\nthat would give me 2.71\nthen let's do this with b c and d\ne to the power of b e to the power of c\ne to the power of d\nhere are the results let's say we have a\ndifferent variable e\ne will be five\nthen I will print\ne to the power of E\nwe have imported E from the math module\nwhen we have declared all of these\nvariables I have unintentionally\nreassigned E from the math module\nwithout realizing it\nall my results are now different and\nit's possible you may not realize it I\nlike to be more explicit I'm going to\nimport math if I'm using a variable or\nfunction from a module I much prefer to\nprefix that variable name or function\nwith the name of the module in which\nit's from math.e to the power of a to\nthe power of B to the power of C to the\npower of D math dot e to the power of\nour variable e\nand these results are to be expected Now\nto create a module\nwhat we're going to do is right click on\nour project folder go to new python file\nthink of a module name maybe example\nthen click python file\nwe now have two tabs\nMain and example declare whatever you\nwould like within this module let's\ncreate our own variable Pi Pi equals\n3.14159 then a few functions let's\ncreate a function to square an argument\nthat's passed in Define Square we will\naccept an argument which we will name X\nthen return x to the power of 2.\nlet's define a cube function we will\naccept one argument then return x to the\npower of three\nmaybe a circumference function\nDefine circumference\nwe will accept a radius\nthen return 2 times pi times radius then\nan area function to calculate the area\nof a circle\nwe will accept a radius as an argument\nthen return pi times radius to the power\nof 2.\nall right here is our example module\nwithin our main Python program let's\nimport the name of our module which we\nnamed example we now have access to\neverything within this module\nI'm going to declare a variable result\nand set it to the name of my module dot\nPi then I will print the result\nwhich is 3.14159\nlet's utilize the square function result\nequals example dot Square let's Square\nthree\nwhich is nine\nlet's use the cube function\nthat would be 27\ncircumference\nthat would give me 18.8\nthen area\nthat would be 28.2\nthat's how to create your own module it\ncan be useful at times to separate your\nprogram into individual files alright\neverybody in conclusion a module is just\na file containing code you want to\ninclude in your program you use import\nto include a module you can use built-in\nmodules or create your own if you do\nneed a list of the modules available to\nyou again you can use the help function\nthen pass in the word modules and well\neverybody that's how to get started with\nmodules in Python\n",
  "words": [
    "hello",
    "friends",
    "today",
    "going",
    "explain",
    "modules",
    "module",
    "python",
    "file",
    "containing",
    "code",
    "want",
    "include",
    "program",
    "use",
    "import",
    "keyword",
    "include",
    "module",
    "use",
    "modules",
    "create",
    "sometimes",
    "useful",
    "break",
    "large",
    "program",
    "reusable",
    "separate",
    "files",
    "list",
    "modules",
    "found",
    "within",
    "standard",
    "python",
    "library",
    "use",
    "help",
    "function",
    "pass",
    "word",
    "modules",
    "would",
    "need",
    "print",
    "many",
    "different",
    "modules",
    "available",
    "may",
    "recognize",
    "would",
    "math",
    "string",
    "time",
    "one",
    "favorite",
    "names",
    "module",
    "pickle",
    "module",
    "unfortunately",
    "anything",
    "pickles",
    "used",
    "serialization",
    "list",
    "different",
    "variables",
    "functions",
    "found",
    "within",
    "module",
    "place",
    "name",
    "module",
    "within",
    "help",
    "function",
    "example",
    "math",
    "module",
    "different",
    "variables",
    "would",
    "access",
    "different",
    "functions",
    "include",
    "module",
    "would",
    "type",
    "import",
    "name",
    "module",
    "example",
    "math",
    "access",
    "everything",
    "found",
    "within",
    "math",
    "module",
    "including",
    "variables",
    "functions",
    "access",
    "variables",
    "functions",
    "would",
    "normally",
    "type",
    "name",
    "module",
    "dot",
    "name",
    "variable",
    "function",
    "pi",
    "let",
    "print",
    "pi",
    "math",
    "module",
    "change",
    "another",
    "way",
    "import",
    "type",
    "import",
    "name",
    "module",
    "give",
    "module",
    "nickname",
    "alias",
    "whatever",
    "think",
    "short",
    "math",
    "would",
    "longer",
    "refer",
    "module",
    "math",
    "would",
    "refer",
    "alias",
    "using",
    "alias",
    "would",
    "reduce",
    "typing",
    "use",
    "long",
    "module",
    "name",
    "another",
    "way",
    "import",
    "use",
    "name",
    "module",
    "import",
    "something",
    "specific",
    "pi",
    "instance",
    "would",
    "longer",
    "need",
    "module",
    "name",
    "math",
    "import",
    "pi",
    "pi",
    "would",
    "included",
    "within",
    "namespace",
    "however",
    "tend",
    "use",
    "import",
    "much",
    "possible",
    "could",
    "name",
    "conflicts",
    "example",
    "let",
    "say",
    "math",
    "import",
    "e",
    "e",
    "exponential",
    "constant",
    "e",
    "create",
    "program",
    "four",
    "variables",
    "named",
    "b",
    "c",
    "equals",
    "one",
    "b",
    "equals",
    "two",
    "c",
    "equals",
    "three",
    "equals",
    "four",
    "going",
    "print",
    "e",
    "math",
    "module",
    "power",
    "would",
    "give",
    "let",
    "b",
    "c",
    "e",
    "power",
    "b",
    "e",
    "power",
    "c",
    "e",
    "power",
    "results",
    "let",
    "say",
    "different",
    "variable",
    "e",
    "e",
    "five",
    "print",
    "e",
    "power",
    "e",
    "imported",
    "e",
    "math",
    "module",
    "declared",
    "variables",
    "unintentionally",
    "reassigned",
    "e",
    "math",
    "module",
    "without",
    "realizing",
    "results",
    "different",
    "possible",
    "may",
    "realize",
    "like",
    "explicit",
    "going",
    "import",
    "math",
    "using",
    "variable",
    "function",
    "module",
    "much",
    "prefer",
    "prefix",
    "variable",
    "name",
    "function",
    "name",
    "module",
    "power",
    "power",
    "b",
    "power",
    "c",
    "power",
    "math",
    "dot",
    "e",
    "power",
    "variable",
    "e",
    "results",
    "expected",
    "create",
    "module",
    "going",
    "right",
    "click",
    "project",
    "folder",
    "go",
    "new",
    "python",
    "file",
    "think",
    "module",
    "name",
    "maybe",
    "example",
    "click",
    "python",
    "file",
    "two",
    "tabs",
    "main",
    "example",
    "declare",
    "whatever",
    "would",
    "like",
    "within",
    "module",
    "let",
    "create",
    "variable",
    "pi",
    "pi",
    "equals",
    "functions",
    "let",
    "create",
    "function",
    "square",
    "argument",
    "passed",
    "define",
    "square",
    "accept",
    "argument",
    "name",
    "x",
    "return",
    "x",
    "power",
    "let",
    "define",
    "cube",
    "function",
    "accept",
    "one",
    "argument",
    "return",
    "x",
    "power",
    "three",
    "maybe",
    "circumference",
    "function",
    "define",
    "circumference",
    "accept",
    "radius",
    "return",
    "2",
    "times",
    "pi",
    "times",
    "radius",
    "area",
    "function",
    "calculate",
    "area",
    "circle",
    "accept",
    "radius",
    "argument",
    "return",
    "pi",
    "times",
    "radius",
    "power",
    "right",
    "example",
    "module",
    "within",
    "main",
    "python",
    "program",
    "let",
    "import",
    "name",
    "module",
    "named",
    "example",
    "access",
    "everything",
    "within",
    "module",
    "going",
    "declare",
    "variable",
    "result",
    "set",
    "name",
    "module",
    "dot",
    "pi",
    "print",
    "result",
    "let",
    "utilize",
    "square",
    "function",
    "result",
    "equals",
    "example",
    "dot",
    "square",
    "let",
    "square",
    "three",
    "nine",
    "let",
    "use",
    "cube",
    "function",
    "would",
    "27",
    "circumference",
    "would",
    "give",
    "area",
    "would",
    "create",
    "module",
    "useful",
    "times",
    "separate",
    "program",
    "individual",
    "files",
    "alright",
    "everybody",
    "conclusion",
    "module",
    "file",
    "containing",
    "code",
    "want",
    "include",
    "program",
    "use",
    "import",
    "include",
    "module",
    "use",
    "modules",
    "create",
    "need",
    "list",
    "modules",
    "available",
    "use",
    "help",
    "function",
    "pass",
    "word",
    "modules",
    "well",
    "everybody",
    "get",
    "started",
    "modules",
    "python"
  ],
  "keywords": [
    "going",
    "modules",
    "module",
    "python",
    "file",
    "include",
    "program",
    "use",
    "import",
    "create",
    "within",
    "function",
    "would",
    "print",
    "different",
    "math",
    "variables",
    "functions",
    "name",
    "example",
    "access",
    "dot",
    "variable",
    "pi",
    "let",
    "e",
    "b",
    "c",
    "equals",
    "power",
    "square",
    "argument",
    "accept",
    "return",
    "radius",
    "times"
  ]
}