{
  "text": "[Music]\nthere are variety of devops rules that\nare commonly used to automate and\nstreamline different aspects of the\nsoftware development and deployment\nprocess in order to improve the speed\nand quality of the software releases\nhello everyone and welcome to this\nsession you are currently watching an\nedureka devops tools full course\nby the end of this video you will have\nan idea of the multiple devops tools\nthat are currently in demand now if you\nlove watching videos like these then\nsubscribe to edunaker's YouTube channel\nand click the Bell button to never miss\nout any updates from us also if you want\nto learn more about devops after\nwatching this session and wish to obtain\na Eureka's devop certification course\nthen please see the link in the\ndescription below now let's begin with\nour agenda where we'll have a brief\noverview of what we will cover in this\ndevops tools full course video\nwe will start with the introduction to\ndevops where we will learn what devops\nis and why should we learn it\nafter which we will see the devops life\ncycle now it's time to get our hands\ndirty with some popular devops tools we\nwill start with Git followed by Jenkins\nand Docker after this we will learn\nabout kubernetes puppet and ansible once\nthis is done we will then move ahead\nwith terraform Prometheus and gravna we\nwill also see selenium and egg years now\nafter all this we will head over to\nAzure devops and AWS demons we will then\ncompare Azure devops to AWS devops\nwe hope that this session assists you in\ngetting jobs in the industry in order to\naccomplish this we will look at how our\ncareer intervals work with some\nessential devops interview questions\nwith answers\nso stick to lead now let's get started\nwith our first topic that is what is\ndevops foreign\n[Music]\nwhat is devops\nit's basically a combination of Tours\ndevelopment and operations so what do we\nget when we combine these two\n[Music]\ndevops is a culture that implements\ntechnology in order to promote\ncollaboration between development and\noperations team to deploy code to\nproduction faster in an automated and\nrepeatable way the goal of devops is to\nincrease an organization's speed when it\ncomes to delivering applications and\nservices many companies have\nsuccessfully implemented devops to\nenhance their user experience let's say\nfor example Facebook's mobile app which\nis updated every two weeks effectively\ntelling users you can have what you want\nand you can have it now ever wondered\nhow Facebook was able to do this so\nsmoothly it's the divorce philosophy\nthat helps Facebook ensure that its apps\naren't outdated and that its users get\nthe best experience Facebook\naccomplishes this through a code\nownership model that makes its\ndevelopers responsible that includes\ntesting and supporting through\nproduction and Delivery for each kernel\nof code they write and update\nextra policies like this that Facebook\nhas developed a divorce culture and has\nsuccessfully accelerated its development\nlife cycle Industries have started to\ncure up for the digital transformation\nby shifting their needs to weeks and\nmonths instead of yours while\nmaintaining high quality as a result we\nwill soon see that devops Engineers have\nmore access and control of the end user\nthan any other person in the Enterprise\n[Music]\nlet's understand one major concept of\ndevops that is the devops life cycle so\nif you are into devops from quite some\ntime now you must have heard at least\none of these devops faces that is\ncontinuous development continuous\nintegration continuous testing\ncontinuous deployment and continuous\nmonitoring so all of these phases that I\njust mentioned make up the devops life\ncycle the first phase is the continuous\ndevelopment phase so this is the phase\nthat involves planning and coding of the\nsoftware so the vision of the project is\ndecided during the planning phase and\nthe developers begin developing the code\nfor the application there are no devops\ntools that are required for planning but\nthere are a number of tools for\nmaintaining the code the code can be\nwritten in any language but it is mainly\nmaintained by using Version Control\ntools so here maintaining the code is\nreferred to a source code management\nso some of the most popular version\ncontrol tools are git SVN Mercurial CVS\nEtc also tools like ant Maven Gradle can\nbe used in this phase for building or\npackaging the code into an executable\nfile that can eventually be forwarded to\nany of the next phases\nthe next phase in the devops life cycle\nis continuous testing so this is the\nstage where the develop software is\ncontinuously tested for bugs for\ncontinuous testing automation testing\ntools like selenium test NG junit Etc\nare used so basically the tools that I\njust mentioned right now I love quality\nassurances to test multiple code bases\nthoroughly in parallel to ensure there\nare no flaws in the functionality so\nwhat automation testing does is it saves\na lot of time effort and labor for\nexecuting the test instead of doing this\nmanually right also in this phase Docker\ncontainers can be used for simulating\nthe test environment selenium here does\nthe automation testing and the reports\nare generated by test NG so this entire\ntesting phase can be automated with the\nhelp of a continuous integration tool\ncalled Jenkins we'll talk about Jenkins\nlater on in the session\nso now let me explain you this with an\nexample suppose you've written a\nselenium code in Java to test your\napplication now what you can do is you\ncan build this code using Anto Maven and\nonce the code is built it is tested for\nuser acceptance testing so this entire\nprocess can be automated using Jenkins\nbesides that the report generation is a\nvery big plus point the task of\nevaluating the test cases that failed in\na test Suite gets simpler we can also\nschedule the execution of test cases at\npredefined times once the entire testing\nis done the code is continuously\nintegrated with the existing code the\nthird phase of this life cycle is\ncontinuous integration so now this stage\nis the heart of the entire devops life\ncycle it is a software development\npractice in which the developers require\nto commit changes to the source code\nmore frequently this may be on a daily\nor a weekly basis so every comment is\nthen built and this allows early\ndetection of problems if there present\nbuilding code does not involve\ncompilation but it also includes code\nreview unit testing integration testing\nand packaging the code that is\nsupporting new functionality is\ncontinuously integrated with the\nexisting code since there is continuous\ndevelopment of software the updated code\nneeds to be integrated continuously as\nwell as smoothly with the systems to\nreflect changes to the end users as I've\nalready said in the previous slide\nJenkins is a very popular tool used in\nthis phase so whenever there is a change\nin the git repository Jenkins simply\nfetches the updated code and It prepares\na build of that code which is in an\nexecutable file so once this entire\nbuild is performed it is then forwarded\nto the test server or the production\nserver now let's move on to the fourth\nphase of the cycle that is the\ncontinuous deployment phase so this is\nthe stage where the code is deployed to\nthe production servers it is very\nimportant to ensure that the code is\ncorrectly deployed on all the servers\nnow before moving on let us understand a\nfew things about configuration\nmanagement and containerization tools\nnow these set of tools help in achieving\ncontinuous deployment firstly I will\ntalk about configuration management it\nis basically the act of establishing and\nmaintaining consistency in an\napplication's functional requirements\nand performance so let me put this in\nsimple words it is the act of releasing\ndeployments to servers scheduling\nupdates and most importantly keeping the\nconfigurations consistent across all the\nservers since the new code is deployed\non a continuous basis configuration\nmanagement tools play an extremely\nimportant role in executing tasks\nquickly and frequently now some popular\ntools that are used here are puppet chef\nsolstack and ansible\ncontainerization tools also play an\nequally important role in the deployment\nstage Docker is one of the most popular\ntool used for this purpose basically\nthese tools help produce consistency\nacross development test staging and\nproduction environments besides this\nthey also help in scaling up and scaling\ndown of instances very swiftly basically\ncontainerization tools help in\nmaintaining consistency across the\nenvironments where the application is\ndeployed developed and tested using\nthese tools there is no scope of errors\nor failures in the production\nenvironment as they package and\nreplicate the same dependencies and\npackages used in the development or\ntesting or staging environment basically\nit makes your application easy to run on\ndifferent computers\nthe next stage is the continuous\nmonitoring stage this is the last stage\nin the devops life cycle this is a very\ncrucial stage where you continuously\nmonitor the performance of your\napplication so here Vital Information\nabout the use of the software is\nrecorded this information is processed\nto recognize the proper functionality of\nthe application the system errors such\nas low memory server not reachable Etc\nare resolved in this phase the root\ncause of any issue is determined in this\nphase it also maintains security and\navailability of the services\nalso if there are any network issues\nthey are resolved in this phase that is\nit helps us automatically fix the\nproblem as soon as they're detected\nso now this practice involves the\nparticipation of the operations team who\nwill monitor the user activity for bugs\nor any improper behavior of the system\nthe most popular tools used for this\nphase is Splunk El key stack negios New\nRelic and sensual so what these tools do\nis they help you monitor the\napplication's performance and the\nservers very closely and they also\neventually enable you to check the\nhealth of the system proactively now\nusing these tools they can also improve\nproductivity and increase the\nreliability of the systems which in turn\nreduces it support costs any major\nissues if found are reported to the\ndevelopment team so that it can be fixed\nin the continuous development phase this\nalso leads to a faster resolution of the\nproblems the stages are carried out on\nLoop continuously till you achieve the\ndesired product quality therefore almost\nall of the major it companies have\nshifted to devops for building their\nproducts\nmoving on if you want to become a devops\nengineer or be a part of this ideology\nit is extremely important for you to be\nfamiliar with some devops related tools\ntoday I will be talking about seven\nimportant devops tools now before we\nunderstand the tools devops Engineers\nuse it is important to understand\ncontainers so what are containers\ncontainers allow you to package your\napplication and its dependencies\ntogether into one manifest that can be\nversion controlled allowing for easy\nreplication of your application across\ndevelopers on your team and machines in\nyour cluster this is exactly why\ncontainer-based microservices\narchitectures have profoundly changed\nthe way development and operation teams\ntest and deploy software containers\nreally help companies modernize by\nmaking it easier to scale and deploy\napplications but they have also\nintroduced new challenges in complexity\nby creating an entirely new\ninfrastructure ecosystem\nit companies are now deploying thousands\nof container instances daily and that's\na complexity of scale they have to\nmanage how do they do it here is where\nkubernetes comes to the rescue\nkubernetes is a container management\ntechnology developed in Google to manage\ncontainerized applications in different\nkinds of environments like physical\nvirtual Cloud infrastructure Etc so it\nreally is just an open source system\nwhich helps in creating and managing\ncontainerization of applications its\ncontainer management responsibilities\ninclude container deployment scaling and\ndescaling of containers and container\nload balancing it is extremely important\nto remember that kubernetes is not a\ncontainerization platform it is a\nmulti-container management solution now\nlet's move on and discuss some of the\nfeatures of kubernetes the first one is\nautomated scheduling so kubernetes\nprovides an advanced scheduler to launch\ncontainers on cluster nodes based on the\nresource requirements and other\nconstraints while not sacrificing\navailability the second feature is\nself-healing capabilities so kubernetes\nallows you to replace and reschedule\ncontainers when nodes type it also kills\ncontainers that do not respond to\nuser-defined health checks and does not\nadvertise them to clients until they are\nready to serve\nthe third feature is automated rollouts\nand rollback so what kubernetes does is\nit rolls out changes to the application\nor its configuration while monitoring\nyour application Health to ensure it\ndoes not kill all your instances at the\nsame time so if something goes wrong\nwith kubernetes you can simply roll back\nthe change the fourth feature is\nhorizontal scaling and load balancing\nkubernetes can scale up and scale down\nthe application as per the requirements\nwith a simple command using a user\ninterface or automatically based on CPU\nusage now let us understand the\narchitecture the kubernetes architecture\nhas two main components the first one is\nthe masternode the second one is the\nworker node so the master node is\nresponsible for the management of\nkubernetes cluster it is mainly the\nentry point for all administrative tasks\nthey can always be more than one Master\nnode in the cluster to check for fault\ntolerance\nso there are few components in the\nmaster node that I'd like to discuss the\nfirst one is the API server so here the\nAPI server is the entry point for all\nthe resd commands used to control the\ncluster the second one is the controller\nmanager it is a Daemon that regulates\nthe kubernetes cluster and manages\ndifferent non-terminating control loops\nthe third one is the scheduler so the\nscheduler schedules the task to worker\nnodes so what it really does is it\nstores the resource usage information\nfor each worker node the fourth one is\nthe etcd so the etcd is simple\ndistributed consistent key value store\nso what it mainly is used for is to\nshare configuration and service\ndiscovery now that we know how the\nmasternodes work let's move on to the\nworker nodes\nso these worker nodes contain all the\nnecessary services to manage the\nnetworking between the containers\ncommunicate with the masternode and\nassign resources to the scheduled\ncontainers\nso the first component that we'll be\ntalking about in this worker node is the\ndocker container so Docker runs on each\nof the worker nodes and runs the\nconfigured pods the second one is the\ncubelet the cubelet gets the\nconfiguration of a pod from the API\nserver and ensures that the Discraft\ncontainers are up and running the third\none is Cube proxy so Q proxy acts as a\nnetwork proxy and a load balancer for a\nservice on a single Walker node the\nfourth one is pods so a pod is one or\nmore containers that logically run\ntogether on nodes\nwith this we come to the end of the\nFirst Tool in devops tool let's move on\nto the second tool that is Docker so\nwhat is a Docker Docker is simply a\ncontainerization platform that packages\nyour application and all its\ndependencies together in the form of\ncontainers to ensure that your\napplication works seamlessly in any\nenvironment so each application here\nwill run on a separate container and\nwill have its own set of libraries and\ndependencies it must be really\nconvenient to move around these\ncontainers right\nso containers also ensures that there is\na process level isolation meaning each\napplication is independent of other\napplications giving developers surety\nthat they can build applications that\nwill not interfere with one another now\nthe quality assurance team need not\ninstall all the dependent software and\napplications to test the code and this\nhelps them save lots and lots of time\nand energy this also ensures that the\nworking environment is consistent across\nall the individuals involved in the\nprocess starting from development to\ndeployment so here the number of systems\ncan be scaled up easily and the code can\nbe deployed on them effortlessly there\nare some basic concepts of Docker you\nmust be aware of that is Doc file Docker\nimage and Docker container so a Docker\nimage is created by the sequence of\ncommands written in a file called Docker\nfile when this Docker file is executed\nusing a Docker command it results into a\nDocker image with a name\nso finally when this image is executed\nby Docker run command it will by itself\nstart whatever application or service it\nmust start on its execution\nso I hope Docker file Docker images and\nDocker containers are clear we'll\nunderstand what is Docker Hub now so\nDocker Hub is basically a cloud registry\nwhere you can find Docker images\nuploaded by different communities also\nyou can develop your own image and\nupload on Docker Hub But first you need\nto create an account to Docker hub\nso let's move on and understand what a\nDocker engine is so the docker engine is\nthe heart of the system it is simply the\napplication that is installed on your\nhost machine basically it works like a\nclient server application it uses a\nserver which is a type of a long running\nprogram called a Daemon process it also\nuses a command line interface client and\nfinally it uses an rest API which is\nused for communication between the CLI\nclient and Docker daemin as per the\nimage in a Linux operating system there\nis a client which can be accessed from\nthe terminal and a host which runs the\ndaemin we build our images and run\ncontainers by passing commands from the\nCLI client to the daemin however in the\ncase of Windows or Mac there is an\nadditional toolbox component inside the\ndocker host so this Docker toolbox is an\ninstaller to quickly and easily install\nand set up a Docker environment on your\nwindows or your Macbook so this toolbox\ninstalls Docker client machine compose\nwhich is only present in mac and\nvirtualbox with this we come to the end\nof Docker we'll move on to the third\ntool of devops tools that is git so git\nis an extremely important tool for\nsoftware developers it is a free open\nsource distributed Version Control\nSystem designed to handle everything\nfrom small to very large projects with\nspeed and efficiency it was created by\nlennis travels in 2005 to develop Linux\nkernel git has the functionality\nperformance security and flexibility\nthat most teams and individual\ndevelopers need it also serves as an\nimportant distributed Version Control\ndevops tool so git is primarily used to\nmanage your project comprising a set of\ncode or text files that may change over\ntime\nnow before we go further let us take a\nstep back to learn about Version Control\nSystems and how git came into existence\nso Version Control is the management of\nchanges to documents computer programs\nlarge websites and other collection of\ninformation there are basically two\ntypes of Version Control Systems the\nfirst one being centralized Version\nControl System the second one is\ndistributed version control system so\ngit is a distributed Version Control\nSystem where every contributor that is\nthe user has a local copy or clone of\nthe main repository what is the\nrepository a repository is simply a\nstorage space for your project files\nhere everyone maintains a local\nrepository of their own which contains\nall the files and metadata present in\nthe main repository so the local\nrepository is usually on the local\nmachine of the user so every programmer\nmaintains a local repository which is\nactually the copy or clone of the\ncentral repository on the hard drive the\ncentral repository may be present on a\nweb hosting platform like GitHub they\ncan commit and update the local\nrepository without any interference they\ncan also update their local repositories\nwith new data from the central server by\nan operation called pull and effect\nchanges to the main repository by an\noperation called push from the local\nrepository so I hope everyone understood\nhow git works now moving on let us\nunderstand the role of get in devops so\ngive plays a very vital role when it\ncomes to managing the code that the\ncollaborators contribute to the shared\nrepository so the score is then\nextracted for performing continuous\nintegration to create a build and test\nit on the test server and eventually\ndeploy it to the production tools like\nget enable communication between the\ndevelopment and the operations team when\nyou're developing a large project with a\nhuge number of collaborators it is\nextremely important to have\ncommunication between the collaborators\nwhile making changes within the project\ncommit messages and get paid a very\nimportant role in communicating among\nthe team the bits and pieces that we all\ndeploy lies in the version control\nsystem like get to succeed in devops you\nneed to have all of the communication in\nVersion Control hence git plays a very\nvital role in succeeding at devops now\nlet's move on to the next tool that is\nselenium selenium is one of the most\nwidely used open source web user\ninterface automation testing Suite it\nwas originally developed by Jason\nHawkins in 2004 as an internal tool at\nthoughtworks so selenium supports\nautomation across different browsers\nplatforms and programming languages so\nthis tool can be easily deployed on\nplatforms such as Windows Linux Solaris\nand Macintosh moreover it supports\noperating systems for mobile\napplications like Windows and Android\nselenium supports a wide variety of\nprogramming languages through the use of\ndrivers specific to each language\nlanguage is supported by selenium\ninclude c-sharp Java Perl PHP Python and\nRuby currently selenium Webdriver is the\nmost popular with Java and c-sharp\nselenium test strips can be coded in any\nof the supported programming languages\nand can be run directly in most modern\nweb browsers browsers supported by\nselenium include Internet Explorer\nMozilla Firefox Google Chrome and Safari\nso basically it can be used to automate\nfunctional tests and can be integrated\nwith automation test tools such as Maven\nJenkins and Docker to achieve continuous\ntesting it can be also integrated with\ntools such as test NG and junit for\nmanaging test cases and generating\nreports so now moving on what are the\nadvantages of selenium why should we\nchoose selenium since selenium is open\nsource there is no licensing cost\ninvolved which is a major advantage over\nother testing tools there are many other\nreasons behind selenium's ever-growing\npopularity the first one is that test\nscripts can be written in any of the\nprogramming languages that is Java\npython C sharp PHP Ruby pearl.net Etc\ndesk can also be carried out in any of\nthe operating systems that is Windows\nMac or Linux test can also be carried\nout using any browser that is Mozilla\nFirefox Internet Explorer Google Chrome\nSafari Opera we've all discussed this in\nthe previous slide\nand the last use is that it can be\nintegrated with Maven Jenkins and Docker\nto achieve continuous testing\nso in short selenium can be used for\nautomated testing also because it has\ncross browsers compatibility it is more\npreferred and it also increases test\ncoverage and reduces test execution time\nnow moving on let us understand an\nimportant Concept in selenium that is\nthe selenium grid selenium grid was\ndeveloped by Patrick lightbody and\ninitially called it hosted QA it was\nused in a combination with remote\ncontrol to run tests on remote machines\nin fact with grid multiple test scripts\ncan be executed at the same time on\nmultiple machines parallel execution is\nachieved with the help of Hub node\narchitecture one machine will assume the\nrole of Hub and the others will be the\nnodes Hub controls the test scripts\nrunning on various browsers inside\nvarious operating systems test scripts\nbeing executed on different nodes can be\nwritten in different programming\nlanguages grid is still in use and works\nwith both Webdriver and remote control\nso we'll be learning about the Webdriver\nin the next slide however maintaining a\ngrid with all required browsers and\noperating systems is a very huge\nchallenge for this there are multiple\nonline platforms that provide an online\nselenium grid that lets you access to\nrun your selenium automation scripts for\nexample you can use Lambda test it has\nmore than 2000 browser environments over\nwhich you can run your test and truly\nautomate cross browser testing now let's\nunderstand what is selenium Webdriver\nselenium Webdriver is a webis automation\ntesting framework that can test web\npages initiated on various web browsers\nand various operating systems in fact\nyou also have the freedom to write test\nscripts in different programming\nlanguages like Java Perl python\nEtc it is important to remember that\nMozilla Firefox selenium webdriver's\ndefault browser now some benefits of\nselenium Webdriver are that they support\nseven programming languages they test on\nvarious browsers and they work on\ndifferent operating systems also it\novercomes limitations of selenium\nversion 1 like file upload download\npop-ups and dialogues period now let's\nmove on to the next most important tool\nthat is Jenkins\ncontinuous integration is the most\nimportant part of devops that is used to\nintegrate various devops stages\nJenkins is the most popular continuous\nintegration tool it is an open source\nautomation tool written in Java with\nplugins built for continuous integration\npurposes\nJenkins is basically used to build and\ntest your software projects continuously\nmaking it easier for developers to\nintegrate changes to the project and\nmaking it easier for users to obtain a\nfresh build it also allows you to\ncontinuously deliver your software by\nintegrating with a large number of\ntesting and deployment Technologies\nso basically with Jenkins organizations\ncan accelerate the software development\nprocess through automation Jenkins\nintegrates development lifecycle\nprocesses of all kinds including build\ndocument test package stage deploy\nstatic analysis and much more so this\ntool also achieves continuous\nintegration with the help of plugins\nplugins are extremely important it\nallows the integration of various devops\nstages if you want to integrate a\nparticular tool you need to install that\nparticular plugin for that tool for\nexample git Maven to project Amazon ec2\nHTML publisher Etc there are many\nadvantages of Jenkins and I'd want to\ndiscuss each one of them in detail so\nthe first one is it is an open source\ntool with a great Community Support the\nsecond one is it is extremely easy to\ninstall\nthe next one is it has more than\nthousand plugins to ease your work now\nif a plugin does not exist you can\nsimply code it and share it with the\ncommunity\nthe fourth Advantage is it is free of\ncost the last one is it is built with\nJava now if you have been coding for\nsome time now you must be knowing that\nJava is portable to all the major\nplatforms so this gives an added\nadvantage to Jenkins\nso what makes Jenkins different from the\nother continuous integration tools there\nare two reasons the first one is\nadoption the second one is plugins so\nJenkins is widespread with more than one\nlakh 47 000 active installations and\nover 1 million users around the world\nthe adoption of Jenkins is extremely\nhigh the second one is that Jenkins is\ninterconnected with well over thousand\nplugins that allow it to integrate with\nmost of the development testing and\ndeployment tools so these two features\nthat is adoption and plugins make it one\nof the best continuous integration tools\ncurrently available in the market\nnow let's move on to the next tool of\ndevops tools that is puppet today the\nmost mature tool for configuration\nmanagement is puppet but I know you must\nbe wondering why puppet is so popular\nand what makes it unique when compared\nto other configuration management tools\npuppet is a configuration management\ntool that is used for deploying\nconfiguring and managing servers so now\nlet's understand the functions of puppet\nso the first one is it helps in defining\ndistinct configurations for each and\nevery host and it also continuously\nchecks and confirms whether the required\nconfiguration is in place and is not\naltered on the host the second function\nis dynamic scaling up and scaling down\nof machines the last one is it provides\ncontrol over all your configured\nmachines so a centralized change gets\npropagated to all automatically puppet\nbasically uses a master sleeve\narchitecture in which the master and\nslave communicate through a secure\nencrypted Channel with the help of SSL\nnow let's see this architecture in\ndetail so as you can see the diagram on\nthe screen the puppet agent sends the\nfax to the Puppet Master facts are\nbasically key value data pair that\nrepresents some aspect of the slave\nstate such as its IP address uptime\noperating system or whether it's a\nvirtual machine\nPuppet Master uses the facts to compile\na catalog that defines how the slave\nshould be configured catalog is a\ndocument that describes the desired\nstate for each resource that Puppet\nMaster manages on a Slave\npuppet slave reports back to the master\nindicating that the configuration is\nfinally complete which is visible in the\npuppet dashboard\nnow with this we come to the last tool\nof devops nag iOS\nknock iOS monitors your entire it\ninfrastructure to ensure systems\napplications servers and business\nprocesses are functioning properly it is\nan integral to the devops lifecycle so\nit is basically used for continuously\nmonitoring of systems application\nservers and business processors in a\ndevops culture so in the event of a\nfailure nag iOS can alert technical\nstaff of the problem allowing them to\nbegin remediation processes before\noutages affect business processes end\nusers or customers with this tool you\ndon't really have to explain why an\nunseen infrastructure outage affects\nyour organization's bottom line\nnow the iOS runs on a server usually as\na Daemon or a service it periodically\nruns plugins residing on the same server\nthe contact hosts or servers on your\nnetwork or on the Internet one can view\nthe status information using the web\ninterface you can also receive email or\nSMS notification if something happens\nthe NOG iOS Daemon behaves like a\nscheduler that runs certain scripts at\ncertain moments it stores the results of\nthose scripts and will run other scripts\nif these result changes\nNaga iOS also use plugins so these are\ncompiled executables scripts that can be\nrun from a command line to check the\nstatus or a host or a service nag iOS\nalso uses the results from the plugins\nto determine the current status of the\nhosts and services on your network\nnow the iOS is built on a server or\nagent's architecture usually on a\nnetwork a nag iOS server is running on a\nhost and plugins interact with local and\nall the remote hosts that need to be\nmonitored so these plugins will send\ninformation to the scheduler which\ndisplays that in a graphical user\ninterface with this we come to the end\nof devops tools let's move on to the\nnext part of the session that is devops\nautomation\nautomation is the crucial need for\ndevops practices and automating\neverything is the fundamental principle\nof devops we discussed this initially in\nthe session\nautomation kickstarts from the code\ngeneration on the developers machine\nuntil the code is pushed to the code and\nafter that to monitor the application\nand system in the production\nautomating infrastructure setup and\nconfigurations software deployment is\nthe key highlight of devops practice\ndevops practice is dependent on\nautomation to make deliveries over a few\nhours and make frequent deliveries\nacross platforms\nAutomation and devops boosts speed\nconsistency higher accuracy reliability\nand increases the number of deliveries\nAutomation and devops encapsulates\neverything right from the building\ndeploying and monitoring in large devops\nteam that meet an extensive massive I.T\ninfrastructure the tools can be\nclassified into six categories that is\ninfrastructure automation configuration\nmanagement deployment automation\nPerformance Management log management\nand monitoring so for infrastructure\nautomation a great example is the Amazon\nweb services being a cloud service you\ndon't really need to be physically\npresent in the data center they're easy\nto scale on demand and there are no\nupfront Hardware costs it can also be\nconfigured to provide more servers based\non traffic automatically for the second\none Chef is a great example Chef is a\nhandy devops tool for achieving speed\nscale and consistency it can be used\nthese are complex tasks and perform\nconfiguration management with the help\nof this tool the devops team can avoid\nmaking changes across 10 000 servers\nrather they need to make changes in one\nplace which is automatically reflected\nin other servers\nfor deployment automation Jenkins is a\ngreat example as we have already\ndiscussed before it helps facilitate\ncontinuous integration and testing it\nintegrates project changes more\nefficiently by quickly finding issues as\nsoon as bills are deployed\nfor the fourth one that is Performance\nManagement application Dynamic is a\ngreat example it offers real-time\nperformance monitoring the data that is\ncollected by this tool help developers\nto debug whenever an issue occurs\nthe fifth one that is for log management\nSplunk is a great example this devops\ntool solves issues such as storing\naggregating and analyzing all logs in\none place\nso for the last one that is monitoring\nnow iOS is a great example it notifies\npeople when infrastructure and related\nServices go down it is a tool for this\npurpose which helps the devops team to\nfind and correct problems immediately\n[Music]\nlet's start out with what's Version\nControl so to understand what is Version\nControl System we need to understand\nfirst why we need a version control\nsystem so we'll see why do we exactly\nneed a version control system so for\nthat let's take a scenario where there\nare three developers working remotely on\na web application or a mobile\napplication now for simplicity's sake\nlet's just assume that it is a streaming\napplication and one of them is working\non a streaming page let's call them\ndeveloper one developer 2 is working on\na user information page and developer 3\nis creating the payment portal now all\nthree of them are done with their\nrespective Pages at 10 o'clock 11\no'clock and 12 o'clock respectively now\nthing is all three developers are\nworking in isolation there may be their\nown changes there may be changes in\nsomebody's else's page they're all kind\nof adding some new files or modifying\nolder files changing the source code or\nsomething like that throughout the\ncourse of this project\nbut how exactly are they going to\ncollaborate considering that they are\nworking remotely the solution to this is\na version control system with this\nsystem I'll tell you what happens at 10\no'clock developer 1 uploads all the\nfiles regarding the streaming page with\nthe Version Control System this\nmodification is recorded and updated to\none Central directory or folder so every\ntime you're modifying an older file or\nadding a new file it creates a snapshot\nof the latest version or the latest\nupdate of the changes that you've made\nor all the files that you've uploaded so\nthe snapshot of your update at 10\no'clock is saved and then when developer\n2 adds their user info page this\nmodification is also saved as a snapshot\nnow there are two snapshots saved and\nfinally the payment portal page is added\nand this is the last modification done\nat 12 o'clock and this is the most\nrecent snapshot saved along with other\nsnapshots of other updates and\nmodifications done throughout the course\nof this project every change in your\nproject a snapshot is created and your\nentire project is saved that way and\nthese snapshots are actually known as\ndifferent versions which are basically\nthe state of your project at a\nparticular time or at the current time\nit means that it will contain the kind\nof files your project is storing at one\nparticular time and what kind of changes\nyou have made so far between the\nprevious version and this particular\nversion and this is exactly how a\nversion control system works so Version\nControl System basically is a system\nthat records changes to a file or a set\nof files over time so that you can\nrecord specific versions later these\nversions are recorded in a repository\nand they can be called any time from\nthese repositories during the course of\nyour project\nso Version Control Systems essentially\nare of three types now the local version\ncontrol system is one of the simplest\nforms of VCS and has a database that\nkeeps all the changes of the files under\nrevision control so all the files are\nsaved by this one user and they manage\nall of the files but it's actually\nreally hard to maintain the changes of\nthe file and you can accidentally\nreplace one or the other file that you\nneed it also needs something known as\nRCS or revision control system which\nkeeps patch sets or the differences\nbetween updates in a special format on\nyour disk all of this your local Version\nControl Systems maintains all the track\nof all the files within your local\nsystem as a user you can track\nspecifically our versions later and it\nbasically works as an independent\nStandalone system for an application so\nyour applications like spreadsheets and\nword processors have this control\nmechanism so that's one type apart from\nthis you also have your centralized\nversion control system which basically\nuses a central server to store all the\nfiles and enables team collaboration so\nit's not one local system but multiple\nsystems which work on a single\nrepository to which users can directly\naccess as a central server so the\nrepository is a central server that\ncould be local or remote which is\ndirectly connected to each of the\nprogrammers workstation and the Third\nKind of VCS is a distributed version\ncontrol system now these systems do not\nnecessarily rely on a central server to\nstore all the versions of a project file\nin a distributed Version Control System\nevery contributor has a local copy or a\nclone of the main repository so everyone\nmaintains their own local repository\nwhich contains all the files and the\nmetadata present in the main repository\nand they can push or come commit or\nupdate the main repository if and when\nrequired now we are going to cover more\non the latter two Version Control\nSystems further in the session\nso now let's try and understand in depth\nwhat's the difference between a\ncentralized version control system and a\ndistributed version control system as I\nhad mentioned before in a centralized\nVersion Control System each programmer\nworking on a branch on a project has\nabsolute access to the central server so\nthe centralized version control system\nuses a central server to store all the\nfiles and everybody on the team can\ndirectly access the central server as it\nis one single repository so if you have\nthree workstations workstation one\nworkstation 2 workstation 3 all of them\ncan directly commit to the repository\nand get updates from the repository\nwhich is your central server the\nrepository here indicates a server that\ncould be local or remote directly\nconnected to each programmer's\nworkstation every programmer can extract\nor update their workstations with the\ndata present in the report repository or\ncan make changes or updates or commit in\nthe Repository\nand every operation is performed\ndirectly on this repository even though\nthis seems pretty convenient when we are\njust talking about three people to\nmaintain a single repository like this\nhas some major drawbacks one of them is\nthat it's not locally available meaning\nevery change that you have to make you\nwill have to be connected to a network\nto perform any action also in any case\nthe central server getting crashed or\ncorrupted will result in losing the\nentire data of the project also another\nsmall thing which is revertible but is\nif one person accidentally makes some\nunwanted updates instead of his or her\nlocal system they will be making that\nchanges directly in the central server\nso recovering that part back will be\nagain a time consuming process this is\nwhere distributed Version Control\nSystems come to the rescue now these\nsystems do not necessarily rely on a\ncentral server to store all the versions\nof a project file in the distributed\nVersion Control System each and every\ncontributor has a local copy or a local\nworkstation clone of the main repository\nthat is everybody maintains a local\nrepository of their own which contains\nall the files and metadata present in\nthe main repository you will understand\nit better if you take a look at the\ndiagram as you can see every programmer\nmaintains a local repository or a local\ncopy on its own which is actually the\ncopy or clone of the central repository\non their local hard drive they can\ncommit and update their local repository\nwithout any interference from one\nanother and then they can update their\nlocal repositories with new data from\nthe central server by by an operation\ncalled pull once they are done with\ntheir bit of the code they can affect\nthe changes of the main repository by an\noperation called push from their local\nRepository\nnow this system or this act of cloning\nan entire repository to your workstation\nand making all the changes on a local\nrepository gives you a couple of\nadvantages over a centralized Version\nControl System first of all all the\noperations except push and pull are very\nfast because the tool only needs access\nto the hard drive and not a remote\nserver hence you do not always need to\nbe connected via a network connection or\nyou always do not need an internet\nconnection committing new change sets\ncan be done locally without manipulating\nthe data on the main repository once you\nhave a group of change sets ready you\ncan push them all at once so you\ncomplete your set of code on your local\nsystem and then you push all the files\nonce and for all into the main\nRepository third since every contributor\nhas a full copy of the project\nrepository they can share changes with\none another on wanting to get some\nfeedback before affecting the changes in\nthe main repository so this enhances the\nessence of collaboration amongst a\ndevelopment team and finally if the\nserver gets crashed at any point in time\nthe loss data can be easily recovered\nfrom one of the contributors local\nrepository and that is why distributed\nversion control system has been picking\nup popularity over the past decade so\nwhy version controller is important\nfirst of all it helps collaboration it\nallows remote development shared\nworkspace and real-time updates\nall versions of your code are preserved\nhence it helps you manage versions of\nthe same code easy rollback from current\nversion suppose a part of your project\nhas been headed to a wrong direction you\ncan easily roll back from the current\nversion to the last version which was\nstable now because you can reverse\nfaulty updates you can save time and\nhence it reduces downtime of your\nproject development and finally it\nimproves visibility you can analyze and\ncompare different versions and that\ngives you like a 50 foot top view of\nyour entire project which just\naccelerates your product delivery so now\nthat you have a bare sense of what is\nVersion Control and why do you need\nVersion Control let's understand one of\nthe most popular version control systems\nthat exist today and that is git\nso git is a distributed Version Control\ntool that supports distributed\nnon-linear workflows by providing data\nAssurance from developing quality\nsoftware so basically what it does is\nthat it lets you and your team of\ndevelopers work together on the same\nproject remotely from anywhere across\nthe world your team members can work\nefficiently on files and easily merge\ntheir changes into one source without\nthe fear of losing or deleting anything\nof importance due to the easy rollback\nfeature it is primarily used to manage a\nproject comprising of a set of code or\ntext files that you may want to change\nfrom time to time now git is an integral\npart of devops devops as most of you\nmight have the idea of is the practice\nof bringing agility to the process of\ndevelopment and operations a couple\nyears ago it was this entirely\nrevolutionary ideology with swept the\norganizations worldwide boosting project\nlife cycles and in turn increasing\nprofits devops promoted communication\nbetween development engineers and\noperations participating together in the\nentire life cycle from design through\ndevelopment process to production\nsupport now in the entire life cycle of\ndevops starting from planning of the\nprojects to its deployment and\nmonitoring git plays a vital role when\nit comes to managing the code that\ncollaborators contribute to the shared\nrepository this code is extracted for\nperforming continuous integration to\ncreate a build and test it on the test\nserver and eventually deploy it to\nproduction tools like git enable\ncommunication between the development\nand operation in Steam when you are\ndeveloping a large project with a huge\nnumber of collaborators it is extremely\nimportant to have communication between\nthe collaborators between the developers\nwhile making changes in the project\nproject comment messages in git play a\nvery important role in this particular\ncollaboration or communication amongst\nthe team the bits and pieces that we\ndeploy or update lies in this version\ncontrol system such as git to succeed in\ndevops you need to have all the\ncommunication in Version Control\nhence git plays an extremely vital role\nin succeeding ant devops and due to this\nvery reason git has earned way more\npopularity compared to other version\ncontrol tools available in the market\nsuch as Apache subversion concurrent\nversion systems and Mercurial if you\ncompare the interest of git buy time\nwith other Version Control Systems you\nshall realize that larger companies\nproducts are generally developed by\ndevelopers using git all around the\nglobe and some famous names out of them\nare Facebook Yahoo Zynga quora Twitter\neBay Salesforce Microsoft and many many\nmore\nnow lately all of Microsoft's new\ndevelopment work has been in git\nfeatures Microsoft migrating.net and\nmany of its open source projects on\nGitHub which are managed by git one of\nsuch projects is the light GBM it's a\nfast distributed high performance\ngradient boosting framework based on the\ndecision tree algorithms which is used\nfor ranking classification and many\nother machine learning tasks here git\nplays an important role in managing this\ndistributed version of light GBM by\nproviding speed and accuracy so\nbasically to enable Version Control git\nis your go to solution it's fast and\nsuitable for handling massive code bases\nscattered across multiple developers\nwhich makes it the most popular tool\nused today now that you know about git a\nterminology we'll be using a lot while\ntalking about git and GitHub is a\nrepository now repository or repo as its\nmost commonly known as is a directory or\na storage space where your projects can\nbasically live it can be local to a\nfolder or your computer or it can be a\nstored space in another online host such\nas your GitHub and in this particular\nspace in this particular directory you\ncan keep your code files text files\nimages you name it all of it inside a\nrepository to the course of this we\nshall also be talking about something\nknown as GitHub which is nothing but a\ncentral repository the kind that we\nspoke about when we discussed\ncentralized versus distributed Version\nControl Systems there's a central\nrepository and that is where all of your\ncode will live\nyou have your local repository where\nyou'll make the changes and there you\nhave the central repository to which you\nwill push all of the changes yeah and\nthe central repository is something that\nall of the developers involved in this\nparticular project in a certain project\nhave access to\nall right moving on let's discuss a few\ngit features which make it so popular\namongst organizations as well as\nindividuals first of all it's economical\nit's free and open source git is\nreleased under GPS general public\nlicenses open source license so you\ndon't need to purchase Git it is\nabsolutely free and since it's open\nsource you can modify the source code as\nper your requirement second is its speed\nnow since you do not have to connect to\nany network for performing all of the\noperations it completes all the tasks\nreally fast performance tests done by\nMozilla showed it was an order of\nmagnitude faster than other Version\nControl Systems fetching version history\nfrom locally sold repository can be 100\ntimes faster than fetching it from the\nremote server so the core part of git is\nwritten in C which avoids runtime\noverheads associated with other\nhigh-level languages which makes it\nextremely fast compared to other Version\nControl Systems next is that git\nsupports non-linear development it\nsupports rapid branching and merging and\nincludes specific tools for\nvisualization and navigation of a\nnon-linear development history a\nco-assumption in git is that a change\nwill be merged more often than it's\nwritten as it is passed on various\nreviewers hence branches in git are very\nvery lightweight and is only a reference\nto a single Comet with a parental comets\nthe full branch structure can be\nconstructed next let's talk about the\nrobustness\nnearly every single task in git is\nundoable git gives each developer a\nlocal copy of the entire development\nhistory and the changes copied from one\nrepository to another these changes are\nimported as additional development\nbranches and can be merged and deleted\nand recovered the same way as a locally\ndeveloped Branch next is the snapshots\nwhich are recorded changes made to a\nfile rather than the file itself\nfollowed by which you have integrity\nwhich means no changes can be made\nwithout git recording it since every\ncontributor has their own local\nrepository on the events of a system\ncrash the loss data can be recovered\nfrom any of the local repositories you\nwill always have a backup of all of your\nfiles and none of the changes made to\nthe central repository will go unlocked\nby git git uses the sha1 or the secure\nhash function to name and identify\nobjects within its repository and every\nfile every comment is check summed and\nretrieved by its checksum at the time of\nthe checkout the git history is stored\nin such a way that the ID of a\nparticular version a commit in gets\nterms depends upon the complete\ndevelopment history leading up to that\nComet once it's published it's not\npossible to change the old versions\nwithout it being recorded then it's a\ndistributed system which means every\nuser has their own copy of their\nrepository and the data is stored\nlocally git gives each developer a local\ncopy of the entire development history\nand the changes are copied from one such\nrepository to another these changes are\nimported as additional development\nbranches and can be merged in the same\nway as a locally developed branch and\nfinally it's easy branching now Branch\nmanagement with Git is very simple it\nonly takes a few seconds to create\ndelete and merge branches feature\nbranches provide an isolated environment\nfor each change to your code base so\nwhen a developer wants to start working\non something no matter how big or small\nthey can create a fresh new branch which\nis not interfering with the main branch\nwhich ensures that the master branch of\nthe main branch always contains\nproduction quality code so any little\nexperimentation that you want to do or\nlittle things that you want to try out\ncan always be on a separate feature\nBranch instead of the changes made to\nyour master Branch because ultimately\nyour master Branch should contain your\npublishable product so now that you know\nthe basic features of git let's try and\nunderstand what the basic workflow of\ngit is or how does git work so the basic\noverview of how git Works goes like this\nyou basically create a repository or a\nproject with a git hosting tool like git\norbit bucket you copy or clone the\nrepository to your own local machine or\nyour working directory you add a file to\nyour local repository and commit the\nchanges which basically means you save\nthe changes then you push the changes to\nyour master Branch then you make changes\nto your file and commit then you pull\nthe changes to your local machine you\ncreate a branch or a version make a\nchange commit the change same process\nopen a pull request and merge your\nbranch to the master Branch now this is\na little complicated listening to it\nlike this but once we get on to our\ndemonstration I think things will be way\nmore clear you can still take a good\nlook at this diagram\nbut if you don't get it don't worry I\nwill be explaining these operations one\nby one when we get to the demonstration\npart of this git tutorial moving on\nlet's get to the good part the Hands-On\nsection\nstarting with the installation and setup\nof git now there are two ways in which\nthis goes first of all for Windows users\nyou need to install git bash for Windows\nand for Linux users you'll have to start\nby updating the package index and then\ninstall git using the terminal\nso first of all for our Learners using\nWindows you'll have to log on to get\nscm.com\ndownloads and then click on downloads\nfor Windows button and then run the\nexecutable file and follow through till\nyou finally install git Bash\nI'm not going to install it completely\nas I already have git bash downloaded\nbut I'm still going to open the page to\nshow you guys all right so the latest\nSource release is get\n2.30.1 on the 8th of Feb and you can\njust click on this button the moment you\nclick on this button it's going to start\ndownloading it to you and once you have\nthe executable file all you have to do\nis open it or run it in your own system\nright\nnext for people using Linux this is an\nexample considering you are using Ubuntu\nif you're using Centos a lot of the\ncommands don't change but instead of Apt\ninstall you will be using yum install\nfor sentos so for that now I'm going to\nopen my terminal on a virtual machine so\nhere I have running an Ubuntu machine\nusing the oracle virtualbox\nso I'm gonna start by\nrunning\nan update\nall right this is going to take a while\nkindly be patient\nso here I have my Ubuntu running on a\nvirtual machine\nso to install git on your Ubuntu machine\nyou have to start by updating so this\nwill take some time\nif you're going to use sudo of Apt\nupdate if you're using Centos you will\nbe using yum instead of Apt\nlet's scale that out and\nthen we're going to install git\nand then you can look for the Git\nVersion\nyeah all right now that we have our git\ninstalled let's go ahead and look at the\noperations and commands that we are\ngoing to take a look at today you have\nyour repository set up which include the\ncommands init clone config and Alias\nthen you have your save changes\noperations which have your add commit\ndiff and stash all of these commands we\nare going to go on and off and look at\ncollectively mostly then we are going to\nlook at the inspect operations your\ninspect repository operations of which\nthe git status command is something we\nare also going to look at throughout\nthis demonstration right from the\nbeginning so apart from that you have\nyour kit log git tag and get blame\ncommands so you have your merge rebase\ncommand\nso let's move on to our first set of get\noperations first of all you have your\ngit init command which basically creates\na new empty git repository now this can\nbe used to convert an existing inversion\nproject to a kit repository or initiate\nan absolute fresh git repository now\nmost of the git commands are not\navailable outside of the initialized\nrepository so this is usually the first\ncommand that you will run in a new\nproject that is if you're using git Bash\nso when I run git in it it\nre-initializes an existing git\nrepository which I already have here now\nwhat this does is it\nre-initialized my existing git\nrepository in this particular directory\nin this dot get directory yeah what git\ninit does is that it creates an empty\ngit repository or re-initializes an\nexisting one like it did for me right\nnow it basically creates a DOT get\ndirectory with subdirectories and\ntemplate files and when you run the git\ninit command in an existing repository\nit will not overwrite the things that\nare already there it'll rather pick up\nthe newly added templates\nso that's the repository initialized you\ncan go ahead and create some files in\nthe directory or repository whatever you\ncall it now that is about initialization\nnow what about if there was an existing\nrepository on git that you had to act\nupon that you had to make updates to\nthat you had to add files to things like\nthat\nthat's where you use the git clone\nutility yeah now you have the git clone\nutility which you use to Target an\nexisting repository and create a clone\nor copy of this particular repository on\nyour local machine now this is one of\nthe features provided to you by a\ndistributed version control system as we\nhad discussed before so this is a blank\nfile called edureka rep with just the\nreadme text file let me just go ahead\nand\ncopy this\nand then I can just\nget clone and paste its\nhttps URL\nand as you can see it's cloning this\ninto a Eureka rep\nand now if I change directory\nto edit a wrap\nyou can see the readme file is right\nthere yeah\nso we're basically going to work off of\nthis particular repository today at\nEureka rep yeah so now that we created a\nclone moving on we have in the git\nconfig command which basically is a\nconvenience function that is used to set\nup your git configuration values on your\nGlobal or local project level this\ncommand is basically used to modify your\nconfiguration text file\nso if I typed get config\nglobaluser.email and here\nby type\nso there I given my email ID as the\nglobal user email ID so if I ask for\nwhat the global user email ID is it will\nreturn my ID back to me yeah\nbasically these configuration levels\nlike a username and your user ID\ncorrespond to your dot get config text\nfiles now executing this basically will\nhelp you modify the configuration text\nfile git uses this series of\nconfiguration files to determine\nnon-default behavior that you may want\nyeah so the first place git looks for\nthese values is in the system-wide\nconfiguration file which contains\nsettings that are applied to every user\non this system so basically if you pass\nthe option to your git config it will\nread and write from this file\nspecifically and the next place the git\nlooks is the config slash git config\nfile which is specific to each user now\nyou can make git read or write to this\nfile by passing your Global option which\nis what I did\nand the final command in the setup\noperations that we are going to look at\nis an alias now Alias as the name\nsuggests is basically used to create\nshorter commands that map to longer\ncommands they enable more efficient\nworkflows when you obviously have to use\nlesser keystrokes to execute a command\nthere are these lengthy commands which\nobviously kill a lot of your time so\nthese aliases you can use to shorten\nthose commands and these are also\nsomething that you will create via the\ngit config command there isn't really a\ndirect way or a direct command of\ncreating aliases yeah this is just\nsomething I wanted to add in here along\nwith the git config command like a very\ncommon Alias created is co for checkout\nor anything else EK for checkout so yeah\nthis is something that you can do using\nthe git config command just creating\naliases moving on let's look at\noperations that you use to add changes\nand save changes to your git Repository\nnow the first two commands here that\nwe're going to look at are git add and\ngit commit now this combination is\nbasically used to create these snapshots\nthat I was talking about initially in\nthis session right so basically what you\ndo is first you use the git add command\nto add a change in your current\ndirectory or your working directory and\nyou add that to the staging area it\ntells git that you want to include a\nparticular set of updates or changes in\na particular file in the next comment\nthen what you do is you move on to git\ncommit after making the changes to your\nworking tree then you use the git commit\ncommand which captures a snapshot of\nyour Project's current state\nso basically you use add to update the\nindex using the current content found in\nyour working tree and then you basically\nprepare the content in the staging area\nfor the next commit then you run the\ncommit command to take that snapshot of\nyour Project's current status now\nremember this is very important and you\nhave to do it each time you must use the\nadd command to add any new modified\nfiles to the index\nyou can't directly commit anything\nwithout adding it to the stage area\nfirst\nnow what I did was I quickly went ahead\nand added three files to my repository\nat Eureka rep so\nif I go into this repository you can see\nthere are three files at Eureka file one\nfile two file three now let's see if\nthese files are in my index or not using\nthe command get status now git status\nbasically displays the state of the\nworking directory and the staging area\nit will list all the modified files\nwhich are ready to be added to the local\nrepository it lets you see which changes\nhave been staged and which haven't which\nfiles are being tracked by get and not\nso if I typed get status\nyou can see on your main branch\nyou have three untracked files which are\nthe three files that I just added and\nduring a file one two and three\nthese are not added to the index yet\nthis means I cannot commit these changes\nunless I added them explicitly to the\nindex\nso now we are going to add these three\nfiles this command will update the index\nusing the current content which is found\nin your working tree as you can see in\nfront of you and then it will prepare\nthe content in the staging area for the\nnext comment\nso either I can just get add and put in\nthe directory name or I can just use git\nadd with an extension of a which means\nall and this will add all of these files\nto the index which are in the directory\nbut not updated in the index yet yeah\nnow I've done that let me go ahead and\nuse git status again and you can see all\nof these file names are written in green\nand you can see changes to be committed\nwritten here which means all of these\nchanges are ready to be committed they\nare added to the index now these files\nare added to the index you are ready to\ncommit them\nnow as I had mentioned before we're\ngoing to commit them and committing\nrefers to recording the snapshots of the\nrepository at any given time so your\ncommitted snapshots will never change\nunless it's done explicitly so I'm going\nto clear this and we're going to come at\nthis by typing git Comet and then adding\na tag or a message called\ncommitting\nthree files\nlet's try this out as you can see three\nfiles change three insertions you can\nsee our add Eureka files one two three\nhave been committed the git comment\ncommand has committed the changes in the\nthree files in your local repository now\nif you want to commit a snapshot of all\nof the changes in your working directory\nat once you can always go with commit\nhyphen a now let me add a couple more\nfiles to my directory just to show you\nthe difference between your files added\nto the index versus the ones that are\nnot\nif I type LS again you can see there are\ntwo more files over here\nas you can see I have two other files\nI'm just going to add\nthe edureka file 4 and not the file 5\nand then I'm just gonna get commit\ncommenting files\nand as you can see only one file changed\nonly one insertion happened and that\nonly happened because\nedureka file 5 is not added to the index\nand even if I use the extension a I\ncannot add edureka file 5 because that\nhas not been added to your index\nnow if I just go ahead and add I didn't\nmake a file 5\nvoila\nthe change has occurred in our git\nRepository now if I typed git status\nthere are no more files to add or commit\nour branch is ahead of the origin or\nmain branch by three commits and you can\nuse git push to publish your local\ncommits now what is git push this is\nsomething we will cover later in this\nsession\nNow understand that before you affect\nthe changes made to the central\nrepository you should always pull\nchanges from the central repository to\nyour local repository just to get the\nmost updated version of your branch\nyou'll get all the work of your\ncollaborators that have been\ncontributing in the central repository\nfor that you use the pull command now as\nyou can see there's nothing to commit\nand you're working very slim\nthere are other commands like the git\nstatus command which you could use for\nsimilar purposes for example you have\nthe git log command which only operates\non committed history it basically will\ndisplay to you the committed snapshots\nand will let you list the project\nhistory filtrate and search for specific\nchanges so if you are typed git log it's\ngoing to show you all the comments that\nhave happened since we started with this\ngit file okay here you can see at the\nbottom your original main there is your\ninitial commit right then our first\ncomment where we committed three files\nthen we committed the fourth file and\nfinally when we committed file number\nfive\nright these are all the comments\nincluding the initial commit the first\none yeah along with the author and the\ndate and time remember when I told you\nabout everything is recorded when you're\nusing git this is what I meant you will\ncan always access who made comments at\nwhat time and what comments were made\nwhen you use a Version Control System\nsuch as git now at a point like this I\nthink it's crucial to mention uh one\nmore command which is the git tag and\nit's used to basically capture a tag in\nhistory or a point in history that is\nused for a marked version release right\nso it's basically uh like a branch that\ndoesn't change and after being created\nthey have no further history of comets\nyeah so that was one and another one is\ngit blame now the get blame function\ndisplays of the author's metadata\nattached to a specific committed line in\na file it's used to examine specific\npoints in a files history and get\ncontext as to who the last author was\nthat modified that line so if I went\nback and typed get blame\n[Music]\na Eureka file 5 dot txt\nit's going to show who the person is\nthat is to blame who committed\nthis particular file or made this\nparticular change right it'll also if\nyou paid attention give you the commit\nnumber as you can see this E9\nd63ef0 comment number\nthis also has this E9\nd63ef0 which is the first few characters\nof this particular comment number yeah\nso now that you know how to check the\nstatus of the changes and see who made\nthe changes it's time that you\nunderstand how you fetch changes from\nyour remote repository to a local\nrepository and how you push comments\nfrom your local repository to your\nremote repository so here we are going\nto look at two commands called pull and\npush\nnow first of all you have the git pull\ncommand which fetches changes from your\nremote repository to a local repository\nbasically it merges Upstream changes in\nyour local repository which is a common\ntask in gitbase collaborations\nbut at first you need to set your\ncentral repository as the origin using\nthe command\ngit remote add origin and I'm going to\nadd the link to my central repository\nwhich is this\nand as it says the remote origin already\nexists\nnow that your origin is set and now\nwe're going to pull our main branch\nso I'm just gonna type git pull origin\nMain\nand it says we are already up to date\nnow certain number of tutorials or\ndocuments that you might be following\nmight even give you the command git pull\norigin master in which case you're\nworking on the master Branch now to know\nwhich branch you're at you can just use\na command git branch\nwill you be yeah I'll tell you which\nbranch are you working on yeah\nso yeah we are working on the main\nbranch and we are already up to date\nwith the branch since my local\nrepository was already updated with\nfiles from the main branch this is the\nmessage of an up-to-date branch\nnow you can also like use git pull\norigin\nand your whatever Branch name here I'm\nusing Main\nthat's a mistake on my part maybe I was\ntrying to clear the screen all right so\nhere even if I pull from the branch\nusing get pull origin and the branch\nname to my local get repository you can\nsee it's already up to date so now my\nlocal git repository is now all updated\nwith the recent changes\nso now it's time to make the changes to\nyour central repository by using the\npush command\nso we're going to use the push command\nthis command transfers commits from your\nlocal repository to your remote\nrepository and it is basically the\nopposite of your poll operations pooling\nwill import commits to your local\nrepositories whereas pushing will export\ncommits to your remote repositories\nit's going to ask you for your\nusername\nand password before it lets you push\ninto your main branch there so I've put\nin the username and password for my\nGitHub account and with that this has\npushed the changes from my local\nrepository to the remote repository\nalong with all the necessary commits and\ninternal objects now this has created a\nlocal branch in your destination\nrepository the use of git push is to\npublish your local changes to a central\ndepository after you've accumulated\nseveral local comments and are ready to\nshare them with the rest of the team you\ncan then push them to your central\nrepository by using the get push command\nnow the files which have already been\ncommitted previously in the comment\nsection and they were all push ready\nyou will use git push origin Master to\nreflect these files in the master branch\nof your Repository\nall right\nso let's go ahead to our repository and\nsee\nif changes have been made and yes you\ncan see all of our files on our GitHub\nrepository here when you break our file\none two three four and five all the five\nfiles that we had created on our local\nrepository yeah you have all these five\nfiles and the readme file here here also\nyou have the readme file and all the\nfive files that we had created\nnow at this point in this git tutorial I\nhope you have understood the basic\ncommands of git you have pulling pushing\nadding committing things like that now\nlet's take a step further and understand\nthe three basic commands of parallel\ndevelopment here I'm going to be talking\nabout branching merging and rebasing so\nfirst of all let's talk about merging\nnow merging is a way to combine the work\nof different branches together this will\nbasically allow you to Branch off\ndevelop a new feature and then combine\nit back in as you can see in the diagram\nit shows you two basically different\nbranches new branch and master now when\nwe merge the work of the new Branch into\nthe master it creates a new Comet which\ncontains all the work of the master and\nNew Branch\nnow if we merge the two branches with\nthe merge command\nas I had mentioned before git allows you\nfor easy branching which means you have\nparallel branches with your master\nbranch that help you carry on your\nindividual work while not interrupting\nyour main product\nwhich is your master Branch or your main\nbranch so branches in git are nothing\nbut pointers to specific comments yeah\nso git generally prefers to keep its\nbranches as lightweight as possible now\nthere are basically two kinds of\nbranches we are local and remote\ntracking branches a local branch is just\nnot the path of your working tree on the\nother hand the remote tracking branches\nhave special purposes\nsome of them are linking your work from\nyour local repository to your central\nrepository and automatically detecting\nwhich remote branches to get changes\nfrom when you do a git pull so you can\ncheck what your local branch is by using\nget\nbranch\nso you know you are at your main branch\nand the one thing you should understand\none thing is like a main Mantra of\npeople who use git are Branch early and\nBranch often yes so to create a new\nBranch you're going to use a command\nget\nbranch and your branch name and this\ncase I'm just going to use a branch name\nat Eureka images all right and here you\ncan see this diagram shows the workflow\nof a new branch that is created when we\ncreate a new Branch it originates from\nthe master Branch itself so since there\nis no storage or memory overhead with\nmaking many branches it's usually easier\nto logically divide your work up than\nhaving big chunky branches hence the\nbranch often part\nnow let's see how to commit using\nbranches now branching includes the work\nof a particular commit along with all\nparent comments right so as you see the\nnew branch has detached itself from the\nmaster or the main branch and hence\nit'll create a different path\nso we are going to\nget\ncheck out the branch name which in our\ncase is edureka images\nand then we are going to get commit\nso you have on track files and Eureka\nimages and nothing added\nso you made that branch\nnow\nmerging is a way to combine the work of\ndifferent branches together so basically\nwhat this does is now that we've\nbranched off to something known as\nedureka images you can go ahead add\nfiles to it develop a new feature and\nthen combine it back into your main\nbranch here you can see two different\nbranches you have your new branch and\nyour main branch and when we merge the\nwork of a new Branch into the main\nbranch it creates a new comment which\ncontains all the work of the main branch\nand the new Branch so now if we merge\nthis Branch as you can see it's already\nup to date it's important to know that\nthe branch name here should be the\nbranch that you want to merge into the\nbranch that you are currently checking\nout so make sure that you are checked\nout of this destination Branch so let's\njust merge all the work of the branch at\nEureka images into your main branch for\nthat I will first check out my main\nbranch\nand then merge at Eureka images with kit\nmerge\nedureka images\nand as you can see all the data from the\nbranch at Eureka images has merged into\nthe main branch\nnow notice that merging in Gate creates\na special Comet that has two unique\npatterns now this is one way of merging\ninto the main branch there's also\nanother way of combining the work\nbetween two branches which is called\nrebasing now rebasing takes a set of\ncomets copies them and stores them\noutside your repository the advantage of\nrebasing is that it can also be used to\nmake linear sequence comets the comet\nlog or the history of the repository\nstays clean every basing is done now our\nwork from the new branch is placed right\nafter master and we have this nice\nlinear sequence of comments this command\ndoesn't copy but moves all our work from\nthe current Branch to the master or the\nmain branch they look like they've been\ndeveloped sequentially instead of having\ndeveloped parallely\nso if I just did another\nbranch called git Branch at Eureka\nimages 2. and then maybe get checkout\nokay then we get Commit This\nand then I could just get rebase min and\nyour current Branch will be up to date\nthis command basically moves all of your\nwork from your current Branch to your\nmaster branch and it'll basically look\nlike it has been developed sequentially\ninstead of having developed parallelly\nnow apart from these there are certain\noperations that you ought to know\nfirstly archiving your repository you\ncan use this command it stores all of\nyour files and data in a zip file rather\nthan a DOT get directory this creates\nonly a single snapshot omitting Version\nControl completely though this comes in\nhandy when you want to send these files\nto a client for review who doesn't have\ngit installed in their computers apart\nfrom this you can also bundle your\nrepository which basically turns your\nentire repository into a single file\nthis pushes the master Branch or the\nmain branch to a remote Branch only\ncontained in a file instead of a\nrepository you could alternately change\nthe repository clone the repo bundle\ncreate a copy and use git log but that\nis like five commands instead of one why\nnot just use one command and finally\nstashing uncommitted changes when you\nwant to undo adding a feature or any\nkind of added data temporarily we can\nalways stash them temporarily you can\nuse git status stash status and then you\nwant to reapply the changes you stashed\nusing git stash apply having said that\nlet's move on to another very important\ntopic in this git tutorial let's go\nthrough a brief introduction to SSH now\nwhat is ssh what is an SSH key now an\nSSH key is an access credential for\nsecure shell Network protocol it's\nbasically an authenticated and encrypted\nsecure network protocol and is used for\nremote Communications between machines\non an unsecured open network\nfor remote file transfer Network\nmanagement and remote operating system\naccess\nso basically it's typically used to log\ninto a remote machine and execute\ncommands in it but this also supports\ntunneling forwarding TCP ports and X11\nconditions it can transfer files using\nAssociated SSH file transfer or secure\ncopy protocols\nit provides you several alternative\noptions for strong authentication and\nprotects the communication security and\nintegrity with very strong encryption\nit's a secure alternative to the\nnon-protected login protocols and\ninsecure file transfer methods such as\nFTP so basically how do you create SSH\nKeys you start by using the command SSH\nhyphen Keygen\nand then you'll be prompted to enter a\nfile in which to save the key\nso home at Eureka\nthen we're going to enter\na passphrase I'm just going to leave it\nempty again\nand you can see our identification has\nbeen saved in the file that we specified\nand we have something known as a key\nfingerprint\nand finally what we have to do is add\nthe new SSH key to the SSH agent\nand then you will see identity added\nand that's it you have created an SSH\nkey\n[Music]\nthe need for GitHub it is extremely\nimportant for software developers to\nwork on a web-based platform to share\ntheir projects and collaborate with\nother developers this platform must be a\nversion control system that is it must\nenable multiple people to simultaneously\nwork on a single project each person\nedits his or her own copy of the files\nand chooses when to share those changes\nwith the rest of the team this\napplication must also be capable of\nHosting millions of programmers and\nhobbyists that download and evaluate\neach other's work GitHub is one such\nplatform of choice for developers that\ncan host multiple programmers and review\ntheir code\nGitHub has several competitors for\ninstance git lab gitlab is an open\nsource web interface and Source control\nplatform based on git whereas Microsoft\nteam Foundation server is an Enterprise\ngrade server for teams to share code\ntrack work and ship software for any\nlanguage all in a single package\nbitbucket on the other hand stores all\nof your git and Mercurial source code in\none place with unlimited private\nrepositories\nso what really makes GitHub so powerful\nand popular among Developers\nGitHub is an open source platform and\nthe community is really what fuels it\nmoreover GitHub is the platform of\nchoice for developers from various large\ncorporations too Microsoft is the number\none contributor to the system but there\nare also Google sap Airbnb IBM PayPal\nand many others exposure and insight\nthat you can get on GitHub are simply\nunmatched by any other platform here you\ncan discover code written by others\nlearn from it and even use it for your\nown projects\nversions control on GitHub works very\nmuch like Microsoft Office or Google\ndrive it simply tracks all the changes\nmade to your code and who makes them you\ncan always review the detailed change\nlog that neatly hosts all of the\nrelevant information\nusing GitHub eliminates the need for\ncomplex corporate security solution\nbecause everything is on cloud the\nplatforms protects code branches\nverifies commit signing and controls\naccess\nnow that we know why we need GitHub let\nus understand what is GitHub GitHub is a\ngit repository hosting service that\nprovides a web-based graphical interface\nwith many features a repository is\nusually used to organize a single\nproject repositories can contain folders\nfiles images videos spreadsheets\nanything your project needs let's say\nfor example a team wants to work on a\nparticular project here they can\nsimultaneously write and update the code\nto a central repository which is present\non GitHub so GitHub is a highly used\nsoftware that is typically used for\nVersion Control it is helpful when more\nthan just see one person is working on a\nproject for example a software\ndevelopment team wants to build a\nwebsite and everyone has to update their\ncodes simultaneously while working on\nthis project in this case GitHub helps\nthem to build a centralized repository\nwhere everyone can upload edit and\nmanage the code files\nmost software projects have a bug\ntracker of some kind github's tracker is\ncalled issues and has its very own\nsection in every repository issues\nbasically are a great way to keep track\nof tasks enhancements and bugs for your\nproject\nmoving on people often get confused\nbetween the terms get and GitHub now let\nme clearly explain the difference\nbetween them\njit is simply a version control system\nthat lets you manage and track changes\nwithin your project whereas GitHub is a\ncloud-based service that lets you manage\ngit repositories so basically git is the\ntool and GitHub is the service\nnow that we know the difference between\ngit and GitHub let us move on and\nunderstand how these two work hand in\nhand\nwe already know that git is a Version\nControl tool that will allow you to\nperform all kinds of operations to fetch\ndata from the central server or push\ndata to it whereas GitHub is a code\nhosting platform for Version Control\ncollaboration\nGitHub is basically a company that\nallows you to host a central repository\nin a remote server now without any\nfurther Ado let's get started with the\ndemonstration on how to use GitHub so\nfor this demonstration we're working on\nthe website version of GitHub there's\nanother version of GitHub that is the\ndesktop version which you can download\nit to your personal computer\nso we're simply going to search for\nGitHub in our search engine\nthe first link will lead you to the\nofficial website of GitHub so I'm going\nto click on that\nso this will redirect me to the main\nhomepage of GitHub as you can see there\nis a search GitHub option there are also\ntwo buttons that says sign in and sign\nup if you're new to GitHub you can\nsimply enter in your credentials that is\na username email password and sign up\nfor GitHub but if you already have an\naccount like I do I'm simply going to\nclick on the sign in button and it'll\nredirect me to a page where I have to\nenter the credentials that is my email\naddress and password I'm going to do\nthat now and I'm going to click on the\nsign in button now this is the main page\nof my account as you can see I have no\nrepositories it's all new it's all fresh\nbut if you're not new to GitHub you can\nview all of your repositories on the\nleft hand corner now before we move on\nI'm going to explain you all the\nfeatures that are present within GitHub\nso you can see or search bar here so the\nsearch bar will allow you to look for\nprofiles certain keywords look for\ndifferent kinds of projects that are\navailable on GitHub all of those can be\ndone using this bar here and you can see\nfour options next to the bar that says\npull request issues Marketplace explore\npull requests will learn later on in the\nsession but the issues in Marketplace we\nwon't be discussing in this video for\nnow the explore button on the other hand\nis an extremely important and\ninteresting button so once I click on\nthat it'll redirect me to a page with\nsome activities that are going on around\nin GitHub you can see here their\ntrending repositories they're attending\ndevelopers basically this is a fee that\nwill allow you to interact with\ndevelopers and other people\ncollaborators from all around the world\nbasically in Instagram too you have an\nexplore button which will allow you to\ninteract with different people from all\naround the world so the same concept is\nimplied in the GitHub explore button too\nso you can explore top picks you can\nexplore tending repositories developers\nbasically it's an interaction with other\npeople from different parts of the world\nso I hope that's clear now the most\nimportant part of the session are the\nthree buttons that are available in the\nright hand corner of the navigation bar\nso you can see there's a bell icon\nthere's a plus icon there's a pixelated\nicon on the right hand corner so the\nBell icon allows you to read\nnotifications of your activities that\noccur in GitHub so that's what it really\nis you can see the inbox will allow you\nto view all of the notifications you can\nalso view the Android notifications by\nclicking on this unread button as of now\nI don't have any notifications so\nthere's nothing available you can also\ngroup these notifications by the date or\nrepository by clicking on this group by\nbutton here you can also view your save\nnotifications by clicking on here and\nthe done button on the other hand will\nlet you mark all of your notifications\nthat you're done with your previous\nnotifications so these are the three\nimportant buttons you have to know in\nthis Bell icon and the filters are not\nnecessary as of now so I'm not going to\ndiscuss that this button on the other\nhand will allow you to manage note your\nnotification settings and your\nsubscriptions too so that's all for this\nBell icon the next important button is\nthis plus icon as you can see there are\nfive drop down options that appear here\nthe first one being new repository\nfollowed by import repository new just\nnew organization new project so new\nrepository we've already discussed\npreviously in this session a repository\nis a place where you create your files\nfor your project it's basically a\nstorage space right so you repository\ncan directly interact with your git\nright so the new repository option will\nallow you to make files a repository to\nyour GitHub account right the git on the\nother hand the tool that which we use to\nmake local repositories in our personal\ncomputer can be directly pushed on the\nlocal repositories can directly be\npushed onto your GitHub account so\nthat's what the new repository pattern\nallows you to do so but the new project\non the other hand is a place to track\nissues features and other tasks that are\nrelated to the code within the\nrepository you can also connect with the\ndevops build and deploy process assign\npeople to tasks and so on by using this\nbutton that is the new project button\nso the difference between the new\nrepository button and the new project\nbutton is that projects in GitHub are\nonly a part of GitHub but not git but\nthe new repository option is a part of\nGitHub and git so that's the main\ndifference between new repository and\nnew project I hope that's clear so the\nnext button will drop me down some\ninteractions that I can make with my\nprofile so if I click on this your\nprofile option it will redirect me to a\npage where I can edit my profile I can\nreally create my identity using this\npage so here if I click the edit profile\nI can add a bio about myself I can add\nthe company in which I'm working in the\nlocation at where I am the website\nTwitter username Etc all of that I can\nadd here all of the information about\nmyself I can also view the repositories\nI'm working on currently or the\nrepositories I've worked in the past\nprojects that I'm working on the\npackages and the entire contributions\nI've been making on GitHub from the last\nyear\nso basically it allows me to build an\nidentity or it'll help me build my\nprofile on GitHub so I hope that's clear\nnow if I click on this button and if I\nwant to sign out from a profile I can\nsimply scroll down and click on the sign\nout button here and this will sign me\nout of my account so that's all for\ngetting started with GitHub these are\nthe basics on what GitHub is and what\neach of the button and options really do\nnow if I want to move back to the main\npage of my GitHub profile I can simply\nclick on this octocat that's github's\nlogo so I'm just going to click on this\noctocat logo and here I'm back to my\nmain page\nnow before we move on and work on the\ndifferent operations and options within\nGitHub and learn different things about\nGitHub I'm going to give you a brief\noverview on how to download the desktop\nversion of GitHub so I'm simply going to\nsearch for GitHub desktop on my search\nengine and I'm going to click on the\nfirst link that's available on this page\nnow I can simply click on this button\nthat says download for Windows 64-bit\nthat's compatible to my current version\nof my personal computer if you have a\nMac you can simply click on the Mac\nversion and download it to your desktop\nbut as I've already mentioned previously\nthat we're going to work on the website\nversion so I'm going to Simply switch\nback to this now let's quickly move on\nto the next part of the session\ncreate a repository so firstly let us\nunderstand what a repository is it is\nsimply a storage space for the correct\nproject that you're working on GitHub is\na very popular Central repository that\nallows you to share your files whereas\ngit allows you to create local\nrepositories that are present on the\nsystem you are working on\nso you can basically push your local\nrepository into GitHub and share it with\nother collaborators via the central one\nnow that we know what a repository is\nand how it works let's go on to the\ndemonstration part and create a first\nRepository\nso you can do this in two ways either\nyou can click on your create repository\nbutton that is present on the left side\nor you can as I've already mentioned in\nthe previous part of the session you can\nclick on to this plus icon and you can\nclick on the new repository option so\nthis will redirect you to a page that\nsays create a new repository you can add\nyour repository name I'm going to name\nmy repository as edureka and it's\navailable all of your repository names\nmust be unique from one another to\nidentify them easily you can also add a\ndescription which is optional I am just\ngoing to add the description this is my\nfirst Repository\nand a description allows people or other\ncollaborators to understand what your\nrepository is all about but as a good\ndeveloper or a good programmer you would\ndefinitely want to add a description and\ngive an overview of what your repository\nis all about there are two options now\navailable that says private or public\nnow you can choose your repository to\neither be public or private so the\nprivate One lets you decide who can\naccess your profile whereas the public\nOne lets anyone View and access your\nrepository but you can choose who can\ncommit to it that's the difference\nbetween public and private repository\nI'm going to let my repository be public\nas of now now if you scroll down you can\nsee that you can initialize your\nrepository with three options the first\none being add a readme file the second\none being add a git ignore file you can\nalways choose a add a readme text file\nto your project which often contains\ninformation about the project and other\nnecessary details the user must be aware\nof when he or she is accessing that\nparticular project now I want a readme\nfile for my repository so I'm going to\nclick on this button here that's going\nto check it the next option is add a DOT\nget ignore file so this file will let\nyou ignore a list of files when the user\nis pushing files to GitHub that's what\nthis option really does but I'm going to\nlet this be unchecked for now for your\nrepository to truly be open source you\nwill need to license it so others are\nfree to use change and distribute the\nsoftware you can simply click on choose\na license option and pick your the\nrequired license for your project\nthere are several licenses like MIT GPL\nApache License 2.0 BSD Etc but for this\nrepository we don't really need a\nlicense so I'm going to untick this too\nand now you can see there's a piece of\ninformation that says this will set\nmaster as the default Branch but I'm\ngoing to ignore this for now I'm going\nto explain about branches later on in\nthis session so this is all you have to\ndo to create your first new repository\nyou add a name you choose a description\nyou add an optional description you let\nyour repository be either public or\nprivate and you initialize a repository\nwith either of these three options and\nI'm simply going to click on my create\nrobustry option now this will redirect\nme to a page with all the information\nand the files that are currently present\nin my repository you can see here my\nrepository name is present here with the\noptional description that I gave and the\nnumber of files currently we have only\njust one file that's the readme text\nfile and that's present here\nso this is all we have congratulations\nyou just created your first repository\nnow you can see there are some options\nthat says issues pull requests actions\nprojects Wiki security Etc we don't have\nto really talk about all of these right\nnow we will just learn about one option\nthat says code here so this is really\nimportant if you click on this button\nyou can see that there's a link that is\navailable here and https link so if you\ncopy this link and paste it on your kit\nterminal that's present on your computer\nyou can download this entire project\ndirectly to your local system so that's\nwhat the link is for I hope that's clear\nand the next option that says open with\nGitHub desktop will allow you to open\nthis entire repository in your GitHub\ndesktop version and you can also the\nlast option that says download zip will\nallow you to download this entire\nrepository in the form of zip files so\nall of your project files will be within\nthat zip file so that's all you have to\nreally know about your Repository and\nI'm going to click on the readme text\nfile that's available\nit will take me to another page with\nsome extra information about that file\nyou can see currently we have two lines\nand the memory space that is allocated\nto this file so we currently have two\nlines that is edu Recon this is my first\nrepository and you can also see the\nnumber of contributors to this project\nthat is just one that's just me for now\nand you can view the history of the\ncommits or the changes that have been\nperformed in your file so we'll come\nback to that part later on this session\nbut you can move back to your main page\nof this repository by clicking on the\nname button here so edureka is the name\nof my repository so I'm going to click\non that so now I'm back to the main page\nof my Repository\nbefore we learn how to create our first\nBranch let us understand what branches\nare branches allow you to work on other\nfeatures that can be included and merged\nwith the master Branch if required so\nwhat is the master Branch the master\nbranch is the main branch where your\nproject resides on so all of the changes\nall of the activities that you do with\nyour main project lies or is on your\ndefault branch that is named as the\nmaster Branch so what really GitHub\nallows you to do is it allows you to\ncreate additional branches so on these\nadditional branches you can work on the\nother features or you can experiment\nwith your project and if you're happy\nwith this you can simply merge these\nfeatures to your main branch that is\nyour master Branch this is what branches\nare really for so they simply allow you\nto work on other features that's what\nbranches are so let's move on to the\ndemonstration part and look at how we\ncan create our own branches so now if\nyou look on the left corner you can see\na button that says Master So currently\nwe're on the master to branch and\nthere's only one branch and the master\nbranches have already mentioned is the\ndefault Branch so when you create a\nrepository you're automatically creating\na master Branch so this is where your\nproject will be residing on and now if\nyou want to create another Branch say\nlet's name this Branch one branch\nso this is what I want to name my\nadditional Branch I'm simply going to\nname it and I'm going to click on the\nenter button so it will redirect me to a\npage so this is the exact replica of\nyour master branch and you can work on\nthis Branch you can work on any other\nfeature or you can add something you can\nremove something you can really\nexperiment on this branch and if you're\nhappy with this you can merge back this\nfeature or the experimentation that\nyou've been working on to your master\nBranch right so you can see this readme\ntext file it's exactly the same there's\nthe name of a repository the description\nof the repository you can click on the\nreadme text file and everything's the\nabsolute same you can quickly switch\nback to the main page but the only\ndifference is that you're currently on a\nbranch named Branch one branch you're\nnot on your master Branch now if you\nwant to switch back to your master\nbranch and work on it you can click on\nthis button and you'll find the master\nhere you can click on that and it will\ntake you back to your master Branch so\nyou can work on your project so the\ncurrently two branches you can see that\nand everything's normal everything looks\nsimple that's all for branches it's\nreally easy I hope it's clear so you can\nlook for branches here on this bar here\nthat's present here you can also create\nnew ones in the same option so that's\nall for branches let's move on to the\nnext part of the session make a comment\nnow what are comments\ncomments simply record changes to one or\nmore files in your branches so basically\nthey save the changes that you're making\nin your project git always assigns each\ncomment a unique identification which is\ncalled sha or a hash that identifies the\nspecific changes so for any changes are\nmade to your project files you can\nsimply go back and look at the version\nhistory or the history of the each\ncommit you've performed on your project\nfiles so that's what really commits are\nall about it's extremely easy let's go\nahead and make our first comment now I'm\ngoing to switch to my Branch one branch\nand I'm going to make my first comment\nI'm going to click on my readme text\nfile that's the only file currently in\nour repository so we'll make the change\nin the readme text file there are three\nreally important icons that are present\nin the right corner as you can see the\nfirst one is a PC icon that says open\nthis file in GitHub desktop so if you\nclick on this file this entire file will\nopen in your GitHub desktop version the\nnext one that is the pencil icon will\nallow me to edit this particular file\nthat is my readme text file and the\nthird icon is a bin icon which will\nallow me to delete this file now what\nwe'll be working on is the pencil icon\nthat's the edit this file option I'm\ngoing to click on this and I can simply\nview a space or a file that will allow\nme to make changes to my readme text\nfile I'm going to add another line here\nthat says this is my first comment this\nis what I want to add to my readme text\nfile and if I want to preview the\nchanges I'm going to click on this\npreview changes button you can see that\nthis is my first repository this is my\nfirst Commit This is my first commit is\nthe additional piece of information that\nwill be adding to my readme text file\nand it's highlighted in blue so we know\nthat that's the additional information\nI'm happy with this change I'm going to\nswitch back to my edit file I'm going to\nscroll down and if I want to add a\ndescription about the change that I'm\nperforming to my file I can do that a\ngood programmer would always add a\ndescription to the change that he's\nmaking to the project file so other\ncollaborators will view the commit or\nthey view the change they can read the\nextended description and understand what\nthe change is about so that's a good\nhabit that you must follow but as of now\nwe're not going to do that so I'm going\nto leave this blank as you can see there\nare two radio buttons that are currently\navailable the first one says commit\ndirectly to the branch one branch this\nwill allow me to make the change or save\nor make the commit directly to my Branch\none branch only so the change that I'm\nmaking currently is only implemented to\nmy Branch one branch the second option\nallows me to create a new Branch for\nthis particular commit and start a pull\nrequest we're not going to talk much\nabout this option right now but the\nfirst option is extremely important so\nwe let this be stuck on to the option\nthat says commit directly to the branch\none branch and I'm going to click on the\ncommit changes options and this will\nsimply implement the entire change to\nthe file you can see that the change is\nimplemented the additional piece of line\nthat says this is my first comment is\nadded to my readme text file now the\ninteresting part is if I switch to my\nmaster Branch the change is not\nimplemented in my master Branch so the\nchange is only currently present in my\nBranch one branch and now if I want to\nview the history of the changes that\nI've made I've already mentioned in the\nprevious part of the session that the\nhistory button will allow me to do so so\nI'm going to click on this history\nbutton and you can see that I made my\nfirst commit 23 minutes ago and I made\nmy new comment 41 seconds ago and there\nis also a hash number unique hash\nidentification number that allows me to\ndistinguish between both of these\nchanges so all of my comments that I'll\nbe making on this Branch will be\navailable here so that's the main point\nof a version control system isn't it\nunderstanding and keeping a record of\nall the changes that we're performing in\nour files and our projects so this is\ngives full Justice to the word Version\nControl so that is what GitHub is all\nabout now that we learned how to make\nour first comment two let's move on to\nthe next part of the session\nopen and merge pull requests so what are\npull requests pull requests let you tell\nother developers about changes you've\npushed to branch in a repository on\nGitHub so once a pull request is open\nyou can acknowledge and review the\nchanges with collaborators and add\nfollow-up commits after which your\nchanges are merged into the base Branch\nso there are two ways to create a pull\nrequest the first one being pulled\nrequests from a forked repository and\nthe second one being pulled request from\na branch within a repository currently\nin this demo we will work on the second\none that is pull request from a branch\nwithin a repository now I'm simply going\nto switch to My Demo part okay now\ncurrently I'm on my master Branch I'm\ngoing to click on this pull request\noption that's here now it says Branch\none has had recent pushes three minutes\nago compare and pull requests I'm not\ngoing to click on that I'm going to\nSimply click on the new pull request\noption here so this will allow me to\ncompare the changes there's a base\nbranch and a compare Branch the based\nlaunch is the master branch and the\ncompare Branch I will compare my master\nBranch to my Branch one branch so this\nnotification says that the merge between\nthe branch one branch and master branch\nis definitely possible so it's a green\nsignal so if I scroll down I can view\nthe difference between both the branches\nso the left hand side indicates the\ninformation that is present on the\nmaster branch and the right hand\nindicates the information that is\npresent in my Branch one branch plus\nsign indicates the additional\ninformation that is present in my Branch\none branch I'm happy with this so I'm\nsimply going to scroll up and create the\npull request and click on that I can\nalso leave a comment and I can preview\nthe change that's not necessary for now\nso I'm going to go ahead and create the\npull request\nnow this will redirect me to a page so\nthis page says that the opal request has\nbeen opened and now I can choose to\nmerge this pull request that is I can\nmerge the branch one branch to my master\nBranch so it says this branch has no\nconflicts with the base Branch merging\ncan be performed automatically and\nthat's good news right so I'm going to\nclick on merge pull request and I'm\ngoing to confirm my merge update my\nreadme text file I'm happy with that so\nI'm just going to confirm it now it says\npull request successfully merged and\nclosed you're all set the branch one\nbranch can be safely deleted I'm not\ngoing to delete the branch I'm going to\ncompare both of the branches and see if\nmy master branch is exactly the same as\nmy Branch one branch so I'm going to\nclick on this edureka I'm going to go to\nmy main page of my repository so my\nmaster branch has the additional piece\nof information that says this is my\nfirst comment now if I switch to my\nBranch one branch it has the exact piece\nof information\nso the information that was present in\nmy Branch one branch has been\nsuccessfully implemented to my master\nBranch so that's all for the pull\nrequest part two we've reached the end\nof the demonstration part now let's\nquickly look at the case study of how\nMicrosoft implemented GitHub I'm pretty\nsure most of you have heard of Microsoft\nMicrosoft cooperation is an American\nmultinational technology company it\ndevelops manufactures licenses supports\nand sells different computer software\nconsumer electronics personal computers\nand other related services\nso initially Microsoft was against the\nuse of the open source because they held\nvery tightly to the Internet Protocol\nthey were completely hesitant to adapt\nto this new concept of sharing code to\nthe entire world but in 2010 they\nrethought this entire scenario and now\nMicrosoft is one of the biggest\ncontributors to open source today about\n2000 to 25 000 Microsoft Engineers\nmaintain\ntypescript.net Windows terminal dark\nHelm and more than a thousand other open\nsource projects so first what they did\nwas they released new processes in\nmeasured containment but later on they\nreleased only license software so here\ndevelopers can learn from the company's\nsource code but they couldn't really\nbuild on it eventually the stigma died\nand now even close code like dotnet is\nopen source under an MIT license teams\nrealize that they need to accept\ncontributions to get feedback and learn\nfrom other Developers\nto organize and understand this approach\nMicrosoft created their open source\nprograms office which enables\ndistribution and centralization of\nknowledge so the ospo provides the\nresources and maintainers to manage\nthousands of repositories and\ncontributors effectively on GitHub even\nthough Microsoft invests in its tools\nthey expect other individuals and\norganizations to lead the way Microsoft\nbelieves that github's value isn't in\nany one feature but its entire Community\nGitHub is the place to collaborate it's\nwhere everyone is and where most of the\nentire world's open source is already\nhappening it's not just a feature but\nthe whole thing\nforeign\nlet's focus on various git commands so\nwe'll start with Git init command now\ngit init is basically to turn a\ndirectory into an empty repository now\nthe first thing that you need you need a\nlocal repository to work with for those\nof you who don't know what exactly local\nrepository is it is basically a private\ncopy of the whole repository of the\nwhole shared repository that you have\nand users can perform many operations\nwith this repository such as ADD file\nremove file rename file move file you\ncan commit changes and you can do a lot\nof things with your local repository so\nthe First Command that we are going to\ndiscuss is basically the git init\ncommand which will turn a directory into\nan empty git repository so for that I'll\nopen my Virtual Machine to show you\npractically\nso guys this is my virtual machine where\nI've installed git if you want to see\nthe version of git that you have\ninstalled just type in here get hyphen\nhyphen version and it is 2.7.2 in my\ncase now let's go ahead and create the\ndirectory first so I'm going to name my\ndirectory as\nedureka hyphen Repository\nnow I'm going to move into this\ndirectory so I'll just type in here CD\narray card repo so now I have a\ndirectory I want to convert it into a\nlocal git repository which is very easy\nall I have to do is type in git init and\nhere we go so initialized empty git\nrepository in home address\nso let's go back to our slides again and\nwe'll see which command we are going to\ndiscuss next\nlet's talk about git add now so git add\nbasically adds all the files to the\nstaging area for git now git doesn't\ntrack each and every modified file so\nwhenever you do the commit operation git\nlooks for the files present in the\nstaging area only those files present in\nthe staging area are considered for\ncommit and not all the modified files so\nthe first thing you need to do is put\nall the modified files all the changes\nthat you have done into the staging area\nand then from staging area you can go\nahead and make a comment right so the\nfirst thing is to add your files to the\nstaging area which is pretty easy all I\nhave to do is type in git add in the\nfile name so let me just quickly open my\nVirtual Machine and show you that this\nis my virtual machine again guys and\nfirst let me just create a file here let\nthe name of my file be uh edureka.py\nyeah let me just go ahead and type\nsomething in this uh dot py file\nso I'll just type in here a equal to 10\nsmall code be equal to 20 and I'm going\nto print a plus b pretty basic\nsave it and go ahead and close it right\nnow what I need to do is add the changes\nthat I've done into the staging area\nright so all I need to do is type in\nhere get add and the name of the file\nthat is edureka.py\nso I've successfully done that if I want\nto add all the files to the staging area\nthen I can go ahead and type git add and\na period right so this will add all the\nfiles that are there in my local\nrepository to the staging area so this\nwas all about git add let me just\nquickly open my slides and we'll see\nwhich is the next command we are going\nto discuss now we're going to see the\ngit commit command so git commit\nbasically records the changes made to\nthe files in a local repository so you\nhave all the modified files in the\nstaging area so when you make a commit\nit'll basically record the changes that\nyou have made to the files in that local\nrepository and for easy reference each\ncommit has a unique ID and it is a good\npractice to always give a commit message\nright so that helps you in understanding\nwhat change was done in this particular\ncomment right so I'll just quickly open\nmy Virtual Machine and I'll show you how\nyou can commit changes to the local\nrepository this is my virtual machine\nagain guys so I'm just gonna type in\nhere get commit hyphen M and then commit\nmessage so I'll just type in here first\ncommit\nright so I've done that successfully two\nfiles changed five insertions create\nmode one double zero six double four\nedirecta dot py right so this is the log\nfor it let me just clear the terminal\nand go back to my slides again\nlet's talk about git status now\nso git status Returns the current state\nof the repository git status will return\nthe current working Branch if a file is\nin staging area but not committed it\nshows with Git status or if there are no\nchanges it will return nothing to commit\nworking directories clean right so let\nme just open my Virtual Machine again\nand I'll show you practically how this\nworks all right so if I go ahead and\ntype here get status\nso it says on Branch Master nothing to\ncommit working directory clean so it\ngives me the name of my branch and what\nis there anything that we need to commit\nor something that is already there in\nthe staging area but I have not\ncommitted that and the working directory\nis clean right now so whatever changes\nthat I've made in my file are there in\nthe staging area and from the staging\narea I've made a commit as well right so\nlet me just do one thing make some\nchanges in the file add it to the\nstaging area but I won't commit it right\nso let's see what will be the status\nthen so for that I'll create one more\nfile let that be\nwelcome.py I'll edit this using G edit\nyou can use whatever editor you want\nI'll just type in here print\nwelcome to edureka close the parenthesis\nsave it and close it now I'm gonna add\nthis file to the staging area so I'm\njust going to type in here git add I can\ngo ahead and type a period as well that\nwill add all the files or I can give the\nname of the file that is welcome.py now\nif I type git status let us see what\nwill come so it says new file welcome.py\nchanges to be committed right so these\nchanges are present in the staging area\nbut I have not committed these changes\nand it gives me the name of my Branch as\nwell so I hope you have understood what\nexactly git status is so I'll just\nquickly open my slides again we'll see\nwhich command we are going to discuss\nnext let's talk about git config now now\nwith Git there are many configurations\nand settings possible so git config is\nbasically how to assign these settings\nnow two important settings are username\nand user email address these values set\nwhat email address and name commits will\nbe from on a local computer and it's\nvery easy to do that let me just quickly\nopen my VM and I'll show you that\nnow there are two things either I can\nrun the git config command globally or I\ncan run the git config command on the\ncurrent repository settings so let me\nshow you how you can do it globally so\nI'll just type in here git config hyphen\nhyphen Global user dot name and the name\nof the user so let it be subham\nand now I can go ahead and add the email\naddress as well so I just need to type\nin here user dot email and I'll type the\nemail address\nand the parenthesis in the double quotes\nright so this is done\nand this was done globally now if I want\nto execute this on the current\nrepository what I'll type in git config\nI won't use hyphen hyphen Global I will\ndirectly go ahead and type user dot name\nso let it be my name I say u r a b h\nand I'm gonna add my email address as\nwell which is sort of at the rate\neduraycar.com\ndone guys it's that easy now let me\nquickly open my slides again and we'll\nsee which command we are going to\nexecute next so we've seen how a git\nconfig Works let's discuss about git\nbranching now\nso the first question is why do we need\nBranch right so branches are used to\ncreate another line of development and\nby default git has a master Branch so\nusually a branch is created to work on a\nnew feature so if you're working on a\nweb application you might want to work\non the card service right so for that\nyou'll create a new feature Branch or\nany name that you want to give to your\nbranch and once the feature is completed\nit is merged back with the master branch\nand we delete the feature branch and\nevery branch is referenced by head which\npoints to the latest comment in the\nbranch whenever you make a commit head\nis updated with the latest commit let me\njust quickly open my Virtual Machine and\nover there we're going to see how to\ncreate a branch how to delete a branch\nhow to rename how to merge and how to\ncheck out into a different branch\nthis is my virtual machine again guys\nand uh let me just tell you how you can\nsee all the branches so just type in\nhere get branch and uh\nand it will list all the branches that\nare already there so there's only one\nmaster Branch present right now so let\nme just quickly go ahead and create a\nbranch see there are two ways to create\na branch one way is to create a branch\nand then you can check into that Branch\nanother is you just want to create it\nbut you still want to be in your master\nBranch or your current working Branch so\nfor that uh if you don't want to check\nin that Branch just type in here get\nbranch and give a name to your branch so\nlet that be feature right and if I go\nahead and type git Branch now I can see\nthat there are two branches master and\nfeature right\nnow I can go ahead and delete this\nBranch as well but let me just quickly\nuh move into this Branch first so I'll\njust type in here git checkout\nand the name of my branch that is\nfeatured\nand this will Point towards my feature\nBranch now I'm in my feature Branch\nright so let me just make some changes\nin the files that are there in my\nedureka repo so you can see that I have\ncouple of files data rica.py and\nwelcome.py so let me just make some\nchange in let it be at arrayca.py right\nso I'll just quickly type in here G edit\nagain you can use whatever editor that\nyou want\nedureka.py and I'll just add one more\nvariable here let that be 30 and I'll\nprint one more value\nthat is C plus a plus b pretty basic\nsave it and then go back\nso in my feature Branch I have made\nchanges to my edureka.py file right so\nwhat will be my next step is to add\nthese changes add the modified file in\nthe staging area so I'll just type in\nhere git add and a period because I want\nall the changes that I've made to my\nfiles should be there in the staging\narea so git add and period will add all\nthe files now I want to commit these\nchanges so I'll just type in here git\ncommit hyphen M and a message feature\ncommit right said now I've done all the\nchanges and I've added those changes to\nthe staging area and then finally I've\nmade a comment as well so it says four\nfiles change 10 insertions create mode\nwelcome.py welcome.py let me just clear\nmy terminal now so if I want to merge my\nfeature Branch with the master Branch\nnow first I need to check in with my\nmaster Branch for that I'll type in here\nget check out\nmaster\nnow it says switching to Branch master\nfrom feature now I'm in my master Branch\nso now I'm gonna type in here get merge\nfeature and here we go\nso you can see that I've merged my\nfeature Branch with that of the master\nBranch it's that easy guys let me clear\nmy terminal now so what I'll do I'll\nquickly create one more branch and and\nI'll show you again uh how these things\nare happening because there might be\nsome confusion still so I'll just show\nyou again how to create a branch how to\ncheck into that Branch how to make some\nchanges in your local repository adds\nthat to the staging area make a commit\nand then merge it with the master branch\nso now uh what I'm going to do is I'm\ngoing to delete my feature Branch\nbecause I've told you earlier as well\nonce I have merged all my changes to my\nmaster Branch there's no point in\nkeeping my feature Branch as of now I\ndelete that branch and there are a\ncouple of options to do that the safest\none is what I'm gonna tell you right so\nI'll just quickly uh type in here get\nBranch hyphen D and the name of your\nbranch which in my case is feature\nso it has deleted the branch feature now\nthere's one more way to delete a branch\ninstead of hyphen D you can just type in\nhere get Branch hyphen uppercase D under\nthe name of the branch but this is not\nthe preferred option and it's not safe\nas well because if you have some\nunmerged changes then also it will\ndelete the branch whereas if you type in\nhere a lowercase D it will show you a\nerror that will say that you have some\nunmerged changes right so always prefer\na hyphen small D and then feature hyphen\nsmall D and then the name of the branch\nthat you want to delete right so now I'm\ngoing to show you one more way to create\na branch which is called git checkout\nhyphen B and you can give the name to\nyour branch right so probably I want to\nname my Branch again as a new let the\nname of my Branch be new so git check\nout hyphen B new so this will not only\ncreate a branch called new but it will\nalso check into that Branch right so we\nhave also checked switch to a new branch\nthat is new and over here also if I want\nto make changes to my files I can go\nahead and do that all I have to do is\nuse any editor Let me uh edit say\nwelcome dot py file\nwelcome to edureka\nI forgot to close the quotation so\nthat's the change I'm gonna do in this\nfile right and then I'm gonna get add\nperiod now get commit\nI made a mistake there so I'll just type\nin here get commit hyphen m\nand uh let it be new the name message\nall right so it is done now\nnow what I'm going to do is I'm gonna\nshow you how to connect to a remote\nrepository so I have a remote repository\nthe GitHub account I've created a\nrepository there so if I want to connect\nto that repository what I need to do is\nI need to add that origin so I'll just\ntype in here get remote add origin\nand the SSH link that I will just show\nyou where you can find it so this is my\nGitHub account guys and this is my\nrepository that is git commands if I\nwant to copy the SSH link I can just go\nahead copy this and paste it here\nso we have successfully added the origin\nnow let me just clear my terminal so we\nhave connected our local repository with\nthe GitHub account so we have seen how\nbranching Works in git let us move\nforward and we'll see how to work with\nremote repository so over here I've\nalready told you how to add an origin\nright it's a git remote add origin and\nwhat we did we connected a local\nrepository with a remote repository so\nThe edirecta Hyphen repo is my local\nrepository and a remote repository I\njust showed you in my GitHub account so\nwe have already done this git remote\nalgorithm so now we're going to see how\nto clone a remote repository so to\ncreate a local working copy of an\nexisting remote repository we'll use git\nclone to copy and download the\nrepository to a local computer cloning\nis the equivalent of git init when\nworking with a remote repository git\nwill create a directory locally with all\nthe files in repository history\nso I'll just open my Virtual Machine and\nI'll quickly show you how you can do\nthat all right so what I'm gonna do is\nI'm first gonna create one more\ndirectory so let that be mkdir\nand uh the name of the directory Let It\nBe\ngit hyphen repo right and let's move\ninto this git hyphen Repository\nso the first thing I'm going to do is\ngit clone git clone and the SSH link so\nSSH link I've already shown you where\nyou can find it in your GitHub account\njust type in here get clone and the\nremote repository URL the SSH link that\nI was talking about and let me show you\nhow you can do that and here we go\nso it says cloning into git commands\nso let me see what are the files that\nare there now so it says git commands\nlet me go to this get commands\nso here we have edereka and readme and\nhere also you can notice that we have\nederica and readme so I've successfully\ndone that let me clear my terminal and\nnow uh I can go ahead and\npull whatever changes I made to the file\nthat is there in my GitHub account so\nlet me just show you how to do that\nsuppose if I have a file edureka and let\nme just make some changes here\nI'll just type in here\nmy name is saurabh\nso let it be like this\nso let's come and change this\nso yeah now it'll be reflected in my\nRepository\nnow what I want is I want all the\nchanges that have been made in my remote\nrepository in my local machine so for\nthat I'll just type in here git pull\norigin master\nand here we go\nso let's say that I successfully done\nthat that means we have pulled all the\nfiles that are there in a report\nrepository so if I check so I have here\nedereca and readme.md files so if I go\nahead and type in G edit edureka\nlet's see or all right so I can see that\nthe changes have been reflected my name\nis saurabh which was something new that\nI added to my file right so this is all\nabout the pull operation now let us see\nhow you can push changes to the remote\nrepository right so if I go ahead and\nmake some changes or if I create a file\nlet's say I create a file touch get Dot\npy and let that be get one dot py right\nso if I make some changes to this\nparticular file\nI'll write here print\nI love git\nsave it close it right so now before we\npush to the remote repository we need to\nadd these changes to the staging area we\nneed to make a commit and then only we\ncan push it right so first thing add the\nfile name so I'll just type in here get\nadd I can go ahead and type here if\nperiod that will add all the changes\nmade to the files in the staging area\nall the files in the staging area\nbasically modified files or I can type\nthe name of my file which in my case is\ngit1.py so I'll just type in here get\nadd get1.py and now I'm going to commit\nthe changes so I'll just type in here\ngit commit\nhyphen m\ngive a message so I'll just type in here\nremote\nand it has done successfully so now I\ncan go ahead and push the changes to my\nremote repository so I'll just type in\nhere get push origin master and here we\ngo\nso it says it is done successfully let\nus go back to our GitHub account and\nwe'll see whether those changes are\nreflected there and or not so I'll just\ngo ahead and run this basically reload\nit so you can see that get1.py file is\nadded here right so let me just quickly\ngo to the slides again and we'll see\nwhat all topics we have already covered\nso we have seen how to perform git clone\nwe have seen how to pull changes from\nthe remote repository to the local\ncomputer we have seen how to push the\nlocal comments to the remote repository\nnow let's talk about few Advanced git\ncommands focus on git stash git log gets\nrebase and get revert so I quickly open\nmy Virtual Machine and I will explain\nyou there only so guys let's discuss\nabout get stash first so to save changes\nmade when they are not in a state to\ncommit them to a repository you use git\nstash this will store the work and give\na clean working directory if I have to\ngive you an example imagine when you're\nworking on a new feature that's not\ncomplete but an urgent bug needs\nattention so that's when you can use\ngitstash let me just quickly show you\nhow you can use it\nso the first thing I'm going to do is\ncreate a new file so let the name of my\nfile be\nstash Dot py\nand I'm gonna make some changes to the\nstash.py I'll just type in here print\nstash is cool\nsave it close it and yeah now what I\nneed to do is add this to the staging\narea so I'll just type in here get add\nand now let's see the git status\nso my git status says that we have new\nfile which are there in the staging area\nthat is stash.py right changes to be\ncommitted so these are the changes that\nI need to commit So currently it is\npretty dirty so what I can do is I can\nput all the uncommitted changes to a\nstash let me show you how I can do that\nget stash hyphen U and here we go now go\nahead and type get status\nnothing to do working directory clean so\nit has converted my dirty directory to a\npretty clean one right so with the help\nof git stash right now the modification\nstashed away by this command can be\nlisted with Git stash list so I'll just\ntype in here get stash list here we go\nand if you want to inspect it so you can\njust go ahead and type git\nstash and show\nso you can inspect it here right let me\nclear my terminal now so now I'm done\nI've fixed my bug and now I'm ready to\nyou know work on what exactly I was\ndoing before fixing that bug right so\nwhat I can do is I just want to type in\nhere get\nstash apply and here we go\nand now if I type git status\nyou can see that I again got the dirty\ndirectory back\nso guys we have seen how gitstash works\nnow what I'm going to do I'm going to\nshow you how a git log and git reward\nworks right so uh for that I'll quickly\ncreate a new repository so let me do\nthat I'll just type in here\nmkdir git hyphen log so let that be the\nname of my directory and I'll go into\nthat directory yeah so now I'm going to\ninitialize it so I'm just going to type\nin here get init it has been done now I\nwill uh create few files here uh let\nthat be edureka1 Dot py and I'll just\ntype in here print\nMaster\nnew technologies\nat EDU daker\nall right save it\nand close it\nnow I'm going to add it here git add\nand then finally committed\nhyphen m\nlet's give a message and it is done now\nso what I did I created a directory\ninitialized it then what I did I made a\nfile inside that in that file I added\nthat to my staging area that file has\nbeen added to my staging area and then\nfinally I made a commit right so till\nnow there is no problem now if I type\nhere get log let me show you what comes\nso you can see that when I type git log\nthere's a commit hash right there is a\ncommit that has been made by author\nShivam on this particular date and day\nright so this is what basically git log\nis it shows the chronological comment\nhistory for a repository this helps you\ngive context in history for a repository\nand it is available immediately on a\nrecently cloned repository to see the\nhistory as well now I can provide\nparameters here as well for example I\ncan type in here get log hyphen before\nand give a date here right similarly I\ncan tell the git lock to show me the\ncomments based on the author right so if\nI type in here get log hyphen hyphen\nauthor and the name of the author then\nit will show the logs based on the\ncommit made by the author right\nsimilarly if I type in here hyphen\nhyphen before right and give a date so\nit will give me according to the date as\nwell so this is how git log Works guys\nso now what I'm going to show you is how\nto revert to the previous commit right\nso for that let me just make some\nchanges to my file again so the name of\nmy file is edereka1.py so I'll just type\nin here G edit\neditorica1.py and I'll type in here one\nmore print statement that says\ndon't just simply\nlearn it\nMaster it\nsave it close it now I'm going to add it\nto my staging area and finally I'm gonna\ncommit it\nhyphen M last commit all right so this\nis done now now what I have to do is\nsuppose I have made some changes I'm\ngonna go back to the previous change\nright so I've made some change in my\ncode I've done the commit as well but I\nwant to go back to the previous commit\nright so for that what we use we use git\nrevert so let me show you how you can do\nthat so in order to go back to the\nprevious comment what I have to do is\njust type in here get log hyphen hyphen\none line this will give me one line so\nthis was my last commit so I want to go\nback right so for that I'm just going to\ntype in here get revert and the hash\ncomment hash and here we go\nso it says that revert last commit so it\nhas already done that now if I go ahead\nand check my EDU\nrecap.1.py file so it only says Master\nnew technologies at edureka so this is\nhow you can even perform the revert\noperation just by using in the uh commit\nhash so with that you can go ahead and\nrevert back to the previous commit so I\nhope this is clear now let me clear my\nterminal so now what I can do is I can\ngo ahead and revert to the last commit\nas well instead of just typing the\ncomment hash if I just type in here get\nreward head\nand if I quit so it says that I've\nrolled back to the previous version of\nmy file so if I go ahead and click on LS\ncommand and if I type in here cat\nedureka1.py so I've gone back don't just\nsimply learn it Master it so my last\ncomment was basically revert operation\nright so whatever file changes that have\nbeen done after gitreward will be\nreflected as a commit itself right so I\nhope you're getting my point so what I\ndid first I created an empty repository\nthen in that I created a file editoraker\none dot py made a couple of changes made\ntwo comments then I used get revert with\nthe hash commit to go back to the\nprevious commit right so with that I got\nonly Master new technologies etraca this\none I didn't get at that time then what\nI did I showed you get revert head which\nwill basically take the last comment\nright it will reverse the last comment\nand the last comment was nothing but the\nrevert operation that happened that\nactually made my file hydra1.py to go\nback to the previous version so that was\nmy last comment right so because of that\nit has revert back to the last comment\nthis is why you can see that edrica1.py\nfile has both Master new technologies at\nthe direct and don't just simply learn\nit Master it right so I hope I'm clear\nwith Git log and git reward it's very\neasy guys there's not a lot of things to\nunderstand here it's very basic so let's\ntalk about rebase now so basically\nrebase is again one more way of\ncombining a work between different\nbranches so what rebasing does it'll\ntake a set of comments copy them and\nstore them outside your repository the\nadvantage of rebasing is that it can be\nused to make linear sequence of comments\nAll right so the comments log or history\nof the repository stays clean if\nrebasing is done right so let me just\nshow you how it is done if I just type\nin here git rebase Master let me just go\nahead and do that git rebase master\nso the current Master is up to date\nthat's what the message pops up so\nbasically this command will move all our\nwork from current Branch to the master\nBranch they look like as if they are\ndeveloped sequentially but they are\ndeveloped parallely\nall right so let me just give you a\nbetter example of this so I'll just\ncreate a branch here git branch\nsay\nand Eureka 0 1 0 is the name of my\nbranch and uh\nyeah so if I want to go to this branch\ncheck out add eureka010\nyeah I went to that branch and if I make\nchanges to\nendureeka1.py\nI'm going to remove this print statement\nsave it close it clean my terminal and\nI'm gonna add it get add period and get\ncommit hyphen m rebase\nall right so this is done now and now\nwhat I can do is I can go ahead and type\nin here get\nrebase master\nso it says that current Branch area 0 1\n0 is up to date so this is how you can\nperform rebasing so let me quickly go\nback to my slides so we have talked\nabout git stash we talked about git log\ngit rebase and git revert\n[Music]\nlet's talk about what is Jenkins and how\ndoes Jenkins in this particular picture\nJenkins is an open source automation\nserver which helps to automate the\nprocess of development rating of testing\ndeployment packaging and others it is a\nserver-based system that runs on\nsoftware Apache Tomcat it supports VCS\ntools like gate bitbucket and also Port\nbuild automation tools like Apache May\none aren't and it helps to make and\nfacilitate our continuous integration\nand continuous delivery process Jenkins\nwas first released in the year 2011 and\nit's a completely open source software\nas part of the MIT license Jenkins guys\nis a plug-in based software in Jenkins\nyou have got plugins which basically\nused to interact with different\ndifferent tools and components in\nJenkins plugins are primary releases in\nlanguages other than Java plugins are\navailable to integrate Jenkins with most\nversion control system tools and most\ndata uses using these plugins we set up\npurposes for example you testing you can\ndo compiling you can do packaging you\ncan create some reports you can do some\nlogging all those things are possible\nusing plugins and Jenkins another\nimportant component that we talk about\nin Jenkins apart from plugin is Jenkins\nnotification which we also call as\nmailer using mailer guys we can do\nconfig email notification for any\nresults you can configure the scenario\nfor example you want mail notification\nwhen build is successful all those\nthings can be done using mailers as the\nJenkins component another important\ncomponent in Jenkins is the SSH agent\nJenkins also follows a typical Master\nSlave topology now why do we need a\nmaster sleeve topology in CI tool like\nJenkins when you work in your\norganization we have got multiple teams\nwhich you want to build and deploy their\nown pipelines or deploy their own soft\nproject ports teams don't want that\ntheir piece of code runs on a server is\nowned by some other team so what we can\ndo is we can set up a Master Slave\ntopology where in Jenkins may run on\nserver X but even correct multiple other\nhours which will act as a stream so when\nyou are deploying a code executing a\npipeline you can run those code on those\nXYZ servers that is the beauty of using\nJenkins Master Slave another good thing\nabout Jenkins is Jenkins can be deployed\non any operating system you can run\nJenkins on a Windows node on a Linux\nnode on a Mac OS Jenkins can be deployed\non any operating system and similarly\nyour Jenkins Master slip can be of any\nOS it is not at all dependent both\nmaster and slave need to be of the same\noperating system another important core\ncomponent of Jenkins call is Java dock\nthis is out of plugin in Jenkins which\nbasically is a part of Jenkins score\nwhich helps us to publish results like\nbuild action build directory what is the\nexpected build output all those things\nthat we see in Jenkins they all are\nhappening using Java doc let's talk\nabout security engineers apart from that\nJenkins have other sort of oscillation\nlike Project based strategy Matrix based\nauthorization which helps to make\nJenkins more secure we'll talk more\nabout this when we talk about Jenkins\noverall so as you can see from the\ndiagram Jenkins is pulling from Source\ncontrol system like get bit bucket then\ncan start deploy it in Jenkins we have\ngot notification management system using\nmailer where is a bit successful we get\na war file a zip file we can Define how\nwe want the build to be created and it\nwill save your Center notification\nmanagement to a developer that something\nhappened wrongly with a specific code\nlines and you need to rectifier code\nthat is the beauty of using Jenkins so\nJenkins guide is to the bread and butter\nin the industry there are some Jenkins\ncomputer also in the market like gitlab\nJenkins and some others but by default\nJenkins is the two go tool for the CI in\nIndustry let's talk about what is a\npipeline so far we talked about Jenkins\nnow let's talk about what is pipeline\ninjectors now let's say I want to deploy\na code the code may have certain steps\nlike first step I am building the code\nsecond step I am compiling then code\nreviewing then packaging then deploying\nhow do I automate or combine all these\nsteps which can be executed in one group\nto deploy all these scenarios we create\na delivery pipeline pipeline is nothing\nguys it's a combination of different\ndifferent steps or different tasks that\nwe need to perform in order to deploy\nour code using a pipeline instead\nbringing this task or code deployment\nmanually we combine them and deploy them\nas sort of a one common approach of a\ndelivery pipeline there are multiple\nways on how you can create a pipeline\nthe two most common ways or common\napproaches of using a pipeline as you\ncan see from a scenario a declarative\napproach and the second one that is used\nin the industry is scripted approach\nthis particular example you are saying\nis an example of a Jenkins pipeline\nscript here you are saying you're first\ndoing a stage called build stage where\nwe're combining multiple tasks like\nfirst we are using Java we are printing\nsomething called Echo hello pipeline\nthen using Mi one as the build\nautomation tool and time deploy package\nand then we are doing a shell script\noutput of what all things are present in\nthe particular directory structure but\ntypical example of syntax of how to\ncreate a pipeline in Jenkins it's\nexample of a scripted pipeline now let's\ntalk about the two predominant pipelines\nthat are used in the IT industry\nscripted and declarative let's talk\nabout what is scripted and declarative\nand how they're different from each\nother a scripted pipeline is a\ntraditional dentist pipeline approach\nand declarative by pipeline is a modern\nday pipeline approach that is used in\nthe industry in a scripted pipeline the\nsyntax was very strict and traditional\nwhile in declarative pipeline views\nsomething called as groovy syntax when\nyou use a declarative pipeline you can\nget the code from any version system to\nlike get and all you create something\ncalled as Jenkins file and you can\ndownload Jenkins file from version to\nlike it and that can be used to run your\nJenkins hold when you use a scripted\npipeline you define a code something\ncalled as node block but one decorative\npipeline would Define a code in pipeline\nblocks as you have seen in the previous\nexample now let's talk about what is\nJenkins file and how it can be used\nJenkins file is the thing is like a text\nfile where you define find your entire\nstructure and syntax of your Jenkins you\nknow you download the file as in\nparticular you can just give the path of\nyour git repo if it is then get\ncredential private repo and it can pull\nall the contents from there and just\nexecute your code it is a modern\ndeployment mechanism that we use when we\nwork with a Jenkins pipeline using\nJenkins pipeline we use certain things\nwhich helps us let's talk about this\nfirst is code review writeration\nVenezuela Jenkins pipeline you can\neasily review your code your code semi\nreview by multiple developer before\nexecuted how that works is injections\nfile is stored generally in a Version\nControl System tool like it you can put\nsomething called as PR pull request for\nyour code review different members of\nyour team can review the code before you\nactually pull the Jenkins file and\ndeploy you can do an audit Trail or\nrefer to as login you can log each and\nevery step output that is being executed\nas part of a Jenkins file and can see\nwhat is happening when the Jenkins file\nis getting executed it's sort of like a\nword boost login then you can find a\nsingle place to store all your data or\nall your outputs you no need to have\ndevelopers scattered here and there and\nwriting their own codes for executing a\nJenkins pipeline hold organization can\napproach a genius file mythology where\ncode can be stored in a VCS tool and\nfrom their code can be downloaded and\ncan work as single source for your\nentire pipe let's talk about Jenkins\nworkflow in particular how does Jenkins\nworkflow work Jenkins workflow always\nstarts with the version control system\nor you can say source code repository\nmultiple developers collaborate and they\nput their code in a source code system\nlike git from where Jenkins tried to\npull the data from that Source control\nsystem reposit system there is no\nmandatory or source code need to make it\nit can be bitbucket SVN whatever your\norganization uses with using Jenkins\nserver we execute tasks like build\ndeploy compiling packaging code review\nall those things happen using Jenkins\nserver whereas Jenkins actually\ninstalled on setting so Jenkins server\ncan be any operating system it can be\nWindows machine a Linux machine Ubuntu\nmachine it can be any use of today's\nmodern world availability using this\nJenkins server would execute our\ndifferent different tasks and scenarios\nin Champion server only we use the\nmiddle functionality for the feedback\nmechanism to be notified developers the\ncommit or the code deployment successful\nit is a failure it has some challenges\nwhat can be done using the feedback\nmechanism possible using the Jenkins\nserver using Jenkins servers we always\nfirst deployed the code on a lower life\ncycle environment that is the\nrecommendation practice you first deploy\na QA server on a testing server and once\nthe code deployment is successful on the\nlower life cycle then we go ahead and\ndeploy the code on our production server\nthat is how the entire Jenkins work from\nany particularly interacts first now\nguys let's talk about Jenkins\ninstallation how to install Jenkins in\nour lab to give this example we are\ngoing to use a Centos machine as a\nreference to install and configure\nchanges Jenkins by default runs on port\n8080 the default port for running\nJenkins so please make sure that if\nyou're using any Cloud VMS or any VMS in\nyour organization then the port 8080\nfirewall settings are open and\nconfigured so that it can be accessible\nJenkins is a GUI based tool 95 Jenkins\njob is completely GUI based we hardly\nlog into our servers Jenkins got\ninstalled or using a CLI command to\nmanage or run change it is completely\nrun unmanaged using Google the graphical\nis interface which comes when we install\nJenkins another prerequisite to install\nJenkins is Java need to be present in\nour machine we need to make sure that\nJava is installed in our machine so guys\nlet's go to our lab and see how to\ninstall Jenkins so guys as I mentioned\nwe are going to use a Centos machine so\nlet's just double check it's a sentence\nVM so we have got the centers VM where\nwe are running Centos 7. first thing let\nus install Java this install Dash y you\ncan install any version of java I am\ninstalling 1.8.0 we can go for any\nversion\nso this completes my Java installation\nanother good thing about Jenkins here is\nJenkins has got detailed page published\nby Jenkins Community where we can see\nhow to use Jenkins installation for\ndifferent different types of operating\nsystem if you go to Jenkins dot IO slash\ndownloads here you can see the\ninstallation step provided by Jenkins\nCommunity to install Jenkins on\ndifferent different operating system you\nhave got the stable release and the\nrelease which is like Beta release you\ncan select which little Jenkins you want\nto use I will go for the stability that\nis Jenkins\n2.2.493. ta3 and since I'm going to use\nCentos I will click on the Centos\ninstallation step for Jenkins just copy\nthe steps mentioned here how to install\nJenkins and paste it in your\ninstallation server\nthese are the RPM dependencies that are\nneeded to install Jenkins so I'm just\ndeploying them on my server so that this\ndependency are present before install\nJenkins and now let's install Jenkins\nexam install Dash y Jenkins\nonce your Jenkins software is installed\nlet's start the Jenkins service\nJenkins so start let's validate the\nJenkins service got started\nso now we have got Jenkins up and\nrunning a while the guy mentioned\nJenkins runs on port 8080 so let's get\nthe public IP address of this machine\nso the public iPad machine is\n35.223.206.46 let's copy this IP address\nand try to access Jenkins on Port 8080.\nfirstly when you install Jenkins Jenkins\nfor securely ask you to verify the\nJenkins code just go to this path\nlocation and copy the code mentioned\nthere on your Jenkins server so I will\ncall Jenkins server install Jenkins I\nwill just scat this directory structure\nand I'll copy this Jenkins secret color\nsecret key which we need to use to\ninstall Jenkins click on continue\nif your key is valid it will prompt the\nnext page to install plugins to get two\noptions here either you can install the\nplugins recommended by Jenkins or you\ncan select your own plugins which you\nwant to install here I will select the\ninstall suggested plugins this step may\ntake a minute or so since it will\ninstall couple of plugins which I need\nfor Jenkins to properly function\nso you can see as like in the screen\ncoming up different different plugins\nare getting installed in our Jenkins\nso once your Jenkins installations\ncompared asks you to create your first\nadmin user okay so let's give some\nusername I'll give you the name as\nadvoca\ngive some password you can give any\npassword of your choice\nso I will give some password Here\ngive some confirm password give the same\npath that you give above some name I\nwill give the name as also educa and\nsome email address\nclick on Save and configure\nso you got the base URL and it's running\non port 8080 click on Save and finish\nstart using Jenkins\nthis is how your Jenkins home screen\nlooks like when you configure Jenkins\nfor the first time now let's talk about\nsome Jenkins Management on the left side\nyou see a tab called manage Jenkins this\nis a place where we do the entire\nAdministration and management of your\nJenkins you can see I've got plethora of\noptions here like security configuration\nstatus information tools and actions you\ncan CLI let's talk about all these tools\nin depth let's first talk about\nconfigure system as the name twice using\nconfigure system you can configure and\nedit different different Jenkins\nProperties or Jenkins configuration\nsettings so for example how many\nparallel tasks you want to execute at\ntime there's panel of executor you can\ngive two three whatever you want if you\nwant you can change the port and specify\nthe default admin address you can create\nyour own Jenkins email address from\nwhere your mail notification should go\nany Global Properties or variables you\nwant to link are linked at this place\ncalled Jenkins configuration let's talk\nabout something about Jenkins security\nif you go to configure Global Security\nhere you see how this you can configure\nSecurity in Jenkins there are multiple\nauthorization mode you can use in\nJenkins in order to use this\nauthorization strategy you need to use\nthe authentication strategies the most\ncommon and most widely used is ldap\nintegration where you basically\nintegrate the organization's ldap server\nwith your Jenkins database once you've\ndone that you can use different\ndifferent authorization strategies which\nare used in Jenkins the most predominant\none used in the industry is Project\nbased metrics authorization strategy now\nwhat does this project-based metrics\nauthorization strategy means let's say\nyou have created multiple jobs or\npipelines and Jenkins now all these jobs\nare pipelines belong to different\ndifferent teams in organization using\nproject-based metrics authorization\nstrategy we can restrict that specific\njob can only be accessed by team members\nof a specific group it is not imperative\nthat anyone who has excellent Jenkins\ncan run all the jobs or all the\npipelines using project-based metrics\noscillation strategies you can restrict\nthat another one that is used is metrics\nbased security here you restrict the\noverall access of check game that means\na user a can have admin rights a user B\ncan have we only write what type of read\nwrites you want to give like agent based\nfeed only right the full job rights full\nview right for source code management\nright all those things can be done using\nmetrics based security strategy so the\ntraditional ways which are not being\nused so frequently in the industry are\nanyone can do anything that means anyone\nwho has access to Jenkins is like full\nadmin another one that is being not used\nthese days is legacy teamwork legacy\nmode is something like you have the\ndefault admin role where you granted the\nfull control over system or otherwise\nyou have the only read access like read\nor admin in the legacy mode the third\none that was not also being used as\nlogged user can do anything logged in\nuser anyone can do anything is almost\nlike similar here also people who login\ncan basically do any of the tasks which\nis being done in general so in modern\nindustry for security we only used\nmetric Space strategy and the\nproject-based onion strategy these are\ntwo things which are basically used in\nmodern day world for using Jenkins now\nlet's talk about how does Master Slave\narchitecture Works in Jenkins how can we\nconfigure that and how that is possible\nlet's go back and let's go there\nlet's go again back to manage Jenkins\nyou see an option called manage nodes\nand clouds let's see how we can set up\nMaster Slave architecture using junkets\nby default the server will install\nJenkins called as the master server\nwhere Jenkins server is running on the\nleft hand side of the screen you can see\na tab called as blue note using a new\nnode we can add any nodes belonging to\nany operating system which can act as a\nJenkins sling there are multiple ways of\nhow we can set up authorization between\na master and a slave node the most\ncommon methods of using the Master Slave\nnodes are SSH launch agent by execution\nof command this is mainly used when\nyou're using Windows machine as your\nslave node for any Linux machine we\ngenerally go by the secure shell as the\nauthorization strategy we can add as\nmany nodes as you want as a slave node\nthere is no limitation of how many slave\nnodes we can have in a Jenkins\narchitecture now let's talk about\nplugins and jungles plugins another\nimportant component of Jenkins when you\ngo to manage plugins you see three\noptions available here plugins where you\nfind updates means you are installed and\nupdates are available\nplugins which are installed in your\nmachine which are already present so if\nyou guys remember when we installed\nplugins we selected an option called\ninstall recommended plugins these are\nsome plugins which get installed by\ndefault when we select that option then\nyou've got tab called availability\nplugin plugins which are available which\nwe can use for installation there's a\nplethora of plugins which is developed\nand managed by the Jenkins Community\nwhich you can use for installing here so\nfor example let's say we want to install\na plugin to integrate unique Cloud\nenvironment you can find plugin for that\nalso so if you search for for example\nAzure you can file you've got so many\nplugins to integrate with the Azure\nCloud similarly if you search for AWS\nCloud you can see so many plugins to\nconnect with the AWS Services same way\nyou can create your own plugins also we\nneed to create our own plugins and you\ncan upload the plugins which can be used\nfor you to installation in your own jenk\ninstallation once your plugin\ninstallation has been verified and\nupdated then it can be used by Jenkins\nCommunity as a whole but initially when\nyou upload any plugin it is just for you\nto use for your own machine now guys\nlet's talk about how to create a job at\nchinkle when you work in Jenkins there\nare few terms which we use very often\nitems jobs project they all are\ninterchangeable they all carry the same\nmeaning in terms of Jenkins how to\ncreate a job or item just click on the\nnew item give some name let's say job\nfun for now select just freestyle\nproject since we are getting a very\nbasic one click on OK\ngo on the build app and select how you\nwant to build step execute a shell\ncommand A bash command now on together\nwhat is your for example I want to\nexecute a shell command\nand let's say I want to print something\nEcho\nhello from madurica simple job\nand just click on apply and click on\nSave let's try to build this job in\norder to build this job you see the\noption called build now click on build\nnow\nsee my job is running right now\nsee my job execution got completed and I\ncan see my first job got come today\nlet's click on this one button the first\njob execution and click on the console\noutput here you can see how the job\nexecution actually happened my job got\nsuccessfully completed and you can see a\nmessage getting displayed hello from\nattacker so simple way to see a create a\nfirst job and do validate job Bots it is\nfully completed or not let's try to\ncreate one more job and then we'll try\nto see how that works out let's say I\nwant to print today's date for example\nso let's again say job to for example\nagain a freestyle project again click on\nOK\nagain click on build\nthis execute shell and let's say\nEcho\nhello and let's say date and I want to\nstore this output in slash temp slash\ntemp slash and let's click on apply\nclick on Save and let's click on build\nnow\nyou see the job afterwards successful\nlet's click on this click on Console\noutput you see it's successfully printed\nthis and the output got completed you\nsee all this jobs that we execute has\ndone in a specific directory structure\non the stringkin server so if I go on\nthis Jenkins server for example and go\ninside this directory structure and you\ndo LS you can see that this job got\nexecuted in this director structure job\nsimilarly if I go in the temp directory\nstructure and do an LS you see when we\nran this job we gave the date should be\nprinted in this edu wake up file if I do\na cat and this file name it displaying\ntoday's data simple example that\nwhatever jobs we execute gets actually\nexecuted on the Jenkins server we just\nseen the front end in the going what is\nbeing done as part of the Jenkins\nstrategy now how to introduce a source\ncode management integration in Jenkins\nfor example let's say I have got some\ncode in any versioning tool system let's\nsay like git or sub version of bitbucket\nand download data from there too go to\nthe job or create a new job let's click\non configure\nif you go on to source code management\nyou see an option called git here you\ncan Define the GitHub repository path\nfrom where you want to download data\nyour git repository if you're using a\nprivate repository add your get\ncredentials and from which particular\nBranch you want to download or clone\nyour code you can even add multiple git\nBranch from where you want to get the\ndata that is how this things Works in\nJenkins another Beauty about Jenkins is\nbuild triggers so every time when I\nbuild a job I don't want to go manually\nand run the job we can automate this\nprocess using some simple tasks like\nbuild periodically you can define a\nschedule where you want your jobs to be\nrun this schedule defined in a con tab\nbasis like every five minutes every 10\nminutes every hours once in a day we\nDefine a Quant tab entry for that and\naccordingly your jobs will then\nautomatically in that particular\nschedule manner if you want to make your\nlife more simpler and want to run the\njob every time a new commit a developer\nmakes for that go with the option of\npoll SCM in a polo option every time a\nnew commit happens made by developer at\nthis specific schedule check for it if\nthere is no new commit the job will not\nbuild but if there's a new comment the\npole SCM will trigger that job that is\nhow we automate the things in Jenkins\nwhen you build a job you try to get sort\nof pipeline you can create a pipeline on\nthe basis of multiple scenarios when you\nsay scenarios WhatsApp to talk about for\nexample let's say I want the next job to\nbe executed only if my build is stable\nor unstable or failed you can specify a\nscenario and then say which job want to\ntrigger for example I want to Interlink\njob 2 and job fund I can give job to\ninter build after job to build job one\nbut only trigger job one only when job 2\nis stable so it's like creating a sort\nof interdependent jobs where only if my\nprevious job execution was stable or\nsuccessful it will go to the next job\notherwise it will skip the next job that\nis how we build a sort of pipeline using\nJenkins in Jenkins your slave nodes or\nyour Master Slave hierarchy can be a\nnode in the on-premind machine or it can\nbe any Cloud vmos so for example you can\nhave your Jenkins Mass server deployed\non-premise or in your own data center\nwhile your slave machine can be running\nin an AWS cloud or an Azure cloud or\neven both that is how good Jenkins is\nall about Jenkins guys completely open\nsource Automotive software where there's\nno cost of using it or there is no\nlicensing cost linked with it how do we\nautomate all those things and deploy\nthem in a one single code as a pipeline\nso now we're going to see an example on\nhow to create a pipeline type before\nusing this pipeline we have just make\nsure that may 1 is installed and present\nin our environment so let's go to our\nJenkins setup we have installed in\nconfigured our Jenkins again just click\non new items as we previously create a\nnew job or something give some name\nlet's say I give a name as code\nselect the option as pipeline click on\nOK\nI'm going to scroll down you see an\napproach called pipeline script okay\nbasically you write your script or how\nyou want to deploy your pipeline for\nyour example here in my scenario you see\nwe have created this scripted pipeline\nhere there are three steps so you can\nsee three stages for our code deployment\nthe first is we're preparing our code\nhere as you can see we are downloading\nthe code from a git repo or a git\nrepository here you define the GitHub\nrepo path where you want our port to be\ndownloaded you can specify whichever\nGitHub path you want to use next you can\nsee we have defined an environment\nvariable that is build the code that is\ngetting downloaded from the preparation\nstep we have named as stage build here\nyou can see we are running the bin mvn\nthe default 11 directory and we're\ntrying to build this particular piece of\ncode here once our code gets built we\nare trying to combine this code and\ncreate an artifact file a jar file you\ncan Define whatever format of output you\nwant a jar file a zip file a war file\nanything can be defined in this approach\nlet's click on apply let's click on Save\nand let's see how this pipeline looks\nlike so if you click on build now\nyou can see different different stages\nthat happen the first one is preparation\nstage in this stage the code would have\nbeen pit pulled from the git repo then\nthe build side and finally receive\nresults that something has happened so\nlet's click on this job and let's click\non the console output you can see the\nfirst stage happened that is pulling the\ndata from the git repository it was\npublic report so no code need to be\nspecified the data got cloned or\ndownloaded from this git repository once\nthe data was downloaded it then tried to\ncombine it so it uses a different\ndifferent event plugin like the compiler\nplugin for test report the mayweight\nSurefire plugin it runs some test queues\nas you see it ran some six test cases\nwhere it had no failures in this\nparticular diaper structure on your\nserver where you install Jenkins so if\nyou go inside the active structure where\nyou install Jenkins and click on LS you\ncan see the jar file for your code has\nbeen done so using a very simple Jenkins\npipeline you automate the entire process\nof compiling packaging building unit\ntesting and I think it took less than a\nminute for the entire thing to happen\nprobably some couple of seconds for this\nentire step level that is how Jenkins\nmake life so easy overall took says\n2.785 seconds and it's 2.785 seconds it\npulled the code from VCS abortion\ncontrol system it compiled it it\npackaged it it tested it and now\neverything looks good it packaged our\ncode as a chart file so that is how\nJenkins helps us to make our life easier\n[Music]\ncontinuous integration is like a\nsoftware development life cycle now how\ndoes it work so as you can see here this\npipeline is a logical demonstration of\nhow a software will move along various\nphases or stages in this life cycle\nbefore it is delivered to the customer\nor before it is live so just imagine\nyou're going to build a website which is\ngoing to be deployed on the live web\nservers and your product is a website or\na web app now you will have a set of\ndevelopers who are responsible for\nwriting the code which will further go\nand build a web app or website so once\nthe team of developers write this code\nand commit the code into the version\ncontrol system like get or SVN it goes\nto this build phase so this is the first\nphase of the pipeline where developers\nput in their code and code goes into the\nVersion Control System having proper\nversion tags so you know which build has\nwhat kind of version tag so any commit\nthat happens and you find an error you\ncan just go to that particular version\nand then check the comment so after you\nhave your version control system face\ndone then it goes to a build phase where\nyou compile the code so you get all the\nvarious features of that code from\nvarious branches of repositories then\nyou merge them and then finally you have\nsome compiler to compile it and that is\nnothing but the build phase so in build\nphase what's happening is the code has\nbeen taken from the version control\nsystem and then it is compiled so you\nknow the code of all the features are\nmerged and then it is compiled together\nonce the build phase is done you move on\nto the testing phase so in testing phase\nwe have various kind of testing\ndepending on the type of the company or\ndepending on the type of the product\nthat the company is delivering so one of\nthe tests in the testing phase is unit\ntest so what happens in unit test is\nthat you break your complete software\ninto small little chunks that is the\ncomplete software is divided into chunks\nbased on different paths so every part\nhas a code so it is divided into small\nindividual units to understand how it\nworks and when the test is completed you\nhave an assurance that that particular\npart is working\nand once each and every part is tested\nthere is one more test that has to be\nperformed that is the integration\ntesting so what happens with integration\ntesting is now all these individually\ntested paths are integrated together and\nseen if they can work with each other or\nnot a software has many features where\nthey have to work with each other so\nthat is tested in integration testing\nafter your testing phase is done you\nnext move on to the deploy phase and\nthis is the stage where you deploy your\nsoftware onto the staging area or the\ntest server where you're going to view\nthe code\nso in the deploy phase the code is\ndeployed successfully and then you can\nrun another set of strategy tests and\nonce you think that all the parts are\nworking and everything is fine you can\nfinally think that it is acceptable and\nthen it is deployed onto the production\nstage right meanwhile in every step if\nthere's some error development team\nfixes that particular bug and then\npushes it into the version control\nsystem which goes back to the complete\npipeline again so once again if there is\nany error reported during testing the\nfeedback goes back to the dev team they\nfix it and that particular product goes\nto the complete pipeline again that is\nit again goes to the build phase the\ntesting phase and then it is deployed\nonto the plot servers\nso this is how in every phase it moves\non throughout the life cycle unless we\nget a code or a product which can be\ndeployed into the production server and\nthere we can measure and validate that\ncode\nso pipeline is a logical step or a\nseries of steps which Define how\nsoftware development life cycle occurs\nso guys this was all about CI CD\npipeline so now that you know a brief\nabout all the stages in the CI CD\npipeline let me tell you what exactly is\ncontinuous integration\nso let's consider a scenario of a team\nwhich has five developers building a\nwebsite which has many features so let's\nsave this website to be a shopping\nwebsite right so as we all know that in\na shopping website we have many pages\nlike you know the user details the past\norders the shopping carts whatever\nproduct a person has added to is card\nand so on and then finally we also have\nthe checkout page and so on right so all\nthese different pages are known as\nfeatures of the software so when you\nhave multiple features you have to\ncombine those speeches and merge them\ninto a single version control system\nwhere you merge the various feature\nbranches of the code and make a single\npool of the code which can be now\ncompromising of all the features of\nvarious branches committed by the\ndevelopers and then you can build it as\na product and move on to the testing\nphase so what are you basically doing\nyou're combining all the feature\nbranches that is all the feature codes\ninto a single branch and once you\ncombine it successfully so you're then\nmoving it to the testing phase\nnow when you merge the code and you\nbuild the code to get a single unit of\nthe software this is nothing but\nintegration so integrating means putting\nall the code together from all the\ncontributing developers and then merging\nthe code and building it as a whole now\nyou must be wondering why do we call it\nas continuous integration the reason is\nbecause everything happens in devops\ncontinuously so everything is automatic\nso as soon as the person commits the\ncode in the Version Control System it\ncontinuously starts merging the process\nand then it continuously starts also\nbuilding the process simultaneously so\nthat is the reason that it is known as\ncontinuous integration as nobody has to\nwait for anything\nafter the stage of continuous\nintegration we have continuous delivery\nso as and when we move on to the various\nstages in pipeline we finally delivered\nthe product because as soon as it passes\nthe test and new features become\nfunctional it can be used as the final\narea for the product so everything\nhappens in a continuous way so the\nproduct is built the product is tested\nthe product is then deployed onto the\nproduct servers so since it is\ncontinuously integrated built tested and\ndeployed and delivered this process in\nshort is known as the CI CD process\nnow once you have the continuous\nintegration and continuous delivery in\nplace the Deployable unit path is called\npipeline now what do I mean by\nDeployable unit part I mean the part to\nthe production servers where it is\ndeployed onto the live service so now\nthat you've understood what CI CD\npipeline is let me show you a real life\nuse case of a company known as Capital\nOne so Capital One is one of the\nwell-known brands in America and is\namong the top 10 largest banks in the\nNations by deposits it offers a wide\nrange of financial products and services\nto commercial clients small businesses\nand individual consumers both online and\ninline at branch locations the company\nwas founded on the vision that the power\nof ID and testing could be harmless to\nbring the highly customized Financial\nproducts directly to the customers now\nthe initial challenge was to increase\nthe automation while ensuring stability\nscalability and security as continuous\nintegration practices were becoming\nincreasingly mainstream Capital One\nformed a continuous delivery tools team\nas a part of restructuring the company's\ntechnical organization so this team was\ncreated to support thousands of\ndevelopers by providing a solid service\nthat helps them deliver software\napplications more quickly and in a more\nagile fashion from a platform\nperspective the technical makeup had to\nbe extremely flexible to meet a wide\nvariety of use cases but it also had to\nbe both stable and scalable further as\nfinancial services company Capital One\nneeded its platform to be secure itself\nand promote improved security for the\napplications built with it\nso with these objectives in mind the new\nshared continuous delivery tools team\nsought to implement the CI CD practices\nthat supported security practices\nwithout stifling developer Innovation\nwith reference to speed and security so\nthe solution they found out was to\nestablish a platform for CI CD to\ndeliver quality software with shorter\ntime to Market so how did they do that\nso the shared continuous delivery tools\nteam established an internal platform\nfor automating bills testing and\ndeployments based on cloud-b's Jenkins\nplatform they used the role-based access\ncontrol plugin to implement an\nauthorization strategy in which security\nroles were assigned to a group of users\nafter the initial platform rollout the\nteam made incremental refinements over\nthe time to improve operational\nefficiency they decoupled their Jenkins\nAgents from Masters giving them the\nability to scale Masters and agents\nindependently using the Amazon web\nservices\nthe team began using cloud-based Jenkins\noperations center to manage multiple\nMasters and reduce the administrative\nTime by ensuring plug-in compliance and\nversion consistency with the update\ncenters so the team settled on a single\ndefault environment for all the groups\non the top of the infrastructure created\nby the team a common implementation\npipeline layer was also created so this\nis how they use the CI CD pipeline you\nknow to solve their challenges so after\nimplementing the CI CD pipeline they saw\nthat 90 of the pipeline was automated so\nthis increased deployment frequency with\n1300 percent so that's a huge number\nisn't it so with the Jenkins platform\nthey created a service for the\ndevelopers that were scalable and stable\nas a result of this the time that\ndevelopers would have spent managing the\ninfrastructure was now spent by\ndeveloping business applications and\nobviously as I said this increased\ndeployment's frequency by year and year\nright and also it was seen that the\nquality and the security of all the\nrepeatable processes was ensured so they\nimplemented consistent repeatable\nprocesses in an automated fashion every\ntime a developer wanted to comment or\nyou know every time a developer wanted\nto deploy something so this produced a\nmore secure software enabling them to\ndeliver it faster so guys that was the\nuse case about Capital One so it was\nreally clear to you right how they face\nthe challenges to solve the problems\nwith the help of CI CD and they could\nclearly see evident results so in\nbetween the discussion you must have\nalso observed that I was mentioning\nJenkins platform right so why do you\nthink that they just use Jenkins why not\nanything else so why do you think that\nCapital One went for Jenkins platform\nwhy was it so important to them so\nJenkins is a really good automation tool\nthat you can use now how is Jenkins\ngonna help us so let's know so Jenkins\nprovides us various interfaces and tools\nin order to automate the entire process\nby entire process I mean the process of\nthe complete development life cycle so\nwhat happens is that so suppose you have\na get repository where the development\nteam commits the code and then Jenkins\ntakes over from this so Jenkins will\npull that code and then it will move it\nto the commit phase where the code is\ncommitted to every Branch then Jenkin\nmoves it and then it goes to the build\nphase where it will compile the code now\nafter the code is compiled and after the\ncode is validated and reviewed the code\nis tested and once all the tests are\ndone it is finally packaged into an\napplication it could be either a war\nfile or a jar file\nso what Jenkins does is it is going to\npull your code from your version control\nsystem and then it is going to perform\nthe build it is going to compile your\ncode it's going to validate your code\nit's going to again review the complete\ncode after that is done it will perform\nthe unit testing and the integration\ntesting and then finally it will package\nyour application into a war file or a\njar file and then it is ready to be\ndelivered so that's what Jenkins helps\nus to do so now you must have understood\nthat this is the tool for basic\ncontinuous integration but as I just\nsaid Jenkins role is only till the\napplication is packaged now if it has to\nbe delivered then we need some tools to\ndeliver that product right so now that\nyou know a lot of theory about cicd\nPipeline and you know the tools for cicd\npipeline that is Jenkins Docker let me\nshow you practically how a CI CD\npipeline is created and how it is\nexecuted right so let's get started with\nour Hands-On so we're going to build a\ncicd pipeline using Jenkins and Docker\nso for that let me just open my\nvirtualbox manager where I've installed\nJenkins in my system let's go to my\nvirtual box\nbefore I start creating my pipeline let\nme run the Jenkins service and Docker\nright so let me open the terminal\nlet me enable the Jenkins service and\nthe docker service before creating the\npipeline so let me type in the command\nso for that I'll type in systemctl start\nJenkins\nso it will ask me my authentication so\nI'll type in my password\nand then I'll type in system\nCTL enable Jenkins\nso as you can see that I've not got the\nPrivileges because I've not entered the\ncommand as the super user so if you wish\nto enter the command as the super user\nyou have to type in sudo before the\ncommand so you'll type in sudo system\nCTL enable Jenkins\nand then you'll be asked for the\npassword so let me type in my password\nand then you can see that your Jenkins\nserver has been enabled now we also want\nDocker to run so for that we'll type in\nsystem CTL start docker\nagain it's asking my authentication so\nI'll type in my password\nand then Docker has started so our\njankit service and Docker has been\nstarted so now let's open our Jenkins\ndashboard so for that I'll open my Local\nHost so let me open my Jenkins dashboard\nso when you open your Jenkins dashboard\nJenkins always asks for the user ID and\nthe password mention your user ID and\nthe password and click on login all\nright so this is your Jenkins dashboard\nnow what I'm going to do is I'm going to\ncreate a pipeline so for that I'll be\nusing free jobs the first job would be\nto build the project the second job\nwould be to test the project and the\nthird job would be to finally deploy the\nproject so for that we'll be creating\nfree jobs so let me show you how to\ncreate new jobs so for that you have to\ngo to new item you have to type in the\njob names so let me put in the job name\nas job1 and choose as freestyle project\nand then click on OK\nonce this is done I'll again go back to\nmy dashboard and create two more jobs\nsimilarly that is job 2 and job 3. so\nlet me type in the name job2 and choose\nit as freestyle project and click on OK\nand when it comes to the configuration\npart I'll tell you what you have to\nconfigure soon and then similarly I'll\ncreate a new job that is job free\nso let's go back to our dashboard so you\ncan see that three jobs have been\ncreated now I want to create a pipeline\nso what I'll be doing for this pipeline\nis I'll be pulling a code from a git\nrepository and that code is a Java web\ncode which is basically given to the\ndevelopment team for the testing so that\nis job 2 here and once the testing is\ndone it will be deployed so for that you\nhave to mention the repositories URL in\nyour job to pull that code so let's\nmention the repositories URL so for that\nI'll go to job one I'll go to configure\nand then I'll go to the source code\nmanagement tab I'll go to get because\nI'm going to mention the repository URL\nof a GitHub account\nso I'll mention the repositories URL so\nthis repository has all the files\nrelated to the project so this is where\nfrom Jenkins will pull the code and then\nit will perform the build test and\ndeploy operations in a CI CD pipeline so\nI'll click on this and save and apply\nsimilarly I'm going to do it for the\nother two jobs also\nso we have mentioned our git repository\nfor all the three jobs now we have to\nconfigure our jobs in such a way that\nwhen it performs the build option it\nknows what code it has to compile and\nwhat all has to be installed\nrespectively\nso after mentioning your GitHub\nrepository URLs for all the three jobs\nour first step is to build the source\ncode to get a VAR file that is an\nexecutable file now what does this mean\nbasically when the Jenkins server pulls\nthe code from the gets repository it\nuses Maven to install that package so\nfor that we have to mention the command\nof Maven install and then Maven installs\nall the dependencies that are required\nto compile this application and once the\napplication passes all the tests\nsuccessfully it will then use Docker to\ndeploy it so this is the process of the\nCI CD pipeline that we're going to use\nso for that let's go to a job one and\nthen configure it first so let me open\nmy job one go to the configure option\ngo to the build option here go to add\nbuild step choose execute shell because\nwe're going to execute the shell\ncommands and then I'll mention the\nrequired commands so the required\ncommands would be here to you know\nmention the directory of our web code\nand then also mentioned we will install\nso because we want to install all the\ndependencies required to compile our\nproject so let me mention the commands\nso as you can see that I've mentioned\nthe required commands so our first\ncommand is to change the directory of\nour web code that is the directory in\nwhich we want the code to work in and\nthen we are using the command Maven\ninstall to install all the dependencies\nrequired to compile the code after that\nwe want it to move on to the testing\nphase so that the testing is performed\nso we're going to change it directly to\nthe testing phase and then we will\nverify the testing results with the help\nof this command so this is what you have\nto mention in job one after you've\nmentioned this you can then save this\njob one after that let's configure job 2\njob 2 is where we want the testing to be\ndone and then we want it to be copied to\nthe docker file so that our application\nis deployed onto the plot servers so for\nthat I'll go again onto the option of\nconfigure\nand then I'll go to the build option\nI'll go to add build step I'll choose\nexecute shell and then I'll mention the\nrequired code so after our job one has\nbeen built and tested we want our\napplication to be deployed onto the\nproduct service so for that we'll build\na Docker container so to do that you'll\nuse the commands to change the directory\nas CD Java web code and then to build a\nDocker container you will use the\ncommand Docker build hyphen T devops\npipeline demo so that is the name I've\ngiven you can give any other name that\nyou want after that you can click on\nSave and apply\nonce this is done let's configure job 3\nthat is a final stage where everything\nis tested and then we just want it to be\ndeployed onto the plot service but\nbefore that is done we have to check one\nthing and that is if our image has been\ncreated previously or not if there is an\nimage that is previously created then we\nhave to remove that old files else if it\nis not created then we can say that a\nnew image has been created or if you see\nthat there is no container existing at\nall then you can reply a message that\nthere is no container existing right so\nfor that let me just go to the build\noption again go to add build step go to\nexecute shell and then I'll mention the\ncommands\nall right so I've mentioned the required\ncommands so my container that I've\npreviously created on job2 that is\ndevops pipeline demo is running and then\nover here I'll check if it is previously\nexisting or not if it is existing then\nI'll remove the files by using the\ncommand RM and if it is not then I'll\nprint a message saying that the\ncontainer does not exist so that's how\nyou can make sure that your container is\npreviously existing or not after you're\ndone with this you can just save and\napply so now that I've told you that we\nare creating a pipeline that means all\nthe jobs must be interconnected so the\npipeline should know after job one is\nbuilt what has to be built next and\nafter job 2 is built what has to be\nbuilt next so to do that we have to\nmention in the configure options of jobs\nso let's go to the first job that is job\none go to the configure option and over\nhere I'll go to the Post build actions\ntab and over here I'll choose build\nother projects\nso I'll mention the next job that has to\nbe built after job one that is job two\nright so I'll mention job two and then\nI'll save and apply\nafter this is done I'll go back to my\nJenkins dashboard and I'll go to job2\nover here\nI'll then configure job 2 and then I'll\nmention after job 2 is built what has to\nbe built that is job free\nso I'll again go to the postbell actions\ngo to the build other projects option\nand then I'll mention jobs here\nso we have mentioned our post Bill\nactions so now what will happen is once\njob one has been successfully built it\nwill automatically start building job 2\nand once that is done it will\nautomatically start building job free so\nthat's how you can build various jobs\none after the other\nso as I said that we're going to create\na pipeline so to create a pipeline you\nhave to go to this plus option here you\nhave to mention your view name so that\nis your pipeline's name so suppose I\nmentioned it as devops pipeline so let\nme mention the name\nand then I'll click on build pipeline\nView and then I'll click on OK\nnow once this is done as I said a\npipeline should know from where it\nshould start so we're going to mention\njob one so that is where our pipeline\nwill start so I'll go to the pipeline\nflow section and then I'll mention the\ninitial job as job one so that is\nalready mentioned here and once that is\ndone I'll click on apply and then click\non OK so that means our pipeline has\nbeen built now if you have to run this\npipeline you just have to go to this\noption and run so you can see that if\nthe job one is in yellow that means it\nhas started running and job 2 and job 3\nare in the sequence\nso as you can see that job one has been\nsuccessfully built so let me open my\nconsole output and show you so you can\nsee that our git repository has been\npulled so the code has been compiled all\nthe maven dependencies are installed\nthat are required for compiling the\napplication and finally we can see that\nour test results have been successful in\nthe second job we were creating a Docker\ncontainer so let it run so let me show\nyou how the docker container was created\nall right so you can see that our job\ntoo has also successfully built so you\ncan see that all the artifacts have been\ncopied and the docker container has been\ncreated so a job 2 was also successful\nin building so let's wait for the job\nthree and once it builds I'll show you\nthat it has been deployed successfully\nall right so you can see that our job 3\nhas been successfully built so that\nmeans that a CI CD pipeline was\nsuccessful\nso before I move on to show you the\noutput let me show you the console\noutput of Job 3 and you can see that yes\nour container did not exist previously\nand a new container was created right so\nguys that's how you build the CI CD\npipeline now let me show you the results\nso I'll go to my local host\nso you can see that our application is\nrunning fine\nso guys that's how you know you can\nbuild your project and then compile The\nCode by installing the required\ndependencies and once that is done you\ncan push it to the test phase where the\nproduct is tested and once it passes all\nthe tests it is then deployed using the\ndocker image and once that is also\nsuccessful it is deployed onto the\nproduction that you can see in front of\nyour screen\n[Music]\nso since Docker is a containerization\nplatform it's important to understand\nwhat came before containerization or\nwhat is the history of containerization\nso before Docker came into the picture\nbefore containerization came into the\npicture there was this concept of\nvirtualization or basically using\nvirtual machines so virtualization was\nthis technique of importing a guest OS\non top of an operating system and this\ntechnique was a revelation at the\nbeginning because it allowed developers\nto run multiple operating systems in\ndifferent virtual machines all running\non the same host operating system which\nnothing but eliminated the need for\nextra Hardware resources now the\nadvantages of virtual machines or of\nvirtualization are many multiple OSS\ncould be run on the same machine the\nmaintenance and Recovery was easy in\ncase of failure conditions and the third\nPoint here being the total cost of\nownership was also less due to the\nreduced need for infrastructure so as\nyou you can see here on your screen\nright now you can see that there is a\nhost operating system on which there are\nmultiple guest os's running which is\nnothing but a virtual machine so as most\nConcepts have their shortcomings\nvirtualization also had a few\nso running multiple virtual machines on\nthe same host OS each to the performance\nof degradation this is because the guest\nOS running on top of the host OS will\nhave its own kernel own set of libraries\nand own dependencies and these take up a\nlarge chunk of the system resources that\nis the hard disk processor RAM and other\nresources another problem with the\nvirtual machine which used\nvirtualization that it takes a lot of\ntime to boot up so the problem is very\ncritical in case of radial time\napplications so these drawbacks were\nalways there apart from that you also\nhave the age-old battle between\ndevelopment and production teams that\nthe code works and development and does\nnot work in Productions because the\ndeveloper has a system with their own\nset of libraries their own kernel and\nthe apps running on there whereas the\nproduction team has these resources of\ntheir own so this is a problem that you\ncan blame upon the difference in the\nComputing environment a code that runs\non the developer system might not run on\nsomeone else's computer so this led to a\nnew technique called containerization\nbasically a container brings\nvirtualization to the OS level while\nvirtualization brings abstraction to the\nhardware containerization brings\nabstraction to the OS so what you might\nnotice here is containerization is\nbasically virtualization but it's more\nefficient because there is no guest OS\nhere it utilizes a host's operating\nsystem shares relevant public libraries\nand resources were needed and unlike\nvirtual machines the application\nspecific libraries and binaries of\ncontainers run on the host kernel so\neach app has its own set of libraries\nand binaries in its own little container\nwhich makes processing and execution\nextremely fast even if you have to boost\na process it takes only a fraction of a\nsecond because in case of\ncontainerization all the containers\nshare only the host operating system but\nhold all that application related\nbinaries and libraries in themselves\nthey are lightweight and faster than\nvirtual machines so here as you can see\nthere is your host Os or your host\nkernel which is shared by all the\ndifferent containers so the containers\nthemselves only contain the application\nspecific libraries which are separate\nfor each container this is what makes\nthem faster and they do not waste any\nresource all these containers are\nhandled by a containerization Edition\nlayer which is not native to the host OS\nhence a software is needed which can\nenable you to run containers on your\nhost OS and this is also how\ncontainerization solves the difference\nin Computing environment problem now a\ndeveloper works on containers instead of\nvirtual machines the app and its\nrequired libraries and binaries all are\nin one container so when it is passed on\nto the testing team or the production\nteam it does not matter whether their\nhost systems have the same libraries all\nthe dependencies are already present in\nthe container containing the app\nso now that you know what is\nvirtualization and what is\ncontainerization and why do we need\ncontainerization let's move ahead and\ntalk about docker\nwhy do we need Docker so challenged I\nbriefly spoke about earlier is what I\nwould like to elaborate on in this\nsection now when you have a project code\nin a development lifecycle there are\ndifferent different environments you\nhave your virtual server you have your\nstaging environment you have your\nproduction environment you have a QA\nenvironment now most of the code that we\ndeploy today is done using VMS or\nvirtual machines now how this works is\nthat a developer or certain developers\nwill write the code and all of it is\nplaced in a Version Control System such\nas git now this could also be placed in\na staging server depending on your\norganization's infrastructure but most\norganizations these days use a version\ncontrol system so more often than not\nthe code is placed in that version\ncontrol system now this code is never\ndirectly deployed in the production\nserver it's usually first deployed in a\nlower lifecycle server like your QA\nserver or your staging server now once\nit is successful in that that then only\nit is deployed on your production server\nnow this is where the chances of\nconflicts increase so the same piece of\ncode that might be running on your\nstaging server might not run on your\nproduction server and the reason is very\nsimple is the difference in the\ncomputational environment this is also\nknown as infrastructure incompatibility\nnow in most cases your QA servers or\nyour QA environment staging environment\nare always updated in most organizations\nthat's the case it usually has the\nlatest libraries latest binaries latest\njars All That Jazz but the same cannot\nbe said for the production environment\nso in order to face all these challenges\nthat is faced defensive environment and\nlack of optimization of resources we use\nDocker so this is where Docker comes\ninto picture Docker does virtualization\nin the software level and we call it\ncontainerization as I had mentioned\nbefore so here as you can see containers\nare bundled with their own set of\nlibraries and binaries but they can\ncommunicate with each other with a fixed\nset of protocols the thing about\ncontainers however is that they do not\nhave their own operating systems which\nis a great thing because this is what\nmakes them lightweight and function on\nvery little resources which makes them\nreally fast as well so what exactly is\nDocker as you can see on your screens\nthere are two machines the first one has\nthree software applications one is\nangular based one is react based and one\nis Django based now all of them are\nusing common resources from the systems\nlibraries Ram processor Etc and the\nFrameworks are allocated a location in\nthe memory now how is it different from\nyour machine with Docker since you have\na dockerized machine you have a\ndockerized system all of your Frameworks\nand binaries in library is required by\nyour angular app your react app and your\nDjango app can be put into their each\nisolated container owners which are\ngoing to run independently from each\nother without interfering with another\napp and the space in which you had your\nframework stored has opened up so now\nyou can add another software application\nthere with its own Frameworks and\nlibraries binaries Etc and that is what\nDocker is meant to do it's a tool\ndesigned to make it easier for you to\ncreate deploy and run applications by\nthe usage of containers Docker is a\ncontainerization solution Docker\ncontainers do not use the guest\noperating system they use the host\noperating system and on top of that host\noperating system there is the docker\nengine and with the help of this Docker\nengine Docker containers are formed and\nthese containers have applications\nrunning in them the requirements for\nthose applications such as all the\nbinaries libraries Frameworks jars Etc\nare also packaged in the same container\nthere can be multiple containers running\nsimultaneously as you can see the two\ncontainers here in our example and those\ncontainers have applications running in\nthem and you don't really have to\npre-allocate any Ram to those containers\nthese containers allow a developer to\npackage an application with all its\nparts all its needs and then you can\ndeploy it as one whole package they are\nbasically lightweight alternatives to\nVirtual machines that use the host\noperating system this is basically a\ngeneral workflow of Docker so you can\nsee one way of using dock over here what\nis happening is that your developer\nwrites a code and defines an application\nrequirements or the dependencies in an\neasy to write Docker file and then this\nDocker file produces Docker images so\nwhatever dependencies are required for a\nparticular application is present inside\nthe image now as we have specified many\ntimes before what are Docker containers\nnow the docker containers we spoke so\nmuch about are basically the runtime\ninstances of these Docker images this\nparticular image is then uploaded onto\nDocker hub from where anyone can pull\nthe image and build a container now\nDocker Hub is nothing but the GitHub of\nDocker it's like a repository for Docker\nimages it contains public as well as\nprivate repositories so from the public\nrepositories you can pull your images\nand you can upload your own images as\nwell to Docker Hub and then as I\nmentioned from Docker Hub various teams\nsuch as your QA team or production team\ncan pull the images and prepare their\nown containers as you can see in the\ndiagram so this shows a great advantage\nof Docker is that whatever dependencies\nthat are there that are required for\nyour application to run are present\nthroughout the software delivery life\ncycle if you can recall the initial\nproblem that was there with VMS was\nbasically that the application worked\nfine in a development environment but\nwhen it reached the production\nenvironment it was not working properly\nso that particular problem is easily\nresolved with the help of this\nparticular workflow because you have the\nsame environment throughout the software\ndelivery life cycle be it a developer\ntesting QA or production\nnow before moving on to the next section\nlet's look at a case study about\ncontainerizing the NASA land information\nsystem framework using Docker now\ndeveloped by The hydrological Sciences\nlaboratory at NASA's Godad space flight\ncenter or gsfc the land information\nsystem or the Lis is a high performance\nsoftware framework for terrestrial\nhydrology modeling and data assimilation\nbasically the Lis enables integrating\nsatellite and ground-based observational\nproducts and advanced modeling\nalgorithms to extract land surface\nStates and fluxes now this framework was\nvery difficult for non-experts to\ninstall due to many dependencies on\nspecific versions of the software and\ncompilers this situation then created a\nsignificant barrier to entry for domain\nscientists interested in using the\nsoftware for their own Computing systems\nor in the cloud in addition the\nrequirement to support multiple runtime\nenvironments across the Allies Community\nhad created a significant burden on the\nNASA team now to overcome these\nchallenges NASA had deployed Lis using\nDocker containers which allowed\ninstalling an entire software package\nalong with dependencies within a working\nruntime environment they also used\nDocker swarm which we shall learn about\nlater to orchestrate the deployment of\nthe cluster of containers this\ninstallation that used to take weeks or\nmonths was now completed by NASA\nofficials in minutes either in the cloud\nor on premises\nnow moving on let's look at docker's\nworkflow and architecture what you see\nin front of you is the docker workflow\nnow the docker engine uses a client\nserver architecture where the docker\nengine is simply a Docker application\nthat is installed on your local machine\nthe client server architecture\ncommunicates using a rest API and the\ndocker Daemon checks the requests to\nmanage the containers so the docker\narchitecture includes a Docker client\nwhich is used to trigger Docker commands\na Docker host which runs the docker\ndemons and a Docker registry which\nstores the docker images the docker\nDaemon running with the docker host is\nresponsible for images and containers\nwe'll understand the concept of images a\nlittle later in this very section as a\npart of Docker components so to build a\nDocker image you can use the CLI or the\nclient to issue a bill to command the\ndocker Daemon which runs on the docker\nhost\nnow the docker demon will then build an\nimage based on your inputs and save it\nin the registry which can either be the\ndocker Hub or a local repository so if\nwe do not want to create an image then\nwe can just pull an image from the\ndocker Hub which would have been built\nby different users and finally if we\nhave to create a running instance of any\nDocker image we can issue a run command\nfrom the CLI or the client which will\ncreate our Docker container so this is\nbasically the overall architecture or\nthe overall functioning of the docker\narchitecture as we move forward in this\nsection things will be more clear to you\nso as you can see the heart of the\ndocker architecture is basically the\ndocker engine the docker engine is\nsimply the docker application that is\ninstalled on the host operating system\nof your host machine it works like a\nclient server application which uses a\nserver which is a type of long running\nprogram called the Daemon process the\nsecond Point here is the command line\ninterface or the client the next\ncomponent here is the rest API which is\nused for communication between the CLI\nclient and the docker daemin so now if\nthere is a Linux based OS and there is\none Docker client which can be accessed\nfrom the terminal and a Docker host\nwhich runs the docker Daemon we build\nour Docker images and run our Docker\ncontainers by passing the commands from\nthe CLI client to the docker image so\nthis was all about Docker engine and its\nworkflow now let's talk about the docker\ncomponents which you will be most\nacquainted to hearing you have your\nDocker file which builds into a Docker\nimage which you run you get a Docker\ncontainer and then you store it in a\nDocker registry\nlet's go ahead and look at all of these\ncomponents in a little depth shall we\nfirst of all you have your Docker file\nwhich is nothing but a text document\nwhich contains all of your commands that\nyou as a developer call on the command\nline to assemble an image so basically\nto create an image you'll have to write\na Docker file and then build it so\nDocker file basically has your set of\ninstructions which creates the docker\nimage next you have the docker image\nwhich can be compared to a template used\nto create a Docker container so Docker\nimages are basically the building blocks\nof a Docker container these Docker\nimages are created using the build\ncommand and these are read-only\ntemplates\nyou can then store them as I had\nmentioned before in your Docker Hub or\nyour local registry next after building\nyour Docker image what you get is a\nDocker container and these are read only\ntemplates\nyou can then go ahead and store them in\nDocker Hub or your local registry as I\nhad mentioned before Docker lets you\ncreate and share software through Docker\nimages and you also don't have to worry\nabout whether your computer can run a\nsoftware in a Docker image because a\nDocker container is always there to run\nit so in case of Docker images you can\nuse a ready-made Docker image from the\ndocker Hub or create a new image as per\nyour own requirements to run in a\ncontainer with that let's move on to the\nnext component which is a Docker\ncontainer so the docker containers are\nthe ready applications created from\nDocker images it's the running instance\nof a Docker image and this Docker\ncontainer holds the entire package\nneeded to run this Docker application so\na Docker container happens to be the\nultimate utility of Docker and hence\nthis is the part of Docker which is most\npopular and most widely used so if you\ntalk about the applications every\napplication is run inside a container so\nit is an isolated application platform\nthat contains all you need to run an\napplication built from one or more\nimages\nso finally let's move on to Docker\nregistry which is a storage component\nfor the docker images now this is where\nthe docker images are stored which could\neither be a user's local repository or a\npublic repository like the docker Hub\nwhich allows multiple users to\ncollaborate building an application even\nwith multiple teams within the same\norganization who exchange or share\ncontainers by uploading them to the\ndocker Hub it helps you control where\nyour images are being stored and\nintegrates your image storage with your\nin-house development workflow as well\nthe docker Hub as I've mentioned before\nis docker's very own cloud repository\nwhich is similar to GitHub which is kind\nof like GitHub but for Docker images\nhope you guys are with me so far with\nthis we have seen the architecture and\ncomponents of Docker so now we are going\nto talk about two other components of\nDocker Docker compose and Dockers form\nso first of all let's start with Docker\ncompose now Docker compose is a tool for\ndefining and running multi-container\nDocker applications which basically\nmeans you can run different or multiple\ncontainers as a single service the\ncontainers are still isolated but they\ncan interact with each other using a\nyaml file which is used to configure\nyour application services and then with\na single command Docker compose up you\ncan create and start all the services\nfrom your configuration a great example\nof this would be a microservice such as\na shopping app so for example you can\ntake any online retail stores app it\ncould be Amazon it could be Flipkart it\ncould be audio and the idea behind an\napp like this is that it's a\nmicroservice app which basically means\nit has multiple services in one big\napplication so all of these Services\nindividually are easier to build and\nmaintain and when one service is failing\nthe entire app is not down so a retail\napp like Amazon or myntra or Flipkart or\nany app of your choice it'll have\nmultiple services like it'll have a\nlogin account it'll have your product\ncatalog service it'll have a shopping\ncart service and a checkout service and\nthis is just the bare minimum and each\nof these Services could be scaled up or\ndown in their own container tested and\nbuilt and fixed in their own isolated\ncontainers without interfering with any\nother service in that entire application\nso using something like Docker compose\nyou can connect all of these isolated\ncontainers as a single service all right\nand the next thing I want to talk about\nis Docker swarm now Docker swarm is a\nservice which allows you to create and\nmanage a group of either physical or\nvirtual machines or nodes and schedule\ncontainers each of the nodes is a Daemon\nwhich interacts with others using the\ndocker API Dockers home is basically a\ntechnique to create and maintain a\ncluster of different Docker engines\nServices deployed in any node can be\naccessed on other nodes in the same\ncluster it allows for high availability\nof services Auto load balancing\ndecentralization of access easy\nupscaling and downscaling of deployments\nand rolling updates so basically how it\nworks is that your manager nodes know\nthe status of all the working nodes in a\ncluster your worker nodes that accept\ntasks sent from the manager node there\nis an agent assigned to every single\nnode to give its task updates to the\nmanager and finally the workers\ncommunicate with the manager using an\nAPI over the HTTP protocol and that is\nhow a Docker swarm Works basically\nDocker swarm is an orchestration\nmanagement tool that runs on Docker\napplications it helps you and users in\ncreating and deploying a cluster of\nDocker nodes each node of a Docker swarm\nis a Docker Daemon and all the docker\ndemons interact using the docker API and\neach container within the Swarm can be\ndeployed and accessed by other nodes of\nthe same cluster so if you consider an\nenvironment having Docker containers if\none of the container fails we can use\nthe Swarm to correct that failure Docker\nswarm can reschedule containers on node\nfailures\nand the Swarm node also has a backup\nfolder which we can use to restore the\ndata onto a new swarm so with that we\nhave come to an end to the workflow and\narchitecture of Docker so now I'm sure\nall of you might be eager for actually\ndoing something on Docker so let's go\nahead and install docker so here are the\nsteps to install Docker on Ubuntu on\nyour Linux systems on your Ubuntu\nsystems you will be using the command\nsudo apt install Docker dot io on your\nUbuntu systems to install Docker on your\nsystem so let's go ahead and start up\nwith the installation\ntoday I am using the Ubuntu distribution\nrunning on my Oracle VM virtualbox so\nwe're going to start out by updating so\nsudo apt update\nand this might take a little bit time so\nkindly be patient\nthis is a good practice before making\nany installations any setups on your\nmachine\nall right as you can see all my packages\nare upgraded and now we can go ahead and\ninstall Docker so to install Docker we\nare going to use the command\npseudo EPT install Docker dot IO\nand then click on y\nand there's also something which takes\nup quite a considerable amount of time\ndepending on the speed of your machine\nas well as the speed of your internet\nso on and so forth\nNow understand this is just one way of\ndoing this and this is the method I am\nmost comfortable with and that's why\nthis is the method I will be\ndemonstrating here there are two three\nother methods through which you can\ndownload Docker on your machine\nand not just in Linux you can also\ninstall Docker desktop on Windows just\nin case you do not want to use a virtual\nmachine\nand you can also use a cloud platform\nsuch as an ec2 instance\nto run all of these Docker commands that\nI shall be showing you later in this\nsession\nso now we are going to start an enable\nDocker using sudo system CDL\nokay with that we have started and\nenabled our Docker machines\nand now we are going to go ahead and\ncheck out our Docker version that's\nrunning and as you can see this is the\ndocker version and this is the docker\nbuild that we are running\nall right so moving on we are going to\nget to our Hands-On section in this\nsection we will learn how to create a\nDjango project setup using Docker and\ndeploy it on our local host for that\nremember you need to have a GitHub\naccount and Docker installed on your\nmachine just the way I showed you right\nnow we are going to build a back-end\nrest API with python and Django we're\ngoing to create a new GitHub project\nthat we are going to use to store The\nSource Code for our recipe app API\nnow this is a wonderful way to show the\nversatility of docker\nnow found this project while browsing\nthrough GitHub and I came to a\nconclusion that this was a wonderful way\nto show how eclectic how versatile is\nDocker as a tool so the first step would\ninclude initializing a new project on\nGitHub and coming back to your Linux\nmachine and navigating to where you wish\nto store your API there we are going to\ncreate a Docker file using an editor you\ncan obviously use the vi editor or Nano\neditor if you please they're using the\neditor in our working directory we are\ngoing to be creating our dock file our\nrequirements file and our Docker compose\nfile which is our yaml file and then we\nare going to run our app on the terminal\nso this is a basic breakdown of how we\nare going to create our Django project\nsetup using Docker so let's go on\nstraight to our demo machine and put all\nof this into action\nso we are going to navigate to GitHub\nand we're going to create a new public\nproject or repository on GitHub so let's\ncreate a new repository and let's call\nit\nDocker demo API app\nand the description we're just going to\nwrite demo app setup we're going to keep\nthis public and we're going to\ninitialize this with a readme file all\nright so let's go ahead and create our\nRepository so as you can see this is a\nblank repository Docker demo API app\njust the readme file there\nso here on our repository page I'm going\nto click on this green button code\nbutton and copy the URL from here from\nyour clone or download option we're\ngoing to copy this to our clipboard\nso that we can clone this particular\nrepository using our terminal I'm going\nto move on to the terminal and I'm going\nto load my terminal and navigate to the\ndirectory where I want to\nstore my app\nso maybe I'll just save it\nhere\nI'm just going to clone this repository\nto my local machine\nall right and that's done now you can go\nahead and change your directory to the\nRepository\nso now I'm going to use the command LS\nto see if my repository has been cloned\nyes it has been cloned you can see the\ndocker demo API app clone right here on\nmy local machine so I'm going to change\nmy directory\nto this repository I just created by\ntyping the command CD Docker demo API\napp now what I'm going to do is I'm\ngoing to open up this project in the\neditor like I had mentioned you can use\nany other editor you can use the vi\neditor the Nano editor any editor that\nyou're comfortable with\nso now I'm going to clear all of this\nand I'm gonna use the Nano Editor to\ncreate the docker file first\nso just Nano and Docker file there's no\nspaces between Docker and file\nand I am going to put in this code over\nhere\nall right so this is my Docker file\nso the first line of the docker file is\nthe image that you're going to inherit\nyour Docker file from with Docker you\ncan basically build images on top of\nother images the benefit of this is that\nyou can find an image that has pretty\nmuch everything that you need for your\nproject so you can just add customized\nbits that you need just for your\nspecifications so we are going to create\nour Docker file from python 3.7 Alpine\nimage\nnow you can find this if you head over\nto the docker Hub you can find a list of\navailable images that you can use to\nbase your project off of if you search\nfor python\nit'll take you to a list of items\nwhere you can choose this one\nso we're gonna use the 3.7 Alpine image\nso what it is is that it's basically a\nlightweight version of docker\nand that's what Alpine means and it runs\npython 3.7\nand the next line is optional it's\nusually a maintainer line but it's\nuseful just to know who is maintaining\nthe project\nso I'm going to leave that one out but\nyou can go ahead and put in your\nmaintenance line you can put your name\nor your company's name whatever name you\nbasically use to keep track to show that\nwho is maintaining this Docker image\nnext we are going to set the python\nunbuffered environment variable the way\nyou set unbuffered environment variable\nnow the way you set an environment\nvariable in a Docker build file is that\nyou type EnV and then the environment\nvariable that you want to set we are\ngoing to set one called Python and it's\ngot to be in all capitals unbuffered and\nthen we're going to set it to one so\nwhat this does is that it tells python\nto run in the unbuffered mode which is\nthe recommended mode when running python\nwithin Docker containers the reason for\nthis is that it doesn't allow python to\nbuffer the outputs it just prints them\ndirectly and then avoid some\ncomplications and things like that so\nwhen you're running your python\napplication we're going to install our\ndependencies we are going to store our\ndependencies in a\nrequirements.txt list or file which we\nare going to create in a moment so that\nwhat we need to do here is we need to\ncopy our requirements.txt file and what\nthis does is it says copy from the\ndirectory adjacent to the docker file\ncopy so we're going to copy the\nrequirements.txt file further we're\ngoing to copy it on the docker image\nwhich is what this forward slash\nrequirement txt file means\nnext we are going to run pip install R\nforward slash\nrequirements.txt so what this does is\nthat it takes the requirements that we\nhave just copied and installs it using\npip into your Docker image next we're\ngoing to make a directory within our\nDocker image that we can use to store\nour application source code so you have\nyour run mkdir forward slash app all in\nlowercase and below that we are going to\ntype work the forward slash app and\nbelow that we are going to type copy dot\nslash app space slash app what this does\nis it creates an empty folder in our\nDocker image called forward slash app at\nthis location and then it switches to\nthat as the default directory so any\napplication we've run using our Docker\ncontainer will run starting from this\nparticular location unless we specify\notherwise of course next what it does is\nthat it copies from our local machine\nthe app folder to the app folder that we\nhave just created on our image this\nallows us to take the code that we\ncreated in our project here and copy it\nto our Docker image\nso here we have run add user hyphen\ncapital D and user and finally we are\ngoing to switch to that user by typing\nuser now this might be a little\nconfusing because I've added the\nusername user for our user but what this\ncommand means is that it says add user\nwhich creates a user user hyphen D says\ncreate a user that is going to be used\nfor running applications only so not for\nbasically having a home directory that\nsomeone will log in it's going to be\nused simply to run up processes from our\nparticular project\nfinally this user switches Docker to the\nuser that we've just created the reason\nwe do this is for security purposes if\nyou don't do this then the image will\nrun our application using the root\naccount which is not recommended because\nthat means if someone compromises our\napplication they can have the root\naccess to the whole image and they can\ngo ahead and do other malicious things\nwhereas if you create a separate user\njust for the application then that kind\nof limits the scope that the attacker\nwould have within a Docker container all\nright so we can go ahead and write out\nwe can save this file and move ahead to\ncreating our requirements file\nso this is what your requirements.txt\nfile will look like it's a fairly it's\njust two lines\nin the first line here we are installing\nDjango we are using version 2.2.4 which\nis the latest table version that I could\nfind and that's the version that we are\ngoing to use for the project and then\ntype Django more than equals to 2.2.4\nso basically what it says is that\ninstall Django that is equal to or\nhigher than this particular version and\nwe do this to take the minor version\nwhich is the last number and make sure\nthat we install the latest available\nversion because typically it's the\nversion that has the security features\nand security fixes and things like that\nbut typically doesn't have breaking\nchanges so we can be confident that our\napplication when we rebuild our Docker\nimage will have the latest security\npatches\neven if it does not have the latest\nversion\nokay in the next line we are going to\ninstall the Django rest framework\nso we're using\n3.9.0\nand in the same way which we did with\nDjango we are going to make the install\none less than\n3.10.0 to get the latest version of 3.9\nwhich is whatever is the latest minor\nversion at the time we build our project\nso now we're going to go ahead and save\nthis file as well\nnow what we're going to do is we're\ngoing to go ahead and create\nan empty directory called\napp here for our Docker file to call\nbecause when our Docker file will run\nand it's going to ask for an app folder\nwe're not going to have one then we're\ngoing to face issues\nso now if I do an LS here you see we\nhave a Docker file we have our\nrequirements file and we have our app\nfolder\nNow understand why this is required for\nour Docker file for us to build it now\nso now if you try to copy it without the\napp folder actually existing it will\ngive you an error so now we can go ahead\nand build our Docker image so we are\nalready at a terminal if you're not on\nyour terminal you can load up your\nterminal and if you are on Windows it'll\nbe your command prompt let's make sure\nthat you navigate to your project folder\nwhich I am already at\nand then I'm going to type Docker build\nDot now what that's going to do is that\nit's going to build whichever Docker\nfile is in the root of our project that\nwe are currently in\nthe reason we call a Docker file in the\nfirst place is because it's the standard\nconvention that Docker uses to identify\nthe docker file within our project\nso we're going to wait for it to\ncomplete and it should be fairly quick\nbecause we are using an Alpine image\nit's a very lightweight minimal image\nthat runs python that's how we create a\nDocker file for our project and go ahead\nand create our Docker compose\nconfiguration for our project\nso we're going to use Docker compose as\na tool to allow us to run our Docker\nimage easily from our project location\nso it allows us to easily manage the\ndifferent services that make up for our\nproject so for example one service might\nbe the python application that we run\nanother service might be a database for\nexample\nso let's go ahead and create the docker\ncompose file for our project\nso Nano Docker compose dot yaml or yml\nso this is a yaml file that contains the\nconfiguration for all services that make\nup our project the first line of the\ndocker compose configuration file is the\nversion of Docker compose that we are\ngoing to be writing our file for so\nversion colon and three next we Define\nthe services that make up our\napplication right now we only need one\nservice for a python Django application\nso Services colon and in the line below\nyou're going to type app this is the\nname of our service so we are going to\ncall it out and then we are going to\ntype build and then context code on\ncontext so what this says is that we are\ngoing to have a service called app and\nthe build section of the configuration\nwe are going to set the context to dot\nwhich is our current directory that we\nare running Docker compose from next\nwe're going to type the board configure\nduration so we're going to type them in\nopen speech marks 8080 or is our host to\nport 8080 on our image so we're going to\ntype that and then we're going to add a\nvolume the volume allows us to get the\nupdates that we make to our project into\nour Docker image in real time so it\nbasically Maps a volume from our local\nmachine here into our Docker container\nwhile we'll be running our application\nnow this means whenever you change a\nfile or you change something in the\nproject you will automatically update it\nin the container now the good part is\nyou don't have to restart Docker to get\nthe changes into effect\nso then you have a DOT slash app\nforward slash app\nso what this does is it Maps the app\ndirectory which we have here in our\nproject\nand this it maps to the app directory in\nour Docker image then you have the\ncommand to run your application in your\nDocker container\nso just make sure that the indentation\nis one indent from where your command\nstarts and then you type the command so\nwe're going to use to run our\napplication be sh hyphen see this means\nwe are going to run the command using\nthe Shell\nthe python manage py run server then\nwe're going to run the server on our\nlocal host at port 8080 so this will run\nthe Django development server available\non all IP addresses that run on the\ndocker container\nand it's going to run on port 8080 which\nis going to be mapped through the pause\nconfiguration on our local machine so we\ncan run our application\nso again we are going to move on to our\nterminal and build the docker compose\nfile and what this does is it will build\nour image using the docker compose\nconfiguration and this should not take\ntoo much time so if we're going to build\nour Docker file\nso now we're going to add sudo\nDocker compose\nbuild\nand as you can see it's successfully\nbuilt\nclear it out\nso now we're going to use Docker compose\nto create the project files for our\napplication and for that you can either\nlog in as super user or just type sudo\nso Django\nadmin dot Pi we're gonna start project\nnow after running the command you will\nrealize that if you go into your empty\napp folder which is the folder that you\ncreated initially\nand list out it's not empty anymore it\nhas another app folder in it which\ncontains all of our app setup I will\nshow you\nthere you go you have these files one\ntwo three four five python files\nwhich is basically your Django apps\nentire setup and all of this Docker\ncreated and set it up for you so a\nTeensy little detail let's just\nopen up our\nsettings.py file and we're gonna go down\nto allowed hosts and just in case it's\nempty between the close brackets you can\ngo ahead and add your local host or put\nin the asterisk which allows all hosts\nall right so I'm just gonna do that\nand then I'm gonna go back\nand now all we have to do is deploy the\napplication through your terminal\nso we're gonna go sudo\nDocker compose\nup\nso now as you can see your Django\napplication is up and running\nand all of this was possible because of\nDocker\n[Music]\nwith the ever-changing requirements of\nmodern software development it is known\nthat kubernetes is one system that will\nfulfill these needs if you are someone\nwho wants to get started with kubernetes\nyou're definitely in the right place let\nus start off by understanding what it\nreally is with the help of a simple\nexample imagine you're building a web\napplication so within this web\napplication the structure might be\nmonolithic it might compromise several\nmodules components or even layers but\nexternally it is a single web\napplication or you could also say it is\na single service despite having\ndifferent modules the application is\nbuilt and deployed as one service for\nall platform that is desktop personal\ncomputer mobile Etc within a single\ncontainer that is a virtual machine\nlet us assume the web application grows\nover time and becomes large it is now\nextremely challenging to make changes\nover the code accurately also the size\nof the application can slow down the\nstartup time moving on what if you want\nto add new updates to this web\napplication you must redeploy the entire\napplication as one and during this\nprocess in case you stop and try to\nrestart the service the customers on\nyour website will not be able to access\nanything for that period of time which\ncould eventually lead to a potential\nloss of money also bugs in any one of\nthe components can bring down the entire\nprocess and since all the components of\nthe application are identical bugs can\ndefinitely impact the availability of\nthe application\nnow what if you have a sudden spike in\ntraffic and have to serve 20 times the\nnumber of your usual customers in such a\nsituation you have to very quickly\ndeploy new servers which takes a lot of\neffort later when traffic dies down to a\nnormal level you now have 20 times the\nnumber of your usual servers it can also\nbe challenging to scale when different\nmodules have conflicting updates or\nresource requirements so instead of\ncreating a monolithic application we can\nDefine each component as a separate\nLoosely coupled service and then we\ncould virtualize each of these services\nusing a Docker container not only can\nthe application start easily but the\nservices can also be deployed\nindependently with Docker containers we\ncan easily scale any number of instances\nup and down according to the\napplications requirements but this is\ndefinitely easy to manage when we're\ndealing with just three or four\ncontainers now let's say we had to deal\nwith thousand such containers how do we\nreally keep track of the containers that\nare healthy and the ones that are not\norchestrating and managing these\ncontainers at the same time can be an\nextremely tedious task and this led to\nthe need for container orchestration\ntools so this is where kubernetes comes\ninto the picture kubernetes was\noriginally designed by Google and is now\nmaintained by the cloud native Computing\nfoundation with kubernetes you package\nyour website files as containers or pods\nwhich you can run on any instance in\nyour kubernetes cluster as you can see\npods are running on nodes which are\nphysical systems having Hardware\ncomponents that are a part of the\nkubernetes cluster this implies that\nevery service that you create runs on\nseparate containers and this will allow\nyou to work in manage services\nindependently\npods can be running on any available\nnode in the cluster which has enough\nresources for a pod to work in simple\nwords kubernetes is an open source\nsystem for automating deployment rolling\nupdates scaling services and managing\ncontainerized applications kubernetes\nworks with Amazon ec2 Rackspace gcp IBM\nCloud Etc\nalso hyper growth companies like GitHub\nreworks Cloud boost Walmart are becoming\nacclimated to building shipping and\nmanaging containers via kubernetes an\naverage anyone with kubernetes knowledge\ncan expect to earn between 5 to 6 lakhs\nper annum in India whereas they can\nexpect an average salary of one forty\nthousand dollars per annum in USA as the\nFortune 500 are used in kubernetes the\ndemand for expertise in this field is\nrapidly increasing which in turn\nrequires it professionals who can work\non the store so what are you waiting for\nbegin your journey with edureka's\ninteractive kubernetes certification\ntraining that is curated to help you\nlearn how to set up your own kubernetes\ncluster configure a networking between\npods and secure the cluster against\nunauthorized access\nforeign\nwhy do we need kubernetes now to\nunderstand why do we need kubernetes\nlet's understand what are the benefits\nand drawbacks of containers now first of\nall containers are good they are\namazingly good right any container for\nthat matter of fact a Linux container or\na Docker container or even a rocket\ncontainer right they all do one thing\nthey package your application and\nisolate it from everything else right\nthey isolate the application from the\nhost mainly and this makes the container\nfast reliable efficient lightweight and\nscalable now hold the thought yes\ncontainers are scalable but then there's\na problem that comes with that and this\nis what is the resultant of the need for\nkubernetes even though containers are\nscalable they are not very easily\nscalable okay so let's look at it this\nway you have one container you might\nwant to probably scale it up to two\ncontainers or three containers well it's\npossible right it's going to take a\nlittle bit of manual effort but yeah you\ncan scale it up you're not going to have\na problem but then look at a real world\nscenario where you might want to scale\nup to like 50 to 100 containers then in\nthat case what happens I mean after\nscaling up what do you do you have to\nmanage those containers right you have\nto make sure that they're all working\nthey're all active and they're not\ntalking to each other because if they're\nnot talking to each other then there's\nno point of scaling up itself because in\nthat case the servers would not be able\nto handle the roads if they're not able\nto talk to each other correct so it's\nreally important that they are\nmanageable when they are scaled up and\nnow let's talk about this point is it\nreally tough to scale up containers well\nthe answer for that might be no it might\nnot be tough it's pretty easy to scale\nup containers but the problem is what\nhappens after that okay uh once you\nscale up containers you'll have a lot of\nproblems like I told you the containers\nfirst of all should have to communicate\nwith each other because there are so\nmany in number and they work together to\nbasically host the service right the\napplication and if they are not working\ntogether and talking together then the\napplication is not hosted and scaling up\nas a waste so that's the number one\nreason and the next is that the\ncontainers have to be deployed\nappropriately and they have to also be\nmanaged they have to be deployed\nappropriately because you cannot have\nthe containers deployed in just random\nplaces you have to deploy them in the\nright places you cannot have one\ncontainer in one particular cloud and\nthe other one somewhere else so that\nwould have a lot of complications well\nof course it's possible but yeah it\nwould lead to a lot of complications\ninternally you want to avoid all that so\nyou have to have one place where\neverything is deployed appropriately and\nyou have to make sure that the IP\naddresses are set everywhere and the\nport numbers are open for the containers\nto talk to each other and all these\nthings right so these are the two other\npoints the next point or the next\nproblem with scaling up is that auto\nscaling is never a functionality over\nhere okay and this is one of the things\nwhich is the biggest benefit with\nkubernetes the problem technically is\nthere's no Auto scaling functionality\nokay there's no concept of that at all\nand you may ask at this point of time\nwhy do we even need Auto scaling okay so\nlet me explain the need for auto scaling\nwith an example so let's say that you\nare an e-comce portal okay something\nlike an Amazon or a Flipkart and let's\nsay that you have decent amount of\ntraffic on the weekdays but on the\nweekends you have a spike in traffic\nprobably you have like 4X or 5x the\nusual traffic and in that case what\nhappens is maybe your servers are good\nenough to handle the requests coming in\non weekdays right but the requests that\ncome on the weekends right from the\nincreased traffic that cannot be\nserviced by your servers right maybe\nit's too much for your servers to handle\nthe load and maybe in the short term\nit's fine maybe once or twice you can\nsurvive but they will definitely come a\ntime when your server will start\ncrashing because it cannot handle that\nmany requests per second or permanent\nand if you want to really avoid this\nproblem what do you do you have to scale\nup and now would you idly keep scaling\nup every weekend and scaling down after\nthe weekend right I mean technically is\nit possible will you be buying your\nservers and then setting it up and every\nFriday would you be again buying new\nservers setting up your infrastructure\nand then the moment your weekday starts\nwould you just destroy all your servers\nwhatever you built would that would you\nbe doing no right obviously that's a\npretty tedious task so that's where\nsomething like kubernetes comes in and\nwhat kubernetes does is it keeps\nanalyzing your traffic and the load\nthat's being used by the container and\nas and when the traffic is reaching the\nthreshold Auto scaling happens when if\nthe servers have a lot of traffic and if\nit needs you know more such servers for\nhandling requests then it starts scaling\nup the containers on its own there's no\nmanual intervention needed at all so\nthat's one benefit it with kubernetes\nand one traditional problem that we have\nwith scaling up of containers okay and\nthen yeah the one last problem that we\nhave is the distribution of traffic that\nis still challenging without something\nthat can manage your containers I mean\nyou have so many containers but how will\nthe traffic be distributed load\nbalancing how does that happen you just\nhave containers right you have for three\ncontainers how does the load balancing\nhappen so all these are questions we\nshould really consider because\ncontainerization is all good and cool it\nwas much better than VMS yes\ncontainerization it was basically a\nconcept which was sold on the basis of\nscaling up right we said that VMS cannot\nbe scaled up easily so we told use\ncontainers and with containers you can\neasily scale up so that was the whole\nreason we basically sold containers with\nthe tagline of scaling up but in today's\nworld our demand is ever more that even\nthe regular containers cannot be enough\nso scaling up is so much or in so detail\nthat we need something else to manage\nyour containers correct do we agree\nthere we need something right and that\nis exactly what kubernetes is so\nkubernetes is a container management\ntool all right so this is open source\nand this basically automates your\ncontainer deployment your container\nscaling and descaling and your container\nload balancing the benefit with this is\nthat it works brilliantly with all the\ncloud vendors with all your public Cloud\nvendors or your hybrid Cloud vendors and\nit also works on premises so that is one\nbig selling point of kubernetes right\nand if I should give more information\nabout kubernetes then let me tell you\nthat this was a Google developed product\nokay it's basically a brainchild of\nGoogle and that pretty much is the end\nof the story for every other competitor\nout there because the community that\nGoogle brings in along with it is going\nto be huge or basically the Head Start\nthat kubernetes would get because of\nbeing a Google brain child is humongous\nand that is one of the reasons why\nkubernetes is one of the best container\nmanagement tools in the market period\nand given that kubernetes is a Google\nproduct they have written the whole\nproduct on go language and of course now\nGoogle has contributed this whole\nkubernetes project to the the cncf which\nis nothing but the cloud native\nComputing Foundation or simply Cloud\nnative Foundation right you can just\ncall them either that and they have\ndonated their open source project to\nthem and if I have to just summarize\nwhat kubernetes is you can just think of\nit like this it can group like a number\nof containers into one logical unit for\nmanaging and deploying an application or\na particular service so that's a very\nsimple definition of what kubernetes is\nit can be easily used for deploying your\napplication of course it's going to be\nDocker containers which you will be\ndeploying but since you will be using a\nlot of Docker containers as part of your\nproduction you will also have to use\nkubernetes which will be managing your\nmultiple Docker containers right so this\nis the role it plays in terms of\ndeployment and scaling up scaling down\nis primarily the game of kubernetes from\nyour existing architecture it can scale\nup to any number you want it can scale\ndown anytime and the best part is the\nscaling can also be set to be automatic\nlike I just explained some time back\nright you can make kubernetes kubernetes\nwould analyze the traffic and then\nfigure out if the scaling up needs to be\ndone or the scaling down can be done and\nall those things and of course the most\nimportant part load balancing right I\nmean what good is your container or\ngroup of containers if load balancing\ncannot be enabled right so kubernetes\ndoes that also and these are some of the\npoints on based on which kubernetes is\nbuilt so I'm pretty sure you would have\ngot a good understanding of what\nkubernetes is by now right a brief idea\nat least if you have any doubts then I\nwould request you to put your comments\nor queries on the comment section below\nall right my edrica team will get back\nto you at the earliest so moving forward\nlet's look at the features of kubernetes\nOkay so we've seen what exactly\nkubernetes is how it uses Docker\ncontainers or other containers in\ngeneral but now let's see some of the\nselling points of kubernetes or why it's\na must for you let's start off with\nautomatic bin packing when we say\nautomatic bin packing it's basically\nthat kubernetes packages your\napplication and it automatically places\ncontainers based on their requirements\nand the resources that are available so\nthat's the number one advantage the\nsecond thing service Discovery and load\nbalancing there is no need to worry I\nmean if uh you know if you're if you're\ngoing to use kubernetes then you don't\nhave to worry about networking and\ncommunication because kubernetes will\njust automatically assign containers\ntheir own IP addresses and probably a\nsingle DNS name for a set of containers\nwhich are performing a logical operation\nand of course there will be load\nbalancing across them so you don't have\nto worry about all these things so\nthat's why they say that there is a\nservice Discovery and load balancing\nwith kubernetes and the short feature of\nkubernetes is that storage orchestration\nwith kubernetes you can automatically\nMount your storage system of your choice\nyou can choose that to be either a local\nstorage or maybe on a public cloud\nprovider such as a gcp or AWS or even a\nnetwork storage system such as NFS or\nother things right so that was the\nfeature number three now feature number\nfour self healing now this is one of my\nfavorite parts of kubernetes actually\nnot just kubernetes even with respect to\nDocker swarm I really like this part of\nself-healing what self-healing is all\nabout is that whenever kubernetes\nrealizes that one of your containers has\nfailed then it will restart that\ncontainer on its own right it will\ncreate a new container in place of this\ncrashed one and in case your node itself\nfails then what kubernetes would do in\nthat case is whatever containers were\nrunning in that failed node those\ncontainers would be started in another\nnode right of course you would have to\nhave more nodes in that cluster if\nthere's another node in the cluster\ndefinitely room would be made for this\nfailed container to start a service so\nthat happens so the next features batch\nexecution so when we say batch execution\nit's that along with Services kubernetes\ncan also manage your batch and cie\nworkloads which is more of a devops role\nright so as part of your cie workloads\nkubernetes can replace your containers\nwhich fail and it can restart and\nrestore the original state that is what\nis possible with kubernetes and secret\nand configuration management that is\nanother big feature with kubernetes and\nthat is the concept of where you can\ndeploy and update your secrets and\napplication configuration without having\nto rebuild your entire image and without\nhaving to expose your secrets in your\nstack configuration or anything right so\nif you want to deploy and update your\nsecrets only that can be done so it's\nnot available with all the other tools\nright so kubernetes is one that does\nthat you don't have to restart\neverything and rebuild your entire\ncontainer that's one benefit and then we\nhave horizontal scaling which of course\nyou people might aware of already you\ncan scale your applications up and down\neasily with a simple command the simple\ncommand can be run on the CLI or you can\neasily do it on your GUI which is your\ndashboard your kubernetes dashboard or\nAuto scaling is possible Right based on\nthe CPU usage your containers would\nautomatically be scaled up or scaled\ndown so that's one more feature and the\nfinal feature that we have is automatic\nrollbacks and rollouts now kubernetes\nwhat it does is whenever there's an\nupdate your application which you want\nto release kubernetes progressively\nrolls out these changes and updates to\nthe application or its configurations by\njust ensuring that one instance after\nthe other is send these updates and it\nmakes sure that not all instances are\nupdated at the same time thus ensuring\nthat yes there is high availability and\neven if something goes wrong then the\ncommunities will roll back that change\nfor you so all these things are enabled\nand these are the features with\nkubernetes so if you're really\nconsidering a solution for your\ncontainers for managing your containers\nthen kubernetes should be your solution\nright so that should be your answer so\nthat is about the various features of\nkubernetes now moving forward here let's\ntalk about few of the myths surrounding\nkubernetes and we are doing this because\na lot of people have confusion with\nrespect to what exactly it is so people\nhave this misunderstanding that\nkubernetes is like Docker which is a\ncontainerization platform right that's\nwhat people think and that is not true\nso this kind of a confusion is what I\nintend to solve in the upcoming slides I\nwill talk about what exactly kubernetes\nis and what kubernetes is not let me\nstart with what it's not now the first\nthing is that kubernetes is not to be\ncompared with Docker because it's not\nthe right set of parameters which you\nare comparing them against Docker is a\ncontainerization platform and kubernetes\nis a container management platform which\nmeans that once you have containerized\nyour application with the help of Docker\ncontainers or Linux containers and when\nyou are scaling up these containers to a\nbig number like 50 or 100 that's where\nkubernetes would come in when you have\nlike multiple containers which need to\nbe managed that's where kubernetes can\ncome in and effectively do it you can\nspecify the configurations and\nkubernetes would make sure that at all\ntimes these conditions are satisfied so\nthat's what kubernetes is you can tell\nin your configurations that at all time\nI want these many containers running I\nwant these many pods running and so many\nother needs right you can specify much\nmore than that and whatever you do at\nall times your cluster master or your\nkubernetes master would ensure that this\ncondition is satisfied so that is what\nexactly kubernetes is but that does not\nmean that Docker does not solve this\npurpose so Docker also have their own\nplugin I wouldn't call it a plug-in uh\nit's actually another tool of theirs so\nthere's something called as Docker swarm\nand Docker swarm does a similar thing it\ndoes contain a management like Mass\ncontainer management so similar to what\nkubernetes does when you have like 50 to\n100 containers Docker swarm would help\nyou in managing those containers but if\nyou look at who is prevailing in the\nmarket today I would say it's kubernetes\nbecause kubernetes came in first and the\nmoment they came in they were backed by\nGoogle and they had this huge Community\nwhich they just swept along with them so\nthey have like hardly left any in any\nmarket for Docker and for Docker swarm\nbut that does not mean that they are\nbetter than Docker because they are at\nthe end of the day using Docker so\nkubernetes is only as good as what\nDocker is if there are no Docker\ncontainers then there's no need for\nkubernetes in the first place so\nkubernetes and Docker they go hand in\nhand okay so that is the point you have\nto note and I think that would have also\nexplained the point that kubernetes is\nnot for container using applications\nright and the last thing is that\nkubernetes is not for applications with\na simple architecture okay if your\narchitecture if your applications\narchitecture is pretty complex then you\ncan probably use kubernetes to uncomplex\nthat architecture okay but if you're\nhaving a very simple one in the first\nplace then using kubernetes would not\nserve you any good and it could probably\nmake it a little more complicated than\nwhat it already is right so this is what\nkubernetes is not now speaking of what\nexactly kubernetes is the first point is\nkubernetes is robust and reliable now\nwhen I say robust and reliable I'm\nreferring to the fact that the cluster\nthat is created the kubernetes cluster\nright this is very strong it's very\nrigid and it's not going to be broken\neasily the reason being the\nconfigurations which you specify right\nat any point of time if any container\nfails a new container would come up\nright or that whole container would be\nrestarted one of the things will\ndefinitely happen if your node fails\nthen the containers which are running in\na particular node they would start\nrunning in a different load right so\nthat's why it's reliable and it's strong\nbecause at any point of time your\ncluster would be at full force and at\nany time if it's not happening then you\nwould be able to see that something's\nwrong and you have to troubleshoot your\nnode and then everything would be fine\nso kubernetes would do everything\npossible and it pretty much does\neverything possible to let us know that\nthe problem is not at its end and it's\ngiving the exact result that we want\nthat's what kubernetes are doing and uh\nthe next thing is that kubernetes\nactually is the best solution for\nscaling up containers at least in\ntoday's market because the two biggest\nplayers in this market are Docker swarm\nand kubernetes and Docker swarm is not\nreally the better one here because they\ncame in a little late even though Docker\nwas there from the beginning kubernetes\ncame after that but Docker swarm which\nwe are talking about came in somewhere\naround 2016 or 2017 right but kubernetes\ncame somewhere around 2015 and they had\na very good Head Start they were the\nfirst ones to do this and their backing\nby Google is just icing on the cake\nbecause whatever problem you have with\nrespect to Containers if you just go up\nand if you put your error there then you\nwill have a lot of people on github.com\nand GitHub queries and then on stack\nOverflow who will be resolving those\nerrors right so that's the kind of\nMarket they have so it's backed by a\nreally huge Community that's what\nkubernetes is and to conclude this slide\nkubernetes is a container orchestration\nplatform and nothing else all right so I\nthink these two slides would have given\nyou more information and more clarity\nwith respect to what kubernetes is and\nhow different it is from Docker and\nDocker swarm right if you guys still\nhave any doubts then I would request you\nto put your comments in this comment\nsection below and my team will get back\nto you at the earliest okay so now\nmoving on uh let's go to the next topic\nwhere we will compare kubernetes with\nDocker swarm and we are comparing with\nDocker swarm because we cannot compare\nDocker and kubernetes head-on okay so\nthat is what you have to understand if\nyou are this person over here if you are\nSam who is wondering which is the right\ncomparison then let me reassure you that\nthe difference can only be between\nkubernetes and Docker swamp Okay so\nlet's go ahead and see what the\ndifference is actually let's start off\nwith your installation and configuration\nokay so that's the first parameter we'll\nuse to uh compare these two and over\nhere Docker swarm comes out on top\nbecause Docker is a little easier you\nhave around two or three commands which\nwill help you have your cluster up and\nrunning that includes the node joining\nthe cluster right but with kubernetes\nit's way more complicated than Docker\nswarm right so you have like close to 10\nto 11 commands which you have to execute\nand then there's a certain pattern you\nhave to follow to ensure that there are\nno errors right yes and that's why it's\ntime consuming and that's why it's\ncomplicated but once your cluster is\nready that time kubernetes is the winner\nbecause the flexibility the rigidness\nand the robustness that kubernetes gives\nyou cannot be offered by Docker swarm\nyes Docker swarm is faster but yes not\nas good as kubernetes when it comes to\nyour actual working and and speaking of\nthe GUI once you have set up your\ncluster or you can use a GUI with\nkubernetes for deploying your\napplications right so you don't need to\nalways use your CLI you have a dashboard\nwhich comes up and the dashboard if you\ngive it admin privileges then you can\nuse it you can deploy your application\nfrom the dashboard itself everything\njust drag and drop click functionality\nright with just click functionality you\ncan do that the same is not the case\nwith Docker swamp you have no GUI in\nDocker swamp Okay period so Docker swarm\nis not the winner over here it's\nkubernetes and yes going to the third\nparameter scalability so people again\nhave a bad misconception that kubernetes\nis better it is the solution for scaling\nup and it is better and faster than\nDocker swarm well it could be better but\nyes it's not faster than Docker swarm uh\neven if you want to scale up right\nthere's a report where I recently read\nthat uh the scaling up in Docker swarm\nis almost five times faster than the\nscaling up with kubernetes so that is\nthe difference but yes once your scaling\nup is done after that your cluster's\nstrength with kubernetes is going to be\nmuch stronger than your Docker swarm\ncluster strength that's again because of\nthe various configurations that should\nhave been specified by then that is the\nthing now moving on to the next\nparameter we have is uh load balancing\nrequires manual service configuration\nokay this is in case of kubernetes and\nyes this could be shortfall but with\nDocker swarm there is inbuilt load\nbalancing techniques which you don't\nneed to worry about okay even the load\nbalancing which requires manual effort\nin case of kubernetes is not too much\nthere are times when you have to\nmanually specify what are your\nconfigurations you have to make a few\nchanges but yes it's not as much as what\nyou're thinking and speaking of updates\nand rollbacks what kubernetes does is it\ndoes the process scheduling to maintain\nthe services while updating okay uh yeah\nthat's very similar to how it works with\nDocker swarm wherein you have like\nProgressive updates and service Health\nmonitoring happens throughout the update\nbut the difference is when something\ngoes wrong kubernetes goes that extra\nmile of doing a rollback and putting you\nback to the previous state right before\nthe update was launched so that is the\nthing with kubernetes and the next\nparameter we are comparing those two\nupon is data volumes so data volumes in\nkubernetes can be shared with other\ncontainers but only within the same pod\nso we have a concept called pods in\nkubernetes okay now pod is nothing but\nsomething which groups related\ncontainers right a logical grouping of\ncontainers together so that is a part\nand whichever containers are there\ninside this pod they can have a shared\nvolume okay like storage volume but in\ncase of Docker swarm you don't have the\nconcept of power at all so the shared\nvolumes can be between any other\ncontainer there is no restriction with\nrespect to that and dog as one and then\nfinally we have this parameter called\nlogging and monitoring so when it comes\nto logging and monitoring kubernetes\nprovides inbuilt tools for this purpose\nokay but with Docker swamp you have to\ninstall third-party tools if you want to\ndo logging and monitoring so that is the\nfallback with Docker swamp because\nlogging is really important one because\nyou will know what the problem is you'll\nknow which container failed what have\nhappen that is exactly the error right\nso logs would help you give that answer\nand monitoring is important because you\nhave to always keep a check on your\nnodes right so as the master of the\ncluster it's very important that there's\nmonitoring and that's where kubernetes\nhas a slight advantage over Docker sperm\nokay so that's my take on the difference\nbetween kubernetes and Docker swarm and\nI would also love to hear what's your\ntake on this right I would like to know\nif you would use kubernetes or Docker\nswarm and I would also know why if you\nprefer Simplicity or if you prefer\nstability that choice could be yours and\nit's something that's arguable right\nit's a debatable topic so I would like\nto hear what are your thoughts so please\ndrop in your comments at the bottom we\nhave a comment section right our videos\nso put it right there and probably in\none of our future videos we will discuss\nabout that but before I finish this\ntopic there is this one slide I want to\nshow you which is about the statistics\nso this stat I picked it up from this\nplatform line which is nothing but a\ncompany that that writes about tech okay\nand what they've said is that the number\nof news articles that were produced\nright in that one particular year had 90\nof those covered on kubernetes compared\nto the 10 on Docker swamp amazing right\nthat's a big difference that means for\nevery one blog written or for every one\narticle written on Docker swarm there\nare nine different articles written on\nkubernetes and similarly for web\nsearches for web searches kubernetes is\n90 compared to Docker swarms 10 and\nPublications GitHub Stars the number of\ncomments on GitHub all these things are\nclearly won by kubernetes everywhere so\nkubernetes is the one that's dominating\nthis market and that's pretty visible\nfrom this stat also right so uh I think\nthat pretty much brings an end to this\nparticular topic now moving forward let\nme show you a use case let me talk about\nhow this game this amazing game called\nPokemon go was powered with the help of\nkubernetes I'm pretty sure you all know\nwhat it is right you guys know Pokemon\ngo it's the very famous game and it was\nactually the best Game of the Year 2017\nand the main reason for that being the\nbest is because of kubernetes and let me\ntell you why but before I tell you why\nthere are a few things which I want to\njust talk about I'll give you a overview\nof what Pokemon go is and let me talk\nabout a few key stats so Pokemon go is\nan augmented reality game developed by\nNiantic for your Android and for iOS\ndevices okay and those key stats read\nthat they've had like 500 million plus\ndownloads overall and 20 million plus\ndaily active users now that is massive\ndaily if you're having like 20 million\nusers plus then you have achieved an\namazing thing so that's how good this\ngame is okay and then this game was\nactually initially launched only in\nNorth America Australia New Zealand and\nI'm aware of this fact because I'm based\nout of India and I did not get access to\nthis game because the moment news got\nout that we have a game like this I\nstarted downloading it but I couldn't\nreally find any link or I couldn't\ndownload it at all so they launched it\nonly in these kind trees but what they\nfaced right in spite of just releasing\nit in these three countries they had\nlike a major problem and that problem is\nwhat I'm going to talk about in the next\nslide right so my use case is based on\nthat very fact that in spite of\nlaunching it only in these three\ncountries or in probably North America\nand then in Australia and New Zealand\nthey could have had a meltdown but\nrather with the help of kubernetes they\nused that same problem as the basis for\ntheir success so that's what happened\nnow let that be assessments and uh\nbefore I get to that let me just finish\nthis slide one amazing thing about\nPokemon go is that it has inspired users\nto walk over 5.4 billion miles an hour\nokay yes do the math 5.4 billion miles\nin one year that's again a very big\nnumber and it says that it has surpassed\nengineering Expectations by 50 times now\nthis last line is not with respect to\nthe Pokemon Go the game but it is with\nrespect to the back end and the use of\nkubernetes to achieve whatever was\nneeded okay so I think I've spent enough\ntime over here let me go ahead and talk\nabout the most interesting part and tell\nyou how the backend architecture of\nPokemon go was okay so you have a\nPokemon go container which had two\nprimary components one is your Google\nbig table which is your main database\nwhere everything is going in and coming\nout and then you have your programs\nwhich is run on your java Cloud right so\nthese two things are what is running\nyour game mapreduce and cloud data flow\nor something which was used for uh\nscaling up okay so it's not just the\ncontainer scaling up but it's with\nrespect to the application how the\nprogram would react when there are these\nincreased number of users and how to\nhandle increased number of requests so\nthat's where the map reduces the\nParadigm comes in right the mapping and\nthen reducing that whole concept so this\nwas their one deployment okay and when\nwe say into Phi it means that they had\ntheir server capacities which could go\nup till five times okay so technically\nthey could only serve X number of\nrequests but in case of affiliate\nconditions or heavy traffic load\nconditions the max the server could\nhandle was 5X because after 5x the\nserver would start crashing that was\ntheir prediction okay and what actually\nhappened at Pokemon go on releasing in\njust those three different geographies\nis that the moment they deployed it the\nusage became so much that it was not X\nnumber of times which is technically\ntheir failure limit and it is not even\n5x which is the server's capability but\nthe traffic that they got was up to 50\ntimes 50 times more than what they\nexpected so you know that when your\ntraffic is so much then you're gonna be\nbrought down to your knees that's a\ndefinite and that's a given right this\nis like a success story and this is too\ngood to be true kind of a story and in\nthat kind of a scenario if the requests\nstart coming in are so much that if they\nreach 50x then it's gone right the\napplication is gone for a toss so that's\nwhere kubernetes comes in and uh they\novercome all the challenges how do they\novercome the challenges because\nkubernetes can do both vertical scaling\nand horizontal scaling at ease and that\nis the biggest problem right because any\napplication and any other company can\neasily do horizontal scaling where you\njust spin up more containers and more\ninstances and you set up the environment\nbut vertical scaling is something which\nis very specific and this is even more\nchallenging now it's more specific to\nthis particular game because the virtual\nreality would keep changing whenever a\nperson moves around or walks around\nsomewhere in his apartments or somewhere\non the road then the ram right that\nwould have to increase the memory the in\nmemory and the storage memory all this\nwould increase so in real time your\nserver's capacity also has to increase\nvertically so once they have deployed it\nit's not just about horizontal\nscalability anymore it's not about\nsatisfying more requests it's about\nsatisfying that same request with\nrespect to having more Hardware space\nmore RAM space and all these things\nright that one particular server should\nhave more performance abilities that's\nwhat it's about and kubernetes solved\nboth of these problems effortlessly and\nNiantic were also surprised that\nkubernetes could do it and that was\nbecause of the help that they got from\nGoogle I read an article recently that\nthey had a Niantic slab he met with some\nof the top Executives in Google and in\ngcp right and then they figured out how\nthings are supposed to go and they of\ncourse met with the heads at kubernetes\nand they figured out a way to actually\nscale it up to 50 times in a very short\ntime so that is the challenge that they\nwere presented and thanks to kubernetes\nthey could handle 50 times the traffic\nthat they expected which is like a very\none-off story and which is very very\nsurprising that you know something like\nthis would happen so that is about the\nuse case and that pretty much brings an\nend to this topic of how Pokemon go used\nkubernetes to achieve something because\nin today's world Pokemon go is a really\nreward game because of what it could\nright it basically beat all the\nstereotypes of a game and whatever\nanybody could have anything negative\nagainst the game right so they could say\nthat these mobile games and video games\nmake you lazy they make you just sit in\none place and all these things right and\nuh Pokemon go or something which was\ndifferent it actually made people walk\naround and it made people exercise and\nthat goes on to show how popular this\ngame became if kubernetes lies at the\nheart of something which became so\npopular and something that became so big\nthen you should imagine how big\nkubernetes or how useful kubernetes is\nright so that is about this topic as\nsaid before kubernetes Master controls\nyour nodes and inside nodes you have\ncontainers okay and now these containers\nare not just contained inside them but\nthey are actually contained inside pods\nokay so you have nodes inside which\nthere are pots and inside each of these\nspots there will be n number of\ncontainers depending upon your\nconfiguration and your requirement right\nnow these pods which contain a number of\ncontainers are a logical binding or a\nlogical grouping of these containers\nsupposing you have an application X\nwhich is running in node one okay so you\nwill have a pod for this particular\napplication and all the containers which\nare needed to execute this particular\napplication will be a part of this\nparticular pod right so that's how pod\nworks and that's what the difference is\nwith respect to Docker swarm and\nkubernetes because in Docker swamp you\nwill not have a pod you just have\ncontainers running on your node and the\nother two terminologies which you should\nknow is that a replication controller\nand service your replication controller\nis the Master's resource to ensuring\nthat the requested number of pods are\nalways running on the nodes right so\nthat's like your confirmation or an\naffirmation which says that okay this\nmany number of PODS will always be\nrunning and these many number of\ncontainers will always be running\nsomething like that right so you see it\nand the replication controller will\nalways ensure that's happening and your\nservice is just an object on the master\nthat provides load balancing across a\nreplicated group of PODS right so that's\nhow kubernetes works and I think this is\ngood enough introduction for you and I\nthink now I can go to the demo part\nright guys if you guys have any doubts\nso I would request you to again put it\nin the comment section and my team will\nget back to you and in the meanwhile let\nme get to the final part of this video\nwherein I will show you how to deploy\napplications on your kubernetes via\neither your CLI or either via your yaml\nfiles or via your dashboard\nokay guys so let's get started and for\nthe demo purpose I have two VMS with me\nokay so as you can see this is my Cube\nMaster which would be acting as my uh\nmaster in my cluster and then I have\nanother VM which is my Cube node one\nokay so it's a cluster with one master\nand one node all right now for the ease\nof purpose for this video I have\ncompiled the list of commands in this\ntext document right so here I have all\nthe commands which are needed to start\nyour cluster and then the other\nconfigurations and all those things so\nI'll be using these I'll be copying\nthese commands and then I'll show you\nside by side and I will also explain\nwhen I do that as to what each of these\ncommands mean now there's one\nprerequisite that needs to be satisfied\nand that is the master should have at\nleast two core CPUs okay and 4GB of RAM\nand your node should have at least one\ncore CPU and 4GB of ram so just make\nsure that this much of Hardware is given\nto your VMS right if you're using Ubuntu\nto our Linux operating system well and\ngood but if you're using a VM on top of\na Windows OS then I would request you to\nsatisfy these things okay these two\ncriterias and I think we can straight\naway start let me open up my terminal\nfirst of all okay this is my node I'm\ngoing back to my master\nokay\nyes\nso first of all if you have to start\nyour cluster you have to start it from\nyour Master's end okay and the command\nfor that is Cube idiom init you specify\nthe Pod Network flag and the API server\nflat uh we are specifying the port\nNetwork flag because the different\ncontainers inside your pod should be\nable to talk to each other easily right\nso that was the whole concept of\nself-discovery which I spoke about\nearlier during the features of\nkubernetes so for the self-discovery we\nhave like different pod networks using\nwhich the containers would talk to each\nother and if you go to the documentation\nthe kubernetes documentation you can\nfind a lot of options there you can use\neither Calico pod or you can use a\nflannel Port Network so when we say Port\nNetwork it's basically acronymed as cni\nokay container network interface okay so\nyou can use either a Calico cni or a\nflannel cni or any of the other ones\nthese are the two popular ones and I\nwill be using the calco cni okay so this\nis the network range for this particular\npod and this will have to specify over\nhere okay and then over here we'll have\nto specify the IP address of the master\nso let me first of all copy this entire\nline\nand uh before I paste it here let me do\nan ifconfig and find out what is the IP\naddress of this particular machine of my\nmaster machine the IP address is\n192.168.56.1.1 okay so let's just keep\nthat in mind and let me paste the\ncommand over here in place of the master\nIP address and I'm going to specify the\nIP address of the master okay which I\njust read out it is\n192.168.56.1.1 and the Pod Network\nI told you that I'm going to use the\nCalico pod so let's copy this network\nrange and\npaste it here so all my containers\ninside this particular pod would be\nassigned an IP address in this range\nokay now let me just go ahead and hit\nenter and then your cluster would begin\nto set up\nso it's going as we expected\nso it's going to take a few minutes so\njust hold on there\nokay perfect my kubernetes master has\ninitialized successfully and if you want\nto start using your cluster you have to\nrun the following as a regular user\nright so we have three commands which is\nsuggested by kubernetes itself and that\nis actually the same set of commands\nthat even I have here okay so I'll be\nrunning the same commands this is to set\nup the environment and then after that\nwe have this token generated right the\njoining token so the token along with\nthe init address of the IP of the master\nif I basically execute this command in\nmy nodes then I will be joining this\ncluster where this is the master right\nso this is my master machine this is\ncreated the cluster so now before I do\nthis though there are a few steps in the\nmiddle one of those steps is uh\nexecuting all these three commands and\nafter that comes bringing up the\ndashboard and setting up the Pod Network\nright minus the calco Pod so I'll have\nto set up the Calico pod and then after\nalso set up the dashboard because if I\ndo not start the dashboard and this\nbefore the nodes then the node cannot\njoin and I will have have various other\ncomplications so let me first of all go\nahead and run these three commands one\nafter the other okay since I have the\nsame commands in my text doc I'll just\ncopy it from there okay I'll say Ctrl C\npaste enter okay and I'll copy this line\nso remember you have to execute all\nthese things as regular user okay you\ncan probably use your sudo but yeah\nyou'll be executing it as your regular\nuser and it's asking me if I want to\noverwrite the existing what was there in\nthis directory I would say yes because\nI've already done this before but if you\nare setting up the cluster for the first\ntime you will not have this prompt okay\nnow let me go to the third line copy\nthis and paste it here\nokay perfect now I've run these three\ncommands as I was told by kubernetes now\nthe next thing that I have to do is\nbefore I check the node status and all\nthese things let me just set up the\nnetwork okay the poor Network so like I\nsaid this is the Line This is the\ncommand that we have to run to set up\nthe Calico Network okay to all of the\nnodes to join our particular Network so\nit would be copying the template of this\ncalico.tml file which is present over\nhere in this docs okay so hit enter\nand yes my thing is created Calico Cube\ncontroller was created now I'll just go\nback here and see at this point of time\nI can check if my master is connected to\nthe particular pod okay so I can run the\ncube CDL get nodes command Okay this\nwould say that I have one particular\nresource connected to the cluster okay\nname of the machine and this role is\nmaster and yeah the status is ready okay\nif you want to get an idea of all the\ndifferent pods which are running by\ndefault then you can do the cube serial\nget pods along with a few options okay\nyou should specify these flags and they\nare\nall namespaces and with the flag O\nspecify wide okay so this way I get all\nthe pods which are styled by default\nokay so there are different services\nlike hcd for cube controllers for the\nCalico node for the hcd master for every\nsingle service there's a separate\ncontainer and Port started okay so\nthat's what you can understand from this\npart okay that is the safe assumption\nnow that we know the cluster the cluster\nis ready and the Masters part of the\ncluster let's go ahead and execute this\ndashboard okay remember if you want to\nuse a dashboard then you have to run\nthis command before your nodes join this\nparticular cluster because the moment\nyour nodes join into the cluster\nbringing up the dashboard is going to be\nchallenging and it will start throwing\nerrors okay it will say that it's being\nhosted on the Node which we do not want\nwe want the dashboard to be on the\nserver itself right on the master so\nfirst let's bring the dashboard up so\nI'm going to copy this and paste it here\nokay Enter\ngreat my kubernetes dashboard is created\nnow the next command that you have to\nget your dashboard up and running is\nCube CDL proxy okay with this you will\nget a message saying that uh it's being\nserved at this particular port number\nand yes you are right now there you can\nif you access localhost what was the\nport number again localhost yeah\n127.0.0.1 is localhost okay followed by\nport number 8001 okay\nyeah so right now we are not having the\ndashboard because it is technically\naccessed on another URL but before we do\nthat there are various other things that\nwe have to access I mean we have to set\nokay because right now we have only\nenabled the dashboard now if you want to\naccess the dashboard you have to first\nof all create a service account okay uh\nthe instructions are here okay you have\nto first of all create a service account\nfor your dashboard then you have to say\nthat okay you are going to be the admin\nuser of this particular service account\nand you have to enable that\nfunctionality here you should say\ndashboard admin privileges and you\nshould do the cluster binding okay the\ncluster role binding is what you have to\ndo and after that to join to that or to\nget access to that particular dashboard\nwe have to basically give a key okay\nit's like a password so we have to\ngenerate that token first and then we\ncan access the dashboard so again for\nthe dashboard there are these three\ncommands well you can get confused down\nthe line but remember this is separate\nfrom the above okay so what we did\ninitially is uh ran these three commands\nwhich kubernetes to execute and after\nthat the next necessity was bring up a\npod so this was that command for the Pod\nand then this was the command for\ngetting the dashboard up and right after\nthat run the proxy and then on that\nparticular port number it'll start being\nserved so my dashboard is being served\nbut I'm not getting the UI here and if I\nwant to get the UI I have to create the\nservice account and do these three\nthings right so let's start with this\nand then continue I hope this wasn't\nconfusing guys okay I can't do it here\nso let me open a new terminal\nokay sure I'm gonna paste it and yes\nservice account created let me go back\nhere and execute this command where I'm\ndoing the role binding I'm saying that\nmy dashboard will should have admin\nfunctionalities and that's going to be\nthe cluster role okay cluster admin and\nthen the service account is what I'm\nusing and it's going to be in default\nnamespace okay so when I created the\naccount I said that I want to create\nthis particular account in default\nnamespace so the same thing I'm\nspecifying here\nokay dashboard admin created good so\nlet's generate the token that is needed\nto access my dashboard okay before I\nexecute this command let me show you\nthat once\nso if you go to this URL right slash API\nslash V1 slash namespaces\nlet me show it to you here okay so this\nis the particular URL where you will get\naccess to the dashboard okay login\naccess to the dashboard localhost 8001\nAPI B1 namespaces slash Cube system\nslash Services slash https kubernetes\ndashboard colon slash proxy okay\nremember this one that is the same thing\nover here and uh like I told you it's\nasking me for my password so I would say\ntoken but let me go here and hit the\ncommand and generate the token so this\nis the token I'm gonna copy this from\nhere till here I'm gonna say copy and\nthis is what I have to paste over here\nall right so sign an update yes perfect\nso this is my dashboard right this is my\nkubernetes dashboard and this is how it\nlooks like whatever I want I can get an\noverview of everything so there is\nworkloads if I come down there is uh\ndeployments I have option to see the\npods and then I can see what are the\ndifferent Services running among most of\nthe other functionalities okay so right\nnow we don't have any uh bar graph or\npie graph showing you which clusters up\nwhich pod is up and all because I have\nnot added any node and there is no\nservers that is running right so I mean\nthis is the outlay of the dashboard okay\nyou will get access to everything you\nwant from the left you can drill down\ninto each of these namespaces or pods or\ncontainers right now if you want to\ndeploy something through the dashboard\nright through the click functionality\nthen you can go here okay but before I\ncreate any container order before I\ncreate any pod or any deployment for\nthat matter of fact I have to have nodes\nbecause these will be running only on\nnodes correct whatever I deploy they run\nonly on nodes so let me first open up of\nmy node and get the node to join this\nparticular cluster of mine now if you\nremember the command to join the node\ngot generated at the master end correct\nso let me go and fetch that again so\nthat was the first command that we ran\nright this one so let's just copy this\nand paste this one at my node end\nthis is the IP of my master\nand it will just join at this particular\nport number let me hit enter let's see\nwhat happens okay let me run it as a\nroot user okay\nokay perfect successfully established\nconnection with the API server and it\nsays this node has joined the cluster\nRight Bingo so this is good news to me\nnow if I go back to my master and in\nfact if I open up the dashboard\nthere would be an option of nodes right\nso initially now it's showing this\nmaster master is the only thing that is\npart of my nodes let me just refresh it\nand you would see that even node hyphen\n1 would be a part of it right so there\nare two resources two instances one is\nthe master itself and the other is the\nnode now if I go to overview\nyou will get more details if I start my\napplication if I start my service or\ncontainers then all those would start\nshowing up here right so it's high time\nI start showing you how to deploy it to\ndeploy it using the dashboard I told you\nthis is the functionality so let's go\nahead and click on this create\nand yeah mind you from the dashboard is\nthe easiest way to deploy your\napplication right so even developers\naround the world do the same thing for\nthe first time probably they create it\nusing the yaml file and then from there\non they start editing the yaml file on\ntop of the dashboard itself or they\ncreate or deploy the application from\nhere itself so we'll do the same thing\ngo to create an app using functionality\nclick functionality you can do it over\nhere so let's give a name to your\napplication I'll just say at Eureka demo\nokay let that be the name of my\napplication and I want to basically pull\nan engines image okay I want to launch\nan engine service\nso I'm going to specify the image name\nin my Docker Hub okay so it says either\nthe URL of a Public Image or any\nregistry or a private image hosted on\nDocker Hub or Google container registry\nso I don't have to specify the URL per\nse but if you are specifying a Docker\nHub if you're specifying this image to\nbe pulled from Docker Hub then you can\njust use the name of the image which has\nto be pulled that's good enough right\nengines is the name and that's good\nenough and I can choose to set my number\nof ports to one or two in that way I\nwill have two continuous running in the\nPod right so this is done and the final\npart is actually without the final part\nI can straight away deploy it okay but\nif I deploy it then my application would\nbe created but I would just not get the\nUI I mean I won't see the engine service\nso that I get the service I have to\nenable one more functionality here okay\nthe servers here click on the drop down\nand you will have external option right\nso click on external this would let you\naccess this particular service from your\nhost machine right so that is the\ndefinition so you can see the\nexplanation here an internal or external\nservice can be defined to map an\nincoming port to a Target Port seen by\nthe container so engines which would be\nhosted on one of the container ports\nthat could not be accessible if I don't\nspecify anything here but now that I've\nsaid access it externally on a\nparticular port number then it would get\nmapped for me by default engines runs on\nport number 80. so the Target Port would\nbe the same but the port I want to\nexpose it to that I can map it to\nanything I want so I'm going to say 82\nall right uh so that's it it's as simple\nas this this way your application is\nlaunched with two pods so I can just go\ndown and click on deploy and this way my\napplication should be deployed\nmy deployment is successful there are\ntwo pods running uh so what I can do is\nI can go to the service and try to\naccess the UI right so it says that it's\nrunning on this particular port number\neight two one five three so copy this\nand say localhost\nthree two one five three okay hit enter\nuh bingo so it says welcome to Jenkins\nand uh I'm getting the UI right so I'm\nable to access my application which I\njust launched through the dashboard it\nwas as simple as that so this is one way\nof launching or making a deployment uh\nthere are two other ways like I told you\none is using your CLI itself your\ncommand line interface of your Linux\nmachine which is the terminal or you can\ndo it by uploading the yaml file uh you\ncan do it by uploading the yaml file\nbecause everything here is in the form\nof yaml or Json okay that's like the\ndefault way so whatever deployment I\nmade right that also those\nconfigurations are stored in the form of\nyaml so if I click on view or edit yaml\nall the configurations are specified the\ndefault ones have been taken so I said\nthe name should be a draca demo that is\nwhat has been taken over here that is\nthe name of my deployment okay so kind\nis deployment the version of my API it's\nuh this one extension slash V1 beta1 and\nthen under metadata I have various other\nlists so if you know how to write a yaml\nfile then I think it would be a little\nmore easier for you to understand and\ncreate your deployment because yaml file\nis everything about lists and maps and\nthese xaml files are always lists about\nmaps and maps about lists so it might be\na little confusing uh so probably we'll\nhave another tutorial video on how to\nwrite a yaml file for kubernetes\ndeployment but I would keep that for\nanother session okay let me get back to\nthis session and show you the next\ndeployment okay the next deployment\ntechnique so let me just close this and\ngo back to overview okay so I have this\none deployment very good okay so let's\ngo to this yeah so what I'll do is let\nme delete this deployment okay or let me\nat least scale it down because I don't\nwant too many resources to be used on my\nnode also because I will have to show\ntwo more deployments right so I have\nreduced my deployment over here and I\nthink it should be good enough\ngreat uh so let's go back to the cube\nsetup this document of mine\nso this is where we got right\nwe could check our deployments we could\ndo all these things so one thing which I\nmight have forgotten is showing the\nnodes which are part of the cluster\nright so this is my master\nyeah so I kind of forgot to show you\nthis Cube CDL get notes so the same view\nthat you got on your dashboard you get\nit here also I mean these are the two\nnodes and this is the name and all these\nthings okay\nand I can also do the cube CTL get pods\nit should tell me all the pods that are\nrunning uh at Eureka demo is the pod\nwhich I have started okay this is my\nreport now if I specify with the other\nflags right with all namespaces and with\nwide then all the default pods which get\ncreated along with your kubernetes\ncluster those will also get displayed\nlet me show you that also just in case\nokay yeah so this is the one which I\ncreated and the other ones are the\ndefaulted deployments that come with\nkubernetes the moment you install uh set\nup the Clusters these get started okay\nand if you can see here this particular\nthat this particular demo which I\nstarted is running on my node one along\nwith this Cube proxy\nand this particular Calico node so these\ntwo services are running on master and\nnode and this one is running only on my\nnode one right uh you can see this right\nthe Calico node runs both on my node\nover here and on my master uh and\nsimilarly the cube proxy runs on my node\nhere add on my master so this is the one\nthat's running only on my node okay uh\nso getting back to what I was uh about\nto explain you\nthe next part is how to deploy anything\nthrough your terminal\nnow to deploy your same engines\napplication through your CLI we can\nfollow these set of commands Okay so\nthere are a couple of steps here first\nof all to create a deployment you have\nto run this command Okay Cube serial\ncreate deployment engines and then the\nname of the image that you want to\ncreate this is going to be the name of\nyour deployment and this is the name of\nthe image which you want to use so Ctrl\nC and let me go to the terminal here on\nmy master I'm executing this command\nCube serial create deployment okay so\nthe deployment engines is created if you\nwant we can verify that also over here\nso under deployments right now we have\none entry into Ray car demo and yes now\nyou can see there are two engines and\nadobeca demos so this is pending I mean\nit would take a few seconds so in the\nmeanwhile let's just continue with the\nother steps once you have created your\ndeployments you have to create the\nservice okay you have to say uh which is\nthe node Port which can be used to\naccess that particular service right\nbecause deployment is just a deployment\nyou're just deploying your container if\nyou want to access it like I told you\nearlier from your local from your host\nmachine or all those things then you\nhave to enable the node Port if you want\nto get your deployments on your terminal\nyou can run this command Cube CTL get\ndeployments okay\nengines also comes up over here right if\nyou want more details about your\ndeployment you can use this command Cube\nCDL describe you'll get like more\ndetails about this particular deployment\nas to what is the name uh what is the\nport number it's sort of signing on and\nall these things okay let's not\ncomplicate this you can probably use\nthat for your understanding later\nso once that is done the next thing that\nyou have to do is you have to create the\nservice on the nodes you have created\nthe deployment but yes create the\nservice on the nodes using this\nparticular command Cube CDL\ncreate service and say node Port okay\nthis means you want to access it at this\nparticular port number you're doing the\nport mapping 80s to 80. okay container\nPort 80 to the internal node port 80.\nokay so service for engines is created\nand if you want to check uh which of the\ndeployments are running in which nodes\nyou can run the command Cube CTL get SVC\nokay this would tell you okay you have\ntwo different Services iteraker demo and\nengines and they are running on these\nport numbers and on these nodes right so\nkubernetes is the one which got created\nautomatically a Eureka demo is the one\nwhich I created okay engines is again\nthe one which I created kubernetes comes\nup on its own I'm just specifying here\nbecause this is a container for the\ncluster itself okay so let's just go\nback here and then yes and similarly if\nyou want to delete a deployment then you\ncan just use this command Cube CDL\ndelete deployment followed by the name\nof the deployment right it's pretty\nsimple uh you can do it this way\notherwise from the dashboard also you\ncan delete it like how I showed you all\nyour click over here and then you can\nclick on delete and then if you want to\nscale it you can scale it so both of\nthese deployments of mine have one part\neach right so let's do one thing so\nlet's just go to the engines service\nand here let's try accessing this\nparticular service\nlocalhost\nokay perfect here also it says welcome\nto manjings right so uh with this you\ncan understand that the port mapping\nworked and by going to service you will\nget to know on which port number you can\naccess it on your host machine right so\nthis is the internal container Port\nmapped to this particular Port of mine\nokay now if if not for this if this\ndoesn't work you can also use the\ncluster IP for the same thing cluster IP\nis going to basically uh the IP using\nwhich all your containers access each\nother right so for your pod you will\nhave an IP so whatever is running in\nyour containers that will again be\naccessible on your cluster IP so so it's\nthe same thing right so let me just\nclose these uh pages and that's how you\ndeploy an application through your CLI\nso this comes to our last part of this\nvideo which is nothing but deployment\nvia yaml file so for again deployment\nvia yaml file you have to write your\nyaml code right you have to either write\nyour yaml code or your Json code correct\nso this is the code which I have written\nwhich is uh in yaml format and and in\nfact I already have it in my machine\nhere so how about I just do an LS yeah\nthere is deployment.yaml right so let me\nshow you that\nso this is my yaml file okay so here I\nspecify various configurations uh\nsimilar to how I did it using the GUI or\nwrite it using the CLI it's something\nsimilar to jizzer I specify everything\nin one particular file here if you can\nsee that I have specified the API\nversion okay so I'm using extensions dot\nslash B1 or beta1 okay I can do this or\nI can just simply specify version one I\ncan do either of those and then the next\nimportant line is the kind so kind is\nimportant because you have to specify\nwhat kind of file is is it a deployment\nfile or is it for a pod deployment or is\nit for your container deployment or is\nit the overall deployment what is it so\nI've said deployment okay because I want\nto deploy the containers also along with\nthe Pod so I'm saying deployment in case\nyou want to deploy only the pod which\nyou realistically don't need to okay why\nwould you just deploy a pod but in case\nif you want to deploy a pod then you can\ngo ahead and write pod here and then\njust specify what are the different\ncontainers okay but in my case it's a\ncomplete deployment right with the pods\nand the services and the containers so I\nwill go ahead and write other things and\nUnder The Meta data I will specify the\nname of my application I can specify\nwhat I want I can put my name also over\nhere like Warden okay and I can save\nthis and then the important part is this\npack part so here is where you set the\nnumber of replicas do you remember I\ntold you that there's something called\nas replication controller which controls\nthe number of PODS that you will be\nrunning so it is that line so if I have\na set two over here it means that I will\nhave two poles running of this\nparticular application of vardan okay\nwhat exactly am I doing here under spec\nI have saying that I want two containers\nso I have intended a container line over\nhere and then I have two containers\ninside so the first container which I\nwant to create is of the name front end\nokay and I'm using an engines image and\nsimilarly the port number that this\nwould be active on is container Port 80.\nall right and then I'm saying that I\nwant a second container and the\ncontainer for this could I could rename\nthis to anything I can say back end and\nI can choose which image I want I can\nprobably choose a httpd image also okay\nand I can again say the ports that this\nwill be running on I can say the\ncontainer Port that it should run on is\nuh port number is 88 right so that's how\nsimple it is all right and since it's\nyour first video tutorial the important\ntakeaways from this yaml file\nconfiguration is that under spec you\nwill have to specify the containers and\nuh yes everything in Json format with\nall the indentations and all these\nthings okay even if you have an extra\nspace anywhere over here then your yaml\nfile would thrown in by an error so make\nsure that is not there make sure you\nspecify the containers appropriately if\nit's going to be just one container well\nand good it's two containers make sure\nyou uh indent it in the right way and\nthen you can specify the number of PODS\nyou want to give a name to your\ndeployment and mainly establish read\nthese rules okay so once you're done\nwith this uh just save it and close this\nyaml file okay so this is your\ndeployment.yaml now you can straight\naway upload does yaml file your\nkubernetes okay and that way your\napplication would be straight away\ndeployed okay now the command for that\nis Cube CDL create hyphen f and the name\nof the file okay so let me copy this and\nthen the name of my file is\ndeployment.yaml so let me hit enter\nperfect so my deployment the third\ndeployment Warden is also created right\nso we can check our deployments from the\nearlier command that is nothing but Cube\nCDL get deployments okay it's not get\ndeployment.yaml sorry\nit's get deployments and as you can see\nhere there is an edirect demo there is\nengines and there is vardhan and the\nfunny thing which you should have\nnoticed is that I said I want two\nreplicas right two pods so that's why\nthe desire is to currently we have to up\nto date is one so okay up to date is two\nbrilliant available is zero because\nlet's just give it a few seconds in 23\nseconds I don't think the board would\nhave started so let's go back to our\ndashboard and verify if there's a third\ndeployment that comes up over here\nokay perfect so uh that's how it's gonna\nwork okay so probably it's gonna take\nsome more time because the container is\njust restarting so let's just give it\nsome more time\nthis could well be because of the fact\nthat my node has very less resource\nright so I have too many deployments\nthat could be the very reason uh so what\nI can do is I could uh go ahead and\ndelete other deployments so that my node\ncan handle these many containers and\npods right so uh let me delete this\nparticular deployment engines deployment\nand let me also delete this edureka demo\ndeployment of mine\nokay now let's refresh and just wait for\nthis to happen\nokay so what I can do instead is I could\nhave a very simple deployment right so\nlet me go back to my terminal and let me\ndelete my deployment okay and let me\nredeploy it again so Cube CDL delete\ndeployment\nokay so what then the deployment has\nbeen deleted okay so let's just clear\nthe screen and let's do G edit of the\nyaml file again and here let's make\nthings simpler\nlet me just delete this container from\nhere\nlet me save this all right and close\nthis now let me\ncreate a deployment with this okay so\nWalden is created\nlet me go up here and refresh let's see\nwhat happens\nokay so this time it's all green because\nit's all healthy my nodes are successful\nor at least it's going to be successful\ncontainer creating\nperfect so two PODS of mine are up and\nrunning and uh both my pods are running\nright and both are running on node one\npods two out of two those are the two\ndeployments and replica set and then\nServices right so it's engines which is\nthe base image which is being used so uh\nwell and good this is also working so\nguys yeah that's about it right so when\nI try to upload it maybe there was some\nother error probably in the yaml file\nthey could there could have been some\nsmall mistake or it could have been\nbecause my node had too many containers\nrunning those could have been the\nreasons but anyways this is how you\ndeploy it through your yaml file\nforeign\n[Music]\nlet's look into the architecture of\nkubernetes kubernetes architecture has\nmainly three components the masternodes\nthe worker nodes and the distributed key\nvalue stores like etcd talking about the\nmaster node the master node is\nresponsible for managing the kubernetes\ncluster and it is the entry point for\nall the administrative tasks so we can\ncommunicate to the master node via the\nCLI or GUI or apis so for the fault\ntolerance purposes there can be more\nthan one Master node in the cluster and\nif we have more than one Master node\nthen there would be high availability\nmode and only one of them will be the\nleader performing all the operations all\nthe other masternodes would be the\nfollowers of that node also to manage\nthe cluster state kubernetes uses etcd\nand all the master nodes connect to it\nso etcd is a distributed key value store\nwhich I'll tell you in a little while\nalso let me tell you that the key Value\nStore can be the part of the master node\nand it can also be configured externally\nand in that case masternodes would\nconnect to it so now that I've told you\nwhat a master node is and what are the\nresponsibilities of the master known\nlet's discuss the components of Master\nnodes a master node has mainly four\ncomponents the API server the scheduler\nthe control manager and etcd so now let\nme tell you about all these components\none by one so starting with API server\nall the administrative tasks are\nperformed via the API server within the\nmaster node a user sends the rest\ncommands to the API server which then\nvalidates and processes the request\nafter executing the request the\nresulting state of the cluster is stored\nin the distributed key value store after\nthat we have scheduler so as the name\nsuggests the scheduler schedules the\nwork to different worker nodes the\nscheduler has the resource usage\ninformation for each worker node and\nalso knows about the constraints that\nthe users may have set before scheduling\nthe work the scheduler also takes into\naccount the quality of service\nrequirements data locality affinity and\ntaffinity and many other such parameters\nand then the scheduler schedules the\nwork in terms of PODS and services\nthe next component that we have is\ncontroller manager now what do you think\nare the responsibilities of controller\nmanager well as the name suggests\ncontroller manager manages different\nnon-terminating control loops which\nregulate the state of the kubernetes\ncluster now each one of these control\nloops know about the desired state of\nthe object it manages and then they\nwatch their current state through the\nAPI servers now in a control Loop if the\ncurrent state of the object it manages\ndoes not meet the desired State then the\ncontrol Loop itself takes the corrective\nsteps to make sure that the current\nstate is same as the desired state so\nwhat does the controller manager do it\nbasically makes sure that your current\nstate is same as the desired state after\nthat the last component that we have is\netcd so as I mentioned earlier etcd is a\ndistributed key value store which is\nused to store the cluster state so\neither it has to be a part of the\nkubernetes master or you can configure\nit external finally so guys that were\nthe various components of masternode now\nlet's move on to the next component of\nkubernetes architecture that is the\nworker node a worker node is a machine\nor a virtual machine or any physical\nserver which runs the applications using\npods and is controlled by the master\nnode so you understand the master sleeve\nconcept it has its own machine but yes\nit is controlled by the master node now\npods are scheduled on the worker nodes\nwhich have the necessary tools to run\nand connect them so you can see that the\nPod is basically the scheduling unit in\nkubernetes it is a logical collection of\none or more containers which are always\nscheduled together and to access the\napplications from the external world we\nhave to connect to the worker nodes and\nnot the master nodes so now that I've\nbriefed you about the worker node let's\ndiscuss the various components of worker\nnode so a worker node has mainly three\ncomponents the cubelet the Q proxy and\ncontainer runtime so let's start the\ndiscussion session with container\nruntime so a container runtime is\nbasically used to run and manage a\ncontainer's life cycle on the worker\nnode so some examples of container\nruntimes that I can give you are the\ncontainer rkt lxt Etc now it is often\nobserved that Docker is also referred to\nas container runtime but to be precise\nlet me tell you that Docker is a\nplatform which uses containers as\ncontainer runtime all right so now that\nyou've understood what container runtime\nis let's move on to the second component\nthat is cubelet so cubelet is basically\nan agent which runs on each worker node\nand communicates with the master node so\nif you have 10 worker nodes then cubelet\nruns on each and every worker node then\nit receives the port definition via\nvarious means and runs the containers\nassociated with that pod it also makes\nsure that the containers which are part\nof the pods are healthy at all times so\nwhat does a cubelet do it basically runs\nin all the containers it make sure that\nyour containers which are part of\nvarious spots are always healthy at all\ntimes so the cubelet connects to The\nContainer runtime using the container\nruntime interface which consists of\nvarious protocol buffers grpc apis and\nlibraries so as you can see on the\nscreen the cubelet connects to the CRI\nshim to perform containers and image\noperations now CRI implements two\nservices that is the runtime service and\nthe image service the image service is\nresponsible for all the image related\noperations while the runtime service is\nresponsible for all the Pod and\ncontainer related operations so these\ntwo Services have two different\noperations to perform now let me tell\nyou something interesting here container\nruntimes used to be hard-coded in\nkubernetes but with the development of\nCRI kubernetes can now use different\ncontainer runtimes without the need to\nrecompile so any container runtime that\nimplements CRI can be used by kubernetes\nto manage pods containers and container\nimages\nso now let me give you an example of a\nCRI shims so dokashim and CRI container\nare two examples of CRS ship with\ndockershim containers are created using\nDocker installed on the worker nodes and\nthen internally Docker uses container to\ncreate and manage containers with CRI\ncontainer we can directly use docker's\nsmall Offspring containers to create and\nmanage containers so these were two\nsimple examples of CRI shims now let's\nmove on to the third component of worker\nnode that is Q proxy so Q proxy is the\nnetwork proxy which runs on each worker\nnode and then listens to the API server\nfor each service Point creation or\ndeletion so for each service Point Q\nproxy sets The Roots so that it can\nreach to it so guys that were the\ncomponents of the worker node so now let\nme move on with the session by\ndiscussing the third component of\nkubernetes architecture that is etcd so\nas I mentioned before kubernetes uses\nthe atcd to store the cluster state so\natcd is a distributed key value stored\nbased on the raft consensus algorithm so\nthe raft allows a collection of machines\nto work as a coherent group that can\nsurvive the failures of some of its\nmembers so basically this algorithm\nWorks in such a way that even if some of\nthe members fail to work it can still\nwork at any given time one of the nodes\nin the group will be the master and rest\nof them will be the follower as I told\nyou before in the starting of the\nsession that there can be only one\nmaster and all the other Masters have to\nfind follow that Master right not only\nthis but let me tell you that atcd is\nwritten in the co-programming language\nbesides storing the cluster state\netcd is also used to store the\nconfiguration details such as the\nsubnets and the config Maps\n[Music]\nwhat is Docker Docker is a\ncontainerization platform that packages\nyour application and all its\ndependencies together in form of a\nDocker container to ensure that your\napplication works seamlessly in any\nenvironment it is basically an open\nplatform for developing shipping and\nrunning applications now Docker enables\nyou to separate your applications from\nyour infrastructure so you can deliver\nsoftware very quickly with Docker you\ncan also manage your infrastructure in\nthe same ways you manage your\napplications by taking advantage of\ndocker's methodologies for shipping\ntesting and deploying code very quickly\nyou can significantly reduce the delay\nbetween writing code and running it in\nproduction basically provides the\nability to package and run an\napplication in a Loosely isolated\nenvironment called a container the\nisolation and security allow you to run\nmany containers simultaneously on a\ngiven host as we have already discussed\ncontainers are lightweight and contain\neverything needed to run an application\nso you don't really need to rely on what\nis currently installed on the host you\ncan easily share containers while you\nwork and be sure that everyone you share\nwith gets the same container that works\nin the same way now there are some\nimportant features of Docker that I'd\nlike to address the first feature is\nthat it is extremely fast and there is a\nconsistent delivery of your applications\nnow Docker streamlines development life\ncycle by allowing developers to work in\nstandardized environments using local\ncontainers which provide your\napplications and services containers are\ngreat for continuous integration and\ncontinuous delivery workflows\nnow let me explain this with a tiny\nexample your developers write code\nlocally and share their work with their\ncolleagues using Docker containers now\nthey use Docker to push their\napplications into a test environment and\nexecute automated and manual tests when\ndevelopers find bugs they can easily fix\nthem in the development environment and\nredeploy them to the test environment\nfor testing and validation now when\nfinally testing is complete getting the\nfix to the customer is as simple as\npushing the updated image to the\nproduction environment\nthis is how easy it is to use Dockers\nand to get your work done the second\nfeature is that it has a responsive\ndeployment and scaling Docker containers\ncan run on a developer's local laptop on\nphysical or virtual machines in a data\ncenter on cloud providers or even in a\nmixture of environments its portability\nand lightweight nature also makes it\nvery easy to dynamically manage\nworkloads scaling up or tearing down\napplications and services as business\nneeds dictate in your real time the\nthird feature is running more workloads\non the same Hardware Docker is\nlightweight and fast it provides a\nviable cost effective alternatives to\nhypervisor based virtual machines so you\ncan use more of your compute capacity to\nachieve your business goals it is\nperfect for high density environments\nand for small and medium deployments\nwhere you need to do more with fewer\nresources so there is a relationship\nbetween kubernetes and Docker we're\ngoing to discuss them now so if Dockers\nis containers and kubernetes is\ncontainer orchestration why would anyone\nask should I use Docker or kubernetes\nnow in reality the two tools are\nactually complementary to each other and\nhelp build Cloud native or microservice\narchitectures Docker is mostly used\nduring the first days of a containerized\napplication it really actually helps\nbuild and deploy the applications\ncontainer or containers in cases where\nthe applications architecture is very\nsimple Docker can address the basic\nneeds of the application's life cycle\nmanagement now if the case or the\nscenario where the application is broken\ndown into multiple microservices with\neach of these services having their own\nlife cycle and operational needs\nkubernetes comes into the picture it is\nnot only used to create the application\ncontainers it actually needs a container\nplatform to run and Docker being the\nmost popular one it runs on that\nkubernetes integrates with a large tool\nset built for and around containers and\nuses it in its own operations containers\ncreated with Docker or any of its\nAlternatives can be managed scaled and\nmoved by kubernetes which also ensures\nfailover management and health\nmaintenance of the system as you can see\nin the diagram the container life cycle\nhas been explained you can see that in\nthe docker there is the build and\ndeployment of the application that has\nbeen successfully done once the docker\nhas been successfully deployed then\nkubernetes takes the responsibility to\nMonitor and scale the application there\nare great benefits to using kubernetes\nwith Docker firstly the applications are\neasier to maintain as they are broken\ndown into smaller parts also these parts\nrun on an infrastructure that is much\nmore robust and the applications are\nmore highly available\nyour applications are able to handle\nmore load on demand improving the user\nexperience and reducing resource waste\nas applications become more scalable\nthere is no need to pre-allocate\nresources in anticipation of load peak\ntimes now here both Docker and\nkubernetes are backed by strong open\nsource communities and are part of the\ncloud native Computing Foundation a\nLinux Foundation project aiming to\nadvance container Technologies and align\nthe industry around specific standards\nnow that we understand the docker and\nkubernetes have a really great\nrelationship together let's move ahead\nand address the main topic of today's\nsession that is kubernetes versus Docker\nfirstly we will compare them in terms of\nsetup and installation as you can see on\nthe screen kubernetes really requires a\nseries of many manual steps to set up\nthe master and worker node components in\na cluster of nodes it's really hard and\ncomplicated to install kubernetes but on\nthe other hand that is installing Docker\nis a matter of one-liner commands on\nLinux platforms like Ubuntu and Centos\nso compared to kubernetes Docker is much\nmore easy to install and set up moving\non to the next difference that is\nlocking kubernetes provides no native\nstorage solution for log data whereas\nlogging driver plugins are available in\nDocker 17.05 and much higher so in terms\nof monitoring kubernetes applications\nyou can use various open source tools\nlike Prometheus grafana influxdb Etc\nDocker on the other hand also has tools\nlike Prometheus Docker API etc for\nmonitoring purposes\nkubernetes supports up to 5000 nodes\nwhereas Docker supports only up to 2000\nnodes\nand in terms of compatibility kubernetes\nis more comprehensive and highly\ncustomizable whereas Docker is less\nextensive and customizable\nso for all of you all who don't know\nwhat load balancing is it is an\nefficient distribution of network or\napplication traffic across multiple\nservers in a server farm so usually each\nload balances sits between client\ndevices and back-end servers receiving\nand then Distributing incoming requests\nto any available server capable of\nfulfilling them as you can see in\nkubernetes you must manually configure\nyour load balancing settings whereas in\nDocker it does Auto load balancing that\nis it is automated\nnow there are various companies that use\nkubernetes and Docker companies like\nGoogle Shopify udemy slack Robinhood\ndelivery hero stack share new bank Etc\nuse kubernetes every day on the other\nhand various companies like Twitter\nBusiness Insider Spotify PayPal eBay\nOxford University press the New York\nTimes New Relic all of these companies\nand organizations make use of docker now\nthat we've compared kubernetes and\nDocker let us understand in what\nsituation to use kubernetes and docker\nso what are the choices when it comes to\nkubernetes in Docker what happens if you\ndo choose to use only one and not the\nother so there are three scenarios that\nI'll be addressing the first one is\nDocker without kubernetes the second one\nis kubernetes with a Docker and a third\none is kubernetes with Docker we've\nalready discussed the benefits of using\nkubernetes with Docker but we'll just\nbrief up that again so firstly let's\nunderstand the scenario where Docker can\nbe used without kubernetes Docker by\nitself will allow you to build container\nimages manage them in a registry run\ncontainers and communicate with them and\neventually put them together in a\nmulti-container application using Docker\ncompose so is Docker all that you need\nnow when it comes to producing and\nmanaging container images and putting\ncontainers into operation at the runtime\nlevel the answer for the most part is\ndefinitely yes it has become the\nindustry standard for creating\ncontainers and getting them off the\nground now under Dockers current and\ndeveloper-centric definition of its\nMission however it has moved away from\nearlier attempts to go beyond its core\nfunctions it is no longer attempting to\ncompete with kubernetes and other\ncompanies at the infrastructure or\norchestration level now let's talk about\nthe second scenario kubernetes does not\ninclude functionality for creating or\nmanaging container images and it is not\nby itself run containers it really needs\nto work with an external container\nsource and runtime it is however capable\nof using containers from a variety of\nsources and it is compatible with\nruntimes other than Docker so it is not\ninherently dependent on Docker and\nDocker alone\nwhat kubernetes does is it provides a\nrich and a very flexible and Powerful\nframework for defining applications and\norchestrating containers at scale it is\nvery well designed for key Enterprise\nlevel tasks such as automated scaling\nmaintaining High availability and\noperating in a multi-platform\nenvironment it also has a large\ncommunity of users and developers with a\ncorresponding large number of add-ons\nand support tools\nso finally in the third scenario what is\nthe best choice this is a tricky\nquestion and the answer is most obvious\nthat is use both the truth here is that\nall the kubernetes can use other\ncontainer sources and runtimes it is\ndesigned to work well with Docker and\nmuch of kubernetes documentation was\nvery well written with Docker in mind\nthe most basic kubernetes use case is\nkubernetes plus Docker and kubernetes\nincludes docker-centric tools such as\ncompose which converts Docker compose\ncommands in settings so that can be used\nby kubernetes for its part dockerism\nraised kubernetes and has in fact\noffered its very own integrated\nkubernetes distribution so the bottom\nline is that kubernetes and Docker are\nboth industry standards in their\nrespective core areas of expertise and\ntogether they provide a well integrated\nplatform for container management\ndeployment and orchestration at scale it\nwas never really a question of\nkubernetes versus Docker it was always Q\ncommunities and Docker and today this is\neven more true\n[Music]\nso what is configuration management why\ndo you need configuration management now\nsystem administrators usually perform a\nrepetitive tasks such as installing\nservers configuring those servers so on\nand so forth they can automate this task\nby writing scripts where it is a very\nhectic job when you are working on a\nvery large infrastructure so meet our\nteam we have Dave the developer Sam the\nsysadmin and Alice the manager how the\nworkflow goes is Dave passes updates to\nthe operations team which is Sam so when\nDave is done with a certain software\nupdate he pings Sam to deploy it on the\nservers but Sam then has to deploy the\nupdate on each and every individual\nserver and it's going to take him a\nsignificant amount of time just to\ndeploy this new update to servers\nmeanwhile the manager Alice comes in\nwith great news\nthey've been getting traffic on all of\ntheir servers and she wants Sam to add\n200 more servers to their system but Sam\nhasn't even updated the current 20\nservers with Dave's changes how is he\ngoing to do that for 200 more servers\nnow there are a couple of issues here\nthat Sam is facing a few major ones are\nhaving to configure a large number of\nservers together\nscaling to new servers manually without\nany configuration management tool and\nthe fact that there is always a\ndevelopment and deployment environment\nmismatch which is going to halt his work\nfrom time to time now to solve this\nproblem configuration management was\nintroduced to workplaces configuration\nmanagement is the practice of handling\nchanges systematically so that a system\nmaintains its Integrity over time\nconfiguration management or CM ensures\nthat the current design and build state\nof the system is known good and trusted\nand doesn't rely on tacit knowledge of\ndevelopment teams it allows access to an\naccurate historical record of System\nstate for project management and audit\npurposes\nso with configuration management you\novercome the following challenges you\nfigure out which components to change\nand when the requirement changes you\nalso redo an implementation because the\nrequirements have changed since the last\nimplementation you can also revert to a\nprevious version of the component if you\nhave replaced it with new but flawed\nversions and finally you can replace the\nwrong component just in case you\ncouldn't accurately determine which\ncomponents needed replacing so now in an\nautomated scenario Dave passes updates\nto Sam and scaling up is no longer an\nissue and adding 200 more servers as\nsaid by the manager is not really a\nproblem with the help of configuration\nmanagement\nSam can easily scale deploy and\nconfigure as many servers as his manager\nwants the best example for this that I\nknow is that of the New York Stock\nExchange a software glitch had prevented\nthe NYSE from Trading stocks for almost\nan hour and a half that is 90 minutes\nthis led to millions of dollars of loss\na new software installation was actually\nthe cause of this problem the software\nwas installed on eight of nyse's 20\ntrading terminals however despite being\ntested out the night before it failed to\noperate in the morning properly on its\neight terminals so there was a need to\nswitch back to the old software as a\nresult of proper configuration\nmanagement\nNYSC recovered from that situation in 90\nminutes which is pretty fast for a\nscenario like this had the problem\ncontinued longer the consequence would\nhave been far more severe now I hope you\nunderstand the importance of\nconfiguration management which is\nconsidered the back backbone of devops\nit allows more frequent software\nreleases in the safest and most reliable\nway possible configuration management is\nall about bringing in consistency in the\ninfrastructure it is done by ensuring\nthat the current design System state and\nenvironment is known trusted and agreed\nupon by everyone it also helps record\nall the changes made in the system\nconfiguration management tools provide\nan easy approach to manage and configure\nservers it enables users to manage and\nconfigure the entire infrastructure and\nits environment it makes writing\nindividual scripts for servers time and\ntime again just to get little things\ndone Obsolete and it does so by one\nConcept in particular infrastructure as\ncode now here is a shell script and a\nconfiguration management tool script\nthat you see in front of you both are\nadding a user to a host but while the CM\ntool script is easy to understand and\nwrite as you can see it's almost pure\nEnglish the shell script is harder to\nunderstand and you'll have to learn to\nwrite shell scripts of your own in the\nfirst place now infrastructure as code\nenables the automation of it operations\nwhich is to build deploy and manage by\nprovisioning of code rather than\nmanually handling each phase of\ndifferent environments basically what it\ndoes is that it Bridges the environment\ndifferences CIS admins have encountered\nevery time they had either tried to\ndeploy new code or set up new servers\nand it obviously has its own advantages\nfor example provisioning servers using\ninfrastructure as code is way easier\nthan writing shell scripts shell scripts\nwill require workflow definitions as you\njust saw whereas the CM tool scripts\nhave predefined workflows so that\nbasically makes the CM tool script easy\nto understand and write while\neliminating the requirement for learning\nhow to write shell scripts separately\nnow there are a few very popular\nconfiguration management tools such as\nsalt stack ansible CF engine and chef\nbut the one that we want to talk about\ntoday is puppet\nnow puppet is a configuration management\ntool that helps orchestrate provision\ndeploy and configure the entire\ninfrastructure of an organization it\nenables users to concentrate more on\nmaking delivery faster and more reliable\nrather than continually fixing mistakes\nit defines distinct configurations for\neach and every host and continuously\nchecks and confirms whether the required\nconfiguration is in place and is not\naltered and if altered puppet\nimmediately reverts back to the required\nconfiguration on the host it also helps\nin Dynamic scaling up and scaling down\nof machines while providing control over\nall of your configured machine so a\ncentralized or a master server or repo\nbased change gets propagated to all\nautomatically so puppet uses a Master\nSlave architecture the diagram in front\nof you depicts what basically happens\nso let me break it down for you a little\nbit there's something known as a puppet\nagent which sends facts to the Puppet\nMaster the facts are basically your key\nvalue data pair that represents some\naspect of the slave state like its IP\naddress its uptime operating systems or\nwhether it's a virtual machine or not\nthe Puppet Master uses these facts to\ncompile a catalog that defines how the\nslave should be configured the catalog\nis a document that describes the desired\nstate for each source that the Puppet\nMaster manages honestly and finally the\npuppet slave reports back to the master\nindicating that the configuration is\ncomplete which is visible in the puppet\ndashboard the Puppet Master Slave\ncommunicate with each other through a\nsecure encrypted Channel with the help\nof SSL the puppet slave asks for the\nPuppet Master certificate after\nreceiving the Puppet Master certificate\nthe master request for a sleep\ncertificate once master has signed the\nslave certificate the slave request for\nconfiguration or data and finally the\nPuppet Master sends the configuration to\nthe puppet slave and that is how this\narchitecture works now let us take a\nlook at a few important puppet\ncomponents starting out we have\nmanifests now each slave has got its\nconfiguration details in Puppet Master\nwritten in the native puppet language\nthese details are written in the\nlanguage which puppet can understand and\nthese are termed as manifests now they\nare composed of puppet code and their\nfile names using the dot PP extension\nthey are basically like programs of\npuppet for example you can write a\nmanifest in puppet master that creates a\nfile and installs Apache server on all\npuppet slaves connected to the Puppet\nMaster next you have a module now puppet\nmodule is a collection of manifests and\ndata such as your fax files templates\nEtc and they have a specific directory\nstructure modules are used for\norganizing your puppet code because they\nallow you to split your code into\nmultiple manifests hence they are also\nknown as self-contained bundles of code\nand data now the next component of\npuppet is a resource now resources are\nthe fundamental unit for a modeling\nsystem configuration each resource\ndescribes some aspect of a system like a\nspecific service or a package next you\nhave a factor which gathers your basic\ninformation or facts about a puppet\nslave such as Hardware details network\nsettings operating system type version\nIP addresses Mac addresses SSH keys and\nmore these packs are then made available\nin Puppet Masters manifests as variables\nthen you have something known as an M\nCollective it is a framework that allows\nseveral jobs to be executed in parallel\non multiple slaves it performs various\nfunctions such as interacting with\nclusters of slaves whether in small\ngroups or very large deployments using a\nbroadcast Paradigm to distribute\nrequests where all slaves receive all\nrequests at the same time requests have\nfilters attached and only slaves\nmatching the filter can act upon the\nrequests you can also use Simple command\nline tool tools to call the remote\nslaves and write custom reports about\nyour infrastructure using the M\nCollective next and the final component\nI'm going to talk about is a catalog\nwhich basically describes the desired\nstate of each manage resource on a slave\nit is a compilation of all the resources\nthat the Puppet Master applies to a\ngiven slave as well as the relationships\nbetween those resources now catalogs are\ncompiled by a puppet master from\nmanifests and slave provided data which\nincludes fax certificates and\nenvironment if one is provided as well\nas an optional external data such as an\nexternal slave classifier exported\nresources and functions the master then\nserves the compiled catalog to the slave\nwhen requested now that you know about\npuppet its architecture and the various\ncomponents of puppet let's understand\nwhy should you opt for puppet or a\nconfiguration management tool like\npuppet now if you're a poker Enthusiast\nor a card enthusiast or you've ever\nplayed online games then you must have\nheard about something called Zynga it's\nthe world largest social game developer\nits infrastructure uses tens of\nthousands of servers in both public\ncloud and private data centers early on\nthey were using manual processes\nincluding kickstarters and post installs\nto get hundreds of servers online now\nduring the process they faced a number\nof different problems first of all was\nscalability and consistency the platform\nwas experiencing phenomenal growth and\nits infrastructure needed to keep Pace\nwith the industry script based Solutions\nand manual approaches were not really\nsufficient for these needs the second\nproblem they were facing was portable\ninfrastructure Zynga needed a way to\nleverage a consistent configuration\nmanagement approach in both their public\nCloud infrastructure and their own data\ncenters now given the diversity of the\nvarious Zynga gaming properties it was\nimportant for the team to be able to\nquickly match the right configuration to\nthe right machine hence flexibility\nturned out to be another problem and\nfinally infrastructure insights as the\norganization matured it became more\nimportant to have an automated method of\nvisualizing the properties of each\nmachine now this company was smart\nenough to quickly realize the need for\nan automated process even before they\nhit rapid scaling and that's when they\ngot puppet into the picture\nso with puppet the first thing they\ncould expect was speed of recovery the\nproduction operations team could rapidly\ndeploy the right configuration to the\nright box if a system got\ninappropriately reconfigured puppet\nautomatically reverted it back to its\nlast stable State and provided the\ndetails necessary to manually remediate\na system rapidly the next thing was the\nspeed of deployment apart from the speed\nof recovery the speed of deployment was\nalso increased manifold puppet provided\nsignificant Time Savings in a way the\noperations team delivered services for\nthe gaming Studios the next benefit of\nusing puppet was consistency of servers\npuppets model driven framework ensured\nconsistent deployments according to Mark\nStockford who is the vice president of\nproduction operations at Zynga it was\nevident that they had experienced many\nways to save time the beauty of using\npuppet is that according to him was that\nit allowed them to deliver consistent\nconfiguration patients across their\nservers in a very short period every\ntime and finally having a model\ndifferent approach using puppet made it\neasy for them to share configurations\nacross the organization which helped\nenable developers and operations teams\nto work together and ensure new Service\ndelivery was of extremely high quality\nhence it furthered collaboration over a\ndozen people from the team got trained\nin puppet this knowledge had been\ndisseminated throughout the team under\nthe operations team within each\nindividual gaming studio so speed of\nrecovery speed of deployment consistency\nof servers and collaboration were the\nfour main benefits of having used puppet\nso first of all guys this is my AWS\nManagement console I am going to launch\na virtual machine with ec2 using this\noption\nall right here I'm going to pick my Ami\njust filtering it out to free tier only\nand if you go down\nyou'll get an option of Ubuntu Server\n18.04 which I am going to select\nand once you've chosen your Ami in type\nI'm going to choose the t2 micro\nand next move on to configure instance\ndetails all right so the number of\ninstances we'll be needing is two one\nfor master and one for agent\nso going on next to add storage add tags\nthis is unnecessary you could obviously\ngo ahead and add tags for yourself but I\ndon't find it significant for this\nparticular demonstration so I'm going to\nmove on straight to configure Security\nGroup\nso here what I'm going to do is I'm\ngoing to add Rule and what we need right\nnow is something that will allow all TCP\nconnections for our agent\nso I'm going to go ahead and click on\nTCP or you can always go ahead and use a\ncustom TCP for your agent\nokay so I'm going to do that and here\nselect from anywhere all right and once\nI am done with this I am going to review\nand launch\nokay\nso basically I created a new key pair\nand I launched the instances now your\ninstances are going to be launched in a\nwhile\nokay\nso all right what I'm going to do is I'm\ngoing to edit the names of both of the\ninstances I'm going to name one as\nmaster\nand I'm going to name the other one as\nslave\nall right\nso both the instances are running we'll\nstart with the master first so now that\nwe have connected to our machines using\nputty we're going to start by installing\nntp date packages to sync all the date\nand time on your servers so first\nwe're gonna sudo apt update\nand then we are going to apt install\nyour\nntp date\nnow what you need to take care of while\nrunning these commands that all of your\ncommands in this installation are run as\nroot\nso all of your commands are going to\nproceed by sudo\nall right now we have installed our\nintimidate packages and synced our data\ntime on our servers and all of this is\nbeing done in your master machine next\nwe are going to set up hosts file on our\nmachines and remember to run all these\nthree commands on both of your machines\nright so now on our masters we're going\nto edit the host file and add the IP\naddress of the master itself in the\nhosts file and name it puppet\nso we're gonna open Nano\nall right\non the master we're going to edit the\nhost file and add the IP address of the\nmaster itself and we are going to name\nit puppet\nand in the agent we are again going to\ngo\nand Nano again we're going to open the\nhosts file\nadd the master\nand add the puppet agent\nand then we're going to write out of\nboth\nokay\nnext what we're gonna do is we are going\nto add puppetrepo or repositories on\nboth of your machines so your puppet\nuses Port 8140 to communicate through\nSSL and we are going to open it through\nthe ufw command so ufw enable\nand then click on why all right\nand then ufw\nand we are going to allow our port\nnumber 8140\nall right and remember to do that on all\nof your machines that we are using right\nso here again\nufw enable\nand ufw allow 8140\nokay\nnow we're going to add the puppet 6\nrepository on all of the machines\nso we're going to app update first\nwe're going to get our puppet 6 package\nand we are going to update our system\nagain\nand we're going to be doing the same\nthing on all of the machines that we\nhave right\nall right moving on we are going to\ninstall the puppet server on the Master\nmachine so for that we are going to apt\ninstall\nan extension y your puppet server okay\nnow after this installation what we're\ngoing to do is we're going to change the\nmemory allocation for the puppet server\nNow the default setting is 2GB\nso we are going to basically set it to\nhalf of it or one-fourth of it which is\n1GB or 500 MB according to the memory\nallocated to your particular VM that you\nhave whipped up all right\nso\nonce this is done what I'm going to do\nis I'm going to open the default puppet\nserver file and change one line\nall right\nso everything is pretty simply explained\nhere here we have this one line which\nsays modify this if you would like to\nchange the memory allocation enable jmx\nEtc so here we have our 2GB which we are\ngoing to change to 1G also remember you\ncan change it to\n502 MB as well yeah so it's either half\nor one fourth and remember to press I\nbefore you try to make any edits to it\ngo into insert mode remember to be\nlogged in as a root user\nso I'm going to click on escape to get\nout of insert mode now you can see I'm\nnot able to insert anything\nright and then I'm just going to\nexit it\nall right next what we have to do is\nedit our configuration file of puppet\nso we're going to Puppet Labs and puppet\nDot\nconf\nconf\nokay\nso here you will have to add the\nfollowing lines just going to add\nMain\ncert name equals puppet\nserver equals puppet\nenvironment will be production\nand the Run interval\nthen I'm going to escape and\nget out of this\nnow that you have edited the\nconfiguration file you're going to need\nto set up the puppet server certificate\nso for that\nyou have to type\nyou have to go to Puppet Labs\nand certificate setup\nand this might take some time and once\nit's done you can start and enable your\npuppet server so we're going to do a\nsystem CTL\nstart puppet server\nfollowed by systemctl enable puppet\nserver\nso now that we've started it we are\ngoing to enable it\nall right now you can see something\nalong the lines of executing and your\npuppet server is enabled now this was\nall about setting up the puppet server\non the master\nso now we are going to install the\npuppet agent the same way that we\ninstalled the puppet server by using apt\ninstall\nand now since I'm using an AWS instance\nyou can see this takes very little time\nas opposed to if I were using an actual\nVM yeah so now I'm going to go into the\npuppet configuration file on the agent\nmachine and\nmake a few changes\nI think I forgot a space here all right\nwe are here hit the eye so you can make\nedits in there\nlike we had done previously we have main\nwe have\ncertification name we have\nserver\nwe have environment and runtime\nso sort name will be\npuppet agent\nserver will be puppet\nenvironment will be production\nand run interval will be 15 minutes\nwe're going to hit escape and we're\ngonna quit the vi editor\nnext what we're going to do is we are\ngoing to start and enable the puppet\nserver on the agent machine\nso for that we're going to use this\ncommand\nop slash puppet lab slash bin slash\npuppet you're going to call resource\nservice you can call the master ensure\nit's running\nand enabled so now you can see that your\nservice that is puppet it's running it's\nenabled and you can see its provider now\nrunning the puppet service on the agents\nwill generate send the certificate for\nauthentication on the master server so\nnow we're going to move on to signing\nthe certificate right we had seen this\nin our architecture section for that\nwe'll first\nmove on to our Master machine\nokay so finally here's\nan extra bit which is signing the\ncertificate\nthis is a small little section which\nconsists of not more than three commands\nfirst of all you're going to list all\nthe certificates left for signing on the\nMaster machine\nfor that you're going to use the puppet\nserver CA list command then you can\nchoose either to individually sign the\ncertificate or all of them together so\nyou can either use this command and put\nthe sort name or you can do a hyphen all\nand to verify\nyou can open the agent and use the test\ncommand and with that your puppet\ninstallation and setup is complete\n[Music]\nwhat is ansible well ansible is a simple\nopen source ID engine which automates\nthe application deployment infra service\norchestration cloud provisioning and\nmany other I.T tools not only this but\nansible also is very easy to deploy\nbecause it does not use any agent or\nCustom Security infrastructures so\nansible uses Playbook to describe\nautomation jobs and playbooks use very\nsimple language that is the yaml so what\ndo you think this yaml is well yaml is a\nhuman readable data serialization\nlanguage and is commonly used for\nconfiguration files but it can be also\nused for many applications where data is\nalso stored so this means it is very\neasy for the humans to understand read\nand write isn't it so the advantage of\nyaml file is that even the it\ninfrastructure support guys can read and\nunderstand the Playbook and debug if\nneeded so it's basically a really simple\nlanguage and makes it really easy for\nthe humans to read write and understand\nnow moving on with the session as\nansible is designed for the multi-trade\ndeployments ansible does not manage one\nsystem at a time it models the it\ninfrastructure by describing all of your\nsystems which are interrelated so\nansible is completely agentless which\nmeans that ansible works by connecting\nyour nodes to SSH by default but if you\nwant any other method for connection\nlike curve loss ansible also gives you\nthat option so after connecting your\nnodes ansible pushes some small programs\ncalled as the ansible modules and\nansible runs that modules on your notes\nand removes them when they are finished\nso it also manages your inventory in\nsimple text files those are basically\nthe host files that you can see on the\nscreen where ansible uses the host files\nwhere one can group the host and control\nthe actions on a specified group in the\nplaybooks right\nnext as I was telling you about ansible\nand ansible is the tool for\nconfiguration management you should also\nunderstand configuration management\nbefore you understand how to deploy it\nwith the tools so talking about\nconfiguration management configuration\nManagement in terms of ansible means\nthat it maintains the configuration of a\nproduct performance by keeping a record\nand updating detailed information which\ndescribes an Enterprise hardware and\nsoftware so such information typically\nincludes the exact versions and updates\nthat have been applied to install\nsoftware packages and the locations and\nalso the network addresses of the\nhardware devices so for example if you\nwant to install the new version of the\nweblogic server on all the machines\npresent in your Enterprise it is not\nfeasible for you to manually go and\nupdate each and every machine right so\nyou can install the weblogic server in\none Co on all your machines with the\nansible playbooks and inventory written\nin most simple way so all you have to do\nis that you have to list out the IP\naddresses of your notes in the inventory\nand write a Playbook to install the\nweblogic server after that you have to\nrun the Playbook from your control\nmachine and then it will be installed on\nall your nodes so guys now that you've\nseen what configuration management is\nlet me show you how does ansible work so\nbasically ansible works by connecting\nyour notes and pushing out small\nprograms called as ansible modules to\nthem so ansible then executes these\nmodules over SSH by default and then\nremoves them when finished so your\nlibrary of modules can decide on any one\nmachine and there are no servers emails\nor databases required so the management\nknow that you can see on the screen is\nbasically the controlling node which\ncontrols the entire execution of the\nPlaybook it's the node from which you're\nrunning the installation and the\ninventory file provides the list of the\nhost where the ansible module needs to\nbe run and the management node does a\nSSH connection and then it executes\nthese small modules on the host machine\nand installs the product\nso the beauty of ansible is that it\nremoves the modules once those are\ninstalled so that it effectively\nconnects to the host machine and then it\nexecutes those instructions and if it's\nsuccessfully installed then it removes\nthe code which was already copied on the\nhost machine and that was which was\nexecuted so guys that's how ansible\nworks\nnow if you talk about the features of\nansible let's take a look at them one by\none so the first is that it is agentless\nby agentless I mean that there's no kind\nof software or any kind of agent\nmanaging your note unlike puppet or Chef\nwhere you need to install a puppet agent\nor a chef client on all your note\nmachines but for ansible what you just\nhave to do is you just have to install\nansible in your control machine and then\nyou're good to go after that it is built\non top of python and this helps to\nprovide a lot of functionalities of\npython right now coming to SSH ansible\nuses SSH for secure connections now SSH\nis a very simple passwordless Network\nAuthentication Protocol which is very\nsecure so our responsibility is to just\ngenerate a public key in your control\nmachine and copy the same key onto your\nnode machines so coming to the final\nfeature the ansible is also push-based\narchitecture for sending configurations\nso in the case of ansible where you want\nto make any kind of configuration\nchanges on your notes all you have to do\nis you just have to write down those\nconfigurations and then you just have to\npush them all at once in your notes so\nif you talk in simple terms what it does\nis that it gives you full control on\nwhenever you want to make changes on\nyour notes and also makes it very easy\nand fast to set up and needs very\nminimal requirements so guys the\nfeatures of ansible are it's agentless\nit's built on top of python it uses SSH\nand also uses the push-based\narchitecture\nnow as in the features section I was\ntalking about that ansible is a\npush-based architecture what do you\nthink is the difference between the\npush-based architecture and the pool\nbased architecture well tools like\npuppet and Chef are basically pull based\nconfiguration management tools whereas\nansible is push-based configuration\nmanagement tool now in the case of\npuppet and Chef their agents present the\nagent software that puppet has and is\nbasically called the puppet agent and in\ncase of Chef it is known as the chef\nclient so what this agent actually does\nis that it keeps on pulling the central\nserver periodically for any kind of\nconfiguration information and whatever\nit finds it pulls those changes and then\ngets them affected on your node machines\nwhereas in the case of ansible since\nthere are no agents present whenever you\nwant to make any changes you can make\nthose changes directly and you can push\nthose configurations directly whenever\nyou want to as you've got full control\nover it not only this but also in a\npush-based configuration management\nsystem so as you can see on the screen\nthere's a version control system which\nmanages all the changes in the code base\nand then we have a server so basically\nthe server will have ansible or any\nother configuration management tool\nsystem installed there and then we'll\nhave a bunch of nodes so these bunch of\nnodes are basically the collection of\nweb servers and application service and\nalso the database servers and all these\nare connected to the main server via SSH\nnow what happens here is that these main\nservers constantly pull the version\ncontrol system for any changes in the\ncode Base by this I mean that it\nconstantly keeps on checking the status\nof Version Control System at regular\nintervals of time and whenever there are\nany kind of changes so specifications\nare sent to the main server and then the\nserver decides on how to take those\nconfiguration changes according to the\nchanges in the code base now in the\nsituation where you want to write all\nthese new configurations you can\ndirectly push them all at once onto your\nnode machines so you've got full control\nhere and whenever you want to make any\nchanges you can make the required\nchanges now coming to the full base\nconfiguration the relation between the\nversion control system and the central\nserver is the same it basically\nconstantly pulls for the changes to the\nversion control system for any changes\nin the code base and whenever there are\nchanges it pulls those changes but the\nmain difference between both the\narchitectures is that from a push-based\nconfiguration management tool it has got\nan agent present and then this agent or\nthe client is a software that manages\nall the nodes so what this agent does is\nthat it constantly pulls the central\nserver for any configuration changes by\nthis I mean that it keeps on checking\nthe central server for any changes in\nthe configuration that needs to be made\nand whenever it finds any kind of\nconfiguration changes it pulls those\nchanges and then only it gets affected\nonto the node machines so at this point\nyou have to wait for an agent to pull\nthose changes and only then the\nconfiguration changes will get affected\nonto your nodes so the basic point is\nyou have to be a little bit dependent on\nthe agent here and the Improvement tools\nright so as I was chanting from the\nbeginning of the session that ansible is\nreally simple it's very easy to learn\nbecause it gives us the Simplicity of\npush-based system but there's a\ndisadvantage with the system that's\nbecause you cannot achieve full\nautomation with the push-based system\nbecause it's not usually possible to\nboard a server and have it configure\nwithout some sort of client or server\nprotocol and also it gives you a lack of\nscalability as well as when you're\ndealing with hundreds of servers a\npush-based system will start showing its\nlimits unless you make use of trading or\nmulti-processing alright guys so those\nwere the differences between the push\nbased configuration and the pull-based\nconfiguration so ansible is basically a\npush-based configuration management tool\nnow moving on with the session as I've\ntalked so much about ansible you would\nbe interested to install it so how do\nyou think that you can install ansible\nso before I start telling you the steps\nto install ansible let me tell you that\nthere are basically two types of machine\nwhen we talk about deployment those are\nthe control machine and the remote\nmachines so the control machines are the\nmachines from where we can manage other\nmachines and the remote machines are\nghost machines which are handled or\ncontrolled by the control machine so\nthey can be multiple remote machines\nwhich are handled by a single control\nmachine so for managing remote machines\nwe have to install the ansible on the\ncontrol machine so now let me tell you\nthe steps to install ansible so for that\nyou just have to type in the command\nsudo apt hyphen get update\nso this command will basically update\nyour repositories now once that is done\nyou have to you know install the common\nsoftware properties so for that you'll\ntype in the command sudo apt hyphen get\ninstall software hyphen properties\nhyphen common so you can see that you\nknow on the screen that your\ninstallation is going on now once that\nis done you'll type in the command sudo\napt hyphen add hyphen Repository\nspace PPA colon ansible slash ansible\nso this will basically include your\nansible's repository so you can see a\ndescription about ansible\nnow if you want to continue you just\nhave to press on enter so once you press\non enter you can see that unit is\ngetting continued now once this is done\nyou again have to update your\nrepositories so for that type in the\ncommand sudo apt get update\nnow once you're done updating your\nrepositories you have to install ansible\nso for that you'll type in the command\nsudo apt hyphen get install and simple\nso this will basically install the\nansible tool\nso you can see that your ansible has\nbeen installed so guys that's how you\ncan install ansible\nnow let's move on with the session so\nnow let me just give you a summary of\nthe commands that you need when you\ninstall ansible you just have to update\nyour repositories once you're done with\nthat you have to install the common\nsoftware properties once that is also\ndone you'll add a new repository on the\nname of ansible and then you'll update\nyour own repositories and then finally\nyou'll install ansible so these are the\ncommands that you have to use now moving\non with the session what do you think\nthis host inventory is well inventory\ndefines a group of hosts which are alike\nin anyway so for example you would want\nto group your web servers in one group\nand application service in another right\nso group can have multiple servers or a\nsingle server that can be a part of\nmultiple groups so the name of the group\nis enclosed in square brackets and the\nserver names can be their DNS names or\nIP addresses so by default ansible looks\nat the inventory file but that can be\nmodified by passing the inventory part\nto the ansible command line so we can\nmodify the way ansible connects to our\nhost by supplying the additional\ninformation in the inventory file so as\nyou can see on the screen this is just a\nlist of IP addresses on my notes and\nalso you can name the groups of your\ndifferent IP addresses so for example if\nI want to group my web servers together\nand my data servers together all I have\nto do is I have to write a group name\nbetween the two square brackets and a\nbig group together so whenever you want\nto make configuration changes just on\nthe web server and not on the database\nserver all you have to do is you just\nhave to mention the group name on the\nhost and then it will automatically\nconfigure your web server so guys that\nwas about host inventory now if you talk\nabout another key term in ansible that\nis ansible modules so model are those\nexecutable plugins that get the real job\ndone so usually modules can take the key\nvalue arguments and run in a customized\nway depending upon the arguments\nthemselves so a module can be invoked by\ncommand line or can be included in the\nansible Playbook now let me tell you\nsome commands related to ansible modules\nnow if you want to use the modules from\ncommand line you have to type in the\ncommand ansible all hyphen amping now if\nyou want to use the Ping module to Ping\nall the hosts defined in the inventory\nthen you have to type in the Command\nansible Web servers hyphen M command\nhyphen a LS so this will basically list\nall the modules present and then it will\nping now if you want to flush iptable\nrules on all the hosts in the inventory\nthen you have to type in the command\nansible hyphen I inventory all hyphen M\ncommand hyphen a iptables f hyphen knife\nand Bikram hyphen iPhone ask hyphen\nBeckham hyphen pass so this will\nbasically tell ansible to execute the\ncommand with pseudo privileges\nso if you're more than people to gather\nfacts about the host then you have to\ntype in the command ansible all hyphen M\nsetup and also if you want to extract\nparticular facts in the documentation of\nthe setup module you have to type in the\ncommand ansible hyphen doc setup so Guys\nthese few commands that you can use with\nansible modules\nnow moving on with the session let me\ntell you about the yaml files because\nthat is the file that has been used so\nansible uses yaml Syntax for expressing\nansible playbooks ants will use a CML\nbecause it's really simple for humans to\nunderstand read and write when compared\nto the other data formats like XML or\nJson so every AML file optionally starts\nwith three hyphens and ends with three\ndots so as you can see on the screen\nhere it starts with three hyphens and\nends with three dots now you can also\nuse abbreviation in yamls to represent\ndictionaries so as you can see on the\nscreen it basically follows the pattern\nof a key value pair so here the key\nvalue is James and it has various values\nlike its name row number division sex\neverything so the key James has many\nvalues like the name James John the roll\nnumber to be 34 the division to be B and\nthe sex to be male not only this but we\ncan also represent the list in yaml file\nso every element of the list should be\nwritten in a new file with the same\nindentation Asians starting with the\nhyphen and a space so for example as you\ncan see on the screen after writing\ncountries we have written America with\nthe hyphen and the space and then the\nnext value comes in the next line with\nthe hyphen and a space that is China\nsimilarly Canada and Iceland so if you\nhave to represent this list in an\nabbreviation form it can be represented\nin the form of countries colon and in a\nsquare bracket you can type in America\nChina Canada and Iceland right now\nfurther talking about yaml files you can\nalso represent a list of dictionaries so\nyaml uses the pipeline to include new\nlines while showing multiple lines and\nuses the greater than symbol to suppress\nnew lines while showing multiple lines\nso due to this we can read and edit\nlarge lines and in both the cases\nindentations are ignored so guys that\nwas about the yaml files now talking\nabout ansible playbooks let me tell you\nhow to write an ansible Playbook but\nbefore that let's see what exactly\nansible Playbook is so as I've told you\nbefore that the playbooks are the files\nwhere ansible code is written and these\nare written in the yaml format so yaml\nstands for yet another markup language\nand playbooks are one of the core\nfeatures of ansible and tell ansible\nwhat to execute so they're like the\nto-do lists for ansible that contains a\nlist of tasks and playbooks contains the\nstep which the user wants to execute on\na particular machine so playbooks run\nsequentially and playbooks are the\nbuilding blocks for all the use cases of\nansible so each Playbook is an\naggregation of one or more plays in it\nand playbooks are structured using the\nplace so they can be more than a plain\nset of Playbook and the function of a\nplace to map a set of instructions\ndefined against the particular host so\nsince the ml is a strict type of\nlanguage we need to take Extra Care\nwhile writing the yaml files so now let\nme tell you how can we create a Playbook\nso as I mentioned before Yaman starts\nwith three hyphens and then we have\ndifferent yaml tags so now let's go\nthrough each and every yaml tag so the\ndifferent tags that are included are the\nname hosts words and tasks so the name\ntag specifies the name of the ansible\nbook so basically I'm talking about as\nin what this Playbook will be doing or\nany logical name that can be given to\nthis Playbook coming to the host tag the\nhost tag specifies the list of host or\nthe host group against which we want to\nrun the task the host field or tag is\nmandatory and it tells ansible on which\nhost to run the listed task so the task\ncan run on the same machine or on a\nremote machine and one can run the task\non multiple machines and hence the host\ntax can have a group of host entry as\nwell coming to the vars stack the vars\ntag lets you define the variables which\nyou can use in your playbook and usage\nis very similar to the variables in any\nprogramming language\nnow coming to the final task that is the\ntask all the playbooks should contain\ntasks or a list of tasks to be executed\nso the tasks are the list of actions one\nneeds to perform so task field contains\nthe name of the task and this works as a\nhelp text for the user well it's not\nmandatory but proves useful in debugging\nThe Playbook so age task internally\nlinks to a piece of code called module\nnow let's move on to the Hands-On part\nwhere we'll basically you know create a\nPlaybook and then I'll show you the\nworking of ansible so let's get started\nwith our Hands-On part so first we have\nto create an SSH connection right to\ncreate an SSH connection with the node\nso for that you have to type in the\ncommand SSH hyphen Keygen so this will\nbasically you know generate your key so\nonce you type in the command you can see\nan output that it is generating a RSA\nkey pair now if you have to mention the\ndirectory where you want to store the\nkey but if you press enter it will it\nwill store it as a default location so\nlet me just press enter and once you\npress enter you can see an output that\nit has created a directory for SSH now\nyou have to enter the pass phrase so for\nthat let me just press enter again and\nagain we have to mention the same pass\nphrase so for that let me just mention\nit again and you can see that you know\nour key has been generated\nall right now once your key has been\ngenerated you have to create an host\ninventory file so we're creating a host\ninventory file so that we mention the\nspecifications of the node IP address\nthat we want to connect with so for that\nyou'll type in the command so for that\nyou'll type in the command sudo and then\nyou'll mention the directory of your\nhost so I've just mentioned the\ndirectory and then I'll press on enter\nso it will ask for my password so I'll\nmention the password\nso as you can see on the screen this is\nthe default host inventory file now as\nwe have to mention the name of a servers\nI'll just mention it in the square\nbrackets let's say I mentioned the name\nto be test servers so for that I'll type\nin test servers and then I'll mention\nthe name of the node so let me just type\nin the name of the node so over here my\nname of the node is K node so I've\nmentioned that now once this is done\njust save this file and close this file\nso for that you'll press the keyboard\nshortcut Ctrl X and then press on y so\nthis will save your host inventory file\nso once you're done with that you know\nyou have to mention the SSH generated\nkey in the K note that is the node that\nwe just configured right so for that you\nwill type in the command SSH hyphen copy\nhyphen ID space hyphen I space and the\nname of the node so over here my name of\nthe node is K node once I'm done with\nthat I'll press on enter and you can see\nthat you know it will ask for a\nconfirmation so let's just say yes so\nyou can see the output that our key has\nbeen copied\nonce you're done with that you'll be\nasked for your password so let's just\ntype in the node password and you can\nsee you know your key has been\nsuccessfully added to your node\nnow before I move forward I've just\ncleared my terminal so just in case if\nyou want to know the command the command\nis clear so once you type in clear\nterminal gets cleared now moving on with\nthe Hands-On now once your key has been\ngenerated you have to you know create a\nPlaybook so before I start creating a\nPlaybook let's just check if our test\nservers are running or not so for that\nyou have to type in the command ansible\nspace hyphen M ping and the name of the\nserver so here I've given test servers\nso I'll just type in that command and\nthen I'll press on enter now once this\nis done you can see an output that you\nknow it is successful so now let's start\ncreating playbooks so to start creating\nplaybooks you have to first create a\nyaml file so for that you have to type\nin the command sudo Nano let's say I\ngive the name to be edureka demo dot\nyaml so this opens up IML file now let's\nstart mentioning the specifications\nrequired so first I'll mention the host\nso as I mentioned before that yaml file\nstarts with three hyphens so let me just\nmention three hyphens and then I'll\npress on enter so let's start by\nmentioning the yaml tags so let's start\nwith the host so for that I'll type in\nhyphen host space colon I'll mention the\nname of the server that is the test\nservice\nthen I'll mention Bikram and over here\nyou make sure that you know you do not\nmiss out the space so it has to come in\none go\nand then let's say I put it true then\nI'll mention variables so for that I'll\ntype in the command words and then you\nhave to make sure that you know you're\nmaintaining the syntax so I'll type in\nwords mention a colon and then inside\nwhich I'll type in ansible\nhyphen become hyphen pass colon to\nedureka that is basically our password\nthen I'll again mention task colon space\ncolon and then inside which I'll mention\nthe name that is basically the name of\nthe task so for that I'll type in hyphen\nname space colon install engines\nand then let's mention the package also\nspace colon space PKG is equal to\nengines\nspace state is equal to installed\nand then I'll put in a space and then\nafter that so let me just put in spaces\nand then I'll mention notify colon I'll\npress on enter I'll go inside that I'll\nmention hyphen start engines\nafter that let's press on enter and now\nlet's mention the handlers so for that\nlet's again maintain the spaces\nspace colon inside which will again\nmention the name so for that we'll\nmention name space colon start space\nengines and then mention the service so\nthat is name engines state is equal to\nstart it so guys this was my yaml file\nto create a Playbook so for that I'll\npress the keyboard shortcut Ctrl X and\nthen I'll press on y so this will save\nmy file now once you have saved this\nfile you have to run your playbook so\nfor that you'll type in the command\nansible\nhyphen Playbook\nand the name of the yaml files over here\nit's edirect demo so I'll mention any\nbreaker demo.yaml and then I'll press on\nenter\nso you can see on the screen that the\nPlaybook is running\nso as you can see the Playbook has run\nso basically it mentions name of the\nserver that is the test servers it\nmentions the task so we wanted to\ninstall the engine so it has mentioned\nthe task then it also mentions the\nrunning hand the node that is the K node\nover here and then it also mentions\nwhether it is unreachable failed or not\nso guys this is how Playbook runs now\nonce the Playbook runs it automatically\ninstalls your engines container that is\nbasically the task that we mentioned now\nto check whether it is running on the\nother node or not you have to switch to\nyour other nodes so let me just switch\nto my other node\nnow now to check whether engines has\nbeen installed or not on the other node\nlet's type in the command\nPS walks that is wa ux space pipeline\nspace grep the name of the file that we\ninstall that is engines now let's press\non enter\nso you can see the output that you know\nit has been installed\nso guys that's how ansible basically\nworks it's really simple to do right so\nyou just have to mention on one node and\nall the actions will happen on all the\nother nodes connected to it\nforeign\nlet's start with understanding why\nshould you use terraform there are some\ngreat pre-existing tools like ansible\nChef puppet and salt stack but then what\nmakes terraform better than these tools\nfirst reason is that terraform is a\nserver orchestration tool all the above\nmentioned tools were created for Server\nconfiguration meaning that their primary\ngoal is to install and manage software\non the already existing server terraform\nconcentrates more on server provisioning\nwith software container deployment left\nto Docker and Packer\nthe next reason is the immutable\ninfrastructure\nwhich chefs salt puppet or ansible any\nsoftware update must be run in place\nthus every server grows a unique record\nof updates throughout its life cycle\nthis can quite often lead to so-called\nconfiguration drift when the differences\nin these configurations lead to bugs\nterraform addresses the issues by\nutilizing an immutable infrastructure\napproach where every new update of any\nparameter creates a separate\nconfiguration snapshot this way updating\nthe development environment goes\nsmoothly and is completely bug proof\nthe next reason is the declarative code\nstyle wild Chef or ansible forces you to\nwrite step-by-step procedural\ninstructions for teaching the desired\nState terraform prefer describing the\ndesired each state of the system and the\ntool itself deals with reaching the goal\nstate\nbut why is it better with the procedural\ncode you need to think of all the recent\nevents and processes that took place in\norder to write clear instructions but\nwith terraform you simply order the tool\nto do something with the currently\nactive state of the system this is why\nthe code base remains quite small and\neasily understandable\nthe fourth reason is the client only\narchitecture\nterraform leverages the cloud provider's\nAPI for provisioning the infrastructure\nwhich removes the need of additional\nSecurity checks running a separate\nconfiguration management server and\nmultiple software agents ansible does\nthis by connecting through SSH yet the\ncapabilities are quite Limited\nso what is terraform\nterraform is an open source\ninfrastructure as a code tool developed\nby hashicor it is used to define and\nprovision the complete infrastructure\nusing an easy to learn declarative\nlanguage called HCL or hashicorp\nconfiguration language terraform\nsupports multiple providers such as AWS\nAzure kubernetes Google cloud and many\nmore\nnow let's understand terraform better\nthrough a use case\nRapido is an agile Innovative company\nthey are providers of strategic Cloud\nConsulting Cloud migration devops\nautomation managed services and security\nConsulting\nso once the client was looking for a\ncloud agonistic tool to orchestrate the\ninfrastructure onto multiple public\nclouds they wanted the infrastructure to\nbe up in a matter of few minutes the\nclient had different environments like\nproduction staging and QA to test\ndatabase backups were also included as a\npart of infrastructure setup\ndevops engineers at rapidder debuted and\nanalyzed the client's requirements and\ncame up with a solution of using\nterraform to codify the provisioning of\ninfrastructure onto public Cloud not\nonly infrastructure but rapidly also\nautomated the application deployment\nprocess by integrating gitlab to improve\nthe software development and accelerate\nthe software delivery the solution\nprovided by rapidder also took care of\ndatabase backup for a situation when the\ninfrastructure is destroyed using this\nsolution the client is now able to test\ntheir application and deploy it on\nproduction environment without downtime\nso the overall benefits that a client\ncould experience include the client's\nability to create the infrastructure\nover multiple public clouds within a\nmatter of few minutes next is that the\nclient has the flexibility to launch the\ninfrastructure as and when needed\nfurthermore the automated deployments\nhelp the client push the application\ninto production seamlessly thereby\nreducing the time to Market\nalso the automated backup of the\ndatabase ensures that they always have a\ncopy of their latest database\nmoving ahead let's understand terraform\nlife cycle\nit includes initialize plan apply and\nDestroy terraform init initializes the\nworking directory which consists of all\nthe configuration files terraform plan\nis used to create an execution plan to\nreach a desired state of the\ninfrastructure terraform apply then\nmakes the changes in the infrastructure\nas defined in the plan and the\ninfrastructure comes to the desired\nstate\nterraform destroy is used to delete all\nthe old infrastructure resources which\nare marked tainted after the apply phase\nnow let's see how terraform works\nterraform core uses two input sources to\ndo its job\nthe first input source is a terraform\nconfiguration that you as a user\nconfigure here you define what needs to\nbe created or provisioned the second\ninput source is a state where terraform\nkeeps the up-to-date state of how\ncurrent setup of infrastructure looks\nlike\nso what terraform code does is it takes\nthe input and it figures out a plan of\nwhat needs to be done it compares the\nstate and checks what is the current\nstate and what is the configuration that\nyou desire in the end result it figures\nout what needs to be done to get that\ndesired state in the configuration file\nthe second component of Architecture is\nprovide us for specific Technologies\nthis could be Cloud providers like AWS\nAzure or other infrastructure as a\nservice platform it gives you the\npossibility to create infrastructure on\ndifferent levels terraform has over\nhundreds of providers for different\nTechnologies and each provider then\ngives terraform user access to its\nresources\nfor example AWS provider gives you\naccess to hundreds of AWS resources like\nec2 instances the AWS users Etc with\nkubernetes provider you can access\nCommodities resources like services and\ndeployments namespace Etc\nso this is how terraform works and this\nway it tries to help you provision and\ncover the complete application setup\nfrom infrastructure all the way to the\napplication\nmoving ahead let's see how to install\nterraform\nnow to install terraform let's go to its\nofficial website\nso the system I'm using is a 64-bit\nLinux system so\nI'll install terraform for that I'll\ncopy the link first\nthen what we need to do is open the\nterminal\nthen we write wget and we paste the link\nwe had copied\nand enter\nso now terraform will get installed\nokay so terraform has been installed\nsince it's a zip file let's unzip it now\nand this is the file name let's copy\nthat\nnow let's move terraform to a location\nlet's see what the location will be\nso we'll be moving terraform to this\nlocation\nokay now that it has been successfully\nmoved let's see the terraform version\nthat we have\nso it's 14.5 okay\nso by writing terraform and entering\nyou'll see what all commands terraform\nprovides you\nso these are all the commands it also\nincludes init plan apply destroy as we\ndiscussed before there's something also\ncalled as validate that you can use\nand several other commands\nnow that we have installed terraform in\nour system let's move ahead with our\ndemo\nso let's just clear screen\nokay\nnow what we need to do is we are going\nto create a directory\nand we are going to name it terraform\ndemo\nokay\nso let's move into that directory now\nnow what we are going to do is we are\ngoing to create a configuration file\nterraform configuration file over here\nso let's write G edit and the file name\nso let's name it demo one dot TF so this\nis the extension that we need to put for\nany terraform configuration file that we\nare going to create here and hit enter\nokay so the G edit file terraform\nconfiguration file has been created here\nis where we are going to put all the\nconfiguration we need so initially let's\ntry to create an ec2 instance in Amazon\nweb services and then destroy that ec2\ninstance okay so what we need to do here\nis terraform provides you with\neverything every support that is there\nfor your code online\nso let's say AWS provider\nokay so you can see the usage here this\nis what we need to Define that we want\nto create or use AWS service\nlet's paste this here okay\nso it asks for region access key and\nsecret key so what are access key and\nsecret key here we'll get that from\nAmazon web services let's see how\nso I'm going to create a user over here\nI'm gonna give it terraform\nand I'm going to give it a programmatic\naxis\nalong with that\nadministrator access\nand next\nso let's give this as my demo\nand value as terraform\nokay let's just keep it to terraform\nso this is the summary\nand let's create it\nso user has been created and this CSV\nfile is what we need to download to get\nthe you know the access key and the\nsecret key\nokay\nwe have the file here let's open it\nso this is the access key here let's\ncopy this\nand we are going to paste it here\nand we have the secret key\nagain let's copy and paste it here okay\nso for region let's create this for us\nEast 2 okay now we are going to put what\nresources we need since we are creating\nec2 instance let's\nso what we need is just this part for\nnow for creating our instance let's\npaste it here\nokay so it says we want to create AWS\ninstance let's change this to\nand this Ami is for us to S2\nso every time you change the region Ami\nis going to change so let's find it for\nus East 2.\nso let's check\nso we are on uscs2 right now\nand you can see there are no instances\nrunning\nokay so suppose we want to create an\ninstance we want to launch one\nso here you can see the Ami for\nuscs2 let's copy that\nand we'll paste this here\nokay\nso I think this is enough we don't need\nto add anything else we have provider\nAWS and we have given the region\naxis and secret key\nwe want to create AWS instance\nand Ami and instance type as T2 micro\nlet's keep it that way okay\nlet's save the file\nand close it\nnow let's go back to the terminal\nand now what we are going to do is\ninitialize it\nthen let's apply terraform plan\nokay you can see here one in the plan\nwhich is the easy two instance we want\nto create\nand then finally terraform apply\nso it asks for an approval from you so\nyou just write yes over here\nokay it says one added let's go back to\nAWS and see\nif the ec2 instance in Us East 2 has\nbeen created\nokay so you can see the instance has\nbeen created here\nokay yeah so one instance is running and\nwe are in USC's too so the instance has\nbeen created\nokay\nnow what we need to do is we want to\ndestroy this instance that we have\ncreated now simply what we need to do\nhere is terraform\ndestroy and this will destroy that\ninstance\nokay you can see one destroyed over here\nlet's see if it has been destroyed\nso you can see we had an instance over\nhere but it has been destroyed now\nso this was a very simple and basic demo\nthat I have shown you here\nnow let's do something a little more\ncomplicated let's try to add some more\nservices that AWS provides you\nso let's clear the screen okay\nnow what I'm gonna do is we have the\nsame G edit file over here you can see\nthe demo one\nokay so we have written a code partially\nwe heard let's include some more things\nand additional features in this code\nitself so just remember that this\ninstance has been already destroyed so\nwhile we initialize plan and apply this\ninstance is going to be created again if\nwe keep this code okay\nso I want to create this instance again\nbut apart from that what I want to do is\nI want to create another ec2 instance in\nsome another region so let's see how to\ndo that\nfor that let's copy this okay so all I\nneed to do is suppose I want to create\nanother instance in the US East one so\nlet's change this the access key secret\nkey is going to remain same because we\nare making it through the same user okay\nlet's create another resource here\nbecause we want to create one more\ninstance\nokay let's name this Something Like Us\nEast one\nokay and just remember the Ami is going\nto change for us East one okay so let's\nsearch for that Ami now\nokay\nyeah okay there is no instance over here\nso suppose we want to create one\nso you can see the Ami here for Linux so\nlet's copy this and\nso this is the US East one let's paste\nthis here so you can see the Ami divorce\nfrom region to region okay\nso we have done this now what we need to\ndo is how will this resource understand\nthat it wants to create an ec2 instance\nin Us East one so for that what we are\ngoing to do is we are going to create an\nalias\nso let's put this as\nokay so this is done we have added the\nAlias over here\nso let's refer this to this part okay\nthis Alias that we have created how we\nare going to do that is by\nwriting provider is equal to AWS Dot\nwhatever Alias we have provided here\ncopy paste it\nokay\nso this is done\nnow apart from this let's see we want to\ncreate an S3\nso\nokay S3 bucket\nokay so for S3 this is what we need\nso let's copy these\nand paste it here okay so let's change\nthis to\nsomething let's keep this\nso one thing to remember is that the\nbucket name has to be unique so let's\ntry to make a unique name over here\nokay let's keep this let ACL be private\nlet's change this to my terraform bucket\nand let's keep this\nDebbie and me okay apart from this what\nwe are going to do is we are going to\nadd versioning over here\nso why we are adding versioning here is\nbecause we want to preserve retrieve and\nrestore every version of every object\nstored in our Amazon S3 bucket so that's\nthe reason we have added the versioning\nblock over here okay so looks fine\nlet's save this\nokay so we have one ec2 instance in Us\nEast 2 another in Us East one and one S3\nbucket so remember that in case of Us\nEast 2 we haven't used any areas so what\nit is going to do is it is going to\nrefer to this default one where there\nare no Alias nothing provided for it you\nknow to refer so it's going to refer\nthis by default uses too okay let's save\nthis\nand let's close this\nokay\nlet's open the terminal and\nlet's initialize again\nthen plan\nokay so you can see three over here to\nec21s3\nlet's apply it\nokay so you can see three added\nlet's check it now in AWS\nokay so we are in U.S east one so we\nwill have one ec2 here\nokay so we can see one instance running\nokay so we have one instance running\nover here let's check it in Us East 2\nokay so we have one instance\nsuccessfully running over here as well\nand let's check our S3 bucket\nokay so you can see\nwe have one S3 bucket created over here\nsuccessfully great\nnow let's say we want to add a VPC one\nsubnet and also want to create\nrelational database system okay so more\nthree things VPC subnet and RDS\nso what we can do is we can actually add\nto this rather than creating another\nfile\nso let's open this again\nokay\nSo Below this let's start adding but one\nthing to remember is that we haven't\ndestroyed any of this yet the two ec2\ninstances and S3 we haven't destroyed\nthem so what we are going to do is we\nare going to add to this okay so what we\nare going to add let's start with VPC\nso\nokay\nso let's copy this this is what we need\nto create a VPC\nand paste it here below\nokay so it says resource we want to\ncreate is AWS VPC let's give this a name\nas\nDev\nokay cider block okay let's keep this\nand let's keep this default okay let's\nchange the tag name to something else\nlet's keep it\nDev VPC okay\nso that's done now suppose you also want\nto create subnet\nso let's search for that\nokay let's copy this\nand paste it here\nlet's again change a little bit\nlet's give it an EMS sub let's keep the\nside a block same\nand let's change it to Dev\nsubnet okay\nso one thing to see over here is we need\nVPC ID over here but since we haven't\ncreated a VPC yet how will we give the\nVPC ID over here so there is a way to do\nthat so what we are going to do is let's\njust copy the whole thing that we have\nover here copy this\nand paste it here\nwe don't want the double inverted commas\nokay\nso this is how we are going to give the\nVPC ID to our subnet okay it's the same\nas this over here just AWS VPC dot Dev\ndot ID okay this is how it will get the\nID of the VPC okay so this is done apart\nfrom that as we said suppose we want to\ncreate RDS let's see what to do for that\nso you can see the basic usage here\nlet's copy this\nand let's make some changes\nwe want engine version as 8 point\n0.19\nokay\nand let's change this to eight point\nzero\nokay\nso we are going to add one more line\nover here which is we don't want to\ncreate a snapshot of this RDS that we\nare creating okay suppose this is some\ndummy RDS that we have created we don't\nwant any backup for this so we are going\nto provide it that\nwe don't want a snapshot okay\nokay\nso we have written Skip's final snapshot\nand we have kept it true okay so it\nwon't create a snapshot\nokay so that is done\nlet's maybe change the name to my\nterraform DB okay\nusername let's keep this the same okay\nthis is just an example so overall what\nall we have added to this we have\ncreated one VPC subnet and RDS let's\nsave this\nokay and close it\nlet's go back to the terminal\nand initialize it\nthen terraform plan\nokay so you can see here that three to\nadd\nso we already have two ec2 1s3 and apart\nfrom that we are adding one VPC subnet\nand RDS okay so let's apply\nokay so we can see three added let's go\nand check\nlet's check this in our AWS console\nso we can see that S3 is still running\nthe one we had created before so the\nthree things we have created now is VPC\nsubnet\nand RDS okay let's check those now\nso we can see the VPC we have created is\nnow available it's running and this one\nis a default VPC that was already\npresent apart from that let's check\nsubnets\nso see our subnet is present over here\nand it's running rest are default okay\napart from that let's check RDS\nso we can see one database instance here\nlet's\nsee\nokay so you can see the RDS we had\ncreated for MySQL\nthat's running now\nokay now suppose everything that we have\ncreated now we want to destroy it okay\nimagine how much time would it take to\ndestroy all of these through console now\nlet's see how we are going to destroy it\nthrough terraform\nso all we need to do here is terraform\ndestroy\nso what all will it destroy everything\nthat we have created in that file\neverything is going to be destroyed\nwhich includes our two ec2s one S3 VPC\nsubnet and RDS okay everything has to be\ndestroyed through one single command\nokay let's see\nso you can see six over here\nso let's see if it destroys\neverything\nokay so it says six destroyed let's\ncheck one by one okay\nnow currently we are an RDS let's\nrefresh this and see\nokay so you can see the RDS has been\ndeleted now it is destroyed so\nlet's next see vpcs\nso we can see the VPC we had created is\ndeleted the one present over here is the\ndefault one let's check the subnet\nokay again the subnet we had created has\nbeen destroyed and these are just the\ndefault subnets that are present apart\nfrom that let's see ec2\nSo currently we are in Us East 2 right\nokay so you can see there are no\ninstances running over here\nokay so the instance we had created has\nbeen destroyed now let's check S3\nas you can see no buckets over here so\nthe S3 we had created is also destroyed\nokay now let's go back to ec2 and we are\ngoing to change our region to us East\none\nso remember we had created\none more instance and different region\nusing Alias let's see if that has been\ndestroyed as well okay so you can see\nthere are no running instances\nokay so the instance we had created in\nUs East one also has been destroyed\nthis is just one example of how multiple\nServices AWS provides and you can do\neverything through infrastructure as\ncode rather than going through console\nokay so you can do this with other Cloud\nplatforms as well like Azure Google\nclouds and there are many more so this\nwas just a simple example for AWS\nforeign\n[Music]\napplication used for event monitoring\nand alerting now what it really does is\nit records real-time metrics we'll talk\nabout metrics later on in the session\nnow this metrics that it records is\nstored in a Time series database built\nusing a HTTP pull model and with this\nyou also have flexible queries and\nreal-time alerting Prometheus basically\npulls these metrics which are in a key\nvalue format and stores the data As Time\nseries allowing users to query data and\nalert in a real-time fashion at given\nintervals Prometheus will hit targets to\ncollect metrics aggregate data show data\nor even alert if some thresholds are met\nin spite of not having the most\nbeautiful graphical user interface now\nthat we know that Prometheus is\nbasically an alert monitoring system now\nlet's move on and understand why we need\nPrometheus as I've already mentioned in\nthe introduction it basically\ncontributes to the devops system by\nmonitoring Cloud native applications and\ninfrastructure and also by watching over\nhundreds of microservices now it really\nworks well for recording any purely\nnumeric time series data now another\nreally important benefit of Prometheus\nis that it fits both machine-centric\nmonitoring as well as monitoring of\nHighly Dynamic service oriented\narchitectures this is a real Advantage\nnow in a world full of microservices its\nsupport for multi-dimensional data\ncollection and querying is a particular\nstrength now another advantage of\nPrometheus is that it is designed for\nreliability to be the system you go to\nduring an outage to allow you to quickly\ndiagnose problems now each Prometheus\nserver is Standalone not depending on\nnetwork storage or other remote Services\nyou can easily rely on it when other\nparts of your infrastructure are broken\nand you do not really need to set up an\nextensive infrastructure to use it now\nyou You Must Be Wondering Why Prometheus\nreally because there are other time\nseries databases that can be used to\nwrite so one of the noticeable\ndifferences between Prometheus\nmonitoring and other time series\ndatabases is that it is a full based\ntool unlike nagios sensui Etc now\nbecause it is a pool based tool what it\nreally does is it actively scrapes\nTargets in order to retrieve metrics for\nthem for example the node exporters or\napplication exporters so Prometheus\nexpects to retrieve metrics via HTTP\ncalls done to certain endpoints that are\ndefined in Prometheus configuration node\nexporter and application exporters will\nlisten on particular ports and\nPrometheus server initiates a HTTP call\nto this particular exporter and switch\nsystem or application metrics from the\nend now that we know why Prometheus is\nso important let's move on and\nunderstand continuous monitoring in\nPrometheus monitoring applications and\napplication servers is an important in\npart of today's devops culture and\nprocess now why a continuous monitoring\nyou obviously want to continuously\nmonitor your applications and servers\nfor application exceptions server CPU\nmemory usage or storage spikes and you\nalso want to get some type of\nnotification if the CPU or memory usage\ngoes up for a certain period of time or\na service of your application randomly\nstops responding so that you can perform\nappropriate actions against those\nfailures or exceptions this is why\nPrometheus is used in continuous\nmonitoring now with monitoring the\nnumber of tools out there such as Amazon\ncloudwatch nagios New Relic and many\nothers but Prometheus is a very popular\nfree and open source project for\nmonitoring dozens of servers as I've\nalready mentioned even microservices now\nthough we know what is prometh is used\nfor in continuous monitoring let's move\non and check out the Prometheus\narchitecture\nso in Prometheus terms we call the main\nmonitoring service the Prometheus server\nyou can see that on the screen and the\nthings that Prometheus monitors are\ncalled targets so the server is the\nmonitoring service and the targets is\nwhat the Prometheus monitors so I hope\nthat is clear so in short the Prometheus\nserver monitors targets I said earlier\ntargets can also refer to an array of\nthings it could be a single server or a\ntarget for probing of endpoints over\nHTTP https DNS TCP or it could simply be\na HTTP endpoint that an application\nexposes through which the Prometheus\nserver gets the application's health\nstatus from so now let me explain a\nlittle bit about metric each unit of\nTarget such as current CPU status memory\nusage or any other specific unit that\nyou would like to monitor is called a\nmetric so Prometheus server collects\nmetrics from targets over HTTP stores\nthem locally or remotely and then\ndisplace them back in the Prometheus\nserver now the Prometheus server scripts\ntargets at an interval that you define\nto collect metrics from specific targets\nfor example for a minute or 30 seconds\nor whatever you want you can give the\ntarget as and then it will finally store\nit in a Time series database you can see\nthe storage box that is in between that\nis your time series database now you\ndefine the targets to be scraped and the\ntime interval for scraping metrics in\nthe Prometheus dot yml configuration\nfile you get the metrics details by\nquerying from the Prometheus time series\ndatabase with the Prometheus stores\nmetrics and you use a query language\ncalled prompt ql in the Prometheus\nserver to query metrics about the\ntargets so in other words you ask the\nPrometheus server via prom ql to show us\nthe status of a particular Target at one\nparticular time as you can see in third\nwhite box it accepts queries that is it\naccepts prompt ql queries now Prometheus\nprovides client libraries in a number of\nlanguages that you can use to provide\nhealth status of your application but\nPrometheus is not really only about\napplication monitoring you can use\nsomething called exporters to monitor\nthird-party systems now exporter is a\npiece of software that gets existing\nmetrics from a third-party system and\neventually export them to metric format\nthat the Prometheus server can\neventually understand now a sample\nmetric from a Prometheus server could be\nthe current usage of free memory or file\nsystem free via a node exporter in the\nPrimitive server we learn all of this in\nthe demo part of this session now I hope\nPrometheus server is clear to you so the\nmain component here is the Prometheus\nserver which is divided into three parts\nthe retrieval part the storage part and\nthe HTTP server so the HTTP server\nreally accepts queries and displays it\nin the graphical user interface also\nwe'll be learning about alert manager\nlater on in this session so I hope all\nof these are clear let's move on to the\nnext part of the session and learn about\nPrometheus metrics and its types so here\neach unit of a Target such as the\ncurrent CPU status memory usage or any\nother specific unit that you would like\nto monitor is simply called the metric\nso the server collects the metrics and\nstores them either locally or remotely\nand then eventually displays it on the\nPrometheus graphical user interface now\nmoving on let us check out the four\ndifferent types of metrics that are\navailable the first one that we'll be\ntalking about is the counters a counter\nis simply a cumulative metric that\nrepresents a single monotically\nincreasing counter whose value can only\nincrease or be reset to zero on restart\nnow for example you can use a counter to\nrepresent the number of requests served\ntasks completed or errors you always\nhave to remember this to not use a\ncounter to expose a value that can\ndecrease now for example do not use a\ncounter for the number of currently\nrunning processes instead user gauge\nwe'll be talking about gauges in a bit\nnow client Library usage documentation\nfor counters are go Java Python and Ruby\nlet's move on and understand the next\nmetric type that is gauges I'm sure you\nmust be aware of gauge now a gauge is a\nmetric that represents a single\nnumerical value that can arbitrarily go\nup and down gauges are typically used\nfor measured values like temperatures or\ncurrent memory usage if you check out a\nspeedometer in a car it looks like a\ngauge right that is a gauge that's\nexactly what we're talking about here so\nthe client Library uses documentation\nfor gauges are go Java Python and rupee\nthe next metric type is the histogram\nnow a histogram samples observations and\ncounts them in configurable buckets it\nalso provides a sum of all observed\nvalues a histogram with a base metric\nname of Base name exposes multiple time\nseries during a scrape now when you're\noperating on buckets remember that\nhistogram is cumulative now moving on to\nthe next metric we have summary which is\nvery similar to histogram a summary\nsamples observations while it also\nprovides a total count of observations\nand a sum of all observed values it\nreally calculates configurable quantiles\nover a sliding time window now a summary\nwith a base metric name of Base name\nexposes multiple time series during a\nscript\nnow the difference between summary and\nhistogram is that here you do not know\nwhat the range of values will be upfront\nso you cannot use histograms whereas in\nhistogram you know what the range of\nvalues will be upfront so you can just\nDefine it on your own now with this\nlet's move on to the demo part of this\nsession and install Prometheus on our\nLinux virtual machine so I'm just going\nto check out my Ubuntu machine number\nso the first thing what we're going to\ndo is we're going to install Prometheus\nfrom the official website so I'm going\nto go to my web browser so I'm just\ngonna type in Prometheus in my web\nbrowser and I'm going to click the first\nlink\nand as you can see this is the official\nwebsite of Prometheus I'm gonna click on\nthe download button so once I click on\nthe download button it will redirect me\nto a page so as you can see here there\nare a lot of products Prometheus alert\nmanager Black Box exporter and a lot\nmore if you keep scrolling down right\nnow we're going to be downloading\nPrometheus so we're just going to stay\nhere and I'm just going to click on the\noperating system as Linux and this will\njust show the tar file for the Linux\noperating system I'm just gonna right\nclick on that and I'm going to click on\ncopy link location and I'm going to\nswitch back to my terminal and click on\nwget\nand this will download Prometheus for me\nin my Linux operating system\nnow that it's downloaded I just want to\nsee the list of files in my tar file so\nas you can see there's the Prometheus\nLinux star file which is present\ncurrently in my Prometheus folder\nnow what I'm going to do is I'm going to\ncopy this file and then untie it using\nthe command tar hyphen x v f and then\nI'm just going to paste this file\nthis will immediately enter the file for\nme once that is done now I'm just going\nto list down the number of files that\nare currently present in my Prometheus\nfile now you can see that there's an\nfile which has been untied here clear my\nscreen\nokay now I'm again going to just list it\nso you can see it clearly now I'm just\ngoing to copy this file and enter this\ndirectory\nso I'm just going to list down all the\nfiles that are present you can see\nthere's console libraries this consoles\nlicense notice there's a file that's\nnamed Prometheus so this is the\napplication the Prometheus application\nso I've already mentioned before that\nthe prometheus.yml configuration file\nreally just defines the targets that has\nto be scraped right and also the time\ninterval for scraping metrics now let's\njust check if all of those parameters\nthat I just mentioned are there in the\nconfiguration file so I'm just going to\nuse scat command for it you can see that\nthere's a scrape interval parameter of\n15 seconds you can set the scrape\ninterval to every 15 seconds default is\nevery one minute so I also have an alert\nmanager configuration right now we\nhaven't set that up but it's just there\nyou can also load your own rules and\nevaluate them according to the global\nevaluation interval and you can see by\ndefault it is currently active on the\n9090 Port okay and by default scrap\nconfiguration containing exactly one end\npoint to scrape is given that is the\nPrometheus itself right as I've already\nmentioned before Prometheus is a tool or\nan application that will scrape out\nmetrics from different applications but\nby default right now we have the\nPrometheus itself to be scraped and that\nis currently present on the port number\n9090 so I hope that is clear we will\nlearn about the rules in the next part\nof the session we'll also learn about\nthe alert manager configuration in the\nlater part of the session so both of\nthese will be clear later but I hope the\nscrap interval and you know the scrap\nconfigs are clear to you now let's move\non to the next part now I'm just gonna\nclear the screen\nnow I'm just going to execute Prometheus\nby using Point front slash Prometheus\nand this will immediately activate and\nget my Prometheus application running\nif we move back to my web browser and\njust type in localhost\n9090 this will redirect me to my\nPrometheus application as you can see\nnow if I come out of my terminal right\nokay and I reload my page you can see\nthat it is enabled to connect to my\nPrometheus so what I'll have to do is I\nwill have to create a Prometheus service\nand get that running so let's learn how\nto do that I'm just going to clear my\nscreen\nso now to be able to run Prometheus as a\nservice I'm going to use the copy\ncommand I'm just going to use the CP\nhyphen R command I'm just going to copy\nall of these files that are consisting\nin this folder to the destination folder\nand I'm going to use this command hyphen\nuser local hyphen bin Prometheus now for\nany application to be run a service you\nwill have to compulsorily have a DOT\nservice file so let's go ahead and\ncreate one so to create the service file\nI'm just going to use the command sudo\nVI and I'm going to enter that\nparticular folder\nso as you can see I just typed out a\ntiny piece of code and as you can see\nhere this is my executable command and\nthis is my configuration file let's go\nahead and save this\nokay great so now that our service file\nhas been created I'm just going to clear\nmy screen and now we're just going to\nstart our service file\nnow once that is done I'm just going to\ncheck the status of Prometheus it is\nactive and running great\nnow if I want to stop Prometheus I'm\njust going to type in the command sudo\nservice Prometheus stop okay now that I\nrefresh my page you can see that\nPrometheus is up and running so that's\ngreat I hope it's clear how to create\nyour own service file so you can get\nPrometheus up and running I hope it was\nvery clear and I hope you understood how\nto install Prometheus into your virtual\nmachine now in the next part of the demo\nI'm just going to brief you all about\nthe graphical user interface of\nPrometheus so stay tuned\nokay so now we're gonna check out the\nuser interface of Prometheus so in the\nprevious session we installed Prometheus\nand we got the instance running now if I\nclick on Prometheus this is where it\nwill take me now you can see that there\nare three options that says enable queue\nhistory use local time enable\nautocomplete you can use the local time\nif you'd like to enter some time to\nevaluate the queries so there's a search\nbar here for you to type in the\nexpression that you'd like to execute\nnow the expression or query that you'd\nlike to execute will be is usually\nexecuted in two different forms that is\nthe table form and the graph form as of\nnow since you don't have any expression\nand query you it says no data queried\nyet now on the top you can see three\noptions that says enable query history\nuse local time enable autocomplete so\nthis option will allow you to use your\nlocal time since I'm in India and it's\n10 8 right now so that's my local time\nnow if I want to also enable my query\nhistory tree that is all the queries\nthat I have executed in the past so this\noption will simply enable me to check\nout the queries that I've executed in\nthe past so I'm just going to untick\nthat because I don't have any queries\nthat I've executed in the past anyway\nanother interesting thing in this page\nis that you can add several panels right\nso you can execute different queries all\nat once this is great and this option\nadd panel has been added in the recent\ntimes so this is the new user interface\nyou also have a classic user interface\nI'll shift to that and you can see that\nhere you can enable query history that's\nthe only option that's common from the\nnew user interface also you have a bar\nthat will allow you to type in your\nexpression or query you can also insert\nmetric at cursor now since Prometheus is\nwritten in golang so you have a lot of\nmetrics that are related to that you\nalso have metrics related to Prometheus\nnow if I want to execute any of these\nmetrics I can just click that and I can\nexecute it you can see that the instance\nlocalhost of Port 9090 is currently up\nand running and the job is Prometheus I\ncan view the graph too if I'd like to\nnow let's just execute another query I'm\njust gonna click go info and this will\njust give me the version of the golang\nand the job Etc so you can just really\nexecute all the queries directly from\nthis option in your classic UI but as\nyou can see the new user interface that\noption is unavailable now let's move on\nand check out the other options that are\navailable in this panel let's click on\nalerts currently we have no alerts as\nI've already mentioned before that\nalerts are simply conditions that you\nwill have to specify and if these\nconditions are satisfied so the alert\nwill be triggered to that particular\nmeet you know or manager so currently as\nwe have none it just shows nothing here\nso these options will allow me to check\nmy in active alerts my pending alerts my\nfiring alerts so usually it's an\ninactive state if the condition is not\nsatisfied if the condition has been\nsatisfied then it'll go to the pending\nstage and finally if it exceeds the\ncritical limit Or the critical amount it\nwill enter the firing stage so you can\nview the alerts based on these three\nstates that is the inactive State\npending State and firing State moving on\nwe have graph so this is the same as the\nhome page of Prometheus right so we've\ntalked about that so once I click the\nstatus option you can see that there are\nseven different options that drop down\nthe first one is runtime and build\ninformation this just really gives me\nyou know the information about\nPrometheus that is the start time of\nPrometheus the working directory the\nconfiguration reload extra information\nabout my runtime and build is given in\nthis option now the alert managers there\nare none so it just says endpoint now\nyou can also see the Go version here you\ncan see the build user build date all of\nthat the version of the build\ninformation also is given here so this\nis what the runtime and build\ninformation is all about the net next\noption in the status is tsdb status what\nis tsdb tsdb is simply the time series\ndatabase so this option allows me to\ncheck out my databases status right the\nnumber of series the number of chunks so\nI can just view the statistics of the\nhead cardinality so I can just view the\ntop 10 label names with value count I\ncan view the series count by Metric\nnames and I can also check out the label\nnames with high memory usage in fact I\ncan also you know take the queries from\nthis top 10 series count by Metric names\nI can just execute it as a query and you\ncan see that this gives me the data of\nall the and this just executes the\ninformation and gives me the data the\nlist of data that allows me to check out\nmy HTTP request duration in seconds so\nalso I can view this in graph so I'm\njust going to click on that\nand this just gives me information of\nall of the data that is available in the\ntable in terms of graph so I hope this\nis clear now moving on we'll check out\ncommand line Flags this is just the\ncommand line flags that I can use to\nreally make changes in my service file\nwe created a service file right to run\nthis particular service of Prometheus so\nso this just really gives all the\ninformation about my service file so you\ncan see that there's config file\ncurrently in this location there is also\nquery timeout and you can view all of\nthat all of the extra information here\nyou can check out the web listen address\nit's in port number 9090 you can also\ncheck out the web page title currently\nthe web page title is Prometheus time\nseries collection and processing server\nyou can change this if you'd like to you\ncould also check out the web read\ntimeout so all the information basically\nabout this service that we've created is\ngiven in the command line Flags so\nmoving on we will check out a\nconfiguration file this configuration\nfile we've already seen before right\nthis is our prometheus.byml file right\nso this is simply the same file that is\ngiven here you can see global alerting\nscrap configs you can check out the\ntargets and then finally the port number\nokay so if you'd like to copy this you\ncould just copy to clipboard moving on\nto the next option we have rules there's\nnone right now so it shows nothing later\non in the session we'll be creating our\ntools so stay tuned for that now the\nnext option is targets there's only one\nprimitive service that is up and running\nand that is of port number 9090 so the\nstate is up you can see the instance you\ncan see the job and the last scrape the\nscrape duration and if there are any\nerrors that will appear here before we\nmove on to the next option so I'm just\ngoing to show you the metrics of this\ninstance the Prometheus instance that\nwe're running I'm just gonna click on\nmetrics now you can see that Prometheus\ndefines a very nice text-based format\nfor its metrics I'll just zoom this a\nbit so you can view it better so now you\ncan see that the data is relatively you\nknow human readable and we even have the\nhelp and type decorators to really\nincrease the readability right as I've\nalready discussed before Prometheus has\nonly four types of metrics right to keep\neverything really simple that is counter\ngauge histogram summary now the type in\nhelp attributes here help us provide\nuser-friendly hints for each metric in\nthe output so that's what this help and\ntype decorators really do they just\nincrease readability you can't really\nview all of these metrics and understand\nwhat they are so they're just helping\nyou with the readability you can see\nthat the help here says go GC duration\nseconds a summary of the pause duration\nof garbage collection cycles and a\nmetric type of summary here you can see\nthe type is gauge and you can see all of\nthat information here the type is\ncounter also here the type is counter\ngauge again so that's what really the\ntype will do so the type will just give\nyou an Insight of what type of metric it\nis so help will just really describe the\nmetric and type will just give you the\ntype of metric so I hope this is clear\nso I hope Matrix was easy to understand\nnow that we finished targets let's move\non to service Discovery and this just\nshows you so currently there's just one\nend point that has been scraped and that\nis our current running active instance\nthat is Prometheus now it just shows the\naddress the metrics path and the scheme\nthe job and just show some labels of the\ntarget so that's all service Discovery\nis all about and if you'd like to check\nout and know more about Prometheus just\nclick the help option in the panel and\nthis will redirect you to the Prometheus\nofficial website now the classic UI we\nalready discussed and this is all for\nthe graphical user interface of\nPrometheus I hope it was easy to\nunderstand I hope it was easy to learn\nnow let's move on to the next part of\nthe session okay so now in this part of\nthis session I'll be downloading the\nPrometheus node exporter so for all of\nyou all who don't know what the node\nexporter is it really is a way to\nmeasure various machine resources now\nthe machine resource can be your memory\ndisk or even your CPU utilization so\nit's a very famous application of\nPrometheus so without Much Ado let's go\nahead and download our node exporter I\nwill go to my web browser and I'm going\nto the official website of Prometheus\nso the first link will redirect me to\nthe official website of Prometheus I'm\ngoing to click on the download button\nand I'm going to scroll down and look\nfor node exporter\nso I'm just going to copy the link\nlocation I'm quickly going to move back\nto my terminal and I'm going to download\nnode exporter\nso now that the node exporter has been\ndownloaded now let's just check if the\nfile is available and it is so I'm just\ngoing to untar this start file with the\ncommand tar xzf and I'm just going to\ncopy this\nand this command will just untie my file\nokay so I'm just going to clear the\nscreen now let's just move ahead and\ncheck out what are the files that are\nthere in our node exporter file so we\nhave license node exporter and notice\nnow what I'm going to do is I'm going to\nuse the sudo CP command so I'm going to\ncopy the node exporter file to my user\nlocal bin location so with the help of\nthe copy command that is the CP command\nI'm just going to create a copy of the\nnode exporter file into my user local\nbin location okay\nonce that is done I'm just going to\ncheck out the files that are present in\nmy user local bin location you can see\nthat there is a node exporter file that\nhas been copied right so I've just\ncopied this file into this location\nthat's all I've done moving on we'll now\ncreate a service file so we created a\nservice file for a Prometheus\napplication right so even for the node\nexporter I'm going to create a service\nfile using the command sudo VI\nso I'm just going to name this as node\nexporter.service\nso I have written down a piece of script\nthe same way we did to a Prometheus\nservice file here you can see the\ndescription which says Prometheus node\nexporter service you also have the type\nyou have execution start which is\ncurrently present in the user local bin\nlocation now once that is done I'm just\ngoing to save this and I'm going to\nreload my system\nnow I'm just going to start the service\nyou'll have to make sure of one thing\nand that is the node exporter so what\nyou're naming the service file you'll\nhave to initiate the same name so as you\ncan see here the service file is named\nas node exporter so I'm just going to\ntype the same thing here and I will\nstart the service once I start the\nservice I'm just going to check its\nstatus and you can see that it's active\nand running so that's great\nso the node exporter is currently\nrunning on address\n900 ports so we're just going to check\nit out\nand it opens so you can check out the\nmetrics that are currently running in\nour node exporters so this is the end\npoint as to where our Prometheus will\nscrape all of its data so now that we\nhave node exporter up and running let us\nconfigure the node exporter into our\nprometheus.yml file so every time you'll\nhave to configure a particular Target\nyou will have to go to the\nprometheus.yml file and add the target\nthere okay so what I'm going to do is\nI'm going to move to my\ndirectory\nokay once that is done I'm just going to\nlist out all the files so you have the\nPrometheus file here\nyou can see the Prometheus dot yml file\nright I'm just going to clear my screen\nso now I'm just going to view all the\nfiles that are present in Prometheus as\nyou can see that there's the yml file\nhere so we're going to use the command\nsudo VI\nPrometheus dot yml to edit our\nconfiguration file\nso now you can see there is only\ncurrently one job and that is Prometheus\nwe have to add another job to our file\nso here I'm adding node exporter as my\njob name and the target is with IP\naddress\n9100 right so make sure the indentation\nis correct so once the indentation is\ncorrect we have applied a Target we have\nadded a Target to our configuration file\nand we can just save this\nonce that is done I'm just going to\nclear my screen\nso now I'm going to restart my\nPrometheus and check the status it's\nactive and it's running so we can just\ngo back to our page\nso you can see here the node exporter\nhas been added to our service Discovery\nwith address as localhost\n9100 it's localhost because we are\ncurrently working on our machine if you\nwant to add another machine's port\naddress you can do that too in\nPrometheus by mentioning their address\nand now you can just go back and you can\ncheck out the configuration file has its\nchanges so it has another Target that's\nnamed node exporter and also its port\nnumber is 9100 so if I move back to my\nclassic UI 2 I can check out the metrics\nthat are here if you notice there are a\nlot more metrics than before right you\nalso have the node metrics if I want to\ncheck out the node CPU seconds in total\nI can execute it right\nso now that I've executed it you can\ncheck out the cpu's total number of\nseconds it is hosting the node exporter\nfor you can also check out the username\ninfo of the node you can see that the\ninstance name is given here the machine\nthat we're currently working on the Node\nname is edureka the system name is Linux\nthe version is given here and also so\nthe entire node's username info is given\nif we execute this query so this is\ngreat right like now your node export\nhas been successfully configured into\nPrometheus let's move on to the next\npart of the session before moving on to\nthe next part of the session and\nconfiguring alert manager let's\nunderstand querying a little bit more in\ndetail so Prometheus as we all know\nfundamentally stores all of its data\ntime series right now each time series\nis identified by a metric name we've\nalso discussed this before and as well\nas a set of key value pairs that\nPrometheus calls labels okay now the\nmetric name indicates the overall aspect\nof a system that has been measured let\nme just execute this query Prometheus\nHTTP request duration seconds total okay\nnow you can see that labels serve to\ndifferentiate subdimensions of a metric\nsuch as you know the Handler the code\nthe instance the job that it's currently\nrunning on finally a sequence of samples\nforms the actual data for a series okay\neach sample consists of a time stamp and\na value where timestamps have\nmillisecond precision and your values\nare always 64-bit floating Point values\nthe best part of Prometheus queries is\nthat you can add regular Expressions you\ncan specify a time limit a certain time\nlimit you can also use different\nfunctions we'll see all of this so now I\ncould add a certain filter to my query\nnow if I want to just execute the\nqueries with label code 400 I'm just\ngoing to add that filter here and\nexecute the query and this will\nautomatically display the HTTP requests\nin total with code 400 and you can\nreally you know add whatever you'd like\nto in your filters so that is one way to\nwork with queries and also as I've\nalready mentioned you can also add\nregular Expressions right so you can use\nnot equal to is equal to and many other\nthings\nso for example if you want to list all\nthe series no matter which metric name\nor job with the Handler name starts with\nAPI okay so you can just simply run this\nquery\nwhat we have done in this regular\nexpression is so this is obviously a\nregular expression right so in this\nregular expression it needs to end with\na full stop and a star okay since\nregular Expressions always match a full\nstring in Prometheus now the resulting\ntime series is usually a mix of series\nwith different metric names now you know\nthat how to select your time series by\nthe metric names as well as a\ncombination of their label names\nso in the next part we will learn how to\ncalculate rates or Deltas of a metric\nover time now one of the most prominent\nfrequent functions you will use in\nPrometheus is the rate function now\ninstead of calculating event rates\ndirectly in the instrumented service in\nPrometheus it is a very common thing or\na common way to track events using raw\ncounters okay and to let Prometheus\nserver calculate rates ad hoc during\nquery time this has a number of\nadvantages such as not losing rate\nspikes between scrapes as well as being\nable to choose Dynamic averaging windows\nat query time counters start at zero\nwhen a monitored service starts and get\ncontinuously incremented over the\nservice processes lifetime occasionally\nwhen a monitored process restarts its\ncounters reset to zero and begin\nclimbing again from there graphicing raw\ncounters is usually not very useful as\nyou will only see an over increasing\nline with occasional resets now we will\njust use another query for this example\nnow I'll just explain you how the rate\nfunction really works and for this I am\njust going to use the query\nPrometheus\nHTTP request duration seconds count okay\nand I'm just going to specify the job as\nPrometheus\nand you can also view the graphs\nit looks something like this\nokay now to make counters useful we can\nuse the rate function to calculate their\nper second rate of increase this is\nreally why we use rate function we need\nto tell rate function over which time\nwindow to average the rate by providing\na range selector after the series\nmatcher okay now for example to compute\nthe per second increase of the above\ncounter metric as average over the last\nfive minutes we can just add the rate\nfunction\nand just specify though time limit is 5\nminutes\njust going to close the braces and\nexecute the function okay\nyou can check out the graph now you can\nsee now the result is much more useful\nright rate function is very smart and\nautomatically adjusts for counter resets\nby assuming that any decrease in a\ncounter value is a reset the variant of\nrate function is I rate function while\nrate function averages the rate over all\nsamples in the given time window that is\nfive minutes in this case I rate\nfunction only ever looks back two\nsamples into the past okay it still\nrequires you to specify a Time window\nlike five minutes to know how far to\nmaximally look back in time for those\ntwo samples now I rate function will\nreally react faster to rate changes and\nis thus usually recommended for use in\ngraphs in contrast the rate function\nwill provide smoother rates and is\nrecommended for use in alerting\nExpressions okay now let's execute The\nIrate function for this\nyou can see that the graph would look\nlike this okay uncovering short\nintermittent tips in the request rates\nrate and eye rate functions always\ncalculate a per second rate so here\nsometimes you'll want to know the total\namount by which a counter increased over\na window of time but still correct for\ncounter resets you can achieve this with\nthe increase function okay for example\nto calculate the total number of\nrequests handled in the last R you can\nuse the increase function\nand I will change this to wanna\nnow that we know how queries work how\nyou can use regular expressions and how\nyou can really use functions in your\nqueries let's move on to the next part\nof the session that is custom roles okay\nso time series queries can quickly\nbecome quite complicated to remember and\ntype using the expression browser all\nthe time right so what you can do is\nsometimes in some situations you'd want\nto use some queries very frequently\nright but you don't want to really type\nthe same query over and over again so in\nthis case rather than remembering and\ntyping this particular query every time\nwe can create a recording rule that will\nrun at a chosen interval and make the\ndata available as a Time series so how\nwe're going to do it I'm just going to\nso this is a pretty popular query that\nI'm going to execute that is\nnode memory\nrebuytes okay\nI'm just going to execute this query\nthis will just give me how much of free\nbytes is available in the node exporter\nyou can see the free number of bytes\nhere but what if I want to execute this\nin terms of you know percentage\nso here you can see the number of memory\nthat the job node exporter is using and\nit's just four so I'm just multiplying\nby 100 to check in percentage form so\nyou can see that it is only using four\nbytes of memory now if I want to see how\nmuch of memory is remaining I'm just\ngoing to minus the entire query with 100\nso you can see that 95 percent of bytes\nis left over now what if I want to\nexecute this query very often right so\nit'd be very time consuming for me to\ntype the whole thing out and then\nexecute it right so but there's an\neasier way to make this a query right so\nit'll just drop down in your uh drop\ndown list and then you can just search\nfor it and execute it right\nso how do we do that so what we're going\nto do is we're quickly going to shift\nback to our terminal I'm just going to\nclear my screen okay and I'm just going\nto\nI'm just going to move into the user\nlocal bin a Prometheus directory and now\nhere we have to create a new file called\nPrometheus rule so that's what I'm gonna\ndo\nand since it's a yml file I'm just going\nto add the yml extension\nhere I'm just going to add the name as\ncustom rules\nand I'm just going to specify my rule\nhere\nso I just type the whole thing out I\nhave named this custom rules and I've\nrecorded this query as node memory\nmemory free in person and the expression\nwe've already executed is the same one\nI'm just going to go ahead and save this\nI'm just going to clear the screen\nso Prometheus usually comes with a tool\ncalled prompt tool and this prompt tool\ncan be used to really check your rules\nfiles and you can do really a lot of\nthings with chrome tool for now we're\njust going to use this command which I\ntyped out and we're going to execute\nthis command to check if our file is\nrunning okay and you can see that it\nchecks the Prometheus rules file and it\nsays its success now let's go ahead and\nadd the Prometheus rules.yml reference\nto the Prometheus yml rule file section\nI'm just going to clear the screen\nnow I'm just going to enter the\nprometheus.yml file\nso here I'm just going to enter the\nPrometheus underscore rules.yml file\nso now I'm just going to save this file\nnow once that is done I'm just going to\nrestart the system\nand I'm just going to check the status\ntoo\nokay great is up and running so we're\njust going to switch back to Prometheus\nand I remember naming it free bytes I'm\njust going to switch the classic new\neyes so I can look for it and it was\nnamed node\nmemory\nmemory free in person right this is\nexactly what we named our query and I'm\njust going to execute this\nand you can see that\nit's 95 so this is how easy it is to\nmake your own queries and execute them\nokay so now that we've created our you\nknow custom rule so let's just go check\nout our custom Rule and you can see that\nit's here and the state says okay so\nthat's great now let's go ahead and\ncreate our first alert rule okay the\nsame way that we created our custom rule\nwe're going to be creating our alert\nrules this is exactly why I explained\nyou custom rules in the beginning so I'm\njust going to switch back to my terminal\nI'm going to clear the file I am going\nto so I'm just going to go to the\nPrometheus underscore rules.byml file\nand once that is done so I'm just going\nto type in my alert in this Prometheus\nunderscore rules.yml file and once I'm\ndone typing so I'll just explain you the\nalert after that\nso I've created a rule named alert rules\nand this alert will allow you to\nrecognize when your instance is done so\nwe have currently the Prometheus\ninstance that is running and we also\nhave the node exporter that's running so\nif any of these instances go down for up\nto one minute and then the alert will be\nup okay so the severity is pretty\ncritical and we have given annotations\ntoo where we have mentioned the instance\nso this just gives a summary of what\ninstance is going down and a description\nto of the job type and also we have\nmentioned the job type and that it has\nbeen down for more than one minute okay\nso once this is done which is going to\nsave this\nI'm going to clear my screen so the same\nway that we executed The Prompt tool\ncommand we're just going to execute that\nso we're just going to execute this\ncommand\nand it says two rules fun that's great\nnow I'm just going to restart my\nPrometheus and I'm going to check the\nstatus\nokay it's up and running let's switch\nback to our Prometheus\nand reload it\nnow you can see that there is now an\nalert rule okay which has the alert\ninstance down and the expression is is\nup is equal to zero so this expression\nthat says up is equal to 0 is pretty\ninteresting because now if I go to my\nPrometheus and just execute up it'll\njust tell me what are the jobs that are\ncurrently up and running now the value\nis currently zero so if the expression\nturns 0 so then the alert will be\nactivated so here this is what the\nexpression really means so here if the\nup is equal to 0 for more than a minute\nthen the alert will be immediately\nactivated now as I've already mentioned\nbefore the three states that is the\ninactive stage pending stage and then\nthe firing stage if none of the alerts\nare up then it's just going to be in\ninactive State and if for instance one\nof the jobs go down okay then it will\nimmediately move to the pendant state so\nonce it immediately moves to the pending\nstage then it will wait for a minute\nbecause we have specified the condition\nthat it should be in the pending state\nfor a minute and if it goes beyond a\nminute then it should go to the firing\nstage okay so once it reaches the firing\nstage all of the managers that are\ninvolved in getting the notification\nabout this alert then they will be\ninformed about it immediately so I\nreally hope you understood how to create\nyour own rules how to configure them\ninto your prometheist rules.yml file and\nthen just really you know understand how\nthey really work now let's move on and\ninstall and configure our alert manager\nwe'll have to just simply go to the\nPrometheus official website click on\ndownload and then you'll get an option\ncalled alert manager I'm just going to\nclick on that and then I'm just going to\ncopy the link location of Linux because\nI've been clearly using Linux machine so\nI'm just going to copy that link\nlocation clear my screen\nand\nso I'm just going to download alert\nmanager\nso once I copy the link location what\nI'm going to do first is I'm just going\nto move back directories\nso now I'm just back to my root I'm just\ngoing to move into my Prometheus\ndirectory so I'm just going to download\nmy alert manager here\nokay as you can see that the download is\ncomplete I'm just going to list out the\nfiles and you can see that there's an\nalert manager the tar alert manager file\nI'm just going to untar this using the\ncommand\nand you can see that using the command\npseudo tar hyphen xvf and then I'm just\ngoing to paste the link and you can see\nthat the files have been untied I'm\ngoing to clear my screen\nand I'm just going to list out the files\nyeah so the alert manager file has been\nuntaught I'm just going to enter into\nthis directory and check out the files\nthat are currently in this\nyou can see that there's an alert\nmanager executable file you have alert\nmanager.yml the configuration file you\nhave an amp tool so now what we're going\nto do is we're going to be running alert\nmanager as a service the same way we ran\nPrometheus and node export as a service\nwe're going to also run alert manager as\na service so what I'm going to do first\nis I'm just going to copy my files into\nthe user local bin\nso now I'm just going to create the\nalert manager service file if you\nremember we also created a Prometheus\nservice file and also node exporter\nservice file so we're just going to do\nthe same we're going to create an alert\nmanager service file\nso once you create your alert manager\nservice file this is what you'll have to\ntype out I've typed out the script so\nyou have a description you also have the\ntype of the service and you're just\ngoing to mention the location of the\nconfiguration file and where the\nexecution will begin from okay once this\nis done I'm just going to save this file\ngonna clear the screen\nso I'm just going to shift locations to\nthe user local bin alert manager\ndirectory so I'm just going to list out\nthe files and you can see there's the\nalert manager.yml file so here is where\nwe'll have to make a few changes that is\nthe alert manager configuration file so\nI'm just going to make some changes\nthere\nso this is the default file I'm just\ngoing to make some changes here and I'm\njust going to explain what the changes\nare about as you can see that you have\nreceivers where you know you have to\nconfigure your email ID that is your\nemail ID from where you're sending the\nmessage and the receiver who's going to\nreceive the message right so you're just\ngoing to add a two email ad you're going\nto add a from email ID and you're also\ngoing to add a username you're going to\nadd identity that is the email ID and\nthen you're also going to add the Gmail\npassword now that all of my email IDs\nare in Gmail so I'm just going to\nmention the public Gmail host server so\nI'm just going to add in all my\ncredentials and cut to the next part of\nthe session\nand as we have already seen before\nthere's a tool that is called amp tool\nin the alert manager so the amp tool is\njust an executable that allows you to\nview or to modify the current state of\nthe alert manager so I'm going to\nexecute this command user local bin\nalert manager amp tool and check the\nconfiguration file and then just give\nthe location of my service file okay and\nonce that is done it's going to check so\nI'll just check if it's successfully\nconfigured once that is done you can\njust see that there's one receiver on\nthis end okay I'm just going to clear my\nscreen\nand I'm going to start my alert manager\nso once I've made changes to my service\nfile so now I'm just going to execute my\ncommand user local bin alert manager amp\ntool now for all of you all who don't\nknow what amptool is amptool is an\nexecutable that allows you to view or to\nmodify the current state of the alert\nmanager okay so once this is done this\nis successful so you can just check the\nconfig file with the help of amp tool\nand once that is successful you can just\nsee that there's one receiver so what\nI'm going to do is I'm just going to\nclear my screen\nand I'm going to start my alert manager\nservice\nnow that the alert manager is up and\nrunning you can see that it's currently\nrunning on port number 9093 so I'm just\ngoing to check out the port where the\nalert manager is up and running as you\ncan see that there is four different\noptions that are given alerts silences\nstatus help and you can just filter your\nalerts group your alerts and you can\nalso see the status of your alerts and\nyou can also see the active pending and\nexpired alerts you can get help from\nthis page too so you can just see your\nalert manager in general and now let's\nso now with the alert manager active\nlet's move on to the demo part\nokay so now that we have set up our\nalert manager so we'll quickly shift\nback to our terminal and I'll clear my\nscreen\nso now we have to configure alert\nmanager into Prometheus I'm just going\nto move out from this directory and I'm\njust going to enter the Prometheus\ndirectory\nI'm just going to list out the files\nthat are present here so I'm just going\nto edit my prometheus.yml file\nand here as you can see I'm going to\nspecify my alert manager\nso I'm just going to specify my alert\nmanager to\nport number 9093 and once I'm done with\nthat I'm just going to save this file\nand now I'm going to restart Prometheus\nokay it's up and running so I'm just\ngoing to check if my endpoint has been\nsuccessfully scraped in my runtime and\nbuild information and if I scroll down\nyou can see that so the alert manager\nhas an end point right and this is it so\nthat's great we have Prometheus repeat\nwe have alert manager up and running now\nlet's just go check the status of all\nour targets\nwe have node exporter which is up we\nhave Prometheus which is up okay now\nlet's go to our alert stage we have one\nalert rule that we've currently written\nand it's inactive now let's get into the\ndemo part and let's so let's just stop\none of the instances I'll think I'm\ngoing to stop my node exporter instance\nand once that starts so let's just see\nhow the alerts go by when one of the\ninstance is shut down okay\nso I'm just opening a new terminal and\nwhat I'm going to do here is I'm just\ngoing to\nokay now what I did is I just entered my\nPrometheus directory I just listed down\nthe files and we have the node exporter\nfile I just changed the directory to the\nnode exporter and listed down the files\nand currently the node exporter is up\nand running obviously but now what I'm\ngoing to do here is I'm just going to\nstop this service okay before that I'll\njust clear my screen\nand I'm just going to stop the service\nand I'm just going to check the status\nso it's inactive and once that is done\nI'm just going to quickly shift to my\nstatus\nof the target so you can see that one of\nthe target is down\nand I'll just execute the up query and\nyou can see that the node exporter has\nthe value 0 that is it's down okay I'm\njust going to check the alerts you can\nsee that the alerts is in the pending\nstate right there's zero in an active\nand there's just one pending so it's\njust going to be in the pending state\nfor a minute if you remember we had\nspecified that for a minute it's going\nto wait if the instance is going to be\ndown so once it crosses the one minute\nthreshold it's going to go to the firing\nstage here it's going to alert the\nmanager that is me currently I will\nreceive the mail saying that one of the\ninstance is down and it's a critical\nalert that you will have to address\nimmediately okay so that's how it really\nworks now let's reload the page and you\ncan see that after a minute it's entered\nthe firing State okay and there are none\nin pending state so it was in pending\nstate for a minute and then it moved to\nthe firing state\nso in the previous session we learned\nabout how to create our own alerts in\nPrometheus and how to be notified about\nthese alerts so that we can take\ndiscrete actions whenever necessary so\nin the next part of the session I'm just\ngoing to integrate Prometheus with one\nof the most famous visualization Tools\nin devops that is grafana so before I\nexplain you about grafana I'm just going\nto briefly explain you about node\nexporter and how we're going to be\ndisplaying its metrics in grafana so\nnode exporter is simply an exporter that\ncollects technical information from\nLinux nodes right such as CPU disk\nmemory statistics I'm sure you must be\naware of this by now so the metrics that\nthe node exporter exposes of the Linux\nmachine that we're currently working on\nthat is Ubuntu all of these metrics are\ngoing to be visually represented in\ngrafana we know that Prometheus doesn't\nhave like a great UI right all of the\ninformation is very textual and it's not\nvery like visually appealing link so\nwith the help of grafana I just really\nwant to you know expose all of these\nmetrics in a graphical representation\nlike gorgeous or you know bar graphs\nanything it could be anything so before\nwe download grafana onto our Linux\nmachine I am quickly going to be making\nsome changes in the yml file before that\nI'm just going to check if my Prometheus\nis up and running\nit is and I'm also going to check if my\nnode exporters are up and running it is\nso that's great I'm just going to clear\nmy screen\nokay so now that is done so I'm just\ngoing to list down the files that are\ncurrently in the Prometheus directory\nand I'm just going to shift to my\nPrometheus file so I'm just going to\nmove into this directory I'm going to\nlist the files okay great so so we're\njust going to make some changes in the\nprometheus.yml file I'm just going to\nokay now you can see that you have our\nalert manager configuration our rule\nfiles script configs a job name but here\nin the static config so I'm just going\nto add the node exporter as a Target too\nI'm just going to add the IP address of\ncurrently it's running on localhost\n9100\nokay great just going to save this\nand I'm going to restart Prometheus\nkids up and running\nI'm just going to clear the screen okay\ngreat\njust going to go down so now I'm just\ngoing to go back to my Prometheus\ndirectory and\nnow let's go ahead and download grafana\nI will click on my web browser and I\njust go to the official website of\ngrafana\nso this is the official website of\ngrafana I'm just going to click on the\ndownload button\nso on this page you can just click\ndownload and then if you scroll down you\ncan see Linux so these are some of the\ncommands that you can use to download\ngrafana on your Linux machine so I've\nalready made a list of all of these so\nI'm just going to use them to download\ngrafana\nand\nokay now that grafana has been installed\nI'm just going to clear my screen\nand I'm just going to check if it's up\nand running\nso I'm just going to use this command to\nstart the grafana server and then I will\ncheck\nthe status of it\nand it's up and running currently it's\nrunning on Port 3000 I'm just going to\nquickly shift to my web browser and\ncheck\nas you can see that grafana is up and\nrunning that's great if you've newly\ninstalled grafana the email address and\nthe password by default is admin\nokay and you can obviously create your\nown password so once you're prompted\nwith your credentials admin then you can\njust create your own password and submit\nit but I'm just going to skip this for\nnow and this is how the grafana user\ninterface really looks like okay you can\nsee that there's a search button there's\nsome icons on the left hand side and\nthere are also panels that you can play\naround with so you can create a\ndashboard that will allow you to create\nbeautiful visualizations for your data\nsource right so once that is done I'm\njust going to add my first data source\njust going to click this option in the\nbasic panel\nand here as we are going to be working\nwith Prometheus we want our data source\nto be Prometheus I'm just going to\nselect this and it says data source\nadded so you can name a data source\nanything you'd like but I'm just going\nto let it be Prometheus for now and our\nURL of Prometheus is\nGoogle host\n90 90\nright once that is done I'm just going\nto check if everything looks fine yes it\ndoes so for adding a data source you all\nyou have to do is name it and then add a\nURL that's how easy it is I'm just going\nto save and test this\nand this is great it's working right so\nonce I've saved and tested it so I'm\njust going to click the grafana icon\nthat's present on the left corner left\ntop corner and this will redirect me to\nmy home page of grafana okay now that we\nare done with this I'm just going to\nclick the plus icon and click on the\noption import so what we're going to do\nis we are going to import the dashboard\nfrom grafana.com so if I search for\ngrafana node exporter dashboard and\nclick on the first link that's available\nit will redirect me to a page which has\nthe name node exporter full right so\nwhat it really does is it has an ID the\nnode exporter has an ID so I'm just\ngoing to copy this ID to the clipboard\nand I'm quickly going to import this ID\nhere okay and I'm going to load it\nbecause we're using the node exported\ndashboard in grafana I'm just going to\ncopy that ID and I'm I'm going to go\ndown if you want to change the name you\ncan do that and I'm going to select\nPrometheus as my data source and I'm\ngoing to import this\nonce that is done you can see a\nbeautiful representation of your CPU\nyour system load your RAM used and the\nroot FS the swap used all of the\ninformation is beautifully been\nrepresented in gauges right these are\ngauges okay and these are the graphs\ncurrently you can see that it's just\nbeen used here you can see busy system\nbusy user and all of how long it's been\nidle for all of the information about\nthis CPU this is basic CPU information\nyou have storage disk you have eight\npanels here you can see that here so\nthere's several different panels that\nhave already been created by grafana and\nall you have to do is import it and add\nyour data source that is your Prometheus\nright and this is way better than\nviewing it on Prometheus because\nPrometheus has everything in text and in\nterms of metrics so it is very boring to\nview it like that I'd obviously prefer\ngrafana to just view all of this\nforeign\nwhy do we need continuous monitoring\nthere are four major reasons as to why\nwe need to practice continuous\nmonitoring the first and obvious reason\nis it allows us to have better Network\nvisibility and transparency continuous\nmonitoring offers devops teams Clarity\non the state of the ID infrastructure by\nautomatically collecting and analyzing\ndata to reflect a possible outages and\nimportant Trends it also facilitates\nrapid responses a primary aspect of\ncontinuous monitoring is implementing an\nalert system that immediately notifies\nthe right people the minute an IT\nincident emerges so this basically\nenables timely response to security\nthreats or functional stop gaps\nminimizing damage and eventually\nallowing faster restoration of the\nsystem to Optimal operational levels the\nthird reason is it minimizes system\ndowntime now consistent system\nmonitoring and quick necessary alerts\nhelp maintain system uptime by raising\nthe alarm when there is a service outage\nor any application performance issues\nthe fourth reason is it helps in\nassisting with healthy business\nperformance reduction in system downtime\nalso obviously minimizes negative impact\non customer experience thus safeguarding\nthe organization against losses in\nrevenue or credibility also continuous\nmonitoring tools can be used to track\nuser reactions to software updates which\nis useful for several teams like the\ndevelopment team quality assurance team\nsales marketing Etc now that we know why\nwe need continuous monitoring let's\nunderstand what is continuous monitoring\ncontinuous monitoring also sometimes\nrefer to as continuous control\nmonitoring is an automated process by\nwhich devops Personnel or anyone can\nobserve and detect compilence issues and\nsecurity threats during each phase of\nthe devops pipeline outside develops the\nprocess may be expanded to do the same\nfor any segment of the ID infrastructure\nin question it basically helps teams or\norganizations monitor detect study key\nrelevant metrics and find ways to\nresolve said issues in real time as we\nhave already seen in the previous slide\ncontinuous monitoring comes in the end\nof the devops pipeline now once the\nsoftware is released into production\ncontinuous monitoring will notify\ndevelopers and quality assurance teams\nin the event of specific issues arising\nin the production environment so what\ndoes continuous monitoring really help\nin it basically assist the it\norganizations devops teams in particular\nwith procuring real-time data from\npublic and hybrid environments this is\nespecially helpful with implementing and\nfortifying various security measures\nincident response threat assessment\ncomputers and database for n6 and root\ncause analysis it also helps provide\nGeneral feedback on the overall health\nof the it setup including off-site\nnetworks and deployed software moving on\nlet us check out out the continuous\nmonitoring tools and devops now there\nare several devops tools for the\nmonitoring ecosystem that help both\ndevelopment and operation teams work\ntogether effectively now the first one\nis the monitoring tools it should come\nas to no surprise that we're starting a\ndiscussion of devops tools with the\nfocus on the set we know best that is\nmonitoring tools a good monitoring\nplatform lets you monitor infrastructure\nand application performance whether\non-prem in the cloud or across\ncontainerized environments so you have\ncomplete visibility into every system\nall the time now some of the tools are\nsensui negios Prometheus now sensui is a\nflexible and scalable Telemetry and\nservice Health checking solution for\nmonitoring servers containers Services\napplications functions and connected\ndevice Prometheus on the other hand\nrelies on the pull method to collect\ninformation with the built-in database\nnagios is the Legacy monitoring tool\nthat introduced more monitoring\npractices to a generation of operators\nthe next one on the list we have devops\nconfiguration management tools now\nconfiguration management tools allow you\nto automate the provisioning and\ndeployment of systems info's desired\nconfigurations and remedicate\nconfiguration drift by modeling your\ninfrastructure as code you can apply\nsoftware delivery practices like Version\nControl automated testing and continuous\ndelivery to infrastructure and\napplications some of the tools are\nansible Chef puppet ansible is written\nin Python which is agentless and\nutilizes an imperative approach Chef on\nthe other hand is written in Ruby which\nalso relies on an imperative\nconfiguration management approach puppet\non the other hand relies on a\ndeclarative configuration management\napproach using a domain specific\nlanguage and an agent Master\narchitecture moving on we have devops\nalerting tools this provides both\nactionable and informational system\nalerts and can be customized to fit the\ncomplexities of your system now for\nexample your alerting system needs to be\nsensitive enough to cover an outage but\nnot so sensitive that you're catching\nfrequent and unnecessary problems that\nusers aren't really going to see there\nare some alerting tools like page Duty\nservicenow slack page duty is an on-call\nmanagement platform with add-ons for\nanalytics event intelligence and\nautomated incident response servicenow\non the other hand utilizes automated\nworkflows for itsm as well as customer\nservice and business processes\nslack on the other hand lets you\nconsolidate alerts into the same\nplatform you use for group chats and\ncollaboration next on the list we have\nmetric storage once you have automated\nconfiguration management alerting and\nmonitoring you will have a whole lot of\ndata at your disposal to learn from The\nChallenge is how do you securely store\nand analyze it you obviously need a\nstorage system that lets you Aggregate\nand learn from system capacity user\nBehavior service levels security risks\nand much more this is exactly where\nmetric storage comes into the picture\nthe different types of tools are\ninfluxdb Splunk AWS influx DB is simply\na Time series database that's suited for\nlong-term data storage Splunk on the\nother hand uses a search engine database\nmodel to store and query data AWS on the\nother hand supports a wide range of\nstorage purposes including relational\nand non-relational databases a data\nwarehouse for analytics a Time series\ndatabase a ledger database to store\ntrend transactions and much more in this\nsession along with grafana we will also\nlearn how to configure influx DB to get\nreal-time data so stay tuned for that\nmoving on to the last type of continuous\nmonitoring Tools in devops we have\nvisualization tools now a visualization\ntool might be considered essence of your\ndevops dual chain for monitoring you get\nto basically combine all of your data\nhere sort and finally visualize it that\nis display it on customizable dashboards\nnow what really visualization tools do\nis they provide context and meaning that\nallow you to track changes and\nimprovements over time and they also\ngive management a real-time view that\nhelps guide strategic decisions\ncustomization options make it easy for\nteam members to design and share their\nown dashboards grafana can be used on\ntop of a variety of different data\nstores including graphite influx DB and\nelasticsearch now that we know that\ngrafana is a visualization devops tool\nlet's move on to the next part of the\nsession introduction to grafana\nfirstly let us understand what is\ngrafana grafana is a multi-platform open\nsource analytics and interactive\nvisualization web application it\nbasically provides charts graphs and\nalerts for the web when connected to\nsupported data sources grafana is\nexpandable through a plugin system it\nallows you to query visualize alert on\nand understand your metrics no matter\nwhere they are stored create explore and\nshare dashboards with your team and\nFoster a data-driven culture also\ngrafana has become the world's most\npopular technology which is used to\ncompose observability dashboards with\neverything from Prometheus and graphite\nmetrics to logs and application data to\npower plants and beehives with all of\nthis said let's move on and check out\nsome of the features of grafana the\nfirst one is to visualize from heat maps\nto histograms graphs to Geo Maps grafana\nhas a plethora of visualization options\nto help you understand your data\nbeautifully the second feature is alert\nand grafana seamlessly Define alerts\nwhere it makes sense while you're in the\ndata Define thresholds visually and get\nnotified via slack pager Duty and much\nmore you can also unify in grafana bring\nyour data together to get better context\nthis is because grafana supports dozens\nof databases natively and the best part\nis that you can mix them together in the\nsame dashboard the next important\nfeature is that it is open source\ngrafana gives you various options it's\ncompletely open source and backed by a\nVibrant Community use grafana cloud or\neasily install it on any platform the\nnext important feature is that grafana\ncan extend you can discover hundreds of\ndashboards and plugins in the official\nlibrary of grafana because of the\npassion and momentum of their Community\nnew ones are added almost every week the\nlast feature of grafana is collaboration\nyou can bring everyone together and\nshare data and dashboards across teams\nit basically empowers users and helps\nFoster a data-driven culture\nwith all of this said let's dive right\ninto the demo and install grafana into a\nlocal machine now I will be working on\nmy Linux virtual machine that is Ubuntu\nand if you are working on it too then\nyou can follow the same procedures to\ndownload grafana onto your local machine\nnow to do that we will firstly go to the\nofficial website of grafana so here you\ncan see how you can install grafana on\nUbuntu so there are some set of commands\nthat you'll need to incorporate to\ndownload grafana onto your system and\nyou'll have to just follow that now I'm\ngoing to open my terminal\nso once we install grafana onto our\nlocal machine I am going to explain you\nthe entire graphical user interface of\ngrafana and how it really looks how we\ncan make dashboards how we can make new\npanels in your dashboards Etc all of\nthat we'll be learning in this part of\nthe session moving on now let's go ahead\nand install grafana into our system\nso have a set of commands already in my\nnotepad so I can just copy paste it and\nI can make the entire process more\neasier so I'm going to copy the first\ncommand in the notepad\nand this will allow me to download the\npackages for grafana so now that's done\nI'm going to download grafana and all of\nits packages and and then I'm going to\nstart and enable grafana server\nnow the grafana server has started you\ncan see here and its status is active\nand running so that's great so in the\nnext step I want to know on which Port\nis my grafana instance running on so for\nthat I'm just going to type in the\ncommand sudo\nAlice of hyphen I hyphen uppercase P so\nthis command will give me a list of\ninstances that is currently running on\nmy VM and as you can see grafana\ninstance is running on Port 3000 so now\nI'm going to open my local browser and\nI'm going to\ntype localhost\nand since the grafana server is running\non Port 3000 I'm going to type that and\nthis will redirect me to the login page\nof grafana and as you can see the\ngrafana page will prompt you to enter\nthe username and password by default the\nusername and password of your Port 3000\nis admin so the username is admin the\npassword is admin and I'm gonna log in\nnow if you want a new password and you\ndon't want it to be admin you can just\ntype in your new password and confirm it\nand then submit it for now I'm just\ngoing to skip that\nnow you can see the home page of grafana\nand it's very interesting because all of\nthese that you can see the blue pick\nboxes that you can see are all panels\nyou can really play around with these\npanels you can view them you can edit\nthem you can share them you can\nduplicate these panels you can remove\nthese panels you can also move around\nthese panels so this is really\ninteresting even the welcome to grafana\npanel can be moved around can be edited\nit can be shared you can remove it you\ncan make changes you can really play\naround with all of these panels in\ngrafana and if you scroll down you can\nsee a Blog which will give you the\nlatest updates about grafana and its\nchanges that are occurring every day\nalso there are a list of dashboards on\nthe left hand side this also is a panel\nand you can just view edit share them\nand do whatever you want with it\ncurrently you can see there's only one\ndashboard that I've worked on and that's\nthe world map dashboard so this is the\nhome page of grafana and if you want to\nto return back to the home page of\ngrafana at any point of time when you\nare working on this application you can\nsimply click on the logo on the left\nhand corner and this will just redirect\nyou to this main home page now if you\ncan see on the right hand side there are\ntwo symbols the first one which says\ndashboard settings and the next one\nwhich says cycle View mode now the\ndashboard settings is pretty interesting\nbecause if you click on it because you\ncan access to the general configurations\nof the application you can name your\nmain refiners whatever you'd want to you\ncan also add a description to the home\ndashboard you can add tags you can also\nplace it in a general folder which is\npretty interesting you can edit it you\ncan Auto refresh it based on time Etc\nyou also have annotations variables\nlinks Json model all of these are not\nreally necessary because this is a\nbeginner tutorial I'm not going to\ndiscuss any of these in details but this\nis what the home settings allow you to\ndo the dashboard settings now the cycle\nView mode is pretty interesting now if\nyou want the left hand panel you can see\na left hand panel with certain icons\nthat are present if you want to not view\nthis you can just click on the cycle\nView mode and that will disappear and\neven if you want the Home tab to\ndisappear you can just click on the\ncycle View mode and it will just um you\nknow hide everything and if you want to\nget back the panels you can just click\nthe escape button on your keyboard and\neverything will return back to normal so\nI hope this is clear I hope this home\npage was really easy to understand now\nlet's move on and check out these icons\nthat are present on the left hand side\nso if you want to search any of the\ndashboards that you've created you can\nobviously click on the search button and\nthen just search it by name so you can\nsort them based on alphabetical order as\nI've already mentioned there's only one\ndashboard currently that I've worked on\nthat is named world map\nlet's move on to the next icon the plus\nicon which will give me four different\noptions that says create dashboard\nfolder import now if I want to create a\nnew dashboard I can click on this\ndashboard option and it will redirect me\nto a page where it says new dashboard\nand you can add a new panel now the\npanels are pretty interesting because\nyou can really play around with these\npanels you can increase its size you can\ndecrease its size you can move around\nwith these panels by just hovering your\ncursor over the top part of the panel\nand then just you can really move around\nand play around you can also add panels\nto this by clicking on that and this\nwill redirect me to another page where I\ncan select I can give my panel title I\ncan add a description to my panel I can\nchoose what kind of visualization I want\nto represent my data in if I want to\nrepresent it in a graph I can click the\ngraph if I want to express it in a Gorge\nform I can do that too by clicking on\nThe Gorge option it's really interesting\nyou can really pick your options out\nthere are various options you can also\nview the plugin list options there are\nseveral thousands of plugins that are\navailable on grafana which you can\ndownload on your OPM and and you can\nview these panels here so that's\ninteresting moving on we also have\nqueries you can select your database\nfrom this option currently the default\ndata source is selected you can also\nwrite your queries as you'd like to\ndisplay them and that will be expressed\nin the visualization form that you have\nselected we can remove these panels by\nclicking on the remove button if you\nwant to add a new panel you can just\nclick on this add panel option you can\nadd as how many ever as you'll need so\nthere's no limit to this\nso you can add herniable panels you'd\nwant to using the add panel option you\ncan also save this dashboard you can\nname it as whatever you'd want to and\nyou can choose a folder so we're going\nto learn about that in the next part so\nyou can create different folders and you\ncan save different dashboards to each of\nthese folders that's where the folder\noption will allow you to do and you can\nalso check out the dashboard settings\nwe've already discussed this and you can\nalso again view this in a cycle View\nmode and there's a Time range that you\ncan pick using this option which will\nallow you to display data in terms of\ntime and finally you can zoom out and\nyou can also refresh the dashboard if\nyou've made any changes you can save it\nand refresh your dashboard and the\nIncorporated changes will display\nimmediately I hope this is clear the new\ndashboard option is a pretty important\noption and this is what you'll really be\nworking on in most of this application\nas I've already mentioned previously you\ncan create as many folders as you'd like\nto so I can name my folder anything I'd\nwant to and then just create one and\nwhenever I make a new dashboard I can\nsave those dashboards that I'd want to\nsave in that particular folder so this\nwill allow me to really manage my\nfolders also there's an option called\nplaylist where I can create playlists to\ncycle dashboards and TVs without user\ncontrol and the last options will allow\nme to view my snapshots so with this I\nhope the folder option is clear so this\noption will allow me to import dashboard\nfrom the file or you know from the\nofficial website of grafana the next\noption is the explore option so here you\ncan really just explore the entire\ndatabase and you can just add new\nqueries you can run queries so this\noption will allow me to write queries\nfor my data and the options or the\nanswer the results of these queries will\nbe displayed here so the explore option\nis a little different and it's pretty\ninteresting moving on we have alerting\nalerting is another really important\noption in in grafana so what really\ngrafana alerting allows you to do is it\nallows you to attach rules to your\ndashboard panels so when you save the\ndashboard grafana extracts the alert\nrules into a separate alert rule storage\nand schedules them for evaluation you\ncan view all of these alerts or you can\nsearch for alerts in this option so in\nthe alert tab you can also specify alert\nrule notifications along with a detailed\nmessage about the alert rule this can be\ndone via the channels so you can create\nrules and you can just search for them\nalerting is a really important option\nhere moving on we have configuration now\nthis configuration part is extremely\nimportant because this will allow you to\nadd a data source into your grafana\nright so you can click on the option add\ndata source and this will redirect you\nto a page where you can see a series of\ndifferent databases you can see time\nseries databases you can see logging and\ndocument databases you can see\ndistributed tracing you can see SQL\nCloud Etc so you can just select any of\nthem and just create one you can see\nthat in Time series databases you have\nPrometheus you have graphite you have\ninflux DB and in SQL you have MySQL post\nGRE SQL Microsoft's SQL server in Cloud\nyou have Cloud watch Azure rafana cloud\nand you have many other options that you\ncan really select so this is great so\nyou can just add your data source using\nthe data sources option in configuration\nalso you can control and view the\ndifferent users that are working in your\ngrafana by clicking on the users option\nand you can also search the user by\ntheir name email login Etc you can\ncreate teams so you have a particular\nproject and you want to work with a\nparticular team you can just create any\nnumber of teams that you'd like grafana\nprovides n number of plugins that you\ncan download from the internet and you\ncan incorporate these in your dashboards\nor in your panels so these are really\ninteresting you can search them by name\nor type and you can also download more\nplugins on grafana.com by clicking on\nthis option moving on we have\npreferences you can update your\norganization profile you can also switch\non to different themes here if I click\non the live theme and then save it it\nwill change my grafana into a light\ntheme and because I prefer the dark mode\nI'm just going to switch back to that\nnow the last operation in the\nconfiguration is the API Keys you can\nadd a new API key that's all this option\nreally allows you to do finally you have\nthe options server admin here you can\nview the users you can view your\norganizations so this option really just\nallows you to check out your system\nsettings that are configured in grafana\nalso you can just check out the\nstatistics of the users admins viewers\nthe active sessions the total number of\nplaylists your total number of snapshots\nhow many dashboard tags you have how\nmany alerts you've got and how many\nusers have been active since a\nparticular amount of time that is here\n30 days all of the statistical\nactivities that are occurring in grafana\ncan be viewed in this option and finally\nyou can also upgrade your grafana to\ngrafana Enterprise so this is what the\nentire graphical user interface is about\nthere are other two options that I'd\nlike to talk about is this icon that you\ncan see on the left corner this will\nallow me to sign out this will allow me\nto change my password and also change my\npreferences now if you'd like to edit\nyour profile make some you know really\nnominal changes or you'd like to change\nsome preferences you can click on this\noption and just do that you can also\nchange your password here if you'd like\nto and if you click on this question\nmark icon you can see the version of\ngrafana currently we're working on\nversion\n7.3.7 and these are all the community\nsupport keyboard shortcuts all of this\nis given in The Help option so I'm just\ngoing to click on my grafana logo and\nmove back to my grafana homepage with my\nhome dashboard\nso I hope this part of the demo really\ngave you an overview of how grafana\nlooks like how grafana works or how you\ncan get started really with grafana and\nalso I hope it helped you install\ngrafana into your local machine because\nthat is really important once you\ninstall it and once you configure it you\ncan just get started with it now before\nwe get into the demonstration let us\njust go check out what we're gonna\ncreate\nso firstly we'll be creating a world map\nwhich will show us the confirmed cases\nof covid-19 over the past one year so\nall the panels that we've really created\nhere is the data of the past one year\nitself as you can see on the left bottom\ncorner of the world map panel there is a\nwhite tiny box which is called as a\nlegend and as you can see cases with\nless than 100 cases is represented in\ngreen color and 100 to 10 000 cases is\nrepresented in orange color and cases\nabove 10 000 is represented in red color\nso so only the confirmed cases has been\nrepresented on this world map now if I\nscroll down you can see a bar graph\nwhich represents the confirmed cases\ndeath cases and the recovered cases of\nIndia so the green one represents\nconfirmed cases the Blue Line represents\nthe recovered cases and the yellow one\nrepresents the death cases this is again\nrepresenting the cases over the past one\nyear in India\nso if I scroll down I've created three\nmore panels of the confirmed cases in\nIndia death cases in Indian recovery\ncases in India and this is the average\nnumber over the past one year this is\nnot the total or the sum of all the\ncases and have represented these panels\nin the form of gauges now moving on I\nhave also made four different panels\nrepresenting each of the state cases\nokay so here we have Maharashtra\nKarnataka Delhi and Kolkata and this is\nthe graph of their recovered cases death\ncases and confirmed cases so this is a\npanel which represents the state\nMaharashtra and the recovered confirmed\nand death cases are represented in the\nform of a graph so this is what we're\ngoing to create I hope you guys like it\nwithout Much Ado let's get started\nso before we begin we have to install a\ndata source into our local machine right\nso for this demonstration I'm going to\npick influx DB influx DB is basically a\nOpen Source Time series database which\nis optimized for fast High availability\nstorage and retrieval of Time series\ndatas in terms of fields you can use\ninflux DB for operations monitoring\napplication metrics Internet of Things\nsensor data and also real-time analytics\nthat's what we are going to do right so\nto install influx DB we can go to their\nofficial website and check out the\ncommands to install influx DB on Ubuntu\nso these are some of the commands that\nis given in the official website I have\njust made a list of it in my notepad so\nthat will be easy for me to install it\nyou can also follow the same procedure\nelse you can just go to that official\nwebsite and get the commands to install\nin your operating system\nso I'm going to switch back to my\nterminal\nso these are some of the commands that\nwill allow me to install in fluxdb into\nmy one two so I'm just going to copy\nthis and I'm going to paste this\nand once that is done you can copy the\nremaining commands that will allow me to\ninstall influx DB and start it on my\nserver\nnow the last command I'm going to copy\npaste the last command\nand this will start my influx DB now to\ncheck on which Port my influx DB is\ncurrently running on I am just going to\ntype out the list of current running\ninstances\nmy bad it's sudo LS of hyphen I hyphen p\nand this will give me the current\nrunning instances as you can see that\ninflux DB is running on server 8086 so\nthat's great we have influx DB running\nwe also have grafana server running on\nPort 3000 now that we have both our\ngrafana server and influx DB up and\nrunning we can move on and create our\ndatabase and activate it\nI'm just going to clear the screen\nso now I'm just going to type in flux\nand I'm going to enter my shell of\ninflux here I want to check out the\ndatabases that are currently present on\nmy influx database so it will show me\ntwo databases that is internal database\nand covered so internal database is a\ndefault influx DB database and covid is\na database that I have created manually\nin the past before now if you want to\ncreate your own database like the one\nwhich I just created covet you can just\ntype create database covid-19 and click\nenter this will automatically create the\ndatabase covert now if I click on show\ndatabases it will show me that there is\na new database covid-19 now I can use\nthe database covid-19 with the command\nuse covid-19 and if I click on show\nmeasurements it has none right now so\nit's not going to show any measurements\nnow we'll switch to grafana and we will\nactivate\nour covid-19 database into influx DB so\nnow I will switch to my home page of\ngrafana and click on add your first data\nsource and this will redirect me to my\ndatabase page which will give me a list\nof all the databases that's available\nsince we'll be working on influx DB I'm\njust gonna select this and this will\nredirect me to a page where I can name\nmy influx DB database as whatever I'd\nlike to name it and it will also prompt\nme to enter a URL so as we already know\nthe influx DB is currently active on\nport number 8086 I'm gonna write that\nand if I scroll down it will also show\ninflux DB details and here I can select\nmy database so I'm just going to type\ncovid-19 okay so that's clear there's\nname influx DB1 we will also add in the\nURL with port number 8086 and we will\nalso given the details of the database\nthat we're currently working on that is\ncovid-19 and we will just click on Save\nand test data so it says data source\nupdated data source is working this is\ngreat now I'm simply going to go ahead\nand create my first dashboard I'm going\nto create my first panel and the first\npanel that we're creating is the world\nmap data so by default you won't have\nthe world map visualization you will\nhave to go to the grafana plugins\nwebsite and you will have to download\nthe world map panel by yourself so you\nwill have to go to grafana plugins and\nclick on panel option here and you can\nsee that the first panel that will turn\nup is the world map panel I'm going to\nclick on the world map panel and going\nto click on the installation and you can\nsee that there is a command which will\nallow me to install the world map panel\nso I'm just going to copy this\nI'm gonna quit from this and I'm going\nto type in sudo and I'm going to paste\nthe command that I just copied and this\nwill immediately download install the\ngrafana world map panel into my grafana\napplication\nafter the refiner world map panel has\nbeen installed successfully I will have\nto restart my grafana for this I will\nclick on sudo service\ngrafana server\nrestart\nand this will automatically restart my\ngrafana server now if I switch back to\nmy dashboard and reload this page\nand if I just click the world map you\ncan see that the panel has been added so\nI'm just going to click on that panel\nnow what we're going to do is we are\ngoing to get our data set for this I'm\njust going to download my data set from\ntrack corona.live.api\nso the reason as to why I'm using this\ndata set is because the world map plugin\nhas a format that needs to be followed\nso there is latitude longitude there's\nthe name of the country and also there\nis a metric the metric is another\nparameter that needs to be followed\nwhich will allow you to give you a\ncertain radius for the particular\ncountry that you are representing on the\nworld map so all of this format is\nclearly satisfied on this track\ncorona.api database and all of this\nformat is satisfied in this country\nlevel data on track corona.live API so\nI'm just going to download this link\nlocation and directly download it on my\nterminal and I will just do this by\ntyping in the command sudo wget now that\nI copied the location of the data set\nI'm just going to download it directly\non my virtual machine with the command\nsudo wget and I'm going to paste the\nlink location\nand this will automatically download the\ndata set into my local machine\nnow you can see that the countries.csv\nhas been successfully downloaded and\nsaved and I can view this\ncountrys.csv.1 when I list it down I'm\ngoing to clear my screen\nso once I clear my screen\nnow I will go and I will start coding I\nwill create my first python file I will\nname this world map Dot py\nand I will start editing my file\nfirst I will have to import pandas is PD\nI will also require a client for my\ninflux DB database so I'm just going to\ntype from so as you can see that I've\nalready typed out the entire code so I\ncan now explain it to you and as I've\nalready mentioned firstly you'll need to\ncreate a client and you will have to\nincorporate two parameters for this\nclient that is the host and the port\nnumber so that's what the code does in\nthis line then you'll have to connect\nthe client to the database and uh since\nour database name is covid-19 I'm going\nto pass that and then you'll have to\nread the CSV file so whatever the name\nis of your CSV file just add that here\nthen I'm going to drop the null values\nand then print it and in this for loop I\nam just going to iterate over this DF\nand for every row inside this DF I will\nadd a value inside my influx server now\ninflux server is a no SQL database so\nyou need to send in the Json format\ndatabase so this Json body has basically\nthree fields three really important\nFields the first one is measurement the\nsecond one is tags and the third one is\nFields so measurement is uh the table or\nthe name in which the data is stored and\nfor now we're just going to name the\nmeasurement as covet map the tags are\nthe property which is repeated now what\nI'm going to do is to explain this I'm\njust going to download this CSV file now\nonce I download the CSV file I can see\nthe location there's a location that is\nthe country name and there's also code\nfor that country for that particular\ncountry you also have the latitude\nlongitude data you have confirmed dead\nrecovered updated Etc\nso the second field that is the tag\nfield is a property which is repeated\nseveral times for example the country\nnames the country names have obviously\nrepeated several times because based on\nthe case and the confirmation or the\ndebt there's a country name right so\nobviously here in this database the\ncountry has been repeated several times\nso if there are cases from the United\nStates there are many cases of United\nStates so that particular country has\nbeen repeated several times tags is\nbasically property which has been\nrepeated now I'm going to keep the tag\nas the country and because it's in row 0\nthe country name I'm just going to\nmention that row 0. so the next one is\nfields and this is anything except the\ntags so anything which is not a tag is\nbasically a field so there are four\ndifferent parameters here that's name\nlatitude longitude and Metric I've\nalready mentioned this earlier in the\nsession so the name is again in row 0\nthe name of the country the latitude and\nlongitude is given in Row 2 and Row 3 so\n0 1 2 3 right so Row 2 and 3 I've\nspecified that Row 2 here and then the\nmetric is given in row 4. so the metric\nhere can be either confirmed dead or\nrecovered so you can either represent\nthe dead cases in your world map or you\ncan also represent the recovered cases\nin the world map but right now I'm just\ngoing to represent the confirmed cases\non the world map so I'm just going to\npick that as my metric and that's on row\n4. so I've just mentioned that then I\nwill finally pass on the Json body to my\nclient and then I'm just going to print\ndone\nnow I hope this piece of code is cleared\nI'm just going to save it\nonce that is done I can just run this\nfile so it's Python 3 world map Dot py\nokay great so it's clear\nand I'm going to install pandas and\ninflux DB so I'm just gonna click fifth\nthree install\npandas in flux DB\nand this will automatically install\npandas and influxdb for me because I\nalready have both of these installed it\nsays requirement already satisfied if\nyou don't it will download for you now\nmoving on I will clear the screen and\nexecute my world map python file\nso it has 230 columns and eight rows now\nI will enter my influx shell and I will\ncheck out my databases I'm just going to\nuse my database go with 19 and after\nthat I'm just going to check out my\nmeasurements so we just created one\nmeasurement in the world map python file\nand that is covered map so that's given\nhere now moving on we will\ncheck out\nthe data information in our covid map\nmeasurement as you can see there's time\nthere's name of the country this\nlatitude this longitude that's great\nokay now we'll switch back to our\ndashboard and create our world map panel\nso I'm just going to create a dashboard\nadd a new panel and then here I'm going\nto click on visualization as world map\nthe panel is right here so first what\nI'm going to do is I'm going to select\nmy influx DB1 then I'm going to select\nmy measurement as covid map and I'm\ngoing to add the fields there are three\nFields I'm going to remove this field\nthe next field that I'm going to add is\nlongitude and I'm going to add another\nfield that is metric then I will add\nname I'm going to remove this too\nand format it as a table\nonce that's done\nI am going to check out my map data\noptions now in the map data options I'm\ngoing to click the location data and\nselect table and in the field mapping\noption the table query format should\nalways be in terms of coordinates and as\nsoon as I click that you can see that\nthere are circles that appear in the\nworld map now the location name field is\nname now once I specify the location\nname field as name and refresh my\ndashboard so when I hover my cursor on a\ncertain area then it will show me the\nname of the country so you can see that\nthe green ones have 10 plus cases so the\nlegend that is present in the it will\ngive me an idea of what each color\nrepresents so the green currently\nrepresents more than 10 cases and orange\nwill represent cases that are between 0\nto 10 and red will represent cases that\nare less than 10 so we'll just change\nthis threshold you can change the\nthreshold options here so I'm just going\nto keep the threshold as 100 and 10 000\nand I'm just going to save this so the\ncases that are less than 100 should be\nin green color so I'm just going to\napply that so the cases that are more\nthan 10 000 I'm just going to represent\nthat in red color so I'm going to click\non the red color I'm going to apply\nand now you can see that the countries\nwith more than 10 000 cases are going to\nbe in red color but the countries\nbetween 100 to 10 000 cases are going to\nbe represented in orange color and the\ncountries with less than 100 cases are\ngoing to be represented in green color\nso this looks pretty good right now\nwe'll just go to the setting and then\njust change the name of this to world\nmap\nokay I want to have a transparent\nbackground so I'm just going to use this\noption to switch to that and I think\neverything looks good I think a map is\nready I'm just going to save this\nand I'm just going to save it in the\ngeneral folder\nonce that is done I will elongate my map\nso you get a clear picture of how it\nlooks this looks good right now let's\nquickly move on to the next part of this\ndemo now for the next part of this demo\nwe're going to go to kaggle and I will\nlook for covid-19 data sets so in the\nsearch keyboard I'm just going to search\nfor novel coronavirus 2019 data set and\nI'm going to click the first data set\nand if I scroll down this data set has a\nserial number observation date the state\nthe country this is perfect for me for\nthe next part of the session so I'm just\ngoing to download that\nand then once I finish downloading it\nyou can see that you have an observation\ndate you have the state country the last\nupdate confirmed debts and recovery so\nhere in this particular data set you can\nsee there's a serial number there's an\nobservation date you have the state you\nhave the country you have the last\nupdate confirmed case the deaths and\nRecovery based on that particular date\nnow this is great for me so I'm just\ngoing to paste this data directly into\nmy file as you can see the covid-19 data\nset is already here I'm just going to\nplace this in that directory the edureka\ndirectory I'm just going to click clear\nand now I'm just going to check my LS\nyou have the covid-19 data set here so\nnow I'm just going to create a file\nthat's named graph to write my python\ncode and I will edit it\nso I'll just type in my python code and\nthen explain it to you in the end so it\nwon't take up much time\nnow as you can see that I've already\ncreated a client to my influx DB and\nthen I add in the database covid-19 and\nI'll have to pass a variable to read the\nCSV file that is covered 19data.csv and\nthen I'll drop the null values after\nthat I will iterate through the Json\nbody which has three fields that we've\nalready talked about the first one is\nthe measurement field and I'm going to\nname this as kobit metric I also have\nthe tags here so here I'm going to\nspecify the country and state we have\nthe country in row three so zero one two\nand three and we have the state in the\nRow 2 so I'm just going to specify Row 3\nhere and Row 2 here so I hope that is\nclear in the fields we have confirmed\nwhich is in the fifth row that's in the\nsixth row and recovered in the seventh\nrow so fifth sixth and seventh this key\nis a pretty interesting key the time key\nso here as you can see the time column\nis outside the fields you can add key\nwhich is called as time here and you can\nuse observation date that is present in\nthe Row 1 column you can see that the\nobservation date is given in the Row 1\ncolumn but because it's in the form of\nstring data we will have to convert it\nto the timestamp format and this is\nPossible only with the help of the date\ntime python Library so we can just\nconvert this into UTC timestamp in this\nline of code so what it really does is\nit takes out the time component from the\nstring and then you can format it in\nthis particular format that is the month\ndate and yeah so this is the format that\nwe are going to present it in so so it's\npercentage M front slash percentage D\nfrom slash percentage y so that's month\ndate and Year I hope this is clear now\nwe'll just quit and execute this\nchord\ngraph.py and as you can see here there\nare 15\n000 rows and eight columns now this is\ndone it will send a message okay I'm\ngoing to clear the screen in some cases\nyou will have to restart your grafana\nserver so that the data is incorporated\ninto your application else you could\njust check your databases\nso here I'm going to check the\nmeasurements and you can see that covid\nmetric is present so select start from\ncovid metric\nI'm going to just limit it to 20 now and\nthis will show me the time confirmed\ncases the country the debts recovered\nand the state okay now that this is\nclear\nwe can get back to a dashboard and\ncreate a new panel I'm just going to\nname this panel\ncovid-19 India\nokay now what I'm going to do is I'm\ngoing to select now I'm just going to\nselect my influx DB1 database\nand I'm going to select metric I'm going\nto specify the country and I'm just\ngoing to specify India here and in field\nI'm just going to add confirmed debts\nand I'm going to add another field\nrecovered\nokay and if you want to show the legend\nyou can do it or you can just choose not\nto I'm just going to show the legend\nhere\nand that's it you can just save it and\napply it and you can see the bar graph\nand the other important thing here is\nyou'll have to specify the time\nsometimes it'll just be for today or you\nknow as default it'll just be for\nbecause this data is from the last year\nyou'll have to specify the data for the\nlast one year and the graph will\neventually display so I'm just going to\napply this I'm just going to shift my\nworld map above it\nI'm just going to stretch this out\nokay so this looks fine\nnow I'm just going to make gorgeous so\nI'll just add a new panel and I will\nselect influx DB1 measurement as metric\nwhere country is equal to India okay and\nthe field value here right now will just\nbe confirmed now I'm just going to name\nthis\nconfirmed cases in India okay and I do\nwant to display the panel with the\nbackground so I'm just going to let it\nbe displayed with the background and now\nI'm just going to select my Gorge okay\ngreat now because this is confirmed\ncases I want this to be in yellow color\nI don't want it to be in any other color\nso I'm just going to change the\nthreshold color to yellow and I'm going\nto apply\nokay great I'm gonna add another panel\nso this time it's going to be for the\ndepths and I'm going to just select\ngauge gonna rename my panel title to\ndeath cases\nin India and as you can already see the\ntime ranges for the last one year so\nthat's great this is already in red I\nwant the death cases to be represented\nin Red so I'm just going to apply I'm\ngonna just shift this here and resize it\nokay great and the last one is the\nrecovered cases right so I'm just going\nto\nwork on that too I'm going to select\nmeasurement as covet metric where\ncountry is equal to India\nand the field value is recovered okay\nthis is great I'm going to change the\nthreshold to Green\nokay great\nand everything looks fine just we will\nchange the\nokay I'm gonna apply\nI'm just gonna reposition this again\nso this looks okay\nif you want to move all of these down\nyou can just pull the world map up and\nthen just pull the covid-19 cases up to\nnow you can see the confirmed cases\ndeath cases and recovered cases this is\nall the mean value now using the new\npanel I'm going to represent four states\nI'm just going to select measurements go\nwith metric where state is equal to\nMaharashtra and field value is equal to\nconfirmed and I'm just going to add more\nfield values deaths\nand then recovered okay wait this looks\nfine and I'm just gonna name this\nokay\nI'm gonna represent this in graph I'm\nokay with that\nI want to display this without a\nbackground so I'm just gonna shift this\ndown as much as I can okay this looks\nokay I'm just gonna make this for three\nmore States\nmetric where state is equal to Karnataka\nfield value confirmed\ndeaths\nand finally recovery\nokay and this is Karnataka so I'm going\nto name that\nand I want to display this without a\nbackground looks neat and clean\nthere's one thing you could do is you\ncould add Alias because you'd want the\ngraph to be represented properly so this\nwill just add earlier's I'm just going\nto add that's here\nand finally we will add\nrecovered\nokay this looks great\nalso I'm gonna add alias in the\nMaharashtra state so confirmed\ndeaths\nand finally\nrecovered\nokay\nand we will apply this\nokay looks good so we have two more\nstates to work on we will work on West\nBengal\nconfirmed I'm going to add alias\nand then I'm going to add another field\nwhich will give me debts\nand this will also give that\nI'm gonna add another field\nrecovered and this I can just try it\nrecovered\nokay\nand I'm gonna just add\nWest Bengal here display without a\nbackground\nand apply\nfinally this is our last panel that\nwe're going to work on\nand I will add for Delhi\nconfirmed I'm going to add alias\nconfirmed\nI'm going to add two more fields and I'm\nsure you must be very much familiar with\nhow this works now\nokay I'm going to display this without a\nbackground and I'm going to name this\npanel Deli\nthat's it guys this is how easy the\ntutorial is this is how easy it is to\nuse grafana you have your world map you\nhave covid-19 analysis of India you have\nthe confirmed cases you also have the\nconfirmed death and Recovery cases which\nis represented in terms of cages and\nalso you can represent all those State\nanalysis of covid-19 in terms of a graph\nnow if you want to change the name of\nyour dashboard you can simply go to\ndashboard settings and then just change\nit to whatever you want so I'm just\ngoing to say covid-19 analysis India\nokay and I'm just going to save\ndashboard\nokay great\nand this is all now in the next part\nwe're just going to learn a little bit\nabout variables\nso we're moving on to the last part of\nthis session and we are going to learn\nabout grafana variables if you're not\nnew to programming or coding you must be\nvery much aware that variables are just\nplaceholder for a value right so you can\nuse variables in metric queries and also\nin panel titles so what variables in\ngrafana do is they give you the ability\nto create more interactive and dynamic\ndashboards let us go ahead and check out\nhow this happens\nnow I'm back to my terminal I'm just\ngoing to type in flux now instead of\nhard coding things like server\napplication and sensor names in your\nmetric queries you can use variables in\nplace of them\nnow before we move ahead I'm just going\nto\nuse my covid-19 database and I'm going\nto write a query show tag values with\nkey is equal to Country and this will\ndisplay me a list of all the countries\nthat are present in my covid-19 database\nand this is what exactly variables do so\nthis is exactly what grafana allows you\nto do if you have multiple identical\ndata sources or servers right you can\nmake one dashboard and use variables to\nchange what you are viewing so what this\nreally does is it simplifies your entire\ndata now I'm just going to click on the\nlogo and I am going to if you remember I\nhave already mentioned this before that\nif you click on the dashboard settings\nyou will get the option of variables on\nthe left hand side so I'm just going to\nclick on the variables and then I'm\ngoing to add a new variable I can name\nthis variable whatever I'd like to I can\njust name it as covid countries\nso all the rules that we had learned\nsyntax rules that apply to variables\nalso applies here in grafana\nso the type is query you can also use\nconstants data sources systems anything\nthat you'd like I'm just going to type\nout the query right so I'm just going to\nuse that and my data source is influx\nDB1 and I'm just gonna you know type the\nsame query now if I scroll down it will\nshow me a preview of all the values\nright so all of these values are shown\nhere you can just add this variable and\njust display it in a dashboard that's\nhow simple it is so if you have any\nparticular values that you'd like to\ndisplay so this is what values really\ndoes it allows you to you know simplify\nyour data and then visualize it and\nrepresent it in grafana dashboards you\ncan do this with iot sensors you can do\nit with you know if you want to analyze\nyour systems performance all of that can\nbe simplified with variables so I'm just\ngoing to save this and I can use these\nvariables later on in this session I\nhope grafana variables was easy to\nunderstand with this we come to the end\nof today's session I hope you had a\ngreat time understanding about grafana I\nhope this grafana tutorial give you a\nbrief overview of how it works how you\ncan really get started with grafana in\ngeneral and this is just like a simple\ntutorial you can create as many projects\nand demos you'd like too it's really\neasy it's very interesting\nforeign\nwhat do you think is the history behind\nit what do you think are the major\nreasons that affected the growth of\nselenium let's have a look guys so this\nselenium was originally developed by\nJason Huggins in the year 2004 as an\ninternal tool while he was working at\nthoughtworks so Huggins later joined the\nprogrammers or the testers of\nthoughtworks and try to develop selenium\nRC so this tool was developed in the\nyear 2004 by a two developers namely\nJason Huggins and Paul Hammond so it was\nopen sourced in the same year guys so\nselenium RC was the first one to be\nfound among the web driver grid and\nselenium ID in 2005 Dan fabulous and\nNelson Sproul made an offer to accept\nthe series of patches that would\ntransform selenium RC into what it is\nknown for today so in these days we call\nit a selenium web driver right so Dan\nfabulish and Nelson sprawl are the major\nreason for giving us the idea about how\nRC works now correspondingly in the Year\n2007 Huggins joined Google and also he\nhelped in developing the stabilization\nprocess of RC and at the same time Simon\nStewart at thoughtworks developed a\nsuperior browser automation tool called\nthe Webdriver okay so this is the tool\nwhich we currently use and also the\ncurrent version of selenium that we're\nusing is three but recently in 2009 a\nSeptember or October I think they had a\nmeeting or a conference related to the\nversion release and they actually kind\nof spoke about the new version that is\nselenium 4. I don't think it is\nreleasing anytime soon but yeah they\ngave us a hint of that so yeah we'll be\nlooking forward to work on selenium 4 as\nwell so the current version in the\nmarket is selenium 3. also in the year\n2009 there was a conference that was a\ntest automation conference where people\ntried to merge two products that the\nselenium RC and selenium Webdriver to\ncall it as a new project called selenium\n2.0 so this is the second version which\nwas used between 2005 to 2010 I believe\ndon't remember the exact time span but\nyeah selenium 2 was released by then and\nin 2008 selenium grid was developed by\nPat light body so this was about the\nhistory behind the growth of selenium as\nyou can see that the growth began in\n2004 itself but to be officially\nreleased and to be officially available\nto People by the name selenium web\ndriver it took close to five to six\nyears right so this is exactly how\nselenium came into the Mainframe now\nmoving ahead let's take a look at what\nexactly is selenium like I mentioned\nselenium is an open source tool which is\nused for automating the tests that are\ncarried out on the web browsers also it\ncan be reframed in this way it is an\nopen source portable framework for\nautomating applications that is mainly\nweb-based applications and it can be\ntested across different browsers namely\nChrome Firefox Safari and just not the\ntraditional ones if the tests can also\nbe carried out in different OS platforms\nthat is Windows Mac and Linux and the\nselenium test scripts can be integrated\nwith the tools such as test NG junit and\nso on for managing test cases and Chin\nrating reports it can also be integrated\nwith Maven Jenkins and Docker to achieve\ncontinuous testing so why exactly\nsoftware testing or automation testing\nis required today's world of technology\nis completely dominated by machines and\ntheir behavior is controlled by the\nsoftware empowering it will the machines\nbehave exactly as we want them to the\nanswer to this is what we call software\ntesting or automation testing at the end\nof the day it is the application success\nrate which is going to control your\nbusiness growth the same thing can be\nsaid even for web applications because\nmost of our businesses today are\ncompletely dominated on the Internet or\nit completely belongs to the Internet so\nthis is exactly what is selenium now\nmoving on let's take a look at why\nexactly selenium is required why not any\nother tool so some major uses I would\nsay or benefits of using selenium is it\nis easy to automate testing across web\napplications suppose you're working on\nor testing any of the software\napplication that is web-based\napplication I say and you find a bug and\nyou don't know how to resolve it until\nunless you've come across selenium so\nselenium is one such tool which acts\nlike a key to our success rate so\nautomating testing across web\napplications is like a really tedious\ntask which can be fulfilled by using\nselenium and also it has a wide variety\nof language support if you're\ncomfortable using C C plus plus or C\nsharp these are considered as a basic\nlanguages right okay not C sharp but\nstill C C plus plus Java python right so\nthese four languages are like the basic\nlanguages which can be supported by any\nof the software so apart from these four\nstandard languages selenium also proudly\nsupports Ruby c-sharp spark Pearl and\nmany more all right now talking about\nimplementing the test cases like I\nmentioned automating the testing cases\nacross different web applications of\nbrowser is not an easy task but by using\nselenium you can Implement those test\ncases very easily and also you can\nperform or write the test scripts on\ndifferent platforms like mac Windows\nLinux and so on also one major reason\nwhy you should go for selenium is it is\neasy to understand and is open source\nopen source as in you don't have to pay\nfor this version it is not a paid\nversion easy to understand as in it is\nexplained in simple terms where any\nnormal human being can understand now\nthis was about why we need selenium now\nmoving on let's understand what are the\nmajor features of selenium so I think\nyou guys have understood what exactly\nselenium is and how it supports testing\nacross different platforms right so\nthese are also considered as features\nbut apart from that we'll talk about\nsome notable information related to\nselenium so selenium can be considered\nas a leading cloud-based testing\nplatform which helps testers to record\ntheir actions and Export them as a\nreusable script and easy to use\ninterface and like you already know that\nit supports operating systems browsers\nand different programming languages\nright or also apart from this it also\nsupports parallel test execution which\nreduces time and increases the\nefficiency of the test cases also\nselenium requires fewer resources as\ncompared to other automation testing\ntools you don't have to have a different\nplugin for each and every test cases\nthat you were working on right apart\nfrom this we also have something called\nthe selenium commands which are\ncategorized in terms of different\nclasses which makes it easier to\nunderstand and Implement also selenium\nWebdriver does not require the server\ninstallation as the test scripts\ninteract directly with the browser\nalso so these were some notable features\nof selenium now moving on let's\nunderstand the components\nso we have namely four components guys\nwe have something called selenium ID\nselenium RC selenium Webdriver and\nselenium grid now let's understand them\nin detail so talking about selenium ID\nselenium IDE or integrated development\nenvironment is primarily a record run\ntool that a test case developer uses to\ndevelop selenium test cases\nselenium IDE is a simple record and\nPlayback kind of tool which comes as an\nadd-on for Firefox only but now I think\nit is also used for a chrome driver as\nwell it is used for Prototype testing\nand the test cases written in ide can be\nexported in many programming languages\nlike Ruby Java c-sharp Python and so on\nedit and debug options along with the\nrecord are also available in the IDE\nalso guys this is an excellent tool for\nbeginners to understand the syntax of\nselenium Webdriver it is also considered\nas a simplest framework in the selenium\nsuite and is the easiest to learn guys\nit is like I mentioned a Firefox plugin\nand you can easily install it on your\nsystem this is exactly why a selenium\nIDE was used now talking about selenium\nRC\nselenium RC or selenium remote control\nwas the first tool of the selenium Suite\nit was known as the JavaScript executor\nand RC was a tool which made selenium\nfamous in the market all the credits to\nselenium being a masterpiece or selenium\nbeing very famous around the globe is\nbecause of selenium RC it was the first\ntool that provided the support for\nmultiple programming languages also this\nsupported almost all major vendors of\nbrowsers like Firefox Chrome Internet\nExplorer and so on so the first version\nwas called selenium 1 followed by which\nwe have selenium 2 3 and now I think\nwe're expecting four as well in the\nmarket also using RC you can perform\ncross browser testing all right so this\nwas about selenium RC now moving ahead\nlet's understand what exactly is\nselenium Webdriver okay so talking about\nselenium webdrivers selenium Webdriver\nwas the first cross-platform testing\nframework that could control the browser\nfrom the OS level in contrast to IDE\nselenium where driver provides a program\nfarming interface to create and execute\ntest cases so these test cases can be\nwritten in such a way that the web\nelements on the web page can be\nidentified and then perform actions on\nthose elements also selenium Webdriver\nis an upgrade to RC because it is much\nfaster and it is faster because it makes\ndirect calls to the browser and it does\nnot need a server between the client and\nthe server RC on the other hand needs a\nRC server to interact with the web\nbrowser so each browser has its own\ndriver on which the application runs so\ndifferent kinds of web drivers are\nFirefox driver which is popularly called\nas geeko driver Chrome driver Internet\nExplorer driver HTM unit driver Safari\ndriver and so on also this supports air\nprogramming languages like Java c-sharp\nPHP Perl Ruby dot net and so on also it\nsupports testing across different\nplatforms like Firefox Chrome and so on\nalso cross browsing was introduced in\nthis version also guys selenium RC and\nselenium Webdriver together was combined\nto make it call a selenium 2 so like I\nmentioned this I just wanted to remind\nyou guys of it again now talking about\nselenium grid so what exactly is\nselenium grid selenium grid was\ndeveloped by Patrick lightbody and\ninitially called it posted QA which is a\npart of the version 1 of selenium and\nalso it was used in the combination with\nRC to run test cases on remote machines\nin fact with grid multiple test scripts\ncan be executed at the same time on\ndifferent machines parallel execution\ncan be achieved easily with the help of\nHub node architecture and one machine\nwill assume the role of Hub and whereas\nthe others will be the nodes okay so\nthis is still in use guys grid is used\nby most of the companies as well and it\nworks both with selenium Webdriver and\nRC however maintaining a grid with all\nrequired browsers and operating system\nis a tedious task for this there are\nmultiple online platforms that provide\nan online selenium grid access to run\nyour selenium automation script so this\nis about the suite of tools or selenium\ncomponents\nforeign\nso here we will be installing the latest\nversion of java so here you must keep in\nmind that the Java version must be 8 or\nabove\nafter that we will be installing the\nJava from the official website that is\nOracle once after the installation we\nwill also configure Java by setting the\npath in the system after that we will\ncheck whether the Java is installed\nsuccessfully or not now let's do the\ndemo\nso install Java we must go to a official\nwebsite of Oracle so here as you can see\nwe have Java downloads Oracle so just\nclick on that and you can see here Java\n18 and Java 17 are available now so we\nhave to download the software according\nto our operating system so I am using\nWindows so let me go to Windows here\nso I'll install here the 64 installer so\nlet me click on this\none of our folk has asked me a question\nlet's see\nokay they have asked me that whether we\ncan install other sizes too\nyes according to your system's\ncompatibility you can install whichever\nthe feasible sizes so you can install 84\ninstaller too\nI hope you understood Kitty\nonce it get downloads just click on the\nexecutable file and it asks you for the\nsetup procedure now here it is asking\nfor the installation process so let's\nclick on next\nand this is the path where the Java jdk\nis installed so until and unless if you\nhave a good reason to change it then you\ncan change it or else I'll suggest you\nto keep Hazard default folder so let's\nclick on next\nas you can see here the Java is\nsuccessfully installed let's close this\nwindow\nnow let us configure this Java\nnow let's go to the file explorer let us\nfind where the Java is installed so go\nto see folder program files\nand you can see here the Java folder so\ndouble click on that\nyou can see the version\n18.0.2 have been installed so that is\nthe latest and stable version that is\navailable today now double click on this\ntwo\nso you will find the win folder here so\nthis is the main folder so double click\non this two\nyou can see many files has been\ninstalled here so let us copy the path\nfrom this folder so copy this path now\ngo to settings\nfind for environment variables\nso you can see here edit the system\nenvironment variables okay let's click\non this\nas you can see here we have the\nenvironment variables so click on that\nyou have those system variables so you\nhave to change the path over here\nso it will be edited in the whole system\nnow you can see the path over here so\njust click on that\nand add a new and paste to the copied\npath over here\nnow just click on OK\nnow let's check whether Java is\ninstalled properly or not so let's go to\ncommand prompt\nnow let's type Java space hyphen version\nto check which version has been\ninstalled\nyeah you can see here\n18.0.2 has been installed now let's\ncheck for Java C\nso you can see here the Java has been\ninstalled successfully we have all the\nJava packages here\nso now we have successfully installed\nJava now let's install the second\nprerequisite that is Eclipse editor\nhere as you can see first we have to\ninstall or download the eclipse from the\nofficial website after that we will get\na zip file that has been installed after\nthat we have to extract from the zipper\nfile then we will be running the\napplication now let's see the demo\nnow for Eclipse download we have to go\nto our official website that is\nwww.eclipse.org now let's click on this\nlink\nyou can see the Eclipse IDE 2022 so I'll\ndownload this\nthis is the last button download\nthis might take you a few minutes\nso once this executable file is\ndownloaded just click on this\nokay now you can see here the eclipse\ninstaller has been installed and this\nwill give you some of the options to\nclick on\nso if you want to work on the Java codes\nor you want to become a Java developer\nand work on some codes then you can\nclick on this or you have many other\noptions you can use C C plus plus or it\nwill be feasible for php2 so in this\nsession I will be using the Java\ndevelopers so I'll click on this to\ninstall\nI'll click on install\nso let's wait till it gets installed\nso in between installation it might also\nask you for the agreement so you can\nalso agree the policies\nand make sure you have checked all these\nbuttons also so it is very important so\nto create a shortcut in your desktop so\nyou if you want to create a shortcut in\nyour desktop then you can click on this\nor you can uncheck this\nokay as you can see the installation\ncompleted successfully let's launch this\nnow it is asking you for the workspace\nnow if you want to keep the default then\nyou can keep it until and unless you\nhave a good reason to change it so in my\ncase I will keep it as it is I'll launch\nit\nso as you can see here the editor has\nbeen opened so if you want to create a\nnew Java project you can click on a\ncreate new Java project and you can fill\nthe name the project name and you can\ncreate some packages classes\nEtc and that will be shown in this\nsession too so don't worry stay tuned\nso now we have successfully installed\nboth of the prerequisite that is Java\nand Eclipse now the main concept is\nselenium Webdriver come let's see how to\ninstall that\nthe first and the main thing you have to\nsee is the latest table version so at\nthis point of time we have the stable\nversion has 4.3.0 so you can see the\nlatest version whenever you install and\nthe next thing you have to see is the\nbrowser driver if you are working on\nselenium you have to have a browser\ndrivers to execute some of the code or\nthe selenium scripts so that you need\nsome of the browser drivers and finally\nwe will also see the configuration of\nthe selenium on our Eclipse so let's see\nthe demo\nso go to browser and type selenium org\nand you will get a selenium's official\nwebsite so click on the selenium\nand you can see the home page of\nselenium and click on downloads you can\nsee here the latest table version is\n4.3.0 so just click on this\nso this is a jar file that will be\ndownloaded the next thing that we have\nto download is the Java client and if\nyou scroll down you will get the Java\nclient over here that is also the\nversion 4.3.0 just click on that too\nnow after downloading these both now go\nto file explorer\ngo to downloads\nand I am creating a folder in C drive\ncalled as selenium Webdriver\nand now I will move this both jar file\nas well as the Java client over here\nnow as you can see here the Java client\nis a zipped file so let's unzip this and\nextract all the files over here\nas you can see we have downloaded the\nselenium server jar file as well as the\nJava client tool now Java client is a\nzipper file so now I have extracted also\nnow what will I do is I'll go to C\nfolder\nnow I have created a selenium Webdriver\nfolder inside the C folder\nnow I will copy both of the files over\nhere\nso let's copy this and I will go to see\nfolder\nnow you can see here I have created a\nselenium Webdriver folder so I'll paste\nit over here\nnow copy the jar file to\nokay\nnow once we have installed both the\nfiles over here now let's go and install\nthe browser driver 2. as I am using\nChrome here as a browser so I will\ninstall a chrome driver\nso let's write Chrome driver\nso click on the first link here\nto check which version are you using\njust go to this menu\nclick on help and Google Chrome and you\ncan see the version over here that is\nOneNote 3.0.5060\nwe have to install the same Chrome\ndriver version so that is the reason we\nchecked now now let's go to the official\nwebsite and let's click on this version\nand the latest table version over here\nis this so let's click on this version\nor click on the version which you need\nmine is Windows and if your operating\nsystem is under Linux or Mac then you\ncan install according to it so I'll\ninstall the win\nas I said here the Chrome driver is a\nZIP file so let's extract this over here\nand copy the extracted file\nand go to the folder where our selenium\nfiles are located\nso let's create a folder over here\ncalled Chrome driver\nnow paste this chrome files inside this\nfolder\nokay now all set now this is how we\ninstall the selenium Webdriver now let's\nsee the demo within small example\nso now let us go to our eclipse and\nstart coding with the small example\nokay now let's start a new Java project\nso click on create new Java project\nso let's write a project name has\nselenium demo one\nso here just make sure the Java SC is\nminimum of 1.8\nso let's finish\nso we have created a Java project name\nnow let's create a package over here\nright click on this\nclick on new and you can see here the\npackage over here right so click on that\nlet's write package name as edureka\nyou can write whichever name you wish to\nnow as we created the package here let's\ncreate a class over here so I'll click\non new here\nclass\nso I will give the class name has\nselenium script\nand don't forget to click this public\nstatic word mean because it is very\nimportant\nyeah and you can see here the package\nname is edureka and the class name is\nselenium script and the public static\nvoid Main\nand now let's start writing the code now\nwe want to the Chrome driver to be\ninstalled over here\nand yeah before that we just include the\nselenium files over here so just right\nclick over here and you can see the\nbuild path over here right just click on\nthis and configure build path\nand you can see the library over here\njust click on that and add external jar\nfiles because we have not added the\nselenium jar files till now so let's\nclick on this the jar file and open\nthen apply and close it now we have\nincluded the referenced libraries over\nhere now let's start writing the code so\nfirst we want the selenium drivers to be\nincluded so let's write system\ndot set property you can see here\nstraight properties\njust write set property inside the\nquotes just write Webdriver dot Chrome\ndot driver\nand after this just give a comma and\ninclude the Chrome driver path over here\nso for that let's go to the file\nexplorer and go to the selenium\nWebdriver folder and you can see the\nChrome driver folder here just double\nclick on this and you can see the files\nover here just copy the path\nand go to the editor again\nand paste it over here\nand please don't forget to write this\nChrome driver dot EXE\nlet's close this\nnow just write\nweb driver\nspace driver\nwhich is equals to\nnew Chrome Drive\nclosest to and as you can see we have a\nerror over here just hover on the Chrome\ndriver\nand you will get a quick fixes over here\njust import the Chrome driver\nand do the same for the web driver too\nand import the web Drive\nnow we expect the output to be showed as\na website so I will give\nwww.edureka.com as a output website now\nI want to get a edureka.com as a output\nwebsite so that just write driver dot\nget\nand write the website whichever you want\nto be executed I will give the edureka\nlink over here\nand next I have to print the title\nwhichever comes over the tab so I will\njust print the title over here for that\nsystem dot out dot print Ln\ndriver\ndot get\ntitle\njust close this two\nfor automatically waiting of the browser\nwe just write the driver to quit just\ndriver dot quit\nand let's run this and see\njust run\nselect the folder to be saved\nas you can see the edureka page has been\nopened here\nyou can see the courses over here too\nand the browser got exited automatically\nand also you can see the title over here\nthat just got printed from the tab\nso this is the final output that we just\ngot now I will just take out this code\nand just run\nas you can see here I just took out the\ncode from that script and the browser\nwill stays for long time and until and\nunless you close that window the browser\ndoes not close so that is why I took out\nthe code over there\nand you see here the website is staying\nfor a long time that is a reason\nand you can see the title again printed\nover here\n[Music]\nnow let us have a look at what exactly\nis an arguments and how it works so\nnagos is basically a tool used for\ncontinuous monitoring of systems your\napplication your services and business\nprocesses Etc in a devops culture right\nnow in the event of failure nagias can\nalert technical staff of the problem\nallowing them to begin remediation\nprocesses before outages affect business\nprocesses end users or customers so I\nhope you're getting my point it can\nalert the technical staff of the problem\nand they can begin remediation processes\nbefore outages affect their business\nprocess or end users or customers right\nwith argue is you don't have to explain\nwhy an unseen infrastructure outage\naffect your organization's bottom line\nright so let us focus on the diagram\nthat is there in front of your screen so\nNaga is basically runs in a server\nusually as a Daemon or a service and it\nperiodically runs plugins residing in\nthe same server what they do they\nbasically contact hosts on servers or on\nyour network or on the Internet now one\ncan view the status information using\nthe web interface and you you can also\nreceive email or SMS notification if\nsomething goes wrong right so basically\nnagis Damon behaves like a scheduler\nthat runs certain scripts at certain\nmoments it stores the results of those\nscripts and will run other scripts if\nthese results change I hope you're\ngetting my point here right now if\nyou're wondering what are plugins these\nare nothing but compiled executables or\nscripts it can be pearls create shell\nscript Etc that can run from a command\nline to check the status of a host or a\nservice now nages uses the results from\nthe plugins to determine the current\nstatus of the host and services on your\nnetwork now let us see our various\nfeatures of nagios let me just take you\nthrough all these features one by one\nit's pretty scalable and secure and\nmanageable as well it has a good login\ndatabase system it automatically sends\nalerts which we just saw it detects\nnetwork errors and server crashes it has\neasy writing plugins you can write your\nown plugins right based on your\nrequirement your business need then you\ncan monitor your business process and ID\ninfrastructure with a single pass guys\nissues can be fixed automatically if you\nhave configured it in such a way then\ndefinitely you can fix those issues\nautomatically and it also has support\nfor implementing redundant monitoring\nhosts so I hope you have understood\nthese features there are many more but\nthese are the pretty attractive features\nand why an argument is so popular is\nbecause of these features let us now\ndiscuss the architecture of nagivist in\ndetail so basically nagios has a server\nagent architecture right now usually in\na network a Naga server is running on a\nhost which we just saw in the previous\ndiagram right so consider this as my\nhost so Naga server is running on a host\nand plugins interact with local and\nremote so here we have plugins so these\nwill interact with the local resources\nor services and these will also interact\nwith the remote resources or services or\nhosts right now these plugins will send\nthe information to the scheduler which\nwill display that in the GUI right now\nlet me repeat it again nagus is built on\na server agent architecture right and\nusually in argue is server is is running\non a host and these plugins will\ninteract with the local host or services\nor even the remote Hostess Services\nright and these plugins will send the\ninformation to the scheduler an argue as\nprocess scheduler which will then\ndisplay it on the web interface and if\nsomething goes wrong the concerned teams\nwill be notified Via SMS or through\nemail right so I think we have covered\nquite a lot of theories so let me just\ngo ahead and open my sentivise Virtual\nMachine where I've already installed\nnagios so let me just open my sentos\nVirtual Machine first so this is my\nCentos virtual machine guys and this is\nhow the nagios dashboard looks like I'm\nrunning it at Port 8000 you can run it\nwherever you want I've explained that in\nthe installation video how you can\ninstall it now if you notice there are a\nlot of options on the left hand side you\ncan you know go ahead and play around\nwith it you'll get a better idea but let\nme just focus on few important ones so\nhere we have a map option here right if\nyou click on that then you can see that\nyou have a local host and you have a\nremote host as well right so my Nargis\nprocess is monitoring both the localhost\nand the remote host the remote host is\ncurrently down that's why you see it\nlike this when I'll be running it I'll\nbe showing you how it basically looks\nlike now if I go ahead and click on host\nyou will see all the hosts that I'm\ncurrently monitoring so I'm monitoring\nedureka and localhost edureka is\nbasically my remote server and localhost\nis currently on which my inaugus server\nis running right so obviously it is up\nand the other server is down if I click\non Services you can see that these are\nthe services that I'm monitoring for my\nremote host I'm monitoring CPU load ping\nand SSH and for my localhost I'm\nmonitoring current load current users\nHTTP ping root partition SSH swap usage\nand total processes you can add as many\nservices as you want all you have to do\nis change the host.cfg file which I'm\ngoing to show you later but for now let\nus go back to our slides we'll continue\nfrom there so let me just give you a\nsmall recap of all things we have\ndiscussed so we first saw why we need\ncontinuous monitoring we saw various\nreasons why Industries need continuous\nmonitoring and how it is different from\nthe traditional monitoring systems then\nwe saw what is exactly continuous\nmonitoring and what are the various\nphases involved in implementing a\ncontinuous monitoring strategy then we\nsaw what are the various continuous\nmonitoring tools available in the market\nand we focused on nagos we saw what is\nan arguments how it works what is its\narchitecture right now we're going to\ntalk about something called as nrpe now\ngives remote plugin executor which is\nbasically used for monitoring remote\nLinux or Unix machines so it'll allow\nyou to execute nagus plugins on those\nremote machines now the main reason for\ndoing this is to allow an arguments to\nmonitor local resources you know like\nCPU load memory usage Etc on remote\nmachines now since these public\nresources are not usually exposed to\nexternal machines an agent like NRP must\nbe installed on the remote Linux or Unix\nmachines so even I have installed that\nin my Centos box that's why I was able\nto monitor the remote Linux host that\nI'm talking about now if you notice the\ndiagram here so what we have is\nbasically the check underscore NRP\nplugin residing on the local monitoring\nmachine this is your local monitoring\nmachine which we just saw right so this\nis where my your server is now the check\nunderscore in RP plugin resides in a\nlocal monitoring machine where your nag\nus over is right so the one which we saw\nis basically my local machine or you can\nsay where my Naga server is right so\nthis check underscore and RP plugin\nresides on that particular machine now\nthis NRP daymen which you can see in the\ndiagram runs on remote machines the\nremote Linux or Unix machine which in my\ncase was edureka if you remember and\nsince I didn't start that machine so it\nwas down right so that NRP Daemon will\nrun on that particular machine now there\nis a secure socket layer SSL connection\nbetween monitoring host and the remote\nhost you can see it in the diagram as\nwell the SSL connection right so what it\nis doing it is checking the disk space\nload HTTP FTP remote services on the\nother host right then these are local\nresources and services so basically this\nis how an rpe Works guys you have an\ncheck underscore NRP plugin residing in\nthe host machine you have NRP Diamond\nrunning on the remote machine there's an\nSSL connection right yeah you have SSL\nconnection and this and RP plugin\nbasically helps us to monitor that\nremote machine that's how it works let's\nlook at one very interesting case study\nthis is from bitnetics and I found it on\nthe inaugus website itself so if you\nwant to check out go ahead and check out\ntheir website as well they have pretty\ncool case studies apart from bitnatics\nalso there are a lot of other case\nstudies on their website so bit netix\nprovides basically Outsource it\nmanagement and Consulting to non-profit\nor small to medium businesses right now\nbidnetics got a project where they were\nsupposed to monitor an online store for\nan e-commerce retailer with a billion\ndollar annual revenue which is huge guys\nnow it was not only supposed to you know\nmonitor the store but it also needed to\nensure that the cart and the checkout\nfunctionality is working fine and it was\nalso supposed to check for website\ndeformation and notify the necessary\nstaff if anything went wrong right seems\nlike an easy task but let us see what\nare the problems that bitnetics faced\nnow bitnetics hit a roadblock upon\nrealizing that the client's data center\nwas located in New Jersey more than 500\nmiles away from their staff in New York\nright so there was a distance of 500\nmiles between where their staff is\nlocated and the data center now let us\nsee what are the problems they face\nbecause of this now the two areas needed\nare unique but at the same time a\ncomprehensive monitoring for their Dev\ntest and Broad environment of the same\nplatform right and the next challenge\nwas monitoring would be hampered by the\nfirewall restrictions between different\napplication sites functions Etc so I\nthink a lot of you know about this\nfirewalls is basically sometimes can be\na nightmare right apart from that most\nof the notifications that were sent to\nthe client were ignored because mostly\nthose are false positive right so the\nclient didn't bother to even check those\nnotifications now what was the solution\nso the first solution they thought is\nadding SSH firewall rules for Network\nOperation Center personal and Equipment\nsecond is analyzing web pages to see if\nthere's any problem or deformation\noccurrences the third and the very\nimportant point was converting\nnotification to nagos alerts and the\nproblem that we saw false positive was\ncomplete greatly removed with this\nescalation logic where converting us\nnotifications to an RGS alerts and\nescalations with specific time periods\nfor different groups right I hope you're\ngetting my point here now configuring\nevent handlers to restart Services\nbefore notification which was basically\na fix for 90 percent of the issues and\nusing naga's score on multiple servers\nat the NOC facility and each nagus\nworker was deployed at the application\nLevel with direct access to the host so\nwhatever targets worker or agent or\nremote machine we have was deployed at\nthe application Level and had the direct\naccess to the host or the master\nwhatever you want to call it and they\nhave implemented the same architecture\nfor production quality assurance staging\nand development environments now let's\nsee what was the result now because of\nthis there was a dramatic reduction in\nnotifications thanks to the event\nHandler's new configuration then there\nwas an increase in uptime from 85\npercent annually to 98 annually which is\nsignificant guys right then they saw a\ndramatic reduction in false positive\nbecause of the escalations logic that I\nwas just talking about then fourth point\nis estimating the need to log into\nmultiple boxes and change configuration\nfiles thanks to naga's configuration\nmaintained in a central repository and\npushed automatically to appropriate\nservice fourth point is estimating the\nneed to log into multiple boxes and\nchange the configuration files and that\nhappens because the inaugus\nconfiguration maintained in a central\nrepository or a Central master and can\nbe pushed automatically to all the\nstates to all the servers or slaves or\nagents whatever you want to call it so\nthis was the result of using nagos right\nnow is it time to check out a demo where\nwhat I'll be doing is I'll be monitoring\ncouple of services actually more than a\ncouple of Services of a remote Linux\nmachine through my nagios host which I\njust showed you right so from there I'll\nbe monitoring a remote Linux host called\nedureka and I'll be monitoring like\nthree four Services you can add whatever\nyou want and let me just show you what's\nthe process once you have installed\nnagus what you need to do in order to\nmake sure that you have remote host or a\nremote machine being monitored by your\ninaugus host now in order to execute\nthis demo which I'm going to show you\nyou must have lamb stack on your system\nright Linux Apache MySQL and PHP and I'm\ngoing to use Center OS 7 here let me\njust quickly open my sentos Virtual\nMachine and we'll proceed from there so\nguys this is my sentos virtual box where\nI've already installed Lagos as I've\ntold you earlier as well and this is\nwhere my inaugus host is running or you\ncan see the nagus server is running and\nyou can see the dashboard in front of\nyour screen as well right so let me just\nquickly open the terminal first let me\nclear the screen so let me just show you\nwhere I've installed in Argos this is\nthe path right if you notice in front of\nyour screen it's in user local nag OS\nwhat I can do is I'll just clear the\nscreen and I'll show you what all the\ndirectories are inside this so we can go\ninside this HC directory and inside this\nI'm gonna go inside the objects\ndirectory right so why I'm doing this is\nbasically if I want to add any command\nfor example I want to add the check\nunderscore NRP command that's how I'm\ngoing to monitor my remote Linux host if\nyou remember in the diagram right so\nthat's what I'm going to do I'm going to\nadd that particular command I've already\ndone that so let me just show you how it\nlooks so I'll just type G editor you can\nchoose whatever editor that you like and\ngo inside the commands.cfg file and let\nme just open it so these are the various\ncommands that I was talking about now\nyou can just have a look at all these\ncommands so this is to basically notify\nhost or by email if anything goes down\nanything goes wrong in the host this is\nfor service basically it'll notify if\nthere's any problem with the service\nthrough email this will check if my host\nmachine is alive I mean is it up and\nrunning now this command is basically to\ncheck the disk space like the local disk\nthen the load right you can see all of\nthese things here swap FTP so I've added\nthese commands and you can have a look\nat all of these commands which I've\nmentioned here and the last command you\nsee is I've added manually because all\nthese commands once you install you get\nit by default but the NRP check\nunderscore NRP which I'm highlighting\nright now with my cursor is something\nwhich I have added in order to make sure\nthat I will monitor the remote Linux\nhost now let me me just go ahead and\nsave this right let me clear my screen\nagain and I'll go back to my now give us\ndirectory Let Me Clear My screen again\nnow basically what this will do is this\nwill allow you to use a check underscore\nand RP command in an argue with service\ndefinitions right now what we need to do\nis update the NRP configuration file so\nuse your favorite editor and open\nnrp.cfg which you will find in this\nparticular directory itself so all I\nhave to do is first I'll hit LS and then\nI can just check out this Etsy directory\nnow if you notice there is an nrp.cfg\nfile right I've already added it so I'll\njust go ahead and show you with the help\nof G edit or you can use whatever editor\nthat you prefer now over here you need\nto find this allowed host directive and\nadd the private IP address of your nagos\nserver to the comma delimited list if\nyou scroll down you will find something\ncalled a loud host right so just add a\ncomma and start with the IP address of\nthe machine that you want to monitor so\ncurrent let me just open it once more so\nI'm going to use sudo because I don't\nhave the Privileges\nnow in this allowed host directory all I\nhave to do is comma and the IP address\nof the host that I want to monitor so it\nis\n192.168.1.21 just go ahead save it come\nback clear the terminal now save and\nexit now this configures an RP to accept\nrequests from your nagos server why it's\nprivate IP address right and then just\ngo ahead and restart NRP to put the\nchanges into effect now on your server\nyou need to create a configuration file\nfor each of the remote hosts that you\nmonitor as I was mentioning before as\nwell now where you're going to find it\nin HC servers directory and let me just\ngo ahead and open that for you let me go\nto the servers directory now if you\nnotice here there is edirecta.cfg file\nthis is basically the host that I'll be\nmonitoring right now if I go ahead and\nshow you what I have written here is\nbasically first what I have done is I've\ndefined the host it's basically a Linux\nserver and the name of that server is\nEddy raker allies whatever you want to\ngive this is the IP address maximum\ncheck attempts the periods I want to\ncheck it 24 7 notification interval is\nwhat I've mentioned here and\nnotification period so this is basically\nabout all my hosts now in that host what\nall services I'm going to monitor I want\nto monitor generic services like Ping\nthen I want to monitor SSH then I'm\ngoing to monitor CPU load as well these\nare the three services that I'll be\nmonitoring and you can find that in your\nHC servers directory over there you have\nto create a proper configuration file\nfor all of the hosts that you want to\nmonitor Let Me Clear My terminal again\nright so I hope you have understood this\nguys and if you have any questions or\ndoubts go ahead and mention that in the\ncomment section just to show you my\nremote machine as well let me just open\nthat so this is my remote machine guys\nover here I've already installed NRP so\nover here I'm just going to show you how\nyou can restart an RP system CTL restart\nnrpe dot service\nuh here we go it's asking for the\npassword I've given that so my NRP\nservice has started actually I've\nrestarted again I've already started it\nbefore as well let me just show you how\nmy nag years dashboard looks like in my\nserver now this is my dashboard again if\nI go to my host tab you can see that we\nare monitoring two host edureka and\nlocalhost edrica is the one which I just\nshowed you which is up and running right\nI can go ahead and check out this map\nLegacy map view as well which basically\nit tells me that my editor is a remote\nhost then also I have various services\nthat I'm monitoring so if you remember I\nwas monitoring CPU load ping and SSH\nwhich you can see it over here as well\nforeign\n[Music]\ndevops exactly is to understand that we\nneed to understand what Azure is and to\nunderstand azeri would be using this\nparticular analogy now if you talk about\npower consumption it's fairly simple I\nmean you consume electricity and you pay\nfor the amount or the units that you've\nconsumed if you've used maybe 100 units\nyou'd be charged for 100 units and the\nimportant part here is you're not\nconcerned about where the electricity\nhas come from who maintains it how is it\ngenerated how is it brought to your\nhouse and stuff like that I mean even if\nyou know about these things it's not\nyour concern how it is done I mean even\nif you do not have any knowledge about\nit you can still survive very well\nsimilar as Azure or any cloud service\nprovider that is there in the market let\nme tell you how now if you talk about\nsoftware development you normally have\nto take care of a lot of things like\nbuilding a software building the\ninfrastructure in first place having\nservers in place making sure that your\nservers your resources are monitored and\nmaintained now the problem here is if\nyou are doing all these things you won't\nbe able to focus on your business and if\nyou wish to focus on your business you\nprobably might need to hire quite a few\npeople plus servers and stuff like that\nis actually costly what if I could tell\nyou that you could actually go ahead and\nrent all these services like you rented\nthe electricity and paid only for the\nunits you used wouldn't that be nice\nwell this is what Azure does it is a\ncloud service provider which actually\nlets you rent compute storage database\nanalytics and a number of other services\nyou only pay for the services you use\nand only for the time duration you use\nthose services for and that is why this\nanalogy which is very similar to how\nelectricity is consumed and used I hope\nthe idea is clear to you what Azure is\nto give you a little more specific\ndefinition it is a popular cloud service\nprovider which provides services I just\ntalked about and it is one of the best\nin the market it is a Microsoft product\nand we all know that Microsoft is a big\nfish when you talk about software market\nand that is why Azure is one of the\nleading cloud service providers it is\nsecond only to AWS and it is actually\ncatching up with AWS in a very good way\nnow AWS also has a devops approach and\nas I've already mentioned it is azure is\nvery much neck and neck with AWS it also\nhas its devops services and these\nservices that are provided by Azure are\nvery good when you talk about comparing\nthose with AWS devops Services let's try\nto understand how Azure devops Services\ngo well with each other and to do that\nlet's take a look at some of the\ncomponents which Azure has to offer to\nyou well when you talk about Azure\ncomponents these are the major\ncomponents which Azure has to offer to\nyou you have your Azure pipelines you\nhave your Azure boards as your artifacts\nAzure repos and Azure test plans\nif you remember the definition of devops\nI talked about continuous integration\nand continuous deployment let me throw\nin some light on what it is exactly now\nwhen you talk about continuous\nintegration and continuous deployment\nwhat you mean to do here is you wish to\ncontinuously build softwares and\ncontinuously deploy those to the end\nusers again if there are any releases\nany changes that need to be done those\nshould be implemented right away and the\nlatest version should be available to\nall the people that are working on that\nsoftware I mean if I actually go ahead\nand build a particular software now if\nthere are like 15 people working on that\nand if I make some changes to that\nsoftware that change should be given to\neveryone right so this is where\ncontinuous integration and deployment\ncomes into picture it aims at keeping\neveryone on the same page and ensuring\nthat software development happens at a\nfaster rate and to do that you have\nsomething called as Azure pipelines now\nwhen you talk about continuous\nintegration and deployment you need a\nline maybe a tunnel where you can\nactually carry out these processes right\nthat tunnel that line that pipeline is\nsomething that is provided by Azure\npipelines I mean you can actually go\nahead and build any kind of software and\nuse different kinds of platforms that\nAzure supports and when I say Azure\nsupports well Azure supports so many\nplatforms that I believe there is hardly\nany software or any framework that you\nwish to use that you cannot using\nMicrosoft Azure and that is why building\npipelines with Microsoft Azure becomes\nvery easy now if you talk about building\npipelines in general it is a very simple\nand a very easy to implement kind of a\nprocess because it is just click survey\nwhen you talk about Microsoft Azure and\nonce the pipeline is ready integrating\nit with different softwares becomes very\nvery easy now again if you are building\na software you might be having maybe\nhundreds of people working on that\nsoftware in that case you need a\nsoftware or something that would let you\nkeep track of all these things help you\nplan better help you we have everyone on\nthe similar pages and help you keep\ntrack of all these things now this is\nwhere Azure boards come into picture it\nreadily integrates with power bi now if\nyou people know what power bi is it is a\ndata visualization and business\nintelligence tool and it is one of the\nbest in the market it is very neck and\nneck with Tableau which again is a great\ntool and what Microsoft Azure ports do\nis they let you integrate power bi into\nAzure devops environment where you can\nactually go ahead and take a look at the\ndata in real time and have various\ngraphs charts so that you are assessing\nor the way in which you keep track of\nall these things becomes a lot more\neasier next we have Azure artifacts and\nwhat it does is it lets you take into\nconsideration various packages or feeds\nthat you generate now when I say this\nyou can do that from both private and\npublic resources apart from that whether\nit's Marvin whether it's news and\nwhatever it is everything is taken care\nby your Azure artifacts when you're\ntalking about continuous inter duration\nand deployment your repositories become\nvery important and Microsoft Azure lets\nyou have any kind of repositories that\nare there if you take a look at Azure\nreports it has almost everything that is\nneeded to deal with repositories if you\nare building a software it needs to be\ntested and with Azure test plans you can\ndo end-to-end testing and it ensures\nfull coverage for your tests so these\nare some of the components that ensure\nDeVos processes carried out very well\nwith Microsoft Azure and that is why\nAzure and devops go very well hand in\nhand now let's move further and take a\nlook at the demo part so guys in order\nto understand how Microsoft Azure works\nor how the Azure devops stuff works we\nwould be switching into Azure portal now\nAzure as I've already mentioned is a\ncloud service provider and we are going\nto see how Microsoft Azure can be used\nto carry out devops operations to do\nthat you can actually go ahead and visit\nazure's website just open the website\nand then you have this place called as\nportal where you can click in now guys\nif you have an account it would ask you\nto sign in just go ahead and sign into\nyour account and you are more than good\nto go for people who are completely new\nto Microsoft Azure let me tell you a\nthing that they have something called as\na free tier where you can actually go\nahead and create a free account you have\nto enter in your credit card details but\nMicrosoft Azure won't charge you for\nthat once you create an account\nMicrosoft Azure gives you certain free\ncredits which you can use for a\nparticular duration of time now I cannot\nsee my credit share but normally you can\nactually go ahead and take a look at the\namount of credits that Microsoft Azure\nhas to offer to you it is somewhere\naround if I'm not only it is close to\n200 if I'm not wrong yeah that is what\nit is so probably you would be able to\nutilize the services for free and how do\nyou do that you use that credit that is\nmade available to you so if there is a\nparticular service that you want to use\nyou can pay the bills using the credit\nthat is made available to you and you\nwon't be charged for the services that\nyou use there are certain limits on the\nservices that you use suppose if you\nactually go ahead and create a server\nand you let it open for a long time\ncreate a database on top of it you might\nbe charged heavily for that but I would\nsuggest that you actually go ahead and\ntake a look at certain documentation\nthat Microsoft Azure has to offer to you\nand as long as you stay in the specified\nlimits you won't be charged anything so\nI would suggest that you actually go\nahead and put in your credit card debit\ncard details and get an account created\nonce you create an account this is what\nthe Microsoft Azure portal or the\ninterface looks like so we have our\naccount which is up and running now we\nare going to go ahead and Carry Out\ndevops practices right so how do we do\nthat we switch into devops you can just\ncome to the search console and type\ndevops here Azure devops or you can just\ngo ahead and type Azure devops somewhere\nhere\nthe reason I'm doing this is I want to\nshow you how the interface looks like so\nthis is what it would look like when you\nstart\nand if you click on start free you would\nbe redirected to this page now again\nguys first you need to create an\norganization think of organization as an\nenvironment I mean if your company is\nactually planning to build a software\nthey would be having a structure to do\nthat right so if your company is\nplanning to actually go ahead and build\na particular software they would be\nhaving a template a structure to do that\nright so when I say an organization I'm\ntalking about a structure how do you\ncreate an organization it is very simple\nhere's an option here if you click on\nnew organization it would ask you for\nthe name of the organization you enter\nthe name and your organization gets\ncreated now that we have an organization\nour next step should be to go ahead and\ncreate a project how do we do that again\nclick on Project there would be an\noption here once you create an\norganization saying that you want to\ncreate a project you should say yes on\nit again that is how the interface looks\nfor somebody who has started fresh if\nnot this is what it would look like so I\ncan just go ahead and enter the project\nname let's say\ndemo project for today\nI'm bad at naming conventions so forgive\nme for that description\nsample project would do again guys the\ncomplexity of project is not important\nhere I'm just trying to explain certain\nstuff to you so please pardon this\nsimpleness of this particular project\nagain guys once you do enter in the\ndetails it gives you an option do you\nwant it public or private when you say\npublic anyone on the internet can have\naccess to it more of an open source kind\nof stuff if not you can stick to your\nprivate thing and you can give access to\nthe people you want to take a look at\nyour project having said that um if you\nselect private you can just say create\nproject and your project gets created\nokay guys so the project is created it\ntook a longer while than normal if your\ninternet is not working that well at\ntimes it takes this time so once the\nproject is ready guys you are actually\nfree to go ahead and do the stuff now\nthese are the components that we talked\nabout at the bottom you can see these\ncomponents you have your boards Repose\npipelines test plans artifacts and you\ncan actually go ahead and create all of\nthose let's start by creating a pipeline\nfirst guys so all you have to do is say\nnew pipeline\nnow again guys how do you actually go\nahead and create a pipeline what do you\ndo for that do you go ahead and use an\nexisting piece of code that you have do\nyou have repositories that you want to\ndo or do you want to type in your own\ncode you can do anything you want you\ncan use Azure reports which are made\navailable to you for free\num GitHub we all know is a popular place\nto have your repositories kept and if\nyou wish to do that you can import\nrepositories from your GitHub as well to\ndo that you have to actually just go\nahead and click on this icon that is\nwhat I'm going to do in this session I'm\ngoing to use a GitHub repository so you\nhave to click on this thing and you have\nto authorize your GitHub repository or\nyour GitHub account rather now my\naccount is already authorized with Azure\nso I don't think it should ask me for\nreauthorization you can actually go\nahead and authorize your GitHub account\nonce you do that you're free to actually\ngo ahead and import a repositories from\nyour GitHub now if I go to GitHub\nThis Is My Demo account so I have one\nrepository that I have it here my\nrepositories you can see this is a\npython repository guys as I've already\nmentioned you can use any platform you\nwant when you talk about Azure python is\nsomething that is simple and I wish to\nstick to that now this repository is\nsomething that is made Available to You\nby Microsoft Azure as well do not worry\nI would be sharing in this link if not\nyou can visit Microsoft Azure docs for\nAzure devops and you would get this link\nas well so once you have this link you\nhave to Fork this thing into your GitHub\nfor people who do not know what GitHub\nis well think of it as a storage place\nwhere you can actually go ahead and\nstore your repositories now repositories\nis nothing but it is a piece of code or\na software which you can actually go\nahead and store it here which you can\ngive access to others as well something\nthat is called as open source where\nothers can actually go ahead and take in\nyour piece of code maybe modify it and\ngive it to you or modify it and use it\nfor their own purpose so this is what\nGitHub does it is a place where you can\nput in your codes you can have a master\nBranch for it and you can give access to\ncertain people who can make changes to\nthat code now how do people make changes\nto it they have this option which is\ncalled as forking your GitHub repository\nwhen I say forking it that means I'm\nactually creating a copy or a branch of\nthis particular repository and I'm using\nit for my own sake once I make changes\nto it I can submit those changes to the\nmain repository or to the master branch\nof it so this is what GitHub is and the\nprocess which we saw here it would ask\nyou to authorize your GitHub account and\nif you've already forked that particular\nrepository it would be available here in\nthe suggestion as you can see it has\nbeen forked here so I have this\nrepository here which I've selected\nso it opens my yml file which is there\nwhich I can actually go ahead and edit\nwhat does this thing do it considers\npython Django framework it tests a\nDjango product or project rather on\nmultiple versions of python and it has\nsteps that lets you analyze code save\nbuild artifacts deploy them and more so\nthis is what this piece of code does for\nyou guys and won't be getting into the\ndetails of what this code does but again\nit's a sample repository you can\nactually go ahead and study it a little\nmore once you do that all you have to do\nis just run this piece of code as simple\nas that guys you have to run it what\nthis code does is it creates a pipeline\nfor you and when I say it creates a\npipeline it lets you probably actually\ngo ahead and make codes make changes to\nthe codes and submit those to the master\nBranch we would be doing that not worry\nabout that as you can see Microsoft\nAzure gives you continuous feedback and\nupdate as to what is happening where it\nis happening and how it is happening\nthis might take maybe half a minute or\nso because quite a few things that are\nhappening as you can see it's telling\nyou what has happened right I mean the\nprocesses you can see the tasks\nhappening\nit is performing tests and stuff like\nthat see these are the number of\nprocesses that have taken place you've\nprepared a job it has initialized an\nagent to take care of it initialize the\njob got resources for it used python\nversion exported the project path then\nit installed certain prerequisites it\nran tests it published the test results\nand then this is what happened post job\nget sources if you wish to have more\ndetails you can click on this icon and\nit would give you the details about what\nhas happened here so you can do that as\nwell\nor you can just probably come back to\nPipelines\nand see that there's a pipeline that has\nbeen created now guys if I actually go\nahead and commit changes to this piece\nof code that is my yml file or the files\nthat I have in this repository those\nwould be reflected here you can see the\nstatus here we are going to do that but\nlet me show you some other things as\nwell if I click on analytics it should\ngive me analytics of what has happened\nhere whether they have any failures\nwhether the code ran properly and stuff\nlike that test failures is not available\nbecause we do not have a plugin here\nwhen I say plugin okay did not find any\ntest results is what it is saying so\nlet's just go ahead and do certain\nthings and probably this would be more\nclear to you guys do not worry about\nthat going back to the History part\nif I take a look at the summary part it\nwould tell me what has happened here\ntest succeeded build pipeline succeeded\nmanually queued and this is what has\nhappened now guys can I just go ahead\nand put in certain other details can I\nmake certain changes here let's try to\nunderstand what can be done now again I\nhave this gate repository with me right\nso let's just go ahead and play with it\na little and commit certain changes to\ndo that first go to the pipeline\nthis is the pipeline I'm concerned about\nand probably I must be getting certain\ndetails that I'm looking for they're not\nhere so let's go back go back\ngo back a little\nprojects projects\nlinks again\nhere you have this option called as\nstatus badge now what is the status\nbadge see this is what the status badge\nlooks like it tells that okay whether\nthe pipeline you built was built\ncorrectly or not so if you are a\ndeveloper you would be wanting your code\nto be green right I mean everything\nshould be checked green everything\nshould be nice and ready and successful\nso this is what the badge does so we're\ngoing to go ahead and use this piece of\nbatch to add to our code so that now\nthis is a sample stuff I mean it's not\nthat important but if we do go ahead and\nmake or add this badge to our piece of\ncode it would show that a certain change\nwas made in the code or in the file and\nthat would be reflected in the pipeline\nsomething that is important when you\ntalk about CI CD so let's do that with\nthe simple example so I've come to the\npipelines here\nmy pipeline and then I scroll down\nyou would be having this readme file\nwhere you can make changes how do we do\nthat\nI say edit\nand then I add in a piece of code here\nsay let's add a new\npiece of code somewhere here maybe\nokay there you go again guys do not get\ninto the details of the complicacy of\nthe stuff it is fairly easy and do not\njudge me for that either I mean as I've\nalready mentioned my aim is to just go\nahead and show you how the concept or\nthe stuff works so it is very basic guys\nI've just gone ahead and made some\nchange to this piece of code I've\nactually just gone ahead and added the\nbatch here so I'm just gonna go ahead\nand say commit changes update readme\nfile yes please do that commit directly\nto the master Branch or should I commit\nit to the new branch that I did let's\nsay master Branch for now\nso the change was committed here so if I\ncome here and if I just go to Pipelines\nand select my pipeline open it\nyeah there you go the change has been\nreflected update readme so this file was\nupdated so again guys this is what I'm\ntalking about\ncontinuous integration and deployment\nthat is what it means I mean if I make\nchange to this piece of code and if\nsomebody else wants to access it it or\nmy software should give me the latest\ncopy right so this is what this piece of\ncode is doing in my pipeline if I just\ngo ahead and pick a certain piece of\ncode I make change to it that change\ngets reflected and this is what devops\ndoes and this is what Azure helps you do\nit lets you bring in the whole GitHub\nconcept into Azure and it helps you go\nahead and work with CI CD in a much\nbetter way again I talked about some\nother stuff as well Repose you have your\nboards you have quite a few things that\nyou can do if you talk about overview in\ngeneral you have something called as\ndashboard so if I click on this icon\nhere\nso I have this dashboard that is created\nby default oh there is no dashboard here\nor if there is a dashboard it does not\nhave widgets so I'm gonna add a widget\nlet's say I need a visit for build\nhistory so I click on it and I say add\nso I said done editing\nso if I just refresh this thing\nso if I just come here and select this\nparticular Pipeline and I say save\nit will reflect the changes that has\nhappened\nwhat happened with or what is happening\nwith this particular dashboard or with\nthis particular project so it would give\nme details like these and as I've\nalready mentioned when you create\ndashboards you can actually go ahead and\nintegrate power bi which is a very\npopular business intelligence and bi\ntool basically so you can actually go\nahead and take in or consider all those\nfeatures as well apart from that you\nhave all the other stuff that you can\nactually go ahead and play with again to\nuse analytics or to understand how\nanalytics work with this thing you\nactually would have to go ahead and do\ntwo things one you would have to go\nahead and integrate your plugin for\nanalytics once you do that you can go\nahead and Implement quite a few things\nto do that you can actually come here\nand you can do quite a few things you\ncan take your GitHub connections you can\nintegrate your GitHub with your Azure\nyou can actually go ahead and integrate\nquite a few other things see you have\noptions like service connections Asian\npools retention parallel jobs and stuff\nlike that so you can take care of all\nthose things as well boards again you\ncan go ahead and add items here items as\nin you can put in states where you want\nto put in details for certain things\nlike there are particular bugs that have\nparticular priorities based on your\nproject you can add in those items\nsaying that okay um this is the\ncriticality of those items and stuff\nlike that it is fairly is you can just\nclick on create a new item whether it's\na bug whether it's a feature issue\nwhatever it is you can go ahead and you\ncan add that here and you can keep track\nof all those things in the form of\ndashboards or boards here\nRepose you can actually go ahead and\nwhen you click on files you can see the\nreports that you're using and stuff like\nthat you can go to the marketplace and\nyou can take in the reports that\nMicrosoft Azure supports pipelines we've\nseen what it is test plans you can go\nahead and launch proper test plans as\nwell and you can create your own\nartifacts or your feeds as well by using\nAzure artifacts so yeah guys this is\npretty much what this session had to\noffer to you people we did go ahead and\ncreate a pipeline we saw how to commit\nchanges and how those changes get\nreflected when you use an Azure Pipeline\nand we also saw what dashboards are and\nhow do they work\nforeign\n[Music]\ndevops and cloud or devops on cloud why\ndo we need devops on cloud Now\nunderstand that devops and Cloud go hand\nin hand they can be implemented\nindividually of course but devops\nbecomes twice as much efficient and\nbeneficial when clapping with a cloud it\ncan help an organization deliver new\nsoftware features much faster in a more\neffective manner many organizations try\nto fix their application development\nprocesses by shifting from waterfall to\ndevops now they have this understanding\nthat devops alone won't be that\neffective so public and private Cloud\nSolutions are now evolving together with\ndevops this brings in products at a\nfaster rate to the market through quick\naccess to development environment and\nstreamline developer processes\ninfrastructure as code and automation\ntogether reduces the cloud complexity\nand maintenance of servers and resources\nwhich are Ops Team previously was very\nconcerned about the security also highly\nincreases with automated repeatable\nprocesses that serve to eliminate error\nthat can cause further issues and even\nmore importantly it builds security\ncontrols from the very beginning to the\nvery end of the process now because you\ndon't have any servers and your\ncontinuous operations are cloud-based it\nalso eliminates a lot of downtime and\nlast but not the least scalability which\nis one of the most important factors for\napplications as they are developed when\ndevops and Cloud are clubbed together it\nreduces the cost of infrastructure and\nGlobal reach also increases with this\nnow that you know why you need a cloud\nplatform let's go ahead and look at our\nCloud platform of choice today which is\nAWS so what is AWS now back in the day\nhandling and storing data was way\ndifferent than it is now companies\npreferred storing data using private\nservers and that was obviously for\nsecurity reasons but however with better\nusage of the internet the trend friend\nhas seen a paradigm shift for Industries\nas they are moving the data to the cloud\nnow this enables companies to focus more\non core competencies and stop worrying\nabout storing and computation for\nexample back in the day if a streaming\nplatform or a search engine platform\nanything with a high volume database\nsuffered a corruption it would take days\nbefore their operations resumed they\nwould face problems scaling up and only\nthen would they realize the need for a\nhighly reliable horizontally scalable\nand distributed system is what they need\nbut now with cloud services and public\nCloud platforms this wouldn't be a\nproblem now since every company has\nstarted to adopt cloud services it can\nbe claimed that the cloud is the Talk of\nthe Town and AWS in particular is the\nleading cloud service provider in the\nmarket AWS which stands for Amazon web\nservices is an amazon.com subsidiary\nwhich offers Cloud Computing Services at\nan extremely affordable rates therefore\nits customer base is strong and it\ntargets everyone from individuals to\nstartups to take joints running the it\nlandscape if you might wonder what cloud\ncomputing is is basically the use of\nremote servers on the internet to store\nmanage and process data as opposed to an\nactual physical server or a personal\ncomputer to do the same as we are\ntalking about AWS it is kind of an iaas\nor infrastructure as a service which\nbasically gives you a server in the\ncloud that you have complete control\nover in IAS you are responsible for\nmanaging everything starting from the OS\ncompletely up to the application you are\nrunning so now that we have discussed\nabout devops and AWS let's move on to\nRCI CD pipeline now what is a pipeline\nor cicd pipeline it's nothing but a\nseries of steps that must be performed\nin order to deliver a new version of the\nsoftware at its Bare Bones at its most\nbasic you have your build test and\ndeploy stage the CI CD basically stands\nfor continuous integration and\ncontinuous deployment so CI is basically\ncontinuous integration which basically\nmeans bringing together all the\ndevelopers working copies to a shared\nmain line all the developers working on\nParallel branches of a certain upgrade\nof an application merge their changes\ninto one main branch and CD stands for\ncontinuous delivery and deployment now\nwhile the CI includes building and\ntesting of your application continuous\ndeployment is about the processes that\nhave to happen after the code is\nintegrated for the app to be delivered\nto the users these processes involve\ntesting staging and deploying the code\nso at the end of this session what we\naim to do is build a CI CD pipeline for\nour demo app on AWS so for that we will\nhave to look at a few components of AWS\nso devops when implemented on AWS\nbecomes a lot more efficient and\neffective for a productive life cycle\nand the steps that are involved in AWS\ndevops are code commit code pipeline\ncode build code deploy and optionally\ncode staff so first of all we have AWS\ncode commit which is a fully managed\nSource control service somewhat like\nGitHub that hosts secure and highly\nscalable git based repository without\nthe need of operating the system it's\nmainly designed for developers who are\nsupposed to store and version their code\nsecurely and reliably for example you\nhave your it administrators that store\ntheir scripts and configurations and\nyour web designers who can store their\nHTML pages and images\nEtc the code commit is fully managed has\ngreat availability is secure scalable\nand patens up your development life\ncycle for people not aware of code\ncomment think of it as versioning in\nyour S3 but how it's different is that\nS3 supports versioning but not\ncollaborative file tracking features\nwhich could commit obviously does it\nmanages batches of changes across\nnumerous files made by multiple\ndevelopers parallely how it works is\nthat you create a repository in AWS code\ncommit service via the console or CLI\nand later using git from the development\nmachine you can run git clone to connect\nthe local repository and the AWS code\ncommit repo you can then modify your\nfiles on your development machine via\nthe local repository and then run git\nadd git commit and push it to the AWS\ncode comment repository as you do with\nGitHub again like git even a git pull\ncan be used here to synchronize the\nfiles in AWS could come at repository\nwith your local wrapper which ensures\nthat you are working with the latest\nversion of the files next on our list we\nhave AWS code pipeline which is a\ncombination of continuous integration\nand continuous delivery services for a\nquicker and more reliable infrastructure\nand application updates it automatically\nbuilds tests and deploys a user code\nWhenever there is a code change and it\nis completely based on user-defined\nrelease process models it also\nintegrates with AWS services like AWS\ncode Comet Amazon S3 code deploy elastic\nBeanstalk Ops works and AWS Lambda you\ncan configure the pipeline either with\nyour CLI or your graphical user\ninterface and like most services on AWS\neven with pipeline you only have to pay\nfor what you use all of this is great\nand all but why should you use code\npipeline simple by automating your\nsoftware build test and release\nprocesses AWS code pipeline enables you\nto increase the speed and quality of\nyour software updates by running all new\nchanges through a consistent set of\nquality checks it automates your release\nprocess it speeds up your delivery with\nquality it allows you to choose your\ntools of choice establish consistent\nrelease processes and provide a pipeline\nhistory detail as your source of Truth\ncode pipeline basically breaks up your\nworkflow into a series of stages like\nyour Source build test and deploy and\ngives you a revision option as a\nDeployable content each stage can\nprocess only one revision at a time even\nthough multiple revisions can be\nprocessed in the same Pipeline and each\nstage will have at least one action to\nbe performed which is some kind of task\nperformed on the artifact once all of\nthe actions that are configured in a\nstage is complete the stage is\nconsidered as complete after stages come\ncomplete it transitions the artifacts\ncreated in that stage to the next stage\nof the pipeline where you can manually\nenable or disable it so it prevents\nchanges from running through an entire\npipeline an approval action is granted\nonly by the IAM user and if an action\nfails it does not transition to the next\naction or stage at all so when a\ndeveloper completes her working on his\ncode he or she commits it to the source\nrepository and code pipeline\nautomatically detects the changes and\nbuilds those changes after that the\nbuild code is deployed to the staging\nserver for testing and then additional\ntests such as integration or load tests\nare run by the code pipeline once all\nthe tests are run if the code receives\nmanual approval then AWS code pipeline\ndeploys the tested and approved code to\nthe production instances also every time\nwhen a user creates a pipeline the code\npipeline creates a folder for that\npipeline in an S3 artifact bucket in\nthat particular region to sort input and\noutput artifacts next on our list we\nhave AWS code build now this is a fully\nmanaged build service in the cloud which\ncompiles your source code runs unit\ntests and produces artifacts that are\nready to deploy it eliminates the need\nto provision manage and scale your own\nbuild servers it provides pre-packaged\nbuild environments for the most popular\nprogramming languages and build tools\nand skills automatically to meet your\nPeak build requests now one prerequisite\nis that you must provide the AWS code\nbuild with a build project which should\ninclude information as to where to get\nthe source code from build environment\nbuild commands and where to store the\nbuild output how it works is that the\ncode build will use the build project to\ncreate a build environment AWS code\nbuild then downloads the source code\nfrom the build environment and performs\ntasks that you would specify in the\nbuild specifications if there is any\nbuild output the build environment\nuploads its output to the S3 bucket and\nwhile the build is running the build\nenvironment sends information to code\nbuild and cloudwatch logs you can use\nthe code build console AWS CLI or AWS SD\ncase to get summarized Bill information\nfrom code build and detailed build\ninformation from cloudwatch logs as well\nnow that was all about code build now\nfinally let's talk about code deploy now\nAWS code deploy is a service that\ncoordinates your application deployment\nand updates across the fleet of AWS ec2\nof any size it automates your code\ndeployment to any instance handles the\ncomplexity of updating them it also\navoids downtime during application\ndevelopment and rolls back automatically\nif failure is detected apart from that\nit also integrates with third-party\ntools and AWS to make your job easier it\nhas six primary components to be\nspecific you have app application\nrevision compute platform deployment\ngroup deployment configuration and the\ncode deploy agent now the basic skeleton\nof how your deployment workflow pursues\nis as you can see on your screen you\nbasically create an application with a\nunique name and set up a deployment\nGroup by specifying the instances to\nwhich you want to deploy your\napplication and the deployment type if\nyou're using the Lambda platform you\njust deploy your deployment group's name\nfollowed by which in your deployment\nconfiguration you specify the success or\nfailure condition of deployment and to\nhow many instances you want to deploy\nparallely then you upload the\napplication specification file to the S3\nand deploy your application as specified\nwith the help of your code deploy agent\nwhich is running on each instance on an\nec2 platform or as specified in your\nspecification file to the deployment\ngroup when you're using a Lambda\nplatform and finally you check your\ndeployment results and if you face any\nbugs or issues you can always roll back\nand redeploy finally let's discuss a\nlittle bit about codestar which is\nbasically a cloud-based development\nservice that provides tools that you\nneed to quickly develop build and deploy\napplications on AWS it's basically a\nvery templatized format where you start\ndeveloping on AWS in certain minutes and\nyou could choose from a variety of\nproject templates to all of the software\ndelivery is easily managed and you can\nwork across your team very securely\nusing the code stuff and apart from all\nof this you also are provided with a\nproject management dashboard to monitor\nyour application continuously all you\nhave to do as an AWS code star admin is\ncreate a project and add users your\nusers or team members will come at\nchanges which in turn will be built and\ndeployed and through consistent\nmonitoring of the application if there\nare any updates required or any bugs the\ndevelopers take a decision make updates\nfix bugs and then the loop closes back\nin on the team and that's about it the\ndevelopment process takes little to no\ntime using Code stop now that we have\nspoken about all of these different\ncomponents of AWS devops I hope building\nthe CI CD pipeline would seem a tad more\ntangible to you if you're new Learners\nyou can always sign up for a free tier\nwhich is free for the entire year\nobviously there are limitations to all\nof the services Beyond which you shall\nbe charged but that rarely happens so if\nyou're starting out with AWS and want to\ntry out all of its features and services\nthe free tier is a pretty good idea we\nalready have a video on how to create a\nfree tier on the AWS console if any of\nyou want to know how to create a free\naccount you can just go ahead and check\nthat out so we're going to be building a\nCI CD pipeline using AWS using Code\nPipeline and I'll try to be as slow and\nverbose as possible as comprehensive as\npossible so as to help you guys to\nfollow me each step of the way so what\nwe'll be doing here is that we'll be\ncreating a demo application platform as\na service application and we shall be\ndeploying it using the code pipeline so\nlet's go ahead and and create our\napplication first so to create an app we\nwill be using the Amazon elastic\nBeanstalk which basically has a bunch of\ntemplates ready for you now since this\nis a demo about code Pipeline and not\nweb development we'll be creating a\npretty rudimentary app so let's go ahead\nand type elastic Beanstalk using elastic\nBeanstalk we can make simple apps very\nvery quickly and if you have already\ncreated an application created a few\napplications they are going to appear\nright here on your screen but since we\nhave created no applications using this\nparticular account this is a screen that\nwill greet you so we're going to go\nahead and click on create application\nso let's call this deployment app\nwe're not very original are we we're not\ngoing to put in any application tags you\ncould put them if you like but currently\nthey are completely unnecessary on\nplatform let's pick PHP and it\nautomatically fills up the platform\nBranch inversion with the latest ones\navailable then I'm just going to be\nusing the sample application code and\nclick on create application now this is\na platform as a service app so basically\nonce I click on create application I\nwouldn't have to worry about any\nbackground processes or creating the\ninfrastructure elastic Beanstalk is\ngoing to do that for me on its own\nand here it's gonna show you all of the\nsteps that are taking place like create\nenvironment is starting using elastic\nBeanstalk as Amazon S3 storage bucket\nfor environment data so on and so forth\nnow this will take some time so let's go\nahead and parallely do something else\nI'm going to open another tab\nnow the AWS console\nokay thankfully you did not ask me to\nsign in again so while my app gets\ncreated what I'm gonna do is I'm gonna\ncreate the pipeline so I'm going to type\nin code pipeline\nand the Funda is simple even here guys\nyou're just going to put in certain\ndetails and your pipeline will be\ncreated for you now this is your\ndashboard this is where you all of your\nrecent pipelines will appear since in\nthis free tier we have no pipelines\ncreated hence you have no results to\ndisplay so first things first I'm going\nto create a pipeline so click on this\nbig orange button which says create\npipeline I'm going to give the pipeline\na name let's just call it\ndemo pipeline\nso as a default I'm just going to fill\nin a role name AWS\ncode pipeline\nservice role\nus\nEast\ndemo pipeline then click on next\nso for Source provider I am going to use\nGitHub\nand for that I'll have to connect to\nGitHub\nand will ask me to authorize the code\nSuite\nokay\nokay once you have successfully\nauthenticated the account\nyou can go ahead and search for the\nrepository here I'm going to choose the\ndemo hyphen code deploy app which is\nactually a sample app I have forked from\nthe AWS code pipeline repository you can\ngo ahead and look for it as well it will\nbe available in the AWS code pipelines\nGitHub account yeah\nadd in the branch let's select Master\nbranch\nand click on next Now we move on to the\nbuild stage because I have nothing major\nto build I'm just going to go ahead and\npick skip build stage then you will be\nprompted with a notification which will\nask you if you're sure to skip your\nbuild stage now since I have nothing\nmajor to build yes I am going to skip\nthis build stage and for deployment here\nwe are going to choose a deploy provider\nso here I'm going to use elastic\nBeanstalk\nand put in my application name and my\nenvironment name now our application\nname was deployment app and our\nenvironment name would be deployment app\nenvironment this is something which gets\ncreated automatically so we're going to\ngo ahead and click on next and finally\nwe are at the review stage where you can\ngo ahead and review all of the details\nthat you have just put in for your code\nPipeline and I am just going to create\nthis pipeline it's pretty simple to do\nnow this might take a few moments so\nkindly be patient\nand then you are greeted with a\nnotification which says success\ncongratulations your pipeline has been\ncreated now here you can go ahead and\nrelease changes if you want our IM role\nis in place that we had created earlier\nour pipeline is a success now all we\nhave to do is wait for our application\nto get created and then we can go ahead\nand deploy our application\nall right with that our application has\nbeen created it has okay health and you\ncan see the platform here you can see\nthe running version you can see all the\ndetails all the recent information\nregarding the app now this is a platform\nas a service it basically runs all of\nyour processes in the background now if\nyou would have gone ahead created this\napp configured your IM user configured\neverything else that was needed this\nwould have taken you a lot of time but\nbecause you are using a platform as a\nservice feature of AWS this entire\nprocess is automated and your work is\nsimplified so if you go down and look at\nthe recent events one thing you can see\nis your instance deployment is completed\nsuccessfully just in the line above that\nyou can see that your new application\nwas deployed to running ec2 instances so\nbasically an instance is running on ec2\nso let's go ahead\nand go to ec2 click on instances running\nthere is one instance running obviously\nwe all know which one that is and this\nis your deployment app let me go ahead\nand click on it here you can see the\ninstance State it's running and your\npipeline your Source has succeeded your\ndeployment has succeeded you go here you\ncan go down take a look at your IM role\nyour subnet ID\nso with that your instance has been\ndeployed and you realize that your demo\npipeline has worked\n[Music]\nforeign let's compare AWS devops versus\nazure devops\nso let's talk about the services that it\nprovides the Amazon web services code\npipeline is a continuous delivery\nservice for fast and reliable\napplication updates code pipeline builds\ntests and deploys your code every time\nthere is a code change based on the\nrelease process models you define on the\nother hand Azure devops services for\nteams to share code track work and ship\nsoftware Azure devops provides unlimited\nprivate git hosting Cloud bill for\ncontinuous integration agile planning\nand release management for continuous\ndelivery to the cloud and on-premise it\nalso includes a broad integrated\ndevelopment environment support\nin the next comparison we will talk\nabout what category of tech stack do\nthey belong to as you can see Amazon web\nservices code pipeline belongs to\ncontinuous deployment category of the\ntech stack while Azure devops can be\nprimarily classified under integrated\ndevelopment environment tools\nnow let's talk about the features of\nAmazon web services and Azure as you can\nsee Amazon web services provides\nworkflow modeling AWS integration and it\nalso has some pre-built plugins in it\nwhereas Azure on the other hand provides\nagile tools like kanban boards backlogs\nscrum boards and it also provides\nreporting tools like dashboards widgets\npower bi Etc\nand it also allows you to integrate with\nGit which provides free private\nrepositories and pull requests\nnow why do people like AWS is because it\nis extremely simple to set up whereas\nAzure on the other hand is a complete\npackage it's full and it's very powerful\nnow let's move on and check out the uses\nof AWS in azure as I've already\nmentioned AWS is extremely simple to set\nup it also has several managed Services\nit can be easily integrated with GitHub\nand it also has parallel execution\ndeployment is completely automatic and\nthere are manual steps available so\nyou're never lost Azure on the other\nhand supports open source it also has\nseveral Integrations that is it can be\neasily integrated with GitHub and\nJenkins it also has several project\nmanagement features and the most\nimportant plus point of azure is that it\nis free for stakeholders I hope the\nusers between AWS and Azure are\nextremely clear now let's move on and\ntalk about AWS and Azure clients so\nAmazon web services is used by companies\nlike play HQ affirm curro education up\nready for and bitbank incorporation\nwhereas Azure has clients like Microsoft\nKingsman software evodeck digital Muse\nenergy to Market and QR point\nnow the next important difference is\nwith what tools that these cloud\nservices can be integrated with Amazon\nweb services as you can see on the\nscreen can be easily integrated with\nGitHub Jenkins Amazon ec2 Amazon S3 AWS\nelastic Beanstalk run scope and Cloud\nbase Azure on the other hand can be\neasily integrated with kit and GitHub\nDocker slack Jenkins Trello and visual\nstudio\nnow let's move on and compare the salary\nof an AWS devops engineer and Azure\ndevops engineer as you can see on the\nscreen already the median salary for an\nAWS devops engineer is rupees 4 lakh 67\n000 rupees whereas the median salary for\nan Azure devops engineer is about rupees\n6 lakhs 4 000 rupees a year\n[Music]\nlet's address devops interview questions\nand answers\nthey are different topics that we'll be\ncovering in the session today that is\nquestions on General devops programming\nVersion Control continuous integration\ncontinuous testing configuration\nmanagement continuous monitoring and\nfinally containerization and\nvirtualization\nso without Much Ado let's talk about\nGeneral devops interview questions and\nanswers the first question is what are\nthe fundamental differences between\ndevops and agile\nso the first feature that we'll be\naddressing today is the agility\nso it devops the agility is seen in both\ndevelopment and operations whereas the\nagility in agile is only seen in the\ndevelopment side\nthe second difference is between the\nprocesses or practices in devops it\ninvolves different processes such as\ncontinuous integration continuous\ndevelopment continuous testing Etc\nwhereas in agile it involves practices\nsuch as agile scrum agile kanban Etc\nthe key Focus area in devops is\ntimeliness and quality whereas in agile\ntimeliness is the main priority\nthe next feature that we'll be talking\nabout is release Cycles or development\nSprints and develops smaller release\nCycles are implemented with immediate\nfeedback whereas in agile there is only\nsmaller release Cycles\nthe next feature that we'll be talking\nabout is the source of feedback in\ndevops feedback is from self monitoring\ntools whereas in agile it's from\ncustomers and finally the scope of work\nin devops is agility and the need for\nautomation whereas in agile it's only\nagility I hope the fundamental\ndifferences between devops and agile is\nclear based on the different features\nthat are available\nthe next question is what is the need\nfor devops according to me this answer\nshould start by explaining the General\nmarket Trend instead of releasing big\nsets of features companies are trying to\nsee if small features can be transported\nto their customers through a series of\nrelease chains this has many advantages\nlike quick feedback from customers\nbetter quality of software Etc which in\nturn leads to high customer satisfaction\nso to achieve this companies are\nrequired to lower failure rate of new\nreleases increase deployment frequency\nshorten lead time between fixes faster\nmean time to Recovery in the event of\nnew release crashing devops fulfills all\nof these requirements and helps in\nachieving seamless software delivery you\ncan give examples of companies like Etsy\nGoogle and Amazon which have adopted\ndevops to achieve levels of performance\nthat were Unthinkable even five years\nago they are doing tens hundreds or even\nthousands of code deployments per day\nwhile delivering world-class stability\nreliability and security\nthe next question is how is devops\ndifferent from agile or software\ndevelopment life cycle now agile is a\nset of values and principles about how\nto produce that is how to develop\nsoftware example if you have some ideas\nand you want to turn these ideas into\nworking software you can use the agile\nvalues and principles as a way to do it\nbut that software might only be working\non a developer's laptop or in a test\nenvironment\nnow if you want to quickly easily and\nrepeatedly move that software into\nproduction infrastructure in a safe\nsimple and yet efficient manner devops\nis definitely the way to do that you\nneed to understand devops tools and\ntechniques you can summarize by saying\nagile software development methodology\nfocuses on the development of software\nbut devops on the other hand is\nresponsible for development as well as\nthe deployment of the software in the\nsafest and most reliable way possible\nnow moving on which are the top devops\ntools how do all of these work together\nthe most popular devops tools are get\nfor Version Control System Jenkins for\ncontinuous integration selenium for\ncontinuous testing puppet Chef ansible\nare the configuration management and\ndeployment tools nagios is used for\ncontinuous monitoring finally Docker is\nused for containerization you can also\nmention any other tool if you want but\nmake sure you talk about all the tools\nthat you can see on the screen right now\nnow the second part of the answer has\ntwo possibilities\nnow if you have experience with all of\nthe tools that I just mentioned then you\ncan just say that I've worked on all of\nthese tools for developing good quality\nsoftware and deploying this software as\neasily frequently and reliably if you\nhave experience only with some of the\ntools then you can just mention those\ntools and say that I have specialization\nin these tools and have an overview\nabout the rest of the tools now let's\ntalk about a generic logical flow where\neverything gets automated for seamless\ndelivery however this flow may vary from\norganization to organization as per the\nrequirement firstly developers develop\nthe code and this source code is managed\nby version control system tools like git\ndevelopers send this code to get\nrepository and any changes made in the\ncode is committed to this particular\nRepository now Jenkins pulls the score\nfrom the repository using the git plugin\nand builds it using tools like Anto\nMaven configuration management tools\nlike puppet deploys and Provisions\ntesting environment and then Jenkins\nreleases this code on the test\nenvironment on which testing is finally\ndone using tools like selenium once the\ncode is tested Jenkins sends it for\ndeployment on the production server even\nthe production server is provisioned and\nmaintained by tools like puppet after\ndeployment it is continuously monitored\nby tools like nagios Docker containers\nprovide a testing environment to test\nthe build features I hope how all of\nthese work together is clear\nnow let's move on to the next question\nwhat is the difference between\ncontinuous delivery and continuous\ndeployment\ncontinuous delivery ensures code can be\nsafely deployed onto production whereas\nin continuous deployment every change\nthat passes the automated test is\ndeployed to production automatically\ncontinuous delivery also ensures\nbusiness applications and servers\nfunction as expected on the other hand\nin continuous deployment it makes\nsoftware development and the release\nprocess faster and more robust\nin continuous delivery it delivers every\nchange to a production-like environment\nthrough rigorous automated testing but\nin continuous deployment there is no\nexplicit approval from a developer and\nrequires a developed culture of\nmonitoring I hope the differences\nbetween continuous delivery and\ncontinuous deployment is clear you can\nsee so much to the interviewer he's\ngoing to be more than happy\nnow what are the advantages of devops\nnow for this answer you can use your\npast experience and explain how devops\nhelped you in your previous job now if\nyou do not have any such experience then\nyou can simply mention the technical and\nbusiness benefits of devops\nthe technical benefits of devops is it\nallows continuous software delivery\nthere are also less complex problems to\nfix and also there is a faster\nresolution of problems the business\nbenefits on the other hand are it\nenables faster delivery of features\nthere is more stable operating\nenvironments and most importantly\nthere's more time available to add value\nrather than to fix or maintain\nwhat is the most important thing devops\nhelp us to achieve the most important\nthing that devops helps us achieve is to\nget the changes into production as\nquickly as possible while minimizing\nrisks in software quality assurance and\ncompilence this is the primary objective\nof devops however you can add many other\npositive effects of devops for example\nclearer communication and better working\nrelationships between teams that is\nworthy operations and development teams\ncollaborate together to deliver good\nquality software which in turn leads to\nhigher customer satisfaction\nmoving on explain what the use case\nwhere devops can be used in industry or\nreal life\nthere are many industries that are using\ndevops so you can mention any of these\nuse cases like Amazon Google Netflix Etc\nor you can simply talk about\nEtsy\nEtsy is a peer-to-peer e-commerce\nwebsite focused on handmade or vintage\nitems and supplies as well as unique\nFactory manufactured items\nEtsy initially struggled with slow\npainful site updates that frequently\ncaused the site to go down it affected\nsales for millions of etsy users who\nsold Goods through Online Marketplace\nand risks driving them to the competitor\nwith the help of a new technical\nmanagement team\nEtsy transitioned from its waterfall\nmodel which produced 4r full site\ndeployments twice weekly to a more agile\napproach today it has a fully automated\ndeployment Pipeline and its continuous\ndelivery practices have reportedly\nresulted in more than 50 deployments a\nday with fewer disruptions so basically\nEtsy employed continuous integration\npipeline into their daily deployment\nactivities and this eventually resulted\nin more deployments per day\nthe next question is explain your\nunderstanding and expertise on both the\nsoftware development side and the\ntechnical operations side of an\norganization you have worked in the past\nnow for this answer share your past\nexperience and try to explain how\nflexible you were in your previous job\nyou can refer this example devops\nEngineers almost always work in a 24 bar\n7 business critical online environment I\nwas adaptable to on-call duties and was\navailable to take up real-time life\nsystem responsibility I successfully\nautomated processes to support\ncontinuous software deployments I have\nexperience with public or private clouds\ntools like Chef or puppet scripting and\nautomation with tools like Python and\nPHP and also a background in agile\nso this is how you can explain your\nemployer about how you have expertise\nand understanding on both the software\ndevelopment side and the technical\noperation side of your organization\nmoving on how will you approach a\nproject that needs to implement devops\nnow the following standard approaches\ncan be used to implement devops in a\nspecific project\nso in stage one you have to have an\nassessment of the existing process and\nimplementation for about two to three\nweeks to identify areas of improvement\nso that the team can create a roadmap\nfor the implementation in stage two you\ncreate a proof of concept once it is\naccepted and approved the team can start\non the actual implementation and roll\nout of the project plan finally in stage\n3 the project is now ready for\nimplementing devops by using tools like\nVersion Control tools integration tools\ntesting tools deployment tools delivery\ntools and monitoring tools followed in\neach step now by following the proper\nsteps for Version Control integration\ntesting deployment delivery and\nmonitoring the project is now ready for\ndevops implementation\nnow let's move on to the second part\nthat is programming here I'll be\ndiscussing some programs that are\ncommonly asked in a devops interview\nwithout Much Ado let's check them out\nso the first program that is commonly\nasked is fistbuzz implementation it is a\nvery simple programming task where you\nhave to print the numbers from 1 to 100\nand if the number is a multiple of three\nthen you should print the message Fizz\nif it's a multiple of five then it\nshould print the message buzz if it's a\nmultiple of both then it should print\nthe message fizzbuzz this is the logic\nof the program it's extremely simple and\ncommonly asked to so fizzbuzz is one\nprogram that you should be thorough with\nas you can see in the output the\nmultiples of three print quiz the\nmultiples of five print bus and the\nmultiples of both five and three that is\n15 Prince fizzbuzz I hope this is clear\nyou can see that they just used simply\nan if condition alif condition and then\nsimply print the message\nso one important programming task that\nis often asked that is questions based\non trees so the first one is to detect\nthe mirror of a tree so here you have to\ncheck for two trees to be mirror images\nso the following conditions must be two\nthe first one is their root node scheme\nmust be the same the second condition is\nthe left subtree of left tree and right\nsub tree of right trade have to be\nmirror images and the third condition is\nthat the right subtree of left tree and\nleft subtree of right tree have to be\nmirror images\nso here you have a binary tree node\nwhich is class node and then given two\ntrees say root 1 and root 2 return true\nif there are mirror of each other\nnow the base case here is if both are\nempty then just return true now if both\nare non-empty compare them recursively\nnote that in recursive calls we pass\nleft of One Tree and right of the other\ntree and this function this if condition\nwill check that then finally we create\nthe tree and see if both of these are\nmirror images of each other if it is\ntrue then it's going to print one if it\nis not symmetric then it's going to\nprint 0. if neither of the above\nconditions like two conditions that have\nbeen satisfied if it is true then root 1\nand root 2 are not mirror images so then\nyou can return false now you're creating\nthe tree here and then just checking if\nit is symmetric if it is then it's going\nto print one else it's going to print\nzero because it is symmetric you can see\nhere that the node has one and the left\nnode and right node has 2 2 left to left\nhas three and left of right has four and\nright of left has four and right of\nright has three so it is symmetric it's\ngoing to print one and that's your\noutput\nthe next common question is finding the\nmaximum height of a tree so here you\nrecursively calculate height of left and\nright sub trees of a node and assign\nheight to the node as maximum of the\nheights of two children plus one so this\nis where the algorithm says and first\nthing you'll have to do is you'll have\nto firstly create a Constructor to\ncreate a new node and that's what you're\ngoing to initialize initially after that\nyou compute the maximum depth or the\nheight of a tree and the number of nodes\nalong the longest part from the root\nnode down to the farthest Leaf node then\nyou simply return the maximum height of\nthe tree now we're just going to create\na tree and the height will be always\nplus one including the root\nso this is the driver program to test\nthe above function and once you create\nyour tree you can simply print the\nheight of the node and this says four\nwhich is absolutely right\nmoving on we have to know another\nimportant program or logic of the\nserializing and unserializing a tree\nso the question goes by given the route\nto a binary Implement serialized root\nwhich serializes the tree into a string\nand deserialize which deserializes the\nstring back into the tree so firstly\nyou'll have to create the binary tree\nusing the node class and once that is\ndone to serialize this tree into a\nstring you can see the serialized\nfunction here and to serialize it into a\nstring you can consider the null nodes\nas hash starting from root depth first\nsearch is used to Traverse through the\ntree now if a node exists its value is\nappended to the string and the left\nsubtree is traversed this process really\ncontinues until there are no more\nchildren left then our hash is appended\nto the array and the recursive function\nis existed then the right subtree is\ntraversed and the same process is\nfollowed all over again the final\nresulting is string and that is returned\nto deserialize a string to form a tree\nthe first word in the space separated\nstring is considered as the root when a\nhash is encountered it is considered as\nan empty node and none is returned in\nthe remaining cases a new node with a\nvalue as the word is formed and the\nremaining string is Towers so this\nfunction is recursively called until the\nend of the string is reached\nyou can see that string after\nserializing the node is written and the\nassert is true\ndepth first search is really important\ngiven a binary tree you have to Traverse\nit using depth first search using\nrecursion unlike linear data structures\nwhich have only one logical way to\nTraverse them trees can be traversed in\ntwo different ways that is usually depth\nfirst search or breadth first search if\nyou're into coding I'm sure you must be\nvery much aware of TFS and BFS\ndepth first search is basically a\ntechnique used for traversing a\nparticular triograph here back tracing\nis used for traversal that is in this\ntraversal first the deepest note is\nfirst visited and then back traces to\nits parents nodes if no sibling of that\nparticular node really exists in graphs\nusually there are cycles and\ndisconnectivity unlike graph tree does\nnot contain cycle and are always\nconnected so a DFS of a tree is\nrelatively very easy so as you can see\nhere firstly we can begin from a node\nthen Traverse is adjacent or children\nwithout caring about cycles and if we\nbegin from a single node and Traverse\nthis way it is guaranteed that we\nTraverse the entire tree as there is no\ndisconnectivity\nso you can do this in three different\norders in order traversal or pre-order\ntraversal or you know even post order\ntraversal\nso the first case is to print in order\nin case of a binary search trees in\norder traversal gives nodes in a\nnon-decreasing order to get nodes of\nbinary search trees in non-decreasing\norder a variation of in order traversal\nwhere in order traversals reversed can\nbe used\nthe next function is post order\ntraversal which is useful to get the\npost-fix expression of an expression\ntree this is simple too\nand finally pre-order pre-order\ntraversal is used to really create a\ncopy of the tree it is also used to get\nthe prefix expression of uh expression\ntree I hope this is clear you're just\ngoing to print each of the order in\nwhich the binary tree is\nso it really traverses the tree in a\nparticular order post order Travis is\nthe left tree then the right tree and\nthen visits the root whereas in in order\nTraverse is the left tree then it visits\nthe route and then traverses the right\nsub to you\nwhereas in pre-order it visits the route\nfirst then traverses the left subtree\nand then finally Travis is the right\nsubject and then it prints accordingly\nto that order\nso you have a tree of one two three four\nfive and then accordingly it just\nSprints according to its traversal and\nhow it moves recursively it prints the\norder of the tree\nso here you can see that in pre-order\nTower select first traverses the root\nand then it traverses the left subtree\nthat's two and then four and then\nfinally it will come back to the right\nsubtree that is then it touches five and\nthen comes back to three the same way in\norder and post order Tower cells is\nprinted too\non the other hand a level order\ntraversal of a tree is breadth first\ntraversal for the tree\nso we're going to use Q with the help of\nqueues we are going to implement breadth\nfirst search here we're going to firstly\ncreate an empty queue for level order\ntraversal and then we will append the\nqueue with the root\nwe will Loop the Q until the length of\nthe queue is greater than 0 we will Loop\nthis entire function\nand we will print the queues data\nenqueue the nodes children first left\nthen right children DQ a node from q and\nfinally we will print the level order\ntraversal of the binary tree\nthe next important function or program\nis the topological sort\ntopological sorting for directed acyclic\ngraph is a linear ordering of vertices\nsuch that for every directed Edge UV\nvertex U comes before V in the ordering\ntopological sorting for a graph is not\npossible if the graph is not a directed\na cyclic graph\nso in depth first search we print to\nvertex and then recursively call DFS for\nits adjacent vertices but in topological\nsorting we need to print a Vertex before\nits adjacent vertices that's the\ndifference between DFS and depth first\nsearch and topological sort we can\nmodify DFS to find topological sorting\nof a graph in DFS we start from a Vertex\nwe first print it and then recursively\ncalled EFS for its adjacent vertices\ninto Political sorting we use a\ntemporary stack we do not print the\nvertex immediately we first recursively\ncall to political sorting for all its\nadjacent vertices then push it onto a\nstack finally print contents of the\nstack it's important to know that a\nVertex is pushed to stack only when all\nof its adjacent vertices are already in\nthe stack so I hope topological sorting\nmakes sense so what they really do here\nis you're really having a function you\nhave to create a class to represent a\ngraph then you are adding a function to\nadd an edge to the graph a recursive\nfunction is called to use the\ntopological sort so you have to mark the\ncurrent node as visited and recursively\nvisit all the vertices adjacent to that\nparticular vertex finally you push the\ncurrent vertex to stack which stores the\nfinal result\nand then you have to write down the\nfunction to do the topological sort that\nis you repeatedly call the above\nfunction and then you finally call the\nfunction to do this topological sort you\nalso should call the recursive function\nalso you should call the recursive\nhelper function to store topological\nsorting starting from all vertices one\nby one then finally you print the\ncontents of the stack here we are\nprinting the contents of the stack in a\nreverse order so it's 543210\nyou'll have to create the graph and then\nfinally call the function which will\neventually print the graph in a reverse\norder I hope this is clear\nmoving on to another important topic\nthat is sets you'll have to know basic\nfunctions like removing duplicates here\nyou're defining a function named remove\nduplicates first you're going to convert\nthe array into set and then eventually\ninto list you're going to define the\narray and then print it\nso if you know python I'm sure you must\nbe very aware of this next is to detect\nduplicates here we're simply going to\nuse set which is going to be traversing\nthrough the entire list of elements that\nyou've mentioned and in this particular\nlist that you've defined if the count of\nthe data within the set is repeating or\nhas occurred more than once then you're\nsimply going to not include them in your\noutput\nso if the data or the elements within\nthe list has occurred more than once\nthen it is simply going to keep a count\nof it and going to display that in its\noutput\nstrings are another important topic so\nin strings it's extremely easy there's\nsimple programs with the help of slicing\nin Python you can reverse a string by\nusing -1 and it's just going to print\nthe reverse of a particular string that\nyou're going to incorporate so the\nlength of a string can be obtained by\nusing the Len method You're simply going\nto use it with print and then it will\nsimply print the number of elements in\nyour string another important program\nthat you will have to be thorough with\nis permutations different kinds of\npermutation and combination programs can\nbe asked in your devops interview a\nPython program to print all permutation\nusing Library functions you can use the\npermutations you can import the\npermutations library and then use it the\ntypes of permutations that can occur\nwith the three numbers say one to three\nand this will print the different\ncombinations that can occur with the\nthree numbers that's one two three\nso permutations is another important\ntopic that you must be aware of a Python\nprogram to print all permutation using\nLibrary functions permutation can be\nused if you are very familiar with\npython so here as you can see I want the\npermutations of three numbers one to\nthree I'm going to Define a variable and\nuse the function permutations with three\nnumbers that is one two three and this\nwill print out a list of all the\npossible permutations of these three\nnumbers you can see the output so these\nare some of the programs even quick sort\nmerge saw those are really important\nyou'll have to know the basic functions\nof programs that can be asked\nI'm not saying that these programs are\ncompulsively asked in a devops interview\nbut these are the ones that have\ncommonly been asked so that's why I have\nmade a list of all of the programs so I\nhope this is clear and let's move on to\nthe next topic without Much Ado\nnow let's move on to the third part of\nthis devops interview questions and\nanswer session so the first question\nthat we'll be addressing in the Version\nControl is what is Version Control and\nits benefits\nnow Version Control is a system that\nrecords changes to a file or set of\nfiles over time so that you can recall\nspecific versions later Version Control\nSystems consists of a central shared\nrepository where teammates can commit\nchanges to a file or set of files then\nyou can mention the uses of Version\nControl Version Control allows you to\nrevert files back to a previous state it\nalso allows you to revert the entire\nproject back to a previous state it can\ncompare changes over time see who last\nmodified something that might be causing\na problem also it allows you to check\nwho introduced an issue and at what time\nnow let's move on and talk about some of\nthe benefits of version control system\nnow with the Version Control System all\nthe team members are allowed to work\nfreely on any file at any time it will\nlater allow you to merge all the changes\ninto a common version also all the past\nversions and variants are neatly packed\nup inside the Version Control System\nwhen you need it you can request any\nversion at any time and you'll have a\nsnapshot of the complete project right\nat hand another benefit is that every\ntime you save a new version of your\nproject your version control system\nrequires you to provide a short\ndescription of what was changed\nAdditionally you can see what exactly\nwas changed in a files content this\nallows you to know who has made what\nchanges in the project at watch time\nthe last benefit is that the distributed\nVersion Control System like git allows\nall the team members to have complete\nhistory of the project so if there is a\nbreakdown in the central server you can\nuse any of your teammates local get\nRepository\nthe next question is describe the\nvarious branching strategies you have\nused\nthis question is asked to test your\nbranching experience to tell them about\nhow you have used branching in your\nprevious job and what purpose does it\nserve you can refer to the points that\nI'll be addressing now the first type of\nbranching is feature branching a feature\nBranch model keeps all of the changes\nfor a particular feature inside of a\nbranch when the feature is fully tested\nand validated by automated tests the\nbranch is then merged into Master the\nsecond type of branching is Task\nbranching in this model each task is\nimplemented on its own Branch with the\ntask key included in the branch name it\nis easy to see which code implements\nwhich task just look for the task key in\nthe branch name the third type of\nbranching is release branching once the\ndevelop branch is acquired enough\nfeatures for a release you can clone the\nbranch to form a release branch\ncreating this Branch starts the next\nrelease cycle so no new features can be\nadded after this point only bug fixes\ndocumentation generation and other\nrelease oriented tasks should go in this\nBranch once it is ready to ship the\nrelease gets merged into master and\ntagged with the version number in\naddition it should be merged back into\ndevelop branch which may have progress\nsince the release was initiated\nin the end just mention that branching\nstrategies vary from one organization to\nanother so you know the basic branching\noperations like delete merge checking\nout a branch Etc\nthe next important question is what is\ngit\ngit is a distributed Version Control\nSystem it can track changes to a file\nand allows you to revert back to any\nparticular change its distributed\narchitecture provides many advantages\nover other version control systems like\nSVN one major advantage is that it does\nnot rely on a central server to store\nall the versions of a Project's files\ninstead every developer clones a copy of\na repository with a local repository and\nhas the full history of the project on\nhis or her hard drive so that when there\nis a server outage all you need for\nRecovery is one of your teammates local\nget repository there is a central Cloud\nrepository as well where developers can\ncommit changes and share it with other\nteammates as you can see in the diagram\nthe distributed Version Control has a\ncentral repository and each of the\nworking copy or each of the developer\nhave their own local repositories where\nthey can make changes to regularly and\nthen if they want to push any of the\nchanges to the central repository where\ntheir other teams can look upon it they\ncan easily do that using git\nmoving on to the next question in\nVersion Control how do you push a file\nfrom your local system to the GitHub\nrepository using git\nnow firstly you have to connect the\nlocal repository to your remote\nrepository by using the command git\nremote add origin and the web address\nthe example is given below git remote ad\norigin and the copied web address of my\nGitHub URL that is https github.com\nkavya githubtest.get\nsecondly you have to push your file into\na remote repository by using the command\ngit push origin master that is you're\npushing your file into the master branch\nthe next question is how is a bear\nrepository different from the standard\nway of initializing a git repository you\ncan either do this by using the standard\nmethod that is by using the git\ninitialization command git i n i t\nand this will allow you to create a\nworking directory a DOT git subfolders\ncreated with all the git related\nrevision history the second way of doing\nthis is by using the bear way that is\nget init hyphen hyphen pair it does not\ncontain any working or checked out a\ncopy of source file bear repositories\nstore git revision history in the root\nfolder of your repository instead of the\ndot git subfolder this is the difference\nbetween the standard method and the\nbarrier so in git how do you revert a\ncommit that has already been pushed and\nmade public there can be two answers to\nthis question so make sure that you\ninclude both of these because they can\nbe used depending on the situation the\nfirst way is to remove or fix the bad\nfile in a new commit and push it to a\nremote repository this is the most\nnatural way to fix an error once you've\nmade the necessary changes to the file\ncommit it to the remote repository for\nthat you can use git commit hyphen n and\ncommit message type in the commit\nmessage\nthe second way is to create a new Comet\nthat unders all changes that were made\nin the bad commit and to do this you can\nuse the command git revert name of the\nbad commit I hope this is clear\nlet's move on to the next question what\nis git stash now a git developer working\nwith the current Branch wants to switch\nto another Branch to work on something\nelse but the developer does not want to\ncommit changes to your unfinished work\nthe solution to this particular issue is\nget stashed git stash takes a modified\ntracked files and saves them on a stack\nof Unfinished changes that you can\nreapply at any time\nthe next question is what is git bisect\nhow can you use it to determine the\nsource of a bug I would suggest you to\nFirst give a small definition of get\nbisect get bisect is used to find the\ncommit that introduced a bug by using\nbinary search the command for git bisect\nis git bisect the sub command and option\ncommands now since you've mentioned the\ncommand explain what this command will\ndo this command uses a binary search\nalgorithm to find which commit in your\nProject's history introduced a bug you\nuse it by first telling it it's a bad\ncommit that is known to contain the bug\nand a good commit that is known to be\nbefore the bug was introduced then get\nbisect picks a commit between these two\nendpoints and asks you whether the\nselected commit is good or bad it\ncontinues narrowing down the range until\nit finds the exact commit that\nintroduced the change I hope git bisect\nand how it is used to determine a bug is\neasy and understandable\nmoving on what is gitry base and how can\nit be used to resolve conflicts in a\nfeature Branch before much\naccording to me you should start by\nsaying gitry base is a command which\nwill allow you to merge another Branch\ninto the branch where you are currently\nwalking on and move all of the local\ncommits that are ahead of the rebase\nbranch to the top of the history of that\nparticular Branch now that you've\ndefined what gitry base is Give an\nexample or explain with an example to\nshow how it can be used to resolve\nconflicts in a feature Branch before\nMarch\nnow since you have defined Gatorade base\nnow explain it with an example if a\nfeature Branch was created from master\nand since then the master branch has\nreceived new commits gitrebase can be\nused to move the feature Branch to the\ntip of Master the command effectively\nwill replay the changes made in the\nfeature Branch at the tip of Master\nallowing configs to be resolved in the\nprocess when done with care this will\nallow the feature Branch to be merged\ninto Master with relative ease and\nsometimes as a simple fast forward\noperation\nhow do you find a list of files that is\nchanged in a particular commit\nfor this answer instead of just telling\nthe command explain what exactly this\ncommand will do so you can say that to\nget a list files that has changed in a\nparticular commit use the command git d\ni f f hyphen tree space hyphen R hash\nto get a list files that has changed in\na particular commit use command git diff\n3 hyphen R and the hash the particular\nhash given the commit hash this will\nlist all the files that we change or\nadded in that particular commit The\nHyphen R flag makes the command list\nindividual files rather than collapsing\nthem into root directory names only you\ncan also say that the output will also\ninclude some extra information which can\nbe easily suppressed by including two\nflags git diff tree hyphen no commit ID\nhyphen name only hyphen R hash here\nhyphen no commit ID will suppress the\ncommit hashes from appearing in the\noutput and hyphen name only will only\nprint the file names instead of the\nparts\nI hope this is clear\nmoving on how do you set up a script to\nrun every time a repository receives new\ncommits through push\nthere are three ways to configure a\nscript to run every time a repository\nreceives new commits through push one\nneeds to Define either a pre-receive\nupdate or a post receive hook depending\non when exactly the script needs to be\ntriggered pre-receive hook in the\ndestination repository is invoked when\ncommits are push to it any script bound\nto this hook will be executed before any\nreferences are updated this is a very\nuseful hook to run scripts that help\nenforce development policies update hook\nWorks in a very similar manner to\npre-receive hook and is also triggered\nbefore any updates are actually made\nhowever the update Hook is called once\nfor every commit that has been pushed to\nthe destination repository finally a\npost receive hook in the repository is\ninvoked after the updates have been\naccepted into the destination repository\nthis is an ideal place to configure\nsimple deployment scripts invoke some\ncontinuous integration systems dispatch\nnotification emails to repository\nmaintainers Etc\nhooks are local to every git\nrepositories and are not versioned\nscripts can either be created within the\nhooks directory inside the dot kit\ndirectory or they can be created\nelsewhere and links to those scripts can\nbe placed within the directory\nnow let us look at continuous\nintegration interview questions\nthe first one is what is meant by\ncontinuous integration\ncontinuous integration is a development\npractice that requires developers to\nintegrate code into a shared repository\nseveral times a day each check-in is\nthen verified by an automated build\nallowing teams to detect problems early\nI also suggest that you explain how you\nhave implemented this in your previous\njob you can refer to the diagram that is\ngiven here here as you can see\ndevelopers first check out code into the\nprivate workspaces and then when they\nare done with it they commit the changes\nto the shared repository that is the\nVersion Control Repository\nthen the continuous integration server\nmonitors the repository and checks out\nchanges when they occur The Continuous\nintegration server then pulls these\nchanges and builds the system and also\nruns unit and integration tests\nafter this The Continuous integration\nserver will now inform the team of the\nsuccessful build if the build or test\nfails The Continuous integration server\nwill alert the team the team will then\ntry to fix the issue at the earliest\nopportunity this process keeps on\nrepeating and this is the entire\ncontinuous integration pipeline in short\nmoving on why do you need a continuous\nintegration of development and testing\nfor this answer you should focus on the\nneed of continuous integration my\nsuggestion would be to mention the most\ntwo important points firstly continuous\nintegration of development and testing\nimproves the quality of software and\nreduces the time taken to deliver it by\nreplacing the traditional practice of\ntesting after completing all of the\ndevelopment it also allows development\nteam to easily detect and locate\nproblems early because developers need\nto integrate code into a shared\nrepository several times a day that is\nmore frequently each check-in is then\nautomatically tested\nmoving on to the third question what are\nthe success factors for continuous\nintegration here you have to mention the\nrequirements for continuous integration\nyou should include the following points\nthat is continuous integration allows\nyou to maintain a code repository it\nautomates the build makes the build\nself-testing in continuous integration\neveryone commits to the Baseline every\nsingle day every commit that is made to\nthe Baseline should be built keep the\nbuild fast\nit is important to test in a clone of\nthe production environment it also makes\nit easy to get to the latest\ndeliverables everyone can see the\nresults of the latest bills and finally\nit automates deployment\nthe fourth question explain how you can\nmove or copy Jenkins from one server to\nanother approach this task by copying\nthe jobs directory from the old server\nto the new one there are multiple ways\nto do that you can firstly move a job\nfrom one installation of Jenkins to\nanother by simply copying the\ncorresponding job directory you can also\nmake a copy of an existing job by making\na clone of a job directory by a\ndifferent name you can also rename an\nexisting job by renaming a directory it\nis also important to keep in mind that\nif you change a job name you will need\nto change any other job that tries to\ncall the rename job\nin the fifth question explain how can\nyou create a backup and copy files in\nJenkins the answer to this question is\nreally direct to create a backup all you\nneed to do is to periodically backup\nyour Jenkins home directory this\ncontains all of your build jobs\nconfigurations your slave node\nconfigurations and your build history to\ncreate a backup of your Jenkins setup\njust copy this directory you can also\ncopy a job directory to clone or\nreplicate a job or rename the directory\nI hope this is clear now let's move on\nto the sixth question of the session\nexplain how you can set up Jenkins job\nmy approach to this answer will be first\nto mention how to create Jenkins job go\nto Jenkins top page select new job then\nchoose build a freestyle software\nproject then you can tell the elements\nof this freestyle job firstly optional\nSCM such as CVS or subversion by your\nsource code resides optional triggers to\ncontrol when Jenkins will perform bills\nsome sort of build script that performs\nthe build where the real work really\nhappens optional steps to collect\ninformation out of the build such as\narchiving The artifacts and or recording\nJava dock in test results optional steps\nto notify other people or systems with\nthe build result such as sending emails\nIMS updating issue trackers Etc\nmoving on mention some of the useful\nplugins in Jenkins some of the useful\nimportant plugins are made into project\nAmazon ec2 HTML publisher copy artifact\njoin green balls these plugins a feel\nare the most useful plugins if you want\nto include any other plugins that is not\nmentioned you can add them as well but\nmake sure you first mention the plugins\nthat are on the screen right now\nthe next important question is how will\nyou secure Jenkins if you have any other\nways other than the one that I'm just\ngoing to talk about please mention it\nso the standard way to secure Jenkins is\nfirstly to ensure that the global\nsecurity is on ensure that Jenkins is\nintegrated with your company's user\ndirectory with appropriate plugin also\nensure that the Matrix of project Matrix\nis enabled to fine-tune access then\nautomate the process of setting rights\nof Privileges and Jenkins with custom\nVersion Control skipped limit physical\naccess to Jenkins data or folders\nperiodically Run Security audits on same\nJenkins is one of the most popular tools\nthat are used extensively in devops\nthere are many other ways to secure\nJenkins if you have any other way you\ncould just explain that or you could\njust explain the standard method\nnow let's move on to the continuous\ntesting questions\nfirst question is what is continuous\ntesting continuous testing is the\nprocess of executing automated tests as\npart of the software delivery pipeline\nto obtain immediate feedback on the\nbusiness risks associated with in the\nlatest build in this way each build is\ntested continuously allowing development\nteams to get fast feedback so that they\ncan prevent those problems from\nprogressing to the next stage of\nsoftware delivery life cycle this\ndramatically speeds up a developer's\nworkflow as there's no need to manually\nrebuild the project and rerun all tests\nafter making changes\nmoving on to the next question what is\nautomation testing what are the benefits\nof automation testing automation testing\nor test automation is a process of\nautomating the manual process to test\nthe application or system under test\nautomation testing involves use of\nseparate testing tools it involves use\nof separate testing tools which lets you\ncreate test scripts which can be\nexecuted repeatedly and does not require\nany manual intervention\nsome of the benefits of automation\ntesting are it suppose execution of\nrepeated test cases it aids in testing a\nlarge test Matrix it also enables\nparallel execution encourages unattended\nexecution improves accuracy thereby\nreducing human generated errors and\nfinally saves money and time\nthe next question is how to automate\ntesting in devops life cycle\nin devops developers are required to\ncommit all the changes made in the\nsource code to a shared repository\ncontinuous integration tools like\nJenkins will pull the code from the\nshared repository every time A change is\nmade in the code and eventually deploy\nit for continuous testing that is done\nby tools like selenium in this way any\nchange in the code is continuously\ntested unlike the traditional approach\nlet's move on and understand what are\nthe key elements of continuous testing\ntools\nthe key elements of continuous testing\ntools are risk assessment policy\nanalysis requirements traceability\nAdvanced analysis test optimization and\nservice virtualization\nin risk assessment it covers risk\nmitigation tasks technical depth quality\nassessment and test coverage\noptimization to ensure the build is\nready to progress towards next stage\nwhereas in policy analysis it ensures\nall processes aligned with the\norganization's evolving business and\ncompliance demands are met in\nrequirements traceability it ensures\ntrue requirements are met and rework is\nnot required an object assessment is\nused to identify which requirements are\nat risk working as expected or require\nfurther validation also in advanced\nanalysis it uses Automation in areas\nsuch as static code analysis change\nimpact analysis and scope assessment to\nprioritization to prevent defects in the\nfirst place and accomplishing more\nwithin each iteration in test\noptimization it ensures test yield\naccurate outcomes and provide actionable\nfindings aspects include test data\nmanagement test optimization management\nand test maintenance service\nvirtualization ensures access to\nreal-world testing environments so it\nbasically enables access to the virtual\nform of the required testing stages\ncutting waste time to test environment\nsetup and availability\nmoving on to the next question which\ntesting tool are you comfortable with\nand what are the benefits of that tool\nhere mentioned the testing tool that you\nhave worked with and accordingly frame\nyour answer I will mention an example\nwith selenium I have worked on selenium\nto ensure high quality and more frequent\nreleases some advantages of selenium are\nthat it is free and open source it also\nhas a large user base that helps\ncommunities the major advantage is that\nit has cross browser compatibility that\nis Firefox Chrome Internet Explorer\nSafari Etc it also has great platform\ncompatibility like in Windows Mac Linux\nEtc it supports multiple programming\nlanguages like Java c-sharp Ruby python\nPerl Etc it also has fresh and regular\nrepository developments and finally the\nmost important point it supports\ndistributed testing\nmoving on to the next question what are\nthe testing types supported by selenium\nselenium supports two types of testing\nthe first one being regression testing\nit is the act of retesting a product\naround an area where a bug was fixed the\nnext one is functional testing it refers\nto the testing of software features\nindividually\nthe next question is what is selenium\nIDE it is an integrated development\nenvironment for selenium scripts it is\nimplemented as a Firefox extension and\nallows you to record edit and debug\ntests selenium IDE includes the entire\nselenium core allowing you to easily and\nquickly record and play back tests in\nthe actual environment that they will\nrun in now include some advantages to in\nyour answer with autocomplete support\nand the ability to move commands around\nquickly selenium IDE is the ideal\nenvironment for creating selenium tests\nno matter what style of tests you prefer\nmoving on to the next question what is\nthe difference between assert and verify\ncommands in selenium first we will talk\nabout assert command asset command\nchecks whether the given condition is\ntrue or false let's say we assert\nwhether the given element is present on\nthe web page or not if the condition is\ntrue then the program control will\nexecute the next test step but if the\ncondition is false the execution would\nstop and no further test would be\nexecuted the verify command also checks\nwhether the given condition is true or\nfalse irrespective of the condition\nbeing true or false the program\nexecution does not halt that is any\nfailure during verification would not\nstop the execution and all the test\nsteps would be executed\nassert command is best used when the\ncheck value has to pass the test to be\nable to continue to run whereas verify\ncommand is used to check non-critical\nthings\nhave to launch browser using Webdriver\nthe following syntax can be used to\nlaunch browser you can use the Command\nWeb driver driver is equal to new\nFirefox driver function or web driver\ndriver is equal to new Chrome driver\nfunction or you can also use web driver\ndriver is equal to new Internet Explorer\ndriver function\nmoving on to the last question of\ncontinuous testing\nwhen should one use selenium grid for\nthis answer my suggestion would be to\ngive a small definition of selenium grid\nit can be used to execute same or\ndifferent test scripts on multiple\nplatforms and browsers concurrently to\nachieve distributed test execution\nso this eventually allows testing under\ndifferent environments and saving\nexecution time remarkably\nnow let's move on and check out how much\nyou know about configuration management\nwhat are the goals of configuration\nmanagement process\nthe purpose of configuration management\nis to ensure the Integrity of a product\nor system throughout its life cycle by\nmaking the development or deployment\nprocess controllable and repeatable\ntherefore creating a higher quality\nproduct or system the configuration\nmanagement process allows orderly\nmanagement of system information and\nsystem changes for purposes such as to\nrevise capability improve performance\nreliability or maintainability extant\nlife reduce cost reduce risk and\nliability or correct defects let's move\non to the next question that is what is\nthe difference between asset management\nand configuration management\nasset management is concerned with\nfinances whereas configuration\nmanagement is concerned with operations\nscope is everything you own in asset\nmanagement but scope is everything you\ndeploy in configuration Management in\nAsset Management it is interfaces to\npurchasing and leasing whereas in\nconfiguration managements it is\ninterfaces to ITIL processes in Asset\nManagement you can maintain data for\ntaxes but in configuration management\nyou maintain data for troubleshooting\nlifecycle is from purchase to disposal\nin Asset Management whereas in\nconfiguration management lifecycle is\nfrom deployment to retirement\nin Asset Management relationships are\nonly incidental whereas in configuration\nmanagement relationships are all\noperational\nmoving on to the third question what do\nyou understand by infrastructure s code\ninfrastructure s code is a type of it\ninfrastructure that operations teams can\nuse to automatically manage and\nprovision through code rather than using\na manual process companies for faster\ndeployments treat infrastructure like\nsoftware as code that can be managed\nwith the devops tools and processes\nthese tools basically let you make\ninfrastructure changes more easily\nrapidly safely and reliably\nmoving on to the most important question\nwhich among puppet chefs saw stack and\nansible is the best configuration\nmanagement tool and why this depends on\nthe organization's need so mention few\npoints on all of these tools puppet is\nthe oldest and most mature configuration\nmanagement tool puppet is a ruby based\nconfiguration management tool but while\nit has some free features much of what\nmakes puppet great is only available in\nthe paid version organizations that\ndon't need a lot of extras will find\npuppet useful but those needing more\ncustomization will probably need to\nupgrade to the paid version on the other\nhand Chef is written in Ruby so it can\nbe customized by those who know the\nlanguage it also includes free features\nplus it can be upgraded from open source\nto Enterprise level if necessary on top\nof that it is a very flexible product\nansible is a very secure option since it\nuses secure shell it is a simple tool to\nuse but it does offer a number of other\nservices in addition to configuration\nmanagement it is very easy to learn so\nit is perfect for those who do not have\na dedicated IT staff but still need a\nconfiguration management tool\nsalt stack is python-based open source\nconfiguration management tool made for\nlarger businesses but its learning curve\nis fairly low based on all of these\ntools and which you're comfortable with\nyou can just mention which is the best\ntool and why would you want to use it\nthe next question is what is puppet\npuppet is a configuration management\ntool which is used to automate\nAdministration tasks now you should\ndescribe its architecture and how puppet\nmanages its agents puppet has a Master\nSlave architecture in which the slave\nhas to First send a certificate signing\nrequest to master and master has to sign\nthat certificate in order to establish a\nsecure connection between puppet master\nand puppet slave as you can see in the\ndiagram puppet slave sends request to\npuppet master and Puppet Master then\npushes configuration on slave\nin the sixth question before a client\ncan authenticate with the Puppet Master\nits certificates need to be signed and\naccepted how will you automate this task\nthe easiest way to do this is to enable\nauto signing in puppet.config it is\ndefinitely a security risk but if you\nstill want to do this you can firewall\nyour puppet master that is restrict Port\nTCP 8140 to only networks that you trust\ncreate Puppet Masters for each trust\nZone and only include the trusted nodes\nin that Puppet Masters manifest never\nuse a full wildcard such as asterisk\nmoving on to the seventh question which\nopen source of community tools do you\nuse to make puppet more powerful over\nhere you need to mention the tools and\nhow you have used these tools to make\npuppet more powerful for example changes\nand requests are ticketed through jira\nand we manage requests through an\ninternal process then we use git and\npuppets code Manager application to\nmanage puppet code in accordance with\nthe best practices additionally we run\nall of our puppet changes through our\ncontinuous integration pipeline in\nJenkins using the beaker testing\nframework\nthe next important question is what are\npuppet manifests it is a very important\nquestion so make sure all of this is set\nin the correct flow according to me you\nshould first Define manifests every node\nor puppet agent has got its\nconfiguration details in Puppet Master\nwritten in the native puppet language\nthese details are written in the\nlanguage which puppet can understand and\nare termed as manifests they are\ncomposed of puppet code and the file\nnames use the pp extension Now with an\nexample you can write a manifest in\npuppet master that creates a file and\ninstalls Apache on all puppet agents or\nslaves connected to the Puppet Master\nmoving on what is puppet module and how\nit is different from Puppet manifest\na puppet module is a collection of\nmanifests and data such as fax files and\ntemplates and they have a specific\ndirectory structure modules are useful\nfor organizing your puppet code because\nthey allow you to split your code into\nmultiple manifests it is considered best\npractice to use modules to organize\nalmost all of your puppet manifests\npuppet programs are called manifests\nwhich are composed of puppet code and\nthe file names use the pp extension\nmoving on to the 10th question what is\nfactor in puppet\nFactor gathers basic information that is\nfacts about puppet agent such as\nHardware details network settings\noperating system type and version IP\naddresses Mac addresses SSH keys and\nmany more these facts are then made\navailable in Puppet Masters manifests as\nvariables\nwhat is Chef\nChef is a very powerful automation\nplatform that transforms infrastructure\ninto code Chef is a tool for which you\nwrite scripts that are used to automate\nprocesses what processes pretty much\nanything that is related to it now you\ncan explain the architecture of Chef it\nconsists of Chef server Chef node and\nChef workstation the chef server is the\ncentral store of your infrastructures\nconfiguration data the chef server\nstores the data necessary to configure\nyour nodes and provide search a powerful\ntool that allows you to dynamically\ndrive a node configuration Based on data\na node on the other hand is any host\nthat is configured using Chef client\nChef client runs on your nodes\ncontacting the chef server for the\ninformation necessary to configure the\nnode since a node is a machine that runs\nthe chef client software nodes are\nsometimes referred to as clients\nfinally a chef workstation is the host\nyou use to modify your cookbooks and\nother configuration data\nin the 12th question we're going to\ndiscuss what is a resource in chef a\nresource represents a piece of\ninfrastructure and its desired State\nsuch as a package that should be\ninstalled a service that should be\nrunning or a file that should be\ngenerated\nthe functions of resource are it\ndescribes the desired state for a\nconfiguration item it also declares the\nsteps needed to bring that item to the\ndesired state it specifies a resource\ntypes just package template or service\nit also lists additional details also\nwhich are known as resource properties\nwhenever it's necessary they are also\ngrouped into recipes which describe\nworking configurations\nwhat do you mean by recipe in Chef a\nrecipe is a collection of resources that\ndescribes a particular configuration or\npolicy so a recipe describes everything\nthat is required to configure part of a\nsystem\nsome of the functions of recipes are it\nhelps in installing and configuring\nsoftware components it manages files it\ndeploys applications and it also\nexecutes other recipes\nhow does a cookbook differ from a recipe\nin chef a recipe is a collection of\nresources and primarily configures a\nsoftware package or some piece of\ninfrastructure\non the other hand a cookbook groups\ntogether recipes and other information\nin a way that is way more manageable\nthan having just recipes alone\nwhat happens when you do not specify a\nresource action in chef\nhere Chef really just applies the\ndefault action you can explain this with\nan example the first snippet is the same\nas the below resource because create is\nthe file resource default action\nwhat is ansible module modules are\nconsidered to be the units of work in\nansible each module is mostly Standalone\nand can be written in a standard\nscripting language such as python Perl\nRuby bash Etc\none of the guiding properties of modules\nis item potency which means that even if\nan operation is repeated multiple times\nexample upon recovery from an outage it\nwill always place the system into the\nsame state\nnow what are playbooks and ansible\nplaybooks are ansible's configuration\ndeployment and orchestration language\nthey can describe a policy you want your\nremote systems to enforce or a set of\nsteps in a general ID process playbooks\nare designed to be human readable and\nare developed in a basic text language\nat a basic level playbooks can be used\nto manage configurations of and\ndeployments to remote machines in the\npicture on the screen you can see an\nexample of playbooks in ansible\nhow do I see a list of all the ansible\nvariables ansible by default gathers\nfacts about the machines under\nmanagement and these facts can be\naccessed in playbooks and in templates\nto see a list of all the facts that are\navailable about a machine you can run\nthe setup module as an ad hoc action\nthat is ansible hyphen M setup host name\nthis will print out a dictionary of all\nthe facts that are available for that\nparticular host\nhow do I turn the auto deployment\nfeature off\nthe auto deployment feature checks the\napplications folder every three seconds\nto determine whether there are any new\napplications or changes to the existing\napplications and then dynamically\ndeploys these changes the auto\ndeployment feature is enabled for\nservers that run in development mode to\ndisable auto deployment feature use one\nof the following methods to play servers\nin production mode that is in the\nadministration control click the name of\nthe domain in the left pane then click\nthe production mode checkbox in the\nright pane at the command line include\nthe following argument when starting the\ndomains Administration server that is\nhyphen capital D weblogic dot production\nmode enabled is equal to true\nalso the production mode is set for all\nweblogic server instances in a given\ndomain\nthe last question in configuration\nmanagement is when should I use the\nexternal stage option set external stage\nusing weblogic dot deployer if you want\nto Stage the application yourself and\nprefer to copy it to its Target by your\nown means\nnow let's test your knowledge on\ncontinuous monitoring\nthe first question is why is continuous\nmonitoring necessary\ncontinuous monitoring allows timely\nidentification of problems or weaknesses\nand quick corrective action that helps\nreduce expenses of an organization\ncontinuous monitoring provides solution\nthat addresses three operational\ndisciplines known as continuous audit\ncontinuous controls monitoring and\ncontinuous transaction inspection\nthe next really important question is\nwhat is nagios\nis one of the monitoring control tools\nit is used for continuous monitoring of\nsystems applications services and\nbusiness processes Etc\nit is used for continuous monitoring of\nsystems applications services and\nbusiness processes in a devops culture\nin the event of a failure Legos can\nalert technical staff of the problem\nallowing them to begin remediation\nprocesses before outages affect business\nprocesses end users or customers with\nthis tool you do not have to explain why\nan unseen infrastructure outage affect\nyour organization's bottom line now once\nyou've defined what is negios you can\nmention the various things that you can\nachieve using this tool you can plan for\ninfrastructure upgrades before outdated\nsystems cause failures they can also\nrespond to issues at the first sign of a\nproblem you can also automatically fix\nproblems when they are detected\ncoordinate technical team responses and\nalso ensure your organization's slas are\nbeing met\nhow does negeus work the GEOS runs on a\nserver usually as a Daemon or service\nthe GEOS periodically runs plugins\nresiding on the same server the contact\nhosts or servers on your network or on\nthe Internet one can view the status\ninformation using the web interface you\ncan also receive email or SMS\nnotification if something happens the\nDaemon behaves like a scheduler that\nruns certain scripts at certain moments\nit stores the results of the scripts and\nwill run other scripts if these results\nchange now expect a few question on a\ngears components like plugins nrpe Etc\nwhat are plugins in lagues they are\nscripts like Perl script shell scripts\nEtc that can run from a command line to\ncheck the status of a host or service\nnagios uses the results from plugins to\ndetermine the current statuses of hosts\nand services on your network once you\nhave defined plugins explain why you\nneed it nagios will execute a plugin\nWhenever there is a need to check the\nstatus of a host or service plugin will\nperform the check and then simply\nReturns the result to negios now GEOS\nwill process the results that it\nreceives from the plugin and take\nnecessary actions\nthe next important question is what is\nnrpe interviews that is negus remote\nplugin executor\nthe nrpe add-on is designed to allow you\nto execute and reduce plugins on remote\nLinux or Unix machines the main reason\nfor doing this is to allow no GEOS to\nmonitor local resources like CPU load\nmemory usage Etc on remote machines\nsince these public resources are not\nusually exposed to external machines an\nagent like nrpe must be installed on the\nremote Linux or unox machines\nI advise you to explain the nrpe\narchitecture basis on the diagram that\nis given here the nrpe add-on consists\nof two pieces the checked nrpe plugin\nwhich resides on the local monitoring\nmachine and the nrpe Daemon which runs\non the remote Linux or unox machine\nthere is also a SSL connection that is a\nsecure socket layer between monitoring\nhost and remote hosts as seen in the\ndiagram\nwhat do you mean by passive check in the\nGEOS passive checks are usually\ninitiated and performed by external\napplications or processes also the\nresults are submitted to nug use for\nprocessing they are useful for\nmonitoring services that are\nasynchronous in nature and cannot be\nmonitored effectively by polling their\nstatus on a regularly scheduled basis\nthey can also be used for monitoring\nservices that are located behind a\nfirewall and cannot be checked actively\nfrom the monitoring host\nthe next question is when does negios\ncheck for external commands\nnegios checks for external commands\nunder the following conditions at\nregular intervals specified by the\ncommand check interval option in the\nmain configuration file or immediately\nafter event handlers are executed this\nis in addition to the regular cycle of\nexternal command checks and is done to\nprovide immediate action if any event\nhandler submits commands to negios\nmoving on what is the difference between\nactive and passive check in negios\nfor this answer first point out the\nbasic difference between active and\npassive checks the major difference\nbetween active and passive checks is\nthat active checks are initiated and\nperformed by nagios while the passive\nchecks are performed by external\napplications if your interviewer is\nlooking unconvinced with the above\nexplanation then you can also mention\nsome key features of both active and\npassive checks passive checks are useful\nfor monitoring services that are\nasynchronous in nature and cannot be\nmonitored effectively by polling their\nstatus on a regularly scheduled basis\nthey're usually located behind a\nfirewall and cannot be checked actively\nfrom the monitoring host the main\nfeatures of active checks are that they\nare initiated by the negus process\nactive checks are run on a regularly\nscheduled basis\nI hope the differences between active\nand passive checks is clear and as you\ncan see on the screen these are the two\ndifferent pictures of how active and\npassive checks really work\nthe ninth question is how does negios\nhelp with distributed monitoring the\ninterviewer will be expecting an answer\nrelated to the distributed architecture\nof nagios so I suggest that you answer\nit by explaining that first but in a\nGEOS you can monitor your whole\nEnterprise by using a distributed\nmonitoring scheme in which local slave\ninstances of negios perform monitoring\ntasks and Report the results back to a\nsingle Master you manage all\nconfiguration notification and Reporting\nfrom the master while the slaves do all\nthe work this design takes advantage of\nniger's ability to utilize passive\nchecks that is external applications or\nprocesses that send results back to\nnucleos in a distributed configuration\nthese external applications are other\ninstances of nucleos\nmoving on explain main configuration\nfile of negios and its location the main\nconfiguration file contains a number of\ndirectives that affect how the negus\ndaemin operates this config file is read\nby both the nagios Daemon and the cgis\nit basically specifies the location of\nyour main configuration file now you can\ntell where it is present and how it is\ncreated a sample main configuration file\nis created in the base directory of the\nnagios distribution when you run the\nconfigure script the default name of the\nmain configuration file is\nnagios.cfg it is usually placed in the\nETC subdirectory of your nugios\ninstallation\nexplain how flap detection works in the\nGEOS\nclapping occurs when a servicer hosts\nchanges state too frequently this causes\na lot of problem and Recovery\nnotifications once you have defined\nflapping explain how nag use detects\nflapping whenever an abuse checks the\nstatus of a Hostess service it will\ncheck to see if it has started to stop\nflapping the GEOS follows a procedure to\ndo that firstly it stores the results of\nthe last 21 checks of the hostess\nservice analyzing the historical check\nresults and determines where State\nchanges or transitions occur using the\nstate transitions to determine a\nperson's State change value for the host\nservice finally it will compare the\npercent State change value against slow\nand high flapping thresholds a host of\nservices determined to have started\nflapping when its person State change\nfirst exceeds a high flapping threshold\na host of service is determined to have\nstopped flapping when its person State\ngoes below a low flapping threshold\nnow what are the three main variables\nthat affect recursion and inheritance in\nthe GEOS\nname user and register name is a\nplaceholder that is used by other\nobjects use defines the parent object\nwhose property should be used register\ncan have a value of 0 indicating it's\nonly a template and one which is an\nactual object it's important to know\nthat the register value is never\ninherited I hope the three main\nvariables that affect inheritance and\nrecursion in a GEOS is clear moving on\nlet us understand what is meant by\nsaying reduce is object oriented\none of the features of nagios is object\nconfiguration format in that you can\ncreate object definitions that inherit\nproperties from other object definitions\nand hence the name this basically\nsimplifies and clarifies relationships\nbetween various components\nnow the last question in continuous\nmonitoring is what is State stalking in\na GEOS\nState stalking is used for logging\npurposes when stalking is enabled for a\nparticular host or service nagios will\nwatch that Hostess service very\ncarefully and log any changes it sees in\nthe output of check results\nit can be very helpful in later analysis\nof the log files under normal\ncircumstances the result of a Hostess\nservice check is only locked if the\nhostess service has changed State since\nit was last checked\nnow we're moving on to the last topic of\ntoday's session and let's see how much\nyou know about containers and virtual\nmachines\nso what are containers containers are\nused to provide consistent Computing\nenvironment from a developer's laptop to\na test environment from a staging\nenvironment into production\na container consists of an entire\nruntime environment and application plus\nall its dependencies libraries and other\nbinaries and configuration files needed\nto run it bundled into one package\ncontainerizing the application platform\nand its dependencies removes the\ndifferences in operating system\ndistributions and underlying\ninfrastructure\nnow let's move on to the second question\nand discuss what are the advantages that\ncontainerization provides over\nvirtualization\ncontinuous provide real-time\nprovisioning and scalability but virtual\nmachines provide slow provisioning\ncontainers are also lightweight when\ncompared to Virtual machines virtual\nmachines have limited performance when\ncompared to Containers containers have\nbetter resource utilization compared to\nVirtual machines these are some of the\nadvantages that containerization\nprovides over virtualization\nmoving on how exactly are containers\nthat is Docker in our case different\nfrom hypervisor virtualization what are\nthe benefits\nhypervisor virtualization in default\nsecurity support are to a great degree\nbut containers have a slightly less\ndegree over here in a hypervisor\nvirtualization the complete operating\nsystem plus applications are in memory\non disk whereas in containers only the\napplication requirements are on disk\ntime taken to Startup is substantially\nlonger in hypervisor virtualized\n",
  "words": [
    "music",
    "variety",
    "devops",
    "rules",
    "commonly",
    "used",
    "automate",
    "streamline",
    "different",
    "aspects",
    "software",
    "development",
    "deployment",
    "process",
    "order",
    "improve",
    "speed",
    "quality",
    "software",
    "releases",
    "hello",
    "everyone",
    "welcome",
    "session",
    "currently",
    "watching",
    "edureka",
    "devops",
    "tools",
    "full",
    "course",
    "end",
    "video",
    "idea",
    "multiple",
    "devops",
    "tools",
    "currently",
    "demand",
    "love",
    "watching",
    "videos",
    "like",
    "subscribe",
    "edunaker",
    "youtube",
    "channel",
    "click",
    "bell",
    "button",
    "never",
    "miss",
    "updates",
    "us",
    "also",
    "want",
    "learn",
    "devops",
    "watching",
    "session",
    "wish",
    "obtain",
    "eureka",
    "devop",
    "certification",
    "course",
    "please",
    "see",
    "link",
    "description",
    "let",
    "begin",
    "agenda",
    "brief",
    "overview",
    "cover",
    "devops",
    "tools",
    "full",
    "course",
    "video",
    "start",
    "introduction",
    "devops",
    "learn",
    "devops",
    "learn",
    "see",
    "devops",
    "life",
    "cycle",
    "time",
    "get",
    "hands",
    "dirty",
    "popular",
    "devops",
    "tools",
    "start",
    "git",
    "followed",
    "jenkins",
    "docker",
    "learn",
    "kubernetes",
    "puppet",
    "ansible",
    "done",
    "move",
    "ahead",
    "terraform",
    "prometheus",
    "gravna",
    "also",
    "see",
    "selenium",
    "egg",
    "years",
    "head",
    "azure",
    "devops",
    "aws",
    "demons",
    "compare",
    "azure",
    "devops",
    "aws",
    "devops",
    "hope",
    "session",
    "assists",
    "getting",
    "jobs",
    "industry",
    "order",
    "accomplish",
    "look",
    "career",
    "intervals",
    "work",
    "essential",
    "devops",
    "interview",
    "questions",
    "answers",
    "stick",
    "lead",
    "let",
    "get",
    "started",
    "first",
    "topic",
    "devops",
    "foreign",
    "music",
    "devops",
    "basically",
    "combination",
    "tours",
    "development",
    "operations",
    "get",
    "combine",
    "two",
    "music",
    "devops",
    "culture",
    "implements",
    "technology",
    "order",
    "promote",
    "collaboration",
    "development",
    "operations",
    "team",
    "deploy",
    "code",
    "production",
    "faster",
    "automated",
    "repeatable",
    "way",
    "goal",
    "devops",
    "increase",
    "organization",
    "speed",
    "comes",
    "delivering",
    "applications",
    "services",
    "many",
    "companies",
    "successfully",
    "implemented",
    "devops",
    "enhance",
    "user",
    "experience",
    "let",
    "say",
    "example",
    "facebook",
    "mobile",
    "app",
    "updated",
    "every",
    "two",
    "weeks",
    "effectively",
    "telling",
    "users",
    "want",
    "ever",
    "wondered",
    "facebook",
    "able",
    "smoothly",
    "divorce",
    "philosophy",
    "helps",
    "facebook",
    "ensure",
    "apps",
    "outdated",
    "users",
    "get",
    "best",
    "experience",
    "facebook",
    "accomplishes",
    "code",
    "ownership",
    "model",
    "makes",
    "developers",
    "responsible",
    "includes",
    "testing",
    "supporting",
    "production",
    "delivery",
    "kernel",
    "code",
    "write",
    "update",
    "extra",
    "policies",
    "like",
    "facebook",
    "developed",
    "divorce",
    "culture",
    "successfully",
    "accelerated",
    "development",
    "life",
    "cycle",
    "industries",
    "started",
    "cure",
    "digital",
    "transformation",
    "shifting",
    "needs",
    "weeks",
    "months",
    "instead",
    "maintaining",
    "high",
    "quality",
    "result",
    "soon",
    "see",
    "devops",
    "engineers",
    "access",
    "control",
    "end",
    "user",
    "person",
    "enterprise",
    "music",
    "let",
    "understand",
    "one",
    "major",
    "concept",
    "devops",
    "devops",
    "life",
    "cycle",
    "devops",
    "quite",
    "time",
    "must",
    "heard",
    "least",
    "one",
    "devops",
    "faces",
    "continuous",
    "development",
    "continuous",
    "integration",
    "continuous",
    "testing",
    "continuous",
    "deployment",
    "continuous",
    "monitoring",
    "phases",
    "mentioned",
    "make",
    "devops",
    "life",
    "cycle",
    "first",
    "phase",
    "continuous",
    "development",
    "phase",
    "phase",
    "involves",
    "planning",
    "coding",
    "software",
    "vision",
    "project",
    "decided",
    "planning",
    "phase",
    "developers",
    "begin",
    "developing",
    "code",
    "application",
    "devops",
    "tools",
    "required",
    "planning",
    "number",
    "tools",
    "maintaining",
    "code",
    "code",
    "written",
    "language",
    "mainly",
    "maintained",
    "using",
    "version",
    "control",
    "tools",
    "maintaining",
    "code",
    "referred",
    "source",
    "code",
    "management",
    "popular",
    "version",
    "control",
    "tools",
    "git",
    "svn",
    "mercurial",
    "cvs",
    "etc",
    "also",
    "tools",
    "like",
    "ant",
    "maven",
    "gradle",
    "used",
    "phase",
    "building",
    "packaging",
    "code",
    "executable",
    "file",
    "eventually",
    "forwarded",
    "next",
    "phases",
    "next",
    "phase",
    "devops",
    "life",
    "cycle",
    "continuous",
    "testing",
    "stage",
    "develop",
    "software",
    "continuously",
    "tested",
    "bugs",
    "continuous",
    "testing",
    "automation",
    "testing",
    "tools",
    "like",
    "selenium",
    "test",
    "ng",
    "junit",
    "etc",
    "used",
    "basically",
    "tools",
    "mentioned",
    "right",
    "love",
    "quality",
    "assurances",
    "test",
    "multiple",
    "code",
    "bases",
    "thoroughly",
    "parallel",
    "ensure",
    "flaws",
    "functionality",
    "automation",
    "testing",
    "saves",
    "lot",
    "time",
    "effort",
    "labor",
    "executing",
    "test",
    "instead",
    "manually",
    "right",
    "also",
    "phase",
    "docker",
    "containers",
    "used",
    "simulating",
    "test",
    "environment",
    "selenium",
    "automation",
    "testing",
    "reports",
    "generated",
    "test",
    "ng",
    "entire",
    "testing",
    "phase",
    "automated",
    "help",
    "continuous",
    "integration",
    "tool",
    "called",
    "jenkins",
    "talk",
    "jenkins",
    "later",
    "session",
    "let",
    "explain",
    "example",
    "suppose",
    "written",
    "selenium",
    "code",
    "java",
    "test",
    "application",
    "build",
    "code",
    "using",
    "anto",
    "maven",
    "code",
    "built",
    "tested",
    "user",
    "acceptance",
    "testing",
    "entire",
    "process",
    "automated",
    "using",
    "jenkins",
    "besides",
    "report",
    "generation",
    "big",
    "plus",
    "point",
    "task",
    "evaluating",
    "test",
    "cases",
    "failed",
    "test",
    "suite",
    "gets",
    "simpler",
    "also",
    "schedule",
    "execution",
    "test",
    "cases",
    "predefined",
    "times",
    "entire",
    "testing",
    "done",
    "code",
    "continuously",
    "integrated",
    "existing",
    "code",
    "third",
    "phase",
    "life",
    "cycle",
    "continuous",
    "integration",
    "stage",
    "heart",
    "entire",
    "devops",
    "life",
    "cycle",
    "software",
    "development",
    "practice",
    "developers",
    "require",
    "commit",
    "changes",
    "source",
    "code",
    "frequently",
    "may",
    "daily",
    "weekly",
    "basis",
    "every",
    "comment",
    "built",
    "allows",
    "early",
    "detection",
    "problems",
    "present",
    "building",
    "code",
    "involve",
    "compilation",
    "also",
    "includes",
    "code",
    "review",
    "unit",
    "testing",
    "integration",
    "testing",
    "packaging",
    "code",
    "supporting",
    "new",
    "functionality",
    "continuously",
    "integrated",
    "existing",
    "code",
    "since",
    "continuous",
    "development",
    "software",
    "updated",
    "code",
    "needs",
    "integrated",
    "continuously",
    "well",
    "smoothly",
    "systems",
    "reflect",
    "changes",
    "end",
    "users",
    "already",
    "said",
    "previous",
    "slide",
    "jenkins",
    "popular",
    "tool",
    "used",
    "phase",
    "whenever",
    "change",
    "git",
    "repository",
    "jenkins",
    "simply",
    "fetches",
    "updated",
    "code",
    "prepares",
    "build",
    "code",
    "executable",
    "file",
    "entire",
    "build",
    "performed",
    "forwarded",
    "test",
    "server",
    "production",
    "server",
    "let",
    "move",
    "fourth",
    "phase",
    "cycle",
    "continuous",
    "deployment",
    "phase",
    "stage",
    "code",
    "deployed",
    "production",
    "servers",
    "important",
    "ensure",
    "code",
    "correctly",
    "deployed",
    "servers",
    "moving",
    "let",
    "us",
    "understand",
    "things",
    "configuration",
    "management",
    "containerization",
    "tools",
    "set",
    "tools",
    "help",
    "achieving",
    "continuous",
    "deployment",
    "firstly",
    "talk",
    "configuration",
    "management",
    "basically",
    "act",
    "establishing",
    "maintaining",
    "consistency",
    "application",
    "functional",
    "requirements",
    "performance",
    "let",
    "put",
    "simple",
    "words",
    "act",
    "releasing",
    "deployments",
    "servers",
    "scheduling",
    "updates",
    "importantly",
    "keeping",
    "configurations",
    "consistent",
    "across",
    "servers",
    "since",
    "new",
    "code",
    "deployed",
    "continuous",
    "basis",
    "configuration",
    "management",
    "tools",
    "play",
    "extremely",
    "important",
    "role",
    "executing",
    "tasks",
    "quickly",
    "frequently",
    "popular",
    "tools",
    "used",
    "puppet",
    "chef",
    "solstack",
    "ansible",
    "containerization",
    "tools",
    "also",
    "play",
    "equally",
    "important",
    "role",
    "deployment",
    "stage",
    "docker",
    "one",
    "popular",
    "tool",
    "used",
    "purpose",
    "basically",
    "tools",
    "help",
    "produce",
    "consistency",
    "across",
    "development",
    "test",
    "staging",
    "production",
    "environments",
    "besides",
    "also",
    "help",
    "scaling",
    "scaling",
    "instances",
    "swiftly",
    "basically",
    "containerization",
    "tools",
    "help",
    "maintaining",
    "consistency",
    "across",
    "environments",
    "application",
    "deployed",
    "developed",
    "tested",
    "using",
    "tools",
    "scope",
    "errors",
    "failures",
    "production",
    "environment",
    "package",
    "replicate",
    "dependencies",
    "packages",
    "used",
    "development",
    "testing",
    "staging",
    "environment",
    "basically",
    "makes",
    "application",
    "easy",
    "run",
    "different",
    "computers",
    "next",
    "stage",
    "continuous",
    "monitoring",
    "stage",
    "last",
    "stage",
    "devops",
    "life",
    "cycle",
    "crucial",
    "stage",
    "continuously",
    "monitor",
    "performance",
    "application",
    "vital",
    "information",
    "use",
    "software",
    "recorded",
    "information",
    "processed",
    "recognize",
    "proper",
    "functionality",
    "application",
    "system",
    "errors",
    "low",
    "memory",
    "server",
    "reachable",
    "etc",
    "resolved",
    "phase",
    "root",
    "cause",
    "issue",
    "determined",
    "phase",
    "also",
    "maintains",
    "security",
    "availability",
    "services",
    "also",
    "network",
    "issues",
    "resolved",
    "phase",
    "helps",
    "us",
    "automatically",
    "fix",
    "problem",
    "soon",
    "detected",
    "practice",
    "involves",
    "participation",
    "operations",
    "team",
    "monitor",
    "user",
    "activity",
    "bugs",
    "improper",
    "behavior",
    "system",
    "popular",
    "tools",
    "used",
    "phase",
    "splunk",
    "el",
    "key",
    "stack",
    "negios",
    "new",
    "relic",
    "sensual",
    "tools",
    "help",
    "monitor",
    "application",
    "performance",
    "servers",
    "closely",
    "also",
    "eventually",
    "enable",
    "check",
    "health",
    "system",
    "proactively",
    "using",
    "tools",
    "also",
    "improve",
    "productivity",
    "increase",
    "reliability",
    "systems",
    "turn",
    "reduces",
    "support",
    "costs",
    "major",
    "issues",
    "found",
    "reported",
    "development",
    "team",
    "fixed",
    "continuous",
    "development",
    "phase",
    "also",
    "leads",
    "faster",
    "resolution",
    "problems",
    "stages",
    "carried",
    "loop",
    "continuously",
    "till",
    "achieve",
    "desired",
    "product",
    "quality",
    "therefore",
    "almost",
    "major",
    "companies",
    "shifted",
    "devops",
    "building",
    "products",
    "moving",
    "want",
    "become",
    "devops",
    "engineer",
    "part",
    "ideology",
    "extremely",
    "important",
    "familiar",
    "devops",
    "related",
    "tools",
    "today",
    "talking",
    "seven",
    "important",
    "devops",
    "tools",
    "understand",
    "tools",
    "devops",
    "engineers",
    "use",
    "important",
    "understand",
    "containers",
    "containers",
    "containers",
    "allow",
    "package",
    "application",
    "dependencies",
    "together",
    "one",
    "manifest",
    "version",
    "controlled",
    "allowing",
    "easy",
    "replication",
    "application",
    "across",
    "developers",
    "team",
    "machines",
    "cluster",
    "exactly",
    "microservices",
    "architectures",
    "profoundly",
    "changed",
    "way",
    "development",
    "operation",
    "teams",
    "test",
    "deploy",
    "software",
    "containers",
    "really",
    "help",
    "companies",
    "modernize",
    "making",
    "easier",
    "scale",
    "deploy",
    "applications",
    "also",
    "introduced",
    "new",
    "challenges",
    "complexity",
    "creating",
    "entirely",
    "new",
    "infrastructure",
    "ecosystem",
    "companies",
    "deploying",
    "thousands",
    "container",
    "instances",
    "daily",
    "complexity",
    "scale",
    "manage",
    "kubernetes",
    "comes",
    "rescue",
    "kubernetes",
    "container",
    "management",
    "technology",
    "developed",
    "google",
    "manage",
    "containerized",
    "applications",
    "different",
    "kinds",
    "environments",
    "like",
    "physical",
    "virtual",
    "cloud",
    "infrastructure",
    "etc",
    "really",
    "open",
    "source",
    "system",
    "helps",
    "creating",
    "managing",
    "containerization",
    "applications",
    "container",
    "management",
    "responsibilities",
    "include",
    "container",
    "deployment",
    "scaling",
    "descaling",
    "containers",
    "container",
    "load",
    "balancing",
    "extremely",
    "important",
    "remember",
    "kubernetes",
    "containerization",
    "platform",
    "management",
    "solution",
    "let",
    "move",
    "discuss",
    "features",
    "kubernetes",
    "first",
    "one",
    "automated",
    "scheduling",
    "kubernetes",
    "provides",
    "advanced",
    "scheduler",
    "launch",
    "containers",
    "cluster",
    "nodes",
    "based",
    "resource",
    "requirements",
    "constraints",
    "sacrificing",
    "availability",
    "second",
    "feature",
    "capabilities",
    "kubernetes",
    "allows",
    "replace",
    "reschedule",
    "containers",
    "nodes",
    "type",
    "also",
    "kills",
    "containers",
    "respond",
    "health",
    "checks",
    "advertise",
    "clients",
    "ready",
    "serve",
    "third",
    "feature",
    "automated",
    "rollouts",
    "rollback",
    "kubernetes",
    "rolls",
    "changes",
    "application",
    "configuration",
    "monitoring",
    "application",
    "health",
    "ensure",
    "kill",
    "instances",
    "time",
    "something",
    "goes",
    "wrong",
    "kubernetes",
    "simply",
    "roll",
    "back",
    "change",
    "fourth",
    "feature",
    "horizontal",
    "scaling",
    "load",
    "balancing",
    "kubernetes",
    "scale",
    "scale",
    "application",
    "per",
    "requirements",
    "simple",
    "command",
    "using",
    "user",
    "interface",
    "automatically",
    "based",
    "cpu",
    "usage",
    "let",
    "us",
    "understand",
    "architecture",
    "kubernetes",
    "architecture",
    "two",
    "main",
    "components",
    "first",
    "one",
    "masternode",
    "second",
    "one",
    "worker",
    "node",
    "master",
    "node",
    "responsible",
    "management",
    "kubernetes",
    "cluster",
    "mainly",
    "entry",
    "point",
    "administrative",
    "tasks",
    "always",
    "one",
    "master",
    "node",
    "cluster",
    "check",
    "fault",
    "tolerance",
    "components",
    "master",
    "node",
    "like",
    "discuss",
    "first",
    "one",
    "api",
    "server",
    "api",
    "server",
    "entry",
    "point",
    "resd",
    "commands",
    "used",
    "control",
    "cluster",
    "second",
    "one",
    "controller",
    "manager",
    "daemon",
    "regulates",
    "kubernetes",
    "cluster",
    "manages",
    "different",
    "control",
    "loops",
    "third",
    "one",
    "scheduler",
    "scheduler",
    "schedules",
    "task",
    "worker",
    "nodes",
    "really",
    "stores",
    "resource",
    "usage",
    "information",
    "worker",
    "node",
    "fourth",
    "one",
    "etcd",
    "etcd",
    "simple",
    "distributed",
    "consistent",
    "key",
    "value",
    "store",
    "mainly",
    "used",
    "share",
    "configuration",
    "service",
    "discovery",
    "know",
    "masternodes",
    "work",
    "let",
    "move",
    "worker",
    "nodes",
    "worker",
    "nodes",
    "contain",
    "necessary",
    "services",
    "manage",
    "networking",
    "containers",
    "communicate",
    "masternode",
    "assign",
    "resources",
    "scheduled",
    "containers",
    "first",
    "component",
    "talking",
    "worker",
    "node",
    "docker",
    "container",
    "docker",
    "runs",
    "worker",
    "nodes",
    "runs",
    "configured",
    "pods",
    "second",
    "one",
    "cubelet",
    "cubelet",
    "gets",
    "configuration",
    "pod",
    "api",
    "server",
    "ensures",
    "discraft",
    "containers",
    "running",
    "third",
    "one",
    "cube",
    "proxy",
    "q",
    "proxy",
    "acts",
    "network",
    "proxy",
    "load",
    "balancer",
    "service",
    "single",
    "walker",
    "node",
    "fourth",
    "one",
    "pods",
    "pod",
    "one",
    "containers",
    "logically",
    "run",
    "together",
    "nodes",
    "come",
    "end",
    "first",
    "tool",
    "devops",
    "tool",
    "let",
    "move",
    "second",
    "tool",
    "docker",
    "docker",
    "docker",
    "simply",
    "containerization",
    "platform",
    "packages",
    "application",
    "dependencies",
    "together",
    "form",
    "containers",
    "ensure",
    "application",
    "works",
    "seamlessly",
    "environment",
    "application",
    "run",
    "separate",
    "container",
    "set",
    "libraries",
    "dependencies",
    "must",
    "really",
    "convenient",
    "move",
    "around",
    "containers",
    "right",
    "containers",
    "also",
    "ensures",
    "process",
    "level",
    "isolation",
    "meaning",
    "application",
    "independent",
    "applications",
    "giving",
    "developers",
    "surety",
    "build",
    "applications",
    "interfere",
    "one",
    "another",
    "quality",
    "assurance",
    "team",
    "need",
    "install",
    "dependent",
    "software",
    "applications",
    "test",
    "code",
    "helps",
    "save",
    "lots",
    "lots",
    "time",
    "energy",
    "also",
    "ensures",
    "working",
    "environment",
    "consistent",
    "across",
    "individuals",
    "involved",
    "process",
    "starting",
    "development",
    "deployment",
    "number",
    "systems",
    "scaled",
    "easily",
    "code",
    "deployed",
    "effortlessly",
    "basic",
    "concepts",
    "docker",
    "must",
    "aware",
    "doc",
    "file",
    "docker",
    "image",
    "docker",
    "container",
    "docker",
    "image",
    "created",
    "sequence",
    "commands",
    "written",
    "file",
    "called",
    "docker",
    "file",
    "docker",
    "file",
    "executed",
    "using",
    "docker",
    "command",
    "results",
    "docker",
    "image",
    "name",
    "finally",
    "image",
    "executed",
    "docker",
    "run",
    "command",
    "start",
    "whatever",
    "application",
    "service",
    "must",
    "start",
    "execution",
    "hope",
    "docker",
    "file",
    "docker",
    "images",
    "docker",
    "containers",
    "clear",
    "understand",
    "docker",
    "hub",
    "docker",
    "hub",
    "basically",
    "cloud",
    "registry",
    "find",
    "docker",
    "images",
    "uploaded",
    "different",
    "communities",
    "also",
    "develop",
    "image",
    "upload",
    "docker",
    "hub",
    "first",
    "need",
    "create",
    "account",
    "docker",
    "hub",
    "let",
    "move",
    "understand",
    "docker",
    "engine",
    "docker",
    "engine",
    "heart",
    "system",
    "simply",
    "application",
    "installed",
    "host",
    "machine",
    "basically",
    "works",
    "like",
    "client",
    "server",
    "application",
    "uses",
    "server",
    "type",
    "long",
    "running",
    "program",
    "called",
    "daemon",
    "process",
    "also",
    "uses",
    "command",
    "line",
    "interface",
    "client",
    "finally",
    "uses",
    "rest",
    "api",
    "used",
    "communication",
    "cli",
    "client",
    "docker",
    "daemin",
    "per",
    "image",
    "linux",
    "operating",
    "system",
    "client",
    "accessed",
    "terminal",
    "host",
    "runs",
    "daemin",
    "build",
    "images",
    "run",
    "containers",
    "passing",
    "commands",
    "cli",
    "client",
    "daemin",
    "however",
    "case",
    "windows",
    "mac",
    "additional",
    "toolbox",
    "component",
    "inside",
    "docker",
    "host",
    "docker",
    "toolbox",
    "installer",
    "quickly",
    "easily",
    "install",
    "set",
    "docker",
    "environment",
    "windows",
    "macbook",
    "toolbox",
    "installs",
    "docker",
    "client",
    "machine",
    "compose",
    "present",
    "mac",
    "virtualbox",
    "come",
    "end",
    "docker",
    "move",
    "third",
    "tool",
    "devops",
    "tools",
    "git",
    "git",
    "extremely",
    "important",
    "tool",
    "software",
    "developers",
    "free",
    "open",
    "source",
    "distributed",
    "version",
    "control",
    "system",
    "designed",
    "handle",
    "everything",
    "small",
    "large",
    "projects",
    "speed",
    "efficiency",
    "created",
    "lennis",
    "travels",
    "2005",
    "develop",
    "linux",
    "kernel",
    "git",
    "functionality",
    "performance",
    "security",
    "flexibility",
    "teams",
    "individual",
    "developers",
    "need",
    "also",
    "serves",
    "important",
    "distributed",
    "version",
    "control",
    "devops",
    "tool",
    "git",
    "primarily",
    "used",
    "manage",
    "project",
    "comprising",
    "set",
    "code",
    "text",
    "files",
    "may",
    "change",
    "time",
    "go",
    "let",
    "us",
    "take",
    "step",
    "back",
    "learn",
    "version",
    "control",
    "systems",
    "git",
    "came",
    "existence",
    "version",
    "control",
    "management",
    "changes",
    "documents",
    "computer",
    "programs",
    "large",
    "websites",
    "collection",
    "information",
    "basically",
    "two",
    "types",
    "version",
    "control",
    "systems",
    "first",
    "one",
    "centralized",
    "version",
    "control",
    "system",
    "second",
    "one",
    "distributed",
    "version",
    "control",
    "system",
    "git",
    "distributed",
    "version",
    "control",
    "system",
    "every",
    "contributor",
    "user",
    "local",
    "copy",
    "clone",
    "main",
    "repository",
    "repository",
    "repository",
    "simply",
    "storage",
    "space",
    "project",
    "files",
    "everyone",
    "maintains",
    "local",
    "repository",
    "contains",
    "files",
    "metadata",
    "present",
    "main",
    "repository",
    "local",
    "repository",
    "usually",
    "local",
    "machine",
    "user",
    "every",
    "programmer",
    "maintains",
    "local",
    "repository",
    "actually",
    "copy",
    "clone",
    "central",
    "repository",
    "hard",
    "drive",
    "central",
    "repository",
    "may",
    "present",
    "web",
    "hosting",
    "platform",
    "like",
    "github",
    "commit",
    "update",
    "local",
    "repository",
    "without",
    "interference",
    "also",
    "update",
    "local",
    "repositories",
    "new",
    "data",
    "central",
    "server",
    "operation",
    "called",
    "pull",
    "effect",
    "changes",
    "main",
    "repository",
    "operation",
    "called",
    "push",
    "local",
    "repository",
    "hope",
    "everyone",
    "understood",
    "git",
    "works",
    "moving",
    "let",
    "us",
    "understand",
    "role",
    "get",
    "devops",
    "give",
    "plays",
    "vital",
    "role",
    "comes",
    "managing",
    "code",
    "collaborators",
    "contribute",
    "shared",
    "repository",
    "score",
    "extracted",
    "performing",
    "continuous",
    "integration",
    "create",
    "build",
    "test",
    "test",
    "server",
    "eventually",
    "deploy",
    "production",
    "tools",
    "like",
    "get",
    "enable",
    "communication",
    "development",
    "operations",
    "team",
    "developing",
    "large",
    "project",
    "huge",
    "number",
    "collaborators",
    "extremely",
    "important",
    "communication",
    "collaborators",
    "making",
    "changes",
    "within",
    "project",
    "commit",
    "messages",
    "get",
    "paid",
    "important",
    "role",
    "communicating",
    "among",
    "team",
    "bits",
    "pieces",
    "deploy",
    "lies",
    "version",
    "control",
    "system",
    "like",
    "get",
    "succeed",
    "devops",
    "need",
    "communication",
    "version",
    "control",
    "hence",
    "git",
    "plays",
    "vital",
    "role",
    "succeeding",
    "devops",
    "let",
    "move",
    "next",
    "tool",
    "selenium",
    "selenium",
    "one",
    "widely",
    "used",
    "open",
    "source",
    "web",
    "user",
    "interface",
    "automation",
    "testing",
    "suite",
    "originally",
    "developed",
    "jason",
    "hawkins",
    "2004",
    "internal",
    "tool",
    "thoughtworks",
    "selenium",
    "supports",
    "automation",
    "across",
    "different",
    "browsers",
    "platforms",
    "programming",
    "languages",
    "tool",
    "easily",
    "deployed",
    "platforms",
    "windows",
    "linux",
    "solaris",
    "macintosh",
    "moreover",
    "supports",
    "operating",
    "systems",
    "mobile",
    "applications",
    "like",
    "windows",
    "android",
    "selenium",
    "supports",
    "wide",
    "variety",
    "programming",
    "languages",
    "use",
    "drivers",
    "specific",
    "language",
    "language",
    "supported",
    "selenium",
    "include",
    "java",
    "perl",
    "php",
    "python",
    "ruby",
    "currently",
    "selenium",
    "webdriver",
    "popular",
    "java",
    "selenium",
    "test",
    "strips",
    "coded",
    "supported",
    "programming",
    "languages",
    "run",
    "directly",
    "modern",
    "web",
    "browsers",
    "browsers",
    "supported",
    "selenium",
    "include",
    "internet",
    "explorer",
    "mozilla",
    "firefox",
    "google",
    "chrome",
    "safari",
    "basically",
    "used",
    "automate",
    "functional",
    "tests",
    "integrated",
    "automation",
    "test",
    "tools",
    "maven",
    "jenkins",
    "docker",
    "achieve",
    "continuous",
    "testing",
    "also",
    "integrated",
    "tools",
    "test",
    "ng",
    "junit",
    "managing",
    "test",
    "cases",
    "generating",
    "reports",
    "moving",
    "advantages",
    "selenium",
    "choose",
    "selenium",
    "since",
    "selenium",
    "open",
    "source",
    "licensing",
    "cost",
    "involved",
    "major",
    "advantage",
    "testing",
    "tools",
    "many",
    "reasons",
    "behind",
    "selenium",
    "popularity",
    "first",
    "one",
    "test",
    "scripts",
    "written",
    "programming",
    "languages",
    "java",
    "python",
    "c",
    "sharp",
    "php",
    "ruby",
    "etc",
    "desk",
    "also",
    "carried",
    "operating",
    "systems",
    "windows",
    "mac",
    "linux",
    "test",
    "also",
    "carried",
    "using",
    "browser",
    "mozilla",
    "firefox",
    "internet",
    "explorer",
    "google",
    "chrome",
    "safari",
    "opera",
    "discussed",
    "previous",
    "slide",
    "last",
    "use",
    "integrated",
    "maven",
    "jenkins",
    "docker",
    "achieve",
    "continuous",
    "testing",
    "short",
    "selenium",
    "used",
    "automated",
    "testing",
    "also",
    "cross",
    "browsers",
    "compatibility",
    "preferred",
    "also",
    "increases",
    "test",
    "coverage",
    "reduces",
    "test",
    "execution",
    "time",
    "moving",
    "let",
    "us",
    "understand",
    "important",
    "concept",
    "selenium",
    "selenium",
    "grid",
    "selenium",
    "grid",
    "developed",
    "patrick",
    "lightbody",
    "initially",
    "called",
    "hosted",
    "qa",
    "used",
    "combination",
    "remote",
    "control",
    "run",
    "tests",
    "remote",
    "machines",
    "fact",
    "grid",
    "multiple",
    "test",
    "scripts",
    "executed",
    "time",
    "multiple",
    "machines",
    "parallel",
    "execution",
    "achieved",
    "help",
    "hub",
    "node",
    "architecture",
    "one",
    "machine",
    "assume",
    "role",
    "hub",
    "others",
    "nodes",
    "hub",
    "controls",
    "test",
    "scripts",
    "running",
    "various",
    "browsers",
    "inside",
    "various",
    "operating",
    "systems",
    "test",
    "scripts",
    "executed",
    "different",
    "nodes",
    "written",
    "different",
    "programming",
    "languages",
    "grid",
    "still",
    "use",
    "works",
    "webdriver",
    "remote",
    "control",
    "learning",
    "webdriver",
    "next",
    "slide",
    "however",
    "maintaining",
    "grid",
    "required",
    "browsers",
    "operating",
    "systems",
    "huge",
    "challenge",
    "multiple",
    "online",
    "platforms",
    "provide",
    "online",
    "selenium",
    "grid",
    "lets",
    "access",
    "run",
    "selenium",
    "automation",
    "scripts",
    "example",
    "use",
    "lambda",
    "test",
    "2000",
    "browser",
    "environments",
    "run",
    "test",
    "truly",
    "automate",
    "cross",
    "browser",
    "testing",
    "let",
    "understand",
    "selenium",
    "webdriver",
    "selenium",
    "webdriver",
    "webis",
    "automation",
    "testing",
    "framework",
    "test",
    "web",
    "pages",
    "initiated",
    "various",
    "web",
    "browsers",
    "various",
    "operating",
    "systems",
    "fact",
    "also",
    "freedom",
    "write",
    "test",
    "scripts",
    "different",
    "programming",
    "languages",
    "like",
    "java",
    "perl",
    "python",
    "etc",
    "important",
    "remember",
    "mozilla",
    "firefox",
    "selenium",
    "webdriver",
    "default",
    "browser",
    "benefits",
    "selenium",
    "webdriver",
    "support",
    "seven",
    "programming",
    "languages",
    "test",
    "various",
    "browsers",
    "work",
    "different",
    "operating",
    "systems",
    "also",
    "overcomes",
    "limitations",
    "selenium",
    "version",
    "1",
    "like",
    "file",
    "upload",
    "download",
    "dialogues",
    "period",
    "let",
    "move",
    "next",
    "important",
    "tool",
    "jenkins",
    "continuous",
    "integration",
    "important",
    "part",
    "devops",
    "used",
    "integrate",
    "various",
    "devops",
    "stages",
    "jenkins",
    "popular",
    "continuous",
    "integration",
    "tool",
    "open",
    "source",
    "automation",
    "tool",
    "written",
    "java",
    "plugins",
    "built",
    "continuous",
    "integration",
    "purposes",
    "jenkins",
    "basically",
    "used",
    "build",
    "test",
    "software",
    "projects",
    "continuously",
    "making",
    "easier",
    "developers",
    "integrate",
    "changes",
    "project",
    "making",
    "easier",
    "users",
    "obtain",
    "fresh",
    "build",
    "also",
    "allows",
    "continuously",
    "deliver",
    "software",
    "integrating",
    "large",
    "number",
    "testing",
    "deployment",
    "technologies",
    "basically",
    "jenkins",
    "organizations",
    "accelerate",
    "software",
    "development",
    "process",
    "automation",
    "jenkins",
    "integrates",
    "development",
    "lifecycle",
    "processes",
    "kinds",
    "including",
    "build",
    "document",
    "test",
    "package",
    "stage",
    "deploy",
    "static",
    "analysis",
    "much",
    "tool",
    "also",
    "achieves",
    "continuous",
    "integration",
    "help",
    "plugins",
    "plugins",
    "extremely",
    "important",
    "allows",
    "integration",
    "various",
    "devops",
    "stages",
    "want",
    "integrate",
    "particular",
    "tool",
    "need",
    "install",
    "particular",
    "plugin",
    "tool",
    "example",
    "git",
    "maven",
    "project",
    "amazon",
    "ec2",
    "html",
    "publisher",
    "etc",
    "many",
    "advantages",
    "jenkins",
    "want",
    "discuss",
    "one",
    "detail",
    "first",
    "one",
    "open",
    "source",
    "tool",
    "great",
    "community",
    "support",
    "second",
    "one",
    "extremely",
    "easy",
    "install",
    "next",
    "one",
    "thousand",
    "plugins",
    "ease",
    "work",
    "plugin",
    "exist",
    "simply",
    "code",
    "share",
    "community",
    "fourth",
    "advantage",
    "free",
    "cost",
    "last",
    "one",
    "built",
    "java",
    "coding",
    "time",
    "must",
    "knowing",
    "java",
    "portable",
    "major",
    "platforms",
    "gives",
    "added",
    "advantage",
    "jenkins",
    "makes",
    "jenkins",
    "different",
    "continuous",
    "integration",
    "tools",
    "two",
    "reasons",
    "first",
    "one",
    "adoption",
    "second",
    "one",
    "plugins",
    "jenkins",
    "widespread",
    "one",
    "lakh",
    "47",
    "000",
    "active",
    "installations",
    "1",
    "million",
    "users",
    "around",
    "world",
    "adoption",
    "jenkins",
    "extremely",
    "high",
    "second",
    "one",
    "jenkins",
    "interconnected",
    "well",
    "thousand",
    "plugins",
    "allow",
    "integrate",
    "development",
    "testing",
    "deployment",
    "tools",
    "two",
    "features",
    "adoption",
    "plugins",
    "make",
    "one",
    "best",
    "continuous",
    "integration",
    "tools",
    "currently",
    "available",
    "market",
    "let",
    "move",
    "next",
    "tool",
    "devops",
    "tools",
    "puppet",
    "today",
    "mature",
    "tool",
    "configuration",
    "management",
    "puppet",
    "know",
    "must",
    "wondering",
    "puppet",
    "popular",
    "makes",
    "unique",
    "compared",
    "configuration",
    "management",
    "tools",
    "puppet",
    "configuration",
    "management",
    "tool",
    "used",
    "deploying",
    "configuring",
    "managing",
    "servers",
    "let",
    "understand",
    "functions",
    "puppet",
    "first",
    "one",
    "helps",
    "defining",
    "distinct",
    "configurations",
    "every",
    "host",
    "also",
    "continuously",
    "checks",
    "confirms",
    "whether",
    "required",
    "configuration",
    "place",
    "altered",
    "host",
    "second",
    "function",
    "dynamic",
    "scaling",
    "scaling",
    "machines",
    "last",
    "one",
    "provides",
    "control",
    "configured",
    "machines",
    "centralized",
    "change",
    "gets",
    "propagated",
    "automatically",
    "puppet",
    "basically",
    "uses",
    "master",
    "sleeve",
    "architecture",
    "master",
    "slave",
    "communicate",
    "secure",
    "encrypted",
    "channel",
    "help",
    "ssl",
    "let",
    "see",
    "architecture",
    "detail",
    "see",
    "diagram",
    "screen",
    "puppet",
    "agent",
    "sends",
    "fax",
    "puppet",
    "master",
    "facts",
    "basically",
    "key",
    "value",
    "data",
    "pair",
    "represents",
    "aspect",
    "slave",
    "state",
    "ip",
    "address",
    "uptime",
    "operating",
    "system",
    "whether",
    "virtual",
    "machine",
    "puppet",
    "master",
    "uses",
    "facts",
    "compile",
    "catalog",
    "defines",
    "slave",
    "configured",
    "catalog",
    "document",
    "describes",
    "desired",
    "state",
    "resource",
    "puppet",
    "master",
    "manages",
    "slave",
    "puppet",
    "slave",
    "reports",
    "back",
    "master",
    "indicating",
    "configuration",
    "finally",
    "complete",
    "visible",
    "puppet",
    "dashboard",
    "come",
    "last",
    "tool",
    "devops",
    "nag",
    "ios",
    "knock",
    "ios",
    "monitors",
    "entire",
    "infrastructure",
    "ensure",
    "systems",
    "applications",
    "servers",
    "business",
    "processes",
    "functioning",
    "properly",
    "integral",
    "devops",
    "lifecycle",
    "basically",
    "used",
    "continuously",
    "monitoring",
    "systems",
    "application",
    "servers",
    "business",
    "processors",
    "devops",
    "culture",
    "event",
    "failure",
    "nag",
    "ios",
    "alert",
    "technical",
    "staff",
    "problem",
    "allowing",
    "begin",
    "remediation",
    "processes",
    "outages",
    "affect",
    "business",
    "processes",
    "end",
    "users",
    "customers",
    "tool",
    "really",
    "explain",
    "unseen",
    "infrastructure",
    "outage",
    "affects",
    "organization",
    "bottom",
    "line",
    "ios",
    "runs",
    "server",
    "usually",
    "daemon",
    "service",
    "periodically",
    "runs",
    "plugins",
    "residing",
    "server",
    "contact",
    "hosts",
    "servers",
    "network",
    "internet",
    "one",
    "view",
    "status",
    "information",
    "using",
    "web",
    "interface",
    "also",
    "receive",
    "email",
    "sms",
    "notification",
    "something",
    "happens",
    "nog",
    "ios",
    "daemon",
    "behaves",
    "like",
    "scheduler",
    "runs",
    "certain",
    "scripts",
    "certain",
    "moments",
    "stores",
    "results",
    "scripts",
    "run",
    "scripts",
    "result",
    "changes",
    "naga",
    "ios",
    "also",
    "use",
    "plugins",
    "compiled",
    "executables",
    "scripts",
    "run",
    "command",
    "line",
    "check",
    "status",
    "host",
    "service",
    "nag",
    "ios",
    "also",
    "uses",
    "results",
    "plugins",
    "determine",
    "current",
    "status",
    "hosts",
    "services",
    "network",
    "ios",
    "built",
    "server",
    "agent",
    "architecture",
    "usually",
    "network",
    "nag",
    "ios",
    "server",
    "running",
    "host",
    "plugins",
    "interact",
    "local",
    "remote",
    "hosts",
    "need",
    "monitored",
    "plugins",
    "send",
    "information",
    "scheduler",
    "displays",
    "graphical",
    "user",
    "interface",
    "come",
    "end",
    "devops",
    "tools",
    "let",
    "move",
    "next",
    "part",
    "session",
    "devops",
    "automation",
    "automation",
    "crucial",
    "need",
    "devops",
    "practices",
    "automating",
    "everything",
    "fundamental",
    "principle",
    "devops",
    "discussed",
    "initially",
    "session",
    "automation",
    "kickstarts",
    "code",
    "generation",
    "developers",
    "machine",
    "code",
    "pushed",
    "code",
    "monitor",
    "application",
    "system",
    "production",
    "automating",
    "infrastructure",
    "setup",
    "configurations",
    "software",
    "deployment",
    "key",
    "highlight",
    "devops",
    "practice",
    "devops",
    "practice",
    "dependent",
    "automation",
    "make",
    "deliveries",
    "hours",
    "make",
    "frequent",
    "deliveries",
    "across",
    "platforms",
    "automation",
    "devops",
    "boosts",
    "speed",
    "consistency",
    "higher",
    "accuracy",
    "reliability",
    "increases",
    "number",
    "deliveries",
    "automation",
    "devops",
    "encapsulates",
    "everything",
    "right",
    "building",
    "deploying",
    "monitoring",
    "large",
    "devops",
    "team",
    "meet",
    "extensive",
    "massive",
    "infrastructure",
    "tools",
    "classified",
    "six",
    "categories",
    "infrastructure",
    "automation",
    "configuration",
    "management",
    "deployment",
    "automation",
    "performance",
    "management",
    "log",
    "management",
    "monitoring",
    "infrastructure",
    "automation",
    "great",
    "example",
    "amazon",
    "web",
    "services",
    "cloud",
    "service",
    "really",
    "need",
    "physically",
    "present",
    "data",
    "center",
    "easy",
    "scale",
    "demand",
    "upfront",
    "hardware",
    "costs",
    "also",
    "configured",
    "provide",
    "servers",
    "based",
    "traffic",
    "automatically",
    "second",
    "one",
    "chef",
    "great",
    "example",
    "chef",
    "handy",
    "devops",
    "tool",
    "achieving",
    "speed",
    "scale",
    "consistency",
    "used",
    "complex",
    "tasks",
    "perform",
    "configuration",
    "management",
    "help",
    "tool",
    "devops",
    "team",
    "avoid",
    "making",
    "changes",
    "across",
    "10",
    "000",
    "servers",
    "rather",
    "need",
    "make",
    "changes",
    "one",
    "place",
    "automatically",
    "reflected",
    "servers",
    "deployment",
    "automation",
    "jenkins",
    "great",
    "example",
    "already",
    "discussed",
    "helps",
    "facilitate",
    "continuous",
    "integration",
    "testing",
    "integrates",
    "project",
    "changes",
    "efficiently",
    "quickly",
    "finding",
    "issues",
    "soon",
    "bills",
    "deployed",
    "fourth",
    "one",
    "performance",
    "management",
    "application",
    "dynamic",
    "great",
    "example",
    "offers",
    "performance",
    "monitoring",
    "data",
    "collected",
    "tool",
    "help",
    "developers",
    "debug",
    "whenever",
    "issue",
    "occurs",
    "fifth",
    "one",
    "log",
    "management",
    "splunk",
    "great",
    "example",
    "devops",
    "tool",
    "solves",
    "issues",
    "storing",
    "aggregating",
    "analyzing",
    "logs",
    "one",
    "place",
    "last",
    "one",
    "monitoring",
    "ios",
    "great",
    "example",
    "notifies",
    "people",
    "infrastructure",
    "related",
    "services",
    "go",
    "tool",
    "purpose",
    "helps",
    "devops",
    "team",
    "find",
    "correct",
    "problems",
    "immediately",
    "music",
    "let",
    "start",
    "version",
    "control",
    "understand",
    "version",
    "control",
    "system",
    "need",
    "understand",
    "first",
    "need",
    "version",
    "control",
    "system",
    "see",
    "exactly",
    "need",
    "version",
    "control",
    "system",
    "let",
    "take",
    "scenario",
    "three",
    "developers",
    "working",
    "remotely",
    "web",
    "application",
    "mobile",
    "application",
    "simplicity",
    "sake",
    "let",
    "assume",
    "streaming",
    "application",
    "one",
    "working",
    "streaming",
    "page",
    "let",
    "call",
    "developer",
    "one",
    "developer",
    "2",
    "working",
    "user",
    "information",
    "page",
    "developer",
    "3",
    "creating",
    "payment",
    "portal",
    "three",
    "done",
    "respective",
    "pages",
    "10",
    "11",
    "12",
    "respectively",
    "thing",
    "three",
    "developers",
    "working",
    "isolation",
    "may",
    "changes",
    "may",
    "changes",
    "somebody",
    "else",
    "page",
    "kind",
    "adding",
    "new",
    "files",
    "modifying",
    "older",
    "files",
    "changing",
    "source",
    "code",
    "something",
    "like",
    "throughout",
    "course",
    "project",
    "exactly",
    "going",
    "collaborate",
    "considering",
    "working",
    "remotely",
    "solution",
    "version",
    "control",
    "system",
    "system",
    "tell",
    "happens",
    "10",
    "developer",
    "1",
    "uploads",
    "files",
    "regarding",
    "streaming",
    "page",
    "version",
    "control",
    "system",
    "modification",
    "recorded",
    "updated",
    "one",
    "central",
    "directory",
    "folder",
    "every",
    "time",
    "modifying",
    "older",
    "file",
    "adding",
    "new",
    "file",
    "creates",
    "snapshot",
    "latest",
    "version",
    "latest",
    "update",
    "changes",
    "made",
    "files",
    "uploaded",
    "snapshot",
    "update",
    "10",
    "saved",
    "developer",
    "2",
    "adds",
    "user",
    "info",
    "page",
    "modification",
    "also",
    "saved",
    "snapshot",
    "two",
    "snapshots",
    "saved",
    "finally",
    "payment",
    "portal",
    "page",
    "added",
    "last",
    "modification",
    "done",
    "12",
    "recent",
    "snapshot",
    "saved",
    "along",
    "snapshots",
    "updates",
    "modifications",
    "done",
    "throughout",
    "course",
    "project",
    "every",
    "change",
    "project",
    "snapshot",
    "created",
    "entire",
    "project",
    "saved",
    "way",
    "snapshots",
    "actually",
    "known",
    "different",
    "versions",
    "basically",
    "state",
    "project",
    "particular",
    "time",
    "current",
    "time",
    "means",
    "contain",
    "kind",
    "files",
    "project",
    "storing",
    "one",
    "particular",
    "time",
    "kind",
    "changes",
    "made",
    "far",
    "previous",
    "version",
    "particular",
    "version",
    "exactly",
    "version",
    "control",
    "system",
    "works",
    "version",
    "control",
    "system",
    "basically",
    "system",
    "records",
    "changes",
    "file",
    "set",
    "files",
    "time",
    "record",
    "specific",
    "versions",
    "later",
    "versions",
    "recorded",
    "repository",
    "called",
    "time",
    "repositories",
    "course",
    "project",
    "version",
    "control",
    "systems",
    "essentially",
    "three",
    "types",
    "local",
    "version",
    "control",
    "system",
    "one",
    "simplest",
    "forms",
    "vcs",
    "database",
    "keeps",
    "changes",
    "files",
    "revision",
    "control",
    "files",
    "saved",
    "one",
    "user",
    "manage",
    "files",
    "actually",
    "really",
    "hard",
    "maintain",
    "changes",
    "file",
    "accidentally",
    "replace",
    "one",
    "file",
    "need",
    "also",
    "needs",
    "something",
    "known",
    "rcs",
    "revision",
    "control",
    "system",
    "keeps",
    "patch",
    "sets",
    "differences",
    "updates",
    "special",
    "format",
    "disk",
    "local",
    "version",
    "control",
    "systems",
    "maintains",
    "track",
    "files",
    "within",
    "local",
    "system",
    "user",
    "track",
    "specifically",
    "versions",
    "later",
    "basically",
    "works",
    "independent",
    "standalone",
    "system",
    "application",
    "applications",
    "like",
    "spreadsheets",
    "word",
    "processors",
    "control",
    "mechanism",
    "one",
    "type",
    "apart",
    "also",
    "centralized",
    "version",
    "control",
    "system",
    "basically",
    "uses",
    "central",
    "server",
    "store",
    "files",
    "enables",
    "team",
    "collaboration",
    "one",
    "local",
    "system",
    "multiple",
    "systems",
    "work",
    "single",
    "repository",
    "users",
    "directly",
    "access",
    "central",
    "server",
    "repository",
    "central",
    "server",
    "could",
    "local",
    "remote",
    "directly",
    "connected",
    "programmers",
    "workstation",
    "third",
    "kind",
    "vcs",
    "distributed",
    "version",
    "control",
    "system",
    "systems",
    "necessarily",
    "rely",
    "central",
    "server",
    "store",
    "versions",
    "project",
    "file",
    "distributed",
    "version",
    "control",
    "system",
    "every",
    "contributor",
    "local",
    "copy",
    "clone",
    "main",
    "repository",
    "everyone",
    "maintains",
    "local",
    "repository",
    "contains",
    "files",
    "metadata",
    "present",
    "main",
    "repository",
    "push",
    "come",
    "commit",
    "update",
    "main",
    "repository",
    "required",
    "going",
    "cover",
    "latter",
    "two",
    "version",
    "control",
    "systems",
    "session",
    "let",
    "try",
    "understand",
    "depth",
    "difference",
    "centralized",
    "version",
    "control",
    "system",
    "distributed",
    "version",
    "control",
    "system",
    "mentioned",
    "centralized",
    "version",
    "control",
    "system",
    "programmer",
    "working",
    "branch",
    "project",
    "absolute",
    "access",
    "central",
    "server",
    "centralized",
    "version",
    "control",
    "system",
    "uses",
    "central",
    "server",
    "store",
    "files",
    "everybody",
    "team",
    "directly",
    "access",
    "central",
    "server",
    "one",
    "single",
    "repository",
    "three",
    "workstations",
    "workstation",
    "one",
    "workstation",
    "2",
    "workstation",
    "3",
    "directly",
    "commit",
    "repository",
    "get",
    "updates",
    "repository",
    "central",
    "server",
    "repository",
    "indicates",
    "server",
    "could",
    "local",
    "remote",
    "directly",
    "connected",
    "programmer",
    "workstation",
    "every",
    "programmer",
    "extract",
    "update",
    "workstations",
    "data",
    "present",
    "report",
    "repository",
    "make",
    "changes",
    "updates",
    "commit",
    "repository",
    "every",
    "operation",
    "performed",
    "directly",
    "repository",
    "even",
    "though",
    "seems",
    "pretty",
    "convenient",
    "talking",
    "three",
    "people",
    "maintain",
    "single",
    "repository",
    "like",
    "major",
    "drawbacks",
    "one",
    "locally",
    "available",
    "meaning",
    "every",
    "change",
    "make",
    "connected",
    "network",
    "perform",
    "action",
    "also",
    "case",
    "central",
    "server",
    "getting",
    "crashed",
    "corrupted",
    "result",
    "losing",
    "entire",
    "data",
    "project",
    "also",
    "another",
    "small",
    "thing",
    "revertible",
    "one",
    "person",
    "accidentally",
    "makes",
    "unwanted",
    "updates",
    "instead",
    "local",
    "system",
    "making",
    "changes",
    "directly",
    "central",
    "server",
    "recovering",
    "part",
    "back",
    "time",
    "consuming",
    "process",
    "distributed",
    "version",
    "control",
    "systems",
    "come",
    "rescue",
    "systems",
    "necessarily",
    "rely",
    "central",
    "server",
    "store",
    "versions",
    "project",
    "file",
    "distributed",
    "version",
    "control",
    "system",
    "every",
    "contributor",
    "local",
    "copy",
    "local",
    "workstation",
    "clone",
    "main",
    "repository",
    "everybody",
    "maintains",
    "local",
    "repository",
    "contains",
    "files",
    "metadata",
    "present",
    "main",
    "repository",
    "understand",
    "better",
    "take",
    "look",
    "diagram",
    "see",
    "every",
    "programmer",
    "maintains",
    "local",
    "repository",
    "local",
    "copy",
    "actually",
    "copy",
    "clone",
    "central",
    "repository",
    "local",
    "hard",
    "drive",
    "commit",
    "update",
    "local",
    "repository",
    "without",
    "interference",
    "one",
    "another",
    "update",
    "local",
    "repositories",
    "new",
    "data",
    "central",
    "server",
    "operation",
    "called",
    "pull",
    "done",
    "bit",
    "code",
    "affect",
    "changes",
    "main",
    "repository",
    "operation",
    "called",
    "push",
    "local",
    "repository",
    "system",
    "act",
    "cloning",
    "entire",
    "repository",
    "workstation",
    "making",
    "changes",
    "local",
    "repository",
    "gives",
    "couple",
    "advantages",
    "centralized",
    "version",
    "control",
    "system",
    "first",
    "operations",
    "except",
    "push",
    "pull",
    "fast",
    "tool",
    "needs",
    "access",
    "hard",
    "drive",
    "remote",
    "server",
    "hence",
    "always",
    "need",
    "connected",
    "via",
    "network",
    "connection",
    "always",
    "need",
    "internet",
    "connection",
    "committing",
    "new",
    "change",
    "sets",
    "done",
    "locally",
    "without",
    "manipulating",
    "data",
    "main",
    "repository",
    "group",
    "change",
    "sets",
    "ready",
    "push",
    "complete",
    "set",
    "code",
    "local",
    "system",
    "push",
    "files",
    "main",
    "repository",
    "third",
    "since",
    "every",
    "contributor",
    "full",
    "copy",
    "project",
    "repository",
    "share",
    "changes",
    "one",
    "another",
    "wanting",
    "get",
    "feedback",
    "affecting",
    "changes",
    "main",
    "repository",
    "enhances",
    "essence",
    "collaboration",
    "amongst",
    "development",
    "team",
    "finally",
    "server",
    "gets",
    "crashed",
    "point",
    "time",
    "loss",
    "data",
    "easily",
    "recovered",
    "one",
    "contributors",
    "local",
    "repository",
    "distributed",
    "version",
    "control",
    "system",
    "picking",
    "popularity",
    "past",
    "decade",
    "version",
    "controller",
    "important",
    "first",
    "helps",
    "collaboration",
    "allows",
    "remote",
    "development",
    "shared",
    "workspace",
    "updates",
    "versions",
    "code",
    "preserved",
    "hence",
    "helps",
    "manage",
    "versions",
    "code",
    "easy",
    "rollback",
    "current",
    "version",
    "suppose",
    "part",
    "project",
    "headed",
    "wrong",
    "direction",
    "easily",
    "roll",
    "back",
    "current",
    "version",
    "last",
    "version",
    "stable",
    "reverse",
    "faulty",
    "updates",
    "save",
    "time",
    "hence",
    "reduces",
    "downtime",
    "project",
    "development",
    "finally",
    "improves",
    "visibility",
    "analyze",
    "compare",
    "different",
    "versions",
    "gives",
    "like",
    "50",
    "foot",
    "top",
    "view",
    "entire",
    "project",
    "accelerates",
    "product",
    "delivery",
    "bare",
    "sense",
    "version",
    "control",
    "need",
    "version",
    "control",
    "let",
    "understand",
    "one",
    "popular",
    "version",
    "control",
    "systems",
    "exist",
    "today",
    "git",
    "git",
    "distributed",
    "version",
    "control",
    "tool",
    "supports",
    "distributed",
    "workflows",
    "providing",
    "data",
    "assurance",
    "developing",
    "quality",
    "software",
    "basically",
    "lets",
    "team",
    "developers",
    "work",
    "together",
    "project",
    "remotely",
    "anywhere",
    "across",
    "world",
    "team",
    "members",
    "work",
    "efficiently",
    "files",
    "easily",
    "merge",
    "changes",
    "one",
    "source",
    "without",
    "fear",
    "losing",
    "deleting",
    "anything",
    "importance",
    "due",
    "easy",
    "rollback",
    "feature",
    "primarily",
    "used",
    "manage",
    "project",
    "comprising",
    "set",
    "code",
    "text",
    "files",
    "may",
    "want",
    "change",
    "time",
    "time",
    "git",
    "integral",
    "part",
    "devops",
    "devops",
    "might",
    "idea",
    "practice",
    "bringing",
    "agility",
    "process",
    "development",
    "operations",
    "couple",
    "years",
    "ago",
    "entirely",
    "revolutionary",
    "ideology",
    "swept",
    "organizations",
    "worldwide",
    "boosting",
    "project",
    "life",
    "cycles",
    "turn",
    "increasing",
    "profits",
    "devops",
    "promoted",
    "communication",
    "development",
    "engineers",
    "operations",
    "participating",
    "together",
    "entire",
    "life",
    "cycle",
    "design",
    "development",
    "process",
    "production",
    "support",
    "entire",
    "life",
    "cycle",
    "devops",
    "starting",
    "planning",
    "projects",
    "deployment",
    "monitoring",
    "git",
    "plays",
    "vital",
    "role",
    "comes",
    "managing",
    "code",
    "collaborators",
    "contribute",
    "shared",
    "repository",
    "code",
    "extracted",
    "performing",
    "continuous",
    "integration",
    "create",
    "build",
    "test",
    "test",
    "server",
    "eventually",
    "deploy",
    "production",
    "tools",
    "like",
    "git",
    "enable",
    "communication",
    "development",
    "operation",
    "steam",
    "developing",
    "large",
    "project",
    "huge",
    "number",
    "collaborators",
    "extremely",
    "important",
    "communication",
    "collaborators",
    "developers",
    "making",
    "changes",
    "project",
    "project",
    "comment",
    "messages",
    "git",
    "play",
    "important",
    "role",
    "particular",
    "collaboration",
    "communication",
    "amongst",
    "team",
    "bits",
    "pieces",
    "deploy",
    "update",
    "lies",
    "version",
    "control",
    "system",
    "git",
    "succeed",
    "devops",
    "need",
    "communication",
    "version",
    "control",
    "hence",
    "git",
    "plays",
    "extremely",
    "vital",
    "role",
    "succeeding",
    "ant",
    "devops",
    "due",
    "reason",
    "git",
    "earned",
    "way",
    "popularity",
    "compared",
    "version",
    "control",
    "tools",
    "available",
    "market",
    "apache",
    "subversion",
    "concurrent",
    "version",
    "systems",
    "mercurial",
    "compare",
    "interest",
    "git",
    "buy",
    "time",
    "version",
    "control",
    "systems",
    "shall",
    "realize",
    "larger",
    "companies",
    "products",
    "generally",
    "developed",
    "developers",
    "using",
    "git",
    "around",
    "globe",
    "famous",
    "names",
    "facebook",
    "yahoo",
    "zynga",
    "quora",
    "twitter",
    "ebay",
    "salesforce",
    "microsoft",
    "many",
    "many",
    "lately",
    "microsoft",
    "new",
    "development",
    "work",
    "git",
    "features",
    "microsoft",
    "many",
    "open",
    "source",
    "projects",
    "github",
    "managed",
    "git",
    "one",
    "projects",
    "light",
    "gbm",
    "fast",
    "distributed",
    "high",
    "performance",
    "gradient",
    "boosting",
    "framework",
    "based",
    "decision",
    "tree",
    "algorithms",
    "used",
    "ranking",
    "classification",
    "many",
    "machine",
    "learning",
    "tasks",
    "git",
    "plays",
    "important",
    "role",
    "managing",
    "distributed",
    "version",
    "light",
    "gbm",
    "providing",
    "speed",
    "accuracy",
    "basically",
    "enable",
    "version",
    "control",
    "git",
    "go",
    "solution",
    "fast",
    "suitable",
    "handling",
    "massive",
    "code",
    "bases",
    "scattered",
    "across",
    "multiple",
    "developers",
    "makes",
    "popular",
    "tool",
    "used",
    "today",
    "know",
    "git",
    "terminology",
    "using",
    "lot",
    "talking",
    "git",
    "github",
    "repository",
    "repository",
    "repo",
    "commonly",
    "known",
    "directory",
    "storage",
    "space",
    "projects",
    "basically",
    "live",
    "local",
    "folder",
    "computer",
    "stored",
    "space",
    "another",
    "online",
    "host",
    "github",
    "particular",
    "space",
    "particular",
    "directory",
    "keep",
    "code",
    "files",
    "text",
    "files",
    "images",
    "name",
    "inside",
    "repository",
    "course",
    "shall",
    "also",
    "talking",
    "something",
    "known",
    "github",
    "nothing",
    "central",
    "repository",
    "kind",
    "spoke",
    "discussed",
    "centralized",
    "versus",
    "distributed",
    "version",
    "control",
    "systems",
    "central",
    "repository",
    "code",
    "live",
    "local",
    "repository",
    "make",
    "changes",
    "central",
    "repository",
    "push",
    "changes",
    "yeah",
    "central",
    "repository",
    "something",
    "developers",
    "involved",
    "particular",
    "project",
    "certain",
    "project",
    "access",
    "right",
    "moving",
    "let",
    "discuss",
    "git",
    "features",
    "make",
    "popular",
    "amongst",
    "organizations",
    "well",
    "individuals",
    "first",
    "economical",
    "free",
    "open",
    "source",
    "git",
    "released",
    "gps",
    "general",
    "public",
    "licenses",
    "open",
    "source",
    "license",
    "need",
    "purchase",
    "git",
    "absolutely",
    "free",
    "since",
    "open",
    "source",
    "modify",
    "source",
    "code",
    "per",
    "requirement",
    "second",
    "speed",
    "since",
    "connect",
    "network",
    "performing",
    "operations",
    "completes",
    "tasks",
    "really",
    "fast",
    "performance",
    "tests",
    "done",
    "mozilla",
    "showed",
    "order",
    "magnitude",
    "faster",
    "version",
    "control",
    "systems",
    "fetching",
    "version",
    "history",
    "locally",
    "sold",
    "repository",
    "100",
    "times",
    "faster",
    "fetching",
    "remote",
    "server",
    "core",
    "part",
    "git",
    "written",
    "c",
    "avoids",
    "runtime",
    "overheads",
    "associated",
    "languages",
    "makes",
    "extremely",
    "fast",
    "compared",
    "version",
    "control",
    "systems",
    "next",
    "git",
    "supports",
    "development",
    "supports",
    "rapid",
    "branching",
    "merging",
    "includes",
    "specific",
    "tools",
    "visualization",
    "navigation",
    "development",
    "history",
    "git",
    "change",
    "merged",
    "often",
    "written",
    "passed",
    "various",
    "reviewers",
    "hence",
    "branches",
    "git",
    "lightweight",
    "reference",
    "single",
    "comet",
    "parental",
    "comets",
    "full",
    "branch",
    "structure",
    "constructed",
    "next",
    "let",
    "talk",
    "robustness",
    "nearly",
    "every",
    "single",
    "task",
    "git",
    "undoable",
    "git",
    "gives",
    "developer",
    "local",
    "copy",
    "entire",
    "development",
    "history",
    "changes",
    "copied",
    "one",
    "repository",
    "another",
    "changes",
    "imported",
    "additional",
    "development",
    "branches",
    "merged",
    "deleted",
    "recovered",
    "way",
    "locally",
    "developed",
    "branch",
    "next",
    "snapshots",
    "recorded",
    "changes",
    "made",
    "file",
    "rather",
    "file",
    "followed",
    "integrity",
    "means",
    "changes",
    "made",
    "without",
    "git",
    "recording",
    "since",
    "every",
    "contributor",
    "local",
    "repository",
    "events",
    "system",
    "crash",
    "loss",
    "data",
    "recovered",
    "local",
    "repositories",
    "always",
    "backup",
    "files",
    "none",
    "changes",
    "made",
    "central",
    "repository",
    "go",
    "unlocked",
    "git",
    "git",
    "uses",
    "sha1",
    "secure",
    "hash",
    "function",
    "name",
    "identify",
    "objects",
    "within",
    "repository",
    "every",
    "file",
    "every",
    "comment",
    "check",
    "summed",
    "retrieved",
    "checksum",
    "time",
    "checkout",
    "git",
    "history",
    "stored",
    "way",
    "id",
    "particular",
    "version",
    "commit",
    "gets",
    "terms",
    "depends",
    "upon",
    "complete",
    "development",
    "history",
    "leading",
    "comet",
    "published",
    "possible",
    "change",
    "old",
    "versions",
    "without",
    "recorded",
    "distributed",
    "system",
    "means",
    "every",
    "user",
    "copy",
    "repository",
    "data",
    "stored",
    "locally",
    "git",
    "gives",
    "developer",
    "local",
    "copy",
    "entire",
    "development",
    "history",
    "changes",
    "copied",
    "one",
    "repository",
    "another",
    "changes",
    "imported",
    "additional",
    "development",
    "branches",
    "merged",
    "way",
    "locally",
    "developed",
    "branch",
    "finally",
    "easy",
    "branching",
    "branch",
    "management",
    "git",
    "simple",
    "takes",
    "seconds",
    "create",
    "delete",
    "merge",
    "branches",
    "feature",
    "branches",
    "provide",
    "isolated",
    "environment",
    "change",
    "code",
    "base",
    "developer",
    "wants",
    "start",
    "working",
    "something",
    "matter",
    "big",
    "small",
    "create",
    "fresh",
    "new",
    "branch",
    "interfering",
    "main",
    "branch",
    "ensures",
    "master",
    "branch",
    "main",
    "branch",
    "always",
    "contains",
    "production",
    "quality",
    "code",
    "little",
    "experimentation",
    "want",
    "little",
    "things",
    "want",
    "try",
    "always",
    "separate",
    "feature",
    "branch",
    "instead",
    "changes",
    "made",
    "master",
    "branch",
    "ultimately",
    "master",
    "branch",
    "contain",
    "publishable",
    "product",
    "know",
    "basic",
    "features",
    "git",
    "let",
    "try",
    "understand",
    "basic",
    "workflow",
    "git",
    "git",
    "work",
    "basic",
    "overview",
    "git",
    "works",
    "goes",
    "like",
    "basically",
    "create",
    "repository",
    "project",
    "git",
    "hosting",
    "tool",
    "like",
    "git",
    "orbit",
    "bucket",
    "copy",
    "clone",
    "repository",
    "local",
    "machine",
    "working",
    "directory",
    "add",
    "file",
    "local",
    "repository",
    "commit",
    "changes",
    "basically",
    "means",
    "save",
    "changes",
    "push",
    "changes",
    "master",
    "branch",
    "make",
    "changes",
    "file",
    "commit",
    "pull",
    "changes",
    "local",
    "machine",
    "create",
    "branch",
    "version",
    "make",
    "change",
    "commit",
    "change",
    "process",
    "open",
    "pull",
    "request",
    "merge",
    "branch",
    "master",
    "branch",
    "little",
    "complicated",
    "listening",
    "like",
    "get",
    "demonstration",
    "think",
    "things",
    "way",
    "clear",
    "still",
    "take",
    "good",
    "look",
    "diagram",
    "get",
    "worry",
    "explaining",
    "operations",
    "one",
    "one",
    "get",
    "demonstration",
    "part",
    "git",
    "tutorial",
    "moving",
    "let",
    "get",
    "good",
    "part",
    "section",
    "starting",
    "installation",
    "setup",
    "git",
    "two",
    "ways",
    "goes",
    "first",
    "windows",
    "users",
    "need",
    "install",
    "git",
    "bash",
    "windows",
    "linux",
    "users",
    "start",
    "updating",
    "package",
    "index",
    "install",
    "git",
    "using",
    "terminal",
    "first",
    "learners",
    "using",
    "windows",
    "log",
    "get",
    "downloads",
    "click",
    "downloads",
    "windows",
    "button",
    "run",
    "executable",
    "file",
    "follow",
    "till",
    "finally",
    "install",
    "git",
    "bash",
    "going",
    "install",
    "completely",
    "already",
    "git",
    "bash",
    "downloaded",
    "still",
    "going",
    "open",
    "page",
    "show",
    "guys",
    "right",
    "latest",
    "source",
    "release",
    "get",
    "8th",
    "feb",
    "click",
    "button",
    "moment",
    "click",
    "button",
    "going",
    "start",
    "downloading",
    "executable",
    "file",
    "open",
    "run",
    "system",
    "right",
    "next",
    "people",
    "using",
    "linux",
    "example",
    "considering",
    "using",
    "ubuntu",
    "using",
    "centos",
    "lot",
    "commands",
    "change",
    "instead",
    "apt",
    "install",
    "using",
    "yum",
    "install",
    "sentos",
    "going",
    "open",
    "terminal",
    "virtual",
    "machine",
    "running",
    "ubuntu",
    "machine",
    "using",
    "oracle",
    "virtualbox",
    "gon",
    "na",
    "start",
    "running",
    "update",
    "right",
    "going",
    "take",
    "kindly",
    "patient",
    "ubuntu",
    "running",
    "virtual",
    "machine",
    "install",
    "git",
    "ubuntu",
    "machine",
    "start",
    "updating",
    "take",
    "time",
    "going",
    "use",
    "sudo",
    "apt",
    "update",
    "using",
    "centos",
    "using",
    "yum",
    "instead",
    "apt",
    "let",
    "scale",
    "going",
    "install",
    "git",
    "look",
    "git",
    "version",
    "yeah",
    "right",
    "git",
    "installed",
    "let",
    "go",
    "ahead",
    "look",
    "operations",
    "commands",
    "going",
    "take",
    "look",
    "today",
    "repository",
    "set",
    "include",
    "commands",
    "init",
    "clone",
    "config",
    "alias",
    "save",
    "changes",
    "operations",
    "add",
    "commit",
    "diff",
    "stash",
    "commands",
    "going",
    "go",
    "look",
    "collectively",
    "mostly",
    "going",
    "look",
    "inspect",
    "operations",
    "inspect",
    "repository",
    "operations",
    "git",
    "status",
    "command",
    "something",
    "also",
    "going",
    "look",
    "throughout",
    "demonstration",
    "right",
    "beginning",
    "apart",
    "kit",
    "log",
    "git",
    "tag",
    "get",
    "blame",
    "commands",
    "merge",
    "rebase",
    "command",
    "let",
    "move",
    "first",
    "set",
    "get",
    "operations",
    "first",
    "git",
    "init",
    "command",
    "basically",
    "creates",
    "new",
    "empty",
    "git",
    "repository",
    "used",
    "convert",
    "existing",
    "inversion",
    "project",
    "kit",
    "repository",
    "initiate",
    "absolute",
    "fresh",
    "git",
    "repository",
    "git",
    "commands",
    "available",
    "outside",
    "initialized",
    "repository",
    "usually",
    "first",
    "command",
    "run",
    "new",
    "project",
    "using",
    "git",
    "bash",
    "run",
    "git",
    "existing",
    "git",
    "repository",
    "already",
    "existing",
    "git",
    "repository",
    "particular",
    "directory",
    "dot",
    "get",
    "directory",
    "yeah",
    "git",
    "init",
    "creates",
    "empty",
    "git",
    "repository",
    "existing",
    "one",
    "like",
    "right",
    "basically",
    "creates",
    "dot",
    "get",
    "directory",
    "subdirectories",
    "template",
    "files",
    "run",
    "git",
    "init",
    "command",
    "existing",
    "repository",
    "overwrite",
    "things",
    "already",
    "rather",
    "pick",
    "newly",
    "added",
    "templates",
    "repository",
    "initialized",
    "go",
    "ahead",
    "create",
    "files",
    "directory",
    "repository",
    "whatever",
    "call",
    "initialization",
    "existing",
    "repository",
    "git",
    "act",
    "upon",
    "make",
    "updates",
    "add",
    "files",
    "things",
    "like",
    "use",
    "git",
    "clone",
    "utility",
    "yeah",
    "git",
    "clone",
    "utility",
    "use",
    "target",
    "existing",
    "repository",
    "create",
    "clone",
    "copy",
    "particular",
    "repository",
    "local",
    "machine",
    "one",
    "features",
    "provided",
    "distributed",
    "version",
    "control",
    "system",
    "discussed",
    "blank",
    "file",
    "called",
    "edureka",
    "rep",
    "readme",
    "text",
    "file",
    "let",
    "go",
    "ahead",
    "copy",
    "get",
    "clone",
    "paste",
    "https",
    "url",
    "see",
    "cloning",
    "eureka",
    "rep",
    "change",
    "directory",
    "edit",
    "wrap",
    "see",
    "readme",
    "file",
    "right",
    "yeah",
    "basically",
    "going",
    "work",
    "particular",
    "repository",
    "today",
    "eureka",
    "rep",
    "yeah",
    "created",
    "clone",
    "moving",
    "git",
    "config",
    "command",
    "basically",
    "convenience",
    "function",
    "used",
    "set",
    "git",
    "configuration",
    "values",
    "global",
    "local",
    "project",
    "level",
    "command",
    "basically",
    "used",
    "modify",
    "configuration",
    "text",
    "file",
    "typed",
    "get",
    "config",
    "type",
    "given",
    "email",
    "id",
    "global",
    "user",
    "email",
    "id",
    "ask",
    "global",
    "user",
    "email",
    "id",
    "return",
    "id",
    "back",
    "yeah",
    "basically",
    "configuration",
    "levels",
    "like",
    "username",
    "user",
    "id",
    "correspond",
    "dot",
    "get",
    "config",
    "text",
    "files",
    "executing",
    "basically",
    "help",
    "modify",
    "configuration",
    "text",
    "file",
    "git",
    "uses",
    "series",
    "configuration",
    "files",
    "determine",
    "behavior",
    "may",
    "want",
    "yeah",
    "first",
    "place",
    "git",
    "looks",
    "values",
    "configuration",
    "file",
    "contains",
    "settings",
    "applied",
    "every",
    "user",
    "system",
    "basically",
    "pass",
    "option",
    "git",
    "config",
    "read",
    "write",
    "file",
    "specifically",
    "next",
    "place",
    "git",
    "looks",
    "config",
    "slash",
    "git",
    "config",
    "file",
    "specific",
    "user",
    "make",
    "git",
    "read",
    "write",
    "file",
    "passing",
    "global",
    "option",
    "final",
    "command",
    "setup",
    "operations",
    "going",
    "look",
    "alias",
    "alias",
    "name",
    "suggests",
    "basically",
    "used",
    "create",
    "shorter",
    "commands",
    "map",
    "longer",
    "commands",
    "enable",
    "efficient",
    "workflows",
    "obviously",
    "use",
    "lesser",
    "keystrokes",
    "execute",
    "command",
    "lengthy",
    "commands",
    "obviously",
    "kill",
    "lot",
    "time",
    "aliases",
    "use",
    "shorten",
    "commands",
    "also",
    "something",
    "create",
    "via",
    "git",
    "config",
    "command",
    "really",
    "direct",
    "way",
    "direct",
    "command",
    "creating",
    "aliases",
    "yeah",
    "something",
    "wanted",
    "add",
    "along",
    "git",
    "config",
    "command",
    "like",
    "common",
    "alias",
    "created",
    "co",
    "checkout",
    "anything",
    "else",
    "ek",
    "checkout",
    "yeah",
    "something",
    "using",
    "git",
    "config",
    "command",
    "creating",
    "aliases",
    "moving",
    "let",
    "look",
    "operations",
    "use",
    "add",
    "changes",
    "save",
    "changes",
    "git",
    "repository",
    "first",
    "two",
    "commands",
    "going",
    "look",
    "git",
    "add",
    "git",
    "commit",
    "combination",
    "basically",
    "used",
    "create",
    "snapshots",
    "talking",
    "initially",
    "session",
    "right",
    "basically",
    "first",
    "use",
    "git",
    "add",
    "command",
    "add",
    "change",
    "current",
    "directory",
    "working",
    "directory",
    "add",
    "staging",
    "area",
    "tells",
    "git",
    "want",
    "include",
    "particular",
    "set",
    "updates",
    "changes",
    "particular",
    "file",
    "next",
    "comment",
    "move",
    "git",
    "commit",
    "making",
    "changes",
    "working",
    "tree",
    "use",
    "git",
    "commit",
    "command",
    "captures",
    "snapshot",
    "project",
    "current",
    "state",
    "basically",
    "use",
    "add",
    "update",
    "index",
    "using",
    "current",
    "content",
    "found",
    "working",
    "tree",
    "basically",
    "prepare",
    "content",
    "staging",
    "area",
    "next",
    "commit",
    "run",
    "commit",
    "command",
    "take",
    "snapshot",
    "project",
    "current",
    "status",
    "remember",
    "important",
    "time",
    "must",
    "use",
    "add",
    "command",
    "add",
    "new",
    "modified",
    "files",
    "index",
    "ca",
    "directly",
    "commit",
    "anything",
    "without",
    "adding",
    "stage",
    "area",
    "first",
    "quickly",
    "went",
    "ahead",
    "added",
    "three",
    "files",
    "repository",
    "eureka",
    "rep",
    "go",
    "repository",
    "see",
    "three",
    "files",
    "eureka",
    "file",
    "one",
    "file",
    "two",
    "file",
    "three",
    "let",
    "see",
    "files",
    "index",
    "using",
    "command",
    "get",
    "status",
    "git",
    "status",
    "basically",
    "displays",
    "state",
    "working",
    "directory",
    "staging",
    "area",
    "list",
    "modified",
    "files",
    "ready",
    "added",
    "local",
    "repository",
    "lets",
    "see",
    "changes",
    "staged",
    "files",
    "tracked",
    "get",
    "typed",
    "get",
    "status",
    "see",
    "main",
    "branch",
    "three",
    "untracked",
    "files",
    "three",
    "files",
    "added",
    "file",
    "one",
    "two",
    "three",
    "added",
    "index",
    "yet",
    "means",
    "commit",
    "changes",
    "unless",
    "added",
    "explicitly",
    "index",
    "going",
    "add",
    "three",
    "files",
    "command",
    "update",
    "index",
    "using",
    "current",
    "content",
    "found",
    "working",
    "tree",
    "see",
    "front",
    "prepare",
    "content",
    "staging",
    "area",
    "next",
    "comment",
    "either",
    "get",
    "add",
    "put",
    "directory",
    "name",
    "use",
    "git",
    "add",
    "extension",
    "means",
    "add",
    "files",
    "index",
    "directory",
    "updated",
    "index",
    "yet",
    "yeah",
    "done",
    "let",
    "go",
    "ahead",
    "use",
    "git",
    "status",
    "see",
    "file",
    "names",
    "written",
    "green",
    "see",
    "changes",
    "committed",
    "written",
    "means",
    "changes",
    "ready",
    "committed",
    "added",
    "index",
    "files",
    "added",
    "index",
    "ready",
    "commit",
    "mentioned",
    "going",
    "commit",
    "committing",
    "refers",
    "recording",
    "snapshots",
    "repository",
    "given",
    "time",
    "committed",
    "snapshots",
    "never",
    "change",
    "unless",
    "done",
    "explicitly",
    "going",
    "clear",
    "going",
    "come",
    "typing",
    "git",
    "comet",
    "adding",
    "tag",
    "message",
    "called",
    "committing",
    "three",
    "files",
    "let",
    "try",
    "see",
    "three",
    "files",
    "change",
    "three",
    "insertions",
    "see",
    "add",
    "eureka",
    "files",
    "one",
    "two",
    "three",
    "committed",
    "git",
    "comment",
    "command",
    "committed",
    "changes",
    "three",
    "files",
    "local",
    "repository",
    "want",
    "commit",
    "snapshot",
    "changes",
    "working",
    "directory",
    "always",
    "go",
    "commit",
    "hyphen",
    "let",
    "add",
    "couple",
    "files",
    "directory",
    "show",
    "difference",
    "files",
    "added",
    "index",
    "versus",
    "ones",
    "type",
    "ls",
    "see",
    "two",
    "files",
    "see",
    "two",
    "files",
    "going",
    "add",
    "edureka",
    "file",
    "4",
    "file",
    "5",
    "gon",
    "na",
    "get",
    "commit",
    "commenting",
    "files",
    "see",
    "one",
    "file",
    "changed",
    "one",
    "insertion",
    "happened",
    "happened",
    "edureka",
    "file",
    "5",
    "added",
    "index",
    "even",
    "use",
    "extension",
    "add",
    "edureka",
    "file",
    "5",
    "added",
    "index",
    "go",
    "ahead",
    "add",
    "make",
    "file",
    "5",
    "voila",
    "change",
    "occurred",
    "git",
    "repository",
    "typed",
    "git",
    "status",
    "files",
    "add",
    "commit",
    "branch",
    "ahead",
    "origin",
    "main",
    "branch",
    "three",
    "commits",
    "use",
    "git",
    "push",
    "publish",
    "local",
    "commits",
    "git",
    "push",
    "something",
    "cover",
    "later",
    "session",
    "understand",
    "affect",
    "changes",
    "made",
    "central",
    "repository",
    "always",
    "pull",
    "changes",
    "central",
    "repository",
    "local",
    "repository",
    "get",
    "updated",
    "version",
    "branch",
    "get",
    "work",
    "collaborators",
    "contributing",
    "central",
    "repository",
    "use",
    "pull",
    "command",
    "see",
    "nothing",
    "commit",
    "working",
    "slim",
    "commands",
    "like",
    "git",
    "status",
    "command",
    "could",
    "use",
    "similar",
    "purposes",
    "example",
    "git",
    "log",
    "command",
    "operates",
    "committed",
    "history",
    "basically",
    "display",
    "committed",
    "snapshots",
    "let",
    "list",
    "project",
    "history",
    "filtrate",
    "search",
    "specific",
    "changes",
    "typed",
    "git",
    "log",
    "going",
    "show",
    "comments",
    "happened",
    "since",
    "started",
    "git",
    "file",
    "okay",
    "see",
    "bottom",
    "original",
    "main",
    "initial",
    "commit",
    "right",
    "first",
    "comment",
    "committed",
    "three",
    "files",
    "committed",
    "fourth",
    "file",
    "finally",
    "committed",
    "file",
    "number",
    "five",
    "right",
    "comments",
    "including",
    "initial",
    "commit",
    "first",
    "one",
    "yeah",
    "along",
    "author",
    "date",
    "time",
    "remember",
    "told",
    "everything",
    "recorded",
    "using",
    "git",
    "meant",
    "always",
    "access",
    "made",
    "comments",
    "time",
    "comments",
    "made",
    "use",
    "version",
    "control",
    "system",
    "git",
    "point",
    "like",
    "think",
    "crucial",
    "mention",
    "uh",
    "one",
    "command",
    "git",
    "tag",
    "used",
    "basically",
    "capture",
    "tag",
    "history",
    "point",
    "history",
    "used",
    "marked",
    "version",
    "release",
    "right",
    "basically",
    "uh",
    "like",
    "branch",
    "change",
    "created",
    "history",
    "comets",
    "yeah",
    "one",
    "another",
    "one",
    "git",
    "blame",
    "get",
    "blame",
    "function",
    "displays",
    "author",
    "metadata",
    "attached",
    "specific",
    "committed",
    "line",
    "file",
    "used",
    "examine",
    "specific",
    "points",
    "files",
    "history",
    "get",
    "context",
    "last",
    "author",
    "modified",
    "line",
    "went",
    "back",
    "typed",
    "get",
    "blame",
    "music",
    "eureka",
    "file",
    "5",
    "dot",
    "txt",
    "going",
    "show",
    "person",
    "blame",
    "committed",
    "particular",
    "file",
    "made",
    "particular",
    "change",
    "right",
    "also",
    "paid",
    "attention",
    "give",
    "commit",
    "number",
    "see",
    "e9",
    "d63ef0",
    "comment",
    "number",
    "also",
    "e9",
    "d63ef0",
    "first",
    "characters",
    "particular",
    "comment",
    "number",
    "yeah",
    "know",
    "check",
    "status",
    "changes",
    "see",
    "made",
    "changes",
    "time",
    "understand",
    "fetch",
    "changes",
    "remote",
    "repository",
    "local",
    "repository",
    "push",
    "comments",
    "local",
    "repository",
    "remote",
    "repository",
    "going",
    "look",
    "two",
    "commands",
    "called",
    "pull",
    "push",
    "first",
    "git",
    "pull",
    "command",
    "fetches",
    "changes",
    "remote",
    "repository",
    "local",
    "repository",
    "basically",
    "merges",
    "upstream",
    "changes",
    "local",
    "repository",
    "common",
    "task",
    "gitbase",
    "collaborations",
    "first",
    "need",
    "set",
    "central",
    "repository",
    "origin",
    "using",
    "command",
    "git",
    "remote",
    "add",
    "origin",
    "going",
    "add",
    "link",
    "central",
    "repository",
    "says",
    "remote",
    "origin",
    "already",
    "exists",
    "origin",
    "set",
    "going",
    "pull",
    "main",
    "branch",
    "gon",
    "na",
    "type",
    "git",
    "pull",
    "origin",
    "main",
    "says",
    "already",
    "date",
    "certain",
    "number",
    "tutorials",
    "documents",
    "might",
    "following",
    "might",
    "even",
    "give",
    "command",
    "git",
    "pull",
    "origin",
    "master",
    "case",
    "working",
    "master",
    "branch",
    "know",
    "branch",
    "use",
    "command",
    "git",
    "branch",
    "yeah",
    "tell",
    "branch",
    "working",
    "yeah",
    "yeah",
    "working",
    "main",
    "branch",
    "already",
    "date",
    "branch",
    "since",
    "local",
    "repository",
    "already",
    "updated",
    "files",
    "main",
    "branch",
    "message",
    "branch",
    "also",
    "like",
    "use",
    "git",
    "pull",
    "origin",
    "whatever",
    "branch",
    "name",
    "using",
    "main",
    "mistake",
    "part",
    "maybe",
    "trying",
    "clear",
    "screen",
    "right",
    "even",
    "pull",
    "branch",
    "using",
    "get",
    "pull",
    "origin",
    "branch",
    "name",
    "local",
    "get",
    "repository",
    "see",
    "already",
    "date",
    "local",
    "git",
    "repository",
    "updated",
    "recent",
    "changes",
    "time",
    "make",
    "changes",
    "central",
    "repository",
    "using",
    "push",
    "command",
    "going",
    "use",
    "push",
    "command",
    "command",
    "transfers",
    "commits",
    "local",
    "repository",
    "remote",
    "repository",
    "basically",
    "opposite",
    "poll",
    "operations",
    "pooling",
    "import",
    "commits",
    "local",
    "repositories",
    "whereas",
    "pushing",
    "export",
    "commits",
    "remote",
    "repositories",
    "going",
    "ask",
    "username",
    "password",
    "lets",
    "push",
    "main",
    "branch",
    "put",
    "username",
    "password",
    "github",
    "account",
    "pushed",
    "changes",
    "local",
    "repository",
    "remote",
    "repository",
    "along",
    "necessary",
    "commits",
    "internal",
    "objects",
    "created",
    "local",
    "branch",
    "destination",
    "repository",
    "use",
    "git",
    "push",
    "publish",
    "local",
    "changes",
    "central",
    "depository",
    "accumulated",
    "several",
    "local",
    "comments",
    "ready",
    "share",
    "rest",
    "team",
    "push",
    "central",
    "repository",
    "using",
    "get",
    "push",
    "command",
    "files",
    "already",
    "committed",
    "previously",
    "comment",
    "section",
    "push",
    "ready",
    "use",
    "git",
    "push",
    "origin",
    "master",
    "reflect",
    "files",
    "master",
    "branch",
    "repository",
    "right",
    "let",
    "go",
    "ahead",
    "repository",
    "see",
    "changes",
    "made",
    "yes",
    "see",
    "files",
    "github",
    "repository",
    "break",
    "file",
    "one",
    "two",
    "three",
    "four",
    "five",
    "five",
    "files",
    "created",
    "local",
    "repository",
    "yeah",
    "five",
    "files",
    "readme",
    "file",
    "also",
    "readme",
    "file",
    "five",
    "files",
    "created",
    "point",
    "git",
    "tutorial",
    "hope",
    "understood",
    "basic",
    "commands",
    "git",
    "pulling",
    "pushing",
    "adding",
    "committing",
    "things",
    "like",
    "let",
    "take",
    "step",
    "understand",
    "three",
    "basic",
    "commands",
    "parallel",
    "development",
    "going",
    "talking",
    "branching",
    "merging",
    "rebasing",
    "first",
    "let",
    "talk",
    "merging",
    "merging",
    "way",
    "combine",
    "work",
    "different",
    "branches",
    "together",
    "basically",
    "allow",
    "branch",
    "develop",
    "new",
    "feature",
    "combine",
    "back",
    "see",
    "diagram",
    "shows",
    "two",
    "basically",
    "different",
    "branches",
    "new",
    "branch",
    "master",
    "merge",
    "work",
    "new",
    "branch",
    "master",
    "creates",
    "new",
    "comet",
    "contains",
    "work",
    "master",
    "new",
    "branch",
    "merge",
    "two",
    "branches",
    "merge",
    "command",
    "mentioned",
    "git",
    "allows",
    "easy",
    "branching",
    "means",
    "parallel",
    "branches",
    "master",
    "branch",
    "help",
    "carry",
    "individual",
    "work",
    "interrupting",
    "main",
    "product",
    "master",
    "branch",
    "main",
    "branch",
    "branches",
    "git",
    "nothing",
    "pointers",
    "specific",
    "comments",
    "yeah",
    "git",
    "generally",
    "prefers",
    "keep",
    "branches",
    "lightweight",
    "possible",
    "basically",
    "two",
    "kinds",
    "branches",
    "local",
    "remote",
    "tracking",
    "branches",
    "local",
    "branch",
    "path",
    "working",
    "tree",
    "hand",
    "remote",
    "tracking",
    "branches",
    "special",
    "purposes",
    "linking",
    "work",
    "local",
    "repository",
    "central",
    "repository",
    "automatically",
    "detecting",
    "remote",
    "branches",
    "get",
    "changes",
    "git",
    "pull",
    "check",
    "local",
    "branch",
    "using",
    "get",
    "branch",
    "know",
    "main",
    "branch",
    "one",
    "thing",
    "understand",
    "one",
    "thing",
    "like",
    "main",
    "mantra",
    "people",
    "use",
    "git",
    "branch",
    "early",
    "branch",
    "often",
    "yes",
    "create",
    "new",
    "branch",
    "going",
    "use",
    "command",
    "get",
    "branch",
    "branch",
    "name",
    "case",
    "going",
    "use",
    "branch",
    "name",
    "eureka",
    "images",
    "right",
    "see",
    "diagram",
    "shows",
    "workflow",
    "new",
    "branch",
    "created",
    "create",
    "new",
    "branch",
    "originates",
    "master",
    "branch",
    "since",
    "storage",
    "memory",
    "overhead",
    "making",
    "many",
    "branches",
    "usually",
    "easier",
    "logically",
    "divide",
    "work",
    "big",
    "chunky",
    "branches",
    "hence",
    "branch",
    "often",
    "part",
    "let",
    "see",
    "commit",
    "using",
    "branches",
    "branching",
    "includes",
    "work",
    "particular",
    "commit",
    "along",
    "parent",
    "comments",
    "right",
    "see",
    "new",
    "branch",
    "detached",
    "master",
    "main",
    "branch",
    "hence",
    "create",
    "different",
    "path",
    "going",
    "get",
    "check",
    "branch",
    "name",
    "case",
    "edureka",
    "images",
    "going",
    "get",
    "commit",
    "track",
    "files",
    "eureka",
    "images",
    "nothing",
    "added",
    "made",
    "branch",
    "merging",
    "way",
    "combine",
    "work",
    "different",
    "branches",
    "together",
    "basically",
    "branched",
    "something",
    "known",
    "edureka",
    "images",
    "go",
    "ahead",
    "add",
    "files",
    "develop",
    "new",
    "feature",
    "combine",
    "back",
    "main",
    "branch",
    "see",
    "two",
    "different",
    "branches",
    "new",
    "branch",
    "main",
    "branch",
    "merge",
    "work",
    "new",
    "branch",
    "main",
    "branch",
    "creates",
    "new",
    "comment",
    "contains",
    "work",
    "main",
    "branch",
    "new",
    "branch",
    "merge",
    "branch",
    "see",
    "already",
    "date",
    "important",
    "know",
    "branch",
    "name",
    "branch",
    "want",
    "merge",
    "branch",
    "currently",
    "checking",
    "make",
    "sure",
    "checked",
    "destination",
    "branch",
    "let",
    "merge",
    "work",
    "branch",
    "eureka",
    "images",
    "main",
    "branch",
    "first",
    "check",
    "main",
    "branch",
    "merge",
    "eureka",
    "images",
    "kit",
    "merge",
    "edureka",
    "images",
    "see",
    "data",
    "branch",
    "eureka",
    "images",
    "merged",
    "main",
    "branch",
    "notice",
    "merging",
    "gate",
    "creates",
    "special",
    "comet",
    "two",
    "unique",
    "patterns",
    "one",
    "way",
    "merging",
    "main",
    "branch",
    "also",
    "another",
    "way",
    "combining",
    "work",
    "two",
    "branches",
    "called",
    "rebasing",
    "rebasing",
    "takes",
    "set",
    "comets",
    "copies",
    "stores",
    "outside",
    "repository",
    "advantage",
    "rebasing",
    "also",
    "used",
    "make",
    "linear",
    "sequence",
    "comets",
    "comet",
    "log",
    "history",
    "repository",
    "stays",
    "clean",
    "every",
    "basing",
    "done",
    "work",
    "new",
    "branch",
    "placed",
    "right",
    "master",
    "nice",
    "linear",
    "sequence",
    "comments",
    "command",
    "copy",
    "moves",
    "work",
    "current",
    "branch",
    "master",
    "main",
    "branch",
    "look",
    "like",
    "developed",
    "sequentially",
    "instead",
    "developed",
    "parallely",
    "another",
    "branch",
    "called",
    "git",
    "branch",
    "eureka",
    "images",
    "maybe",
    "get",
    "checkout",
    "okay",
    "get",
    "commit",
    "could",
    "get",
    "rebase",
    "min",
    "current",
    "branch",
    "date",
    "command",
    "basically",
    "moves",
    "work",
    "current",
    "branch",
    "master",
    "branch",
    "basically",
    "look",
    "like",
    "developed",
    "sequentially",
    "instead",
    "developed",
    "parallelly",
    "apart",
    "certain",
    "operations",
    "ought",
    "know",
    "firstly",
    "archiving",
    "repository",
    "use",
    "command",
    "stores",
    "files",
    "data",
    "zip",
    "file",
    "rather",
    "dot",
    "get",
    "directory",
    "creates",
    "single",
    "snapshot",
    "omitting",
    "version",
    "control",
    "completely",
    "though",
    "comes",
    "handy",
    "want",
    "send",
    "files",
    "client",
    "review",
    "git",
    "installed",
    "computers",
    "apart",
    "also",
    "bundle",
    "repository",
    "basically",
    "turns",
    "entire",
    "repository",
    "single",
    "file",
    "pushes",
    "master",
    "branch",
    "main",
    "branch",
    "remote",
    "branch",
    "contained",
    "file",
    "instead",
    "repository",
    "could",
    "alternately",
    "change",
    "repository",
    "clone",
    "repo",
    "bundle",
    "create",
    "copy",
    "use",
    "git",
    "log",
    "like",
    "five",
    "commands",
    "instead",
    "one",
    "use",
    "one",
    "command",
    "finally",
    "stashing",
    "uncommitted",
    "changes",
    "want",
    "undo",
    "adding",
    "feature",
    "kind",
    "added",
    "data",
    "temporarily",
    "always",
    "stash",
    "temporarily",
    "use",
    "git",
    "status",
    "stash",
    "status",
    "want",
    "reapply",
    "changes",
    "stashed",
    "using",
    "git",
    "stash",
    "apply",
    "said",
    "let",
    "move",
    "another",
    "important",
    "topic",
    "git",
    "tutorial",
    "let",
    "go",
    "brief",
    "introduction",
    "ssh",
    "ssh",
    "ssh",
    "key",
    "ssh",
    "key",
    "access",
    "credential",
    "secure",
    "shell",
    "network",
    "protocol",
    "basically",
    "authenticated",
    "encrypted",
    "secure",
    "network",
    "protocol",
    "used",
    "remote",
    "communications",
    "machines",
    "unsecured",
    "open",
    "network",
    "remote",
    "file",
    "transfer",
    "network",
    "management",
    "remote",
    "operating",
    "system",
    "access",
    "basically",
    "typically",
    "used",
    "log",
    "remote",
    "machine",
    "execute",
    "commands",
    "also",
    "supports",
    "tunneling",
    "forwarding",
    "tcp",
    "ports",
    "x11",
    "conditions",
    "transfer",
    "files",
    "using",
    "associated",
    "ssh",
    "file",
    "transfer",
    "secure",
    "copy",
    "protocols",
    "provides",
    "several",
    "alternative",
    "options",
    "strong",
    "authentication",
    "protects",
    "communication",
    "security",
    "integrity",
    "strong",
    "encryption",
    "secure",
    "alternative",
    "login",
    "protocols",
    "insecure",
    "file",
    "transfer",
    "methods",
    "ftp",
    "basically",
    "create",
    "ssh",
    "keys",
    "start",
    "using",
    "command",
    "ssh",
    "hyphen",
    "keygen",
    "prompted",
    "enter",
    "file",
    "save",
    "key",
    "home",
    "eureka",
    "going",
    "enter",
    "passphrase",
    "going",
    "leave",
    "empty",
    "see",
    "identification",
    "saved",
    "file",
    "specified",
    "something",
    "known",
    "key",
    "fingerprint",
    "finally",
    "add",
    "new",
    "ssh",
    "key",
    "ssh",
    "agent",
    "see",
    "identity",
    "added",
    "created",
    "ssh",
    "key",
    "music",
    "need",
    "github",
    "extremely",
    "important",
    "software",
    "developers",
    "work",
    "platform",
    "share",
    "projects",
    "collaborate",
    "developers",
    "platform",
    "must",
    "version",
    "control",
    "system",
    "must",
    "enable",
    "multiple",
    "people",
    "simultaneously",
    "work",
    "single",
    "project",
    "person",
    "edits",
    "copy",
    "files",
    "chooses",
    "share",
    "changes",
    "rest",
    "team",
    "application",
    "must",
    "also",
    "capable",
    "hosting",
    "millions",
    "programmers",
    "hobbyists",
    "download",
    "evaluate",
    "work",
    "github",
    "one",
    "platform",
    "choice",
    "developers",
    "host",
    "multiple",
    "programmers",
    "review",
    "code",
    "github",
    "several",
    "competitors",
    "instance",
    "git",
    "lab",
    "gitlab",
    "open",
    "source",
    "web",
    "interface",
    "source",
    "control",
    "platform",
    "based",
    "git",
    "whereas",
    "microsoft",
    "team",
    "foundation",
    "server",
    "enterprise",
    "grade",
    "server",
    "teams",
    "share",
    "code",
    "track",
    "work",
    "ship",
    "software",
    "language",
    "single",
    "package",
    "bitbucket",
    "hand",
    "stores",
    "git",
    "mercurial",
    "source",
    "code",
    "one",
    "place",
    "unlimited",
    "private",
    "repositories",
    "really",
    "makes",
    "github",
    "powerful",
    "popular",
    "among",
    "developers",
    "github",
    "open",
    "source",
    "platform",
    "community",
    "really",
    "fuels",
    "moreover",
    "github",
    "platform",
    "choice",
    "developers",
    "various",
    "large",
    "corporations",
    "microsoft",
    "number",
    "one",
    "contributor",
    "system",
    "also",
    "google",
    "sap",
    "airbnb",
    "ibm",
    "paypal",
    "many",
    "others",
    "exposure",
    "insight",
    "get",
    "github",
    "simply",
    "unmatched",
    "platform",
    "discover",
    "code",
    "written",
    "others",
    "learn",
    "even",
    "use",
    "projects",
    "versions",
    "control",
    "github",
    "works",
    "much",
    "like",
    "microsoft",
    "office",
    "google",
    "drive",
    "simply",
    "tracks",
    "changes",
    "made",
    "code",
    "makes",
    "always",
    "review",
    "detailed",
    "change",
    "log",
    "neatly",
    "hosts",
    "relevant",
    "information",
    "using",
    "github",
    "eliminates",
    "need",
    "complex",
    "corporate",
    "security",
    "solution",
    "everything",
    "cloud",
    "platforms",
    "protects",
    "code",
    "branches",
    "verifies",
    "commit",
    "signing",
    "controls",
    "access",
    "know",
    "need",
    "github",
    "let",
    "us",
    "understand",
    "github",
    "github",
    "git",
    "repository",
    "hosting",
    "service",
    "provides",
    "graphical",
    "interface",
    "many",
    "features",
    "repository",
    "usually",
    "used",
    "organize",
    "single",
    "project",
    "repositories",
    "contain",
    "folders",
    "files",
    "images",
    "videos",
    "spreadsheets",
    "anything",
    "project",
    "needs",
    "let",
    "say",
    "example",
    "team",
    "wants",
    "work",
    "particular",
    "project",
    "simultaneously",
    "write",
    "update",
    "code",
    "central",
    "repository",
    "present",
    "github",
    "github",
    "highly",
    "used",
    "software",
    "typically",
    "used",
    "version",
    "control",
    "helpful",
    "see",
    "one",
    "person",
    "working",
    "project",
    "example",
    "software",
    "development",
    "team",
    "wants",
    "build",
    "website",
    "everyone",
    "update",
    "codes",
    "simultaneously",
    "working",
    "project",
    "case",
    "github",
    "helps",
    "build",
    "centralized",
    "repository",
    "everyone",
    "upload",
    "edit",
    "manage",
    "code",
    "files",
    "software",
    "projects",
    "bug",
    "tracker",
    "kind",
    "github",
    "tracker",
    "called",
    "issues",
    "section",
    "every",
    "repository",
    "issues",
    "basically",
    "great",
    "way",
    "keep",
    "track",
    "tasks",
    "enhancements",
    "bugs",
    "project",
    "moving",
    "people",
    "often",
    "get",
    "confused",
    "terms",
    "get",
    "github",
    "let",
    "clearly",
    "explain",
    "difference",
    "jit",
    "simply",
    "version",
    "control",
    "system",
    "lets",
    "manage",
    "track",
    "changes",
    "within",
    "project",
    "whereas",
    "github",
    "service",
    "lets",
    "manage",
    "git",
    "repositories",
    "basically",
    "git",
    "tool",
    "github",
    "service",
    "know",
    "difference",
    "git",
    "github",
    "let",
    "us",
    "move",
    "understand",
    "two",
    "work",
    "hand",
    "hand",
    "already",
    "know",
    "git",
    "version",
    "control",
    "tool",
    "allow",
    "perform",
    "kinds",
    "operations",
    "fetch",
    "data",
    "central",
    "server",
    "push",
    "data",
    "whereas",
    "github",
    "code",
    "hosting",
    "platform",
    "version",
    "control",
    "collaboration",
    "github",
    "basically",
    "company",
    "allows",
    "host",
    "central",
    "repository",
    "remote",
    "server",
    "without",
    "ado",
    "let",
    "get",
    "started",
    "demonstration",
    "use",
    "github",
    "demonstration",
    "working",
    "website",
    "version",
    "github",
    "another",
    "version",
    "github",
    "desktop",
    "version",
    "download",
    "personal",
    "computer",
    "simply",
    "going",
    "search",
    "github",
    "search",
    "engine",
    "first",
    "link",
    "lead",
    "official",
    "website",
    "github",
    "going",
    "click",
    "redirect",
    "main",
    "homepage",
    "github",
    "see",
    "search",
    "github",
    "option",
    "also",
    "two",
    "buttons",
    "says",
    "sign",
    "sign",
    "new",
    "github",
    "simply",
    "enter",
    "credentials",
    "username",
    "email",
    "password",
    "sign",
    "github",
    "already",
    "account",
    "like",
    "simply",
    "going",
    "click",
    "sign",
    "button",
    "redirect",
    "page",
    "enter",
    "credentials",
    "email",
    "address",
    "password",
    "going",
    "going",
    "click",
    "sign",
    "button",
    "main",
    "page",
    "account",
    "see",
    "repositories",
    "new",
    "fresh",
    "new",
    "github",
    "view",
    "repositories",
    "left",
    "hand",
    "corner",
    "move",
    "going",
    "explain",
    "features",
    "present",
    "within",
    "github",
    "see",
    "search",
    "bar",
    "search",
    "bar",
    "allow",
    "look",
    "profiles",
    "certain",
    "keywords",
    "look",
    "different",
    "kinds",
    "projects",
    "available",
    "github",
    "done",
    "using",
    "bar",
    "see",
    "four",
    "options",
    "next",
    "bar",
    "says",
    "pull",
    "request",
    "issues",
    "marketplace",
    "explore",
    "pull",
    "requests",
    "learn",
    "later",
    "session",
    "issues",
    "marketplace",
    "wo",
    "discussing",
    "video",
    "explore",
    "button",
    "hand",
    "extremely",
    "important",
    "interesting",
    "button",
    "click",
    "redirect",
    "page",
    "activities",
    "going",
    "around",
    "github",
    "see",
    "trending",
    "repositories",
    "attending",
    "developers",
    "basically",
    "fee",
    "allow",
    "interact",
    "developers",
    "people",
    "collaborators",
    "around",
    "world",
    "basically",
    "instagram",
    "explore",
    "button",
    "allow",
    "interact",
    "different",
    "people",
    "around",
    "world",
    "concept",
    "implied",
    "github",
    "explore",
    "button",
    "explore",
    "top",
    "picks",
    "explore",
    "tending",
    "repositories",
    "developers",
    "basically",
    "interaction",
    "people",
    "different",
    "parts",
    "world",
    "hope",
    "clear",
    "important",
    "part",
    "session",
    "three",
    "buttons",
    "available",
    "right",
    "hand",
    "corner",
    "navigation",
    "bar",
    "see",
    "bell",
    "icon",
    "plus",
    "icon",
    "pixelated",
    "icon",
    "right",
    "hand",
    "corner",
    "bell",
    "icon",
    "allows",
    "read",
    "notifications",
    "activities",
    "occur",
    "github",
    "really",
    "see",
    "inbox",
    "allow",
    "view",
    "notifications",
    "also",
    "view",
    "android",
    "notifications",
    "clicking",
    "unread",
    "button",
    "notifications",
    "nothing",
    "available",
    "also",
    "group",
    "notifications",
    "date",
    "repository",
    "clicking",
    "group",
    "button",
    "also",
    "view",
    "save",
    "notifications",
    "clicking",
    "done",
    "button",
    "hand",
    "let",
    "mark",
    "notifications",
    "done",
    "previous",
    "notifications",
    "three",
    "important",
    "buttons",
    "know",
    "bell",
    "icon",
    "filters",
    "necessary",
    "going",
    "discuss",
    "button",
    "hand",
    "allow",
    "manage",
    "note",
    "notification",
    "settings",
    "subscriptions",
    "bell",
    "icon",
    "next",
    "important",
    "button",
    "plus",
    "icon",
    "see",
    "five",
    "drop",
    "options",
    "appear",
    "first",
    "one",
    "new",
    "repository",
    "followed",
    "import",
    "repository",
    "new",
    "new",
    "organization",
    "new",
    "project",
    "new",
    "repository",
    "already",
    "discussed",
    "previously",
    "session",
    "repository",
    "place",
    "create",
    "files",
    "project",
    "basically",
    "storage",
    "space",
    "right",
    "repository",
    "directly",
    "interact",
    "git",
    "right",
    "new",
    "repository",
    "option",
    "allow",
    "make",
    "files",
    "repository",
    "github",
    "account",
    "right",
    "git",
    "hand",
    "tool",
    "use",
    "make",
    "local",
    "repositories",
    "personal",
    "computer",
    "directly",
    "pushed",
    "local",
    "repositories",
    "directly",
    "pushed",
    "onto",
    "github",
    "account",
    "new",
    "repository",
    "pattern",
    "allows",
    "new",
    "project",
    "hand",
    "place",
    "track",
    "issues",
    "features",
    "tasks",
    "related",
    "code",
    "within",
    "repository",
    "also",
    "connect",
    "devops",
    "build",
    "deploy",
    "process",
    "assign",
    "people",
    "tasks",
    "using",
    "button",
    "new",
    "project",
    "button",
    "difference",
    "new",
    "repository",
    "button",
    "new",
    "project",
    "button",
    "projects",
    "github",
    "part",
    "github",
    "git",
    "new",
    "repository",
    "option",
    "part",
    "github",
    "git",
    "main",
    "difference",
    "new",
    "repository",
    "new",
    "project",
    "hope",
    "clear",
    "next",
    "button",
    "drop",
    "interactions",
    "make",
    "profile",
    "click",
    "profile",
    "option",
    "redirect",
    "page",
    "edit",
    "profile",
    "really",
    "create",
    "identity",
    "using",
    "page",
    "click",
    "edit",
    "profile",
    "add",
    "bio",
    "add",
    "company",
    "working",
    "location",
    "website",
    "twitter",
    "username",
    "etc",
    "add",
    "information",
    "also",
    "view",
    "repositories",
    "working",
    "currently",
    "repositories",
    "worked",
    "past",
    "projects",
    "working",
    "packages",
    "entire",
    "contributions",
    "making",
    "github",
    "last",
    "year",
    "basically",
    "allows",
    "build",
    "identity",
    "help",
    "build",
    "profile",
    "github",
    "hope",
    "clear",
    "click",
    "button",
    "want",
    "sign",
    "profile",
    "simply",
    "scroll",
    "click",
    "sign",
    "button",
    "sign",
    "account",
    "getting",
    "started",
    "github",
    "basics",
    "github",
    "button",
    "options",
    "really",
    "want",
    "move",
    "back",
    "main",
    "page",
    "github",
    "profile",
    "simply",
    "click",
    "octocat",
    "github",
    "logo",
    "going",
    "click",
    "octocat",
    "logo",
    "back",
    "main",
    "page",
    "move",
    "work",
    "different",
    "operations",
    "options",
    "within",
    "github",
    "learn",
    "different",
    "things",
    "github",
    "going",
    "give",
    "brief",
    "overview",
    "download",
    "desktop",
    "version",
    "github",
    "simply",
    "going",
    "search",
    "github",
    "desktop",
    "search",
    "engine",
    "going",
    "click",
    "first",
    "link",
    "available",
    "page",
    "simply",
    "click",
    "button",
    "says",
    "download",
    "windows",
    "compatible",
    "current",
    "version",
    "personal",
    "computer",
    "mac",
    "simply",
    "click",
    "mac",
    "version",
    "download",
    "desktop",
    "already",
    "mentioned",
    "previously",
    "going",
    "work",
    "website",
    "version",
    "going",
    "simply",
    "switch",
    "back",
    "let",
    "quickly",
    "move",
    "next",
    "part",
    "session",
    "create",
    "repository",
    "firstly",
    "let",
    "us",
    "understand",
    "repository",
    "simply",
    "storage",
    "space",
    "correct",
    "project",
    "working",
    "github",
    "popular",
    "central",
    "repository",
    "allows",
    "share",
    "files",
    "whereas",
    "git",
    "allows",
    "create",
    "local",
    "repositories",
    "present",
    "system",
    "working",
    "basically",
    "push",
    "local",
    "repository",
    "github",
    "share",
    "collaborators",
    "via",
    "central",
    "one",
    "know",
    "repository",
    "works",
    "let",
    "go",
    "demonstration",
    "part",
    "create",
    "first",
    "repository",
    "two",
    "ways",
    "either",
    "click",
    "create",
    "repository",
    "button",
    "present",
    "left",
    "side",
    "already",
    "mentioned",
    "previous",
    "part",
    "session",
    "click",
    "plus",
    "icon",
    "click",
    "new",
    "repository",
    "option",
    "redirect",
    "page",
    "says",
    "create",
    "new",
    "repository",
    "add",
    "repository",
    "name",
    "going",
    "name",
    "repository",
    "edureka",
    "available",
    "repository",
    "names",
    "must",
    "unique",
    "one",
    "another",
    "identify",
    "easily",
    "also",
    "add",
    "description",
    "optional",
    "going",
    "add",
    "description",
    "first",
    "repository",
    "description",
    "allows",
    "people",
    "collaborators",
    "understand",
    "repository",
    "good",
    "developer",
    "good",
    "programmer",
    "would",
    "definitely",
    "want",
    "add",
    "description",
    "give",
    "overview",
    "repository",
    "two",
    "options",
    "available",
    "says",
    "private",
    "public",
    "choose",
    "repository",
    "either",
    "public",
    "private",
    "private",
    "one",
    "lets",
    "decide",
    "access",
    "profile",
    "whereas",
    "public",
    "one",
    "lets",
    "anyone",
    "view",
    "access",
    "repository",
    "choose",
    "commit",
    "difference",
    "public",
    "private",
    "repository",
    "going",
    "let",
    "repository",
    "public",
    "scroll",
    "see",
    "initialize",
    "repository",
    "three",
    "options",
    "first",
    "one",
    "add",
    "readme",
    "file",
    "second",
    "one",
    "add",
    "git",
    "ignore",
    "file",
    "always",
    "choose",
    "add",
    "readme",
    "text",
    "file",
    "project",
    "often",
    "contains",
    "information",
    "project",
    "necessary",
    "details",
    "user",
    "must",
    "aware",
    "accessing",
    "particular",
    "project",
    "want",
    "readme",
    "file",
    "repository",
    "going",
    "click",
    "button",
    "going",
    "check",
    "next",
    "option",
    "add",
    "dot",
    "get",
    "ignore",
    "file",
    "file",
    "let",
    "ignore",
    "list",
    "files",
    "user",
    "pushing",
    "files",
    "github",
    "option",
    "really",
    "going",
    "let",
    "unchecked",
    "repository",
    "truly",
    "open",
    "source",
    "need",
    "license",
    "others",
    "free",
    "use",
    "change",
    "distribute",
    "software",
    "simply",
    "click",
    "choose",
    "license",
    "option",
    "pick",
    "required",
    "license",
    "project",
    "several",
    "licenses",
    "like",
    "mit",
    "gpl",
    "apache",
    "license",
    "bsd",
    "etc",
    "repository",
    "really",
    "need",
    "license",
    "going",
    "untick",
    "see",
    "piece",
    "information",
    "says",
    "set",
    "master",
    "default",
    "branch",
    "going",
    "ignore",
    "going",
    "explain",
    "branches",
    "later",
    "session",
    "create",
    "first",
    "new",
    "repository",
    "add",
    "name",
    "choose",
    "description",
    "add",
    "optional",
    "description",
    "let",
    "repository",
    "either",
    "public",
    "private",
    "initialize",
    "repository",
    "either",
    "three",
    "options",
    "simply",
    "going",
    "click",
    "create",
    "robustry",
    "option",
    "redirect",
    "page",
    "information",
    "files",
    "currently",
    "present",
    "repository",
    "see",
    "repository",
    "name",
    "present",
    "optional",
    "description",
    "gave",
    "number",
    "files",
    "currently",
    "one",
    "file",
    "readme",
    "text",
    "file",
    "present",
    "congratulations",
    "created",
    "first",
    "repository",
    "see",
    "options",
    "says",
    "issues",
    "pull",
    "requests",
    "actions",
    "projects",
    "wiki",
    "security",
    "etc",
    "really",
    "talk",
    "right",
    "learn",
    "one",
    "option",
    "says",
    "code",
    "really",
    "important",
    "click",
    "button",
    "see",
    "link",
    "available",
    "https",
    "link",
    "copy",
    "link",
    "paste",
    "kit",
    "terminal",
    "present",
    "computer",
    "download",
    "entire",
    "project",
    "directly",
    "local",
    "system",
    "link",
    "hope",
    "clear",
    "next",
    "option",
    "says",
    "open",
    "github",
    "desktop",
    "allow",
    "open",
    "entire",
    "repository",
    "github",
    "desktop",
    "version",
    "also",
    "last",
    "option",
    "says",
    "download",
    "zip",
    "allow",
    "download",
    "entire",
    "repository",
    "form",
    "zip",
    "files",
    "project",
    "files",
    "within",
    "zip",
    "file",
    "really",
    "know",
    "repository",
    "going",
    "click",
    "readme",
    "text",
    "file",
    "available",
    "take",
    "another",
    "page",
    "extra",
    "information",
    "file",
    "see",
    "currently",
    "two",
    "lines",
    "memory",
    "space",
    "allocated",
    "file",
    "currently",
    "two",
    "lines",
    "edu",
    "recon",
    "first",
    "repository",
    "also",
    "see",
    "number",
    "contributors",
    "project",
    "one",
    "view",
    "history",
    "commits",
    "changes",
    "performed",
    "file",
    "come",
    "back",
    "part",
    "later",
    "session",
    "move",
    "back",
    "main",
    "page",
    "repository",
    "clicking",
    "name",
    "button",
    "edureka",
    "name",
    "repository",
    "going",
    "click",
    "back",
    "main",
    "page",
    "repository",
    "learn",
    "create",
    "first",
    "branch",
    "let",
    "us",
    "understand",
    "branches",
    "branches",
    "allow",
    "work",
    "features",
    "included",
    "merged",
    "master",
    "branch",
    "required",
    "master",
    "branch",
    "master",
    "branch",
    "main",
    "branch",
    "project",
    "resides",
    "changes",
    "activities",
    "main",
    "project",
    "lies",
    "default",
    "branch",
    "named",
    "master",
    "branch",
    "really",
    "github",
    "allows",
    "allows",
    "create",
    "additional",
    "branches",
    "additional",
    "branches",
    "work",
    "features",
    "experiment",
    "project",
    "happy",
    "simply",
    "merge",
    "features",
    "main",
    "branch",
    "master",
    "branch",
    "branches",
    "really",
    "simply",
    "allow",
    "work",
    "features",
    "branches",
    "let",
    "move",
    "demonstration",
    "part",
    "look",
    "create",
    "branches",
    "look",
    "left",
    "corner",
    "see",
    "button",
    "says",
    "master",
    "currently",
    "master",
    "branch",
    "one",
    "branch",
    "master",
    "branches",
    "already",
    "mentioned",
    "default",
    "branch",
    "create",
    "repository",
    "automatically",
    "creating",
    "master",
    "branch",
    "project",
    "residing",
    "want",
    "create",
    "another",
    "branch",
    "say",
    "let",
    "name",
    "branch",
    "one",
    "branch",
    "want",
    "name",
    "additional",
    "branch",
    "simply",
    "going",
    "name",
    "going",
    "click",
    "enter",
    "button",
    "redirect",
    "page",
    "exact",
    "replica",
    "master",
    "branch",
    "work",
    "branch",
    "work",
    "feature",
    "add",
    "something",
    "remove",
    "something",
    "really",
    "experiment",
    "branch",
    "happy",
    "merge",
    "back",
    "feature",
    "experimentation",
    "working",
    "master",
    "branch",
    "right",
    "see",
    "readme",
    "text",
    "file",
    "exactly",
    "name",
    "repository",
    "description",
    "repository",
    "click",
    "readme",
    "text",
    "file",
    "everything",
    "absolute",
    "quickly",
    "switch",
    "back",
    "main",
    "page",
    "difference",
    "currently",
    "branch",
    "named",
    "branch",
    "one",
    "branch",
    "master",
    "branch",
    "want",
    "switch",
    "back",
    "master",
    "branch",
    "work",
    "click",
    "button",
    "find",
    "master",
    "click",
    "take",
    "back",
    "master",
    "branch",
    "work",
    "project",
    "currently",
    "two",
    "branches",
    "see",
    "everything",
    "normal",
    "everything",
    "looks",
    "simple",
    "branches",
    "really",
    "easy",
    "hope",
    "clear",
    "look",
    "branches",
    "bar",
    "present",
    "also",
    "create",
    "new",
    "ones",
    "option",
    "branches",
    "let",
    "move",
    "next",
    "part",
    "session",
    "make",
    "comment",
    "comments",
    "comments",
    "simply",
    "record",
    "changes",
    "one",
    "files",
    "branches",
    "basically",
    "save",
    "changes",
    "making",
    "project",
    "git",
    "always",
    "assigns",
    "comment",
    "unique",
    "identification",
    "called",
    "sha",
    "hash",
    "identifies",
    "specific",
    "changes",
    "changes",
    "made",
    "project",
    "files",
    "simply",
    "go",
    "back",
    "look",
    "version",
    "history",
    "history",
    "commit",
    "performed",
    "project",
    "files",
    "really",
    "commits",
    "extremely",
    "easy",
    "let",
    "go",
    "ahead",
    "make",
    "first",
    "comment",
    "going",
    "switch",
    "branch",
    "one",
    "branch",
    "going",
    "make",
    "first",
    "comment",
    "going",
    "click",
    "readme",
    "text",
    "file",
    "file",
    "currently",
    "repository",
    "make",
    "change",
    "readme",
    "text",
    "file",
    "three",
    "really",
    "important",
    "icons",
    "present",
    "right",
    "corner",
    "see",
    "first",
    "one",
    "pc",
    "icon",
    "says",
    "open",
    "file",
    "github",
    "desktop",
    "click",
    "file",
    "entire",
    "file",
    "open",
    "github",
    "desktop",
    "version",
    "next",
    "one",
    "pencil",
    "icon",
    "allow",
    "edit",
    "particular",
    "file",
    "readme",
    "text",
    "file",
    "third",
    "icon",
    "bin",
    "icon",
    "allow",
    "delete",
    "file",
    "working",
    "pencil",
    "icon",
    "edit",
    "file",
    "option",
    "going",
    "click",
    "simply",
    "view",
    "space",
    "file",
    "allow",
    "make",
    "changes",
    "readme",
    "text",
    "file",
    "going",
    "add",
    "another",
    "line",
    "says",
    "first",
    "comment",
    "want",
    "add",
    "readme",
    "text",
    "file",
    "want",
    "preview",
    "changes",
    "going",
    "click",
    "preview",
    "changes",
    "button",
    "see",
    "first",
    "repository",
    "first",
    "commit",
    "first",
    "commit",
    "additional",
    "piece",
    "information",
    "adding",
    "readme",
    "text",
    "file",
    "highlighted",
    "blue",
    "know",
    "additional",
    "information",
    "happy",
    "change",
    "going",
    "switch",
    "back",
    "edit",
    "file",
    "going",
    "scroll",
    "want",
    "add",
    "description",
    "change",
    "performing",
    "file",
    "good",
    "programmer",
    "would",
    "always",
    "add",
    "description",
    "change",
    "making",
    "project",
    "file",
    "collaborators",
    "view",
    "commit",
    "view",
    "change",
    "read",
    "extended",
    "description",
    "understand",
    "change",
    "good",
    "habit",
    "must",
    "follow",
    "going",
    "going",
    "leave",
    "blank",
    "see",
    "two",
    "radio",
    "buttons",
    "currently",
    "available",
    "first",
    "one",
    "says",
    "commit",
    "directly",
    "branch",
    "one",
    "branch",
    "allow",
    "make",
    "change",
    "save",
    "make",
    "commit",
    "directly",
    "branch",
    "one",
    "branch",
    "change",
    "making",
    "currently",
    "implemented",
    "branch",
    "one",
    "branch",
    "second",
    "option",
    "allows",
    "create",
    "new",
    "branch",
    "particular",
    "commit",
    "start",
    "pull",
    "request",
    "going",
    "talk",
    "much",
    "option",
    "right",
    "first",
    "option",
    "extremely",
    "important",
    "let",
    "stuck",
    "option",
    "says",
    "commit",
    "directly",
    "branch",
    "one",
    "branch",
    "going",
    "click",
    "commit",
    "changes",
    "options",
    "simply",
    "implement",
    "entire",
    "change",
    "file",
    "see",
    "change",
    "implemented",
    "additional",
    "piece",
    "line",
    "says",
    "first",
    "comment",
    "added",
    "readme",
    "text",
    "file",
    "interesting",
    "part",
    "switch",
    "master",
    "branch",
    "change",
    "implemented",
    "master",
    "branch",
    "change",
    "currently",
    "present",
    "branch",
    "one",
    "branch",
    "want",
    "view",
    "history",
    "changes",
    "made",
    "already",
    "mentioned",
    "previous",
    "part",
    "session",
    "history",
    "button",
    "allow",
    "going",
    "click",
    "history",
    "button",
    "see",
    "made",
    "first",
    "commit",
    "23",
    "minutes",
    "ago",
    "made",
    "new",
    "comment",
    "41",
    "seconds",
    "ago",
    "also",
    "hash",
    "number",
    "unique",
    "hash",
    "identification",
    "number",
    "allows",
    "distinguish",
    "changes",
    "comments",
    "making",
    "branch",
    "available",
    "main",
    "point",
    "version",
    "control",
    "system",
    "understanding",
    "keeping",
    "record",
    "changes",
    "performing",
    "files",
    "projects",
    "gives",
    "full",
    "justice",
    "word",
    "version",
    "control",
    "github",
    "learned",
    "make",
    "first",
    "comment",
    "two",
    "let",
    "move",
    "next",
    "part",
    "session",
    "open",
    "merge",
    "pull",
    "requests",
    "pull",
    "requests",
    "pull",
    "requests",
    "let",
    "tell",
    "developers",
    "changes",
    "pushed",
    "branch",
    "repository",
    "github",
    "pull",
    "request",
    "open",
    "acknowledge",
    "review",
    "changes",
    "collaborators",
    "add",
    "commits",
    "changes",
    "merged",
    "base",
    "branch",
    "two",
    "ways",
    "create",
    "pull",
    "request",
    "first",
    "one",
    "pulled",
    "requests",
    "forked",
    "repository",
    "second",
    "one",
    "pulled",
    "request",
    "branch",
    "within",
    "repository",
    "currently",
    "demo",
    "work",
    "second",
    "one",
    "pull",
    "request",
    "branch",
    "within",
    "repository",
    "simply",
    "going",
    "switch",
    "demo",
    "part",
    "okay",
    "currently",
    "master",
    "branch",
    "going",
    "click",
    "pull",
    "request",
    "option",
    "says",
    "branch",
    "one",
    "recent",
    "pushes",
    "three",
    "minutes",
    "ago",
    "compare",
    "pull",
    "requests",
    "going",
    "click",
    "going",
    "simply",
    "click",
    "new",
    "pull",
    "request",
    "option",
    "allow",
    "compare",
    "changes",
    "base",
    "branch",
    "compare",
    "branch",
    "based",
    "launch",
    "master",
    "branch",
    "compare",
    "branch",
    "compare",
    "master",
    "branch",
    "branch",
    "one",
    "branch",
    "notification",
    "says",
    "merge",
    "branch",
    "one",
    "branch",
    "master",
    "branch",
    "definitely",
    "possible",
    "green",
    "signal",
    "scroll",
    "view",
    "difference",
    "branches",
    "left",
    "hand",
    "side",
    "indicates",
    "information",
    "present",
    "master",
    "branch",
    "right",
    "hand",
    "indicates",
    "information",
    "present",
    "branch",
    "one",
    "branch",
    "plus",
    "sign",
    "indicates",
    "additional",
    "information",
    "present",
    "branch",
    "one",
    "branch",
    "happy",
    "simply",
    "going",
    "scroll",
    "create",
    "pull",
    "request",
    "click",
    "also",
    "leave",
    "comment",
    "preview",
    "change",
    "necessary",
    "going",
    "go",
    "ahead",
    "create",
    "pull",
    "request",
    "redirect",
    "page",
    "page",
    "says",
    "opal",
    "request",
    "opened",
    "choose",
    "merge",
    "pull",
    "request",
    "merge",
    "branch",
    "one",
    "branch",
    "master",
    "branch",
    "says",
    "branch",
    "conflicts",
    "base",
    "branch",
    "merging",
    "performed",
    "automatically",
    "good",
    "news",
    "right",
    "going",
    "click",
    "merge",
    "pull",
    "request",
    "going",
    "confirm",
    "merge",
    "update",
    "readme",
    "text",
    "file",
    "happy",
    "going",
    "confirm",
    "says",
    "pull",
    "request",
    "successfully",
    "merged",
    "closed",
    "set",
    "branch",
    "one",
    "branch",
    "safely",
    "deleted",
    "going",
    "delete",
    "branch",
    "going",
    "compare",
    "branches",
    "see",
    "master",
    "branch",
    "exactly",
    "branch",
    "one",
    "branch",
    "going",
    "click",
    "edureka",
    "going",
    "go",
    "main",
    "page",
    "repository",
    "master",
    "branch",
    "additional",
    "piece",
    "information",
    "says",
    "first",
    "comment",
    "switch",
    "branch",
    "one",
    "branch",
    "exact",
    "piece",
    "information",
    "information",
    "present",
    "branch",
    "one",
    "branch",
    "successfully",
    "implemented",
    "master",
    "branch",
    "pull",
    "request",
    "part",
    "two",
    "reached",
    "end",
    "demonstration",
    "part",
    "let",
    "quickly",
    "look",
    "case",
    "study",
    "microsoft",
    "implemented",
    "github",
    "pretty",
    "sure",
    "heard",
    "microsoft",
    "microsoft",
    "cooperation",
    "american",
    "multinational",
    "technology",
    "company",
    "develops",
    "manufactures",
    "licenses",
    "supports",
    "sells",
    "different",
    "computer",
    "software",
    "consumer",
    "electronics",
    "personal",
    "computers",
    "related",
    "services",
    "initially",
    "microsoft",
    "use",
    "open",
    "source",
    "held",
    "tightly",
    "internet",
    "protocol",
    "completely",
    "hesitant",
    "adapt",
    "new",
    "concept",
    "sharing",
    "code",
    "entire",
    "world",
    "2010",
    "rethought",
    "entire",
    "scenario",
    "microsoft",
    "one",
    "biggest",
    "contributors",
    "open",
    "source",
    "today",
    "2000",
    "25",
    "000",
    "microsoft",
    "engineers",
    "maintain",
    "windows",
    "terminal",
    "dark",
    "helm",
    "thousand",
    "open",
    "source",
    "projects",
    "first",
    "released",
    "new",
    "processes",
    "measured",
    "containment",
    "later",
    "released",
    "license",
    "software",
    "developers",
    "learn",
    "company",
    "source",
    "code",
    "could",
    "really",
    "build",
    "eventually",
    "stigma",
    "died",
    "even",
    "close",
    "code",
    "like",
    "dotnet",
    "open",
    "source",
    "mit",
    "license",
    "teams",
    "realize",
    "need",
    "accept",
    "contributions",
    "get",
    "feedback",
    "learn",
    "developers",
    "organize",
    "understand",
    "approach",
    "microsoft",
    "created",
    "open",
    "source",
    "programs",
    "office",
    "enables",
    "distribution",
    "centralization",
    "knowledge",
    "ospo",
    "provides",
    "resources",
    "maintainers",
    "manage",
    "thousands",
    "repositories",
    "contributors",
    "effectively",
    "github",
    "even",
    "though",
    "microsoft",
    "invests",
    "tools",
    "expect",
    "individuals",
    "organizations",
    "lead",
    "way",
    "microsoft",
    "believes",
    "github",
    "value",
    "one",
    "feature",
    "entire",
    "community",
    "github",
    "place",
    "collaborate",
    "everyone",
    "entire",
    "world",
    "open",
    "source",
    "already",
    "happening",
    "feature",
    "whole",
    "thing",
    "foreign",
    "let",
    "focus",
    "various",
    "git",
    "commands",
    "start",
    "git",
    "init",
    "command",
    "git",
    "init",
    "basically",
    "turn",
    "directory",
    "empty",
    "repository",
    "first",
    "thing",
    "need",
    "need",
    "local",
    "repository",
    "work",
    "know",
    "exactly",
    "local",
    "repository",
    "basically",
    "private",
    "copy",
    "whole",
    "repository",
    "whole",
    "shared",
    "repository",
    "users",
    "perform",
    "many",
    "operations",
    "repository",
    "add",
    "file",
    "remove",
    "file",
    "rename",
    "file",
    "move",
    "file",
    "commit",
    "changes",
    "lot",
    "things",
    "local",
    "repository",
    "first",
    "command",
    "going",
    "discuss",
    "basically",
    "git",
    "init",
    "command",
    "turn",
    "directory",
    "empty",
    "git",
    "repository",
    "open",
    "virtual",
    "machine",
    "show",
    "practically",
    "guys",
    "virtual",
    "machine",
    "installed",
    "git",
    "want",
    "see",
    "version",
    "git",
    "installed",
    "type",
    "get",
    "hyphen",
    "hyphen",
    "version",
    "case",
    "let",
    "go",
    "ahead",
    "create",
    "directory",
    "first",
    "going",
    "name",
    "directory",
    "edureka",
    "hyphen",
    "repository",
    "going",
    "move",
    "directory",
    "type",
    "cd",
    "array",
    "card",
    "repo",
    "directory",
    "want",
    "convert",
    "local",
    "git",
    "repository",
    "easy",
    "type",
    "git",
    "init",
    "go",
    "initialized",
    "empty",
    "git",
    "repository",
    "home",
    "address",
    "let",
    "go",
    "back",
    "slides",
    "see",
    "command",
    "going",
    "discuss",
    "next",
    "let",
    "talk",
    "git",
    "add",
    "git",
    "add",
    "basically",
    "adds",
    "files",
    "staging",
    "area",
    "git",
    "git",
    "track",
    "every",
    "modified",
    "file",
    "whenever",
    "commit",
    "operation",
    "git",
    "looks",
    "files",
    "present",
    "staging",
    "area",
    "files",
    "present",
    "staging",
    "area",
    "considered",
    "commit",
    "modified",
    "files",
    "first",
    "thing",
    "need",
    "put",
    "modified",
    "files",
    "changes",
    "done",
    "staging",
    "area",
    "staging",
    "area",
    "go",
    "ahead",
    "make",
    "comment",
    "right",
    "first",
    "thing",
    "add",
    "files",
    "staging",
    "area",
    "pretty",
    "easy",
    "type",
    "git",
    "add",
    "file",
    "name",
    "let",
    "quickly",
    "open",
    "virtual",
    "machine",
    "show",
    "virtual",
    "machine",
    "guys",
    "first",
    "let",
    "create",
    "file",
    "let",
    "name",
    "file",
    "uh",
    "yeah",
    "let",
    "go",
    "ahead",
    "type",
    "something",
    "uh",
    "dot",
    "py",
    "file",
    "type",
    "equal",
    "10",
    "small",
    "code",
    "equal",
    "20",
    "going",
    "print",
    "plus",
    "b",
    "pretty",
    "basic",
    "save",
    "go",
    "ahead",
    "close",
    "right",
    "need",
    "add",
    "changes",
    "done",
    "staging",
    "area",
    "right",
    "need",
    "type",
    "get",
    "add",
    "name",
    "file",
    "successfully",
    "done",
    "want",
    "add",
    "files",
    "staging",
    "area",
    "go",
    "ahead",
    "type",
    "git",
    "add",
    "period",
    "right",
    "add",
    "files",
    "local",
    "repository",
    "staging",
    "area",
    "git",
    "add",
    "let",
    "quickly",
    "open",
    "slides",
    "see",
    "next",
    "command",
    "going",
    "discuss",
    "going",
    "see",
    "git",
    "commit",
    "command",
    "git",
    "commit",
    "basically",
    "records",
    "changes",
    "made",
    "files",
    "local",
    "repository",
    "modified",
    "files",
    "staging",
    "area",
    "make",
    "commit",
    "basically",
    "record",
    "changes",
    "made",
    "files",
    "local",
    "repository",
    "easy",
    "reference",
    "commit",
    "unique",
    "id",
    "good",
    "practice",
    "always",
    "give",
    "commit",
    "message",
    "right",
    "helps",
    "understanding",
    "change",
    "done",
    "particular",
    "comment",
    "right",
    "quickly",
    "open",
    "virtual",
    "machine",
    "show",
    "commit",
    "changes",
    "local",
    "repository",
    "virtual",
    "machine",
    "guys",
    "gon",
    "na",
    "type",
    "get",
    "commit",
    "hyphen",
    "commit",
    "message",
    "type",
    "first",
    "commit",
    "right",
    "done",
    "successfully",
    "two",
    "files",
    "changed",
    "five",
    "insertions",
    "create",
    "mode",
    "one",
    "double",
    "zero",
    "six",
    "double",
    "four",
    "edirecta",
    "dot",
    "py",
    "right",
    "log",
    "let",
    "clear",
    "terminal",
    "go",
    "back",
    "slides",
    "let",
    "talk",
    "git",
    "status",
    "git",
    "status",
    "returns",
    "current",
    "state",
    "repository",
    "git",
    "status",
    "return",
    "current",
    "working",
    "branch",
    "file",
    "staging",
    "area",
    "committed",
    "shows",
    "git",
    "status",
    "changes",
    "return",
    "nothing",
    "commit",
    "working",
    "directories",
    "clean",
    "right",
    "let",
    "open",
    "virtual",
    "machine",
    "show",
    "practically",
    "works",
    "right",
    "go",
    "ahead",
    "type",
    "get",
    "status",
    "says",
    "branch",
    "master",
    "nothing",
    "commit",
    "working",
    "directory",
    "clean",
    "gives",
    "name",
    "branch",
    "anything",
    "need",
    "commit",
    "something",
    "already",
    "staging",
    "area",
    "committed",
    "working",
    "directory",
    "clean",
    "right",
    "whatever",
    "changes",
    "made",
    "file",
    "staging",
    "area",
    "staging",
    "area",
    "made",
    "commit",
    "well",
    "right",
    "let",
    "one",
    "thing",
    "make",
    "changes",
    "file",
    "add",
    "staging",
    "area",
    "wo",
    "commit",
    "right",
    "let",
    "see",
    "status",
    "create",
    "one",
    "file",
    "let",
    "edit",
    "using",
    "g",
    "edit",
    "use",
    "whatever",
    "editor",
    "want",
    "type",
    "print",
    "welcome",
    "edureka",
    "close",
    "parenthesis",
    "save",
    "close",
    "gon",
    "na",
    "add",
    "file",
    "staging",
    "area",
    "going",
    "type",
    "git",
    "add",
    "go",
    "ahead",
    "type",
    "period",
    "well",
    "add",
    "files",
    "give",
    "name",
    "file",
    "type",
    "git",
    "status",
    "let",
    "us",
    "see",
    "come",
    "says",
    "new",
    "file",
    "changes",
    "committed",
    "right",
    "changes",
    "present",
    "staging",
    "area",
    "committed",
    "changes",
    "gives",
    "name",
    "branch",
    "well",
    "hope",
    "understood",
    "exactly",
    "git",
    "status",
    "quickly",
    "open",
    "slides",
    "see",
    "command",
    "going",
    "discuss",
    "next",
    "let",
    "talk",
    "git",
    "config",
    "git",
    "many",
    "configurations",
    "settings",
    "possible",
    "git",
    "config",
    "basically",
    "assign",
    "settings",
    "two",
    "important",
    "settings",
    "username",
    "user",
    "email",
    "address",
    "values",
    "set",
    "email",
    "address",
    "name",
    "commits",
    "local",
    "computer",
    "easy",
    "let",
    "quickly",
    "open",
    "vm",
    "show",
    "two",
    "things",
    "either",
    "run",
    "git",
    "config",
    "command",
    "globally",
    "run",
    "git",
    "config",
    "command",
    "current",
    "repository",
    "settings",
    "let",
    "show",
    "globally",
    "type",
    "git",
    "config",
    "hyphen",
    "hyphen",
    "global",
    "user",
    "dot",
    "name",
    "name",
    "user",
    "let",
    "subham",
    "go",
    "ahead",
    "add",
    "email",
    "address",
    "well",
    "need",
    "type",
    "user",
    "dot",
    "email",
    "type",
    "email",
    "address",
    "parenthesis",
    "double",
    "quotes",
    "right",
    "done",
    "done",
    "globally",
    "want",
    "execute",
    "current",
    "repository",
    "type",
    "git",
    "config",
    "wo",
    "use",
    "hyphen",
    "hyphen",
    "global",
    "directly",
    "go",
    "ahead",
    "type",
    "user",
    "dot",
    "name",
    "let",
    "name",
    "say",
    "u",
    "r",
    "b",
    "h",
    "gon",
    "na",
    "add",
    "email",
    "address",
    "well",
    "sort",
    "rate",
    "done",
    "guys",
    "easy",
    "let",
    "quickly",
    "open",
    "slides",
    "see",
    "command",
    "going",
    "execute",
    "next",
    "seen",
    "git",
    "config",
    "works",
    "let",
    "discuss",
    "git",
    "branching",
    "first",
    "question",
    "need",
    "branch",
    "right",
    "branches",
    "used",
    "create",
    "another",
    "line",
    "development",
    "default",
    "git",
    "master",
    "branch",
    "usually",
    "branch",
    "created",
    "work",
    "new",
    "feature",
    "working",
    "web",
    "application",
    "might",
    "want",
    "work",
    "card",
    "service",
    "right",
    "create",
    "new",
    "feature",
    "branch",
    "name",
    "want",
    "give",
    "branch",
    "feature",
    "completed",
    "merged",
    "back",
    "master",
    "branch",
    "delete",
    "feature",
    "branch",
    "every",
    "branch",
    "referenced",
    "head",
    "points",
    "latest",
    "comment",
    "branch",
    "whenever",
    "make",
    "commit",
    "head",
    "updated",
    "latest",
    "commit",
    "let",
    "quickly",
    "open",
    "virtual",
    "machine",
    "going",
    "see",
    "create",
    "branch",
    "delete",
    "branch",
    "rename",
    "merge",
    "check",
    "different",
    "branch",
    "virtual",
    "machine",
    "guys",
    "uh",
    "let",
    "tell",
    "see",
    "branches",
    "type",
    "get",
    "branch",
    "uh",
    "list",
    "branches",
    "already",
    "one",
    "master",
    "branch",
    "present",
    "right",
    "let",
    "quickly",
    "go",
    "ahead",
    "create",
    "branch",
    "see",
    "two",
    "ways",
    "create",
    "branch",
    "one",
    "way",
    "create",
    "branch",
    "check",
    "branch",
    "another",
    "want",
    "create",
    "still",
    "want",
    "master",
    "branch",
    "current",
    "working",
    "branch",
    "uh",
    "want",
    "check",
    "branch",
    "type",
    "get",
    "branch",
    "give",
    "name",
    "branch",
    "let",
    "feature",
    "right",
    "go",
    "ahead",
    "type",
    "git",
    "branch",
    "see",
    "two",
    "branches",
    "master",
    "feature",
    "right",
    "go",
    "ahead",
    "delete",
    "branch",
    "well",
    "let",
    "quickly",
    "uh",
    "move",
    "branch",
    "first",
    "type",
    "git",
    "checkout",
    "name",
    "branch",
    "featured",
    "point",
    "towards",
    "feature",
    "branch",
    "feature",
    "branch",
    "right",
    "let",
    "make",
    "changes",
    "files",
    "edureka",
    "repo",
    "see",
    "couple",
    "files",
    "data",
    "let",
    "make",
    "change",
    "let",
    "right",
    "quickly",
    "type",
    "g",
    "edit",
    "use",
    "whatever",
    "editor",
    "want",
    "add",
    "one",
    "variable",
    "let",
    "30",
    "print",
    "one",
    "value",
    "c",
    "plus",
    "plus",
    "b",
    "pretty",
    "basic",
    "save",
    "go",
    "back",
    "feature",
    "branch",
    "made",
    "changes",
    "file",
    "right",
    "next",
    "step",
    "add",
    "changes",
    "add",
    "modified",
    "file",
    "staging",
    "area",
    "type",
    "git",
    "add",
    "period",
    "want",
    "changes",
    "made",
    "files",
    "staging",
    "area",
    "git",
    "add",
    "period",
    "add",
    "files",
    "want",
    "commit",
    "changes",
    "type",
    "git",
    "commit",
    "hyphen",
    "message",
    "feature",
    "commit",
    "right",
    "said",
    "done",
    "changes",
    "added",
    "changes",
    "staging",
    "area",
    "finally",
    "made",
    "comment",
    "well",
    "says",
    "four",
    "files",
    "change",
    "10",
    "insertions",
    "create",
    "mode",
    "let",
    "clear",
    "terminal",
    "want",
    "merge",
    "feature",
    "branch",
    "master",
    "branch",
    "first",
    "need",
    "check",
    "master",
    "branch",
    "type",
    "get",
    "check",
    "master",
    "says",
    "switching",
    "branch",
    "master",
    "feature",
    "master",
    "branch",
    "gon",
    "na",
    "type",
    "get",
    "merge",
    "feature",
    "go",
    "see",
    "merged",
    "feature",
    "branch",
    "master",
    "branch",
    "easy",
    "guys",
    "let",
    "clear",
    "terminal",
    "quickly",
    "create",
    "one",
    "branch",
    "show",
    "uh",
    "things",
    "happening",
    "might",
    "confusion",
    "still",
    "show",
    "create",
    "branch",
    "check",
    "branch",
    "make",
    "changes",
    "local",
    "repository",
    "adds",
    "staging",
    "area",
    "make",
    "commit",
    "merge",
    "master",
    "branch",
    "uh",
    "going",
    "going",
    "delete",
    "feature",
    "branch",
    "told",
    "earlier",
    "well",
    "merged",
    "changes",
    "master",
    "branch",
    "point",
    "keeping",
    "feature",
    "branch",
    "delete",
    "branch",
    "couple",
    "options",
    "safest",
    "one",
    "gon",
    "na",
    "tell",
    "right",
    "quickly",
    "uh",
    "type",
    "get",
    "branch",
    "hyphen",
    "name",
    "branch",
    "case",
    "feature",
    "deleted",
    "branch",
    "feature",
    "one",
    "way",
    "delete",
    "branch",
    "instead",
    "hyphen",
    "type",
    "get",
    "branch",
    "hyphen",
    "uppercase",
    "name",
    "branch",
    "preferred",
    "option",
    "safe",
    "well",
    "unmerged",
    "changes",
    "also",
    "delete",
    "branch",
    "whereas",
    "type",
    "lowercase",
    "show",
    "error",
    "say",
    "unmerged",
    "changes",
    "right",
    "always",
    "prefer",
    "hyphen",
    "small",
    "feature",
    "hyphen",
    "small",
    "name",
    "branch",
    "want",
    "delete",
    "right",
    "going",
    "show",
    "one",
    "way",
    "create",
    "branch",
    "called",
    "git",
    "checkout",
    "hyphen",
    "b",
    "give",
    "name",
    "branch",
    "right",
    "probably",
    "want",
    "name",
    "branch",
    "new",
    "let",
    "name",
    "branch",
    "new",
    "git",
    "check",
    "hyphen",
    "b",
    "new",
    "create",
    "branch",
    "called",
    "new",
    "also",
    "check",
    "branch",
    "right",
    "also",
    "checked",
    "switch",
    "new",
    "branch",
    "new",
    "also",
    "want",
    "make",
    "changes",
    "files",
    "go",
    "ahead",
    "use",
    "editor",
    "let",
    "uh",
    "edit",
    "say",
    "welcome",
    "dot",
    "py",
    "file",
    "welcome",
    "edureka",
    "forgot",
    "close",
    "quotation",
    "change",
    "gon",
    "na",
    "file",
    "right",
    "gon",
    "na",
    "get",
    "add",
    "period",
    "get",
    "commit",
    "made",
    "mistake",
    "type",
    "get",
    "commit",
    "hyphen",
    "uh",
    "let",
    "new",
    "name",
    "message",
    "right",
    "done",
    "going",
    "gon",
    "na",
    "show",
    "connect",
    "remote",
    "repository",
    "remote",
    "repository",
    "github",
    "account",
    "created",
    "repository",
    "want",
    "connect",
    "repository",
    "need",
    "need",
    "add",
    "origin",
    "type",
    "get",
    "remote",
    "add",
    "origin",
    "ssh",
    "link",
    "show",
    "find",
    "github",
    "account",
    "guys",
    "repository",
    "git",
    "commands",
    "want",
    "copy",
    "ssh",
    "link",
    "go",
    "ahead",
    "copy",
    "paste",
    "successfully",
    "added",
    "origin",
    "let",
    "clear",
    "terminal",
    "connected",
    "local",
    "repository",
    "github",
    "account",
    "seen",
    "branching",
    "works",
    "git",
    "let",
    "us",
    "move",
    "forward",
    "see",
    "work",
    "remote",
    "repository",
    "already",
    "told",
    "add",
    "origin",
    "right",
    "git",
    "remote",
    "add",
    "origin",
    "connected",
    "local",
    "repository",
    "remote",
    "repository",
    "edirecta",
    "hyphen",
    "repo",
    "local",
    "repository",
    "remote",
    "repository",
    "showed",
    "github",
    "account",
    "already",
    "done",
    "git",
    "remote",
    "algorithm",
    "going",
    "see",
    "clone",
    "remote",
    "repository",
    "create",
    "local",
    "working",
    "copy",
    "existing",
    "remote",
    "repository",
    "use",
    "git",
    "clone",
    "copy",
    "download",
    "repository",
    "local",
    "computer",
    "cloning",
    "equivalent",
    "git",
    "init",
    "working",
    "remote",
    "repository",
    "git",
    "create",
    "directory",
    "locally",
    "files",
    "repository",
    "history",
    "open",
    "virtual",
    "machine",
    "quickly",
    "show",
    "right",
    "gon",
    "na",
    "first",
    "gon",
    "na",
    "create",
    "one",
    "directory",
    "let",
    "mkdir",
    "uh",
    "name",
    "directory",
    "let",
    "git",
    "hyphen",
    "repo",
    "right",
    "let",
    "move",
    "git",
    "hyphen",
    "repository",
    "first",
    "thing",
    "going",
    "git",
    "clone",
    "git",
    "clone",
    "ssh",
    "link",
    "ssh",
    "link",
    "already",
    "shown",
    "find",
    "github",
    "account",
    "type",
    "get",
    "clone",
    "remote",
    "repository",
    "url",
    "ssh",
    "link",
    "talking",
    "let",
    "show",
    "go",
    "says",
    "cloning",
    "git",
    "commands",
    "let",
    "see",
    "files",
    "says",
    "git",
    "commands",
    "let",
    "go",
    "get",
    "commands",
    "edereka",
    "readme",
    "also",
    "notice",
    "ederica",
    "readme",
    "successfully",
    "done",
    "let",
    "clear",
    "terminal",
    "uh",
    "go",
    "ahead",
    "pull",
    "whatever",
    "changes",
    "made",
    "file",
    "github",
    "account",
    "let",
    "show",
    "suppose",
    "file",
    "edureka",
    "let",
    "make",
    "changes",
    "type",
    "name",
    "saurabh",
    "let",
    "like",
    "let",
    "come",
    "change",
    "yeah",
    "reflected",
    "repository",
    "want",
    "want",
    "changes",
    "made",
    "remote",
    "repository",
    "local",
    "machine",
    "type",
    "git",
    "pull",
    "origin",
    "master",
    "go",
    "let",
    "say",
    "successfully",
    "done",
    "means",
    "pulled",
    "files",
    "report",
    "repository",
    "check",
    "edereca",
    "files",
    "go",
    "ahead",
    "type",
    "g",
    "edit",
    "edureka",
    "let",
    "see",
    "right",
    "see",
    "changes",
    "reflected",
    "name",
    "saurabh",
    "something",
    "new",
    "added",
    "file",
    "right",
    "pull",
    "operation",
    "let",
    "us",
    "see",
    "push",
    "changes",
    "remote",
    "repository",
    "right",
    "go",
    "ahead",
    "make",
    "changes",
    "create",
    "file",
    "let",
    "say",
    "create",
    "file",
    "touch",
    "get",
    "dot",
    "py",
    "let",
    "get",
    "one",
    "dot",
    "py",
    "right",
    "make",
    "changes",
    "particular",
    "file",
    "write",
    "print",
    "love",
    "git",
    "save",
    "close",
    "right",
    "push",
    "remote",
    "repository",
    "need",
    "add",
    "changes",
    "staging",
    "area",
    "need",
    "make",
    "commit",
    "push",
    "right",
    "first",
    "thing",
    "add",
    "file",
    "name",
    "type",
    "get",
    "add",
    "go",
    "ahead",
    "type",
    "period",
    "add",
    "changes",
    "made",
    "files",
    "staging",
    "area",
    "files",
    "staging",
    "area",
    "basically",
    "modified",
    "files",
    "type",
    "name",
    "file",
    "case",
    "type",
    "get",
    "add",
    "going",
    "commit",
    "changes",
    "type",
    "git",
    "commit",
    "hyphen",
    "give",
    "message",
    "type",
    "remote",
    "done",
    "successfully",
    "go",
    "ahead",
    "push",
    "changes",
    "remote",
    "repository",
    "type",
    "get",
    "push",
    "origin",
    "master",
    "go",
    "says",
    "done",
    "successfully",
    "let",
    "us",
    "go",
    "back",
    "github",
    "account",
    "see",
    "whether",
    "changes",
    "reflected",
    "go",
    "ahead",
    "run",
    "basically",
    "reload",
    "see",
    "file",
    "added",
    "right",
    "let",
    "quickly",
    "go",
    "slides",
    "see",
    "topics",
    "already",
    "covered",
    "seen",
    "perform",
    "git",
    "clone",
    "seen",
    "pull",
    "changes",
    "remote",
    "repository",
    "local",
    "computer",
    "seen",
    "push",
    "local",
    "comments",
    "remote",
    "repository",
    "let",
    "talk",
    "advanced",
    "git",
    "commands",
    "focus",
    "git",
    "stash",
    "git",
    "log",
    "gets",
    "rebase",
    "get",
    "revert",
    "quickly",
    "open",
    "virtual",
    "machine",
    "explain",
    "guys",
    "let",
    "discuss",
    "get",
    "stash",
    "first",
    "save",
    "changes",
    "made",
    "state",
    "commit",
    "repository",
    "use",
    "git",
    "stash",
    "store",
    "work",
    "give",
    "clean",
    "working",
    "directory",
    "give",
    "example",
    "imagine",
    "working",
    "new",
    "feature",
    "complete",
    "urgent",
    "bug",
    "needs",
    "attention",
    "use",
    "gitstash",
    "let",
    "quickly",
    "show",
    "use",
    "first",
    "thing",
    "going",
    "create",
    "new",
    "file",
    "let",
    "name",
    "file",
    "stash",
    "dot",
    "py",
    "gon",
    "na",
    "make",
    "changes",
    "type",
    "print",
    "stash",
    "cool",
    "save",
    "close",
    "yeah",
    "need",
    "add",
    "staging",
    "area",
    "type",
    "get",
    "add",
    "let",
    "see",
    "git",
    "status",
    "git",
    "status",
    "says",
    "new",
    "file",
    "staging",
    "area",
    "right",
    "changes",
    "committed",
    "changes",
    "need",
    "commit",
    "currently",
    "pretty",
    "dirty",
    "put",
    "uncommitted",
    "changes",
    "stash",
    "let",
    "show",
    "get",
    "stash",
    "hyphen",
    "u",
    "go",
    "go",
    "ahead",
    "type",
    "get",
    "status",
    "nothing",
    "working",
    "directory",
    "clean",
    "converted",
    "dirty",
    "directory",
    "pretty",
    "clean",
    "one",
    "right",
    "help",
    "git",
    "stash",
    "right",
    "modification",
    "stashed",
    "away",
    "command",
    "listed",
    "git",
    "stash",
    "list",
    "type",
    "get",
    "stash",
    "list",
    "go",
    "want",
    "inspect",
    "go",
    "ahead",
    "type",
    "git",
    "stash",
    "show",
    "inspect",
    "right",
    "let",
    "clear",
    "terminal",
    "done",
    "fixed",
    "bug",
    "ready",
    "know",
    "work",
    "exactly",
    "fixing",
    "bug",
    "right",
    "want",
    "type",
    "get",
    "stash",
    "apply",
    "go",
    "type",
    "git",
    "status",
    "see",
    "got",
    "dirty",
    "directory",
    "back",
    "guys",
    "seen",
    "gitstash",
    "works",
    "going",
    "going",
    "show",
    "git",
    "log",
    "git",
    "reward",
    "works",
    "right",
    "uh",
    "quickly",
    "create",
    "new",
    "repository",
    "let",
    "type",
    "mkdir",
    "git",
    "hyphen",
    "log",
    "let",
    "name",
    "directory",
    "go",
    "directory",
    "yeah",
    "going",
    "initialize",
    "going",
    "type",
    "get",
    "init",
    "done",
    "uh",
    "create",
    "files",
    "uh",
    "let",
    "edureka1",
    "dot",
    "py",
    "type",
    "print",
    "master",
    "new",
    "technologies",
    "edu",
    "daker",
    "right",
    "save",
    "close",
    "going",
    "add",
    "git",
    "add",
    "finally",
    "committed",
    "hyphen",
    "let",
    "give",
    "message",
    "done",
    "created",
    "directory",
    "initialized",
    "made",
    "file",
    "inside",
    "file",
    "added",
    "staging",
    "area",
    "file",
    "added",
    "staging",
    "area",
    "finally",
    "made",
    "commit",
    "right",
    "till",
    "problem",
    "type",
    "get",
    "log",
    "let",
    "show",
    "comes",
    "see",
    "type",
    "git",
    "log",
    "commit",
    "hash",
    "right",
    "commit",
    "made",
    "author",
    "shivam",
    "particular",
    "date",
    "day",
    "right",
    "basically",
    "git",
    "log",
    "shows",
    "chronological",
    "comment",
    "history",
    "repository",
    "helps",
    "give",
    "context",
    "history",
    "repository",
    "available",
    "immediately",
    "recently",
    "cloned",
    "repository",
    "see",
    "history",
    "well",
    "provide",
    "parameters",
    "well",
    "example",
    "type",
    "get",
    "log",
    "hyphen",
    "give",
    "date",
    "right",
    "similarly",
    "tell",
    "git",
    "lock",
    "show",
    "comments",
    "based",
    "author",
    "right",
    "type",
    "get",
    "log",
    "hyphen",
    "hyphen",
    "author",
    "name",
    "author",
    "show",
    "logs",
    "based",
    "commit",
    "made",
    "author",
    "right",
    "similarly",
    "type",
    "hyphen",
    "hyphen",
    "right",
    "give",
    "date",
    "give",
    "according",
    "date",
    "well",
    "git",
    "log",
    "works",
    "guys",
    "going",
    "show",
    "revert",
    "previous",
    "commit",
    "right",
    "let",
    "make",
    "changes",
    "file",
    "name",
    "file",
    "type",
    "g",
    "edit",
    "type",
    "one",
    "print",
    "statement",
    "says",
    "simply",
    "learn",
    "master",
    "save",
    "close",
    "going",
    "add",
    "staging",
    "area",
    "finally",
    "gon",
    "na",
    "commit",
    "hyphen",
    "last",
    "commit",
    "right",
    "done",
    "suppose",
    "made",
    "changes",
    "gon",
    "na",
    "go",
    "back",
    "previous",
    "change",
    "right",
    "made",
    "change",
    "code",
    "done",
    "commit",
    "well",
    "want",
    "go",
    "back",
    "previous",
    "commit",
    "right",
    "use",
    "use",
    "git",
    "revert",
    "let",
    "show",
    "order",
    "go",
    "back",
    "previous",
    "comment",
    "type",
    "get",
    "log",
    "hyphen",
    "hyphen",
    "one",
    "line",
    "give",
    "one",
    "line",
    "last",
    "commit",
    "want",
    "go",
    "back",
    "right",
    "going",
    "type",
    "get",
    "revert",
    "hash",
    "comment",
    "hash",
    "go",
    "says",
    "revert",
    "last",
    "commit",
    "already",
    "done",
    "go",
    "ahead",
    "check",
    "edu",
    "file",
    "says",
    "master",
    "new",
    "technologies",
    "edureka",
    "even",
    "perform",
    "revert",
    "operation",
    "using",
    "uh",
    "commit",
    "hash",
    "go",
    "ahead",
    "revert",
    "back",
    "previous",
    "commit",
    "hope",
    "clear",
    "let",
    "clear",
    "terminal",
    "go",
    "ahead",
    "revert",
    "last",
    "commit",
    "well",
    "instead",
    "typing",
    "comment",
    "hash",
    "type",
    "get",
    "reward",
    "head",
    "quit",
    "says",
    "rolled",
    "back",
    "previous",
    "version",
    "file",
    "go",
    "ahead",
    "click",
    "ls",
    "command",
    "type",
    "cat",
    "gone",
    "back",
    "simply",
    "learn",
    "master",
    "last",
    "comment",
    "basically",
    "revert",
    "operation",
    "right",
    "whatever",
    "file",
    "changes",
    "done",
    "gitreward",
    "reflected",
    "commit",
    "right",
    "hope",
    "getting",
    "point",
    "first",
    "created",
    "empty",
    "repository",
    "created",
    "file",
    "editoraker",
    "one",
    "dot",
    "py",
    "made",
    "couple",
    "changes",
    "made",
    "two",
    "comments",
    "used",
    "get",
    "revert",
    "hash",
    "commit",
    "go",
    "back",
    "previous",
    "commit",
    "right",
    "got",
    "master",
    "new",
    "technologies",
    "etraca",
    "one",
    "get",
    "time",
    "showed",
    "get",
    "revert",
    "head",
    "basically",
    "take",
    "last",
    "comment",
    "right",
    "reverse",
    "last",
    "comment",
    "last",
    "comment",
    "nothing",
    "revert",
    "operation",
    "happened",
    "actually",
    "made",
    "file",
    "go",
    "back",
    "previous",
    "version",
    "last",
    "comment",
    "right",
    "revert",
    "back",
    "last",
    "comment",
    "see",
    "file",
    "master",
    "new",
    "technologies",
    "direct",
    "simply",
    "learn",
    "master",
    "right",
    "hope",
    "clear",
    "git",
    "log",
    "git",
    "reward",
    "easy",
    "guys",
    "lot",
    "things",
    "understand",
    "basic",
    "let",
    "talk",
    "rebase",
    "basically",
    "rebase",
    "one",
    "way",
    "combining",
    "work",
    "different",
    "branches",
    "rebasing",
    "take",
    "set",
    "comments",
    "copy",
    "store",
    "outside",
    "repository",
    "advantage",
    "rebasing",
    "used",
    "make",
    "linear",
    "sequence",
    "comments",
    "right",
    "comments",
    "log",
    "history",
    "repository",
    "stays",
    "clean",
    "rebasing",
    "done",
    "right",
    "let",
    "show",
    "done",
    "type",
    "git",
    "rebase",
    "master",
    "let",
    "go",
    "ahead",
    "git",
    "rebase",
    "master",
    "current",
    "master",
    "date",
    "message",
    "pops",
    "basically",
    "command",
    "move",
    "work",
    "current",
    "branch",
    "master",
    "branch",
    "look",
    "like",
    "developed",
    "sequentially",
    "developed",
    "parallely",
    "right",
    "let",
    "give",
    "better",
    "example",
    "create",
    "branch",
    "git",
    "branch",
    "say",
    "eureka",
    "0",
    "1",
    "0",
    "name",
    "branch",
    "uh",
    "yeah",
    "want",
    "go",
    "branch",
    "check",
    "add",
    "eureka010",
    "yeah",
    "went",
    "branch",
    "make",
    "changes",
    "going",
    "remove",
    "print",
    "statement",
    "save",
    "close",
    "clean",
    "terminal",
    "gon",
    "na",
    "add",
    "get",
    "add",
    "period",
    "get",
    "commit",
    "hyphen",
    "rebase",
    "right",
    "done",
    "go",
    "ahead",
    "type",
    "get",
    "rebase",
    "master",
    "says",
    "current",
    "branch",
    "area",
    "0",
    "1",
    "0",
    "date",
    "perform",
    "rebasing",
    "let",
    "quickly",
    "go",
    "back",
    "slides",
    "talked",
    "git",
    "stash",
    "talked",
    "git",
    "log",
    "git",
    "rebase",
    "git",
    "revert",
    "music",
    "let",
    "talk",
    "jenkins",
    "jenkins",
    "particular",
    "picture",
    "jenkins",
    "open",
    "source",
    "automation",
    "server",
    "helps",
    "automate",
    "process",
    "development",
    "rating",
    "testing",
    "deployment",
    "packaging",
    "others",
    "system",
    "runs",
    "software",
    "apache",
    "tomcat",
    "supports",
    "vcs",
    "tools",
    "like",
    "gate",
    "bitbucket",
    "also",
    "port",
    "build",
    "automation",
    "tools",
    "like",
    "apache",
    "may",
    "one",
    "helps",
    "make",
    "facilitate",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "process",
    "jenkins",
    "first",
    "released",
    "year",
    "2011",
    "completely",
    "open",
    "source",
    "software",
    "part",
    "mit",
    "license",
    "jenkins",
    "guys",
    "based",
    "software",
    "jenkins",
    "got",
    "plugins",
    "basically",
    "used",
    "interact",
    "different",
    "different",
    "tools",
    "components",
    "jenkins",
    "plugins",
    "primary",
    "releases",
    "languages",
    "java",
    "plugins",
    "available",
    "integrate",
    "jenkins",
    "version",
    "control",
    "system",
    "tools",
    "data",
    "uses",
    "using",
    "plugins",
    "set",
    "purposes",
    "example",
    "testing",
    "compiling",
    "packaging",
    "create",
    "reports",
    "logging",
    "things",
    "possible",
    "using",
    "plugins",
    "jenkins",
    "another",
    "important",
    "component",
    "talk",
    "jenkins",
    "apart",
    "plugin",
    "jenkins",
    "notification",
    "also",
    "call",
    "mailer",
    "using",
    "mailer",
    "guys",
    "config",
    "email",
    "notification",
    "results",
    "configure",
    "scenario",
    "example",
    "want",
    "mail",
    "notification",
    "build",
    "successful",
    "things",
    "done",
    "using",
    "mailers",
    "jenkins",
    "component",
    "another",
    "important",
    "component",
    "jenkins",
    "ssh",
    "agent",
    "jenkins",
    "also",
    "follows",
    "typical",
    "master",
    "slave",
    "topology",
    "need",
    "master",
    "sleeve",
    "topology",
    "ci",
    "tool",
    "like",
    "jenkins",
    "work",
    "organization",
    "got",
    "multiple",
    "teams",
    "want",
    "build",
    "deploy",
    "pipelines",
    "deploy",
    "soft",
    "project",
    "ports",
    "teams",
    "want",
    "piece",
    "code",
    "runs",
    "server",
    "owned",
    "team",
    "set",
    "master",
    "slave",
    "topology",
    "jenkins",
    "may",
    "run",
    "server",
    "x",
    "even",
    "correct",
    "multiple",
    "hours",
    "act",
    "stream",
    "deploying",
    "code",
    "executing",
    "pipeline",
    "run",
    "code",
    "xyz",
    "servers",
    "beauty",
    "using",
    "jenkins",
    "master",
    "slave",
    "another",
    "good",
    "thing",
    "jenkins",
    "jenkins",
    "deployed",
    "operating",
    "system",
    "run",
    "jenkins",
    "windows",
    "node",
    "linux",
    "node",
    "mac",
    "os",
    "jenkins",
    "deployed",
    "operating",
    "system",
    "similarly",
    "jenkins",
    "master",
    "slip",
    "os",
    "dependent",
    "master",
    "slave",
    "need",
    "operating",
    "system",
    "another",
    "important",
    "core",
    "component",
    "jenkins",
    "call",
    "java",
    "dock",
    "plugin",
    "jenkins",
    "basically",
    "part",
    "jenkins",
    "score",
    "helps",
    "us",
    "publish",
    "results",
    "like",
    "build",
    "action",
    "build",
    "directory",
    "expected",
    "build",
    "output",
    "things",
    "see",
    "jenkins",
    "happening",
    "using",
    "java",
    "doc",
    "let",
    "talk",
    "security",
    "engineers",
    "apart",
    "jenkins",
    "sort",
    "oscillation",
    "like",
    "project",
    "based",
    "strategy",
    "matrix",
    "based",
    "authorization",
    "helps",
    "make",
    "jenkins",
    "secure",
    "talk",
    "talk",
    "jenkins",
    "overall",
    "see",
    "diagram",
    "jenkins",
    "pulling",
    "source",
    "control",
    "system",
    "like",
    "get",
    "bit",
    "bucket",
    "start",
    "deploy",
    "jenkins",
    "got",
    "notification",
    "management",
    "system",
    "using",
    "mailer",
    "bit",
    "successful",
    "get",
    "war",
    "file",
    "zip",
    "file",
    "define",
    "want",
    "build",
    "created",
    "save",
    "center",
    "notification",
    "management",
    "developer",
    "something",
    "happened",
    "wrongly",
    "specific",
    "code",
    "lines",
    "need",
    "rectifier",
    "code",
    "beauty",
    "using",
    "jenkins",
    "jenkins",
    "guide",
    "bread",
    "butter",
    "industry",
    "jenkins",
    "computer",
    "also",
    "market",
    "like",
    "gitlab",
    "jenkins",
    "others",
    "default",
    "jenkins",
    "two",
    "go",
    "tool",
    "ci",
    "industry",
    "let",
    "talk",
    "pipeline",
    "far",
    "talked",
    "jenkins",
    "let",
    "talk",
    "pipeline",
    "injectors",
    "let",
    "say",
    "want",
    "deploy",
    "code",
    "code",
    "may",
    "certain",
    "steps",
    "like",
    "first",
    "step",
    "building",
    "code",
    "second",
    "step",
    "compiling",
    "code",
    "reviewing",
    "packaging",
    "deploying",
    "automate",
    "combine",
    "steps",
    "executed",
    "one",
    "group",
    "deploy",
    "scenarios",
    "create",
    "delivery",
    "pipeline",
    "pipeline",
    "nothing",
    "guys",
    "combination",
    "different",
    "different",
    "steps",
    "different",
    "tasks",
    "need",
    "perform",
    "order",
    "deploy",
    "code",
    "using",
    "pipeline",
    "instead",
    "bringing",
    "task",
    "code",
    "deployment",
    "manually",
    "combine",
    "deploy",
    "sort",
    "one",
    "common",
    "approach",
    "delivery",
    "pipeline",
    "multiple",
    "ways",
    "create",
    "pipeline",
    "two",
    "common",
    "ways",
    "common",
    "approaches",
    "using",
    "pipeline",
    "see",
    "scenario",
    "declarative",
    "approach",
    "second",
    "one",
    "used",
    "industry",
    "scripted",
    "approach",
    "particular",
    "example",
    "saying",
    "example",
    "jenkins",
    "pipeline",
    "script",
    "saying",
    "first",
    "stage",
    "called",
    "build",
    "stage",
    "combining",
    "multiple",
    "tasks",
    "like",
    "first",
    "using",
    "java",
    "printing",
    "something",
    "called",
    "echo",
    "hello",
    "pipeline",
    "using",
    "mi",
    "one",
    "build",
    "automation",
    "tool",
    "time",
    "deploy",
    "package",
    "shell",
    "script",
    "output",
    "things",
    "present",
    "particular",
    "directory",
    "structure",
    "typical",
    "example",
    "syntax",
    "create",
    "pipeline",
    "jenkins",
    "example",
    "scripted",
    "pipeline",
    "let",
    "talk",
    "two",
    "predominant",
    "pipelines",
    "used",
    "industry",
    "scripted",
    "declarative",
    "let",
    "talk",
    "scripted",
    "declarative",
    "different",
    "scripted",
    "pipeline",
    "traditional",
    "dentist",
    "pipeline",
    "approach",
    "declarative",
    "pipeline",
    "modern",
    "day",
    "pipeline",
    "approach",
    "used",
    "industry",
    "scripted",
    "pipeline",
    "syntax",
    "strict",
    "traditional",
    "declarative",
    "pipeline",
    "views",
    "something",
    "called",
    "groovy",
    "syntax",
    "use",
    "declarative",
    "pipeline",
    "get",
    "code",
    "version",
    "system",
    "like",
    "get",
    "create",
    "something",
    "called",
    "jenkins",
    "file",
    "download",
    "jenkins",
    "file",
    "version",
    "like",
    "used",
    "run",
    "jenkins",
    "hold",
    "use",
    "scripted",
    "pipeline",
    "define",
    "code",
    "something",
    "called",
    "node",
    "block",
    "one",
    "decorative",
    "pipeline",
    "would",
    "define",
    "code",
    "pipeline",
    "blocks",
    "seen",
    "previous",
    "example",
    "let",
    "talk",
    "jenkins",
    "file",
    "used",
    "jenkins",
    "file",
    "thing",
    "like",
    "text",
    "file",
    "define",
    "find",
    "entire",
    "structure",
    "syntax",
    "jenkins",
    "know",
    "download",
    "file",
    "particular",
    "give",
    "path",
    "git",
    "repo",
    "get",
    "credential",
    "private",
    "repo",
    "pull",
    "contents",
    "execute",
    "code",
    "modern",
    "deployment",
    "mechanism",
    "use",
    "work",
    "jenkins",
    "pipeline",
    "using",
    "jenkins",
    "pipeline",
    "use",
    "certain",
    "things",
    "helps",
    "us",
    "let",
    "talk",
    "first",
    "code",
    "review",
    "writeration",
    "venezuela",
    "jenkins",
    "pipeline",
    "easily",
    "review",
    "code",
    "code",
    "semi",
    "review",
    "multiple",
    "developer",
    "executed",
    "works",
    "injections",
    "file",
    "stored",
    "generally",
    "version",
    "control",
    "system",
    "tool",
    "like",
    "put",
    "something",
    "called",
    "pr",
    "pull",
    "request",
    "code",
    "review",
    "different",
    "members",
    "team",
    "review",
    "code",
    "actually",
    "pull",
    "jenkins",
    "file",
    "deploy",
    "audit",
    "trail",
    "refer",
    "login",
    "log",
    "every",
    "step",
    "output",
    "executed",
    "part",
    "jenkins",
    "file",
    "see",
    "happening",
    "jenkins",
    "file",
    "getting",
    "executed",
    "sort",
    "like",
    "word",
    "boost",
    "login",
    "find",
    "single",
    "place",
    "store",
    "data",
    "outputs",
    "need",
    "developers",
    "scattered",
    "writing",
    "codes",
    "executing",
    "jenkins",
    "pipeline",
    "hold",
    "organization",
    "approach",
    "genius",
    "file",
    "mythology",
    "code",
    "stored",
    "vcs",
    "tool",
    "code",
    "downloaded",
    "work",
    "single",
    "source",
    "entire",
    "pipe",
    "let",
    "talk",
    "jenkins",
    "workflow",
    "particular",
    "jenkins",
    "workflow",
    "work",
    "jenkins",
    "workflow",
    "always",
    "starts",
    "version",
    "control",
    "system",
    "say",
    "source",
    "code",
    "repository",
    "multiple",
    "developers",
    "collaborate",
    "put",
    "code",
    "source",
    "code",
    "system",
    "like",
    "git",
    "jenkins",
    "tried",
    "pull",
    "data",
    "source",
    "control",
    "system",
    "reposit",
    "system",
    "mandatory",
    "source",
    "code",
    "need",
    "make",
    "bitbucket",
    "svn",
    "whatever",
    "organization",
    "uses",
    "using",
    "jenkins",
    "server",
    "execute",
    "tasks",
    "like",
    "build",
    "deploy",
    "compiling",
    "packaging",
    "code",
    "review",
    "things",
    "happen",
    "using",
    "jenkins",
    "server",
    "whereas",
    "jenkins",
    "actually",
    "installed",
    "setting",
    "jenkins",
    "server",
    "operating",
    "system",
    "windows",
    "machine",
    "linux",
    "machine",
    "ubuntu",
    "machine",
    "use",
    "today",
    "modern",
    "world",
    "availability",
    "using",
    "jenkins",
    "server",
    "would",
    "execute",
    "different",
    "different",
    "tasks",
    "scenarios",
    "champion",
    "server",
    "use",
    "middle",
    "functionality",
    "feedback",
    "mechanism",
    "notified",
    "developers",
    "commit",
    "code",
    "deployment",
    "successful",
    "failure",
    "challenges",
    "done",
    "using",
    "feedback",
    "mechanism",
    "possible",
    "using",
    "jenkins",
    "server",
    "using",
    "jenkins",
    "servers",
    "always",
    "first",
    "deployed",
    "code",
    "lower",
    "life",
    "cycle",
    "environment",
    "recommendation",
    "practice",
    "first",
    "deploy",
    "qa",
    "server",
    "testing",
    "server",
    "code",
    "deployment",
    "successful",
    "lower",
    "life",
    "cycle",
    "go",
    "ahead",
    "deploy",
    "code",
    "production",
    "server",
    "entire",
    "jenkins",
    "work",
    "particularly",
    "interacts",
    "first",
    "guys",
    "let",
    "talk",
    "jenkins",
    "installation",
    "install",
    "jenkins",
    "lab",
    "give",
    "example",
    "going",
    "use",
    "centos",
    "machine",
    "reference",
    "install",
    "configure",
    "changes",
    "jenkins",
    "default",
    "runs",
    "port",
    "8080",
    "default",
    "port",
    "running",
    "jenkins",
    "please",
    "make",
    "sure",
    "using",
    "cloud",
    "vms",
    "vms",
    "organization",
    "port",
    "8080",
    "firewall",
    "settings",
    "open",
    "configured",
    "accessible",
    "jenkins",
    "gui",
    "based",
    "tool",
    "95",
    "jenkins",
    "job",
    "completely",
    "gui",
    "based",
    "hardly",
    "log",
    "servers",
    "jenkins",
    "got",
    "installed",
    "using",
    "cli",
    "command",
    "manage",
    "run",
    "change",
    "completely",
    "run",
    "unmanaged",
    "using",
    "google",
    "graphical",
    "interface",
    "comes",
    "install",
    "jenkins",
    "another",
    "prerequisite",
    "install",
    "jenkins",
    "java",
    "need",
    "present",
    "machine",
    "need",
    "make",
    "sure",
    "java",
    "installed",
    "machine",
    "guys",
    "let",
    "go",
    "lab",
    "see",
    "install",
    "jenkins",
    "guys",
    "mentioned",
    "going",
    "use",
    "centos",
    "machine",
    "let",
    "double",
    "check",
    "sentence",
    "vm",
    "got",
    "centers",
    "vm",
    "running",
    "centos",
    "first",
    "thing",
    "let",
    "us",
    "install",
    "java",
    "install",
    "dash",
    "install",
    "version",
    "java",
    "installing",
    "go",
    "version",
    "completes",
    "java",
    "installation",
    "another",
    "good",
    "thing",
    "jenkins",
    "jenkins",
    "got",
    "detailed",
    "page",
    "published",
    "jenkins",
    "community",
    "see",
    "use",
    "jenkins",
    "installation",
    "different",
    "different",
    "types",
    "operating",
    "system",
    "go",
    "jenkins",
    "dot",
    "io",
    "slash",
    "downloads",
    "see",
    "installation",
    "step",
    "provided",
    "jenkins",
    "community",
    "install",
    "jenkins",
    "different",
    "different",
    "operating",
    "system",
    "got",
    "stable",
    "release",
    "release",
    "like",
    "beta",
    "release",
    "select",
    "little",
    "jenkins",
    "want",
    "use",
    "go",
    "stability",
    "jenkins",
    "ta3",
    "since",
    "going",
    "use",
    "centos",
    "click",
    "centos",
    "installation",
    "step",
    "jenkins",
    "copy",
    "steps",
    "mentioned",
    "install",
    "jenkins",
    "paste",
    "installation",
    "server",
    "rpm",
    "dependencies",
    "needed",
    "install",
    "jenkins",
    "deploying",
    "server",
    "dependency",
    "present",
    "install",
    "jenkins",
    "let",
    "install",
    "jenkins",
    "exam",
    "install",
    "dash",
    "jenkins",
    "jenkins",
    "software",
    "installed",
    "let",
    "start",
    "jenkins",
    "service",
    "jenkins",
    "start",
    "let",
    "validate",
    "jenkins",
    "service",
    "got",
    "started",
    "got",
    "jenkins",
    "running",
    "guy",
    "mentioned",
    "jenkins",
    "runs",
    "port",
    "8080",
    "let",
    "get",
    "public",
    "ip",
    "address",
    "machine",
    "public",
    "ipad",
    "machine",
    "let",
    "copy",
    "ip",
    "address",
    "try",
    "access",
    "jenkins",
    "port",
    "firstly",
    "install",
    "jenkins",
    "jenkins",
    "securely",
    "ask",
    "verify",
    "jenkins",
    "code",
    "go",
    "path",
    "location",
    "copy",
    "code",
    "mentioned",
    "jenkins",
    "server",
    "call",
    "jenkins",
    "server",
    "install",
    "jenkins",
    "scat",
    "directory",
    "structure",
    "copy",
    "jenkins",
    "secret",
    "color",
    "secret",
    "key",
    "need",
    "use",
    "install",
    "jenkins",
    "click",
    "continue",
    "key",
    "valid",
    "prompt",
    "next",
    "page",
    "install",
    "plugins",
    "get",
    "two",
    "options",
    "either",
    "install",
    "plugins",
    "recommended",
    "jenkins",
    "select",
    "plugins",
    "want",
    "install",
    "select",
    "install",
    "suggested",
    "plugins",
    "step",
    "may",
    "take",
    "minute",
    "since",
    "install",
    "couple",
    "plugins",
    "need",
    "jenkins",
    "properly",
    "function",
    "see",
    "like",
    "screen",
    "coming",
    "different",
    "different",
    "plugins",
    "getting",
    "installed",
    "jenkins",
    "jenkins",
    "installations",
    "compared",
    "asks",
    "create",
    "first",
    "admin",
    "user",
    "okay",
    "let",
    "give",
    "username",
    "give",
    "name",
    "advoca",
    "give",
    "password",
    "give",
    "password",
    "choice",
    "give",
    "password",
    "give",
    "confirm",
    "password",
    "give",
    "path",
    "give",
    "name",
    "give",
    "name",
    "also",
    "educa",
    "email",
    "address",
    "click",
    "save",
    "configure",
    "got",
    "base",
    "url",
    "running",
    "port",
    "8080",
    "click",
    "save",
    "finish",
    "start",
    "using",
    "jenkins",
    "jenkins",
    "home",
    "screen",
    "looks",
    "like",
    "configure",
    "jenkins",
    "first",
    "time",
    "let",
    "talk",
    "jenkins",
    "management",
    "left",
    "side",
    "see",
    "tab",
    "called",
    "manage",
    "jenkins",
    "place",
    "entire",
    "administration",
    "management",
    "jenkins",
    "see",
    "got",
    "plethora",
    "options",
    "like",
    "security",
    "configuration",
    "status",
    "information",
    "tools",
    "actions",
    "cli",
    "let",
    "talk",
    "tools",
    "depth",
    "let",
    "first",
    "talk",
    "configure",
    "system",
    "name",
    "twice",
    "using",
    "configure",
    "system",
    "configure",
    "edit",
    "different",
    "different",
    "jenkins",
    "properties",
    "jenkins",
    "configuration",
    "settings",
    "example",
    "many",
    "parallel",
    "tasks",
    "want",
    "execute",
    "time",
    "panel",
    "executor",
    "give",
    "two",
    "three",
    "whatever",
    "want",
    "want",
    "change",
    "port",
    "specify",
    "default",
    "admin",
    "address",
    "create",
    "jenkins",
    "email",
    "address",
    "mail",
    "notification",
    "go",
    "global",
    "properties",
    "variables",
    "want",
    "link",
    "linked",
    "place",
    "called",
    "jenkins",
    "configuration",
    "let",
    "talk",
    "something",
    "jenkins",
    "security",
    "go",
    "configure",
    "global",
    "security",
    "see",
    "configure",
    "security",
    "jenkins",
    "multiple",
    "authorization",
    "mode",
    "use",
    "jenkins",
    "order",
    "use",
    "authorization",
    "strategy",
    "need",
    "use",
    "authentication",
    "strategies",
    "common",
    "widely",
    "used",
    "ldap",
    "integration",
    "basically",
    "integrate",
    "organization",
    "ldap",
    "server",
    "jenkins",
    "database",
    "done",
    "use",
    "different",
    "different",
    "authorization",
    "strategies",
    "used",
    "jenkins",
    "predominant",
    "one",
    "used",
    "industry",
    "project",
    "based",
    "metrics",
    "authorization",
    "strategy",
    "metrics",
    "authorization",
    "strategy",
    "means",
    "let",
    "say",
    "created",
    "multiple",
    "jobs",
    "pipelines",
    "jenkins",
    "jobs",
    "pipelines",
    "belong",
    "different",
    "different",
    "teams",
    "organization",
    "using",
    "metrics",
    "authorization",
    "strategy",
    "restrict",
    "specific",
    "job",
    "accessed",
    "team",
    "members",
    "specific",
    "group",
    "imperative",
    "anyone",
    "excellent",
    "jenkins",
    "run",
    "jobs",
    "pipelines",
    "using",
    "metrics",
    "oscillation",
    "strategies",
    "restrict",
    "another",
    "one",
    "used",
    "metrics",
    "based",
    "security",
    "restrict",
    "overall",
    "access",
    "check",
    "game",
    "means",
    "user",
    "admin",
    "rights",
    "user",
    "b",
    "write",
    "type",
    "read",
    "writes",
    "want",
    "give",
    "like",
    "agent",
    "based",
    "feed",
    "right",
    "full",
    "job",
    "rights",
    "full",
    "view",
    "right",
    "source",
    "code",
    "management",
    "right",
    "things",
    "done",
    "using",
    "metrics",
    "based",
    "security",
    "strategy",
    "traditional",
    "ways",
    "used",
    "frequently",
    "industry",
    "anyone",
    "anything",
    "means",
    "anyone",
    "access",
    "jenkins",
    "like",
    "full",
    "admin",
    "another",
    "one",
    "used",
    "days",
    "legacy",
    "teamwork",
    "legacy",
    "mode",
    "something",
    "like",
    "default",
    "admin",
    "role",
    "granted",
    "full",
    "control",
    "system",
    "otherwise",
    "read",
    "access",
    "like",
    "read",
    "admin",
    "legacy",
    "mode",
    "third",
    "one",
    "also",
    "used",
    "logged",
    "user",
    "anything",
    "logged",
    "user",
    "anyone",
    "anything",
    "almost",
    "like",
    "similar",
    "also",
    "people",
    "login",
    "basically",
    "tasks",
    "done",
    "general",
    "modern",
    "industry",
    "security",
    "used",
    "metric",
    "space",
    "strategy",
    "onion",
    "strategy",
    "two",
    "things",
    "basically",
    "used",
    "modern",
    "day",
    "world",
    "using",
    "jenkins",
    "let",
    "talk",
    "master",
    "slave",
    "architecture",
    "works",
    "jenkins",
    "configure",
    "possible",
    "let",
    "go",
    "back",
    "let",
    "go",
    "let",
    "go",
    "back",
    "manage",
    "jenkins",
    "see",
    "option",
    "called",
    "manage",
    "nodes",
    "clouds",
    "let",
    "see",
    "set",
    "master",
    "slave",
    "architecture",
    "using",
    "junkets",
    "default",
    "server",
    "install",
    "jenkins",
    "called",
    "master",
    "server",
    "jenkins",
    "server",
    "running",
    "left",
    "hand",
    "side",
    "screen",
    "see",
    "tab",
    "called",
    "blue",
    "note",
    "using",
    "new",
    "node",
    "add",
    "nodes",
    "belonging",
    "operating",
    "system",
    "act",
    "jenkins",
    "sling",
    "multiple",
    "ways",
    "set",
    "authorization",
    "master",
    "slave",
    "node",
    "common",
    "methods",
    "using",
    "master",
    "slave",
    "nodes",
    "ssh",
    "launch",
    "agent",
    "execution",
    "command",
    "mainly",
    "used",
    "using",
    "windows",
    "machine",
    "slave",
    "node",
    "linux",
    "machine",
    "generally",
    "go",
    "secure",
    "shell",
    "authorization",
    "strategy",
    "add",
    "many",
    "nodes",
    "want",
    "slave",
    "node",
    "limitation",
    "many",
    "slave",
    "nodes",
    "jenkins",
    "architecture",
    "let",
    "talk",
    "plugins",
    "jungles",
    "plugins",
    "another",
    "important",
    "component",
    "jenkins",
    "go",
    "manage",
    "plugins",
    "see",
    "three",
    "options",
    "available",
    "plugins",
    "find",
    "updates",
    "means",
    "installed",
    "updates",
    "available",
    "plugins",
    "installed",
    "machine",
    "already",
    "present",
    "guys",
    "remember",
    "installed",
    "plugins",
    "selected",
    "option",
    "called",
    "install",
    "recommended",
    "plugins",
    "plugins",
    "get",
    "installed",
    "default",
    "select",
    "option",
    "got",
    "tab",
    "called",
    "availability",
    "plugin",
    "plugins",
    "available",
    "use",
    "installation",
    "plethora",
    "plugins",
    "developed",
    "managed",
    "jenkins",
    "community",
    "use",
    "installing",
    "example",
    "let",
    "say",
    "want",
    "install",
    "plugin",
    "integrate",
    "unique",
    "cloud",
    "environment",
    "find",
    "plugin",
    "also",
    "search",
    "example",
    "azure",
    "file",
    "got",
    "many",
    "plugins",
    "integrate",
    "azure",
    "cloud",
    "similarly",
    "search",
    "aws",
    "cloud",
    "see",
    "many",
    "plugins",
    "connect",
    "aws",
    "services",
    "way",
    "create",
    "plugins",
    "also",
    "need",
    "create",
    "plugins",
    "upload",
    "plugins",
    "used",
    "installation",
    "jenk",
    "installation",
    "plugin",
    "installation",
    "verified",
    "updated",
    "used",
    "jenkins",
    "community",
    "whole",
    "initially",
    "upload",
    "plugin",
    "use",
    "machine",
    "guys",
    "let",
    "talk",
    "create",
    "job",
    "chinkle",
    "work",
    "jenkins",
    "terms",
    "use",
    "often",
    "items",
    "jobs",
    "project",
    "interchangeable",
    "carry",
    "meaning",
    "terms",
    "jenkins",
    "create",
    "job",
    "item",
    "click",
    "new",
    "item",
    "give",
    "name",
    "let",
    "say",
    "job",
    "fun",
    "select",
    "freestyle",
    "project",
    "since",
    "getting",
    "basic",
    "one",
    "click",
    "ok",
    "go",
    "build",
    "app",
    "select",
    "want",
    "build",
    "step",
    "execute",
    "shell",
    "command",
    "bash",
    "command",
    "together",
    "example",
    "want",
    "execute",
    "shell",
    "command",
    "let",
    "say",
    "want",
    "print",
    "something",
    "echo",
    "hello",
    "madurica",
    "simple",
    "job",
    "click",
    "apply",
    "click",
    "save",
    "let",
    "try",
    "build",
    "job",
    "order",
    "build",
    "job",
    "see",
    "option",
    "called",
    "build",
    "click",
    "build",
    "see",
    "job",
    "running",
    "right",
    "see",
    "job",
    "execution",
    "got",
    "completed",
    "see",
    "first",
    "job",
    "got",
    "come",
    "today",
    "let",
    "click",
    "one",
    "button",
    "first",
    "job",
    "execution",
    "click",
    "console",
    "output",
    "see",
    "job",
    "execution",
    "actually",
    "happened",
    "job",
    "got",
    "successfully",
    "completed",
    "see",
    "message",
    "getting",
    "displayed",
    "hello",
    "attacker",
    "simple",
    "way",
    "see",
    "create",
    "first",
    "job",
    "validate",
    "job",
    "bots",
    "fully",
    "completed",
    "let",
    "try",
    "create",
    "one",
    "job",
    "try",
    "see",
    "works",
    "let",
    "say",
    "want",
    "print",
    "today",
    "date",
    "example",
    "let",
    "say",
    "job",
    "example",
    "freestyle",
    "project",
    "click",
    "ok",
    "click",
    "build",
    "execute",
    "shell",
    "let",
    "say",
    "echo",
    "hello",
    "let",
    "say",
    "date",
    "want",
    "store",
    "output",
    "slash",
    "temp",
    "slash",
    "temp",
    "slash",
    "let",
    "click",
    "apply",
    "click",
    "save",
    "let",
    "click",
    "build",
    "see",
    "job",
    "afterwards",
    "successful",
    "let",
    "click",
    "click",
    "console",
    "output",
    "see",
    "successfully",
    "printed",
    "output",
    "got",
    "completed",
    "see",
    "jobs",
    "execute",
    "done",
    "specific",
    "directory",
    "structure",
    "stringkin",
    "server",
    "go",
    "jenkins",
    "server",
    "example",
    "go",
    "inside",
    "directory",
    "structure",
    "ls",
    "see",
    "job",
    "got",
    "executed",
    "director",
    "structure",
    "job",
    "similarly",
    "go",
    "temp",
    "directory",
    "structure",
    "ls",
    "see",
    "ran",
    "job",
    "gave",
    "date",
    "printed",
    "edu",
    "wake",
    "file",
    "cat",
    "file",
    "name",
    "displaying",
    "today",
    "data",
    "simple",
    "example",
    "whatever",
    "jobs",
    "execute",
    "gets",
    "actually",
    "executed",
    "jenkins",
    "server",
    "seen",
    "front",
    "end",
    "going",
    "done",
    "part",
    "jenkins",
    "strategy",
    "introduce",
    "source",
    "code",
    "management",
    "integration",
    "jenkins",
    "example",
    "let",
    "say",
    "got",
    "code",
    "versioning",
    "tool",
    "system",
    "let",
    "say",
    "like",
    "git",
    "sub",
    "version",
    "bitbucket",
    "download",
    "data",
    "go",
    "job",
    "create",
    "new",
    "job",
    "let",
    "click",
    "configure",
    "go",
    "source",
    "code",
    "management",
    "see",
    "option",
    "called",
    "git",
    "define",
    "github",
    "repository",
    "path",
    "want",
    "download",
    "data",
    "git",
    "repository",
    "using",
    "private",
    "repository",
    "add",
    "get",
    "credentials",
    "particular",
    "branch",
    "want",
    "download",
    "clone",
    "code",
    "even",
    "add",
    "multiple",
    "git",
    "branch",
    "want",
    "get",
    "data",
    "things",
    "works",
    "jenkins",
    "another",
    "beauty",
    "jenkins",
    "build",
    "triggers",
    "every",
    "time",
    "build",
    "job",
    "want",
    "go",
    "manually",
    "run",
    "job",
    "automate",
    "process",
    "using",
    "simple",
    "tasks",
    "like",
    "build",
    "periodically",
    "define",
    "schedule",
    "want",
    "jobs",
    "run",
    "schedule",
    "defined",
    "con",
    "tab",
    "basis",
    "like",
    "every",
    "five",
    "minutes",
    "every",
    "10",
    "minutes",
    "every",
    "hours",
    "day",
    "define",
    "quant",
    "tab",
    "entry",
    "accordingly",
    "jobs",
    "automatically",
    "particular",
    "schedule",
    "manner",
    "want",
    "make",
    "life",
    "simpler",
    "want",
    "run",
    "job",
    "every",
    "time",
    "new",
    "commit",
    "developer",
    "makes",
    "go",
    "option",
    "poll",
    "scm",
    "polo",
    "option",
    "every",
    "time",
    "new",
    "commit",
    "happens",
    "made",
    "developer",
    "specific",
    "schedule",
    "check",
    "new",
    "commit",
    "job",
    "build",
    "new",
    "comment",
    "pole",
    "scm",
    "trigger",
    "job",
    "automate",
    "things",
    "jenkins",
    "build",
    "job",
    "try",
    "get",
    "sort",
    "pipeline",
    "create",
    "pipeline",
    "basis",
    "multiple",
    "scenarios",
    "say",
    "scenarios",
    "whatsapp",
    "talk",
    "example",
    "let",
    "say",
    "want",
    "next",
    "job",
    "executed",
    "build",
    "stable",
    "unstable",
    "failed",
    "specify",
    "scenario",
    "say",
    "job",
    "want",
    "trigger",
    "example",
    "want",
    "interlink",
    "job",
    "2",
    "job",
    "fund",
    "give",
    "job",
    "inter",
    "build",
    "job",
    "build",
    "job",
    "one",
    "trigger",
    "job",
    "one",
    "job",
    "2",
    "stable",
    "like",
    "creating",
    "sort",
    "interdependent",
    "jobs",
    "previous",
    "job",
    "execution",
    "stable",
    "successful",
    "go",
    "next",
    "job",
    "otherwise",
    "skip",
    "next",
    "job",
    "build",
    "sort",
    "pipeline",
    "using",
    "jenkins",
    "jenkins",
    "slave",
    "nodes",
    "master",
    "slave",
    "hierarchy",
    "node",
    "machine",
    "cloud",
    "vmos",
    "example",
    "jenkins",
    "mass",
    "server",
    "deployed",
    "data",
    "center",
    "slave",
    "machine",
    "running",
    "aws",
    "cloud",
    "azure",
    "cloud",
    "even",
    "good",
    "jenkins",
    "jenkins",
    "guys",
    "completely",
    "open",
    "source",
    "automotive",
    "software",
    "cost",
    "using",
    "licensing",
    "cost",
    "linked",
    "automate",
    "things",
    "deploy",
    "one",
    "single",
    "code",
    "pipeline",
    "going",
    "see",
    "example",
    "create",
    "pipeline",
    "type",
    "using",
    "pipeline",
    "make",
    "sure",
    "may",
    "1",
    "installed",
    "present",
    "environment",
    "let",
    "go",
    "jenkins",
    "setup",
    "installed",
    "configured",
    "jenkins",
    "click",
    "new",
    "items",
    "previously",
    "create",
    "new",
    "job",
    "something",
    "give",
    "name",
    "let",
    "say",
    "give",
    "name",
    "code",
    "select",
    "option",
    "pipeline",
    "click",
    "ok",
    "going",
    "scroll",
    "see",
    "approach",
    "called",
    "pipeline",
    "script",
    "okay",
    "basically",
    "write",
    "script",
    "want",
    "deploy",
    "pipeline",
    "example",
    "scenario",
    "see",
    "created",
    "scripted",
    "pipeline",
    "three",
    "steps",
    "see",
    "three",
    "stages",
    "code",
    "deployment",
    "first",
    "preparing",
    "code",
    "see",
    "downloading",
    "code",
    "git",
    "repo",
    "git",
    "repository",
    "define",
    "github",
    "repo",
    "path",
    "want",
    "port",
    "downloaded",
    "specify",
    "whichever",
    "github",
    "path",
    "want",
    "use",
    "next",
    "see",
    "defined",
    "environment",
    "variable",
    "build",
    "code",
    "getting",
    "downloaded",
    "preparation",
    "step",
    "named",
    "stage",
    "build",
    "see",
    "running",
    "bin",
    "mvn",
    "default",
    "11",
    "directory",
    "trying",
    "build",
    "particular",
    "piece",
    "code",
    "code",
    "gets",
    "built",
    "trying",
    "combine",
    "code",
    "create",
    "artifact",
    "file",
    "jar",
    "file",
    "define",
    "whatever",
    "format",
    "output",
    "want",
    "jar",
    "file",
    "zip",
    "file",
    "war",
    "file",
    "anything",
    "defined",
    "approach",
    "let",
    "click",
    "apply",
    "let",
    "click",
    "save",
    "let",
    "see",
    "pipeline",
    "looks",
    "like",
    "click",
    "build",
    "see",
    "different",
    "different",
    "stages",
    "happen",
    "first",
    "one",
    "preparation",
    "stage",
    "stage",
    "code",
    "would",
    "pit",
    "pulled",
    "git",
    "repo",
    "build",
    "side",
    "finally",
    "receive",
    "results",
    "something",
    "happened",
    "let",
    "click",
    "job",
    "let",
    "click",
    "console",
    "output",
    "see",
    "first",
    "stage",
    "happened",
    "pulling",
    "data",
    "git",
    "repository",
    "public",
    "report",
    "code",
    "need",
    "specified",
    "data",
    "got",
    "cloned",
    "downloaded",
    "git",
    "repository",
    "data",
    "downloaded",
    "tried",
    "combine",
    "uses",
    "different",
    "different",
    "event",
    "plugin",
    "like",
    "compiler",
    "plugin",
    "test",
    "report",
    "mayweight",
    "surefire",
    "plugin",
    "runs",
    "test",
    "queues",
    "see",
    "ran",
    "six",
    "test",
    "cases",
    "failures",
    "particular",
    "diaper",
    "structure",
    "server",
    "install",
    "jenkins",
    "go",
    "inside",
    "active",
    "structure",
    "install",
    "jenkins",
    "click",
    "ls",
    "see",
    "jar",
    "file",
    "code",
    "done",
    "using",
    "simple",
    "jenkins",
    "pipeline",
    "automate",
    "entire",
    "process",
    "compiling",
    "packaging",
    "building",
    "unit",
    "testing",
    "think",
    "took",
    "less",
    "minute",
    "entire",
    "thing",
    "happen",
    "probably",
    "couple",
    "seconds",
    "entire",
    "step",
    "level",
    "jenkins",
    "make",
    "life",
    "easy",
    "overall",
    "took",
    "says",
    "seconds",
    "seconds",
    "pulled",
    "code",
    "vcs",
    "abortion",
    "control",
    "system",
    "compiled",
    "packaged",
    "tested",
    "everything",
    "looks",
    "good",
    "packaged",
    "code",
    "chart",
    "file",
    "jenkins",
    "helps",
    "us",
    "make",
    "life",
    "easier",
    "music",
    "continuous",
    "integration",
    "like",
    "software",
    "development",
    "life",
    "cycle",
    "work",
    "see",
    "pipeline",
    "logical",
    "demonstration",
    "software",
    "move",
    "along",
    "various",
    "phases",
    "stages",
    "life",
    "cycle",
    "delivered",
    "customer",
    "live",
    "imagine",
    "going",
    "build",
    "website",
    "going",
    "deployed",
    "live",
    "web",
    "servers",
    "product",
    "website",
    "web",
    "app",
    "set",
    "developers",
    "responsible",
    "writing",
    "code",
    "go",
    "build",
    "web",
    "app",
    "website",
    "team",
    "developers",
    "write",
    "code",
    "commit",
    "code",
    "version",
    "control",
    "system",
    "like",
    "get",
    "svn",
    "goes",
    "build",
    "phase",
    "first",
    "phase",
    "pipeline",
    "developers",
    "put",
    "code",
    "code",
    "goes",
    "version",
    "control",
    "system",
    "proper",
    "version",
    "tags",
    "know",
    "build",
    "kind",
    "version",
    "tag",
    "commit",
    "happens",
    "find",
    "error",
    "go",
    "particular",
    "version",
    "check",
    "comment",
    "version",
    "control",
    "system",
    "face",
    "done",
    "goes",
    "build",
    "phase",
    "compile",
    "code",
    "get",
    "various",
    "features",
    "code",
    "various",
    "branches",
    "repositories",
    "merge",
    "finally",
    "compiler",
    "compile",
    "nothing",
    "build",
    "phase",
    "build",
    "phase",
    "happening",
    "code",
    "taken",
    "version",
    "control",
    "system",
    "compiled",
    "know",
    "code",
    "features",
    "merged",
    "compiled",
    "together",
    "build",
    "phase",
    "done",
    "move",
    "testing",
    "phase",
    "testing",
    "phase",
    "various",
    "kind",
    "testing",
    "depending",
    "type",
    "company",
    "depending",
    "type",
    "product",
    "company",
    "delivering",
    "one",
    "tests",
    "testing",
    "phase",
    "unit",
    "test",
    "happens",
    "unit",
    "test",
    "break",
    "complete",
    "software",
    "small",
    "little",
    "chunks",
    "complete",
    "software",
    "divided",
    "chunks",
    "based",
    "different",
    "paths",
    "every",
    "part",
    "code",
    "divided",
    "small",
    "individual",
    "units",
    "understand",
    "works",
    "test",
    "completed",
    "assurance",
    "particular",
    "part",
    "working",
    "every",
    "part",
    "tested",
    "one",
    "test",
    "performed",
    "integration",
    "testing",
    "happens",
    "integration",
    "testing",
    "individually",
    "tested",
    "paths",
    "integrated",
    "together",
    "seen",
    "work",
    "software",
    "many",
    "features",
    "work",
    "tested",
    "integration",
    "testing",
    "testing",
    "phase",
    "done",
    "next",
    "move",
    "deploy",
    "phase",
    "stage",
    "deploy",
    "software",
    "onto",
    "staging",
    "area",
    "test",
    "server",
    "going",
    "view",
    "code",
    "deploy",
    "phase",
    "code",
    "deployed",
    "successfully",
    "run",
    "another",
    "set",
    "strategy",
    "tests",
    "think",
    "parts",
    "working",
    "everything",
    "fine",
    "finally",
    "think",
    "acceptable",
    "deployed",
    "onto",
    "production",
    "stage",
    "right",
    "meanwhile",
    "every",
    "step",
    "error",
    "development",
    "team",
    "fixes",
    "particular",
    "bug",
    "pushes",
    "version",
    "control",
    "system",
    "goes",
    "back",
    "complete",
    "pipeline",
    "error",
    "reported",
    "testing",
    "feedback",
    "goes",
    "back",
    "dev",
    "team",
    "fix",
    "particular",
    "product",
    "goes",
    "complete",
    "pipeline",
    "goes",
    "build",
    "phase",
    "testing",
    "phase",
    "deployed",
    "onto",
    "plot",
    "servers",
    "every",
    "phase",
    "moves",
    "throughout",
    "life",
    "cycle",
    "unless",
    "get",
    "code",
    "product",
    "deployed",
    "production",
    "server",
    "measure",
    "validate",
    "code",
    "pipeline",
    "logical",
    "step",
    "series",
    "steps",
    "define",
    "software",
    "development",
    "life",
    "cycle",
    "occurs",
    "guys",
    "ci",
    "cd",
    "pipeline",
    "know",
    "brief",
    "stages",
    "ci",
    "cd",
    "pipeline",
    "let",
    "tell",
    "exactly",
    "continuous",
    "integration",
    "let",
    "consider",
    "scenario",
    "team",
    "five",
    "developers",
    "building",
    "website",
    "many",
    "features",
    "let",
    "save",
    "website",
    "shopping",
    "website",
    "right",
    "know",
    "shopping",
    "website",
    "many",
    "pages",
    "like",
    "know",
    "user",
    "details",
    "past",
    "orders",
    "shopping",
    "carts",
    "whatever",
    "product",
    "person",
    "added",
    "card",
    "finally",
    "also",
    "checkout",
    "page",
    "right",
    "different",
    "pages",
    "known",
    "features",
    "software",
    "multiple",
    "features",
    "combine",
    "speeches",
    "merge",
    "single",
    "version",
    "control",
    "system",
    "merge",
    "various",
    "feature",
    "branches",
    "code",
    "make",
    "single",
    "pool",
    "code",
    "compromising",
    "features",
    "various",
    "branches",
    "committed",
    "developers",
    "build",
    "product",
    "move",
    "testing",
    "phase",
    "basically",
    "combining",
    "feature",
    "branches",
    "feature",
    "codes",
    "single",
    "branch",
    "combine",
    "successfully",
    "moving",
    "testing",
    "phase",
    "merge",
    "code",
    "build",
    "code",
    "get",
    "single",
    "unit",
    "software",
    "nothing",
    "integration",
    "integrating",
    "means",
    "putting",
    "code",
    "together",
    "contributing",
    "developers",
    "merging",
    "code",
    "building",
    "whole",
    "must",
    "wondering",
    "call",
    "continuous",
    "integration",
    "reason",
    "everything",
    "happens",
    "devops",
    "continuously",
    "everything",
    "automatic",
    "soon",
    "person",
    "commits",
    "code",
    "version",
    "control",
    "system",
    "continuously",
    "starts",
    "merging",
    "process",
    "continuously",
    "starts",
    "also",
    "building",
    "process",
    "simultaneously",
    "reason",
    "known",
    "continuous",
    "integration",
    "nobody",
    "wait",
    "anything",
    "stage",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "move",
    "various",
    "stages",
    "pipeline",
    "finally",
    "delivered",
    "product",
    "soon",
    "passes",
    "test",
    "new",
    "features",
    "become",
    "functional",
    "used",
    "final",
    "area",
    "product",
    "everything",
    "happens",
    "continuous",
    "way",
    "product",
    "built",
    "product",
    "tested",
    "product",
    "deployed",
    "onto",
    "product",
    "servers",
    "since",
    "continuously",
    "integrated",
    "built",
    "tested",
    "deployed",
    "delivered",
    "process",
    "short",
    "known",
    "ci",
    "cd",
    "process",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "place",
    "deployable",
    "unit",
    "path",
    "called",
    "pipeline",
    "mean",
    "deployable",
    "unit",
    "part",
    "mean",
    "part",
    "production",
    "servers",
    "deployed",
    "onto",
    "live",
    "service",
    "understood",
    "ci",
    "cd",
    "pipeline",
    "let",
    "show",
    "real",
    "life",
    "use",
    "case",
    "company",
    "known",
    "capital",
    "one",
    "capital",
    "one",
    "one",
    "brands",
    "america",
    "among",
    "top",
    "10",
    "largest",
    "banks",
    "nations",
    "deposits",
    "offers",
    "wide",
    "range",
    "financial",
    "products",
    "services",
    "commercial",
    "clients",
    "small",
    "businesses",
    "individual",
    "consumers",
    "online",
    "inline",
    "branch",
    "locations",
    "company",
    "founded",
    "vision",
    "power",
    "id",
    "testing",
    "could",
    "harmless",
    "bring",
    "highly",
    "customized",
    "financial",
    "products",
    "directly",
    "customers",
    "initial",
    "challenge",
    "increase",
    "automation",
    "ensuring",
    "stability",
    "scalability",
    "security",
    "continuous",
    "integration",
    "practices",
    "becoming",
    "increasingly",
    "mainstream",
    "capital",
    "one",
    "formed",
    "continuous",
    "delivery",
    "tools",
    "team",
    "part",
    "restructuring",
    "company",
    "technical",
    "organization",
    "team",
    "created",
    "support",
    "thousands",
    "developers",
    "providing",
    "solid",
    "service",
    "helps",
    "deliver",
    "software",
    "applications",
    "quickly",
    "agile",
    "fashion",
    "platform",
    "perspective",
    "technical",
    "makeup",
    "extremely",
    "flexible",
    "meet",
    "wide",
    "variety",
    "use",
    "cases",
    "also",
    "stable",
    "scalable",
    "financial",
    "services",
    "company",
    "capital",
    "one",
    "needed",
    "platform",
    "secure",
    "promote",
    "improved",
    "security",
    "applications",
    "built",
    "objectives",
    "mind",
    "new",
    "shared",
    "continuous",
    "delivery",
    "tools",
    "team",
    "sought",
    "implement",
    "ci",
    "cd",
    "practices",
    "supported",
    "security",
    "practices",
    "without",
    "stifling",
    "developer",
    "innovation",
    "reference",
    "speed",
    "security",
    "solution",
    "found",
    "establish",
    "platform",
    "ci",
    "cd",
    "deliver",
    "quality",
    "software",
    "shorter",
    "time",
    "market",
    "shared",
    "continuous",
    "delivery",
    "tools",
    "team",
    "established",
    "internal",
    "platform",
    "automating",
    "bills",
    "testing",
    "deployments",
    "based",
    "jenkins",
    "platform",
    "used",
    "access",
    "control",
    "plugin",
    "implement",
    "authorization",
    "strategy",
    "security",
    "roles",
    "assigned",
    "group",
    "users",
    "initial",
    "platform",
    "rollout",
    "team",
    "made",
    "incremental",
    "refinements",
    "time",
    "improve",
    "operational",
    "efficiency",
    "decoupled",
    "jenkins",
    "agents",
    "masters",
    "giving",
    "ability",
    "scale",
    "masters",
    "agents",
    "independently",
    "using",
    "amazon",
    "web",
    "services",
    "team",
    "began",
    "using",
    "jenkins",
    "operations",
    "center",
    "manage",
    "multiple",
    "masters",
    "reduce",
    "administrative",
    "time",
    "ensuring",
    "compliance",
    "version",
    "consistency",
    "update",
    "centers",
    "team",
    "settled",
    "single",
    "default",
    "environment",
    "groups",
    "top",
    "infrastructure",
    "created",
    "team",
    "common",
    "implementation",
    "pipeline",
    "layer",
    "also",
    "created",
    "use",
    "ci",
    "cd",
    "pipeline",
    "know",
    "solve",
    "challenges",
    "implementing",
    "ci",
    "cd",
    "pipeline",
    "saw",
    "90",
    "pipeline",
    "automated",
    "increased",
    "deployment",
    "frequency",
    "1300",
    "percent",
    "huge",
    "number",
    "jenkins",
    "platform",
    "created",
    "service",
    "developers",
    "scalable",
    "stable",
    "result",
    "time",
    "developers",
    "would",
    "spent",
    "managing",
    "infrastructure",
    "spent",
    "developing",
    "business",
    "applications",
    "obviously",
    "said",
    "increased",
    "deployment",
    "frequency",
    "year",
    "year",
    "right",
    "also",
    "seen",
    "quality",
    "security",
    "repeatable",
    "processes",
    "ensured",
    "implemented",
    "consistent",
    "repeatable",
    "processes",
    "automated",
    "fashion",
    "every",
    "time",
    "developer",
    "wanted",
    "comment",
    "know",
    "every",
    "time",
    "developer",
    "wanted",
    "deploy",
    "something",
    "produced",
    "secure",
    "software",
    "enabling",
    "deliver",
    "faster",
    "guys",
    "use",
    "case",
    "capital",
    "one",
    "really",
    "clear",
    "right",
    "face",
    "challenges",
    "solve",
    "problems",
    "help",
    "ci",
    "cd",
    "could",
    "clearly",
    "see",
    "evident",
    "results",
    "discussion",
    "must",
    "also",
    "observed",
    "mentioning",
    "jenkins",
    "platform",
    "right",
    "think",
    "use",
    "jenkins",
    "anything",
    "else",
    "think",
    "capital",
    "one",
    "went",
    "jenkins",
    "platform",
    "important",
    "jenkins",
    "really",
    "good",
    "automation",
    "tool",
    "use",
    "jenkins",
    "gon",
    "na",
    "help",
    "us",
    "let",
    "know",
    "jenkins",
    "provides",
    "us",
    "various",
    "interfaces",
    "tools",
    "order",
    "automate",
    "entire",
    "process",
    "entire",
    "process",
    "mean",
    "process",
    "complete",
    "development",
    "life",
    "cycle",
    "happens",
    "suppose",
    "get",
    "repository",
    "development",
    "team",
    "commits",
    "code",
    "jenkins",
    "takes",
    "jenkins",
    "pull",
    "code",
    "move",
    "commit",
    "phase",
    "code",
    "committed",
    "every",
    "branch",
    "jenkin",
    "moves",
    "goes",
    "build",
    "phase",
    "compile",
    "code",
    "code",
    "compiled",
    "code",
    "validated",
    "reviewed",
    "code",
    "tested",
    "tests",
    "done",
    "finally",
    "packaged",
    "application",
    "could",
    "either",
    "war",
    "file",
    "jar",
    "file",
    "jenkins",
    "going",
    "pull",
    "code",
    "version",
    "control",
    "system",
    "going",
    "perform",
    "build",
    "going",
    "compile",
    "code",
    "going",
    "validate",
    "code",
    "going",
    "review",
    "complete",
    "code",
    "done",
    "perform",
    "unit",
    "testing",
    "integration",
    "testing",
    "finally",
    "package",
    "application",
    "war",
    "file",
    "jar",
    "file",
    "ready",
    "delivered",
    "jenkins",
    "helps",
    "us",
    "must",
    "understood",
    "tool",
    "basic",
    "continuous",
    "integration",
    "said",
    "jenkins",
    "role",
    "till",
    "application",
    "packaged",
    "delivered",
    "need",
    "tools",
    "deliver",
    "product",
    "right",
    "know",
    "lot",
    "theory",
    "cicd",
    "pipeline",
    "know",
    "tools",
    "cicd",
    "pipeline",
    "jenkins",
    "docker",
    "let",
    "show",
    "practically",
    "ci",
    "cd",
    "pipeline",
    "created",
    "executed",
    "right",
    "let",
    "get",
    "started",
    "going",
    "build",
    "cicd",
    "pipeline",
    "using",
    "jenkins",
    "docker",
    "let",
    "open",
    "virtualbox",
    "manager",
    "installed",
    "jenkins",
    "system",
    "let",
    "go",
    "virtual",
    "box",
    "start",
    "creating",
    "pipeline",
    "let",
    "run",
    "jenkins",
    "service",
    "docker",
    "right",
    "let",
    "open",
    "terminal",
    "let",
    "enable",
    "jenkins",
    "service",
    "docker",
    "service",
    "creating",
    "pipeline",
    "let",
    "type",
    "command",
    "type",
    "systemctl",
    "start",
    "jenkins",
    "ask",
    "authentication",
    "type",
    "password",
    "type",
    "system",
    "ctl",
    "enable",
    "jenkins",
    "see",
    "got",
    "privileges",
    "entered",
    "command",
    "super",
    "user",
    "wish",
    "enter",
    "command",
    "super",
    "user",
    "type",
    "sudo",
    "command",
    "type",
    "sudo",
    "system",
    "ctl",
    "enable",
    "jenkins",
    "asked",
    "password",
    "let",
    "type",
    "password",
    "see",
    "jenkins",
    "server",
    "enabled",
    "also",
    "want",
    "docker",
    "run",
    "type",
    "system",
    "ctl",
    "start",
    "docker",
    "asking",
    "authentication",
    "type",
    "password",
    "docker",
    "started",
    "jankit",
    "service",
    "docker",
    "started",
    "let",
    "open",
    "jenkins",
    "dashboard",
    "open",
    "local",
    "host",
    "let",
    "open",
    "jenkins",
    "dashboard",
    "open",
    "jenkins",
    "dashboard",
    "jenkins",
    "always",
    "asks",
    "user",
    "id",
    "password",
    "mention",
    "user",
    "id",
    "password",
    "click",
    "login",
    "right",
    "jenkins",
    "dashboard",
    "going",
    "going",
    "create",
    "pipeline",
    "using",
    "free",
    "jobs",
    "first",
    "job",
    "would",
    "build",
    "project",
    "second",
    "job",
    "would",
    "test",
    "project",
    "third",
    "job",
    "would",
    "finally",
    "deploy",
    "project",
    "creating",
    "free",
    "jobs",
    "let",
    "show",
    "create",
    "new",
    "jobs",
    "go",
    "new",
    "item",
    "type",
    "job",
    "names",
    "let",
    "put",
    "job",
    "name",
    "job1",
    "choose",
    "freestyle",
    "project",
    "click",
    "ok",
    "done",
    "go",
    "back",
    "dashboard",
    "create",
    "two",
    "jobs",
    "similarly",
    "job",
    "2",
    "job",
    "let",
    "type",
    "name",
    "job2",
    "choose",
    "freestyle",
    "project",
    "click",
    "ok",
    "comes",
    "configuration",
    "part",
    "tell",
    "configure",
    "soon",
    "similarly",
    "create",
    "new",
    "job",
    "job",
    "free",
    "let",
    "go",
    "back",
    "dashboard",
    "see",
    "three",
    "jobs",
    "created",
    "want",
    "create",
    "pipeline",
    "pipeline",
    "pulling",
    "code",
    "git",
    "repository",
    "code",
    "java",
    "web",
    "code",
    "basically",
    "given",
    "development",
    "team",
    "testing",
    "job",
    "2",
    "testing",
    "done",
    "deployed",
    "mention",
    "repositories",
    "url",
    "job",
    "pull",
    "code",
    "let",
    "mention",
    "repositories",
    "url",
    "go",
    "job",
    "one",
    "go",
    "configure",
    "go",
    "source",
    "code",
    "management",
    "tab",
    "go",
    "get",
    "going",
    "mention",
    "repository",
    "url",
    "github",
    "account",
    "mention",
    "repositories",
    "url",
    "repository",
    "files",
    "related",
    "project",
    "jenkins",
    "pull",
    "code",
    "perform",
    "build",
    "test",
    "deploy",
    "operations",
    "ci",
    "cd",
    "pipeline",
    "click",
    "save",
    "apply",
    "similarly",
    "going",
    "two",
    "jobs",
    "also",
    "mentioned",
    "git",
    "repository",
    "three",
    "jobs",
    "configure",
    "jobs",
    "way",
    "performs",
    "build",
    "option",
    "knows",
    "code",
    "compile",
    "installed",
    "respectively",
    "mentioning",
    "github",
    "repository",
    "urls",
    "three",
    "jobs",
    "first",
    "step",
    "build",
    "source",
    "code",
    "get",
    "var",
    "file",
    "executable",
    "file",
    "mean",
    "basically",
    "jenkins",
    "server",
    "pulls",
    "code",
    "gets",
    "repository",
    "uses",
    "maven",
    "install",
    "package",
    "mention",
    "command",
    "maven",
    "install",
    "maven",
    "installs",
    "dependencies",
    "required",
    "compile",
    "application",
    "application",
    "passes",
    "tests",
    "successfully",
    "use",
    "docker",
    "deploy",
    "process",
    "ci",
    "cd",
    "pipeline",
    "going",
    "use",
    "let",
    "go",
    "job",
    "one",
    "configure",
    "first",
    "let",
    "open",
    "job",
    "one",
    "go",
    "configure",
    "option",
    "go",
    "build",
    "option",
    "go",
    "add",
    "build",
    "step",
    "choose",
    "execute",
    "shell",
    "going",
    "execute",
    "shell",
    "commands",
    "mention",
    "required",
    "commands",
    "required",
    "commands",
    "would",
    "know",
    "mention",
    "directory",
    "web",
    "code",
    "also",
    "mentioned",
    "install",
    "want",
    "install",
    "dependencies",
    "required",
    "compile",
    "project",
    "let",
    "mention",
    "commands",
    "see",
    "mentioned",
    "required",
    "commands",
    "first",
    "command",
    "change",
    "directory",
    "web",
    "code",
    "directory",
    "want",
    "code",
    "work",
    "using",
    "command",
    "maven",
    "install",
    "install",
    "dependencies",
    "required",
    "compile",
    "code",
    "want",
    "move",
    "testing",
    "phase",
    "testing",
    "performed",
    "going",
    "change",
    "directly",
    "testing",
    "phase",
    "verify",
    "testing",
    "results",
    "help",
    "command",
    "mention",
    "job",
    "one",
    "mentioned",
    "save",
    "job",
    "one",
    "let",
    "configure",
    "job",
    "2",
    "job",
    "2",
    "want",
    "testing",
    "done",
    "want",
    "copied",
    "docker",
    "file",
    "application",
    "deployed",
    "onto",
    "plot",
    "servers",
    "go",
    "onto",
    "option",
    "configure",
    "go",
    "build",
    "option",
    "go",
    "add",
    "build",
    "step",
    "choose",
    "execute",
    "shell",
    "mention",
    "required",
    "code",
    "job",
    "one",
    "built",
    "tested",
    "want",
    "application",
    "deployed",
    "onto",
    "product",
    "service",
    "build",
    "docker",
    "container",
    "use",
    "commands",
    "change",
    "directory",
    "cd",
    "java",
    "web",
    "code",
    "build",
    "docker",
    "container",
    "use",
    "command",
    "docker",
    "build",
    "hyphen",
    "devops",
    "pipeline",
    "demo",
    "name",
    "given",
    "give",
    "name",
    "want",
    "click",
    "save",
    "apply",
    "done",
    "let",
    "configure",
    "job",
    "3",
    "final",
    "stage",
    "everything",
    "tested",
    "want",
    "deployed",
    "onto",
    "plot",
    "service",
    "done",
    "check",
    "one",
    "thing",
    "image",
    "created",
    "previously",
    "image",
    "previously",
    "created",
    "remove",
    "old",
    "files",
    "else",
    "created",
    "say",
    "new",
    "image",
    "created",
    "see",
    "container",
    "existing",
    "reply",
    "message",
    "container",
    "existing",
    "right",
    "let",
    "go",
    "build",
    "option",
    "go",
    "add",
    "build",
    "step",
    "go",
    "execute",
    "shell",
    "mention",
    "commands",
    "right",
    "mentioned",
    "required",
    "commands",
    "container",
    "previously",
    "created",
    "job2",
    "devops",
    "pipeline",
    "demo",
    "running",
    "check",
    "previously",
    "existing",
    "existing",
    "remove",
    "files",
    "using",
    "command",
    "rm",
    "print",
    "message",
    "saying",
    "container",
    "exist",
    "make",
    "sure",
    "container",
    "previously",
    "existing",
    "done",
    "save",
    "apply",
    "told",
    "creating",
    "pipeline",
    "means",
    "jobs",
    "must",
    "interconnected",
    "pipeline",
    "know",
    "job",
    "one",
    "built",
    "built",
    "next",
    "job",
    "2",
    "built",
    "built",
    "next",
    "mention",
    "configure",
    "options",
    "jobs",
    "let",
    "go",
    "first",
    "job",
    "job",
    "one",
    "go",
    "configure",
    "option",
    "go",
    "post",
    "build",
    "actions",
    "tab",
    "choose",
    "build",
    "projects",
    "mention",
    "next",
    "job",
    "built",
    "job",
    "one",
    "job",
    "two",
    "right",
    "mention",
    "job",
    "two",
    "save",
    "apply",
    "done",
    "go",
    "back",
    "jenkins",
    "dashboard",
    "go",
    "job2",
    "configure",
    "job",
    "2",
    "mention",
    "job",
    "2",
    "built",
    "built",
    "job",
    "free",
    "go",
    "postbell",
    "actions",
    "go",
    "build",
    "projects",
    "option",
    "mention",
    "jobs",
    "mentioned",
    "post",
    "bill",
    "actions",
    "happen",
    "job",
    "one",
    "successfully",
    "built",
    "automatically",
    "start",
    "building",
    "job",
    "2",
    "done",
    "automatically",
    "start",
    "building",
    "job",
    "free",
    "build",
    "various",
    "jobs",
    "one",
    "said",
    "going",
    "create",
    "pipeline",
    "create",
    "pipeline",
    "go",
    "plus",
    "option",
    "mention",
    "view",
    "name",
    "pipeline",
    "name",
    "suppose",
    "mentioned",
    "devops",
    "pipeline",
    "let",
    "mention",
    "name",
    "click",
    "build",
    "pipeline",
    "view",
    "click",
    "ok",
    "done",
    "said",
    "pipeline",
    "know",
    "start",
    "going",
    "mention",
    "job",
    "one",
    "pipeline",
    "start",
    "go",
    "pipeline",
    "flow",
    "section",
    "mention",
    "initial",
    "job",
    "job",
    "one",
    "already",
    "mentioned",
    "done",
    "click",
    "apply",
    "click",
    "ok",
    "means",
    "pipeline",
    "built",
    "run",
    "pipeline",
    "go",
    "option",
    "run",
    "see",
    "job",
    "one",
    "yellow",
    "means",
    "started",
    "running",
    "job",
    "2",
    "job",
    "3",
    "sequence",
    "see",
    "job",
    "one",
    "successfully",
    "built",
    "let",
    "open",
    "console",
    "output",
    "show",
    "see",
    "git",
    "repository",
    "pulled",
    "code",
    "compiled",
    "maven",
    "dependencies",
    "installed",
    "required",
    "compiling",
    "application",
    "finally",
    "see",
    "test",
    "results",
    "successful",
    "second",
    "job",
    "creating",
    "docker",
    "container",
    "let",
    "run",
    "let",
    "show",
    "docker",
    "container",
    "created",
    "right",
    "see",
    "job",
    "also",
    "successfully",
    "built",
    "see",
    "artifacts",
    "copied",
    "docker",
    "container",
    "created",
    "job",
    "2",
    "also",
    "successful",
    "building",
    "let",
    "wait",
    "job",
    "three",
    "builds",
    "show",
    "deployed",
    "successfully",
    "right",
    "see",
    "job",
    "3",
    "successfully",
    "built",
    "means",
    "ci",
    "cd",
    "pipeline",
    "successful",
    "move",
    "show",
    "output",
    "let",
    "show",
    "console",
    "output",
    "job",
    "3",
    "see",
    "yes",
    "container",
    "exist",
    "previously",
    "new",
    "container",
    "created",
    "right",
    "guys",
    "build",
    "ci",
    "cd",
    "pipeline",
    "let",
    "show",
    "results",
    "go",
    "local",
    "host",
    "see",
    "application",
    "running",
    "fine",
    "guys",
    "know",
    "build",
    "project",
    "compile",
    "code",
    "installing",
    "required",
    "dependencies",
    "done",
    "push",
    "test",
    "phase",
    "product",
    "tested",
    "passes",
    "tests",
    "deployed",
    "using",
    "docker",
    "image",
    "also",
    "successful",
    "deployed",
    "onto",
    "production",
    "see",
    "front",
    "screen",
    "music",
    "since",
    "docker",
    "containerization",
    "platform",
    "important",
    "understand",
    "came",
    "containerization",
    "history",
    "containerization",
    "docker",
    "came",
    "picture",
    "containerization",
    "came",
    "picture",
    "concept",
    "virtualization",
    "basically",
    "using",
    "virtual",
    "machines",
    "virtualization",
    "technique",
    "importing",
    "guest",
    "os",
    "top",
    "operating",
    "system",
    "technique",
    "revelation",
    "beginning",
    "allowed",
    "developers",
    "run",
    "multiple",
    "operating",
    "systems",
    "different",
    "virtual",
    "machines",
    "running",
    "host",
    "operating",
    "system",
    "nothing",
    "eliminated",
    "need",
    "extra",
    "hardware",
    "resources",
    "advantages",
    "virtual",
    "machines",
    "virtualization",
    "many",
    "multiple",
    "oss",
    "could",
    "run",
    "machine",
    "maintenance",
    "recovery",
    "easy",
    "case",
    "failure",
    "conditions",
    "third",
    "point",
    "total",
    "cost",
    "ownership",
    "also",
    "less",
    "due",
    "reduced",
    "need",
    "infrastructure",
    "see",
    "screen",
    "right",
    "see",
    "host",
    "operating",
    "system",
    "multiple",
    "guest",
    "os",
    "running",
    "nothing",
    "virtual",
    "machine",
    "concepts",
    "shortcomings",
    "virtualization",
    "also",
    "running",
    "multiple",
    "virtual",
    "machines",
    "host",
    "os",
    "performance",
    "degradation",
    "guest",
    "os",
    "running",
    "top",
    "host",
    "os",
    "kernel",
    "set",
    "libraries",
    "dependencies",
    "take",
    "large",
    "chunk",
    "system",
    "resources",
    "hard",
    "disk",
    "processor",
    "ram",
    "resources",
    "another",
    "problem",
    "virtual",
    "machine",
    "used",
    "virtualization",
    "takes",
    "lot",
    "time",
    "boot",
    "problem",
    "critical",
    "case",
    "radial",
    "time",
    "applications",
    "drawbacks",
    "always",
    "apart",
    "also",
    "battle",
    "development",
    "production",
    "teams",
    "code",
    "works",
    "development",
    "work",
    "productions",
    "developer",
    "system",
    "set",
    "libraries",
    "kernel",
    "apps",
    "running",
    "whereas",
    "production",
    "team",
    "resources",
    "problem",
    "blame",
    "upon",
    "difference",
    "computing",
    "environment",
    "code",
    "runs",
    "developer",
    "system",
    "might",
    "run",
    "someone",
    "else",
    "computer",
    "led",
    "new",
    "technique",
    "called",
    "containerization",
    "basically",
    "container",
    "brings",
    "virtualization",
    "os",
    "level",
    "virtualization",
    "brings",
    "abstraction",
    "hardware",
    "containerization",
    "brings",
    "abstraction",
    "os",
    "might",
    "notice",
    "containerization",
    "basically",
    "virtualization",
    "efficient",
    "guest",
    "os",
    "utilizes",
    "host",
    "operating",
    "system",
    "shares",
    "relevant",
    "public",
    "libraries",
    "resources",
    "needed",
    "unlike",
    "virtual",
    "machines",
    "application",
    "specific",
    "libraries",
    "binaries",
    "containers",
    "run",
    "host",
    "kernel",
    "app",
    "set",
    "libraries",
    "binaries",
    "little",
    "container",
    "makes",
    "processing",
    "execution",
    "extremely",
    "fast",
    "even",
    "boost",
    "process",
    "takes",
    "fraction",
    "second",
    "case",
    "containerization",
    "containers",
    "share",
    "host",
    "operating",
    "system",
    "hold",
    "application",
    "related",
    "binaries",
    "libraries",
    "lightweight",
    "faster",
    "virtual",
    "machines",
    "see",
    "host",
    "os",
    "host",
    "kernel",
    "shared",
    "different",
    "containers",
    "containers",
    "contain",
    "application",
    "specific",
    "libraries",
    "separate",
    "container",
    "makes",
    "faster",
    "waste",
    "resource",
    "containers",
    "handled",
    "containerization",
    "edition",
    "layer",
    "native",
    "host",
    "os",
    "hence",
    "software",
    "needed",
    "enable",
    "run",
    "containers",
    "host",
    "os",
    "also",
    "containerization",
    "solves",
    "difference",
    "computing",
    "environment",
    "problem",
    "developer",
    "works",
    "containers",
    "instead",
    "virtual",
    "machines",
    "app",
    "required",
    "libraries",
    "binaries",
    "one",
    "container",
    "passed",
    "testing",
    "team",
    "production",
    "team",
    "matter",
    "whether",
    "host",
    "systems",
    "libraries",
    "dependencies",
    "already",
    "present",
    "container",
    "containing",
    "app",
    "know",
    "virtualization",
    "containerization",
    "need",
    "containerization",
    "let",
    "move",
    "ahead",
    "talk",
    "docker",
    "need",
    "docker",
    "challenged",
    "briefly",
    "spoke",
    "earlier",
    "would",
    "like",
    "elaborate",
    "section",
    "project",
    "code",
    "development",
    "lifecycle",
    "different",
    "different",
    "environments",
    "virtual",
    "server",
    "staging",
    "environment",
    "production",
    "environment",
    "qa",
    "environment",
    "code",
    "deploy",
    "today",
    "done",
    "using",
    "vms",
    "virtual",
    "machines",
    "works",
    "developer",
    "certain",
    "developers",
    "write",
    "code",
    "placed",
    "version",
    "control",
    "system",
    "git",
    "could",
    "also",
    "placed",
    "staging",
    "server",
    "depending",
    "organization",
    "infrastructure",
    "organizations",
    "days",
    "use",
    "version",
    "control",
    "system",
    "often",
    "code",
    "placed",
    "version",
    "control",
    "system",
    "code",
    "never",
    "directly",
    "deployed",
    "production",
    "server",
    "usually",
    "first",
    "deployed",
    "lower",
    "lifecycle",
    "server",
    "like",
    "qa",
    "server",
    "staging",
    "server",
    "successful",
    "deployed",
    "production",
    "server",
    "chances",
    "conflicts",
    "increase",
    "piece",
    "code",
    "might",
    "running",
    "staging",
    "server",
    "might",
    "run",
    "production",
    "server",
    "reason",
    "simple",
    "difference",
    "computational",
    "environment",
    "also",
    "known",
    "infrastructure",
    "incompatibility",
    "cases",
    "qa",
    "servers",
    "qa",
    "environment",
    "staging",
    "environment",
    "always",
    "updated",
    "organizations",
    "case",
    "usually",
    "latest",
    "libraries",
    "latest",
    "binaries",
    "latest",
    "jars",
    "jazz",
    "said",
    "production",
    "environment",
    "order",
    "face",
    "challenges",
    "faced",
    "defensive",
    "environment",
    "lack",
    "optimization",
    "resources",
    "use",
    "docker",
    "docker",
    "comes",
    "picture",
    "docker",
    "virtualization",
    "software",
    "level",
    "call",
    "containerization",
    "mentioned",
    "see",
    "containers",
    "bundled",
    "set",
    "libraries",
    "binaries",
    "communicate",
    "fixed",
    "set",
    "protocols",
    "thing",
    "containers",
    "however",
    "operating",
    "systems",
    "great",
    "thing",
    "makes",
    "lightweight",
    "function",
    "little",
    "resources",
    "makes",
    "really",
    "fast",
    "well",
    "exactly",
    "docker",
    "see",
    "screens",
    "two",
    "machines",
    "first",
    "one",
    "three",
    "software",
    "applications",
    "one",
    "angular",
    "based",
    "one",
    "react",
    "based",
    "one",
    "django",
    "based",
    "using",
    "common",
    "resources",
    "systems",
    "libraries",
    "ram",
    "processor",
    "etc",
    "frameworks",
    "allocated",
    "location",
    "memory",
    "different",
    "machine",
    "docker",
    "since",
    "dockerized",
    "machine",
    "dockerized",
    "system",
    "frameworks",
    "binaries",
    "library",
    "required",
    "angular",
    "app",
    "react",
    "app",
    "django",
    "app",
    "put",
    "isolated",
    "container",
    "owners",
    "going",
    "run",
    "independently",
    "without",
    "interfering",
    "another",
    "app",
    "space",
    "framework",
    "stored",
    "opened",
    "add",
    "another",
    "software",
    "application",
    "frameworks",
    "libraries",
    "binaries",
    "etc",
    "docker",
    "meant",
    "tool",
    "designed",
    "make",
    "easier",
    "create",
    "deploy",
    "run",
    "applications",
    "usage",
    "containers",
    "docker",
    "containerization",
    "solution",
    "docker",
    "containers",
    "use",
    "guest",
    "operating",
    "system",
    "use",
    "host",
    "operating",
    "system",
    "top",
    "host",
    "operating",
    "system",
    "docker",
    "engine",
    "help",
    "docker",
    "engine",
    "docker",
    "containers",
    "formed",
    "containers",
    "applications",
    "running",
    "requirements",
    "applications",
    "binaries",
    "libraries",
    "frameworks",
    "jars",
    "etc",
    "also",
    "packaged",
    "container",
    "multiple",
    "containers",
    "running",
    "simultaneously",
    "see",
    "two",
    "containers",
    "example",
    "containers",
    "applications",
    "running",
    "really",
    "ram",
    "containers",
    "containers",
    "allow",
    "developer",
    "package",
    "application",
    "parts",
    "needs",
    "deploy",
    "one",
    "whole",
    "package",
    "basically",
    "lightweight",
    "alternatives",
    "virtual",
    "machines",
    "use",
    "host",
    "operating",
    "system",
    "basically",
    "general",
    "workflow",
    "docker",
    "see",
    "one",
    "way",
    "using",
    "dock",
    "happening",
    "developer",
    "writes",
    "code",
    "defines",
    "application",
    "requirements",
    "dependencies",
    "easy",
    "write",
    "docker",
    "file",
    "docker",
    "file",
    "produces",
    "docker",
    "images",
    "whatever",
    "dependencies",
    "required",
    "particular",
    "application",
    "present",
    "inside",
    "image",
    "specified",
    "many",
    "times",
    "docker",
    "containers",
    "docker",
    "containers",
    "spoke",
    "much",
    "basically",
    "runtime",
    "instances",
    "docker",
    "images",
    "particular",
    "image",
    "uploaded",
    "onto",
    "docker",
    "hub",
    "anyone",
    "pull",
    "image",
    "build",
    "container",
    "docker",
    "hub",
    "nothing",
    "github",
    "docker",
    "like",
    "repository",
    "docker",
    "images",
    "contains",
    "public",
    "well",
    "private",
    "repositories",
    "public",
    "repositories",
    "pull",
    "images",
    "upload",
    "images",
    "well",
    "docker",
    "hub",
    "mentioned",
    "docker",
    "hub",
    "various",
    "teams",
    "qa",
    "team",
    "production",
    "team",
    "pull",
    "images",
    "prepare",
    "containers",
    "see",
    "diagram",
    "shows",
    "great",
    "advantage",
    "docker",
    "whatever",
    "dependencies",
    "required",
    "application",
    "run",
    "present",
    "throughout",
    "software",
    "delivery",
    "life",
    "cycle",
    "recall",
    "initial",
    "problem",
    "vms",
    "basically",
    "application",
    "worked",
    "fine",
    "development",
    "environment",
    "reached",
    "production",
    "environment",
    "working",
    "properly",
    "particular",
    "problem",
    "easily",
    "resolved",
    "help",
    "particular",
    "workflow",
    "environment",
    "throughout",
    "software",
    "delivery",
    "life",
    "cycle",
    "developer",
    "testing",
    "qa",
    "production",
    "moving",
    "next",
    "section",
    "let",
    "look",
    "case",
    "study",
    "containerizing",
    "nasa",
    "land",
    "information",
    "system",
    "framework",
    "using",
    "docker",
    "developed",
    "hydrological",
    "sciences",
    "laboratory",
    "nasa",
    "godad",
    "space",
    "flight",
    "center",
    "gsfc",
    "land",
    "information",
    "system",
    "lis",
    "high",
    "performance",
    "software",
    "framework",
    "terrestrial",
    "hydrology",
    "modeling",
    "data",
    "assimilation",
    "basically",
    "lis",
    "enables",
    "integrating",
    "satellite",
    "observational",
    "products",
    "advanced",
    "modeling",
    "algorithms",
    "extract",
    "land",
    "surface",
    "states",
    "fluxes",
    "framework",
    "difficult",
    "install",
    "due",
    "many",
    "dependencies",
    "specific",
    "versions",
    "software",
    "compilers",
    "situation",
    "created",
    "significant",
    "barrier",
    "entry",
    "domain",
    "scientists",
    "interested",
    "using",
    "software",
    "computing",
    "systems",
    "cloud",
    "addition",
    "requirement",
    "support",
    "multiple",
    "runtime",
    "environments",
    "across",
    "allies",
    "community",
    "created",
    "significant",
    "burden",
    "nasa",
    "team",
    "overcome",
    "challenges",
    "nasa",
    "deployed",
    "lis",
    "using",
    "docker",
    "containers",
    "allowed",
    "installing",
    "entire",
    "software",
    "package",
    "along",
    "dependencies",
    "within",
    "working",
    "runtime",
    "environment",
    "also",
    "used",
    "docker",
    "swarm",
    "shall",
    "learn",
    "later",
    "orchestrate",
    "deployment",
    "cluster",
    "containers",
    "installation",
    "used",
    "take",
    "weeks",
    "months",
    "completed",
    "nasa",
    "officials",
    "minutes",
    "either",
    "cloud",
    "premises",
    "moving",
    "let",
    "look",
    "docker",
    "workflow",
    "architecture",
    "see",
    "front",
    "docker",
    "workflow",
    "docker",
    "engine",
    "uses",
    "client",
    "server",
    "architecture",
    "docker",
    "engine",
    "simply",
    "docker",
    "application",
    "installed",
    "local",
    "machine",
    "client",
    "server",
    "architecture",
    "communicates",
    "using",
    "rest",
    "api",
    "docker",
    "daemon",
    "checks",
    "requests",
    "manage",
    "containers",
    "docker",
    "architecture",
    "includes",
    "docker",
    "client",
    "used",
    "trigger",
    "docker",
    "commands",
    "docker",
    "host",
    "runs",
    "docker",
    "demons",
    "docker",
    "registry",
    "stores",
    "docker",
    "images",
    "docker",
    "daemon",
    "running",
    "docker",
    "host",
    "responsible",
    "images",
    "containers",
    "understand",
    "concept",
    "images",
    "little",
    "later",
    "section",
    "part",
    "docker",
    "components",
    "build",
    "docker",
    "image",
    "use",
    "cli",
    "client",
    "issue",
    "bill",
    "command",
    "docker",
    "daemon",
    "runs",
    "docker",
    "host",
    "docker",
    "demon",
    "build",
    "image",
    "based",
    "inputs",
    "save",
    "registry",
    "either",
    "docker",
    "hub",
    "local",
    "repository",
    "want",
    "create",
    "image",
    "pull",
    "image",
    "docker",
    "hub",
    "would",
    "built",
    "different",
    "users",
    "finally",
    "create",
    "running",
    "instance",
    "docker",
    "image",
    "issue",
    "run",
    "command",
    "cli",
    "client",
    "create",
    "docker",
    "container",
    "basically",
    "overall",
    "architecture",
    "overall",
    "functioning",
    "docker",
    "architecture",
    "move",
    "forward",
    "section",
    "things",
    "clear",
    "see",
    "heart",
    "docker",
    "architecture",
    "basically",
    "docker",
    "engine",
    "docker",
    "engine",
    "simply",
    "docker",
    "application",
    "installed",
    "host",
    "operating",
    "system",
    "host",
    "machine",
    "works",
    "like",
    "client",
    "server",
    "application",
    "uses",
    "server",
    "type",
    "long",
    "running",
    "program",
    "called",
    "daemon",
    "process",
    "second",
    "point",
    "command",
    "line",
    "interface",
    "client",
    "next",
    "component",
    "rest",
    "api",
    "used",
    "communication",
    "cli",
    "client",
    "docker",
    "daemin",
    "linux",
    "based",
    "os",
    "one",
    "docker",
    "client",
    "accessed",
    "terminal",
    "docker",
    "host",
    "runs",
    "docker",
    "daemon",
    "build",
    "docker",
    "images",
    "run",
    "docker",
    "containers",
    "passing",
    "commands",
    "cli",
    "client",
    "docker",
    "image",
    "docker",
    "engine",
    "workflow",
    "let",
    "talk",
    "docker",
    "components",
    "acquainted",
    "hearing",
    "docker",
    "file",
    "builds",
    "docker",
    "image",
    "run",
    "get",
    "docker",
    "container",
    "store",
    "docker",
    "registry",
    "let",
    "go",
    "ahead",
    "look",
    "components",
    "little",
    "depth",
    "shall",
    "first",
    "docker",
    "file",
    "nothing",
    "text",
    "document",
    "contains",
    "commands",
    "developer",
    "call",
    "command",
    "line",
    "assemble",
    "image",
    "basically",
    "create",
    "image",
    "write",
    "docker",
    "file",
    "build",
    "docker",
    "file",
    "basically",
    "set",
    "instructions",
    "creates",
    "docker",
    "image",
    "next",
    "docker",
    "image",
    "compared",
    "template",
    "used",
    "create",
    "docker",
    "container",
    "docker",
    "images",
    "basically",
    "building",
    "blocks",
    "docker",
    "container",
    "docker",
    "images",
    "created",
    "using",
    "build",
    "command",
    "templates",
    "store",
    "mentioned",
    "docker",
    "hub",
    "local",
    "registry",
    "next",
    "building",
    "docker",
    "image",
    "get",
    "docker",
    "container",
    "read",
    "templates",
    "go",
    "ahead",
    "store",
    "docker",
    "hub",
    "local",
    "registry",
    "mentioned",
    "docker",
    "lets",
    "create",
    "share",
    "software",
    "docker",
    "images",
    "also",
    "worry",
    "whether",
    "computer",
    "run",
    "software",
    "docker",
    "image",
    "docker",
    "container",
    "always",
    "run",
    "case",
    "docker",
    "images",
    "use",
    "docker",
    "image",
    "docker",
    "hub",
    "create",
    "new",
    "image",
    "per",
    "requirements",
    "run",
    "container",
    "let",
    "move",
    "next",
    "component",
    "docker",
    "container",
    "docker",
    "containers",
    "ready",
    "applications",
    "created",
    "docker",
    "images",
    "running",
    "instance",
    "docker",
    "image",
    "docker",
    "container",
    "holds",
    "entire",
    "package",
    "needed",
    "run",
    "docker",
    "application",
    "docker",
    "container",
    "happens",
    "ultimate",
    "utility",
    "docker",
    "hence",
    "part",
    "docker",
    "popular",
    "widely",
    "used",
    "talk",
    "applications",
    "every",
    "application",
    "run",
    "inside",
    "container",
    "isolated",
    "application",
    "platform",
    "contains",
    "need",
    "run",
    "application",
    "built",
    "one",
    "images",
    "finally",
    "let",
    "move",
    "docker",
    "registry",
    "storage",
    "component",
    "docker",
    "images",
    "docker",
    "images",
    "stored",
    "could",
    "either",
    "user",
    "local",
    "repository",
    "public",
    "repository",
    "like",
    "docker",
    "hub",
    "allows",
    "multiple",
    "users",
    "collaborate",
    "building",
    "application",
    "even",
    "multiple",
    "teams",
    "within",
    "organization",
    "exchange",
    "share",
    "containers",
    "uploading",
    "docker",
    "hub",
    "helps",
    "control",
    "images",
    "stored",
    "integrates",
    "image",
    "storage",
    "development",
    "workflow",
    "well",
    "docker",
    "hub",
    "mentioned",
    "docker",
    "cloud",
    "repository",
    "similar",
    "github",
    "kind",
    "like",
    "github",
    "docker",
    "images",
    "hope",
    "guys",
    "far",
    "seen",
    "architecture",
    "components",
    "docker",
    "going",
    "talk",
    "two",
    "components",
    "docker",
    "docker",
    "compose",
    "dockers",
    "form",
    "first",
    "let",
    "start",
    "docker",
    "compose",
    "docker",
    "compose",
    "tool",
    "defining",
    "running",
    "docker",
    "applications",
    "basically",
    "means",
    "run",
    "different",
    "multiple",
    "containers",
    "single",
    "service",
    "containers",
    "still",
    "isolated",
    "interact",
    "using",
    "yaml",
    "file",
    "used",
    "configure",
    "application",
    "services",
    "single",
    "command",
    "docker",
    "compose",
    "create",
    "start",
    "services",
    "configuration",
    "great",
    "example",
    "would",
    "microservice",
    "shopping",
    "app",
    "example",
    "take",
    "online",
    "retail",
    "stores",
    "app",
    "could",
    "amazon",
    "could",
    "flipkart",
    "could",
    "audio",
    "idea",
    "behind",
    "app",
    "like",
    "microservice",
    "app",
    "basically",
    "means",
    "multiple",
    "services",
    "one",
    "big",
    "application",
    "services",
    "individually",
    "easier",
    "build",
    "maintain",
    "one",
    "service",
    "failing",
    "entire",
    "app",
    "retail",
    "app",
    "like",
    "amazon",
    "myntra",
    "flipkart",
    "app",
    "choice",
    "multiple",
    "services",
    "like",
    "login",
    "account",
    "product",
    "catalog",
    "service",
    "shopping",
    "cart",
    "service",
    "checkout",
    "service",
    "bare",
    "minimum",
    "services",
    "could",
    "scaled",
    "container",
    "tested",
    "built",
    "fixed",
    "isolated",
    "containers",
    "without",
    "interfering",
    "service",
    "entire",
    "application",
    "using",
    "something",
    "like",
    "docker",
    "compose",
    "connect",
    "isolated",
    "containers",
    "single",
    "service",
    "right",
    "next",
    "thing",
    "want",
    "talk",
    "docker",
    "swarm",
    "docker",
    "swarm",
    "service",
    "allows",
    "create",
    "manage",
    "group",
    "either",
    "physical",
    "virtual",
    "machines",
    "nodes",
    "schedule",
    "containers",
    "nodes",
    "daemon",
    "interacts",
    "others",
    "using",
    "docker",
    "api",
    "dockers",
    "home",
    "basically",
    "technique",
    "create",
    "maintain",
    "cluster",
    "different",
    "docker",
    "engines",
    "services",
    "deployed",
    "node",
    "accessed",
    "nodes",
    "cluster",
    "allows",
    "high",
    "availability",
    "services",
    "auto",
    "load",
    "balancing",
    "decentralization",
    "access",
    "easy",
    "upscaling",
    "downscaling",
    "deployments",
    "rolling",
    "updates",
    "basically",
    "works",
    "manager",
    "nodes",
    "know",
    "status",
    "working",
    "nodes",
    "cluster",
    "worker",
    "nodes",
    "accept",
    "tasks",
    "sent",
    "manager",
    "node",
    "agent",
    "assigned",
    "every",
    "single",
    "node",
    "give",
    "task",
    "updates",
    "manager",
    "finally",
    "workers",
    "communicate",
    "manager",
    "using",
    "api",
    "http",
    "protocol",
    "docker",
    "swarm",
    "works",
    "basically",
    "docker",
    "swarm",
    "orchestration",
    "management",
    "tool",
    "runs",
    "docker",
    "applications",
    "helps",
    "users",
    "creating",
    "deploying",
    "cluster",
    "docker",
    "nodes",
    "node",
    "docker",
    "swarm",
    "docker",
    "daemon",
    "docker",
    "demons",
    "interact",
    "using",
    "docker",
    "api",
    "container",
    "within",
    "swarm",
    "deployed",
    "accessed",
    "nodes",
    "cluster",
    "consider",
    "environment",
    "docker",
    "containers",
    "one",
    "container",
    "fails",
    "use",
    "swarm",
    "correct",
    "failure",
    "docker",
    "swarm",
    "reschedule",
    "containers",
    "node",
    "failures",
    "swarm",
    "node",
    "also",
    "backup",
    "folder",
    "use",
    "restore",
    "data",
    "onto",
    "new",
    "swarm",
    "come",
    "end",
    "workflow",
    "architecture",
    "docker",
    "sure",
    "might",
    "eager",
    "actually",
    "something",
    "docker",
    "let",
    "go",
    "ahead",
    "install",
    "docker",
    "steps",
    "install",
    "docker",
    "ubuntu",
    "linux",
    "systems",
    "ubuntu",
    "systems",
    "using",
    "command",
    "sudo",
    "apt",
    "install",
    "docker",
    "dot",
    "io",
    "ubuntu",
    "systems",
    "install",
    "docker",
    "system",
    "let",
    "go",
    "ahead",
    "start",
    "installation",
    "today",
    "using",
    "ubuntu",
    "distribution",
    "running",
    "oracle",
    "vm",
    "virtualbox",
    "going",
    "start",
    "updating",
    "sudo",
    "apt",
    "update",
    "might",
    "take",
    "little",
    "bit",
    "time",
    "kindly",
    "patient",
    "good",
    "practice",
    "making",
    "installations",
    "setups",
    "machine",
    "right",
    "see",
    "packages",
    "upgraded",
    "go",
    "ahead",
    "install",
    "docker",
    "install",
    "docker",
    "going",
    "use",
    "command",
    "pseudo",
    "ept",
    "install",
    "docker",
    "dot",
    "io",
    "click",
    "also",
    "something",
    "takes",
    "quite",
    "considerable",
    "amount",
    "time",
    "depending",
    "speed",
    "machine",
    "well",
    "speed",
    "internet",
    "forth",
    "understand",
    "one",
    "way",
    "method",
    "comfortable",
    "method",
    "demonstrating",
    "two",
    "three",
    "methods",
    "download",
    "docker",
    "machine",
    "linux",
    "also",
    "install",
    "docker",
    "desktop",
    "windows",
    "case",
    "want",
    "use",
    "virtual",
    "machine",
    "also",
    "use",
    "cloud",
    "platform",
    "ec2",
    "instance",
    "run",
    "docker",
    "commands",
    "shall",
    "showing",
    "later",
    "session",
    "going",
    "start",
    "enable",
    "docker",
    "using",
    "sudo",
    "system",
    "cdl",
    "okay",
    "started",
    "enabled",
    "docker",
    "machines",
    "going",
    "go",
    "ahead",
    "check",
    "docker",
    "version",
    "running",
    "see",
    "docker",
    "version",
    "docker",
    "build",
    "running",
    "right",
    "moving",
    "going",
    "get",
    "section",
    "section",
    "learn",
    "create",
    "django",
    "project",
    "setup",
    "using",
    "docker",
    "deploy",
    "local",
    "host",
    "remember",
    "need",
    "github",
    "account",
    "docker",
    "installed",
    "machine",
    "way",
    "showed",
    "right",
    "going",
    "build",
    "rest",
    "api",
    "python",
    "django",
    "going",
    "create",
    "new",
    "github",
    "project",
    "going",
    "use",
    "store",
    "source",
    "code",
    "recipe",
    "app",
    "api",
    "wonderful",
    "way",
    "show",
    "versatility",
    "docker",
    "found",
    "project",
    "browsing",
    "github",
    "came",
    "conclusion",
    "wonderful",
    "way",
    "show",
    "eclectic",
    "versatile",
    "docker",
    "tool",
    "first",
    "step",
    "would",
    "include",
    "initializing",
    "new",
    "project",
    "github",
    "coming",
    "back",
    "linux",
    "machine",
    "navigating",
    "wish",
    "store",
    "api",
    "going",
    "create",
    "docker",
    "file",
    "using",
    "editor",
    "obviously",
    "use",
    "vi",
    "editor",
    "nano",
    "editor",
    "please",
    "using",
    "editor",
    "working",
    "directory",
    "going",
    "creating",
    "dock",
    "file",
    "requirements",
    "file",
    "docker",
    "compose",
    "file",
    "yaml",
    "file",
    "going",
    "run",
    "app",
    "terminal",
    "basic",
    "breakdown",
    "going",
    "create",
    "django",
    "project",
    "setup",
    "using",
    "docker",
    "let",
    "go",
    "straight",
    "demo",
    "machine",
    "put",
    "action",
    "going",
    "navigate",
    "github",
    "going",
    "create",
    "new",
    "public",
    "project",
    "repository",
    "github",
    "let",
    "create",
    "new",
    "repository",
    "let",
    "call",
    "docker",
    "demo",
    "api",
    "app",
    "description",
    "going",
    "write",
    "demo",
    "app",
    "setup",
    "going",
    "keep",
    "public",
    "going",
    "initialize",
    "readme",
    "file",
    "right",
    "let",
    "go",
    "ahead",
    "create",
    "repository",
    "see",
    "blank",
    "repository",
    "docker",
    "demo",
    "api",
    "app",
    "readme",
    "file",
    "repository",
    "page",
    "going",
    "click",
    "green",
    "button",
    "code",
    "button",
    "copy",
    "url",
    "clone",
    "download",
    "option",
    "going",
    "copy",
    "clipboard",
    "clone",
    "particular",
    "repository",
    "using",
    "terminal",
    "going",
    "move",
    "terminal",
    "going",
    "load",
    "terminal",
    "navigate",
    "directory",
    "want",
    "store",
    "app",
    "maybe",
    "save",
    "going",
    "clone",
    "repository",
    "local",
    "machine",
    "right",
    "done",
    "go",
    "ahead",
    "change",
    "directory",
    "repository",
    "going",
    "use",
    "command",
    "ls",
    "see",
    "repository",
    "cloned",
    "yes",
    "cloned",
    "see",
    "docker",
    "demo",
    "api",
    "app",
    "clone",
    "right",
    "local",
    "machine",
    "going",
    "change",
    "directory",
    "repository",
    "created",
    "typing",
    "command",
    "cd",
    "docker",
    "demo",
    "api",
    "app",
    "going",
    "going",
    "open",
    "project",
    "editor",
    "like",
    "mentioned",
    "use",
    "editor",
    "use",
    "vi",
    "editor",
    "nano",
    "editor",
    "editor",
    "comfortable",
    "going",
    "clear",
    "gon",
    "na",
    "use",
    "nano",
    "editor",
    "create",
    "docker",
    "file",
    "first",
    "nano",
    "docker",
    "file",
    "spaces",
    "docker",
    "file",
    "going",
    "put",
    "code",
    "right",
    "docker",
    "file",
    "first",
    "line",
    "docker",
    "file",
    "image",
    "going",
    "inherit",
    "docker",
    "file",
    "docker",
    "basically",
    "build",
    "images",
    "top",
    "images",
    "benefit",
    "find",
    "image",
    "pretty",
    "much",
    "everything",
    "need",
    "project",
    "add",
    "customized",
    "bits",
    "need",
    "specifications",
    "going",
    "create",
    "docker",
    "file",
    "python",
    "alpine",
    "image",
    "find",
    "head",
    "docker",
    "hub",
    "find",
    "list",
    "available",
    "images",
    "use",
    "base",
    "project",
    "search",
    "python",
    "take",
    "list",
    "items",
    "choose",
    "one",
    "gon",
    "na",
    "use",
    "alpine",
    "image",
    "basically",
    "lightweight",
    "version",
    "docker",
    "alpine",
    "means",
    "runs",
    "python",
    "next",
    "line",
    "optional",
    "usually",
    "maintainer",
    "line",
    "useful",
    "know",
    "maintaining",
    "project",
    "going",
    "leave",
    "one",
    "go",
    "ahead",
    "put",
    "maintenance",
    "line",
    "put",
    "name",
    "company",
    "name",
    "whatever",
    "name",
    "basically",
    "use",
    "keep",
    "track",
    "show",
    "maintaining",
    "docker",
    "image",
    "next",
    "going",
    "set",
    "python",
    "unbuffered",
    "environment",
    "variable",
    "way",
    "set",
    "unbuffered",
    "environment",
    "variable",
    "way",
    "set",
    "environment",
    "variable",
    "docker",
    "build",
    "file",
    "type",
    "env",
    "environment",
    "variable",
    "want",
    "set",
    "going",
    "set",
    "one",
    "called",
    "python",
    "got",
    "capitals",
    "unbuffered",
    "going",
    "set",
    "one",
    "tells",
    "python",
    "run",
    "unbuffered",
    "mode",
    "recommended",
    "mode",
    "running",
    "python",
    "within",
    "docker",
    "containers",
    "reason",
    "allow",
    "python",
    "buffer",
    "outputs",
    "prints",
    "directly",
    "avoid",
    "complications",
    "things",
    "like",
    "running",
    "python",
    "application",
    "going",
    "install",
    "dependencies",
    "going",
    "store",
    "dependencies",
    "list",
    "file",
    "going",
    "create",
    "moment",
    "need",
    "need",
    "copy",
    "file",
    "says",
    "copy",
    "directory",
    "adjacent",
    "docker",
    "file",
    "copy",
    "going",
    "copy",
    "file",
    "going",
    "copy",
    "docker",
    "image",
    "forward",
    "slash",
    "requirement",
    "txt",
    "file",
    "means",
    "next",
    "going",
    "run",
    "pip",
    "install",
    "r",
    "forward",
    "slash",
    "takes",
    "requirements",
    "copied",
    "installs",
    "using",
    "pip",
    "docker",
    "image",
    "next",
    "going",
    "make",
    "directory",
    "within",
    "docker",
    "image",
    "use",
    "store",
    "application",
    "source",
    "code",
    "run",
    "mkdir",
    "forward",
    "slash",
    "app",
    "lowercase",
    "going",
    "type",
    "work",
    "forward",
    "slash",
    "app",
    "going",
    "type",
    "copy",
    "dot",
    "slash",
    "app",
    "space",
    "slash",
    "app",
    "creates",
    "empty",
    "folder",
    "docker",
    "image",
    "called",
    "forward",
    "slash",
    "app",
    "location",
    "switches",
    "default",
    "directory",
    "application",
    "run",
    "using",
    "docker",
    "container",
    "run",
    "starting",
    "particular",
    "location",
    "unless",
    "specify",
    "otherwise",
    "course",
    "next",
    "copies",
    "local",
    "machine",
    "app",
    "folder",
    "app",
    "folder",
    "created",
    "image",
    "allows",
    "us",
    "take",
    "code",
    "created",
    "project",
    "copy",
    "docker",
    "image",
    "run",
    "add",
    "user",
    "hyphen",
    "capital",
    "user",
    "finally",
    "going",
    "switch",
    "user",
    "typing",
    "user",
    "might",
    "little",
    "confusing",
    "added",
    "username",
    "user",
    "user",
    "command",
    "means",
    "says",
    "add",
    "user",
    "creates",
    "user",
    "user",
    "hyphen",
    "says",
    "create",
    "user",
    "going",
    "used",
    "running",
    "applications",
    "basically",
    "home",
    "directory",
    "someone",
    "log",
    "going",
    "used",
    "simply",
    "run",
    "processes",
    "particular",
    "project",
    "finally",
    "user",
    "switches",
    "docker",
    "user",
    "created",
    "reason",
    "security",
    "purposes",
    "image",
    "run",
    "application",
    "using",
    "root",
    "account",
    "recommended",
    "means",
    "someone",
    "compromises",
    "application",
    "root",
    "access",
    "whole",
    "image",
    "go",
    "ahead",
    "malicious",
    "things",
    "whereas",
    "create",
    "separate",
    "user",
    "application",
    "kind",
    "limits",
    "scope",
    "attacker",
    "would",
    "within",
    "docker",
    "container",
    "right",
    "go",
    "ahead",
    "write",
    "save",
    "file",
    "move",
    "ahead",
    "creating",
    "requirements",
    "file",
    "file",
    "look",
    "like",
    "fairly",
    "two",
    "lines",
    "first",
    "line",
    "installing",
    "django",
    "using",
    "version",
    "latest",
    "table",
    "version",
    "could",
    "find",
    "version",
    "going",
    "use",
    "project",
    "type",
    "django",
    "equals",
    "basically",
    "says",
    "install",
    "django",
    "equal",
    "higher",
    "particular",
    "version",
    "take",
    "minor",
    "version",
    "last",
    "number",
    "make",
    "sure",
    "install",
    "latest",
    "available",
    "version",
    "typically",
    "version",
    "security",
    "features",
    "security",
    "fixes",
    "things",
    "like",
    "typically",
    "breaking",
    "changes",
    "confident",
    "application",
    "rebuild",
    "docker",
    "image",
    "latest",
    "security",
    "patches",
    "even",
    "latest",
    "version",
    "okay",
    "next",
    "line",
    "going",
    "install",
    "django",
    "rest",
    "framework",
    "using",
    "way",
    "django",
    "going",
    "make",
    "install",
    "one",
    "less",
    "get",
    "latest",
    "version",
    "whatever",
    "latest",
    "minor",
    "version",
    "time",
    "build",
    "project",
    "going",
    "go",
    "ahead",
    "save",
    "file",
    "well",
    "going",
    "going",
    "go",
    "ahead",
    "create",
    "empty",
    "directory",
    "called",
    "app",
    "docker",
    "file",
    "call",
    "docker",
    "file",
    "run",
    "going",
    "ask",
    "app",
    "folder",
    "going",
    "one",
    "going",
    "face",
    "issues",
    "ls",
    "see",
    "docker",
    "file",
    "requirements",
    "file",
    "app",
    "folder",
    "understand",
    "required",
    "docker",
    "file",
    "us",
    "build",
    "try",
    "copy",
    "without",
    "app",
    "folder",
    "actually",
    "existing",
    "give",
    "error",
    "go",
    "ahead",
    "build",
    "docker",
    "image",
    "already",
    "terminal",
    "terminal",
    "load",
    "terminal",
    "windows",
    "command",
    "prompt",
    "let",
    "make",
    "sure",
    "navigate",
    "project",
    "folder",
    "already",
    "going",
    "type",
    "docker",
    "build",
    "dot",
    "going",
    "going",
    "build",
    "whichever",
    "docker",
    "file",
    "root",
    "project",
    "currently",
    "reason",
    "call",
    "docker",
    "file",
    "first",
    "place",
    "standard",
    "convention",
    "docker",
    "uses",
    "identify",
    "docker",
    "file",
    "within",
    "project",
    "going",
    "wait",
    "complete",
    "fairly",
    "quick",
    "using",
    "alpine",
    "image",
    "lightweight",
    "minimal",
    "image",
    "runs",
    "python",
    "create",
    "docker",
    "file",
    "project",
    "go",
    "ahead",
    "create",
    "docker",
    "compose",
    "configuration",
    "project",
    "going",
    "use",
    "docker",
    "compose",
    "tool",
    "allow",
    "us",
    "run",
    "docker",
    "image",
    "easily",
    "project",
    "location",
    "allows",
    "us",
    "easily",
    "manage",
    "different",
    "services",
    "make",
    "project",
    "example",
    "one",
    "service",
    "might",
    "python",
    "application",
    "run",
    "another",
    "service",
    "might",
    "database",
    "example",
    "let",
    "go",
    "ahead",
    "create",
    "docker",
    "compose",
    "file",
    "project",
    "nano",
    "docker",
    "compose",
    "dot",
    "yaml",
    "yml",
    "yaml",
    "file",
    "contains",
    "configuration",
    "services",
    "make",
    "project",
    "first",
    "line",
    "docker",
    "compose",
    "configuration",
    "file",
    "version",
    "docker",
    "compose",
    "going",
    "writing",
    "file",
    "version",
    "colon",
    "three",
    "next",
    "define",
    "services",
    "make",
    "application",
    "right",
    "need",
    "one",
    "service",
    "python",
    "django",
    "application",
    "services",
    "colon",
    "line",
    "going",
    "type",
    "app",
    "name",
    "service",
    "going",
    "call",
    "going",
    "type",
    "build",
    "context",
    "code",
    "context",
    "says",
    "going",
    "service",
    "called",
    "app",
    "build",
    "section",
    "configuration",
    "going",
    "set",
    "context",
    "dot",
    "current",
    "directory",
    "running",
    "docker",
    "compose",
    "next",
    "going",
    "type",
    "board",
    "configure",
    "duration",
    "going",
    "type",
    "open",
    "speech",
    "marks",
    "8080",
    "host",
    "port",
    "8080",
    "image",
    "going",
    "type",
    "going",
    "add",
    "volume",
    "volume",
    "allows",
    "us",
    "get",
    "updates",
    "make",
    "project",
    "docker",
    "image",
    "real",
    "time",
    "basically",
    "maps",
    "volume",
    "local",
    "machine",
    "docker",
    "container",
    "running",
    "application",
    "means",
    "whenever",
    "change",
    "file",
    "change",
    "something",
    "project",
    "automatically",
    "update",
    "container",
    "good",
    "part",
    "restart",
    "docker",
    "get",
    "changes",
    "effect",
    "dot",
    "slash",
    "app",
    "forward",
    "slash",
    "app",
    "maps",
    "app",
    "directory",
    "project",
    "maps",
    "app",
    "directory",
    "docker",
    "image",
    "command",
    "run",
    "application",
    "docker",
    "container",
    "make",
    "sure",
    "indentation",
    "one",
    "indent",
    "command",
    "starts",
    "type",
    "command",
    "going",
    "use",
    "run",
    "application",
    "sh",
    "hyphen",
    "see",
    "means",
    "going",
    "run",
    "command",
    "using",
    "shell",
    "python",
    "manage",
    "py",
    "run",
    "server",
    "going",
    "run",
    "server",
    "local",
    "host",
    "port",
    "8080",
    "run",
    "django",
    "development",
    "server",
    "available",
    "ip",
    "addresses",
    "run",
    "docker",
    "container",
    "going",
    "run",
    "port",
    "8080",
    "going",
    "mapped",
    "pause",
    "configuration",
    "local",
    "machine",
    "run",
    "application",
    "going",
    "move",
    "terminal",
    "build",
    "docker",
    "compose",
    "file",
    "build",
    "image",
    "using",
    "docker",
    "compose",
    "configuration",
    "take",
    "much",
    "time",
    "going",
    "build",
    "docker",
    "file",
    "going",
    "add",
    "sudo",
    "docker",
    "compose",
    "build",
    "see",
    "successfully",
    "built",
    "clear",
    "going",
    "use",
    "docker",
    "compose",
    "create",
    "project",
    "files",
    "application",
    "either",
    "log",
    "super",
    "user",
    "type",
    "sudo",
    "django",
    "admin",
    "dot",
    "pi",
    "gon",
    "na",
    "start",
    "project",
    "running",
    "command",
    "realize",
    "go",
    "empty",
    "app",
    "folder",
    "folder",
    "created",
    "initially",
    "list",
    "empty",
    "anymore",
    "another",
    "app",
    "folder",
    "contains",
    "app",
    "setup",
    "show",
    "go",
    "files",
    "one",
    "two",
    "three",
    "four",
    "five",
    "python",
    "files",
    "basically",
    "django",
    "apps",
    "entire",
    "setup",
    "docker",
    "created",
    "set",
    "teensy",
    "little",
    "detail",
    "let",
    "open",
    "file",
    "gon",
    "na",
    "go",
    "allowed",
    "hosts",
    "case",
    "empty",
    "close",
    "brackets",
    "go",
    "ahead",
    "add",
    "local",
    "host",
    "put",
    "asterisk",
    "allows",
    "hosts",
    "right",
    "gon",
    "na",
    "gon",
    "na",
    "go",
    "back",
    "deploy",
    "application",
    "terminal",
    "gon",
    "na",
    "go",
    "sudo",
    "docker",
    "compose",
    "see",
    "django",
    "application",
    "running",
    "possible",
    "docker",
    "music",
    "requirements",
    "modern",
    "software",
    "development",
    "known",
    "kubernetes",
    "one",
    "system",
    "fulfill",
    "needs",
    "someone",
    "wants",
    "get",
    "started",
    "kubernetes",
    "definitely",
    "right",
    "place",
    "let",
    "us",
    "start",
    "understanding",
    "really",
    "help",
    "simple",
    "example",
    "imagine",
    "building",
    "web",
    "application",
    "within",
    "web",
    "application",
    "structure",
    "might",
    "monolithic",
    "might",
    "compromise",
    "several",
    "modules",
    "components",
    "even",
    "layers",
    "externally",
    "single",
    "web",
    "application",
    "could",
    "also",
    "say",
    "single",
    "service",
    "despite",
    "different",
    "modules",
    "application",
    "built",
    "deployed",
    "one",
    "service",
    "platform",
    "desktop",
    "personal",
    "computer",
    "mobile",
    "etc",
    "within",
    "single",
    "container",
    "virtual",
    "machine",
    "let",
    "us",
    "assume",
    "web",
    "application",
    "grows",
    "time",
    "becomes",
    "large",
    "extremely",
    "challenging",
    "make",
    "changes",
    "code",
    "accurately",
    "also",
    "size",
    "application",
    "slow",
    "startup",
    "time",
    "moving",
    "want",
    "add",
    "new",
    "updates",
    "web",
    "application",
    "must",
    "redeploy",
    "entire",
    "application",
    "one",
    "process",
    "case",
    "stop",
    "try",
    "restart",
    "service",
    "customers",
    "website",
    "able",
    "access",
    "anything",
    "period",
    "time",
    "could",
    "eventually",
    "lead",
    "potential",
    "loss",
    "money",
    "also",
    "bugs",
    "one",
    "components",
    "bring",
    "entire",
    "process",
    "since",
    "components",
    "application",
    "identical",
    "bugs",
    "definitely",
    "impact",
    "availability",
    "application",
    "sudden",
    "spike",
    "traffic",
    "serve",
    "20",
    "times",
    "number",
    "usual",
    "customers",
    "situation",
    "quickly",
    "deploy",
    "new",
    "servers",
    "takes",
    "lot",
    "effort",
    "later",
    "traffic",
    "dies",
    "normal",
    "level",
    "20",
    "times",
    "number",
    "usual",
    "servers",
    "also",
    "challenging",
    "scale",
    "different",
    "modules",
    "conflicting",
    "updates",
    "resource",
    "requirements",
    "instead",
    "creating",
    "monolithic",
    "application",
    "define",
    "component",
    "separate",
    "loosely",
    "coupled",
    "service",
    "could",
    "virtualize",
    "services",
    "using",
    "docker",
    "container",
    "application",
    "start",
    "easily",
    "services",
    "also",
    "deployed",
    "independently",
    "docker",
    "containers",
    "easily",
    "scale",
    "number",
    "instances",
    "according",
    "applications",
    "requirements",
    "definitely",
    "easy",
    "manage",
    "dealing",
    "three",
    "four",
    "containers",
    "let",
    "say",
    "deal",
    "thousand",
    "containers",
    "really",
    "keep",
    "track",
    "containers",
    "healthy",
    "ones",
    "orchestrating",
    "managing",
    "containers",
    "time",
    "extremely",
    "tedious",
    "task",
    "led",
    "need",
    "container",
    "orchestration",
    "tools",
    "kubernetes",
    "comes",
    "picture",
    "kubernetes",
    "originally",
    "designed",
    "google",
    "maintained",
    "cloud",
    "native",
    "computing",
    "foundation",
    "kubernetes",
    "package",
    "website",
    "files",
    "containers",
    "pods",
    "run",
    "instance",
    "kubernetes",
    "cluster",
    "see",
    "pods",
    "running",
    "nodes",
    "physical",
    "systems",
    "hardware",
    "components",
    "part",
    "kubernetes",
    "cluster",
    "implies",
    "every",
    "service",
    "create",
    "runs",
    "separate",
    "containers",
    "allow",
    "work",
    "manage",
    "services",
    "independently",
    "pods",
    "running",
    "available",
    "node",
    "cluster",
    "enough",
    "resources",
    "pod",
    "work",
    "simple",
    "words",
    "kubernetes",
    "open",
    "source",
    "system",
    "automating",
    "deployment",
    "rolling",
    "updates",
    "scaling",
    "services",
    "managing",
    "containerized",
    "applications",
    "kubernetes",
    "works",
    "amazon",
    "ec2",
    "rackspace",
    "gcp",
    "ibm",
    "cloud",
    "etc",
    "also",
    "hyper",
    "growth",
    "companies",
    "like",
    "github",
    "reworks",
    "cloud",
    "boost",
    "walmart",
    "becoming",
    "acclimated",
    "building",
    "shipping",
    "managing",
    "containers",
    "via",
    "kubernetes",
    "average",
    "anyone",
    "kubernetes",
    "knowledge",
    "expect",
    "earn",
    "5",
    "6",
    "lakhs",
    "per",
    "annum",
    "india",
    "whereas",
    "expect",
    "average",
    "salary",
    "one",
    "forty",
    "thousand",
    "dollars",
    "per",
    "annum",
    "usa",
    "fortune",
    "500",
    "used",
    "kubernetes",
    "demand",
    "expertise",
    "field",
    "rapidly",
    "increasing",
    "turn",
    "requires",
    "professionals",
    "work",
    "store",
    "waiting",
    "begin",
    "journey",
    "edureka",
    "interactive",
    "kubernetes",
    "certification",
    "training",
    "curated",
    "help",
    "learn",
    "set",
    "kubernetes",
    "cluster",
    "configure",
    "networking",
    "pods",
    "secure",
    "cluster",
    "unauthorized",
    "access",
    "foreign",
    "need",
    "kubernetes",
    "understand",
    "need",
    "kubernetes",
    "let",
    "understand",
    "benefits",
    "drawbacks",
    "containers",
    "first",
    "containers",
    "good",
    "amazingly",
    "good",
    "right",
    "container",
    "matter",
    "fact",
    "linux",
    "container",
    "docker",
    "container",
    "even",
    "rocket",
    "container",
    "right",
    "one",
    "thing",
    "package",
    "application",
    "isolate",
    "everything",
    "else",
    "right",
    "isolate",
    "application",
    "host",
    "mainly",
    "makes",
    "container",
    "fast",
    "reliable",
    "efficient",
    "lightweight",
    "scalable",
    "hold",
    "thought",
    "yes",
    "containers",
    "scalable",
    "problem",
    "comes",
    "resultant",
    "need",
    "kubernetes",
    "even",
    "though",
    "containers",
    "scalable",
    "easily",
    "scalable",
    "okay",
    "let",
    "look",
    "way",
    "one",
    "container",
    "might",
    "want",
    "probably",
    "scale",
    "two",
    "containers",
    "three",
    "containers",
    "well",
    "possible",
    "right",
    "going",
    "take",
    "little",
    "bit",
    "manual",
    "effort",
    "yeah",
    "scale",
    "going",
    "problem",
    "look",
    "real",
    "world",
    "scenario",
    "might",
    "want",
    "scale",
    "like",
    "50",
    "100",
    "containers",
    "case",
    "happens",
    "mean",
    "scaling",
    "manage",
    "containers",
    "right",
    "make",
    "sure",
    "working",
    "active",
    "talking",
    "talking",
    "point",
    "scaling",
    "case",
    "servers",
    "would",
    "able",
    "handle",
    "roads",
    "able",
    "talk",
    "correct",
    "really",
    "important",
    "manageable",
    "scaled",
    "let",
    "talk",
    "point",
    "really",
    "tough",
    "scale",
    "containers",
    "well",
    "answer",
    "might",
    "might",
    "tough",
    "pretty",
    "easy",
    "scale",
    "containers",
    "problem",
    "happens",
    "okay",
    "uh",
    "scale",
    "containers",
    "lot",
    "problems",
    "like",
    "told",
    "containers",
    "first",
    "communicate",
    "many",
    "number",
    "work",
    "together",
    "basically",
    "host",
    "service",
    "right",
    "application",
    "working",
    "together",
    "talking",
    "together",
    "application",
    "hosted",
    "scaling",
    "waste",
    "number",
    "one",
    "reason",
    "next",
    "containers",
    "deployed",
    "appropriately",
    "also",
    "managed",
    "deployed",
    "appropriately",
    "containers",
    "deployed",
    "random",
    "places",
    "deploy",
    "right",
    "places",
    "one",
    "container",
    "one",
    "particular",
    "cloud",
    "one",
    "somewhere",
    "else",
    "would",
    "lot",
    "complications",
    "well",
    "course",
    "possible",
    "yeah",
    "would",
    "lead",
    "lot",
    "complications",
    "internally",
    "want",
    "avoid",
    "one",
    "place",
    "everything",
    "deployed",
    "appropriately",
    "make",
    "sure",
    "ip",
    "addresses",
    "set",
    "everywhere",
    "port",
    "numbers",
    "open",
    "containers",
    "talk",
    "things",
    "right",
    "two",
    "points",
    "next",
    "point",
    "next",
    "problem",
    "scaling",
    "auto",
    "scaling",
    "never",
    "functionality",
    "okay",
    "one",
    "things",
    "biggest",
    "benefit",
    "kubernetes",
    "problem",
    "technically",
    "auto",
    "scaling",
    "functionality",
    "okay",
    "concept",
    "may",
    "ask",
    "point",
    "time",
    "even",
    "need",
    "auto",
    "scaling",
    "okay",
    "let",
    "explain",
    "need",
    "auto",
    "scaling",
    "example",
    "let",
    "say",
    "portal",
    "okay",
    "something",
    "like",
    "amazon",
    "flipkart",
    "let",
    "say",
    "decent",
    "amount",
    "traffic",
    "weekdays",
    "weekends",
    "spike",
    "traffic",
    "probably",
    "like",
    "4x",
    "5x",
    "usual",
    "traffic",
    "case",
    "happens",
    "maybe",
    "servers",
    "good",
    "enough",
    "handle",
    "requests",
    "coming",
    "weekdays",
    "right",
    "requests",
    "come",
    "weekends",
    "right",
    "increased",
    "traffic",
    "serviced",
    "servers",
    "right",
    "maybe",
    "much",
    "servers",
    "handle",
    "load",
    "maybe",
    "short",
    "term",
    "fine",
    "maybe",
    "twice",
    "survive",
    "definitely",
    "come",
    "time",
    "server",
    "start",
    "crashing",
    "handle",
    "many",
    "requests",
    "per",
    "second",
    "permanent",
    "want",
    "really",
    "avoid",
    "problem",
    "scale",
    "would",
    "idly",
    "keep",
    "scaling",
    "every",
    "weekend",
    "scaling",
    "weekend",
    "right",
    "mean",
    "technically",
    "possible",
    "buying",
    "servers",
    "setting",
    "every",
    "friday",
    "would",
    "buying",
    "new",
    "servers",
    "setting",
    "infrastructure",
    "moment",
    "weekday",
    "starts",
    "would",
    "destroy",
    "servers",
    "whatever",
    "built",
    "would",
    "would",
    "right",
    "obviously",
    "pretty",
    "tedious",
    "task",
    "something",
    "like",
    "kubernetes",
    "comes",
    "kubernetes",
    "keeps",
    "analyzing",
    "traffic",
    "load",
    "used",
    "container",
    "traffic",
    "reaching",
    "threshold",
    "auto",
    "scaling",
    "happens",
    "servers",
    "lot",
    "traffic",
    "needs",
    "know",
    "servers",
    "handling",
    "requests",
    "starts",
    "scaling",
    "containers",
    "manual",
    "intervention",
    "needed",
    "one",
    "benefit",
    "kubernetes",
    "one",
    "traditional",
    "problem",
    "scaling",
    "containers",
    "okay",
    "yeah",
    "one",
    "last",
    "problem",
    "distribution",
    "traffic",
    "still",
    "challenging",
    "without",
    "something",
    "manage",
    "containers",
    "mean",
    "many",
    "containers",
    "traffic",
    "distributed",
    "load",
    "balancing",
    "happen",
    "containers",
    "right",
    "three",
    "containers",
    "load",
    "balancing",
    "happen",
    "questions",
    "really",
    "consider",
    "containerization",
    "good",
    "cool",
    "much",
    "better",
    "vms",
    "yes",
    "containerization",
    "basically",
    "concept",
    "sold",
    "basis",
    "scaling",
    "right",
    "said",
    "vms",
    "scaled",
    "easily",
    "told",
    "use",
    "containers",
    "containers",
    "easily",
    "scale",
    "whole",
    "reason",
    "basically",
    "sold",
    "containers",
    "tagline",
    "scaling",
    "today",
    "world",
    "demand",
    "ever",
    "even",
    "regular",
    "containers",
    "enough",
    "scaling",
    "much",
    "detail",
    "need",
    "something",
    "else",
    "manage",
    "containers",
    "correct",
    "agree",
    "need",
    "something",
    "right",
    "exactly",
    "kubernetes",
    "kubernetes",
    "container",
    "management",
    "tool",
    "right",
    "open",
    "source",
    "basically",
    "automates",
    "container",
    "deployment",
    "container",
    "scaling",
    "descaling",
    "container",
    "load",
    "balancing",
    "benefit",
    "works",
    "brilliantly",
    "cloud",
    "vendors",
    "public",
    "cloud",
    "vendors",
    "hybrid",
    "cloud",
    "vendors",
    "also",
    "works",
    "premises",
    "one",
    "big",
    "selling",
    "point",
    "kubernetes",
    "right",
    "give",
    "information",
    "kubernetes",
    "let",
    "tell",
    "google",
    "developed",
    "product",
    "okay",
    "basically",
    "brainchild",
    "google",
    "pretty",
    "much",
    "end",
    "story",
    "every",
    "competitor",
    "community",
    "google",
    "brings",
    "along",
    "going",
    "huge",
    "basically",
    "head",
    "start",
    "kubernetes",
    "would",
    "get",
    "google",
    "brain",
    "child",
    "humongous",
    "one",
    "reasons",
    "kubernetes",
    "one",
    "best",
    "container",
    "management",
    "tools",
    "market",
    "period",
    "given",
    "kubernetes",
    "google",
    "product",
    "written",
    "whole",
    "product",
    "go",
    "language",
    "course",
    "google",
    "contributed",
    "whole",
    "kubernetes",
    "project",
    "cncf",
    "nothing",
    "cloud",
    "native",
    "computing",
    "foundation",
    "simply",
    "cloud",
    "native",
    "foundation",
    "right",
    "call",
    "either",
    "donated",
    "open",
    "source",
    "project",
    "summarize",
    "kubernetes",
    "think",
    "like",
    "group",
    "like",
    "number",
    "containers",
    "one",
    "logical",
    "unit",
    "managing",
    "deploying",
    "application",
    "particular",
    "service",
    "simple",
    "definition",
    "kubernetes",
    "easily",
    "used",
    "deploying",
    "application",
    "course",
    "going",
    "docker",
    "containers",
    "deploying",
    "since",
    "using",
    "lot",
    "docker",
    "containers",
    "part",
    "production",
    "also",
    "use",
    "kubernetes",
    "managing",
    "multiple",
    "docker",
    "containers",
    "right",
    "role",
    "plays",
    "terms",
    "deployment",
    "scaling",
    "scaling",
    "primarily",
    "game",
    "kubernetes",
    "existing",
    "architecture",
    "scale",
    "number",
    "want",
    "scale",
    "anytime",
    "best",
    "part",
    "scaling",
    "also",
    "set",
    "automatic",
    "like",
    "explained",
    "time",
    "back",
    "right",
    "make",
    "kubernetes",
    "kubernetes",
    "would",
    "analyze",
    "traffic",
    "figure",
    "scaling",
    "needs",
    "done",
    "scaling",
    "done",
    "things",
    "course",
    "important",
    "part",
    "load",
    "balancing",
    "right",
    "mean",
    "good",
    "container",
    "group",
    "containers",
    "load",
    "balancing",
    "enabled",
    "right",
    "kubernetes",
    "also",
    "points",
    "based",
    "kubernetes",
    "built",
    "pretty",
    "sure",
    "would",
    "got",
    "good",
    "understanding",
    "kubernetes",
    "right",
    "brief",
    "idea",
    "least",
    "doubts",
    "would",
    "request",
    "put",
    "comments",
    "queries",
    "comment",
    "section",
    "right",
    "edrica",
    "team",
    "get",
    "back",
    "earliest",
    "moving",
    "forward",
    "let",
    "look",
    "features",
    "kubernetes",
    "okay",
    "seen",
    "exactly",
    "kubernetes",
    "uses",
    "docker",
    "containers",
    "containers",
    "general",
    "let",
    "see",
    "selling",
    "points",
    "kubernetes",
    "must",
    "let",
    "start",
    "automatic",
    "bin",
    "packing",
    "say",
    "automatic",
    "bin",
    "packing",
    "basically",
    "kubernetes",
    "packages",
    "application",
    "automatically",
    "places",
    "containers",
    "based",
    "requirements",
    "resources",
    "available",
    "number",
    "one",
    "advantage",
    "second",
    "thing",
    "service",
    "discovery",
    "load",
    "balancing",
    "need",
    "worry",
    "mean",
    "uh",
    "know",
    "going",
    "use",
    "kubernetes",
    "worry",
    "networking",
    "communication",
    "kubernetes",
    "automatically",
    "assign",
    "containers",
    "ip",
    "addresses",
    "probably",
    "single",
    "dns",
    "name",
    "set",
    "containers",
    "performing",
    "logical",
    "operation",
    "course",
    "load",
    "balancing",
    "across",
    "worry",
    "things",
    "say",
    "service",
    "discovery",
    "load",
    "balancing",
    "kubernetes",
    "short",
    "feature",
    "kubernetes",
    "storage",
    "orchestration",
    "kubernetes",
    "automatically",
    "mount",
    "storage",
    "system",
    "choice",
    "choose",
    "either",
    "local",
    "storage",
    "maybe",
    "public",
    "cloud",
    "provider",
    "gcp",
    "aws",
    "even",
    "network",
    "storage",
    "system",
    "nfs",
    "things",
    "right",
    "feature",
    "number",
    "three",
    "feature",
    "number",
    "four",
    "self",
    "healing",
    "one",
    "favorite",
    "parts",
    "kubernetes",
    "actually",
    "kubernetes",
    "even",
    "respect",
    "docker",
    "swarm",
    "really",
    "like",
    "part",
    "whenever",
    "kubernetes",
    "realizes",
    "one",
    "containers",
    "failed",
    "restart",
    "container",
    "right",
    "create",
    "new",
    "container",
    "place",
    "crashed",
    "one",
    "case",
    "node",
    "fails",
    "kubernetes",
    "would",
    "case",
    "whatever",
    "containers",
    "running",
    "failed",
    "node",
    "containers",
    "would",
    "started",
    "another",
    "node",
    "right",
    "course",
    "would",
    "nodes",
    "cluster",
    "another",
    "node",
    "cluster",
    "definitely",
    "room",
    "would",
    "made",
    "failed",
    "container",
    "start",
    "service",
    "happens",
    "next",
    "features",
    "batch",
    "execution",
    "say",
    "batch",
    "execution",
    "along",
    "services",
    "kubernetes",
    "also",
    "manage",
    "batch",
    "cie",
    "workloads",
    "devops",
    "role",
    "right",
    "part",
    "cie",
    "workloads",
    "kubernetes",
    "replace",
    "containers",
    "fail",
    "restart",
    "restore",
    "original",
    "state",
    "possible",
    "kubernetes",
    "secret",
    "configuration",
    "management",
    "another",
    "big",
    "feature",
    "kubernetes",
    "concept",
    "deploy",
    "update",
    "secrets",
    "application",
    "configuration",
    "without",
    "rebuild",
    "entire",
    "image",
    "without",
    "expose",
    "secrets",
    "stack",
    "configuration",
    "anything",
    "right",
    "want",
    "deploy",
    "update",
    "secrets",
    "done",
    "available",
    "tools",
    "right",
    "kubernetes",
    "one",
    "restart",
    "everything",
    "rebuild",
    "entire",
    "container",
    "one",
    "benefit",
    "horizontal",
    "scaling",
    "course",
    "people",
    "might",
    "aware",
    "already",
    "scale",
    "applications",
    "easily",
    "simple",
    "command",
    "simple",
    "command",
    "run",
    "cli",
    "easily",
    "gui",
    "dashboard",
    "kubernetes",
    "dashboard",
    "auto",
    "scaling",
    "possible",
    "right",
    "based",
    "cpu",
    "usage",
    "containers",
    "would",
    "automatically",
    "scaled",
    "scaled",
    "one",
    "feature",
    "final",
    "feature",
    "automatic",
    "rollbacks",
    "rollouts",
    "kubernetes",
    "whenever",
    "update",
    "application",
    "want",
    "release",
    "kubernetes",
    "progressively",
    "rolls",
    "changes",
    "updates",
    "application",
    "configurations",
    "ensuring",
    "one",
    "instance",
    "send",
    "updates",
    "makes",
    "sure",
    "instances",
    "updated",
    "time",
    "thus",
    "ensuring",
    "yes",
    "high",
    "availability",
    "even",
    "something",
    "goes",
    "wrong",
    "communities",
    "roll",
    "back",
    "change",
    "things",
    "enabled",
    "features",
    "kubernetes",
    "really",
    "considering",
    "solution",
    "containers",
    "managing",
    "containers",
    "kubernetes",
    "solution",
    "right",
    "answer",
    "various",
    "features",
    "kubernetes",
    "moving",
    "forward",
    "let",
    "talk",
    "myths",
    "surrounding",
    "kubernetes",
    "lot",
    "people",
    "confusion",
    "respect",
    "exactly",
    "people",
    "misunderstanding",
    "kubernetes",
    "like",
    "docker",
    "containerization",
    "platform",
    "right",
    "people",
    "think",
    "true",
    "kind",
    "confusion",
    "intend",
    "solve",
    "upcoming",
    "slides",
    "talk",
    "exactly",
    "kubernetes",
    "kubernetes",
    "let",
    "start",
    "first",
    "thing",
    "kubernetes",
    "compared",
    "docker",
    "right",
    "set",
    "parameters",
    "comparing",
    "docker",
    "containerization",
    "platform",
    "kubernetes",
    "container",
    "management",
    "platform",
    "means",
    "containerized",
    "application",
    "help",
    "docker",
    "containers",
    "linux",
    "containers",
    "scaling",
    "containers",
    "big",
    "number",
    "like",
    "50",
    "100",
    "kubernetes",
    "would",
    "come",
    "like",
    "multiple",
    "containers",
    "need",
    "managed",
    "kubernetes",
    "come",
    "effectively",
    "specify",
    "configurations",
    "kubernetes",
    "would",
    "make",
    "sure",
    "times",
    "conditions",
    "satisfied",
    "kubernetes",
    "tell",
    "configurations",
    "time",
    "want",
    "many",
    "containers",
    "running",
    "want",
    "many",
    "pods",
    "running",
    "many",
    "needs",
    "right",
    "specify",
    "much",
    "whatever",
    "times",
    "cluster",
    "master",
    "kubernetes",
    "master",
    "would",
    "ensure",
    "condition",
    "satisfied",
    "exactly",
    "kubernetes",
    "mean",
    "docker",
    "solve",
    "purpose",
    "docker",
    "also",
    "plugin",
    "would",
    "call",
    "uh",
    "actually",
    "another",
    "tool",
    "something",
    "called",
    "docker",
    "swarm",
    "docker",
    "swarm",
    "similar",
    "thing",
    "contain",
    "management",
    "like",
    "mass",
    "container",
    "management",
    "similar",
    "kubernetes",
    "like",
    "50",
    "100",
    "containers",
    "docker",
    "swarm",
    "would",
    "help",
    "managing",
    "containers",
    "look",
    "prevailing",
    "market",
    "today",
    "would",
    "say",
    "kubernetes",
    "kubernetes",
    "came",
    "first",
    "moment",
    "came",
    "backed",
    "google",
    "huge",
    "community",
    "swept",
    "along",
    "like",
    "hardly",
    "left",
    "market",
    "docker",
    "docker",
    "swarm",
    "mean",
    "better",
    "docker",
    "end",
    "day",
    "using",
    "docker",
    "kubernetes",
    "good",
    "docker",
    "docker",
    "containers",
    "need",
    "kubernetes",
    "first",
    "place",
    "kubernetes",
    "docker",
    "go",
    "hand",
    "hand",
    "okay",
    "point",
    "note",
    "think",
    "would",
    "also",
    "explained",
    "point",
    "kubernetes",
    "container",
    "using",
    "applications",
    "right",
    "last",
    "thing",
    "kubernetes",
    "applications",
    "simple",
    "architecture",
    "okay",
    "architecture",
    "applications",
    "architecture",
    "pretty",
    "complex",
    "probably",
    "use",
    "kubernetes",
    "uncomplex",
    "architecture",
    "okay",
    "simple",
    "one",
    "first",
    "place",
    "using",
    "kubernetes",
    "would",
    "serve",
    "good",
    "could",
    "probably",
    "make",
    "little",
    "complicated",
    "already",
    "right",
    "kubernetes",
    "speaking",
    "exactly",
    "kubernetes",
    "first",
    "point",
    "kubernetes",
    "robust",
    "reliable",
    "say",
    "robust",
    "reliable",
    "referring",
    "fact",
    "cluster",
    "created",
    "kubernetes",
    "cluster",
    "right",
    "strong",
    "rigid",
    "going",
    "broken",
    "easily",
    "reason",
    "configurations",
    "specify",
    "right",
    "point",
    "time",
    "container",
    "fails",
    "new",
    "container",
    "would",
    "come",
    "right",
    "whole",
    "container",
    "would",
    "restarted",
    "one",
    "things",
    "definitely",
    "happen",
    "node",
    "fails",
    "containers",
    "running",
    "particular",
    "node",
    "would",
    "start",
    "running",
    "different",
    "load",
    "right",
    "reliable",
    "strong",
    "point",
    "time",
    "cluster",
    "would",
    "full",
    "force",
    "time",
    "happening",
    "would",
    "able",
    "see",
    "something",
    "wrong",
    "troubleshoot",
    "node",
    "everything",
    "would",
    "fine",
    "kubernetes",
    "would",
    "everything",
    "possible",
    "pretty",
    "much",
    "everything",
    "possible",
    "let",
    "us",
    "know",
    "problem",
    "end",
    "giving",
    "exact",
    "result",
    "want",
    "kubernetes",
    "uh",
    "next",
    "thing",
    "kubernetes",
    "actually",
    "best",
    "solution",
    "scaling",
    "containers",
    "least",
    "today",
    "market",
    "two",
    "biggest",
    "players",
    "market",
    "docker",
    "swarm",
    "kubernetes",
    "docker",
    "swarm",
    "really",
    "better",
    "one",
    "came",
    "little",
    "late",
    "even",
    "though",
    "docker",
    "beginning",
    "kubernetes",
    "came",
    "docker",
    "swarm",
    "talking",
    "came",
    "somewhere",
    "around",
    "2016",
    "2017",
    "right",
    "kubernetes",
    "came",
    "somewhere",
    "around",
    "2015",
    "good",
    "head",
    "start",
    "first",
    "ones",
    "backing",
    "google",
    "icing",
    "cake",
    "whatever",
    "problem",
    "respect",
    "containers",
    "go",
    "put",
    "error",
    "lot",
    "people",
    "github",
    "queries",
    "stack",
    "overflow",
    "resolving",
    "errors",
    "right",
    "kind",
    "market",
    "backed",
    "really",
    "huge",
    "community",
    "kubernetes",
    "conclude",
    "slide",
    "kubernetes",
    "container",
    "orchestration",
    "platform",
    "nothing",
    "else",
    "right",
    "think",
    "two",
    "slides",
    "would",
    "given",
    "information",
    "clarity",
    "respect",
    "kubernetes",
    "different",
    "docker",
    "docker",
    "swarm",
    "right",
    "guys",
    "still",
    "doubts",
    "would",
    "request",
    "put",
    "comments",
    "comment",
    "section",
    "team",
    "get",
    "back",
    "earliest",
    "okay",
    "moving",
    "uh",
    "let",
    "go",
    "next",
    "topic",
    "compare",
    "kubernetes",
    "docker",
    "swarm",
    "comparing",
    "docker",
    "swarm",
    "compare",
    "docker",
    "kubernetes",
    "okay",
    "understand",
    "person",
    "sam",
    "wondering",
    "right",
    "comparison",
    "let",
    "reassure",
    "difference",
    "kubernetes",
    "docker",
    "swamp",
    "okay",
    "let",
    "go",
    "ahead",
    "see",
    "difference",
    "actually",
    "let",
    "start",
    "installation",
    "configuration",
    "okay",
    "first",
    "parameter",
    "use",
    "uh",
    "compare",
    "two",
    "docker",
    "swarm",
    "comes",
    "top",
    "docker",
    "little",
    "easier",
    "around",
    "two",
    "three",
    "commands",
    "help",
    "cluster",
    "running",
    "includes",
    "node",
    "joining",
    "cluster",
    "right",
    "kubernetes",
    "way",
    "complicated",
    "docker",
    "swarm",
    "right",
    "like",
    "close",
    "10",
    "11",
    "commands",
    "execute",
    "certain",
    "pattern",
    "follow",
    "ensure",
    "errors",
    "right",
    "yes",
    "time",
    "consuming",
    "complicated",
    "cluster",
    "ready",
    "time",
    "kubernetes",
    "winner",
    "flexibility",
    "rigidness",
    "robustness",
    "kubernetes",
    "gives",
    "offered",
    "docker",
    "swarm",
    "yes",
    "docker",
    "swarm",
    "faster",
    "yes",
    "good",
    "kubernetes",
    "comes",
    "actual",
    "working",
    "speaking",
    "gui",
    "set",
    "cluster",
    "use",
    "gui",
    "kubernetes",
    "deploying",
    "applications",
    "right",
    "need",
    "always",
    "use",
    "cli",
    "dashboard",
    "comes",
    "dashboard",
    "give",
    "admin",
    "privileges",
    "use",
    "deploy",
    "application",
    "dashboard",
    "everything",
    "drag",
    "drop",
    "click",
    "functionality",
    "right",
    "click",
    "functionality",
    "case",
    "docker",
    "swamp",
    "gui",
    "docker",
    "swamp",
    "okay",
    "period",
    "docker",
    "swarm",
    "winner",
    "kubernetes",
    "yes",
    "going",
    "third",
    "parameter",
    "scalability",
    "people",
    "bad",
    "misconception",
    "kubernetes",
    "better",
    "solution",
    "scaling",
    "better",
    "faster",
    "docker",
    "swarm",
    "well",
    "could",
    "better",
    "yes",
    "faster",
    "docker",
    "swarm",
    "uh",
    "even",
    "want",
    "scale",
    "right",
    "report",
    "recently",
    "read",
    "uh",
    "scaling",
    "docker",
    "swarm",
    "almost",
    "five",
    "times",
    "faster",
    "scaling",
    "kubernetes",
    "difference",
    "yes",
    "scaling",
    "done",
    "cluster",
    "strength",
    "kubernetes",
    "going",
    "much",
    "stronger",
    "docker",
    "swarm",
    "cluster",
    "strength",
    "various",
    "configurations",
    "specified",
    "thing",
    "moving",
    "next",
    "parameter",
    "uh",
    "load",
    "balancing",
    "requires",
    "manual",
    "service",
    "configuration",
    "okay",
    "case",
    "kubernetes",
    "yes",
    "could",
    "shortfall",
    "docker",
    "swarm",
    "inbuilt",
    "load",
    "balancing",
    "techniques",
    "need",
    "worry",
    "okay",
    "even",
    "load",
    "balancing",
    "requires",
    "manual",
    "effort",
    "case",
    "kubernetes",
    "much",
    "times",
    "manually",
    "specify",
    "configurations",
    "make",
    "changes",
    "yes",
    "much",
    "thinking",
    "speaking",
    "updates",
    "rollbacks",
    "kubernetes",
    "process",
    "scheduling",
    "maintain",
    "services",
    "updating",
    "okay",
    "uh",
    "yeah",
    "similar",
    "works",
    "docker",
    "swarm",
    "wherein",
    "like",
    "progressive",
    "updates",
    "service",
    "health",
    "monitoring",
    "happens",
    "throughout",
    "update",
    "difference",
    "something",
    "goes",
    "wrong",
    "kubernetes",
    "goes",
    "extra",
    "mile",
    "rollback",
    "putting",
    "back",
    "previous",
    "state",
    "right",
    "update",
    "launched",
    "thing",
    "kubernetes",
    "next",
    "parameter",
    "comparing",
    "two",
    "upon",
    "data",
    "volumes",
    "data",
    "volumes",
    "kubernetes",
    "shared",
    "containers",
    "within",
    "pod",
    "concept",
    "called",
    "pods",
    "kubernetes",
    "okay",
    "pod",
    "nothing",
    "something",
    "groups",
    "related",
    "containers",
    "right",
    "logical",
    "grouping",
    "containers",
    "together",
    "part",
    "whichever",
    "containers",
    "inside",
    "pod",
    "shared",
    "volume",
    "okay",
    "like",
    "storage",
    "volume",
    "case",
    "docker",
    "swarm",
    "concept",
    "power",
    "shared",
    "volumes",
    "container",
    "restriction",
    "respect",
    "dog",
    "one",
    "finally",
    "parameter",
    "called",
    "logging",
    "monitoring",
    "comes",
    "logging",
    "monitoring",
    "kubernetes",
    "provides",
    "inbuilt",
    "tools",
    "purpose",
    "okay",
    "docker",
    "swamp",
    "install",
    "tools",
    "want",
    "logging",
    "monitoring",
    "fallback",
    "docker",
    "swamp",
    "logging",
    "really",
    "important",
    "one",
    "know",
    "problem",
    "know",
    "container",
    "failed",
    "happen",
    "exactly",
    "error",
    "right",
    "logs",
    "would",
    "help",
    "give",
    "answer",
    "monitoring",
    "important",
    "always",
    "keep",
    "check",
    "nodes",
    "right",
    "master",
    "cluster",
    "important",
    "monitoring",
    "kubernetes",
    "slight",
    "advantage",
    "docker",
    "sperm",
    "okay",
    "take",
    "difference",
    "kubernetes",
    "docker",
    "swarm",
    "would",
    "also",
    "love",
    "hear",
    "take",
    "right",
    "would",
    "like",
    "know",
    "would",
    "use",
    "kubernetes",
    "docker",
    "swarm",
    "would",
    "also",
    "know",
    "prefer",
    "simplicity",
    "prefer",
    "stability",
    "choice",
    "could",
    "something",
    "arguable",
    "right",
    "debatable",
    "topic",
    "would",
    "like",
    "hear",
    "thoughts",
    "please",
    "drop",
    "comments",
    "bottom",
    "comment",
    "section",
    "right",
    "videos",
    "put",
    "right",
    "probably",
    "one",
    "future",
    "videos",
    "discuss",
    "finish",
    "topic",
    "one",
    "slide",
    "want",
    "show",
    "statistics",
    "stat",
    "picked",
    "platform",
    "line",
    "nothing",
    "company",
    "writes",
    "tech",
    "okay",
    "said",
    "number",
    "news",
    "articles",
    "produced",
    "right",
    "one",
    "particular",
    "year",
    "90",
    "covered",
    "kubernetes",
    "compared",
    "10",
    "docker",
    "swamp",
    "amazing",
    "right",
    "big",
    "difference",
    "means",
    "every",
    "one",
    "blog",
    "written",
    "every",
    "one",
    "article",
    "written",
    "docker",
    "swarm",
    "nine",
    "different",
    "articles",
    "written",
    "kubernetes",
    "similarly",
    "web",
    "searches",
    "web",
    "searches",
    "kubernetes",
    "90",
    "compared",
    "docker",
    "swarms",
    "10",
    "publications",
    "github",
    "stars",
    "number",
    "comments",
    "github",
    "things",
    "clearly",
    "kubernetes",
    "everywhere",
    "kubernetes",
    "one",
    "dominating",
    "market",
    "pretty",
    "visible",
    "stat",
    "also",
    "right",
    "uh",
    "think",
    "pretty",
    "much",
    "brings",
    "end",
    "particular",
    "topic",
    "moving",
    "forward",
    "let",
    "show",
    "use",
    "case",
    "let",
    "talk",
    "game",
    "amazing",
    "game",
    "called",
    "pokemon",
    "go",
    "powered",
    "help",
    "kubernetes",
    "pretty",
    "sure",
    "know",
    "right",
    "guys",
    "know",
    "pokemon",
    "go",
    "famous",
    "game",
    "actually",
    "best",
    "game",
    "year",
    "2017",
    "main",
    "reason",
    "best",
    "kubernetes",
    "let",
    "tell",
    "tell",
    "things",
    "want",
    "talk",
    "give",
    "overview",
    "pokemon",
    "go",
    "let",
    "talk",
    "key",
    "stats",
    "pokemon",
    "go",
    "augmented",
    "reality",
    "game",
    "developed",
    "niantic",
    "android",
    "ios",
    "devices",
    "okay",
    "key",
    "stats",
    "read",
    "like",
    "500",
    "million",
    "plus",
    "downloads",
    "overall",
    "20",
    "million",
    "plus",
    "daily",
    "active",
    "users",
    "massive",
    "daily",
    "like",
    "20",
    "million",
    "users",
    "plus",
    "achieved",
    "amazing",
    "thing",
    "good",
    "game",
    "okay",
    "game",
    "actually",
    "initially",
    "launched",
    "north",
    "america",
    "australia",
    "new",
    "zealand",
    "aware",
    "fact",
    "based",
    "india",
    "get",
    "access",
    "game",
    "moment",
    "news",
    "got",
    "game",
    "like",
    "started",
    "downloading",
    "could",
    "really",
    "find",
    "link",
    "could",
    "download",
    "launched",
    "kind",
    "trees",
    "faced",
    "right",
    "spite",
    "releasing",
    "three",
    "countries",
    "like",
    "major",
    "problem",
    "problem",
    "going",
    "talk",
    "next",
    "slide",
    "right",
    "use",
    "case",
    "based",
    "fact",
    "spite",
    "launching",
    "three",
    "countries",
    "probably",
    "north",
    "america",
    "australia",
    "new",
    "zealand",
    "could",
    "meltdown",
    "rather",
    "help",
    "kubernetes",
    "used",
    "problem",
    "basis",
    "success",
    "happened",
    "let",
    "assessments",
    "uh",
    "get",
    "let",
    "finish",
    "slide",
    "one",
    "amazing",
    "thing",
    "pokemon",
    "go",
    "inspired",
    "users",
    "walk",
    "billion",
    "miles",
    "hour",
    "okay",
    "yes",
    "math",
    "billion",
    "miles",
    "one",
    "year",
    "big",
    "number",
    "says",
    "surpassed",
    "engineering",
    "expectations",
    "50",
    "times",
    "last",
    "line",
    "respect",
    "pokemon",
    "go",
    "game",
    "respect",
    "back",
    "end",
    "use",
    "kubernetes",
    "achieve",
    "whatever",
    "needed",
    "okay",
    "think",
    "spent",
    "enough",
    "time",
    "let",
    "go",
    "ahead",
    "talk",
    "interesting",
    "part",
    "tell",
    "backend",
    "architecture",
    "pokemon",
    "go",
    "okay",
    "pokemon",
    "go",
    "container",
    "two",
    "primary",
    "components",
    "one",
    "google",
    "big",
    "table",
    "main",
    "database",
    "everything",
    "going",
    "coming",
    "programs",
    "run",
    "java",
    "cloud",
    "right",
    "two",
    "things",
    "running",
    "game",
    "mapreduce",
    "cloud",
    "data",
    "flow",
    "something",
    "used",
    "uh",
    "scaling",
    "okay",
    "container",
    "scaling",
    "respect",
    "application",
    "program",
    "would",
    "react",
    "increased",
    "number",
    "users",
    "handle",
    "increased",
    "number",
    "requests",
    "map",
    "reduces",
    "paradigm",
    "comes",
    "right",
    "mapping",
    "reducing",
    "whole",
    "concept",
    "one",
    "deployment",
    "okay",
    "say",
    "phi",
    "means",
    "server",
    "capacities",
    "could",
    "go",
    "till",
    "five",
    "times",
    "okay",
    "technically",
    "could",
    "serve",
    "x",
    "number",
    "requests",
    "case",
    "affiliate",
    "conditions",
    "heavy",
    "traffic",
    "load",
    "conditions",
    "max",
    "server",
    "could",
    "handle",
    "5x",
    "5x",
    "server",
    "would",
    "start",
    "crashing",
    "prediction",
    "okay",
    "actually",
    "happened",
    "pokemon",
    "go",
    "releasing",
    "three",
    "different",
    "geographies",
    "moment",
    "deployed",
    "usage",
    "became",
    "much",
    "x",
    "number",
    "times",
    "technically",
    "failure",
    "limit",
    "even",
    "5x",
    "server",
    "capability",
    "traffic",
    "got",
    "50",
    "times",
    "50",
    "times",
    "expected",
    "know",
    "traffic",
    "much",
    "gon",
    "na",
    "brought",
    "knees",
    "definite",
    "given",
    "right",
    "like",
    "success",
    "story",
    "good",
    "true",
    "kind",
    "story",
    "kind",
    "scenario",
    "requests",
    "start",
    "coming",
    "much",
    "reach",
    "50x",
    "gone",
    "right",
    "application",
    "gone",
    "toss",
    "kubernetes",
    "comes",
    "uh",
    "overcome",
    "challenges",
    "overcome",
    "challenges",
    "kubernetes",
    "vertical",
    "scaling",
    "horizontal",
    "scaling",
    "ease",
    "biggest",
    "problem",
    "right",
    "application",
    "company",
    "easily",
    "horizontal",
    "scaling",
    "spin",
    "containers",
    "instances",
    "set",
    "environment",
    "vertical",
    "scaling",
    "something",
    "specific",
    "even",
    "challenging",
    "specific",
    "particular",
    "game",
    "virtual",
    "reality",
    "would",
    "keep",
    "changing",
    "whenever",
    "person",
    "moves",
    "around",
    "walks",
    "around",
    "somewhere",
    "apartments",
    "somewhere",
    "road",
    "ram",
    "right",
    "would",
    "increase",
    "memory",
    "memory",
    "storage",
    "memory",
    "would",
    "increase",
    "real",
    "time",
    "server",
    "capacity",
    "also",
    "increase",
    "vertically",
    "deployed",
    "horizontal",
    "scalability",
    "anymore",
    "satisfying",
    "requests",
    "satisfying",
    "request",
    "respect",
    "hardware",
    "space",
    "ram",
    "space",
    "things",
    "right",
    "one",
    "particular",
    "server",
    "performance",
    "abilities",
    "kubernetes",
    "solved",
    "problems",
    "effortlessly",
    "niantic",
    "also",
    "surprised",
    "kubernetes",
    "could",
    "help",
    "got",
    "google",
    "read",
    "article",
    "recently",
    "niantic",
    "slab",
    "met",
    "top",
    "executives",
    "google",
    "gcp",
    "right",
    "figured",
    "things",
    "supposed",
    "go",
    "course",
    "met",
    "heads",
    "kubernetes",
    "figured",
    "way",
    "actually",
    "scale",
    "50",
    "times",
    "short",
    "time",
    "challenge",
    "presented",
    "thanks",
    "kubernetes",
    "could",
    "handle",
    "50",
    "times",
    "traffic",
    "expected",
    "like",
    "story",
    "surprising",
    "know",
    "something",
    "like",
    "would",
    "happen",
    "use",
    "case",
    "pretty",
    "much",
    "brings",
    "end",
    "topic",
    "pokemon",
    "go",
    "used",
    "kubernetes",
    "achieve",
    "something",
    "today",
    "world",
    "pokemon",
    "go",
    "really",
    "reward",
    "game",
    "could",
    "right",
    "basically",
    "beat",
    "stereotypes",
    "game",
    "whatever",
    "anybody",
    "could",
    "anything",
    "negative",
    "game",
    "right",
    "could",
    "say",
    "mobile",
    "games",
    "video",
    "games",
    "make",
    "lazy",
    "make",
    "sit",
    "one",
    "place",
    "things",
    "right",
    "uh",
    "pokemon",
    "go",
    "something",
    "different",
    "actually",
    "made",
    "people",
    "walk",
    "around",
    "made",
    "people",
    "exercise",
    "goes",
    "show",
    "popular",
    "game",
    "became",
    "kubernetes",
    "lies",
    "heart",
    "something",
    "became",
    "popular",
    "something",
    "became",
    "big",
    "imagine",
    "big",
    "kubernetes",
    "useful",
    "kubernetes",
    "right",
    "topic",
    "said",
    "kubernetes",
    "master",
    "controls",
    "nodes",
    "inside",
    "nodes",
    "containers",
    "okay",
    "containers",
    "contained",
    "inside",
    "actually",
    "contained",
    "inside",
    "pods",
    "okay",
    "nodes",
    "inside",
    "pots",
    "inside",
    "spots",
    "n",
    "number",
    "containers",
    "depending",
    "upon",
    "configuration",
    "requirement",
    "right",
    "pods",
    "contain",
    "number",
    "containers",
    "logical",
    "binding",
    "logical",
    "grouping",
    "containers",
    "supposing",
    "application",
    "x",
    "running",
    "node",
    "one",
    "okay",
    "pod",
    "particular",
    "application",
    "containers",
    "needed",
    "execute",
    "particular",
    "application",
    "part",
    "particular",
    "pod",
    "right",
    "pod",
    "works",
    "difference",
    "respect",
    "docker",
    "swarm",
    "kubernetes",
    "docker",
    "swamp",
    "pod",
    "containers",
    "running",
    "node",
    "two",
    "terminologies",
    "know",
    "replication",
    "controller",
    "service",
    "replication",
    "controller",
    "master",
    "resource",
    "ensuring",
    "requested",
    "number",
    "pods",
    "always",
    "running",
    "nodes",
    "right",
    "like",
    "confirmation",
    "affirmation",
    "says",
    "okay",
    "many",
    "number",
    "pods",
    "always",
    "running",
    "many",
    "number",
    "containers",
    "always",
    "running",
    "something",
    "like",
    "right",
    "see",
    "replication",
    "controller",
    "always",
    "ensure",
    "happening",
    "service",
    "object",
    "master",
    "provides",
    "load",
    "balancing",
    "across",
    "replicated",
    "group",
    "pods",
    "right",
    "kubernetes",
    "works",
    "think",
    "good",
    "enough",
    "introduction",
    "think",
    "go",
    "demo",
    "part",
    "right",
    "guys",
    "guys",
    "doubts",
    "would",
    "request",
    "put",
    "comment",
    "section",
    "team",
    "get",
    "back",
    "meanwhile",
    "let",
    "get",
    "final",
    "part",
    "video",
    "wherein",
    "show",
    "deploy",
    "applications",
    "kubernetes",
    "via",
    "either",
    "cli",
    "either",
    "via",
    "yaml",
    "files",
    "via",
    "dashboard",
    "okay",
    "guys",
    "let",
    "get",
    "started",
    "demo",
    "purpose",
    "two",
    "vms",
    "okay",
    "see",
    "cube",
    "master",
    "would",
    "acting",
    "uh",
    "master",
    "cluster",
    "another",
    "vm",
    "cube",
    "node",
    "one",
    "okay",
    "cluster",
    "one",
    "master",
    "one",
    "node",
    "right",
    "ease",
    "purpose",
    "video",
    "compiled",
    "list",
    "commands",
    "text",
    "document",
    "right",
    "commands",
    "needed",
    "start",
    "cluster",
    "configurations",
    "things",
    "using",
    "copying",
    "commands",
    "show",
    "side",
    "side",
    "also",
    "explain",
    "commands",
    "mean",
    "one",
    "prerequisite",
    "needs",
    "satisfied",
    "master",
    "least",
    "two",
    "core",
    "cpus",
    "okay",
    "4gb",
    "ram",
    "node",
    "least",
    "one",
    "core",
    "cpu",
    "4gb",
    "ram",
    "make",
    "sure",
    "much",
    "hardware",
    "given",
    "vms",
    "right",
    "using",
    "ubuntu",
    "linux",
    "operating",
    "system",
    "well",
    "good",
    "using",
    "vm",
    "top",
    "windows",
    "os",
    "would",
    "request",
    "satisfy",
    "things",
    "okay",
    "two",
    "criterias",
    "think",
    "straight",
    "away",
    "start",
    "let",
    "open",
    "terminal",
    "first",
    "okay",
    "node",
    "going",
    "back",
    "master",
    "okay",
    "yes",
    "first",
    "start",
    "cluster",
    "start",
    "master",
    "end",
    "okay",
    "command",
    "cube",
    "idiom",
    "init",
    "specify",
    "pod",
    "network",
    "flag",
    "api",
    "server",
    "flat",
    "uh",
    "specifying",
    "port",
    "network",
    "flag",
    "different",
    "containers",
    "inside",
    "pod",
    "able",
    "talk",
    "easily",
    "right",
    "whole",
    "concept",
    "spoke",
    "earlier",
    "features",
    "kubernetes",
    "like",
    "different",
    "pod",
    "networks",
    "using",
    "containers",
    "would",
    "talk",
    "go",
    "documentation",
    "kubernetes",
    "documentation",
    "find",
    "lot",
    "options",
    "use",
    "either",
    "calico",
    "pod",
    "use",
    "flannel",
    "port",
    "network",
    "say",
    "port",
    "network",
    "basically",
    "acronymed",
    "cni",
    "okay",
    "container",
    "network",
    "interface",
    "okay",
    "use",
    "either",
    "calico",
    "cni",
    "flannel",
    "cni",
    "ones",
    "two",
    "popular",
    "ones",
    "using",
    "calco",
    "cni",
    "okay",
    "network",
    "range",
    "particular",
    "pod",
    "specify",
    "okay",
    "specify",
    "ip",
    "address",
    "master",
    "let",
    "first",
    "copy",
    "entire",
    "line",
    "uh",
    "paste",
    "let",
    "ifconfig",
    "find",
    "ip",
    "address",
    "particular",
    "machine",
    "master",
    "machine",
    "ip",
    "address",
    "okay",
    "let",
    "keep",
    "mind",
    "let",
    "paste",
    "command",
    "place",
    "master",
    "ip",
    "address",
    "going",
    "specify",
    "ip",
    "address",
    "master",
    "okay",
    "read",
    "pod",
    "network",
    "told",
    "going",
    "use",
    "calico",
    "pod",
    "let",
    "copy",
    "network",
    "range",
    "paste",
    "containers",
    "inside",
    "particular",
    "pod",
    "would",
    "assigned",
    "ip",
    "address",
    "range",
    "okay",
    "let",
    "go",
    "ahead",
    "hit",
    "enter",
    "cluster",
    "would",
    "begin",
    "set",
    "going",
    "expected",
    "going",
    "take",
    "minutes",
    "hold",
    "okay",
    "perfect",
    "kubernetes",
    "master",
    "initialized",
    "successfully",
    "want",
    "start",
    "using",
    "cluster",
    "run",
    "following",
    "regular",
    "user",
    "right",
    "three",
    "commands",
    "suggested",
    "kubernetes",
    "actually",
    "set",
    "commands",
    "even",
    "okay",
    "running",
    "commands",
    "set",
    "environment",
    "token",
    "generated",
    "right",
    "joining",
    "token",
    "token",
    "along",
    "init",
    "address",
    "ip",
    "master",
    "basically",
    "execute",
    "command",
    "nodes",
    "joining",
    "cluster",
    "master",
    "right",
    "master",
    "machine",
    "created",
    "cluster",
    "though",
    "steps",
    "middle",
    "one",
    "steps",
    "uh",
    "executing",
    "three",
    "commands",
    "comes",
    "bringing",
    "dashboard",
    "setting",
    "pod",
    "network",
    "right",
    "minus",
    "calco",
    "pod",
    "set",
    "calico",
    "pod",
    "also",
    "set",
    "dashboard",
    "start",
    "dashboard",
    "nodes",
    "node",
    "join",
    "various",
    "complications",
    "let",
    "first",
    "go",
    "ahead",
    "run",
    "three",
    "commands",
    "one",
    "okay",
    "since",
    "commands",
    "text",
    "doc",
    "copy",
    "okay",
    "say",
    "ctrl",
    "c",
    "paste",
    "enter",
    "okay",
    "copy",
    "line",
    "remember",
    "execute",
    "things",
    "regular",
    "user",
    "okay",
    "probably",
    "use",
    "sudo",
    "yeah",
    "executing",
    "regular",
    "user",
    "asking",
    "want",
    "overwrite",
    "existing",
    "directory",
    "would",
    "say",
    "yes",
    "already",
    "done",
    "setting",
    "cluster",
    "first",
    "time",
    "prompt",
    "okay",
    "let",
    "go",
    "third",
    "line",
    "copy",
    "paste",
    "okay",
    "perfect",
    "run",
    "three",
    "commands",
    "told",
    "kubernetes",
    "next",
    "thing",
    "check",
    "node",
    "status",
    "things",
    "let",
    "set",
    "network",
    "okay",
    "poor",
    "network",
    "like",
    "said",
    "line",
    "command",
    "run",
    "set",
    "calico",
    "network",
    "okay",
    "nodes",
    "join",
    "particular",
    "network",
    "would",
    "copying",
    "template",
    "file",
    "present",
    "docs",
    "okay",
    "hit",
    "enter",
    "yes",
    "thing",
    "created",
    "calico",
    "cube",
    "controller",
    "created",
    "go",
    "back",
    "see",
    "point",
    "time",
    "check",
    "master",
    "connected",
    "particular",
    "pod",
    "okay",
    "run",
    "cube",
    "cdl",
    "get",
    "nodes",
    "command",
    "okay",
    "would",
    "say",
    "one",
    "particular",
    "resource",
    "connected",
    "cluster",
    "okay",
    "name",
    "machine",
    "role",
    "master",
    "yeah",
    "status",
    "ready",
    "okay",
    "want",
    "get",
    "idea",
    "different",
    "pods",
    "running",
    "default",
    "cube",
    "serial",
    "get",
    "pods",
    "along",
    "options",
    "okay",
    "specify",
    "flags",
    "namespaces",
    "flag",
    "specify",
    "wide",
    "okay",
    "way",
    "get",
    "pods",
    "styled",
    "default",
    "okay",
    "different",
    "services",
    "like",
    "hcd",
    "cube",
    "controllers",
    "calico",
    "node",
    "hcd",
    "master",
    "every",
    "single",
    "service",
    "separate",
    "container",
    "port",
    "started",
    "okay",
    "understand",
    "part",
    "okay",
    "safe",
    "assumption",
    "know",
    "cluster",
    "cluster",
    "ready",
    "masters",
    "part",
    "cluster",
    "let",
    "go",
    "ahead",
    "execute",
    "dashboard",
    "okay",
    "remember",
    "want",
    "use",
    "dashboard",
    "run",
    "command",
    "nodes",
    "join",
    "particular",
    "cluster",
    "moment",
    "nodes",
    "join",
    "cluster",
    "bringing",
    "dashboard",
    "going",
    "challenging",
    "start",
    "throwing",
    "errors",
    "okay",
    "say",
    "hosted",
    "node",
    "want",
    "want",
    "dashboard",
    "server",
    "right",
    "master",
    "first",
    "let",
    "bring",
    "dashboard",
    "going",
    "copy",
    "paste",
    "okay",
    "enter",
    "great",
    "kubernetes",
    "dashboard",
    "created",
    "next",
    "command",
    "get",
    "dashboard",
    "running",
    "cube",
    "cdl",
    "proxy",
    "okay",
    "get",
    "message",
    "saying",
    "uh",
    "served",
    "particular",
    "port",
    "number",
    "yes",
    "right",
    "access",
    "localhost",
    "port",
    "number",
    "localhost",
    "yeah",
    "localhost",
    "okay",
    "followed",
    "port",
    "number",
    "8001",
    "okay",
    "yeah",
    "right",
    "dashboard",
    "technically",
    "accessed",
    "another",
    "url",
    "various",
    "things",
    "access",
    "mean",
    "set",
    "okay",
    "right",
    "enabled",
    "dashboard",
    "want",
    "access",
    "dashboard",
    "first",
    "create",
    "service",
    "account",
    "okay",
    "uh",
    "instructions",
    "okay",
    "first",
    "create",
    "service",
    "account",
    "dashboard",
    "say",
    "okay",
    "going",
    "admin",
    "user",
    "particular",
    "service",
    "account",
    "enable",
    "functionality",
    "say",
    "dashboard",
    "admin",
    "privileges",
    "cluster",
    "binding",
    "okay",
    "cluster",
    "role",
    "binding",
    "join",
    "get",
    "access",
    "particular",
    "dashboard",
    "basically",
    "give",
    "key",
    "okay",
    "like",
    "password",
    "generate",
    "token",
    "first",
    "access",
    "dashboard",
    "dashboard",
    "three",
    "commands",
    "well",
    "get",
    "confused",
    "line",
    "remember",
    "separate",
    "okay",
    "initially",
    "uh",
    "ran",
    "three",
    "commands",
    "kubernetes",
    "execute",
    "next",
    "necessity",
    "bring",
    "pod",
    "command",
    "pod",
    "command",
    "getting",
    "dashboard",
    "right",
    "run",
    "proxy",
    "particular",
    "port",
    "number",
    "start",
    "served",
    "dashboard",
    "served",
    "getting",
    "ui",
    "want",
    "get",
    "ui",
    "create",
    "service",
    "account",
    "three",
    "things",
    "right",
    "let",
    "start",
    "continue",
    "hope",
    "confusing",
    "guys",
    "okay",
    "ca",
    "let",
    "open",
    "new",
    "terminal",
    "okay",
    "sure",
    "gon",
    "na",
    "paste",
    "yes",
    "service",
    "account",
    "created",
    "let",
    "go",
    "back",
    "execute",
    "command",
    "role",
    "binding",
    "saying",
    "dashboard",
    "admin",
    "functionalities",
    "going",
    "cluster",
    "role",
    "okay",
    "cluster",
    "admin",
    "service",
    "account",
    "using",
    "going",
    "default",
    "namespace",
    "okay",
    "created",
    "account",
    "said",
    "want",
    "create",
    "particular",
    "account",
    "default",
    "namespace",
    "thing",
    "specifying",
    "okay",
    "dashboard",
    "admin",
    "created",
    "good",
    "let",
    "generate",
    "token",
    "needed",
    "access",
    "dashboard",
    "okay",
    "execute",
    "command",
    "let",
    "show",
    "go",
    "url",
    "right",
    "slash",
    "api",
    "slash",
    "v1",
    "slash",
    "namespaces",
    "let",
    "show",
    "okay",
    "particular",
    "url",
    "get",
    "access",
    "dashboard",
    "okay",
    "login",
    "access",
    "dashboard",
    "localhost",
    "8001",
    "api",
    "b1",
    "namespaces",
    "slash",
    "cube",
    "system",
    "slash",
    "services",
    "slash",
    "https",
    "kubernetes",
    "dashboard",
    "colon",
    "slash",
    "proxy",
    "okay",
    "remember",
    "one",
    "thing",
    "uh",
    "like",
    "told",
    "asking",
    "password",
    "would",
    "say",
    "token",
    "let",
    "go",
    "hit",
    "command",
    "generate",
    "token",
    "token",
    "gon",
    "na",
    "copy",
    "till",
    "gon",
    "na",
    "say",
    "copy",
    "paste",
    "right",
    "sign",
    "update",
    "yes",
    "perfect",
    "dashboard",
    "right",
    "kubernetes",
    "dashboard",
    "looks",
    "like",
    "whatever",
    "want",
    "get",
    "overview",
    "everything",
    "workloads",
    "come",
    "uh",
    "deployments",
    "option",
    "see",
    "pods",
    "see",
    "different",
    "services",
    "running",
    "among",
    "functionalities",
    "okay",
    "right",
    "uh",
    "bar",
    "graph",
    "pie",
    "graph",
    "showing",
    "clusters",
    "pod",
    "added",
    "node",
    "servers",
    "running",
    "right",
    "mean",
    "outlay",
    "dashboard",
    "okay",
    "get",
    "access",
    "everything",
    "want",
    "left",
    "drill",
    "namespaces",
    "pods",
    "containers",
    "right",
    "want",
    "deploy",
    "something",
    "dashboard",
    "right",
    "click",
    "functionality",
    "go",
    "okay",
    "create",
    "container",
    "order",
    "create",
    "pod",
    "deployment",
    "matter",
    "fact",
    "nodes",
    "running",
    "nodes",
    "correct",
    "whatever",
    "deploy",
    "run",
    "nodes",
    "let",
    "first",
    "open",
    "node",
    "get",
    "node",
    "join",
    "particular",
    "cluster",
    "mine",
    "remember",
    "command",
    "join",
    "node",
    "got",
    "generated",
    "master",
    "end",
    "correct",
    "let",
    "go",
    "fetch",
    "first",
    "command",
    "ran",
    "right",
    "one",
    "let",
    "copy",
    "paste",
    "one",
    "node",
    "end",
    "ip",
    "master",
    "join",
    "particular",
    "port",
    "number",
    "let",
    "hit",
    "enter",
    "let",
    "see",
    "happens",
    "okay",
    "let",
    "run",
    "root",
    "user",
    "okay",
    "okay",
    "perfect",
    "successfully",
    "established",
    "connection",
    "api",
    "server",
    "says",
    "node",
    "joined",
    "cluster",
    "right",
    "bingo",
    "good",
    "news",
    "go",
    "back",
    "master",
    "fact",
    "open",
    "dashboard",
    "would",
    "option",
    "nodes",
    "right",
    "initially",
    "showing",
    "master",
    "master",
    "thing",
    "part",
    "nodes",
    "let",
    "refresh",
    "would",
    "see",
    "even",
    "node",
    "hyphen",
    "1",
    "would",
    "part",
    "right",
    "two",
    "resources",
    "two",
    "instances",
    "one",
    "master",
    "node",
    "go",
    "overview",
    "get",
    "details",
    "start",
    "application",
    "start",
    "service",
    "containers",
    "would",
    "start",
    "showing",
    "right",
    "high",
    "time",
    "start",
    "showing",
    "deploy",
    "deploy",
    "using",
    "dashboard",
    "told",
    "functionality",
    "let",
    "go",
    "ahead",
    "click",
    "create",
    "yeah",
    "mind",
    "dashboard",
    "easiest",
    "way",
    "deploy",
    "application",
    "right",
    "even",
    "developers",
    "around",
    "world",
    "thing",
    "first",
    "time",
    "probably",
    "create",
    "using",
    "yaml",
    "file",
    "start",
    "editing",
    "yaml",
    "file",
    "top",
    "dashboard",
    "create",
    "deploy",
    "application",
    "thing",
    "go",
    "create",
    "app",
    "using",
    "functionality",
    "click",
    "functionality",
    "let",
    "give",
    "name",
    "application",
    "say",
    "eureka",
    "demo",
    "okay",
    "let",
    "name",
    "application",
    "want",
    "basically",
    "pull",
    "engines",
    "image",
    "okay",
    "want",
    "launch",
    "engine",
    "service",
    "going",
    "specify",
    "image",
    "name",
    "docker",
    "hub",
    "okay",
    "says",
    "either",
    "url",
    "public",
    "image",
    "registry",
    "private",
    "image",
    "hosted",
    "docker",
    "hub",
    "google",
    "container",
    "registry",
    "specify",
    "url",
    "per",
    "se",
    "specifying",
    "docker",
    "hub",
    "specifying",
    "image",
    "pulled",
    "docker",
    "hub",
    "use",
    "name",
    "image",
    "pulled",
    "good",
    "enough",
    "right",
    "engines",
    "name",
    "good",
    "enough",
    "choose",
    "set",
    "number",
    "ports",
    "one",
    "two",
    "way",
    "two",
    "continuous",
    "running",
    "pod",
    "right",
    "done",
    "final",
    "part",
    "actually",
    "without",
    "final",
    "part",
    "straight",
    "away",
    "deploy",
    "okay",
    "deploy",
    "application",
    "would",
    "created",
    "would",
    "get",
    "ui",
    "mean",
    "wo",
    "see",
    "engine",
    "service",
    "get",
    "service",
    "enable",
    "one",
    "functionality",
    "okay",
    "servers",
    "click",
    "drop",
    "external",
    "option",
    "right",
    "click",
    "external",
    "would",
    "let",
    "access",
    "particular",
    "service",
    "host",
    "machine",
    "right",
    "definition",
    "see",
    "explanation",
    "internal",
    "external",
    "service",
    "defined",
    "map",
    "incoming",
    "port",
    "target",
    "port",
    "seen",
    "container",
    "engines",
    "would",
    "hosted",
    "one",
    "container",
    "ports",
    "could",
    "accessible",
    "specify",
    "anything",
    "said",
    "access",
    "externally",
    "particular",
    "port",
    "number",
    "would",
    "get",
    "mapped",
    "default",
    "engines",
    "runs",
    "port",
    "number",
    "target",
    "port",
    "would",
    "port",
    "want",
    "expose",
    "map",
    "anything",
    "want",
    "going",
    "say",
    "82",
    "right",
    "uh",
    "simple",
    "way",
    "application",
    "launched",
    "two",
    "pods",
    "go",
    "click",
    "deploy",
    "way",
    "application",
    "deployed",
    "deployment",
    "successful",
    "two",
    "pods",
    "running",
    "uh",
    "go",
    "service",
    "try",
    "access",
    "ui",
    "right",
    "says",
    "running",
    "particular",
    "port",
    "number",
    "eight",
    "two",
    "one",
    "five",
    "three",
    "copy",
    "say",
    "localhost",
    "three",
    "two",
    "one",
    "five",
    "three",
    "okay",
    "hit",
    "enter",
    "uh",
    "bingo",
    "says",
    "welcome",
    "jenkins",
    "uh",
    "getting",
    "ui",
    "right",
    "able",
    "access",
    "application",
    "launched",
    "dashboard",
    "simple",
    "one",
    "way",
    "launching",
    "making",
    "deployment",
    "uh",
    "two",
    "ways",
    "like",
    "told",
    "one",
    "using",
    "cli",
    "command",
    "line",
    "interface",
    "linux",
    "machine",
    "terminal",
    "uploading",
    "yaml",
    "file",
    "uh",
    "uploading",
    "yaml",
    "file",
    "everything",
    "form",
    "yaml",
    "json",
    "okay",
    "like",
    "default",
    "way",
    "whatever",
    "deployment",
    "made",
    "right",
    "also",
    "configurations",
    "stored",
    "form",
    "yaml",
    "click",
    "view",
    "edit",
    "yaml",
    "configurations",
    "specified",
    "default",
    "ones",
    "taken",
    "said",
    "name",
    "draca",
    "demo",
    "taken",
    "name",
    "deployment",
    "okay",
    "kind",
    "deployment",
    "version",
    "api",
    "uh",
    "one",
    "extension",
    "slash",
    "v1",
    "beta1",
    "metadata",
    "various",
    "lists",
    "know",
    "write",
    "yaml",
    "file",
    "think",
    "would",
    "little",
    "easier",
    "understand",
    "create",
    "deployment",
    "yaml",
    "file",
    "everything",
    "lists",
    "maps",
    "xaml",
    "files",
    "always",
    "lists",
    "maps",
    "maps",
    "lists",
    "might",
    "little",
    "confusing",
    "uh",
    "probably",
    "another",
    "tutorial",
    "video",
    "write",
    "yaml",
    "file",
    "kubernetes",
    "deployment",
    "would",
    "keep",
    "another",
    "session",
    "okay",
    "let",
    "get",
    "back",
    "session",
    "show",
    "next",
    "deployment",
    "okay",
    "next",
    "deployment",
    "technique",
    "let",
    "close",
    "go",
    "back",
    "overview",
    "okay",
    "one",
    "deployment",
    "good",
    "okay",
    "let",
    "go",
    "yeah",
    "let",
    "delete",
    "deployment",
    "okay",
    "let",
    "least",
    "scale",
    "want",
    "many",
    "resources",
    "used",
    "node",
    "also",
    "show",
    "two",
    "deployments",
    "right",
    "reduced",
    "deployment",
    "think",
    "good",
    "enough",
    "great",
    "uh",
    "let",
    "go",
    "back",
    "cube",
    "setup",
    "document",
    "mine",
    "got",
    "right",
    "could",
    "check",
    "deployments",
    "could",
    "things",
    "one",
    "thing",
    "might",
    "forgotten",
    "showing",
    "nodes",
    "part",
    "cluster",
    "right",
    "master",
    "yeah",
    "kind",
    "forgot",
    "show",
    "cube",
    "cdl",
    "get",
    "notes",
    "view",
    "got",
    "dashboard",
    "get",
    "also",
    "mean",
    "two",
    "nodes",
    "name",
    "things",
    "okay",
    "also",
    "cube",
    "ctl",
    "get",
    "pods",
    "tell",
    "pods",
    "running",
    "uh",
    "eureka",
    "demo",
    "pod",
    "started",
    "okay",
    "report",
    "specify",
    "flags",
    "right",
    "namespaces",
    "wide",
    "default",
    "pods",
    "get",
    "created",
    "along",
    "kubernetes",
    "cluster",
    "also",
    "get",
    "displayed",
    "let",
    "show",
    "also",
    "case",
    "okay",
    "yeah",
    "one",
    "created",
    "ones",
    "defaulted",
    "deployments",
    "come",
    "kubernetes",
    "moment",
    "install",
    "uh",
    "set",
    "clusters",
    "get",
    "started",
    "okay",
    "see",
    "particular",
    "particular",
    "demo",
    "started",
    "running",
    "node",
    "one",
    "along",
    "cube",
    "proxy",
    "particular",
    "calico",
    "node",
    "two",
    "services",
    "running",
    "master",
    "node",
    "one",
    "running",
    "node",
    "one",
    "right",
    "uh",
    "see",
    "right",
    "calico",
    "node",
    "runs",
    "node",
    "master",
    "uh",
    "similarly",
    "cube",
    "proxy",
    "runs",
    "node",
    "add",
    "master",
    "one",
    "running",
    "node",
    "okay",
    "uh",
    "getting",
    "back",
    "uh",
    "explain",
    "next",
    "part",
    "deploy",
    "anything",
    "terminal",
    "deploy",
    "engines",
    "application",
    "cli",
    "follow",
    "set",
    "commands",
    "okay",
    "couple",
    "steps",
    "first",
    "create",
    "deployment",
    "run",
    "command",
    "okay",
    "cube",
    "serial",
    "create",
    "deployment",
    "engines",
    "name",
    "image",
    "want",
    "create",
    "going",
    "name",
    "deployment",
    "name",
    "image",
    "want",
    "use",
    "ctrl",
    "c",
    "let",
    "go",
    "terminal",
    "master",
    "executing",
    "command",
    "cube",
    "serial",
    "create",
    "deployment",
    "okay",
    "deployment",
    "engines",
    "created",
    "want",
    "verify",
    "also",
    "deployments",
    "right",
    "one",
    "entry",
    "ray",
    "car",
    "demo",
    "yes",
    "see",
    "two",
    "engines",
    "adobeca",
    "demos",
    "pending",
    "mean",
    "would",
    "take",
    "seconds",
    "meanwhile",
    "let",
    "continue",
    "steps",
    "created",
    "deployments",
    "create",
    "service",
    "okay",
    "say",
    "uh",
    "node",
    "port",
    "used",
    "access",
    "particular",
    "service",
    "right",
    "deployment",
    "deployment",
    "deploying",
    "container",
    "want",
    "access",
    "like",
    "told",
    "earlier",
    "local",
    "host",
    "machine",
    "things",
    "enable",
    "node",
    "port",
    "want",
    "get",
    "deployments",
    "terminal",
    "run",
    "command",
    "cube",
    "ctl",
    "get",
    "deployments",
    "okay",
    "engines",
    "also",
    "comes",
    "right",
    "want",
    "details",
    "deployment",
    "use",
    "command",
    "cube",
    "cdl",
    "describe",
    "get",
    "like",
    "details",
    "particular",
    "deployment",
    "name",
    "uh",
    "port",
    "number",
    "sort",
    "signing",
    "things",
    "okay",
    "let",
    "complicate",
    "probably",
    "use",
    "understanding",
    "later",
    "done",
    "next",
    "thing",
    "create",
    "service",
    "nodes",
    "created",
    "deployment",
    "yes",
    "create",
    "service",
    "nodes",
    "using",
    "particular",
    "command",
    "cube",
    "cdl",
    "create",
    "service",
    "say",
    "node",
    "port",
    "okay",
    "means",
    "want",
    "access",
    "particular",
    "port",
    "number",
    "port",
    "mapping",
    "80s",
    "okay",
    "container",
    "port",
    "80",
    "internal",
    "node",
    "port",
    "okay",
    "service",
    "engines",
    "created",
    "want",
    "check",
    "uh",
    "deployments",
    "running",
    "nodes",
    "run",
    "command",
    "cube",
    "ctl",
    "get",
    "svc",
    "okay",
    "would",
    "tell",
    "okay",
    "two",
    "different",
    "services",
    "iteraker",
    "demo",
    "engines",
    "running",
    "port",
    "numbers",
    "nodes",
    "right",
    "kubernetes",
    "one",
    "got",
    "created",
    "automatically",
    "eureka",
    "demo",
    "one",
    "created",
    "okay",
    "engines",
    "one",
    "created",
    "kubernetes",
    "comes",
    "specifying",
    "container",
    "cluster",
    "okay",
    "let",
    "go",
    "back",
    "yes",
    "similarly",
    "want",
    "delete",
    "deployment",
    "use",
    "command",
    "cube",
    "cdl",
    "delete",
    "deployment",
    "followed",
    "name",
    "deployment",
    "right",
    "pretty",
    "simple",
    "uh",
    "way",
    "otherwise",
    "dashboard",
    "also",
    "delete",
    "like",
    "showed",
    "click",
    "click",
    "delete",
    "want",
    "scale",
    "scale",
    "deployments",
    "mine",
    "one",
    "part",
    "right",
    "let",
    "one",
    "thing",
    "let",
    "go",
    "engines",
    "service",
    "let",
    "try",
    "accessing",
    "particular",
    "service",
    "localhost",
    "okay",
    "perfect",
    "also",
    "says",
    "welcome",
    "manjings",
    "right",
    "uh",
    "understand",
    "port",
    "mapping",
    "worked",
    "going",
    "service",
    "get",
    "know",
    "port",
    "number",
    "access",
    "host",
    "machine",
    "right",
    "internal",
    "container",
    "port",
    "mapped",
    "particular",
    "port",
    "mine",
    "okay",
    "work",
    "also",
    "use",
    "cluster",
    "ip",
    "thing",
    "cluster",
    "ip",
    "going",
    "basically",
    "uh",
    "ip",
    "using",
    "containers",
    "access",
    "right",
    "pod",
    "ip",
    "whatever",
    "running",
    "containers",
    "accessible",
    "cluster",
    "ip",
    "thing",
    "right",
    "let",
    "close",
    "uh",
    "pages",
    "deploy",
    "application",
    "cli",
    "comes",
    "last",
    "part",
    "video",
    "nothing",
    "deployment",
    "via",
    "yaml",
    "file",
    "deployment",
    "via",
    "yaml",
    "file",
    "write",
    "yaml",
    "code",
    "right",
    "either",
    "write",
    "yaml",
    "code",
    "json",
    "code",
    "correct",
    "code",
    "written",
    "uh",
    "yaml",
    "format",
    "fact",
    "already",
    "machine",
    "ls",
    "yeah",
    "right",
    "let",
    "show",
    "yaml",
    "file",
    "okay",
    "specify",
    "various",
    "configurations",
    "uh",
    "similar",
    "using",
    "gui",
    "write",
    "using",
    "cli",
    "something",
    "similar",
    "jizzer",
    "specify",
    "everything",
    "one",
    "particular",
    "file",
    "see",
    "specified",
    "api",
    "version",
    "okay",
    "using",
    "extensions",
    "dot",
    "slash",
    "b1",
    "beta1",
    "okay",
    "simply",
    "specify",
    "version",
    "one",
    "either",
    "next",
    "important",
    "line",
    "kind",
    "kind",
    "important",
    "specify",
    "kind",
    "file",
    "deployment",
    "file",
    "pod",
    "deployment",
    "container",
    "deployment",
    "overall",
    "deployment",
    "said",
    "deployment",
    "okay",
    "want",
    "deploy",
    "containers",
    "also",
    "along",
    "pod",
    "saying",
    "deployment",
    "case",
    "want",
    "deploy",
    "pod",
    "realistically",
    "need",
    "okay",
    "would",
    "deploy",
    "pod",
    "case",
    "want",
    "deploy",
    "pod",
    "go",
    "ahead",
    "write",
    "pod",
    "specify",
    "different",
    "containers",
    "okay",
    "case",
    "complete",
    "deployment",
    "right",
    "pods",
    "services",
    "containers",
    "go",
    "ahead",
    "write",
    "things",
    "meta",
    "data",
    "specify",
    "name",
    "application",
    "specify",
    "want",
    "put",
    "name",
    "also",
    "like",
    "warden",
    "okay",
    "save",
    "important",
    "part",
    "pack",
    "part",
    "set",
    "number",
    "replicas",
    "remember",
    "told",
    "something",
    "called",
    "replication",
    "controller",
    "controls",
    "number",
    "pods",
    "running",
    "line",
    "set",
    "two",
    "means",
    "two",
    "poles",
    "running",
    "particular",
    "application",
    "vardan",
    "okay",
    "exactly",
    "spec",
    "saying",
    "want",
    "two",
    "containers",
    "intended",
    "container",
    "line",
    "two",
    "containers",
    "inside",
    "first",
    "container",
    "want",
    "create",
    "name",
    "front",
    "end",
    "okay",
    "using",
    "engines",
    "image",
    "similarly",
    "port",
    "number",
    "would",
    "active",
    "container",
    "port",
    "right",
    "saying",
    "want",
    "second",
    "container",
    "container",
    "could",
    "could",
    "rename",
    "anything",
    "say",
    "back",
    "end",
    "choose",
    "image",
    "want",
    "probably",
    "choose",
    "httpd",
    "image",
    "also",
    "okay",
    "say",
    "ports",
    "running",
    "say",
    "container",
    "port",
    "run",
    "uh",
    "port",
    "number",
    "88",
    "right",
    "simple",
    "right",
    "since",
    "first",
    "video",
    "tutorial",
    "important",
    "takeaways",
    "yaml",
    "file",
    "configuration",
    "spec",
    "specify",
    "containers",
    "uh",
    "yes",
    "everything",
    "json",
    "format",
    "indentations",
    "things",
    "okay",
    "even",
    "extra",
    "space",
    "anywhere",
    "yaml",
    "file",
    "would",
    "thrown",
    "error",
    "make",
    "sure",
    "make",
    "sure",
    "specify",
    "containers",
    "appropriately",
    "going",
    "one",
    "container",
    "well",
    "good",
    "two",
    "containers",
    "make",
    "sure",
    "uh",
    "indent",
    "right",
    "way",
    "specify",
    "number",
    "pods",
    "want",
    "give",
    "name",
    "deployment",
    "mainly",
    "establish",
    "read",
    "rules",
    "okay",
    "done",
    "uh",
    "save",
    "close",
    "yaml",
    "file",
    "okay",
    "straight",
    "away",
    "upload",
    "yaml",
    "file",
    "kubernetes",
    "okay",
    "way",
    "application",
    "would",
    "straight",
    "away",
    "deployed",
    "okay",
    "command",
    "cube",
    "cdl",
    "create",
    "hyphen",
    "f",
    "name",
    "file",
    "okay",
    "let",
    "copy",
    "name",
    "file",
    "let",
    "hit",
    "enter",
    "perfect",
    "deployment",
    "third",
    "deployment",
    "warden",
    "also",
    "created",
    "right",
    "check",
    "deployments",
    "earlier",
    "command",
    "nothing",
    "cube",
    "cdl",
    "get",
    "deployments",
    "okay",
    "get",
    "sorry",
    "get",
    "deployments",
    "see",
    "edirect",
    "demo",
    "engines",
    "vardhan",
    "funny",
    "thing",
    "noticed",
    "said",
    "want",
    "two",
    "replicas",
    "right",
    "two",
    "pods",
    "desire",
    "currently",
    "date",
    "one",
    "okay",
    "date",
    "two",
    "brilliant",
    "available",
    "zero",
    "let",
    "give",
    "seconds",
    "23",
    "seconds",
    "think",
    "board",
    "would",
    "started",
    "let",
    "go",
    "back",
    "dashboard",
    "verify",
    "third",
    "deployment",
    "comes",
    "okay",
    "perfect",
    "uh",
    "gon",
    "na",
    "work",
    "okay",
    "probably",
    "gon",
    "na",
    "take",
    "time",
    "container",
    "restarting",
    "let",
    "give",
    "time",
    "could",
    "well",
    "fact",
    "node",
    "less",
    "resource",
    "right",
    "many",
    "deployments",
    "could",
    "reason",
    "uh",
    "could",
    "uh",
    "go",
    "ahead",
    "delete",
    "deployments",
    "node",
    "handle",
    "many",
    "containers",
    "pods",
    "right",
    "uh",
    "let",
    "delete",
    "particular",
    "deployment",
    "engines",
    "deployment",
    "let",
    "also",
    "delete",
    "edureka",
    "demo",
    "deployment",
    "mine",
    "okay",
    "let",
    "refresh",
    "wait",
    "happen",
    "okay",
    "instead",
    "could",
    "simple",
    "deployment",
    "right",
    "let",
    "go",
    "back",
    "terminal",
    "let",
    "delete",
    "deployment",
    "okay",
    "let",
    "redeploy",
    "cube",
    "cdl",
    "delete",
    "deployment",
    "okay",
    "deployment",
    "deleted",
    "okay",
    "let",
    "clear",
    "screen",
    "let",
    "g",
    "edit",
    "yaml",
    "file",
    "let",
    "make",
    "things",
    "simpler",
    "let",
    "delete",
    "container",
    "let",
    "save",
    "right",
    "close",
    "let",
    "create",
    "deployment",
    "okay",
    "walden",
    "created",
    "let",
    "go",
    "refresh",
    "let",
    "see",
    "happens",
    "okay",
    "time",
    "green",
    "healthy",
    "nodes",
    "successful",
    "least",
    "going",
    "successful",
    "container",
    "creating",
    "perfect",
    "two",
    "pods",
    "mine",
    "running",
    "uh",
    "pods",
    "running",
    "right",
    "running",
    "node",
    "one",
    "pods",
    "two",
    "two",
    "two",
    "deployments",
    "replica",
    "set",
    "services",
    "right",
    "engines",
    "base",
    "image",
    "used",
    "uh",
    "well",
    "good",
    "also",
    "working",
    "guys",
    "yeah",
    "right",
    "try",
    "upload",
    "maybe",
    "error",
    "probably",
    "yaml",
    "file",
    "could",
    "could",
    "small",
    "mistake",
    "could",
    "node",
    "many",
    "containers",
    "running",
    "could",
    "reasons",
    "anyways",
    "deploy",
    "yaml",
    "file",
    "foreign",
    "music",
    "let",
    "look",
    "architecture",
    "kubernetes",
    "kubernetes",
    "architecture",
    "mainly",
    "three",
    "components",
    "masternodes",
    "worker",
    "nodes",
    "distributed",
    "key",
    "value",
    "stores",
    "like",
    "etcd",
    "talking",
    "master",
    "node",
    "master",
    "node",
    "responsible",
    "managing",
    "kubernetes",
    "cluster",
    "entry",
    "point",
    "administrative",
    "tasks",
    "communicate",
    "master",
    "node",
    "via",
    "cli",
    "gui",
    "apis",
    "fault",
    "tolerance",
    "purposes",
    "one",
    "master",
    "node",
    "cluster",
    "one",
    "master",
    "node",
    "would",
    "high",
    "availability",
    "mode",
    "one",
    "leader",
    "performing",
    "operations",
    "masternodes",
    "would",
    "followers",
    "node",
    "also",
    "manage",
    "cluster",
    "state",
    "kubernetes",
    "uses",
    "etcd",
    "master",
    "nodes",
    "connect",
    "etcd",
    "distributed",
    "key",
    "value",
    "store",
    "tell",
    "little",
    "also",
    "let",
    "tell",
    "key",
    "value",
    "store",
    "part",
    "master",
    "node",
    "also",
    "configured",
    "externally",
    "case",
    "masternodes",
    "would",
    "connect",
    "told",
    "master",
    "node",
    "responsibilities",
    "master",
    "known",
    "let",
    "discuss",
    "components",
    "master",
    "nodes",
    "master",
    "node",
    "mainly",
    "four",
    "components",
    "api",
    "server",
    "scheduler",
    "control",
    "manager",
    "etcd",
    "let",
    "tell",
    "components",
    "one",
    "one",
    "starting",
    "api",
    "server",
    "administrative",
    "tasks",
    "performed",
    "via",
    "api",
    "server",
    "within",
    "master",
    "node",
    "user",
    "sends",
    "rest",
    "commands",
    "api",
    "server",
    "validates",
    "processes",
    "request",
    "executing",
    "request",
    "resulting",
    "state",
    "cluster",
    "stored",
    "distributed",
    "key",
    "value",
    "store",
    "scheduler",
    "name",
    "suggests",
    "scheduler",
    "schedules",
    "work",
    "different",
    "worker",
    "nodes",
    "scheduler",
    "resource",
    "usage",
    "information",
    "worker",
    "node",
    "also",
    "knows",
    "constraints",
    "users",
    "may",
    "set",
    "scheduling",
    "work",
    "scheduler",
    "also",
    "takes",
    "account",
    "quality",
    "service",
    "requirements",
    "data",
    "locality",
    "affinity",
    "taffinity",
    "many",
    "parameters",
    "scheduler",
    "schedules",
    "work",
    "terms",
    "pods",
    "services",
    "next",
    "component",
    "controller",
    "manager",
    "think",
    "responsibilities",
    "controller",
    "manager",
    "well",
    "name",
    "suggests",
    "controller",
    "manager",
    "manages",
    "different",
    "control",
    "loops",
    "regulate",
    "state",
    "kubernetes",
    "cluster",
    "one",
    "control",
    "loops",
    "know",
    "desired",
    "state",
    "object",
    "manages",
    "watch",
    "current",
    "state",
    "api",
    "servers",
    "control",
    "loop",
    "current",
    "state",
    "object",
    "manages",
    "meet",
    "desired",
    "state",
    "control",
    "loop",
    "takes",
    "corrective",
    "steps",
    "make",
    "sure",
    "current",
    "state",
    "desired",
    "state",
    "controller",
    "manager",
    "basically",
    "makes",
    "sure",
    "current",
    "state",
    "desired",
    "state",
    "last",
    "component",
    "etcd",
    "mentioned",
    "earlier",
    "etcd",
    "distributed",
    "key",
    "value",
    "store",
    "used",
    "store",
    "cluster",
    "state",
    "either",
    "part",
    "kubernetes",
    "master",
    "configure",
    "external",
    "finally",
    "guys",
    "various",
    "components",
    "masternode",
    "let",
    "move",
    "next",
    "component",
    "kubernetes",
    "architecture",
    "worker",
    "node",
    "worker",
    "node",
    "machine",
    "virtual",
    "machine",
    "physical",
    "server",
    "runs",
    "applications",
    "using",
    "pods",
    "controlled",
    "master",
    "node",
    "understand",
    "master",
    "sleeve",
    "concept",
    "machine",
    "yes",
    "controlled",
    "master",
    "node",
    "pods",
    "scheduled",
    "worker",
    "nodes",
    "necessary",
    "tools",
    "run",
    "connect",
    "see",
    "pod",
    "basically",
    "scheduling",
    "unit",
    "kubernetes",
    "logical",
    "collection",
    "one",
    "containers",
    "always",
    "scheduled",
    "together",
    "access",
    "applications",
    "external",
    "world",
    "connect",
    "worker",
    "nodes",
    "master",
    "nodes",
    "briefed",
    "worker",
    "node",
    "let",
    "discuss",
    "various",
    "components",
    "worker",
    "node",
    "worker",
    "node",
    "mainly",
    "three",
    "components",
    "cubelet",
    "q",
    "proxy",
    "container",
    "runtime",
    "let",
    "start",
    "discussion",
    "session",
    "container",
    "runtime",
    "container",
    "runtime",
    "basically",
    "used",
    "run",
    "manage",
    "container",
    "life",
    "cycle",
    "worker",
    "node",
    "examples",
    "container",
    "runtimes",
    "give",
    "container",
    "rkt",
    "lxt",
    "etc",
    "often",
    "observed",
    "docker",
    "also",
    "referred",
    "container",
    "runtime",
    "precise",
    "let",
    "tell",
    "docker",
    "platform",
    "uses",
    "containers",
    "container",
    "runtime",
    "right",
    "understood",
    "container",
    "runtime",
    "let",
    "move",
    "second",
    "component",
    "cubelet",
    "cubelet",
    "basically",
    "agent",
    "runs",
    "worker",
    "node",
    "communicates",
    "master",
    "node",
    "10",
    "worker",
    "nodes",
    "cubelet",
    "runs",
    "every",
    "worker",
    "node",
    "receives",
    "port",
    "definition",
    "via",
    "various",
    "means",
    "runs",
    "containers",
    "associated",
    "pod",
    "also",
    "makes",
    "sure",
    "containers",
    "part",
    "pods",
    "healthy",
    "times",
    "cubelet",
    "basically",
    "runs",
    "containers",
    "make",
    "sure",
    "containers",
    "part",
    "various",
    "spots",
    "always",
    "healthy",
    "times",
    "cubelet",
    "connects",
    "container",
    "runtime",
    "using",
    "container",
    "runtime",
    "interface",
    "consists",
    "various",
    "protocol",
    "buffers",
    "grpc",
    "apis",
    "libraries",
    "see",
    "screen",
    "cubelet",
    "connects",
    "cri",
    "shim",
    "perform",
    "containers",
    "image",
    "operations",
    "cri",
    "implements",
    "two",
    "services",
    "runtime",
    "service",
    "image",
    "service",
    "image",
    "service",
    "responsible",
    "image",
    "related",
    "operations",
    "runtime",
    "service",
    "responsible",
    "pod",
    "container",
    "related",
    "operations",
    "two",
    "services",
    "two",
    "different",
    "operations",
    "perform",
    "let",
    "tell",
    "something",
    "interesting",
    "container",
    "runtimes",
    "used",
    "kubernetes",
    "development",
    "cri",
    "kubernetes",
    "use",
    "different",
    "container",
    "runtimes",
    "without",
    "need",
    "recompile",
    "container",
    "runtime",
    "implements",
    "cri",
    "used",
    "kubernetes",
    "manage",
    "pods",
    "containers",
    "container",
    "images",
    "let",
    "give",
    "example",
    "cri",
    "shims",
    "dokashim",
    "cri",
    "container",
    "two",
    "examples",
    "crs",
    "ship",
    "dockershim",
    "containers",
    "created",
    "using",
    "docker",
    "installed",
    "worker",
    "nodes",
    "internally",
    "docker",
    "uses",
    "container",
    "create",
    "manage",
    "containers",
    "cri",
    "container",
    "directly",
    "use",
    "docker",
    "small",
    "offspring",
    "containers",
    "create",
    "manage",
    "containers",
    "two",
    "simple",
    "examples",
    "cri",
    "shims",
    "let",
    "move",
    "third",
    "component",
    "worker",
    "node",
    "q",
    "proxy",
    "q",
    "proxy",
    "network",
    "proxy",
    "runs",
    "worker",
    "node",
    "listens",
    "api",
    "server",
    "service",
    "point",
    "creation",
    "deletion",
    "service",
    "point",
    "q",
    "proxy",
    "sets",
    "roots",
    "reach",
    "guys",
    "components",
    "worker",
    "node",
    "let",
    "move",
    "session",
    "discussing",
    "third",
    "component",
    "kubernetes",
    "architecture",
    "etcd",
    "mentioned",
    "kubernetes",
    "uses",
    "atcd",
    "store",
    "cluster",
    "state",
    "atcd",
    "distributed",
    "key",
    "value",
    "stored",
    "based",
    "raft",
    "consensus",
    "algorithm",
    "raft",
    "allows",
    "collection",
    "machines",
    "work",
    "coherent",
    "group",
    "survive",
    "failures",
    "members",
    "basically",
    "algorithm",
    "works",
    "way",
    "even",
    "members",
    "fail",
    "work",
    "still",
    "work",
    "given",
    "time",
    "one",
    "nodes",
    "group",
    "master",
    "rest",
    "follower",
    "told",
    "starting",
    "session",
    "one",
    "master",
    "masters",
    "find",
    "follow",
    "master",
    "right",
    "let",
    "tell",
    "atcd",
    "written",
    "language",
    "besides",
    "storing",
    "cluster",
    "state",
    "etcd",
    "also",
    "used",
    "store",
    "configuration",
    "details",
    "subnets",
    "config",
    "maps",
    "music",
    "docker",
    "docker",
    "containerization",
    "platform",
    "packages",
    "application",
    "dependencies",
    "together",
    "form",
    "docker",
    "container",
    "ensure",
    "application",
    "works",
    "seamlessly",
    "environment",
    "basically",
    "open",
    "platform",
    "developing",
    "shipping",
    "running",
    "applications",
    "docker",
    "enables",
    "separate",
    "applications",
    "infrastructure",
    "deliver",
    "software",
    "quickly",
    "docker",
    "also",
    "manage",
    "infrastructure",
    "ways",
    "manage",
    "applications",
    "taking",
    "advantage",
    "docker",
    "methodologies",
    "shipping",
    "testing",
    "deploying",
    "code",
    "quickly",
    "significantly",
    "reduce",
    "delay",
    "writing",
    "code",
    "running",
    "production",
    "basically",
    "provides",
    "ability",
    "package",
    "run",
    "application",
    "loosely",
    "isolated",
    "environment",
    "called",
    "container",
    "isolation",
    "security",
    "allow",
    "run",
    "many",
    "containers",
    "simultaneously",
    "given",
    "host",
    "already",
    "discussed",
    "containers",
    "lightweight",
    "contain",
    "everything",
    "needed",
    "run",
    "application",
    "really",
    "need",
    "rely",
    "currently",
    "installed",
    "host",
    "easily",
    "share",
    "containers",
    "work",
    "sure",
    "everyone",
    "share",
    "gets",
    "container",
    "works",
    "way",
    "important",
    "features",
    "docker",
    "like",
    "address",
    "first",
    "feature",
    "extremely",
    "fast",
    "consistent",
    "delivery",
    "applications",
    "docker",
    "streamlines",
    "development",
    "life",
    "cycle",
    "allowing",
    "developers",
    "work",
    "standardized",
    "environments",
    "using",
    "local",
    "containers",
    "provide",
    "applications",
    "services",
    "containers",
    "great",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "workflows",
    "let",
    "explain",
    "tiny",
    "example",
    "developers",
    "write",
    "code",
    "locally",
    "share",
    "work",
    "colleagues",
    "using",
    "docker",
    "containers",
    "use",
    "docker",
    "push",
    "applications",
    "test",
    "environment",
    "execute",
    "automated",
    "manual",
    "tests",
    "developers",
    "find",
    "bugs",
    "easily",
    "fix",
    "development",
    "environment",
    "redeploy",
    "test",
    "environment",
    "testing",
    "validation",
    "finally",
    "testing",
    "complete",
    "getting",
    "fix",
    "customer",
    "simple",
    "pushing",
    "updated",
    "image",
    "production",
    "environment",
    "easy",
    "use",
    "dockers",
    "get",
    "work",
    "done",
    "second",
    "feature",
    "responsive",
    "deployment",
    "scaling",
    "docker",
    "containers",
    "run",
    "developer",
    "local",
    "laptop",
    "physical",
    "virtual",
    "machines",
    "data",
    "center",
    "cloud",
    "providers",
    "even",
    "mixture",
    "environments",
    "portability",
    "lightweight",
    "nature",
    "also",
    "makes",
    "easy",
    "dynamically",
    "manage",
    "workloads",
    "scaling",
    "tearing",
    "applications",
    "services",
    "business",
    "needs",
    "dictate",
    "real",
    "time",
    "third",
    "feature",
    "running",
    "workloads",
    "hardware",
    "docker",
    "lightweight",
    "fast",
    "provides",
    "viable",
    "cost",
    "effective",
    "alternatives",
    "hypervisor",
    "based",
    "virtual",
    "machines",
    "use",
    "compute",
    "capacity",
    "achieve",
    "business",
    "goals",
    "perfect",
    "high",
    "density",
    "environments",
    "small",
    "medium",
    "deployments",
    "need",
    "fewer",
    "resources",
    "relationship",
    "kubernetes",
    "docker",
    "going",
    "discuss",
    "dockers",
    "containers",
    "kubernetes",
    "container",
    "orchestration",
    "would",
    "anyone",
    "ask",
    "use",
    "docker",
    "kubernetes",
    "reality",
    "two",
    "tools",
    "actually",
    "complementary",
    "help",
    "build",
    "cloud",
    "native",
    "microservice",
    "architectures",
    "docker",
    "mostly",
    "used",
    "first",
    "days",
    "containerized",
    "application",
    "really",
    "actually",
    "helps",
    "build",
    "deploy",
    "applications",
    "container",
    "containers",
    "cases",
    "applications",
    "architecture",
    "simple",
    "docker",
    "address",
    "basic",
    "needs",
    "application",
    "life",
    "cycle",
    "management",
    "case",
    "scenario",
    "application",
    "broken",
    "multiple",
    "microservices",
    "services",
    "life",
    "cycle",
    "operational",
    "needs",
    "kubernetes",
    "comes",
    "picture",
    "used",
    "create",
    "application",
    "containers",
    "actually",
    "needs",
    "container",
    "platform",
    "run",
    "docker",
    "popular",
    "one",
    "runs",
    "kubernetes",
    "integrates",
    "large",
    "tool",
    "set",
    "built",
    "around",
    "containers",
    "uses",
    "operations",
    "containers",
    "created",
    "docker",
    "alternatives",
    "managed",
    "scaled",
    "moved",
    "kubernetes",
    "also",
    "ensures",
    "failover",
    "management",
    "health",
    "maintenance",
    "system",
    "see",
    "diagram",
    "container",
    "life",
    "cycle",
    "explained",
    "see",
    "docker",
    "build",
    "deployment",
    "application",
    "successfully",
    "done",
    "docker",
    "successfully",
    "deployed",
    "kubernetes",
    "takes",
    "responsibility",
    "monitor",
    "scale",
    "application",
    "great",
    "benefits",
    "using",
    "kubernetes",
    "docker",
    "firstly",
    "applications",
    "easier",
    "maintain",
    "broken",
    "smaller",
    "parts",
    "also",
    "parts",
    "run",
    "infrastructure",
    "much",
    "robust",
    "applications",
    "highly",
    "available",
    "applications",
    "able",
    "handle",
    "load",
    "demand",
    "improving",
    "user",
    "experience",
    "reducing",
    "resource",
    "waste",
    "applications",
    "become",
    "scalable",
    "need",
    "resources",
    "anticipation",
    "load",
    "peak",
    "times",
    "docker",
    "kubernetes",
    "backed",
    "strong",
    "open",
    "source",
    "communities",
    "part",
    "cloud",
    "native",
    "computing",
    "foundation",
    "linux",
    "foundation",
    "project",
    "aiming",
    "advance",
    "container",
    "technologies",
    "align",
    "industry",
    "around",
    "specific",
    "standards",
    "understand",
    "docker",
    "kubernetes",
    "really",
    "great",
    "relationship",
    "together",
    "let",
    "move",
    "ahead",
    "address",
    "main",
    "topic",
    "today",
    "session",
    "kubernetes",
    "versus",
    "docker",
    "firstly",
    "compare",
    "terms",
    "setup",
    "installation",
    "see",
    "screen",
    "kubernetes",
    "really",
    "requires",
    "series",
    "many",
    "manual",
    "steps",
    "set",
    "master",
    "worker",
    "node",
    "components",
    "cluster",
    "nodes",
    "really",
    "hard",
    "complicated",
    "install",
    "kubernetes",
    "hand",
    "installing",
    "docker",
    "matter",
    "commands",
    "linux",
    "platforms",
    "like",
    "ubuntu",
    "centos",
    "compared",
    "kubernetes",
    "docker",
    "much",
    "easy",
    "install",
    "set",
    "moving",
    "next",
    "difference",
    "locking",
    "kubernetes",
    "provides",
    "native",
    "storage",
    "solution",
    "log",
    "data",
    "whereas",
    "logging",
    "driver",
    "plugins",
    "available",
    "docker",
    "much",
    "higher",
    "terms",
    "monitoring",
    "kubernetes",
    "applications",
    "use",
    "various",
    "open",
    "source",
    "tools",
    "like",
    "prometheus",
    "grafana",
    "influxdb",
    "etc",
    "docker",
    "hand",
    "also",
    "tools",
    "like",
    "prometheus",
    "docker",
    "api",
    "etc",
    "monitoring",
    "purposes",
    "kubernetes",
    "supports",
    "5000",
    "nodes",
    "whereas",
    "docker",
    "supports",
    "2000",
    "nodes",
    "terms",
    "compatibility",
    "kubernetes",
    "comprehensive",
    "highly",
    "customizable",
    "whereas",
    "docker",
    "less",
    "extensive",
    "customizable",
    "know",
    "load",
    "balancing",
    "efficient",
    "distribution",
    "network",
    "application",
    "traffic",
    "across",
    "multiple",
    "servers",
    "server",
    "farm",
    "usually",
    "load",
    "balances",
    "sits",
    "client",
    "devices",
    "servers",
    "receiving",
    "distributing",
    "incoming",
    "requests",
    "available",
    "server",
    "capable",
    "fulfilling",
    "see",
    "kubernetes",
    "must",
    "manually",
    "configure",
    "load",
    "balancing",
    "settings",
    "whereas",
    "docker",
    "auto",
    "load",
    "balancing",
    "automated",
    "various",
    "companies",
    "use",
    "kubernetes",
    "docker",
    "companies",
    "like",
    "google",
    "shopify",
    "udemy",
    "slack",
    "robinhood",
    "delivery",
    "hero",
    "stack",
    "share",
    "new",
    "bank",
    "etc",
    "use",
    "kubernetes",
    "every",
    "day",
    "hand",
    "various",
    "companies",
    "like",
    "twitter",
    "business",
    "insider",
    "spotify",
    "paypal",
    "ebay",
    "oxford",
    "university",
    "press",
    "new",
    "york",
    "times",
    "new",
    "relic",
    "companies",
    "organizations",
    "make",
    "use",
    "docker",
    "compared",
    "kubernetes",
    "docker",
    "let",
    "us",
    "understand",
    "situation",
    "use",
    "kubernetes",
    "docker",
    "choices",
    "comes",
    "kubernetes",
    "docker",
    "happens",
    "choose",
    "use",
    "one",
    "three",
    "scenarios",
    "addressing",
    "first",
    "one",
    "docker",
    "without",
    "kubernetes",
    "second",
    "one",
    "kubernetes",
    "docker",
    "third",
    "one",
    "kubernetes",
    "docker",
    "already",
    "discussed",
    "benefits",
    "using",
    "kubernetes",
    "docker",
    "brief",
    "firstly",
    "let",
    "understand",
    "scenario",
    "docker",
    "used",
    "without",
    "kubernetes",
    "docker",
    "allow",
    "build",
    "container",
    "images",
    "manage",
    "registry",
    "run",
    "containers",
    "communicate",
    "eventually",
    "put",
    "together",
    "application",
    "using",
    "docker",
    "compose",
    "docker",
    "need",
    "comes",
    "producing",
    "managing",
    "container",
    "images",
    "putting",
    "containers",
    "operation",
    "runtime",
    "level",
    "answer",
    "part",
    "definitely",
    "yes",
    "become",
    "industry",
    "standard",
    "creating",
    "containers",
    "getting",
    "ground",
    "dockers",
    "current",
    "definition",
    "mission",
    "however",
    "moved",
    "away",
    "earlier",
    "attempts",
    "go",
    "beyond",
    "core",
    "functions",
    "longer",
    "attempting",
    "compete",
    "kubernetes",
    "companies",
    "infrastructure",
    "orchestration",
    "level",
    "let",
    "talk",
    "second",
    "scenario",
    "kubernetes",
    "include",
    "functionality",
    "creating",
    "managing",
    "container",
    "images",
    "run",
    "containers",
    "really",
    "needs",
    "work",
    "external",
    "container",
    "source",
    "runtime",
    "however",
    "capable",
    "using",
    "containers",
    "variety",
    "sources",
    "compatible",
    "runtimes",
    "docker",
    "inherently",
    "dependent",
    "docker",
    "docker",
    "alone",
    "kubernetes",
    "provides",
    "rich",
    "flexible",
    "powerful",
    "framework",
    "defining",
    "applications",
    "orchestrating",
    "containers",
    "scale",
    "well",
    "designed",
    "key",
    "enterprise",
    "level",
    "tasks",
    "automated",
    "scaling",
    "maintaining",
    "high",
    "availability",
    "operating",
    "environment",
    "also",
    "large",
    "community",
    "users",
    "developers",
    "corresponding",
    "large",
    "number",
    "support",
    "tools",
    "finally",
    "third",
    "scenario",
    "best",
    "choice",
    "tricky",
    "question",
    "answer",
    "obvious",
    "use",
    "truth",
    "kubernetes",
    "use",
    "container",
    "sources",
    "runtimes",
    "designed",
    "work",
    "well",
    "docker",
    "much",
    "kubernetes",
    "documentation",
    "well",
    "written",
    "docker",
    "mind",
    "basic",
    "kubernetes",
    "use",
    "case",
    "kubernetes",
    "plus",
    "docker",
    "kubernetes",
    "includes",
    "tools",
    "compose",
    "converts",
    "docker",
    "compose",
    "commands",
    "settings",
    "used",
    "kubernetes",
    "part",
    "dockerism",
    "raised",
    "kubernetes",
    "fact",
    "offered",
    "integrated",
    "kubernetes",
    "distribution",
    "bottom",
    "line",
    "kubernetes",
    "docker",
    "industry",
    "standards",
    "respective",
    "core",
    "areas",
    "expertise",
    "together",
    "provide",
    "well",
    "integrated",
    "platform",
    "container",
    "management",
    "deployment",
    "orchestration",
    "scale",
    "never",
    "really",
    "question",
    "kubernetes",
    "versus",
    "docker",
    "always",
    "q",
    "communities",
    "docker",
    "today",
    "even",
    "true",
    "music",
    "configuration",
    "management",
    "need",
    "configuration",
    "management",
    "system",
    "administrators",
    "usually",
    "perform",
    "repetitive",
    "tasks",
    "installing",
    "servers",
    "configuring",
    "servers",
    "forth",
    "automate",
    "task",
    "writing",
    "scripts",
    "hectic",
    "job",
    "working",
    "large",
    "infrastructure",
    "meet",
    "team",
    "dave",
    "developer",
    "sam",
    "sysadmin",
    "alice",
    "manager",
    "workflow",
    "goes",
    "dave",
    "passes",
    "updates",
    "operations",
    "team",
    "sam",
    "dave",
    "done",
    "certain",
    "software",
    "update",
    "pings",
    "sam",
    "deploy",
    "servers",
    "sam",
    "deploy",
    "update",
    "every",
    "individual",
    "server",
    "going",
    "take",
    "significant",
    "amount",
    "time",
    "deploy",
    "new",
    "update",
    "servers",
    "meanwhile",
    "manager",
    "alice",
    "comes",
    "great",
    "news",
    "getting",
    "traffic",
    "servers",
    "wants",
    "sam",
    "add",
    "200",
    "servers",
    "system",
    "sam",
    "even",
    "updated",
    "current",
    "20",
    "servers",
    "dave",
    "changes",
    "going",
    "200",
    "servers",
    "couple",
    "issues",
    "sam",
    "facing",
    "major",
    "ones",
    "configure",
    "large",
    "number",
    "servers",
    "together",
    "scaling",
    "new",
    "servers",
    "manually",
    "without",
    "configuration",
    "management",
    "tool",
    "fact",
    "always",
    "development",
    "deployment",
    "environment",
    "mismatch",
    "going",
    "halt",
    "work",
    "time",
    "time",
    "solve",
    "problem",
    "configuration",
    "management",
    "introduced",
    "workplaces",
    "configuration",
    "management",
    "practice",
    "handling",
    "changes",
    "systematically",
    "system",
    "maintains",
    "integrity",
    "time",
    "configuration",
    "management",
    "cm",
    "ensures",
    "current",
    "design",
    "build",
    "state",
    "system",
    "known",
    "good",
    "trusted",
    "rely",
    "tacit",
    "knowledge",
    "development",
    "teams",
    "allows",
    "access",
    "accurate",
    "historical",
    "record",
    "system",
    "state",
    "project",
    "management",
    "audit",
    "purposes",
    "configuration",
    "management",
    "overcome",
    "following",
    "challenges",
    "figure",
    "components",
    "change",
    "requirement",
    "changes",
    "also",
    "redo",
    "implementation",
    "requirements",
    "changed",
    "since",
    "last",
    "implementation",
    "also",
    "revert",
    "previous",
    "version",
    "component",
    "replaced",
    "new",
    "flawed",
    "versions",
    "finally",
    "replace",
    "wrong",
    "component",
    "case",
    "could",
    "accurately",
    "determine",
    "components",
    "needed",
    "replacing",
    "automated",
    "scenario",
    "dave",
    "passes",
    "updates",
    "sam",
    "scaling",
    "longer",
    "issue",
    "adding",
    "200",
    "servers",
    "said",
    "manager",
    "really",
    "problem",
    "help",
    "configuration",
    "management",
    "sam",
    "easily",
    "scale",
    "deploy",
    "configure",
    "many",
    "servers",
    "manager",
    "wants",
    "best",
    "example",
    "know",
    "new",
    "york",
    "stock",
    "exchange",
    "software",
    "glitch",
    "prevented",
    "nyse",
    "trading",
    "stocks",
    "almost",
    "hour",
    "half",
    "90",
    "minutes",
    "led",
    "millions",
    "dollars",
    "loss",
    "new",
    "software",
    "installation",
    "actually",
    "cause",
    "problem",
    "software",
    "installed",
    "eight",
    "nyse",
    "20",
    "trading",
    "terminals",
    "however",
    "despite",
    "tested",
    "night",
    "failed",
    "operate",
    "morning",
    "properly",
    "eight",
    "terminals",
    "need",
    "switch",
    "back",
    "old",
    "software",
    "result",
    "proper",
    "configuration",
    "management",
    "nysc",
    "recovered",
    "situation",
    "90",
    "minutes",
    "pretty",
    "fast",
    "scenario",
    "like",
    "problem",
    "continued",
    "longer",
    "consequence",
    "would",
    "far",
    "severe",
    "hope",
    "understand",
    "importance",
    "configuration",
    "management",
    "considered",
    "back",
    "backbone",
    "devops",
    "allows",
    "frequent",
    "software",
    "releases",
    "safest",
    "reliable",
    "way",
    "possible",
    "configuration",
    "management",
    "bringing",
    "consistency",
    "infrastructure",
    "done",
    "ensuring",
    "current",
    "design",
    "system",
    "state",
    "environment",
    "known",
    "trusted",
    "agreed",
    "upon",
    "everyone",
    "also",
    "helps",
    "record",
    "changes",
    "made",
    "system",
    "configuration",
    "management",
    "tools",
    "provide",
    "easy",
    "approach",
    "manage",
    "configure",
    "servers",
    "enables",
    "users",
    "manage",
    "configure",
    "entire",
    "infrastructure",
    "environment",
    "makes",
    "writing",
    "individual",
    "scripts",
    "servers",
    "time",
    "time",
    "get",
    "little",
    "things",
    "done",
    "obsolete",
    "one",
    "concept",
    "particular",
    "infrastructure",
    "code",
    "shell",
    "script",
    "configuration",
    "management",
    "tool",
    "script",
    "see",
    "front",
    "adding",
    "user",
    "host",
    "cm",
    "tool",
    "script",
    "easy",
    "understand",
    "write",
    "see",
    "almost",
    "pure",
    "english",
    "shell",
    "script",
    "harder",
    "understand",
    "learn",
    "write",
    "shell",
    "scripts",
    "first",
    "place",
    "infrastructure",
    "code",
    "enables",
    "automation",
    "operations",
    "build",
    "deploy",
    "manage",
    "provisioning",
    "code",
    "rather",
    "manually",
    "handling",
    "phase",
    "different",
    "environments",
    "basically",
    "bridges",
    "environment",
    "differences",
    "cis",
    "admins",
    "encountered",
    "every",
    "time",
    "either",
    "tried",
    "deploy",
    "new",
    "code",
    "set",
    "new",
    "servers",
    "obviously",
    "advantages",
    "example",
    "provisioning",
    "servers",
    "using",
    "infrastructure",
    "code",
    "way",
    "easier",
    "writing",
    "shell",
    "scripts",
    "shell",
    "scripts",
    "require",
    "workflow",
    "definitions",
    "saw",
    "whereas",
    "cm",
    "tool",
    "scripts",
    "predefined",
    "workflows",
    "basically",
    "makes",
    "cm",
    "tool",
    "script",
    "easy",
    "understand",
    "write",
    "eliminating",
    "requirement",
    "learning",
    "write",
    "shell",
    "scripts",
    "separately",
    "popular",
    "configuration",
    "management",
    "tools",
    "salt",
    "stack",
    "ansible",
    "cf",
    "engine",
    "chef",
    "one",
    "want",
    "talk",
    "today",
    "puppet",
    "puppet",
    "configuration",
    "management",
    "tool",
    "helps",
    "orchestrate",
    "provision",
    "deploy",
    "configure",
    "entire",
    "infrastructure",
    "organization",
    "enables",
    "users",
    "concentrate",
    "making",
    "delivery",
    "faster",
    "reliable",
    "rather",
    "continually",
    "fixing",
    "mistakes",
    "defines",
    "distinct",
    "configurations",
    "every",
    "host",
    "continuously",
    "checks",
    "confirms",
    "whether",
    "required",
    "configuration",
    "place",
    "altered",
    "altered",
    "puppet",
    "immediately",
    "reverts",
    "back",
    "required",
    "configuration",
    "host",
    "also",
    "helps",
    "dynamic",
    "scaling",
    "scaling",
    "machines",
    "providing",
    "control",
    "configured",
    "machine",
    "centralized",
    "master",
    "server",
    "repo",
    "based",
    "change",
    "gets",
    "propagated",
    "automatically",
    "puppet",
    "uses",
    "master",
    "slave",
    "architecture",
    "diagram",
    "front",
    "depicts",
    "basically",
    "happens",
    "let",
    "break",
    "little",
    "bit",
    "something",
    "known",
    "puppet",
    "agent",
    "sends",
    "facts",
    "puppet",
    "master",
    "facts",
    "basically",
    "key",
    "value",
    "data",
    "pair",
    "represents",
    "aspect",
    "slave",
    "state",
    "like",
    "ip",
    "address",
    "uptime",
    "operating",
    "systems",
    "whether",
    "virtual",
    "machine",
    "puppet",
    "master",
    "uses",
    "facts",
    "compile",
    "catalog",
    "defines",
    "slave",
    "configured",
    "catalog",
    "document",
    "describes",
    "desired",
    "state",
    "source",
    "puppet",
    "master",
    "manages",
    "honestly",
    "finally",
    "puppet",
    "slave",
    "reports",
    "back",
    "master",
    "indicating",
    "configuration",
    "complete",
    "visible",
    "puppet",
    "dashboard",
    "puppet",
    "master",
    "slave",
    "communicate",
    "secure",
    "encrypted",
    "channel",
    "help",
    "ssl",
    "puppet",
    "slave",
    "asks",
    "puppet",
    "master",
    "certificate",
    "receiving",
    "puppet",
    "master",
    "certificate",
    "master",
    "request",
    "sleep",
    "certificate",
    "master",
    "signed",
    "slave",
    "certificate",
    "slave",
    "request",
    "configuration",
    "data",
    "finally",
    "puppet",
    "master",
    "sends",
    "configuration",
    "puppet",
    "slave",
    "architecture",
    "works",
    "let",
    "us",
    "take",
    "look",
    "important",
    "puppet",
    "components",
    "starting",
    "manifests",
    "slave",
    "got",
    "configuration",
    "details",
    "puppet",
    "master",
    "written",
    "native",
    "puppet",
    "language",
    "details",
    "written",
    "language",
    "puppet",
    "understand",
    "termed",
    "manifests",
    "composed",
    "puppet",
    "code",
    "file",
    "names",
    "using",
    "dot",
    "pp",
    "extension",
    "basically",
    "like",
    "programs",
    "puppet",
    "example",
    "write",
    "manifest",
    "puppet",
    "master",
    "creates",
    "file",
    "installs",
    "apache",
    "server",
    "puppet",
    "slaves",
    "connected",
    "puppet",
    "master",
    "next",
    "module",
    "puppet",
    "module",
    "collection",
    "manifests",
    "data",
    "fax",
    "files",
    "templates",
    "etc",
    "specific",
    "directory",
    "structure",
    "modules",
    "used",
    "organizing",
    "puppet",
    "code",
    "allow",
    "split",
    "code",
    "multiple",
    "manifests",
    "hence",
    "also",
    "known",
    "bundles",
    "code",
    "data",
    "next",
    "component",
    "puppet",
    "resource",
    "resources",
    "fundamental",
    "unit",
    "modeling",
    "system",
    "configuration",
    "resource",
    "describes",
    "aspect",
    "system",
    "like",
    "specific",
    "service",
    "package",
    "next",
    "factor",
    "gathers",
    "basic",
    "information",
    "facts",
    "puppet",
    "slave",
    "hardware",
    "details",
    "network",
    "settings",
    "operating",
    "system",
    "type",
    "version",
    "ip",
    "addresses",
    "mac",
    "addresses",
    "ssh",
    "keys",
    "packs",
    "made",
    "available",
    "puppet",
    "masters",
    "manifests",
    "variables",
    "something",
    "known",
    "collective",
    "framework",
    "allows",
    "several",
    "jobs",
    "executed",
    "parallel",
    "multiple",
    "slaves",
    "performs",
    "various",
    "functions",
    "interacting",
    "clusters",
    "slaves",
    "whether",
    "small",
    "groups",
    "large",
    "deployments",
    "using",
    "broadcast",
    "paradigm",
    "distribute",
    "requests",
    "slaves",
    "receive",
    "requests",
    "time",
    "requests",
    "filters",
    "attached",
    "slaves",
    "matching",
    "filter",
    "act",
    "upon",
    "requests",
    "also",
    "use",
    "simple",
    "command",
    "line",
    "tool",
    "tools",
    "call",
    "remote",
    "slaves",
    "write",
    "custom",
    "reports",
    "infrastructure",
    "using",
    "collective",
    "next",
    "final",
    "component",
    "going",
    "talk",
    "catalog",
    "basically",
    "describes",
    "desired",
    "state",
    "manage",
    "resource",
    "slave",
    "compilation",
    "resources",
    "puppet",
    "master",
    "applies",
    "given",
    "slave",
    "well",
    "relationships",
    "resources",
    "catalogs",
    "compiled",
    "puppet",
    "master",
    "manifests",
    "slave",
    "provided",
    "data",
    "includes",
    "fax",
    "certificates",
    "environment",
    "one",
    "provided",
    "well",
    "optional",
    "external",
    "data",
    "external",
    "slave",
    "classifier",
    "exported",
    "resources",
    "functions",
    "master",
    "serves",
    "compiled",
    "catalog",
    "slave",
    "requested",
    "know",
    "puppet",
    "architecture",
    "various",
    "components",
    "puppet",
    "let",
    "understand",
    "opt",
    "puppet",
    "configuration",
    "management",
    "tool",
    "like",
    "puppet",
    "poker",
    "enthusiast",
    "card",
    "enthusiast",
    "ever",
    "played",
    "online",
    "games",
    "must",
    "heard",
    "something",
    "called",
    "zynga",
    "world",
    "largest",
    "social",
    "game",
    "developer",
    "infrastructure",
    "uses",
    "tens",
    "thousands",
    "servers",
    "public",
    "cloud",
    "private",
    "data",
    "centers",
    "early",
    "using",
    "manual",
    "processes",
    "including",
    "kickstarters",
    "post",
    "installs",
    "get",
    "hundreds",
    "servers",
    "online",
    "process",
    "faced",
    "number",
    "different",
    "problems",
    "first",
    "scalability",
    "consistency",
    "platform",
    "experiencing",
    "phenomenal",
    "growth",
    "infrastructure",
    "needed",
    "keep",
    "pace",
    "industry",
    "script",
    "based",
    "solutions",
    "manual",
    "approaches",
    "really",
    "sufficient",
    "needs",
    "second",
    "problem",
    "facing",
    "portable",
    "infrastructure",
    "zynga",
    "needed",
    "way",
    "leverage",
    "consistent",
    "configuration",
    "management",
    "approach",
    "public",
    "cloud",
    "infrastructure",
    "data",
    "centers",
    "given",
    "diversity",
    "various",
    "zynga",
    "gaming",
    "properties",
    "important",
    "team",
    "able",
    "quickly",
    "match",
    "right",
    "configuration",
    "right",
    "machine",
    "hence",
    "flexibility",
    "turned",
    "another",
    "problem",
    "finally",
    "infrastructure",
    "insights",
    "organization",
    "matured",
    "became",
    "important",
    "automated",
    "method",
    "visualizing",
    "properties",
    "machine",
    "company",
    "smart",
    "enough",
    "quickly",
    "realize",
    "need",
    "automated",
    "process",
    "even",
    "hit",
    "rapid",
    "scaling",
    "got",
    "puppet",
    "picture",
    "puppet",
    "first",
    "thing",
    "could",
    "expect",
    "speed",
    "recovery",
    "production",
    "operations",
    "team",
    "could",
    "rapidly",
    "deploy",
    "right",
    "configuration",
    "right",
    "box",
    "system",
    "got",
    "inappropriately",
    "reconfigured",
    "puppet",
    "automatically",
    "reverted",
    "back",
    "last",
    "stable",
    "state",
    "provided",
    "details",
    "necessary",
    "manually",
    "remediate",
    "system",
    "rapidly",
    "next",
    "thing",
    "speed",
    "deployment",
    "apart",
    "speed",
    "recovery",
    "speed",
    "deployment",
    "also",
    "increased",
    "manifold",
    "puppet",
    "provided",
    "significant",
    "time",
    "savings",
    "way",
    "operations",
    "team",
    "delivered",
    "services",
    "gaming",
    "studios",
    "next",
    "benefit",
    "using",
    "puppet",
    "consistency",
    "servers",
    "puppets",
    "model",
    "driven",
    "framework",
    "ensured",
    "consistent",
    "deployments",
    "according",
    "mark",
    "stockford",
    "vice",
    "president",
    "production",
    "operations",
    "zynga",
    "evident",
    "experienced",
    "many",
    "ways",
    "save",
    "time",
    "beauty",
    "using",
    "puppet",
    "according",
    "allowed",
    "deliver",
    "consistent",
    "configuration",
    "patients",
    "across",
    "servers",
    "short",
    "period",
    "every",
    "time",
    "finally",
    "model",
    "different",
    "approach",
    "using",
    "puppet",
    "made",
    "easy",
    "share",
    "configurations",
    "across",
    "organization",
    "helped",
    "enable",
    "developers",
    "operations",
    "teams",
    "work",
    "together",
    "ensure",
    "new",
    "service",
    "delivery",
    "extremely",
    "high",
    "quality",
    "hence",
    "furthered",
    "collaboration",
    "dozen",
    "people",
    "team",
    "got",
    "trained",
    "puppet",
    "knowledge",
    "disseminated",
    "throughout",
    "team",
    "operations",
    "team",
    "within",
    "individual",
    "gaming",
    "studio",
    "speed",
    "recovery",
    "speed",
    "deployment",
    "consistency",
    "servers",
    "collaboration",
    "four",
    "main",
    "benefits",
    "used",
    "puppet",
    "first",
    "guys",
    "aws",
    "management",
    "console",
    "going",
    "launch",
    "virtual",
    "machine",
    "ec2",
    "using",
    "option",
    "right",
    "going",
    "pick",
    "ami",
    "filtering",
    "free",
    "tier",
    "go",
    "get",
    "option",
    "ubuntu",
    "server",
    "going",
    "select",
    "chosen",
    "ami",
    "type",
    "going",
    "choose",
    "t2",
    "micro",
    "next",
    "move",
    "configure",
    "instance",
    "details",
    "right",
    "number",
    "instances",
    "needing",
    "two",
    "one",
    "master",
    "one",
    "agent",
    "going",
    "next",
    "add",
    "storage",
    "add",
    "tags",
    "unnecessary",
    "could",
    "obviously",
    "go",
    "ahead",
    "add",
    "tags",
    "find",
    "significant",
    "particular",
    "demonstration",
    "going",
    "move",
    "straight",
    "configure",
    "security",
    "group",
    "going",
    "going",
    "add",
    "rule",
    "need",
    "right",
    "something",
    "allow",
    "tcp",
    "connections",
    "agent",
    "going",
    "go",
    "ahead",
    "click",
    "tcp",
    "always",
    "go",
    "ahead",
    "use",
    "custom",
    "tcp",
    "agent",
    "okay",
    "going",
    "select",
    "anywhere",
    "right",
    "done",
    "going",
    "review",
    "launch",
    "okay",
    "basically",
    "created",
    "new",
    "key",
    "pair",
    "launched",
    "instances",
    "instances",
    "going",
    "launched",
    "okay",
    "right",
    "going",
    "going",
    "edit",
    "names",
    "instances",
    "going",
    "name",
    "one",
    "master",
    "going",
    "name",
    "one",
    "slave",
    "right",
    "instances",
    "running",
    "start",
    "master",
    "first",
    "connected",
    "machines",
    "using",
    "putty",
    "going",
    "start",
    "installing",
    "ntp",
    "date",
    "packages",
    "sync",
    "date",
    "time",
    "servers",
    "first",
    "gon",
    "na",
    "sudo",
    "apt",
    "update",
    "going",
    "apt",
    "install",
    "ntp",
    "date",
    "need",
    "take",
    "care",
    "running",
    "commands",
    "commands",
    "installation",
    "run",
    "root",
    "commands",
    "going",
    "proceed",
    "sudo",
    "right",
    "installed",
    "intimidate",
    "packages",
    "synced",
    "data",
    "time",
    "servers",
    "done",
    "master",
    "machine",
    "next",
    "going",
    "set",
    "hosts",
    "file",
    "machines",
    "remember",
    "run",
    "three",
    "commands",
    "machines",
    "right",
    "masters",
    "going",
    "edit",
    "host",
    "file",
    "add",
    "ip",
    "address",
    "master",
    "hosts",
    "file",
    "name",
    "puppet",
    "gon",
    "na",
    "open",
    "nano",
    "right",
    "master",
    "going",
    "edit",
    "host",
    "file",
    "add",
    "ip",
    "address",
    "master",
    "going",
    "name",
    "puppet",
    "agent",
    "going",
    "go",
    "nano",
    "going",
    "open",
    "hosts",
    "file",
    "add",
    "master",
    "add",
    "puppet",
    "agent",
    "going",
    "write",
    "okay",
    "next",
    "gon",
    "na",
    "going",
    "add",
    "puppetrepo",
    "repositories",
    "machines",
    "puppet",
    "uses",
    "port",
    "8140",
    "communicate",
    "ssl",
    "going",
    "open",
    "ufw",
    "command",
    "ufw",
    "enable",
    "click",
    "right",
    "ufw",
    "going",
    "allow",
    "port",
    "number",
    "8140",
    "right",
    "remember",
    "machines",
    "using",
    "right",
    "ufw",
    "enable",
    "ufw",
    "allow",
    "8140",
    "okay",
    "going",
    "add",
    "puppet",
    "6",
    "repository",
    "machines",
    "going",
    "app",
    "update",
    "first",
    "going",
    "get",
    "puppet",
    "6",
    "package",
    "going",
    "update",
    "system",
    "going",
    "thing",
    "machines",
    "right",
    "right",
    "moving",
    "going",
    "install",
    "puppet",
    "server",
    "master",
    "machine",
    "going",
    "apt",
    "install",
    "extension",
    "puppet",
    "server",
    "okay",
    "installation",
    "going",
    "going",
    "change",
    "memory",
    "allocation",
    "puppet",
    "server",
    "default",
    "setting",
    "2gb",
    "going",
    "basically",
    "set",
    "half",
    "1gb",
    "500",
    "mb",
    "according",
    "memory",
    "allocated",
    "particular",
    "vm",
    "whipped",
    "right",
    "done",
    "going",
    "going",
    "open",
    "default",
    "puppet",
    "server",
    "file",
    "change",
    "one",
    "line",
    "right",
    "everything",
    "pretty",
    "simply",
    "explained",
    "one",
    "line",
    "says",
    "modify",
    "would",
    "like",
    "change",
    "memory",
    "allocation",
    "enable",
    "jmx",
    "etc",
    "2gb",
    "going",
    "change",
    "1g",
    "also",
    "remember",
    "change",
    "502",
    "mb",
    "well",
    "yeah",
    "either",
    "half",
    "one",
    "fourth",
    "remember",
    "press",
    "try",
    "make",
    "edits",
    "go",
    "insert",
    "mode",
    "remember",
    "logged",
    "root",
    "user",
    "going",
    "click",
    "escape",
    "get",
    "insert",
    "mode",
    "see",
    "able",
    "insert",
    "anything",
    "right",
    "going",
    "exit",
    "right",
    "next",
    "edit",
    "configuration",
    "file",
    "puppet",
    "going",
    "puppet",
    "labs",
    "puppet",
    "dot",
    "conf",
    "conf",
    "okay",
    "add",
    "following",
    "lines",
    "going",
    "add",
    "main",
    "cert",
    "name",
    "equals",
    "puppet",
    "server",
    "equals",
    "puppet",
    "environment",
    "production",
    "run",
    "interval",
    "going",
    "escape",
    "get",
    "edited",
    "configuration",
    "file",
    "going",
    "need",
    "set",
    "puppet",
    "server",
    "certificate",
    "type",
    "go",
    "puppet",
    "labs",
    "certificate",
    "setup",
    "might",
    "take",
    "time",
    "done",
    "start",
    "enable",
    "puppet",
    "server",
    "going",
    "system",
    "ctl",
    "start",
    "puppet",
    "server",
    "followed",
    "systemctl",
    "enable",
    "puppet",
    "server",
    "started",
    "going",
    "enable",
    "right",
    "see",
    "something",
    "along",
    "lines",
    "executing",
    "puppet",
    "server",
    "enabled",
    "setting",
    "puppet",
    "server",
    "master",
    "going",
    "install",
    "puppet",
    "agent",
    "way",
    "installed",
    "puppet",
    "server",
    "using",
    "apt",
    "install",
    "since",
    "using",
    "aws",
    "instance",
    "see",
    "takes",
    "little",
    "time",
    "opposed",
    "using",
    "actual",
    "vm",
    "yeah",
    "going",
    "go",
    "puppet",
    "configuration",
    "file",
    "agent",
    "machine",
    "make",
    "changes",
    "think",
    "forgot",
    "space",
    "right",
    "hit",
    "eye",
    "make",
    "edits",
    "like",
    "done",
    "previously",
    "main",
    "certification",
    "name",
    "server",
    "environment",
    "runtime",
    "sort",
    "name",
    "puppet",
    "agent",
    "server",
    "puppet",
    "environment",
    "production",
    "run",
    "interval",
    "15",
    "minutes",
    "going",
    "hit",
    "escape",
    "gon",
    "na",
    "quit",
    "vi",
    "editor",
    "next",
    "going",
    "going",
    "start",
    "enable",
    "puppet",
    "server",
    "agent",
    "machine",
    "going",
    "use",
    "command",
    "op",
    "slash",
    "puppet",
    "lab",
    "slash",
    "bin",
    "slash",
    "puppet",
    "going",
    "call",
    "resource",
    "service",
    "call",
    "master",
    "ensure",
    "running",
    "enabled",
    "see",
    "service",
    "puppet",
    "running",
    "enabled",
    "see",
    "provider",
    "running",
    "puppet",
    "service",
    "agents",
    "generate",
    "send",
    "certificate",
    "authentication",
    "master",
    "server",
    "going",
    "move",
    "signing",
    "certificate",
    "right",
    "seen",
    "architecture",
    "section",
    "first",
    "move",
    "master",
    "machine",
    "okay",
    "finally",
    "extra",
    "bit",
    "signing",
    "certificate",
    "small",
    "little",
    "section",
    "consists",
    "three",
    "commands",
    "first",
    "going",
    "list",
    "certificates",
    "left",
    "signing",
    "master",
    "machine",
    "going",
    "use",
    "puppet",
    "server",
    "ca",
    "list",
    "command",
    "choose",
    "either",
    "individually",
    "sign",
    "certificate",
    "together",
    "either",
    "use",
    "command",
    "put",
    "sort",
    "name",
    "hyphen",
    "verify",
    "open",
    "agent",
    "use",
    "test",
    "command",
    "puppet",
    "installation",
    "setup",
    "complete",
    "music",
    "ansible",
    "well",
    "ansible",
    "simple",
    "open",
    "source",
    "id",
    "engine",
    "automates",
    "application",
    "deployment",
    "infra",
    "service",
    "orchestration",
    "cloud",
    "provisioning",
    "many",
    "tools",
    "ansible",
    "also",
    "easy",
    "deploy",
    "use",
    "agent",
    "custom",
    "security",
    "infrastructures",
    "ansible",
    "uses",
    "playbook",
    "describe",
    "automation",
    "jobs",
    "playbooks",
    "use",
    "simple",
    "language",
    "yaml",
    "think",
    "yaml",
    "well",
    "yaml",
    "human",
    "readable",
    "data",
    "serialization",
    "language",
    "commonly",
    "used",
    "configuration",
    "files",
    "also",
    "used",
    "many",
    "applications",
    "data",
    "also",
    "stored",
    "means",
    "easy",
    "humans",
    "understand",
    "read",
    "write",
    "advantage",
    "yaml",
    "file",
    "even",
    "infrastructure",
    "support",
    "guys",
    "read",
    "understand",
    "playbook",
    "debug",
    "needed",
    "basically",
    "really",
    "simple",
    "language",
    "makes",
    "really",
    "easy",
    "humans",
    "read",
    "write",
    "understand",
    "moving",
    "session",
    "ansible",
    "designed",
    "deployments",
    "ansible",
    "manage",
    "one",
    "system",
    "time",
    "models",
    "infrastructure",
    "describing",
    "systems",
    "interrelated",
    "ansible",
    "completely",
    "agentless",
    "means",
    "ansible",
    "works",
    "connecting",
    "nodes",
    "ssh",
    "default",
    "want",
    "method",
    "connection",
    "like",
    "curve",
    "loss",
    "ansible",
    "also",
    "gives",
    "option",
    "connecting",
    "nodes",
    "ansible",
    "pushes",
    "small",
    "programs",
    "called",
    "ansible",
    "modules",
    "ansible",
    "runs",
    "modules",
    "notes",
    "removes",
    "finished",
    "also",
    "manages",
    "inventory",
    "simple",
    "text",
    "files",
    "basically",
    "host",
    "files",
    "see",
    "screen",
    "ansible",
    "uses",
    "host",
    "files",
    "one",
    "group",
    "host",
    "control",
    "actions",
    "specified",
    "group",
    "playbooks",
    "right",
    "next",
    "telling",
    "ansible",
    "ansible",
    "tool",
    "configuration",
    "management",
    "also",
    "understand",
    "configuration",
    "management",
    "understand",
    "deploy",
    "tools",
    "talking",
    "configuration",
    "management",
    "configuration",
    "management",
    "terms",
    "ansible",
    "means",
    "maintains",
    "configuration",
    "product",
    "performance",
    "keeping",
    "record",
    "updating",
    "detailed",
    "information",
    "describes",
    "enterprise",
    "hardware",
    "software",
    "information",
    "typically",
    "includes",
    "exact",
    "versions",
    "updates",
    "applied",
    "install",
    "software",
    "packages",
    "locations",
    "also",
    "network",
    "addresses",
    "hardware",
    "devices",
    "example",
    "want",
    "install",
    "new",
    "version",
    "weblogic",
    "server",
    "machines",
    "present",
    "enterprise",
    "feasible",
    "manually",
    "go",
    "update",
    "every",
    "machine",
    "right",
    "install",
    "weblogic",
    "server",
    "one",
    "co",
    "machines",
    "ansible",
    "playbooks",
    "inventory",
    "written",
    "simple",
    "way",
    "list",
    "ip",
    "addresses",
    "notes",
    "inventory",
    "write",
    "playbook",
    "install",
    "weblogic",
    "server",
    "run",
    "playbook",
    "control",
    "machine",
    "installed",
    "nodes",
    "guys",
    "seen",
    "configuration",
    "management",
    "let",
    "show",
    "ansible",
    "work",
    "basically",
    "ansible",
    "works",
    "connecting",
    "notes",
    "pushing",
    "small",
    "programs",
    "called",
    "ansible",
    "modules",
    "ansible",
    "executes",
    "modules",
    "ssh",
    "default",
    "removes",
    "finished",
    "library",
    "modules",
    "decide",
    "one",
    "machine",
    "servers",
    "emails",
    "databases",
    "required",
    "management",
    "know",
    "see",
    "screen",
    "basically",
    "controlling",
    "node",
    "controls",
    "entire",
    "execution",
    "playbook",
    "node",
    "running",
    "installation",
    "inventory",
    "file",
    "provides",
    "list",
    "host",
    "ansible",
    "module",
    "needs",
    "run",
    "management",
    "node",
    "ssh",
    "connection",
    "executes",
    "small",
    "modules",
    "host",
    "machine",
    "installs",
    "product",
    "beauty",
    "ansible",
    "removes",
    "modules",
    "installed",
    "effectively",
    "connects",
    "host",
    "machine",
    "executes",
    "instructions",
    "successfully",
    "installed",
    "removes",
    "code",
    "already",
    "copied",
    "host",
    "machine",
    "executed",
    "guys",
    "ansible",
    "works",
    "talk",
    "features",
    "ansible",
    "let",
    "take",
    "look",
    "one",
    "one",
    "first",
    "agentless",
    "agentless",
    "mean",
    "kind",
    "software",
    "kind",
    "agent",
    "managing",
    "note",
    "unlike",
    "puppet",
    "chef",
    "need",
    "install",
    "puppet",
    "agent",
    "chef",
    "client",
    "note",
    "machines",
    "ansible",
    "install",
    "ansible",
    "control",
    "machine",
    "good",
    "go",
    "built",
    "top",
    "python",
    "helps",
    "provide",
    "lot",
    "functionalities",
    "python",
    "right",
    "coming",
    "ssh",
    "ansible",
    "uses",
    "ssh",
    "secure",
    "connections",
    "ssh",
    "simple",
    "passwordless",
    "network",
    "authentication",
    "protocol",
    "secure",
    "responsibility",
    "generate",
    "public",
    "key",
    "control",
    "machine",
    "copy",
    "key",
    "onto",
    "node",
    "machines",
    "coming",
    "final",
    "feature",
    "ansible",
    "also",
    "architecture",
    "sending",
    "configurations",
    "case",
    "ansible",
    "want",
    "make",
    "kind",
    "configuration",
    "changes",
    "notes",
    "write",
    "configurations",
    "push",
    "notes",
    "talk",
    "simple",
    "terms",
    "gives",
    "full",
    "control",
    "whenever",
    "want",
    "make",
    "changes",
    "notes",
    "also",
    "makes",
    "easy",
    "fast",
    "set",
    "needs",
    "minimal",
    "requirements",
    "guys",
    "features",
    "ansible",
    "agentless",
    "built",
    "top",
    "python",
    "uses",
    "ssh",
    "also",
    "uses",
    "architecture",
    "features",
    "section",
    "talking",
    "ansible",
    "architecture",
    "think",
    "difference",
    "architecture",
    "pool",
    "based",
    "architecture",
    "well",
    "tools",
    "like",
    "puppet",
    "chef",
    "basically",
    "pull",
    "based",
    "configuration",
    "management",
    "tools",
    "whereas",
    "ansible",
    "configuration",
    "management",
    "tool",
    "case",
    "puppet",
    "chef",
    "agents",
    "present",
    "agent",
    "software",
    "puppet",
    "basically",
    "called",
    "puppet",
    "agent",
    "case",
    "chef",
    "known",
    "chef",
    "client",
    "agent",
    "actually",
    "keeps",
    "pulling",
    "central",
    "server",
    "periodically",
    "kind",
    "configuration",
    "information",
    "whatever",
    "finds",
    "pulls",
    "changes",
    "gets",
    "affected",
    "node",
    "machines",
    "whereas",
    "case",
    "ansible",
    "since",
    "agents",
    "present",
    "whenever",
    "want",
    "make",
    "changes",
    "make",
    "changes",
    "directly",
    "push",
    "configurations",
    "directly",
    "whenever",
    "want",
    "got",
    "full",
    "control",
    "also",
    "configuration",
    "management",
    "system",
    "see",
    "screen",
    "version",
    "control",
    "system",
    "manages",
    "changes",
    "code",
    "base",
    "server",
    "basically",
    "server",
    "ansible",
    "configuration",
    "management",
    "tool",
    "system",
    "installed",
    "bunch",
    "nodes",
    "bunch",
    "nodes",
    "basically",
    "collection",
    "web",
    "servers",
    "application",
    "service",
    "also",
    "database",
    "servers",
    "connected",
    "main",
    "server",
    "via",
    "ssh",
    "happens",
    "main",
    "servers",
    "constantly",
    "pull",
    "version",
    "control",
    "system",
    "changes",
    "code",
    "base",
    "mean",
    "constantly",
    "keeps",
    "checking",
    "status",
    "version",
    "control",
    "system",
    "regular",
    "intervals",
    "time",
    "whenever",
    "kind",
    "changes",
    "specifications",
    "sent",
    "main",
    "server",
    "server",
    "decides",
    "take",
    "configuration",
    "changes",
    "according",
    "changes",
    "code",
    "base",
    "situation",
    "want",
    "write",
    "new",
    "configurations",
    "directly",
    "push",
    "onto",
    "node",
    "machines",
    "got",
    "full",
    "control",
    "whenever",
    "want",
    "make",
    "changes",
    "make",
    "required",
    "changes",
    "coming",
    "full",
    "base",
    "configuration",
    "relation",
    "version",
    "control",
    "system",
    "central",
    "server",
    "basically",
    "constantly",
    "pulls",
    "changes",
    "version",
    "control",
    "system",
    "changes",
    "code",
    "base",
    "whenever",
    "changes",
    "pulls",
    "changes",
    "main",
    "difference",
    "architectures",
    "configuration",
    "management",
    "tool",
    "got",
    "agent",
    "present",
    "agent",
    "client",
    "software",
    "manages",
    "nodes",
    "agent",
    "constantly",
    "pulls",
    "central",
    "server",
    "configuration",
    "changes",
    "mean",
    "keeps",
    "checking",
    "central",
    "server",
    "changes",
    "configuration",
    "needs",
    "made",
    "whenever",
    "finds",
    "kind",
    "configuration",
    "changes",
    "pulls",
    "changes",
    "gets",
    "affected",
    "onto",
    "node",
    "machines",
    "point",
    "wait",
    "agent",
    "pull",
    "changes",
    "configuration",
    "changes",
    "get",
    "affected",
    "onto",
    "nodes",
    "basic",
    "point",
    "little",
    "bit",
    "dependent",
    "agent",
    "improvement",
    "tools",
    "right",
    "chanting",
    "beginning",
    "session",
    "ansible",
    "really",
    "simple",
    "easy",
    "learn",
    "gives",
    "us",
    "simplicity",
    "system",
    "disadvantage",
    "system",
    "achieve",
    "full",
    "automation",
    "system",
    "usually",
    "possible",
    "board",
    "server",
    "configure",
    "without",
    "sort",
    "client",
    "server",
    "protocol",
    "also",
    "gives",
    "lack",
    "scalability",
    "well",
    "dealing",
    "hundreds",
    "servers",
    "system",
    "start",
    "showing",
    "limits",
    "unless",
    "make",
    "use",
    "trading",
    "alright",
    "guys",
    "differences",
    "push",
    "based",
    "configuration",
    "configuration",
    "ansible",
    "basically",
    "configuration",
    "management",
    "tool",
    "moving",
    "session",
    "talked",
    "much",
    "ansible",
    "would",
    "interested",
    "install",
    "think",
    "install",
    "ansible",
    "start",
    "telling",
    "steps",
    "install",
    "ansible",
    "let",
    "tell",
    "basically",
    "two",
    "types",
    "machine",
    "talk",
    "deployment",
    "control",
    "machine",
    "remote",
    "machines",
    "control",
    "machines",
    "machines",
    "manage",
    "machines",
    "remote",
    "machines",
    "ghost",
    "machines",
    "handled",
    "controlled",
    "control",
    "machine",
    "multiple",
    "remote",
    "machines",
    "handled",
    "single",
    "control",
    "machine",
    "managing",
    "remote",
    "machines",
    "install",
    "ansible",
    "control",
    "machine",
    "let",
    "tell",
    "steps",
    "install",
    "ansible",
    "type",
    "command",
    "sudo",
    "apt",
    "hyphen",
    "get",
    "update",
    "command",
    "basically",
    "update",
    "repositories",
    "done",
    "know",
    "install",
    "common",
    "software",
    "properties",
    "type",
    "command",
    "sudo",
    "apt",
    "hyphen",
    "get",
    "install",
    "software",
    "hyphen",
    "properties",
    "hyphen",
    "common",
    "see",
    "know",
    "screen",
    "installation",
    "going",
    "done",
    "type",
    "command",
    "sudo",
    "apt",
    "hyphen",
    "add",
    "hyphen",
    "repository",
    "space",
    "ppa",
    "colon",
    "ansible",
    "slash",
    "ansible",
    "basically",
    "include",
    "ansible",
    "repository",
    "see",
    "description",
    "ansible",
    "want",
    "continue",
    "press",
    "enter",
    "press",
    "enter",
    "see",
    "unit",
    "getting",
    "continued",
    "done",
    "update",
    "repositories",
    "type",
    "command",
    "sudo",
    "apt",
    "get",
    "update",
    "done",
    "updating",
    "repositories",
    "install",
    "ansible",
    "type",
    "command",
    "sudo",
    "apt",
    "hyphen",
    "get",
    "install",
    "simple",
    "basically",
    "install",
    "ansible",
    "tool",
    "see",
    "ansible",
    "installed",
    "guys",
    "install",
    "ansible",
    "let",
    "move",
    "session",
    "let",
    "give",
    "summary",
    "commands",
    "need",
    "install",
    "ansible",
    "update",
    "repositories",
    "done",
    "install",
    "common",
    "software",
    "properties",
    "also",
    "done",
    "add",
    "new",
    "repository",
    "name",
    "ansible",
    "update",
    "repositories",
    "finally",
    "install",
    "ansible",
    "commands",
    "use",
    "moving",
    "session",
    "think",
    "host",
    "inventory",
    "well",
    "inventory",
    "defines",
    "group",
    "hosts",
    "alike",
    "anyway",
    "example",
    "would",
    "want",
    "group",
    "web",
    "servers",
    "one",
    "group",
    "application",
    "service",
    "another",
    "right",
    "group",
    "multiple",
    "servers",
    "single",
    "server",
    "part",
    "multiple",
    "groups",
    "name",
    "group",
    "enclosed",
    "square",
    "brackets",
    "server",
    "names",
    "dns",
    "names",
    "ip",
    "addresses",
    "default",
    "ansible",
    "looks",
    "inventory",
    "file",
    "modified",
    "passing",
    "inventory",
    "part",
    "ansible",
    "command",
    "line",
    "modify",
    "way",
    "ansible",
    "connects",
    "host",
    "supplying",
    "additional",
    "information",
    "inventory",
    "file",
    "see",
    "screen",
    "list",
    "ip",
    "addresses",
    "notes",
    "also",
    "name",
    "groups",
    "different",
    "ip",
    "addresses",
    "example",
    "want",
    "group",
    "web",
    "servers",
    "together",
    "data",
    "servers",
    "together",
    "write",
    "group",
    "name",
    "two",
    "square",
    "brackets",
    "big",
    "group",
    "together",
    "whenever",
    "want",
    "make",
    "configuration",
    "changes",
    "web",
    "server",
    "database",
    "server",
    "mention",
    "group",
    "name",
    "host",
    "automatically",
    "configure",
    "web",
    "server",
    "guys",
    "host",
    "inventory",
    "talk",
    "another",
    "key",
    "term",
    "ansible",
    "ansible",
    "modules",
    "model",
    "executable",
    "plugins",
    "get",
    "real",
    "job",
    "done",
    "usually",
    "modules",
    "take",
    "key",
    "value",
    "arguments",
    "run",
    "customized",
    "way",
    "depending",
    "upon",
    "arguments",
    "module",
    "invoked",
    "command",
    "line",
    "included",
    "ansible",
    "playbook",
    "let",
    "tell",
    "commands",
    "related",
    "ansible",
    "modules",
    "want",
    "use",
    "modules",
    "command",
    "line",
    "type",
    "command",
    "ansible",
    "hyphen",
    "amping",
    "want",
    "use",
    "ping",
    "module",
    "ping",
    "hosts",
    "defined",
    "inventory",
    "type",
    "command",
    "ansible",
    "web",
    "servers",
    "hyphen",
    "command",
    "hyphen",
    "ls",
    "basically",
    "list",
    "modules",
    "present",
    "ping",
    "want",
    "flush",
    "iptable",
    "rules",
    "hosts",
    "inventory",
    "type",
    "command",
    "ansible",
    "hyphen",
    "inventory",
    "hyphen",
    "command",
    "hyphen",
    "iptables",
    "f",
    "hyphen",
    "knife",
    "bikram",
    "hyphen",
    "iphone",
    "ask",
    "hyphen",
    "beckham",
    "hyphen",
    "pass",
    "basically",
    "tell",
    "ansible",
    "execute",
    "command",
    "pseudo",
    "privileges",
    "people",
    "gather",
    "facts",
    "host",
    "type",
    "command",
    "ansible",
    "hyphen",
    "setup",
    "also",
    "want",
    "extract",
    "particular",
    "facts",
    "documentation",
    "setup",
    "module",
    "type",
    "command",
    "ansible",
    "hyphen",
    "doc",
    "setup",
    "guys",
    "commands",
    "use",
    "ansible",
    "modules",
    "moving",
    "session",
    "let",
    "tell",
    "yaml",
    "files",
    "file",
    "used",
    "ansible",
    "uses",
    "yaml",
    "syntax",
    "expressing",
    "ansible",
    "playbooks",
    "ants",
    "use",
    "cml",
    "really",
    "simple",
    "humans",
    "understand",
    "read",
    "write",
    "compared",
    "data",
    "formats",
    "like",
    "xml",
    "json",
    "every",
    "aml",
    "file",
    "optionally",
    "starts",
    "three",
    "hyphens",
    "ends",
    "three",
    "dots",
    "see",
    "screen",
    "starts",
    "three",
    "hyphens",
    "ends",
    "three",
    "dots",
    "also",
    "use",
    "abbreviation",
    "yamls",
    "represent",
    "dictionaries",
    "see",
    "screen",
    "basically",
    "follows",
    "pattern",
    "key",
    "value",
    "pair",
    "key",
    "value",
    "james",
    "various",
    "values",
    "like",
    "name",
    "row",
    "number",
    "division",
    "sex",
    "everything",
    "key",
    "james",
    "many",
    "values",
    "like",
    "name",
    "james",
    "john",
    "roll",
    "number",
    "34",
    "division",
    "b",
    "sex",
    "male",
    "also",
    "represent",
    "list",
    "yaml",
    "file",
    "every",
    "element",
    "list",
    "written",
    "new",
    "file",
    "indentation",
    "asians",
    "starting",
    "hyphen",
    "space",
    "example",
    "see",
    "screen",
    "writing",
    "countries",
    "written",
    "america",
    "hyphen",
    "space",
    "next",
    "value",
    "comes",
    "next",
    "line",
    "hyphen",
    "space",
    "china",
    "similarly",
    "canada",
    "iceland",
    "represent",
    "list",
    "abbreviation",
    "form",
    "represented",
    "form",
    "countries",
    "colon",
    "square",
    "bracket",
    "type",
    "america",
    "china",
    "canada",
    "iceland",
    "right",
    "talking",
    "yaml",
    "files",
    "also",
    "represent",
    "list",
    "dictionaries",
    "yaml",
    "uses",
    "pipeline",
    "include",
    "new",
    "lines",
    "showing",
    "multiple",
    "lines",
    "uses",
    "greater",
    "symbol",
    "suppress",
    "new",
    "lines",
    "showing",
    "multiple",
    "lines",
    "due",
    "read",
    "edit",
    "large",
    "lines",
    "cases",
    "indentations",
    "ignored",
    "guys",
    "yaml",
    "files",
    "talking",
    "ansible",
    "playbooks",
    "let",
    "tell",
    "write",
    "ansible",
    "playbook",
    "let",
    "see",
    "exactly",
    "ansible",
    "playbook",
    "told",
    "playbooks",
    "files",
    "ansible",
    "code",
    "written",
    "written",
    "yaml",
    "format",
    "yaml",
    "stands",
    "yet",
    "another",
    "markup",
    "language",
    "playbooks",
    "one",
    "core",
    "features",
    "ansible",
    "tell",
    "ansible",
    "execute",
    "like",
    "lists",
    "ansible",
    "contains",
    "list",
    "tasks",
    "playbooks",
    "contains",
    "step",
    "user",
    "wants",
    "execute",
    "particular",
    "machine",
    "playbooks",
    "run",
    "sequentially",
    "playbooks",
    "building",
    "blocks",
    "use",
    "cases",
    "ansible",
    "playbook",
    "aggregation",
    "one",
    "plays",
    "playbooks",
    "structured",
    "using",
    "place",
    "plain",
    "set",
    "playbook",
    "function",
    "place",
    "map",
    "set",
    "instructions",
    "defined",
    "particular",
    "host",
    "since",
    "ml",
    "strict",
    "type",
    "language",
    "need",
    "take",
    "extra",
    "care",
    "writing",
    "yaml",
    "files",
    "let",
    "tell",
    "create",
    "playbook",
    "mentioned",
    "yaman",
    "starts",
    "three",
    "hyphens",
    "different",
    "yaml",
    "tags",
    "let",
    "go",
    "every",
    "yaml",
    "tag",
    "different",
    "tags",
    "included",
    "name",
    "hosts",
    "words",
    "tasks",
    "name",
    "tag",
    "specifies",
    "name",
    "ansible",
    "book",
    "basically",
    "talking",
    "playbook",
    "logical",
    "name",
    "given",
    "playbook",
    "coming",
    "host",
    "tag",
    "host",
    "tag",
    "specifies",
    "list",
    "host",
    "host",
    "group",
    "want",
    "run",
    "task",
    "host",
    "field",
    "tag",
    "mandatory",
    "tells",
    "ansible",
    "host",
    "run",
    "listed",
    "task",
    "task",
    "run",
    "machine",
    "remote",
    "machine",
    "one",
    "run",
    "task",
    "multiple",
    "machines",
    "hence",
    "host",
    "tax",
    "group",
    "host",
    "entry",
    "well",
    "coming",
    "vars",
    "stack",
    "vars",
    "tag",
    "lets",
    "define",
    "variables",
    "use",
    "playbook",
    "usage",
    "similar",
    "variables",
    "programming",
    "language",
    "coming",
    "final",
    "task",
    "task",
    "playbooks",
    "contain",
    "tasks",
    "list",
    "tasks",
    "executed",
    "tasks",
    "list",
    "actions",
    "one",
    "needs",
    "perform",
    "task",
    "field",
    "contains",
    "name",
    "task",
    "works",
    "help",
    "text",
    "user",
    "well",
    "mandatory",
    "proves",
    "useful",
    "debugging",
    "playbook",
    "age",
    "task",
    "internally",
    "links",
    "piece",
    "code",
    "called",
    "module",
    "let",
    "move",
    "part",
    "basically",
    "know",
    "create",
    "playbook",
    "show",
    "working",
    "ansible",
    "let",
    "get",
    "started",
    "part",
    "first",
    "create",
    "ssh",
    "connection",
    "right",
    "create",
    "ssh",
    "connection",
    "node",
    "type",
    "command",
    "ssh",
    "hyphen",
    "keygen",
    "basically",
    "know",
    "generate",
    "key",
    "type",
    "command",
    "see",
    "output",
    "generating",
    "rsa",
    "key",
    "pair",
    "mention",
    "directory",
    "want",
    "store",
    "key",
    "press",
    "enter",
    "store",
    "default",
    "location",
    "let",
    "press",
    "enter",
    "press",
    "enter",
    "see",
    "output",
    "created",
    "directory",
    "ssh",
    "enter",
    "pass",
    "phrase",
    "let",
    "press",
    "enter",
    "mention",
    "pass",
    "phrase",
    "let",
    "mention",
    "see",
    "know",
    "key",
    "generated",
    "right",
    "key",
    "generated",
    "create",
    "host",
    "inventory",
    "file",
    "creating",
    "host",
    "inventory",
    "file",
    "mention",
    "specifications",
    "node",
    "ip",
    "address",
    "want",
    "connect",
    "type",
    "command",
    "type",
    "command",
    "sudo",
    "mention",
    "directory",
    "host",
    "mentioned",
    "directory",
    "press",
    "enter",
    "ask",
    "password",
    "mention",
    "password",
    "see",
    "screen",
    "default",
    "host",
    "inventory",
    "file",
    "mention",
    "name",
    "servers",
    "mention",
    "square",
    "brackets",
    "let",
    "say",
    "mentioned",
    "name",
    "test",
    "servers",
    "type",
    "test",
    "servers",
    "mention",
    "name",
    "node",
    "let",
    "type",
    "name",
    "node",
    "name",
    "node",
    "k",
    "node",
    "mentioned",
    "done",
    "save",
    "file",
    "close",
    "file",
    "press",
    "keyboard",
    "shortcut",
    "ctrl",
    "x",
    "press",
    "save",
    "host",
    "inventory",
    "file",
    "done",
    "know",
    "mention",
    "ssh",
    "generated",
    "key",
    "k",
    "note",
    "node",
    "configured",
    "right",
    "type",
    "command",
    "ssh",
    "hyphen",
    "copy",
    "hyphen",
    "id",
    "space",
    "hyphen",
    "space",
    "name",
    "node",
    "name",
    "node",
    "k",
    "node",
    "done",
    "press",
    "enter",
    "see",
    "know",
    "ask",
    "confirmation",
    "let",
    "say",
    "yes",
    "see",
    "output",
    "key",
    "copied",
    "done",
    "asked",
    "password",
    "let",
    "type",
    "node",
    "password",
    "see",
    "know",
    "key",
    "successfully",
    "added",
    "node",
    "move",
    "forward",
    "cleared",
    "terminal",
    "case",
    "want",
    "know",
    "command",
    "command",
    "clear",
    "type",
    "clear",
    "terminal",
    "gets",
    "cleared",
    "moving",
    "key",
    "generated",
    "know",
    "create",
    "playbook",
    "start",
    "creating",
    "playbook",
    "let",
    "check",
    "test",
    "servers",
    "running",
    "type",
    "command",
    "ansible",
    "space",
    "hyphen",
    "ping",
    "name",
    "server",
    "given",
    "test",
    "servers",
    "type",
    "command",
    "press",
    "enter",
    "done",
    "see",
    "output",
    "know",
    "successful",
    "let",
    "start",
    "creating",
    "playbooks",
    "start",
    "creating",
    "playbooks",
    "first",
    "create",
    "yaml",
    "file",
    "type",
    "command",
    "sudo",
    "nano",
    "let",
    "say",
    "give",
    "name",
    "edureka",
    "demo",
    "dot",
    "yaml",
    "opens",
    "iml",
    "file",
    "let",
    "start",
    "mentioning",
    "specifications",
    "required",
    "first",
    "mention",
    "host",
    "mentioned",
    "yaml",
    "file",
    "starts",
    "three",
    "hyphens",
    "let",
    "mention",
    "three",
    "hyphens",
    "press",
    "enter",
    "let",
    "start",
    "mentioning",
    "yaml",
    "tags",
    "let",
    "start",
    "host",
    "type",
    "hyphen",
    "host",
    "space",
    "colon",
    "mention",
    "name",
    "server",
    "test",
    "service",
    "mention",
    "bikram",
    "make",
    "sure",
    "know",
    "miss",
    "space",
    "come",
    "one",
    "go",
    "let",
    "say",
    "put",
    "true",
    "mention",
    "variables",
    "type",
    "command",
    "words",
    "make",
    "sure",
    "know",
    "maintaining",
    "syntax",
    "type",
    "words",
    "mention",
    "colon",
    "inside",
    "type",
    "ansible",
    "hyphen",
    "become",
    "hyphen",
    "pass",
    "colon",
    "edureka",
    "basically",
    "password",
    "mention",
    "task",
    "colon",
    "space",
    "colon",
    "inside",
    "mention",
    "name",
    "basically",
    "name",
    "task",
    "type",
    "hyphen",
    "name",
    "space",
    "colon",
    "install",
    "engines",
    "let",
    "mention",
    "package",
    "also",
    "space",
    "colon",
    "space",
    "pkg",
    "equal",
    "engines",
    "space",
    "state",
    "equal",
    "installed",
    "put",
    "space",
    "let",
    "put",
    "spaces",
    "mention",
    "notify",
    "colon",
    "press",
    "enter",
    "go",
    "inside",
    "mention",
    "hyphen",
    "start",
    "engines",
    "let",
    "press",
    "enter",
    "let",
    "mention",
    "handlers",
    "let",
    "maintain",
    "spaces",
    "space",
    "colon",
    "inside",
    "mention",
    "name",
    "mention",
    "name",
    "space",
    "colon",
    "start",
    "space",
    "engines",
    "mention",
    "service",
    "name",
    "engines",
    "state",
    "equal",
    "start",
    "guys",
    "yaml",
    "file",
    "create",
    "playbook",
    "press",
    "keyboard",
    "shortcut",
    "ctrl",
    "x",
    "press",
    "save",
    "file",
    "saved",
    "file",
    "run",
    "playbook",
    "type",
    "command",
    "ansible",
    "hyphen",
    "playbook",
    "name",
    "yaml",
    "files",
    "edirect",
    "demo",
    "mention",
    "breaker",
    "press",
    "enter",
    "see",
    "screen",
    "playbook",
    "running",
    "see",
    "playbook",
    "run",
    "basically",
    "mentions",
    "name",
    "server",
    "test",
    "servers",
    "mentions",
    "task",
    "wanted",
    "install",
    "engine",
    "mentioned",
    "task",
    "also",
    "mentions",
    "running",
    "hand",
    "node",
    "k",
    "node",
    "also",
    "mentions",
    "whether",
    "unreachable",
    "failed",
    "guys",
    "playbook",
    "runs",
    "playbook",
    "runs",
    "automatically",
    "installs",
    "engines",
    "container",
    "basically",
    "task",
    "mentioned",
    "check",
    "whether",
    "running",
    "node",
    "switch",
    "nodes",
    "let",
    "switch",
    "node",
    "check",
    "whether",
    "engines",
    "installed",
    "node",
    "let",
    "type",
    "command",
    "ps",
    "walks",
    "wa",
    "ux",
    "space",
    "pipeline",
    "space",
    "grep",
    "name",
    "file",
    "install",
    "engines",
    "let",
    "press",
    "enter",
    "see",
    "output",
    "know",
    "installed",
    "guys",
    "ansible",
    "basically",
    "works",
    "really",
    "simple",
    "right",
    "mention",
    "one",
    "node",
    "actions",
    "happen",
    "nodes",
    "connected",
    "foreign",
    "let",
    "start",
    "understanding",
    "use",
    "terraform",
    "great",
    "tools",
    "like",
    "ansible",
    "chef",
    "puppet",
    "salt",
    "stack",
    "makes",
    "terraform",
    "better",
    "tools",
    "first",
    "reason",
    "terraform",
    "server",
    "orchestration",
    "tool",
    "mentioned",
    "tools",
    "created",
    "server",
    "configuration",
    "meaning",
    "primary",
    "goal",
    "install",
    "manage",
    "software",
    "already",
    "existing",
    "server",
    "terraform",
    "concentrates",
    "server",
    "provisioning",
    "software",
    "container",
    "deployment",
    "left",
    "docker",
    "packer",
    "next",
    "reason",
    "immutable",
    "infrastructure",
    "chefs",
    "salt",
    "puppet",
    "ansible",
    "software",
    "update",
    "must",
    "run",
    "place",
    "thus",
    "every",
    "server",
    "grows",
    "unique",
    "record",
    "updates",
    "throughout",
    "life",
    "cycle",
    "quite",
    "often",
    "lead",
    "configuration",
    "drift",
    "differences",
    "configurations",
    "lead",
    "bugs",
    "terraform",
    "addresses",
    "issues",
    "utilizing",
    "immutable",
    "infrastructure",
    "approach",
    "every",
    "new",
    "update",
    "parameter",
    "creates",
    "separate",
    "configuration",
    "snapshot",
    "way",
    "updating",
    "development",
    "environment",
    "goes",
    "smoothly",
    "completely",
    "bug",
    "proof",
    "next",
    "reason",
    "declarative",
    "code",
    "style",
    "wild",
    "chef",
    "ansible",
    "forces",
    "write",
    "procedural",
    "instructions",
    "teaching",
    "desired",
    "state",
    "terraform",
    "prefer",
    "describing",
    "desired",
    "state",
    "system",
    "tool",
    "deals",
    "reaching",
    "goal",
    "state",
    "better",
    "procedural",
    "code",
    "need",
    "think",
    "recent",
    "events",
    "processes",
    "took",
    "place",
    "order",
    "write",
    "clear",
    "instructions",
    "terraform",
    "simply",
    "order",
    "tool",
    "something",
    "currently",
    "active",
    "state",
    "system",
    "code",
    "base",
    "remains",
    "quite",
    "small",
    "easily",
    "understandable",
    "fourth",
    "reason",
    "client",
    "architecture",
    "terraform",
    "leverages",
    "cloud",
    "provider",
    "api",
    "provisioning",
    "infrastructure",
    "removes",
    "need",
    "additional",
    "security",
    "checks",
    "running",
    "separate",
    "configuration",
    "management",
    "server",
    "multiple",
    "software",
    "agents",
    "ansible",
    "connecting",
    "ssh",
    "yet",
    "capabilities",
    "quite",
    "limited",
    "terraform",
    "terraform",
    "open",
    "source",
    "infrastructure",
    "code",
    "tool",
    "developed",
    "hashicor",
    "used",
    "define",
    "provision",
    "complete",
    "infrastructure",
    "using",
    "easy",
    "learn",
    "declarative",
    "language",
    "called",
    "hcl",
    "hashicorp",
    "configuration",
    "language",
    "terraform",
    "supports",
    "multiple",
    "providers",
    "aws",
    "azure",
    "kubernetes",
    "google",
    "cloud",
    "many",
    "let",
    "understand",
    "terraform",
    "better",
    "use",
    "case",
    "rapido",
    "agile",
    "innovative",
    "company",
    "providers",
    "strategic",
    "cloud",
    "consulting",
    "cloud",
    "migration",
    "devops",
    "automation",
    "managed",
    "services",
    "security",
    "consulting",
    "client",
    "looking",
    "cloud",
    "agonistic",
    "tool",
    "orchestrate",
    "infrastructure",
    "onto",
    "multiple",
    "public",
    "clouds",
    "wanted",
    "infrastructure",
    "matter",
    "minutes",
    "client",
    "different",
    "environments",
    "like",
    "production",
    "staging",
    "qa",
    "test",
    "database",
    "backups",
    "also",
    "included",
    "part",
    "infrastructure",
    "setup",
    "devops",
    "engineers",
    "rapidder",
    "debuted",
    "analyzed",
    "client",
    "requirements",
    "came",
    "solution",
    "using",
    "terraform",
    "codify",
    "provisioning",
    "infrastructure",
    "onto",
    "public",
    "cloud",
    "infrastructure",
    "rapidly",
    "also",
    "automated",
    "application",
    "deployment",
    "process",
    "integrating",
    "gitlab",
    "improve",
    "software",
    "development",
    "accelerate",
    "software",
    "delivery",
    "solution",
    "provided",
    "rapidder",
    "also",
    "took",
    "care",
    "database",
    "backup",
    "situation",
    "infrastructure",
    "destroyed",
    "using",
    "solution",
    "client",
    "able",
    "test",
    "application",
    "deploy",
    "production",
    "environment",
    "without",
    "downtime",
    "overall",
    "benefits",
    "client",
    "could",
    "experience",
    "include",
    "client",
    "ability",
    "create",
    "infrastructure",
    "multiple",
    "public",
    "clouds",
    "within",
    "matter",
    "minutes",
    "next",
    "client",
    "flexibility",
    "launch",
    "infrastructure",
    "needed",
    "furthermore",
    "automated",
    "deployments",
    "help",
    "client",
    "push",
    "application",
    "production",
    "seamlessly",
    "thereby",
    "reducing",
    "time",
    "market",
    "also",
    "automated",
    "backup",
    "database",
    "ensures",
    "always",
    "copy",
    "latest",
    "database",
    "moving",
    "ahead",
    "let",
    "understand",
    "terraform",
    "life",
    "cycle",
    "includes",
    "initialize",
    "plan",
    "apply",
    "destroy",
    "terraform",
    "init",
    "initializes",
    "working",
    "directory",
    "consists",
    "configuration",
    "files",
    "terraform",
    "plan",
    "used",
    "create",
    "execution",
    "plan",
    "reach",
    "desired",
    "state",
    "infrastructure",
    "terraform",
    "apply",
    "makes",
    "changes",
    "infrastructure",
    "defined",
    "plan",
    "infrastructure",
    "comes",
    "desired",
    "state",
    "terraform",
    "destroy",
    "used",
    "delete",
    "old",
    "infrastructure",
    "resources",
    "marked",
    "tainted",
    "apply",
    "phase",
    "let",
    "see",
    "terraform",
    "works",
    "terraform",
    "core",
    "uses",
    "two",
    "input",
    "sources",
    "job",
    "first",
    "input",
    "source",
    "terraform",
    "configuration",
    "user",
    "configure",
    "define",
    "needs",
    "created",
    "provisioned",
    "second",
    "input",
    "source",
    "state",
    "terraform",
    "keeps",
    "state",
    "current",
    "setup",
    "infrastructure",
    "looks",
    "like",
    "terraform",
    "code",
    "takes",
    "input",
    "figures",
    "plan",
    "needs",
    "done",
    "compares",
    "state",
    "checks",
    "current",
    "state",
    "configuration",
    "desire",
    "end",
    "result",
    "figures",
    "needs",
    "done",
    "get",
    "desired",
    "state",
    "configuration",
    "file",
    "second",
    "component",
    "architecture",
    "provide",
    "us",
    "specific",
    "technologies",
    "could",
    "cloud",
    "providers",
    "like",
    "aws",
    "azure",
    "infrastructure",
    "service",
    "platform",
    "gives",
    "possibility",
    "create",
    "infrastructure",
    "different",
    "levels",
    "terraform",
    "hundreds",
    "providers",
    "different",
    "technologies",
    "provider",
    "gives",
    "terraform",
    "user",
    "access",
    "resources",
    "example",
    "aws",
    "provider",
    "gives",
    "access",
    "hundreds",
    "aws",
    "resources",
    "like",
    "ec2",
    "instances",
    "aws",
    "users",
    "etc",
    "kubernetes",
    "provider",
    "access",
    "commodities",
    "resources",
    "like",
    "services",
    "deployments",
    "namespace",
    "etc",
    "terraform",
    "works",
    "way",
    "tries",
    "help",
    "provision",
    "cover",
    "complete",
    "application",
    "setup",
    "infrastructure",
    "way",
    "application",
    "moving",
    "ahead",
    "let",
    "see",
    "install",
    "terraform",
    "install",
    "terraform",
    "let",
    "go",
    "official",
    "website",
    "system",
    "using",
    "linux",
    "system",
    "install",
    "terraform",
    "copy",
    "link",
    "first",
    "need",
    "open",
    "terminal",
    "write",
    "wget",
    "paste",
    "link",
    "copied",
    "enter",
    "terraform",
    "get",
    "installed",
    "okay",
    "terraform",
    "installed",
    "since",
    "zip",
    "file",
    "let",
    "unzip",
    "file",
    "name",
    "let",
    "copy",
    "let",
    "move",
    "terraform",
    "location",
    "let",
    "see",
    "location",
    "moving",
    "terraform",
    "location",
    "okay",
    "successfully",
    "moved",
    "let",
    "see",
    "terraform",
    "version",
    "okay",
    "writing",
    "terraform",
    "entering",
    "see",
    "commands",
    "terraform",
    "provides",
    "commands",
    "also",
    "includes",
    "init",
    "plan",
    "apply",
    "destroy",
    "discussed",
    "something",
    "also",
    "called",
    "validate",
    "use",
    "several",
    "commands",
    "installed",
    "terraform",
    "system",
    "let",
    "move",
    "ahead",
    "demo",
    "let",
    "clear",
    "screen",
    "okay",
    "need",
    "going",
    "create",
    "directory",
    "going",
    "name",
    "terraform",
    "demo",
    "okay",
    "let",
    "move",
    "directory",
    "going",
    "going",
    "create",
    "configuration",
    "file",
    "terraform",
    "configuration",
    "file",
    "let",
    "write",
    "g",
    "edit",
    "file",
    "name",
    "let",
    "name",
    "demo",
    "one",
    "dot",
    "tf",
    "extension",
    "need",
    "put",
    "terraform",
    "configuration",
    "file",
    "going",
    "create",
    "hit",
    "enter",
    "okay",
    "g",
    "edit",
    "file",
    "terraform",
    "configuration",
    "file",
    "created",
    "going",
    "put",
    "configuration",
    "need",
    "initially",
    "let",
    "try",
    "create",
    "ec2",
    "instance",
    "amazon",
    "web",
    "services",
    "destroy",
    "ec2",
    "instance",
    "okay",
    "need",
    "terraform",
    "provides",
    "everything",
    "every",
    "support",
    "code",
    "online",
    "let",
    "say",
    "aws",
    "provider",
    "okay",
    "see",
    "usage",
    "need",
    "define",
    "want",
    "create",
    "use",
    "aws",
    "service",
    "let",
    "paste",
    "okay",
    "asks",
    "region",
    "access",
    "key",
    "secret",
    "key",
    "access",
    "key",
    "secret",
    "key",
    "get",
    "amazon",
    "web",
    "services",
    "let",
    "see",
    "going",
    "create",
    "user",
    "gon",
    "na",
    "give",
    "terraform",
    "going",
    "give",
    "programmatic",
    "axis",
    "along",
    "administrator",
    "access",
    "next",
    "let",
    "give",
    "demo",
    "value",
    "terraform",
    "okay",
    "let",
    "keep",
    "terraform",
    "summary",
    "let",
    "create",
    "user",
    "created",
    "csv",
    "file",
    "need",
    "download",
    "get",
    "know",
    "access",
    "key",
    "secret",
    "key",
    "okay",
    "file",
    "let",
    "open",
    "access",
    "key",
    "let",
    "copy",
    "going",
    "paste",
    "secret",
    "key",
    "let",
    "copy",
    "paste",
    "okay",
    "region",
    "let",
    "create",
    "us",
    "east",
    "2",
    "okay",
    "going",
    "put",
    "resources",
    "need",
    "since",
    "creating",
    "ec2",
    "instance",
    "let",
    "need",
    "part",
    "creating",
    "instance",
    "let",
    "paste",
    "okay",
    "says",
    "want",
    "create",
    "aws",
    "instance",
    "let",
    "change",
    "ami",
    "us",
    "s2",
    "every",
    "time",
    "change",
    "region",
    "ami",
    "going",
    "change",
    "let",
    "find",
    "us",
    "east",
    "let",
    "check",
    "uscs2",
    "right",
    "see",
    "instances",
    "running",
    "okay",
    "suppose",
    "want",
    "create",
    "instance",
    "want",
    "launch",
    "one",
    "see",
    "ami",
    "uscs2",
    "let",
    "copy",
    "paste",
    "okay",
    "think",
    "enough",
    "need",
    "add",
    "anything",
    "else",
    "provider",
    "aws",
    "given",
    "region",
    "axis",
    "secret",
    "key",
    "want",
    "create",
    "aws",
    "instance",
    "ami",
    "instance",
    "type",
    "t2",
    "micro",
    "let",
    "keep",
    "way",
    "okay",
    "let",
    "save",
    "file",
    "close",
    "let",
    "go",
    "back",
    "terminal",
    "going",
    "initialize",
    "let",
    "apply",
    "terraform",
    "plan",
    "okay",
    "see",
    "one",
    "plan",
    "easy",
    "two",
    "instance",
    "want",
    "create",
    "finally",
    "terraform",
    "apply",
    "asks",
    "approval",
    "write",
    "yes",
    "okay",
    "says",
    "one",
    "added",
    "let",
    "go",
    "back",
    "aws",
    "see",
    "ec2",
    "instance",
    "us",
    "east",
    "2",
    "created",
    "okay",
    "see",
    "instance",
    "created",
    "okay",
    "yeah",
    "one",
    "instance",
    "running",
    "usc",
    "instance",
    "created",
    "okay",
    "need",
    "want",
    "destroy",
    "instance",
    "created",
    "simply",
    "need",
    "terraform",
    "destroy",
    "destroy",
    "instance",
    "okay",
    "see",
    "one",
    "destroyed",
    "let",
    "see",
    "destroyed",
    "see",
    "instance",
    "destroyed",
    "simple",
    "basic",
    "demo",
    "shown",
    "let",
    "something",
    "little",
    "complicated",
    "let",
    "try",
    "add",
    "services",
    "aws",
    "provides",
    "let",
    "clear",
    "screen",
    "okay",
    "gon",
    "na",
    "g",
    "edit",
    "file",
    "see",
    "demo",
    "one",
    "okay",
    "written",
    "code",
    "partially",
    "heard",
    "let",
    "include",
    "things",
    "additional",
    "features",
    "code",
    "remember",
    "instance",
    "already",
    "destroyed",
    "initialize",
    "plan",
    "apply",
    "instance",
    "going",
    "created",
    "keep",
    "code",
    "okay",
    "want",
    "create",
    "instance",
    "apart",
    "want",
    "want",
    "create",
    "another",
    "ec2",
    "instance",
    "another",
    "region",
    "let",
    "see",
    "let",
    "copy",
    "okay",
    "need",
    "suppose",
    "want",
    "create",
    "another",
    "instance",
    "us",
    "east",
    "one",
    "let",
    "change",
    "access",
    "key",
    "secret",
    "key",
    "going",
    "remain",
    "making",
    "user",
    "okay",
    "let",
    "create",
    "another",
    "resource",
    "want",
    "create",
    "one",
    "instance",
    "okay",
    "let",
    "name",
    "something",
    "like",
    "us",
    "east",
    "one",
    "okay",
    "remember",
    "ami",
    "going",
    "change",
    "us",
    "east",
    "one",
    "okay",
    "let",
    "search",
    "ami",
    "okay",
    "yeah",
    "okay",
    "instance",
    "suppose",
    "want",
    "create",
    "one",
    "see",
    "ami",
    "linux",
    "let",
    "copy",
    "us",
    "east",
    "one",
    "let",
    "paste",
    "see",
    "ami",
    "divorce",
    "region",
    "region",
    "okay",
    "done",
    "need",
    "resource",
    "understand",
    "wants",
    "create",
    "ec2",
    "instance",
    "us",
    "east",
    "one",
    "going",
    "going",
    "create",
    "alias",
    "let",
    "put",
    "okay",
    "done",
    "added",
    "alias",
    "let",
    "refer",
    "part",
    "okay",
    "alias",
    "created",
    "going",
    "writing",
    "provider",
    "equal",
    "aws",
    "dot",
    "whatever",
    "alias",
    "provided",
    "copy",
    "paste",
    "okay",
    "done",
    "apart",
    "let",
    "see",
    "want",
    "create",
    "s3",
    "okay",
    "s3",
    "bucket",
    "okay",
    "s3",
    "need",
    "let",
    "copy",
    "paste",
    "okay",
    "let",
    "change",
    "something",
    "let",
    "keep",
    "one",
    "thing",
    "remember",
    "bucket",
    "name",
    "unique",
    "let",
    "try",
    "make",
    "unique",
    "name",
    "okay",
    "let",
    "keep",
    "let",
    "acl",
    "private",
    "let",
    "change",
    "terraform",
    "bucket",
    "let",
    "keep",
    "debbie",
    "okay",
    "apart",
    "going",
    "going",
    "add",
    "versioning",
    "adding",
    "versioning",
    "want",
    "preserve",
    "retrieve",
    "restore",
    "every",
    "version",
    "every",
    "object",
    "stored",
    "amazon",
    "s3",
    "bucket",
    "reason",
    "added",
    "versioning",
    "block",
    "okay",
    "looks",
    "fine",
    "let",
    "save",
    "okay",
    "one",
    "ec2",
    "instance",
    "us",
    "east",
    "2",
    "another",
    "us",
    "east",
    "one",
    "one",
    "s3",
    "bucket",
    "remember",
    "case",
    "us",
    "east",
    "2",
    "used",
    "areas",
    "going",
    "going",
    "refer",
    "default",
    "one",
    "alias",
    "nothing",
    "provided",
    "know",
    "refer",
    "going",
    "refer",
    "default",
    "uses",
    "okay",
    "let",
    "save",
    "let",
    "close",
    "okay",
    "let",
    "open",
    "terminal",
    "let",
    "initialize",
    "plan",
    "okay",
    "see",
    "three",
    "ec21s3",
    "let",
    "apply",
    "okay",
    "see",
    "three",
    "added",
    "let",
    "check",
    "aws",
    "okay",
    "east",
    "one",
    "one",
    "ec2",
    "okay",
    "see",
    "one",
    "instance",
    "running",
    "okay",
    "one",
    "instance",
    "running",
    "let",
    "check",
    "us",
    "east",
    "2",
    "okay",
    "one",
    "instance",
    "successfully",
    "running",
    "well",
    "let",
    "check",
    "s3",
    "bucket",
    "okay",
    "see",
    "one",
    "s3",
    "bucket",
    "created",
    "successfully",
    "great",
    "let",
    "say",
    "want",
    "add",
    "vpc",
    "one",
    "subnet",
    "also",
    "want",
    "create",
    "relational",
    "database",
    "system",
    "okay",
    "three",
    "things",
    "vpc",
    "subnet",
    "rds",
    "actually",
    "add",
    "rather",
    "creating",
    "another",
    "file",
    "let",
    "open",
    "okay",
    "let",
    "start",
    "adding",
    "one",
    "thing",
    "remember",
    "destroyed",
    "yet",
    "two",
    "ec2",
    "instances",
    "s3",
    "destroyed",
    "going",
    "going",
    "add",
    "okay",
    "going",
    "add",
    "let",
    "start",
    "vpc",
    "okay",
    "let",
    "copy",
    "need",
    "create",
    "vpc",
    "paste",
    "okay",
    "says",
    "resource",
    "want",
    "create",
    "aws",
    "vpc",
    "let",
    "give",
    "name",
    "dev",
    "okay",
    "cider",
    "block",
    "okay",
    "let",
    "keep",
    "let",
    "keep",
    "default",
    "okay",
    "let",
    "change",
    "tag",
    "name",
    "something",
    "else",
    "let",
    "keep",
    "dev",
    "vpc",
    "okay",
    "done",
    "suppose",
    "also",
    "want",
    "create",
    "subnet",
    "let",
    "search",
    "okay",
    "let",
    "copy",
    "paste",
    "let",
    "change",
    "little",
    "bit",
    "let",
    "give",
    "ems",
    "sub",
    "let",
    "keep",
    "side",
    "block",
    "let",
    "change",
    "dev",
    "subnet",
    "okay",
    "one",
    "thing",
    "see",
    "need",
    "vpc",
    "id",
    "since",
    "created",
    "vpc",
    "yet",
    "give",
    "vpc",
    "id",
    "way",
    "going",
    "let",
    "copy",
    "whole",
    "thing",
    "copy",
    "paste",
    "want",
    "double",
    "inverted",
    "commas",
    "okay",
    "going",
    "give",
    "vpc",
    "id",
    "subnet",
    "okay",
    "aws",
    "vpc",
    "dot",
    "dev",
    "dot",
    "id",
    "okay",
    "get",
    "id",
    "vpc",
    "okay",
    "done",
    "apart",
    "said",
    "suppose",
    "want",
    "create",
    "rds",
    "let",
    "see",
    "see",
    "basic",
    "usage",
    "let",
    "copy",
    "let",
    "make",
    "changes",
    "want",
    "engine",
    "version",
    "8",
    "point",
    "okay",
    "let",
    "change",
    "eight",
    "point",
    "zero",
    "okay",
    "going",
    "add",
    "one",
    "line",
    "want",
    "create",
    "snapshot",
    "rds",
    "creating",
    "okay",
    "suppose",
    "dummy",
    "rds",
    "created",
    "want",
    "backup",
    "going",
    "provide",
    "want",
    "snapshot",
    "okay",
    "okay",
    "written",
    "skip",
    "final",
    "snapshot",
    "kept",
    "true",
    "okay",
    "wo",
    "create",
    "snapshot",
    "okay",
    "done",
    "let",
    "maybe",
    "change",
    "name",
    "terraform",
    "db",
    "okay",
    "username",
    "let",
    "keep",
    "okay",
    "example",
    "overall",
    "added",
    "created",
    "one",
    "vpc",
    "subnet",
    "rds",
    "let",
    "save",
    "okay",
    "close",
    "let",
    "go",
    "back",
    "terminal",
    "initialize",
    "terraform",
    "plan",
    "okay",
    "see",
    "three",
    "add",
    "already",
    "two",
    "ec2",
    "1s3",
    "apart",
    "adding",
    "one",
    "vpc",
    "subnet",
    "rds",
    "okay",
    "let",
    "apply",
    "okay",
    "see",
    "three",
    "added",
    "let",
    "go",
    "check",
    "let",
    "check",
    "aws",
    "console",
    "see",
    "s3",
    "still",
    "running",
    "one",
    "created",
    "three",
    "things",
    "created",
    "vpc",
    "subnet",
    "rds",
    "okay",
    "let",
    "check",
    "see",
    "vpc",
    "created",
    "available",
    "running",
    "one",
    "default",
    "vpc",
    "already",
    "present",
    "apart",
    "let",
    "check",
    "subnets",
    "see",
    "subnet",
    "present",
    "running",
    "rest",
    "default",
    "okay",
    "apart",
    "let",
    "check",
    "rds",
    "see",
    "one",
    "database",
    "instance",
    "let",
    "see",
    "okay",
    "see",
    "rds",
    "created",
    "mysql",
    "running",
    "okay",
    "suppose",
    "everything",
    "created",
    "want",
    "destroy",
    "okay",
    "imagine",
    "much",
    "time",
    "would",
    "take",
    "destroy",
    "console",
    "let",
    "see",
    "going",
    "destroy",
    "terraform",
    "need",
    "terraform",
    "destroy",
    "destroy",
    "everything",
    "created",
    "file",
    "everything",
    "going",
    "destroyed",
    "includes",
    "two",
    "ec2s",
    "one",
    "s3",
    "vpc",
    "subnet",
    "rds",
    "okay",
    "everything",
    "destroyed",
    "one",
    "single",
    "command",
    "okay",
    "let",
    "see",
    "see",
    "six",
    "let",
    "see",
    "destroys",
    "everything",
    "okay",
    "says",
    "six",
    "destroyed",
    "let",
    "check",
    "one",
    "one",
    "okay",
    "currently",
    "rds",
    "let",
    "refresh",
    "see",
    "okay",
    "see",
    "rds",
    "deleted",
    "destroyed",
    "let",
    "next",
    "see",
    "vpcs",
    "see",
    "vpc",
    "created",
    "deleted",
    "one",
    "present",
    "default",
    "one",
    "let",
    "check",
    "subnet",
    "okay",
    "subnet",
    "created",
    "destroyed",
    "default",
    "subnets",
    "present",
    "apart",
    "let",
    "see",
    "ec2",
    "currently",
    "us",
    "east",
    "2",
    "right",
    "okay",
    "see",
    "instances",
    "running",
    "okay",
    "instance",
    "created",
    "destroyed",
    "let",
    "check",
    "s3",
    "see",
    "buckets",
    "s3",
    "created",
    "also",
    "destroyed",
    "okay",
    "let",
    "go",
    "back",
    "ec2",
    "going",
    "change",
    "region",
    "us",
    "east",
    "one",
    "remember",
    "created",
    "one",
    "instance",
    "different",
    "region",
    "using",
    "alias",
    "let",
    "see",
    "destroyed",
    "well",
    "okay",
    "see",
    "running",
    "instances",
    "okay",
    "instance",
    "created",
    "us",
    "east",
    "one",
    "also",
    "destroyed",
    "one",
    "example",
    "multiple",
    "services",
    "aws",
    "provides",
    "everything",
    "infrastructure",
    "code",
    "rather",
    "going",
    "console",
    "okay",
    "cloud",
    "platforms",
    "well",
    "like",
    "azure",
    "google",
    "clouds",
    "many",
    "simple",
    "example",
    "aws",
    "foreign",
    "music",
    "application",
    "used",
    "event",
    "monitoring",
    "alerting",
    "really",
    "records",
    "metrics",
    "talk",
    "metrics",
    "later",
    "session",
    "metrics",
    "records",
    "stored",
    "time",
    "series",
    "database",
    "built",
    "using",
    "http",
    "pull",
    "model",
    "also",
    "flexible",
    "queries",
    "alerting",
    "prometheus",
    "basically",
    "pulls",
    "metrics",
    "key",
    "value",
    "format",
    "stores",
    "data",
    "time",
    "series",
    "allowing",
    "users",
    "query",
    "data",
    "alert",
    "fashion",
    "given",
    "intervals",
    "prometheus",
    "hit",
    "targets",
    "collect",
    "metrics",
    "aggregate",
    "data",
    "show",
    "data",
    "even",
    "alert",
    "thresholds",
    "met",
    "spite",
    "beautiful",
    "graphical",
    "user",
    "interface",
    "know",
    "prometheus",
    "basically",
    "alert",
    "monitoring",
    "system",
    "let",
    "move",
    "understand",
    "need",
    "prometheus",
    "already",
    "mentioned",
    "introduction",
    "basically",
    "contributes",
    "devops",
    "system",
    "monitoring",
    "cloud",
    "native",
    "applications",
    "infrastructure",
    "also",
    "watching",
    "hundreds",
    "microservices",
    "really",
    "works",
    "well",
    "recording",
    "purely",
    "numeric",
    "time",
    "series",
    "data",
    "another",
    "really",
    "important",
    "benefit",
    "prometheus",
    "fits",
    "monitoring",
    "well",
    "monitoring",
    "highly",
    "dynamic",
    "service",
    "oriented",
    "architectures",
    "real",
    "advantage",
    "world",
    "full",
    "microservices",
    "support",
    "data",
    "collection",
    "querying",
    "particular",
    "strength",
    "another",
    "advantage",
    "prometheus",
    "designed",
    "reliability",
    "system",
    "go",
    "outage",
    "allow",
    "quickly",
    "diagnose",
    "problems",
    "prometheus",
    "server",
    "standalone",
    "depending",
    "network",
    "storage",
    "remote",
    "services",
    "easily",
    "rely",
    "parts",
    "infrastructure",
    "broken",
    "really",
    "need",
    "set",
    "extensive",
    "infrastructure",
    "use",
    "must",
    "wondering",
    "prometheus",
    "really",
    "time",
    "series",
    "databases",
    "used",
    "write",
    "one",
    "noticeable",
    "differences",
    "prometheus",
    "monitoring",
    "time",
    "series",
    "databases",
    "full",
    "based",
    "tool",
    "unlike",
    "nagios",
    "sensui",
    "etc",
    "pool",
    "based",
    "tool",
    "really",
    "actively",
    "scrapes",
    "targets",
    "order",
    "retrieve",
    "metrics",
    "example",
    "node",
    "exporters",
    "application",
    "exporters",
    "prometheus",
    "expects",
    "retrieve",
    "metrics",
    "via",
    "http",
    "calls",
    "done",
    "certain",
    "endpoints",
    "defined",
    "prometheus",
    "configuration",
    "node",
    "exporter",
    "application",
    "exporters",
    "listen",
    "particular",
    "ports",
    "prometheus",
    "server",
    "initiates",
    "http",
    "call",
    "particular",
    "exporter",
    "switch",
    "system",
    "application",
    "metrics",
    "end",
    "know",
    "prometheus",
    "important",
    "let",
    "move",
    "understand",
    "continuous",
    "monitoring",
    "prometheus",
    "monitoring",
    "applications",
    "application",
    "servers",
    "important",
    "part",
    "today",
    "devops",
    "culture",
    "process",
    "continuous",
    "monitoring",
    "obviously",
    "want",
    "continuously",
    "monitor",
    "applications",
    "servers",
    "application",
    "exceptions",
    "server",
    "cpu",
    "memory",
    "usage",
    "storage",
    "spikes",
    "also",
    "want",
    "get",
    "type",
    "notification",
    "cpu",
    "memory",
    "usage",
    "goes",
    "certain",
    "period",
    "time",
    "service",
    "application",
    "randomly",
    "stops",
    "responding",
    "perform",
    "appropriate",
    "actions",
    "failures",
    "exceptions",
    "prometheus",
    "used",
    "continuous",
    "monitoring",
    "monitoring",
    "number",
    "tools",
    "amazon",
    "cloudwatch",
    "nagios",
    "new",
    "relic",
    "many",
    "others",
    "prometheus",
    "popular",
    "free",
    "open",
    "source",
    "project",
    "monitoring",
    "dozens",
    "servers",
    "already",
    "mentioned",
    "even",
    "microservices",
    "though",
    "know",
    "prometh",
    "used",
    "continuous",
    "monitoring",
    "let",
    "move",
    "check",
    "prometheus",
    "architecture",
    "prometheus",
    "terms",
    "call",
    "main",
    "monitoring",
    "service",
    "prometheus",
    "server",
    "see",
    "screen",
    "things",
    "prometheus",
    "monitors",
    "called",
    "targets",
    "server",
    "monitoring",
    "service",
    "targets",
    "prometheus",
    "monitors",
    "hope",
    "clear",
    "short",
    "prometheus",
    "server",
    "monitors",
    "targets",
    "said",
    "earlier",
    "targets",
    "also",
    "refer",
    "array",
    "things",
    "could",
    "single",
    "server",
    "target",
    "probing",
    "endpoints",
    "http",
    "https",
    "dns",
    "tcp",
    "could",
    "simply",
    "http",
    "endpoint",
    "application",
    "exposes",
    "prometheus",
    "server",
    "gets",
    "application",
    "health",
    "status",
    "let",
    "explain",
    "little",
    "bit",
    "metric",
    "unit",
    "target",
    "current",
    "cpu",
    "status",
    "memory",
    "usage",
    "specific",
    "unit",
    "would",
    "like",
    "monitor",
    "called",
    "metric",
    "prometheus",
    "server",
    "collects",
    "metrics",
    "targets",
    "http",
    "stores",
    "locally",
    "remotely",
    "displace",
    "back",
    "prometheus",
    "server",
    "prometheus",
    "server",
    "scripts",
    "targets",
    "interval",
    "define",
    "collect",
    "metrics",
    "specific",
    "targets",
    "example",
    "minute",
    "30",
    "seconds",
    "whatever",
    "want",
    "give",
    "target",
    "finally",
    "store",
    "time",
    "series",
    "database",
    "see",
    "storage",
    "box",
    "time",
    "series",
    "database",
    "define",
    "targets",
    "scraped",
    "time",
    "interval",
    "scraping",
    "metrics",
    "prometheus",
    "dot",
    "yml",
    "configuration",
    "file",
    "get",
    "metrics",
    "details",
    "querying",
    "prometheus",
    "time",
    "series",
    "database",
    "prometheus",
    "stores",
    "metrics",
    "use",
    "query",
    "language",
    "called",
    "prompt",
    "ql",
    "prometheus",
    "server",
    "query",
    "metrics",
    "targets",
    "words",
    "ask",
    "prometheus",
    "server",
    "via",
    "prom",
    "ql",
    "show",
    "us",
    "status",
    "particular",
    "target",
    "one",
    "particular",
    "time",
    "see",
    "third",
    "white",
    "box",
    "accepts",
    "queries",
    "accepts",
    "prompt",
    "ql",
    "queries",
    "prometheus",
    "provides",
    "client",
    "libraries",
    "number",
    "languages",
    "use",
    "provide",
    "health",
    "status",
    "application",
    "prometheus",
    "really",
    "application",
    "monitoring",
    "use",
    "something",
    "called",
    "exporters",
    "monitor",
    "systems",
    "exporter",
    "piece",
    "software",
    "gets",
    "existing",
    "metrics",
    "system",
    "eventually",
    "export",
    "metric",
    "format",
    "prometheus",
    "server",
    "eventually",
    "understand",
    "sample",
    "metric",
    "prometheus",
    "server",
    "could",
    "current",
    "usage",
    "free",
    "memory",
    "file",
    "system",
    "free",
    "via",
    "node",
    "exporter",
    "primitive",
    "server",
    "learn",
    "demo",
    "part",
    "session",
    "hope",
    "prometheus",
    "server",
    "clear",
    "main",
    "component",
    "prometheus",
    "server",
    "divided",
    "three",
    "parts",
    "retrieval",
    "part",
    "storage",
    "part",
    "http",
    "server",
    "http",
    "server",
    "really",
    "accepts",
    "queries",
    "displays",
    "graphical",
    "user",
    "interface",
    "also",
    "learning",
    "alert",
    "manager",
    "later",
    "session",
    "hope",
    "clear",
    "let",
    "move",
    "next",
    "part",
    "session",
    "learn",
    "prometheus",
    "metrics",
    "types",
    "unit",
    "target",
    "current",
    "cpu",
    "status",
    "memory",
    "usage",
    "specific",
    "unit",
    "would",
    "like",
    "monitor",
    "simply",
    "called",
    "metric",
    "server",
    "collects",
    "metrics",
    "stores",
    "either",
    "locally",
    "remotely",
    "eventually",
    "displays",
    "prometheus",
    "graphical",
    "user",
    "interface",
    "moving",
    "let",
    "us",
    "check",
    "four",
    "different",
    "types",
    "metrics",
    "available",
    "first",
    "one",
    "talking",
    "counters",
    "counter",
    "simply",
    "cumulative",
    "metric",
    "represents",
    "single",
    "monotically",
    "increasing",
    "counter",
    "whose",
    "value",
    "increase",
    "reset",
    "zero",
    "restart",
    "example",
    "use",
    "counter",
    "represent",
    "number",
    "requests",
    "served",
    "tasks",
    "completed",
    "errors",
    "always",
    "remember",
    "use",
    "counter",
    "expose",
    "value",
    "decrease",
    "example",
    "use",
    "counter",
    "number",
    "currently",
    "running",
    "processes",
    "instead",
    "user",
    "gauge",
    "talking",
    "gauges",
    "bit",
    "client",
    "library",
    "usage",
    "documentation",
    "counters",
    "go",
    "java",
    "python",
    "ruby",
    "let",
    "move",
    "understand",
    "next",
    "metric",
    "type",
    "gauges",
    "sure",
    "must",
    "aware",
    "gauge",
    "gauge",
    "metric",
    "represents",
    "single",
    "numerical",
    "value",
    "arbitrarily",
    "go",
    "gauges",
    "typically",
    "used",
    "measured",
    "values",
    "like",
    "temperatures",
    "current",
    "memory",
    "usage",
    "check",
    "speedometer",
    "car",
    "looks",
    "like",
    "gauge",
    "right",
    "gauge",
    "exactly",
    "talking",
    "client",
    "library",
    "uses",
    "documentation",
    "gauges",
    "go",
    "java",
    "python",
    "rupee",
    "next",
    "metric",
    "type",
    "histogram",
    "histogram",
    "samples",
    "observations",
    "counts",
    "configurable",
    "buckets",
    "also",
    "provides",
    "sum",
    "observed",
    "values",
    "histogram",
    "base",
    "metric",
    "name",
    "base",
    "name",
    "exposes",
    "multiple",
    "time",
    "series",
    "scrape",
    "operating",
    "buckets",
    "remember",
    "histogram",
    "cumulative",
    "moving",
    "next",
    "metric",
    "summary",
    "similar",
    "histogram",
    "summary",
    "samples",
    "observations",
    "also",
    "provides",
    "total",
    "count",
    "observations",
    "sum",
    "observed",
    "values",
    "really",
    "calculates",
    "configurable",
    "quantiles",
    "sliding",
    "time",
    "window",
    "summary",
    "base",
    "metric",
    "name",
    "base",
    "name",
    "exposes",
    "multiple",
    "time",
    "series",
    "script",
    "difference",
    "summary",
    "histogram",
    "know",
    "range",
    "values",
    "upfront",
    "use",
    "histograms",
    "whereas",
    "histogram",
    "know",
    "range",
    "values",
    "upfront",
    "define",
    "let",
    "move",
    "demo",
    "part",
    "session",
    "install",
    "prometheus",
    "linux",
    "virtual",
    "machine",
    "going",
    "check",
    "ubuntu",
    "machine",
    "number",
    "first",
    "thing",
    "going",
    "going",
    "install",
    "prometheus",
    "official",
    "website",
    "going",
    "go",
    "web",
    "browser",
    "gon",
    "na",
    "type",
    "prometheus",
    "web",
    "browser",
    "going",
    "click",
    "first",
    "link",
    "see",
    "official",
    "website",
    "prometheus",
    "gon",
    "na",
    "click",
    "download",
    "button",
    "click",
    "download",
    "button",
    "redirect",
    "page",
    "see",
    "lot",
    "products",
    "prometheus",
    "alert",
    "manager",
    "black",
    "box",
    "exporter",
    "lot",
    "keep",
    "scrolling",
    "right",
    "going",
    "downloading",
    "prometheus",
    "going",
    "stay",
    "going",
    "click",
    "operating",
    "system",
    "linux",
    "show",
    "tar",
    "file",
    "linux",
    "operating",
    "system",
    "gon",
    "na",
    "right",
    "click",
    "going",
    "click",
    "copy",
    "link",
    "location",
    "going",
    "switch",
    "back",
    "terminal",
    "click",
    "wget",
    "download",
    "prometheus",
    "linux",
    "operating",
    "system",
    "downloaded",
    "want",
    "see",
    "list",
    "files",
    "tar",
    "file",
    "see",
    "prometheus",
    "linux",
    "star",
    "file",
    "present",
    "currently",
    "prometheus",
    "folder",
    "going",
    "going",
    "copy",
    "file",
    "untie",
    "using",
    "command",
    "tar",
    "hyphen",
    "x",
    "v",
    "f",
    "going",
    "paste",
    "file",
    "immediately",
    "enter",
    "file",
    "done",
    "going",
    "list",
    "number",
    "files",
    "currently",
    "present",
    "prometheus",
    "file",
    "see",
    "file",
    "untied",
    "clear",
    "screen",
    "okay",
    "going",
    "list",
    "see",
    "clearly",
    "going",
    "copy",
    "file",
    "enter",
    "directory",
    "going",
    "list",
    "files",
    "present",
    "see",
    "console",
    "libraries",
    "consoles",
    "license",
    "notice",
    "file",
    "named",
    "prometheus",
    "application",
    "prometheus",
    "application",
    "already",
    "mentioned",
    "configuration",
    "file",
    "really",
    "defines",
    "targets",
    "scraped",
    "right",
    "also",
    "time",
    "interval",
    "scraping",
    "metrics",
    "let",
    "check",
    "parameters",
    "mentioned",
    "configuration",
    "file",
    "going",
    "use",
    "scat",
    "command",
    "see",
    "scrape",
    "interval",
    "parameter",
    "15",
    "seconds",
    "set",
    "scrape",
    "interval",
    "every",
    "15",
    "seconds",
    "default",
    "every",
    "one",
    "minute",
    "also",
    "alert",
    "manager",
    "configuration",
    "right",
    "set",
    "also",
    "load",
    "rules",
    "evaluate",
    "according",
    "global",
    "evaluation",
    "interval",
    "see",
    "default",
    "currently",
    "active",
    "9090",
    "port",
    "okay",
    "default",
    "scrap",
    "configuration",
    "containing",
    "exactly",
    "one",
    "end",
    "point",
    "scrape",
    "given",
    "prometheus",
    "right",
    "already",
    "mentioned",
    "prometheus",
    "tool",
    "application",
    "scrape",
    "metrics",
    "different",
    "applications",
    "default",
    "right",
    "prometheus",
    "scraped",
    "currently",
    "present",
    "port",
    "number",
    "9090",
    "hope",
    "clear",
    "learn",
    "rules",
    "next",
    "part",
    "session",
    "also",
    "learn",
    "alert",
    "manager",
    "configuration",
    "later",
    "part",
    "session",
    "clear",
    "later",
    "hope",
    "scrap",
    "interval",
    "know",
    "scrap",
    "configs",
    "clear",
    "let",
    "move",
    "next",
    "part",
    "gon",
    "na",
    "clear",
    "screen",
    "going",
    "execute",
    "prometheus",
    "using",
    "point",
    "front",
    "slash",
    "prometheus",
    "immediately",
    "activate",
    "get",
    "prometheus",
    "application",
    "running",
    "move",
    "back",
    "web",
    "browser",
    "type",
    "localhost",
    "9090",
    "redirect",
    "prometheus",
    "application",
    "see",
    "come",
    "terminal",
    "right",
    "okay",
    "reload",
    "page",
    "see",
    "enabled",
    "connect",
    "prometheus",
    "create",
    "prometheus",
    "service",
    "get",
    "running",
    "let",
    "learn",
    "going",
    "clear",
    "screen",
    "able",
    "run",
    "prometheus",
    "service",
    "going",
    "use",
    "copy",
    "command",
    "going",
    "use",
    "cp",
    "hyphen",
    "r",
    "command",
    "going",
    "copy",
    "files",
    "consisting",
    "folder",
    "destination",
    "folder",
    "going",
    "use",
    "command",
    "hyphen",
    "user",
    "local",
    "hyphen",
    "bin",
    "prometheus",
    "application",
    "run",
    "service",
    "compulsorily",
    "dot",
    "service",
    "file",
    "let",
    "go",
    "ahead",
    "create",
    "one",
    "create",
    "service",
    "file",
    "going",
    "use",
    "command",
    "sudo",
    "vi",
    "going",
    "enter",
    "particular",
    "folder",
    "see",
    "typed",
    "tiny",
    "piece",
    "code",
    "see",
    "executable",
    "command",
    "configuration",
    "file",
    "let",
    "go",
    "ahead",
    "save",
    "okay",
    "great",
    "service",
    "file",
    "created",
    "going",
    "clear",
    "screen",
    "going",
    "start",
    "service",
    "file",
    "done",
    "going",
    "check",
    "status",
    "prometheus",
    "active",
    "running",
    "great",
    "want",
    "stop",
    "prometheus",
    "going",
    "type",
    "command",
    "sudo",
    "service",
    "prometheus",
    "stop",
    "okay",
    "refresh",
    "page",
    "see",
    "prometheus",
    "running",
    "great",
    "hope",
    "clear",
    "create",
    "service",
    "file",
    "get",
    "prometheus",
    "running",
    "hope",
    "clear",
    "hope",
    "understood",
    "install",
    "prometheus",
    "virtual",
    "machine",
    "next",
    "part",
    "demo",
    "going",
    "brief",
    "graphical",
    "user",
    "interface",
    "prometheus",
    "stay",
    "tuned",
    "okay",
    "gon",
    "na",
    "check",
    "user",
    "interface",
    "prometheus",
    "previous",
    "session",
    "installed",
    "prometheus",
    "got",
    "instance",
    "running",
    "click",
    "prometheus",
    "take",
    "see",
    "three",
    "options",
    "says",
    "enable",
    "queue",
    "history",
    "use",
    "local",
    "time",
    "enable",
    "autocomplete",
    "use",
    "local",
    "time",
    "like",
    "enter",
    "time",
    "evaluate",
    "queries",
    "search",
    "bar",
    "type",
    "expression",
    "like",
    "execute",
    "expression",
    "query",
    "like",
    "execute",
    "usually",
    "executed",
    "two",
    "different",
    "forms",
    "table",
    "form",
    "graph",
    "form",
    "since",
    "expression",
    "query",
    "says",
    "data",
    "queried",
    "yet",
    "top",
    "see",
    "three",
    "options",
    "says",
    "enable",
    "query",
    "history",
    "use",
    "local",
    "time",
    "enable",
    "autocomplete",
    "option",
    "allow",
    "use",
    "local",
    "time",
    "since",
    "india",
    "10",
    "8",
    "right",
    "local",
    "time",
    "want",
    "also",
    "enable",
    "query",
    "history",
    "tree",
    "queries",
    "executed",
    "past",
    "option",
    "simply",
    "enable",
    "check",
    "queries",
    "executed",
    "past",
    "going",
    "untick",
    "queries",
    "executed",
    "past",
    "anyway",
    "another",
    "interesting",
    "thing",
    "page",
    "add",
    "several",
    "panels",
    "right",
    "execute",
    "different",
    "queries",
    "great",
    "option",
    "add",
    "panel",
    "added",
    "recent",
    "times",
    "new",
    "user",
    "interface",
    "also",
    "classic",
    "user",
    "interface",
    "shift",
    "see",
    "enable",
    "query",
    "history",
    "option",
    "common",
    "new",
    "user",
    "interface",
    "also",
    "bar",
    "allow",
    "type",
    "expression",
    "query",
    "also",
    "insert",
    "metric",
    "cursor",
    "since",
    "prometheus",
    "written",
    "golang",
    "lot",
    "metrics",
    "related",
    "also",
    "metrics",
    "related",
    "prometheus",
    "want",
    "execute",
    "metrics",
    "click",
    "execute",
    "see",
    "instance",
    "localhost",
    "port",
    "9090",
    "currently",
    "running",
    "job",
    "prometheus",
    "view",
    "graph",
    "like",
    "let",
    "execute",
    "another",
    "query",
    "gon",
    "na",
    "click",
    "go",
    "info",
    "give",
    "version",
    "golang",
    "job",
    "etc",
    "really",
    "execute",
    "queries",
    "directly",
    "option",
    "classic",
    "ui",
    "see",
    "new",
    "user",
    "interface",
    "option",
    "unavailable",
    "let",
    "move",
    "check",
    "options",
    "available",
    "panel",
    "let",
    "click",
    "alerts",
    "currently",
    "alerts",
    "already",
    "mentioned",
    "alerts",
    "simply",
    "conditions",
    "specify",
    "conditions",
    "satisfied",
    "alert",
    "triggered",
    "particular",
    "meet",
    "know",
    "manager",
    "currently",
    "none",
    "shows",
    "nothing",
    "options",
    "allow",
    "check",
    "active",
    "alerts",
    "pending",
    "alerts",
    "firing",
    "alerts",
    "usually",
    "inactive",
    "state",
    "condition",
    "satisfied",
    "condition",
    "satisfied",
    "go",
    "pending",
    "stage",
    "finally",
    "exceeds",
    "critical",
    "limit",
    "critical",
    "amount",
    "enter",
    "firing",
    "stage",
    "view",
    "alerts",
    "based",
    "three",
    "states",
    "inactive",
    "state",
    "pending",
    "state",
    "firing",
    "state",
    "moving",
    "graph",
    "home",
    "page",
    "prometheus",
    "right",
    "talked",
    "click",
    "status",
    "option",
    "see",
    "seven",
    "different",
    "options",
    "drop",
    "first",
    "one",
    "runtime",
    "build",
    "information",
    "really",
    "gives",
    "know",
    "information",
    "prometheus",
    "start",
    "time",
    "prometheus",
    "working",
    "directory",
    "configuration",
    "reload",
    "extra",
    "information",
    "runtime",
    "build",
    "given",
    "option",
    "alert",
    "managers",
    "none",
    "says",
    "endpoint",
    "also",
    "see",
    "go",
    "version",
    "see",
    "build",
    "user",
    "build",
    "date",
    "version",
    "build",
    "information",
    "also",
    "given",
    "runtime",
    "build",
    "information",
    "net",
    "next",
    "option",
    "status",
    "tsdb",
    "status",
    "tsdb",
    "tsdb",
    "simply",
    "time",
    "series",
    "database",
    "option",
    "allows",
    "check",
    "databases",
    "status",
    "right",
    "number",
    "series",
    "number",
    "chunks",
    "view",
    "statistics",
    "head",
    "cardinality",
    "view",
    "top",
    "10",
    "label",
    "names",
    "value",
    "count",
    "view",
    "series",
    "count",
    "metric",
    "names",
    "also",
    "check",
    "label",
    "names",
    "high",
    "memory",
    "usage",
    "fact",
    "also",
    "know",
    "take",
    "queries",
    "top",
    "10",
    "series",
    "count",
    "metric",
    "names",
    "execute",
    "query",
    "see",
    "gives",
    "data",
    "executes",
    "information",
    "gives",
    "data",
    "list",
    "data",
    "allows",
    "check",
    "http",
    "request",
    "duration",
    "seconds",
    "also",
    "view",
    "graph",
    "going",
    "click",
    "gives",
    "information",
    "data",
    "available",
    "table",
    "terms",
    "graph",
    "hope",
    "clear",
    "moving",
    "check",
    "command",
    "line",
    "flags",
    "command",
    "line",
    "flags",
    "use",
    "really",
    "make",
    "changes",
    "service",
    "file",
    "created",
    "service",
    "file",
    "right",
    "run",
    "particular",
    "service",
    "prometheus",
    "really",
    "gives",
    "information",
    "service",
    "file",
    "see",
    "config",
    "file",
    "currently",
    "location",
    "also",
    "query",
    "timeout",
    "view",
    "extra",
    "information",
    "check",
    "web",
    "listen",
    "address",
    "port",
    "number",
    "9090",
    "also",
    "check",
    "web",
    "page",
    "title",
    "currently",
    "web",
    "page",
    "title",
    "prometheus",
    "time",
    "series",
    "collection",
    "processing",
    "server",
    "change",
    "like",
    "could",
    "also",
    "check",
    "web",
    "read",
    "timeout",
    "information",
    "basically",
    "service",
    "created",
    "given",
    "command",
    "line",
    "flags",
    "moving",
    "check",
    "configuration",
    "file",
    "configuration",
    "file",
    "already",
    "seen",
    "right",
    "file",
    "right",
    "simply",
    "file",
    "given",
    "see",
    "global",
    "alerting",
    "scrap",
    "configs",
    "check",
    "targets",
    "finally",
    "port",
    "number",
    "okay",
    "like",
    "copy",
    "could",
    "copy",
    "clipboard",
    "moving",
    "next",
    "option",
    "rules",
    "none",
    "right",
    "shows",
    "nothing",
    "later",
    "session",
    "creating",
    "tools",
    "stay",
    "tuned",
    "next",
    "option",
    "targets",
    "one",
    "primitive",
    "service",
    "running",
    "port",
    "number",
    "9090",
    "state",
    "see",
    "instance",
    "see",
    "job",
    "last",
    "scrape",
    "scrape",
    "duration",
    "errors",
    "appear",
    "move",
    "next",
    "option",
    "going",
    "show",
    "metrics",
    "instance",
    "prometheus",
    "instance",
    "running",
    "gon",
    "na",
    "click",
    "metrics",
    "see",
    "prometheus",
    "defines",
    "nice",
    "format",
    "metrics",
    "zoom",
    "bit",
    "view",
    "better",
    "see",
    "data",
    "relatively",
    "know",
    "human",
    "readable",
    "even",
    "help",
    "type",
    "decorators",
    "really",
    "increase",
    "readability",
    "right",
    "already",
    "discussed",
    "prometheus",
    "four",
    "types",
    "metrics",
    "right",
    "keep",
    "everything",
    "really",
    "simple",
    "counter",
    "gauge",
    "histogram",
    "summary",
    "type",
    "help",
    "attributes",
    "help",
    "us",
    "provide",
    "hints",
    "metric",
    "output",
    "help",
    "type",
    "decorators",
    "really",
    "increase",
    "readability",
    "ca",
    "really",
    "view",
    "metrics",
    "understand",
    "helping",
    "readability",
    "see",
    "help",
    "says",
    "go",
    "gc",
    "duration",
    "seconds",
    "summary",
    "pause",
    "duration",
    "garbage",
    "collection",
    "cycles",
    "metric",
    "type",
    "summary",
    "see",
    "type",
    "gauge",
    "see",
    "information",
    "type",
    "counter",
    "also",
    "type",
    "counter",
    "gauge",
    "really",
    "type",
    "type",
    "give",
    "insight",
    "type",
    "metric",
    "help",
    "really",
    "describe",
    "metric",
    "type",
    "give",
    "type",
    "metric",
    "hope",
    "clear",
    "hope",
    "matrix",
    "easy",
    "understand",
    "finished",
    "targets",
    "let",
    "move",
    "service",
    "discovery",
    "shows",
    "currently",
    "one",
    "end",
    "point",
    "scraped",
    "current",
    "running",
    "active",
    "instance",
    "prometheus",
    "shows",
    "address",
    "metrics",
    "path",
    "scheme",
    "job",
    "show",
    "labels",
    "target",
    "service",
    "discovery",
    "like",
    "check",
    "know",
    "prometheus",
    "click",
    "help",
    "option",
    "panel",
    "redirect",
    "prometheus",
    "official",
    "website",
    "classic",
    "ui",
    "already",
    "discussed",
    "graphical",
    "user",
    "interface",
    "prometheus",
    "hope",
    "easy",
    "understand",
    "hope",
    "easy",
    "learn",
    "let",
    "move",
    "next",
    "part",
    "session",
    "okay",
    "part",
    "session",
    "downloading",
    "prometheus",
    "node",
    "exporter",
    "know",
    "node",
    "exporter",
    "really",
    "way",
    "measure",
    "various",
    "machine",
    "resources",
    "machine",
    "resource",
    "memory",
    "disk",
    "even",
    "cpu",
    "utilization",
    "famous",
    "application",
    "prometheus",
    "without",
    "much",
    "ado",
    "let",
    "go",
    "ahead",
    "download",
    "node",
    "exporter",
    "go",
    "web",
    "browser",
    "going",
    "official",
    "website",
    "prometheus",
    "first",
    "link",
    "redirect",
    "official",
    "website",
    "prometheus",
    "going",
    "click",
    "download",
    "button",
    "going",
    "scroll",
    "look",
    "node",
    "exporter",
    "going",
    "copy",
    "link",
    "location",
    "quickly",
    "going",
    "move",
    "back",
    "terminal",
    "going",
    "download",
    "node",
    "exporter",
    "node",
    "exporter",
    "downloaded",
    "let",
    "check",
    "file",
    "available",
    "going",
    "untar",
    "start",
    "file",
    "command",
    "tar",
    "xzf",
    "going",
    "copy",
    "command",
    "untie",
    "file",
    "okay",
    "going",
    "clear",
    "screen",
    "let",
    "move",
    "ahead",
    "check",
    "files",
    "node",
    "exporter",
    "file",
    "license",
    "node",
    "exporter",
    "notice",
    "going",
    "going",
    "use",
    "sudo",
    "cp",
    "command",
    "going",
    "copy",
    "node",
    "exporter",
    "file",
    "user",
    "local",
    "bin",
    "location",
    "help",
    "copy",
    "command",
    "cp",
    "command",
    "going",
    "create",
    "copy",
    "node",
    "exporter",
    "file",
    "user",
    "local",
    "bin",
    "location",
    "okay",
    "done",
    "going",
    "check",
    "files",
    "present",
    "user",
    "local",
    "bin",
    "location",
    "see",
    "node",
    "exporter",
    "file",
    "copied",
    "right",
    "copied",
    "file",
    "location",
    "done",
    "moving",
    "create",
    "service",
    "file",
    "created",
    "service",
    "file",
    "prometheus",
    "application",
    "right",
    "even",
    "node",
    "exporter",
    "going",
    "create",
    "service",
    "file",
    "using",
    "command",
    "sudo",
    "vi",
    "going",
    "name",
    "node",
    "written",
    "piece",
    "script",
    "way",
    "prometheus",
    "service",
    "file",
    "see",
    "description",
    "says",
    "prometheus",
    "node",
    "exporter",
    "service",
    "also",
    "type",
    "execution",
    "start",
    "currently",
    "present",
    "user",
    "local",
    "bin",
    "location",
    "done",
    "going",
    "save",
    "going",
    "reload",
    "system",
    "going",
    "start",
    "service",
    "make",
    "sure",
    "one",
    "thing",
    "node",
    "exporter",
    "naming",
    "service",
    "file",
    "initiate",
    "name",
    "see",
    "service",
    "file",
    "named",
    "node",
    "exporter",
    "going",
    "type",
    "thing",
    "start",
    "service",
    "start",
    "service",
    "going",
    "check",
    "status",
    "see",
    "active",
    "running",
    "great",
    "node",
    "exporter",
    "currently",
    "running",
    "address",
    "900",
    "ports",
    "going",
    "check",
    "opens",
    "check",
    "metrics",
    "currently",
    "running",
    "node",
    "exporters",
    "end",
    "point",
    "prometheus",
    "scrape",
    "data",
    "node",
    "exporter",
    "running",
    "let",
    "us",
    "configure",
    "node",
    "exporter",
    "file",
    "every",
    "time",
    "configure",
    "particular",
    "target",
    "go",
    "file",
    "add",
    "target",
    "okay",
    "going",
    "going",
    "move",
    "directory",
    "okay",
    "done",
    "going",
    "list",
    "files",
    "prometheus",
    "file",
    "see",
    "prometheus",
    "dot",
    "yml",
    "file",
    "right",
    "going",
    "clear",
    "screen",
    "going",
    "view",
    "files",
    "present",
    "prometheus",
    "see",
    "yml",
    "file",
    "going",
    "use",
    "command",
    "sudo",
    "vi",
    "prometheus",
    "dot",
    "yml",
    "edit",
    "configuration",
    "file",
    "see",
    "currently",
    "one",
    "job",
    "prometheus",
    "add",
    "another",
    "job",
    "file",
    "adding",
    "node",
    "exporter",
    "job",
    "name",
    "target",
    "ip",
    "address",
    "9100",
    "right",
    "make",
    "sure",
    "indentation",
    "correct",
    "indentation",
    "correct",
    "applied",
    "target",
    "added",
    "target",
    "configuration",
    "file",
    "save",
    "done",
    "going",
    "clear",
    "screen",
    "going",
    "restart",
    "prometheus",
    "check",
    "status",
    "active",
    "running",
    "go",
    "back",
    "page",
    "see",
    "node",
    "exporter",
    "added",
    "service",
    "discovery",
    "address",
    "localhost",
    "9100",
    "localhost",
    "currently",
    "working",
    "machine",
    "want",
    "add",
    "another",
    "machine",
    "port",
    "address",
    "prometheus",
    "mentioning",
    "address",
    "go",
    "back",
    "check",
    "configuration",
    "file",
    "changes",
    "another",
    "target",
    "named",
    "node",
    "exporter",
    "also",
    "port",
    "number",
    "9100",
    "move",
    "back",
    "classic",
    "ui",
    "2",
    "check",
    "metrics",
    "notice",
    "lot",
    "metrics",
    "right",
    "also",
    "node",
    "metrics",
    "want",
    "check",
    "node",
    "cpu",
    "seconds",
    "total",
    "execute",
    "right",
    "executed",
    "check",
    "cpu",
    "total",
    "number",
    "seconds",
    "hosting",
    "node",
    "exporter",
    "also",
    "check",
    "username",
    "info",
    "node",
    "see",
    "instance",
    "name",
    "given",
    "machine",
    "currently",
    "working",
    "node",
    "name",
    "edureka",
    "system",
    "name",
    "linux",
    "version",
    "given",
    "also",
    "entire",
    "node",
    "username",
    "info",
    "given",
    "execute",
    "query",
    "great",
    "right",
    "like",
    "node",
    "export",
    "successfully",
    "configured",
    "prometheus",
    "let",
    "move",
    "next",
    "part",
    "session",
    "moving",
    "next",
    "part",
    "session",
    "configuring",
    "alert",
    "manager",
    "let",
    "understand",
    "querying",
    "little",
    "bit",
    "detail",
    "prometheus",
    "know",
    "fundamentally",
    "stores",
    "data",
    "time",
    "series",
    "right",
    "time",
    "series",
    "identified",
    "metric",
    "name",
    "also",
    "discussed",
    "well",
    "set",
    "key",
    "value",
    "pairs",
    "prometheus",
    "calls",
    "labels",
    "okay",
    "metric",
    "name",
    "indicates",
    "overall",
    "aspect",
    "system",
    "measured",
    "let",
    "execute",
    "query",
    "prometheus",
    "http",
    "request",
    "duration",
    "seconds",
    "total",
    "okay",
    "see",
    "labels",
    "serve",
    "differentiate",
    "subdimensions",
    "metric",
    "know",
    "handler",
    "code",
    "instance",
    "job",
    "currently",
    "running",
    "finally",
    "sequence",
    "samples",
    "forms",
    "actual",
    "data",
    "series",
    "okay",
    "sample",
    "consists",
    "time",
    "stamp",
    "value",
    "timestamps",
    "millisecond",
    "precision",
    "values",
    "always",
    "floating",
    "point",
    "values",
    "best",
    "part",
    "prometheus",
    "queries",
    "add",
    "regular",
    "expressions",
    "specify",
    "time",
    "limit",
    "certain",
    "time",
    "limit",
    "also",
    "use",
    "different",
    "functions",
    "see",
    "could",
    "add",
    "certain",
    "filter",
    "query",
    "want",
    "execute",
    "queries",
    "label",
    "code",
    "400",
    "going",
    "add",
    "filter",
    "execute",
    "query",
    "automatically",
    "display",
    "http",
    "requests",
    "total",
    "code",
    "400",
    "really",
    "know",
    "add",
    "whatever",
    "like",
    "filters",
    "one",
    "way",
    "work",
    "queries",
    "also",
    "already",
    "mentioned",
    "also",
    "add",
    "regular",
    "expressions",
    "right",
    "use",
    "equal",
    "equal",
    "many",
    "things",
    "example",
    "want",
    "list",
    "series",
    "matter",
    "metric",
    "name",
    "job",
    "handler",
    "name",
    "starts",
    "api",
    "okay",
    "simply",
    "run",
    "query",
    "done",
    "regular",
    "expression",
    "obviously",
    "regular",
    "expression",
    "right",
    "regular",
    "expression",
    "needs",
    "end",
    "full",
    "stop",
    "star",
    "okay",
    "since",
    "regular",
    "expressions",
    "always",
    "match",
    "full",
    "string",
    "prometheus",
    "resulting",
    "time",
    "series",
    "usually",
    "mix",
    "series",
    "different",
    "metric",
    "names",
    "know",
    "select",
    "time",
    "series",
    "metric",
    "names",
    "well",
    "combination",
    "label",
    "names",
    "next",
    "part",
    "learn",
    "calculate",
    "rates",
    "deltas",
    "metric",
    "time",
    "one",
    "prominent",
    "frequent",
    "functions",
    "use",
    "prometheus",
    "rate",
    "function",
    "instead",
    "calculating",
    "event",
    "rates",
    "directly",
    "instrumented",
    "service",
    "prometheus",
    "common",
    "thing",
    "common",
    "way",
    "track",
    "events",
    "using",
    "raw",
    "counters",
    "okay",
    "let",
    "prometheus",
    "server",
    "calculate",
    "rates",
    "ad",
    "hoc",
    "query",
    "time",
    "number",
    "advantages",
    "losing",
    "rate",
    "spikes",
    "scrapes",
    "well",
    "able",
    "choose",
    "dynamic",
    "averaging",
    "windows",
    "query",
    "time",
    "counters",
    "start",
    "zero",
    "monitored",
    "service",
    "starts",
    "get",
    "continuously",
    "incremented",
    "service",
    "processes",
    "lifetime",
    "occasionally",
    "monitored",
    "process",
    "restarts",
    "counters",
    "reset",
    "zero",
    "begin",
    "climbing",
    "graphicing",
    "raw",
    "counters",
    "usually",
    "useful",
    "see",
    "increasing",
    "line",
    "occasional",
    "resets",
    "use",
    "another",
    "query",
    "example",
    "explain",
    "rate",
    "function",
    "really",
    "works",
    "going",
    "use",
    "query",
    "prometheus",
    "http",
    "request",
    "duration",
    "seconds",
    "count",
    "okay",
    "going",
    "specify",
    "job",
    "prometheus",
    "also",
    "view",
    "graphs",
    "looks",
    "something",
    "like",
    "okay",
    "make",
    "counters",
    "useful",
    "use",
    "rate",
    "function",
    "calculate",
    "per",
    "second",
    "rate",
    "increase",
    "really",
    "use",
    "rate",
    "function",
    "need",
    "tell",
    "rate",
    "function",
    "time",
    "window",
    "average",
    "rate",
    "providing",
    "range",
    "selector",
    "series",
    "matcher",
    "okay",
    "example",
    "compute",
    "per",
    "second",
    "increase",
    "counter",
    "metric",
    "average",
    "last",
    "five",
    "minutes",
    "add",
    "rate",
    "function",
    "specify",
    "though",
    "time",
    "limit",
    "5",
    "minutes",
    "going",
    "close",
    "braces",
    "execute",
    "function",
    "okay",
    "check",
    "graph",
    "see",
    "result",
    "much",
    "useful",
    "right",
    "rate",
    "function",
    "smart",
    "automatically",
    "adjusts",
    "counter",
    "resets",
    "assuming",
    "decrease",
    "counter",
    "value",
    "reset",
    "variant",
    "rate",
    "function",
    "rate",
    "function",
    "rate",
    "function",
    "averages",
    "rate",
    "samples",
    "given",
    "time",
    "window",
    "five",
    "minutes",
    "case",
    "rate",
    "function",
    "ever",
    "looks",
    "back",
    "two",
    "samples",
    "past",
    "okay",
    "still",
    "requires",
    "specify",
    "time",
    "window",
    "like",
    "five",
    "minutes",
    "know",
    "far",
    "maximally",
    "look",
    "back",
    "time",
    "two",
    "samples",
    "rate",
    "function",
    "really",
    "react",
    "faster",
    "rate",
    "changes",
    "thus",
    "usually",
    "recommended",
    "use",
    "graphs",
    "contrast",
    "rate",
    "function",
    "provide",
    "smoother",
    "rates",
    "recommended",
    "use",
    "alerting",
    "expressions",
    "okay",
    "let",
    "execute",
    "irate",
    "function",
    "see",
    "graph",
    "would",
    "look",
    "like",
    "okay",
    "uncovering",
    "short",
    "intermittent",
    "tips",
    "request",
    "rates",
    "rate",
    "eye",
    "rate",
    "functions",
    "always",
    "calculate",
    "per",
    "second",
    "rate",
    "sometimes",
    "want",
    "know",
    "total",
    "amount",
    "counter",
    "increased",
    "window",
    "time",
    "still",
    "correct",
    "counter",
    "resets",
    "achieve",
    "increase",
    "function",
    "okay",
    "example",
    "calculate",
    "total",
    "number",
    "requests",
    "handled",
    "last",
    "r",
    "use",
    "increase",
    "function",
    "change",
    "wan",
    "na",
    "know",
    "queries",
    "work",
    "use",
    "regular",
    "expressions",
    "really",
    "use",
    "functions",
    "queries",
    "let",
    "move",
    "next",
    "part",
    "session",
    "custom",
    "roles",
    "okay",
    "time",
    "series",
    "queries",
    "quickly",
    "become",
    "quite",
    "complicated",
    "remember",
    "type",
    "using",
    "expression",
    "browser",
    "time",
    "right",
    "sometimes",
    "situations",
    "want",
    "use",
    "queries",
    "frequently",
    "right",
    "want",
    "really",
    "type",
    "query",
    "case",
    "rather",
    "remembering",
    "typing",
    "particular",
    "query",
    "every",
    "time",
    "create",
    "recording",
    "rule",
    "run",
    "chosen",
    "interval",
    "make",
    "data",
    "available",
    "time",
    "series",
    "going",
    "going",
    "pretty",
    "popular",
    "query",
    "going",
    "execute",
    "node",
    "memory",
    "rebuytes",
    "okay",
    "going",
    "execute",
    "query",
    "give",
    "much",
    "free",
    "bytes",
    "available",
    "node",
    "exporter",
    "see",
    "free",
    "number",
    "bytes",
    "want",
    "execute",
    "terms",
    "know",
    "percentage",
    "see",
    "number",
    "memory",
    "job",
    "node",
    "exporter",
    "using",
    "four",
    "multiplying",
    "100",
    "check",
    "percentage",
    "form",
    "see",
    "using",
    "four",
    "bytes",
    "memory",
    "want",
    "see",
    "much",
    "memory",
    "remaining",
    "going",
    "minus",
    "entire",
    "query",
    "100",
    "see",
    "95",
    "percent",
    "bytes",
    "left",
    "want",
    "execute",
    "query",
    "often",
    "right",
    "time",
    "consuming",
    "type",
    "whole",
    "thing",
    "execute",
    "right",
    "easier",
    "way",
    "make",
    "query",
    "right",
    "drop",
    "uh",
    "drop",
    "list",
    "search",
    "execute",
    "right",
    "going",
    "quickly",
    "going",
    "shift",
    "back",
    "terminal",
    "going",
    "clear",
    "screen",
    "okay",
    "going",
    "going",
    "move",
    "user",
    "local",
    "bin",
    "prometheus",
    "directory",
    "create",
    "new",
    "file",
    "called",
    "prometheus",
    "rule",
    "gon",
    "na",
    "since",
    "yml",
    "file",
    "going",
    "add",
    "yml",
    "extension",
    "going",
    "add",
    "name",
    "custom",
    "rules",
    "going",
    "specify",
    "rule",
    "type",
    "whole",
    "thing",
    "named",
    "custom",
    "rules",
    "recorded",
    "query",
    "node",
    "memory",
    "memory",
    "free",
    "person",
    "expression",
    "already",
    "executed",
    "one",
    "going",
    "go",
    "ahead",
    "save",
    "going",
    "clear",
    "screen",
    "prometheus",
    "usually",
    "comes",
    "tool",
    "called",
    "prompt",
    "tool",
    "prompt",
    "tool",
    "used",
    "really",
    "check",
    "rules",
    "files",
    "really",
    "lot",
    "things",
    "chrome",
    "tool",
    "going",
    "use",
    "command",
    "typed",
    "going",
    "execute",
    "command",
    "check",
    "file",
    "running",
    "okay",
    "see",
    "checks",
    "prometheus",
    "rules",
    "file",
    "says",
    "success",
    "let",
    "go",
    "ahead",
    "add",
    "prometheus",
    "reference",
    "prometheus",
    "yml",
    "rule",
    "file",
    "section",
    "going",
    "clear",
    "screen",
    "going",
    "enter",
    "file",
    "going",
    "enter",
    "prometheus",
    "underscore",
    "file",
    "going",
    "save",
    "file",
    "done",
    "going",
    "restart",
    "system",
    "going",
    "check",
    "status",
    "okay",
    "great",
    "running",
    "going",
    "switch",
    "back",
    "prometheus",
    "remember",
    "naming",
    "free",
    "bytes",
    "going",
    "switch",
    "classic",
    "new",
    "eyes",
    "look",
    "named",
    "node",
    "memory",
    "memory",
    "free",
    "person",
    "right",
    "exactly",
    "named",
    "query",
    "going",
    "execute",
    "see",
    "95",
    "easy",
    "make",
    "queries",
    "execute",
    "okay",
    "created",
    "know",
    "custom",
    "rule",
    "let",
    "go",
    "check",
    "custom",
    "rule",
    "see",
    "state",
    "says",
    "okay",
    "great",
    "let",
    "go",
    "ahead",
    "create",
    "first",
    "alert",
    "rule",
    "okay",
    "way",
    "created",
    "custom",
    "rule",
    "going",
    "creating",
    "alert",
    "rules",
    "exactly",
    "explained",
    "custom",
    "rules",
    "beginning",
    "going",
    "switch",
    "back",
    "terminal",
    "going",
    "clear",
    "file",
    "going",
    "going",
    "go",
    "prometheus",
    "underscore",
    "file",
    "done",
    "going",
    "type",
    "alert",
    "prometheus",
    "underscore",
    "file",
    "done",
    "typing",
    "explain",
    "alert",
    "created",
    "rule",
    "named",
    "alert",
    "rules",
    "alert",
    "allow",
    "recognize",
    "instance",
    "done",
    "currently",
    "prometheus",
    "instance",
    "running",
    "also",
    "node",
    "exporter",
    "running",
    "instances",
    "go",
    "one",
    "minute",
    "alert",
    "okay",
    "severity",
    "pretty",
    "critical",
    "given",
    "annotations",
    "mentioned",
    "instance",
    "gives",
    "summary",
    "instance",
    "going",
    "description",
    "job",
    "type",
    "also",
    "mentioned",
    "job",
    "type",
    "one",
    "minute",
    "okay",
    "done",
    "going",
    "save",
    "going",
    "clear",
    "screen",
    "way",
    "executed",
    "prompt",
    "tool",
    "command",
    "going",
    "execute",
    "going",
    "execute",
    "command",
    "says",
    "two",
    "rules",
    "fun",
    "great",
    "going",
    "restart",
    "prometheus",
    "going",
    "check",
    "status",
    "okay",
    "running",
    "let",
    "switch",
    "back",
    "prometheus",
    "reload",
    "see",
    "alert",
    "rule",
    "okay",
    "alert",
    "instance",
    "expression",
    "equal",
    "zero",
    "expression",
    "says",
    "equal",
    "0",
    "pretty",
    "interesting",
    "go",
    "prometheus",
    "execute",
    "tell",
    "jobs",
    "currently",
    "running",
    "value",
    "currently",
    "zero",
    "expression",
    "turns",
    "0",
    "alert",
    "activated",
    "expression",
    "really",
    "means",
    "equal",
    "0",
    "minute",
    "alert",
    "immediately",
    "activated",
    "already",
    "mentioned",
    "three",
    "states",
    "inactive",
    "stage",
    "pending",
    "stage",
    "firing",
    "stage",
    "none",
    "alerts",
    "going",
    "inactive",
    "state",
    "instance",
    "one",
    "jobs",
    "go",
    "okay",
    "immediately",
    "move",
    "pendant",
    "state",
    "immediately",
    "moves",
    "pending",
    "stage",
    "wait",
    "minute",
    "specified",
    "condition",
    "pending",
    "state",
    "minute",
    "goes",
    "beyond",
    "minute",
    "go",
    "firing",
    "stage",
    "okay",
    "reaches",
    "firing",
    "stage",
    "managers",
    "involved",
    "getting",
    "notification",
    "alert",
    "informed",
    "immediately",
    "really",
    "hope",
    "understood",
    "create",
    "rules",
    "configure",
    "prometheist",
    "file",
    "really",
    "know",
    "understand",
    "really",
    "work",
    "let",
    "move",
    "install",
    "configure",
    "alert",
    "manager",
    "simply",
    "go",
    "prometheus",
    "official",
    "website",
    "click",
    "download",
    "get",
    "option",
    "called",
    "alert",
    "manager",
    "going",
    "click",
    "going",
    "copy",
    "link",
    "location",
    "linux",
    "clearly",
    "using",
    "linux",
    "machine",
    "going",
    "copy",
    "link",
    "location",
    "clear",
    "screen",
    "going",
    "download",
    "alert",
    "manager",
    "copy",
    "link",
    "location",
    "going",
    "first",
    "going",
    "move",
    "back",
    "directories",
    "back",
    "root",
    "going",
    "move",
    "prometheus",
    "directory",
    "going",
    "download",
    "alert",
    "manager",
    "okay",
    "see",
    "download",
    "complete",
    "going",
    "list",
    "files",
    "see",
    "alert",
    "manager",
    "tar",
    "alert",
    "manager",
    "file",
    "going",
    "untar",
    "using",
    "command",
    "see",
    "using",
    "command",
    "pseudo",
    "tar",
    "hyphen",
    "xvf",
    "going",
    "paste",
    "link",
    "see",
    "files",
    "untied",
    "going",
    "clear",
    "screen",
    "going",
    "list",
    "files",
    "yeah",
    "alert",
    "manager",
    "file",
    "untaught",
    "going",
    "enter",
    "directory",
    "check",
    "files",
    "currently",
    "see",
    "alert",
    "manager",
    "executable",
    "file",
    "alert",
    "configuration",
    "file",
    "amp",
    "tool",
    "going",
    "going",
    "running",
    "alert",
    "manager",
    "service",
    "way",
    "ran",
    "prometheus",
    "node",
    "export",
    "service",
    "going",
    "also",
    "run",
    "alert",
    "manager",
    "service",
    "going",
    "first",
    "going",
    "copy",
    "files",
    "user",
    "local",
    "bin",
    "going",
    "create",
    "alert",
    "manager",
    "service",
    "file",
    "remember",
    "also",
    "created",
    "prometheus",
    "service",
    "file",
    "also",
    "node",
    "exporter",
    "service",
    "file",
    "going",
    "going",
    "create",
    "alert",
    "manager",
    "service",
    "file",
    "create",
    "alert",
    "manager",
    "service",
    "file",
    "type",
    "typed",
    "script",
    "description",
    "also",
    "type",
    "service",
    "going",
    "mention",
    "location",
    "configuration",
    "file",
    "execution",
    "begin",
    "okay",
    "done",
    "going",
    "save",
    "file",
    "gon",
    "na",
    "clear",
    "screen",
    "going",
    "shift",
    "locations",
    "user",
    "local",
    "bin",
    "alert",
    "manager",
    "directory",
    "going",
    "list",
    "files",
    "see",
    "alert",
    "file",
    "make",
    "changes",
    "alert",
    "manager",
    "configuration",
    "file",
    "going",
    "make",
    "changes",
    "default",
    "file",
    "going",
    "make",
    "changes",
    "going",
    "explain",
    "changes",
    "see",
    "receivers",
    "know",
    "configure",
    "email",
    "id",
    "email",
    "id",
    "sending",
    "message",
    "receiver",
    "going",
    "receive",
    "message",
    "right",
    "going",
    "add",
    "two",
    "email",
    "ad",
    "going",
    "add",
    "email",
    "id",
    "also",
    "going",
    "add",
    "username",
    "going",
    "add",
    "identity",
    "email",
    "id",
    "also",
    "going",
    "add",
    "gmail",
    "password",
    "email",
    "ids",
    "gmail",
    "going",
    "mention",
    "public",
    "gmail",
    "host",
    "server",
    "going",
    "add",
    "credentials",
    "cut",
    "next",
    "part",
    "session",
    "already",
    "seen",
    "tool",
    "called",
    "amp",
    "tool",
    "alert",
    "manager",
    "amp",
    "tool",
    "executable",
    "allows",
    "view",
    "modify",
    "current",
    "state",
    "alert",
    "manager",
    "going",
    "execute",
    "command",
    "user",
    "local",
    "bin",
    "alert",
    "manager",
    "amp",
    "tool",
    "check",
    "configuration",
    "file",
    "give",
    "location",
    "service",
    "file",
    "okay",
    "done",
    "going",
    "check",
    "check",
    "successfully",
    "configured",
    "done",
    "see",
    "one",
    "receiver",
    "end",
    "okay",
    "going",
    "clear",
    "screen",
    "going",
    "start",
    "alert",
    "manager",
    "made",
    "changes",
    "service",
    "file",
    "going",
    "execute",
    "command",
    "user",
    "local",
    "bin",
    "alert",
    "manager",
    "amp",
    "tool",
    "know",
    "amptool",
    "amptool",
    "executable",
    "allows",
    "view",
    "modify",
    "current",
    "state",
    "alert",
    "manager",
    "okay",
    "done",
    "successful",
    "check",
    "config",
    "file",
    "help",
    "amp",
    "tool",
    "successful",
    "see",
    "one",
    "receiver",
    "going",
    "going",
    "clear",
    "screen",
    "going",
    "start",
    "alert",
    "manager",
    "service",
    "alert",
    "manager",
    "running",
    "see",
    "currently",
    "running",
    "port",
    "number",
    "9093",
    "going",
    "check",
    "port",
    "alert",
    "manager",
    "running",
    "see",
    "four",
    "different",
    "options",
    "given",
    "alerts",
    "silences",
    "status",
    "help",
    "filter",
    "alerts",
    "group",
    "alerts",
    "also",
    "see",
    "status",
    "alerts",
    "also",
    "see",
    "active",
    "pending",
    "expired",
    "alerts",
    "get",
    "help",
    "page",
    "see",
    "alert",
    "manager",
    "general",
    "let",
    "alert",
    "manager",
    "active",
    "let",
    "move",
    "demo",
    "part",
    "okay",
    "set",
    "alert",
    "manager",
    "quickly",
    "shift",
    "back",
    "terminal",
    "clear",
    "screen",
    "configure",
    "alert",
    "manager",
    "prometheus",
    "going",
    "move",
    "directory",
    "going",
    "enter",
    "prometheus",
    "directory",
    "going",
    "list",
    "files",
    "present",
    "going",
    "edit",
    "file",
    "see",
    "going",
    "specify",
    "alert",
    "manager",
    "going",
    "specify",
    "alert",
    "manager",
    "port",
    "number",
    "9093",
    "done",
    "going",
    "save",
    "file",
    "going",
    "restart",
    "prometheus",
    "okay",
    "running",
    "going",
    "check",
    "endpoint",
    "successfully",
    "scraped",
    "runtime",
    "build",
    "information",
    "scroll",
    "see",
    "alert",
    "manager",
    "end",
    "point",
    "right",
    "great",
    "prometheus",
    "repeat",
    "alert",
    "manager",
    "running",
    "let",
    "go",
    "check",
    "status",
    "targets",
    "node",
    "exporter",
    "prometheus",
    "okay",
    "let",
    "go",
    "alert",
    "stage",
    "one",
    "alert",
    "rule",
    "currently",
    "written",
    "inactive",
    "let",
    "get",
    "demo",
    "part",
    "let",
    "let",
    "stop",
    "one",
    "instances",
    "think",
    "going",
    "stop",
    "node",
    "exporter",
    "instance",
    "starts",
    "let",
    "see",
    "alerts",
    "go",
    "one",
    "instance",
    "shut",
    "okay",
    "opening",
    "new",
    "terminal",
    "going",
    "going",
    "okay",
    "entered",
    "prometheus",
    "directory",
    "listed",
    "files",
    "node",
    "exporter",
    "file",
    "changed",
    "directory",
    "node",
    "exporter",
    "listed",
    "files",
    "currently",
    "node",
    "exporter",
    "running",
    "obviously",
    "going",
    "going",
    "stop",
    "service",
    "okay",
    "clear",
    "screen",
    "going",
    "stop",
    "service",
    "going",
    "check",
    "status",
    "inactive",
    "done",
    "going",
    "quickly",
    "shift",
    "status",
    "target",
    "see",
    "one",
    "target",
    "execute",
    "query",
    "see",
    "node",
    "exporter",
    "value",
    "0",
    "okay",
    "going",
    "check",
    "alerts",
    "see",
    "alerts",
    "pending",
    "state",
    "right",
    "zero",
    "active",
    "one",
    "pending",
    "going",
    "pending",
    "state",
    "minute",
    "remember",
    "specified",
    "minute",
    "going",
    "wait",
    "instance",
    "going",
    "crosses",
    "one",
    "minute",
    "threshold",
    "going",
    "go",
    "firing",
    "stage",
    "going",
    "alert",
    "manager",
    "currently",
    "receive",
    "mail",
    "saying",
    "one",
    "instance",
    "critical",
    "alert",
    "address",
    "immediately",
    "okay",
    "really",
    "works",
    "let",
    "reload",
    "page",
    "see",
    "minute",
    "entered",
    "firing",
    "state",
    "okay",
    "none",
    "pending",
    "state",
    "pending",
    "state",
    "minute",
    "moved",
    "firing",
    "state",
    "previous",
    "session",
    "learned",
    "create",
    "alerts",
    "prometheus",
    "notified",
    "alerts",
    "take",
    "discrete",
    "actions",
    "whenever",
    "necessary",
    "next",
    "part",
    "session",
    "going",
    "integrate",
    "prometheus",
    "one",
    "famous",
    "visualization",
    "tools",
    "devops",
    "grafana",
    "explain",
    "grafana",
    "going",
    "briefly",
    "explain",
    "node",
    "exporter",
    "going",
    "displaying",
    "metrics",
    "grafana",
    "node",
    "exporter",
    "simply",
    "exporter",
    "collects",
    "technical",
    "information",
    "linux",
    "nodes",
    "right",
    "cpu",
    "disk",
    "memory",
    "statistics",
    "sure",
    "must",
    "aware",
    "metrics",
    "node",
    "exporter",
    "exposes",
    "linux",
    "machine",
    "currently",
    "working",
    "ubuntu",
    "metrics",
    "going",
    "visually",
    "represented",
    "grafana",
    "know",
    "prometheus",
    "like",
    "great",
    "ui",
    "right",
    "information",
    "textual",
    "like",
    "visually",
    "appealing",
    "link",
    "help",
    "grafana",
    "really",
    "want",
    "know",
    "expose",
    "metrics",
    "graphical",
    "representation",
    "like",
    "gorgeous",
    "know",
    "bar",
    "graphs",
    "anything",
    "could",
    "anything",
    "download",
    "grafana",
    "onto",
    "linux",
    "machine",
    "quickly",
    "going",
    "making",
    "changes",
    "yml",
    "file",
    "going",
    "check",
    "prometheus",
    "running",
    "also",
    "going",
    "check",
    "node",
    "exporters",
    "running",
    "great",
    "going",
    "clear",
    "screen",
    "okay",
    "done",
    "going",
    "list",
    "files",
    "currently",
    "prometheus",
    "directory",
    "going",
    "shift",
    "prometheus",
    "file",
    "going",
    "move",
    "directory",
    "going",
    "list",
    "files",
    "okay",
    "great",
    "going",
    "make",
    "changes",
    "file",
    "going",
    "okay",
    "see",
    "alert",
    "manager",
    "configuration",
    "rule",
    "files",
    "script",
    "configs",
    "job",
    "name",
    "static",
    "config",
    "going",
    "add",
    "node",
    "exporter",
    "target",
    "going",
    "add",
    "ip",
    "address",
    "currently",
    "running",
    "localhost",
    "9100",
    "okay",
    "great",
    "going",
    "save",
    "going",
    "restart",
    "prometheus",
    "kids",
    "running",
    "going",
    "clear",
    "screen",
    "okay",
    "great",
    "going",
    "go",
    "going",
    "go",
    "back",
    "prometheus",
    "directory",
    "let",
    "go",
    "ahead",
    "download",
    "grafana",
    "click",
    "web",
    "browser",
    "go",
    "official",
    "website",
    "grafana",
    "official",
    "website",
    "grafana",
    "going",
    "click",
    "download",
    "button",
    "page",
    "click",
    "download",
    "scroll",
    "see",
    "linux",
    "commands",
    "use",
    "download",
    "grafana",
    "linux",
    "machine",
    "already",
    "made",
    "list",
    "going",
    "use",
    "download",
    "grafana",
    "okay",
    "grafana",
    "installed",
    "going",
    "clear",
    "screen",
    "going",
    "check",
    "running",
    "going",
    "use",
    "command",
    "start",
    "grafana",
    "server",
    "check",
    "status",
    "running",
    "currently",
    "running",
    "port",
    "3000",
    "going",
    "quickly",
    "shift",
    "web",
    "browser",
    "check",
    "see",
    "grafana",
    "running",
    "great",
    "newly",
    "installed",
    "grafana",
    "email",
    "address",
    "password",
    "default",
    "admin",
    "okay",
    "obviously",
    "create",
    "password",
    "prompted",
    "credentials",
    "admin",
    "create",
    "password",
    "submit",
    "going",
    "skip",
    "grafana",
    "user",
    "interface",
    "really",
    "looks",
    "like",
    "okay",
    "see",
    "search",
    "button",
    "icons",
    "left",
    "hand",
    "side",
    "also",
    "panels",
    "play",
    "around",
    "create",
    "dashboard",
    "allow",
    "create",
    "beautiful",
    "visualizations",
    "data",
    "source",
    "right",
    "done",
    "going",
    "add",
    "first",
    "data",
    "source",
    "going",
    "click",
    "option",
    "basic",
    "panel",
    "going",
    "working",
    "prometheus",
    "want",
    "data",
    "source",
    "prometheus",
    "going",
    "select",
    "says",
    "data",
    "source",
    "added",
    "name",
    "data",
    "source",
    "anything",
    "like",
    "going",
    "let",
    "prometheus",
    "url",
    "prometheus",
    "google",
    "host",
    "90",
    "90",
    "right",
    "done",
    "going",
    "check",
    "everything",
    "looks",
    "fine",
    "yes",
    "adding",
    "data",
    "source",
    "name",
    "add",
    "url",
    "easy",
    "going",
    "save",
    "test",
    "great",
    "working",
    "right",
    "saved",
    "tested",
    "going",
    "click",
    "grafana",
    "icon",
    "present",
    "left",
    "corner",
    "left",
    "top",
    "corner",
    "redirect",
    "home",
    "page",
    "grafana",
    "okay",
    "done",
    "going",
    "click",
    "plus",
    "icon",
    "click",
    "option",
    "import",
    "going",
    "going",
    "import",
    "dashboard",
    "search",
    "grafana",
    "node",
    "exporter",
    "dashboard",
    "click",
    "first",
    "link",
    "available",
    "redirect",
    "page",
    "name",
    "node",
    "exporter",
    "full",
    "right",
    "really",
    "id",
    "node",
    "exporter",
    "id",
    "going",
    "copy",
    "id",
    "clipboard",
    "quickly",
    "going",
    "import",
    "id",
    "okay",
    "going",
    "load",
    "using",
    "node",
    "exported",
    "dashboard",
    "grafana",
    "going",
    "copy",
    "id",
    "going",
    "go",
    "want",
    "change",
    "name",
    "going",
    "select",
    "prometheus",
    "data",
    "source",
    "going",
    "import",
    "done",
    "see",
    "beautiful",
    "representation",
    "cpu",
    "system",
    "load",
    "ram",
    "used",
    "root",
    "fs",
    "swap",
    "used",
    "information",
    "beautifully",
    "represented",
    "gauges",
    "right",
    "gauges",
    "okay",
    "graphs",
    "currently",
    "see",
    "used",
    "see",
    "busy",
    "system",
    "busy",
    "user",
    "long",
    "idle",
    "information",
    "cpu",
    "basic",
    "cpu",
    "information",
    "storage",
    "disk",
    "eight",
    "panels",
    "see",
    "several",
    "different",
    "panels",
    "already",
    "created",
    "grafana",
    "import",
    "add",
    "data",
    "source",
    "prometheus",
    "right",
    "way",
    "better",
    "viewing",
    "prometheus",
    "prometheus",
    "everything",
    "text",
    "terms",
    "metrics",
    "boring",
    "view",
    "like",
    "obviously",
    "prefer",
    "grafana",
    "view",
    "foreign",
    "need",
    "continuous",
    "monitoring",
    "four",
    "major",
    "reasons",
    "need",
    "practice",
    "continuous",
    "monitoring",
    "first",
    "obvious",
    "reason",
    "allows",
    "us",
    "better",
    "network",
    "visibility",
    "transparency",
    "continuous",
    "monitoring",
    "offers",
    "devops",
    "teams",
    "clarity",
    "state",
    "id",
    "infrastructure",
    "automatically",
    "collecting",
    "analyzing",
    "data",
    "reflect",
    "possible",
    "outages",
    "important",
    "trends",
    "also",
    "facilitates",
    "rapid",
    "responses",
    "primary",
    "aspect",
    "continuous",
    "monitoring",
    "implementing",
    "alert",
    "system",
    "immediately",
    "notifies",
    "right",
    "people",
    "minute",
    "incident",
    "emerges",
    "basically",
    "enables",
    "timely",
    "response",
    "security",
    "threats",
    "functional",
    "stop",
    "gaps",
    "minimizing",
    "damage",
    "eventually",
    "allowing",
    "faster",
    "restoration",
    "system",
    "optimal",
    "operational",
    "levels",
    "third",
    "reason",
    "minimizes",
    "system",
    "downtime",
    "consistent",
    "system",
    "monitoring",
    "quick",
    "necessary",
    "alerts",
    "help",
    "maintain",
    "system",
    "uptime",
    "raising",
    "alarm",
    "service",
    "outage",
    "application",
    "performance",
    "issues",
    "fourth",
    "reason",
    "helps",
    "assisting",
    "healthy",
    "business",
    "performance",
    "reduction",
    "system",
    "downtime",
    "also",
    "obviously",
    "minimizes",
    "negative",
    "impact",
    "customer",
    "experience",
    "thus",
    "safeguarding",
    "organization",
    "losses",
    "revenue",
    "credibility",
    "also",
    "continuous",
    "monitoring",
    "tools",
    "used",
    "track",
    "user",
    "reactions",
    "software",
    "updates",
    "useful",
    "several",
    "teams",
    "like",
    "development",
    "team",
    "quality",
    "assurance",
    "team",
    "sales",
    "marketing",
    "etc",
    "know",
    "need",
    "continuous",
    "monitoring",
    "let",
    "understand",
    "continuous",
    "monitoring",
    "continuous",
    "monitoring",
    "also",
    "sometimes",
    "refer",
    "continuous",
    "control",
    "monitoring",
    "automated",
    "process",
    "devops",
    "personnel",
    "anyone",
    "observe",
    "detect",
    "compilence",
    "issues",
    "security",
    "threats",
    "phase",
    "devops",
    "pipeline",
    "outside",
    "develops",
    "process",
    "may",
    "expanded",
    "segment",
    "id",
    "infrastructure",
    "question",
    "basically",
    "helps",
    "teams",
    "organizations",
    "monitor",
    "detect",
    "study",
    "key",
    "relevant",
    "metrics",
    "find",
    "ways",
    "resolve",
    "said",
    "issues",
    "real",
    "time",
    "already",
    "seen",
    "previous",
    "slide",
    "continuous",
    "monitoring",
    "comes",
    "end",
    "devops",
    "pipeline",
    "software",
    "released",
    "production",
    "continuous",
    "monitoring",
    "notify",
    "developers",
    "quality",
    "assurance",
    "teams",
    "event",
    "specific",
    "issues",
    "arising",
    "production",
    "environment",
    "continuous",
    "monitoring",
    "really",
    "help",
    "basically",
    "assist",
    "organizations",
    "devops",
    "teams",
    "particular",
    "procuring",
    "data",
    "public",
    "hybrid",
    "environments",
    "especially",
    "helpful",
    "implementing",
    "fortifying",
    "various",
    "security",
    "measures",
    "incident",
    "response",
    "threat",
    "assessment",
    "computers",
    "database",
    "n6",
    "root",
    "cause",
    "analysis",
    "also",
    "helps",
    "provide",
    "general",
    "feedback",
    "overall",
    "health",
    "setup",
    "including",
    "networks",
    "deployed",
    "software",
    "moving",
    "let",
    "us",
    "check",
    "continuous",
    "monitoring",
    "tools",
    "devops",
    "several",
    "devops",
    "tools",
    "monitoring",
    "ecosystem",
    "help",
    "development",
    "operation",
    "teams",
    "work",
    "together",
    "effectively",
    "first",
    "one",
    "monitoring",
    "tools",
    "come",
    "surprise",
    "starting",
    "discussion",
    "devops",
    "tools",
    "focus",
    "set",
    "know",
    "best",
    "monitoring",
    "tools",
    "good",
    "monitoring",
    "platform",
    "lets",
    "monitor",
    "infrastructure",
    "application",
    "performance",
    "whether",
    "cloud",
    "across",
    "containerized",
    "environments",
    "complete",
    "visibility",
    "every",
    "system",
    "time",
    "tools",
    "sensui",
    "negios",
    "prometheus",
    "sensui",
    "flexible",
    "scalable",
    "telemetry",
    "service",
    "health",
    "checking",
    "solution",
    "monitoring",
    "servers",
    "containers",
    "services",
    "applications",
    "functions",
    "connected",
    "device",
    "prometheus",
    "hand",
    "relies",
    "pull",
    "method",
    "collect",
    "information",
    "database",
    "nagios",
    "legacy",
    "monitoring",
    "tool",
    "introduced",
    "monitoring",
    "practices",
    "generation",
    "operators",
    "next",
    "one",
    "list",
    "devops",
    "configuration",
    "management",
    "tools",
    "configuration",
    "management",
    "tools",
    "allow",
    "automate",
    "provisioning",
    "deployment",
    "systems",
    "info",
    "desired",
    "configurations",
    "remedicate",
    "configuration",
    "drift",
    "modeling",
    "infrastructure",
    "code",
    "apply",
    "software",
    "delivery",
    "practices",
    "like",
    "version",
    "control",
    "automated",
    "testing",
    "continuous",
    "delivery",
    "infrastructure",
    "applications",
    "tools",
    "ansible",
    "chef",
    "puppet",
    "ansible",
    "written",
    "python",
    "agentless",
    "utilizes",
    "imperative",
    "approach",
    "chef",
    "hand",
    "written",
    "ruby",
    "also",
    "relies",
    "imperative",
    "configuration",
    "management",
    "approach",
    "puppet",
    "hand",
    "relies",
    "declarative",
    "configuration",
    "management",
    "approach",
    "using",
    "domain",
    "specific",
    "language",
    "agent",
    "master",
    "architecture",
    "moving",
    "devops",
    "alerting",
    "tools",
    "provides",
    "actionable",
    "informational",
    "system",
    "alerts",
    "customized",
    "fit",
    "complexities",
    "system",
    "example",
    "alerting",
    "system",
    "needs",
    "sensitive",
    "enough",
    "cover",
    "outage",
    "sensitive",
    "catching",
    "frequent",
    "unnecessary",
    "problems",
    "users",
    "really",
    "going",
    "see",
    "alerting",
    "tools",
    "like",
    "page",
    "duty",
    "servicenow",
    "slack",
    "page",
    "duty",
    "management",
    "platform",
    "analytics",
    "event",
    "intelligence",
    "automated",
    "incident",
    "response",
    "servicenow",
    "hand",
    "utilizes",
    "automated",
    "workflows",
    "itsm",
    "well",
    "customer",
    "service",
    "business",
    "processes",
    "slack",
    "hand",
    "lets",
    "consolidate",
    "alerts",
    "platform",
    "use",
    "group",
    "chats",
    "collaboration",
    "next",
    "list",
    "metric",
    "storage",
    "automated",
    "configuration",
    "management",
    "alerting",
    "monitoring",
    "whole",
    "lot",
    "data",
    "disposal",
    "learn",
    "challenge",
    "securely",
    "store",
    "analyze",
    "obviously",
    "need",
    "storage",
    "system",
    "lets",
    "aggregate",
    "learn",
    "system",
    "capacity",
    "user",
    "behavior",
    "service",
    "levels",
    "security",
    "risks",
    "much",
    "exactly",
    "metric",
    "storage",
    "comes",
    "picture",
    "different",
    "types",
    "tools",
    "influxdb",
    "splunk",
    "aws",
    "influx",
    "db",
    "simply",
    "time",
    "series",
    "database",
    "suited",
    "data",
    "storage",
    "splunk",
    "hand",
    "uses",
    "search",
    "engine",
    "database",
    "model",
    "store",
    "query",
    "data",
    "aws",
    "hand",
    "supports",
    "wide",
    "range",
    "storage",
    "purposes",
    "including",
    "relational",
    "databases",
    "data",
    "warehouse",
    "analytics",
    "time",
    "series",
    "database",
    "ledger",
    "database",
    "store",
    "trend",
    "transactions",
    "much",
    "session",
    "along",
    "grafana",
    "also",
    "learn",
    "configure",
    "influx",
    "db",
    "get",
    "data",
    "stay",
    "tuned",
    "moving",
    "last",
    "type",
    "continuous",
    "monitoring",
    "tools",
    "devops",
    "visualization",
    "tools",
    "visualization",
    "tool",
    "might",
    "considered",
    "essence",
    "devops",
    "dual",
    "chain",
    "monitoring",
    "get",
    "basically",
    "combine",
    "data",
    "sort",
    "finally",
    "visualize",
    "display",
    "customizable",
    "dashboards",
    "really",
    "visualization",
    "tools",
    "provide",
    "context",
    "meaning",
    "allow",
    "track",
    "changes",
    "improvements",
    "time",
    "also",
    "give",
    "management",
    "view",
    "helps",
    "guide",
    "strategic",
    "decisions",
    "customization",
    "options",
    "make",
    "easy",
    "team",
    "members",
    "design",
    "share",
    "dashboards",
    "grafana",
    "used",
    "top",
    "variety",
    "different",
    "data",
    "stores",
    "including",
    "graphite",
    "influx",
    "db",
    "elasticsearch",
    "know",
    "grafana",
    "visualization",
    "devops",
    "tool",
    "let",
    "move",
    "next",
    "part",
    "session",
    "introduction",
    "grafana",
    "firstly",
    "let",
    "us",
    "understand",
    "grafana",
    "grafana",
    "open",
    "source",
    "analytics",
    "interactive",
    "visualization",
    "web",
    "application",
    "basically",
    "provides",
    "charts",
    "graphs",
    "alerts",
    "web",
    "connected",
    "supported",
    "data",
    "sources",
    "grafana",
    "expandable",
    "plugin",
    "system",
    "allows",
    "query",
    "visualize",
    "alert",
    "understand",
    "metrics",
    "matter",
    "stored",
    "create",
    "explore",
    "share",
    "dashboards",
    "team",
    "foster",
    "culture",
    "also",
    "grafana",
    "become",
    "world",
    "popular",
    "technology",
    "used",
    "compose",
    "observability",
    "dashboards",
    "everything",
    "prometheus",
    "graphite",
    "metrics",
    "logs",
    "application",
    "data",
    "power",
    "plants",
    "beehives",
    "said",
    "let",
    "move",
    "check",
    "features",
    "grafana",
    "first",
    "one",
    "visualize",
    "heat",
    "maps",
    "histograms",
    "graphs",
    "geo",
    "maps",
    "grafana",
    "plethora",
    "visualization",
    "options",
    "help",
    "understand",
    "data",
    "beautifully",
    "second",
    "feature",
    "alert",
    "grafana",
    "seamlessly",
    "define",
    "alerts",
    "makes",
    "sense",
    "data",
    "define",
    "thresholds",
    "visually",
    "get",
    "notified",
    "via",
    "slack",
    "pager",
    "duty",
    "much",
    "also",
    "unify",
    "grafana",
    "bring",
    "data",
    "together",
    "get",
    "better",
    "context",
    "grafana",
    "supports",
    "dozens",
    "databases",
    "natively",
    "best",
    "part",
    "mix",
    "together",
    "dashboard",
    "next",
    "important",
    "feature",
    "open",
    "source",
    "grafana",
    "gives",
    "various",
    "options",
    "completely",
    "open",
    "source",
    "backed",
    "vibrant",
    "community",
    "use",
    "grafana",
    "cloud",
    "easily",
    "install",
    "platform",
    "next",
    "important",
    "feature",
    "grafana",
    "extend",
    "discover",
    "hundreds",
    "dashboards",
    "plugins",
    "official",
    "library",
    "grafana",
    "passion",
    "momentum",
    "community",
    "new",
    "ones",
    "added",
    "almost",
    "every",
    "week",
    "last",
    "feature",
    "grafana",
    "collaboration",
    "bring",
    "everyone",
    "together",
    "share",
    "data",
    "dashboards",
    "across",
    "teams",
    "basically",
    "empowers",
    "users",
    "helps",
    "foster",
    "culture",
    "said",
    "let",
    "dive",
    "right",
    "demo",
    "install",
    "grafana",
    "local",
    "machine",
    "working",
    "linux",
    "virtual",
    "machine",
    "ubuntu",
    "working",
    "follow",
    "procedures",
    "download",
    "grafana",
    "onto",
    "local",
    "machine",
    "firstly",
    "go",
    "official",
    "website",
    "grafana",
    "see",
    "install",
    "grafana",
    "ubuntu",
    "set",
    "commands",
    "need",
    "incorporate",
    "download",
    "grafana",
    "onto",
    "system",
    "follow",
    "going",
    "open",
    "terminal",
    "install",
    "grafana",
    "onto",
    "local",
    "machine",
    "going",
    "explain",
    "entire",
    "graphical",
    "user",
    "interface",
    "grafana",
    "really",
    "looks",
    "make",
    "dashboards",
    "make",
    "new",
    "panels",
    "dashboards",
    "etc",
    "learning",
    "part",
    "session",
    "moving",
    "let",
    "go",
    "ahead",
    "install",
    "grafana",
    "system",
    "set",
    "commands",
    "already",
    "notepad",
    "copy",
    "paste",
    "make",
    "entire",
    "process",
    "easier",
    "going",
    "copy",
    "first",
    "command",
    "notepad",
    "allow",
    "download",
    "packages",
    "grafana",
    "done",
    "going",
    "download",
    "grafana",
    "packages",
    "going",
    "start",
    "enable",
    "grafana",
    "server",
    "grafana",
    "server",
    "started",
    "see",
    "status",
    "active",
    "running",
    "great",
    "next",
    "step",
    "want",
    "know",
    "port",
    "grafana",
    "instance",
    "running",
    "going",
    "type",
    "command",
    "sudo",
    "alice",
    "hyphen",
    "hyphen",
    "uppercase",
    "p",
    "command",
    "give",
    "list",
    "instances",
    "currently",
    "running",
    "vm",
    "see",
    "grafana",
    "instance",
    "running",
    "port",
    "3000",
    "going",
    "open",
    "local",
    "browser",
    "going",
    "type",
    "localhost",
    "since",
    "grafana",
    "server",
    "running",
    "port",
    "3000",
    "going",
    "type",
    "redirect",
    "login",
    "page",
    "grafana",
    "see",
    "grafana",
    "page",
    "prompt",
    "enter",
    "username",
    "password",
    "default",
    "username",
    "password",
    "port",
    "3000",
    "admin",
    "username",
    "admin",
    "password",
    "admin",
    "gon",
    "na",
    "log",
    "want",
    "new",
    "password",
    "want",
    "admin",
    "type",
    "new",
    "password",
    "confirm",
    "submit",
    "going",
    "skip",
    "see",
    "home",
    "page",
    "grafana",
    "interesting",
    "see",
    "blue",
    "pick",
    "boxes",
    "see",
    "panels",
    "really",
    "play",
    "around",
    "panels",
    "view",
    "edit",
    "share",
    "duplicate",
    "panels",
    "remove",
    "panels",
    "also",
    "move",
    "around",
    "panels",
    "really",
    "interesting",
    "even",
    "welcome",
    "grafana",
    "panel",
    "moved",
    "around",
    "edited",
    "shared",
    "remove",
    "make",
    "changes",
    "really",
    "play",
    "around",
    "panels",
    "grafana",
    "scroll",
    "see",
    "blog",
    "give",
    "latest",
    "updates",
    "grafana",
    "changes",
    "occurring",
    "every",
    "day",
    "also",
    "list",
    "dashboards",
    "left",
    "hand",
    "side",
    "also",
    "panel",
    "view",
    "edit",
    "share",
    "whatever",
    "want",
    "currently",
    "see",
    "one",
    "dashboard",
    "worked",
    "world",
    "map",
    "dashboard",
    "home",
    "page",
    "grafana",
    "want",
    "return",
    "back",
    "home",
    "page",
    "grafana",
    "point",
    "time",
    "working",
    "application",
    "simply",
    "click",
    "logo",
    "left",
    "hand",
    "corner",
    "redirect",
    "main",
    "home",
    "page",
    "see",
    "right",
    "hand",
    "side",
    "two",
    "symbols",
    "first",
    "one",
    "says",
    "dashboard",
    "settings",
    "next",
    "one",
    "says",
    "cycle",
    "view",
    "mode",
    "dashboard",
    "settings",
    "pretty",
    "interesting",
    "click",
    "access",
    "general",
    "configurations",
    "application",
    "name",
    "main",
    "refiners",
    "whatever",
    "want",
    "also",
    "add",
    "description",
    "home",
    "dashboard",
    "add",
    "tags",
    "also",
    "place",
    "general",
    "folder",
    "pretty",
    "interesting",
    "edit",
    "auto",
    "refresh",
    "based",
    "time",
    "etc",
    "also",
    "annotations",
    "variables",
    "links",
    "json",
    "model",
    "really",
    "necessary",
    "beginner",
    "tutorial",
    "going",
    "discuss",
    "details",
    "home",
    "settings",
    "allow",
    "dashboard",
    "settings",
    "cycle",
    "view",
    "mode",
    "pretty",
    "interesting",
    "want",
    "left",
    "hand",
    "panel",
    "see",
    "left",
    "hand",
    "panel",
    "certain",
    "icons",
    "present",
    "want",
    "view",
    "click",
    "cycle",
    "view",
    "mode",
    "disappear",
    "even",
    "want",
    "home",
    "tab",
    "disappear",
    "click",
    "cycle",
    "view",
    "mode",
    "um",
    "know",
    "hide",
    "everything",
    "want",
    "get",
    "back",
    "panels",
    "click",
    "escape",
    "button",
    "keyboard",
    "everything",
    "return",
    "back",
    "normal",
    "hope",
    "clear",
    "hope",
    "home",
    "page",
    "really",
    "easy",
    "understand",
    "let",
    "move",
    "check",
    "icons",
    "present",
    "left",
    "hand",
    "side",
    "want",
    "search",
    "dashboards",
    "created",
    "obviously",
    "click",
    "search",
    "button",
    "search",
    "name",
    "sort",
    "based",
    "alphabetical",
    "order",
    "already",
    "mentioned",
    "one",
    "dashboard",
    "currently",
    "worked",
    "named",
    "world",
    "map",
    "let",
    "move",
    "next",
    "icon",
    "plus",
    "icon",
    "give",
    "four",
    "different",
    "options",
    "says",
    "create",
    "dashboard",
    "folder",
    "import",
    "want",
    "create",
    "new",
    "dashboard",
    "click",
    "dashboard",
    "option",
    "redirect",
    "page",
    "says",
    "new",
    "dashboard",
    "add",
    "new",
    "panel",
    "panels",
    "pretty",
    "interesting",
    "really",
    "play",
    "around",
    "panels",
    "increase",
    "size",
    "decrease",
    "size",
    "move",
    "around",
    "panels",
    "hovering",
    "cursor",
    "top",
    "part",
    "panel",
    "really",
    "move",
    "around",
    "play",
    "around",
    "also",
    "add",
    "panels",
    "clicking",
    "redirect",
    "another",
    "page",
    "select",
    "give",
    "panel",
    "title",
    "add",
    "description",
    "panel",
    "choose",
    "kind",
    "visualization",
    "want",
    "represent",
    "data",
    "want",
    "represent",
    "graph",
    "click",
    "graph",
    "want",
    "express",
    "gorge",
    "form",
    "clicking",
    "gorge",
    "option",
    "really",
    "interesting",
    "really",
    "pick",
    "options",
    "various",
    "options",
    "also",
    "view",
    "plugin",
    "list",
    "options",
    "several",
    "thousands",
    "plugins",
    "available",
    "grafana",
    "download",
    "opm",
    "view",
    "panels",
    "interesting",
    "moving",
    "also",
    "queries",
    "select",
    "database",
    "option",
    "currently",
    "default",
    "data",
    "source",
    "selected",
    "also",
    "write",
    "queries",
    "like",
    "display",
    "expressed",
    "visualization",
    "form",
    "selected",
    "remove",
    "panels",
    "clicking",
    "remove",
    "button",
    "want",
    "add",
    "new",
    "panel",
    "click",
    "add",
    "panel",
    "option",
    "add",
    "many",
    "ever",
    "need",
    "limit",
    "add",
    "herniable",
    "panels",
    "want",
    "using",
    "add",
    "panel",
    "option",
    "also",
    "save",
    "dashboard",
    "name",
    "whatever",
    "want",
    "choose",
    "folder",
    "going",
    "learn",
    "next",
    "part",
    "create",
    "different",
    "folders",
    "save",
    "different",
    "dashboards",
    "folders",
    "folder",
    "option",
    "allow",
    "also",
    "check",
    "dashboard",
    "settings",
    "already",
    "discussed",
    "also",
    "view",
    "cycle",
    "view",
    "mode",
    "time",
    "range",
    "pick",
    "using",
    "option",
    "allow",
    "display",
    "data",
    "terms",
    "time",
    "finally",
    "zoom",
    "also",
    "refresh",
    "dashboard",
    "made",
    "changes",
    "save",
    "refresh",
    "dashboard",
    "incorporated",
    "changes",
    "display",
    "immediately",
    "hope",
    "clear",
    "new",
    "dashboard",
    "option",
    "pretty",
    "important",
    "option",
    "really",
    "working",
    "application",
    "already",
    "mentioned",
    "previously",
    "create",
    "many",
    "folders",
    "like",
    "name",
    "folder",
    "anything",
    "want",
    "create",
    "one",
    "whenever",
    "make",
    "new",
    "dashboard",
    "save",
    "dashboards",
    "want",
    "save",
    "particular",
    "folder",
    "allow",
    "really",
    "manage",
    "folders",
    "also",
    "option",
    "called",
    "playlist",
    "create",
    "playlists",
    "cycle",
    "dashboards",
    "tvs",
    "without",
    "user",
    "control",
    "last",
    "options",
    "allow",
    "view",
    "snapshots",
    "hope",
    "folder",
    "option",
    "clear",
    "option",
    "allow",
    "import",
    "dashboard",
    "file",
    "know",
    "official",
    "website",
    "grafana",
    "next",
    "option",
    "explore",
    "option",
    "really",
    "explore",
    "entire",
    "database",
    "add",
    "new",
    "queries",
    "run",
    "queries",
    "option",
    "allow",
    "write",
    "queries",
    "data",
    "options",
    "answer",
    "results",
    "queries",
    "displayed",
    "explore",
    "option",
    "little",
    "different",
    "pretty",
    "interesting",
    "moving",
    "alerting",
    "alerting",
    "another",
    "really",
    "important",
    "option",
    "grafana",
    "really",
    "grafana",
    "alerting",
    "allows",
    "allows",
    "attach",
    "rules",
    "dashboard",
    "panels",
    "save",
    "dashboard",
    "grafana",
    "extracts",
    "alert",
    "rules",
    "separate",
    "alert",
    "rule",
    "storage",
    "schedules",
    "evaluation",
    "view",
    "alerts",
    "search",
    "alerts",
    "option",
    "alert",
    "tab",
    "also",
    "specify",
    "alert",
    "rule",
    "notifications",
    "along",
    "detailed",
    "message",
    "alert",
    "rule",
    "done",
    "via",
    "channels",
    "create",
    "rules",
    "search",
    "alerting",
    "really",
    "important",
    "option",
    "moving",
    "configuration",
    "configuration",
    "part",
    "extremely",
    "important",
    "allow",
    "add",
    "data",
    "source",
    "grafana",
    "right",
    "click",
    "option",
    "add",
    "data",
    "source",
    "redirect",
    "page",
    "see",
    "series",
    "different",
    "databases",
    "see",
    "time",
    "series",
    "databases",
    "see",
    "logging",
    "document",
    "databases",
    "see",
    "distributed",
    "tracing",
    "see",
    "sql",
    "cloud",
    "etc",
    "select",
    "create",
    "one",
    "see",
    "time",
    "series",
    "databases",
    "prometheus",
    "graphite",
    "influx",
    "db",
    "sql",
    "mysql",
    "post",
    "gre",
    "sql",
    "microsoft",
    "sql",
    "server",
    "cloud",
    "cloud",
    "watch",
    "azure",
    "rafana",
    "cloud",
    "many",
    "options",
    "really",
    "select",
    "great",
    "add",
    "data",
    "source",
    "using",
    "data",
    "sources",
    "option",
    "configuration",
    "also",
    "control",
    "view",
    "different",
    "users",
    "working",
    "grafana",
    "clicking",
    "users",
    "option",
    "also",
    "search",
    "user",
    "name",
    "email",
    "login",
    "etc",
    "create",
    "teams",
    "particular",
    "project",
    "want",
    "work",
    "particular",
    "team",
    "create",
    "number",
    "teams",
    "like",
    "grafana",
    "provides",
    "n",
    "number",
    "plugins",
    "download",
    "internet",
    "incorporate",
    "dashboards",
    "panels",
    "really",
    "interesting",
    "search",
    "name",
    "type",
    "also",
    "download",
    "plugins",
    "clicking",
    "option",
    "moving",
    "preferences",
    "update",
    "organization",
    "profile",
    "also",
    "switch",
    "different",
    "themes",
    "click",
    "live",
    "theme",
    "save",
    "change",
    "grafana",
    "light",
    "theme",
    "prefer",
    "dark",
    "mode",
    "going",
    "switch",
    "back",
    "last",
    "operation",
    "configuration",
    "api",
    "keys",
    "add",
    "new",
    "api",
    "key",
    "option",
    "really",
    "allows",
    "finally",
    "options",
    "server",
    "admin",
    "view",
    "users",
    "view",
    "organizations",
    "option",
    "really",
    "allows",
    "check",
    "system",
    "settings",
    "configured",
    "grafana",
    "also",
    "check",
    "statistics",
    "users",
    "admins",
    "viewers",
    "active",
    "sessions",
    "total",
    "number",
    "playlists",
    "total",
    "number",
    "snapshots",
    "many",
    "dashboard",
    "tags",
    "many",
    "alerts",
    "got",
    "many",
    "users",
    "active",
    "since",
    "particular",
    "amount",
    "time",
    "30",
    "days",
    "statistical",
    "activities",
    "occurring",
    "grafana",
    "viewed",
    "option",
    "finally",
    "also",
    "upgrade",
    "grafana",
    "grafana",
    "enterprise",
    "entire",
    "graphical",
    "user",
    "interface",
    "two",
    "options",
    "like",
    "talk",
    "icon",
    "see",
    "left",
    "corner",
    "allow",
    "sign",
    "allow",
    "change",
    "password",
    "also",
    "change",
    "preferences",
    "like",
    "edit",
    "profile",
    "make",
    "know",
    "really",
    "nominal",
    "changes",
    "like",
    "change",
    "preferences",
    "click",
    "option",
    "also",
    "change",
    "password",
    "like",
    "click",
    "question",
    "mark",
    "icon",
    "see",
    "version",
    "grafana",
    "currently",
    "working",
    "version",
    "community",
    "support",
    "keyboard",
    "shortcuts",
    "given",
    "help",
    "option",
    "going",
    "click",
    "grafana",
    "logo",
    "move",
    "back",
    "grafana",
    "homepage",
    "home",
    "dashboard",
    "hope",
    "part",
    "demo",
    "really",
    "gave",
    "overview",
    "grafana",
    "looks",
    "like",
    "grafana",
    "works",
    "get",
    "started",
    "really",
    "grafana",
    "also",
    "hope",
    "helped",
    "install",
    "grafana",
    "local",
    "machine",
    "really",
    "important",
    "install",
    "configure",
    "get",
    "started",
    "get",
    "demonstration",
    "let",
    "us",
    "go",
    "check",
    "gon",
    "na",
    "create",
    "firstly",
    "creating",
    "world",
    "map",
    "show",
    "us",
    "confirmed",
    "cases",
    "past",
    "one",
    "year",
    "panels",
    "really",
    "created",
    "data",
    "past",
    "one",
    "year",
    "see",
    "left",
    "bottom",
    "corner",
    "world",
    "map",
    "panel",
    "white",
    "tiny",
    "box",
    "called",
    "legend",
    "see",
    "cases",
    "less",
    "100",
    "cases",
    "represented",
    "green",
    "color",
    "100",
    "10",
    "000",
    "cases",
    "represented",
    "orange",
    "color",
    "cases",
    "10",
    "000",
    "represented",
    "red",
    "color",
    "confirmed",
    "cases",
    "represented",
    "world",
    "map",
    "scroll",
    "see",
    "bar",
    "graph",
    "represents",
    "confirmed",
    "cases",
    "death",
    "cases",
    "recovered",
    "cases",
    "india",
    "green",
    "one",
    "represents",
    "confirmed",
    "cases",
    "blue",
    "line",
    "represents",
    "recovered",
    "cases",
    "yellow",
    "one",
    "represents",
    "death",
    "cases",
    "representing",
    "cases",
    "past",
    "one",
    "year",
    "india",
    "scroll",
    "created",
    "three",
    "panels",
    "confirmed",
    "cases",
    "india",
    "death",
    "cases",
    "indian",
    "recovery",
    "cases",
    "india",
    "average",
    "number",
    "past",
    "one",
    "year",
    "total",
    "sum",
    "cases",
    "represented",
    "panels",
    "form",
    "gauges",
    "moving",
    "also",
    "made",
    "four",
    "different",
    "panels",
    "representing",
    "state",
    "cases",
    "okay",
    "maharashtra",
    "karnataka",
    "delhi",
    "kolkata",
    "graph",
    "recovered",
    "cases",
    "death",
    "cases",
    "confirmed",
    "cases",
    "panel",
    "represents",
    "state",
    "maharashtra",
    "recovered",
    "confirmed",
    "death",
    "cases",
    "represented",
    "form",
    "graph",
    "going",
    "create",
    "hope",
    "guys",
    "like",
    "without",
    "much",
    "ado",
    "let",
    "get",
    "started",
    "begin",
    "install",
    "data",
    "source",
    "local",
    "machine",
    "right",
    "demonstration",
    "going",
    "pick",
    "influx",
    "db",
    "influx",
    "db",
    "basically",
    "open",
    "source",
    "time",
    "series",
    "database",
    "optimized",
    "fast",
    "high",
    "availability",
    "storage",
    "retrieval",
    "time",
    "series",
    "datas",
    "terms",
    "fields",
    "use",
    "influx",
    "db",
    "operations",
    "monitoring",
    "application",
    "metrics",
    "internet",
    "things",
    "sensor",
    "data",
    "also",
    "analytics",
    "going",
    "right",
    "install",
    "influx",
    "db",
    "go",
    "official",
    "website",
    "check",
    "commands",
    "install",
    "influx",
    "db",
    "ubuntu",
    "commands",
    "given",
    "official",
    "website",
    "made",
    "list",
    "notepad",
    "easy",
    "install",
    "also",
    "follow",
    "procedure",
    "else",
    "go",
    "official",
    "website",
    "get",
    "commands",
    "install",
    "operating",
    "system",
    "going",
    "switch",
    "back",
    "terminal",
    "commands",
    "allow",
    "install",
    "fluxdb",
    "one",
    "two",
    "going",
    "copy",
    "going",
    "paste",
    "done",
    "copy",
    "remaining",
    "commands",
    "allow",
    "install",
    "influx",
    "db",
    "start",
    "server",
    "last",
    "command",
    "going",
    "copy",
    "paste",
    "last",
    "command",
    "start",
    "influx",
    "db",
    "check",
    "port",
    "influx",
    "db",
    "currently",
    "running",
    "going",
    "type",
    "list",
    "current",
    "running",
    "instances",
    "bad",
    "sudo",
    "ls",
    "hyphen",
    "hyphen",
    "p",
    "give",
    "current",
    "running",
    "instances",
    "see",
    "influx",
    "db",
    "running",
    "server",
    "8086",
    "great",
    "influx",
    "db",
    "running",
    "also",
    "grafana",
    "server",
    "running",
    "port",
    "3000",
    "grafana",
    "server",
    "influx",
    "db",
    "running",
    "move",
    "create",
    "database",
    "activate",
    "going",
    "clear",
    "screen",
    "going",
    "type",
    "flux",
    "going",
    "enter",
    "shell",
    "influx",
    "want",
    "check",
    "databases",
    "currently",
    "present",
    "influx",
    "database",
    "show",
    "two",
    "databases",
    "internal",
    "database",
    "covered",
    "internal",
    "database",
    "default",
    "influx",
    "db",
    "database",
    "covid",
    "database",
    "created",
    "manually",
    "past",
    "want",
    "create",
    "database",
    "like",
    "one",
    "created",
    "covet",
    "type",
    "create",
    "database",
    "click",
    "enter",
    "automatically",
    "create",
    "database",
    "covert",
    "click",
    "show",
    "databases",
    "show",
    "new",
    "database",
    "use",
    "database",
    "command",
    "use",
    "click",
    "show",
    "measurements",
    "none",
    "right",
    "going",
    "show",
    "measurements",
    "switch",
    "grafana",
    "activate",
    "database",
    "influx",
    "db",
    "switch",
    "home",
    "page",
    "grafana",
    "click",
    "add",
    "first",
    "data",
    "source",
    "redirect",
    "database",
    "page",
    "give",
    "list",
    "databases",
    "available",
    "since",
    "working",
    "influx",
    "db",
    "gon",
    "na",
    "select",
    "redirect",
    "page",
    "name",
    "influx",
    "db",
    "database",
    "whatever",
    "like",
    "name",
    "also",
    "prompt",
    "enter",
    "url",
    "already",
    "know",
    "influx",
    "db",
    "currently",
    "active",
    "port",
    "number",
    "8086",
    "gon",
    "na",
    "write",
    "scroll",
    "also",
    "show",
    "influx",
    "db",
    "details",
    "select",
    "database",
    "going",
    "type",
    "okay",
    "clear",
    "name",
    "influx",
    "db1",
    "also",
    "add",
    "url",
    "port",
    "number",
    "8086",
    "also",
    "given",
    "details",
    "database",
    "currently",
    "working",
    "click",
    "save",
    "test",
    "data",
    "says",
    "data",
    "source",
    "updated",
    "data",
    "source",
    "working",
    "great",
    "simply",
    "going",
    "go",
    "ahead",
    "create",
    "first",
    "dashboard",
    "going",
    "create",
    "first",
    "panel",
    "first",
    "panel",
    "creating",
    "world",
    "map",
    "data",
    "default",
    "wo",
    "world",
    "map",
    "visualization",
    "go",
    "grafana",
    "plugins",
    "website",
    "download",
    "world",
    "map",
    "panel",
    "go",
    "grafana",
    "plugins",
    "click",
    "panel",
    "option",
    "see",
    "first",
    "panel",
    "turn",
    "world",
    "map",
    "panel",
    "going",
    "click",
    "world",
    "map",
    "panel",
    "going",
    "click",
    "installation",
    "see",
    "command",
    "allow",
    "install",
    "world",
    "map",
    "panel",
    "going",
    "copy",
    "gon",
    "na",
    "quit",
    "going",
    "type",
    "sudo",
    "going",
    "paste",
    "command",
    "copied",
    "immediately",
    "download",
    "install",
    "grafana",
    "world",
    "map",
    "panel",
    "grafana",
    "application",
    "refiner",
    "world",
    "map",
    "panel",
    "installed",
    "successfully",
    "restart",
    "grafana",
    "click",
    "sudo",
    "service",
    "grafana",
    "server",
    "restart",
    "automatically",
    "restart",
    "grafana",
    "server",
    "switch",
    "back",
    "dashboard",
    "reload",
    "page",
    "click",
    "world",
    "map",
    "see",
    "panel",
    "added",
    "going",
    "click",
    "panel",
    "going",
    "going",
    "get",
    "data",
    "set",
    "going",
    "download",
    "data",
    "set",
    "track",
    "reason",
    "using",
    "data",
    "set",
    "world",
    "map",
    "plugin",
    "format",
    "needs",
    "followed",
    "latitude",
    "longitude",
    "name",
    "country",
    "also",
    "metric",
    "metric",
    "another",
    "parameter",
    "needs",
    "followed",
    "allow",
    "give",
    "certain",
    "radius",
    "particular",
    "country",
    "representing",
    "world",
    "map",
    "format",
    "clearly",
    "satisfied",
    "track",
    "database",
    "format",
    "satisfied",
    "country",
    "level",
    "data",
    "track",
    "api",
    "going",
    "download",
    "link",
    "location",
    "directly",
    "download",
    "terminal",
    "typing",
    "command",
    "sudo",
    "wget",
    "copied",
    "location",
    "data",
    "set",
    "going",
    "download",
    "directly",
    "virtual",
    "machine",
    "command",
    "sudo",
    "wget",
    "going",
    "paste",
    "link",
    "location",
    "automatically",
    "download",
    "data",
    "set",
    "local",
    "machine",
    "see",
    "successfully",
    "downloaded",
    "saved",
    "view",
    "list",
    "going",
    "clear",
    "screen",
    "clear",
    "screen",
    "go",
    "start",
    "coding",
    "create",
    "first",
    "python",
    "file",
    "name",
    "world",
    "map",
    "dot",
    "py",
    "start",
    "editing",
    "file",
    "first",
    "import",
    "pandas",
    "pd",
    "also",
    "require",
    "client",
    "influx",
    "db",
    "database",
    "going",
    "type",
    "see",
    "already",
    "typed",
    "entire",
    "code",
    "explain",
    "already",
    "mentioned",
    "firstly",
    "need",
    "create",
    "client",
    "incorporate",
    "two",
    "parameters",
    "client",
    "host",
    "port",
    "number",
    "code",
    "line",
    "connect",
    "client",
    "database",
    "uh",
    "since",
    "database",
    "name",
    "going",
    "pass",
    "read",
    "csv",
    "file",
    "whatever",
    "name",
    "csv",
    "file",
    "add",
    "going",
    "drop",
    "null",
    "values",
    "print",
    "loop",
    "going",
    "iterate",
    "df",
    "every",
    "row",
    "inside",
    "df",
    "add",
    "value",
    "inside",
    "influx",
    "server",
    "influx",
    "server",
    "sql",
    "database",
    "need",
    "send",
    "json",
    "format",
    "database",
    "json",
    "body",
    "basically",
    "three",
    "fields",
    "three",
    "really",
    "important",
    "fields",
    "first",
    "one",
    "measurement",
    "second",
    "one",
    "tags",
    "third",
    "one",
    "fields",
    "measurement",
    "uh",
    "table",
    "name",
    "data",
    "stored",
    "going",
    "name",
    "measurement",
    "covet",
    "map",
    "tags",
    "property",
    "repeated",
    "going",
    "explain",
    "going",
    "download",
    "csv",
    "file",
    "download",
    "csv",
    "file",
    "see",
    "location",
    "location",
    "country",
    "name",
    "also",
    "code",
    "country",
    "particular",
    "country",
    "also",
    "latitude",
    "longitude",
    "data",
    "confirmed",
    "dead",
    "recovered",
    "updated",
    "etc",
    "second",
    "field",
    "tag",
    "field",
    "property",
    "repeated",
    "several",
    "times",
    "example",
    "country",
    "names",
    "country",
    "names",
    "obviously",
    "repeated",
    "several",
    "times",
    "based",
    "case",
    "confirmation",
    "debt",
    "country",
    "name",
    "right",
    "obviously",
    "database",
    "country",
    "repeated",
    "several",
    "times",
    "cases",
    "united",
    "states",
    "many",
    "cases",
    "united",
    "states",
    "particular",
    "country",
    "repeated",
    "several",
    "times",
    "tags",
    "basically",
    "property",
    "repeated",
    "going",
    "keep",
    "tag",
    "country",
    "row",
    "0",
    "country",
    "name",
    "going",
    "mention",
    "row",
    "next",
    "one",
    "fields",
    "anything",
    "except",
    "tags",
    "anything",
    "tag",
    "basically",
    "field",
    "four",
    "different",
    "parameters",
    "name",
    "latitude",
    "longitude",
    "metric",
    "already",
    "mentioned",
    "earlier",
    "session",
    "name",
    "row",
    "0",
    "name",
    "country",
    "latitude",
    "longitude",
    "given",
    "row",
    "2",
    "row",
    "3",
    "0",
    "1",
    "2",
    "3",
    "right",
    "row",
    "2",
    "3",
    "specified",
    "row",
    "2",
    "metric",
    "given",
    "row",
    "metric",
    "either",
    "confirmed",
    "dead",
    "recovered",
    "either",
    "represent",
    "dead",
    "cases",
    "world",
    "map",
    "also",
    "represent",
    "recovered",
    "cases",
    "world",
    "map",
    "right",
    "going",
    "represent",
    "confirmed",
    "cases",
    "world",
    "map",
    "going",
    "pick",
    "metric",
    "row",
    "mentioned",
    "finally",
    "pass",
    "json",
    "body",
    "client",
    "going",
    "print",
    "done",
    "hope",
    "piece",
    "code",
    "cleared",
    "going",
    "save",
    "done",
    "run",
    "file",
    "python",
    "3",
    "world",
    "map",
    "dot",
    "py",
    "okay",
    "great",
    "clear",
    "going",
    "install",
    "pandas",
    "influx",
    "db",
    "gon",
    "na",
    "click",
    "fifth",
    "three",
    "install",
    "pandas",
    "flux",
    "db",
    "automatically",
    "install",
    "pandas",
    "influxdb",
    "already",
    "installed",
    "says",
    "requirement",
    "already",
    "satisfied",
    "download",
    "moving",
    "clear",
    "screen",
    "execute",
    "world",
    "map",
    "python",
    "file",
    "230",
    "columns",
    "eight",
    "rows",
    "enter",
    "influx",
    "shell",
    "check",
    "databases",
    "going",
    "use",
    "database",
    "go",
    "19",
    "going",
    "check",
    "measurements",
    "created",
    "one",
    "measurement",
    "world",
    "map",
    "python",
    "file",
    "covered",
    "map",
    "given",
    "moving",
    "check",
    "data",
    "information",
    "covid",
    "map",
    "measurement",
    "see",
    "time",
    "name",
    "country",
    "latitude",
    "longitude",
    "great",
    "okay",
    "switch",
    "back",
    "dashboard",
    "create",
    "world",
    "map",
    "panel",
    "going",
    "create",
    "dashboard",
    "add",
    "new",
    "panel",
    "going",
    "click",
    "visualization",
    "world",
    "map",
    "panel",
    "right",
    "first",
    "going",
    "going",
    "select",
    "influx",
    "db1",
    "going",
    "select",
    "measurement",
    "covid",
    "map",
    "going",
    "add",
    "fields",
    "three",
    "fields",
    "going",
    "remove",
    "field",
    "next",
    "field",
    "going",
    "add",
    "longitude",
    "going",
    "add",
    "another",
    "field",
    "metric",
    "add",
    "name",
    "going",
    "remove",
    "format",
    "table",
    "done",
    "going",
    "check",
    "map",
    "data",
    "options",
    "map",
    "data",
    "options",
    "going",
    "click",
    "location",
    "data",
    "select",
    "table",
    "field",
    "mapping",
    "option",
    "table",
    "query",
    "format",
    "always",
    "terms",
    "coordinates",
    "soon",
    "click",
    "see",
    "circles",
    "appear",
    "world",
    "map",
    "location",
    "name",
    "field",
    "name",
    "specify",
    "location",
    "name",
    "field",
    "name",
    "refresh",
    "dashboard",
    "hover",
    "cursor",
    "certain",
    "area",
    "show",
    "name",
    "country",
    "see",
    "green",
    "ones",
    "10",
    "plus",
    "cases",
    "legend",
    "present",
    "give",
    "idea",
    "color",
    "represents",
    "green",
    "currently",
    "represents",
    "10",
    "cases",
    "orange",
    "represent",
    "cases",
    "0",
    "10",
    "red",
    "represent",
    "cases",
    "less",
    "10",
    "change",
    "threshold",
    "change",
    "threshold",
    "options",
    "going",
    "keep",
    "threshold",
    "100",
    "10",
    "000",
    "going",
    "save",
    "cases",
    "less",
    "100",
    "green",
    "color",
    "going",
    "apply",
    "cases",
    "10",
    "000",
    "going",
    "represent",
    "red",
    "color",
    "going",
    "click",
    "red",
    "color",
    "going",
    "apply",
    "see",
    "countries",
    "10",
    "000",
    "cases",
    "going",
    "red",
    "color",
    "countries",
    "100",
    "10",
    "000",
    "cases",
    "going",
    "represented",
    "orange",
    "color",
    "countries",
    "less",
    "100",
    "cases",
    "going",
    "represented",
    "green",
    "color",
    "looks",
    "pretty",
    "good",
    "right",
    "go",
    "setting",
    "change",
    "name",
    "world",
    "map",
    "okay",
    "want",
    "transparent",
    "background",
    "going",
    "use",
    "option",
    "switch",
    "think",
    "everything",
    "looks",
    "good",
    "think",
    "map",
    "ready",
    "going",
    "save",
    "going",
    "save",
    "general",
    "folder",
    "done",
    "elongate",
    "map",
    "get",
    "clear",
    "picture",
    "looks",
    "looks",
    "good",
    "right",
    "let",
    "quickly",
    "move",
    "next",
    "part",
    "demo",
    "next",
    "part",
    "demo",
    "going",
    "go",
    "kaggle",
    "look",
    "data",
    "sets",
    "search",
    "keyboard",
    "going",
    "search",
    "novel",
    "coronavirus",
    "2019",
    "data",
    "set",
    "going",
    "click",
    "first",
    "data",
    "set",
    "scroll",
    "data",
    "set",
    "serial",
    "number",
    "observation",
    "date",
    "state",
    "country",
    "perfect",
    "next",
    "part",
    "session",
    "going",
    "download",
    "finish",
    "downloading",
    "see",
    "observation",
    "date",
    "state",
    "country",
    "last",
    "update",
    "confirmed",
    "debts",
    "recovery",
    "particular",
    "data",
    "set",
    "see",
    "serial",
    "number",
    "observation",
    "date",
    "state",
    "country",
    "last",
    "update",
    "confirmed",
    "case",
    "deaths",
    "recovery",
    "based",
    "particular",
    "date",
    "great",
    "going",
    "paste",
    "data",
    "directly",
    "file",
    "see",
    "data",
    "set",
    "already",
    "going",
    "place",
    "directory",
    "edureka",
    "directory",
    "going",
    "click",
    "clear",
    "going",
    "check",
    "ls",
    "data",
    "set",
    "going",
    "create",
    "file",
    "named",
    "graph",
    "write",
    "python",
    "code",
    "edit",
    "type",
    "python",
    "code",
    "explain",
    "end",
    "wo",
    "take",
    "much",
    "time",
    "see",
    "already",
    "created",
    "client",
    "influx",
    "db",
    "add",
    "database",
    "pass",
    "variable",
    "read",
    "csv",
    "file",
    "covered",
    "drop",
    "null",
    "values",
    "iterate",
    "json",
    "body",
    "three",
    "fields",
    "already",
    "talked",
    "first",
    "one",
    "measurement",
    "field",
    "going",
    "name",
    "kobit",
    "metric",
    "also",
    "tags",
    "going",
    "specify",
    "country",
    "state",
    "country",
    "row",
    "three",
    "zero",
    "one",
    "two",
    "three",
    "state",
    "row",
    "2",
    "going",
    "specify",
    "row",
    "3",
    "row",
    "2",
    "hope",
    "clear",
    "fields",
    "confirmed",
    "fifth",
    "row",
    "sixth",
    "row",
    "recovered",
    "seventh",
    "row",
    "fifth",
    "sixth",
    "seventh",
    "key",
    "pretty",
    "interesting",
    "key",
    "time",
    "key",
    "see",
    "time",
    "column",
    "outside",
    "fields",
    "add",
    "key",
    "called",
    "time",
    "use",
    "observation",
    "date",
    "present",
    "row",
    "1",
    "column",
    "see",
    "observation",
    "date",
    "given",
    "row",
    "1",
    "column",
    "form",
    "string",
    "data",
    "convert",
    "timestamp",
    "format",
    "possible",
    "help",
    "date",
    "time",
    "python",
    "library",
    "convert",
    "utc",
    "timestamp",
    "line",
    "code",
    "really",
    "takes",
    "time",
    "component",
    "string",
    "format",
    "particular",
    "format",
    "month",
    "date",
    "yeah",
    "format",
    "going",
    "present",
    "percentage",
    "front",
    "slash",
    "percentage",
    "slash",
    "percentage",
    "month",
    "date",
    "year",
    "hope",
    "clear",
    "quit",
    "execute",
    "chord",
    "see",
    "15",
    "000",
    "rows",
    "eight",
    "columns",
    "done",
    "send",
    "message",
    "okay",
    "going",
    "clear",
    "screen",
    "cases",
    "restart",
    "grafana",
    "server",
    "data",
    "incorporated",
    "application",
    "else",
    "could",
    "check",
    "databases",
    "going",
    "check",
    "measurements",
    "see",
    "covid",
    "metric",
    "present",
    "select",
    "start",
    "covid",
    "metric",
    "going",
    "limit",
    "20",
    "show",
    "time",
    "confirmed",
    "cases",
    "country",
    "debts",
    "recovered",
    "state",
    "okay",
    "clear",
    "get",
    "back",
    "dashboard",
    "create",
    "new",
    "panel",
    "going",
    "name",
    "panel",
    "india",
    "okay",
    "going",
    "going",
    "select",
    "going",
    "select",
    "influx",
    "db1",
    "database",
    "going",
    "select",
    "metric",
    "going",
    "specify",
    "country",
    "going",
    "specify",
    "india",
    "field",
    "going",
    "add",
    "confirmed",
    "debts",
    "going",
    "add",
    "another",
    "field",
    "recovered",
    "okay",
    "want",
    "show",
    "legend",
    "choose",
    "going",
    "show",
    "legend",
    "save",
    "apply",
    "see",
    "bar",
    "graph",
    "important",
    "thing",
    "specify",
    "time",
    "sometimes",
    "today",
    "know",
    "default",
    "data",
    "last",
    "year",
    "specify",
    "data",
    "last",
    "one",
    "year",
    "graph",
    "eventually",
    "display",
    "going",
    "apply",
    "going",
    "shift",
    "world",
    "map",
    "going",
    "stretch",
    "okay",
    "looks",
    "fine",
    "going",
    "make",
    "gorgeous",
    "add",
    "new",
    "panel",
    "select",
    "influx",
    "db1",
    "measurement",
    "metric",
    "country",
    "equal",
    "india",
    "okay",
    "field",
    "value",
    "right",
    "confirmed",
    "going",
    "name",
    "confirmed",
    "cases",
    "india",
    "okay",
    "want",
    "display",
    "panel",
    "background",
    "going",
    "let",
    "displayed",
    "background",
    "going",
    "select",
    "gorge",
    "okay",
    "great",
    "confirmed",
    "cases",
    "want",
    "yellow",
    "color",
    "want",
    "color",
    "going",
    "change",
    "threshold",
    "color",
    "yellow",
    "going",
    "apply",
    "okay",
    "great",
    "gon",
    "na",
    "add",
    "another",
    "panel",
    "time",
    "going",
    "depths",
    "going",
    "select",
    "gauge",
    "gon",
    "na",
    "rename",
    "panel",
    "title",
    "death",
    "cases",
    "india",
    "already",
    "see",
    "time",
    "ranges",
    "last",
    "one",
    "year",
    "great",
    "already",
    "red",
    "want",
    "death",
    "cases",
    "represented",
    "red",
    "going",
    "apply",
    "gon",
    "na",
    "shift",
    "resize",
    "okay",
    "great",
    "last",
    "one",
    "recovered",
    "cases",
    "right",
    "going",
    "work",
    "going",
    "select",
    "measurement",
    "covet",
    "metric",
    "country",
    "equal",
    "india",
    "field",
    "value",
    "recovered",
    "okay",
    "great",
    "going",
    "change",
    "threshold",
    "green",
    "okay",
    "great",
    "everything",
    "looks",
    "fine",
    "change",
    "okay",
    "gon",
    "na",
    "apply",
    "gon",
    "na",
    "reposition",
    "looks",
    "okay",
    "want",
    "move",
    "pull",
    "world",
    "map",
    "pull",
    "cases",
    "see",
    "confirmed",
    "cases",
    "death",
    "cases",
    "recovered",
    "cases",
    "mean",
    "value",
    "using",
    "new",
    "panel",
    "going",
    "represent",
    "four",
    "states",
    "going",
    "select",
    "measurements",
    "go",
    "metric",
    "state",
    "equal",
    "maharashtra",
    "field",
    "value",
    "equal",
    "confirmed",
    "going",
    "add",
    "field",
    "values",
    "deaths",
    "recovered",
    "okay",
    "wait",
    "looks",
    "fine",
    "gon",
    "na",
    "name",
    "okay",
    "gon",
    "na",
    "represent",
    "graph",
    "okay",
    "want",
    "display",
    "without",
    "background",
    "gon",
    "na",
    "shift",
    "much",
    "okay",
    "looks",
    "okay",
    "gon",
    "na",
    "make",
    "three",
    "states",
    "metric",
    "state",
    "equal",
    "karnataka",
    "field",
    "value",
    "confirmed",
    "deaths",
    "finally",
    "recovery",
    "okay",
    "karnataka",
    "going",
    "name",
    "want",
    "display",
    "without",
    "background",
    "looks",
    "neat",
    "clean",
    "one",
    "thing",
    "could",
    "could",
    "add",
    "alias",
    "want",
    "graph",
    "represented",
    "properly",
    "add",
    "earlier",
    "going",
    "add",
    "finally",
    "add",
    "recovered",
    "okay",
    "looks",
    "great",
    "also",
    "gon",
    "na",
    "add",
    "alias",
    "maharashtra",
    "state",
    "confirmed",
    "deaths",
    "finally",
    "recovered",
    "okay",
    "apply",
    "okay",
    "looks",
    "good",
    "two",
    "states",
    "work",
    "work",
    "west",
    "bengal",
    "confirmed",
    "going",
    "add",
    "alias",
    "going",
    "add",
    "another",
    "field",
    "give",
    "debts",
    "also",
    "give",
    "gon",
    "na",
    "add",
    "another",
    "field",
    "recovered",
    "try",
    "recovered",
    "okay",
    "gon",
    "na",
    "add",
    "west",
    "bengal",
    "display",
    "without",
    "background",
    "apply",
    "finally",
    "last",
    "panel",
    "going",
    "work",
    "add",
    "delhi",
    "confirmed",
    "going",
    "add",
    "alias",
    "confirmed",
    "going",
    "add",
    "two",
    "fields",
    "sure",
    "must",
    "much",
    "familiar",
    "works",
    "okay",
    "going",
    "display",
    "without",
    "background",
    "going",
    "name",
    "panel",
    "deli",
    "guys",
    "easy",
    "tutorial",
    "easy",
    "use",
    "grafana",
    "world",
    "map",
    "analysis",
    "india",
    "confirmed",
    "cases",
    "also",
    "confirmed",
    "death",
    "recovery",
    "cases",
    "represented",
    "terms",
    "cages",
    "also",
    "represent",
    "state",
    "analysis",
    "terms",
    "graph",
    "want",
    "change",
    "name",
    "dashboard",
    "simply",
    "go",
    "dashboard",
    "settings",
    "change",
    "whatever",
    "want",
    "going",
    "say",
    "analysis",
    "india",
    "okay",
    "going",
    "save",
    "dashboard",
    "okay",
    "great",
    "next",
    "part",
    "going",
    "learn",
    "little",
    "bit",
    "variables",
    "moving",
    "last",
    "part",
    "session",
    "going",
    "learn",
    "grafana",
    "variables",
    "new",
    "programming",
    "coding",
    "must",
    "much",
    "aware",
    "variables",
    "placeholder",
    "value",
    "right",
    "use",
    "variables",
    "metric",
    "queries",
    "also",
    "panel",
    "titles",
    "variables",
    "grafana",
    "give",
    "ability",
    "create",
    "interactive",
    "dynamic",
    "dashboards",
    "let",
    "us",
    "go",
    "ahead",
    "check",
    "happens",
    "back",
    "terminal",
    "going",
    "type",
    "flux",
    "instead",
    "hard",
    "coding",
    "things",
    "like",
    "server",
    "application",
    "sensor",
    "names",
    "metric",
    "queries",
    "use",
    "variables",
    "place",
    "move",
    "ahead",
    "going",
    "use",
    "database",
    "going",
    "write",
    "query",
    "show",
    "tag",
    "values",
    "key",
    "equal",
    "country",
    "display",
    "list",
    "countries",
    "present",
    "database",
    "exactly",
    "variables",
    "exactly",
    "grafana",
    "allows",
    "multiple",
    "identical",
    "data",
    "sources",
    "servers",
    "right",
    "make",
    "one",
    "dashboard",
    "use",
    "variables",
    "change",
    "viewing",
    "really",
    "simplifies",
    "entire",
    "data",
    "going",
    "click",
    "logo",
    "going",
    "remember",
    "already",
    "mentioned",
    "click",
    "dashboard",
    "settings",
    "get",
    "option",
    "variables",
    "left",
    "hand",
    "side",
    "going",
    "click",
    "variables",
    "going",
    "add",
    "new",
    "variable",
    "name",
    "variable",
    "whatever",
    "like",
    "name",
    "covid",
    "countries",
    "rules",
    "learned",
    "syntax",
    "rules",
    "apply",
    "variables",
    "also",
    "applies",
    "grafana",
    "type",
    "query",
    "also",
    "use",
    "constants",
    "data",
    "sources",
    "systems",
    "anything",
    "like",
    "going",
    "type",
    "query",
    "right",
    "going",
    "use",
    "data",
    "source",
    "influx",
    "db1",
    "gon",
    "na",
    "know",
    "type",
    "query",
    "scroll",
    "show",
    "preview",
    "values",
    "right",
    "values",
    "shown",
    "add",
    "variable",
    "display",
    "dashboard",
    "simple",
    "particular",
    "values",
    "like",
    "display",
    "values",
    "really",
    "allows",
    "know",
    "simplify",
    "data",
    "visualize",
    "represent",
    "grafana",
    "dashboards",
    "iot",
    "sensors",
    "know",
    "want",
    "analyze",
    "systems",
    "performance",
    "simplified",
    "variables",
    "going",
    "save",
    "use",
    "variables",
    "later",
    "session",
    "hope",
    "grafana",
    "variables",
    "easy",
    "understand",
    "come",
    "end",
    "today",
    "session",
    "hope",
    "great",
    "time",
    "understanding",
    "grafana",
    "hope",
    "grafana",
    "tutorial",
    "give",
    "brief",
    "overview",
    "works",
    "really",
    "get",
    "started",
    "grafana",
    "general",
    "like",
    "simple",
    "tutorial",
    "create",
    "many",
    "projects",
    "demos",
    "like",
    "really",
    "easy",
    "interesting",
    "foreign",
    "think",
    "history",
    "behind",
    "think",
    "major",
    "reasons",
    "affected",
    "growth",
    "selenium",
    "let",
    "look",
    "guys",
    "selenium",
    "originally",
    "developed",
    "jason",
    "huggins",
    "year",
    "2004",
    "internal",
    "tool",
    "working",
    "thoughtworks",
    "huggins",
    "later",
    "joined",
    "programmers",
    "testers",
    "thoughtworks",
    "try",
    "develop",
    "selenium",
    "rc",
    "tool",
    "developed",
    "year",
    "2004",
    "two",
    "developers",
    "namely",
    "jason",
    "huggins",
    "paul",
    "hammond",
    "open",
    "sourced",
    "year",
    "guys",
    "selenium",
    "rc",
    "first",
    "one",
    "found",
    "among",
    "web",
    "driver",
    "grid",
    "selenium",
    "id",
    "2005",
    "dan",
    "fabulous",
    "nelson",
    "sproul",
    "made",
    "offer",
    "accept",
    "series",
    "patches",
    "would",
    "transform",
    "selenium",
    "rc",
    "known",
    "today",
    "days",
    "call",
    "selenium",
    "web",
    "driver",
    "right",
    "dan",
    "fabulish",
    "nelson",
    "sprawl",
    "major",
    "reason",
    "giving",
    "us",
    "idea",
    "rc",
    "works",
    "correspondingly",
    "year",
    "2007",
    "huggins",
    "joined",
    "google",
    "also",
    "helped",
    "developing",
    "stabilization",
    "process",
    "rc",
    "time",
    "simon",
    "stewart",
    "thoughtworks",
    "developed",
    "superior",
    "browser",
    "automation",
    "tool",
    "called",
    "webdriver",
    "okay",
    "tool",
    "currently",
    "use",
    "also",
    "current",
    "version",
    "selenium",
    "using",
    "three",
    "recently",
    "2009",
    "september",
    "october",
    "think",
    "meeting",
    "conference",
    "related",
    "version",
    "release",
    "actually",
    "kind",
    "spoke",
    "new",
    "version",
    "selenium",
    "think",
    "releasing",
    "anytime",
    "soon",
    "yeah",
    "gave",
    "us",
    "hint",
    "yeah",
    "looking",
    "forward",
    "work",
    "selenium",
    "4",
    "well",
    "current",
    "version",
    "market",
    "selenium",
    "also",
    "year",
    "2009",
    "conference",
    "test",
    "automation",
    "conference",
    "people",
    "tried",
    "merge",
    "two",
    "products",
    "selenium",
    "rc",
    "selenium",
    "webdriver",
    "call",
    "new",
    "project",
    "called",
    "selenium",
    "second",
    "version",
    "used",
    "2005",
    "2010",
    "believe",
    "remember",
    "exact",
    "time",
    "span",
    "yeah",
    "selenium",
    "2",
    "released",
    "2008",
    "selenium",
    "grid",
    "developed",
    "pat",
    "light",
    "body",
    "history",
    "behind",
    "growth",
    "selenium",
    "see",
    "growth",
    "began",
    "2004",
    "officially",
    "released",
    "officially",
    "available",
    "people",
    "name",
    "selenium",
    "web",
    "driver",
    "took",
    "close",
    "five",
    "six",
    "years",
    "right",
    "exactly",
    "selenium",
    "came",
    "mainframe",
    "moving",
    "ahead",
    "let",
    "take",
    "look",
    "exactly",
    "selenium",
    "like",
    "mentioned",
    "selenium",
    "open",
    "source",
    "tool",
    "used",
    "automating",
    "tests",
    "carried",
    "web",
    "browsers",
    "also",
    "reframed",
    "way",
    "open",
    "source",
    "portable",
    "framework",
    "automating",
    "applications",
    "mainly",
    "applications",
    "tested",
    "across",
    "different",
    "browsers",
    "namely",
    "chrome",
    "firefox",
    "safari",
    "traditional",
    "ones",
    "tests",
    "also",
    "carried",
    "different",
    "os",
    "platforms",
    "windows",
    "mac",
    "linux",
    "selenium",
    "test",
    "scripts",
    "integrated",
    "tools",
    "test",
    "ng",
    "junit",
    "managing",
    "test",
    "cases",
    "chin",
    "rating",
    "reports",
    "also",
    "integrated",
    "maven",
    "jenkins",
    "docker",
    "achieve",
    "continuous",
    "testing",
    "exactly",
    "software",
    "testing",
    "automation",
    "testing",
    "required",
    "today",
    "world",
    "technology",
    "completely",
    "dominated",
    "machines",
    "behavior",
    "controlled",
    "software",
    "empowering",
    "machines",
    "behave",
    "exactly",
    "want",
    "answer",
    "call",
    "software",
    "testing",
    "automation",
    "testing",
    "end",
    "day",
    "application",
    "success",
    "rate",
    "going",
    "control",
    "business",
    "growth",
    "thing",
    "said",
    "even",
    "web",
    "applications",
    "businesses",
    "today",
    "completely",
    "dominated",
    "internet",
    "completely",
    "belongs",
    "internet",
    "exactly",
    "selenium",
    "moving",
    "let",
    "take",
    "look",
    "exactly",
    "selenium",
    "required",
    "tool",
    "major",
    "uses",
    "would",
    "say",
    "benefits",
    "using",
    "selenium",
    "easy",
    "automate",
    "testing",
    "across",
    "web",
    "applications",
    "suppose",
    "working",
    "testing",
    "software",
    "application",
    "application",
    "say",
    "find",
    "bug",
    "know",
    "resolve",
    "unless",
    "come",
    "across",
    "selenium",
    "selenium",
    "one",
    "tool",
    "acts",
    "like",
    "key",
    "success",
    "rate",
    "automating",
    "testing",
    "across",
    "web",
    "applications",
    "like",
    "really",
    "tedious",
    "task",
    "fulfilled",
    "using",
    "selenium",
    "also",
    "wide",
    "variety",
    "language",
    "support",
    "comfortable",
    "using",
    "c",
    "c",
    "plus",
    "plus",
    "c",
    "sharp",
    "considered",
    "basic",
    "languages",
    "right",
    "okay",
    "c",
    "sharp",
    "still",
    "c",
    "c",
    "plus",
    "plus",
    "java",
    "python",
    "right",
    "four",
    "languages",
    "like",
    "basic",
    "languages",
    "supported",
    "software",
    "apart",
    "four",
    "standard",
    "languages",
    "selenium",
    "also",
    "proudly",
    "supports",
    "ruby",
    "spark",
    "pearl",
    "many",
    "right",
    "talking",
    "implementing",
    "test",
    "cases",
    "like",
    "mentioned",
    "automating",
    "testing",
    "cases",
    "across",
    "different",
    "web",
    "applications",
    "browser",
    "easy",
    "task",
    "using",
    "selenium",
    "implement",
    "test",
    "cases",
    "easily",
    "also",
    "perform",
    "write",
    "test",
    "scripts",
    "different",
    "platforms",
    "like",
    "mac",
    "windows",
    "linux",
    "also",
    "one",
    "major",
    "reason",
    "go",
    "selenium",
    "easy",
    "understand",
    "open",
    "source",
    "open",
    "source",
    "pay",
    "version",
    "paid",
    "version",
    "easy",
    "understand",
    "explained",
    "simple",
    "terms",
    "normal",
    "human",
    "understand",
    "need",
    "selenium",
    "moving",
    "let",
    "understand",
    "major",
    "features",
    "selenium",
    "think",
    "guys",
    "understood",
    "exactly",
    "selenium",
    "supports",
    "testing",
    "across",
    "different",
    "platforms",
    "right",
    "also",
    "considered",
    "features",
    "apart",
    "talk",
    "notable",
    "information",
    "related",
    "selenium",
    "selenium",
    "considered",
    "leading",
    "testing",
    "platform",
    "helps",
    "testers",
    "record",
    "actions",
    "export",
    "reusable",
    "script",
    "easy",
    "use",
    "interface",
    "like",
    "already",
    "know",
    "supports",
    "operating",
    "systems",
    "browsers",
    "different",
    "programming",
    "languages",
    "right",
    "also",
    "apart",
    "also",
    "supports",
    "parallel",
    "test",
    "execution",
    "reduces",
    "time",
    "increases",
    "efficiency",
    "test",
    "cases",
    "also",
    "selenium",
    "requires",
    "fewer",
    "resources",
    "compared",
    "automation",
    "testing",
    "tools",
    "different",
    "plugin",
    "every",
    "test",
    "cases",
    "working",
    "right",
    "apart",
    "also",
    "something",
    "called",
    "selenium",
    "commands",
    "categorized",
    "terms",
    "different",
    "classes",
    "makes",
    "easier",
    "understand",
    "implement",
    "also",
    "selenium",
    "webdriver",
    "require",
    "server",
    "installation",
    "test",
    "scripts",
    "interact",
    "directly",
    "browser",
    "also",
    "notable",
    "features",
    "selenium",
    "moving",
    "let",
    "understand",
    "components",
    "namely",
    "four",
    "components",
    "guys",
    "something",
    "called",
    "selenium",
    "id",
    "selenium",
    "rc",
    "selenium",
    "webdriver",
    "selenium",
    "grid",
    "let",
    "understand",
    "detail",
    "talking",
    "selenium",
    "id",
    "selenium",
    "ide",
    "integrated",
    "development",
    "environment",
    "primarily",
    "record",
    "run",
    "tool",
    "test",
    "case",
    "developer",
    "uses",
    "develop",
    "selenium",
    "test",
    "cases",
    "selenium",
    "ide",
    "simple",
    "record",
    "playback",
    "kind",
    "tool",
    "comes",
    "firefox",
    "think",
    "also",
    "used",
    "chrome",
    "driver",
    "well",
    "used",
    "prototype",
    "testing",
    "test",
    "cases",
    "written",
    "ide",
    "exported",
    "many",
    "programming",
    "languages",
    "like",
    "ruby",
    "java",
    "python",
    "edit",
    "debug",
    "options",
    "along",
    "record",
    "also",
    "available",
    "ide",
    "also",
    "guys",
    "excellent",
    "tool",
    "beginners",
    "understand",
    "syntax",
    "selenium",
    "webdriver",
    "also",
    "considered",
    "simplest",
    "framework",
    "selenium",
    "suite",
    "easiest",
    "learn",
    "guys",
    "like",
    "mentioned",
    "firefox",
    "plugin",
    "easily",
    "install",
    "system",
    "exactly",
    "selenium",
    "ide",
    "used",
    "talking",
    "selenium",
    "rc",
    "selenium",
    "rc",
    "selenium",
    "remote",
    "control",
    "first",
    "tool",
    "selenium",
    "suite",
    "known",
    "javascript",
    "executor",
    "rc",
    "tool",
    "made",
    "selenium",
    "famous",
    "market",
    "credits",
    "selenium",
    "masterpiece",
    "selenium",
    "famous",
    "around",
    "globe",
    "selenium",
    "rc",
    "first",
    "tool",
    "provided",
    "support",
    "multiple",
    "programming",
    "languages",
    "also",
    "supported",
    "almost",
    "major",
    "vendors",
    "browsers",
    "like",
    "firefox",
    "chrome",
    "internet",
    "explorer",
    "first",
    "version",
    "called",
    "selenium",
    "1",
    "followed",
    "selenium",
    "2",
    "3",
    "think",
    "expecting",
    "four",
    "well",
    "market",
    "also",
    "using",
    "rc",
    "perform",
    "cross",
    "browser",
    "testing",
    "right",
    "selenium",
    "rc",
    "moving",
    "ahead",
    "let",
    "understand",
    "exactly",
    "selenium",
    "webdriver",
    "okay",
    "talking",
    "selenium",
    "webdrivers",
    "selenium",
    "webdriver",
    "first",
    "testing",
    "framework",
    "could",
    "control",
    "browser",
    "os",
    "level",
    "contrast",
    "ide",
    "selenium",
    "driver",
    "provides",
    "program",
    "farming",
    "interface",
    "create",
    "execute",
    "test",
    "cases",
    "test",
    "cases",
    "written",
    "way",
    "web",
    "elements",
    "web",
    "page",
    "identified",
    "perform",
    "actions",
    "elements",
    "also",
    "selenium",
    "webdriver",
    "upgrade",
    "rc",
    "much",
    "faster",
    "faster",
    "makes",
    "direct",
    "calls",
    "browser",
    "need",
    "server",
    "client",
    "server",
    "rc",
    "hand",
    "needs",
    "rc",
    "server",
    "interact",
    "web",
    "browser",
    "browser",
    "driver",
    "application",
    "runs",
    "different",
    "kinds",
    "web",
    "drivers",
    "firefox",
    "driver",
    "popularly",
    "called",
    "geeko",
    "driver",
    "chrome",
    "driver",
    "internet",
    "explorer",
    "driver",
    "htm",
    "unit",
    "driver",
    "safari",
    "driver",
    "also",
    "supports",
    "air",
    "programming",
    "languages",
    "like",
    "java",
    "php",
    "perl",
    "ruby",
    "dot",
    "net",
    "also",
    "supports",
    "testing",
    "across",
    "different",
    "platforms",
    "like",
    "firefox",
    "chrome",
    "also",
    "cross",
    "browsing",
    "introduced",
    "version",
    "also",
    "guys",
    "selenium",
    "rc",
    "selenium",
    "webdriver",
    "together",
    "combined",
    "make",
    "call",
    "selenium",
    "2",
    "like",
    "mentioned",
    "wanted",
    "remind",
    "guys",
    "talking",
    "selenium",
    "grid",
    "exactly",
    "selenium",
    "grid",
    "selenium",
    "grid",
    "developed",
    "patrick",
    "lightbody",
    "initially",
    "called",
    "posted",
    "qa",
    "part",
    "version",
    "1",
    "selenium",
    "also",
    "used",
    "combination",
    "rc",
    "run",
    "test",
    "cases",
    "remote",
    "machines",
    "fact",
    "grid",
    "multiple",
    "test",
    "scripts",
    "executed",
    "time",
    "different",
    "machines",
    "parallel",
    "execution",
    "achieved",
    "easily",
    "help",
    "hub",
    "node",
    "architecture",
    "one",
    "machine",
    "assume",
    "role",
    "hub",
    "whereas",
    "others",
    "nodes",
    "okay",
    "still",
    "use",
    "guys",
    "grid",
    "used",
    "companies",
    "well",
    "works",
    "selenium",
    "webdriver",
    "rc",
    "however",
    "maintaining",
    "grid",
    "required",
    "browsers",
    "operating",
    "system",
    "tedious",
    "task",
    "multiple",
    "online",
    "platforms",
    "provide",
    "online",
    "selenium",
    "grid",
    "access",
    "run",
    "selenium",
    "automation",
    "script",
    "suite",
    "tools",
    "selenium",
    "components",
    "foreign",
    "installing",
    "latest",
    "version",
    "java",
    "must",
    "keep",
    "mind",
    "java",
    "version",
    "must",
    "8",
    "installing",
    "java",
    "official",
    "website",
    "oracle",
    "installation",
    "also",
    "configure",
    "java",
    "setting",
    "path",
    "system",
    "check",
    "whether",
    "java",
    "installed",
    "successfully",
    "let",
    "demo",
    "install",
    "java",
    "must",
    "go",
    "official",
    "website",
    "oracle",
    "see",
    "java",
    "downloads",
    "oracle",
    "click",
    "see",
    "java",
    "18",
    "java",
    "17",
    "available",
    "download",
    "software",
    "according",
    "operating",
    "system",
    "using",
    "windows",
    "let",
    "go",
    "windows",
    "install",
    "64",
    "installer",
    "let",
    "click",
    "one",
    "folk",
    "asked",
    "question",
    "let",
    "see",
    "okay",
    "asked",
    "whether",
    "install",
    "sizes",
    "yes",
    "according",
    "system",
    "compatibility",
    "install",
    "whichever",
    "feasible",
    "sizes",
    "install",
    "84",
    "installer",
    "hope",
    "understood",
    "kitty",
    "get",
    "downloads",
    "click",
    "executable",
    "file",
    "asks",
    "setup",
    "procedure",
    "asking",
    "installation",
    "process",
    "let",
    "click",
    "next",
    "path",
    "java",
    "jdk",
    "installed",
    "unless",
    "good",
    "reason",
    "change",
    "change",
    "else",
    "suggest",
    "keep",
    "hazard",
    "default",
    "folder",
    "let",
    "click",
    "next",
    "see",
    "java",
    "successfully",
    "installed",
    "let",
    "close",
    "window",
    "let",
    "us",
    "configure",
    "java",
    "let",
    "go",
    "file",
    "explorer",
    "let",
    "us",
    "find",
    "java",
    "installed",
    "go",
    "see",
    "folder",
    "program",
    "files",
    "see",
    "java",
    "folder",
    "double",
    "click",
    "see",
    "version",
    "installed",
    "latest",
    "stable",
    "version",
    "available",
    "today",
    "double",
    "click",
    "two",
    "find",
    "win",
    "folder",
    "main",
    "folder",
    "double",
    "click",
    "two",
    "see",
    "many",
    "files",
    "installed",
    "let",
    "us",
    "copy",
    "path",
    "folder",
    "copy",
    "path",
    "go",
    "settings",
    "find",
    "environment",
    "variables",
    "see",
    "edit",
    "system",
    "environment",
    "variables",
    "okay",
    "let",
    "click",
    "see",
    "environment",
    "variables",
    "click",
    "system",
    "variables",
    "change",
    "path",
    "edited",
    "whole",
    "system",
    "see",
    "path",
    "click",
    "add",
    "new",
    "paste",
    "copied",
    "path",
    "click",
    "ok",
    "let",
    "check",
    "whether",
    "java",
    "installed",
    "properly",
    "let",
    "go",
    "command",
    "prompt",
    "let",
    "type",
    "java",
    "space",
    "hyphen",
    "version",
    "check",
    "version",
    "installed",
    "yeah",
    "see",
    "installed",
    "let",
    "check",
    "java",
    "c",
    "see",
    "java",
    "installed",
    "successfully",
    "java",
    "packages",
    "successfully",
    "installed",
    "java",
    "let",
    "install",
    "second",
    "prerequisite",
    "eclipse",
    "editor",
    "see",
    "first",
    "install",
    "download",
    "eclipse",
    "official",
    "website",
    "get",
    "zip",
    "file",
    "installed",
    "extract",
    "zipper",
    "file",
    "running",
    "application",
    "let",
    "see",
    "demo",
    "eclipse",
    "download",
    "go",
    "official",
    "website",
    "let",
    "click",
    "link",
    "see",
    "eclipse",
    "ide",
    "2022",
    "download",
    "last",
    "button",
    "download",
    "might",
    "take",
    "minutes",
    "executable",
    "file",
    "downloaded",
    "click",
    "okay",
    "see",
    "eclipse",
    "installer",
    "installed",
    "give",
    "options",
    "click",
    "want",
    "work",
    "java",
    "codes",
    "want",
    "become",
    "java",
    "developer",
    "work",
    "codes",
    "click",
    "many",
    "options",
    "use",
    "c",
    "c",
    "plus",
    "plus",
    "feasible",
    "php2",
    "session",
    "using",
    "java",
    "developers",
    "click",
    "install",
    "click",
    "install",
    "let",
    "wait",
    "till",
    "gets",
    "installed",
    "installation",
    "might",
    "also",
    "ask",
    "agreement",
    "also",
    "agree",
    "policies",
    "make",
    "sure",
    "checked",
    "buttons",
    "also",
    "important",
    "create",
    "shortcut",
    "desktop",
    "want",
    "create",
    "shortcut",
    "desktop",
    "click",
    "uncheck",
    "okay",
    "see",
    "installation",
    "completed",
    "successfully",
    "let",
    "launch",
    "asking",
    "workspace",
    "want",
    "keep",
    "default",
    "keep",
    "unless",
    "good",
    "reason",
    "change",
    "case",
    "keep",
    "launch",
    "see",
    "editor",
    "opened",
    "want",
    "create",
    "new",
    "java",
    "project",
    "click",
    "create",
    "new",
    "java",
    "project",
    "fill",
    "name",
    "project",
    "name",
    "create",
    "packages",
    "classes",
    "etc",
    "shown",
    "session",
    "worry",
    "stay",
    "tuned",
    "successfully",
    "installed",
    "prerequisite",
    "java",
    "eclipse",
    "main",
    "concept",
    "selenium",
    "webdriver",
    "come",
    "let",
    "see",
    "install",
    "first",
    "main",
    "thing",
    "see",
    "latest",
    "table",
    "version",
    "point",
    "time",
    "stable",
    "version",
    "see",
    "latest",
    "version",
    "whenever",
    "install",
    "next",
    "thing",
    "see",
    "browser",
    "driver",
    "working",
    "selenium",
    "browser",
    "drivers",
    "execute",
    "code",
    "selenium",
    "scripts",
    "need",
    "browser",
    "drivers",
    "finally",
    "also",
    "see",
    "configuration",
    "selenium",
    "eclipse",
    "let",
    "see",
    "demo",
    "go",
    "browser",
    "type",
    "selenium",
    "org",
    "get",
    "selenium",
    "official",
    "website",
    "click",
    "selenium",
    "see",
    "home",
    "page",
    "selenium",
    "click",
    "downloads",
    "see",
    "latest",
    "table",
    "version",
    "click",
    "jar",
    "file",
    "downloaded",
    "next",
    "thing",
    "download",
    "java",
    "client",
    "scroll",
    "get",
    "java",
    "client",
    "also",
    "version",
    "click",
    "downloading",
    "go",
    "file",
    "explorer",
    "go",
    "downloads",
    "creating",
    "folder",
    "c",
    "drive",
    "called",
    "selenium",
    "webdriver",
    "move",
    "jar",
    "file",
    "well",
    "java",
    "client",
    "see",
    "java",
    "client",
    "zipped",
    "file",
    "let",
    "unzip",
    "extract",
    "files",
    "see",
    "downloaded",
    "selenium",
    "server",
    "jar",
    "file",
    "well",
    "java",
    "client",
    "tool",
    "java",
    "client",
    "zipper",
    "file",
    "extracted",
    "also",
    "go",
    "c",
    "folder",
    "created",
    "selenium",
    "webdriver",
    "folder",
    "inside",
    "c",
    "folder",
    "copy",
    "files",
    "let",
    "copy",
    "go",
    "see",
    "folder",
    "see",
    "created",
    "selenium",
    "webdriver",
    "folder",
    "paste",
    "copy",
    "jar",
    "file",
    "okay",
    "installed",
    "files",
    "let",
    "go",
    "install",
    "browser",
    "driver",
    "using",
    "chrome",
    "browser",
    "install",
    "chrome",
    "driver",
    "let",
    "write",
    "chrome",
    "driver",
    "click",
    "first",
    "link",
    "check",
    "version",
    "using",
    "go",
    "menu",
    "click",
    "help",
    "google",
    "chrome",
    "see",
    "version",
    "onenote",
    "install",
    "chrome",
    "driver",
    "version",
    "reason",
    "checked",
    "let",
    "go",
    "official",
    "website",
    "let",
    "click",
    "version",
    "latest",
    "table",
    "version",
    "let",
    "click",
    "version",
    "click",
    "version",
    "need",
    "mine",
    "windows",
    "operating",
    "system",
    "linux",
    "mac",
    "install",
    "according",
    "install",
    "win",
    "said",
    "chrome",
    "driver",
    "zip",
    "file",
    "let",
    "extract",
    "copy",
    "extracted",
    "file",
    "go",
    "folder",
    "selenium",
    "files",
    "located",
    "let",
    "create",
    "folder",
    "called",
    "chrome",
    "driver",
    "paste",
    "chrome",
    "files",
    "inside",
    "folder",
    "okay",
    "set",
    "install",
    "selenium",
    "webdriver",
    "let",
    "see",
    "demo",
    "within",
    "small",
    "example",
    "let",
    "us",
    "go",
    "eclipse",
    "start",
    "coding",
    "small",
    "example",
    "okay",
    "let",
    "start",
    "new",
    "java",
    "project",
    "click",
    "create",
    "new",
    "java",
    "project",
    "let",
    "write",
    "project",
    "name",
    "selenium",
    "demo",
    "one",
    "make",
    "sure",
    "java",
    "sc",
    "minimum",
    "let",
    "finish",
    "created",
    "java",
    "project",
    "name",
    "let",
    "create",
    "package",
    "right",
    "click",
    "click",
    "new",
    "see",
    "package",
    "right",
    "click",
    "let",
    "write",
    "package",
    "name",
    "edureka",
    "write",
    "whichever",
    "name",
    "wish",
    "created",
    "package",
    "let",
    "create",
    "class",
    "click",
    "new",
    "class",
    "give",
    "class",
    "name",
    "selenium",
    "script",
    "forget",
    "click",
    "public",
    "static",
    "word",
    "mean",
    "important",
    "yeah",
    "see",
    "package",
    "name",
    "edureka",
    "class",
    "name",
    "selenium",
    "script",
    "public",
    "static",
    "void",
    "main",
    "let",
    "start",
    "writing",
    "code",
    "want",
    "chrome",
    "driver",
    "installed",
    "yeah",
    "include",
    "selenium",
    "files",
    "right",
    "click",
    "see",
    "build",
    "path",
    "right",
    "click",
    "configure",
    "build",
    "path",
    "see",
    "library",
    "click",
    "add",
    "external",
    "jar",
    "files",
    "added",
    "selenium",
    "jar",
    "files",
    "till",
    "let",
    "click",
    "jar",
    "file",
    "open",
    "apply",
    "close",
    "included",
    "referenced",
    "libraries",
    "let",
    "start",
    "writing",
    "code",
    "first",
    "want",
    "selenium",
    "drivers",
    "included",
    "let",
    "write",
    "system",
    "dot",
    "set",
    "property",
    "see",
    "straight",
    "properties",
    "write",
    "set",
    "property",
    "inside",
    "quotes",
    "write",
    "webdriver",
    "dot",
    "chrome",
    "dot",
    "driver",
    "give",
    "comma",
    "include",
    "chrome",
    "driver",
    "path",
    "let",
    "go",
    "file",
    "explorer",
    "go",
    "selenium",
    "webdriver",
    "folder",
    "see",
    "chrome",
    "driver",
    "folder",
    "double",
    "click",
    "see",
    "files",
    "copy",
    "path",
    "go",
    "editor",
    "paste",
    "please",
    "forget",
    "write",
    "chrome",
    "driver",
    "dot",
    "exe",
    "let",
    "close",
    "write",
    "web",
    "driver",
    "space",
    "driver",
    "equals",
    "new",
    "chrome",
    "drive",
    "closest",
    "see",
    "error",
    "hover",
    "chrome",
    "driver",
    "get",
    "quick",
    "fixes",
    "import",
    "chrome",
    "driver",
    "web",
    "driver",
    "import",
    "web",
    "drive",
    "expect",
    "output",
    "showed",
    "website",
    "give",
    "output",
    "website",
    "want",
    "get",
    "output",
    "website",
    "write",
    "driver",
    "dot",
    "get",
    "write",
    "website",
    "whichever",
    "want",
    "executed",
    "give",
    "edureka",
    "link",
    "next",
    "print",
    "title",
    "whichever",
    "comes",
    "tab",
    "print",
    "title",
    "system",
    "dot",
    "dot",
    "print",
    "ln",
    "driver",
    "dot",
    "get",
    "title",
    "close",
    "two",
    "automatically",
    "waiting",
    "browser",
    "write",
    "driver",
    "quit",
    "driver",
    "dot",
    "quit",
    "let",
    "run",
    "see",
    "run",
    "select",
    "folder",
    "saved",
    "see",
    "edureka",
    "page",
    "opened",
    "see",
    "courses",
    "browser",
    "got",
    "exited",
    "automatically",
    "also",
    "see",
    "title",
    "got",
    "printed",
    "tab",
    "final",
    "output",
    "got",
    "take",
    "code",
    "run",
    "see",
    "took",
    "code",
    "script",
    "browser",
    "stays",
    "long",
    "time",
    "unless",
    "close",
    "window",
    "browser",
    "close",
    "took",
    "code",
    "see",
    "website",
    "staying",
    "long",
    "time",
    "reason",
    "see",
    "title",
    "printed",
    "music",
    "let",
    "us",
    "look",
    "exactly",
    "arguments",
    "works",
    "nagos",
    "basically",
    "tool",
    "used",
    "continuous",
    "monitoring",
    "systems",
    "application",
    "services",
    "business",
    "processes",
    "etc",
    "devops",
    "culture",
    "right",
    "event",
    "failure",
    "nagias",
    "alert",
    "technical",
    "staff",
    "problem",
    "allowing",
    "begin",
    "remediation",
    "processes",
    "outages",
    "affect",
    "business",
    "processes",
    "end",
    "users",
    "customers",
    "hope",
    "getting",
    "point",
    "alert",
    "technical",
    "staff",
    "problem",
    "begin",
    "remediation",
    "processes",
    "outages",
    "affect",
    "business",
    "process",
    "end",
    "users",
    "customers",
    "right",
    "argue",
    "explain",
    "unseen",
    "infrastructure",
    "outage",
    "affect",
    "organization",
    "bottom",
    "line",
    "right",
    "let",
    "us",
    "focus",
    "diagram",
    "front",
    "screen",
    "naga",
    "basically",
    "runs",
    "server",
    "usually",
    "daemon",
    "service",
    "periodically",
    "runs",
    "plugins",
    "residing",
    "server",
    "basically",
    "contact",
    "hosts",
    "servers",
    "network",
    "internet",
    "one",
    "view",
    "status",
    "information",
    "using",
    "web",
    "interface",
    "also",
    "receive",
    "email",
    "sms",
    "notification",
    "something",
    "goes",
    "wrong",
    "right",
    "basically",
    "nagis",
    "damon",
    "behaves",
    "like",
    "scheduler",
    "runs",
    "certain",
    "scripts",
    "certain",
    "moments",
    "stores",
    "results",
    "scripts",
    "run",
    "scripts",
    "results",
    "change",
    "hope",
    "getting",
    "point",
    "right",
    "wondering",
    "plugins",
    "nothing",
    "compiled",
    "executables",
    "scripts",
    "pearls",
    "create",
    "shell",
    "script",
    "etc",
    "run",
    "command",
    "line",
    "check",
    "status",
    "host",
    "service",
    "nages",
    "uses",
    "results",
    "plugins",
    "determine",
    "current",
    "status",
    "host",
    "services",
    "network",
    "let",
    "us",
    "see",
    "various",
    "features",
    "nagios",
    "let",
    "take",
    "features",
    "one",
    "one",
    "pretty",
    "scalable",
    "secure",
    "manageable",
    "well",
    "good",
    "login",
    "database",
    "system",
    "automatically",
    "sends",
    "alerts",
    "saw",
    "detects",
    "network",
    "errors",
    "server",
    "crashes",
    "easy",
    "writing",
    "plugins",
    "write",
    "plugins",
    "right",
    "based",
    "requirement",
    "business",
    "need",
    "monitor",
    "business",
    "process",
    "id",
    "infrastructure",
    "single",
    "pass",
    "guys",
    "issues",
    "fixed",
    "automatically",
    "configured",
    "way",
    "definitely",
    "fix",
    "issues",
    "automatically",
    "also",
    "support",
    "implementing",
    "redundant",
    "monitoring",
    "hosts",
    "hope",
    "understood",
    "features",
    "many",
    "pretty",
    "attractive",
    "features",
    "argument",
    "popular",
    "features",
    "let",
    "us",
    "discuss",
    "architecture",
    "nagivist",
    "detail",
    "basically",
    "nagios",
    "server",
    "agent",
    "architecture",
    "right",
    "usually",
    "network",
    "naga",
    "server",
    "running",
    "host",
    "saw",
    "previous",
    "diagram",
    "right",
    "consider",
    "host",
    "naga",
    "server",
    "running",
    "host",
    "plugins",
    "interact",
    "local",
    "remote",
    "plugins",
    "interact",
    "local",
    "resources",
    "services",
    "also",
    "interact",
    "remote",
    "resources",
    "services",
    "hosts",
    "right",
    "plugins",
    "send",
    "information",
    "scheduler",
    "display",
    "gui",
    "right",
    "let",
    "repeat",
    "nagus",
    "built",
    "server",
    "agent",
    "architecture",
    "right",
    "usually",
    "argue",
    "server",
    "running",
    "host",
    "plugins",
    "interact",
    "local",
    "host",
    "services",
    "even",
    "remote",
    "hostess",
    "services",
    "right",
    "plugins",
    "send",
    "information",
    "scheduler",
    "argue",
    "process",
    "scheduler",
    "display",
    "web",
    "interface",
    "something",
    "goes",
    "wrong",
    "concerned",
    "teams",
    "notified",
    "via",
    "sms",
    "email",
    "right",
    "think",
    "covered",
    "quite",
    "lot",
    "theories",
    "let",
    "go",
    "ahead",
    "open",
    "sentivise",
    "virtual",
    "machine",
    "already",
    "installed",
    "nagios",
    "let",
    "open",
    "sentos",
    "virtual",
    "machine",
    "first",
    "centos",
    "virtual",
    "machine",
    "guys",
    "nagios",
    "dashboard",
    "looks",
    "like",
    "running",
    "port",
    "8000",
    "run",
    "wherever",
    "want",
    "explained",
    "installation",
    "video",
    "install",
    "notice",
    "lot",
    "options",
    "left",
    "hand",
    "side",
    "know",
    "go",
    "ahead",
    "play",
    "around",
    "get",
    "better",
    "idea",
    "let",
    "focus",
    "important",
    "ones",
    "map",
    "option",
    "right",
    "click",
    "see",
    "local",
    "host",
    "remote",
    "host",
    "well",
    "right",
    "nargis",
    "process",
    "monitoring",
    "localhost",
    "remote",
    "host",
    "remote",
    "host",
    "currently",
    "see",
    "like",
    "running",
    "showing",
    "basically",
    "looks",
    "like",
    "go",
    "ahead",
    "click",
    "host",
    "see",
    "hosts",
    "currently",
    "monitoring",
    "monitoring",
    "edureka",
    "localhost",
    "edureka",
    "basically",
    "remote",
    "server",
    "localhost",
    "currently",
    "inaugus",
    "server",
    "running",
    "right",
    "obviously",
    "server",
    "click",
    "services",
    "see",
    "services",
    "monitoring",
    "remote",
    "host",
    "monitoring",
    "cpu",
    "load",
    "ping",
    "ssh",
    "localhost",
    "monitoring",
    "current",
    "load",
    "current",
    "users",
    "http",
    "ping",
    "root",
    "partition",
    "ssh",
    "swap",
    "usage",
    "total",
    "processes",
    "add",
    "many",
    "services",
    "want",
    "change",
    "file",
    "going",
    "show",
    "later",
    "let",
    "us",
    "go",
    "back",
    "slides",
    "continue",
    "let",
    "give",
    "small",
    "recap",
    "things",
    "discussed",
    "first",
    "saw",
    "need",
    "continuous",
    "monitoring",
    "saw",
    "various",
    "reasons",
    "industries",
    "need",
    "continuous",
    "monitoring",
    "different",
    "traditional",
    "monitoring",
    "systems",
    "saw",
    "exactly",
    "continuous",
    "monitoring",
    "various",
    "phases",
    "involved",
    "implementing",
    "continuous",
    "monitoring",
    "strategy",
    "saw",
    "various",
    "continuous",
    "monitoring",
    "tools",
    "available",
    "market",
    "focused",
    "nagos",
    "saw",
    "arguments",
    "works",
    "architecture",
    "right",
    "going",
    "talk",
    "something",
    "called",
    "nrpe",
    "gives",
    "remote",
    "plugin",
    "executor",
    "basically",
    "used",
    "monitoring",
    "remote",
    "linux",
    "unix",
    "machines",
    "allow",
    "execute",
    "nagus",
    "plugins",
    "remote",
    "machines",
    "main",
    "reason",
    "allow",
    "arguments",
    "monitor",
    "local",
    "resources",
    "know",
    "like",
    "cpu",
    "load",
    "memory",
    "usage",
    "etc",
    "remote",
    "machines",
    "since",
    "public",
    "resources",
    "usually",
    "exposed",
    "external",
    "machines",
    "agent",
    "like",
    "nrp",
    "must",
    "installed",
    "remote",
    "linux",
    "unix",
    "machines",
    "even",
    "installed",
    "centos",
    "box",
    "able",
    "monitor",
    "remote",
    "linux",
    "host",
    "talking",
    "notice",
    "diagram",
    "basically",
    "check",
    "underscore",
    "nrp",
    "plugin",
    "residing",
    "local",
    "monitoring",
    "machine",
    "local",
    "monitoring",
    "machine",
    "saw",
    "right",
    "server",
    "check",
    "underscore",
    "rp",
    "plugin",
    "resides",
    "local",
    "monitoring",
    "machine",
    "nag",
    "us",
    "right",
    "one",
    "saw",
    "basically",
    "local",
    "machine",
    "say",
    "naga",
    "server",
    "right",
    "check",
    "underscore",
    "rp",
    "plugin",
    "resides",
    "particular",
    "machine",
    "nrp",
    "daymen",
    "see",
    "diagram",
    "runs",
    "remote",
    "machines",
    "remote",
    "linux",
    "unix",
    "machine",
    "case",
    "edureka",
    "remember",
    "since",
    "start",
    "machine",
    "right",
    "nrp",
    "daemon",
    "run",
    "particular",
    "machine",
    "secure",
    "socket",
    "layer",
    "ssl",
    "connection",
    "monitoring",
    "host",
    "remote",
    "host",
    "see",
    "diagram",
    "well",
    "ssl",
    "connection",
    "right",
    "checking",
    "disk",
    "space",
    "load",
    "http",
    "ftp",
    "remote",
    "services",
    "host",
    "right",
    "local",
    "resources",
    "services",
    "basically",
    "rpe",
    "works",
    "guys",
    "check",
    "underscore",
    "nrp",
    "plugin",
    "residing",
    "host",
    "machine",
    "nrp",
    "diamond",
    "running",
    "remote",
    "machine",
    "ssl",
    "connection",
    "right",
    "yeah",
    "ssl",
    "connection",
    "rp",
    "plugin",
    "basically",
    "helps",
    "us",
    "monitor",
    "remote",
    "machine",
    "works",
    "let",
    "look",
    "one",
    "interesting",
    "case",
    "study",
    "bitnetics",
    "found",
    "inaugus",
    "website",
    "want",
    "check",
    "go",
    "ahead",
    "check",
    "website",
    "well",
    "pretty",
    "cool",
    "case",
    "studies",
    "apart",
    "bitnatics",
    "also",
    "lot",
    "case",
    "studies",
    "website",
    "bit",
    "netix",
    "provides",
    "basically",
    "outsource",
    "management",
    "consulting",
    "small",
    "medium",
    "businesses",
    "right",
    "bidnetics",
    "got",
    "project",
    "supposed",
    "monitor",
    "online",
    "store",
    "retailer",
    "billion",
    "dollar",
    "annual",
    "revenue",
    "huge",
    "guys",
    "supposed",
    "know",
    "monitor",
    "store",
    "also",
    "needed",
    "ensure",
    "cart",
    "checkout",
    "functionality",
    "working",
    "fine",
    "also",
    "supposed",
    "check",
    "website",
    "deformation",
    "notify",
    "necessary",
    "staff",
    "anything",
    "went",
    "wrong",
    "right",
    "seems",
    "like",
    "easy",
    "task",
    "let",
    "us",
    "see",
    "problems",
    "bitnetics",
    "faced",
    "bitnetics",
    "hit",
    "roadblock",
    "upon",
    "realizing",
    "client",
    "data",
    "center",
    "located",
    "new",
    "jersey",
    "500",
    "miles",
    "away",
    "staff",
    "new",
    "york",
    "right",
    "distance",
    "500",
    "miles",
    "staff",
    "located",
    "data",
    "center",
    "let",
    "us",
    "see",
    "problems",
    "face",
    "two",
    "areas",
    "needed",
    "unique",
    "time",
    "comprehensive",
    "monitoring",
    "dev",
    "test",
    "broad",
    "environment",
    "platform",
    "right",
    "next",
    "challenge",
    "monitoring",
    "would",
    "hampered",
    "firewall",
    "restrictions",
    "different",
    "application",
    "sites",
    "functions",
    "etc",
    "think",
    "lot",
    "know",
    "firewalls",
    "basically",
    "sometimes",
    "nightmare",
    "right",
    "apart",
    "notifications",
    "sent",
    "client",
    "ignored",
    "mostly",
    "false",
    "positive",
    "right",
    "client",
    "bother",
    "even",
    "check",
    "notifications",
    "solution",
    "first",
    "solution",
    "thought",
    "adding",
    "ssh",
    "firewall",
    "rules",
    "network",
    "operation",
    "center",
    "personal",
    "equipment",
    "second",
    "analyzing",
    "web",
    "pages",
    "see",
    "problem",
    "deformation",
    "occurrences",
    "third",
    "important",
    "point",
    "converting",
    "notification",
    "nagos",
    "alerts",
    "problem",
    "saw",
    "false",
    "positive",
    "complete",
    "greatly",
    "removed",
    "escalation",
    "logic",
    "converting",
    "us",
    "notifications",
    "rgs",
    "alerts",
    "escalations",
    "specific",
    "time",
    "periods",
    "different",
    "groups",
    "right",
    "hope",
    "getting",
    "point",
    "configuring",
    "event",
    "handlers",
    "restart",
    "services",
    "notification",
    "basically",
    "fix",
    "90",
    "percent",
    "issues",
    "using",
    "naga",
    "score",
    "multiple",
    "servers",
    "noc",
    "facility",
    "nagus",
    "worker",
    "deployed",
    "application",
    "level",
    "direct",
    "access",
    "host",
    "whatever",
    "targets",
    "worker",
    "agent",
    "remote",
    "machine",
    "deployed",
    "application",
    "level",
    "direct",
    "access",
    "host",
    "master",
    "whatever",
    "want",
    "call",
    "implemented",
    "architecture",
    "production",
    "quality",
    "assurance",
    "staging",
    "development",
    "environments",
    "let",
    "see",
    "result",
    "dramatic",
    "reduction",
    "notifications",
    "thanks",
    "event",
    "handler",
    "new",
    "configuration",
    "increase",
    "uptime",
    "85",
    "percent",
    "annually",
    "98",
    "annually",
    "significant",
    "guys",
    "right",
    "saw",
    "dramatic",
    "reduction",
    "false",
    "positive",
    "escalations",
    "logic",
    "talking",
    "fourth",
    "point",
    "estimating",
    "need",
    "log",
    "multiple",
    "boxes",
    "change",
    "configuration",
    "files",
    "thanks",
    "naga",
    "configuration",
    "maintained",
    "central",
    "repository",
    "pushed",
    "automatically",
    "appropriate",
    "service",
    "fourth",
    "point",
    "estimating",
    "need",
    "log",
    "multiple",
    "boxes",
    "change",
    "configuration",
    "files",
    "happens",
    "inaugus",
    "configuration",
    "maintained",
    "central",
    "repository",
    "central",
    "master",
    "pushed",
    "automatically",
    "states",
    "servers",
    "slaves",
    "agents",
    "whatever",
    "want",
    "call",
    "result",
    "using",
    "nagos",
    "right",
    "time",
    "check",
    "demo",
    "monitoring",
    "couple",
    "services",
    "actually",
    "couple",
    "services",
    "remote",
    "linux",
    "machine",
    "nagios",
    "host",
    "showed",
    "right",
    "monitoring",
    "remote",
    "linux",
    "host",
    "called",
    "edureka",
    "monitoring",
    "like",
    "three",
    "four",
    "services",
    "add",
    "whatever",
    "want",
    "let",
    "show",
    "process",
    "installed",
    "nagus",
    "need",
    "order",
    "make",
    "sure",
    "remote",
    "host",
    "remote",
    "machine",
    "monitored",
    "inaugus",
    "host",
    "order",
    "execute",
    "demo",
    "going",
    "show",
    "must",
    "lamb",
    "stack",
    "system",
    "right",
    "linux",
    "apache",
    "mysql",
    "php",
    "going",
    "use",
    "center",
    "os",
    "7",
    "let",
    "quickly",
    "open",
    "sentos",
    "virtual",
    "machine",
    "proceed",
    "guys",
    "sentos",
    "virtual",
    "box",
    "already",
    "installed",
    "lagos",
    "told",
    "earlier",
    "well",
    "inaugus",
    "host",
    "running",
    "see",
    "nagus",
    "server",
    "running",
    "see",
    "dashboard",
    "front",
    "screen",
    "well",
    "right",
    "let",
    "quickly",
    "open",
    "terminal",
    "first",
    "let",
    "clear",
    "screen",
    "let",
    "show",
    "installed",
    "argos",
    "path",
    "right",
    "notice",
    "front",
    "screen",
    "user",
    "local",
    "nag",
    "os",
    "clear",
    "screen",
    "show",
    "directories",
    "inside",
    "go",
    "inside",
    "hc",
    "directory",
    "inside",
    "gon",
    "na",
    "go",
    "inside",
    "objects",
    "directory",
    "right",
    "basically",
    "want",
    "add",
    "command",
    "example",
    "want",
    "add",
    "check",
    "underscore",
    "nrp",
    "command",
    "going",
    "monitor",
    "remote",
    "linux",
    "host",
    "remember",
    "diagram",
    "right",
    "going",
    "going",
    "add",
    "particular",
    "command",
    "already",
    "done",
    "let",
    "show",
    "looks",
    "type",
    "g",
    "editor",
    "choose",
    "whatever",
    "editor",
    "like",
    "go",
    "inside",
    "file",
    "let",
    "open",
    "various",
    "commands",
    "talking",
    "look",
    "commands",
    "basically",
    "notify",
    "host",
    "email",
    "anything",
    "goes",
    "anything",
    "goes",
    "wrong",
    "host",
    "service",
    "basically",
    "notify",
    "problem",
    "service",
    "email",
    "check",
    "host",
    "machine",
    "alive",
    "mean",
    "running",
    "command",
    "basically",
    "check",
    "disk",
    "space",
    "like",
    "local",
    "disk",
    "load",
    "right",
    "see",
    "things",
    "swap",
    "ftp",
    "added",
    "commands",
    "look",
    "commands",
    "mentioned",
    "last",
    "command",
    "see",
    "added",
    "manually",
    "commands",
    "install",
    "get",
    "default",
    "nrp",
    "check",
    "underscore",
    "nrp",
    "highlighting",
    "right",
    "cursor",
    "something",
    "added",
    "order",
    "make",
    "sure",
    "monitor",
    "remote",
    "linux",
    "host",
    "let",
    "go",
    "ahead",
    "save",
    "right",
    "let",
    "clear",
    "screen",
    "go",
    "back",
    "give",
    "us",
    "directory",
    "let",
    "clear",
    "screen",
    "basically",
    "allow",
    "use",
    "check",
    "underscore",
    "rp",
    "command",
    "argue",
    "service",
    "definitions",
    "right",
    "need",
    "update",
    "nrp",
    "configuration",
    "file",
    "use",
    "favorite",
    "editor",
    "open",
    "find",
    "particular",
    "directory",
    "first",
    "hit",
    "ls",
    "check",
    "etsy",
    "directory",
    "notice",
    "file",
    "right",
    "already",
    "added",
    "go",
    "ahead",
    "show",
    "help",
    "g",
    "edit",
    "use",
    "whatever",
    "editor",
    "prefer",
    "need",
    "find",
    "allowed",
    "host",
    "directive",
    "add",
    "private",
    "ip",
    "address",
    "nagos",
    "server",
    "comma",
    "delimited",
    "list",
    "scroll",
    "find",
    "something",
    "called",
    "loud",
    "host",
    "right",
    "add",
    "comma",
    "start",
    "ip",
    "address",
    "machine",
    "want",
    "monitor",
    "current",
    "let",
    "open",
    "going",
    "use",
    "sudo",
    "privileges",
    "allowed",
    "host",
    "directory",
    "comma",
    "ip",
    "address",
    "host",
    "want",
    "monitor",
    "go",
    "ahead",
    "save",
    "come",
    "back",
    "clear",
    "terminal",
    "save",
    "exit",
    "configures",
    "rp",
    "accept",
    "requests",
    "nagos",
    "server",
    "private",
    "ip",
    "address",
    "right",
    "go",
    "ahead",
    "restart",
    "nrp",
    "put",
    "changes",
    "effect",
    "server",
    "need",
    "create",
    "configuration",
    "file",
    "remote",
    "hosts",
    "monitor",
    "mentioning",
    "well",
    "going",
    "find",
    "hc",
    "servers",
    "directory",
    "let",
    "go",
    "ahead",
    "open",
    "let",
    "go",
    "servers",
    "directory",
    "notice",
    "file",
    "basically",
    "host",
    "monitoring",
    "right",
    "go",
    "ahead",
    "show",
    "written",
    "basically",
    "first",
    "done",
    "defined",
    "host",
    "basically",
    "linux",
    "server",
    "name",
    "server",
    "eddy",
    "raker",
    "allies",
    "whatever",
    "want",
    "give",
    "ip",
    "address",
    "maximum",
    "check",
    "attempts",
    "periods",
    "want",
    "check",
    "24",
    "7",
    "notification",
    "interval",
    "mentioned",
    "notification",
    "period",
    "basically",
    "hosts",
    "host",
    "services",
    "going",
    "monitor",
    "want",
    "monitor",
    "generic",
    "services",
    "like",
    "ping",
    "want",
    "monitor",
    "ssh",
    "going",
    "monitor",
    "cpu",
    "load",
    "well",
    "three",
    "services",
    "monitoring",
    "find",
    "hc",
    "servers",
    "directory",
    "create",
    "proper",
    "configuration",
    "file",
    "hosts",
    "want",
    "monitor",
    "let",
    "clear",
    "terminal",
    "right",
    "hope",
    "understood",
    "guys",
    "questions",
    "doubts",
    "go",
    "ahead",
    "mention",
    "comment",
    "section",
    "show",
    "remote",
    "machine",
    "well",
    "let",
    "open",
    "remote",
    "machine",
    "guys",
    "already",
    "installed",
    "nrp",
    "going",
    "show",
    "restart",
    "rp",
    "system",
    "ctl",
    "restart",
    "nrpe",
    "dot",
    "service",
    "uh",
    "go",
    "asking",
    "password",
    "given",
    "nrp",
    "service",
    "started",
    "actually",
    "restarted",
    "already",
    "started",
    "well",
    "let",
    "show",
    "nag",
    "years",
    "dashboard",
    "looks",
    "like",
    "server",
    "dashboard",
    "go",
    "host",
    "tab",
    "see",
    "monitoring",
    "two",
    "host",
    "edureka",
    "localhost",
    "edrica",
    "one",
    "showed",
    "running",
    "right",
    "go",
    "ahead",
    "check",
    "map",
    "legacy",
    "map",
    "view",
    "well",
    "basically",
    "tells",
    "editor",
    "remote",
    "host",
    "also",
    "various",
    "services",
    "monitoring",
    "remember",
    "monitoring",
    "cpu",
    "load",
    "ping",
    "ssh",
    "see",
    "well",
    "foreign",
    "music",
    "devops",
    "exactly",
    "understand",
    "need",
    "understand",
    "azure",
    "understand",
    "azeri",
    "would",
    "using",
    "particular",
    "analogy",
    "talk",
    "power",
    "consumption",
    "fairly",
    "simple",
    "mean",
    "consume",
    "electricity",
    "pay",
    "amount",
    "units",
    "consumed",
    "used",
    "maybe",
    "100",
    "units",
    "charged",
    "100",
    "units",
    "important",
    "part",
    "concerned",
    "electricity",
    "come",
    "maintains",
    "generated",
    "brought",
    "house",
    "stuff",
    "like",
    "mean",
    "even",
    "know",
    "things",
    "concern",
    "done",
    "mean",
    "even",
    "knowledge",
    "still",
    "survive",
    "well",
    "similar",
    "azure",
    "cloud",
    "service",
    "provider",
    "market",
    "let",
    "tell",
    "talk",
    "software",
    "development",
    "normally",
    "take",
    "care",
    "lot",
    "things",
    "like",
    "building",
    "software",
    "building",
    "infrastructure",
    "first",
    "place",
    "servers",
    "place",
    "making",
    "sure",
    "servers",
    "resources",
    "monitored",
    "maintained",
    "problem",
    "things",
    "wo",
    "able",
    "focus",
    "business",
    "wish",
    "focus",
    "business",
    "probably",
    "might",
    "need",
    "hire",
    "quite",
    "people",
    "plus",
    "servers",
    "stuff",
    "like",
    "actually",
    "costly",
    "could",
    "tell",
    "could",
    "actually",
    "go",
    "ahead",
    "rent",
    "services",
    "like",
    "rented",
    "electricity",
    "paid",
    "units",
    "used",
    "would",
    "nice",
    "well",
    "azure",
    "cloud",
    "service",
    "provider",
    "actually",
    "lets",
    "rent",
    "compute",
    "storage",
    "database",
    "analytics",
    "number",
    "services",
    "pay",
    "services",
    "use",
    "time",
    "duration",
    "use",
    "services",
    "analogy",
    "similar",
    "electricity",
    "consumed",
    "used",
    "hope",
    "idea",
    "clear",
    "azure",
    "give",
    "little",
    "specific",
    "definition",
    "popular",
    "cloud",
    "service",
    "provider",
    "provides",
    "services",
    "talked",
    "one",
    "best",
    "market",
    "microsoft",
    "product",
    "know",
    "microsoft",
    "big",
    "fish",
    "talk",
    "software",
    "market",
    "azure",
    "one",
    "leading",
    "cloud",
    "service",
    "providers",
    "second",
    "aws",
    "actually",
    "catching",
    "aws",
    "good",
    "way",
    "aws",
    "also",
    "devops",
    "approach",
    "already",
    "mentioned",
    "azure",
    "much",
    "neck",
    "neck",
    "aws",
    "also",
    "devops",
    "services",
    "services",
    "provided",
    "azure",
    "good",
    "talk",
    "comparing",
    "aws",
    "devops",
    "services",
    "let",
    "try",
    "understand",
    "azure",
    "devops",
    "services",
    "go",
    "well",
    "let",
    "take",
    "look",
    "components",
    "azure",
    "offer",
    "well",
    "talk",
    "azure",
    "components",
    "major",
    "components",
    "azure",
    "offer",
    "azure",
    "pipelines",
    "azure",
    "boards",
    "artifacts",
    "azure",
    "repos",
    "azure",
    "test",
    "plans",
    "remember",
    "definition",
    "devops",
    "talked",
    "continuous",
    "integration",
    "continuous",
    "deployment",
    "let",
    "throw",
    "light",
    "exactly",
    "talk",
    "continuous",
    "integration",
    "continuous",
    "deployment",
    "mean",
    "wish",
    "continuously",
    "build",
    "softwares",
    "continuously",
    "deploy",
    "end",
    "users",
    "releases",
    "changes",
    "need",
    "done",
    "implemented",
    "right",
    "away",
    "latest",
    "version",
    "available",
    "people",
    "working",
    "software",
    "mean",
    "actually",
    "go",
    "ahead",
    "build",
    "particular",
    "software",
    "like",
    "15",
    "people",
    "working",
    "make",
    "changes",
    "software",
    "change",
    "given",
    "everyone",
    "right",
    "continuous",
    "integration",
    "deployment",
    "comes",
    "picture",
    "aims",
    "keeping",
    "everyone",
    "page",
    "ensuring",
    "software",
    "development",
    "happens",
    "faster",
    "rate",
    "something",
    "called",
    "azure",
    "pipelines",
    "talk",
    "continuous",
    "integration",
    "deployment",
    "need",
    "line",
    "maybe",
    "tunnel",
    "actually",
    "carry",
    "processes",
    "right",
    "tunnel",
    "line",
    "pipeline",
    "something",
    "provided",
    "azure",
    "pipelines",
    "mean",
    "actually",
    "go",
    "ahead",
    "build",
    "kind",
    "software",
    "use",
    "different",
    "kinds",
    "platforms",
    "azure",
    "supports",
    "say",
    "azure",
    "supports",
    "well",
    "azure",
    "supports",
    "many",
    "platforms",
    "believe",
    "hardly",
    "software",
    "framework",
    "wish",
    "use",
    "using",
    "microsoft",
    "azure",
    "building",
    "pipelines",
    "microsoft",
    "azure",
    "becomes",
    "easy",
    "talk",
    "building",
    "pipelines",
    "general",
    "simple",
    "easy",
    "implement",
    "kind",
    "process",
    "click",
    "survey",
    "talk",
    "microsoft",
    "azure",
    "pipeline",
    "ready",
    "integrating",
    "different",
    "softwares",
    "becomes",
    "easy",
    "building",
    "software",
    "might",
    "maybe",
    "hundreds",
    "people",
    "working",
    "software",
    "case",
    "need",
    "software",
    "something",
    "would",
    "let",
    "keep",
    "track",
    "things",
    "help",
    "plan",
    "better",
    "help",
    "everyone",
    "similar",
    "pages",
    "help",
    "keep",
    "track",
    "things",
    "azure",
    "boards",
    "come",
    "picture",
    "readily",
    "integrates",
    "power",
    "bi",
    "people",
    "know",
    "power",
    "bi",
    "data",
    "visualization",
    "business",
    "intelligence",
    "tool",
    "one",
    "best",
    "market",
    "neck",
    "neck",
    "tableau",
    "great",
    "tool",
    "microsoft",
    "azure",
    "ports",
    "let",
    "integrate",
    "power",
    "bi",
    "azure",
    "devops",
    "environment",
    "actually",
    "go",
    "ahead",
    "take",
    "look",
    "data",
    "real",
    "time",
    "various",
    "graphs",
    "charts",
    "assessing",
    "way",
    "keep",
    "track",
    "things",
    "becomes",
    "lot",
    "easier",
    "next",
    "azure",
    "artifacts",
    "lets",
    "take",
    "consideration",
    "various",
    "packages",
    "feeds",
    "generate",
    "say",
    "private",
    "public",
    "resources",
    "apart",
    "whether",
    "marvin",
    "whether",
    "news",
    "whatever",
    "everything",
    "taken",
    "care",
    "azure",
    "artifacts",
    "talking",
    "continuous",
    "inter",
    "duration",
    "deployment",
    "repositories",
    "become",
    "important",
    "microsoft",
    "azure",
    "lets",
    "kind",
    "repositories",
    "take",
    "look",
    "azure",
    "reports",
    "almost",
    "everything",
    "needed",
    "deal",
    "repositories",
    "building",
    "software",
    "needs",
    "tested",
    "azure",
    "test",
    "plans",
    "testing",
    "ensures",
    "full",
    "coverage",
    "tests",
    "components",
    "ensure",
    "devos",
    "processes",
    "carried",
    "well",
    "microsoft",
    "azure",
    "azure",
    "devops",
    "go",
    "well",
    "hand",
    "hand",
    "let",
    "move",
    "take",
    "look",
    "demo",
    "part",
    "guys",
    "order",
    "understand",
    "microsoft",
    "azure",
    "works",
    "azure",
    "devops",
    "stuff",
    "works",
    "would",
    "switching",
    "azure",
    "portal",
    "azure",
    "already",
    "mentioned",
    "cloud",
    "service",
    "provider",
    "going",
    "see",
    "microsoft",
    "azure",
    "used",
    "carry",
    "devops",
    "operations",
    "actually",
    "go",
    "ahead",
    "visit",
    "azure",
    "website",
    "open",
    "website",
    "place",
    "called",
    "portal",
    "click",
    "guys",
    "account",
    "would",
    "ask",
    "sign",
    "go",
    "ahead",
    "sign",
    "account",
    "good",
    "go",
    "people",
    "completely",
    "new",
    "microsoft",
    "azure",
    "let",
    "tell",
    "thing",
    "something",
    "called",
    "free",
    "tier",
    "actually",
    "go",
    "ahead",
    "create",
    "free",
    "account",
    "enter",
    "credit",
    "card",
    "details",
    "microsoft",
    "azure",
    "wo",
    "charge",
    "create",
    "account",
    "microsoft",
    "azure",
    "gives",
    "certain",
    "free",
    "credits",
    "use",
    "particular",
    "duration",
    "time",
    "see",
    "credit",
    "share",
    "normally",
    "actually",
    "go",
    "ahead",
    "take",
    "look",
    "amount",
    "credits",
    "microsoft",
    "azure",
    "offer",
    "somewhere",
    "around",
    "close",
    "200",
    "wrong",
    "yeah",
    "probably",
    "would",
    "able",
    "utilize",
    "services",
    "free",
    "use",
    "credit",
    "made",
    "available",
    "particular",
    "service",
    "want",
    "use",
    "pay",
    "bills",
    "using",
    "credit",
    "made",
    "available",
    "wo",
    "charged",
    "services",
    "use",
    "certain",
    "limits",
    "services",
    "use",
    "suppose",
    "actually",
    "go",
    "ahead",
    "create",
    "server",
    "let",
    "open",
    "long",
    "time",
    "create",
    "database",
    "top",
    "might",
    "charged",
    "heavily",
    "would",
    "suggest",
    "actually",
    "go",
    "ahead",
    "take",
    "look",
    "certain",
    "documentation",
    "microsoft",
    "azure",
    "offer",
    "long",
    "stay",
    "specified",
    "limits",
    "wo",
    "charged",
    "anything",
    "would",
    "suggest",
    "actually",
    "go",
    "ahead",
    "put",
    "credit",
    "card",
    "debit",
    "card",
    "details",
    "get",
    "account",
    "created",
    "create",
    "account",
    "microsoft",
    "azure",
    "portal",
    "interface",
    "looks",
    "like",
    "account",
    "running",
    "going",
    "go",
    "ahead",
    "carry",
    "devops",
    "practices",
    "right",
    "switch",
    "devops",
    "come",
    "search",
    "console",
    "type",
    "devops",
    "azure",
    "devops",
    "go",
    "ahead",
    "type",
    "azure",
    "devops",
    "somewhere",
    "reason",
    "want",
    "show",
    "interface",
    "looks",
    "like",
    "would",
    "look",
    "like",
    "start",
    "click",
    "start",
    "free",
    "would",
    "redirected",
    "page",
    "guys",
    "first",
    "need",
    "create",
    "organization",
    "think",
    "organization",
    "environment",
    "mean",
    "company",
    "actually",
    "planning",
    "build",
    "software",
    "would",
    "structure",
    "right",
    "company",
    "planning",
    "actually",
    "go",
    "ahead",
    "build",
    "particular",
    "software",
    "would",
    "template",
    "structure",
    "right",
    "say",
    "organization",
    "talking",
    "structure",
    "create",
    "organization",
    "simple",
    "option",
    "click",
    "new",
    "organization",
    "would",
    "ask",
    "name",
    "organization",
    "enter",
    "name",
    "organization",
    "gets",
    "created",
    "organization",
    "next",
    "step",
    "go",
    "ahead",
    "create",
    "project",
    "click",
    "project",
    "would",
    "option",
    "create",
    "organization",
    "saying",
    "want",
    "create",
    "project",
    "say",
    "yes",
    "interface",
    "looks",
    "somebody",
    "started",
    "fresh",
    "would",
    "look",
    "like",
    "go",
    "ahead",
    "enter",
    "project",
    "name",
    "let",
    "say",
    "demo",
    "project",
    "today",
    "bad",
    "naming",
    "conventions",
    "forgive",
    "description",
    "sample",
    "project",
    "would",
    "guys",
    "complexity",
    "project",
    "important",
    "trying",
    "explain",
    "certain",
    "stuff",
    "please",
    "pardon",
    "simpleness",
    "particular",
    "project",
    "guys",
    "enter",
    "details",
    "gives",
    "option",
    "want",
    "public",
    "private",
    "say",
    "public",
    "anyone",
    "internet",
    "access",
    "open",
    "source",
    "kind",
    "stuff",
    "stick",
    "private",
    "thing",
    "give",
    "access",
    "people",
    "want",
    "take",
    "look",
    "project",
    "said",
    "um",
    "select",
    "private",
    "say",
    "create",
    "project",
    "project",
    "gets",
    "created",
    "okay",
    "guys",
    "project",
    "created",
    "took",
    "longer",
    "normal",
    "internet",
    "working",
    "well",
    "times",
    "takes",
    "time",
    "project",
    "ready",
    "guys",
    "actually",
    "free",
    "go",
    "ahead",
    "stuff",
    "components",
    "talked",
    "bottom",
    "see",
    "components",
    "boards",
    "repose",
    "pipelines",
    "test",
    "plans",
    "artifacts",
    "actually",
    "go",
    "ahead",
    "create",
    "let",
    "start",
    "creating",
    "pipeline",
    "first",
    "guys",
    "say",
    "new",
    "pipeline",
    "guys",
    "actually",
    "go",
    "ahead",
    "create",
    "pipeline",
    "go",
    "ahead",
    "use",
    "existing",
    "piece",
    "code",
    "repositories",
    "want",
    "want",
    "type",
    "code",
    "anything",
    "want",
    "use",
    "azure",
    "reports",
    "made",
    "available",
    "free",
    "um",
    "github",
    "know",
    "popular",
    "place",
    "repositories",
    "kept",
    "wish",
    "import",
    "repositories",
    "github",
    "well",
    "actually",
    "go",
    "ahead",
    "click",
    "icon",
    "going",
    "session",
    "going",
    "use",
    "github",
    "repository",
    "click",
    "thing",
    "authorize",
    "github",
    "repository",
    "github",
    "account",
    "rather",
    "account",
    "already",
    "authorized",
    "azure",
    "think",
    "ask",
    "reauthorization",
    "actually",
    "go",
    "ahead",
    "authorize",
    "github",
    "account",
    "free",
    "actually",
    "go",
    "ahead",
    "import",
    "repositories",
    "github",
    "go",
    "github",
    "demo",
    "account",
    "one",
    "repository",
    "repositories",
    "see",
    "python",
    "repository",
    "guys",
    "already",
    "mentioned",
    "use",
    "platform",
    "want",
    "talk",
    "azure",
    "python",
    "something",
    "simple",
    "wish",
    "stick",
    "repository",
    "something",
    "made",
    "available",
    "microsoft",
    "azure",
    "well",
    "worry",
    "would",
    "sharing",
    "link",
    "visit",
    "microsoft",
    "azure",
    "docs",
    "azure",
    "devops",
    "would",
    "get",
    "link",
    "well",
    "link",
    "fork",
    "thing",
    "github",
    "people",
    "know",
    "github",
    "well",
    "think",
    "storage",
    "place",
    "actually",
    "go",
    "ahead",
    "store",
    "repositories",
    "repositories",
    "nothing",
    "piece",
    "code",
    "software",
    "actually",
    "go",
    "ahead",
    "store",
    "give",
    "access",
    "others",
    "well",
    "something",
    "called",
    "open",
    "source",
    "others",
    "actually",
    "go",
    "ahead",
    "take",
    "piece",
    "code",
    "maybe",
    "modify",
    "give",
    "modify",
    "use",
    "purpose",
    "github",
    "place",
    "put",
    "codes",
    "master",
    "branch",
    "give",
    "access",
    "certain",
    "people",
    "make",
    "changes",
    "code",
    "people",
    "make",
    "changes",
    "option",
    "called",
    "forking",
    "github",
    "repository",
    "say",
    "forking",
    "means",
    "actually",
    "creating",
    "copy",
    "branch",
    "particular",
    "repository",
    "using",
    "sake",
    "make",
    "changes",
    "submit",
    "changes",
    "main",
    "repository",
    "master",
    "branch",
    "github",
    "process",
    "saw",
    "would",
    "ask",
    "authorize",
    "github",
    "account",
    "already",
    "forked",
    "particular",
    "repository",
    "would",
    "available",
    "suggestion",
    "see",
    "forked",
    "repository",
    "selected",
    "opens",
    "yml",
    "file",
    "actually",
    "go",
    "ahead",
    "edit",
    "thing",
    "considers",
    "python",
    "django",
    "framework",
    "tests",
    "django",
    "product",
    "project",
    "rather",
    "multiple",
    "versions",
    "python",
    "steps",
    "lets",
    "analyze",
    "code",
    "save",
    "build",
    "artifacts",
    "deploy",
    "piece",
    "code",
    "guys",
    "wo",
    "getting",
    "details",
    "code",
    "sample",
    "repository",
    "actually",
    "go",
    "ahead",
    "study",
    "little",
    "run",
    "piece",
    "code",
    "simple",
    "guys",
    "run",
    "code",
    "creates",
    "pipeline",
    "say",
    "creates",
    "pipeline",
    "lets",
    "probably",
    "actually",
    "go",
    "ahead",
    "make",
    "codes",
    "make",
    "changes",
    "codes",
    "submit",
    "master",
    "branch",
    "would",
    "worry",
    "see",
    "microsoft",
    "azure",
    "gives",
    "continuous",
    "feedback",
    "update",
    "happening",
    "happening",
    "happening",
    "might",
    "take",
    "maybe",
    "half",
    "minute",
    "quite",
    "things",
    "happening",
    "see",
    "telling",
    "happened",
    "right",
    "mean",
    "processes",
    "see",
    "tasks",
    "happening",
    "performing",
    "tests",
    "stuff",
    "like",
    "see",
    "number",
    "processes",
    "taken",
    "place",
    "prepared",
    "job",
    "initialized",
    "agent",
    "take",
    "care",
    "initialize",
    "job",
    "got",
    "resources",
    "used",
    "python",
    "version",
    "exported",
    "project",
    "path",
    "installed",
    "certain",
    "prerequisites",
    "ran",
    "tests",
    "published",
    "test",
    "results",
    "happened",
    "post",
    "job",
    "get",
    "sources",
    "wish",
    "details",
    "click",
    "icon",
    "would",
    "give",
    "details",
    "happened",
    "well",
    "probably",
    "come",
    "back",
    "pipelines",
    "see",
    "pipeline",
    "created",
    "guys",
    "actually",
    "go",
    "ahead",
    "commit",
    "changes",
    "piece",
    "code",
    "yml",
    "file",
    "files",
    "repository",
    "would",
    "reflected",
    "see",
    "status",
    "going",
    "let",
    "show",
    "things",
    "well",
    "click",
    "analytics",
    "give",
    "analytics",
    "happened",
    "whether",
    "failures",
    "whether",
    "code",
    "ran",
    "properly",
    "stuff",
    "like",
    "test",
    "failures",
    "available",
    "plugin",
    "say",
    "plugin",
    "okay",
    "find",
    "test",
    "results",
    "saying",
    "let",
    "go",
    "ahead",
    "certain",
    "things",
    "probably",
    "would",
    "clear",
    "guys",
    "worry",
    "going",
    "back",
    "history",
    "part",
    "take",
    "look",
    "summary",
    "part",
    "would",
    "tell",
    "happened",
    "test",
    "succeeded",
    "build",
    "pipeline",
    "succeeded",
    "manually",
    "queued",
    "happened",
    "guys",
    "go",
    "ahead",
    "put",
    "certain",
    "details",
    "make",
    "certain",
    "changes",
    "let",
    "try",
    "understand",
    "done",
    "gate",
    "repository",
    "right",
    "let",
    "go",
    "ahead",
    "play",
    "little",
    "commit",
    "certain",
    "changes",
    "first",
    "go",
    "pipeline",
    "pipeline",
    "concerned",
    "probably",
    "must",
    "getting",
    "certain",
    "details",
    "looking",
    "let",
    "go",
    "back",
    "go",
    "back",
    "go",
    "back",
    "little",
    "projects",
    "projects",
    "links",
    "option",
    "called",
    "status",
    "badge",
    "status",
    "badge",
    "see",
    "status",
    "badge",
    "looks",
    "like",
    "tells",
    "okay",
    "whether",
    "pipeline",
    "built",
    "built",
    "correctly",
    "developer",
    "would",
    "wanting",
    "code",
    "green",
    "right",
    "mean",
    "everything",
    "checked",
    "green",
    "everything",
    "nice",
    "ready",
    "successful",
    "badge",
    "going",
    "go",
    "ahead",
    "use",
    "piece",
    "batch",
    "add",
    "code",
    "sample",
    "stuff",
    "mean",
    "important",
    "go",
    "ahead",
    "make",
    "add",
    "badge",
    "piece",
    "code",
    "would",
    "show",
    "certain",
    "change",
    "made",
    "code",
    "file",
    "would",
    "reflected",
    "pipeline",
    "something",
    "important",
    "talk",
    "ci",
    "cd",
    "let",
    "simple",
    "example",
    "come",
    "pipelines",
    "pipeline",
    "scroll",
    "would",
    "readme",
    "file",
    "make",
    "changes",
    "say",
    "edit",
    "add",
    "piece",
    "code",
    "say",
    "let",
    "add",
    "new",
    "piece",
    "code",
    "somewhere",
    "maybe",
    "okay",
    "go",
    "guys",
    "get",
    "details",
    "complicacy",
    "stuff",
    "fairly",
    "easy",
    "judge",
    "either",
    "mean",
    "already",
    "mentioned",
    "aim",
    "go",
    "ahead",
    "show",
    "concept",
    "stuff",
    "works",
    "basic",
    "guys",
    "gone",
    "ahead",
    "made",
    "change",
    "piece",
    "code",
    "actually",
    "gone",
    "ahead",
    "added",
    "batch",
    "gon",
    "na",
    "go",
    "ahead",
    "say",
    "commit",
    "changes",
    "update",
    "readme",
    "file",
    "yes",
    "please",
    "commit",
    "directly",
    "master",
    "branch",
    "commit",
    "new",
    "branch",
    "let",
    "say",
    "master",
    "branch",
    "change",
    "committed",
    "come",
    "go",
    "pipelines",
    "select",
    "pipeline",
    "open",
    "yeah",
    "go",
    "change",
    "reflected",
    "update",
    "readme",
    "file",
    "updated",
    "guys",
    "talking",
    "continuous",
    "integration",
    "deployment",
    "means",
    "mean",
    "make",
    "change",
    "piece",
    "code",
    "somebody",
    "else",
    "wants",
    "access",
    "software",
    "give",
    "latest",
    "copy",
    "right",
    "piece",
    "code",
    "pipeline",
    "go",
    "ahead",
    "pick",
    "certain",
    "piece",
    "code",
    "make",
    "change",
    "change",
    "gets",
    "reflected",
    "devops",
    "azure",
    "helps",
    "lets",
    "bring",
    "whole",
    "github",
    "concept",
    "azure",
    "helps",
    "go",
    "ahead",
    "work",
    "ci",
    "cd",
    "much",
    "better",
    "way",
    "talked",
    "stuff",
    "well",
    "repose",
    "boards",
    "quite",
    "things",
    "talk",
    "overview",
    "general",
    "something",
    "called",
    "dashboard",
    "click",
    "icon",
    "dashboard",
    "created",
    "default",
    "oh",
    "dashboard",
    "dashboard",
    "widgets",
    "gon",
    "na",
    "add",
    "widget",
    "let",
    "say",
    "need",
    "visit",
    "build",
    "history",
    "click",
    "say",
    "add",
    "said",
    "done",
    "editing",
    "refresh",
    "thing",
    "come",
    "select",
    "particular",
    "pipeline",
    "say",
    "save",
    "reflect",
    "changes",
    "happened",
    "happened",
    "happening",
    "particular",
    "dashboard",
    "particular",
    "project",
    "would",
    "give",
    "details",
    "like",
    "already",
    "mentioned",
    "create",
    "dashboards",
    "actually",
    "go",
    "ahead",
    "integrate",
    "power",
    "bi",
    "popular",
    "business",
    "intelligence",
    "bi",
    "tool",
    "basically",
    "actually",
    "go",
    "ahead",
    "take",
    "consider",
    "features",
    "well",
    "apart",
    "stuff",
    "actually",
    "go",
    "ahead",
    "play",
    "use",
    "analytics",
    "understand",
    "analytics",
    "work",
    "thing",
    "actually",
    "would",
    "go",
    "ahead",
    "two",
    "things",
    "one",
    "would",
    "go",
    "ahead",
    "integrate",
    "plugin",
    "analytics",
    "go",
    "ahead",
    "implement",
    "quite",
    "things",
    "actually",
    "come",
    "quite",
    "things",
    "take",
    "github",
    "connections",
    "integrate",
    "github",
    "azure",
    "actually",
    "go",
    "ahead",
    "integrate",
    "quite",
    "things",
    "see",
    "options",
    "like",
    "service",
    "connections",
    "asian",
    "pools",
    "retention",
    "parallel",
    "jobs",
    "stuff",
    "like",
    "take",
    "care",
    "things",
    "well",
    "boards",
    "go",
    "ahead",
    "add",
    "items",
    "items",
    "put",
    "states",
    "want",
    "put",
    "details",
    "certain",
    "things",
    "like",
    "particular",
    "bugs",
    "particular",
    "priorities",
    "based",
    "project",
    "add",
    "items",
    "saying",
    "okay",
    "um",
    "criticality",
    "items",
    "stuff",
    "like",
    "fairly",
    "click",
    "create",
    "new",
    "item",
    "whether",
    "bug",
    "whether",
    "feature",
    "issue",
    "whatever",
    "go",
    "ahead",
    "add",
    "keep",
    "track",
    "things",
    "form",
    "dashboards",
    "boards",
    "repose",
    "actually",
    "go",
    "ahead",
    "click",
    "files",
    "see",
    "reports",
    "using",
    "stuff",
    "like",
    "go",
    "marketplace",
    "take",
    "reports",
    "microsoft",
    "azure",
    "supports",
    "pipelines",
    "seen",
    "test",
    "plans",
    "go",
    "ahead",
    "launch",
    "proper",
    "test",
    "plans",
    "well",
    "create",
    "artifacts",
    "feeds",
    "well",
    "using",
    "azure",
    "artifacts",
    "yeah",
    "guys",
    "pretty",
    "much",
    "session",
    "offer",
    "people",
    "go",
    "ahead",
    "create",
    "pipeline",
    "saw",
    "commit",
    "changes",
    "changes",
    "get",
    "reflected",
    "use",
    "azure",
    "pipeline",
    "also",
    "saw",
    "dashboards",
    "work",
    "foreign",
    "music",
    "devops",
    "cloud",
    "devops",
    "cloud",
    "need",
    "devops",
    "cloud",
    "understand",
    "devops",
    "cloud",
    "go",
    "hand",
    "hand",
    "implemented",
    "individually",
    "course",
    "devops",
    "becomes",
    "twice",
    "much",
    "efficient",
    "beneficial",
    "clapping",
    "cloud",
    "help",
    "organization",
    "deliver",
    "new",
    "software",
    "features",
    "much",
    "faster",
    "effective",
    "manner",
    "many",
    "organizations",
    "try",
    "fix",
    "application",
    "development",
    "processes",
    "shifting",
    "waterfall",
    "devops",
    "understanding",
    "devops",
    "alone",
    "wo",
    "effective",
    "public",
    "private",
    "cloud",
    "solutions",
    "evolving",
    "together",
    "devops",
    "brings",
    "products",
    "faster",
    "rate",
    "market",
    "quick",
    "access",
    "development",
    "environment",
    "streamline",
    "developer",
    "processes",
    "infrastructure",
    "code",
    "automation",
    "together",
    "reduces",
    "cloud",
    "complexity",
    "maintenance",
    "servers",
    "resources",
    "ops",
    "team",
    "previously",
    "concerned",
    "security",
    "also",
    "highly",
    "increases",
    "automated",
    "repeatable",
    "processes",
    "serve",
    "eliminate",
    "error",
    "cause",
    "issues",
    "even",
    "importantly",
    "builds",
    "security",
    "controls",
    "beginning",
    "end",
    "process",
    "servers",
    "continuous",
    "operations",
    "also",
    "eliminates",
    "lot",
    "downtime",
    "last",
    "least",
    "scalability",
    "one",
    "important",
    "factors",
    "applications",
    "developed",
    "devops",
    "cloud",
    "clubbed",
    "together",
    "reduces",
    "cost",
    "infrastructure",
    "global",
    "reach",
    "also",
    "increases",
    "know",
    "need",
    "cloud",
    "platform",
    "let",
    "go",
    "ahead",
    "look",
    "cloud",
    "platform",
    "choice",
    "today",
    "aws",
    "aws",
    "back",
    "day",
    "handling",
    "storing",
    "data",
    "way",
    "different",
    "companies",
    "preferred",
    "storing",
    "data",
    "using",
    "private",
    "servers",
    "obviously",
    "security",
    "reasons",
    "however",
    "better",
    "usage",
    "internet",
    "trend",
    "friend",
    "seen",
    "paradigm",
    "shift",
    "industries",
    "moving",
    "data",
    "cloud",
    "enables",
    "companies",
    "focus",
    "core",
    "competencies",
    "stop",
    "worrying",
    "storing",
    "computation",
    "example",
    "back",
    "day",
    "streaming",
    "platform",
    "search",
    "engine",
    "platform",
    "anything",
    "high",
    "volume",
    "database",
    "suffered",
    "corruption",
    "would",
    "take",
    "days",
    "operations",
    "resumed",
    "would",
    "face",
    "problems",
    "scaling",
    "would",
    "realize",
    "need",
    "highly",
    "reliable",
    "horizontally",
    "scalable",
    "distributed",
    "system",
    "need",
    "cloud",
    "services",
    "public",
    "cloud",
    "platforms",
    "would",
    "problem",
    "since",
    "every",
    "company",
    "started",
    "adopt",
    "cloud",
    "services",
    "claimed",
    "cloud",
    "talk",
    "town",
    "aws",
    "particular",
    "leading",
    "cloud",
    "service",
    "provider",
    "market",
    "aws",
    "stands",
    "amazon",
    "web",
    "services",
    "subsidiary",
    "offers",
    "cloud",
    "computing",
    "services",
    "extremely",
    "affordable",
    "rates",
    "therefore",
    "customer",
    "base",
    "strong",
    "targets",
    "everyone",
    "individuals",
    "startups",
    "take",
    "joints",
    "running",
    "landscape",
    "might",
    "wonder",
    "cloud",
    "computing",
    "basically",
    "use",
    "remote",
    "servers",
    "internet",
    "store",
    "manage",
    "process",
    "data",
    "opposed",
    "actual",
    "physical",
    "server",
    "personal",
    "computer",
    "talking",
    "aws",
    "kind",
    "iaas",
    "infrastructure",
    "service",
    "basically",
    "gives",
    "server",
    "cloud",
    "complete",
    "control",
    "ias",
    "responsible",
    "managing",
    "everything",
    "starting",
    "os",
    "completely",
    "application",
    "running",
    "discussed",
    "devops",
    "aws",
    "let",
    "move",
    "rci",
    "cd",
    "pipeline",
    "pipeline",
    "cicd",
    "pipeline",
    "nothing",
    "series",
    "steps",
    "must",
    "performed",
    "order",
    "deliver",
    "new",
    "version",
    "software",
    "bare",
    "bones",
    "basic",
    "build",
    "test",
    "deploy",
    "stage",
    "ci",
    "cd",
    "basically",
    "stands",
    "continuous",
    "integration",
    "continuous",
    "deployment",
    "ci",
    "basically",
    "continuous",
    "integration",
    "basically",
    "means",
    "bringing",
    "together",
    "developers",
    "working",
    "copies",
    "shared",
    "main",
    "line",
    "developers",
    "working",
    "parallel",
    "branches",
    "certain",
    "upgrade",
    "application",
    "merge",
    "changes",
    "one",
    "main",
    "branch",
    "cd",
    "stands",
    "continuous",
    "delivery",
    "deployment",
    "ci",
    "includes",
    "building",
    "testing",
    "application",
    "continuous",
    "deployment",
    "processes",
    "happen",
    "code",
    "integrated",
    "app",
    "delivered",
    "users",
    "processes",
    "involve",
    "testing",
    "staging",
    "deploying",
    "code",
    "end",
    "session",
    "aim",
    "build",
    "ci",
    "cd",
    "pipeline",
    "demo",
    "app",
    "aws",
    "look",
    "components",
    "aws",
    "devops",
    "implemented",
    "aws",
    "becomes",
    "lot",
    "efficient",
    "effective",
    "productive",
    "life",
    "cycle",
    "steps",
    "involved",
    "aws",
    "devops",
    "code",
    "commit",
    "code",
    "pipeline",
    "code",
    "build",
    "code",
    "deploy",
    "optionally",
    "code",
    "staff",
    "first",
    "aws",
    "code",
    "commit",
    "fully",
    "managed",
    "source",
    "control",
    "service",
    "somewhat",
    "like",
    "github",
    "hosts",
    "secure",
    "highly",
    "scalable",
    "git",
    "based",
    "repository",
    "without",
    "need",
    "operating",
    "system",
    "mainly",
    "designed",
    "developers",
    "supposed",
    "store",
    "version",
    "code",
    "securely",
    "reliably",
    "example",
    "administrators",
    "store",
    "scripts",
    "configurations",
    "web",
    "designers",
    "store",
    "html",
    "pages",
    "images",
    "etc",
    "code",
    "commit",
    "fully",
    "managed",
    "great",
    "availability",
    "secure",
    "scalable",
    "patens",
    "development",
    "life",
    "cycle",
    "people",
    "aware",
    "code",
    "comment",
    "think",
    "versioning",
    "s3",
    "different",
    "s3",
    "supports",
    "versioning",
    "collaborative",
    "file",
    "tracking",
    "features",
    "could",
    "commit",
    "obviously",
    "manages",
    "batches",
    "changes",
    "across",
    "numerous",
    "files",
    "made",
    "multiple",
    "developers",
    "parallely",
    "works",
    "create",
    "repository",
    "aws",
    "code",
    "commit",
    "service",
    "via",
    "console",
    "cli",
    "later",
    "using",
    "git",
    "development",
    "machine",
    "run",
    "git",
    "clone",
    "connect",
    "local",
    "repository",
    "aws",
    "code",
    "commit",
    "repo",
    "modify",
    "files",
    "development",
    "machine",
    "via",
    "local",
    "repository",
    "run",
    "git",
    "add",
    "git",
    "commit",
    "push",
    "aws",
    "code",
    "comment",
    "repository",
    "github",
    "like",
    "git",
    "even",
    "git",
    "pull",
    "used",
    "synchronize",
    "files",
    "aws",
    "could",
    "come",
    "repository",
    "local",
    "wrapper",
    "ensures",
    "working",
    "latest",
    "version",
    "files",
    "next",
    "list",
    "aws",
    "code",
    "pipeline",
    "combination",
    "continuous",
    "integration",
    "continuous",
    "delivery",
    "services",
    "quicker",
    "reliable",
    "infrastructure",
    "application",
    "updates",
    "automatically",
    "builds",
    "tests",
    "deploys",
    "user",
    "code",
    "whenever",
    "code",
    "change",
    "completely",
    "based",
    "release",
    "process",
    "models",
    "also",
    "integrates",
    "aws",
    "services",
    "like",
    "aws",
    "code",
    "comet",
    "amazon",
    "s3",
    "code",
    "deploy",
    "elastic",
    "beanstalk",
    "ops",
    "works",
    "aws",
    "lambda",
    "configure",
    "pipeline",
    "either",
    "cli",
    "graphical",
    "user",
    "interface",
    "like",
    "services",
    "aws",
    "even",
    "pipeline",
    "pay",
    "use",
    "great",
    "use",
    "code",
    "pipeline",
    "simple",
    "automating",
    "software",
    "build",
    "test",
    "release",
    "processes",
    "aws",
    "code",
    "pipeline",
    "enables",
    "increase",
    "speed",
    "quality",
    "software",
    "updates",
    "running",
    "new",
    "changes",
    "consistent",
    "set",
    "quality",
    "checks",
    "automates",
    "release",
    "process",
    "speeds",
    "delivery",
    "quality",
    "allows",
    "choose",
    "tools",
    "choice",
    "establish",
    "consistent",
    "release",
    "processes",
    "provide",
    "pipeline",
    "history",
    "detail",
    "source",
    "truth",
    "code",
    "pipeline",
    "basically",
    "breaks",
    "workflow",
    "series",
    "stages",
    "like",
    "source",
    "build",
    "test",
    "deploy",
    "gives",
    "revision",
    "option",
    "deployable",
    "content",
    "stage",
    "process",
    "one",
    "revision",
    "time",
    "even",
    "though",
    "multiple",
    "revisions",
    "processed",
    "pipeline",
    "stage",
    "least",
    "one",
    "action",
    "performed",
    "kind",
    "task",
    "performed",
    "artifact",
    "actions",
    "configured",
    "stage",
    "complete",
    "stage",
    "considered",
    "complete",
    "stages",
    "come",
    "complete",
    "transitions",
    "artifacts",
    "created",
    "stage",
    "next",
    "stage",
    "pipeline",
    "manually",
    "enable",
    "disable",
    "prevents",
    "changes",
    "running",
    "entire",
    "pipeline",
    "approval",
    "action",
    "granted",
    "iam",
    "user",
    "action",
    "fails",
    "transition",
    "next",
    "action",
    "stage",
    "developer",
    "completes",
    "working",
    "code",
    "commits",
    "source",
    "repository",
    "code",
    "pipeline",
    "automatically",
    "detects",
    "changes",
    "builds",
    "changes",
    "build",
    "code",
    "deployed",
    "staging",
    "server",
    "testing",
    "additional",
    "tests",
    "integration",
    "load",
    "tests",
    "run",
    "code",
    "pipeline",
    "tests",
    "run",
    "code",
    "receives",
    "manual",
    "approval",
    "aws",
    "code",
    "pipeline",
    "deploys",
    "tested",
    "approved",
    "code",
    "production",
    "instances",
    "also",
    "every",
    "time",
    "user",
    "creates",
    "pipeline",
    "code",
    "pipeline",
    "creates",
    "folder",
    "pipeline",
    "s3",
    "artifact",
    "bucket",
    "particular",
    "region",
    "sort",
    "input",
    "output",
    "artifacts",
    "next",
    "list",
    "aws",
    "code",
    "build",
    "fully",
    "managed",
    "build",
    "service",
    "cloud",
    "compiles",
    "source",
    "code",
    "runs",
    "unit",
    "tests",
    "produces",
    "artifacts",
    "ready",
    "deploy",
    "eliminates",
    "need",
    "provision",
    "manage",
    "scale",
    "build",
    "servers",
    "provides",
    "build",
    "environments",
    "popular",
    "programming",
    "languages",
    "build",
    "tools",
    "skills",
    "automatically",
    "meet",
    "peak",
    "build",
    "requests",
    "one",
    "prerequisite",
    "must",
    "provide",
    "aws",
    "code",
    "build",
    "build",
    "project",
    "include",
    "information",
    "get",
    "source",
    "code",
    "build",
    "environment",
    "build",
    "commands",
    "store",
    "build",
    "output",
    "works",
    "code",
    "build",
    "use",
    "build",
    "project",
    "create",
    "build",
    "environment",
    "aws",
    "code",
    "build",
    "downloads",
    "source",
    "code",
    "build",
    "environment",
    "performs",
    "tasks",
    "would",
    "specify",
    "build",
    "specifications",
    "build",
    "output",
    "build",
    "environment",
    "uploads",
    "output",
    "s3",
    "bucket",
    "build",
    "running",
    "build",
    "environment",
    "sends",
    "information",
    "code",
    "build",
    "cloudwatch",
    "logs",
    "use",
    "code",
    "build",
    "console",
    "aws",
    "cli",
    "aws",
    "sd",
    "case",
    "get",
    "summarized",
    "bill",
    "information",
    "code",
    "build",
    "detailed",
    "build",
    "information",
    "cloudwatch",
    "logs",
    "well",
    "code",
    "build",
    "finally",
    "let",
    "talk",
    "code",
    "deploy",
    "aws",
    "code",
    "deploy",
    "service",
    "coordinates",
    "application",
    "deployment",
    "updates",
    "across",
    "fleet",
    "aws",
    "ec2",
    "size",
    "automates",
    "code",
    "deployment",
    "instance",
    "handles",
    "complexity",
    "updating",
    "also",
    "avoids",
    "downtime",
    "application",
    "development",
    "rolls",
    "back",
    "automatically",
    "failure",
    "detected",
    "apart",
    "also",
    "integrates",
    "tools",
    "aws",
    "make",
    "job",
    "easier",
    "six",
    "primary",
    "components",
    "specific",
    "app",
    "application",
    "revision",
    "compute",
    "platform",
    "deployment",
    "group",
    "deployment",
    "configuration",
    "code",
    "deploy",
    "agent",
    "basic",
    "skeleton",
    "deployment",
    "workflow",
    "pursues",
    "see",
    "screen",
    "basically",
    "create",
    "application",
    "unique",
    "name",
    "set",
    "deployment",
    "group",
    "specifying",
    "instances",
    "want",
    "deploy",
    "application",
    "deployment",
    "type",
    "using",
    "lambda",
    "platform",
    "deploy",
    "deployment",
    "group",
    "name",
    "followed",
    "deployment",
    "configuration",
    "specify",
    "success",
    "failure",
    "condition",
    "deployment",
    "many",
    "instances",
    "want",
    "deploy",
    "parallely",
    "upload",
    "application",
    "specification",
    "file",
    "s3",
    "deploy",
    "application",
    "specified",
    "help",
    "code",
    "deploy",
    "agent",
    "running",
    "instance",
    "ec2",
    "platform",
    "specified",
    "specification",
    "file",
    "deployment",
    "group",
    "using",
    "lambda",
    "platform",
    "finally",
    "check",
    "deployment",
    "results",
    "face",
    "bugs",
    "issues",
    "always",
    "roll",
    "back",
    "redeploy",
    "finally",
    "let",
    "discuss",
    "little",
    "bit",
    "codestar",
    "basically",
    "development",
    "service",
    "provides",
    "tools",
    "need",
    "quickly",
    "develop",
    "build",
    "deploy",
    "applications",
    "aws",
    "basically",
    "templatized",
    "format",
    "start",
    "developing",
    "aws",
    "certain",
    "minutes",
    "could",
    "choose",
    "variety",
    "project",
    "templates",
    "software",
    "delivery",
    "easily",
    "managed",
    "work",
    "across",
    "team",
    "securely",
    "using",
    "code",
    "stuff",
    "apart",
    "also",
    "provided",
    "project",
    "management",
    "dashboard",
    "monitor",
    "application",
    "continuously",
    "aws",
    "code",
    "star",
    "admin",
    "create",
    "project",
    "add",
    "users",
    "users",
    "team",
    "members",
    "come",
    "changes",
    "turn",
    "built",
    "deployed",
    "consistent",
    "monitoring",
    "application",
    "updates",
    "required",
    "bugs",
    "developers",
    "take",
    "decision",
    "make",
    "updates",
    "fix",
    "bugs",
    "loop",
    "closes",
    "back",
    "team",
    "development",
    "process",
    "takes",
    "little",
    "time",
    "using",
    "code",
    "stop",
    "spoken",
    "different",
    "components",
    "aws",
    "devops",
    "hope",
    "building",
    "ci",
    "cd",
    "pipeline",
    "would",
    "seem",
    "tad",
    "tangible",
    "new",
    "learners",
    "always",
    "sign",
    "free",
    "tier",
    "free",
    "entire",
    "year",
    "obviously",
    "limitations",
    "services",
    "beyond",
    "shall",
    "charged",
    "rarely",
    "happens",
    "starting",
    "aws",
    "want",
    "try",
    "features",
    "services",
    "free",
    "tier",
    "pretty",
    "good",
    "idea",
    "already",
    "video",
    "create",
    "free",
    "tier",
    "aws",
    "console",
    "want",
    "know",
    "create",
    "free",
    "account",
    "go",
    "ahead",
    "check",
    "going",
    "building",
    "ci",
    "cd",
    "pipeline",
    "using",
    "aws",
    "using",
    "code",
    "pipeline",
    "try",
    "slow",
    "verbose",
    "possible",
    "comprehensive",
    "possible",
    "help",
    "guys",
    "follow",
    "step",
    "way",
    "creating",
    "demo",
    "application",
    "platform",
    "service",
    "application",
    "shall",
    "deploying",
    "using",
    "code",
    "pipeline",
    "let",
    "go",
    "ahead",
    "create",
    "application",
    "first",
    "create",
    "app",
    "using",
    "amazon",
    "elastic",
    "beanstalk",
    "basically",
    "bunch",
    "templates",
    "ready",
    "since",
    "demo",
    "code",
    "pipeline",
    "web",
    "development",
    "creating",
    "pretty",
    "rudimentary",
    "app",
    "let",
    "go",
    "ahead",
    "type",
    "elastic",
    "beanstalk",
    "using",
    "elastic",
    "beanstalk",
    "make",
    "simple",
    "apps",
    "quickly",
    "already",
    "created",
    "application",
    "created",
    "applications",
    "going",
    "appear",
    "right",
    "screen",
    "since",
    "created",
    "applications",
    "using",
    "particular",
    "account",
    "screen",
    "greet",
    "going",
    "go",
    "ahead",
    "click",
    "create",
    "application",
    "let",
    "call",
    "deployment",
    "app",
    "original",
    "going",
    "put",
    "application",
    "tags",
    "could",
    "put",
    "like",
    "currently",
    "completely",
    "unnecessary",
    "platform",
    "let",
    "pick",
    "php",
    "automatically",
    "fills",
    "platform",
    "branch",
    "inversion",
    "latest",
    "ones",
    "available",
    "going",
    "using",
    "sample",
    "application",
    "code",
    "click",
    "create",
    "application",
    "platform",
    "service",
    "app",
    "basically",
    "click",
    "create",
    "application",
    "would",
    "worry",
    "background",
    "processes",
    "creating",
    "infrastructure",
    "elastic",
    "beanstalk",
    "going",
    "gon",
    "na",
    "show",
    "steps",
    "taking",
    "place",
    "like",
    "create",
    "environment",
    "starting",
    "using",
    "elastic",
    "beanstalk",
    "amazon",
    "s3",
    "storage",
    "bucket",
    "environment",
    "data",
    "forth",
    "take",
    "time",
    "let",
    "go",
    "ahead",
    "parallely",
    "something",
    "else",
    "going",
    "open",
    "another",
    "tab",
    "aws",
    "console",
    "okay",
    "thankfully",
    "ask",
    "sign",
    "app",
    "gets",
    "created",
    "gon",
    "na",
    "gon",
    "na",
    "create",
    "pipeline",
    "going",
    "type",
    "code",
    "pipeline",
    "funda",
    "simple",
    "even",
    "guys",
    "going",
    "put",
    "certain",
    "details",
    "pipeline",
    "created",
    "dashboard",
    "recent",
    "pipelines",
    "appear",
    "since",
    "free",
    "tier",
    "pipelines",
    "created",
    "hence",
    "results",
    "display",
    "first",
    "things",
    "first",
    "going",
    "create",
    "pipeline",
    "click",
    "big",
    "orange",
    "button",
    "says",
    "create",
    "pipeline",
    "going",
    "give",
    "pipeline",
    "name",
    "let",
    "call",
    "demo",
    "pipeline",
    "default",
    "going",
    "fill",
    "role",
    "name",
    "aws",
    "code",
    "pipeline",
    "service",
    "role",
    "us",
    "east",
    "demo",
    "pipeline",
    "click",
    "next",
    "source",
    "provider",
    "going",
    "use",
    "github",
    "connect",
    "github",
    "ask",
    "authorize",
    "code",
    "suite",
    "okay",
    "okay",
    "successfully",
    "authenticated",
    "account",
    "go",
    "ahead",
    "search",
    "repository",
    "going",
    "choose",
    "demo",
    "hyphen",
    "code",
    "deploy",
    "app",
    "actually",
    "sample",
    "app",
    "forked",
    "aws",
    "code",
    "pipeline",
    "repository",
    "go",
    "ahead",
    "look",
    "well",
    "available",
    "aws",
    "code",
    "pipelines",
    "github",
    "account",
    "yeah",
    "add",
    "branch",
    "let",
    "select",
    "master",
    "branch",
    "click",
    "next",
    "move",
    "build",
    "stage",
    "nothing",
    "major",
    "build",
    "going",
    "go",
    "ahead",
    "pick",
    "skip",
    "build",
    "stage",
    "prompted",
    "notification",
    "ask",
    "sure",
    "skip",
    "build",
    "stage",
    "since",
    "nothing",
    "major",
    "build",
    "yes",
    "going",
    "skip",
    "build",
    "stage",
    "deployment",
    "going",
    "choose",
    "deploy",
    "provider",
    "going",
    "use",
    "elastic",
    "beanstalk",
    "put",
    "application",
    "name",
    "environment",
    "name",
    "application",
    "name",
    "deployment",
    "app",
    "environment",
    "name",
    "would",
    "deployment",
    "app",
    "environment",
    "something",
    "gets",
    "created",
    "automatically",
    "going",
    "go",
    "ahead",
    "click",
    "next",
    "finally",
    "review",
    "stage",
    "go",
    "ahead",
    "review",
    "details",
    "put",
    "code",
    "pipeline",
    "going",
    "create",
    "pipeline",
    "pretty",
    "simple",
    "might",
    "take",
    "moments",
    "kindly",
    "patient",
    "greeted",
    "notification",
    "says",
    "success",
    "congratulations",
    "pipeline",
    "created",
    "go",
    "ahead",
    "release",
    "changes",
    "want",
    "im",
    "role",
    "place",
    "created",
    "earlier",
    "pipeline",
    "success",
    "wait",
    "application",
    "get",
    "created",
    "go",
    "ahead",
    "deploy",
    "application",
    "right",
    "application",
    "created",
    "okay",
    "health",
    "see",
    "platform",
    "see",
    "running",
    "version",
    "see",
    "details",
    "recent",
    "information",
    "regarding",
    "app",
    "platform",
    "service",
    "basically",
    "runs",
    "processes",
    "background",
    "would",
    "gone",
    "ahead",
    "created",
    "app",
    "configured",
    "im",
    "user",
    "configured",
    "everything",
    "else",
    "needed",
    "would",
    "taken",
    "lot",
    "time",
    "using",
    "platform",
    "service",
    "feature",
    "aws",
    "entire",
    "process",
    "automated",
    "work",
    "simplified",
    "go",
    "look",
    "recent",
    "events",
    "one",
    "thing",
    "see",
    "instance",
    "deployment",
    "completed",
    "successfully",
    "line",
    "see",
    "new",
    "application",
    "deployed",
    "running",
    "ec2",
    "instances",
    "basically",
    "instance",
    "running",
    "ec2",
    "let",
    "go",
    "ahead",
    "go",
    "ec2",
    "click",
    "instances",
    "running",
    "one",
    "instance",
    "running",
    "obviously",
    "know",
    "one",
    "deployment",
    "app",
    "let",
    "go",
    "ahead",
    "click",
    "see",
    "instance",
    "state",
    "running",
    "pipeline",
    "source",
    "succeeded",
    "deployment",
    "succeeded",
    "go",
    "go",
    "take",
    "look",
    "im",
    "role",
    "subnet",
    "id",
    "instance",
    "deployed",
    "realize",
    "demo",
    "pipeline",
    "worked",
    "music",
    "foreign",
    "let",
    "compare",
    "aws",
    "devops",
    "versus",
    "azure",
    "devops",
    "let",
    "talk",
    "services",
    "provides",
    "amazon",
    "web",
    "services",
    "code",
    "pipeline",
    "continuous",
    "delivery",
    "service",
    "fast",
    "reliable",
    "application",
    "updates",
    "code",
    "pipeline",
    "builds",
    "tests",
    "deploys",
    "code",
    "every",
    "time",
    "code",
    "change",
    "based",
    "release",
    "process",
    "models",
    "define",
    "hand",
    "azure",
    "devops",
    "services",
    "teams",
    "share",
    "code",
    "track",
    "work",
    "ship",
    "software",
    "azure",
    "devops",
    "provides",
    "unlimited",
    "private",
    "git",
    "hosting",
    "cloud",
    "bill",
    "continuous",
    "integration",
    "agile",
    "planning",
    "release",
    "management",
    "continuous",
    "delivery",
    "cloud",
    "also",
    "includes",
    "broad",
    "integrated",
    "development",
    "environment",
    "support",
    "next",
    "comparison",
    "talk",
    "category",
    "tech",
    "stack",
    "belong",
    "see",
    "amazon",
    "web",
    "services",
    "code",
    "pipeline",
    "belongs",
    "continuous",
    "deployment",
    "category",
    "tech",
    "stack",
    "azure",
    "devops",
    "primarily",
    "classified",
    "integrated",
    "development",
    "environment",
    "tools",
    "let",
    "talk",
    "features",
    "amazon",
    "web",
    "services",
    "azure",
    "see",
    "amazon",
    "web",
    "services",
    "provides",
    "workflow",
    "modeling",
    "aws",
    "integration",
    "also",
    "plugins",
    "whereas",
    "azure",
    "hand",
    "provides",
    "agile",
    "tools",
    "like",
    "kanban",
    "boards",
    "backlogs",
    "scrum",
    "boards",
    "also",
    "provides",
    "reporting",
    "tools",
    "like",
    "dashboards",
    "widgets",
    "power",
    "bi",
    "etc",
    "also",
    "allows",
    "integrate",
    "git",
    "provides",
    "free",
    "private",
    "repositories",
    "pull",
    "requests",
    "people",
    "like",
    "aws",
    "extremely",
    "simple",
    "set",
    "whereas",
    "azure",
    "hand",
    "complete",
    "package",
    "full",
    "powerful",
    "let",
    "move",
    "check",
    "uses",
    "aws",
    "azure",
    "already",
    "mentioned",
    "aws",
    "extremely",
    "simple",
    "set",
    "also",
    "several",
    "managed",
    "services",
    "easily",
    "integrated",
    "github",
    "also",
    "parallel",
    "execution",
    "deployment",
    "completely",
    "automatic",
    "manual",
    "steps",
    "available",
    "never",
    "lost",
    "azure",
    "hand",
    "supports",
    "open",
    "source",
    "also",
    "several",
    "integrations",
    "easily",
    "integrated",
    "github",
    "jenkins",
    "also",
    "several",
    "project",
    "management",
    "features",
    "important",
    "plus",
    "point",
    "azure",
    "free",
    "stakeholders",
    "hope",
    "users",
    "aws",
    "azure",
    "extremely",
    "clear",
    "let",
    "move",
    "talk",
    "aws",
    "azure",
    "clients",
    "amazon",
    "web",
    "services",
    "used",
    "companies",
    "like",
    "play",
    "hq",
    "affirm",
    "curro",
    "education",
    "ready",
    "bitbank",
    "incorporation",
    "whereas",
    "azure",
    "clients",
    "like",
    "microsoft",
    "kingsman",
    "software",
    "evodeck",
    "digital",
    "muse",
    "energy",
    "market",
    "qr",
    "point",
    "next",
    "important",
    "difference",
    "tools",
    "cloud",
    "services",
    "integrated",
    "amazon",
    "web",
    "services",
    "see",
    "screen",
    "easily",
    "integrated",
    "github",
    "jenkins",
    "amazon",
    "ec2",
    "amazon",
    "s3",
    "aws",
    "elastic",
    "beanstalk",
    "run",
    "scope",
    "cloud",
    "base",
    "azure",
    "hand",
    "easily",
    "integrated",
    "kit",
    "github",
    "docker",
    "slack",
    "jenkins",
    "trello",
    "visual",
    "studio",
    "let",
    "move",
    "compare",
    "salary",
    "aws",
    "devops",
    "engineer",
    "azure",
    "devops",
    "engineer",
    "see",
    "screen",
    "already",
    "median",
    "salary",
    "aws",
    "devops",
    "engineer",
    "rupees",
    "4",
    "lakh",
    "67",
    "000",
    "rupees",
    "whereas",
    "median",
    "salary",
    "azure",
    "devops",
    "engineer",
    "rupees",
    "6",
    "lakhs",
    "4",
    "000",
    "rupees",
    "year",
    "music",
    "let",
    "address",
    "devops",
    "interview",
    "questions",
    "answers",
    "different",
    "topics",
    "covering",
    "session",
    "today",
    "questions",
    "general",
    "devops",
    "programming",
    "version",
    "control",
    "continuous",
    "integration",
    "continuous",
    "testing",
    "configuration",
    "management",
    "continuous",
    "monitoring",
    "finally",
    "containerization",
    "virtualization",
    "without",
    "much",
    "ado",
    "let",
    "talk",
    "general",
    "devops",
    "interview",
    "questions",
    "answers",
    "first",
    "question",
    "fundamental",
    "differences",
    "devops",
    "agile",
    "first",
    "feature",
    "addressing",
    "today",
    "agility",
    "devops",
    "agility",
    "seen",
    "development",
    "operations",
    "whereas",
    "agility",
    "agile",
    "seen",
    "development",
    "side",
    "second",
    "difference",
    "processes",
    "practices",
    "devops",
    "involves",
    "different",
    "processes",
    "continuous",
    "integration",
    "continuous",
    "development",
    "continuous",
    "testing",
    "etc",
    "whereas",
    "agile",
    "involves",
    "practices",
    "agile",
    "scrum",
    "agile",
    "kanban",
    "etc",
    "key",
    "focus",
    "area",
    "devops",
    "timeliness",
    "quality",
    "whereas",
    "agile",
    "timeliness",
    "main",
    "priority",
    "next",
    "feature",
    "talking",
    "release",
    "cycles",
    "development",
    "sprints",
    "develops",
    "smaller",
    "release",
    "cycles",
    "implemented",
    "immediate",
    "feedback",
    "whereas",
    "agile",
    "smaller",
    "release",
    "cycles",
    "next",
    "feature",
    "talking",
    "source",
    "feedback",
    "devops",
    "feedback",
    "self",
    "monitoring",
    "tools",
    "whereas",
    "agile",
    "customers",
    "finally",
    "scope",
    "work",
    "devops",
    "agility",
    "need",
    "automation",
    "whereas",
    "agile",
    "agility",
    "hope",
    "fundamental",
    "differences",
    "devops",
    "agile",
    "clear",
    "based",
    "different",
    "features",
    "available",
    "next",
    "question",
    "need",
    "devops",
    "according",
    "answer",
    "start",
    "explaining",
    "general",
    "market",
    "trend",
    "instead",
    "releasing",
    "big",
    "sets",
    "features",
    "companies",
    "trying",
    "see",
    "small",
    "features",
    "transported",
    "customers",
    "series",
    "release",
    "chains",
    "many",
    "advantages",
    "like",
    "quick",
    "feedback",
    "customers",
    "better",
    "quality",
    "software",
    "etc",
    "turn",
    "leads",
    "high",
    "customer",
    "satisfaction",
    "achieve",
    "companies",
    "required",
    "lower",
    "failure",
    "rate",
    "new",
    "releases",
    "increase",
    "deployment",
    "frequency",
    "shorten",
    "lead",
    "time",
    "fixes",
    "faster",
    "mean",
    "time",
    "recovery",
    "event",
    "new",
    "release",
    "crashing",
    "devops",
    "fulfills",
    "requirements",
    "helps",
    "achieving",
    "seamless",
    "software",
    "delivery",
    "give",
    "examples",
    "companies",
    "like",
    "etsy",
    "google",
    "amazon",
    "adopted",
    "devops",
    "achieve",
    "levels",
    "performance",
    "unthinkable",
    "even",
    "five",
    "years",
    "ago",
    "tens",
    "hundreds",
    "even",
    "thousands",
    "code",
    "deployments",
    "per",
    "day",
    "delivering",
    "stability",
    "reliability",
    "security",
    "next",
    "question",
    "devops",
    "different",
    "agile",
    "software",
    "development",
    "life",
    "cycle",
    "agile",
    "set",
    "values",
    "principles",
    "produce",
    "develop",
    "software",
    "example",
    "ideas",
    "want",
    "turn",
    "ideas",
    "working",
    "software",
    "use",
    "agile",
    "values",
    "principles",
    "way",
    "software",
    "might",
    "working",
    "developer",
    "laptop",
    "test",
    "environment",
    "want",
    "quickly",
    "easily",
    "repeatedly",
    "move",
    "software",
    "production",
    "infrastructure",
    "safe",
    "simple",
    "yet",
    "efficient",
    "manner",
    "devops",
    "definitely",
    "way",
    "need",
    "understand",
    "devops",
    "tools",
    "techniques",
    "summarize",
    "saying",
    "agile",
    "software",
    "development",
    "methodology",
    "focuses",
    "development",
    "software",
    "devops",
    "hand",
    "responsible",
    "development",
    "well",
    "deployment",
    "software",
    "safest",
    "reliable",
    "way",
    "possible",
    "moving",
    "top",
    "devops",
    "tools",
    "work",
    "together",
    "popular",
    "devops",
    "tools",
    "get",
    "version",
    "control",
    "system",
    "jenkins",
    "continuous",
    "integration",
    "selenium",
    "continuous",
    "testing",
    "puppet",
    "chef",
    "ansible",
    "configuration",
    "management",
    "deployment",
    "tools",
    "nagios",
    "used",
    "continuous",
    "monitoring",
    "finally",
    "docker",
    "used",
    "containerization",
    "also",
    "mention",
    "tool",
    "want",
    "make",
    "sure",
    "talk",
    "tools",
    "see",
    "screen",
    "right",
    "second",
    "part",
    "answer",
    "two",
    "possibilities",
    "experience",
    "tools",
    "mentioned",
    "say",
    "worked",
    "tools",
    "developing",
    "good",
    "quality",
    "software",
    "deploying",
    "software",
    "easily",
    "frequently",
    "reliably",
    "experience",
    "tools",
    "mention",
    "tools",
    "say",
    "specialization",
    "tools",
    "overview",
    "rest",
    "tools",
    "let",
    "talk",
    "generic",
    "logical",
    "flow",
    "everything",
    "gets",
    "automated",
    "seamless",
    "delivery",
    "however",
    "flow",
    "may",
    "vary",
    "organization",
    "organization",
    "per",
    "requirement",
    "firstly",
    "developers",
    "develop",
    "code",
    "source",
    "code",
    "managed",
    "version",
    "control",
    "system",
    "tools",
    "like",
    "git",
    "developers",
    "send",
    "code",
    "get",
    "repository",
    "changes",
    "made",
    "code",
    "committed",
    "particular",
    "repository",
    "jenkins",
    "pulls",
    "score",
    "repository",
    "using",
    "git",
    "plugin",
    "builds",
    "using",
    "tools",
    "like",
    "anto",
    "maven",
    "configuration",
    "management",
    "tools",
    "like",
    "puppet",
    "deploys",
    "provisions",
    "testing",
    "environment",
    "jenkins",
    "releases",
    "code",
    "test",
    "environment",
    "testing",
    "finally",
    "done",
    "using",
    "tools",
    "like",
    "selenium",
    "code",
    "tested",
    "jenkins",
    "sends",
    "deployment",
    "production",
    "server",
    "even",
    "production",
    "server",
    "provisioned",
    "maintained",
    "tools",
    "like",
    "puppet",
    "deployment",
    "continuously",
    "monitored",
    "tools",
    "like",
    "nagios",
    "docker",
    "containers",
    "provide",
    "testing",
    "environment",
    "test",
    "build",
    "features",
    "hope",
    "work",
    "together",
    "clear",
    "let",
    "move",
    "next",
    "question",
    "difference",
    "continuous",
    "delivery",
    "continuous",
    "deployment",
    "continuous",
    "delivery",
    "ensures",
    "code",
    "safely",
    "deployed",
    "onto",
    "production",
    "whereas",
    "continuous",
    "deployment",
    "every",
    "change",
    "passes",
    "automated",
    "test",
    "deployed",
    "production",
    "automatically",
    "continuous",
    "delivery",
    "also",
    "ensures",
    "business",
    "applications",
    "servers",
    "function",
    "expected",
    "hand",
    "continuous",
    "deployment",
    "makes",
    "software",
    "development",
    "release",
    "process",
    "faster",
    "robust",
    "continuous",
    "delivery",
    "delivers",
    "every",
    "change",
    "environment",
    "rigorous",
    "automated",
    "testing",
    "continuous",
    "deployment",
    "explicit",
    "approval",
    "developer",
    "requires",
    "developed",
    "culture",
    "monitoring",
    "hope",
    "differences",
    "continuous",
    "delivery",
    "continuous",
    "deployment",
    "clear",
    "see",
    "much",
    "interviewer",
    "going",
    "happy",
    "advantages",
    "devops",
    "answer",
    "use",
    "past",
    "experience",
    "explain",
    "devops",
    "helped",
    "previous",
    "job",
    "experience",
    "simply",
    "mention",
    "technical",
    "business",
    "benefits",
    "devops",
    "technical",
    "benefits",
    "devops",
    "allows",
    "continuous",
    "software",
    "delivery",
    "also",
    "less",
    "complex",
    "problems",
    "fix",
    "also",
    "faster",
    "resolution",
    "problems",
    "business",
    "benefits",
    "hand",
    "enables",
    "faster",
    "delivery",
    "features",
    "stable",
    "operating",
    "environments",
    "importantly",
    "time",
    "available",
    "add",
    "value",
    "rather",
    "fix",
    "maintain",
    "important",
    "thing",
    "devops",
    "help",
    "us",
    "achieve",
    "important",
    "thing",
    "devops",
    "helps",
    "us",
    "achieve",
    "get",
    "changes",
    "production",
    "quickly",
    "possible",
    "minimizing",
    "risks",
    "software",
    "quality",
    "assurance",
    "compilence",
    "primary",
    "objective",
    "devops",
    "however",
    "add",
    "many",
    "positive",
    "effects",
    "devops",
    "example",
    "clearer",
    "communication",
    "better",
    "working",
    "relationships",
    "teams",
    "worthy",
    "operations",
    "development",
    "teams",
    "collaborate",
    "together",
    "deliver",
    "good",
    "quality",
    "software",
    "turn",
    "leads",
    "higher",
    "customer",
    "satisfaction",
    "moving",
    "explain",
    "use",
    "case",
    "devops",
    "used",
    "industry",
    "real",
    "life",
    "many",
    "industries",
    "using",
    "devops",
    "mention",
    "use",
    "cases",
    "like",
    "amazon",
    "google",
    "netflix",
    "etc",
    "simply",
    "talk",
    "etsy",
    "etsy",
    "website",
    "focused",
    "handmade",
    "vintage",
    "items",
    "supplies",
    "well",
    "unique",
    "factory",
    "manufactured",
    "items",
    "etsy",
    "initially",
    "struggled",
    "slow",
    "painful",
    "site",
    "updates",
    "frequently",
    "caused",
    "site",
    "go",
    "affected",
    "sales",
    "millions",
    "etsy",
    "users",
    "sold",
    "goods",
    "online",
    "marketplace",
    "risks",
    "driving",
    "competitor",
    "help",
    "new",
    "technical",
    "management",
    "team",
    "etsy",
    "transitioned",
    "waterfall",
    "model",
    "produced",
    "4r",
    "full",
    "site",
    "deployments",
    "twice",
    "weekly",
    "agile",
    "approach",
    "today",
    "fully",
    "automated",
    "deployment",
    "pipeline",
    "continuous",
    "delivery",
    "practices",
    "reportedly",
    "resulted",
    "50",
    "deployments",
    "day",
    "fewer",
    "disruptions",
    "basically",
    "etsy",
    "employed",
    "continuous",
    "integration",
    "pipeline",
    "daily",
    "deployment",
    "activities",
    "eventually",
    "resulted",
    "deployments",
    "per",
    "day",
    "next",
    "question",
    "explain",
    "understanding",
    "expertise",
    "software",
    "development",
    "side",
    "technical",
    "operations",
    "side",
    "organization",
    "worked",
    "past",
    "answer",
    "share",
    "past",
    "experience",
    "try",
    "explain",
    "flexible",
    "previous",
    "job",
    "refer",
    "example",
    "devops",
    "engineers",
    "almost",
    "always",
    "work",
    "24",
    "bar",
    "7",
    "business",
    "critical",
    "online",
    "environment",
    "adaptable",
    "duties",
    "available",
    "take",
    "life",
    "system",
    "responsibility",
    "successfully",
    "automated",
    "processes",
    "support",
    "continuous",
    "software",
    "deployments",
    "experience",
    "public",
    "private",
    "clouds",
    "tools",
    "like",
    "chef",
    "puppet",
    "scripting",
    "automation",
    "tools",
    "like",
    "python",
    "php",
    "also",
    "background",
    "agile",
    "explain",
    "employer",
    "expertise",
    "understanding",
    "software",
    "development",
    "side",
    "technical",
    "operation",
    "side",
    "organization",
    "moving",
    "approach",
    "project",
    "needs",
    "implement",
    "devops",
    "following",
    "standard",
    "approaches",
    "used",
    "implement",
    "devops",
    "specific",
    "project",
    "stage",
    "one",
    "assessment",
    "existing",
    "process",
    "implementation",
    "two",
    "three",
    "weeks",
    "identify",
    "areas",
    "improvement",
    "team",
    "create",
    "roadmap",
    "implementation",
    "stage",
    "two",
    "create",
    "proof",
    "concept",
    "accepted",
    "approved",
    "team",
    "start",
    "actual",
    "implementation",
    "roll",
    "project",
    "plan",
    "finally",
    "stage",
    "3",
    "project",
    "ready",
    "implementing",
    "devops",
    "using",
    "tools",
    "like",
    "version",
    "control",
    "tools",
    "integration",
    "tools",
    "testing",
    "tools",
    "deployment",
    "tools",
    "delivery",
    "tools",
    "monitoring",
    "tools",
    "followed",
    "step",
    "following",
    "proper",
    "steps",
    "version",
    "control",
    "integration",
    "testing",
    "deployment",
    "delivery",
    "monitoring",
    "project",
    "ready",
    "devops",
    "implementation",
    "let",
    "move",
    "second",
    "part",
    "programming",
    "discussing",
    "programs",
    "commonly",
    "asked",
    "devops",
    "interview",
    "without",
    "much",
    "ado",
    "let",
    "check",
    "first",
    "program",
    "commonly",
    "asked",
    "fistbuzz",
    "implementation",
    "simple",
    "programming",
    "task",
    "print",
    "numbers",
    "1",
    "100",
    "number",
    "multiple",
    "three",
    "print",
    "message",
    "fizz",
    "multiple",
    "five",
    "print",
    "message",
    "buzz",
    "multiple",
    "print",
    "message",
    "fizzbuzz",
    "logic",
    "program",
    "extremely",
    "simple",
    "commonly",
    "asked",
    "fizzbuzz",
    "one",
    "program",
    "thorough",
    "see",
    "output",
    "multiples",
    "three",
    "print",
    "quiz",
    "multiples",
    "five",
    "print",
    "bus",
    "multiples",
    "five",
    "three",
    "15",
    "prince",
    "fizzbuzz",
    "hope",
    "clear",
    "see",
    "used",
    "simply",
    "condition",
    "alif",
    "condition",
    "simply",
    "print",
    "message",
    "one",
    "important",
    "programming",
    "task",
    "often",
    "asked",
    "questions",
    "based",
    "trees",
    "first",
    "one",
    "detect",
    "mirror",
    "tree",
    "check",
    "two",
    "trees",
    "mirror",
    "images",
    "following",
    "conditions",
    "must",
    "two",
    "first",
    "one",
    "root",
    "node",
    "scheme",
    "must",
    "second",
    "condition",
    "left",
    "subtree",
    "left",
    "tree",
    "right",
    "sub",
    "tree",
    "right",
    "trade",
    "mirror",
    "images",
    "third",
    "condition",
    "right",
    "subtree",
    "left",
    "tree",
    "left",
    "subtree",
    "right",
    "tree",
    "mirror",
    "images",
    "binary",
    "tree",
    "node",
    "class",
    "node",
    "given",
    "two",
    "trees",
    "say",
    "root",
    "1",
    "root",
    "2",
    "return",
    "true",
    "mirror",
    "base",
    "case",
    "empty",
    "return",
    "true",
    "compare",
    "recursively",
    "note",
    "recursive",
    "calls",
    "pass",
    "left",
    "one",
    "tree",
    "right",
    "tree",
    "function",
    "condition",
    "check",
    "finally",
    "create",
    "tree",
    "see",
    "mirror",
    "images",
    "true",
    "going",
    "print",
    "one",
    "symmetric",
    "going",
    "print",
    "neither",
    "conditions",
    "like",
    "two",
    "conditions",
    "satisfied",
    "true",
    "root",
    "1",
    "root",
    "2",
    "mirror",
    "images",
    "return",
    "false",
    "creating",
    "tree",
    "checking",
    "symmetric",
    "going",
    "print",
    "one",
    "else",
    "going",
    "print",
    "zero",
    "symmetric",
    "see",
    "node",
    "one",
    "left",
    "node",
    "right",
    "node",
    "2",
    "2",
    "left",
    "left",
    "three",
    "left",
    "right",
    "four",
    "right",
    "left",
    "four",
    "right",
    "right",
    "three",
    "symmetric",
    "going",
    "print",
    "one",
    "output",
    "next",
    "common",
    "question",
    "finding",
    "maximum",
    "height",
    "tree",
    "recursively",
    "calculate",
    "height",
    "left",
    "right",
    "sub",
    "trees",
    "node",
    "assign",
    "height",
    "node",
    "maximum",
    "heights",
    "two",
    "children",
    "plus",
    "one",
    "algorithm",
    "says",
    "first",
    "thing",
    "firstly",
    "create",
    "constructor",
    "create",
    "new",
    "node",
    "going",
    "initialize",
    "initially",
    "compute",
    "maximum",
    "depth",
    "height",
    "tree",
    "number",
    "nodes",
    "along",
    "longest",
    "part",
    "root",
    "node",
    "farthest",
    "leaf",
    "node",
    "simply",
    "return",
    "maximum",
    "height",
    "tree",
    "going",
    "create",
    "tree",
    "height",
    "always",
    "plus",
    "one",
    "including",
    "root",
    "driver",
    "program",
    "test",
    "function",
    "create",
    "tree",
    "simply",
    "print",
    "height",
    "node",
    "says",
    "four",
    "absolutely",
    "right",
    "moving",
    "know",
    "another",
    "important",
    "program",
    "logic",
    "serializing",
    "unserializing",
    "tree",
    "question",
    "goes",
    "given",
    "route",
    "binary",
    "implement",
    "serialized",
    "root",
    "serializes",
    "tree",
    "string",
    "deserialize",
    "deserializes",
    "string",
    "back",
    "tree",
    "firstly",
    "create",
    "binary",
    "tree",
    "using",
    "node",
    "class",
    "done",
    "serialize",
    "tree",
    "string",
    "see",
    "serialized",
    "function",
    "serialize",
    "string",
    "consider",
    "null",
    "nodes",
    "hash",
    "starting",
    "root",
    "depth",
    "first",
    "search",
    "used",
    "traverse",
    "tree",
    "node",
    "exists",
    "value",
    "appended",
    "string",
    "left",
    "subtree",
    "traversed",
    "process",
    "really",
    "continues",
    "children",
    "left",
    "hash",
    "appended",
    "array",
    "recursive",
    "function",
    "existed",
    "right",
    "subtree",
    "traversed",
    "process",
    "followed",
    "final",
    "resulting",
    "string",
    "returned",
    "deserialize",
    "string",
    "form",
    "tree",
    "first",
    "word",
    "space",
    "separated",
    "string",
    "considered",
    "root",
    "hash",
    "encountered",
    "considered",
    "empty",
    "node",
    "none",
    "returned",
    "remaining",
    "cases",
    "new",
    "node",
    "value",
    "word",
    "formed",
    "remaining",
    "string",
    "towers",
    "function",
    "recursively",
    "called",
    "end",
    "string",
    "reached",
    "see",
    "string",
    "serializing",
    "node",
    "written",
    "assert",
    "true",
    "depth",
    "first",
    "search",
    "really",
    "important",
    "given",
    "binary",
    "tree",
    "traverse",
    "using",
    "depth",
    "first",
    "search",
    "using",
    "recursion",
    "unlike",
    "linear",
    "data",
    "structures",
    "one",
    "logical",
    "way",
    "traverse",
    "trees",
    "traversed",
    "two",
    "different",
    "ways",
    "usually",
    "depth",
    "first",
    "search",
    "breadth",
    "first",
    "search",
    "coding",
    "sure",
    "must",
    "much",
    "aware",
    "tfs",
    "bfs",
    "depth",
    "first",
    "search",
    "basically",
    "technique",
    "used",
    "traversing",
    "particular",
    "triograph",
    "back",
    "tracing",
    "used",
    "traversal",
    "traversal",
    "first",
    "deepest",
    "note",
    "first",
    "visited",
    "back",
    "traces",
    "parents",
    "nodes",
    "sibling",
    "particular",
    "node",
    "really",
    "exists",
    "graphs",
    "usually",
    "cycles",
    "disconnectivity",
    "unlike",
    "graph",
    "tree",
    "contain",
    "cycle",
    "always",
    "connected",
    "dfs",
    "tree",
    "relatively",
    "easy",
    "see",
    "firstly",
    "begin",
    "node",
    "traverse",
    "adjacent",
    "children",
    "without",
    "caring",
    "cycles",
    "begin",
    "single",
    "node",
    "traverse",
    "way",
    "guaranteed",
    "traverse",
    "entire",
    "tree",
    "disconnectivity",
    "three",
    "different",
    "orders",
    "order",
    "traversal",
    "traversal",
    "know",
    "even",
    "post",
    "order",
    "traversal",
    "first",
    "case",
    "print",
    "order",
    "case",
    "binary",
    "search",
    "trees",
    "order",
    "traversal",
    "gives",
    "nodes",
    "order",
    "get",
    "nodes",
    "binary",
    "search",
    "trees",
    "order",
    "variation",
    "order",
    "traversal",
    "order",
    "traversals",
    "reversed",
    "used",
    "next",
    "function",
    "post",
    "order",
    "traversal",
    "useful",
    "get",
    "expression",
    "expression",
    "tree",
    "simple",
    "finally",
    "traversal",
    "used",
    "really",
    "create",
    "copy",
    "tree",
    "also",
    "used",
    "get",
    "prefix",
    "expression",
    "uh",
    "expression",
    "tree",
    "hope",
    "clear",
    "going",
    "print",
    "order",
    "binary",
    "tree",
    "really",
    "traverses",
    "tree",
    "particular",
    "order",
    "post",
    "order",
    "travis",
    "left",
    "tree",
    "right",
    "tree",
    "visits",
    "root",
    "whereas",
    "order",
    "traverse",
    "left",
    "tree",
    "visits",
    "route",
    "traverses",
    "right",
    "sub",
    "whereas",
    "visits",
    "route",
    "first",
    "traverses",
    "left",
    "subtree",
    "finally",
    "travis",
    "right",
    "subject",
    "prints",
    "accordingly",
    "order",
    "tree",
    "one",
    "two",
    "three",
    "four",
    "five",
    "accordingly",
    "sprints",
    "according",
    "traversal",
    "moves",
    "recursively",
    "prints",
    "order",
    "tree",
    "see",
    "tower",
    "select",
    "first",
    "traverses",
    "root",
    "traverses",
    "left",
    "subtree",
    "two",
    "four",
    "finally",
    "come",
    "back",
    "right",
    "subtree",
    "touches",
    "five",
    "comes",
    "back",
    "three",
    "way",
    "order",
    "post",
    "order",
    "tower",
    "cells",
    "printed",
    "hand",
    "level",
    "order",
    "traversal",
    "tree",
    "breadth",
    "first",
    "traversal",
    "tree",
    "going",
    "use",
    "q",
    "help",
    "queues",
    "going",
    "implement",
    "breadth",
    "first",
    "search",
    "going",
    "firstly",
    "create",
    "empty",
    "queue",
    "level",
    "order",
    "traversal",
    "append",
    "queue",
    "root",
    "loop",
    "q",
    "length",
    "queue",
    "greater",
    "0",
    "loop",
    "entire",
    "function",
    "print",
    "queues",
    "data",
    "enqueue",
    "nodes",
    "children",
    "first",
    "left",
    "right",
    "children",
    "dq",
    "node",
    "q",
    "finally",
    "print",
    "level",
    "order",
    "traversal",
    "binary",
    "tree",
    "next",
    "important",
    "function",
    "program",
    "topological",
    "sort",
    "topological",
    "sorting",
    "directed",
    "acyclic",
    "graph",
    "linear",
    "ordering",
    "vertices",
    "every",
    "directed",
    "edge",
    "uv",
    "vertex",
    "u",
    "comes",
    "v",
    "ordering",
    "topological",
    "sorting",
    "graph",
    "possible",
    "graph",
    "directed",
    "cyclic",
    "graph",
    "depth",
    "first",
    "search",
    "print",
    "vertex",
    "recursively",
    "call",
    "dfs",
    "adjacent",
    "vertices",
    "topological",
    "sorting",
    "need",
    "print",
    "vertex",
    "adjacent",
    "vertices",
    "difference",
    "dfs",
    "depth",
    "first",
    "search",
    "topological",
    "sort",
    "modify",
    "dfs",
    "find",
    "topological",
    "sorting",
    "graph",
    "dfs",
    "start",
    "vertex",
    "first",
    "print",
    "recursively",
    "called",
    "efs",
    "adjacent",
    "vertices",
    "political",
    "sorting",
    "use",
    "temporary",
    "stack",
    "print",
    "vertex",
    "immediately",
    "first",
    "recursively",
    "call",
    "political",
    "sorting",
    "adjacent",
    "vertices",
    "push",
    "onto",
    "stack",
    "finally",
    "print",
    "contents",
    "stack",
    "important",
    "know",
    "vertex",
    "pushed",
    "stack",
    "adjacent",
    "vertices",
    "already",
    "stack",
    "hope",
    "topological",
    "sorting",
    "makes",
    "sense",
    "really",
    "really",
    "function",
    "create",
    "class",
    "represent",
    "graph",
    "adding",
    "function",
    "add",
    "edge",
    "graph",
    "recursive",
    "function",
    "called",
    "use",
    "topological",
    "sort",
    "mark",
    "current",
    "node",
    "visited",
    "recursively",
    "visit",
    "vertices",
    "adjacent",
    "particular",
    "vertex",
    "finally",
    "push",
    "current",
    "vertex",
    "stack",
    "stores",
    "final",
    "result",
    "write",
    "function",
    "topological",
    "sort",
    "repeatedly",
    "call",
    "function",
    "finally",
    "call",
    "function",
    "topological",
    "sort",
    "also",
    "call",
    "recursive",
    "function",
    "also",
    "call",
    "recursive",
    "helper",
    "function",
    "store",
    "topological",
    "sorting",
    "starting",
    "vertices",
    "one",
    "one",
    "finally",
    "print",
    "contents",
    "stack",
    "printing",
    "contents",
    "stack",
    "reverse",
    "order",
    "543210",
    "create",
    "graph",
    "finally",
    "call",
    "function",
    "eventually",
    "print",
    "graph",
    "reverse",
    "order",
    "hope",
    "clear",
    "moving",
    "another",
    "important",
    "topic",
    "sets",
    "know",
    "basic",
    "functions",
    "like",
    "removing",
    "duplicates",
    "defining",
    "function",
    "named",
    "remove",
    "duplicates",
    "first",
    "going",
    "convert",
    "array",
    "set",
    "eventually",
    "list",
    "going",
    "define",
    "array",
    "print",
    "know",
    "python",
    "sure",
    "must",
    "aware",
    "next",
    "detect",
    "duplicates",
    "simply",
    "going",
    "use",
    "set",
    "going",
    "traversing",
    "entire",
    "list",
    "elements",
    "mentioned",
    "particular",
    "list",
    "defined",
    "count",
    "data",
    "within",
    "set",
    "repeating",
    "occurred",
    "simply",
    "going",
    "include",
    "output",
    "data",
    "elements",
    "within",
    "list",
    "occurred",
    "simply",
    "going",
    "keep",
    "count",
    "going",
    "display",
    "output",
    "strings",
    "another",
    "important",
    "topic",
    "strings",
    "extremely",
    "easy",
    "simple",
    "programs",
    "help",
    "slicing",
    "python",
    "reverse",
    "string",
    "using",
    "going",
    "print",
    "reverse",
    "particular",
    "string",
    "going",
    "incorporate",
    "length",
    "string",
    "obtained",
    "using",
    "len",
    "method",
    "simply",
    "going",
    "use",
    "print",
    "simply",
    "print",
    "number",
    "elements",
    "string",
    "another",
    "important",
    "program",
    "thorough",
    "permutations",
    "different",
    "kinds",
    "permutation",
    "combination",
    "programs",
    "asked",
    "devops",
    "interview",
    "python",
    "program",
    "print",
    "permutation",
    "using",
    "library",
    "functions",
    "use",
    "permutations",
    "import",
    "permutations",
    "library",
    "use",
    "types",
    "permutations",
    "occur",
    "three",
    "numbers",
    "say",
    "one",
    "three",
    "print",
    "different",
    "combinations",
    "occur",
    "three",
    "numbers",
    "one",
    "two",
    "three",
    "permutations",
    "another",
    "important",
    "topic",
    "must",
    "aware",
    "python",
    "program",
    "print",
    "permutation",
    "using",
    "library",
    "functions",
    "permutation",
    "used",
    "familiar",
    "python",
    "see",
    "want",
    "permutations",
    "three",
    "numbers",
    "one",
    "three",
    "going",
    "define",
    "variable",
    "use",
    "function",
    "permutations",
    "three",
    "numbers",
    "one",
    "two",
    "three",
    "print",
    "list",
    "possible",
    "permutations",
    "three",
    "numbers",
    "see",
    "output",
    "programs",
    "even",
    "quick",
    "sort",
    "merge",
    "saw",
    "really",
    "important",
    "know",
    "basic",
    "functions",
    "programs",
    "asked",
    "saying",
    "programs",
    "compulsively",
    "asked",
    "devops",
    "interview",
    "ones",
    "commonly",
    "asked",
    "made",
    "list",
    "programs",
    "hope",
    "clear",
    "let",
    "move",
    "next",
    "topic",
    "without",
    "much",
    "ado",
    "let",
    "move",
    "third",
    "part",
    "devops",
    "interview",
    "questions",
    "answer",
    "session",
    "first",
    "question",
    "addressing",
    "version",
    "control",
    "version",
    "control",
    "benefits",
    "version",
    "control",
    "system",
    "records",
    "changes",
    "file",
    "set",
    "files",
    "time",
    "recall",
    "specific",
    "versions",
    "later",
    "version",
    "control",
    "systems",
    "consists",
    "central",
    "shared",
    "repository",
    "teammates",
    "commit",
    "changes",
    "file",
    "set",
    "files",
    "mention",
    "uses",
    "version",
    "control",
    "version",
    "control",
    "allows",
    "revert",
    "files",
    "back",
    "previous",
    "state",
    "also",
    "allows",
    "revert",
    "entire",
    "project",
    "back",
    "previous",
    "state",
    "compare",
    "changes",
    "time",
    "see",
    "last",
    "modified",
    "something",
    "might",
    "causing",
    "problem",
    "also",
    "allows",
    "check",
    "introduced",
    "issue",
    "time",
    "let",
    "move",
    "talk",
    "benefits",
    "version",
    "control",
    "system",
    "version",
    "control",
    "system",
    "team",
    "members",
    "allowed",
    "work",
    "freely",
    "file",
    "time",
    "later",
    "allow",
    "merge",
    "changes",
    "common",
    "version",
    "also",
    "past",
    "versions",
    "variants",
    "neatly",
    "packed",
    "inside",
    "version",
    "control",
    "system",
    "need",
    "request",
    "version",
    "time",
    "snapshot",
    "complete",
    "project",
    "right",
    "hand",
    "another",
    "benefit",
    "every",
    "time",
    "save",
    "new",
    "version",
    "project",
    "version",
    "control",
    "system",
    "requires",
    "provide",
    "short",
    "description",
    "changed",
    "additionally",
    "see",
    "exactly",
    "changed",
    "files",
    "content",
    "allows",
    "know",
    "made",
    "changes",
    "project",
    "watch",
    "time",
    "last",
    "benefit",
    "distributed",
    "version",
    "control",
    "system",
    "like",
    "git",
    "allows",
    "team",
    "members",
    "complete",
    "history",
    "project",
    "breakdown",
    "central",
    "server",
    "use",
    "teammates",
    "local",
    "get",
    "repository",
    "next",
    "question",
    "describe",
    "various",
    "branching",
    "strategies",
    "used",
    "question",
    "asked",
    "test",
    "branching",
    "experience",
    "tell",
    "used",
    "branching",
    "previous",
    "job",
    "purpose",
    "serve",
    "refer",
    "points",
    "addressing",
    "first",
    "type",
    "branching",
    "feature",
    "branching",
    "feature",
    "branch",
    "model",
    "keeps",
    "changes",
    "particular",
    "feature",
    "inside",
    "branch",
    "feature",
    "fully",
    "tested",
    "validated",
    "automated",
    "tests",
    "branch",
    "merged",
    "master",
    "second",
    "type",
    "branching",
    "task",
    "branching",
    "model",
    "task",
    "implemented",
    "branch",
    "task",
    "key",
    "included",
    "branch",
    "name",
    "easy",
    "see",
    "code",
    "implements",
    "task",
    "look",
    "task",
    "key",
    "branch",
    "name",
    "third",
    "type",
    "branching",
    "release",
    "branching",
    "develop",
    "branch",
    "acquired",
    "enough",
    "features",
    "release",
    "clone",
    "branch",
    "form",
    "release",
    "branch",
    "creating",
    "branch",
    "starts",
    "next",
    "release",
    "cycle",
    "new",
    "features",
    "added",
    "point",
    "bug",
    "fixes",
    "documentation",
    "generation",
    "release",
    "oriented",
    "tasks",
    "go",
    "branch",
    "ready",
    "ship",
    "release",
    "gets",
    "merged",
    "master",
    "tagged",
    "version",
    "number",
    "addition",
    "merged",
    "back",
    "develop",
    "branch",
    "may",
    "progress",
    "since",
    "release",
    "initiated",
    "end",
    "mention",
    "branching",
    "strategies",
    "vary",
    "one",
    "organization",
    "another",
    "know",
    "basic",
    "branching",
    "operations",
    "like",
    "delete",
    "merge",
    "checking",
    "branch",
    "etc",
    "next",
    "important",
    "question",
    "git",
    "git",
    "distributed",
    "version",
    "control",
    "system",
    "track",
    "changes",
    "file",
    "allows",
    "revert",
    "back",
    "particular",
    "change",
    "distributed",
    "architecture",
    "provides",
    "many",
    "advantages",
    "version",
    "control",
    "systems",
    "like",
    "svn",
    "one",
    "major",
    "advantage",
    "rely",
    "central",
    "server",
    "store",
    "versions",
    "project",
    "files",
    "instead",
    "every",
    "developer",
    "clones",
    "copy",
    "repository",
    "local",
    "repository",
    "full",
    "history",
    "project",
    "hard",
    "drive",
    "server",
    "outage",
    "need",
    "recovery",
    "one",
    "teammates",
    "local",
    "get",
    "repository",
    "central",
    "cloud",
    "repository",
    "well",
    "developers",
    "commit",
    "changes",
    "share",
    "teammates",
    "see",
    "diagram",
    "distributed",
    "version",
    "control",
    "central",
    "repository",
    "working",
    "copy",
    "developer",
    "local",
    "repositories",
    "make",
    "changes",
    "regularly",
    "want",
    "push",
    "changes",
    "central",
    "repository",
    "teams",
    "look",
    "upon",
    "easily",
    "using",
    "git",
    "moving",
    "next",
    "question",
    "version",
    "control",
    "push",
    "file",
    "local",
    "system",
    "github",
    "repository",
    "using",
    "git",
    "firstly",
    "connect",
    "local",
    "repository",
    "remote",
    "repository",
    "using",
    "command",
    "git",
    "remote",
    "add",
    "origin",
    "web",
    "address",
    "example",
    "given",
    "git",
    "remote",
    "ad",
    "origin",
    "copied",
    "web",
    "address",
    "github",
    "url",
    "https",
    "kavya",
    "secondly",
    "push",
    "file",
    "remote",
    "repository",
    "using",
    "command",
    "git",
    "push",
    "origin",
    "master",
    "pushing",
    "file",
    "master",
    "branch",
    "next",
    "question",
    "bear",
    "repository",
    "different",
    "standard",
    "way",
    "initializing",
    "git",
    "repository",
    "either",
    "using",
    "standard",
    "method",
    "using",
    "git",
    "initialization",
    "command",
    "git",
    "n",
    "allow",
    "create",
    "working",
    "directory",
    "dot",
    "git",
    "subfolders",
    "created",
    "git",
    "related",
    "revision",
    "history",
    "second",
    "way",
    "using",
    "bear",
    "way",
    "get",
    "init",
    "hyphen",
    "hyphen",
    "pair",
    "contain",
    "working",
    "checked",
    "copy",
    "source",
    "file",
    "bear",
    "repositories",
    "store",
    "git",
    "revision",
    "history",
    "root",
    "folder",
    "repository",
    "instead",
    "dot",
    "git",
    "subfolder",
    "difference",
    "standard",
    "method",
    "barrier",
    "git",
    "revert",
    "commit",
    "already",
    "pushed",
    "made",
    "public",
    "two",
    "answers",
    "question",
    "make",
    "sure",
    "include",
    "used",
    "depending",
    "situation",
    "first",
    "way",
    "remove",
    "fix",
    "bad",
    "file",
    "new",
    "commit",
    "push",
    "remote",
    "repository",
    "natural",
    "way",
    "fix",
    "error",
    "made",
    "necessary",
    "changes",
    "file",
    "commit",
    "remote",
    "repository",
    "use",
    "git",
    "commit",
    "hyphen",
    "n",
    "commit",
    "message",
    "type",
    "commit",
    "message",
    "second",
    "way",
    "create",
    "new",
    "comet",
    "unders",
    "changes",
    "made",
    "bad",
    "commit",
    "use",
    "command",
    "git",
    "revert",
    "name",
    "bad",
    "commit",
    "hope",
    "clear",
    "let",
    "move",
    "next",
    "question",
    "git",
    "stash",
    "git",
    "developer",
    "working",
    "current",
    "branch",
    "wants",
    "switch",
    "another",
    "branch",
    "work",
    "something",
    "else",
    "developer",
    "want",
    "commit",
    "changes",
    "unfinished",
    "work",
    "solution",
    "particular",
    "issue",
    "get",
    "stashed",
    "git",
    "stash",
    "takes",
    "modified",
    "tracked",
    "files",
    "saves",
    "stack",
    "unfinished",
    "changes",
    "reapply",
    "time",
    "next",
    "question",
    "git",
    "bisect",
    "use",
    "determine",
    "source",
    "bug",
    "would",
    "suggest",
    "first",
    "give",
    "small",
    "definition",
    "get",
    "bisect",
    "get",
    "bisect",
    "used",
    "find",
    "commit",
    "introduced",
    "bug",
    "using",
    "binary",
    "search",
    "command",
    "git",
    "bisect",
    "git",
    "bisect",
    "sub",
    "command",
    "option",
    "commands",
    "since",
    "mentioned",
    "command",
    "explain",
    "command",
    "command",
    "uses",
    "binary",
    "search",
    "algorithm",
    "find",
    "commit",
    "project",
    "history",
    "introduced",
    "bug",
    "use",
    "first",
    "telling",
    "bad",
    "commit",
    "known",
    "contain",
    "bug",
    "good",
    "commit",
    "known",
    "bug",
    "introduced",
    "get",
    "bisect",
    "picks",
    "commit",
    "two",
    "endpoints",
    "asks",
    "whether",
    "selected",
    "commit",
    "good",
    "bad",
    "continues",
    "narrowing",
    "range",
    "finds",
    "exact",
    "commit",
    "introduced",
    "change",
    "hope",
    "git",
    "bisect",
    "used",
    "determine",
    "bug",
    "easy",
    "understandable",
    "moving",
    "gitry",
    "base",
    "used",
    "resolve",
    "conflicts",
    "feature",
    "branch",
    "much",
    "according",
    "start",
    "saying",
    "gitry",
    "base",
    "command",
    "allow",
    "merge",
    "another",
    "branch",
    "branch",
    "currently",
    "walking",
    "move",
    "local",
    "commits",
    "ahead",
    "rebase",
    "branch",
    "top",
    "history",
    "particular",
    "branch",
    "defined",
    "gitry",
    "base",
    "give",
    "example",
    "explain",
    "example",
    "show",
    "used",
    "resolve",
    "conflicts",
    "feature",
    "branch",
    "march",
    "since",
    "defined",
    "gatorade",
    "base",
    "explain",
    "example",
    "feature",
    "branch",
    "created",
    "master",
    "since",
    "master",
    "branch",
    "received",
    "new",
    "commits",
    "gitrebase",
    "used",
    "move",
    "feature",
    "branch",
    "tip",
    "master",
    "command",
    "effectively",
    "replay",
    "changes",
    "made",
    "feature",
    "branch",
    "tip",
    "master",
    "allowing",
    "configs",
    "resolved",
    "process",
    "done",
    "care",
    "allow",
    "feature",
    "branch",
    "merged",
    "master",
    "relative",
    "ease",
    "sometimes",
    "simple",
    "fast",
    "forward",
    "operation",
    "find",
    "list",
    "files",
    "changed",
    "particular",
    "commit",
    "answer",
    "instead",
    "telling",
    "command",
    "explain",
    "exactly",
    "command",
    "say",
    "get",
    "list",
    "files",
    "changed",
    "particular",
    "commit",
    "use",
    "command",
    "git",
    "f",
    "f",
    "hyphen",
    "tree",
    "space",
    "hyphen",
    "r",
    "hash",
    "get",
    "list",
    "files",
    "changed",
    "particular",
    "commit",
    "use",
    "command",
    "git",
    "diff",
    "3",
    "hyphen",
    "r",
    "hash",
    "particular",
    "hash",
    "given",
    "commit",
    "hash",
    "list",
    "files",
    "change",
    "added",
    "particular",
    "commit",
    "hyphen",
    "r",
    "flag",
    "makes",
    "command",
    "list",
    "individual",
    "files",
    "rather",
    "collapsing",
    "root",
    "directory",
    "names",
    "also",
    "say",
    "output",
    "also",
    "include",
    "extra",
    "information",
    "easily",
    "suppressed",
    "including",
    "two",
    "flags",
    "git",
    "diff",
    "tree",
    "hyphen",
    "commit",
    "id",
    "hyphen",
    "name",
    "hyphen",
    "r",
    "hash",
    "hyphen",
    "commit",
    "id",
    "suppress",
    "commit",
    "hashes",
    "appearing",
    "output",
    "hyphen",
    "name",
    "print",
    "file",
    "names",
    "instead",
    "parts",
    "hope",
    "clear",
    "moving",
    "set",
    "script",
    "run",
    "every",
    "time",
    "repository",
    "receives",
    "new",
    "commits",
    "push",
    "three",
    "ways",
    "configure",
    "script",
    "run",
    "every",
    "time",
    "repository",
    "receives",
    "new",
    "commits",
    "push",
    "one",
    "needs",
    "define",
    "either",
    "update",
    "post",
    "receive",
    "hook",
    "depending",
    "exactly",
    "script",
    "needs",
    "triggered",
    "hook",
    "destination",
    "repository",
    "invoked",
    "commits",
    "push",
    "script",
    "bound",
    "hook",
    "executed",
    "references",
    "updated",
    "useful",
    "hook",
    "run",
    "scripts",
    "help",
    "enforce",
    "development",
    "policies",
    "update",
    "hook",
    "works",
    "similar",
    "manner",
    "hook",
    "also",
    "triggered",
    "updates",
    "actually",
    "made",
    "however",
    "update",
    "hook",
    "called",
    "every",
    "commit",
    "pushed",
    "destination",
    "repository",
    "finally",
    "post",
    "receive",
    "hook",
    "repository",
    "invoked",
    "updates",
    "accepted",
    "destination",
    "repository",
    "ideal",
    "place",
    "configure",
    "simple",
    "deployment",
    "scripts",
    "invoke",
    "continuous",
    "integration",
    "systems",
    "dispatch",
    "notification",
    "emails",
    "repository",
    "maintainers",
    "etc",
    "hooks",
    "local",
    "every",
    "git",
    "repositories",
    "versioned",
    "scripts",
    "either",
    "created",
    "within",
    "hooks",
    "directory",
    "inside",
    "dot",
    "kit",
    "directory",
    "created",
    "elsewhere",
    "links",
    "scripts",
    "placed",
    "within",
    "directory",
    "let",
    "us",
    "look",
    "continuous",
    "integration",
    "interview",
    "questions",
    "first",
    "one",
    "meant",
    "continuous",
    "integration",
    "continuous",
    "integration",
    "development",
    "practice",
    "requires",
    "developers",
    "integrate",
    "code",
    "shared",
    "repository",
    "several",
    "times",
    "day",
    "verified",
    "automated",
    "build",
    "allowing",
    "teams",
    "detect",
    "problems",
    "early",
    "also",
    "suggest",
    "explain",
    "implemented",
    "previous",
    "job",
    "refer",
    "diagram",
    "given",
    "see",
    "developers",
    "first",
    "check",
    "code",
    "private",
    "workspaces",
    "done",
    "commit",
    "changes",
    "shared",
    "repository",
    "version",
    "control",
    "repository",
    "continuous",
    "integration",
    "server",
    "monitors",
    "repository",
    "checks",
    "changes",
    "occur",
    "continuous",
    "integration",
    "server",
    "pulls",
    "changes",
    "builds",
    "system",
    "also",
    "runs",
    "unit",
    "integration",
    "tests",
    "continuous",
    "integration",
    "server",
    "inform",
    "team",
    "successful",
    "build",
    "build",
    "test",
    "fails",
    "continuous",
    "integration",
    "server",
    "alert",
    "team",
    "team",
    "try",
    "fix",
    "issue",
    "earliest",
    "opportunity",
    "process",
    "keeps",
    "repeating",
    "entire",
    "continuous",
    "integration",
    "pipeline",
    "short",
    "moving",
    "need",
    "continuous",
    "integration",
    "development",
    "testing",
    "answer",
    "focus",
    "need",
    "continuous",
    "integration",
    "suggestion",
    "would",
    "mention",
    "two",
    "important",
    "points",
    "firstly",
    "continuous",
    "integration",
    "development",
    "testing",
    "improves",
    "quality",
    "software",
    "reduces",
    "time",
    "taken",
    "deliver",
    "replacing",
    "traditional",
    "practice",
    "testing",
    "completing",
    "development",
    "also",
    "allows",
    "development",
    "team",
    "easily",
    "detect",
    "locate",
    "problems",
    "early",
    "developers",
    "need",
    "integrate",
    "code",
    "shared",
    "repository",
    "several",
    "times",
    "day",
    "frequently",
    "automatically",
    "tested",
    "moving",
    "third",
    "question",
    "success",
    "factors",
    "continuous",
    "integration",
    "mention",
    "requirements",
    "continuous",
    "integration",
    "include",
    "following",
    "points",
    "continuous",
    "integration",
    "allows",
    "maintain",
    "code",
    "repository",
    "automates",
    "build",
    "makes",
    "build",
    "continuous",
    "integration",
    "everyone",
    "commits",
    "baseline",
    "every",
    "single",
    "day",
    "every",
    "commit",
    "made",
    "baseline",
    "built",
    "keep",
    "build",
    "fast",
    "important",
    "test",
    "clone",
    "production",
    "environment",
    "also",
    "makes",
    "easy",
    "get",
    "latest",
    "deliverables",
    "everyone",
    "see",
    "results",
    "latest",
    "bills",
    "finally",
    "automates",
    "deployment",
    "fourth",
    "question",
    "explain",
    "move",
    "copy",
    "jenkins",
    "one",
    "server",
    "another",
    "approach",
    "task",
    "copying",
    "jobs",
    "directory",
    "old",
    "server",
    "new",
    "one",
    "multiple",
    "ways",
    "firstly",
    "move",
    "job",
    "one",
    "installation",
    "jenkins",
    "another",
    "simply",
    "copying",
    "corresponding",
    "job",
    "directory",
    "also",
    "make",
    "copy",
    "existing",
    "job",
    "making",
    "clone",
    "job",
    "directory",
    "different",
    "name",
    "also",
    "rename",
    "existing",
    "job",
    "renaming",
    "directory",
    "also",
    "important",
    "keep",
    "mind",
    "change",
    "job",
    "name",
    "need",
    "change",
    "job",
    "tries",
    "call",
    "rename",
    "job",
    "fifth",
    "question",
    "explain",
    "create",
    "backup",
    "copy",
    "files",
    "jenkins",
    "answer",
    "question",
    "really",
    "direct",
    "create",
    "backup",
    "need",
    "periodically",
    "backup",
    "jenkins",
    "home",
    "directory",
    "contains",
    "build",
    "jobs",
    "configurations",
    "slave",
    "node",
    "configurations",
    "build",
    "history",
    "create",
    "backup",
    "jenkins",
    "setup",
    "copy",
    "directory",
    "also",
    "copy",
    "job",
    "directory",
    "clone",
    "replicate",
    "job",
    "rename",
    "directory",
    "hope",
    "clear",
    "let",
    "move",
    "sixth",
    "question",
    "session",
    "explain",
    "set",
    "jenkins",
    "job",
    "approach",
    "answer",
    "first",
    "mention",
    "create",
    "jenkins",
    "job",
    "go",
    "jenkins",
    "top",
    "page",
    "select",
    "new",
    "job",
    "choose",
    "build",
    "freestyle",
    "software",
    "project",
    "tell",
    "elements",
    "freestyle",
    "job",
    "firstly",
    "optional",
    "scm",
    "cvs",
    "subversion",
    "source",
    "code",
    "resides",
    "optional",
    "triggers",
    "control",
    "jenkins",
    "perform",
    "bills",
    "sort",
    "build",
    "script",
    "performs",
    "build",
    "real",
    "work",
    "really",
    "happens",
    "optional",
    "steps",
    "collect",
    "information",
    "build",
    "archiving",
    "artifacts",
    "recording",
    "java",
    "dock",
    "test",
    "results",
    "optional",
    "steps",
    "notify",
    "people",
    "systems",
    "build",
    "result",
    "sending",
    "emails",
    "ims",
    "updating",
    "issue",
    "trackers",
    "etc",
    "moving",
    "mention",
    "useful",
    "plugins",
    "jenkins",
    "useful",
    "important",
    "plugins",
    "made",
    "project",
    "amazon",
    "ec2",
    "html",
    "publisher",
    "copy",
    "artifact",
    "join",
    "green",
    "balls",
    "plugins",
    "feel",
    "useful",
    "plugins",
    "want",
    "include",
    "plugins",
    "mentioned",
    "add",
    "well",
    "make",
    "sure",
    "first",
    "mention",
    "plugins",
    "screen",
    "right",
    "next",
    "important",
    "question",
    "secure",
    "jenkins",
    "ways",
    "one",
    "going",
    "talk",
    "please",
    "mention",
    "standard",
    "way",
    "secure",
    "jenkins",
    "firstly",
    "ensure",
    "global",
    "security",
    "ensure",
    "jenkins",
    "integrated",
    "company",
    "user",
    "directory",
    "appropriate",
    "plugin",
    "also",
    "ensure",
    "matrix",
    "project",
    "matrix",
    "enabled",
    "access",
    "automate",
    "process",
    "setting",
    "rights",
    "privileges",
    "jenkins",
    "custom",
    "version",
    "control",
    "skipped",
    "limit",
    "physical",
    "access",
    "jenkins",
    "data",
    "folders",
    "periodically",
    "run",
    "security",
    "audits",
    "jenkins",
    "one",
    "popular",
    "tools",
    "used",
    "extensively",
    "devops",
    "many",
    "ways",
    "secure",
    "jenkins",
    "way",
    "could",
    "explain",
    "could",
    "explain",
    "standard",
    "method",
    "let",
    "move",
    "continuous",
    "testing",
    "questions",
    "first",
    "question",
    "continuous",
    "testing",
    "continuous",
    "testing",
    "process",
    "executing",
    "automated",
    "tests",
    "part",
    "software",
    "delivery",
    "pipeline",
    "obtain",
    "immediate",
    "feedback",
    "business",
    "risks",
    "associated",
    "latest",
    "build",
    "way",
    "build",
    "tested",
    "continuously",
    "allowing",
    "development",
    "teams",
    "get",
    "fast",
    "feedback",
    "prevent",
    "problems",
    "progressing",
    "next",
    "stage",
    "software",
    "delivery",
    "life",
    "cycle",
    "dramatically",
    "speeds",
    "developer",
    "workflow",
    "need",
    "manually",
    "rebuild",
    "project",
    "rerun",
    "tests",
    "making",
    "changes",
    "moving",
    "next",
    "question",
    "automation",
    "testing",
    "benefits",
    "automation",
    "testing",
    "automation",
    "testing",
    "test",
    "automation",
    "process",
    "automating",
    "manual",
    "process",
    "test",
    "application",
    "system",
    "test",
    "automation",
    "testing",
    "involves",
    "use",
    "separate",
    "testing",
    "tools",
    "involves",
    "use",
    "separate",
    "testing",
    "tools",
    "lets",
    "create",
    "test",
    "scripts",
    "executed",
    "repeatedly",
    "require",
    "manual",
    "intervention",
    "benefits",
    "automation",
    "testing",
    "suppose",
    "execution",
    "repeated",
    "test",
    "cases",
    "aids",
    "testing",
    "large",
    "test",
    "matrix",
    "also",
    "enables",
    "parallel",
    "execution",
    "encourages",
    "unattended",
    "execution",
    "improves",
    "accuracy",
    "thereby",
    "reducing",
    "human",
    "generated",
    "errors",
    "finally",
    "saves",
    "money",
    "time",
    "next",
    "question",
    "automate",
    "testing",
    "devops",
    "life",
    "cycle",
    "devops",
    "developers",
    "required",
    "commit",
    "changes",
    "made",
    "source",
    "code",
    "shared",
    "repository",
    "continuous",
    "integration",
    "tools",
    "like",
    "jenkins",
    "pull",
    "code",
    "shared",
    "repository",
    "every",
    "time",
    "change",
    "made",
    "code",
    "eventually",
    "deploy",
    "continuous",
    "testing",
    "done",
    "tools",
    "like",
    "selenium",
    "way",
    "change",
    "code",
    "continuously",
    "tested",
    "unlike",
    "traditional",
    "approach",
    "let",
    "move",
    "understand",
    "key",
    "elements",
    "continuous",
    "testing",
    "tools",
    "key",
    "elements",
    "continuous",
    "testing",
    "tools",
    "risk",
    "assessment",
    "policy",
    "analysis",
    "requirements",
    "traceability",
    "advanced",
    "analysis",
    "test",
    "optimization",
    "service",
    "virtualization",
    "risk",
    "assessment",
    "covers",
    "risk",
    "mitigation",
    "tasks",
    "technical",
    "depth",
    "quality",
    "assessment",
    "test",
    "coverage",
    "optimization",
    "ensure",
    "build",
    "ready",
    "progress",
    "towards",
    "next",
    "stage",
    "whereas",
    "policy",
    "analysis",
    "ensures",
    "processes",
    "aligned",
    "organization",
    "evolving",
    "business",
    "compliance",
    "demands",
    "met",
    "requirements",
    "traceability",
    "ensures",
    "true",
    "requirements",
    "met",
    "rework",
    "required",
    "object",
    "assessment",
    "used",
    "identify",
    "requirements",
    "risk",
    "working",
    "expected",
    "require",
    "validation",
    "also",
    "advanced",
    "analysis",
    "uses",
    "automation",
    "areas",
    "static",
    "code",
    "analysis",
    "change",
    "impact",
    "analysis",
    "scope",
    "assessment",
    "prioritization",
    "prevent",
    "defects",
    "first",
    "place",
    "accomplishing",
    "within",
    "iteration",
    "test",
    "optimization",
    "ensures",
    "test",
    "yield",
    "accurate",
    "outcomes",
    "provide",
    "actionable",
    "findings",
    "aspects",
    "include",
    "test",
    "data",
    "management",
    "test",
    "optimization",
    "management",
    "test",
    "maintenance",
    "service",
    "virtualization",
    "ensures",
    "access",
    "testing",
    "environments",
    "basically",
    "enables",
    "access",
    "virtual",
    "form",
    "required",
    "testing",
    "stages",
    "cutting",
    "waste",
    "time",
    "test",
    "environment",
    "setup",
    "availability",
    "moving",
    "next",
    "question",
    "testing",
    "tool",
    "comfortable",
    "benefits",
    "tool",
    "mentioned",
    "testing",
    "tool",
    "worked",
    "accordingly",
    "frame",
    "answer",
    "mention",
    "example",
    "selenium",
    "worked",
    "selenium",
    "ensure",
    "high",
    "quality",
    "frequent",
    "releases",
    "advantages",
    "selenium",
    "free",
    "open",
    "source",
    "also",
    "large",
    "user",
    "base",
    "helps",
    "communities",
    "major",
    "advantage",
    "cross",
    "browser",
    "compatibility",
    "firefox",
    "chrome",
    "internet",
    "explorer",
    "safari",
    "etc",
    "also",
    "great",
    "platform",
    "compatibility",
    "like",
    "windows",
    "mac",
    "linux",
    "etc",
    "supports",
    "multiple",
    "programming",
    "languages",
    "like",
    "java",
    "ruby",
    "python",
    "perl",
    "etc",
    "also",
    "fresh",
    "regular",
    "repository",
    "developments",
    "finally",
    "important",
    "point",
    "supports",
    "distributed",
    "testing",
    "moving",
    "next",
    "question",
    "testing",
    "types",
    "supported",
    "selenium",
    "selenium",
    "supports",
    "two",
    "types",
    "testing",
    "first",
    "one",
    "regression",
    "testing",
    "act",
    "retesting",
    "product",
    "around",
    "area",
    "bug",
    "fixed",
    "next",
    "one",
    "functional",
    "testing",
    "refers",
    "testing",
    "software",
    "features",
    "individually",
    "next",
    "question",
    "selenium",
    "ide",
    "integrated",
    "development",
    "environment",
    "selenium",
    "scripts",
    "implemented",
    "firefox",
    "extension",
    "allows",
    "record",
    "edit",
    "debug",
    "tests",
    "selenium",
    "ide",
    "includes",
    "entire",
    "selenium",
    "core",
    "allowing",
    "easily",
    "quickly",
    "record",
    "play",
    "back",
    "tests",
    "actual",
    "environment",
    "run",
    "include",
    "advantages",
    "answer",
    "autocomplete",
    "support",
    "ability",
    "move",
    "commands",
    "around",
    "quickly",
    "selenium",
    "ide",
    "ideal",
    "environment",
    "creating",
    "selenium",
    "tests",
    "matter",
    "style",
    "tests",
    "prefer",
    "moving",
    "next",
    "question",
    "difference",
    "assert",
    "verify",
    "commands",
    "selenium",
    "first",
    "talk",
    "assert",
    "command",
    "asset",
    "command",
    "checks",
    "whether",
    "given",
    "condition",
    "true",
    "false",
    "let",
    "say",
    "assert",
    "whether",
    "given",
    "element",
    "present",
    "web",
    "page",
    "condition",
    "true",
    "program",
    "control",
    "execute",
    "next",
    "test",
    "step",
    "condition",
    "false",
    "execution",
    "would",
    "stop",
    "test",
    "would",
    "executed",
    "verify",
    "command",
    "also",
    "checks",
    "whether",
    "given",
    "condition",
    "true",
    "false",
    "irrespective",
    "condition",
    "true",
    "false",
    "program",
    "execution",
    "halt",
    "failure",
    "verification",
    "would",
    "stop",
    "execution",
    "test",
    "steps",
    "would",
    "executed",
    "assert",
    "command",
    "best",
    "used",
    "check",
    "value",
    "pass",
    "test",
    "able",
    "continue",
    "run",
    "whereas",
    "verify",
    "command",
    "used",
    "check",
    "things",
    "launch",
    "browser",
    "using",
    "webdriver",
    "following",
    "syntax",
    "used",
    "launch",
    "browser",
    "use",
    "command",
    "web",
    "driver",
    "driver",
    "equal",
    "new",
    "firefox",
    "driver",
    "function",
    "web",
    "driver",
    "driver",
    "equal",
    "new",
    "chrome",
    "driver",
    "function",
    "also",
    "use",
    "web",
    "driver",
    "driver",
    "equal",
    "new",
    "internet",
    "explorer",
    "driver",
    "function",
    "moving",
    "last",
    "question",
    "continuous",
    "testing",
    "one",
    "use",
    "selenium",
    "grid",
    "answer",
    "suggestion",
    "would",
    "give",
    "small",
    "definition",
    "selenium",
    "grid",
    "used",
    "execute",
    "different",
    "test",
    "scripts",
    "multiple",
    "platforms",
    "browsers",
    "concurrently",
    "achieve",
    "distributed",
    "test",
    "execution",
    "eventually",
    "allows",
    "testing",
    "different",
    "environments",
    "saving",
    "execution",
    "time",
    "remarkably",
    "let",
    "move",
    "check",
    "much",
    "know",
    "configuration",
    "management",
    "goals",
    "configuration",
    "management",
    "process",
    "purpose",
    "configuration",
    "management",
    "ensure",
    "integrity",
    "product",
    "system",
    "throughout",
    "life",
    "cycle",
    "making",
    "development",
    "deployment",
    "process",
    "controllable",
    "repeatable",
    "therefore",
    "creating",
    "higher",
    "quality",
    "product",
    "system",
    "configuration",
    "management",
    "process",
    "allows",
    "orderly",
    "management",
    "system",
    "information",
    "system",
    "changes",
    "purposes",
    "revise",
    "capability",
    "improve",
    "performance",
    "reliability",
    "maintainability",
    "extant",
    "life",
    "reduce",
    "cost",
    "reduce",
    "risk",
    "liability",
    "correct",
    "defects",
    "let",
    "move",
    "next",
    "question",
    "difference",
    "asset",
    "management",
    "configuration",
    "management",
    "asset",
    "management",
    "concerned",
    "finances",
    "whereas",
    "configuration",
    "management",
    "concerned",
    "operations",
    "scope",
    "everything",
    "asset",
    "management",
    "scope",
    "everything",
    "deploy",
    "configuration",
    "management",
    "asset",
    "management",
    "interfaces",
    "purchasing",
    "leasing",
    "whereas",
    "configuration",
    "managements",
    "interfaces",
    "itil",
    "processes",
    "asset",
    "management",
    "maintain",
    "data",
    "taxes",
    "configuration",
    "management",
    "maintain",
    "data",
    "troubleshooting",
    "lifecycle",
    "purchase",
    "disposal",
    "asset",
    "management",
    "whereas",
    "configuration",
    "management",
    "lifecycle",
    "deployment",
    "retirement",
    "asset",
    "management",
    "relationships",
    "incidental",
    "whereas",
    "configuration",
    "management",
    "relationships",
    "operational",
    "moving",
    "third",
    "question",
    "understand",
    "infrastructure",
    "code",
    "infrastructure",
    "code",
    "type",
    "infrastructure",
    "operations",
    "teams",
    "use",
    "automatically",
    "manage",
    "provision",
    "code",
    "rather",
    "using",
    "manual",
    "process",
    "companies",
    "faster",
    "deployments",
    "treat",
    "infrastructure",
    "like",
    "software",
    "code",
    "managed",
    "devops",
    "tools",
    "processes",
    "tools",
    "basically",
    "let",
    "make",
    "infrastructure",
    "changes",
    "easily",
    "rapidly",
    "safely",
    "reliably",
    "moving",
    "important",
    "question",
    "among",
    "puppet",
    "chefs",
    "saw",
    "stack",
    "ansible",
    "best",
    "configuration",
    "management",
    "tool",
    "depends",
    "organization",
    "need",
    "mention",
    "points",
    "tools",
    "puppet",
    "oldest",
    "mature",
    "configuration",
    "management",
    "tool",
    "puppet",
    "ruby",
    "based",
    "configuration",
    "management",
    "tool",
    "free",
    "features",
    "much",
    "makes",
    "puppet",
    "great",
    "available",
    "paid",
    "version",
    "organizations",
    "need",
    "lot",
    "extras",
    "find",
    "puppet",
    "useful",
    "needing",
    "customization",
    "probably",
    "need",
    "upgrade",
    "paid",
    "version",
    "hand",
    "chef",
    "written",
    "ruby",
    "customized",
    "know",
    "language",
    "also",
    "includes",
    "free",
    "features",
    "plus",
    "upgraded",
    "open",
    "source",
    "enterprise",
    "level",
    "necessary",
    "top",
    "flexible",
    "product",
    "ansible",
    "secure",
    "option",
    "since",
    "uses",
    "secure",
    "shell",
    "simple",
    "tool",
    "use",
    "offer",
    "number",
    "services",
    "addition",
    "configuration",
    "management",
    "easy",
    "learn",
    "perfect",
    "dedicated",
    "staff",
    "still",
    "need",
    "configuration",
    "management",
    "tool",
    "salt",
    "stack",
    "open",
    "source",
    "configuration",
    "management",
    "tool",
    "made",
    "larger",
    "businesses",
    "learning",
    "curve",
    "fairly",
    "low",
    "based",
    "tools",
    "comfortable",
    "mention",
    "best",
    "tool",
    "would",
    "want",
    "use",
    "next",
    "question",
    "puppet",
    "puppet",
    "configuration",
    "management",
    "tool",
    "used",
    "automate",
    "administration",
    "tasks",
    "describe",
    "architecture",
    "puppet",
    "manages",
    "agents",
    "puppet",
    "master",
    "slave",
    "architecture",
    "slave",
    "first",
    "send",
    "certificate",
    "signing",
    "request",
    "master",
    "master",
    "sign",
    "certificate",
    "order",
    "establish",
    "secure",
    "connection",
    "puppet",
    "master",
    "puppet",
    "slave",
    "see",
    "diagram",
    "puppet",
    "slave",
    "sends",
    "request",
    "puppet",
    "master",
    "puppet",
    "master",
    "pushes",
    "configuration",
    "slave",
    "sixth",
    "question",
    "client",
    "authenticate",
    "puppet",
    "master",
    "certificates",
    "need",
    "signed",
    "accepted",
    "automate",
    "task",
    "easiest",
    "way",
    "enable",
    "auto",
    "signing",
    "definitely",
    "security",
    "risk",
    "still",
    "want",
    "firewall",
    "puppet",
    "master",
    "restrict",
    "port",
    "tcp",
    "8140",
    "networks",
    "trust",
    "create",
    "puppet",
    "masters",
    "trust",
    "zone",
    "include",
    "trusted",
    "nodes",
    "puppet",
    "masters",
    "manifest",
    "never",
    "use",
    "full",
    "wildcard",
    "asterisk",
    "moving",
    "seventh",
    "question",
    "open",
    "source",
    "community",
    "tools",
    "use",
    "make",
    "puppet",
    "powerful",
    "need",
    "mention",
    "tools",
    "used",
    "tools",
    "make",
    "puppet",
    "powerful",
    "example",
    "changes",
    "requests",
    "ticketed",
    "jira",
    "manage",
    "requests",
    "internal",
    "process",
    "use",
    "git",
    "puppets",
    "code",
    "manager",
    "application",
    "manage",
    "puppet",
    "code",
    "accordance",
    "best",
    "practices",
    "additionally",
    "run",
    "puppet",
    "changes",
    "continuous",
    "integration",
    "pipeline",
    "jenkins",
    "using",
    "beaker",
    "testing",
    "framework",
    "next",
    "important",
    "question",
    "puppet",
    "manifests",
    "important",
    "question",
    "make",
    "sure",
    "set",
    "correct",
    "flow",
    "according",
    "first",
    "define",
    "manifests",
    "every",
    "node",
    "puppet",
    "agent",
    "got",
    "configuration",
    "details",
    "puppet",
    "master",
    "written",
    "native",
    "puppet",
    "language",
    "details",
    "written",
    "language",
    "puppet",
    "understand",
    "termed",
    "manifests",
    "composed",
    "puppet",
    "code",
    "file",
    "names",
    "use",
    "pp",
    "extension",
    "example",
    "write",
    "manifest",
    "puppet",
    "master",
    "creates",
    "file",
    "installs",
    "apache",
    "puppet",
    "agents",
    "slaves",
    "connected",
    "puppet",
    "master",
    "moving",
    "puppet",
    "module",
    "different",
    "puppet",
    "manifest",
    "puppet",
    "module",
    "collection",
    "manifests",
    "data",
    "fax",
    "files",
    "templates",
    "specific",
    "directory",
    "structure",
    "modules",
    "useful",
    "organizing",
    "puppet",
    "code",
    "allow",
    "split",
    "code",
    "multiple",
    "manifests",
    "considered",
    "best",
    "practice",
    "use",
    "modules",
    "organize",
    "almost",
    "puppet",
    "manifests",
    "puppet",
    "programs",
    "called",
    "manifests",
    "composed",
    "puppet",
    "code",
    "file",
    "names",
    "use",
    "pp",
    "extension",
    "moving",
    "10th",
    "question",
    "factor",
    "puppet",
    "factor",
    "gathers",
    "basic",
    "information",
    "facts",
    "puppet",
    "agent",
    "hardware",
    "details",
    "network",
    "settings",
    "operating",
    "system",
    "type",
    "version",
    "ip",
    "addresses",
    "mac",
    "addresses",
    "ssh",
    "keys",
    "many",
    "facts",
    "made",
    "available",
    "puppet",
    "masters",
    "manifests",
    "variables",
    "chef",
    "chef",
    "powerful",
    "automation",
    "platform",
    "transforms",
    "infrastructure",
    "code",
    "chef",
    "tool",
    "write",
    "scripts",
    "used",
    "automate",
    "processes",
    "processes",
    "pretty",
    "much",
    "anything",
    "related",
    "explain",
    "architecture",
    "chef",
    "consists",
    "chef",
    "server",
    "chef",
    "node",
    "chef",
    "workstation",
    "chef",
    "server",
    "central",
    "store",
    "infrastructures",
    "configuration",
    "data",
    "chef",
    "server",
    "stores",
    "data",
    "necessary",
    "configure",
    "nodes",
    "provide",
    "search",
    "powerful",
    "tool",
    "allows",
    "dynamically",
    "drive",
    "node",
    "configuration",
    "based",
    "data",
    "node",
    "hand",
    "host",
    "configured",
    "using",
    "chef",
    "client",
    "chef",
    "client",
    "runs",
    "nodes",
    "contacting",
    "chef",
    "server",
    "information",
    "necessary",
    "configure",
    "node",
    "since",
    "node",
    "machine",
    "runs",
    "chef",
    "client",
    "software",
    "nodes",
    "sometimes",
    "referred",
    "clients",
    "finally",
    "chef",
    "workstation",
    "host",
    "use",
    "modify",
    "cookbooks",
    "configuration",
    "data",
    "12th",
    "question",
    "going",
    "discuss",
    "resource",
    "chef",
    "resource",
    "represents",
    "piece",
    "infrastructure",
    "desired",
    "state",
    "package",
    "installed",
    "service",
    "running",
    "file",
    "generated",
    "functions",
    "resource",
    "describes",
    "desired",
    "state",
    "configuration",
    "item",
    "also",
    "declares",
    "steps",
    "needed",
    "bring",
    "item",
    "desired",
    "state",
    "specifies",
    "resource",
    "types",
    "package",
    "template",
    "service",
    "also",
    "lists",
    "additional",
    "details",
    "also",
    "known",
    "resource",
    "properties",
    "whenever",
    "necessary",
    "also",
    "grouped",
    "recipes",
    "describe",
    "working",
    "configurations",
    "mean",
    "recipe",
    "chef",
    "recipe",
    "collection",
    "resources",
    "describes",
    "particular",
    "configuration",
    "policy",
    "recipe",
    "describes",
    "everything",
    "required",
    "configure",
    "part",
    "system",
    "functions",
    "recipes",
    "helps",
    "installing",
    "configuring",
    "software",
    "components",
    "manages",
    "files",
    "deploys",
    "applications",
    "also",
    "executes",
    "recipes",
    "cookbook",
    "differ",
    "recipe",
    "chef",
    "recipe",
    "collection",
    "resources",
    "primarily",
    "configures",
    "software",
    "package",
    "piece",
    "infrastructure",
    "hand",
    "cookbook",
    "groups",
    "together",
    "recipes",
    "information",
    "way",
    "way",
    "manageable",
    "recipes",
    "alone",
    "happens",
    "specify",
    "resource",
    "action",
    "chef",
    "chef",
    "really",
    "applies",
    "default",
    "action",
    "explain",
    "example",
    "first",
    "snippet",
    "resource",
    "create",
    "file",
    "resource",
    "default",
    "action",
    "ansible",
    "module",
    "modules",
    "considered",
    "units",
    "work",
    "ansible",
    "module",
    "mostly",
    "standalone",
    "written",
    "standard",
    "scripting",
    "language",
    "python",
    "perl",
    "ruby",
    "bash",
    "etc",
    "one",
    "guiding",
    "properties",
    "modules",
    "item",
    "potency",
    "means",
    "even",
    "operation",
    "repeated",
    "multiple",
    "times",
    "example",
    "upon",
    "recovery",
    "outage",
    "always",
    "place",
    "system",
    "state",
    "playbooks",
    "ansible",
    "playbooks",
    "ansible",
    "configuration",
    "deployment",
    "orchestration",
    "language",
    "describe",
    "policy",
    "want",
    "remote",
    "systems",
    "enforce",
    "set",
    "steps",
    "general",
    "id",
    "process",
    "playbooks",
    "designed",
    "human",
    "readable",
    "developed",
    "basic",
    "text",
    "language",
    "basic",
    "level",
    "playbooks",
    "used",
    "manage",
    "configurations",
    "deployments",
    "remote",
    "machines",
    "picture",
    "screen",
    "see",
    "example",
    "playbooks",
    "ansible",
    "see",
    "list",
    "ansible",
    "variables",
    "ansible",
    "default",
    "gathers",
    "facts",
    "machines",
    "management",
    "facts",
    "accessed",
    "playbooks",
    "templates",
    "see",
    "list",
    "facts",
    "available",
    "machine",
    "run",
    "setup",
    "module",
    "ad",
    "hoc",
    "action",
    "ansible",
    "hyphen",
    "setup",
    "host",
    "name",
    "print",
    "dictionary",
    "facts",
    "available",
    "particular",
    "host",
    "turn",
    "auto",
    "deployment",
    "feature",
    "auto",
    "deployment",
    "feature",
    "checks",
    "applications",
    "folder",
    "every",
    "three",
    "seconds",
    "determine",
    "whether",
    "new",
    "applications",
    "changes",
    "existing",
    "applications",
    "dynamically",
    "deploys",
    "changes",
    "auto",
    "deployment",
    "feature",
    "enabled",
    "servers",
    "run",
    "development",
    "mode",
    "disable",
    "auto",
    "deployment",
    "feature",
    "use",
    "one",
    "following",
    "methods",
    "play",
    "servers",
    "production",
    "mode",
    "administration",
    "control",
    "click",
    "name",
    "domain",
    "left",
    "pane",
    "click",
    "production",
    "mode",
    "checkbox",
    "right",
    "pane",
    "command",
    "line",
    "include",
    "following",
    "argument",
    "starting",
    "domains",
    "administration",
    "server",
    "hyphen",
    "capital",
    "weblogic",
    "dot",
    "production",
    "mode",
    "enabled",
    "equal",
    "true",
    "also",
    "production",
    "mode",
    "set",
    "weblogic",
    "server",
    "instances",
    "given",
    "domain",
    "last",
    "question",
    "configuration",
    "management",
    "use",
    "external",
    "stage",
    "option",
    "set",
    "external",
    "stage",
    "using",
    "weblogic",
    "dot",
    "deployer",
    "want",
    "stage",
    "application",
    "prefer",
    "copy",
    "target",
    "means",
    "let",
    "test",
    "knowledge",
    "continuous",
    "monitoring",
    "first",
    "question",
    "continuous",
    "monitoring",
    "necessary",
    "continuous",
    "monitoring",
    "allows",
    "timely",
    "identification",
    "problems",
    "weaknesses",
    "quick",
    "corrective",
    "action",
    "helps",
    "reduce",
    "expenses",
    "organization",
    "continuous",
    "monitoring",
    "provides",
    "solution",
    "addresses",
    "three",
    "operational",
    "disciplines",
    "known",
    "continuous",
    "audit",
    "continuous",
    "controls",
    "monitoring",
    "continuous",
    "transaction",
    "inspection",
    "next",
    "really",
    "important",
    "question",
    "nagios",
    "one",
    "monitoring",
    "control",
    "tools",
    "used",
    "continuous",
    "monitoring",
    "systems",
    "applications",
    "services",
    "business",
    "processes",
    "etc",
    "used",
    "continuous",
    "monitoring",
    "systems",
    "applications",
    "services",
    "business",
    "processes",
    "devops",
    "culture",
    "event",
    "failure",
    "legos",
    "alert",
    "technical",
    "staff",
    "problem",
    "allowing",
    "begin",
    "remediation",
    "processes",
    "outages",
    "affect",
    "business",
    "processes",
    "end",
    "users",
    "customers",
    "tool",
    "explain",
    "unseen",
    "infrastructure",
    "outage",
    "affect",
    "organization",
    "bottom",
    "line",
    "defined",
    "negios",
    "mention",
    "various",
    "things",
    "achieve",
    "using",
    "tool",
    "plan",
    "infrastructure",
    "upgrades",
    "outdated",
    "systems",
    "cause",
    "failures",
    "also",
    "respond",
    "issues",
    "first",
    "sign",
    "problem",
    "also",
    "automatically",
    "fix",
    "problems",
    "detected",
    "coordinate",
    "technical",
    "team",
    "responses",
    "also",
    "ensure",
    "organization",
    "slas",
    "met",
    "negeus",
    "work",
    "geos",
    "runs",
    "server",
    "usually",
    "daemon",
    "service",
    "geos",
    "periodically",
    "runs",
    "plugins",
    "residing",
    "server",
    "contact",
    "hosts",
    "servers",
    "network",
    "internet",
    "one",
    "view",
    "status",
    "information",
    "using",
    "web",
    "interface",
    "also",
    "receive",
    "email",
    "sms",
    "notification",
    "something",
    "happens",
    "daemon",
    "behaves",
    "like",
    "scheduler",
    "runs",
    "certain",
    "scripts",
    "certain",
    "moments",
    "stores",
    "results",
    "scripts",
    "run",
    "scripts",
    "results",
    "change",
    "expect",
    "question",
    "gears",
    "components",
    "like",
    "plugins",
    "nrpe",
    "etc",
    "plugins",
    "lagues",
    "scripts",
    "like",
    "perl",
    "script",
    "shell",
    "scripts",
    "etc",
    "run",
    "command",
    "line",
    "check",
    "status",
    "host",
    "service",
    "nagios",
    "uses",
    "results",
    "plugins",
    "determine",
    "current",
    "statuses",
    "hosts",
    "services",
    "network",
    "defined",
    "plugins",
    "explain",
    "need",
    "nagios",
    "execute",
    "plugin",
    "whenever",
    "need",
    "check",
    "status",
    "host",
    "service",
    "plugin",
    "perform",
    "check",
    "simply",
    "returns",
    "result",
    "negios",
    "geos",
    "process",
    "results",
    "receives",
    "plugin",
    "take",
    "necessary",
    "actions",
    "next",
    "important",
    "question",
    "nrpe",
    "interviews",
    "negus",
    "remote",
    "plugin",
    "executor",
    "nrpe",
    "designed",
    "allow",
    "execute",
    "reduce",
    "plugins",
    "remote",
    "linux",
    "unix",
    "machines",
    "main",
    "reason",
    "allow",
    "geos",
    "monitor",
    "local",
    "resources",
    "like",
    "cpu",
    "load",
    "memory",
    "usage",
    "etc",
    "remote",
    "machines",
    "since",
    "public",
    "resources",
    "usually",
    "exposed",
    "external",
    "machines",
    "agent",
    "like",
    "nrpe",
    "must",
    "installed",
    "remote",
    "linux",
    "unox",
    "machines",
    "advise",
    "explain",
    "nrpe",
    "architecture",
    "basis",
    "diagram",
    "given",
    "nrpe",
    "consists",
    "two",
    "pieces",
    "checked",
    "nrpe",
    "plugin",
    "resides",
    "local",
    "monitoring",
    "machine",
    "nrpe",
    "daemon",
    "runs",
    "remote",
    "linux",
    "unox",
    "machine",
    "also",
    "ssl",
    "connection",
    "secure",
    "socket",
    "layer",
    "monitoring",
    "host",
    "remote",
    "hosts",
    "seen",
    "diagram",
    "mean",
    "passive",
    "check",
    "geos",
    "passive",
    "checks",
    "usually",
    "initiated",
    "performed",
    "external",
    "applications",
    "processes",
    "also",
    "results",
    "submitted",
    "nug",
    "use",
    "processing",
    "useful",
    "monitoring",
    "services",
    "asynchronous",
    "nature",
    "monitored",
    "effectively",
    "polling",
    "status",
    "regularly",
    "scheduled",
    "basis",
    "also",
    "used",
    "monitoring",
    "services",
    "located",
    "behind",
    "firewall",
    "checked",
    "actively",
    "monitoring",
    "host",
    "next",
    "question",
    "negios",
    "check",
    "external",
    "commands",
    "negios",
    "checks",
    "external",
    "commands",
    "following",
    "conditions",
    "regular",
    "intervals",
    "specified",
    "command",
    "check",
    "interval",
    "option",
    "main",
    "configuration",
    "file",
    "immediately",
    "event",
    "handlers",
    "executed",
    "addition",
    "regular",
    "cycle",
    "external",
    "command",
    "checks",
    "done",
    "provide",
    "immediate",
    "action",
    "event",
    "handler",
    "submits",
    "commands",
    "negios",
    "moving",
    "difference",
    "active",
    "passive",
    "check",
    "negios",
    "answer",
    "first",
    "point",
    "basic",
    "difference",
    "active",
    "passive",
    "checks",
    "major",
    "difference",
    "active",
    "passive",
    "checks",
    "active",
    "checks",
    "initiated",
    "performed",
    "nagios",
    "passive",
    "checks",
    "performed",
    "external",
    "applications",
    "interviewer",
    "looking",
    "unconvinced",
    "explanation",
    "also",
    "mention",
    "key",
    "features",
    "active",
    "passive",
    "checks",
    "passive",
    "checks",
    "useful",
    "monitoring",
    "services",
    "asynchronous",
    "nature",
    "monitored",
    "effectively",
    "polling",
    "status",
    "regularly",
    "scheduled",
    "basis",
    "usually",
    "located",
    "behind",
    "firewall",
    "checked",
    "actively",
    "monitoring",
    "host",
    "main",
    "features",
    "active",
    "checks",
    "initiated",
    "negus",
    "process",
    "active",
    "checks",
    "run",
    "regularly",
    "scheduled",
    "basis",
    "hope",
    "differences",
    "active",
    "passive",
    "checks",
    "clear",
    "see",
    "screen",
    "two",
    "different",
    "pictures",
    "active",
    "passive",
    "checks",
    "really",
    "work",
    "ninth",
    "question",
    "negios",
    "help",
    "distributed",
    "monitoring",
    "interviewer",
    "expecting",
    "answer",
    "related",
    "distributed",
    "architecture",
    "nagios",
    "suggest",
    "answer",
    "explaining",
    "first",
    "geos",
    "monitor",
    "whole",
    "enterprise",
    "using",
    "distributed",
    "monitoring",
    "scheme",
    "local",
    "slave",
    "instances",
    "negios",
    "perform",
    "monitoring",
    "tasks",
    "report",
    "results",
    "back",
    "single",
    "master",
    "manage",
    "configuration",
    "notification",
    "reporting",
    "master",
    "slaves",
    "work",
    "design",
    "takes",
    "advantage",
    "niger",
    "ability",
    "utilize",
    "passive",
    "checks",
    "external",
    "applications",
    "processes",
    "send",
    "results",
    "back",
    "nucleos",
    "distributed",
    "configuration",
    "external",
    "applications",
    "instances",
    "nucleos",
    "moving",
    "explain",
    "main",
    "configuration",
    "file",
    "negios",
    "location",
    "main",
    "configuration",
    "file",
    "contains",
    "number",
    "directives",
    "affect",
    "negus",
    "daemin",
    "operates",
    "config",
    "file",
    "read",
    "nagios",
    "daemon",
    "cgis",
    "basically",
    "specifies",
    "location",
    "main",
    "configuration",
    "file",
    "tell",
    "present",
    "created",
    "sample",
    "main",
    "configuration",
    "file",
    "created",
    "base",
    "directory",
    "nagios",
    "distribution",
    "run",
    "configure",
    "script",
    "default",
    "name",
    "main",
    "configuration",
    "file",
    "usually",
    "placed",
    "etc",
    "subdirectory",
    "nugios",
    "installation",
    "explain",
    "flap",
    "detection",
    "works",
    "geos",
    "clapping",
    "occurs",
    "servicer",
    "hosts",
    "changes",
    "state",
    "frequently",
    "causes",
    "lot",
    "problem",
    "recovery",
    "notifications",
    "defined",
    "flapping",
    "explain",
    "nag",
    "use",
    "detects",
    "flapping",
    "whenever",
    "abuse",
    "checks",
    "status",
    "hostess",
    "service",
    "check",
    "see",
    "started",
    "stop",
    "flapping",
    "geos",
    "follows",
    "procedure",
    "firstly",
    "stores",
    "results",
    "last",
    "21",
    "checks",
    "hostess",
    "service",
    "analyzing",
    "historical",
    "check",
    "results",
    "determines",
    "state",
    "changes",
    "transitions",
    "occur",
    "using",
    "state",
    "transitions",
    "determine",
    "person",
    "state",
    "change",
    "value",
    "host",
    "service",
    "finally",
    "compare",
    "percent",
    "state",
    "change",
    "value",
    "slow",
    "high",
    "flapping",
    "thresholds",
    "host",
    "services",
    "determined",
    "started",
    "flapping",
    "person",
    "state",
    "change",
    "first",
    "exceeds",
    "high",
    "flapping",
    "threshold",
    "host",
    "service",
    "determined",
    "stopped",
    "flapping",
    "person",
    "state",
    "goes",
    "low",
    "flapping",
    "threshold",
    "three",
    "main",
    "variables",
    "affect",
    "recursion",
    "inheritance",
    "geos",
    "name",
    "user",
    "register",
    "name",
    "placeholder",
    "used",
    "objects",
    "use",
    "defines",
    "parent",
    "object",
    "whose",
    "property",
    "used",
    "register",
    "value",
    "0",
    "indicating",
    "template",
    "one",
    "actual",
    "object",
    "important",
    "know",
    "register",
    "value",
    "never",
    "inherited",
    "hope",
    "three",
    "main",
    "variables",
    "affect",
    "inheritance",
    "recursion",
    "geos",
    "clear",
    "moving",
    "let",
    "us",
    "understand",
    "meant",
    "saying",
    "reduce",
    "object",
    "oriented",
    "one",
    "features",
    "nagios",
    "object",
    "configuration",
    "format",
    "create",
    "object",
    "definitions",
    "inherit",
    "properties",
    "object",
    "definitions",
    "hence",
    "name",
    "basically",
    "simplifies",
    "clarifies",
    "relationships",
    "various",
    "components",
    "last",
    "question",
    "continuous",
    "monitoring",
    "state",
    "stalking",
    "geos",
    "state",
    "stalking",
    "used",
    "logging",
    "purposes",
    "stalking",
    "enabled",
    "particular",
    "host",
    "service",
    "nagios",
    "watch",
    "hostess",
    "service",
    "carefully",
    "log",
    "changes",
    "sees",
    "output",
    "check",
    "results",
    "helpful",
    "later",
    "analysis",
    "log",
    "files",
    "normal",
    "circumstances",
    "result",
    "hostess",
    "service",
    "check",
    "locked",
    "hostess",
    "service",
    "changed",
    "state",
    "since",
    "last",
    "checked",
    "moving",
    "last",
    "topic",
    "today",
    "session",
    "let",
    "see",
    "much",
    "know",
    "containers",
    "virtual",
    "machines",
    "containers",
    "containers",
    "used",
    "provide",
    "consistent",
    "computing",
    "environment",
    "developer",
    "laptop",
    "test",
    "environment",
    "staging",
    "environment",
    "production",
    "container",
    "consists",
    "entire",
    "runtime",
    "environment",
    "application",
    "plus",
    "dependencies",
    "libraries",
    "binaries",
    "configuration",
    "files",
    "needed",
    "run",
    "bundled",
    "one",
    "package",
    "containerizing",
    "application",
    "platform",
    "dependencies",
    "removes",
    "differences",
    "operating",
    "system",
    "distributions",
    "underlying",
    "infrastructure",
    "let",
    "move",
    "second",
    "question",
    "discuss",
    "advantages",
    "containerization",
    "provides",
    "virtualization",
    "continuous",
    "provide",
    "provisioning",
    "scalability",
    "virtual",
    "machines",
    "provide",
    "slow",
    "provisioning",
    "containers",
    "also",
    "lightweight",
    "compared",
    "virtual",
    "machines",
    "virtual",
    "machines",
    "limited",
    "performance",
    "compared",
    "containers",
    "containers",
    "better",
    "resource",
    "utilization",
    "compared",
    "virtual",
    "machines",
    "advantages",
    "containerization",
    "provides",
    "virtualization",
    "moving",
    "exactly",
    "containers",
    "docker",
    "case",
    "different",
    "hypervisor",
    "virtualization",
    "benefits",
    "hypervisor",
    "virtualization",
    "default",
    "security",
    "support",
    "great",
    "degree",
    "containers",
    "slightly",
    "less",
    "degree",
    "hypervisor",
    "virtualization",
    "complete",
    "operating",
    "system",
    "plus",
    "applications",
    "memory",
    "disk",
    "whereas",
    "containers",
    "application",
    "requirements",
    "disk",
    "time",
    "taken",
    "startup",
    "substantially",
    "longer",
    "hypervisor",
    "virtualized"
  ],
  "keywords": [
    "music",
    "devops",
    "rules",
    "used",
    "automate",
    "different",
    "software",
    "development",
    "deployment",
    "process",
    "order",
    "speed",
    "quality",
    "everyone",
    "session",
    "currently",
    "edureka",
    "tools",
    "full",
    "course",
    "end",
    "multiple",
    "like",
    "click",
    "button",
    "updates",
    "us",
    "also",
    "want",
    "learn",
    "eureka",
    "see",
    "link",
    "description",
    "let",
    "begin",
    "start",
    "life",
    "cycle",
    "time",
    "get",
    "popular",
    "git",
    "jenkins",
    "docker",
    "kubernetes",
    "puppet",
    "ansible",
    "done",
    "move",
    "ahead",
    "terraform",
    "prometheus",
    "selenium",
    "azure",
    "aws",
    "compare",
    "hope",
    "getting",
    "jobs",
    "industry",
    "look",
    "work",
    "started",
    "first",
    "topic",
    "basically",
    "operations",
    "two",
    "team",
    "deploy",
    "code",
    "production",
    "faster",
    "automated",
    "way",
    "increase",
    "organization",
    "comes",
    "applications",
    "services",
    "many",
    "companies",
    "successfully",
    "implemented",
    "user",
    "say",
    "example",
    "app",
    "updated",
    "every",
    "users",
    "able",
    "helps",
    "ensure",
    "best",
    "makes",
    "developers",
    "includes",
    "testing",
    "delivery",
    "write",
    "update",
    "developed",
    "needs",
    "instead",
    "high",
    "result",
    "access",
    "control",
    "person",
    "understand",
    "one",
    "major",
    "concept",
    "quite",
    "must",
    "continuous",
    "integration",
    "monitoring",
    "mentioned",
    "make",
    "phase",
    "project",
    "application",
    "required",
    "number",
    "written",
    "language",
    "using",
    "version",
    "source",
    "management",
    "etc",
    "building",
    "file",
    "eventually",
    "next",
    "stage",
    "continuously",
    "tested",
    "automation",
    "test",
    "right",
    "functionality",
    "lot",
    "manually",
    "containers",
    "environment",
    "entire",
    "help",
    "tool",
    "called",
    "talk",
    "later",
    "explain",
    "suppose",
    "java",
    "build",
    "built",
    "big",
    "plus",
    "point",
    "task",
    "cases",
    "gets",
    "execution",
    "times",
    "integrated",
    "existing",
    "third",
    "practice",
    "commit",
    "changes",
    "may",
    "comment",
    "allows",
    "problems",
    "present",
    "review",
    "unit",
    "new",
    "since",
    "well",
    "systems",
    "already",
    "said",
    "previous",
    "whenever",
    "change",
    "repository",
    "simply",
    "performed",
    "server",
    "fourth",
    "deployed",
    "servers",
    "important",
    "moving",
    "things",
    "configuration",
    "containerization",
    "set",
    "firstly",
    "requirements",
    "performance",
    "put",
    "simple",
    "deployments",
    "configurations",
    "consistent",
    "across",
    "play",
    "extremely",
    "role",
    "tasks",
    "quickly",
    "chef",
    "staging",
    "environments",
    "scaling",
    "instances",
    "package",
    "dependencies",
    "packages",
    "easy",
    "run",
    "last",
    "monitor",
    "information",
    "use",
    "system",
    "memory",
    "root",
    "security",
    "network",
    "issues",
    "automatically",
    "fix",
    "problem",
    "key",
    "stack",
    "enable",
    "check",
    "support",
    "achieve",
    "desired",
    "product",
    "part",
    "related",
    "today",
    "talking",
    "allow",
    "together",
    "machines",
    "cluster",
    "exactly",
    "operation",
    "teams",
    "really",
    "making",
    "easier",
    "scale",
    "creating",
    "infrastructure",
    "deploying",
    "container",
    "manage",
    "google",
    "virtual",
    "cloud",
    "open",
    "managing",
    "include",
    "load",
    "balancing",
    "remember",
    "platform",
    "solution",
    "discuss",
    "features",
    "provides",
    "scheduler",
    "launch",
    "nodes",
    "based",
    "resource",
    "second",
    "feature",
    "type",
    "checks",
    "ready",
    "something",
    "goes",
    "back",
    "per",
    "command",
    "interface",
    "cpu",
    "usage",
    "architecture",
    "main",
    "components",
    "worker",
    "node",
    "master",
    "always",
    "api",
    "commands",
    "manager",
    "daemon",
    "stores",
    "distributed",
    "value",
    "store",
    "share",
    "service",
    "know",
    "necessary",
    "resources",
    "component",
    "runs",
    "configured",
    "pods",
    "pod",
    "ensures",
    "running",
    "cube",
    "proxy",
    "single",
    "come",
    "form",
    "works",
    "separate",
    "libraries",
    "around",
    "level",
    "another",
    "need",
    "install",
    "save",
    "working",
    "starting",
    "easily",
    "basic",
    "image",
    "created",
    "executed",
    "results",
    "name",
    "finally",
    "whatever",
    "images",
    "clear",
    "hub",
    "find",
    "create",
    "account",
    "engine",
    "installed",
    "host",
    "machine",
    "client",
    "uses",
    "program",
    "line",
    "communication",
    "cli",
    "linux",
    "operating",
    "terminal",
    "case",
    "windows",
    "additional",
    "inside",
    "compose",
    "free",
    "everything",
    "small",
    "large",
    "projects",
    "text",
    "files",
    "go",
    "take",
    "step",
    "came",
    "computer",
    "programs",
    "local",
    "copy",
    "clone",
    "storage",
    "space",
    "contains",
    "usually",
    "actually",
    "central",
    "web",
    "github",
    "without",
    "repositories",
    "data",
    "pull",
    "push",
    "give",
    "shared",
    "within",
    "hence",
    "supports",
    "browsers",
    "platforms",
    "programming",
    "languages",
    "specific",
    "python",
    "webdriver",
    "directly",
    "internet",
    "chrome",
    "tests",
    "advantages",
    "choose",
    "advantage",
    "scripts",
    "c",
    "browser",
    "discussed",
    "grid",
    "initially",
    "remote",
    "fact",
    "various",
    "still",
    "online",
    "provide",
    "lets",
    "framework",
    "default",
    "benefits",
    "1",
    "download",
    "period",
    "integrate",
    "plugins",
    "processes",
    "much",
    "particular",
    "plugin",
    "amazon",
    "ec2",
    "great",
    "community",
    "gives",
    "added",
    "active",
    "world",
    "available",
    "market",
    "unique",
    "compared",
    "functions",
    "whether",
    "place",
    "function",
    "slave",
    "secure",
    "diagram",
    "screen",
    "agent",
    "facts",
    "state",
    "ip",
    "address",
    "complete",
    "dashboard",
    "business",
    "event",
    "alert",
    "technical",
    "hosts",
    "view",
    "status",
    "email",
    "notification",
    "happens",
    "certain",
    "current",
    "interact",
    "setup",
    "log",
    "traffic",
    "perform",
    "10",
    "rather",
    "people",
    "correct",
    "immediately",
    "scenario",
    "three",
    "page",
    "call",
    "developer",
    "2",
    "3",
    "thing",
    "else",
    "kind",
    "adding",
    "going",
    "tell",
    "directory",
    "folder",
    "creates",
    "snapshot",
    "latest",
    "made",
    "along",
    "known",
    "versions",
    "means",
    "record",
    "database",
    "maintain",
    "format",
    "track",
    "apart",
    "enables",
    "could",
    "connected",
    "try",
    "difference",
    "branch",
    "even",
    "pretty",
    "action",
    "better",
    "bit",
    "fast",
    "via",
    "connection",
    "group",
    "feedback",
    "recovered",
    "past",
    "top",
    "merge",
    "anything",
    "might",
    "reason",
    "names",
    "microsoft",
    "managed",
    "tree",
    "repo",
    "stored",
    "keep",
    "nothing",
    "yeah",
    "general",
    "public",
    "connect",
    "history",
    "100",
    "runtime",
    "branching",
    "visualization",
    "merged",
    "branches",
    "structure",
    "copied",
    "hash",
    "id",
    "terms",
    "possible",
    "takes",
    "seconds",
    "delete",
    "base",
    "little",
    "workflow",
    "add",
    "request",
    "think",
    "good",
    "section",
    "installation",
    "ways",
    "index",
    "completely",
    "show",
    "guys",
    "release",
    "ubuntu",
    "apt",
    "gon",
    "na",
    "sudo",
    "init",
    "config",
    "alias",
    "stash",
    "tag",
    "empty",
    "dot",
    "target",
    "provided",
    "readme",
    "paste",
    "url",
    "edit",
    "values",
    "given",
    "ask",
    "username",
    "series",
    "looks",
    "settings",
    "option",
    "read",
    "slash",
    "final",
    "map",
    "obviously",
    "execute",
    "common",
    "area",
    "list",
    "either",
    "green",
    "committed",
    "message",
    "hyphen",
    "ones",
    "happened",
    "origin",
    "commits",
    "similar",
    "display",
    "search",
    "comments",
    "okay",
    "five",
    "date",
    "told",
    "mention",
    "uh",
    "says",
    "maybe",
    "import",
    "whereas",
    "password",
    "several",
    "previously",
    "yes",
    "four",
    "path",
    "hand",
    "sure",
    "apply",
    "ssh",
    "shell",
    "options",
    "enter",
    "home",
    "specified",
    "instance",
    "private",
    "website",
    "bug",
    "company",
    "official",
    "redirect",
    "sign",
    "left",
    "bar",
    "requests",
    "wo",
    "interesting",
    "icon",
    "notifications",
    "onto",
    "location",
    "year",
    "scroll",
    "switch",
    "side",
    "would",
    "details",
    "piece",
    "actions",
    "named",
    "remove",
    "bin",
    "minutes",
    "demo",
    "close",
    "approach",
    "happening",
    "whole",
    "cd",
    "equal",
    "print",
    "mode",
    "editor",
    "sort",
    "rate",
    "seen",
    "question",
    "probably",
    "forward",
    "revert",
    "got",
    "day",
    "similarly",
    "according",
    "0",
    "port",
    "configure",
    "successful",
    "ci",
    "pipelines",
    "pipeline",
    "os",
    "output",
    "strategy",
    "define",
    "steps",
    "saying",
    "script",
    "writing",
    "starts",
    "job",
    "select",
    "needed",
    "color",
    "minute",
    "admin",
    "tab",
    "panel",
    "specify",
    "variables",
    "metrics",
    "game",
    "metric",
    "console",
    "defined",
    "tags",
    "mean",
    "agile",
    "saw",
    "asked",
    "enabled",
    "virtualization",
    "recovery",
    "django",
    "swarm",
    "yaml",
    "engines",
    "auto",
    "http",
    "useful",
    "colon",
    "restart",
    "addresses",
    "modules",
    "stop",
    "india",
    "field",
    "manual",
    "answer",
    "destroy",
    "regular",
    "queries",
    "provider",
    "true",
    "condition",
    "hit",
    "localhost",
    "graph",
    "external",
    "pending",
    "driver",
    "grafana",
    "press",
    "manifests",
    "rule",
    "playbook",
    "playbooks",
    "inventory",
    "databases",
    "represent",
    "row",
    "represented",
    "destroyed",
    "plan",
    "east",
    "s3",
    "vpc",
    "subnet",
    "db",
    "query",
    "targets",
    "nagios",
    "exporter",
    "counter",
    "expression",
    "panels",
    "alerts",
    "string",
    "influx",
    "dashboards",
    "confirmed",
    "country",
    "rc",
    "nrp",
    "stuff",
    "traversal"
  ]
}