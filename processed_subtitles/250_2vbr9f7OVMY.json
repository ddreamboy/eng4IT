{
  "text": "hey guys welcome back to another video\nby simplylaw\nin today's video we're going to learn\nall about javascript functions in our\nprevious videos we've covered topics\nlike javascript arrays and loops\nif you're new to this topic i suggest\nyou go through these topics before\nall right so before jumping in let's go\nahead and look at what's in store for us\nfirst we're going to learn what exactly\njavascript functions are\nthen we'll look at javascript function\nexpressions then the function\nconstructor\nself-invoking functions functions as\nvalues functions as objects arrow\nfunctions generator function and the\npredefined functions\nalso don't forget to subscribe to our\nchannel and hit the bell icon to never\nmiss an update\nmoving on to our first topic\nwhat are javascript functions\nso basically a function is a group of\nreusable code which can be called from\nanywhere in your program right\nwhen you have a piece of code that you\nwant to execute repeatedly in your\nentire program it makes more sense to\ndefine it once and call it over and over\nright it makes the code more efficient\nand readable this also helps programmers\nwrite modular codes\nso this is the syntax you make use of\nthe function keyword followed by which\nyou mentioned the name of the function\nthe name of the function is completely\nyour choice\nnext you mention the parameter list and\nwithin curly braces you can define the\nfunction\nnow the function body is basically the\ncode that is executed every time the\nfunction is called\nso let's go to our vs code editor\nand here it created a folder called demo\nfunctions within which i've created an\nhtml file called functions.html\nall right and now i've just typed in the\ninitial code\nnow let's create a function\nso let me say script\nwithin which i use the keyword that is\nfunction keyword\nand now i give\nthe name for my function i say my\nunderscore\nfunction\nand the function takes\na parameter say value now this function\nbasically returns the square of the\ndigit all right\nso within which\ni say\ndocument dot get element by id\nthe id is demo\nand now it just displays value into\nvalue\nall right so the function basically\ndisplays the square of the number\nnow outside the function let me call the\nfunction\ndoes\nmy function\nand let me pass the value 5\nall right now let's save this\nand execute it\nso let me go back to my file\nand here we go it displays the value 25\nso this was a simple function which took\na value\na digit as a parameter and then returned\nthe square\nmoving on to the next concept\nfunction expression\nnow what we learnt previously was\nfunction declaration but a function can\nalso be defined as an expression\nnow this is what the syntax looks like\nnow here the function is created and\nassigned to the variable explicitly like\nany other value\nthe meaning remains the same that is you\ncreate the function and store the value\nthat it returns into a variable and in\nour case it's x right so let's go to our\nvs code and let me help you understand\nthis better\nso now\ni create another function\nand here i say\nlet\nx equals let's use a simpler function so\ni just mentioned\nfunction\nand within curly braces i display an\nalert message\nand i display a message saying hello\nall right\nnow\nafter that to display the message what\nwe can do is let me just copy this\noutput\ncode\nand you place it here\nand here what we're going to be\ndisplaying is the value x right now\nsince it consists of a function you'll\nhave to type the curly braces now this\nis crucial for its execution all right\nso let me save this\nand then execute\nlet me execute this\nand here you go it says the site says\nhello so we successfully executed the\npiece of code\nwe can also assign this variable x to\nanother variable and then call that\nvariable instead\nright we can say let\ny equals x\nand instead of calling x here\nwe can simply call y\nlet me save it and then let me refresh\nthe page\nand there we go it still displays a\nmessage hello\nall right so this is one of the ways of\ndefining a function that is as an\nexpression\nmoving on to our next concept function\nconstructor\nnow javascript functions are defined\nusing the keyword function right now\nfunctions can also be defined using a\njavascript built-in function\nnow this is the basic syntax so here\nwe've created a function called my\nfunction and we've used the keyword new\nafter which we've used the constructor\nfunction\nand inside we provide the parameter list\nafter that the return value\nnext you can call the function here\nright so let me just go back to my vs\ncode\nand now\nlet me just make changes to the same\npiece of code here\ni create a function say\nmy underscore function\nokay\nall right let me just change the name\nto my function all right\nand then here i use the keyword new\nand the function constructor that is\nfunction\n[Music]\nwithin which i'm passing all the\nparameters\nso i have\na\nb\nand i'm going to return\nthe sum of the digits\nall right\nand now while calling the function\nlet me just store the value in a\nvariable say x\nand let's call the function that is my\nfunction\nwith the parameters\n2 and three\nall right\nand now let me\ndisplay it so i'm just\ngonna copy this\nand i want to display the value of x\nright\nall right so let me save this\nand execute it\nif you refresh the page it displays the\nsum that is 5.\nto make it more readable let me just\ndisplay another message here\nlet me just say\nthe sum is\nx all right\nlet me save it and then refresh the page\nit says the sum is 5.\nall right now this is how you make use\nof the function constructor\nnext up we learn about self-invoking\nfunctions\nnow as the name suggests these functions\nare invoked automatically without being\ncalled\nnow previously when we learnt about\nfunction expressions we saw that\nparentheses were crucial\nso you have to add parentheses around\nthe function to indicate that it is a\nfunction expression\nso here is a syntax for you so what\nwe've done is we've made sure we've\nenclosed the entire function within\nparentheses\nso let me help you with that let's go\nback to our vs code\nand let me create another script\nand here\nlet me create the function within the\nparentheses\nand say function\nit's not taking any parameters\ninstead it is going to\nalert a message so let me say\nhello\nwelcome\nall right\nafter which\nwe're going to call the function so\nagain we have to mention the parentheses\nlet's save this\nand execute\nso when we\nrefresh the page\nit says hello welcome\nso we never called the function\nrather it got invoked by itself so these\nare self-invoking functions\nnow let's go ahead and look at functions\nas values\nnow in javascript a function is\nbasically a value so we can deal with it\nas a value now here is a simple syntax\nnow if you closely look at the syntax\nyou might think that this is same as\nfunction expressions well no in this\ncase what we do is we first define the\nfunction and then we assign it to a\nparticular variable but in the case of\nexpressions the function definition was\ndefined during the initialization of the\nvariable right and also we had to\nspecify the parenthesis in order to call\nthe function so to help you understand\nthis better let me go back to our vs\ncode\nand here\nlet me just erase this\nand let's define a function\nthat returns the product of two digits\nso let me just call it product\nwhich takes two parameters let me say a\nand b\nwithin which we return the value\na into b\nall right now after this let's create\nanother variable say y\nequals\nfunction oh i'm sorry the name of the\nfunction is product\nso product\nof two and five\nall right so this basically returns us\n10 right so let me just\ncopy this to display this on our web\npage\nand here i change the message to the\nproduct\nand here let me change it to y\nso let's save this and execute it\nso let me refresh the page and here you\ngo you can see the message the product\nis 10.\nnow what we can do is we can make\nalterations to this\nnow say i want to multiply the value\nwith 5 again\nright so basically this returns 10 and\nthat value is multiplied by 5. so let me\nsave this\nand\nrefresh our page and there we go it\nreturns\nand there we go it displays 50. so this\nis how you can make use of functions as\nvalues\nmoving on to the next topic functions as\nobjects\nnow javascript functions are a special\ntype of objects called function objects\nnow a function includes a string which\nholds the actual code that is the\nfunction body of the function\nthe code is literally just a string\nalthough not recommended you can also\ncreate a function with the help of the\nfunction constructor\ni will show that you a little later on\nbut for now let's look at the syntax\nnow here we have a variable called body\nwhich basically consists of the function\nbody it's enclosed in double quotes and\nthat's a mistake please ignore it all\nright so next we have variable function\nname here we create a function using the\nkeyword new and then we pass the\nparameter list\nand the body basically tells us what the\nfunction returns\nright\nnext we have an alert message to call\nthe function so let me just show how\nthis is executed\nback in obvious code let me create\nanother\nfunction\nand let's say the function returns the\narea of a circle right so let me just\ncreate\na body variable\nwhich returns\nso the area of a circle is pi r square\nso we make use of math\ndot i\ninto\nradius into radius\nright\nso it's basically pi r square\nafter which\nlet's see\nwhere circle\n[Music]\nand here let's create a function using\nthe new keyword\nfunction\nand then here we pass\nthe value that is the radius\nand then the body\nright so basically\nthis is the definition of our function\nso let's use alert\nto display the area so we say alert of\ncircle\nof five\nall right let me save this\nand execute it\nso when you refresh the page\nit displays the area of the circle\nso this is how you can use functions as\nobjects\nmoving on to our next concept arrow\nfunctions\nnow functions can be written more\ncompactly and more precisely with the\nhelp of arrow functions\nall right now arrow function expressions\nare ill-suited as methods and they\ncannot be used as constructors\nnow also while using arrow functions\nusing const is a safer option because a\nfunction expression is always a constant\nvalue\nso this is the syntax now you can only\nomit the return keyword\nwithin the curly braces if the function\nis a single statement\nso this is the syntax first you provide\nthe name of the function\nwith an equal to sign\nfollowed by the argument list\nand later you make use of this arrow\nicon and define the expression\nso this is basically\nnothing\nbut this\nso let's go back to our vs code and\ncheck for ourselves\nso let's create another function\nand here let me say\nconst\nmy func\nequals now say we want to display the\nproduct of three digits so let me just\npass a b c of my parameters\nand we make use of this icon which\nindicates that this is an arrow function\nwithin which i say return\na\ninto b into c\nall right\nnow let me just\nassign this to a variable\nokay let me say\nproduct\nbecause we've used x here\nand then let me call my function that is\nmy func\nand pass the value 2 3 and say 4.\nall right so let's display the product\nso let me just copy this\ncode\nand here let me say the product\nof the three\ndigits is\nand let me say product here because that\nis what is being used here right\nall right so let me save this and\nexecute it\nall right first it displays the area of\nthe circle\nall right and then we say okay\nand there we go it displays the message\nthe product of the three digits is 24.\nso let me do one thing let me just\ncomment this out\nokay\nlet me save it and then execute it again\nit just displays this\nall right so this is how we can make use\nof arrow functions\nmoving on let's look at the generator\nfunction\nnow regular functions typically return\nonly one value right or a single value\nor sometimes even nothing but a\ngenerator function can return multiple\nvalues\nand the speciality is that it can do it\nso on demand all right now to create a\ngenerator function we make use of an\nasterisk\nso an asterisk indicates that the\nfunction is a generator function\nso here you can see that we have a\nfunction followed by asterisks and we've\ncreated a function called generator\nsequence\nso here you can see we have the asterisk\nafter the keyword function followed by\nthe name of the function right\nbut the main method of a generator\nfunction is the next method\nwhen this method is called it basically\nruns the execution until the nearest\nyield value\nall right all the nearest yield\nstatement\nthen the function execution pauses and\nthe yielded value is returned to the\nouter code\nall right so the result of the next\nmethod is always an object with two\nproperties it has a value property which\nis basically the yielded value\nand then it has a done property which\ndisplays true if the function code is\nfinished or false if it's otherwise\nso let me show it execution for a\nclearer understanding so let's go back\nto our vs code\nand here let's create the generator\nfunction\nlet's say function\nasterisk\ngenerate\nfunction all right\nnow within which\ni make use of the keyword yield\nand i say yield 1 first\nfollowed by yield\n2\nand finally i make use of return which\nindicates the termination so i say\nreturn 3\nall right now let me make use of\na variable say generator\nand assign it to the generator function\nthat is generate\nfunction and now i create another\nvariable say 1\nwhich will basically\nreturn the value when i call the next\nfunction so here i say generator\ndot\nnext\nokay\nso whatever generator dot next returns\nit's stored in one\nso to display the message i say alert\nand now i'm going to make use of a\nmethod called json.stringify\n[Music]\nall right so basically this method\nconverts a javascript object or a value\nto a json string\nall right so within which i'm gonna say\none\nthat is this\nall right\nso now let me save this\nand execute it\nlet me refresh the page and there you go\nhere it returns\ntwo properties that has value and done\nit says value is one and done is false\nright it is false because we haven't\nreached the return statement yet\nso what we can do is to display the rest\nlet me just copy these\nand display it one by one\nsee there let's see this\nand here let me say 2\nand this is 3.\nlet me copy this\nokay here i say\n2\nand then i say three\nall right so let me save this and then\nexecute it\nso when i refresh the page\nit says one and false\nafter which again it says two and false\nand finally when it displays 3 it\nreturns true for the done property that\nmeans we've reached the end of the\nfunction definition\nso this is how you make use of a\ngenerator function\nnow let's move on to our last topic that\nis predefined functions\nnow javascript has many built-in\nfunctions all right now here are a few\nof them we have eval parseint pass float\nescape and unescape now let's go through\none by one\nall right first up is eval now this\nbasically evaluates a string and returns\na value\nall right so to help you understand this\nbetter let me go back to our vs code\nand now let me just create another file\nand let me call it\npredefined\nfunctions.html all right\nand i've just copied the initial code\nall right so for eval\nthe syntax is eval\nwithin which\ni say\nexpression\nall right now this is the general syntax\nso what this eval does is that it\nevaluates the expression\nand if the result is not a string the\nresult is just returned and if the\nresult is a string it is taken to be a\njavascript program and evaluate it\nso let me show you how it's done\nso first let's create three variables\nall right let's call them\nx\nand initialize it to five\nthen y\nwith 6\nand then let z\nbe 7 all right\nnow let's just displace the result on\nthe console so let's say console.log\neval\nof let me say\nx plus y\nall right\nafter which i again say console.log\nof eval\noffset\nhere since the expression is a string\nthis gets evaluated\nand here since it's not a string it just\nreturns the value z\nand here since it is not a string it\njust returns the value of z\nso let me save this\nand then execute it\nall right so let me just\ncheck\nour console\nthere you go it evaluated the expression\nand added the two values that is x and y\nand returned 11\nwhile z is returned as it is\nall right this is what eval does\nnext up is parseint now as the name\nsuggests it parses a string argument and\nreturns an integer of the specified\nradix or base\nand the syntax basically includes the\nkeyword parse\nand the string within paranthesis\npars float on the other hand passes a\nstring argument and returns a floating\npoint number\nagain the syntax has the keyword parse\nfloat along with the string within\nparenthesis\nnext up is escape now this returns a\nhexadecimal encoding of an argument\nand on the other hand unescape returns\nthe ascii string for the specified value\nso with that we come to the end of this\nvideo i hope you found it helpful if you\nhave any doubts or queries let us know\nin the comment section below\nso i'll see you guys in the next session\nuntil then keep learning and stay tuned\nto simply learn\nhi there if you like this video\nsubscribe to the simply learn youtube\nchannel and click here to watch similar\nvideos turn it up and get certified\nclick here\n",
  "words": [
    "hey",
    "guys",
    "welcome",
    "back",
    "another",
    "video",
    "simplylaw",
    "today",
    "video",
    "going",
    "learn",
    "javascript",
    "functions",
    "previous",
    "videos",
    "covered",
    "topics",
    "like",
    "javascript",
    "arrays",
    "loops",
    "new",
    "topic",
    "suggest",
    "go",
    "topics",
    "right",
    "jumping",
    "let",
    "go",
    "ahead",
    "look",
    "store",
    "us",
    "first",
    "going",
    "learn",
    "exactly",
    "javascript",
    "functions",
    "look",
    "javascript",
    "function",
    "expressions",
    "function",
    "constructor",
    "functions",
    "functions",
    "values",
    "functions",
    "objects",
    "arrow",
    "functions",
    "generator",
    "function",
    "predefined",
    "functions",
    "also",
    "forget",
    "subscribe",
    "channel",
    "hit",
    "bell",
    "icon",
    "never",
    "miss",
    "update",
    "moving",
    "first",
    "topic",
    "javascript",
    "functions",
    "basically",
    "function",
    "group",
    "reusable",
    "code",
    "called",
    "anywhere",
    "program",
    "right",
    "piece",
    "code",
    "want",
    "execute",
    "repeatedly",
    "entire",
    "program",
    "makes",
    "sense",
    "define",
    "call",
    "right",
    "makes",
    "code",
    "efficient",
    "readable",
    "also",
    "helps",
    "programmers",
    "write",
    "modular",
    "codes",
    "syntax",
    "make",
    "use",
    "function",
    "keyword",
    "followed",
    "mentioned",
    "name",
    "function",
    "name",
    "function",
    "completely",
    "choice",
    "next",
    "mention",
    "parameter",
    "list",
    "within",
    "curly",
    "braces",
    "define",
    "function",
    "function",
    "body",
    "basically",
    "code",
    "executed",
    "every",
    "time",
    "function",
    "called",
    "let",
    "go",
    "vs",
    "code",
    "editor",
    "created",
    "folder",
    "called",
    "demo",
    "functions",
    "within",
    "created",
    "html",
    "file",
    "called",
    "right",
    "typed",
    "initial",
    "code",
    "let",
    "create",
    "function",
    "let",
    "say",
    "script",
    "within",
    "use",
    "keyword",
    "function",
    "keyword",
    "give",
    "name",
    "function",
    "say",
    "underscore",
    "function",
    "function",
    "takes",
    "parameter",
    "say",
    "value",
    "function",
    "basically",
    "returns",
    "square",
    "digit",
    "right",
    "within",
    "say",
    "document",
    "dot",
    "get",
    "element",
    "id",
    "id",
    "demo",
    "displays",
    "value",
    "value",
    "right",
    "function",
    "basically",
    "displays",
    "square",
    "number",
    "outside",
    "function",
    "let",
    "call",
    "function",
    "function",
    "let",
    "pass",
    "value",
    "5",
    "right",
    "let",
    "save",
    "execute",
    "let",
    "go",
    "back",
    "file",
    "go",
    "displays",
    "value",
    "25",
    "simple",
    "function",
    "took",
    "value",
    "digit",
    "parameter",
    "returned",
    "square",
    "moving",
    "next",
    "concept",
    "function",
    "expression",
    "learnt",
    "previously",
    "function",
    "declaration",
    "function",
    "also",
    "defined",
    "expression",
    "syntax",
    "looks",
    "like",
    "function",
    "created",
    "assigned",
    "variable",
    "explicitly",
    "like",
    "value",
    "meaning",
    "remains",
    "create",
    "function",
    "store",
    "value",
    "returns",
    "variable",
    "case",
    "x",
    "right",
    "let",
    "go",
    "vs",
    "code",
    "let",
    "help",
    "understand",
    "better",
    "create",
    "another",
    "function",
    "say",
    "let",
    "x",
    "equals",
    "let",
    "use",
    "simpler",
    "function",
    "mentioned",
    "function",
    "within",
    "curly",
    "braces",
    "display",
    "alert",
    "message",
    "display",
    "message",
    "saying",
    "hello",
    "right",
    "display",
    "message",
    "let",
    "copy",
    "output",
    "code",
    "place",
    "going",
    "displaying",
    "value",
    "x",
    "right",
    "since",
    "consists",
    "function",
    "type",
    "curly",
    "braces",
    "crucial",
    "execution",
    "right",
    "let",
    "save",
    "execute",
    "let",
    "execute",
    "go",
    "says",
    "site",
    "says",
    "hello",
    "successfully",
    "executed",
    "piece",
    "code",
    "also",
    "assign",
    "variable",
    "x",
    "another",
    "variable",
    "call",
    "variable",
    "instead",
    "right",
    "say",
    "let",
    "equals",
    "x",
    "instead",
    "calling",
    "x",
    "simply",
    "call",
    "let",
    "save",
    "let",
    "refresh",
    "page",
    "go",
    "still",
    "displays",
    "message",
    "hello",
    "right",
    "one",
    "ways",
    "defining",
    "function",
    "expression",
    "moving",
    "next",
    "concept",
    "function",
    "constructor",
    "javascript",
    "functions",
    "defined",
    "using",
    "keyword",
    "function",
    "right",
    "functions",
    "also",
    "defined",
    "using",
    "javascript",
    "function",
    "basic",
    "syntax",
    "created",
    "function",
    "called",
    "function",
    "used",
    "keyword",
    "new",
    "used",
    "constructor",
    "function",
    "inside",
    "provide",
    "parameter",
    "list",
    "return",
    "value",
    "next",
    "call",
    "function",
    "right",
    "let",
    "go",
    "back",
    "vs",
    "code",
    "let",
    "make",
    "changes",
    "piece",
    "code",
    "create",
    "function",
    "say",
    "underscore",
    "function",
    "okay",
    "right",
    "let",
    "change",
    "name",
    "function",
    "right",
    "use",
    "keyword",
    "new",
    "function",
    "constructor",
    "function",
    "music",
    "within",
    "passing",
    "parameters",
    "b",
    "going",
    "return",
    "sum",
    "digits",
    "right",
    "calling",
    "function",
    "let",
    "store",
    "value",
    "variable",
    "say",
    "x",
    "let",
    "call",
    "function",
    "function",
    "parameters",
    "2",
    "three",
    "right",
    "let",
    "display",
    "gon",
    "na",
    "copy",
    "want",
    "display",
    "value",
    "x",
    "right",
    "right",
    "let",
    "save",
    "execute",
    "refresh",
    "page",
    "displays",
    "sum",
    "make",
    "readable",
    "let",
    "display",
    "another",
    "message",
    "let",
    "say",
    "sum",
    "x",
    "right",
    "let",
    "save",
    "refresh",
    "page",
    "says",
    "sum",
    "right",
    "make",
    "use",
    "function",
    "constructor",
    "next",
    "learn",
    "functions",
    "name",
    "suggests",
    "functions",
    "invoked",
    "automatically",
    "without",
    "called",
    "previously",
    "learnt",
    "function",
    "expressions",
    "saw",
    "parentheses",
    "crucial",
    "add",
    "parentheses",
    "around",
    "function",
    "indicate",
    "function",
    "expression",
    "syntax",
    "done",
    "made",
    "sure",
    "enclosed",
    "entire",
    "function",
    "within",
    "parentheses",
    "let",
    "help",
    "let",
    "go",
    "back",
    "vs",
    "code",
    "let",
    "create",
    "another",
    "script",
    "let",
    "create",
    "function",
    "within",
    "parentheses",
    "say",
    "function",
    "taking",
    "parameters",
    "instead",
    "going",
    "alert",
    "message",
    "let",
    "say",
    "hello",
    "welcome",
    "right",
    "going",
    "call",
    "function",
    "mention",
    "parentheses",
    "let",
    "save",
    "execute",
    "refresh",
    "page",
    "says",
    "hello",
    "welcome",
    "never",
    "called",
    "function",
    "rather",
    "got",
    "invoked",
    "functions",
    "let",
    "go",
    "ahead",
    "look",
    "functions",
    "values",
    "javascript",
    "function",
    "basically",
    "value",
    "deal",
    "value",
    "simple",
    "syntax",
    "closely",
    "look",
    "syntax",
    "might",
    "think",
    "function",
    "expressions",
    "well",
    "case",
    "first",
    "define",
    "function",
    "assign",
    "particular",
    "variable",
    "case",
    "expressions",
    "function",
    "definition",
    "defined",
    "initialization",
    "variable",
    "right",
    "also",
    "specify",
    "parenthesis",
    "order",
    "call",
    "function",
    "help",
    "understand",
    "better",
    "let",
    "go",
    "back",
    "vs",
    "code",
    "let",
    "erase",
    "let",
    "define",
    "function",
    "returns",
    "product",
    "two",
    "digits",
    "let",
    "call",
    "product",
    "takes",
    "two",
    "parameters",
    "let",
    "say",
    "b",
    "within",
    "return",
    "value",
    "b",
    "right",
    "let",
    "create",
    "another",
    "variable",
    "say",
    "equals",
    "function",
    "oh",
    "sorry",
    "name",
    "function",
    "product",
    "product",
    "two",
    "five",
    "right",
    "basically",
    "returns",
    "us",
    "10",
    "right",
    "let",
    "copy",
    "display",
    "web",
    "page",
    "change",
    "message",
    "product",
    "let",
    "change",
    "let",
    "save",
    "execute",
    "let",
    "refresh",
    "page",
    "go",
    "see",
    "message",
    "product",
    "make",
    "alterations",
    "say",
    "want",
    "multiply",
    "value",
    "5",
    "right",
    "basically",
    "returns",
    "10",
    "value",
    "multiplied",
    "let",
    "save",
    "refresh",
    "page",
    "go",
    "returns",
    "go",
    "displays",
    "make",
    "use",
    "functions",
    "values",
    "moving",
    "next",
    "topic",
    "functions",
    "objects",
    "javascript",
    "functions",
    "special",
    "type",
    "objects",
    "called",
    "function",
    "objects",
    "function",
    "includes",
    "string",
    "holds",
    "actual",
    "code",
    "function",
    "body",
    "function",
    "code",
    "literally",
    "string",
    "although",
    "recommended",
    "also",
    "create",
    "function",
    "help",
    "function",
    "constructor",
    "show",
    "little",
    "later",
    "let",
    "look",
    "syntax",
    "variable",
    "called",
    "body",
    "basically",
    "consists",
    "function",
    "body",
    "enclosed",
    "double",
    "quotes",
    "mistake",
    "please",
    "ignore",
    "right",
    "next",
    "variable",
    "function",
    "name",
    "create",
    "function",
    "using",
    "keyword",
    "new",
    "pass",
    "parameter",
    "list",
    "body",
    "basically",
    "tells",
    "us",
    "function",
    "returns",
    "right",
    "next",
    "alert",
    "message",
    "call",
    "function",
    "let",
    "show",
    "executed",
    "back",
    "obvious",
    "code",
    "let",
    "create",
    "another",
    "function",
    "let",
    "say",
    "function",
    "returns",
    "area",
    "circle",
    "right",
    "let",
    "create",
    "body",
    "variable",
    "returns",
    "area",
    "circle",
    "pi",
    "r",
    "square",
    "make",
    "use",
    "math",
    "dot",
    "radius",
    "radius",
    "right",
    "basically",
    "pi",
    "r",
    "square",
    "let",
    "see",
    "circle",
    "music",
    "let",
    "create",
    "function",
    "using",
    "new",
    "keyword",
    "function",
    "pass",
    "value",
    "radius",
    "body",
    "right",
    "basically",
    "definition",
    "function",
    "let",
    "use",
    "alert",
    "display",
    "area",
    "say",
    "alert",
    "circle",
    "five",
    "right",
    "let",
    "save",
    "execute",
    "refresh",
    "page",
    "displays",
    "area",
    "circle",
    "use",
    "functions",
    "objects",
    "moving",
    "next",
    "concept",
    "arrow",
    "functions",
    "functions",
    "written",
    "compactly",
    "precisely",
    "help",
    "arrow",
    "functions",
    "right",
    "arrow",
    "function",
    "expressions",
    "methods",
    "used",
    "constructors",
    "also",
    "using",
    "arrow",
    "functions",
    "using",
    "const",
    "safer",
    "option",
    "function",
    "expression",
    "always",
    "constant",
    "value",
    "syntax",
    "omit",
    "return",
    "keyword",
    "within",
    "curly",
    "braces",
    "function",
    "single",
    "statement",
    "syntax",
    "first",
    "provide",
    "name",
    "function",
    "equal",
    "sign",
    "followed",
    "argument",
    "list",
    "later",
    "make",
    "use",
    "arrow",
    "icon",
    "define",
    "expression",
    "basically",
    "nothing",
    "let",
    "go",
    "back",
    "vs",
    "code",
    "check",
    "let",
    "create",
    "another",
    "function",
    "let",
    "say",
    "const",
    "func",
    "equals",
    "say",
    "want",
    "display",
    "product",
    "three",
    "digits",
    "let",
    "pass",
    "b",
    "c",
    "parameters",
    "make",
    "use",
    "icon",
    "indicates",
    "arrow",
    "function",
    "within",
    "say",
    "return",
    "b",
    "c",
    "right",
    "let",
    "assign",
    "variable",
    "okay",
    "let",
    "say",
    "product",
    "used",
    "x",
    "let",
    "call",
    "function",
    "func",
    "pass",
    "value",
    "2",
    "3",
    "say",
    "right",
    "let",
    "display",
    "product",
    "let",
    "copy",
    "code",
    "let",
    "say",
    "product",
    "three",
    "digits",
    "let",
    "say",
    "product",
    "used",
    "right",
    "right",
    "let",
    "save",
    "execute",
    "right",
    "first",
    "displays",
    "area",
    "circle",
    "right",
    "say",
    "okay",
    "go",
    "displays",
    "message",
    "product",
    "three",
    "digits",
    "let",
    "one",
    "thing",
    "let",
    "comment",
    "okay",
    "let",
    "save",
    "execute",
    "displays",
    "right",
    "make",
    "use",
    "arrow",
    "functions",
    "moving",
    "let",
    "look",
    "generator",
    "function",
    "regular",
    "functions",
    "typically",
    "return",
    "one",
    "value",
    "right",
    "single",
    "value",
    "sometimes",
    "even",
    "nothing",
    "generator",
    "function",
    "return",
    "multiple",
    "values",
    "speciality",
    "demand",
    "right",
    "create",
    "generator",
    "function",
    "make",
    "use",
    "asterisk",
    "asterisk",
    "indicates",
    "function",
    "generator",
    "function",
    "see",
    "function",
    "followed",
    "asterisks",
    "created",
    "function",
    "called",
    "generator",
    "sequence",
    "see",
    "asterisk",
    "keyword",
    "function",
    "followed",
    "name",
    "function",
    "right",
    "main",
    "method",
    "generator",
    "function",
    "next",
    "method",
    "method",
    "called",
    "basically",
    "runs",
    "execution",
    "nearest",
    "yield",
    "value",
    "right",
    "nearest",
    "yield",
    "statement",
    "function",
    "execution",
    "pauses",
    "yielded",
    "value",
    "returned",
    "outer",
    "code",
    "right",
    "result",
    "next",
    "method",
    "always",
    "object",
    "two",
    "properties",
    "value",
    "property",
    "basically",
    "yielded",
    "value",
    "done",
    "property",
    "displays",
    "true",
    "function",
    "code",
    "finished",
    "false",
    "otherwise",
    "let",
    "show",
    "execution",
    "clearer",
    "understanding",
    "let",
    "go",
    "back",
    "vs",
    "code",
    "let",
    "create",
    "generator",
    "function",
    "let",
    "say",
    "function",
    "asterisk",
    "generate",
    "function",
    "right",
    "within",
    "make",
    "use",
    "keyword",
    "yield",
    "say",
    "yield",
    "1",
    "first",
    "followed",
    "yield",
    "2",
    "finally",
    "make",
    "use",
    "return",
    "indicates",
    "termination",
    "say",
    "return",
    "3",
    "right",
    "let",
    "make",
    "use",
    "variable",
    "say",
    "generator",
    "assign",
    "generator",
    "function",
    "generate",
    "function",
    "create",
    "another",
    "variable",
    "say",
    "1",
    "basically",
    "return",
    "value",
    "call",
    "next",
    "function",
    "say",
    "generator",
    "dot",
    "next",
    "okay",
    "whatever",
    "generator",
    "dot",
    "next",
    "returns",
    "stored",
    "one",
    "display",
    "message",
    "say",
    "alert",
    "going",
    "make",
    "use",
    "method",
    "called",
    "music",
    "right",
    "basically",
    "method",
    "converts",
    "javascript",
    "object",
    "value",
    "json",
    "string",
    "right",
    "within",
    "gon",
    "na",
    "say",
    "one",
    "right",
    "let",
    "save",
    "execute",
    "let",
    "refresh",
    "page",
    "go",
    "returns",
    "two",
    "properties",
    "value",
    "done",
    "says",
    "value",
    "one",
    "done",
    "false",
    "right",
    "false",
    "reached",
    "return",
    "statement",
    "yet",
    "display",
    "rest",
    "let",
    "copy",
    "display",
    "one",
    "one",
    "see",
    "let",
    "see",
    "let",
    "say",
    "2",
    "let",
    "copy",
    "okay",
    "say",
    "2",
    "say",
    "three",
    "right",
    "let",
    "save",
    "execute",
    "refresh",
    "page",
    "says",
    "one",
    "false",
    "says",
    "two",
    "false",
    "finally",
    "displays",
    "3",
    "returns",
    "true",
    "done",
    "property",
    "means",
    "reached",
    "end",
    "function",
    "definition",
    "make",
    "use",
    "generator",
    "function",
    "let",
    "move",
    "last",
    "topic",
    "predefined",
    "functions",
    "javascript",
    "many",
    "functions",
    "right",
    "eval",
    "parseint",
    "pass",
    "float",
    "escape",
    "unescape",
    "let",
    "go",
    "one",
    "one",
    "right",
    "first",
    "eval",
    "basically",
    "evaluates",
    "string",
    "returns",
    "value",
    "right",
    "help",
    "understand",
    "better",
    "let",
    "go",
    "back",
    "vs",
    "code",
    "let",
    "create",
    "another",
    "file",
    "let",
    "call",
    "predefined",
    "right",
    "copied",
    "initial",
    "code",
    "right",
    "eval",
    "syntax",
    "eval",
    "within",
    "say",
    "expression",
    "right",
    "general",
    "syntax",
    "eval",
    "evaluates",
    "expression",
    "result",
    "string",
    "result",
    "returned",
    "result",
    "string",
    "taken",
    "javascript",
    "program",
    "evaluate",
    "let",
    "show",
    "done",
    "first",
    "let",
    "create",
    "three",
    "variables",
    "right",
    "let",
    "call",
    "x",
    "initialize",
    "five",
    "6",
    "let",
    "z",
    "7",
    "right",
    "let",
    "displace",
    "result",
    "console",
    "let",
    "say",
    "eval",
    "let",
    "say",
    "x",
    "plus",
    "right",
    "say",
    "eval",
    "offset",
    "since",
    "expression",
    "string",
    "gets",
    "evaluated",
    "since",
    "string",
    "returns",
    "value",
    "z",
    "since",
    "string",
    "returns",
    "value",
    "z",
    "let",
    "save",
    "execute",
    "right",
    "let",
    "check",
    "console",
    "go",
    "evaluated",
    "expression",
    "added",
    "two",
    "values",
    "x",
    "returned",
    "11",
    "z",
    "returned",
    "right",
    "eval",
    "next",
    "parseint",
    "name",
    "suggests",
    "parses",
    "string",
    "argument",
    "returns",
    "integer",
    "specified",
    "radix",
    "base",
    "syntax",
    "basically",
    "includes",
    "keyword",
    "parse",
    "string",
    "within",
    "paranthesis",
    "pars",
    "float",
    "hand",
    "passes",
    "string",
    "argument",
    "returns",
    "floating",
    "point",
    "number",
    "syntax",
    "keyword",
    "parse",
    "float",
    "along",
    "string",
    "within",
    "parenthesis",
    "next",
    "escape",
    "returns",
    "hexadecimal",
    "encoding",
    "argument",
    "hand",
    "unescape",
    "returns",
    "ascii",
    "string",
    "specified",
    "value",
    "come",
    "end",
    "video",
    "hope",
    "found",
    "helpful",
    "doubts",
    "queries",
    "let",
    "us",
    "know",
    "comment",
    "section",
    "see",
    "guys",
    "next",
    "session",
    "keep",
    "learning",
    "stay",
    "tuned",
    "simply",
    "learn",
    "hi",
    "like",
    "video",
    "subscribe",
    "simply",
    "learn",
    "youtube",
    "channel",
    "click",
    "watch",
    "similar",
    "videos",
    "turn",
    "get",
    "certified",
    "click"
  ],
  "keywords": [
    "back",
    "another",
    "going",
    "learn",
    "javascript",
    "functions",
    "new",
    "go",
    "right",
    "let",
    "look",
    "first",
    "function",
    "expressions",
    "constructor",
    "values",
    "objects",
    "arrow",
    "generator",
    "also",
    "moving",
    "basically",
    "code",
    "called",
    "execute",
    "define",
    "call",
    "syntax",
    "make",
    "use",
    "keyword",
    "followed",
    "name",
    "next",
    "parameter",
    "within",
    "body",
    "vs",
    "created",
    "create",
    "say",
    "value",
    "returns",
    "square",
    "displays",
    "pass",
    "save",
    "returned",
    "expression",
    "variable",
    "x",
    "help",
    "display",
    "alert",
    "message",
    "hello",
    "copy",
    "says",
    "refresh",
    "page",
    "one",
    "using",
    "used",
    "return",
    "okay",
    "parameters",
    "b",
    "digits",
    "2",
    "three",
    "parentheses",
    "done",
    "product",
    "two",
    "see",
    "string",
    "area",
    "circle",
    "method",
    "yield",
    "result",
    "false",
    "eval"
  ]
}