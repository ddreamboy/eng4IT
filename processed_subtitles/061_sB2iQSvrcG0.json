{
  "text": "Many of us can code to some capacity\nwhether you're completely self-taught\nwhether you have went for  a\none-day crash course or boot camp or\nwhether you went for four years at\ncollege. You know at the end of the day\nit all seems to be the same, it's all\ncoding right? So does that mean that any\none of us can just go out and be a\nprofessional software developer? Surely\nthat's too easy,\nand as it turns out, you're right it's\nnot just like that. So what sets apart a\nhobbyist programmer from a professional\ndeveloper? The answer is software\nengineering! Hello and welcome back to\nanother random Wednesday episode. So as\nyou would have imagined today's episode\nwill be about software engineering and\nthe reason why we're talking about\nthis is because more often than not if\nyou enter the computer science\ndegree in a university or college, well,\nchances are at least some emphasis will\nbe placed on this, and for very good\nreason. So first and foremost what is\nsoftware engineering? Well, you can think\nof it as a standardized, structured and\nthorough approach to writing code, to\nbasically treating the whole\ndevelopment process from start to finish\nin a standardized manner. Of course the\nquestion is why do we want to do things\nthis way? Why do we want to actually\nformalize things if you know programming\nis something you can do sitting at home?\nWell there are a couple of reasons why.\nFirst and foremost we have to be sure\nthat we are building the correct product\ndon't forget now that you're working as\na professional developer you're going to\nhave to actually deliver what the\ncustomer wants to them! So that's one\nvery important point. Secondly you want\nto ensure that you're writing code to a\ncertain standard. Again this is only sort\nof really useful in a professional\nenvironment, when you're writing\ncode that you expect to maintain over\nmonths or years, or when you're working\ntogether in a team. Certain conventions,\ncertain coding styles now become\nimportant. And thirdly you want to ensure\nthat your code meets a certain level of\nrigor,\nand what that means is it needs to be\ncorrect, it needs to be efficient, it\nneeds to be secure, and software\nengineering actually defines some\ntechniques in which you can actually\nboost your confidence on these things. So\nyeah, in the real world software\nengineering is a very important skill\nand that is why today we'll be taking a\nlook at some basics of software\nengineering. We'll be taking a look at\nwhat it really is how we really\ngo about doing it, as well as how it all\nfits together.\nHopefully with this idea in mind when\nyou actually start off with your\nsoftware engineering course at school\nwell it makes things slightly easier for\nyou\nSo yeah let's basically be long and\nshort of it, let's jump into our first\npart: While software engineering is often\nsorta mixed up with\nprogramming, really software engineering\nstarts before any development even\nbegins and we start off by actually\nunderstanding what the customer wants\nfirst. Now as a hobbyist programmer we\nnormally don't do this part we just sort\nof jump in, write code, and hopefully the inspiration comes to us as we\nare doing it. However, again, when you're\ndeveloping in a professional context you\ncan't quite do things that way. Instead\nthe first thing you need to do is\nrequirements gathering. It's interesting\nhow much time is actually devoted to\nthis and it's so important because if\nyou develop the wrong product, you've\njust wasted a whole bunch of time! You\ndon't want that! You want to make sure\nthat you've actually developed something\nthat is useful. And here's the deal, at face value\nthis sounds simple, right? Sit down with your\ncustomer, ask them what they want.\nExcept a lot of the time, they don't know\nwhat they want either! And that's why there\nare actually many interesting\napproaches to requirements gathering as\nwell as requirements analysis, that gets\nus to a point where we can write a piece\nof software that, will ensure\nthat a customer is satisfied to a certain\ndegree. Let's take a look at some of\nthese techniques as well as how they can\nbe useful. Of course the simplest way to\nunderstand your customers requirements\nis to simply get them to provide a list.\nHowever there are many shortcomings of\ndoing things this way. I mean the list\ncould be very long and yet because it is\nactually constructed by them, non-programmers, it\nmay not be something that is perfectly\nuseful for you. So usually it's for the\nbest for you to actually go out and\ngather your own requirements, and here\nare some ways of doing so: Of course the bulk\nof the methods involve, you going\nto them and seeing what they actually\nwant, but there are many structured ways\nof doing it. Some examples include surveys, interviews,\nand focus groups. These are of course as\nyou expect mostly conversational in\nnature but well at least you're one\ntaking down the notes, you are the one\nconducting the entire session, so the\nresults will certainly be more\nproductive. Alternatively if an existing\nsoftware suite is already available you\ncan also observe your users actually\nusing that. By taking note of the things\nthat they're used to, as well as their pain\npoints, you can create a better program\nfor them. However what's probably the\nmost interesting of the lot is use case\nanalysis so let's take a look at that!\nUse case analysis is a very interesting\nway of actually expressing what\na user wants because the approach is to\nactually describe a real usage scenario,\nand we're doing this from the point of\nview of the user, not from our\npoint of view as the coder. There generally\nis a pretty specific format for doing\nthis and most notably what we have is a\nmain success scenario, expressed as a\nseries of steps. Remember that there is\nno jargon here and what this means is,\neverything is sort of very\nintuitive, very descriptive of what user\nsees on screen, and how they interact\nwith it. So what we have here is just a\nvery kinda contrived example\nfor a Sales System. In order to\nadd a sale you want to actually initiate\nthat. Your program will require you to\nspecify some information namely the name\nand quantity, and when you do supply the\ninformation, well the information gets\nstored onto the system, and that is\nbasically from start to finish\nwhat's going to happen when you do this\nthis - this is your success scenario. Now usually\nwe expand use cases by talking about\nother kinds of scenarios that could\npossibly happen.\nFor example this would be an error\ncondition - if you actually give it a\nquantity less than 1, how does the\nsoftware react? Well in this case it\nbasically gives an error and then\nreturns back to step 2, to wait for the\nuser to  correct their mistake.\nSo as you can imagine a use case could\nget quite long when there are multiple\nexpansions. In addition to this, some\nextra information we can include are\npreconditions, which are the\nconditions that have to be true before\nwe can actually start with this scenario,\nas well as the postconditions and that\nis what will happen at the end of the\nday. In this case we only have a post\ncondition for the main success scenario,\nbut that of course is not the only\noutcome. For example if the user closes\nthe dialog box, we can have a different\npostcondition as well. There is another\nway of expressing the same thing and\nthat is true user stories. Now, these tend\nto be less detailed but they really put\nyou in the shoes of the user, because\nwell, usually user stories are expressed like\nthis, as a statement. The statement needs to \ncontain three important pieces of\ninformation - Firstly that is, who\nthis pertains to, what they want to do, as\nwell as why they want to do that. So this\nlast part is something that may be\nmissing from your use case.\nWe do all\nthis for the purpose of getting good\nrequirements that we can work with, and\nso the next part is to actually analyze\nthese requirements. Usually the first\nstep will be to actually generate two\nkinds of requirements - namely functional\nand non-functional requirements, so let's\ntake a look at what this means. A\nfunctional requirement basically says\nwhat we need the system to do, right? It\ndescribes a function of the system.\nConversely a non-functional requirement\nusually describes a characteristic, so\nthese could be say a performance\nrequirement. it doesn't actually say what\nthe system needs to do, but instead\ndescribe something about the process\nduring which that is done. Once you have\nall your requirements in order, you can\nthen begin to build a prototype.\nNow usually prototypes are\nnon-functional. In fact I've done\nprototypes that are just powerpoint\nslides. The idea is you're gonna have to pitch\nthat to your customer to show\nthem what things look like, how\neverything is laid out, how one part of\nits program actually links to another...\nand basically this gives them a very\ngood feel of how things are going to\nwork at the end of the day. Of course\nthis is the point where you have to go\nback and forth to tweak a\nprototype to make sure that your user's\nneeds are actually being met, and only when\nthis part is done\nwhen requirements are certain,\ncan we actually delve into serious\ndevelopment. Moving on to our second\nstage - Planning. Now to be honest planning\nactually sorta runs concurrently\nwith your requirements gathering and\nanalysis, but the whole point of planning\nis that you now have to start to\nthink about how you want to do things\nin your coming weeks and months. Again,\nthis is something we tend to not do a\nlot when we are just a hobbyist\nprogrammer and we are sorta doing\nthings on an exploratory basis. However\nwhen we are working with a large project,\nyou know tens of thousands of lines of\ncode interacting with each other, it\nwould be good to have say a roadmap or a\nplan of some sort so we know how the\ndifferent parts actually interact with\neach other, as well as how we're going to\napproach developing them. So yeah the\nplanning process can be quite an\nin-depth process as well and here are\nsome of the considerations we need to go\nthrough during this part. One big aspect\nof planning is actually modularization,\nand that is how we're are actually going\nto break down our large program into\nsmaller parts. Here's a sample of\nmodularization in action. Basically we\nhave a game and we've sorta split it\nout into these components. In this\nparticular breakdown we also have sorta\nthe user in the equation and\nbasically how modules actually\nlink up to each other. There are many ways of \nformally representing this idea, but the\nmain point is, thought needs to go into\nhow things are going to be compartmentalized\nso that when you\nbuild things, it's more organized. Usually\nduring modularization we have two huge\ngoals, and that is to achieve high\ncohesion and low coupling. Here's what\nthis means firstly cohesion\nrefers to how much the elements within a\nmodule are actually related to each other.\nWe can think of this in terms of what\nthe module actually does, or what data it\nworks with. High cohesion comes about\nwhen everything is strongly related, so\none example I have here is a records\nmodule, in which all the functions\nactually involve working with the\nrecords, either retrieving them, or manipulating\nthem, and well, that is a highly\ncohesive module. One that has low\ncohesion is one in which the tasks don't\nreally have anything to do with each\nother. Usually we have the temptation to\ncreate, say a utilities or tools module\nin which really they are just kinda\ngrouped together because they have\nnowhere else to go, and that is low cohesion. Now coupling on the other hand\nactually deals with how modules interact\nwith each other.\nIf modules are highly dependent on each\nother then we can say they are highly\ncoupled, and one good way to test this is,\nif we modify one module, how much effect\ndoes that have on another module? How\nmuch do we have to actually modify the\nother module, before everything works\nagain. In the best case when there is no\ncoupling at all, modifying one module\ndoes not require modifications to other\nmodules. You can just replace it, the\nprograms still works, so that is our\nbest case. Usually in situations of low\ncoupling which is the good case, two\nmodules only pass messages to each other.\nThey don't care about the inner workings\nof each other, and as a result they're\nnot really dependent on each other. If\nyou swap out a different module, as long\nas it speaks the same language, then\neverything will work perfectly. So going\nback to our game engine example, here is\na low coupling situation in which we can\ntest if an enemy has hit the player. We\nstart with the game engine checking the\nposition of the player by sending a\nrequest to the player module. It complies\nby giving the location back. The game\nengine can then test against the enemy\nmodule, again to see where that is.\nAfter getting the information back, it\ncan then perform a comparison\nIf the two are really colliding, then the\ngame engine sends another message to the\nplayer module telling it to actually\ndeduct from the health. So yeah, this is a\nsituation in which we're just passing\nmessages around and so well there is\nvery little dependence. We can easily\nexpand the situation to have multiple\nplayers or multiple enemies, and things\nwill still work the same. We can easily\nextend the situation to well a case of\nmultiple players even multiple enemies\nof different types, and everything will\nstill work the same way and that's the\nbeauty of setting things up like this.\nHigh coupling on the other hand is when\ntwo modules highly dependent on each\nother. Going back again to our game\nengine example, that is when\neverything actually shares a game state\nvariable. That is, we actually store our\nstate somewhere, and everyone just talks\nto that state object. This creates a\nlarge amount of dependencies everywhere\nand yeah basically any modifications is\ngoing to confuse everything. So yeah\nplease don't do this! When we correctly\nachieve high cohesion and low coupling,\nwe achieve what is known as a separation\nof concerns. Each module does its own\nthing, it doesn't care about the other\nmodules, and this actually increases code\nreadability as well as maintainability.\nIf you ever need to go in and fix or\nupgrade something, you know to go just to\nthat one place, and you know for sure\nthat making changes here\nfirstly will not break anything else, and\nsecondly it's the only place you need to\nmodify, to be guaranteed that\nthings are going to change the\nway you expect it to, because nowhere else\nin the code is handling the same task. So\nyeah great advantages for actually doing\nthings this way, especially when\nyou're working on a huge project or when\nyou're working in a team. And finally,\nonly after all this legwork is actually\ncomplete can we actually delve into\ndevelopment. Now again, this is slightly\ndifferent from developing as a hobbyist,\nbecause there are certain structured\nways in which you actually go about with\nthe development. For example one very\ncommon thing in software engineering is\nwhat is known as patterns.\nNow the idea is this, generally \nthe same kind of problem comes up a lot,\nand so to make things simple we can\nsolve it using a more or less\nstandardized approach. This is highly\nencouraged since it creates code that is\nmore intuitive and easy to read, as\nopposed to some creative way\nin which you are trying to solve a\ncommon problem. Also if you follow a\nstructured pattern you'll be more\nconfident about its correctness because\nwell, again, it's a tried and tested thing.\nLet's take a look at a common pattern\ncalled Model View Controller or MVC for\nshort. The MVC pattern is particularly\nsignificant because of how it applies to\nbasically any program, basically any\nprogram that has you know a storage or\nlogic component that interacts with a\nuser interface can benefit from using\nthis pattern. So here's how it works:\nEssentially we start off with a model\nwhich, as mentioned, contains our data and\nlogic. One key point to note is that this\nmodel is completely abstract. It is the\nlow-level representation of your data, as\nwell as the functions required to tweak\nthem, or retrieve them. However your user\ncannot directly you know look at this\nmodel and make any sense out of it.\nInstead if you want to show you user the\ncontent, it needs to go through a view.\nThis view knows how to actually\ntake the data from the model, and present\nit in whatever way to the user. Of course\nright now everything is just one way. If\nthe user wants to actually modify the\ndata, chances are they need to poke at some controls, and this allows the user\nto either change up what they are seeing,\nor make some modifications to the data\nin the back-end. So yeah this is how Model\nView and controller actually links\neverything together. To make things more\nconcrete, going back to our\nsales example, this may be how everything\ncan be laid out. So the information held\nin our model are the sales records, the\nview for it is to actually display\neverything in a table. For the user to\nactually interact with the various\nfeatures, we have a bunch of buttons in\nthe sidebar and basically well, that is\nthe controller. Having things in this\nmanner gives us\nthe additional advantage of\nsubstitutability, and that is perhaps if\nwe don't like the table view, well we can\neasily replace that with a chart.\nNotice that in doing things this way, we\ndon't actually require any modifications\nto either the controller or the model.\nThe model, the data stays\nexactly the same. The controller as well\ndoesn't change, we are only changing up\nhow we are presenting the same data.\nSo yeah when MVC is done correctly,\nsubstitutability is something we achieve.\nSimilarly perhaps the user now\nis an administrator, and we want to give\nthem more tools to work with. Again all\nwe have to do is to replace the\ncontroller. The view and the model are not\naffected, but now the user actually has\nmore controls. Don't forget of course\nthat now you are, number one, working in a\nteam, number two, working on a project\nthat may be quite huge, and yet\nneeds to be iterated upon over time. This\nis why one huge area of emphasis and\nsoftware engineering is writing readable\ncode - Code that you can actually go back\nand modify, and not have to spend too\nmuch time trying to understand what you\nmeant writing the code the first time. This\nis why many good practices are actually\nput into place, and if you follow these\ngood practices you can make your code\neasier to read. Let's take a look at some\nof them. One very common good practice is\nto avoid magic numbers, and it so happens\nthat I have a very good real-world\nexample to show you. Basically I've\nbeen creating an Arduino project that\ninvolves an infrared sensor, so when you\npress buttons on say, your TV\nremote controller, my project is actually\nable to pick it up and my code can\nunderstand which button is pressed, and\nactually, well, reacts accordingly.\nHowever the button pressed is actually\nread in as some weird numerical code\nlike this.\nImagine if I just left it in my code\nlike that. If I came back two months\nlater, no way in hell am I going to\nremember what all these numbers actually\nrepresent, and yeah this basically is\nextremely harmful to code readability.\nUsually magic numbers are not quite\narbitrary as\nthis, perhaps they're things like the \nscreen width and height, or maybe they're\njust numbers that are preset by the\nprogrammer. However it remains that just\nhaving a number hanging out here isn't\ngood, because you don't understand what\nit means, and usually the workaround to\nthis is to actually extract them to a\nvariable. Or in this case because I'm\nusing C++ I can also use a macro. By\nassigning it to a meaningful name, this\ncode becomes much more readable. This\ntells me that this is the previous\nbutton on my infrared remote control and\nwell that is infinitely more readable\nthan just having a bunch of numbers like\nthis. So yeah they call this magic\nnumbers, as if the number was magically\nselected. Another good practice is\nvariable naming now. They're actually a\nlot of rules for this, but the one I find\nthe most useful is just, well, picking\nnames that make sense. For example when\nyou have a function, you don't want to call it\nsomething like database, that really\ndoesn't say a lot about what this\nfunction actually does. Instead what it's\nusually preferred for function names are\nactually verbs, something that you know\nimplies that an action will take place.\nFor example, queryDatabase now tells us\nthat okay, this function actually hooks\ninto the database, and runs a query. So it\nis a verb, it describes an action and\nthat makes things so much clearer. Similarly for things like boolean\nvariables, we want to make sure that well\nyou know when you look at it you know\nwhat it means. For example isOn\nactually describes a state, and this is\neven more useful when we use it in\nconjunction with if-statements. if(power)\nis not a statement that makes a lot of\nsense, but we can basically read this one\nas if we were reading English because\nwell saying if (isOn) is very clear.\nright, if it's on, this is true,\nwe do something. Apart from knowing how\nto code well, there are also some tools\nthat it will be good if you\ncould get familiar with, and one huge\nexample of this our revision control\nsystems. You're probably heard of github. Github is a place in which people\nupload their code through a revision\ncontrol system.\nWhat these do is they help you keep\ntrack of changes, so you can easily jump\nback and forth between versions. At the\nsame time they also help you collaborate\nwith other coders because well, everybody\ncan actually commit their code, and\neverything gets merged together, to create\nyour final product. And finally testing!\nAgain something very different from when we actually do our own\nhobbyist development, because well the\nway we normally test our programs is to\njust open it up, you know randomly click\naround and if things work then that's\nall good. But again when it comes to\nsoftware engineering, we need to be a\nlittle bit more confident than just\nsaying, well I sorta poked around in\nthere for five minutes and everything\nseemed okay. Usually for larger scale\nprojects what we do is automated testing.\nThat's right none of that mucking\naround, trying to find bugs by\njust clicking around. Instead you use a\ntool and you basically tell it what to\ntest, so it goes from your code function\nby function, and yeah ,runs a set of test\ncases on each one of them. This is often\nknown as unit testing, and it's quite an\nimportant part of software engineering.\nWe've actually gone quite in-depth about\nunit testing in an earlier video, but I\nwill quite quickly summarize what are\nsome of the important concepts. If you want\nto know more you can always check out\nthat video itself. What probably deserves\nthe most emphasis is that testing is not\nfor finding bugs. When we're\ntesting a system, what we\nare really doing is to check the real\nworld, you know what's happening in our\nprogram, against our expectations. So yeah\nwith that in mind we can think about how\nwe can actually perform testing, and most\ncommonly we use a technique called unit\ntesting, which is automated in nature. Now\nlet's say we want to test this module, we\ncan actually use our testing tool to\nbasically poke at it. So for example we\ncan actually test a function of\nit, and critically along with that, we\nactually give the expected results. Then\nwe run the actual module itself,\nit gives us back the answer, and we can\ncheck it against our expectation.\nIf the two things match, all as well! You\nknow that the module is actually working\nthe way you expect to work. Well not\nwith just one test, right. If we were to\nactually perform a subsequent test and\nthere is a mismatch, in other words the\ntest fails, then not only do we know that\nthere is a problem in the module we know\nexactly what sort of operation\nit fails on, and how it violates our\nactual expectations. So for example in\nthis case we could perhaps infer that\nhey it's actually accidentally adding\nthe two numbers instead of performing a\nsubtraction. So yeah usually when we have\na bunch of unit tests and we run it and\nsome of them fail,\nit allows us to very quickly pinpoint\nthe error. On top of unit testing we also\nperform what is known as integration\ntesting, and this is basically when we\nuse automated testing to test multiple\nmodules instead. So instead of testing\none module to see if it's working\ncorrectly,\nwe are now testing to see if multiple\nmodules working together are still doing\ntheir job correctly. This is quite\nimportant because modules can work\ncorrectly individually, but if they are\nlinked in a way that doesn't make sense\nthings could still be broken at the end of the day, so\nit is still very important to actually\ntest the integration between modules.\nGoing back again to our sales example, we\ncan actually attempt to edit a record\nvia the controller and then check to see\nif the model has changed. If it has then\nit implies that this particular linkage\nis working correctly. So these are our\ntesting methods. In terms of testing\nmethodologies there are generally two\ndifferent approaches. First there is what\nis known as black box testing, and that\nis when we treat our module as a black\nbox,\nwe don't care what's happening inside it.\nInstead we just work with its\nspecifications, we just supply it\nparticular inputs, expect it to do its\nmagic, and ignoring what it does, we just\ncheck its output and see if that meets\nour expectations. That's black box\ntesting. Alternatively we can also do\nwhat it's known as white or glass box\ntesting, when we actually care about the\ninternal implementation. This can range\nfrom\njust crafting our input strategically so that\nthey actually exercise the\ninternal implementation, to actually\ndelving deep and testing internal-use\nfeatures, that may not be exposed when we\nlook at it as a black box. So yeah two\nkind of opposite approaches and both\nhave their pros and cons as well as\ntheir values. In the best case we want to\ntest both ways. Of course, so far we're\njust testing our functions for\ncorrectness. There are the things we can\ndo as well, for example GUI testing, where\nwe actually make sure that \neverything that appears visually to the\nuser works the way we expect. Again\nthe methodology is very similar because\nwell, what we are doing is still giving\nit an action and then testing the\noutcome against the expectation, except\nnow, we're talking in GUI terms. So GUI\ntesting in a real world could involve\nscreen capture and screen reading tools,\nas well as some automated method to\ngenerate keystrokes on your program.\nSecurity testing is another one. While\nour basic methods do actually work as\nwell, we can also use some randomized\nmethods, for example on a login box we\ncan repeatedly send random values to\nsee if the system holds up, if\nthe system actually doesn't exhibit any\nflaw. This is important because when we\nare doing our basic testing we\nare feeding it values, we're actually\ncoming up with values to test. However\nwhen it comes to something like\nsecurity, we have to kind of expect the\nunexpected, to use a very cliche term. And\nthat's why using random input can be\nquite valuable. When it comes to testing\none metric is code coverage, and that\nis a measure of how much code is\nactually being tested. As your program\ngets complex, your code is\neverywhere - it's in functions, it's in loops,\nit's in if statements, so getting 100% code\ncoverage is very difficult. This actually\nmade worse by things like, say, loops. To\nreally thoroughly test your program you\nhave to test to make sure it works\ncorrectly when a loop runs once, when it\nruns twice, when it runs three times...\nBasically every possibility needs\nbe covered and that is close to\nimpossible. Similarly if your program\nactually has some kind of state, you need\nto make sure that things are working\ncorrectly regardless of whatever state\nyour program is in, and again that is\nvery difficult, especially when\nprograms have many possible different\nstates.\nDespite that, of course the greater code\ncoverage you have the better, and in fact\nsome programming methodologies\ncompletely surround the concept of\ntesting, and one example of this is\ntest-driven development or TDD. As its\nname implies, TDD surrounds writing tests\nfirst\nso in fact before you actually write\ncode, you write your tests, you watch your\ntests fail, and then you basically fix\nthe failing test. You write just enough\ncode to fix the test - No more no less. To\ncontinue you're going to have to write\nanother test, and basically you rinse and\nrepeat, and this is one way in which\nyour program can get very good\ncoverage. And there you go! Today we've taken\na look at our four general phases of\nsoftware engineering. Now it's important\nto note that  even though we lay\nit out as sort of phase 1, phase 2, phase\n3 and so on, it's not really \ncompletely separate. A lot of the time\nthese phases may overlap, and in fact sometimes become completely concurrent,\nso that's an important thing to think\nabout. Also what we've seen here is one\ncycle - Sort of the development process\nfrom start to finish.\nExcept usually development doesn't\nreally end there. When you're\ndone with your product, your customer is\nhappy, you deploy it. Chances are after a\nwhile they might ask you for certain\nimprovements, certain enhancements, certain\nbug fixes, and basically the whole\nprocess starts again because again you\nhave to ask them what they want, go ahead and plan how to do it,\nprototype it and then test it. So it's\nthe entire cycle all over again and for\nlarger scale projects, this\ncould basically go on and on\ncontinuously. Now today I've barely scraped\nthe surface of software engineering as a\nsubject. Really these are things that\npeople go on full university\ncourses to learn, so there is certainly\nno way I can actually do this in just\none video. However hopefully what this\nhas given you is a good overview of\nthe different phases, as well as\nwhat are some of the considerations in\ngeneral, and I think all these things are\ngood to know, seeing as that\ncomputers are becoming a bigger and\nbigger part of our lives, even in\nbusinesses, in administration, even in our\npersonal lives. So yeah if you ever have\nthe interest of doing development\nespecially on a large scale, software\nengineering is definitely something you\nneed to know. It's something that\npreferably you could be comfortable with,\nand yeah if you have that sustained\ninterest, definitely consider\ntaking a degree program in this area.\nWhen you actually graduate\nwith your degree, you are armed with very\npowerful skills putting you in very high\ndemand. Computers aren't going\nanywhere for a very long time,\nso yeah, good the software engineering\nskills can bring you a very long way. Mow\nthis episode let's run a little bit long\nso let's go ahead and wrap things up.\nThank you very much for watching I hope\nyou've gained some insight today, but\nuntil next time, you're watching 0612\nTV with NERDfirst.net.\n",
  "words": [
    "many",
    "us",
    "code",
    "capacity",
    "whether",
    "completely",
    "whether",
    "went",
    "crash",
    "course",
    "boot",
    "camp",
    "whether",
    "went",
    "four",
    "years",
    "college",
    "know",
    "end",
    "day",
    "seems",
    "coding",
    "right",
    "mean",
    "one",
    "us",
    "go",
    "professional",
    "software",
    "developer",
    "surely",
    "easy",
    "turns",
    "right",
    "like",
    "sets",
    "apart",
    "hobbyist",
    "programmer",
    "professional",
    "developer",
    "answer",
    "software",
    "engineering",
    "hello",
    "welcome",
    "back",
    "another",
    "random",
    "wednesday",
    "episode",
    "would",
    "imagined",
    "today",
    "episode",
    "software",
    "engineering",
    "reason",
    "talking",
    "often",
    "enter",
    "computer",
    "science",
    "degree",
    "university",
    "college",
    "well",
    "chances",
    "least",
    "emphasis",
    "placed",
    "good",
    "reason",
    "first",
    "foremost",
    "software",
    "engineering",
    "well",
    "think",
    "standardized",
    "structured",
    "thorough",
    "approach",
    "writing",
    "code",
    "basically",
    "treating",
    "whole",
    "development",
    "process",
    "start",
    "finish",
    "standardized",
    "manner",
    "course",
    "question",
    "want",
    "things",
    "way",
    "want",
    "actually",
    "formalize",
    "things",
    "know",
    "programming",
    "something",
    "sitting",
    "home",
    "well",
    "couple",
    "reasons",
    "first",
    "foremost",
    "sure",
    "building",
    "correct",
    "product",
    "forget",
    "working",
    "professional",
    "developer",
    "going",
    "actually",
    "deliver",
    "customer",
    "wants",
    "one",
    "important",
    "point",
    "secondly",
    "want",
    "ensure",
    "writing",
    "code",
    "certain",
    "standard",
    "sort",
    "really",
    "useful",
    "professional",
    "environment",
    "writing",
    "code",
    "expect",
    "maintain",
    "months",
    "years",
    "working",
    "together",
    "team",
    "certain",
    "conventions",
    "certain",
    "coding",
    "styles",
    "become",
    "important",
    "thirdly",
    "want",
    "ensure",
    "code",
    "meets",
    "certain",
    "level",
    "rigor",
    "means",
    "needs",
    "correct",
    "needs",
    "efficient",
    "needs",
    "secure",
    "software",
    "engineering",
    "actually",
    "defines",
    "techniques",
    "actually",
    "boost",
    "confidence",
    "things",
    "yeah",
    "real",
    "world",
    "software",
    "engineering",
    "important",
    "skill",
    "today",
    "taking",
    "look",
    "basics",
    "software",
    "engineering",
    "taking",
    "look",
    "really",
    "really",
    "go",
    "well",
    "fits",
    "together",
    "hopefully",
    "idea",
    "mind",
    "actually",
    "start",
    "software",
    "engineering",
    "course",
    "school",
    "well",
    "makes",
    "things",
    "slightly",
    "easier",
    "yeah",
    "let",
    "basically",
    "long",
    "short",
    "let",
    "jump",
    "first",
    "part",
    "software",
    "engineering",
    "often",
    "sorta",
    "mixed",
    "programming",
    "really",
    "software",
    "engineering",
    "starts",
    "development",
    "even",
    "begins",
    "start",
    "actually",
    "understanding",
    "customer",
    "wants",
    "first",
    "hobbyist",
    "programmer",
    "normally",
    "part",
    "sort",
    "jump",
    "write",
    "code",
    "hopefully",
    "inspiration",
    "comes",
    "us",
    "however",
    "developing",
    "professional",
    "context",
    "ca",
    "quite",
    "things",
    "way",
    "instead",
    "first",
    "thing",
    "need",
    "requirements",
    "gathering",
    "interesting",
    "much",
    "time",
    "actually",
    "devoted",
    "important",
    "develop",
    "wrong",
    "product",
    "wasted",
    "whole",
    "bunch",
    "time",
    "want",
    "want",
    "make",
    "sure",
    "actually",
    "developed",
    "something",
    "useful",
    "deal",
    "face",
    "value",
    "sounds",
    "simple",
    "right",
    "sit",
    "customer",
    "ask",
    "want",
    "except",
    "lot",
    "time",
    "know",
    "want",
    "either",
    "actually",
    "many",
    "interesting",
    "approaches",
    "requirements",
    "gathering",
    "well",
    "requirements",
    "analysis",
    "gets",
    "us",
    "point",
    "write",
    "piece",
    "software",
    "ensure",
    "customer",
    "satisfied",
    "certain",
    "degree",
    "let",
    "take",
    "look",
    "techniques",
    "well",
    "useful",
    "course",
    "simplest",
    "way",
    "understand",
    "customers",
    "requirements",
    "simply",
    "get",
    "provide",
    "list",
    "however",
    "many",
    "shortcomings",
    "things",
    "way",
    "mean",
    "list",
    "could",
    "long",
    "yet",
    "actually",
    "constructed",
    "may",
    "something",
    "perfectly",
    "useful",
    "usually",
    "best",
    "actually",
    "go",
    "gather",
    "requirements",
    "ways",
    "course",
    "bulk",
    "methods",
    "involve",
    "going",
    "seeing",
    "actually",
    "want",
    "many",
    "structured",
    "ways",
    "examples",
    "include",
    "surveys",
    "interviews",
    "focus",
    "groups",
    "course",
    "expect",
    "mostly",
    "conversational",
    "nature",
    "well",
    "least",
    "one",
    "taking",
    "notes",
    "one",
    "conducting",
    "entire",
    "session",
    "results",
    "certainly",
    "productive",
    "alternatively",
    "existing",
    "software",
    "suite",
    "already",
    "available",
    "also",
    "observe",
    "users",
    "actually",
    "using",
    "taking",
    "note",
    "things",
    "used",
    "well",
    "pain",
    "points",
    "create",
    "better",
    "program",
    "however",
    "probably",
    "interesting",
    "lot",
    "use",
    "case",
    "analysis",
    "let",
    "take",
    "look",
    "use",
    "case",
    "analysis",
    "interesting",
    "way",
    "actually",
    "expressing",
    "user",
    "wants",
    "approach",
    "actually",
    "describe",
    "real",
    "usage",
    "scenario",
    "point",
    "view",
    "user",
    "point",
    "view",
    "coder",
    "generally",
    "pretty",
    "specific",
    "format",
    "notably",
    "main",
    "success",
    "scenario",
    "expressed",
    "series",
    "steps",
    "remember",
    "jargon",
    "means",
    "everything",
    "sort",
    "intuitive",
    "descriptive",
    "user",
    "sees",
    "screen",
    "interact",
    "kinda",
    "contrived",
    "example",
    "sales",
    "system",
    "order",
    "add",
    "sale",
    "want",
    "actually",
    "initiate",
    "program",
    "require",
    "specify",
    "information",
    "namely",
    "name",
    "quantity",
    "supply",
    "information",
    "well",
    "information",
    "gets",
    "stored",
    "onto",
    "system",
    "basically",
    "start",
    "finish",
    "going",
    "happen",
    "success",
    "scenario",
    "usually",
    "expand",
    "use",
    "cases",
    "talking",
    "kinds",
    "scenarios",
    "could",
    "possibly",
    "happen",
    "example",
    "would",
    "error",
    "condition",
    "actually",
    "give",
    "quantity",
    "less",
    "1",
    "software",
    "react",
    "well",
    "case",
    "basically",
    "gives",
    "error",
    "returns",
    "back",
    "step",
    "2",
    "wait",
    "user",
    "correct",
    "mistake",
    "imagine",
    "use",
    "case",
    "could",
    "get",
    "quite",
    "long",
    "multiple",
    "expansions",
    "addition",
    "extra",
    "information",
    "include",
    "preconditions",
    "conditions",
    "true",
    "actually",
    "start",
    "scenario",
    "well",
    "postconditions",
    "happen",
    "end",
    "day",
    "case",
    "post",
    "condition",
    "main",
    "success",
    "scenario",
    "course",
    "outcome",
    "example",
    "user",
    "closes",
    "dialog",
    "box",
    "different",
    "postcondition",
    "well",
    "another",
    "way",
    "expressing",
    "thing",
    "true",
    "user",
    "stories",
    "tend",
    "less",
    "detailed",
    "really",
    "put",
    "shoes",
    "user",
    "well",
    "usually",
    "user",
    "stories",
    "expressed",
    "like",
    "statement",
    "statement",
    "needs",
    "contain",
    "three",
    "important",
    "pieces",
    "information",
    "firstly",
    "pertains",
    "want",
    "well",
    "want",
    "last",
    "part",
    "something",
    "may",
    "missing",
    "use",
    "case",
    "purpose",
    "getting",
    "good",
    "requirements",
    "work",
    "next",
    "part",
    "actually",
    "analyze",
    "requirements",
    "usually",
    "first",
    "step",
    "actually",
    "generate",
    "two",
    "kinds",
    "requirements",
    "namely",
    "functional",
    "requirements",
    "let",
    "take",
    "look",
    "means",
    "functional",
    "requirement",
    "basically",
    "says",
    "need",
    "system",
    "right",
    "describes",
    "function",
    "system",
    "conversely",
    "requirement",
    "usually",
    "describes",
    "characteristic",
    "could",
    "say",
    "performance",
    "requirement",
    "actually",
    "say",
    "system",
    "needs",
    "instead",
    "describe",
    "something",
    "process",
    "done",
    "requirements",
    "order",
    "begin",
    "build",
    "prototype",
    "usually",
    "prototypes",
    "fact",
    "done",
    "prototypes",
    "powerpoint",
    "slides",
    "idea",
    "gon",
    "na",
    "pitch",
    "customer",
    "show",
    "things",
    "look",
    "like",
    "everything",
    "laid",
    "one",
    "part",
    "program",
    "actually",
    "links",
    "another",
    "basically",
    "gives",
    "good",
    "feel",
    "things",
    "going",
    "work",
    "end",
    "day",
    "course",
    "point",
    "go",
    "back",
    "forth",
    "tweak",
    "prototype",
    "make",
    "sure",
    "user",
    "needs",
    "actually",
    "met",
    "part",
    "done",
    "requirements",
    "certain",
    "actually",
    "delve",
    "serious",
    "development",
    "moving",
    "second",
    "stage",
    "planning",
    "honest",
    "planning",
    "actually",
    "sorta",
    "runs",
    "concurrently",
    "requirements",
    "gathering",
    "analysis",
    "whole",
    "point",
    "planning",
    "start",
    "think",
    "want",
    "things",
    "coming",
    "weeks",
    "months",
    "something",
    "tend",
    "lot",
    "hobbyist",
    "programmer",
    "sorta",
    "things",
    "exploratory",
    "basis",
    "however",
    "working",
    "large",
    "project",
    "know",
    "tens",
    "thousands",
    "lines",
    "code",
    "interacting",
    "would",
    "good",
    "say",
    "roadmap",
    "plan",
    "sort",
    "know",
    "different",
    "parts",
    "actually",
    "interact",
    "well",
    "going",
    "approach",
    "developing",
    "yeah",
    "planning",
    "process",
    "quite",
    "process",
    "well",
    "considerations",
    "need",
    "go",
    "part",
    "one",
    "big",
    "aspect",
    "planning",
    "actually",
    "modularization",
    "actually",
    "going",
    "break",
    "large",
    "program",
    "smaller",
    "parts",
    "sample",
    "modularization",
    "action",
    "basically",
    "game",
    "sorta",
    "split",
    "components",
    "particular",
    "breakdown",
    "also",
    "sorta",
    "user",
    "equation",
    "basically",
    "modules",
    "actually",
    "link",
    "many",
    "ways",
    "formally",
    "representing",
    "idea",
    "main",
    "point",
    "thought",
    "needs",
    "go",
    "things",
    "going",
    "compartmentalized",
    "build",
    "things",
    "organized",
    "usually",
    "modularization",
    "two",
    "huge",
    "goals",
    "achieve",
    "high",
    "cohesion",
    "low",
    "coupling",
    "means",
    "firstly",
    "cohesion",
    "refers",
    "much",
    "elements",
    "within",
    "module",
    "actually",
    "related",
    "think",
    "terms",
    "module",
    "actually",
    "data",
    "works",
    "high",
    "cohesion",
    "comes",
    "everything",
    "strongly",
    "related",
    "one",
    "example",
    "records",
    "module",
    "functions",
    "actually",
    "involve",
    "working",
    "records",
    "either",
    "retrieving",
    "manipulating",
    "well",
    "highly",
    "cohesive",
    "module",
    "one",
    "low",
    "cohesion",
    "one",
    "tasks",
    "really",
    "anything",
    "usually",
    "temptation",
    "create",
    "say",
    "utilities",
    "tools",
    "module",
    "really",
    "kinda",
    "grouped",
    "together",
    "nowhere",
    "else",
    "go",
    "low",
    "cohesion",
    "coupling",
    "hand",
    "actually",
    "deals",
    "modules",
    "interact",
    "modules",
    "highly",
    "dependent",
    "say",
    "highly",
    "coupled",
    "one",
    "good",
    "way",
    "test",
    "modify",
    "one",
    "module",
    "much",
    "effect",
    "another",
    "module",
    "much",
    "actually",
    "modify",
    "module",
    "everything",
    "works",
    "best",
    "case",
    "coupling",
    "modifying",
    "one",
    "module",
    "require",
    "modifications",
    "modules",
    "replace",
    "programs",
    "still",
    "works",
    "best",
    "case",
    "usually",
    "situations",
    "low",
    "coupling",
    "good",
    "case",
    "two",
    "modules",
    "pass",
    "messages",
    "care",
    "inner",
    "workings",
    "result",
    "really",
    "dependent",
    "swap",
    "different",
    "module",
    "long",
    "speaks",
    "language",
    "everything",
    "work",
    "perfectly",
    "going",
    "back",
    "game",
    "engine",
    "example",
    "low",
    "coupling",
    "situation",
    "test",
    "enemy",
    "hit",
    "player",
    "start",
    "game",
    "engine",
    "checking",
    "position",
    "player",
    "sending",
    "request",
    "player",
    "module",
    "complies",
    "giving",
    "location",
    "back",
    "game",
    "engine",
    "test",
    "enemy",
    "module",
    "see",
    "getting",
    "information",
    "back",
    "perform",
    "comparison",
    "two",
    "really",
    "colliding",
    "game",
    "engine",
    "sends",
    "another",
    "message",
    "player",
    "module",
    "telling",
    "actually",
    "deduct",
    "health",
    "yeah",
    "situation",
    "passing",
    "messages",
    "around",
    "well",
    "little",
    "dependence",
    "easily",
    "expand",
    "situation",
    "multiple",
    "players",
    "multiple",
    "enemies",
    "things",
    "still",
    "work",
    "easily",
    "extend",
    "situation",
    "well",
    "case",
    "multiple",
    "players",
    "even",
    "multiple",
    "enemies",
    "different",
    "types",
    "everything",
    "still",
    "work",
    "way",
    "beauty",
    "setting",
    "things",
    "like",
    "high",
    "coupling",
    "hand",
    "two",
    "modules",
    "highly",
    "dependent",
    "going",
    "back",
    "game",
    "engine",
    "example",
    "everything",
    "actually",
    "shares",
    "game",
    "state",
    "variable",
    "actually",
    "store",
    "state",
    "somewhere",
    "everyone",
    "talks",
    "state",
    "object",
    "creates",
    "large",
    "amount",
    "dependencies",
    "everywhere",
    "yeah",
    "basically",
    "modifications",
    "going",
    "confuse",
    "everything",
    "yeah",
    "please",
    "correctly",
    "achieve",
    "high",
    "cohesion",
    "low",
    "coupling",
    "achieve",
    "known",
    "separation",
    "concerns",
    "module",
    "thing",
    "care",
    "modules",
    "actually",
    "increases",
    "code",
    "readability",
    "well",
    "maintainability",
    "ever",
    "need",
    "go",
    "fix",
    "upgrade",
    "something",
    "know",
    "go",
    "one",
    "place",
    "know",
    "sure",
    "making",
    "changes",
    "firstly",
    "break",
    "anything",
    "else",
    "secondly",
    "place",
    "need",
    "modify",
    "guaranteed",
    "things",
    "going",
    "change",
    "way",
    "expect",
    "nowhere",
    "else",
    "code",
    "handling",
    "task",
    "yeah",
    "great",
    "advantages",
    "actually",
    "things",
    "way",
    "especially",
    "working",
    "huge",
    "project",
    "working",
    "team",
    "finally",
    "legwork",
    "actually",
    "complete",
    "actually",
    "delve",
    "development",
    "slightly",
    "different",
    "developing",
    "hobbyist",
    "certain",
    "structured",
    "ways",
    "actually",
    "go",
    "development",
    "example",
    "one",
    "common",
    "thing",
    "software",
    "engineering",
    "known",
    "patterns",
    "idea",
    "generally",
    "kind",
    "problem",
    "comes",
    "lot",
    "make",
    "things",
    "simple",
    "solve",
    "using",
    "less",
    "standardized",
    "approach",
    "highly",
    "encouraged",
    "since",
    "creates",
    "code",
    "intuitive",
    "easy",
    "read",
    "opposed",
    "creative",
    "way",
    "trying",
    "solve",
    "common",
    "problem",
    "also",
    "follow",
    "structured",
    "pattern",
    "confident",
    "correctness",
    "well",
    "tried",
    "tested",
    "thing",
    "let",
    "take",
    "look",
    "common",
    "pattern",
    "called",
    "model",
    "view",
    "controller",
    "mvc",
    "short",
    "mvc",
    "pattern",
    "particularly",
    "significant",
    "applies",
    "basically",
    "program",
    "basically",
    "program",
    "know",
    "storage",
    "logic",
    "component",
    "interacts",
    "user",
    "interface",
    "benefit",
    "using",
    "pattern",
    "works",
    "essentially",
    "start",
    "model",
    "mentioned",
    "contains",
    "data",
    "logic",
    "one",
    "key",
    "point",
    "note",
    "model",
    "completely",
    "abstract",
    "representation",
    "data",
    "well",
    "functions",
    "required",
    "tweak",
    "retrieve",
    "however",
    "user",
    "directly",
    "know",
    "look",
    "model",
    "make",
    "sense",
    "instead",
    "want",
    "show",
    "user",
    "content",
    "needs",
    "go",
    "view",
    "view",
    "knows",
    "actually",
    "take",
    "data",
    "model",
    "present",
    "whatever",
    "way",
    "user",
    "course",
    "right",
    "everything",
    "one",
    "way",
    "user",
    "wants",
    "actually",
    "modify",
    "data",
    "chances",
    "need",
    "poke",
    "controls",
    "allows",
    "user",
    "either",
    "change",
    "seeing",
    "make",
    "modifications",
    "data",
    "yeah",
    "model",
    "view",
    "controller",
    "actually",
    "links",
    "everything",
    "together",
    "make",
    "things",
    "concrete",
    "going",
    "back",
    "sales",
    "example",
    "may",
    "everything",
    "laid",
    "information",
    "held",
    "model",
    "sales",
    "records",
    "view",
    "actually",
    "display",
    "everything",
    "table",
    "user",
    "actually",
    "interact",
    "various",
    "features",
    "bunch",
    "buttons",
    "sidebar",
    "basically",
    "well",
    "controller",
    "things",
    "manner",
    "gives",
    "us",
    "additional",
    "advantage",
    "substitutability",
    "perhaps",
    "like",
    "table",
    "view",
    "well",
    "easily",
    "replace",
    "chart",
    "notice",
    "things",
    "way",
    "actually",
    "require",
    "modifications",
    "either",
    "controller",
    "model",
    "model",
    "data",
    "stays",
    "exactly",
    "controller",
    "well",
    "change",
    "changing",
    "presenting",
    "data",
    "yeah",
    "mvc",
    "done",
    "correctly",
    "substitutability",
    "something",
    "achieve",
    "similarly",
    "perhaps",
    "user",
    "administrator",
    "want",
    "give",
    "tools",
    "work",
    "replace",
    "controller",
    "view",
    "model",
    "affected",
    "user",
    "actually",
    "controls",
    "forget",
    "course",
    "number",
    "one",
    "working",
    "team",
    "number",
    "two",
    "working",
    "project",
    "may",
    "quite",
    "huge",
    "yet",
    "needs",
    "iterated",
    "upon",
    "time",
    "one",
    "huge",
    "area",
    "emphasis",
    "software",
    "engineering",
    "writing",
    "readable",
    "code",
    "code",
    "actually",
    "go",
    "back",
    "modify",
    "spend",
    "much",
    "time",
    "trying",
    "understand",
    "meant",
    "writing",
    "code",
    "first",
    "time",
    "many",
    "good",
    "practices",
    "actually",
    "put",
    "place",
    "follow",
    "good",
    "practices",
    "make",
    "code",
    "easier",
    "read",
    "let",
    "take",
    "look",
    "one",
    "common",
    "good",
    "practice",
    "avoid",
    "magic",
    "numbers",
    "happens",
    "good",
    "example",
    "show",
    "basically",
    "creating",
    "arduino",
    "project",
    "involves",
    "infrared",
    "sensor",
    "press",
    "buttons",
    "say",
    "tv",
    "remote",
    "controller",
    "project",
    "actually",
    "able",
    "pick",
    "code",
    "understand",
    "button",
    "pressed",
    "actually",
    "well",
    "reacts",
    "accordingly",
    "however",
    "button",
    "pressed",
    "actually",
    "read",
    "weird",
    "numerical",
    "code",
    "like",
    "imagine",
    "left",
    "code",
    "like",
    "came",
    "back",
    "two",
    "months",
    "later",
    "way",
    "hell",
    "going",
    "remember",
    "numbers",
    "actually",
    "represent",
    "yeah",
    "basically",
    "extremely",
    "harmful",
    "code",
    "readability",
    "usually",
    "magic",
    "numbers",
    "quite",
    "arbitrary",
    "perhaps",
    "things",
    "like",
    "screen",
    "width",
    "height",
    "maybe",
    "numbers",
    "preset",
    "programmer",
    "however",
    "remains",
    "number",
    "hanging",
    "good",
    "understand",
    "means",
    "usually",
    "workaround",
    "actually",
    "extract",
    "variable",
    "case",
    "using",
    "also",
    "use",
    "macro",
    "assigning",
    "meaningful",
    "name",
    "code",
    "becomes",
    "much",
    "readable",
    "tells",
    "previous",
    "button",
    "infrared",
    "remote",
    "control",
    "well",
    "infinitely",
    "readable",
    "bunch",
    "numbers",
    "like",
    "yeah",
    "call",
    "magic",
    "numbers",
    "number",
    "magically",
    "selected",
    "another",
    "good",
    "practice",
    "variable",
    "naming",
    "actually",
    "lot",
    "rules",
    "one",
    "find",
    "useful",
    "well",
    "picking",
    "names",
    "make",
    "sense",
    "example",
    "function",
    "want",
    "call",
    "something",
    "like",
    "database",
    "really",
    "say",
    "lot",
    "function",
    "actually",
    "instead",
    "usually",
    "preferred",
    "function",
    "names",
    "actually",
    "verbs",
    "something",
    "know",
    "implies",
    "action",
    "take",
    "place",
    "example",
    "querydatabase",
    "tells",
    "us",
    "okay",
    "function",
    "actually",
    "hooks",
    "database",
    "runs",
    "query",
    "verb",
    "describes",
    "action",
    "makes",
    "things",
    "much",
    "clearer",
    "similarly",
    "things",
    "like",
    "boolean",
    "variables",
    "want",
    "make",
    "sure",
    "well",
    "know",
    "look",
    "know",
    "means",
    "example",
    "ison",
    "actually",
    "describes",
    "state",
    "even",
    "useful",
    "use",
    "conjunction",
    "power",
    "statement",
    "makes",
    "lot",
    "sense",
    "basically",
    "read",
    "one",
    "reading",
    "english",
    "well",
    "saying",
    "ison",
    "clear",
    "right",
    "true",
    "something",
    "apart",
    "knowing",
    "code",
    "well",
    "also",
    "tools",
    "good",
    "could",
    "get",
    "familiar",
    "one",
    "huge",
    "example",
    "revision",
    "control",
    "systems",
    "probably",
    "heard",
    "github",
    "github",
    "place",
    "people",
    "upload",
    "code",
    "revision",
    "control",
    "system",
    "help",
    "keep",
    "track",
    "changes",
    "easily",
    "jump",
    "back",
    "forth",
    "versions",
    "time",
    "also",
    "help",
    "collaborate",
    "coders",
    "well",
    "everybody",
    "actually",
    "commit",
    "code",
    "everything",
    "gets",
    "merged",
    "together",
    "create",
    "final",
    "product",
    "finally",
    "testing",
    "something",
    "different",
    "actually",
    "hobbyist",
    "development",
    "well",
    "way",
    "normally",
    "test",
    "programs",
    "open",
    "know",
    "randomly",
    "click",
    "around",
    "things",
    "work",
    "good",
    "comes",
    "software",
    "engineering",
    "need",
    "little",
    "bit",
    "confident",
    "saying",
    "well",
    "sorta",
    "poked",
    "around",
    "five",
    "minutes",
    "everything",
    "seemed",
    "okay",
    "usually",
    "larger",
    "scale",
    "projects",
    "automated",
    "testing",
    "right",
    "none",
    "mucking",
    "around",
    "trying",
    "find",
    "bugs",
    "clicking",
    "around",
    "instead",
    "use",
    "tool",
    "basically",
    "tell",
    "test",
    "goes",
    "code",
    "function",
    "function",
    "yeah",
    "runs",
    "set",
    "test",
    "cases",
    "one",
    "often",
    "known",
    "unit",
    "testing",
    "quite",
    "important",
    "part",
    "software",
    "engineering",
    "actually",
    "gone",
    "quite",
    "unit",
    "testing",
    "earlier",
    "video",
    "quite",
    "quickly",
    "summarize",
    "important",
    "concepts",
    "want",
    "know",
    "always",
    "check",
    "video",
    "probably",
    "deserves",
    "emphasis",
    "testing",
    "finding",
    "bugs",
    "testing",
    "system",
    "really",
    "check",
    "real",
    "world",
    "know",
    "happening",
    "program",
    "expectations",
    "yeah",
    "mind",
    "think",
    "actually",
    "perform",
    "testing",
    "commonly",
    "use",
    "technique",
    "called",
    "unit",
    "testing",
    "automated",
    "nature",
    "let",
    "say",
    "want",
    "test",
    "module",
    "actually",
    "use",
    "testing",
    "tool",
    "basically",
    "poke",
    "example",
    "actually",
    "test",
    "function",
    "critically",
    "along",
    "actually",
    "give",
    "expected",
    "results",
    "run",
    "actual",
    "module",
    "gives",
    "us",
    "back",
    "answer",
    "check",
    "expectation",
    "two",
    "things",
    "match",
    "well",
    "know",
    "module",
    "actually",
    "working",
    "way",
    "expect",
    "work",
    "well",
    "one",
    "test",
    "right",
    "actually",
    "perform",
    "subsequent",
    "test",
    "mismatch",
    "words",
    "test",
    "fails",
    "know",
    "problem",
    "module",
    "know",
    "exactly",
    "sort",
    "operation",
    "fails",
    "violates",
    "actual",
    "expectations",
    "example",
    "case",
    "could",
    "perhaps",
    "infer",
    "hey",
    "actually",
    "accidentally",
    "adding",
    "two",
    "numbers",
    "instead",
    "performing",
    "subtraction",
    "yeah",
    "usually",
    "bunch",
    "unit",
    "tests",
    "run",
    "fail",
    "allows",
    "us",
    "quickly",
    "pinpoint",
    "error",
    "top",
    "unit",
    "testing",
    "also",
    "perform",
    "known",
    "integration",
    "testing",
    "basically",
    "use",
    "automated",
    "testing",
    "test",
    "multiple",
    "modules",
    "instead",
    "instead",
    "testing",
    "one",
    "module",
    "see",
    "working",
    "correctly",
    "testing",
    "see",
    "multiple",
    "modules",
    "working",
    "together",
    "still",
    "job",
    "correctly",
    "quite",
    "important",
    "modules",
    "work",
    "correctly",
    "individually",
    "linked",
    "way",
    "make",
    "sense",
    "things",
    "could",
    "still",
    "broken",
    "end",
    "day",
    "still",
    "important",
    "actually",
    "test",
    "integration",
    "modules",
    "going",
    "back",
    "sales",
    "example",
    "actually",
    "attempt",
    "edit",
    "record",
    "via",
    "controller",
    "check",
    "see",
    "model",
    "changed",
    "implies",
    "particular",
    "linkage",
    "working",
    "correctly",
    "testing",
    "methods",
    "terms",
    "testing",
    "methodologies",
    "generally",
    "two",
    "different",
    "approaches",
    "first",
    "known",
    "black",
    "box",
    "testing",
    "treat",
    "module",
    "black",
    "box",
    "care",
    "happening",
    "inside",
    "instead",
    "work",
    "specifications",
    "supply",
    "particular",
    "inputs",
    "expect",
    "magic",
    "ignoring",
    "check",
    "output",
    "see",
    "meets",
    "expectations",
    "black",
    "box",
    "testing",
    "alternatively",
    "also",
    "known",
    "white",
    "glass",
    "box",
    "testing",
    "actually",
    "care",
    "internal",
    "implementation",
    "range",
    "crafting",
    "input",
    "strategically",
    "actually",
    "exercise",
    "internal",
    "implementation",
    "actually",
    "delving",
    "deep",
    "testing",
    "features",
    "may",
    "exposed",
    "look",
    "black",
    "box",
    "yeah",
    "two",
    "kind",
    "opposite",
    "approaches",
    "pros",
    "cons",
    "well",
    "values",
    "best",
    "case",
    "want",
    "test",
    "ways",
    "course",
    "far",
    "testing",
    "functions",
    "correctness",
    "things",
    "well",
    "example",
    "gui",
    "testing",
    "actually",
    "make",
    "sure",
    "everything",
    "appears",
    "visually",
    "user",
    "works",
    "way",
    "expect",
    "methodology",
    "similar",
    "well",
    "still",
    "giving",
    "action",
    "testing",
    "outcome",
    "expectation",
    "except",
    "talking",
    "gui",
    "terms",
    "gui",
    "testing",
    "real",
    "world",
    "could",
    "involve",
    "screen",
    "capture",
    "screen",
    "reading",
    "tools",
    "well",
    "automated",
    "method",
    "generate",
    "keystrokes",
    "program",
    "security",
    "testing",
    "another",
    "one",
    "basic",
    "methods",
    "actually",
    "work",
    "well",
    "also",
    "use",
    "randomized",
    "methods",
    "example",
    "login",
    "box",
    "repeatedly",
    "send",
    "random",
    "values",
    "see",
    "system",
    "holds",
    "system",
    "actually",
    "exhibit",
    "flaw",
    "important",
    "basic",
    "testing",
    "feeding",
    "values",
    "actually",
    "coming",
    "values",
    "test",
    "however",
    "comes",
    "something",
    "like",
    "security",
    "kind",
    "expect",
    "unexpected",
    "use",
    "cliche",
    "term",
    "using",
    "random",
    "input",
    "quite",
    "valuable",
    "comes",
    "testing",
    "one",
    "metric",
    "code",
    "coverage",
    "measure",
    "much",
    "code",
    "actually",
    "tested",
    "program",
    "gets",
    "complex",
    "code",
    "everywhere",
    "functions",
    "loops",
    "statements",
    "getting",
    "100",
    "code",
    "coverage",
    "difficult",
    "actually",
    "made",
    "worse",
    "things",
    "like",
    "say",
    "loops",
    "really",
    "thoroughly",
    "test",
    "program",
    "test",
    "make",
    "sure",
    "works",
    "correctly",
    "loop",
    "runs",
    "runs",
    "twice",
    "runs",
    "three",
    "times",
    "basically",
    "every",
    "possibility",
    "needs",
    "covered",
    "close",
    "impossible",
    "similarly",
    "program",
    "actually",
    "kind",
    "state",
    "need",
    "make",
    "sure",
    "things",
    "working",
    "correctly",
    "regardless",
    "whatever",
    "state",
    "program",
    "difficult",
    "especially",
    "programs",
    "many",
    "possible",
    "different",
    "states",
    "despite",
    "course",
    "greater",
    "code",
    "coverage",
    "better",
    "fact",
    "programming",
    "methodologies",
    "completely",
    "surround",
    "concept",
    "testing",
    "one",
    "example",
    "development",
    "tdd",
    "name",
    "implies",
    "tdd",
    "surrounds",
    "writing",
    "tests",
    "first",
    "fact",
    "actually",
    "write",
    "code",
    "write",
    "tests",
    "watch",
    "tests",
    "fail",
    "basically",
    "fix",
    "failing",
    "test",
    "write",
    "enough",
    "code",
    "fix",
    "test",
    "less",
    "continue",
    "going",
    "write",
    "another",
    "test",
    "basically",
    "rinse",
    "repeat",
    "one",
    "way",
    "program",
    "get",
    "good",
    "coverage",
    "go",
    "today",
    "taken",
    "look",
    "four",
    "general",
    "phases",
    "software",
    "engineering",
    "important",
    "note",
    "even",
    "though",
    "lay",
    "sort",
    "phase",
    "1",
    "phase",
    "2",
    "phase",
    "3",
    "really",
    "completely",
    "separate",
    "lot",
    "time",
    "phases",
    "may",
    "overlap",
    "fact",
    "sometimes",
    "become",
    "completely",
    "concurrent",
    "important",
    "thing",
    "think",
    "also",
    "seen",
    "one",
    "cycle",
    "sort",
    "development",
    "process",
    "start",
    "finish",
    "except",
    "usually",
    "development",
    "really",
    "end",
    "done",
    "product",
    "customer",
    "happy",
    "deploy",
    "chances",
    "might",
    "ask",
    "certain",
    "improvements",
    "certain",
    "enhancements",
    "certain",
    "bug",
    "fixes",
    "basically",
    "whole",
    "process",
    "starts",
    "ask",
    "want",
    "go",
    "ahead",
    "plan",
    "prototype",
    "test",
    "entire",
    "cycle",
    "larger",
    "scale",
    "projects",
    "could",
    "basically",
    "go",
    "continuously",
    "today",
    "barely",
    "scraped",
    "surface",
    "software",
    "engineering",
    "subject",
    "really",
    "things",
    "people",
    "go",
    "full",
    "university",
    "courses",
    "learn",
    "certainly",
    "way",
    "actually",
    "one",
    "video",
    "however",
    "hopefully",
    "given",
    "good",
    "overview",
    "different",
    "phases",
    "well",
    "considerations",
    "general",
    "think",
    "things",
    "good",
    "know",
    "seeing",
    "computers",
    "becoming",
    "bigger",
    "bigger",
    "part",
    "lives",
    "even",
    "businesses",
    "administration",
    "even",
    "personal",
    "lives",
    "yeah",
    "ever",
    "interest",
    "development",
    "especially",
    "large",
    "scale",
    "software",
    "engineering",
    "definitely",
    "something",
    "need",
    "know",
    "something",
    "preferably",
    "could",
    "comfortable",
    "yeah",
    "sustained",
    "interest",
    "definitely",
    "consider",
    "taking",
    "degree",
    "program",
    "area",
    "actually",
    "graduate",
    "degree",
    "armed",
    "powerful",
    "skills",
    "putting",
    "high",
    "demand",
    "computers",
    "going",
    "anywhere",
    "long",
    "time",
    "yeah",
    "good",
    "software",
    "engineering",
    "skills",
    "bring",
    "long",
    "way",
    "mow",
    "episode",
    "let",
    "run",
    "little",
    "bit",
    "long",
    "let",
    "go",
    "ahead",
    "wrap",
    "things",
    "thank",
    "much",
    "watching",
    "hope",
    "gained",
    "insight",
    "today",
    "next",
    "time",
    "watching",
    "0612",
    "tv"
  ],
  "keywords": [
    "many",
    "us",
    "code",
    "whether",
    "completely",
    "course",
    "know",
    "end",
    "day",
    "right",
    "one",
    "go",
    "professional",
    "software",
    "developer",
    "like",
    "hobbyist",
    "programmer",
    "engineering",
    "back",
    "another",
    "random",
    "episode",
    "would",
    "today",
    "talking",
    "often",
    "degree",
    "well",
    "chances",
    "emphasis",
    "good",
    "first",
    "think",
    "standardized",
    "structured",
    "approach",
    "writing",
    "basically",
    "whole",
    "development",
    "process",
    "start",
    "finish",
    "want",
    "things",
    "way",
    "actually",
    "programming",
    "something",
    "sure",
    "correct",
    "product",
    "working",
    "going",
    "customer",
    "wants",
    "important",
    "point",
    "ensure",
    "certain",
    "sort",
    "really",
    "useful",
    "expect",
    "months",
    "together",
    "team",
    "means",
    "needs",
    "yeah",
    "real",
    "world",
    "taking",
    "look",
    "hopefully",
    "idea",
    "makes",
    "let",
    "long",
    "jump",
    "part",
    "sorta",
    "even",
    "write",
    "comes",
    "however",
    "developing",
    "quite",
    "instead",
    "thing",
    "need",
    "requirements",
    "gathering",
    "interesting",
    "much",
    "time",
    "bunch",
    "make",
    "ask",
    "except",
    "lot",
    "either",
    "approaches",
    "analysis",
    "gets",
    "take",
    "understand",
    "get",
    "could",
    "may",
    "usually",
    "best",
    "ways",
    "methods",
    "involve",
    "seeing",
    "also",
    "using",
    "note",
    "create",
    "program",
    "probably",
    "use",
    "case",
    "user",
    "scenario",
    "view",
    "generally",
    "main",
    "success",
    "everything",
    "screen",
    "interact",
    "example",
    "sales",
    "system",
    "require",
    "information",
    "name",
    "happen",
    "error",
    "give",
    "less",
    "gives",
    "multiple",
    "true",
    "box",
    "different",
    "statement",
    "firstly",
    "getting",
    "work",
    "two",
    "requirement",
    "describes",
    "function",
    "say",
    "done",
    "prototype",
    "fact",
    "show",
    "planning",
    "runs",
    "large",
    "project",
    "modularization",
    "action",
    "game",
    "particular",
    "modules",
    "huge",
    "achieve",
    "high",
    "cohesion",
    "low",
    "coupling",
    "module",
    "terms",
    "data",
    "works",
    "records",
    "functions",
    "highly",
    "tools",
    "else",
    "dependent",
    "test",
    "modify",
    "modifications",
    "replace",
    "programs",
    "still",
    "care",
    "engine",
    "situation",
    "player",
    "see",
    "perform",
    "around",
    "little",
    "easily",
    "state",
    "variable",
    "correctly",
    "known",
    "fix",
    "place",
    "change",
    "especially",
    "common",
    "kind",
    "problem",
    "read",
    "trying",
    "pattern",
    "model",
    "controller",
    "mvc",
    "sense",
    "perhaps",
    "similarly",
    "number",
    "readable",
    "magic",
    "numbers",
    "button",
    "control",
    "implies",
    "testing",
    "scale",
    "automated",
    "unit",
    "video",
    "check",
    "expectations",
    "run",
    "tests",
    "black",
    "values",
    "gui",
    "coverage",
    "phases",
    "phase"
  ]
}