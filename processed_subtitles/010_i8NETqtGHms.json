{
  "text": "tensorflow an open source machine\nlearning framework famous for powering\ndeep neural networks with high-level\ncode it was developed by the google\nbrain team and first released in 2015.\nit's most commonly used with python but\ncan run in other languages like\njavascript c plus plus and java at its\ncore it's just a library for programming\nwith linear algebra and statistics as\nyou know the word tensor describes a\nmultilinear relationship between sets of\nalgebraic objects within a vector space\naka a multi-dimensional array what makes\nit special is its collection of apis for\ndata processing visualization model\nevaluation and deployment that make deep\nlearning accessible to the average\ndeveloper it's extremely portable and is\nable to run on tiny mobile cpus or\nmicrocontrollers with tensorflow lite\ncan run in the browser with\ntensorflow.js while the core library can\nscale up to multiple gpus or run on\ntensor processing units ships engineered\nspecifically to run tensorflow at a\nmassive scale it's used in medicine for\nobject detection and mri images by\ntwitter to sort your timeline by tweet\nrelevance by spotify to recommend music\nby paypal for fraud detection in\naddition to many other applications like\nself-driving cars natural language\nprocessing and so on to build your own\nneural network right now create a python\nfile and install tensorflow next we'll\nneed some data like fashion mnist which\nwe can automatically import the goal is\nto train a model that can predict the\nclothing type of each image tensorflow\nhas a subclassing api for expert users\nbut also integrates with the\nbeginner-friendly keras library which\nhas a sequential api that can easily\nbuild neural networks layer by layer we\nstart with a flattened layer that takes\nthe 28 by 28 pixel image as an input and\nconverts it into a one-dimensional array\nthis input layer is then fed into a\ndense layer with 128 fully connected\nneurons or nodes you can think of each\nnode like its own linear regression as\neach data point flows through it it'll\ntry to guess the output and gradually\nupdate a mapping of weights to determine\nthe importance of a given variable in\nthis case it uses a rectified linear\nactivation function that will output the\ninput if a certain threshold is met\notherwise it will just output zero and\nthe behavior of this layer can be\ncustomized by tuning as hyperparameters\nfinally we have our output layer which\nis also dense but is limited to 10 nodes\nwhich corresponds to the total number of\nclothing types in the data set now we\ncan compile the model and tell it to\noptimize a certain loss function like\nsparse categorical cross entropy as we\ntrain the model for multiple epochs its\naccuracy should gradually improve the\nend result is a model that makes a\nprediction with the likelihood that an\nimage is a certain type of clothing\ncongratulations you just built a neural\nnetwork this has been tensorflow in 100\nseconds hit the like button if you want\nto see more short videos like this\nthanks for watching and i will see you\nin the next one\n",
  "words": [
    "tensorflow",
    "open",
    "source",
    "machine",
    "learning",
    "framework",
    "famous",
    "powering",
    "deep",
    "neural",
    "networks",
    "code",
    "developed",
    "google",
    "brain",
    "team",
    "first",
    "released",
    "commonly",
    "used",
    "python",
    "run",
    "languages",
    "like",
    "javascript",
    "c",
    "plus",
    "plus",
    "java",
    "core",
    "library",
    "programming",
    "linear",
    "algebra",
    "statistics",
    "know",
    "word",
    "tensor",
    "describes",
    "multilinear",
    "relationship",
    "sets",
    "algebraic",
    "objects",
    "within",
    "vector",
    "space",
    "aka",
    "array",
    "makes",
    "special",
    "collection",
    "apis",
    "data",
    "processing",
    "visualization",
    "model",
    "evaluation",
    "deployment",
    "make",
    "deep",
    "learning",
    "accessible",
    "average",
    "developer",
    "extremely",
    "portable",
    "able",
    "run",
    "tiny",
    "mobile",
    "cpus",
    "microcontrollers",
    "tensorflow",
    "lite",
    "run",
    "browser",
    "core",
    "library",
    "scale",
    "multiple",
    "gpus",
    "run",
    "tensor",
    "processing",
    "units",
    "ships",
    "engineered",
    "specifically",
    "run",
    "tensorflow",
    "massive",
    "scale",
    "used",
    "medicine",
    "object",
    "detection",
    "mri",
    "images",
    "twitter",
    "sort",
    "timeline",
    "tweet",
    "relevance",
    "spotify",
    "recommend",
    "music",
    "paypal",
    "fraud",
    "detection",
    "addition",
    "many",
    "applications",
    "like",
    "cars",
    "natural",
    "language",
    "processing",
    "build",
    "neural",
    "network",
    "right",
    "create",
    "python",
    "file",
    "install",
    "tensorflow",
    "next",
    "need",
    "data",
    "like",
    "fashion",
    "mnist",
    "automatically",
    "import",
    "goal",
    "train",
    "model",
    "predict",
    "clothing",
    "type",
    "image",
    "tensorflow",
    "subclassing",
    "api",
    "expert",
    "users",
    "also",
    "integrates",
    "keras",
    "library",
    "sequential",
    "api",
    "easily",
    "build",
    "neural",
    "networks",
    "layer",
    "layer",
    "start",
    "flattened",
    "layer",
    "takes",
    "28",
    "28",
    "pixel",
    "image",
    "input",
    "converts",
    "array",
    "input",
    "layer",
    "fed",
    "dense",
    "layer",
    "128",
    "fully",
    "connected",
    "neurons",
    "nodes",
    "think",
    "node",
    "like",
    "linear",
    "regression",
    "data",
    "point",
    "flows",
    "try",
    "guess",
    "output",
    "gradually",
    "update",
    "mapping",
    "weights",
    "determine",
    "importance",
    "given",
    "variable",
    "case",
    "uses",
    "rectified",
    "linear",
    "activation",
    "function",
    "output",
    "input",
    "certain",
    "threshold",
    "met",
    "otherwise",
    "output",
    "zero",
    "behavior",
    "layer",
    "customized",
    "tuning",
    "hyperparameters",
    "finally",
    "output",
    "layer",
    "also",
    "dense",
    "limited",
    "10",
    "nodes",
    "corresponds",
    "total",
    "number",
    "clothing",
    "types",
    "data",
    "set",
    "compile",
    "model",
    "tell",
    "optimize",
    "certain",
    "loss",
    "function",
    "like",
    "sparse",
    "categorical",
    "cross",
    "entropy",
    "train",
    "model",
    "multiple",
    "epochs",
    "accuracy",
    "gradually",
    "improve",
    "end",
    "result",
    "model",
    "makes",
    "prediction",
    "likelihood",
    "image",
    "certain",
    "type",
    "clothing",
    "congratulations",
    "built",
    "neural",
    "network",
    "tensorflow",
    "100",
    "seconds",
    "hit",
    "like",
    "button",
    "want",
    "see",
    "short",
    "videos",
    "like",
    "thanks",
    "watching",
    "see",
    "next",
    "one"
  ],
  "keywords": [
    "tensorflow",
    "learning",
    "deep",
    "neural",
    "networks",
    "used",
    "python",
    "run",
    "like",
    "plus",
    "core",
    "library",
    "linear",
    "tensor",
    "array",
    "makes",
    "data",
    "processing",
    "model",
    "scale",
    "multiple",
    "detection",
    "build",
    "network",
    "next",
    "train",
    "clothing",
    "type",
    "image",
    "api",
    "also",
    "layer",
    "28",
    "input",
    "dense",
    "nodes",
    "output",
    "gradually",
    "function",
    "certain",
    "see"
  ]
}