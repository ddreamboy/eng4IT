{
  "text": "python is the most popular programming\nlanguage in the field of data science\npython provides a range of libraries\nthat help you perform data analysis data\nvisualization model building faster and\nwith more efficiency in this full course\nvideo you will learn the top python\nlibraries for data science you will\nfirst get an overview of the top 5\npython libraries for data science then\nwe will deep dive into learning the\nnumpy library in detail the numpy\nlibrary is mainly used for numerical\ncomputation\nnext you will learn about the most\npopular data manipulation library that\nis spanned as moving further you will\nlearn data visualization using the\nmatplotlib library then you will look at\nhow to scrape data from the web using\nbeautiful soup library and finally you\nwill learn about the tensorflow library\nprovided by google so let's get started\npython is the most widely used\nprogramming language today when it comes\nto solving data science tasks and\nchallenges python never ceases to\nsurprise its audience most data\nscientists out there are already\nleveraging the power of python every day\nhi i'm abeksha from simply learn and\nwell after some thought and a bit more\nresearch i was finally able to narrow\ndown my choice of top python libraries\nfor data science what are they let's\nfind out so let's talk about this\namazing library tensorflow which is also\none of my favorites so tensorflow is a\nlibrary for high performance numerical\ncomputations with around 35 000 github\ncomments and a vibrant community of\naround 1500 contributors and it's used\nacross various scientific domains it's\nbasically a framework where we can\ndefine and run computations which\ninvolves tensors and tensors we can say\nare partially defined computational\nobjects again where they will eventually\nproduce a value that was about\ntensorflow let's talk about the features\nof tensorflow so tensorflow is majorly\nused in deep learning models and neural\nnetworks where we have other libraries\nlike torch and theano also but\ntensorflow has hands down better\ncomputational graphical visualizations\nwhen compared to them also tensorflow\nreduces the error largely by 50 to 60\npercent in neural machine translations\nit's highly parallel in a way where can\ntrain multiple neural networks and\nmultiple gpus for highly efficient and\nscalable models this parallel computing\nfeature of tensorflow is also called\npipelining also tensorflow has the\nadvantage of seamless performance as\nit's backed by google it has quicker\nupdates frequent new releases with the\nlatest of features now let's look at\nsome applications tensorflow is\nextensively used in speech and image\nrecognition text based applications time\nseries analysis and forecasting and\nvarious other applications involving\nvideo detection so favorite thing about\ntensorflow that it's already popular\namong the machine learning community and\nmost are open to trying it and some of\nus are already using it now let's look\nat an example of a tensorflow model in\nthis example we will not dive deep into\nthe explanation of the model as it is\nbeyond the scope of this video so here\nwe're using amnest dataset which\nconsists of images of handwritten digits\nhandwritten digits can be easily\nrecognized by building a simple\ntensorflow model let's see how when we\nvisualize our data using matplotlib\nlibrary the inputs will look something\nlike this then we create our tensorflow\nmodel to create a basic tensorflow model\nwe need to initialize the variables and\nstart a session then after training the\nmodel we can validate the data and then\npredict the accuracy this model has\npredicted 92 percent accuracy let's see\nwhich is pretty well for this model so\nthat's all for tensorflow if you need to\nunderstand this tutorial in detail then\nyou can go ahead and watch our deep\nlearning tutorial from simply learn as\nshown in the right corner interesting\nright let's move on to the next library\nnow let's talk about a common yet a very\npowerful python library called numpy\nnumber is a fundamental package for\nnumerical computation in python it\nstands for numerical python as the name\nsuggests it has around 18 000 comments\non github with an active community of\n700 contributors it's a general purpose\narray processing package in a way that\nit provides high performance\nmulti-dimensional objects called arrays\nand tools for working with them also\nnumpy addresses the slowness problem\npartly by providing these\nmulti-dimensional arrays that we talked\nabout and then functions and operators\nthat operate efficiently on these arrays\ninteresting right now let's talk about\nfeatures of number it's very easy to\nwork with large arrays and mattresses\nusing numpy numpy fully supports object\noriented approach for example coming\nback to nd array once again it's a class\npossessing numerous methods and\nattributes ndra provides for larger and\nrepeated computations numpy offers\nvectorization it's more faster and\ncompact than traditional methods i\nalways wanted to get rid of loops and\nvectorization of numpy clearly helps me\nwith that now let's talk about the\napplications of numpy numpy along with\npandas is extensively used in data\nanalysis which forms the basis of data\nscience it helps in creating the\npowerful n-dimensional array whenever we\ntalk about numpy the mention of the\narray we cannot do it without the\nmention of the powerful n-dimensional\narray also number is extensively used in\nmachine learning when we are creating\nmachine learning models as in where it\nforms the base of other libraries like\nsci-fi scikit-learn etc when you start\ncreating the machine learning models in\ndata science you will realize that all\nthe models will have their bases numpy\nor pandas also when number is used with\nscipy and matplotlib it can be used as a\nreplacement of matlab now let's look at\na simple example of an array in numpy as\nyou can see here there are multiple\narray manipulation routines like there\nare basic examples where you can copy\nthe values from one array to another we\ncan give a new shape to an array from\nmaybe one dimensional to we can make it\nas a two dimensional array we can return\na copy of the array collapsed into one\ndimension now let's look at an example\nwhere this is a jubilee notebook and we\nwill just create a basic array and uh\nfor detailed explanation you can watch\nour other videos which targets on these\nexplanations of each libraries so first\nof all whenever we are using any library\nin python we have to import it so now\nthis np is the areas which we will be\nusing let's create a simple array\nlet's look what is the type of this\narray\nso this is an end array type of array\nalso let's look what's the shape of this\narray\nso this is a shape of the array now here\nwe saw that we can expand the shape of\nthe array\nso this is where you can change the\nshape of the array using all those\nfunctions now let's create an array\nusing arrange functions if i give\narrange 12 it will give me a 1d array of\n12 numbers like this now we can reshape\nthis array\nto 3 comma 4 or we can write it here\nitself\nso this is how our range function and\nthe reshape function works for numpy now\nlet's discuss the next library which is\nscipy so this is another free and open\nsource python library extensively used\nin data science for high level\ncomputations so this library as the name\nsuggests stands for scientific python\nand it has around 19 000 comments on\ngithub with an active community of 600\ncontributors it is extensively used for\nscientific and technical computations\nalso as it extends numpy it provides\nmany user-friendly and efficient\nroutines for scientific calculations now\nlet's discuss about some features of\nscipy so scipy has this collection of\nalgorithms and functions which is built\non the numpy extension of python\nsecondly it has various high level\ncommands for data manipulation and\nvisualization also the ndmh function of\nscipy is very useful in\nmulti-dimensional image processing and\nit includes built-in functions for\nsolving differential equations linear\nalgebra and many more so that was about\nthe features of sci-fi now let's discuss\nits applications so cyber is used in\nmulti-dimensional image operations it\nhas functions to read images from disk\ninto number arrays to write arrays to\ndiscuss images resize images etc solving\ndifferential equations fourier\ntransforms then optimization algorithms\nlinear algebra etc let's look at a\nsimple example to learn what kind of\nfunctions are there inside by here i'm\nimporting the constants package of scipy\nlibrary so in this package it has all\nthe constants\nso here i'm just mentioning c or h or\nany and this library already knows what\nit has to fetch like speed of light\nplanck's constant etc so this can be\nused in further calculations data\nanalysis is an integral part of data\nscience data scientists spend most of\nthe day in data munching and then\ncleaning the data also hence mention of\npandas is a must in data science life\ncycle yes pandas is the most popular and\nwidely used python library for data\nscience along with numpy and matplotlib\nthe name itself stands for python data\nanalysis with around 17 000 comments on\ngithub and an active community of 1200\ncontributors it is heavily used for data\nanalysis and cleaning as it provides\nfast flexible data structures like data\nframes cvs which are designed to work\nwith structured data very easily and\nintuitively now let's talk about some\nfeatures of pandas so panas offers this\neloquent syntax and rich functionalities\nlike there are various methods in pandas\nlike drop n a fill n a which gives you\nthe freedom to deal with missing data\nalso panas provides a powerful apply\nfunction which lets you create your own\nfunction and run it across a series of\ndata now forget about writing those for\nloops while using pandas also this\nlibrary's high level abstraction over\nlow level numpy which is written in pure\nc then it also contains these high level\ndata structures and manipulation tools\nwhich makes it very easy to work with\npandas like their data structures and\nseries now let's discuss the\napplications of pandas so panas is\nextensively used in general data\nwrangling and data cleaning then pandas\nalso finds its usage in edl jobs for\ndata transformation and data storage as\nit has excellent support for loading csv\nfiles into its data frame format then\npandas is used in a variety of academic\nand commercial domains including\nstatistics finance neuroscience\neconomics web analytics etc then pandas\nis also very useful in time series\nspecific functionality like date range\ngeneration moving window linear\nregression date shifting etc now let's\nlook at a very simple example of how to\ncreate a data frame so data frame is a\nvery useful data structure in pandas and\nit has very powerful functionalities so\nhere i'm only enlisting important\nlibraries in data science you can\nexplore more of our videos to learn\nabout these libraries in detail so let's\njust go ahead and create a data frame\ni'm using jupiter notebook again and in\nthis before using pandas here i'm\nimporting the pandas library\nlet me go and run this so in data frame\nwe can import a file a csv file excel\nfiles there are many functions doing\nthese things and we can also create our\nown data and put it into data frame so\nhere i am taking random data and putting\nin a data frame also i'm creating an\nindex and then also giving the column\nnames so pd is the alias we've given\npandas random data of 6x4 index which is\ntaking a range six numbers and column\nname i'm giving as abcd now let's go\nahead and look at it\nso here it has created a data frame with\nmy column name sub abcd my list as six\nnumbers zero to five and a random data\nof six by four so data frame is just\nanother table with rows and columns\nwhere you can do various functions over\nit also i can go ahead and describe this\ndata frame to see so it's giving me all\nthese functionalities where count and\nmean and standard deviation etc okay so\nthat was about pandas now let's talk\nabout next library and the last one so\nmatplotlib for me is the most fun\nlibrary out of all of them why because\nit has such powerful yet beautiful\nvisualizations we'll see in the coming\nslides plot and matplotlib suggests that\nit's a plotting library for python it\nhas around 26 000 comments on github and\na very vibrant community of 700\ncontributors and because of such graphs\nand plots that it produces it's majorly\nused for data visualization and also\nbecause it provides an object-oriented\napi which can be used to embed those\nplots into our applications let's talk\nabout the features of matplotlib the pi\nplot module of matplotlib provides\nmatlab-like interface so matplotlib is\ndesigned to be as usable as matlab with\nan advantage of being free and open\nsource also it supports dozens of\nback-ends and output types which means\nyou can use it regardless of which\noperating system you're using or which\noutput format you wish pandas itself can\nbe used as droppers around matplotlib's\napi so as to drive matplotlib via\ncleaner and more modern apis also when\nyou start using this library you will\nrealize that it has a very little memory\nconsumption and a very good runtime\nbehavior now let's talk about the\napplications of matplotlib it's\nimportant to discover the unknown\nrelationship between the variables in\nyour data set so this library helps to\nvisualize the correlation analysis of\nvariables also in machine learning we\ncan visualize 95 percent confidence\ninterval of the model just to\ncommunicate how well our model fits the\ndata then matlab finds its application\nand outlier detection using scatter plot\netc and to visualize the distribution of\ndata to gain instant insights now let's\nmake a very simple plot to get a basic\nidea i've already imported the libraries\nhere so this function matplotlib inline\nwill help you show the plots in the\njupiter notebook this is also called a\nmagic function i won't be able to\ndisplay my plots in the jupiter notebook\nif i don't use this function i am using\nthis function in\nnumpy to fix random state for\nreproducibility now i take my n as 30\nand will assign random values to my\nvariables so this function is generating\n30 random numbers here i'm trying to\ncreate a scatter plot so i want to\ndecide the area\nlet's\nput this so it's just multiplying 30\nwith random numbers to the power 2 so\nthat we get the area of the plot which\nwe will see in just a minute so using\nthe scatter function and the alias of\nmatplotlib as plt i've created this if i\ndon't use this and i have very small\ncircles as my scatter plot it's colorful\nit's nice so that's one very easy plot i\nsuggest that you explore more of\nmatplotlib and i'm sure you will enjoy\nit let's create a histogram so i'm using\nmy the style as gg plot and assigning\nsome values to these variables any\nrandom values\nnow we are assigning bars and colors and\nalignment to the plot and here we get\nthe graph so we can create different\ntype of visualizations and plots and\nthen work upon them using matplotlib and\nit's just that simple so that was about\nthe leading python libraries in the\nfield of data science but along with\nthese libraries data scientists are also\nleveraging the power of some other\nuseful libraries for example like\ntensorflow keras is another popular\nlibrary which is extensively used for\ndeep learning and neural network modules\nkeras drafts both tensorflow and theano\nbackends so it is a good option if you\ndon't want to dive into details of\ntensorflow then scikit learn is a\nmachine learning library it provides\nalmost all the machine learning\nalgorithms that you need and it is\ndesigned to interpolate with numpy and\nsci-by then we have cbon which is\nanother library for data visualization\nwe can say that seaborne is an\nenhancement of matplotlib as it\nintroduces additional plot types welcome\nto numpy my name is richard kirschner\nwith the simply learn team that's\nwww.simplylearn.com get certified get\nahead\nwhat's in it for you well today we're\ngoing to do part one of numpy in a\ntwo-part series and we're going to go\nover what is numpy installing and\nimporting numpy numpy array numpy array\nversus python list basics of numpy\nfinding size and shape of any array\nrange and arrange functions numpy string\nfunctions and then in part two i'll move\non to cover axes array manipulation and\nmuch more\nso let's start with what is numpy numpy\nis the core library for scientific and\nnumerical computing in python it\nprovides high performance\nmulti-dimensional array object and tools\nfor working with arrays and i'll go a\nstep further and say there are so many\nother modules in python built on numpy\nso the fundamentals of numpy are so\nimportant to latch onto for the python\nso you can understand the other modules\nand what they're doing numbies main\nobject is a multi-dimensional array it's\na table of elements usually numbers all\nof the same type indexed by a tuple of\nposition integers in numpy dimensions\nare called axes\ntake a one dimensional array or we have\nremember dimensions are also called axes\nyou can say this is the first axis\n0 1 2 3 4 five and you can see down here\nit has a shape of six why because\nthere's six different elements in it in\nthe one dimension array and they usually\ndenote that as six comma with an empty\nnode on there and then we have a two\ndimensional array where you can see zero\none two three four five six seven and in\nhere we have two axes or two dimensions\nand the shape is two four so if you were\nlooking at this as a matrix or in other\nmathematical functions you can see\nthere's all kinds of importance on shape\nwe're not going to cover shape today but\nwe will cover that in part two did you\nknow that numpy's array class is called\nnd array for numpy data array now we're\ngoing to take a detour here because\nwe're working in python and two of my\nfavorite tools in python is the jupiter\nnotebook and then i like to use that\nsitting on top of anaconda and if you\nflip over to jupiter.org that's\nj-u-p-y-t-e-r dot org you can go in here\nyou can install it off of here if you\ndon't want to use the anaconda notebook\nbut this is the jupiter setup the\ndocumentation on the jupiter jupiter\nopens up in your web browser that's what\nmakes it so nice is it's portable the\nfiles are saved on your computer they do\nrun in ipython or iron python and you\ncan create all kinds of different\nenvironments in there which i'll show\nyou in just a minute i myself like to\nuse anaconda that's www.anaconda.com\nif you install anaconda it will install\nthe jupiter notebook with the anaconda\nseparate and you can install jupiter\nnotebook and it'll run completely\nseparate from anaconda's jupiter\nnotebook and you can see here i've now\nopened up my anaconda navigator what i\nlike about the navigator and this is a\nfresh install on a new computer which is\nalways nice i can launch my jupyter\nnotebook from in here i can bring other\ntools so the anaconda does a lot more\nand under environments i only have the\none environment and i can open up the\nterminal specific to this environment\nthis one happens to have python37 in it\nthe most current version as of this\ntutorial and the open terminal if you're\ngoing to do your pip installs and stuff\nlike that for different modules you can\nalso create different environments in\nhere so maybe you need a python 36\npython python35 you can see we're having\na nice framework like anaconda really\nhelps so you don't have to track that on\nyour own in the jupiter notebook in your\ndifferent jupiter notebook setups we'll\ngo ahead and launch this jupiter\nnotebook and then i've set my browser\nwindow for a default of chrome so it's\ngoing to open up in chrome and you can\nsee here this opens up a folder on my\ncomputer we have a couple different\noptions on here remember i set the\nenvironment up as python 3.7 you would\ninstall any additional modules that\naren't already installed in your python\non this and it keeps them separate so\nyou do have to for each environment\ninstall the separate modules so they\nmatch the environment on there and in\nhere we have a couple things we can look\nup what's running\nyou have your different clusters again\nthis is i just installed this on a new\nmachine so i just have the one a couple\nthings in here that were run on here\nrecently and what we go on here is we\nthen have on the upper right new and\nfrom the pull down menu you'll see\npython 3. and this will open up a new\nwindow\nand now we're in jupiter python so this\nis a python window and we'll just do a\nprint\nand this of course is hello world\nand we'll run that and it prints out\nhello world in the command line there's\na couple special things you have to know\nwe're not going to do today which is on\ngraphics if you've never seen this\none of the things you can do you can\nalso do a equals hello world and if you\njust put the a in there now if you do a\nbunch of these we have a equals hello\nworld b equals goodbye world and you put\na b a and return b you'll only run the\nlast one but you can see here if you put\nthe variable down here it will show you\nwhat's in that variable\nand that has to do with the jupiter\nnotebook inline coding so that's not\nbasic python that's just jupiter\nnotebook shorthand which you'll see in a\nlittle bit\nso back to our numpy numpy array versus\npython list python list being the basic\nlist in your python why should we use\nnumpy array when we have python list\nwell first it's fast the numpy array has\nbeen optimized over years and years by\nmultiple programmers and it's usually\nvery quick compared to the basic python\nlist setup it's convenient so it has a\nlot of functionality in there that's not\nin the basic python list and it also\nuses less memory so it's optimized both\nfor speed and memory use\nand let's go ahead and jump into our\njupyter notebook since we're coding best\nway to learn coding is to code just like\nthe best way to learn how to write is\nright and the best way to learn how to\ncook is cook so let's do some coding\nhere today and just like any modules we\nhave to import numpy we almost always\nimport it as np that is such a standard\nso you'll see that very commonly we can\njust run that and now we have access to\nour numpy module inside our python and\nthen the most common thing of course is\nto go and create a number array\nand in here we can send it a regular\nlist\nand so we'll go ahead and send this a\nregular array let's do one two three to\nmake it simple and then i'm just going\nto type in a and we'll run this\nas you can see down here the output is\nan array of one two three\nand we could also do\nprint\njust a reminder that this is an inline\ncommand so that wouldn't work if you're\nusing a different editor you can see\nthat it's an array one two three but\nwe'll go and leave it as a\nkind of a nice feature so you can see\nwhat you're doing really quick in the\njupyter notebook\nand just like all your other standard\narrays i can go\na of 0\nwhich is going to be a value of\nof course we do a of 1. you go all the\nway through this\ni have 1 has a value of 2 in it\nso whether using the numpy array or the\nbasic python list that's going to be the\nsame that should all look pretty\nfamiliar and be pretty straightforward\nremember the first value is always zero\nand when we set on there so let's take a\nlook why we're using numpy because we\nwent over the slide a little bit but\nlet's just take a look and see what that\nactually looks like and what we want to\nlook at is the fact that it's fast\nconvenient and uses less memory so let's\ntake a glance at that in code and see\nwhat that actually looks like when we're\nwriting it in python and what the\ndifferences are\nand to do this i'm going to go ahead and\nimport a couple other modules we're\ngoing to import the time module so we\ncan time it and we're going to import\nthe system module so that we can take a\nlook at how much memory it uses and\nwe'll go and just run those so those are\nimported\nso we'll do b equals oh range of 1 yeah\none thousand is fine\nand so that's going to create a list of\none thousand zero to nine hundred ninety\nnine remember it starts at zero and it\nstops right at the one thousand without\nactually going to the one thousand\nand let's go ahead and print and we want\nsystem dot get size of\nand we'll pick any integer because we\nhave you know zero to\na thousand we'll just throw one in there\nfive it doesn't matter because whatever\ninteger we put in there is going to\ngenerate the same value because we're\nlooking at the size of how how much\nmemory it stores an integer in\nand then we want to have the link of the\nb that's how many integers are in there\nand if we go ahead and execute this and\nrun this in a line we'll see\noops i did that wrong comma\nif we multiply them together\nwe'll see it generates 28 000 so that's\nthe size we're looking at is 28 000 i\nbelieve that's bytes that sounds about\nright\nso let's go ahead and create this in\nnumpy\nand we'll go with c equals np\nand this is a range\nso that's the number command do the same\nthing that we were just doing in a list\nand we'll also use the same value on\nthere the 1000\nand then once we've created the\nc\nvalue of c for np dot a range\nlet's go ahead and print\nand we can do that by doing c dot size\ntimes c dot\nitem size\nwhen it's very similar we did before we\ndid get the size of so the c size is the\nsize of the array and each item size\njust reversed\nso it's the size of an integer five item\nsize it's going to be the integers and c\nsize and let's just take a look and see\nwhat that generates\nand wow okay we got 4 000 versus 28 000.\nthat's a significant difference in\nmemory how much memory we're using with\nthe array and then let's go ahead and\ntake a look at speed let's do um oh\nlet's do size we tried this with lower\nvalues and it would happen so fast that\nthe npra kept coming up with\nzero because it just rounded it off\nso size and let's create an l1\nmoles\nrange of size\nand we'll do an l2\nwe'll just set up to the same thing it's\nalso range\nof size on there there we go\nand then we can do on a1\nequals\nnp dot\na range size\nand then let's do an a\n2 equals np dot\na range\nwe'll keep it the same size\nand what we're going to do is we're\ngoing to take these two different arrays\nand we're going to perform some basic\nfunctions on them\nbut let's go ahead and just load these\nup now we'll go ahead and run this so\nthose are all set in memory\nexcept for the typo here\nquickly fix that\nthere we go so these are now all loaded\nin here and let's do a start\nequals\ntime dot time\nso it's just going to look at my clock\ntime and see what time it is\nand then we'll do result equals and\nlet's do\nlet's say we got\nan array and we're going to say\nlet's do some addition here x\nplus y\nfor x comma y\nand\nwe'll zip it up here\ntwo different arrays so here's our two\ndifferent arrays we're gonna multiply\neach of the individual things on here l1\nl2\nthere we go so that should add up each\nvalue so l1 plus l2 each value in each\narray\nthen we want to go ahead and print\nand let's say\npython list took\nand then we'll do\ntime\ndot\ntime we'll just subtract the start out\nof there so time whoops i messed up on\nsome of the quotation marks on there\nokay there we go\ntime\nminus the start\nand we'll convert that to second so\nwe'll go because in milliseconds or\ntimes one thousand\nand let's hit the run on there it's kind\nof fun because you also get a view while\nwe're doing this\nof some ways to manipulate the script\nand as you can see also my bed typing\nthere we go okay so we'll go ahead and\nrun this\nand we can see here that the python list\ntook 34\nactually i have to go back and look at\nthe conversion on there but you can see\nit takes roughly 0.34 of a second and we\ngo ahead and print the result in here\ntoo\nlet's do that\nwe'll run that just so you can see what\nthe what kind of data we're looking at\nand we have the zero two four six eight\nso it's just adding them together it\nlooks pretty straightforward on there\nand if we scroll down to the bottom of\nthe answer again we see python list took\n46 a little different time on there\ndepending on what\ncore because i have this is on an eight\ncore computer so it just depends on what\ncore it's running on what else is\npulling on the computer at the time\nand let's go back up here and do our\nstart time\npaste that into here\nand this time we're going to do a result\nequals and this is really cool notice\nhow elegant this is so straightforward\nthis is a lot of reason people started\nusing numpy is because i can add the two\narrays together by simply going a1 plus\na2\nit makes a lot of sense both looking at\nit and it's just very\nconvenient remember that slide we're\nlooking at fast convenient and less\nmemory so look how convenient that is\nreally easy to read real easy to see\nand i don't know if we don't need to\nprint the result again so let's just go\nahead and print\nthe time on here and we'll borrow this\nfrom the top part\nbecause i really am a lazy typer\nand this isn't the python list this is\nthe numpy list or number array\nand let's go ahead and see how that\ncomes out and we get 2.99\nso let's take a look at these two\nnumbers 46 versus 2.99 so we'll just\nround this up to 3.\nthat's a huge difference that's that's\nlike\nmore than 10 times faster that's like 15\ntimes roughly at a quick glance i'd have\nto go do the math to look at it and it's\ngoing to vary a little bit depending on\nwhat's running in the background the\ncomputer obviously so we've looked at\nthis and if we go back here we found out\nit's much faster yes there's different\ngoing to be different speeds depending\non what you're doing with the array very\nconvenient easy to read and it uses less\nmemory so that's the core of the numpy\nthat's why a lot of people base so many\nother modules on numpy and why it's so\nwidely used so we did glance at a couple\noperations when we were looking at speed\nand size\nlet's dive into a little bit more into\nthe basic operations\nand these are always nice to see i mean\ncertainly you want to go get a cheat\nsheet if you're using it for the first\ntime you know look things up google is\nyour friend\nwe did this with the most basic numpy\ndot array or np dot array\nand we'll go ahead and create an array\nlet's do\npairs\none comma\ntwo and then let's do a three comma four\nand if we can do that let's do five\ncomma six\nthere we go and if we go ahead and take\nthis\nand run this i can go ahead and do our a\ndown here so it's in line and i'll print\nthat out\nyou can see it makes a nice array for us\nso we have a and if you look at that we\nhave three different objects each with\ntwo values in them and hopefully you're\nstarting to think well how many\ndimensions or indexes is that and you'll\nsee three by two so let's go ahead and\ntake a look and let's go how about a dot\nin dimensions speaking of which\nwe'll run that and we have two\ndimensions for each object\nand then we can do the item size so a\ndot\nwe saw this earlier we looked up how\nmany items it was up here where we\nwanted to multiply item size times the\nactual size of the object so the memory\nis being used versus the item size\nand we should see four there\nmemory is compressed down that's always\na good thing\nand then the shape the shape is so\nimportant when you're working with data\nscience\nand you're moving it from\none format to another\nso we have our shape we just talked\nabout that we have three by two\nthree rows by two objects in each one\ngenerally i don't look too much at the\nsize but the dimensions i'm always\nlooking up this is nice you can automate\nit so you might be converting something\nyou might need to know how many\ndimensions are going into the\nnext machine learning package so that\nyou can automatically just have it send\nthat information over\nso we looked at a shape\nlet's go and create a slightly different\narray np dot array\nlet's go ahead and just do as our\noriginal\nsetup here\nand one of the features we can do which\nis really important is we can do d type\nequals in this case let's do\nnp\nfloat\n64. and so what we've done is converting\nall of these into a float and we type in\na\nand now instead of having one two three\nfour five six you see they're all float\nvalues one dot zero there's no actual\nzero in there just so it's a one dot or\nthe one period two three period four\nperiod five period six period\nand this again data science i don't know\nhow many times i've had to convert\nsomething from an integer to a float so\nthat's going to work correctly in the\nmodel i'm using\nso very common features to be aware of\nand to be able to get around and use\nand we'll also do let's just curiosity\nitem size\nwe'll go ahead and run that\nand we see that it doubled in size so\nit's not a huge increase well doubling\nis always a big increase in computers\nbut it's not a huge increase compared to\nwhat it would be if you're running this\nin the python list format\nand then we did the shape earlier\nwithout having it set to the float64\nlet's go ahead and do a shape with it\nset to 64. and it should be the same\nthree comma two so it all matches\nso we've gone through and remember if\nyou really if this is all brand new to\nyou\naccording to the cambridge study at the\ncambridge university if you're learning\na brand new word in a foreign language\nthe average person has to repeat it\n163 times before it's memorized\nso a lot of this you build off of it so\nhopefully you don't have to repeat it\n163 times but we did manage to repeat it\nat least twice here if not a little bit\nmore\nand let's go ahead and take this we're\ngoing to look at one more setup on here\nand let me just take this last statement\nhere on the converting our properties of\nour data\nand instead of float 64\nlet's do complex let's just see what\nthat looks like and let's go ahead and\nprint that out\nand run it\nand so we now have a complex data set up\nand you'll see it's denoted by the one\ndot plus zero dot j\nand if we flip over here and do a basic\nsearch for numpy data types\nbetter to go to the original web page\nbut pull up a bunch of these you can see\nthere's a whole list of different number\ndata types\nshorthand complex we have complex\ncomplex 64 complex 128\ncomplex number represented by 264 bit\nfloats real and imaginary components\none option on there float 16 float32\nfloat shorthand for float64 most\ncommonly used and of course all the\ndifferent ones that you can possibly put\ninto your numpy array so we covered a\nbasic addition up there we're comparing\nhow fast it runs but some very basic\ncomponents how to set up a numpy array\nhow many dimensions it has item size\ndata type item again we went to item\nsize and there's also\nthe\nshape probably one of the more used i\nused a shape all the time very commonly\nused\nand then down here you can see where we\nactually created a numpy complex data\ntype\nso let's look at some other features in\nnumpy one of them is you could do numpy\ndot\nzeros\nand we're gonna do three comma four\nthere we go and we'll go ahead and run\nthis and you can see if i do np dot\nzeros i create a numpy array of zeros\nthis is really important i was building\nmy own neural network and i needed to\ncreate an array where i initialized the\nweights and i want them all to be the\nsame weight in this case i wanted them\nto start off as zero for the particular\nproject i was working on and there's\nother options that you can do numpy ones\nand we'll do the same thing three comma\nfour we'll run that\nand you can see i've created an array of\nnumpy ones in this case it comes out as\na float array\nand this is an interesting to note\nbecause we have let's go back to our\npython and do lrange5\nand we'll print the l so there's our\nlist\nand if i run that\nit doesn't create the range until after\nthe fact until you actually execute it\nthat's an upgrade in python python27\nactually created the array zero one two\nthree four this one actually creates the\nscript and then once it's used it then\nactually generates the array\nand if we do that in numpy a range\nremember that from before\nand if we do a numpy a range 5\nand let's do l equals\nor we can just leave it as numpy that's\nfine there we go just run that\nyou can see there we actually get an\narray zero one two three four for the\nvalue the numpy arrange a range five\ngenerates the actual array\nand for part one we're going to do just\none more section on basic\nsetup\nand we're going to concatenation\ndo a concatenation now example\nthere we go we're going to do strings\nlet's take a look at strings what's\ngoing on with there and let's do\noh let's see print\nlet's do an np\ncharacter something new here\nand we're going to add\nand then here's our brackets for what\nwe're going to add\noh and let's say\nlet's do\nhello\ncomma hi\nand\nin the brackets on there let's create\nanother one\nand this one's going to be\na b c\nand we'll do\nx y z so we're just creating some\nrandomly making some up on here and then\nwe'll go ahead and just print this\nif we run that and come down here and of\ncourse make sure all your brackets are\nopen and closed correctly\nand then you can see in here when we\nconcatenate the example in numpy\nit takes the two different arrays that\nwe set up in there and it combines the\nhello with the abc and the high with xyz\nand if we can also do something like\nprint\noh let's do\nnp character dot\nmultiply\nso there's a lot of different functions\nin here again you can look these up it's\nprobably good to look them all up and\nsee what they are but it's good to also\njust see them in action let's do hello\nspace comma three\nand we'll run this one\nrun that without the error and you'll\nsee it does hello hello hello so we\nmultiplied it by three and we can also\nlet's just take this whole thing here\ninstead of retyping it\nand we can do character\ncenter so instead of multiply let's do\ncenter\nand over here\nkeep our hello going\ntake the space out of there\nand let's do center at\n20 and\nfill character\nequals and we'll fill it with dashes\nso if we run this\nyou can see it prints out the hello with\ndashes on each side and we keep going\nwith that we can also in addition to\ndoing the fill function we can play with\ncapitalize we can title we can do\nlowercase we can do uppercase we can\nsplit split line strip join these are\nall the most common ones and let's go\nahead and just look at those and see\nwhat those look like each one of them\nhere we're going to do the hello world\nall-time favorite of mine i would like\nto say hello universe and you can see\nhere we did a capital h with the world\nbut so we want to capitalize so\ncapitalize is the first one in the array\nso we get hello world on there and we\ncan also take this\nand instead of capitalizing\nanother feature in here is title and\nlet's just change this to how are we\ndoing\nhow\nare you doing instead of\ndo you and let's run that\nand you can see here because we created\nas a title it capitalizes the first\nletter in each word\nand in this one we're going to do\ncharacter lower\ntwo different examples here we have an\narray we have hello world all\ncapitalized and we have just hello and\nyou can see that one is an array and one\nis just a string if we run that you get\na an array with hello world lowercase\nand hello lowercase\nand if we're going to do it that way we\ncan also do it the opposite way there's\nalso upper\nand let's paste those in there and you\ncan see here we have\ncharacter.upper opposite there\npython.data and that will do python is\neasy\nhopefully you're starting to get the\npicture that most of the python and the\nscripting is very simple\nit's when you put the bigger picture\ntogether and starts building these\npuzzles and somebody asks you hey i need\nthe first letter capitalized unless it's\nthe title and then we have you start\nrealizing that this can get really\ncomplicated so numpy just makes it\nsimple and we like that\nand so in this case we did python data\nit's all uppercase python is easy like\nshouting in your messenger python is\neasy\nand then if you're ever processing text\nand tokenizing it\na lot of times the first thing you do is\nwe just split the text and we're just\ngoing to run this\nnp.character.split are you coming to the\nparty if we do that returns an array of\neach of the individual words are you\ncoming to the party splitting it by the\nspaces\nand then if we're going to split it by\nspaces we also need to know how to split\nit by lines\nand just like we have the basic split\ncommand we also have split lines\nhello and you'll see here the scoop in\nfor our new line\nand when we run that if you're following\nthe split part with the words you should\nsee hello how are you doing the two\ndifferent lines are now split apart\nand let's just review three more before\nwe wrap this up commonly used string\nvariable manipulations we have strip and\nin this case we have\nnina admin anita and we're going to\nstrip a off of there let's see what that\nlooks like\nand then you end up with nin diminished\nit basically takes up all leading and\ntrailing letters in this case we're\nlooking for a\nmore common would be a space in there\nbut it might also be punctuation or\nanything like that that you need to\nremove from your letters and words\nand if we're going to strip and clean\ndata we also need to be able to reformat\nit or join it together so you see here\nwe have a character join we'll go ahead\nand run this\nand it has on the first one it splits\nhe's the letters up by the colon and the\nsecond one by the dash and you can see\nhow this is really useful if you're\nprocessing in this case a date we have\nday month year year month date very\ncommon things to be have to always\nswitch around and manipulate depending\non what they're going into what you're\nworking with\nand finally let's look at one last\ncharacter string we're going to do\nreplace\nif you're doing misinformation this is\ngood pulling news articles replacing\nis and what in this case we're just\ndoing here's a good dancer and we're\ngoing to replace is with was\nand you can see here he was a good\ndancer hopefully that's not because he\nhad a bad fall he just was from like you\nknow 1920s and has gotten old\nso there we go we covered a lot of the\nbasics in numpy as far as creating an\narray very important stuff here when\nyou're feeding it in how do we know the\nshape of it the size of it what happens\nwhen we convert it from a regular\ninteger into a float value as far as how\nmuch space it takes we saw that that\ndoubled it item size you have your n\ndimensions and probably the most used is\nshape and we'll cover more on shape in\npart two so make sure you join us on\npart two there's a lot of important\nthings on shaping in there and setting\nthem up we also saw that you can create\na\nzeros based array you can create one\nwith ones if we do a range you can see\nhow it is a lot easier to use to create\nits own range or a range as it is in\nnumpy\nyou saw how easy it was to add two\narrays we saw that earlier just plus\nsign then we got into\ndoing strings and working with strings\nand how to concatenate so if you have\ntwo different arrays of strings you can\nbring them together we also saw how you\ncan fill so you can add a nice headline\ndash dash dash\nwe saw about capitalize the first letter\nwe saw about turning it into a title so\nall the first letters are capitalized\ndoing lower case on all the letters\nupper for all the letters just lower and\nupper nice abbreviation we also covered\nhow to split the character set how to\nstrip it so if you want to strip all the\na's out from leading ai a's and ending\na's or spaces you can do that very\neasily also how to join the data sets so\nhere's a character join option for your\nstrings and finally we did the character\nreplace so last time we covered part one\nwhere we went over the difference\nbetween the python array and the numpy\narray and why it's both easier to use\nuses less memory and resources and is\nalso faster than the python list we also\nwent over a number of the basic features\nin there like looking up the min the max\nthe median how you can go ahead and\ncreate some very basic arrays fill them\nall with zeros fill them all with ones\nlook up the size the shape so we covered\na lot we covered a range which is\nequivalent of python well sort of the\nequivalent of python list range and then\nwe looked a lot into characters working\nwith the np character and how to\ncapitalize center it change it to a\ntitle lowercase uppercase splitting\nstripping joining and replacing\ncharacters so what's in it for you today\nwe're going to go over array\nmanipulation we're going to go over\nnumpy arithmetic operations slicing\narrays iterating over arrays array\nconcatenation splitting arrays numpy\nhistogram using matplot library and a\nfew other useful functions in the numpy\nand then we'll do a practice examples at\nthe end and hopefully you've already got\nyour jupiter notebook i like to use it\nthrough anaconda but certainly you just\nuse a direct jupiter notebook now let's\ngo ahead and dive in there since we're\ngoing right into part two which is\ngetting some coding going under our belt\nand here in our jupiter notebook we can\ngo under new and create a new folder\npython 3.\ni think i forgot to do this last time\nbut we could just do the\ncontrol plus plus which in any browser\nenlarges the page makes it a lot easier\nto see always a nice feature another\nbeautiful benefit of using jupiter\nnotebook\nand let me go ahead and show you a neat\nthing we can do in jupiter this is nice\nif you're working with people and you're\ndoing this as a demo on a large screen\ni'm going to do the hashtag or pound\nsymbol array manipulation kind of a\ntitle that we're working on and then i'm\ngoing to call this cell cell type\nmarkdown as opposed to code and you'll\nsee it highlights it here and then if i\nrun it it just turns it into array\nmanipulation and then we're specifically\ngoing to be working on array\nmanipulation changing shape to start\nwith\nand we'll go ahead and mark this cell\nalso a markdown so has a nice little\nlook there and then it comes up and you\ncan see it just like i said it just\nhighlights it and makes it very in bold\nprint just making it easier to read not\na python thing but a jupiter thing\nthat's good to know about especially if\nyou're working with the shareholders\nsince they're investing money in you of\ncourse the first thing we do is import\nwe're going to import numpy as in p that\nshould be standard by now by now you you\nstart a python program you're doing some\ndata science numpy is just something you\nbring in there and let's go ahead and\ncreate our array and we're going to do\nthat as the np dot a range remember\nthat's a zero well we're going to do\nzero to nine\nand then we'll print\na little title on the original array\nwe'll just print that array a remember\nfrom the first lesson so we have our\narray which is 0 1 2 3 4 5 6 7 8.\nand let's add a print space in between\nlet's create a second array b but we\nwant this to reshape array a and what\ndoes that mean\nand the command is simply reshape and\nthen we have nine items in here and this\nis so important right now so be very\naware if i did some weird numbers in\nhere it's not gonna work\nand we want multiples of nine we know\nthat three times 3 is 9\nso we're going to reshape\nour a array by 3 by 3 and then we're\ngoing to print well let's give it a\ntitle\noops i have too many brackets in there\nmodified array and then let's go ahead\nand print\nour b\nand let's see what that looks like\nand as we come down here you can see\nwe've taken this and it's gone from\n0 1 2 3 4 5 6 7 8 to an array\nof arrays and we have 0 1 2 three four\nfive six seven eight\nand so we split this into three by three\nand you can guess that if i tried to\nreshape this let's just do a five by\nthree\nwhich is fifteen\nthat's going to give me an error so it's\nnot going to work you're not going to\nreshape something unless the shape all\nthe the data in there matches correctly\nso we can take this 9 this flat 9 and\nthey call it flex it's just a single\narray and we can reshape it into a 3x3\narray and first you might think matrixes\nwhich this is used for that definitely i\nuse it a lot in graphing because they'll\ncome in that i have an array that's x y\ncomma x y one y one comma x two y two\nand so the shape of it might be 2 by the\nlength of the number of points\nand i need to separate that into\nx flat ray and a y flat array you can\nsee this can be very easy to reshape the\narray doing that and we can of course go\nback we can do b let me do a print\nand we'll do b dot\nlatin remember i said it's called a\nflatten array\nand if we run that\nyou'll see it just goes back to the\noriginal one it takes this 0 1 2 3 4 5 6\n7 8 and flattens it back to a single\narray\nand then one other feature to be aware\nof is if we flatten it one of the\ncommands we can put in there is order\nlet me just go ahead and do that order\nequals\nf strangely enough f\nstands for fortran\nthe whole fortran days i remember\nactually studying fortran programming\nlanguage\nin this case you'll see that it uses the\nfirst like 036\nis the order so instead of flattening it\nlike we had before zero one two three\nfour five six seven eight it now does\nzero three six one four seven two five\neight\nand if you go to the numpy array page\nyou can see here that they have the\nflatten you just open up the numpy and d\narray flattened setup to look it up and\nthey have three different options they\nhave c\nf and a\nand it's whether to flatten in c which\nwas based on how the c code works for\nflattening originally worked which is\nrow major\nfortran which is column major or\npreserve the column fortran ordering\nfrom a so whatever it was in the default\nis the\nc version so the default that you saw\nyou could put orders equal c and it'd\nhave the same effect as we saw there\nbefore you could even do order equals a\nthat would also have the same effect\nbecause that's the default so really the\nonly other thing you really need to\nchange on here is to change it to c if\nyou need it\nand you can see right here or f i mean\nnot c the only thing you really want to\nchange it to is to your f for the\nfortron order which then does it by\ncolumn versus by row and let's look at\nhere we go\nreshape\nso let's create a range of 12\nand let's reshape it\nand we'll do 4 comma 3 for this one and\nremember this is numpy i forgot the np\nthere\nin p dot arrange\nand we can type in just a for print or\nyou can do full print a and of course in\njupyter notebook even have a little\nextra print at the beginning we run this\nwe'll see we create a nice array of zero\none two it's reshaped it so we have\nfour rows and three columns or you could\ncall that three columns and four rows\nzero one two three four five six seven\neight nine ten eleven\nbut this one is so important we'll do np\ntranspose\na let's go ahead and run that\nand it helps if i get all the s's in\nthere don't leave an s out and you'll\nsee here we've taken our array if you\nremember correctly we had 0 1 2 3 4 five\nsix seven eight nine ten eleven\nand we've swapped it so we've gone from\na three by four or a four by three to a\nthree by four\nand this really helps if you're looking\nat like a huge number of rows and the\ndata all comes in like let's say this is\nyour features in row one your features\nin row two\nand this is x y z well when you go to\nplot it you send it all of x in one\narray all the white and not one array in\nall z in another array\nand so it's really important that we can\ntranspose this rather quickly\nthis is kind of a fun thing i can\nhighlight it and do brackets around it\nif you remember correctly\nbecause we're in jupiter it doesn't\nmatter where we do the print or not\nit'll automatically print it for us and\nyou see if i hit the run button it comes\nup at the same exact thing\nand let's play with the reshape and you\nknow let's zoom this up a little bit\nhere\nmake that even bigger so you can really\nsee what's going on and let's play with\nthe reshape just a little bit more we'll\ndo b equals\nnp dot a range let's do 8\nand reshape\nwe'll do 2 comma 4.\nlet's go ahead and\nprint b\nand then run that\nand you'll see we have now the two rows\nthis is a bit more like so we have four\nmaybe two rows of four things so this\nmight be all of our x components and our\ny components so we can switch it back\nand forth real easy\nimportant to know here whether we do 2\ncomma 4 or in the case of 4 comma 3\nthis has 12 elements and so however you\nsplit it up it's got to equal 12.\nso four times three equals twelve that's\npretty straightforward same thing down\nhere\ntwo times four equals eight\nif i change this and let's say i do two\ncomma three let's just run that in and\nyou'll find we get an error because\nyou can't split eight up into two rows\nby three\nyou have to pick something that it can\nsplit up and arrange it in so let's go\nahead and run that and just for fun\nlet's go\nreshape our b again if i can type\nreshape our b again and what else goes\ninto eight well we could do\ntwo by two by two\nso we can take this out to three\ndifferent dimensions\nand then of course if we um because this\nis going to come out you you as a\nvariable we can just go ahead and run it\nand it'll print it we can also do a\nprint statement on there just like we\ndid before and you'll see we have two\ndifferent groups of two variables of two\ndifferent dimensions so 2 by 2 by 2. and\nlet's go ahead and assign this to a\nvariable c equals b reshape\nand let's do something a little\ndifferent\nlet's roll the axes roll\naxes\nand we'll take our c\nand do two comma one\nand if we go ahead and run this it's\ngoing to print that out oops\nhit a wrong button there let's do that\none again and you roll the axis and you\ncan see that we now have a set of zero\none two three four five six seven we now\nhave the zero two one three four six\nfive seven\nso what's going on here we're taking and\nwe're rolling the numbers around and\nlet's just simplify this we'll just do\nit with c comma one and run that and so\nif we roll a single axis you got 0 1\nand then it rolled the 4 5\nup and then we have 2 3 6 7 and if we do\n2\nlet me see what happens there this is\none of those things you really have to\nplay with and start filling what it's\ndoing\nwe've now taken 0 2\n4 6 1 3 5 7 so you can see we've now\nrolled by two digits instead of rolling\nthe one set up we now rolled two digits\nup there and so if we go back and we do\nthe one\nso we've rolled it up zero one four five\nand then we're gonna take the two in\nthere and we've rolled the zero one two\nthree four five and six seven\nso we start rolling these things around\non here there's a lot of different\nthings you can do on this\nbut it's another way to manipulate the\nnumbers on your numpy\nand finally let's go ahead and swap\naxes\nwe'll do c\nand let's just go ahead and run that\nit's going to give me an error on there\nthat's because it requires multiple\narguments left out the arguments so now\nwe can swap and we get the zero two one\nthree four six five seven so you can see\neverything's been swapped around\nso next thing we want to go over is we\nwant to go over numpy\narithmetic operations\nhow can we take these and use these let\nme just go ahead and put this cell as a\nmarkdown there we go\nwe'll run that so it has a nice thing\nall right nice title on there that's\nalways helpful\nand let's start by creating two arrays\nwe'll do a as an ep np\nrange a range nine and let's reshape\nthis\nthree by three so by now you should be\nsaying this reshape stuff and this\nshould all look pretty familiar we have\nour zero one two 3 4 5 6 7 8 on there\nand let's create a second one b\nand this time instead of doing a range\nlet's do n p array we'll just create a\nstraight up array\nand we'll do an array of three objects\nso it's going to be three by one and if\nwe go ahead and print a b out let me run\nthat this is actually pretty common to\nhave something like this where you have\na three by whatever it is in a three by\nthree array when you're doing your math\nyou kind of have that kind of setup on\nthere\nand what we can do is we can go um\nnp dot add\na b\ndon't forget we can always put a print\nstatement on there\nso if we add it you'll see that it just\ncomes in there and it goes okay we're\nadding 10 to everything and we could\nactually do something more i'll make it\nmore interesting 11 10 11 12. so let's\nchange b's now 10 11 12 and let's run\nthat\nand you can see that we have\n10 and then you had 1\nplus 11 is 12\n2 plus 12 is 14\n13 so 10 plus 3 is 13 11 plus 4 is 15\nand 12 plus 5 is 17 and so on\nwe'll put this back since that's how the\noriginal setup was let's do 10 by 10 by\n10 and run that and run that and get the\noriginal answer and if you're going to\nadd them together we need to go ahead\nand subtract\na b\nand we run that\nwe get minus 10 minus 9 minus 8 just\nlike you would expect\nso we have our subtraction 0 minus 10 is\nminus 10 and so on and if you're going\nto add and subtract you can guess what\nthe next one is we're going to multiply\nand we'll multiply\na b\nand this should be pretty\nstraightforward you should expect this\nif we multiply 10 times 0 we got 0 10\ntimes 10 is 10 and so on\nand finally if you're going to multiply\nwhat's the last one we got is divide\nwhat happens we do divide a by b\nand we run this\nand we're going to get 0 and this is\n0 divided by 10 is 0 1 divided by 10 is\n0.1 2 divided by 10 is 0.2 and so on and\nso on so the math is pretty\nstraightforward it just makes it very\neasy to do the whole setup and again if\nwe went this and let's say i'll just\nchange this up here instead of 10 we do\na hundred\nand\nmake this a thousand there we go\nif we run that and then we do the add\nyou can see we got 10\nplus 100 plus a thousand\nsame thing with the subtract\nsame thing with the multiply\nand then you can also see the same thing\nhere with the divide so a lot of control\nthere with your array and your math\nagain let's set this back to 10 oops\nit's right up here wrong section\nthere we go 10. i'll just go ahead and\nrun these\nand get back to where we were\nand this brings us to our next section\nwhich is slicing and let's put in our\njust make this a cell cell type markdown\nand when we run that of course it gives\nus a nice looking slicing there and\nslicing means we're just going to take\nsections of the array so let's create an\narray in p a range\nlet's just do\n20.\nand if you remember if we do a\nwe have a 0 to 19.\nand then we can do a and remember we can\nalways print these this can always be\nput in a print but because i'm in\njupiter if you're doing a demo in\njupiter that is it's just so great that\nyou have all these controls on here so\nwe can slice four on and this should\nlook familiar because this is the same\nas a python and a lot of other different\nscripting languages if we do four go\nzero one two\nthree that's the first four in the thing\nand the skip sum and starts with this\none the first four skip then from there\non\nyou can also do the opposite\nand go till the fourth one if we run\nthat we get zero one two three quite the\nopposite on there we can do a single\nitem so we can pick object number five\non the list run that and five happens to\nbe five because that's the order they're\nin and then this one's interesting so i\ncan do s equals slice\nand let's create a slice here\nand let's do two comma nine comma\nyeah let's leave it two on there so\nwe'll create an s slice on here and then\nif we take our array and we do array of\ns we're taking our slice in there and\nlet's go ahead and run that\nand let's take a look and see what it\ngenerated here first off we started with\ntwo so we have two at the beginning\nwe're going to end at nine which happens\nto be eight so it stops before the nine\nremember when we're doing arrays in\npython and then we step two so two four\nsix eight\nwe could do this as three let me run\nthat and you can see how the changes to\nfive eight and we could do this as uh\nlet's leave this at three and if we\nchange this to ten\noops let's make it twelve there we go\nwhen we run that we have two five eight\neleven so that's pretty straightforward\nit's a very nice feature to have on here\nwe can slice it\nand take different parts of the series\nright out of the middle so now that\nwe've accessed the different pieces of\nour array\nlet's get into iterating iteration and\nthis is interesting because my sister\nwho runs a college data science\ndivision the first question she asks\nis\nhow do you go through data and she's\nasking can you do you know how to\niterate through data do you know how to\ndo a basic for loop you know how to go\nthrough each piece of the data and in\nnumpy they have some cool controls for\nthat this is a mark down there we go and\nrun it\nit's called the nd iter i'm not sure\nwhat the nd stands for but in d iter for\niterator\nso before we do that though let's create\nan array or something we can actually\niterate through\nwe'll call it a equals np\na range\nlet's do something a little funny here\nor funky\nand we'll do 0 45\n5. i'm not sure\nwhy the guys in the back picked this\nparticular one it's kind of a fun one\nand if i run that we do this you can see\nwe get 0 5 10 15 20 25 30 35 40. that's\nwhat this array looks like\nand that's just from our slice you could\nthis is just a slice that's all that is\nis we created a slice of 0 45 0 to 45\nstep 5. and so we can do with this we\ncan also do a equals the shape\nlet's go ahead and take and reshape this\nand since there's nine variables in\nthere we'll do a reshape it three by\nthree so if we run that oops missed\nsomething there that is the a\nthat really helps\nso if we do the a reshape\nand we'll go ahead and print that out\nwe get 0 5 10 15 20 25 30 35 40.\nand then we simply do 4 x in\nour numpy nd\nof a\ncolon and we'll just go ahead and print\nx\nand let's see what happens here when we\nrun through this and we print each one\nof those\nit goes all the way through the whole\narray so it's the same thing we just saw\nbefore we got 0 5 10\n15 20 25 30 35 40. so it prints out each\nobject in the array so you can go\nthrough and view each one of these\nand certainly if you remember you could\nalso flatten the array and just do for\na and that also and get the same result\nthere's a lot of ways to do this but\nthis is the proper way with the nd\niterator because it'll\nminimize the amount of resources needed\nto go through each of the different\nobjects in the numpy array\nand hopefully you asked this question i\njust did that\nand the question is how can i change\nthis instead of doing each object so\nfirst of all let's go ahead and take my\ncell type and we mark that down and run\nit\nand so we're going to work on iteration\norder c style and f style remember c\nbecause it came from the c programming\nand f because it came from the old\nfortran programming so let's give us a\nreminder i will do a print a\nand we'll do four x in np\niterate\na\nbut we also want to do this in a\nspecific order and you know what i'm a\nreally lazy typer so let's go back up\nhere\nthis is the nd iterator i knew it was\nmissing the nd part of a\nand let's do order\nequals\nc\nwe'll print x on there and let's do that\nagain and this time order\norder equals\nf\nthere we go order equals f let's go\nahead and run this\nand see what happens here and the first\nthing you're going to notice our\noriginal array 0 5 10 15 20 25 30 35 40.\nwhen we do order c that's the default\n0 5 10 15 20 and so on and then when you\ncome down here\nyou'll see f order f is 0 15 30 so it\ntakes the first digit of each on the sub\narrays or the second dimension and then\nit goes into the second one 520 35 10 25\n40. so slightly different order for\niterating through it if you need to do\nthat so we've covered reshaping we\ncovered math we've covered iteration\nwe've covered a number of things the\nnext section we want to go ahead and go\nover\nis going to be joining arrays so we need\nto bring them together let me go ahead\nand take the cell and make it a markdown\ncell type markdown there we go and run\nthat so let's work on joining arrays so\nwe can bring them together and what\ndifferent options we have\nand let's do uh we'll do an np array one\ntwo\ncomma three four\nwe'll go ahead and print\nlet's do oops\nfirst\nthese rays aren't that big so let's just\ngo ahead and keep it all on one line a\nso if we run this first array one two\nthree four whoops i forgot that it\nautomatically wraps it when you do it\nthis way so we'll go ahead and keep it\nseparate\nand print\na there we go\nand let's go ahead and do a\nb and we'll do five six seven eight and\nnotice i'm keeping the same shape on\nthese two arrays\ndepending on what you're doing those\nshapes have to match\nand let's go ahead and print\nsecond array\ndo a print\nb\ni'll go ahead and run that oops\nmissed something up there let me fix\nthat real quick\nwhen i was reformatting it to go on\nseparate lines i messed that up there we\ngo run all right so we have first array\none two three four second array five six\nseven eight\nand we'll put a carried return on there\nand the keyword we use is concatenate\nand if you're familiar with linux it\nusually means you're adding it to the\nend\non there and we're going to do what they\ncall a long axis zero so we have\nconcatenate a b along axis zero let's go\nahead and run that and see what that\nlooks like\nso we have one two three four five six\nseven eight so now we have an array that\nis four by two as a nice shape of four\nby two one here\nand if we're going to do it along the\naxis 0\nyou should guess what the next one is\nwe're going to do it along the one axis\nand let's see how those differ from each\nother let's just go ahead and run that\nand again all we're doing is adding in\nthe axis equals one so we have our\nconcatenate we have a b and then axis\none remember a couple things one these\nare the same shape so we have a two by\ntwo\nsame dimensions going in there you're\ngoing to get an error if you're\nconcatenating and they're not if you\nhave something that instead of one two\nis uh one two three four five six with\nthe five six seven eight they'll give\nyou an error on there in fact let's take\na look and see what happens when we do\nthat let me just take this\none two three\nthree four five and let's run that and\nif we come down here oh we got there it\nsays all the input three dimensions\nexcept for the concatenation axes m\nmust match exactly\nso it'll let you know if you mess up\nthat's always a good thing let's go\nahead and take this back here and let's\ngo ahead and run that\nand so we have our zero axes which is\none two three four five six seven eight\nand we bring them together and you'll\nsee a very different setup here when we\ndo it along the axis one\nwe end up with instead of\nfour by two we end up with a two by four\none two five six three four seven eight\nand this is changing which axes we're\ngoing to go ahead and concatenate on\nwhat i find is when you're talking about\nthe concatenate or the joining arrays\nyou really got to play with these for a\nwhile to make sure you understand what\nyou mean by the axes it looks very\nintuitive when you're looking at it\nactually zero one two three four five\nsix seven eight axes one is then\nsplitting in a different way one two\nfive six three four seven eight\nwhen you're actually using real data you\nstart to really get a feel for what this\nmeans and what this does\nso if we're going to do that let's go\nahead and look at splitting the array\nand do that into mark down and run it\nthere we go so you have a nice little\ntitle there\nand we'll go ahead and create an array\nof nine let's do np split\nwe'll do a and we're gonna split it by\nthree\nlet's just see what that looks like so\nif we split it we get an array zero one\ntwo three four five we get three\nseparate arrays on here and remember\nwe're looking at let me just print a up\nhere\nso we're looking at zero one two three\nfour five six seven eight and then we\ncan split it into three separate arrays\nand let's take this we're gonna do this\nright down here just move the a split\ndown here instead of the 3 let's do 4\ncomma 5. put that in brackets\nand so we do it this way we have 0 1 2 3\n4 5 six seven eight and that's kind of\ninteresting i wasn't sure what to expect\non that but we get when you split it a\nby four comma five you get a totally\ndifferent setup on here as far as the\nway it split the array\nand to understand how this works i'm\ngoing to change the five to a seven\nand this will visually make this a\nlittle bit more clear\nso we had four and five it went zero one\ntwo three four five six seven eight and\nyou see the markers four and five when\nwe do four and seven i get zero one two\nthree four five six\nseven eight\nand so what you're looking at here is\nthe first markers this is going to go to\nfour\nso there's our first split at the four\nthe marker of four and then the second\nsplit is going to be at position seven\nand this is the same thing here\nfour position five that's why we're\nsplitting it in those two sections we\ncould also do it seventh let's just see\nwhat that looks like run\nand you can see i now have zero one two\nthree four five six seven eight\nso we can split in all kinds of\ndifferent ways and create a different\nset of\nmultiple arrays on here and split it all\nkinds of different ways\nand before we get into the graphs and\nother\nmiscellaneous stuff\nlet's go ahead and look at resizing the\narray i'm going to take the cell and set\nthe cells a mark down and run it\ngive us a nice title there and we'll do\nan array uh an input array of one two\nthree and four five six here i'm just\ngonna just print\nlet's go print\na dot\nshape and we'll go ahead and run that\nwhoops hit a wrong button there\nhit the comma instead of the dot so we\nhave a shape of two comma three here\nand this is important to note because we\nstart resizing it it's going to mess\nwith different aspects of the shape\nand so we'll go ahead and do a print\nscoop in for a blank line there we go\nlet's do b\nequals np dot resize\nwe're going to resize a\nand let's resize it with\nthree by two\nand then we'll just go ahead and print\nb\nand print\nb period shape not a comma\ni'll run that\noops forgot the quotation marks around\nthe end we'll go ahead and run that and\nlet's just see what that looks like so\nwe have\none two three four five six our original\narray with a shape of two three\nand then we want to go ahead and resize\nit by three two and we end up with one\ntwo three four five six and we end up\nwith the shape of three two that\nshouldn't be too much of a surprise\nyou know we got six elements in there we\ncan resize it by two three was the\noriginal one and then we're actually\njust reshaping is how that kind of comes\nout as when you resize it like that\nbut what happens if we do something a\nlittle different\nand let's go ahead and just take this\nwhole thing and copy it down here so we\nsee what that looks like\nand instead of doing 3 2 remember last\ntime i did the to reshape it\ni messed with the numbers and it gave me\nan error\nwhen you resize it you don't have to\nmatch the numbers they don't have to be\nthe same dimensions so we instead of\ngoing from a 2 3 to a 3 2 we can resize\nit to a 3 3. so let's take a look and\nsee how it handles that and we come down\nhere to 3 3\nwe end up with 1 2 3 4 5 6 and it\nrepeats one two three\nso it actually takes the data and just\nadds a whole other block in there based\non the original data and repeating it\nall right now at this point you know\nwe've been looking at tons of numbers\nand moving stuff around\nwe want to go ahead and do is get a\nlittle visual here because that\ncertainly you can picture all the\ndifferent\nnumbers on there but let's look at\nhistogram let's put this into a\nhistogram let me go ahead and run that\nand to do that we're going to use the\nmatte plot library so from matplot\nlibrary we're going to import pi plot as\nplt\nthat's usually the notation you see for\npi plot\nso if you ever see plt in a code it's\nprobably pi plot in the matplot library\nand then the guys in the back did a nice\njob and gals too guys and gals back\nthere\nour team over at simply learn put\ntogether a nice array for me 20 87 4 40\n53 with a bunch of numbers that way we\nhad something to play with\nand what we want to do is we want to\nplot\nthe histogram now remember a histogram\nsays how many times\ndifferent numbers come in and then we're\ngoing to put them in bins and we have\nbeen 0 to 20 to 40 to 60 to 80 to 100.\nyou might in here with the matplot\nlibrary they call them bins you might\nhear the term buckets where they put\nthem in buckets that's a really common\nterm\nthen we want to give it a title so the\nway it works is you do your plt.hist for\nhistogram your plt title and your plt\nshow\nand we're doing just a single array in\nhere in the numpy array of a and let's\ngo ahead and run this piece of code\ntaking a moment to come out there says\nfigure size so it's generating the graph\nand you can see we have let's just take\na look at this and go down a size there\nwe go okay so now we can see we're\ntaking a look at here\nso between 0 and 20\nwe have three values so we have a 20\nhere we have a 4\nand a 11 and a 15.\nzero one two three it's actually four\nvalues but they start at zeros remember\nwe always count from zero up\nand from twenty to forty we got twenty\nthis is one forty 42\n3\n4\n5 6.\nand so you can see in the histogram it\nshows that the most common numbers\ncoming up\nis going to be between the 40 and 60\nrange least common between the 80 and\n100 this looks like a age demographics\nis what this looks like to me and you\ncan see where they would have put it in\nthe buckets of different age groups\nwhich would be a nice way of looking at\nthis\nhistograms are so important so powerful\nwhen you're doing\ndemos and explaining your data so being\nable to quickly put a histogram up that\nshows\nwhat's common and how it's trending is\nreally important\nand using that with a numpy\nis really easy\nand you know what let's take the same\ndata and i want to show you why we do\nbins or why we have buckets of data i'm\nused to calling it buckets why we have\nbins let's do it instead of by 20 let's\ndo it by tens and see what happens\nand what happens when you do it by tens\nis you miss out on the you can see a\nnice curve here on the first one\nand on the second one it looks like a\nladder going up and a plummet a ladder\ngoing up and a plummet and a ladder\ngoing down\nso the first would be more indicative of\nan age group and the second one would be\nwhat you would get if you divide it\nincorrectly you wouldn't see the natural\ntrend of\ni don't know what this would be maybe\nhow much food they eat hopefully not\nbecause i'm in 50 so i'm right in the\nmiddle there that which means i get a\nton of food compared to everybody else\nbut it's some kind of democrat maybe\nit's mental maybe it's knowledge because\nwe we hit a certain point and we start\nlosing our marbles start leaking out or\nsomething so you start off knowing\nsomething and then as you get older you\ngrow more but you see here we lose that\nyou lose that continuity in the thing if\nyou split the histogram into too many\nbins or too many buckets\nand if you actually plotted this by the\nindividual numbers it would just be a\nbunch of dots\non the graph it wouldn't mean a whole\nlot\nand we've looked at graphs there are\nterms that are a ton of useful functions\nin numpy\ni'm sure there's even new ones that are\ngoing to be in here but let's just cover\nsome important ones you really need to\nknow about if you're using the numpy\nframework\none of them is line space function this\nis generating data so we have a line\nspace we have 1 3 10 and when we do that\nwe end up with\n10 numbers so if you count them there's\n10 numbers they're between 1 and 3 and\nthey're evenly spaced we get 1 1.222 but\nthese are all there's a total of 10 here\nand it's right between the 1 and three\nrange\nthat can be there's a lot of uses for\nthat but they're probably more obscure\nthan a lot of the other common numpy\narrays set up\na real common one is to do summation so\nwe'll do summation where you do in this\ncase we create a numpy array of one of\num\ntwo different arrays one two three or\ntwo different dimensions one two three\nthree four five\nand we're going to sum them up under\naxes zero which is your columns and if\nyou remember correctly columns is the\none plus three two plus four three plus\nfive so we have three columns and if we\nchange this we'll just flip this to one\nwe get two numbers so we get one two\nthree all added together which equals\nsix and three plus four plus five which\nequals twelve we'll set this back to\nzero\nthere we go since it was just we're\nlooking to actually zero\nand these probably could have been some\nof these communities are math section\nsquare root and standard deviation two\nvery important\ntools we use throughout the machine\nlearning process\nin data science\nand simply we take the np array we have\nagain the one two three four five six\nthree four five i don't know why i need\nto keep recreating it probably could\njust kept it but we can take the square\nroot of a so it goes through and it\ntakes the square root of all the\ndifferent terms in a\nand we can also take the standard\ndeviation how much they deviate in value\non there\nand there's a rabble function we can run\nthat\nand np array is x we're going to do x\nequals say we change it from a to x\nx equals\nravel and this sets it up as columns so\nwe have one two three four five this is\nall columns on here very similar to the\nflattened function\nso they kind of look almost identical\nbut we also the option of doing a ravel\nby column\nand then another one is log so you can\ndo mathematical log on your array in\nthis case we have 1 2 3\nand we'll find the\nlog base 10 for each of those three\nnumbers\nthere's a couple of them they don't you\ncan't just do any number here after log\nbut there is also log base 2.\nlog base 10 is pretty commonly used on\nhere\nthere we go\nbefore we go let's have a little fun\nlet's do a little practice session here\non some more challenging questions so\nyou start to think how this stuff fits\ntogether right now we just looked at all\nthe basics and all the basic tools you\nhave\nso let's do some numpy practice examples\nand let's start by figuring out how do\nyou plot say a sine wave in numpy how\nwhat would that look like and so in this\nproject we wouldn't have to do this\nbecause i've already run these but we'd\nwant to go ahead and import our numpy as\nnp and import our matplot library piplot\nas plt so we get our tools going here\nand then we'll break it into two\nsections because we need our x y\ncoordinates in here\nso first off let's create our x\ncoordinates\nand our x coordinates we're going to set\nto an a range\nand we want this error a range since\nwe're doing\nsine and cosine it's going to be between\n0 and 0.1\nand then we use our np and we actually\ncan look up numpy stores pi so you have\nthe option just pulling pi in there\ndirectly from numpy it has a few other\nvariables that it stores in there that\nyou can pull from there but we have\nnumpy pi and we generate a nice range\nhere let's go ahead and run this\nand just out of curiosity let's see what\nx looks like i always like to do that so\nwe have point one point two point three\npoint four so we're going uh zero to\nin this case nine point four three times\nnumpy pi\npi is like three point something\nsomething something so that makes sense\nit should be about nine and we're doing\nintervals of 0.1 so we create a nice\nrange of data and then we need to create\nour y variable and so y\nis going to simply equal np our numpy\ndot sine\nof x\nand then once we have our x and y\nand if we print let's go and just print\ny\nsee how that will do this let's do this\nso it looks print\nx print y so we basically have two\narrays of data so we have like our\nx-axis and our y-axes going on there\nand this is simply a plt dot plot\nbecause we're going to plot the points\nand we'll do x comma y\nand then we want to actually see the\ngraph so we'll do plot dot show\nand we'll go ahead and run that\nand you see we get a nice sine wave and\nhere's our number 0 through nine\nand here's our sine value which\noscillates between minus one and one\nlike we expected to\nthen for the next challenge\nlet's create a six by six two\ndimensional array and let one and zero\nbe placed alternatively across the\ndiagonals\noh that's a little confusing so let's\nthink about that we're going to create a\nsix by six\ntwo dimensional so the shape is six by\nsix two dimensional array\nand let one and zero be placed\nalternatively across the diagonals\nnow if you remember from lesson one we\ncan fill a whole numpy array with zeros\nor ones or whatever so we're gonna do np\ncreate a numpy zeros and we're gonna do\na six by six and we'll go ahead and make\nsure it knows it's an integer even\nthough it's usually the default and just\nreal quick let's take a look and see\nwhat that looks like so if i run this\nyou can see i get\nsix by six grid so\nsix by six zero zero zero zero zero\nnow if i understand this correctly when\nthey say ones and zero placed\nalternatively across the diagonals\nthey want the center diagonal maybe\nthat's going to stay zero all the way\ndown\nand then the next diagonal will be ones\nall the way across diagonally and then\nthe next one zeros the next one ones the\nnext one zeros and so on hopefully you\ncan see my mouse lit up there and\nhighlighting it\nso let's take a little piece of code\nhere\nand we'll do z\none colon colon two comma colon colon\ntwo\nequals one and wow that's a mouthful\nright there so let's go ahead and run\nthis and see what that's doing and so\nwhat we're doing is we're saying hey\nlet's look at in this case row one\nthere's one and then we're gonna go\nevery other row two so we're gonna skip\na row so skip here skip here skip here\nso we're going down\nthis way and we're going every other row\ngoing this way it's hard to highlight\ncolumns\nso you can see right here where the that\nwe're not touching each row like this\nrow right here is not being touched okay\nso we're going to start with row one and\nthen we're going to skip a row and\nanother one and so we're going every two\nrows and then in every two rows we're\nlooking at every two\nstarting with the beginning that's what\nthis thing blank means so we're gonna\nstart with the beginning and we're gonna\nlook at all of them but we're gonna skip\nevery two\nso starting with row one\nwe look at all the rows but we do we do\nit by two steps so we go one skip one\nyou know one skip one one skip one one\nif you left this out it'd do every one\nthis would just be ones in fact let's\nsee what this looks like if i go like\nthis\nand run it\nyou can see that i just get ones\nso\nthis notation allows us to go down\neach row row by row and we're going to\ndo every other row\nset up on there and so if we're going to\nstart with row one we also\ncontrol z\ntry that there we go we'll start with\nrow zero again we're going to go each\nrow step two so we'll start with row\nzero\nand we'll go every other row\nand this time we'll start with one\ncolumn one\nand again we go every other one going\ndown\nstep that's what that step two is and\nskipping every other one we're gonna set\nthat equal to one so let's see what that\nlooks like\nand you can see here we get our answer\nwe get 0 1 0 0 but it has the ones going\nin diagonals\non every other diagonal and 0 on every\nother one\na little bit of a brain teaser that one\ntrying to get that one to work out so\nyou can see how you can arrange your\nrows and here's your step in your\ndifferent access on there\nand then the next one is\nfind the total number and locations of\nmissing values in the array the first\nchallenge is to create some missing\nnumbers\nso let's create our ray z we're going to\ndo numpy dot random.rand 10 comma 10.\nand before we do the second part let me\njust take the second part out\nand let's just see what that looks like\nso let's run that\nand there we go so we have a 10 by 10\nrandom array it randomly is picking out\nnumbers\nand\nnext we want to go ahead and take our\nrandom integer size equals five\nand then we're going to do a random\nrandom 10 size equals five\nso in the z we're going to select a\nnumber of random spaces here and set\nthem equal to null value\nand let's go ahead and run that so you\ncan see what that looks like and if we\nlook at the array\nwe've created one two\nthree\nfour\nthere should be a fifth one in here my\neyes may be failing me so we've created\na series of out because zero zero to\nfive zero one two three four so we've\ngot five there are different null values\non here\nand\nthis is kind of a neat notation to\nnotice that we can generate\nrandom integers size equals five so this\ngenerates\nfive by five miniature grid inside of\nthis to tell it where to put the nands\nat so that's kind of a cool little thing\nyou can do\nand we want to look up and see how many\nnull values are in there\nand this is simply just\nnp is none of z\nsimple\nso if it is none then we want to sum it\nup so we're going to sum up all of the\ndifferent null values on there now let's\ndo one one more feature in here which is\nreally cool\nlet's go ahead and print the indexes so\nnp arg where np is\nnan of z so we're going to create our\nown another np array and let's run this\nand we'll see here that comes up with\nthe four indexes\nso we did count four of them up there\nit tells you where they are one nine two\nzero four six five four\nand then let's go ahead and run this\nagain run run there we go this time i\ngot five that's what get for random\nnumbers another fun one\nthat i always like to do it's very\nsimilar because we have n p is not z dot\nsums we're summing the number of\nnands and we can get the indexes and you\ncan reshape the indexes but you can also\njust do we'll do an inds where np is nan\nof z\nand let's just print let's print that\nprint inds let's see what that looks\nlike\nand it's very similar we have we have\nzero one three zero six three eight six\nnine three\nbut i've split it into two different\narrays\nso we have our x and our y kind of\ncoordinates going there and what i can\nnow do is i can now do z\ninds\nequals and at this point you can also\ninstead of getting the sum you can get\nthe means or the all the numbers and\nthat kind of thing or the average as it\nis\nso that'd be one thing you could do and\nyou could pick up the average that's\nvery common in data science to get the\naverage and just use that for a value\nbut we'll go and just set it to zero and\nthen let's go ahead and print our z\nand run that\nand you can see we come down here\nwe have wherever there was a null value\nit is now\nzero\nand you can set this to whatever you\nwant this is another way to replace data\nor help clean data\ndepending on what it is you're doing\nso wow we covered a lot of stuff so\nquick rehash going over everything we\nwent into there we looked at array\nmanipulation changing the shape\nhow to switch that around we even had\nthe flattened down there which remember\nwe have another command lower that's\nsimilar we could change the order by f\nremember f stands for fortran very\nstrange connotation but there's c and f\nc is the standard and f switches it to a\ndifferent order\nto be honest i usually have to look it\nup because i almost never use f but when\nyou need it you're like oh my gosh it\nwas the other order let's do a quick\ngoogle so we talked about reshape making\nsure that the dimensions are the same\nyou don't want to have like something\nthat has 12 objects in it and reshape it\nto\nsee 11 and 5 because it doesn't work it\ndoesn't divide into 12. we can transpose\nso we can switch them so we can go from\na 4 by three to a three by four oops i\ndid it the other way around\nthree by four to four by three\nwe covered reshaping the array we did\nthe roll the axes you can do some weird\nthings with swapping and rolling axes\nand transposing the numbers\nwe dug a little bit into the arithmetic\nso we talked about\nadding we talked about subtracting\nmultiplying dividing\nand you know at this point it's so\nimportant we just look up the numpy\nmathematics and you can see here they\nhave just about everything your\ntrigonometry\nuh your hyperbolic functions roundings\nsums products differences\nthere are so many all these different\nmiscellaneous mathematical connotations\nso you know google it go to the main\nnumpy page and look at the different\nsetups you can do on there\nso we covered that\nand we did slicing how to break it apart\nwe did iterating over the array we\ncovered\njoining arrays and how to concatenate\nremember concatenate just means add on\nto it so in this case how are you adding\nb onto a is how you'd read that from\nlinux you should catch the concatenate\nbecause that's used regularly there\nsplitting the array we talked about how\nto split the array in different ways so\nyou can split it in\narray of arrays all kinds of different\nways to split the array up how to resize\nit and remember resize does not have to\nhave the same shape\nbut if you resize it\nit will take the data and begin at the\nbeginning and add new rows on if the\nsize is bigger if it's smaller it\ntruncates it it just cuts the end off\nwe looked at how to do a histogram and\nhow to plot that\nuh we mentioned bind buckets or bins as\nthey call them in pipelot and then we\ncovered a lot of other useful functions\nin numpy talked about the line space\nsetup for doing\nnumbers in a series\nhow to sum the axes up again that's part\nof the mathematical formulas there that\nwe looked at there's a sum there's also\nmeans and median\nall of those you can compute in num b\nand you can also do the square root and\nstandard deviation\nthe ravel function very similar to the\nflat\nto be honest i almost always just use\nthe flat but you know the ravel has its\nown kind of functionality that it does\nand then we went into some numpy\npractice examples we challenged you to\ncreate a sine wave in numpy and how to\ndo that we're kind of looking for that a\nrange remember how we do the a range and\nyou can\nhave your beginning value your n value\nwhich they did is three times pi number\npi\nand we're going to do intervals of 0.1\nand then y just equals the numpy sign of\nx there's our math from the math page we\nwere just looking at remember that it's\nright at the top\nand finally we went down here we had\nthis kind of a little brain teaser how\nto do diagonal zeros and ones\nplaying with the different connotations\nof z of the numpy array\nand then we did a random size and we\nplayed a little bit with how to with the\nnull values playing with null values\nif you're doing any data science you\nknow null values are like a headache\nwhat do you do with them big sets of\ndata you get rid of them small debt sets\nof data you have to factor something in\nthere like figure out the average or the\nmedian there and then replace it with\nthat pandas really is a core python\nmodule you need for doing data science\nand data processing there's so many\nother modules that come off of it there\nit actually sits kind of on numpy so if\nyou've already had our numpy array\nhopefully you've already gone through\nthe numpy tutorial one and two so today\nwe're going to cover what is pandas\nwe'll discuss series we'll discuss basic\noperations on series then we'll get into\na data frame itself basic operations on\nthe data frame file related operations\non a data frame visualization and then\nsome practice examples roll up our\nsleeves and get some coding underneath\nthere and let's start with just some\nreal general what is pandas pandas is a\ntool for data processing which helps in\ndata analysis it provides functions and\nmethods to officially manipulate large\ndata sets\nnow this is a step down from say using\nspark or hadoop in big data so we're not\ntalking about big data here but we are\ntalking about pandas when there is some\nconnections there's like an interface\ngoing on with that so there is\navailability but you really should know\nyour pandas because if you're working in\nbig data you'll know there's data frames\nwell pandas is a data frame primarily it\nhas a couple different pieces we'll look\nat here and if you've never worked with\ndata frames before a data frame is\nbasically like an excel spreadsheet you\nhave rows and columns you can access\nyour data either by the row or the\ncolumn and you have an index and\ndifferent that kind of set up and we'll\ndig more into that as we get deeper into\npandas but think of it as like a giant\nexcel spreadsheet that's optimized to\nrun a larger data on your computer\nand then i said it that it's a data\nframe so the data structures in pandas\nare series one dimensional arrays and\nthen we have data frame two dimensional\narray and it really centers around the\ndata frame the series just happens to be\npart of that data frame and here's a\ncloser look at a pandas series series is\na one dimensional array with labels it\ncan contain any data type including\nintegers strings floats python objects\nand more so it's very diverse if you\nremember from numpy we studied they had\nto be all uniform not in pandas and\npandas we can do a lot more and pandas\nactually kind of sits on numpy so you\nreally need to know both of those if you\nhaven't done the numpy tutorials and you\ncan see here we have our index one two\nthree four five and then our data a b c\nd and e very straightforward it's just\ntwo columns and we have a nice index\nlabel and a column label for the data\nand then a data frame is a\ntwo-dimensional data structure with\nlabels we can use labels to locate data\nand you can see here we had if we go\nback one we had our index one two three\nfour five so in each one of these series\nthey would share the same index over\nthere the row index so you have your row\nindex df dot index and then you have a\ncolumn index df.columns and this should\nlook like i said this would be really\nfamiliar if you've done any work with\nspreadsheets excel so it kind of\nresembles that this does make it a lot\neasier to manipulate data and add\ncolumns delete columns move them around\nsame thing with the rows so you have a\nlot of control over all of this\nnow we're of course going to do this in\nour jupiter notebook you can use any of\nyour python editors but i highly suggest\nif you haven't installed jupyter and\nhaven't worked with it it is probably\none of the best ways for easily\ndisplaying a project you're working on i\nskip between a lot of different user\ninterfaces or ides for editing my python\nand it's just simply jupiter.org\nj-u-p-y-t-e-r.org\nand then i always let mine sit on\nanaconda anaconda.com\nand just real quick we'll open that up\nfor you oops offline mode don't show me\nthat again\nbut you can see here that i have\ndifferent tools that i can actually\ninstall in my anaconda including the\njupiter notebook which comes by default\nand then i have access to the\nenvironments\nand again that's\nanaconda.com named after the very large\none of the largest world's largest\nsnakes and then jupiter notebook in this\ncase jupiter.org and when we're in our\ni'm going to go in here to our jupiter\nnotebook and we're going to go ahead and\njust do new and a python 3\nand this will open up a python 3\nuntitled folder\nso diving right in let's go ahead and\ngive this a title pandas tutorial and\nwe'll go up to cell and we'll change the\ncell type to mark down so it doesn't\nexecute it as actual code\none of those wonderful tools when you\nhave jupyter notebooks so you can do\ndemos with this and let's go ahead and\nimport\npandas\nand usually people just call it pd that\nhas become such a standard in the\nindustry so we'll go ahead and run that\nnow we have our pandas has been imported\ninto our jupyter notebook\nand then oh we can go ahead and let me\ndo the control plus since it's internet\nexplorer i can enlarge it very easily so\nyou have a nice pretty view oops too big\nthere we go and whenever you're working\nwith a new module it's good to check\nyour version of the module in pandas you\njust use the in this case pd dot\nunderscore underscore version underscore\nunderscore that's actually pretty common\nin most of our python modules there's\ndifferent ways to look up the version\nbut that's one of the more common ones\nand we'll go ahead and run that we get\n.23.4\nand if we go to the pandas site we see\n0.23.4 as the latest release and of\ncourse a reminder that if you're going\nto environment you need to install it so\nyou'll need to pip install pandas if\nyou're using the pip installer we'll go\nand close out of that\nand the first thing you want to do is\nwe're going to work with series a lot of\nstuff you do in series you can then do\non the whole data set we need to do what\ncreate one we need to manipulate it\ntake pieces of it so query it query it\ndelete so you can delete different parts\nof it so we want to do all those things\nwith the series and we'll start with the\nseries and then almost all the code in\nfact all the code does transfer right\ninto\nthe actual data table so we go from a\nseries of a single list of one column\nand then we'll take that and we'll\ntransfer that over to the whole table\nand we'll start by creating let's put up\nthere we go\ncreating a series from\nlist\nand let's just call this arr equals\nand we'll do 0 1 2 3 4. if you remember\nfrom our last one we could easily do\nr equals\nrange of 5 which would be 0 to 4. but\nwe'll do r equals 0 to 4 and we'll call\nthis s1 and we'll go pd\nand\nseries is capitalized this one always\nthrows me is which letters do you\ncapitalize on these modules they're\ngetting more and more uniform but you\ngot to watch that with python\nand we're just going to go ahead and do\narr\nso we're just going to take this python\nlist and we're going to turn it into a\nseries\nand then because we're in jupiter we\ndon't have to put the print statement we\ncan just put s1 and it'll print out this\nseries for us\nand let's go ahead and run that and take\na look\nand you'll see we have two rows of\nnumbers so the first one is the index\nnow it automatically creates the index\nstarting with zero unless you tell it to\ndo differently so we get 0 index row 0\nis 0 1 1 2 2 3 3 4 4. and because it's a\nseries it doesn't need a title for the\ncolumn there's only one column so why\ntitle it\nand this also lets you know that it's a\ndata type of integer 64. so we print\nthis out this is our series our basic\nseries we've just created\nand let's do a second series\npd and we'll use the same\ndata list and let's go ahead and do\norder we'll give it an order\nequals oh let's do it this way\nlet's go\nindex\nequals order\nand it helps if we actually give it an\norder so we'll do order\nequals and let's do one two three four\nfive so instead of starting with zero\nwe're going to give it an order starting\nwith one we're going to run that and\nwe'll go ahead and print it out down\nhere s2\nand we'll see that we now have an index\nof 1 2 3 4 5 and that represents 0 1 2 3\n4 in the series and we're still data\ntype integer 64. and very common as\nyou're missing with numpy arrays is we\ncan import our numpy as np remember that\nfrom our numpy tutorials we can go ahead\nand create a numpy out of random with\nthe random numbers of five\nand let's just see what that end looks\nlike so we can see what our number looks\nlike so we have some nice random float\nvalues here 2.33 so on and that's from\nour last tutorial the numpy tutorial one\nand two and instead of calling it order\nlet's call it index\nand we're going to set our index equal\nto a b c d and e i want to show you that\nthe index doesn't have to be an integer\nso it can be something very different\nhere and then let's go ahead and create\nour we'll just use s2 again and here's\nour np for numpy\nseries capital s\nand n is our\nnp for numpy\npd for pandas there we go switching my\nanachronisms so we have pd.series of n\nand we want to do our index\nequals our index we just created\nand then let's go ahead and see what\nthat looks like s2 is a print it and\nlet's run that\nand we can see here we have a nice\nseries going on a b c d and e for our\nindexes so instead of being 0 1 2 3 or 4\nwe can make this index whatever we want\nand you can see the numbers here going\ndown that we randomly generated from the\nnumber array so we use numpy to create\nour\npanda series right here\nand so continuing on with creating our\nseries this one i use so often we create\na series from a dictionary so we have\nour dictionary in this case we went\nahead and did a of 1 b is 2 c of 3 d4\nef5 so each one of those is a key and\nthen a value and then we're going to use\noh let's use s3 equals pd for pandas\nseries\nand then we want to go ahead and just do\nd in here\nprint out s3 here and let's go ahead and\nrun this and you can see we got a is 1 b\nis two c is three d is four e is five\nand it's still of integer 64 because the\nactual data is one two three four five\nand it's all integer 64 type 64. and the\nlast thing we want to do in the creating\nsection of our series is to go ahead and\nmodify the index because we're going to\nstart modifying all this data so let's\nstart with modifying the index of the\nseries and if you remember let's do a\nprint this time s1\ni'll go ahead and run this and the\nreason i did print is because it only\nprints out the last variable so if i put\ns1 up here and we're going to do another\nvariable back down lower it won't print\nthe first one just the last one and\nwe're going to go ahead and take s1\nthe index and we're just going to set it\nequal to a new index and obviously\nthe number of objects in our index has\nto equal the number of objects in our\ndata and then because it's the last\nvariable we can go ahead and just do an\ns1 and let's run that and you can see\nhow we went from 0 to 0 0 1 2 3 4 as our\nindex we've now altered it to a b c d\nand e\nso this would be much more readable or\nmight be representational of a larger\ndatabase you're working with\nso cool tools we've covered creating a\ndatabase based on\nour basic array python array we've\nshowed you how to reset the index\nthen we showed you how to use a numpy\narray so you can put a numpy array in\nthere it's all the same you know\npd.series a numpy array and then we can\nset the index on there and the same\nthing with the dictionary so it's very\nversatile how it pulls in data and you\ncan pull in data from different sources\nand different setups and create a new\nseries very easily in\nthe pandas and then we looked on\nchanging your index so now we have a new\nindex on here\nand then we want to go ahead and do some\nselection let's do some basic\nslicing most common thing you'll\nprobably do on here and we'll just do s1\nthis notation should start to look\nreally familiar again this is going to\nput an output so i'd usually it doesn't\nchange s1 this just selects it so we\nmight do a equals s1 and then print a\nand you'll see that it just looks at the\nfirst three zero one two and we can do\nthe same thing by not having the a in\nthere i'll go ahead and take that out\nbut just a reminder that it's not\nactually changing s1 it's just viewing\ns1 so simple slicing on here and we can\nlikewise do an append so before we do a\npen let's just do a quick kind of fun\none we'll do two minus one and you'll\nsee it covers everything but the e of\ncourse you can do minus two on this side\nso one another way to select it is to go\nhow far from the end and likewise we can\ndo a two here\ncde to the end so it starts at the\nsecond one and another way we can do\nthis is we can do a minus two over here\nand that looks at just the last two in\nthe slice so you can see how easy it is\nto slice the data and of course\nthere's no reason to do this but you\ncould select all of them\nif you wanted to view all of them on\nthere helps 32 there's not 32 so it's\njust going to show the first three there\nwe go and then we can also append so i\ncan take and oh let's create another\nseries and append one to it and if you\nremember we had s3 there's our s3 and we\nhave our s1 we'll go ahead and do s1\nand let's go ahead and do\noh let's call it s4\nequals s1\na pin\ns3\nso we're just going to combine those two\ninto s4\nand if we go ahead and print s4 on here\nyou'll now see that we have a b c d e a\nb c d e 0 1 2 3 1 2 3 4 5 because we\nstarted the data at one so very easy to\nappend one series to the next\nand if we're going to append one series\nto the next we need to go ahead and drop\nor delete one and drop is a key word for\nthat and let's just do e our index e and\nso if i run this\nyou'll see that it'll print it out and\na b c d there's no e\nand remember all these changes if i type\nin s4 again\nyou'll see that s4 still has e in it so\nthis change does not affect the series\nunless you tell it to so i'd have to do\nlike x s4 equals s4 dot drop e and\nthere's another way to do that which\nwe'll show you later on let me just cut\nthis one out there we go\nall right so we've covered all kinds of\ncool tools here we have appending we\nhave slicing we did all the creating\nstuff earlier as you can see here on the\nsetup how easy it is to manipulate the\nseries so next what we want to get into\nis we want to get into\noperations that happen on the series let\nme go ahead and change this cell to\nmark down there we go and run that\nso series operations what can we do with\nthe series\nand let's start by creating a couple\narrays we'll call it array one and we'll\ndo zero through seven and array two six\nthrough six seven eight nine five i\ndon't know why we threw the five on the\nend let's go ahead and run those so\nthose load up into jupiter\nand we'll do this a little backwards\nwe're going to do s5 equals a panda\nseries of array two so i'm doing this in\nreverse and then when we do s5 you'll\nsee that we have zero to four it\nautomatically assign the index\n67895\nfor our series\nand let's go ahead and do the same and\nwe'll call this s6 and we'll set this\nequal to pd series for\nour first array\nand if we do an s6 down here to print it\nout\nwe'll see something similar i got zero\nthrough six\nzero one two three four five seven for\nthe data so those are two series we just\ncreated series six five and six\nand one of the first things we can do is\nwe can add one series to the next so i\ncan do s5 dot add s6 and let's see what\nthat generates and just a quick thing if\nyou never use pandas what do you think\nis going to happen with the fact that\nthis only has five different values in\nit and this one has seven values\nso let's see what that does\nand we end up with 6 8 10 12 9 and it\ngoes oh i can't add this there's nothing\nthere so it gives us a null return very\ndifferent than the numpy that would have\ngiven you an error this instead tells\nyou there's no value here because we\ncouldn't generate one so we can easily\nadd s5 dot add s6 and likewise we can do\ns5 dot\nsub for subtract\ns6\nand we'll run that and on the add the\nsubtract and you guessed it we're going\nto do multiply and divide next again you\ncan see there's null values where it\ncan't subtract the two because there's\nno values there to subtract we can also\ndo s5 multiply mul they're all three\nletters on these that's one of the ways\nto remember how they figured out the\ncode for this so remember these are all\nthree letters mole we'll go ahead and\nrun this\nand you can you can see how they're\nmultiplied together and then we can also\ndo the s5 div three letters again\ns6\nand run that\nand you'll see here this goes to\ninfinity because we have zero in the\nwrong position so it actually gives you\na whole different answer here that's\nimportant to notice and then in the null\nvalues because there's no data and it\ncan't actually produce an answer off of\nan old off of missing data\nand since we're in data science let's do\ns6\nmedian so let's look at the median data\nwhich is simply median sorry for those\nwho are following the three letters\nbecause median is not three letters and\nyou can see an s6 is 3.0 and let's do a\nprint here and we'll do median\nor average\ns6\nand let's print max\ncomma s6\nand just like median there's max value\nand if we're going to have a max value\nwe should also have a minimum value so\nlet's pop in minimum\nwe'll go ahead and run this\nand you're starting to see something\nthat would be generated like say an r\nwhere you're starting to get your\ndifferent statistics we have a medium\nvalue of 3 max value of 7 and a minimum\nvalue of 0. and what it does when it\nhits these null values if there is no\nvalues in there because we could still\ndo that we could actually you know what\nlet's go up here and do\nlet's pick this one where we multiplied\nlet's go s7\nequals\ni'll go and print the s7 just so i keep\nit nice and uniform so i still have my\ns7 down there and run it\nand then i want to take the s7\nbecause s7 now has\nnull values and an infinity value and\nlet's see what happens\nthis is going to be interesting because\ni want to see what it does with infinity\nand we end up with a median of 6 maximum\nof 27 and minimum of 0. which is correct\nit drops those values so when it gets to\nthere and it doesn't know what to do\nwith them it just drops those values and\nthen it computes it on the remaining\ndata on there so it's important to know\nwhen you're making these computations\nyou're looking at min and max and median\nyou're not going to know that there's no\nvalues unless you double check your data\nfor the null values it's a very\nimportant thing to note on there so just\na real quick\nreview on there we've done our created\nour pd series and we've gone ahead and\ndone addition subtraction multiplication\ndivision all those are three letters so\nsub min div add\nand then we looked at median maximum and\nminimum so we're going to go ahead and\njump into the next big topic which is to\ncreate a data frame so now we're going\nto go from series and we're going to\ncreate a number of series and bundle\nthem together to make a data frame\nthere we go cell type markdown let me go\nand run that so we have a nice title on\nthere it's always good to have a good\ntitle all right so our first data frame\nwe'll jump in with some stuff that looks\na little complicated we'll break it down\nfirst i'm going to create some dates\nand you know what let's just go ahead\nand do this i want you to see what that\nlooks like what i'm creating here i've\ncreated a series of dates pd date range\nand we're going to use these for the\nindex okay so when you look at this\nyou'll see that it's just\nbasically it comes out kind of like a\nbasic python list or a numpy array\nhowever you want to look at it with our\ndifferent dates going down and we've\ngenerated six of them and it's going to\nhave whatever time it is right now on\nyour on the thing for the date for the\ntime that's that time stamp right there\nand then you'll see we have 11 19 2008\n11 20 11 19 and looking into the future\nthere so that's all this is is\ngenerating a series of dates that we're\ngoing to use as our index and this is a\npandas command so we have a date range\nwhich is nice that's one of the tools\nhidden in there in the pandas that you\ncan use\nand next we're going to use numpy to go\nahead and generate some random numbers\nin this case we'll do the\nnp.random.random\nin 6 comma 4. you can look at this as\nrows and columns as we move it into the\npandas and of course you could reshape\nthis if you had those backwards on your\ndata but we want the six to match the\nrows and we have six periods so our\nindexes should match along with the rows\non there and then you know before we do\nthe next one let's go ahead and just\nprint out our numpy arrays and see what\nthat looks like here we have it one two\nthree four by one two three four five\nsix four by six\nso it's a nice little setup on there and\nsince working with data frames can be\nvery visual let's give our columns we\nhave four columns and we're going to\ngive them names a b c and d\nso now we have columns on there also and\nthen let's put this all together in a\ndata frame and we can actually you know\nwhat let's do this since i did it with\neverything else let's go ahead and do\ncolumns and you can see there's our\ncolumns on there\nand we'll go ahead and do df1 equals\npandas dot\ndata frame and note that the d and the f\nare capitalized series it was just the s\nand i always highlight this because you\ndon't know how many times these things\nget retyped when you forget what's\ncapitalized on there it's a minor thing\nyou'll pick it up right away if you do a\nlot of it and the first thing we want to\ndo is we want to go ahead and take our\nnumpy array because that's what we're\ngoing to create our data frame off of is\nthe numpy array and then we want our\nindex equal to our dates so there's our\nindex in there and then we also have\ncolumns equals\ncolumns\nand then finally let's see what that\nlooks like remember we had all the\ndifferent data that just looks like a\njumble of data we have our column names\nand everything else our numpy array kind\nof just a jumble array over there four\nby six you could sort of read it but\nlook how nice this looks i mean this is\nyou come into a board meeting you're\nworking with your\nshareholders\nthis is pretty readable this is you know\nthis is our date this is our a b c d\nwhatever it is maybe it's one of these\ndates has your leads\nclosures lost leads total dollar made\nyou know whatever it is fits in a\nbusiness maybe it's measurements on some\nscientific equipment whether searching\nmaterial you know where this is like\nhigher the temperature low of the day\nhumidity of the date whatever it is so\nyou can see that we can really create a\nnice clear chart and it looks just like\na spreadsheet you know we have our rows\nand we have our columns and we have our\ndata in there now this one i use all the\ntime if we're going to create we can\ncreate it like you saw here with our\nnumpy array very easy to do that and\nreshape it you can also create it with a\ndictionary array so here we have some\ndata let me just go down a notch so you\ncan see all the data on there we have an\nanimal in this case cat cat snake dog\ndog cat snake cat dog we have the age so\nwe have an array of ages we have the\nnumber of visits\nand the priority was it a high priority\nyes\nno\nand then we're going to take that we're\ngoing to create some labels we have a b\nc d e f g h i and what i want you to\nnotice on this is we have a title animal\nand then we have basically a python list\nand these lists they don't necessarily\nhave to be equal because we can have\nnon-data you know np.nand numpy array\nnull value but we want to go ahead and\ncreate labels that are equal to the\nnumber in the list so a\nthe first cat b the second cat c the\nsnake d the dog and so on so we'll go\nahead and create our labels which we're\ngoing to use as an index\nand we'll call this df let's do it this\nway we'll call this df2\nequals pd for pandas\ndata frame\nand then we have our data just like we\ndid before and we have our index equals\nlabels\nand if we're going to go from there\nlet's go ahead and print it out so we\ncan see what that looks like df2 so\nlet's go ahead and run that another\nagain you have a nice very clean chart\nto look at we've gone from this mess of\ndata here to what looks like a very\norganized spreadsheet very visual and\neasy to read\nanimal age visits priority and then a\nthrough j cats and all your different\nanimals so on and so on and then when\nyou do programming a lot of times it's\nimportant to know what the data types\nare so we can simply do\ndf2 d types\nand if we run that\nwe can see that our animal\nis an object because it's just a string\nbut it comes in as an object age is a\nfloat64 integer 64 and then priority\nagain is just an object\nand exploring this this one's very\npopular let's go df two\nhead\nand if we print that out the df2 head\nreturns the first five and we can change\nthis you don't have to do five you might\nwant to just look at the top two maybe\nyou want to look at\nlet's see oh let's do six so maybe we'll\nlook at just the top six in the database\nin your data frame\nand you can actually this creates\nanother data frame so i could have a df3\nequal to df2 and this now takes the df2\nand just the first six values\nso if we do df3\nrun get the same answer\nand if we do it the head of the data we\ncan also do the tail it's the same thing\ndf tail you can look at the last\nwe'll just do the tail which by default\ndoes five the last five and of course\nyou can just look at the last three of\nthose real quick just to see what's at\nthe end of the data and this is i get to\ntell i love doing the tail of one\nbecause i'll have like the index or\nsomething like that and it will just\nshow me the last whatever the last entry\nwas looking at stock values and i might\nwant to look at just the last five days\nof the stock values i can do that with\nthe data frame tail\nand some other key things to look up\nare the index so we can do df2 dot index\nand i want you to notice that this isn't\na call function so if i put the brackets\non the end it'll give me an error\nbecause index is not callable it's just\nan object in there\nso we do\ndf2.index there's also columns\nso we can go ahead and let's do a let's\nprint this\nremember the first one is not going to\nshow unless i print it and then df2\ncolumn so now we can see we have our\nindexes\nand we have our columns listed here\ndf2.columns animal age visits priority\nit tells you what kind of object it is\nor what kind of data type it is and\nthey're both object\nand then finally df2 dot\nvalues and again there's no brackets on\nthe end of df2.values\nbecause this is an actual object it's\nnot a callable function so we'll go\nahead and run that\nand it creates just displays a nice\narray a very easy way to convert this\nback to a numpy array basically so\nbefore i go into the next section let's\njust take a quick look at what we\ncovered so far with the data frame we\ncame up here we created our data frame\nwe did it from a numpy array first\nsetting the columns and the index the\nindex is setting it up is the same as\nwhen we set up the series so that should\nlook very familiar so is the whole\nformat the numpy array the index dates\nand the columns columns and remember in\nour numpy array we're looking at row\ncomma column so six rows four columns is\nhow that reads in the data frame\nand we went ahead and also did that from\na dictionary in this case animal was the\ncolumn name with all the date data\nunderneath that column and then age with\nthat data visits that data priority that\ndata and then of course we added our\nlabels in there for our index so there's\nno difference in there but it\nautomatically pulled the column names\nimportant to know when you're dealing\nwith a data frame and importing a data\nframe this way\nand then we did looking up d type we\nlooked at head and tail looking at your\ndata really quick\nwe also did index and columns and values\nand note these don't have the brackets\non the end\nso the next thing we want to do is go\nahead since we're dealing with data\nscience is we want to go and describe\nthe data so we have\ndf2.described to do that and we're going\nto manipulate it in just a minute but\nlet's just see what this generates\nand you can see right here we have age\nand visits\nso looking at our data from up above let\nme just go all the way up here\nanimal age visits priority\nand it does a nice job generating your\nage versus visits which has all the data\nyou have your account your means your\nstandard deviation your minimum value\n25 or in this group 50 75 and your\nmaximum value so this look familiar as a\ndata science setup with your describe\nfor a quick look at your data frame data\nso let's start manipulating this data\nframe moving stuff around and we'll\nstart with transposing and it is simply\ncapital t for transpose\nand when we run that it flips the\ncolumns and the indexes so now the\nindexes are all column names and the\ncolumns are all indexes animal age\nvisits priority\nso if we had come in here with our data\nshaped wrong up above where we had a 4x6\nwe can quickly just swap it if we had it\nbackwards not a big deal and we can also\nsort our data something that you can't\ndo which is more difficult to do with a\nlot of other packages in the data frame\nit's really easy to do take our data\nframe df2 and we're going to sort\nunderscore values\nby equals age and so when we run this\nyou'll see the default is ascending so\nwe have 0.52 2.53 and everything else is\norganized so if you look at your indexes\nthey've been moved around because each\nindex it moves a whole row not just the\none piece of data is not being sorted so\nvery quick way to sort by age are\ndifferent data in the data frame\nand in addition to sorting it we can\nalso slice the data frame so i can do\ndf2 and this should look familiar from\nearlier we'll just do one\nto three so we're going to pull out oops\nit does help if i use a df instead of\njust d and we're going to pull up just\nbetween one and three so we have not\nzero which is a we have b which is two\nor b which is one and c which is two so\none two and then it does not include\nthree which is the standard in python\nand we can even do something like this\nwe can combine them which is always fun\nbecause remember this returns a data\nframe so if i take df2 dot\nsort\nvalues and we'll do by\nequals age\nthis is just kind of fun and then i'm\ngoing to slice it\nthere we go double check my typing and\nrun it\nand now you should see fa because fa are\nnow 1 and two on there\nso you can very quickly create a whole\nstring on here which narrows it you know\nthat you can sort it then slice it and\ndo all kinds of fun things with your\ndata frame we'll just go back to the\noriginal one run there we go and if we\ncan slice it by row we can also query\nthe data frame so we can do df2 and this\nis a little different because i'm going\nto create an array within an array and\nin this case we're going to look at oh\nlet's do\nage\ncomma visits\nso look at the different format in here\nwe have one to three\nso we've done this by\nslicing by an integer value and then on\nhere i've done df2 age comma visits in\nan array and when i run this\nyou can see that we get just these two\ncolumns on here we get age and visits so\nit's a quick way to select just two\ncolumns or select number of columns\nyou're working with\nand if you stop there we did the slicing\nalmost identical to slice is i location\nwhich uses the integer location one\ncomma three\nthere's a push in pandas to move to this\nparticular setup\ninstead of doing just a regular slice\nand that's because this can be confusing\nwhen we slice one to three and then we\nselect age and visits\nso there is a push to go ahead and move\nto an eye location which does the same\nthing you can see here bc it's the same\nas up above there's also copy command so\nwe can do df3 equals df2 copy we're just\ngoing to create a straight copy of it\nand of course if we do df3\nit'll be the same as a df2 on there so\ndf3 equals df2.copy\nand then let's do df3 dot is null so\nwe're looking for null values\nand this will return a nice map and\nyou'll see that everything is false\nexcept when you go up here under the cat\nor h they had a null there and so if we\ngo damn a couple up here also underneath\nof let's see the dog okay there's a\nbunch of nulls in here there's d up here\nso let's look at d down here and you'll\nsee false true there it is there's our\nnull value so we can create a quick\nchart of null values you can use this to\ndo other things we can leverage that\nnull value to maybe take an average or\nsomething and fill those null spaces\nwith data and we can also modify the\nlocation so here's our df3\nlocation\nand notice this is location not i\nlocation ilocation has i for integer\nlocation uses the\nin this case the variables on the left\nand what we can do on here and we'll go\nand just set this equal to\n1.5\nand then let's um i'll pick a spot\nlet's go back up here where we had let's\ndo f\na just let's see what are we looking at\noh here we go let's do f and h\nand up here f is set to age of 2.0 and\nwe find out that that's incorrect data\nso we go ahead and switch to df3\nequal and then we're going to print out\nour df3\nand if we go to f and age it is now 1.5\nso we're just changing the value in the\ndf3 and this is changing the actual data\nframe remember a lot of our stuff we do\na slice\nand like it returns another data frame\nthis changes the actual data frame and\nthat value in the data frame\nso we've covered uh location and eye\nlocation is null making a copy here's\nour eye location which is equivalent of\na slice and also selecting columns\nso now we want to dive just take a\nlittle detour here and let's look at df3\nmeans\nand this is kind of nice because you can\ndo this you can either do this by as you\ncan select a single column here by the\nway you can just add the column\nselection right here like we did before\nso we could have age\nlook up the mean that just creates a\nseries if i run that there's our age\nbut if i take that out instead of\nselecting it we can do the whole setup\nand it has age and visits so why doesn't\nit have priority or animal\nwell those are not integers so it's\nreally hard\nthey're non-numerical values so what is\nthe average i guess you could do a\nhistogram which probably will look at\nthat later on but the only two things we\ncan really look at is age and visits and\nwe have\nthe average or the mean on the age is\n3.375\nand the mean on visits is 1.9\nand let's do df3\nvisits we'll go and steal the visits\nagain\nand remember all those different\nfunctions we looked at for a series well\nwe can do those here we can do the sum\nso if we run that we'll see that these\nsum up to 19. we could also look up\nminimum if you remember that from before\nthe minimum is one\nmax\nso all that functionality is here\ni'll just go back to summing it up and\nadding it all together so real quick\nwe've shown you how to take the series\noperations and put them into the data\nframe and then we can actually this is\ninteresting one we can just do df3 sum\nrun and you'll see the different\nsummations on there\nit just combines them i like the way it\njust combines the strings on there for\npriority and animal we've looked at is\nnull we've also looked at copying along\nwith the different slices which we\ntalked about earlier so let's talk about\nstrings let's dive into the string setup\non there and let's go ahead and create a\nstring series string equals pd series\nand we just put it right in there we\nhave a c d a a b a c a popped in a null\nvalue cow and owl i don't know why they\npicked cal and al in the background\nsomeone must like those animals and of\ncourse we can just do string if we run\nthat you'll see\nleave the r out we'll get an error but\nif we put it in there you'll see that we\nhave a simple series 0 a 1 c 2 d and it\nautomatically indexes it 0 to 8.\nand then we can go string dot lower so\nwhen we're talking about our data frame\nin this case or our data series string\nin this case we use the string\nfunction str and we're going to make it\nlower and if we go ahead and put the\nbrackets on there and you'll see that\nwe've gone from capital a capital c so\non to abc and baca cba cow al they were\nall lower case already and of course if\nyou want to go lower you can also do\nupper we'll go ahead and run that and\nyou can see we now have a c d a a baca\neverything's capitalized except for the\nnull value which is still null all right\nso we looked at a few basic string you\ncan see that string functions upper and\nlower we're going to jump into a very\nimportant topic i'm even going to give\nit its own\nheader on here because it's such an\nimportant topic what do you do with\nmissing values\npanda has some great tools for that so\nwe'll dive into those\nwe'll call we'll work with df4 and if\nyou remember the df copy from above\nwe're just going to make a copy of df3\nand let's just take a quick look at the\ndata we're working with oops df3 forgot\nthe three on there there we go\nso here we have our cats snakes and dogs\nhopefully not all in the same container\nbecause that would be just probably mean\nto all of them so we made a copy we're\ngoing to be working with df4 and the\nreason we made a copy is we want to go\nahead and fill the data and we just\nsimply do fill in a and then we're going\nto give it the value we want to put in\nthere we'll give it the value 4. so i\ncan run in here and you'll see now that\ndf4\nnow has where the n a was is filled with\nthe value of four same thing down here\na lot of times we'll compute the mean\nfirst so i might do a mean\nage\nequals df4 and then we want to go ahead\nand do age\nand dot mean\nand then i'll do something like this df4\ni only want to select the age\nand i want to fill that\nwith the mean\nage i run in there and you'll see that\nour df4h now has the means in there just\na quick way of showing you how you can\ncombine these let me go back to our\noriginal one there we go and run that\nand keeping with good practices df5\nequals df three dot copy\nand we'll print our df5 which should be\nthe original one\nand then on the df5 we can now drop our\nmissing data\ni'm going to simply drop in a\nand we're going to use how equals any so\ni'm going to drop any row that has\nmissing data in it and you'll see we had\nd here with missing data and h\nand then let's go ahead and see what df5\nlooks like when we do that\nthere we go and there it is d is gone\nand so is h so we create a new data\nframe off of this missing those values\nnow if you have a lot of data dropping\nvalues is a good way to take care of it\nbecause you don't miss some data if you\nhave not a whole lot of data you're\nworking with like the iris data set or\nsomething like that or something small\nyou want to start trying to find a way\nto fill that data in so you don't lose\nyour computational power of the data you\ngot\nso just a quick look at processing null\nvalues\nor missing values you can fill them\nusually with the means some people use\nmedium or the mode there's different\nways you can fill it one way is means\nand we can also just drop those rows\nthose are the two main things we do with\nmissing data\nhere we go uh we're going to cover next\nthis is i so love data frames for this\nfile operations\nit saved me so much time because they\nhave so many different tools for\nbringing data in and saving data\nso we're looking at the data frame file\noperations it's really streamlined i\ndon't know how many times they'll go on\nto\ndifferent data downloads and they'll\nhave panda download standard on there\njust because it's so widely used so\nlet's start with the most common file is\na csv so we have df3 to csv or animal\nand let me just show you what the folder\nis going into\nright now i have some untitled and a few\nthings in here but nothing labeled\nanimal so we go ahead and run this\nand this has now saved the animal to\nmy hard drive and you can now see the\nanimal folder up here and if i let's do\nedit with a notepad oh let's open up\nwith just a regular notepad there we go\nor wordpad if i open that up you can see\nit's comma separated our titles they\ndon't have an index on the categories on\nthe top and the index comma then all the\ndifferent data is separated by commas\nstandard csv file on there and if we're\ngoing to send it to csv and notice the\nformat is dot 2 underscore csv\nand it's just the name of the file we're\nsending it to you can also put the\ncomplete path by default it's going to\ngo whatever the active directory this\nprogram is running on that's why those\nother folders are in there so we have\nour df3 to csv and then if we're going\nto put it in there we want to also get\nit back out and we'll call this one df\nunderscore animal equals pd read\nunderscore csv\ni always have to remember is two\nunderscore csv and read underscore csv i\nalways want to do like a capital in\nthere and not the underscore we're going\nin here again is the active directory so\nif i now do print out my df animal\nand let's just do the ahead we only want\nto look at the first three lines so if i\ngo ahead and run this\nwe'll see the first three lines and they\nshould match up here what we saved to\nour csv\nso very easy to save and import from our\ncsv files on here\nand it turns out df\n3 also has a 2 xl they actually have a\nlot of different formats but you know\nold school\nexcel was real popular for so long still\nis we can go ahead and save it as\nanimal.xlsx\nwe're going to call the sheet named\nsheet1\nand then i can also do df we'll call it\nanimal2\nanimal2 and this one's going to come\nfrom in the same format on here there we\ngo so we still have our animal xlsx\nthe sheet one that's where it's coming\nfrom index columns equals none so we're\nnot going to we're going to suppress the\nindexing on the columns n a values and\nit'll just assign that 0 on up on your\nindexes so if it says index columns\nequals none that's what it does and then\nwe've added null values because there's\nno values in here and we want to just\nmake sure that they're marked as n a\nand we'll go ahead and just print out\nthe animal animal 2 there we go and\nlet's run that let's make this let's\njust do the whole thing so we'll go\nahead and run that and it probably\ndoesn't help that i completely forgot\nthe read\nso animal 2 equals pd.read\nexcel there we go excel so now we go\nahead and run it\nand what we expect is happening here we\nhave the same data frame on here and if\ni flick back to my folder you can now\nsee that we have the animal one of these\nis in excel and one of these is a csv on\nhere and so there's our two file types\non there and they have other formats\nthese are just the two most common ones\nused and i don't know how many times\ni've had stuff from excel i need to pull\nout if you've ever played with excel\nit's a nightmare in the back end because\nof the way they do the indexing\nso this just makes it quick and easy to\npull in an excel spreadsheet so we\nlooked at two different ways to bring\ndata in and save it to files we've\nlooked at all kinds of different ways of\nmanipulating our data set and slicing it\nand creating it for our data frame let's\nget in there put your visualization\nalways a big thing at the end because\none it lets you check to see what you\ndid make sure it looks right and then\nalso if you're going to show somebody\nelse it makes it very clear what's going\non if they see something visual so this\nis where a really important part of data\nscience is so let's go ahead and bring\nin our tools we're going to do import\nnumpy as np we want to make sure we have\nour amber sign matte plot library in\nline this just lets jupiter know that\nwe're going to print it on this page if\nyou're using a different ide you don't\nreally necessarily need that but this\ndoes help it displays correctly in\njupiter notebook and if you remember for\nearlier we could create a uh we're gonna\ncall it ts we're gonna create a pandas\nwhich are cute cuddly creatures versus a\npandem short for pandemonium no so we\nhave ts equals pd series and we're just\ngoing to create a random\nsetup of 50. we'll do an index we'll set\nit equal to the panda's date range today\nperiods equals 50 so the 50 should match\nand i want you to notice something here\ni did not import the matplot library why\nbecause it's already in there pandas\nalready has its built-in connection and\ninterface with matplot library so you\ndon't have to import it\nand we'll go ahead and do ts\nequals ts dot\ncumulative sum we're gonna do the\ncumulative sum\nso a little reformatting there and we'll\ngo ahead and plot it and let's take a\nlook at what that looks like\nso we have a nice graph here we have the\ndates on the bottom we set this up so we\nhave a nice range between in this case\nminus four to looks like about two maybe\nor one minus four and one\nso what we've done here we plotted a\nbasic series just a single row of data\nand we've set indexes on there but we\ncan also do the whole data frame on\nthere and let's see what that looks like\nso first let's go ahead and create the\ndata frame we have here random numbers\nwe're going to do 50 by 4 and then we'll\ngo and create columns a b x and y just\nbecause we can index is the ts.index on\nthere so we're gonna use the same index\nas before\njust to keep it nice and uniform we've\nalready generated the dates to go with\nit and then we can do just like we did\nwith the series\nwe can also do with the data frame\ndf equals df cumulative sum\nso we're going to sum the whole data\nframe and then we'll do simply df plot\nand let's put that in and let's go ahead\nand run this and look how easy and quick\nthat was to generate a nice graph with\nall the different data on there so we\nhave our shared index we have the shared\ncolumns and then we have the different\ndata from each one that we can easily\nlook at and compare so very quick way of\ndisplaying data you can imagine if you\nwere working in oh i think i mentioned\nstock earlier because i've been doing\nsome analysis of stock lately so you'd\nhave your date down here and then you\nwould have stock a stock b stock x y\nwhatever it is and you can put them all\non one chart and see how they\nwhat they look like next to each other\nand this isn't too far off from what\nsome of those graphs look like and this\nis just randomly generated so stock has\na lot of randomness in it which is one\nof the reasons i actually play with it\nfor doing some of my models on for\ntesting them out\nnow there are a lot of features in\npandas so we're going to show you one\nmore thing on here there are some of the\nthings like i didn't go too deep we\nlooked at the top two for importing data\nfrom a csv and from an excel spreadsheet\nshowed you how to quickly plot the data\nthere's more settings in there you can\ndo\nwe're going to do one more thing down\nhere and this is kind of a fun one\nchanges to a markdown and run that\nso how would you remove repeated data\nusing pandas\nand this is where you have a data set\nthat comes in and maybe it's a feeding\nfrom one location and instead of noting\nthat it's repeated the date like oh\nlet's go back to stocks that's a good\nvisual we have the stocks from the 23rd\nand it adds another row and it's the\nsame row it's importing the 23rd again\nand again so now you have that data\nrepeated three times and you need to go\nback and figure out how to get rid of it\nhow do you track that down\nso let's start by creating a quick\ndatabase our data frame not a database i\nkeep saying databases a data frame and\nwe'll just make this data frame has\nusing our dictionary going in this data\nframe only has one data series in it\nwhich is fine so if we do df to print it\nout you'll see a\none two two two two four five four five\nsix seven so on so how would you remove\nthat well there is a neat feature in\ndata frames called shift\nalong with another feature that lets us\nselect just certain date information\nand we'll go with\nthe location function put that in\nbrackets remember that from above\nlocation and then in the location let me\njust spread this out a little bit so\nit's really easy to read in fact i'm\ngoing to go upscale on that since we're\ndoing some a little bit more complicated\nhere\nwhat you can see on this on the location\nis i have dfa dfa.shift\nso this is going to shift up one by\ndefault you can actually change this to\ntwo or three you can even do a minus one\nand it shifts the other way but it's\ngoing to shift up by one by default and\nit's going to say if that does not equal\ndf of a\nthen we want that and if you look down\nhere we had one two two two two two when\nwe run this logic on here and we do the\nshift\nit now gets rid of all the duplicates so\nwe went from one two two two two four\nfour five whatever it was here it is one\ntwo two two four four four five five\nfive six six six to one two four five\nsix seven eight and you'll see on the\nindex it just deletes them out of there\nso the index stays the same obviously\nyou don't want the dates to change if\nyou're working with an index dated setup\nso it just deletes those duplicates out\nof there this is just a quick way to\nintroduce you to\none the fact that you can add logic\ngates into here and two the eye location\nallows you to use shift so there's the\nshift function and then the i location\nselects that based on true or false\nwow so we've actually covered a lot\ntoday in pandas we've really covered\ninto the basics of selecting your\ndifferent series out of your column out\nof your data frame how to index rows how\nto slice how to plot\nhopefully you'll take this beyond that\nand start combining these different\nthings and you can create long strings\nand really explore your data generate\nsome nice graphs if you're in jupyter\nnotebook it's a great demo to show\nothers\nand i didn't know this about jupiter\nnotebook you can do this in jupyter\nnotebook and then you can download and i\nalways i never really look too closely\nat all the downloads\nwhich you now load as an html and post\nit to your blog so it's got a neat\nfeature in there but any of this is\nreally powerful tool all of this is\nreally powerful tools for doing your\ndata science if getting your learning\nstarted is half the battle what if you\ncould do that for free\nvisit skill up by simply learn click on\nthe link in the description to know more\ntoday we're going to study the matplot\nlibrary and the python code so what's in\nit for you\nwhat is matte plot library types of\nplots plotting graphs and sub graphs\nadding a graph inside a graph graph\nparameters title label legend line\ngraphs line types color and transparency\ncanvas grid and axis range 2d plots\nscatter step bar fill between radar\nchart histogram contour image 3d surface\nimage and then we'll hit a practice\nexample pie chart\nso let's start with what is matte plot\nlibrary map plot library is an open\nsource drawing library which supports\nrich drawing types it is used to draw 2d\nand 3d graphics\nand there are so many packages in the\nmatplot library we're going to cover the\nbasics and there are so many packages\nthat sit on top of the maplight library\nthat we can't even cover them all today\nbut we'll hit the main one so you have a\ngood understanding of what the matplot\nlibrary is and what the basics can do\nyou can understand your data easily by\nvisualizing it with the help of matplot\nlibrary you can generate plots\nhistograms bar charts and many other\ncharts with just a few lines of code and\nhere we have some basic types of plots\nyou can see here that we'll go into we\nhave the bar chart the histogram boy i\nuse a lot of histograms in my stuff\nscatter plot line chart pie chart and\narea graph\nlet's start plotting them and to do this\ni'm going to be using jupiter notebook\nyou can use any of your python\ninterfaces for programming or scripting\nand running it of course we here really\nlike the jupiter notebook for doing\nbasic a lot of basic stuff because it's\nso visual and in our jupiter notebook\nwhich opens up in this case i'm using\ngoogle chrome you can go up here to new\nand we'll create a new python 3 and set\nthat up\nif you're not familiar with jupyter\nnotebook we do have a tutorial that\ncovers some of the basics of that you'll\nlook at any of our tutorials i usually\ncover a number of them showing how to\nset up jupiter and anaconda i myself use\njupiter through anaconda in fact let's\ngo ahead and open that up and just take\na look at this see what that looks like\nyou can see your anaconda navigator if\nyou install it it will automatically\ninstall the jupyter notebook but that\nalso installs a lot of other things i\nknow some people like the qt console for\ndoing python or spyder i've never used\nthem i actually use notepad plus plus as\none of my editors and then i use the\njupiter notebook a lot because it's so\neasy to have a visual while i'm\nprogramming an even simple script in\npython i'll take it from the jupyter\nnotebook and then do a save as you can\nalways go under file and you can\ndownload as a python program so that\nwill download it as an actual python\nversus the ipython that this saves it as\nso let's go ahead and dive in and see we\ngot going here and let's go ahead and\nput matplot library tutorial and i'm\ngoing to turn this cell into a mark down\nso it doesn't actually run it\nyou can see it has a nice little title\nthere that's all jupiter notebook\nand then from mat plot library\nlet's import\npi lab\nback one and then let's go ahead and\njust print we'll go pi lab\nand the version let's go ahead and run\nthis so we're going to import our pi lab\nmodule from the matplot library and we\nfind out that we're in version 1.15.1\nalways important to note the version\nyou're in probably i was reading an\narticle that said the number one thing\nthat python programmers struggle with is\nremembering what version they're working\nin and making sure that they're going\nfrom one platform to the other with the\nsame version and if we're gonna graph\nthings i think we need some data to\ngraph so we're going to import numpy as\nnp now if you're not familiar with numpy\ndefinitely go back and check out our\nnumpy tutorial there's so many different\nthings you can do with it dealing with\nreshaping the data and creating the data\nwe're just going to use it to create\nsome data for us\nand there is a lot of ways to create\ndata but we're going to use the np.line\nspace so we're going to create a numpy\narray and the way you read this is we're\ngoing to create numbers between 0 and 10\nand we're going to create 25 of these\nnumbers so we're just going to divide\nthat equally up between 0 and 10. and if\nwe have x coordinates we should probably\nhave some y coordinates and we'll do\nsomething simple like x times x\nplus 2 and let's just take a look we're\ngoing to print x\nand print\ny\nlet me go ahead and run this\nand let's see we got going on here so we\nhave our x coordinates which is 0 0.4\n0.83 etc and you can look at this as an\nxy plot so we have 0 we have 2. we have\n0.416 we have\n2.17 and just as a quick reminder we're\ngoing to do print np array x comma\ny.reshape 25 comma 2. and the reason i\nwant to do this is i want to show you\nsomething here\na lot of times a program returns\nx comma y and it's an array of x comma y\nx comma y x comma y\nand so when you're working with the pie\nplot\nyou have to separate it out and reshape\nit so if i start off with pairs like\nthis i can reshape them if i know\nthere's 25 pairs in there i can switch\nthe 2 and the 25 and this is kind of\ngoofy but we'll do it anyways reshape so\ni'm going to reshape my 25 by 2 back to\n2 by 25\nand if i run that you'll see i end up\nwith the same output as the x y the two\ndifferent arrays in here\nand this is important that we want x and\ny separate\nagain that's all numpy stuff but it's\nimportant to understand that this is a\nformat that matplot library works with\nit works with an array of x's and they\nshould match your array of y's so each\none has 25 different entities in it\nand then for our basic plotting of this\ndata it only takes one command to draw\ngraph of this data and so we use our\nfrom up here where we imported pi lab we\ntake our pi lab and the key under there\nis plot for plotting a line and then we\nwant our x coordinates and our y\ncoordinates and we'll throw in r and the\nr simply means red so we're going to\ndraw the line in red let me go and run\nthat\nyou can actually switch this around if\nyou wanted to do different there's b\nfor blue we have a lot of fun yellow\nhard to see yellow there we go but we'll\ngo ahead and stick with red\nrun\nand when you're doing presentations with\nthese try to be consistent you know if\nthe business and the shareholders send\nyou a\nspreadsheet and they have losses in red\nuse red for losses in your graph\ntry to be consistent use green for\nprofit for money you don't have to\nnecessarily use green but it's whatever\nthey're using whatever the company is\nusing try to mirror that that way people\naren't going to be confused if you\nswitch your data around every time one\ngraph has red for loss and one graph has\nblue for loss it gets really confusing\nso make sure you're consistent in your\ngraphs and your coloring and something\nto know because we're going to cover\nthis in a minute this is your canvas\nsize so we have a canvas here and what\nwe're going to do next is we're going to\nlook at sub graphs okay\nso let's take our pi lab and create a\nsub plot\nand one of the things also to know when\nwe're working with the\nmatplot library i'm not setting when i\ndo this this is my drawing canvas the pi\nlab so once i've imported the pi lab i'm\ndrawing my images on there very\nimportant to know and with the subplot\nwe're going to give it some different\nvalues\nand we're going to represent by rows\ncolumns and indexes and let's do one two\none so it's going to be the first row\nsecond column and the index is like you\ncan stack your graphs and things like\nthat we don't worry too much about\nindexes but rows and columns we want to\ngo ahead and use row one and column two\nand if we're going to have one object we\nshould probably have two but before we\ndo that we have to plot data onto the\nsubplot so the order is very important\nand we're going to stick with our x\ncomma y and let's do this we're going to\nadd in\na third parameter here remember we did\nred we're going to add shorthand dash\ndash for dashed lines so this plots the\ndata into row one column two\nand if we're going to do that let's do\nup another one\npilab.subplot and if we're going to do\nrow one let's do\ncolumn two and index two\nand this time we're going to add g for\ngreen and this denotes a style and if\nwe're going to set up our pylab\nsubplot there we go right lab we've got\nto go ahead and plot that pi\nlab plot\nand instead of x y we want y comma x\noops i messed up this is in the wrong\nspot there we go we'll move that down\nhere real quick because that goes in the\nplot part so the subplot tells it the\nrow column and index and the pi plot\ntells it what data in this case we\nswitched them and the color and then the\nstyle shorthand now let's go ahead and\nrun that\nand you'll see it takes this canvas\nsplits it into\nand now we have two different graphs and\nwe have the red one with dashed lines\nand we have the green one which is has\nlittle stars going up and if we take\nthis and let's just um just for fun\nlet's change this and run that with an\nindex of one it puts them both on the\nsame index it also gives me a warning\nbecause it's a strange way of doing two\nsubplots there's depreciated there's\nanother way to do it but most people\njust ignore that warning because it's\nnot going to go away anytime soon now\nthat's using the same setup what happens\nif we do\ninstead of\nthis let's change the column on here and\nfind out what happens\nand if we do the column\nit didn't really like that on the setup\nit just disappears so let's keep our\ncolumn as 2 and let's change the row on\nthe second one to 2\nand run that\nand you'll see again it kind of squishes\neverything together and causes some\nissues so let's take the index so these\nneed a unique index and you can see here\nwhere i made some changes i said row two\nand look what happens when i change to\ncolumn two so i now have row two column\ntwo index two i squished it up here so\nyou could put another graph underneath\nis what that does and there's all kinds\nof different things you really have to\njust play with these numbers till you\nget a handle on them because\nyou know you have to repeat it 164 times\naccording to cambridge university if\nit's completely new to you and you can\nsee right here where there you go three\nrun there we go but you can see it takes\na little bit sometimes to play with\nthese and get the numbers right\nhopefully hit the wrong one that's why\nlet's go three there three there run\nthere we go now it's overlapping so i\nhave this doubled over here on the right\nfor now we'll just go ahead and leave\nthis with the\nwhere we have column and row two and the\ntwo different indexes so they appear\nnice and neatly side by side\nand then as we just saw as we were\nflashing through them we can put them on\ntop of each other\nand let me just highlight that and copy\nit down here\npaste it down there and here we have one\ntwo one and then we'll do one two one\nalso for this one and that puts the two\nsubplots directly on top of each other\ngives us that warning and you can see we\nnow have two different sets of data\ngraphed on top of each other and you can\nalso see how it did the indexes since\none of them is from 0 to 10 that's the\ngreen one on the x axis and the other\none is from 0 to 10 on the y-axis so it\ntook the greatest value of either one\nand then used those as a shared value\nso let's\nnext look at operator description and\nwe'll go ahead and turn this cell into a\nmarkdown and run that so it looks nice\nso fig and you remember i talked about\nthe canvas earlier i briefly mentioned\nit we're going to look a little bit more\nat the canvas later on but that's what\nthe figure is fid we're going to add\naxes so we're going to initialize a\nsubplot add the subplot in rows and\ncolumns and all kinds of different\nthings with this you can do let's look\nat that code and see exactly what's\ngoing on and i want you to notice that\nthere's fig which is the actual canvas\nin the matplot library and ax is\ncommonly used to refer to the subplots\nso we're creating subplots you'll see ax\nequals plt subplot\nearlier we did the pi lab so let's go\nahead and import pi plot from matplot\nlibrary and we're going to do it as plt\nyou'll see that a lot that's really the\nstandard in the industry is to call it\nplt just like pandas is pd and numpy\narray is np certainly you can import it\nas whatever you want but i would stick\nto the standards and we're going to do\nthe same graph as we did above\nwith the\npi lab but with the plt so if it looks\nfamiliar there's reason we're doing this\nbecause we want to show you how the\nfigure part works and working with the\ncanvas goes but we're going to do the\nsame plot as we did before and we'll\ncall it fig and we're going to set that\nequal to plot figure so there's our\nfigure or canvas on there and let's\ncreate a variable called axes and we're\ngoing to set that equal to\nfig dot add\naxes\nand in this we're going to control the\nleft right the width the height of the\ncanvas from zero to one\nand so we can go ahead and i'm just\ngoing to put some stuff in there i got\npoint one point eight point eight so\nwhen you're looking at this this is a\nzero to one or you could say fifty\npercent ten percent eighty eighty\npercent but it's a control it's going to\ncontrol your left and your right along\nwith the width and the height so the\nwidth and the height we're gonna use\neighty percent and we're going to have\nlike a little indent on the left and the\nright and this should look familiar from\nabove x use dot plot\nx comma y\nand then let's give it a color how about\nred since we're recreating the same\ngraph let's keep it uniform oops and it\nhelps if i use a axis instead of ax es i\ndon't know where that came from but this\nlooks identical to the one we had up\nabove so here's our axis plot x comma y\nof red\nsame graph same setup but this time\nwe've added a variable equal to the\nfigure dot add axes so our plot figures\nour canvas our axes is what we're\nworking in and then our axis.plot x\ncomma y\nand again we can draw sub graphs let me\nput that down here\njust like we did before and a little\ndifferent totation here we're going to\nfig comma\naxes equal\nplt.subplots\nand in here it's going to be the number\nof rows\nwe're going to do one row\nand columns equals two so if you\nremember before that's what we did we\nhad one row with two different graphs on\nit we're going to do the same thing but\nknow how we did this here's our figure\nour canvas and our axes we're going to\ncreate actually two different axes we're\ngoing to create row 1 column 2. and so\naxis is an array of information so we\ncan simply do\n4\nlet's do x in axes\nthis will now look familiar x dot plot\nwe're going to do x comma y we'll go\nahead and make a red keep everything\nlooking the same remember nice uniform\ngraphs everything looks the same and if\nwe go ahead and run this\nyou'll see we get two nice side-by-side\ngraphs so just as we had before the same\nlook the same setup\nand just for fun let's change in columns\nto three we'll run that and now you see\nwe'll have three on there and let's see\nif we make it a little bit more\ninteresting we'll do in rows equals to\ntwo and you can see down here we're\ngoing to get an attribute error because\nit's trying to scrunch everything\ntogether\nso it does have a limit how much stuff\nyou can put in one small space that's\nimportant to know you can fix that by\nchanging the canvas size which we'll\nlook at in just a minute and there's\nother ways to change it on here but here\nwe go we can do in rows two and columns\nequals one you can see two nice images\nright above each other we'll go back to\nthe original one row two columns side by\nside left to right and\nwe can also\ndraw a picture\nor graph\ninside another graph\nand that's kind of a fun thing to do\nit's important to note that we can layer\nour stuff on top of each other which\nmakes for a really nice presentation\nso let's start by uh fig let's create\nanother figure so we're going to start\nover again with our canvas\nwe set that equal to plt.figure\nso there's our new canvas and let's do\naxes we'll call it axes one and two axis\none equals fig dot add axes remember\nthis from earlier\nand\nthis here similar numbers we used before\nsaying how big this axis is this figure\nin the axis is so this is going to be\nthe big\naxes and let's do axes 2 equals\nanother figure at axes and then\n0.2.5.4.3\nand if we're going to do this they need\ndata on them so let's go ahead and plot\nsome data on our axes so axes1 dot plot\nand we'll make this simply x comma y\ncomma make it red\nand then let's go axes2 dot plot\nand let's reverse them y comma x comma\ngreen there we go doing what i told you\nnot to do you shouldn't be swapping axes\naround and plotting your data in five\ndifferent directions because it's\nconfusing let's go ahead and run this\nand see what this looks like and then\nlet's talk a little bit about this we\ntalked about the 0.2.5.4.3\nand let me just grab the annotation for\nthat that's left right width and height\nso we have in here that this is going to\nbe left right so here's our left is\npoint one in point five and we you know\nwhat let's just play with this a little\nbit what happens when i change this to\npoint one moves it way over to the left\nso there's our point one so we can make\nthis point four run that there we go so\nyou can see how you can move it around\nthe branches on here 0.2\n0.5 is the\nleft so that's our right so see what\nhappens when we do point oh let's make\nthis point one\nthat actually is they had it down at\nleft right i thought this was wrong it's\nactually how far from the bottom let me\nswitch that on here bottom there we go\nso we had here on this we can go ahead\nand put that back to 0.5 and run that\nand this is point three let's make this\npoint three also and that is the width\nand then of course there's the height we\ncan make that really tiny actually let's\ndo 0.2\nand let's run that and you can see it\nchanges the height on there we make it\neven smaller 0.2 by 0.2 and as you can\nsee you can get stuck playing with this\nto make it look just right it can\nsometimes take a little bit\ncertainly once you have the settings if\nyou're doing a presentation you try to\nkeep it uniform unless it doesn't make\nsense for the graph you're working on\ntry to keep the same colors the same\nposition and the same look and feel\nand i mentioned earlier we can adjust\nthe canvas size so this is from earlier\ni just copied it down below we're going\nto re-plot the same data we've been\nlooking at and what we can do is we can\nchange the figure size to 16 by nine let\nme run that and show you what that looks\nlike so it fills the whole screen and\nthen if you are normally when you're\nworking on the screen you don't worry\ntoo much about this but we can set the\ndpi to 300\nrun that\nthere it goes this is your dots per inch\nand if you are doing an output of this\nand you're printing a hard copy you want\nthe higher quality i would suggest\nnothing under 300 if it's a professional\nprint you might get a little less than\nthat but whenever i'm doing professional\ngraphics and printing them out on\nsomething 300 dots per inch is kind of\nthe minimal on there you can go a lot\nhigher too but keep in mind the higher\nyou get the more memory it takes the\nmore lag time and the more resources you\nuse so usually 300 is a good solid\nnumber to use your dots per inch and you\ncan see it drills a nice it draws a nice\nlarge canvas here which is 16 by 9 and\nthen the dpi is 300 on here so it's a\nlittle higher quality and just out of\ncuriosity i wonder how long it takes to\ndraw something double that size 600 and\nyou can see here where at 600 dpi it's\ngoing to take a while there it goes just\nbecause it's utilizing a lot more\ngraphics on there and let me just go\nback to the 300 now we'll actually do\nlet's do a 100 you're not going to see a\ndifference on this because it is web\nbased graphics are pretty low\nand up here you saw i did this with the\nplot figure this works the same if i do\nfigure axes subplot figure size and then\nwe'll go ahead and do axes\ndot plot\nx comma y comma we'll stick to red\nlet's go ahead and run this and you\nshould get almost the same thing here\nhere's our\naxes on the subplot on here with the\nfixed size and the dpi let me take this\nall out let me just remove all that real\nquick run it again there we go now we're\nback to our original figure and let's\nlook at some of the other things you can\ndo with this\none things we do is we can set a title\nfor the axis so axis set title you'll\nsee right here since i put this on the\naxis it's the main title for the whole\ngraph\nand if you're going to have a title you\nshould also label so we can label our x\nlabel and we can set our y label in this\ncase we're just going to call it x and y\nkeep it nice and uniform and if we run\nthis you'll see that we've added a nice\nx label and y label whoops where'd they\ngo and it turns out in this environment\nthat you have to put it before the title\nso let me go ahead and put it before the\ntitle and there's our xy let me run that\nand of course we can also do upper size\na little bit and see what's going on a\nlittle better so here we have x label x\nif you come down here you'll see our x\nlabel and our y label we can of course\nchange this to x\nlabel you can change this to y\nmaybe whatever you want on here of\ncourse and our title graph there we go\nrun so here we have our title graph our\ny label and our x label all set up on\nour nice little plot and then before we\nmove on to the next section let's do one\nmore thing on here we have a thing\ncalled the legend and we're gonna do\nwe're gonna set our ax legend label one\nlabel two up here it's a format for it\nbut let's go down here and actually use\nit i'm going to do two different plots\nwe're going to have axes plot x by x\ntimes x squared and x cubed and if i run\nthis you'll see it puts two nice graphs\non the setup on there but it's nice to\nhave a legend telling you what's going\non so for the legend we can actually do\naxes since we have the two plots legend\nand on here we've created an array\nand we have y equals x squared y equals\nx cubed you can actually put this as\nwhatever you want those are just strings\nand then location two and let's go ahead\nand run this and see what that looks\nlike and you can see it puts a nice\nlegend on the upper left hand corner\nlocation two we can do location three\nand run it and it drops it down to the\nbottom location one i can't remember\nwhere that's at there we go upper right\nso each one of these is a number that\nrefers to the different locations on the\nscreen zero kinda have to play with them\nor look them up to remember where\nthey're at but they do work it just kind\nof moves around depending on where you\nwant your legend out on there so on this\nsection we cover the title of the graph\nthe y labels and legends this is we're\ngetting into some starting to look\nreally fancy here so we now have\nsomething we can actually put out you'll\nsee the title the graph looks a little\nfuzzy so i might in a web setup put the\ndpi up a couple notches maybe put it at\n200 100 might work fine just so you know\nsomething to notice on here when you're\nplaying with these different things we\nhad our subplots dpi equals oh let's do\n200 to see what that looks like\nso you can see now it's a lot clearer\nit's also larger so it's a nice little\nfeature you can throw in there with your\ndpi dots per inch\nso the next section is let's look at\nsome graph features we're going to look\nat line color transparency size and a\nfew more things on here and oops i\nforgot the main title so we have our\nfigure in our axis equals our plot and\nsubplots and i'm going to do a dpi\nequals 150 so the graph comes out nice\nand large and easy for you to see\nand let's go ahead and do three plots on\nhere we'll do x by x plus one so it's\njust going to be a straight line plot\nx plus x plus two\nand axis dot plot\nx x\nplus three this looks like we're doing\nnearest neighbor setup we're showing how\nit uh located data putting your lines on\nthere between the nearest neighbors\nthere we go so it draws a nice little\ngraph with three lines on it one of the\nthings we can do is we can control the\nalpha on this oops and you can actually\nsee the um when they did these lines it\nautomatically pulls in different colors\nfor your setup so there's some automatic\nautomatic things going on in there and a\nlot of times we do that comma r where\nwe're going to do color equals red\nanother notation on here let's go ahead\nand run this now we have a bright red\nline down there and with the matte plot\nlibrary you're not limited to red you\ncan also use the one of many different\ncolor references as you see here with\nthe pound sign one one five five dd\nwhich just is just blue and we can do\nthe same thing with another color on\nhere which it turns out to be green i\ncan just as easily do this green\nblue oops there we go blue and run that\nand you'll see here we have red blue and\ngreen and what i want to do is i want to\nmake this we're going to say what's\ncalled the alpha on this and we're going\nto set this equal to 0.5\nso this is halfway see-through when i\nrun this and it's almost going to look\npink because you can see through it and\nlet's change this just a little bit just\nto make this kind of fun let's square it\nthere we go run it so now we have this\nnice square that comes up and you can\nsee when it crosses it because i plotted\nthese two lines after it and they have\nno alpha the red is behind those lines\nor in this case pink because we did the\nalpha halfway through so let's go ahead\nand do this alpha equals 0.5 and oh you\nknow what instead of squaring it let's\ntake it to the 0.5 power that'll be kind\nof interesting to see what that does\nwe'll just go to keep it squared there\nwe go\nand run that and let's go back and look\nat this where it crosses over and the\nfirst thing you see right here is on the\nblue it's kind of light blue now you can\nsee how the two colors add together you\nget almost a purple on there so i can\nclearly see where the red crosses the\nblue line and then the green just blanks\nit over because i didn't do any\nopaqueness no alpha on there\nso this is great if you have lots of\ndata that crosses over and you need to\nbe able to track those lines better and\nwe'll go ahead and do this .5 and we'll\nrun that oops i did\nequals 0.5 let me go ahead and run that\nand so you can see right here now you\ncan easily see the red line how it\ncrosses the green and the blue down here\nand if we want to we can do this as the\ndefault is one solid so we can change\nthis all to point eight let me just do\nthat\noops 58 there we go run\noops i must have hit a wrong button\nthere let me try that again i actually\nget rid of a bracket and let's go ahead\nand run that\nand we come down here and look at this\nyou can still see where it passes behind\nthem but the green dominates and the\nblue dominates because we're now at 80\ninstead of 50\nwhen you can do less that's kind of fun\nalthough at some point the lanes kind of\nfade\nso 0.5 is usually the best setting on\nthere we have a nice pastel here at 0.3\nand you can easily see where they cross\nover and just like you can play with the\ncolors we can play with line width and\nyou know let's do\nlet's try dpi 100 and see what that\nlooks like on my screen equals 100 and\nwe'll go ahead and just take our ax plot\nlet's do four of these lines just you\ncan see how they look next to each other\nreal quick here there we go\nif i run this they should all appear the\nsame it automatically does different\ncolors on there so let's do color equals\nblue\nforgot my quotation marks there we go\nand we'll go ahead and just make these\nall blue just for purposes of being nice\nand uniform and then what i want to do\nis i want to do the line width\nwidth equals\n0.25\nand let's just copy and paste that down\nhere\nlet's do equals one\nabout 1.5 and let's do one let's make\nthis equal to two let's see what that\nlooks like and we do that you can see it\ngoes from a very thin line a point five\na one are one point five and two which\nis twice the width of the one and if\nwe're going to do different sizes we had\ndifferent colors we had our alpha scheme\nlet's take this whole thing here\nlet's paste it down here and do another\none\nbut instead of line width\nlet's look at styles and something to\nknow here you can actually abbreviate\nthis with lw so line width can also be\npoint let's just do everything point two\nand let's set up a line style we'll do\nthe first one dashes let me just paste\nthat down here\nso i'm not doing a lot of extra typing\nthere we go\ntake this out so we have our dashed\nwe can do a dash dot let's do the dash\ndot here and a colon here there we go\nand there's a lot of different options\nwe'll look at a few more as we go down\nfor different ways of highlighting data\nbut when you look at this we have\neverything is a line width of two and\nnow we have a straight line we have a\ndashed line or a dot dash and a dot dot\ndot line\nand then another thing we can add on\nhere is we're going to do here's our ax\nplot and we did x let's do x plus um 4.\nso it goes right on the top then do\ncolor black line width 1.5 so it's a\nsmaller line and we're going to take the\nline and we're going to set dashes so\nlook i've changed some of the notation\nhere for my line and my ax plot so i can\nset my line comma equal to x plot and\nthen i can change the line settings this\nway and when i run this let me run that\non here you'll see the 5 10 15 10\ncreates a series of dashes\nthat are buried in link\nlink in this case they alternate between\na short dash and a long dash we can play\nwith these numbers curiosity always has\nme what happens when you play with the\nnumbers just to see what they look like\nlet's do this let's paste this down here\ni'll do two of these just because\nthey're kind of fun to play with and\nlet's change this from 10 to\n3 and we're going to change this one\nfrom 15\nto\n4. and let's run that and you can see\nthe differences in the lines oops very a\nlittle bit confusing on there because i\nforgot to change the lines are all on\ntop of each other so let me change that\nreally quick here and let's run that and\nnow you can see here's our original\ndashed line alternating when i change\nthese numbers on the second one the very\nend value to three you can see now we\nhave dashes of five let's see i'm going\nto guess this is a dash is a five skip\nten dashes of 15 skip three and then it\ngoes back to the beginning dash is five\ndashes skip ten fifteen dashes skip\nthree and of course the last one we just\nswitched up a little bit it looks a lot\nmore uniform because i'm using two sets\nof ten or if i did something like this\nand change it to thirty it really\nbecomes pronounced as far as the\ndistances between them and instead of 4\nlet's go oh let's put 30 here also 30 by\n30 there we go really pronounced on that\none and let's look at one more important\ngroup for plotting our data and in this\nwe're going to here's our plot we\nstarted with with the x plus one x plus\ntwo x plus three and did it in blue on\nthis one so three or four different blue\nlines\nand this property we want to add the\nactual plots so you can see where the\nplots are on the graph and for that we\nmight have marker equals o and if we run\nthis you'll see it puts a dot for each\nof these and there's 25 dots because we\nhave 25 x values so we actually have\nzero and each of the different values of\nx y are then plotted here with the dots\nand we don't want to just limit\nourselves to dots\nyou can also do\nplus sign that's another option dots is\nmost common i'll actually like the dots\nthe best if we do the plus sign you see\nit puts a nice crosshairs or plus sign\non there and we can do a marker there's\na number of different markers you can\nuse\nand i think this one was it s is another\none\nwhich is a nice square and that's\nactually a good one s for square o for\nperiod okay that's just kind of weird so\nyou can see that probably on these\nmarkers another one is the number one so\nif we run that you'll see we now have\nthese little hatch marks\nand let's take oh let's just go with the\no on this one\nby the way this works with square really\nnicely some stuff we're gonna do here on\njust a second let's do\nmarker\nsize equals two and\nchange that to five and run that and you\ncan see here it puts a nice little tiny\ndot versus a the size dot here this is\ninteresting because it said two i\nthought it would be bigger\nbut if you do 0.5 it gets even smaller\nand let's just do 10 to see what that\nlooks like run that looks huge so marker\nsize a lot of these are dependent on the\ndpi and the setups there's things that\nswitch around as far as the way the size\nshows up you got to be a little careful\nwhen you change one setting it can\nchange all the other markers and then\nlet's take our square on here\nand we'll do we have marker size so we\nalso have marker face\nwe'll set that equal to red of course i\nmean change the so it's up one notch\nwe'll run that whoops must have mistyped\nsomething on here and i did it's marker\nface color equals red and so when i run\nthat you can now see i have the squares\non there with the marker face color of\ncourse we can mix and match these\ncome down here and we'll make this\ninstead of let's make this plus seven\nand we'll make this\nsize 15\nmarker face color\nequals\nand we'll do what green just because\nthere we go run very hard to actually\nsee what's going on there still 25 dots\nthey kind of overlap as you can see they\nprint them over each other of course if\nwe really wanted to make it look\nhorrible we could just make that really\nhuge\ngenerally though you want something a\nlittle bit smaller and cuter we'll just\ntry doing it this way there we go that's\ntoo small to even see the face so four\nyou can start to see the face on there\naround four and maybe an eight eight\nmight be a good number for this there we\ngo eight again that all just depends on\nwhat you're trying to show and display\nso we've covered a lot of stuff here as\nfar as our lines we've covered\nopaque with our alpha setting on there\ngive us some nice pastels you can see\nhow they overlap and how they cross over\nwe covered the line width different size\non there different formats for the line\nitself and these are all you can combine\nall these so you can have our line width\nequals two line style equals dash you\ncan bring this down here also to the\nmarkers and then we added markers in\njust entered a circle a\nplus sign the square a little tick which\nuses a one then we had a marker size and\na marker color face and we combine those\nyou see we get a nice different series\nof representations we also briefly\nmentioned color where you didn't have to\nuse like in here we used color black\nsomeplace up here and have to find it we\nuse the actual number for the color as\nopposed to i changed it to red and blue\nso you get very precise on the color if\nyou have very specific color set that\nyou need to match your website or\nwhatever you're working on\nall those are tools in the matplot\nlibrary so we have\none more piece to formatting the graph\nso we want to show you and then we have\ntwo big sections we're going to go over\nthe different graphs that they have\nalong with a challenge problem so let's\ngo to the last section we're going to\nlook at is limits we're going to limit\nour data\nso this first primer is going to paste\nin there we're going to create our\nsubplots one two so one row two columns\nwe're gonna do a figure size of ten\ncomma five this should all look familiar\nnow since we've done a number of them\nand we're gonna go ahead and plot and\nthis is an interesting notation you\nshould notice here our axis zero so one\nwe've used instead of you can just\niterate through them but they're just an\narray so it's an array of zero is still\nthe axes of the first axes out of two\nand we're going to plot x\nx squared x x cubed lined with two so\nwe're gonna go ahead and just plot two\ngraphs right on top of each other\nwithout doing multiple plots on here and\nwe'll set the grid equal to true one\nhere let's go ahead and run that and you\ncan see here our two plots with the x\nvalue going across\nand i'm going to do something similar\nand by the way as you can just if you\nlook at it you can see the grid on there\nthat's all that is\neasier to spot the data going across\nwe're going to take the same\ndata for axes 1. so we have our plot of\nx x squared x and x cubed line with two\nand this time we're going to take our\naxes one and do y limit\nit's actually set underscore y limit\nthis is the y axis so it's going to be\nan array of two two values and we'll do\n0 comma\n60 i'm just making these numbers up the\nguys in the back actually made them up\ni'm just using their numbers\nwe're going to set the x limit\nand we'll set the x limit as don't\nforget our brackets there\ntwo comma five\nso it's the same data going in and but\nwe're setting a limit on it let's go\nahead and run that and let's see what it\ncomes out of and here we have the y\nlimit zero to sixty so we're looking at\njust the lower part of this curve here\nup to here and we have the x limit two\nto five so that starts right here at two\nand you can see very different graphs\nthis is kind of nice because you could\nactually put one of these on top of the\nother if you wanted to draw focus to one\npart of a graph remember how we did that\nearlier one inside the other but just a\nquick note you can easily limit your\ngraph and re kind of reshape the way it\nlooks quite easily and we can also add\nthat grid down there if you want a grid\nwe'll run that and add the grid in there\noops i guess you have to do the grid\nbeforehand\nswitch that there we go sometimes the\norder on this is really important so you\nmay double check your order when you're\nprinting these things out it also helps\nif i change it to one so in this case\nmight not be the order i wonder if we'll\ngo back here as one there we go so it\ndoesn't matter the order and grid but\nyou can set the grid for easy viewing\nhere nice setup on there but you can see\nhow we can limit the data\nso let's start looking at some other 2d\ngraphs and make this cell a markdown so\nwe run it as a nice pretty title to it\nand let's go ahead and create some data\nwith an np array we'll do\n0 to 5 on here there we go and let's\nlook at 4 common graphs we'll put them\nside by side so we'll do a figure our\naxes equals plot subplots one four\ncolumns and then figure size hopefully\nit'll fit nicely on here it seems to do\npretty good on here and i'll go and just\nrun that since we're in there run you'll\nsee i have my four blank plots on here\nand we'll start with axes of zero let's\nset title\nand we want this to be a scatter plot\na scatter plot just means it has a bunch\nof dots on it so here's our axis of zero\ndot scatter easy to remember scatter a\nbunch of plots on there we'll do our in\nwe can do x or n there we go and let's\ngo ahead and do axes set title scatter\nalready did that we're just gonna do\nscatter\nthat's how you do it on there notice how\nyou create a scatter plot with simply\nwith the scatter control and we'll do\nlet's do the variable x\nx\nplus let's throw some randomness in here\nusually scatter plots are i have a lot\nof random numbers connected to them\nthat's why they do them on there and so\nthe bigger the x gets the bigger the\nrandomness so 0.25 times the randomness\nand what we should end up doing here is\nwith the scatter plot and you can see as\nyou go up it just kind of has some\nrandom numbers and moves up and down the\nline\nbut plus just the points so if you\nremember from back up here where we did\nmarker\nthis is plotting basically just the\nmarker so it's a scatter plot\nprobably less used is a step plot so for\nexes one we'll go ahead and do a step\nplot so you can see what that looks like\nand this time we'll use our n value\ninstead of x we generated that n value\nup here and so for this we have n\nn times 2 r n squared n times 2 n\nsquared line width equals 2 and if we\nrun that it creates a nice step up\nlet's see so we've got a scatter plot\nwe've got a step\nplot let's do a bar plot\nand we'll use the same formula in n\nsquared alignment centered because you\ncan have them left or right with 0.5 and\nalpha if you remember correctly that's\nhow opaque it is\nlet's see what that looks like on there\nso we have some nice you can see here a\nnice bar plot it should look very\nsimilar to the step plot but colored in\nand we can change the width let's see\nwhat happens we do 0.9 run\nand if we take width out completely\nrun that you can see it starts coming\ntogether on there and we can change the\nalpha we can take the alpha out too and\nrun that so now you have the solid\ncolors and if we take out the center\nand run that\neverything you really can't see the\nshift on here because that's actually\nthe default on this but these are common\nsettings for the bar graph let me just\nput them back in there there we go\nalignment center and alpha now i can't\nsay i've used the step craft very much\nthere's certain other certain i guess\ndomains of expertise require a step\ngraph but the scatter plot and the bar\ngraph very common especially the bar\ngraph and we'll look at histograms here\nin just a minute so i use histograms a\nlot especially in data science but this\nis nice if you have very concrete\nobjects somebody how many people are\nwearing yellow hats that kind of thing\nbut if we're going to do that let's go\nahead and do the last one which i see a\nlot more in the sciences certainly using\nthe data science but more like for\nmapping i saw publication on\nsolar flares and they were discussing\nthe energy and so filling in the graph\ngives it a very different look so we're\ngoing to do the fill between\nand it's just like you think it'd be\nit's filled between but with a\nunderscore between them and we'll do x\nand x squared and x and x cubed and\nwe'll do color green and alpha again in\ncase you had other data you want to plot\non there you can see it forms a nice\nsquared coming up here and also if you\nlook at the bottom one is your squared\nvalue the upper line is your cubed value\nand then it fills in everything in\nbetween\nif you remember from calculus this would\nbe if you had like a car a motor and\nefficiency they would talk about the\nefficiency going up and the loss and\nyou're looking for the space or the area\nbetween the two lines so it gives you a\nnice visual of that now let's look at a\nfew more basic two dimensionals so we\nhave our figure figure size on here\nwe're going to do a radar chart to be\nhonest i've never used a radar chart in\nbusiness or in data science i can't find\na reason to use one now so the first\nline for doing a radar chart we have to\nadd axes and the figure and with this\nthis actually creates our\noh let's let's run it so you can see\nwhat it creates it creates a nice looks\nlike you're on a submarine and you're\ntracking the hunt for red october or\nsomething like that and it needs all of\nthese the polar is the fact that we're\ndoing polar coordinates\nzero zero point six point six has to do\nwith the size if you take out any of\nthese things and run them you get just a\nbox if you take out the other half you\npretty much get nothing in there and if\nyou change these numbers and change them\na little bit you can see it gets bigger\nthey had 0.6 on here i'll go ahead and\nleave it as one because that's just kind\nof fun that's all about the size on here\nthe height and the width and then let's\ncreate some data t equals np line space\nand this is 0 to 2 times np times pi so\nif you remember that is the\ndistance across and we're going to\ngenerate a hundred points\nso this is just a thing of data we're\nputting together then we simply do an ax\ndot plot and in this case let's do t\ncomma t\nwhich would be a diagonal line on a\nregular chart and we'll give it a nice\ncolor equals blue\nand line width equals three let's see\nwhat that looks like and we can see here\na spiral coming out remember this would\nbe just a diagonal line on a regular\nchart what happens if we take this and\ninstead of t\ntimes 0.5 there we go\nand you can see it slightly alters the\nway it spirals out we could do t times\ntwo spirals that a little quicker so\nit's kind of just a fun i've like i said\ni've never used a\nradar chart it's a column but you can\nalways think of radar submarine kind of\nlooks like one of those or in an\nairplane\nand none of this would be complete if we\ndidn't discuss histograms oh my gosh do\ni use a histogram so much\nand we'll use our numpy that we have set\nas np to generate oh looks like we have\na hundred thousand variables we're going\nto set equal to n and of course we\ncreate our figure and our axes subplots\none two figure size 12 14. so we're\ngoing to look at two different\nvariations of the histogram and we'll\nset a title default histogram set our\ntitle there and then this is simply\nhist for histogram and we'll just go\nahead and put in our n in there and let\nme run this and see what that looks like\nand let's talk about what is going on\nhere so we generated an array here of\ndata 1000 random arrays it looks like\nthey're mostly between -4 and 4\nand then it adds up each one it says 0\nyou have\n35 000 that are zero so that's what's\nmost common on here and we have 20 000\nthat are somewhere in this range right\nhere between the minus two and well it\nlooks like one minus two and somewhere\nbetween zero and 1 there's 30 000\nnumbers so all this is saying is this is\nhow common these variables are and this\ngives you this point in so many\ndirections when you're looking at data\nscience to go ahead and run your\nhistogram so you should always have your\nhistogram and you can always put limits\nand all the other different things on\nyour array just like you did on the\nother graphs on there and then we're\ngoing to do a cumulative detailed\nhistogram\nand all it is is a histogram let me just\ndo that\nand we set cumulative equal to true\nand bins equal 50. and i really want to\nhighlight the the cumulative equals true\nis important but we can now choose how\nmany bins we have in the first one it\nkind of selected them for us in this\ncase let me go ahead and run this and\nyou'll see it has that prints the data\nout for us and here's our whoops\nmust have missed oh there we go it\ndoesn't help that i put it over the old\none there we go okay\nso now you have your default histogram\nand then we have a cumulative histogram\nand we should have 50 steps in there and\nlet's just find out if that's true not\nso much by counting them i'm not going\nto count them if you want to you can\ncount them let's just change it to 10\nand see what happens and we see here we\nhave now 10 counts of that and we could\nset that for 5\nand run that\nand then we have our 5 on there and we\ngo ahead and take the cumulative equals\ntrue out just so you can see what that\nlooks like and let me run that on here\ntoo\nthat looks just like it did before i\nthink there's what one two three four\nfive six seven eight they have eight\ndifferent bins on here is what the\ndefault came out of\nput that back in there run\nand so now it should look almost\nidentical and it does and then we can\nput the cumulative back in see what that\nlooks like with the cumulative\nand run that\nand we can see how that shifts\neverything over and has a slightly\ndifferent luck\nwait it shifts at all to the right no it\ndoesn't actually shift it to the right\nit's cumulative so it's the total of the\ndifferent occurrences and so what that\nmeans is like if you consider this like\nfor the year of rainfall we have like\nday one you had a little bit of rain day\ntwo we have more rain and so if you look\nat the number this is a hundred thousand\nthirty five thousand so it's\naccumulative detail the histogram of the\ncurrents as it grows and rainfall is a\ngood one because that would be a\ncumulative histogram of how much rain\noccurred throughout the year and we're\ngoing to look at two more graphs we've\nalready looked at a bunch of them we\nlooked at our radar graph we've looked\nat scatter step bar fill in\nbasic plots we've looked at different\nways of showing the data and we can\nincrease the size of the line the look\nthe color the alpha setting\nso let's look at contour maps let's put\nthat in there there we go draw a contour\nmap and before we draw a contour map\nwe need to go ahead and create data for\nit and if you have contours your data is\nall going to have three different values\nso let's go ahead and create the data\nhere we have our you'd import your\nmatplot library your numpy so we have\nour numbers array\nand we'll import matplot.c\nand that's your color maps so you have\nall these different color maps you can\nlook at there's like hundreds of color\nmaps so if you don't want to do your own\ncolor you can even do your own color map\nthey're pretty diverse and of course our\nplt we're going to our pi plot\nand to generate our different data we're\ngoing to create a delta\n0.025 and we'll start with x when we're\ngoing to create an array between -3 and\n3 and delta increments of 0.025\nand we'll have our y we'll do something\nsimilar and then we'll create our x y\ninto a mesh grid again these are all\nnumpy commands so if you're not familiar\nwith these you'll want to go back and\nreview our numpy tutorial and we'll do\nan exponential on here minus x squared\nminus y squared for z1 we'll do a z2 so\nwe have two different areas and z equals\nz1 minus z2 times two\nso we've created a number of values here\nand let me go ahead and run this and\nlet's plug that in so you can see where\nthose values are going so once we've set\nthese we're going to create our figure\nand our x from our plt subplots we're\ngoing to create the variable cs and this\nis going to be our contour so right here\ncs is our contour surface and we're\nfeeding it x y and z if you remember x y\nwe created as our x and y components\nusing our mesh grid and you know what\nlet's do this just because it's kind of\ngood to see this let's go ahead and\nprint\nx\nand let's print\ny and i always like to do this when i'm\nworking with something that's either is\nreally complicated in this case is what\nwe're looking at or you don't understand\nyet so we've created a mesh grid we have\nx y and when we're done with this we end\nup with here's our x\nand this set of values and our y so\nthese are x and y coordinates and then\nwe've also created z based on our x and\ny so we have x capital x capital y and\ncapital z is our three components x and\ny being the coordinates while z is going\nto be our actual height since we're\ndoing a contour map so we created our\ncontour map from our x y and z\ncoordinates we want to go ahead and put\nin a c label maybe we want to go ahead\nand do a title on here\nwe'll put that in our set title and this\nis a\ncontour there we go contour map\nand let's go ahead and run this and see\nwhat that looks like\nand you'll see we generated a nice\nlittle contour map there's different\nsettings you can play with on this but\nyou can picture this being you're on a\nmountain climb and here we have a line\nthat's represent zero maybe that's sea\nlevel and then moving on up you have\nyour contours of 0.5 and then minus 1\nand different setups little hills i\nguess if it's minus that's like a pit so\ni guess you're going down into a pit at\nminus 5 and minus 1 but on the other\nside you can see you're going up in\nlevels so here's a mountaintop and\nhere's like a basin of some kind and in\ndata science this could represent a lot\nof things this could also be\nrepresenting two different values and\nmaybe profits and loss i don't know if\ni'd ever really do that as a contour map\nbut i'm sure you can be creative and\nfind something fun to do with a contour\nmap and then we're going to look at one\nlast map which is the 3d map and those\nare can be really important as a final\nproduct because they can show so much\nadditional information that you can't\nfit on two-dimensional graphs\nthere we go draw a 3d image and so we're\ngoing to import from our\nmpl toolkits the implant 3d and the axis\n3d we're going to import axis 3d this is\nwhat's going to let us work with the 3d\nimage and this should look familiar\nwe're going to create another figure\njust like we did before figure size 14\nby 6 that's a good fit on the screen\nwe'll go ahead and run that\nso we have our figure and let's go ahead\nand take our x and we're going to set\nthat equal to fig dot add subplot that\nshould also be familiar from earlier and\nwe're going to work with this sets the\nsettings for the projection we're going\nto use one two one projection 3d and\nwe'll see what that looks like in just a\nminute and we just created some\nthree-dimensional data here before\nwhere we had x y and z capital x y and z\nso we're going to reuse that data we're\njust going to use that since it's also\nthis is also a three-dimensional image\nso let's use that for a\nthree-dimensional graph and we simply do\nax plot\nunderscore\nsurface\nand our capital x\ncapital y capital z so there's our data\ncoming in and we're going to add some\nsettings in here we're going to do r\nstride 4 c stride 4 and line width 0.\ni'll show you what that is here in just\na minute let's go ahead and run that so\nwe can see our graph\nand of course it helps if i don't add an\nextra comma in there and you can see it\ngenerates this really beautiful\nthree-dimensional graph so let's take a\nlittle bit time to explore some of these\nnumbers we have going in here\nwe have the r stride 4 the c stride 4\nand the projection 3d projection 3d is\nthe important one because that's telling\nus that this is a 3d graph here\nso what are these first numbers 1 2 1\nlet's just change one of these i'm going\nto change this to 5\nand it's going to give me an error let's\nchange it to 1.\nand oh that didn't work let's change\nthis middle one to three instead and\nyou're going to see how it starts\nreshaping the size and how it fits on\nthe screen\nand we'll change the first one to two\nwe'll run that one\nand again it's changed the dimensions\nand the size and how it fits on here\nplay with these numbers to get a nice\nlook and feel for it part of it is the\ntilt and the angle\ni'll do seven on this one\nthere we go you can see it really\nshifted it there but again that changes\nthe size now fits on the canvas\nbut we'll leave it at the one\ntwo and just so you get a good look at\nwhat we're talking about here this is\ncolumn width and index from before\nif we do one one one you can see that it\nnow spreads it out all the way across\nuses the whole set up on there so this\nhas to do with the size and how big you\nwant it to be now there's one term that\nwe didn't cover in this yet but we've\nused it throughout the whole setup\nand i'm just going to type that down\nhere even though we're not going to go\ninto detail and that's the term heat\nmap you might see that it's kind of\nstarting to lose ground as far as a\ncommon reference but there sure are a\nlot of people still talk about heat maps\nwhat is a heat map well it is simply a\ncolor map that's all it is so if you\never see the term heat map\nthat refers to the fact this is in\ndifferent colors representing different\nheights\nthat one is in the heat map but you can\nsee up here we switched into let me go\nback up here here we go this one has\ndifferent colors for the different\nvalues\na lot of times you'll use like instead\nof x and y you might do a heat map\nwhere you have a fourth value and the\nfourth value represents the color and so\nyou'll see this 3d image in a nice\ncolors represented by a heat map that's\nall it is so if you see the term heat\nmap that only means we're plotting some\nof the data in color to make it stand\nout or to give it a fourth dimension in\nthis case so we've covered a lot of\nthings on matplot and that brings us\ncover all the basics so that brings us\nto practice example and this is going to\nbe the challenge for you and let me go\nahead and change our cell\ncell type mark down and run that so it\nlooks pretty\npractice example write a path python\nprogram to create a pie chart of the\npopularity of programming languages\nokay excellent\nand if you're going to have a challenge\nwe need some data and i'll just throw in\nour import our map library at the\nbeginning you should do that\nautomatically and so for our data to\nplot we're going to have our languages\nwe're going to have python we're going\nto have java php javascript c sharp c\nplus plus so those are six categories\nand then we have our popularity oops\nmisspelling there popularity we'll give\nthe first one 22.2 percent java 17.6 and\ni don't know if these are real numbers\nthey pulled\nmy guess is that they might have just\nbeen made up because i don't know\npython's really that much more popular\nthan the other ones maybe specific to\ndata science because python is very\npopular in data science right now\nbecause it has so many options the only\nother program that's highly used and\nexclusively for data science is r so\npython's big and python also does a lot\nmore it's a full programming language\nwhere r is primarily for data science\nthey didn't put r in here so we have\npython we have java we have our php and\nyou can see the different values they've\ngiven it are different percentages\nand i did add these up does not add up\nto 100 it adds up to 71 percent or\nsomething like that\nand then we're going to give colors and\nwe've chosen these guys in the back\nbrought in these colors i'm not sure\nwhat these colors are we'll find out in\na minute so i'll be exciting but you can\nsee they're using the actual color\nvalues you can pull off of a color wheel\nor something like that you could have\njust as easily done blue red green if\nyou're too lazy to pick the exact colors\nand then let's go ahead and solve this\nand see we got here we're going to do\nsomething a little fancy just because we\ncan\nthe first thing we're going to do is\nwe're going to use a variable called\nexplode and you'll notice that there's\nsix variables in here so that matches\nour six different categories and the\nfirst one we've done is point one and\nthen zero zero zero zero zero point one\nwhen we put this in here under the\nexplode in the plot it will actually\npush that square out so it's a really\ncool feature to highlight certain\ninformation on a pie chart\nand this is simply\nplt.pi and we're plotting\npopularity there we go and before we add\nin all the really cool settings for this\nlet's go ahead and run it and you'll see\nwe generate a nice flat pie not too\nexciting there and then we'll go ahead\nand put in all the extras i talked about\nexplode we can explode one of the values\nout so here's our explode equals explode\nlabels as languages because we want to\nknow what the different colors mean\nhere's our colors equals colors\nour auto picture and this is standard\nprint format so that's a python setup on\nthere and that's just going to put the\nvalue on the pie slice and then we're\ngoing to add shadow because it just\nlooks cooler with a shadow gives a\nlittle 3d look and we'll do a start\nangle of 140. let's go ahead and run\nthis and take a look and see what comes\nout of that\nand look how that changes the whole\nsetup so here's our labels there's our\nvalue we put on there there's our slice\nit's pushed out there's our shadow a 3d\neffect\nand then we started at 140. we could\nalso rotate this let's just do this\nangle\n90.\nand if we run it\nyou'll see the blue pie slice has moved\nup a little bit we could actually do\nactually let's just take the whole\nstarting triangle out and run it'll\ndefault to zero\nthis is what it looks like if it\ndefaulted to zero so depending on where\nyou want the highlighted slice to appear\nusually you want that to appear on the\nleft because people read left to right\nand so it draws a focus onto in this\ncase python and how great python is i'm\na little biased we're teaching a python\ntutorial so it should be understandable\nthat we're looking at python and one\nlast reference before we close you can\ngo over to the map plot library dot pi\nplot set up and if you go underneath\nthere the different functions on there\nyou can look this up on their website\nyou'll see a full list and this is why\nit's so important to go through a\ntutorial like this because this list is\njust so massive trying to figure out\nlike here's our bar plot there's a bar h\nyou can add barbs there's a box plot we\ndidn't cover\nc labels a totally different kind of for\nyour contour plot you can set up in\nthere if you go down here we have our\nfigures we used on there we showed you\nthe basics how to do the figure you'll\nsee some\ncloser references on those\nthere's a histogram down here hist\nthere's also the his 2d makes a 2d\nhistogram plot h lines all of this these\nare all the different commands that are\nunderneath of here and you can see it's\npretty extensive\nwe've covered all the basic ones so that\nyou know have a solid ground to look at\nthese different options so when you come\nto these functions some of them are\ngoing to look a little off or not off\nwill look unfamiliar but you'll still\nhave the availability to probably\nunderstand most of this and have a basic\nunderstanding of your matplot library\ncertainly there are many reasons to be\nable to go online and scrape different\nwebsites they range everything from\npulling out different links\nto pulling data off of websites as a\ndata scientist you might need to get\nsome information off a website that\ndoesn't have a direct api to pull that\ninformation and in python we have a\nwonderful tool when you talk python and\nyou talk web scraping we're talking\nbeautiful suit which is a package you\nadd into your python that you're running\nand we can come over here to the website\nwww.crummy.com\nsoftware slash beautiful soup you can\nactually read a little bit about it\ncurrently beautiful soup 4 is the\ncurrent version if you don't remember\nthe full website for it you can always\ndo what i do which is go over and do a\nsearch for beautiful soup official site\nit almost always comes up right at the\ntop and you click on there and it'll\ntake you to the crummy.com software site\nfor beautiful soup now we're going to\nuse our whatever python interface you\nwant ide i'm going to use jupiter lab\nwhich is built on jupiter notebook\nthrough anaconda so when i open up my\nanaconda navigator you'll see that i\nhave my different tools available again\nyou might be using a different editor\nand that's okay you might be in pycharm\nor something like that we don't need to\ndo this and\njupiter lab is jupiter notebook with\nadded tabs and some added features it's\nbasically in beta testing so it's got a\nfew little glitches when you're saving\nthings and moving between projects but\nfor the most part it's a great upgrade\nto the jupiter notebook and you can use\nthem together so you don't have to i\nmean it's built on jupiter notebooks\nanything you do in jupyter notebook you\ncan open up in jupiter lab and the first\nthing we need to do is we need to go\nahead in this case i'm going under my\nenvironments since it partitions the\nenvironments out and i'm going to open\nup a terminal window we have to install\nsome packages in here to work with now\nthere's a lot of choices on this i\nbecause of the simplicity we'll be using\nconda install now you can use pip\ninstall for the same thing and we're\ngoing to install our beautiful soup four\nand you have to type out the whole thing\nbeautiful soup for you can use a pip\ninstall if you're using a different\nenvironment and i am using python\nversion\n3.6 although according to beautiful soup\nthey also work on three seven all the\nway from 27 through olive 3x now\naccording to the beautiful soup website\nthe beautiful soup 4 works on anything\nyou can install on anything from python\n27 all the way through any of the python\n3 versions this just happens to be\npython 36 because i do there's a lot of\nother packages that don't work on three\nseven yet and we'll go ahead and run\nthis install on here and let it go\nthrough its environmental setup and of\ncourse with conda it goes in there and\nfinds all the dependencies pip doesn't\ndo as much as far as finding\ndependencies but you know exactly what's\non there with pip so if you're doing a\nhuge distribution you probably want to\nuse your pip install so you can track\nwhat's going on there with the\nconda i like to just let it take over\nsince this isn't a major distributed\npackage going out another quick note\nbetween pip and conda is that if you\nstart on a project in one of these\nenvironments and you're using pip in\nthere stick with pip if you're using\nconda stick with conda they track the\npackages and you can run into some\nissues where they're not tracking the\nsame packages and something gets\noverwritten so it's important to stay\nvery consistent with your install on\nyour environments and we'll also need to\ngo ahead and install our numpy\nenvironment and our pandas on here so go\nahead and do that if you haven't added\nthose packages in go ahead and install\nthose into your environment that you're\nworking in and of course pandas is just\nsimply uh install pandas and let's just\ninstall a couple more packages in this\ncase let's get our install our map plot\nlibrary because we're going to plot at\nthe end since we're going to be\ncollecting data and for this project\nthat will be all the packages we'll need\nso we can go and close out of our\ninstaller or whatever setup you have and\nwe'll go back to home and we'll just\nlaunch our jupyter lab and that will\nopen up in our browser window now if\nyou're coming from jupiter notebooks and\nfirst time in lab we can go ahead and\njust create our first notebook python3\nyou can also do it under a file launcher\nand you'll see new notebook it\nautomatically opens up and we just click\nright on there it'll pop open on the\nleft and i'll right click this and we'll\nrename this we'll rename it just\nbeautiful and it is a i\nn b file on there so that should look\nfamiliar because that's the jupyter\nnotebook file this is a new one now i\nhave mults in the past i usually hid\nthis on the other computer all my notes\nfor the lesson today but this is my\nnotes going down and we'll go ahead and\njust start going through this and see\nwhat it looks like to do a data pull\nfrom front to end and see how that works\nas a data scientist pulling that\ninformation in from the website and the\nfirst thing i want to do is i want to go\nahead and close this side window that\nway it looks get the nice full screen\nand we can also up the size a little bit\none of the wonderful things about\nworking in a browser window just do that\ncontrol plus thing the packages we\ntalked about is pandas so we imported\nour pandas if you haven't already that's\nour data frame if you haven't done our\npandas tutorial definitely worthy of the\ntime to go through there and understand\npandas because it's such a powerful tool\nthis basically turns your data into a\nspreadsheet data frame our numpy is our\nnumber array uh so it kind of works with\npandas very closely as far as\nmanipulating data in arrays matplot we\nwant to go ahead and bring that in our\nplt so that we can plot the data at the\nend and this line right here that says\nmatplot library inline is for the\njupiter notebook specifically it tells\nit to print that on this page a lot of\nthe newer versions don't actually\nrequire to have that line they'll still\nprint it on the page but you should\nstill include that if you're in the\njupiter lab setup and then we have our\nurl library.request we're going to\nimport url open for opening up the\nwebsite and then we have our bs4 that's\nyour beautiful soup for we're going to\nimport beautiful soup and then our last\none is our re that is for manipulating\nour regular expressions so when we get\nto that part of importing our data we\nhave to do a lot of reformatting so it's\nsomething we can use and the re is one\nof those tools we'll go ahead and run\nthis and just bring all that in so this\nis all imported all these packages are\nnow into our web scraping program we're\ngonna run now if we're going to dive in\nand pull data we should have a nice\nwebsite to pull from and let's go ahead\nand we'll use the\nupper timing.com results for the 2018\nmartin luther king race and if we take\nthis you can actually just take this\nwhere did we get this from well you can\ngo in here and find the website you're\ngoing to scrape from and you'll see\nright here it says you just copy that\nlink right in there that http and this\nis the website that we're looking at you\ncan see right here all the information\nthat we're looking at let's say we want\nwanted to run some statistics on this it\nsure would be nice to be able to pull it\noff of here and if they don't have a\ndirect api that means we need to pull it\nfrom their website some of these will\nhave a download although if you've ever\ndone it we have a download click and\nmaybe you're paging through a hundred\nwebsites uh in one case i was uh pulling\nall the different united states bills\nthat are passed to track who voted on\nthem for a project and you can imagine\nthat there's you know hundreds and\nhundreds of those thousands of these\ndocuments that they voted on who voted\non it goes through the senate goes back\nto the congress so i opened up a website\npull all the links off of there that\nmatch a certain criteria and we'll look\nat that in just a minute how we go\nthrough the html and then i had to\nreformat them or i could hand download\neach one one at a time which would just\nbe a nightmare so it's nice to automate\nit in this case we're going to be\npulling up this chart we want to figure\nout how to pull this chart off of this\nwebsite and so we go back into our\njupiter notebook i've got my url just\nour name for it and it's just a string\nthat's all this is nothing fancy there\nyou'll notice that on the slashes we now\nhave forward forward slash you can do a\nsingle forward and hdp is a double\nforward this is just how you have to\nswitch it to match setup in there and\nthen it's going to go ahead and use the\nhtml equals url open url and that's from\nour url library request so it's opening\na link to that website or at least\npointing to it and if we run this this\njust sets it up so this is all set up\nand then once we've done our setup let's\ngo ahead and create an object called\nsoup this will be and if you remember up\nhere here's our beautiful soup that we\nimported from the bs4 and this is the\npackage that we're working with and so\nwe're going to do our beautiful soup on\nhere and on this we need to go ahead and\nsend it our html so it knows what it's\nopening and then the second part is we\nhave to tell it how the format is coming\nin and the most common one for your html\npolls is an lxml\nsetup and so almost all of them you'll\nend up using the lxml there's a few\nother options and because this is so\ncommon in the newer versions a lot of\ntimes they just leave it out just\nbecause it's already on the default\nwe'll go ahead and leave it in here just\nto remind us that it's there we'll go\nahead and run that and on the newer\nversions\nthey actually default it to the xml\nsetup in the html we'll just leave it\nout and call it html so it's just going\nto pull from this url and when we run\nthat on here we've now created an object\nsoup that has pulled the website into it\nso soup contains the information along\nwith information on that website and\nwhat's going on so let's just go over\nwhat we did real quick before we start\ndigging into the actual soup before we\nstart scooping out stuff we imported our\ndifferent\nmodules that we're going to use with our\npackage specifically the beautiful soup\nwe did install the beautiful soup if you\nremember correctly you have to call it\nbeautiful soup 4 specifically so it\nknows what you're bringing in and this\nline right here is very key from bs4\nbecause that's how it installs the\nmodule we're importing our beautiful\nsoup and then we found our url in this\ncase we're going to go pull information\nfrom the martin luther king dream run\nand then we set our html to our url open\nurl and you can see right here we\nimported that so here's our url.request\nimport url open so we're requesting a\nconnection and once we send that\nconnection into the beautiful soup it\ncreates an object called soup and then\nthis one of course we chose soup just\nbecause it goes with beautiful soup i\nguess we could have chosen beautiful and\nnow we can start extracting information\nfrom our website because we pulled it\ndown onto our computer under soup now we\ncan start by looking at the title of the\nwebsite soup dot title and if we print\ntitle dot text you'll see this a lot in\nbeautiful suit because title contains\nall kinds of information and if we want\njust the text from that title you add\nthe dot text on the end and you can see\nright here we have our 2018 mlk dream\nrun 5k race results if you look at the\ntab that's the actual title up here 2018\nmlk dream run 5k race that's what the\ntitle is on the website and then you\nmight be curious what's in title what's\nthe whole title that it's storing up\nthere well let's go ahead and print it\nout here's print title and print\ntitle.txt and we run that you can see it\nhas the html tags title on it and then\nthe forward slash title to end it and so\nwe're really just pulling off this piece\nof the html code and then we look at the\ntext inside that particular part of the\nhtml and earlier i mentioned links what\nif you want to get all the links off\nthis page oh that would be fun uh we\ncould do soup dot and we'll do find\nunderscore all put this in bracket and\nthen quotation marks we're going to put\na a is the\nkey find and you'll start seeing a div\nand all the different options you have\nfor finding these entities in a website\nand then let's go ahead and just print\nour links and you can see here that it\nnow shows all the different links in\nhere that are marked by eggs we did a\nfind all a and then we can also because\nthis is a little bit hard to pull off\nthe h reference so we can also add in\nour find all fine tune that in this case\nthe h reference equals true we'll\nactually filter that out and then\nfinally we might do a four link in links\nand we can simply do something like this\nfor each link we want to actually find\nthe h reference because we know there's\nan h reference in it and if i run this\nyou can see it just comes through and\nprints them out one at a time some of\nthese are really useful so you might be\nlooking for something that has https in\nit and you know that's a link running to\nsomething else or you might be looking\nfor the mail to tags you know that's all\nthe mail addresses but either way you\ncan easily find all the links in your\nhtml document that you're paging through\nand of course\nany packages that have evolved over time\nyou can also do link dot get h reference\nwhich should do the same thing as our\nother format and you can see it\ncertainly does we get the same print out\nup here in this particular case we\nreally want to get the data off the page\nuh so let's go ahead and do that let's\nsee what that looks like and in data\nlet's call it all rows there we go\nequals and then we have our soup dot\nfind underscore all there's our brackets\nand then if we're looking for each row\nin a database you'll remember your html\ncode we're looking for the tag tr so we\nwant to find all tr and we can take this\nand let's go ahead and just take all our\nrows and do a print\nall rows and about this time you're\ngoing to guess that we're going to get a\nhuge amount of information just dumped\nonto our page and sure enough we do if\nyou look at this it just kind of goes on\nforever but this is an array each row is\nconsidered an array so because of that\nwe can do something simply as putting\nbrackets and just print the first let's\ndo the first five rows so from beginning\nto five and you can see here's our first\nfive rows on here i sometimes like to\njust do let's just do row zero and we\nsee that row zero is finishers finishers\n191 and just out of curiosity what's if\nthat's zero what's row one male okay so\nwe're starting to see titles going\nacross here so if we come up here and we\ndo rows we did what up to 10. let's just\ntake a look and see what 10 does again\nand just take a look at that information\nthat comes across place\nbib name gender age city state chip chip\npace gender and so on so it comes all\nthe way down here we kind of have an\nending right here and then we have one\nand then we actually it looks like we\nstart to have information so we have our\none or one 1191 max randolph that must\nbe the name male 29 and so on you start\nseeing how the information starts\ngetting displayed going down so the next\nthing we want to do with this i'll go\nback up here and just edit the space\nwe're in so it starts to make a little\nbit more sense keep it all together and\nso we want to do for each row in all\nrows we're looking at what information\nare we looking at well we have our th up\nhere that's the header our td down here\nwhich looks like the individual\ninformation and we really are looking\nfor\nthe actual data so we're looking for td\ntags in the rows and we can do that\nbecause when you remember when it stores\nthe row it also stores the tags\nunderneath that so all rows have all the\ndifferent tags in it and you can see\nright here as you print each one of\nthose out and so we look at each row we\ncan create another variable we'll call\nit row list and we'll set this equal to\nin this case row because we've already\npulled all the rows out of soup so now\nwe want to find for each row and in\nthere we want to find our td and if we\ngo ahead and just print i'm going to do\nit if you notice i changed the indent so\ni'm just going to print row list what\nthis does is the last value to go into\nrow list our last row is going to print\nnow and of course make sure you have an\nunderscore instead of a period when\nyou're typing so row.find underscore all\ntd and if we print the last row you can\nsee i have all the data coming across\nhere we have our 191 our 1216 zuma ochoa\ni hope i said that right female i\nbelieve that's age 40 and so on and then\nwe can take our row list and there's a\nlot of things we can do with the row\nlist what we'll do for let's do object\nor let's just do cell in row list and so\nwe're going to look at each cell because\nthis is if you look at this they have\ncommas separated between the different\nobjects and then we're going to go ahead\nand print cell dot text let's just take\na look and see what that looks like and\nwe can see here for each row we get 191\nthere's our 191 there's our 12 16 12 16\nour uh individual who's in the race and\nso forth all the way down for those\ndifferent settings and let's go ahead\nand create a new variable up here uh\nwe'll call this all let's just call it\ndata we'll keep it simple uh so here's\nour data and then we have our row we\ntake our row we break it up into\nindividual cells so we'll call this data\nrow we'll set this empty to an empty row\nand we're going to take our cells tab\nthis we know that each cell generates a\ntext and so what we want to do is i want\nto take my data row let's just replace\nthat let's take our data row and let's\nappend our cell dot text so i'm going to\nadd the each row is going to be a row of\nthe different text on here and then once\ni create each row i want my data which\nis going to be everything to append each\nrow and here's our data row and then if\nwe go ahead and come down here and let's\njust print data now if we were lurking\nwith large data we'd be very careful\nabout just throwing all our data on the\npage but you can see here we throw the\ndate on the page and we get finishers\n199 male 78 female 113 one and so on and\nif you look at this this is the headers\non the file we have finishers uh male\nfemales just like some general\nstatistics on the first one and then we\nhave actually uh\nan empty data set and then we have our\ndata that continues which actually the\nactual information we're looking for so\nwe have one 1191 max randolph mill 29\nwashington dc run time uh one of 78 and\nso on on here uh so we could really\nquickly get rid of that number of\ndifferent ways to do that one of them is\njust to do we're gonna set if we do data\ntwo on uh we should get rid of\neverything but we wanna keep randolph so\nmake sure randolph is in there oh we\nlost randolph let's try one on there we\ngo there's max randolph on there uh so\nwe can just simply do redo our date on\nhere and we can do data probably want to\ndo it in all rows from one on but i'm\njust going to do my data equals data one\non down here and there's reasons to\nsplit it this way in data science\nsometimes you don't want to touch the\noriginal data in case you need it in\ncase we do need the first row so we'll\nput it down here and maybe we'll just\ncall this titles titles equals data of\nzero and so we could do something here\nwhere we print we'll print up our titles\nand we'll print our data in this case\ninstead of one on let's go minus\ntwo let's look at the last two rows of\ndata so here we have our titles and uh\nfor some reason just put in finishers of\n191 as expecting a little bit more up\nthere and we have our last couple people\nand they look like the data on these\nlooks just fine on here turns out this\nis just some generic statistics up here\nso we'll get rid of titles completely\ndoesn't really do us any good but we\nknow that data comes in here and we can\nlook at our data and look at the very\nend of the data too the minus two to the\nend and we can see it pulls the data in\npretty good we don't have anything too\nfunky in here we're looking at it looks\npretty clean now you got to be a little\ncareful because at some point we might\nhave to come back here and clean up the\ndata if we get an error for running a\ndata analysis we might find out there's\nsome unusual characters or something is\nmissed in the data itself and you also\nnotice that everything is a string so\nwhen we're bringing it in we might have\nto do some conversions to test it out\nand convert them to whatever kind of\ndata format we're working with so at\nthis time we want to go ahead and bring\nin our pandas\nand let's go ahead and call this idea\nfor data frame we'll set it equal to and\nif you remember correctly we imported\npandas as pd and that's standard you'll\nsee that in most code examples where\nthey call the import pandas as pd\nand it is capital d\ncapital f for data frame and we're just\ngoing to bring in our data that's what\nwe called it on here and let's take this\nand we'll print now when you're working\nwith data frames you're usually talking\nlarge amounts of data and so you almost\nnever want to print the whole data frame\nout we're going to go ahead and do that\nanyway just so we can see what that\nlooks like and you can see in here\nbrings in our data frame coming in here\nand we just have a mess of information\nthis is our data let's go ahead and\nprint df and see what that looks like in\nthe data frame and this is nice because\nit organizes it into a very easy to read\ntable and we have they set the label 0 1\ntwo three four five six and so on and\nthen we have each row uh we have mel uh\nseventy eight none none no none going\nacross when we get all the way down here\nwe'll see max randall about number three\nand the first thing this does is this\nflags me that i brought in a bunch of\ninformation up here that we really\ndidn't want uh it's from three on that\nwe want and we can clean this up in one\nof two ways we can try to clean it up\nunder the data or we can clean it up\nunder the data frame depending on what\nit is we're trying to do and so to fix\nthis um i want to go ahead and just\nchange it up here in the actual data\npull in we don't need that information\nso i'll rerun it reload our data from\nfor on and then when i run this we see\nwe have max randolph is right at the top\nof the list like he should be and we\nhave all the data going down now with\nthe data frame remember i said we don't\nusually print the whole data frame we'll\ngo ahead and do df.head and this prints\nthe first five rows and you can see that\nwe have 13 columns here's max randall\nall the way to theo kinman and i usually\nalso print df\ntail and the reason i like to do these\nparticular two setups i'm going to\nchange it just to two rows because you\ncan do that you can put as many rows as\nyou want is this good to look at the\nfirst part and the end because those are\nusually where you have extra data\nbrought in uh something's messed up and\nyou can also see that we have 190 rows\nin here and it comes in with our zuma\nlisha and they're both on here on the\nlist so now we have a nice data frame\ncolumns and rows we can easily look at\nit we can see the setup on here and we\ncan look at the names and everything now\nat some point you might be looking at\nthese individual columns and find\ndifferent information that needs to be\nre-edited if you can you try to do it\nwith the whole column under pandas you\ncan up in the upper part of the code\nwhere you went from cell to cell or row\nto row you can look at individual cells\nmaybe find a marker in that cell that's\nsomething specific like remove all\ncolons or semicolons or something and\nthere are brackets there's a lot of\noptions in there but you'll find that\nthis one actually comes in pretty clean\non here all the way down and the next\nthing we really want to do is we want to\nlook at the headers i don't know about\nyou but doesn't make any sense to me\nwhen i have column one i don't know what\n1191 is or 1080. need name kaiser runner\ni'm guessing that's column two is names\nthird one it looks like male or female\nprobably age but i don't want to guess i\nwant this to bring in my column so i\nknow exactly what i'm looking at so how\ncan we make beautiful soup do that for\nus well let's take our column headers\nwe're going to set that equal to our\nsoup find underscore all and then we're\ngoing to look for our headers our th\nfiles and since we're in jupiter lab in\nthis case jupiter notebook i can just\ntype out column headers if it's the last\nvariable i have listed it will\nautomatically print it so it's kind of a\nshorthand and we can see right here we\nhave place i'm guessing that's bib name\ngender age city state chip time chip\npace and so on so we have all our\nheaders right there i shouldn't have to\ntype them all in and we'll go ahead and\ndo it before we'll go ahead and do a\nheader list equals our empty array and\nthen we can do for a column in column\nheaders and we can take our header list\nand just a pin and what do we want we\nwant the text from the column so we'll\njust do column.text and then if we come\ndown here and we print\nour header list let's see what that\nlooks like if we did it right we should\nget a nice list of all the different\ncolumn headings we want so we have place\nbib name and so on and then pandas just\nbecause pandas is so cool we can simply\ndo df columns equals our header from our\nheader list we simply said df column set\nto df headers and then if i print\ndf.head we'll take a look at that and\nwe'll see right here it has nicely\nplaced our values on here place bib name\ngender age and so on so very quickly\nwe've created this nice data frame we\nhave the data displayed in nice rows and\ncolumns and easy to read and then as a\ndata scientist the first thing we want\nto know is the info what is in these\ncolumns and rows and headers and you see\nright here they all come up with\nnon-null object there's a big flag so if\ni want to do anything with this these\nare all coming through as strings or an\nobject i usually mean strings in this\ncase that they're a string variable and\nwe have you can quickly read through\nthis 191 entries date columns total 14\ncolumns there's a total of 14 columns in\nthe data and it shows you all the\ndifferent names and what type of column\nthey are and it's probably good also to\nlook at the shape of the data df.shape\nwe'll go ahead and just run that you see\nit's 191 by 14 14 columns 191 entries\nthis is more like a we look at a numpy\narray 191 by 14 for the shape and\nremember this is a variable so if i put\nit on if it's a last variable or last\nvalue in the set of cells jupiter\nautomatically prints it out so if you're\nin a different ide you want to go ahead\nand use the print statement on here uh\nthen one of the things you'd want to\nalso go through we'll create a second\none df2 equals df dot drop in a now the\naxis is automatically equal to zero so a\nlot of times you'll see something like\naxes equal zero comma how equals any\naxis equals 0 is default that means\nwe're looking at going down the rows you\ncould look at the column going across\nlet's remove the how any that's just\ngoing to confuse you the axis is is\nwhether you're going down the columns or\nif you're looking at a row by row by row\nby row or you could be looking at it by\ncolumn by column by column this would\ndrop any column and it would drop off\nthe n a in any column and how\nequals and we want any i always confuse\nall in any because they both start with\na all means that all of them have to be\nnon-value where any means that any of\nthem can be there to drop it so this\nwould drop any column with a null value\nin it but we want zero you know drop any\nvalue with a null value and then because\n0 is always the default we'll just leave\nit out and then it's curious as to what\nthe shape is now did we lose anything\nwas there any null values in our df2\nthat we dropped from the df and we'll go\nahead and run that and we see 191 and\n14. so we didn't really drop anything\nbut it's always good to check there's\nother ways you can also do are there\nlet's see any n a's you can detect n a's\nin here no values infinite values that's\nanother one you got to watch out for\nwe're working with data that we're going\nto do something with here in a minute so\nyou got to be a little careful also in\nthe convergence are you going to convert\nsomething where people typed in weird\ncharacters to describe the data a\ncertain way so now we've got to this\npoint where we have all our different\ncolumns we have our different data and\nat this point maybe you're asking or\nmaybe the shareholder the company is\nasking hey can we look at the\nbased on the chip time here's our chip\ntime can we plot that versus gender how\ndoes gender versus chip time compare and\nso we can do that we can take that and\nthe first thing we look at is we say hey\nwell chip time came in as a string and\nthat's going to be an issue now there's\na number of ways you can change this one\nof them is we could go all the way back\nup here where we created the data and\nfind a way to tag it and say hey\nwhenever this cell text maybe instead of\nappending this i notice that any time\nthere's two colons in it that's probably\na time signature and let's uh convert\nall the time signatures to date time\nfilled or whatever a lot of times you\ndon't get that you don't get that option\nand that's always a question in bringing\nin data whether you convert the data\ncoming in at the beginning or do you\nwait till you have it open it up and\nthen convert it when you go to use it\nwe're going to go ahead and convert it\nafter we got it into our data frame so\nwe have our df2 here we've dropped all\nof our n a's we dropped our we have a\nshape\nin fact let's do this since there's no\ndifference between df and df2 well we'll\njust go ahead and use df2 so let's go\nahead and take our df2 and we want to\ntake those that specific field and\nconvert it into some kind of numerical\nvalue we can use and let's add another\ncolumn a lot of times this is something\nyou want to do is where you want to go\nahead and keep all the original columns\nand just add a new column in there and\nthis new column is going to be based on\nthe if remember correctly we had chip\ntime that's what we're going to look at\nokay we want chip time versus gender if\nwe go into our pandas we find out we\nhave\npandas 2 delta and this is actually time\ndelta and then we just want to take our\ndf2 and we're going to use the chip time\ncolumn so this is going to say hey let's\nlook at let's convert everything in df2\nchip time into a time delta format\nthat's the data type we're going to put\nit as let me go ahead and just run this\nand if we go in here and we do info df2\nand we'll keep our we're going to look\nat this particular column but we want to\nkeep it as a data frame so this is a\nlist of all the columns we want to look\nat we'll just do dot info on here and\nrun that and we do an info on that you\ncan see is now a\ntime delta 64 nanoseconds uh well we\nreally don't want nanoseconds we\nactually probably want to do it in\nminutes uh so let's take a look at that\nand let's take this whole thing tf2\nlet's just set the df2 we have our df2\nthis is a column we're working with here\nand we can use the as type property in\npandas and so we can set this equal to\ndf2 we'll take our same column in here\nand we'll set it as type time delta\nsecond so it's still a delta time here\nso if i run this you'll see that it\nstill comes up as where is it hopefully\nit turns it into a float so we're now at\na float 64 so it's the number of seconds\nin that delta time and then finally we\nwant to go ahead and turn that from\nseconds to say minutes and you know\nthere's 60 seconds in minutes and so now\nwe divide by 60 we still have a float we\nhave our info that shows us it's a float\nand then we can go ahead and just do a\nprint df2 and let's just keep it small\nwe don't want to look at all our data we\njust want to do the head of it and we\nrun this and you can see right here\nwhere we go to be the last one here's\nour chip time in minutes and a lot of\ntimes just to make life easy for viewing\nsince we're only looking at this\nparticular element we can do chip time\nin minutes and now we just see that oops\nwe take off we'll go ahead and take off\nour info done with that and we'll run\nthis and you can see we have our minutes\n16.8 minutes 17.51 minutes and so on\nit's a float number now keep in mind\nthis is 0.8 that's not 16 minutes and 80\nseconds that they can always throw you\nif you're going through so many numbers\nyou forget it's important to remember\nthat and we're also going to look at the\nother one we're looking at is what\ngender you want to look at gender to\nchip time in minutes and so we can see\nhere under the head we get male male\nmale and a number of different setups\nand let's switch this to tail real quick\nand just look at the end of it and here\nwe have female female male female female\nso we have two different genders and we\nhave our chip time in minutes and if you\nremember we brought in our plt if you\nhaven't used the plot library the\nmatplot library you have a drawing place\nyou're putting stuff on so we have our\nplt we're going to do a bar graph and we\njust want to simply use our df2 gender\nand df2\nchip time in minutes so that's going to\nplot the two bars and to make it pretty\nwe'll go ahead and give it the x label\ngender the y label chip time minutes and\nthat simply is remember it always plots\nx in the plots y we have our gender our\nchip time give it a nice title uh\ncomparison of average minutes run by\nmale and female and if we go ahead and\nrun this with the correct titles in here\nand everything matches uh you'll get a\nnice graph we can see here the\ncomparison of average minutes run by\nmale and female here's our chip time in\nminutes the men seem to be slackers in\nthis particular case and it's actually\nuh there's a number of studies that show\nthat women team tend to have as far as\ndoing cross-country there's a lot of\nwomen who have a longer endurance than\nmen so it's not too surprising but we\ncan see here the average chip time\naround 70 and for women over 100 minutes\nand then another really cool thing we\ncan do is we can describe the data so\ndf2.describe this again is a pandas\nfunction just like info is we're going\nto include uh np number the numpy number\nand if we run that you'll see here comes\nup and says chip time in minutes account\nit gives you the average or the mean\nstandard deviation the minimum the\nmaximum um all the different descriptive\ninformation you're going to want from\nyour data set on there and just because\nthere's all kinds of fun ways let's do a\nbox plot to display your information uh\nwe can do a box plot where the column\nequals chip time in minutes and let's go\nahead and run that keep mistaking my\nchip time in minutes you can see it puts\nout a nice box plot showing you the\ninformation we have our different values\nand floaters this is always interesting\nbecause this is a nice way of seeing\nwhere we have these uh floaters one up\nhere and there's two up above and of\ncourse here they're a nice spread on the\nbox plot and we can also modify this a\nlittle bit and we can add in by equals\ngender and then we'll give it we'll just\ngive it a blank title i don't know why\nwe're going to get a blank title we'll\njust add a y plot y label on there for\nrun time and if we run this you can see\nhere box plot grouped by gender chip\ntime in minutes and now we have our\nfemale and male two different areas and\nyou can see how they vary you have your\ntwo different your outlier up here and\nyou can also see how there's such an\noverlap between the two different values\nso if i was looking at this i'd be like\nwow you know i really could not draw a\nconclusive thing on this saying that\nwomen's run time was more in general\nbecause they overlapped too much that\nwould be one of the conclusions i'd have\nto come up with then here and then we\nget to maybe the partners come in from\nthe company and say hey we'd like to\nknow the age versus chip time in minutes\nthat'd be something worth knowing on the\nstatistics on this and the first thought\nis we can simply plot it and we can do\nthis we can actually plot the scatter\nplot chip time versus df2 of h those are\nxy coordinates but if you remember from\ndf2 when we did the info let's go way\nback up here we're looking at a data\nobject as far as our chip time on this\nin our h now we converted the chip time\nbut we also need to convert the age and\nif we do it right here we just plot it\nand it'll actually let us plot it it\nshouldn't it should give us an error but\nit does let us plot it you'll see the\nages come up a mess over here because\nthey're converting it to weird float\nnumbers and all kinds of things so what\nwe want to do is we want to take our age\nand we'll just call this ah underscore i\nso we're going to take our age and we're\ngoing to create another column for df2\nage underscore i and the i is just going\nto stand for integers our own choice of\nvalues there is a number of ways to do\nthis but we're going to do uh pandas 2\nmerrick is the best way in pandas and\nthe reason we're doing this is that\nnumeric creates a float value uh so\nright off the bat we want all our stuff\nconverted it converts it to the least\ncommon denominator so if they're all\nintegers already you'll get integers as\nyou can see from here it's doing some\nkind of conversion that converts it to a\nfloat value the other thing that numeric\ndoes is if there is a null value or they\nput in like a blank line or a dash to\nrepresent no information uh it'll\nconvert it to a\nnull uh so it goes from like a string to\na null versus just having some kind of\nmade up number that python somehow\ncreated for the graph we have below and\nthen we want to add our df2h because\nthat's what we're converting to numeric\nand then we want to coerce it and\nthere's a couple different options on\nthis like you can have it where it just\ndoesn't process it in pandas but coerce\nmeans that if it gets a weird value that\nis a null value now and since we're\ndealing with errors this is what happens\nwhen you get an error converting it we\nwant to coerce it there we go and put\nthe end bracket on there and then\nfinally we want to go and round this off\nso i'll put brackets around all the way\naround it and this rounds off everything\nin this series so we've done here is\ni've taken df2h which is a d type object\nwhich in this case is mostly strings\nwith a couple blank ones in there and\nwe're going to convert it to a numeric\nwhich will automatically go to float and\nthen we're going to take wherever\nthere's an error wherever it says hey\nthis doesn't convert and usually that's\na blank screen like i said i've worked\nwith so many databases where they\nsomeone puts down none someone types in\nspace sometimes in a dash to me none and\nyou get this really weird conversion\ncoming up this covers all of that in\npandas so it's really a nice way of just\ncoercing it and saying hey if we don't\nhave a number in there let's make it a\nnull value and then we're going to round\nit off and then finally let's go ahead\nand take our df sign it to\num df2 so df2 now has a rounded out so\nit's rounded to the integer we didn't do\nany places the age and it's going to be\nage i and then we've dropped all our\nnull values that way we're not going to\nget any errors when we try to plot a\nnull value and it also makes sure that\ndata by deleting out the rows because\nthat's what this does it automatically\ndoes axis0 which is your rows axes one\nis your column by doing this it\nautomatically removes all the rows with\nnull values so it just cleans out the\nrows and then when we go ahead and plot\nthis we see we have a nice clean data\nand we have age all the way up to 70. so\nwe have our chip time set and then our\nage going across and it makes a nice\nplot that you can easily show for\ndisplay and for the the and you can\neasily show that to your shareholders or\nwhatever group you're working on it\nmakes a really nice and quick easy\ndisplay and we're going to cover the\nscikit learn tutorial which has a lot of\nfeatures and all kinds of api in it to\nexplore data and do your data science\nwith effect is probably one of the top\ndata science packages out there so what\nis the site kit learn it's simple and\nefficient tool for data mining and data\nanalysis it's built on numpy scipy and\nmatplot library so it interfaces very\nwell with these other modules and it's\nan open source commercially usable bsd\nlicense bsd originally stood for\nberkeley software distribution license\nbut it means it's open source with very\nfew restrictions as far as what you can\ndo with it another reason to really like\nthe site kit learn setup so you don't\nhave to pay for it as a commercial\nlicense versus many other copyrighted\nplatforms out there what we can achieve\nusing the site kit learn we use class\nthe two main things are classification\nand regression models classification\nidentifying which category an object\nbelongs to for one application very\ncommonly used is spam detection so is it\na spam or is it not a spam yes no in\nbanking it might be is this a good loan\nbad loan today we'll be looking at wine\nis it going to be a good wine or a bad\nwine and regression is predicting an\nattribute associated with an object one\nexample is stock prices prediction what\nis going to be the next value if the\nstock today sold for 23 dollars and five\ncents a share what do you think it's\ngonna sell for tomorrow and the next day\nand the next day so that would be a\nregression model same thing with weather\nweather forecasting any of these are\nregression models where we're looking at\none specific prediction on one attribute\ntoday we'll be doing classification like\ni said we're gonna be looking at whether\na wine is good or bad but certainly the\nregression model which is in many cases\nmore useful because you're looking for\nan actual value is also a little harder\nto follow sometimes so classification is\na really good place to start we can also\ndo clustering and model selection\nclustering is taking an automatic\ngrouping of similar objects into sets\ncustomer segmentation is an example so\nwe have these customers like this\nthey'll probably also like this or if\nyou like this particular kind of\nfeatures on your objects maybe you like\nthese other objects so it's a referral\nis a good one especially on amazon.com\nor any of your shopping networks model\nselection comparing validating and\nchoosing parameters and models now this\nis actually a little bit deeper as far\nas a site kit learn we're looking at\ndifferent models for predicting the\nright course or the best course or\nwhat's the best solution today like i\nsaid we're looking at wines it's going\nto be how do you get the best wine out\nof this so we can compare different\nmodels and we'll look a little bit at\nthat and improve the model's accuracy\nvia different parameters and fine-tuning\nnow this is only part one so we're not\ngonna do too much tuning on the models\nwe're looking at but i'll point them out\nas we go two other features\ndimensionality reduction and\npre-processing dimensionality reduction\nis we're reducing the number of random\nvariables to consider this increases the\nmodel efficiency we won't touch that in\ntoday's tutorial but be aware if you\nhave you know thousands of columns of\ndata coming in thousands of features\nsome of those are going to be duplicated\nor some of them you can combine to form\na new column and by reducing all those\ndifferent features into a smaller amount\nyou can have a you can increase the\nefficiency of your model it can process\nfaster and in some cases you'll be less\nbiased because if you're weighing it on\nthe same feature over and over again\nit's going to be biased to that feature\nand pre-processing these are both\npre-processing but pre-processing is\nfeature extraction and normalization so\nwe're going to be transforming input\ndata such as text for use with machine\nlearning algorithms we'll be doing a\nsimple scaling in this one for our\npreprocessing and i'll point that out\nwhen we get to that and we can discuss\npre-processing at that point with that\nlet's go ahead and roll up our sleeves\nand dive in and see what we got here now\ni like to use the jupiter notebook and i\nuse it out of the anaconda navigator so\nif you install the anaconda navigator by\ndefault it will come with a jupiter\nnotebook or you can install the jupyter\nnotebook by itself this code will work\nin any of your python setups i believe\ni'm running an environment of 3.7 set up\non there i'd have to go in here in\nenvironments and look it up for the\npython setup but was one of the three\nx's and uh we go and launch this and\nthis will open it up in a web browser so\nit's kind of nice it keeps everything\nseparate and in this anaconda you can\nactually have different environments\ndifferent versions of python different\nmodules installed in each environment so\nit's a very powerful tool if you're\ndoing a lot of development and jupyter\nnotebook is just a wonderful visual\ndisplay certainly you can use i know\nspyder is another one which is installed\nwith the anaconda i actually use a\nsimple notepad plus plus when i'm doing\nsome of my python script any of your\nides will work fine jupyter notebook is\niron python because it's designed for\nthe interface but it's good to be aware\nof these different tools\nand when i launch the jupyter notebook\nit'll open up like i said a web page in\nhere and we'll go over here to new and\ncreate a new python setup like i said i\nbelieve this is python 37 but any of the\nthree this the scikit learn works with\nany of the three x's there's even two\nseven versions so it's been around a\nlong time so it's very big on the\ndevelopment side and then the guys in\nthe back guys and gals develop they went\nahead and put this together for me and\nlet's go ahead and import our different\npackages now if you've been reading some\nof our other tutorials you'll recognize\npandas as pd pandas library is pretty\nwidely used it's a data frame set up so\nit's just like columns and rows in a\nspreadsheet with a lot of different\nfeatures for looking stuff up seaborne\nsits on top of map plot libraries this\nis for a graphing we'll see that how\nquick it is to throw a graph out there\nto view in the jupiter notebook for\ndemos and showing people what's going on\nand then we're going to use the random\nforest the svc or support vector\nclassifier and also the neural network\nso we're going to look at this we're\nactually going to go through and look at\nthree different classifiers that are\nmost common some of the most common\nclassifiers and let's show how those\nwork in the scikit-learn setup and how\nthey're different and then if you're\ngoing to do your setup on here you'll\nwant to go ahead and import some metrics\nso the\nsklearn.metrics on here and we'll use\nthe confusion metrics and the\nclassification report out of that and\nthen we're going to use from the sklearn\npre-processing the standard scalar and\nlabel encoder standard scalar is\nprobably the most commonly used\npre-processing there's a lot of\ndifferent pre-processing packages in the\nsklearn and then model selection for\nsplitting our data up it's one of the\nmany ways we can split data into\ndifferent sections and the last line\nhere is our percentage map plot library\nin line some of the seaboard and map\nplot library will go ahead and display\nperfectly in line without this and some\nwon't it's good to always include this\nwhen you're in the jupiter notebook this\nis jupiter notebook so if you're in ide\nwhen you run this it will actually open\nup a new window and display the graphics\nthat way so you only need this if you're\nrunning it in a editor like this one\nwith the specifically jupiter notebook\ni'm not even familiar with other editors\nthat are like this but i'm sure they're\nout there i'm sure there's a firefox\nversion or something jupiter notebook\njust happens to be the most widely used\nout there and we can go ahead and hit\nthe run button and this now has saved\nall this underneath the packages so my\npackages are now all loaded i've run\nthem whether you run it on top we run it\nto the left and all the packages are up\nthere so we now have them all available\nto us for our project we're working on\nand i'm just gonna make a little side\nnote on that when you're playing with\nthese and you delete something out and\nadd something in even if i went back and\ndeleted this cell and just hit the\nscissors up here these are still loaded\nin this kernel so until i go under\nkernel and restart or restart and clear\nor restart and run all i'll still have\naccess to pandas\nimportant to know because i've done that\nbefore i've loaded up maybe not a module\nhere but i've loaded up my own code and\nthen changed my mind and wondering why\ndoes it keep putting out the wrong\noutput and then i realize it's still\nloaded in the kernel and you have to\nrestart the kernel just a quick side\nnote for working with a jupiter notebook\nand one of the troubleshooting things\nthat comes up and we're going to go\nahead and load up our data set we're\nusing the pandas so if you haven't yet\ngo look at our pandas tutorial a simple\nread the csv with the separation on here\nso let me go ahead and run that and\nthat's now loaded into the variable wine\nand let's take a quick look at the\nactual file i always like to look at the\nactual data i'm working with in this\ncase we have wine quality dash red i'll\njust open that up i have it in my open\noffice set up separated by semicolons\nthat's important to notice\nand we open that up you'll see we have\ngo all the way down here it looks like\n1600 lines of data minus the first one\nso 15\n1599 lines and we have a number of\nfeatures going across the last one is\nquality and right off the bat we see the\nquality is uh has different numbers in\nit five six seven it's not really i'm\nnot sure how high of a level it goes but\ni don't see anything over a seven so\nit's kind of five through seven is what\ni see here five six and seven four five\nsix and seven looking to see if there's\nany other values in there looking\nthrough the demo to begin with i didn't\nrealize the setup on this so you can see\nthere's a different quality values in\nthere alcohol sulfates ph density total\nsulfur dioxide and so on those are all\nthe features we're going to be looking\nat\nand since this is a pandas we'll just do\nwine\nhead and that prints our first five\nrolls rows of data that's of course a\npandas command and we can see that looks\nvery similar to what we're looking at\nbefore we have everything across here\nit's automatically assigned an index on\nthe left that's what pandas does if you\ndon't give it an index and for the\ncolumn names it has assigned the first\nrow so we have our first row of data\npulled off the our comma separated\nvariable file in this case semicolon\nseparated and it shows the different\nfeatures going across and we have what\none two three four five six seven eight\nnine ten eleven features 12 including\nquality but that's the one we want to\nwork on and understand and then because\nwe're in uh panda's data frame we can\nalso do wine.info and let's go ahead and\nrun that this tells us a lot about our\nvariables we're working with you'll see\nhere that there is\n1599 that's what i said from the\nspreadsheet so that looks correct\nnon-null float\nthis is very important information\nespecially the non-null so there's no\nnull values in here that can really trip\nus up in pre-processing and there's a\nnumber of ways to process non-null\nvalues one is just to delete that data\nout of there so if you have enough data\nin there you might just delete your\nnon-null values another one is to fill\nthat information in with like the\naverage or the most common values or\nother such means but we're not gonna\nhave to worry about that but we'll look\nat another way because we can also do\nwine is null and sum it up and this will\ngive us a similar it won't tell us that\nthese are float values but it will give\nus a summation of there we go let me run\nthat it'll give us a summation on here\nhow many null values in each one so if\nyou wanted to you know from here you\nwould be able to say okay this is a null\nvalue but it doesn't tell you how many\nare null values this one would clearly\ntell you that you have maybe five null\nvalues here two null values here and you\nmight just if you had only seven null\nvalues and all that different data you'd\nprobably just delete them out where if\nninety percent of the data was null\nvalues you might rethink either a\ndifferent data collection setup\nor find a different way to deal with the\nnull values we'll talk about that just a\nlittle bit in the models too because the\nmodels themselves have some built-in\nfeatures especially the forest model\nwhich we're going to look at at this\npoint we need to make a choice and to\nkeep it simple we're going to do a\nlittle pre-processing of the data and\nwe're going to create some bins and bins\nwe're going to do is 2 comma 6.5 comma\n8. what this means is that we're going\nto take those values if you remember up\nhere let me scroll back up here we had\nour quality the quality comes out\nbetween two and eight basically or one\nand eight we have five five five six you\ncan see just in the in just in the first\nfive lines of variation in quality\nwe're going to separate that into just\ntwo\nbends of quality and so we've decided to\ncreate two bins and we have bad and good\nit's going to be the labels on those two\nbins we have a spread of 6.5 and an\nexact index of 8. the exact index is\nbecause we're doing 0 to 8 on there the\n6.5\nwe can change we could actually make\nthis smaller or greater but we're only\nlooking for the really good wine we're\nnot looking for the zero one two three\nfour five\nsix we're looking for wines with seven\nor eight on them so high quality you\nknow like this is what i want to put on\nmy dinner table at night\ni might taste the good wine not the\nsemi-good wine or mediocre wine and then\nthis is a panda so pd remember stands\nfor pandas pandas cut means we're\ncutting out the wine quality and we're\nreplacing it and then we have our bins\nequals bins that's the command bins is\nthe actual command and then our variable\nbins to comma 6.58 so two different bins\nand our labels are bad and good and we\ncan also do\nlet me just do it this way wine quality\nsince that's what we're working on and\nlet's look at unique another pandas\ncommand and we'll run this and i get\nthis lovely error why did i get an error\nwell because i replaced wine quality and\ni did this cut here which changes things\non here so i literally altered one of\nthe variables is saved in the memory so\nwe'll go up here to the kernel restart\nand run all starts it from the very\nbeginning and we can see here that that\nfixes the error because i'm not cutting\nsomething that's already been cut we\nhave our wine quality unique and the\nwine quality unique is a bad or good so\nwe have two qualities objects bad is\nless than good meaning bad's going to be\nzero and good's going to be one and to\nmake that happen we need to actually\nencode it so we'll use the label quality\nequals label encoder and the label\nencoder let me just go back there since\nthis is part of sklearn that was one of\nthe things we imported was a label\nencoder you can see that right here from\nthe sklearn dot processing import\nstandard scalar which we're going to use\nin a minute and label encoder and that's\nwhat tells it to use that equals 0 and\ngood equals 1. and we'll go ahead and\nrun that and then we need to apply it to\nthe data and when we do that we take our\nwine quality that we had before and\nwe're going to set that equal to label\nquality which is our encoder and let's\nlook at this line right here we have dot\nfit transform and you'll see this in the\npre-processing these are the most common\nused is fit transform and fit transform\nbecause they're so often that you're\nalso transforming the data when you fit\nit they just combined them into one\ncommand and we're just going to take the\nwine quality feed it back into there and\nput that back in our wine quality setup\nand run that and now when we do\nthe wine\nand the head of the first five values\nand we go ahead and run this you can see\nright here underneath quality zero zero\nzero i have to go down a little further\nto look at the better wines\nlet's see if we have some that are ones\nyeah there we go there's some ones down\nhere so when we look at ten of them you\ncan see all the way down to zero or one\nthat's our quality and again we're\nlooking at high quality we're looking at\nthe seven and the eights or six point\nfive and up and uh let's go ahead and\ngrab our where was it here we go wine\nquality let's take a look at what else\nmore information about the wine quality\nitself and we can do a simple pandas\nthing value\ncounts hopefully i type that in there\ncorrectly and we can see that we only\nhave 217\nof our wines which are going to be the\nhigher quality so 217 and the rest of\nthem fall into the bad bucket and the\nzero which is uh 1382 so again we're\njust looking for the top percentage of\nthese the top what is that it's probably\nabout a little under 20 percent on there\nso we're looking for our top wines our\nseven and eights and let's use our let's\nplot this on a graph so we take a look\nat this and the sns if you remember\ncorrectly that is let me just go back to\nthe top that's our seaborn seaborn sits\non top of matplot library it has a lot\nof added features plus all the features\nof the matplot library and also makes it\nquick and easy to put out a graph we'll\ndo a simple bar graph and they actually\ncall it count plot and then we want to\njust do count plot the wine quality so\nlet's put our wine quality in there and\nlet's go ahead and run this and see what\nthat looks like and nice in line\nremember this is why we did the inline\nso make sure it appears in here and you\ncan see the blue space or the first\nspace represents low quality wine and\nour second bar is a high quality line\nand you can see that we're just looking\nat the top quality wine here most of\nwine we want to just give it away to the\nneighbors no maybe if you don't like\nyour neighbors maybe give them the good\nquality wine and i don't know what to do\nwith the bad quality wine i guess use it\nfor cooking there we go but you can see\nhere it forms a nice little graph for us\nwith the seaboard on there and you can\nsee our setup on that so now we've\nlooked at we've done some pre-processing\nwe've described our data a little bit we\nhave a picture of how much of the wine\nwhat we expect it to be high quality low\nquality checked out the fact that\nthere's none we don't have any null\nvalues to contend with or any odd values\nsome of the other things you sometimes\nlook at these is if you have like some\nvalues that are just way off the chart\nso the measurement might be off or\nmiscalibrated equipment if you're in the\nscientific field so the next step we\nwant to go ahead and do is we want to go\nahead and separate our data set or\nreformat our data set and we usually use\ncapital x and that denotes the features\nwe're working with and we usually use a\nlowercase y that denotes what uh in this\ncase quality what we're looking for and\nwe can take this and go wine that's\ngoing to be our full thing of wine\ndropping what are we dropping we're\ndropping the quality so these are all\nthe features minus quality and make sure\nwe have our axes equals one if you left\nit out it would still come out correctly\njust because of the way it processes\non the defaults and then our y if we're\ngoing to remove quality for our x that's\njust going to be one and it is just the\nquality that we're looking at for y so\nwe put that in there and we'll go ahead\nand run this so now we've separated the\nfeatures that we want to use to predict\nthe quality of the wine and the quality\nitself the next step is if you're going\nto create a data set in a model we got\nto know how good our model is so we're\ngoing to split the data train and test\nsplitting data and this is one of the\npackages we imported from sklearn and\nthe actual package was train test split\nand we're going to do x y test size 0.2\nrandom state 42. and this returns four\nvariables and most common you'll see is\ncapital x train so we're going to train\nour set with capital x test that's the\ndata we're going to keep on the side to\ntest it with y train y remember stands\nfor the quality or the answer we're\nlooking for so when we train it we're\ngoing to use x train and y train and\nthen y test to see how good our x test\ndoes and the train test split let me\njust go back up to the top that was part\nof the sklearn model selection import\ntrain test split there is a lot of ways\nto split data up this is when you're\nfirst starting you do your first model\nyou probably start with the basics on\nhere you have one test for training one\nfor test our test size is point two or\ntwenty percent and random state just\nmeans we just start with a it's like a\nrandom seed number so it's not too\nimportant back there we're randomly\nselecting which ones we're going to use\nsince this is the most common way this\nis what we're going to use today there\nis and it's not even an sk learned\npackage yet so someone's still putting\nit in there one of the new things they\ndo is they split the data into thirds\nand then they'll run the model on each\nof they combine each of those thirds\ninto two thirds for training and one for\ntesting and so you actually go through\nall the data and you come up with three\ndifferent test results from it which is\npretty cool that's a pretty cool way of\ndoing it you could actually do that with\nthis by just splitting this into thirds\nand then or you'll have a test size one\ntest set third and then split the\ntraining set also into thirds and also\ndo that and get three different data\nsets this works fine for most projects\nespecially when you're starting out it\nworks great so we have our x train our x\ntest our y train and our y test and then\nwe need to go ahead and do the scalar\nand let's talk about this because this\nis really important some models do not\nneed to have scaling going on most\nmodels do and so we create our scalar\nvariable we'll call it sc standard\nscalar\nand if you remember correctly we\nimported that here wrong with the label\nencoder the standard scalar setup\nso there's our scalar and this is going\nto convert the values instead of having\nsome values that go from zero if you\nremember up here we had some values are\n54 60 40 59 102. so our total sulfur\ndioxide would have these huge values\ncoming into our model and some models\nwould look at that and they'd become\nvery biased to sulfur dioxide it'd have\nthe hugest impact and then a value that\nhad\n.076.098 or chlorides would have very\nlittle impact because it's such a small\nnumber so we take the scalar we kind of\nlevel the playing field and depending on\nour scalar it sets it up between 0 and 1\na lot of times is what it does let's go\nahead and take a look at that and we'll\ngo ahead and start with our x train and\nour x train equals sc fit transform we\ntalked about that earlier that's an sk\nlearn setup that's going to both fit and\ntransform our x train into our x train\nvariable and if we have an x train we\nalso need to do that to our test and\nthis is important because you need to\nnote that you don't want to refit the\ndata we want to use the same fit we used\non the training is on the testing\notherwise you get different results and\nso we'll do just oops not fit\ntransform we're only going to transform\nthe test side of the data so here's our\nx test that we want to transform and\nlet's go ahead and run that and just so\nwe have an idea let's go ahead and take\nand just print out our x train oh let's\ndo\nfirst 10 variables very similar to the\nway you do the head on a data frame you\ncan see here our variables are now much\nmore uniform and they've scaled them to\nthe same scale so they're between\ncertain numbers and with the basic\nscalar you can fine tune it i just let\nit do its defaults on this and that's\nfine for what we're doing in most cases\nyou don't really need to mess with it\ntoo much it does look like it goes\nbetween like minus probably minus two to\ntwo or something like that that's just\nlooking at the train variable i'll go\nahead and cut that one out of there so\nbefore we actually build the models and\nstart discussing the sk learned models\nwe're going to use we covered a lot of\nground here most of when you're working\nwith these models you put a lot of work\ninto pre-prepping the data so we looked\nat the data notice that it's uh\nseparated loaded it up we went in there\nwe found out there's no null values\nthat's hard to say no nodal values we\nhave there's none there's none nobody i\ncan't say it\nand of course we sum it up if you had a\nlot of null values this would be really\nimportant coming in here so is there a\nnull summary we looked at pre-processing\nthe data as far as the quality and we're\nlooking at the bins so this would be\nsomething you might start playing with\nmaybe you don't want super fine wine you\ndon't want the seven and eights maybe\nyou want to split this differently so\ncertainly you can play with the bins and\nget different values and make the bins\nsmaller or lean more towards the lower\nquality so you then have like medium to\nhigh quality and we went ahead and gave\nit labels again this is all pandas we're\ndoing in here setting up with unique\nlabels and group names bad good badass\nlesson good that could be so important\nyou don't know how many times people go\nthrough these models and they have them\nreversed or something and then they go\nback they're like why is this data not\nlooking correct so it's important to\nremember what you're doing up here and\ndouble check it and we used our label\nencoder so that was um to set that up as\nquality zero one good in this case we\nhave bad good zero one and we just\ndouble check that to make sure that's\nwhat came up in the quality there and\nthen we threw it into a graph because\npeople like to see graphs i don't know\nabout you but you start looking all\nthese numbers and all this text and you\nget down here and you say oh yes you\nknow here this is how much of the wine\nwe're going to label as subpar not good\nthis is how much we're going to label as\ngood and then we got down here to\nfinally separating out our data so it's\nready to go into the models and the\nmodels take x and a y in this case x is\nall of our features minus the one we're\nlooking for and then y is the features\nwe're looking for so in this case we\ndropped quality and in the y case we\nadded quality and then because we need\nto have a training set and a test set so\nwe can see how good our models do we\nwent ahead and split the models up x\ntrain x test y train y test and that's\nusing the train test split which is part\nof the sk learn package and we did as\nfar as our testing size point two or\ntwenty percent the default is twenty\nfive percent so if you leave that out\nit'll do default setup and we did a\nrandom state equals 42. if you leave\nthat out it'll use a random state i\nbelieve it's default one i'd have to\nlook that back up and then finally we\nscaled the data this is so important to\nscale the data going back up to here if\nyou have something that's coming out as\na hundred is going to really outweigh\nsomething that's 0.071\nthat's not in all the models different\nmodels handle it differently and as we\nlook at the different models i'll talk a\nlittle bit about that we're going to\nlook at three models today three the top\nmodels used for this and see how they\ncompare and how the numbers come out\nbetween them so we're going to look at\nthree different setups oh let me change\nmy cell here to mark down there we go\nand we're going to start with the random\nforest classifier so the three sets\nwe're looking at is the random forest\nclassifier support vector classifier and\nthen a neural network now we start with\nthe random forest classifier because it\nhas the least amount of\nparts moving parts to fine tune and\nlet's go ahead and put this in here so\nwe're going to call it rfc for random\nforce classifier and if you remember we\nimported that so let me go back up here\nto the top real quick and we did an\nimport of the random fourth classifier\nfrom sk learn ensemble and then we'll\nall we also let me just point this out\nhere's our svm where we imported our\nsupport vector classifier so svm is\nsupport vector model support vector\nclassifier and then we also have our\nneural network and we're going to from\nthere the\nmulti-layered perceptron classifier kind\nof a mouthful for the p perceptron don't\nworry too much about that name it's just\nit's a neural network there's a lot of\ndifferent options on there and setups\nwhich is where they came up with the\nperceptron but so we have our three\ndifferent models we're going to go\nthrough one here and then we're going to\nweigh them here's our metrics we're\ngoing to use a confusion metrics also\nfrom the sklearn package to see how good\nour model does\nwith our split so let's go back down\nthere and take a look at that\nand we have our rfs equals random forest\nclassifier and we have n estimators\nequals 200. this is the only value you\nplay with with a random forest\nclassifier how many forests do you need\nor how many trees in the forest so how\nmany models are in here that makes it\npretty good as a startup model because\nwe're only playing with one number and\nit's pretty clear what it is and you can\nlower this number or raise it usually\nstart up with a higher number and then\nbring it down to see if it keeps the\nsame value so you have less you know the\nsmaller the\nmodel the better the fit and it's easier\nto send out to somebody else if you're\ngoing to distribute it now the random\nforest classifier\neverything i read says it's used for\nkind of a medium-sized data set so you\ncan run it in on big data you can run it\non smaller data obviously but tends to\nwork best in the mid-range and we'll go\nahead and take our rfc\nand i just copied this from the other\nside dot fit x train comma y train so\nwe're sending it our features and then\nthe quality in the y train what we want\nto predict in there and we just do a\nsimple fit now remember this is sk learn\nso everything is fit or transform\nanother one is predict which we'll do in\njust a second here let's do that now\npredict\nrfc equals and it's our rfc model\npredict and what are we predicting on\nwell we trained it with our train values\nso now we need our test our x test so\nthis has done it this is going to do\nthis is the three lines of code we need\nto create our random force variable fit\nour training data to it so we're\nprogramming it to fit in this case it's\ngot 200 different trees it's going to\nbuild and then we're going to predict on\nhere let me go ahead and just run that\nand we can actually do something like oh\nlet's do predict\nrfc just real quick we'll look at the\nfirst 20 variables of it let's go ahead\nand run that and uh in our first 20\nvariables we have three wines that make\nthe cut and the other 17 don't so the\nother 17 are bad quality and three of\nthem are good quality in our predicted\nvalues and if you remember correctly\nwe'll go ahead and take this out of here\nthis is based on our test so these are\nthe first 20 values in our test and this\nhas as you can see all the different\nfeatures listed in there and they've\nbeen skilled so when you look at these\nthey're a little bit confusing to look\nat and hard to read but we have there's\na -01 so this is 0.36 minus 01 so 0.164\nminus\n0.09 or no it's still -1 so minus 0.9\nall between 0 and 1 on here i think i\nwas confused earlier and i said 0\nbetween 2 negative 2. but between -1 and\n1 which is what it should be in the\nscale and we'll go ahead and just cut\nthat out of there run this we have our\nsetup on here so now we've run the\nprediction and we have predicted values\nwell one you could publish them but what\ndo we do with them well we want to do\nwith them is we want to see how where\nour model model performed that's the\nwhole reason for splitting it between a\ntraining and testing model and for that\nremember we imported the classification\nreport\nthat was again from the sklearn there's\nour confusion matrix and classification\nreport and the classification report\nactually sits on the confusion matrix so\nit uses that information and our\nclassification report we want to know\nhow good are y tests that's the actual\nvalues versus our predicted rfc so we'll\ngo ahead and print this report out and\nlet's take a look and we can see here we\nhave a precision out of the zero we had\nabout point 92 that were labeled as bad\nthat were actually bad and out of\nprecision for the quality wines we're\nrunning about 78 percent so you kind of\ngive us an overall 90\nand you can see our f1 score our support\nset up on there our recall you could\nalso do the confusion matrix on here\nwhich gives you a little bit more\ninformation but for this this is going\nto be good enough for right now we're\njust going to look at how good this\nmodel was because we want to compare the\nrandom fourth classifier with the other\ntwo models and you know what let's go\nahead and put in the confusion matrix\njust so you can see that on there with y\ntest and prediction rfc so in the\nconfusion matrix we can see here that we\nhad\n266 correct and seven wrong these are\nthe missed labels for bad wine and we\nhad a lot of missed labels for good wine\nso our quality labels aren't that good\nwe're good at predicting bad wine not so\ngood at predicting whether it's a good\nquality wine important to note on there\nso that is our basic random force\nclassifier and let me go ahead upsell\nand change cell type to mark down and\nrun that so we have a nice label let's\nlook at our svm classifier our support\nvector model and this should look\nfamiliar we have our clf we're going to\ncreate what's we'll call it just like we\ncall this an rfc and then we'll have our\nclf dot fit and this should be identical\nto up above x train comma y train and\njust like we did before let's go ahead\nand do the prediction and here is our\nclf predict and it's going to equal the\nclf dot predict and we want to go ahead\nand use x underscore test and right\nabout now you can realize that you can\ncreate these different models and\nactually just create a loop to go\nthrough your different models and put\nthe data in and that's how they designed\nit they designed it to have that ability\nlet's go ahead and run this and then\nlet's go ahead and do our classification\nreport and i'm just going to copy this\nright off of here\nthey say you shouldn't copy and paste\nyour code and the reason is is when you\ngo in here and edit it\nyou unbearably will miss something we\nonly have two lines so i think i'm safe\nto do it today and let's go ahead and\nrun this\nand let's take a look how the svm\nclassifier came out so up here we had a\n90\nand down here we're running about an 86\npercent so it's not doing as good now\nremember we randomly split the data so\nif i run this a bunch of times you'll\nsee some changes down here so these\nnumbers this size of data if i read it a\nhundred times it would probably be\nwithin plus or minus three or four on\nhere in fact if i ran this 100 times\nyou'd probably see these come out almost\nthe same as far as how well they do in\nclassification and then on the confusion\nmatrix let's take a look at this one\nthis had 22 by 25 this one has 35 by 12.\nso it's it's doing not quite as good\nthat shows up here 71 percent versus 78\npercent and then if we're going to do a\nsvm classifier we also want to show you\none more and before i do that kind of\ntease you a little bit here before we\njump into neural networks the big save\nall deep learning because everything\nelse must be shallow learning that's a\njoke let's just talk a little bit about\nthe svm versus the\nrandom forest classifier the svm tends\nto work better on smaller numbers it\nalso works really good on a lot of times\nyou convert things into numbers and bins\nand things like that the random forest\ntends to do better with those at least\nthat's my brief experience with it where\nif you have just a lot of raw data\ncoming in the svm is usually the fastest\nand easiest to apply model on there so\nthey each have their own benefits you'll\nfind that again that when you run these\nlike 100 times difference between these\ntwo on a data set like this is going to\njust go away there's randomness involved\ndepending on which data we took and how\nthey classify them the big one is the\nneural networks and this is what makes\nthe neural networks nice is they can do\nthey can look into huge amounts of data\nso for a project like this you probably\ndon't need a neural network on this but\nit's important to see how they work\ndifferently and how they come up\ndifferently so you can work with huge\namounts of data you can also many\nrespects they work really good with text\nanalysis especially if it's time\nsensitive more and more you have an\norder of text and they've just come out\nwith different ways of feeding that data\nin where the series and the order of the\nwords is really important same thing\nwith uh starting to predict in the stock\nmarket if you have tons of data coming\nin from different sources the neural\nnetwork can really process that in a\npowerful way to pull up things that\naren't seen before when i say lots of\ndata coming in i'm not talking about\njust the high lows that you can run an\nsvm on real easily i'm talking about the\ndata that comes in where you have maybe\nyou pulled off the twitter feeds and\nhave word counts going on and you've\npulled off the uh the different news\nfeeds that business are looking at and\nthe different releases when they release\nthe different reports so you have all\nthis different data coming in and the\nneural network does really good with\nthat pictures picture processing now is\nreally moving heavily into the neural\nnetwork if you have a pixel 2 or pixel 3\nphone put out by google it has a neural\nnetwork for doing it's kind of goofy but\nyou can put little star wars androids\ndancing around your pictures and things\nlike that that's all done with the\nneural network so it has a lot of\ndifferent uses but it's also requires a\nlot of data and is a little heavy-handed\nfor something like this and this should\nnow look familiar because we've done it\ntwice before we have our multi-layered\npersepotron classifier we'll call it an\nmlpc and it's this is what we imported\nmlpc classifier there's a lot of\nsettings in here the first one is the\nhidden layers you have to have the\nhidden layers in there we're going to do\nthree layers of 11 each so that's how\nmany nodes are in each layer as it comes\nin and that was based on the fact we\nhave 11 features coming in then i went\nahead and just did three layers probably\nget by with a lot less on this but i\ndidn't want to sit and play with it all\nafternoon again this is one of those\nthings you play with a lot because the\nmore hidden layers you have the more\nresources you're using you can also run\ninto problems with overfitting with too\nmany layers and you also have to run\nhigher iterations the max iteration we\nhave is set to 500 the default's 200\nbecause i used three layers of 11 each\nwhich is by the way kind of a default i\nuse i realized that usually you have\nabout three layers going down and the\nnumber of features going across you'll\nsee that's pretty common for the first\nclassifier when you're working in neural\nnetworks but it also means you have to\ndo higher iterations so we up the\niterations to 500 so that means it's\ngoing through the data 500 times to\nprogram those different layers and\ncarefully adjust them and we do have a\nfull tutorials you can go look up on\nneural networks and understand the\nneural network settings a lot more and\nof course we have you're looking over\nhere where we had our previous model\nwhere we fit it same thing here mlpc fit\nx train y train and then we're going to\ncreate our prediction so let's do our\npredict and mlpc and it's going to equal\nthe mlpc and we'll just take the same\nthing here predict x test let's just put\nthat down here dot predict test and if i\nrun that we've now programmed it we now\nhave our prediction here same as before\nand we'll go ahead and do the copy print\nagain always be careful with the copy\npaste now because you always run the\nchance of missing one of these variables\nso if you're doing a lot of coding you\nmight want to skip that copy and paste\nand just type it in and let's go ahead\nand run this and see what that looks\nlike and we came up with an 88\nwe're going to compare that with the 86\nfrom our tree our svm classifier and our\n90 from the random force classifier and\nkeep in mind random forest classifiers\nthey do good on mid-sized data the svm\non smaller amounts of data although to\nbe honest i don't think that's\nnecessarily the split between the two\nand these things will actually come\ntogether if you random a number of times\nand we can see down here the noun of\ngood wines mislabeled with a\nsetup on there it's on par with our\nrandom forest so we had 22.25 shouldn't\nbe a surprise it's identical it just\ndidn't do as good with the bad wines\nlabeling what's a bad one and what's not\nlet's see yeah because they had 266 and\n7. we had down here 260 and 13. so\nmislabeled a couple of the bad wines as\ngood wines so we've explored three of\nthese basic classifiers these are\nprobably the three most widely used\nright now i might even throw in the\nrandom tree\nif we open up their website we go under\nsupervised learning there's a linear\nmodel we didn't do that almost most of\ndata usually just start with a linear\nmodel because it's going to process the\nquickest i mean use the least amount of\nresources but you can see they have\nlinear quadratic they have kernel ridge\nthere's our support vector stochastic\ngradient nearest neighbors nearest\nneighbors is another common one that's\nused a lot very similar to the svm\ngaussian process cross decomposition\nnaive bayes this is more of an\nintellectual one that i don't see used a\nlot but it's like the basis of a lot of\nother things decision tree there's\nanother one that's used a lot ensemble\nmethods not as much multi-class and\nmulti-label algorithms feature selection\nneural networks that's the other one we\nuse down here and of course the forest\nso you can see there's a in sk learn\nthere are so many different options and\nthey just developed them over the years\nwe covered three of the most commonly\nused ones in here and went over a little\nbit over why they're different neural\nnetwork just because it's fun to work in\ndeep learning and not in shallow\nlearning as i told you that doesn't mean\nthat the svm is actually shallow it does\na lot of it covers a lot of things and\nsame thing with the decision for the\nrandom forest classifier and we notice\nthat there's a number of other different\nclassifier options in there these are\njust the three most common ones and i'd\nprobably throw the nearest neighbor in\nthere and the decision tree which is\nusually part of the decision for us\ndepending on what the back end you're\nusing and since as human beings if i was\nin the shareholders office i wouldn't\nwant to leave them with a confusion\nmatrix they need that information for\nmaking decisions but we want to give\nthem just one particular score and so i\nwould go ahead and we have our sklearn\nmetrics we're going to import the\naccuracy score and i'm just going to do\nthis on the\nrandom forest since that was our best\nmodel and we have our cm accuracy score\nand i forgot to print it remember in\njupiter notebook we can just do the last\nvariable we leave out there will print\nand so our cm accurate score we get is\n90 percent and that matches up here we\nshould already see that up here in\nprecision so you can either quote that\nbut a lot of times people like to see it\nhighlighted at the very end this is our\nprecision on this model and then the\nfinal stage is we would like to use this\nfor future so let's go ahead and take\nour wine if you remember correctly we'll\ndo one head of 10. we'll run that\nremember our original data set we've\ngone through so many steps now we're\ngoing to go back to the original data\nand we can see here we have our top 10\nour top 10 on the list only two of them\nmake it as having high enough quality\nwine for us to be interested in them and\nthen let's go ahead and create some data\nhere we'll call it x new equals and this\nis important this data has to be we just\nkind of randomly selected some data\nlooks an awful lot like some of the\nother numbers on here which is what it\nshould look like and so we have our x\nnew equals\n7.3.58 and so on and then it is so\nimportant this is where people forget\nthis step x new\nequals sc remember sc that was our\nstandard scalar variable we created if\nwe go right back up here before we did\nanything else we created an sc we fit it\nand we transformed it and then we need\nto do what transform the data we're\ngoing to feed in so we're going to go\nback down here and we're going to\ntransform our x new and then we were\ngoing to go ahead and use the\nwhere are we at here we go our random\nforest and if you remember all it is is\nour rfc predict model right there let's\ngo ahead and just grab that down here\nand so our y\nnew equals here's our rfc predict and we\ndo our x new in and then it's kind of\nnice to know what it actually puts out\nso according to this it should print out\nwhat our prediction is for this wine and\noh it's a bad wine okay so we didn't\npick out a good wine for our ex new and\nthat should be expected most of wine if\nyou remember correctly only a small\npercentage of the wine matter quality\nrequirements so we can look at this and\nsay oh we'll have to try another wine\nout which is fine by me because i like\nto try out new wines and i certainly\nhave a collection of old wine bottles\nand very few of them match but you can\nsee here we've gone through the whole\nprocess just a quick re rehash we had\nour imports we touched a lot on the sk\nlearn our random forest our svm and our\nmlp classifier so we had our support\nvector classifier we had our random\nforests and we have our neural network\nthree of the top used classifiers in the\nsk learn system and we also have our\nconfusion metric matrix and our\nclassification report which we used our\nstandard scalar for scaling it and our\nlabel encoder and of course we needed to\ngo ahead and split our data up in our\nimplot line train and we explored the\ndata in here for null values we set up\nour quality into bins\nwe took a look at the data and what we\nactually have and put a nice little plot\nto show our quality what we're looking\nat and then we went through our three\ndifferent models and it's always\ninteresting because you spend so much\ntime getting to these models and then\nyou kind of go through the models and\nplay with them until you get the best\ntraining on there without becoming\nbiased that's always a challenge is to\nnot over train your data to the point\nwhere you're training it to fit the test\nvalue and finally we went ahead and\nactually used it and applied it to a new\nwine which unfortunately didn't make the\ncut it's going to be the one that we\ndrink a glass out of and save the rest\nfrom cooking\nof course that's according to the random\nforest on there because we use the best\nmodel that it came up with welcome to\ntensorflow 2.0 tutorial\nwhat's in it for you we're going to\ncover today deep learning frameworks\nwhat is tensorflow features of\ntensorflow tensorflow applications how\ntensorflow works\ntensorflow 1.0 versus 2.0 tensorflow 2.0\narchitecture and then we'll go over a\ntensorflow demo where we roll up our\nsleeves and dive right into the code\nso let's start with deep learning\nframeworks\nto start with this chart doesn't even do\nthe filled\njustice because it's just exploded these\nare just some of the major frameworks\nout there there's a cross which happens\nto sit on tensorflow so they're very\nintegrated there's tensorflow\npie torches out there cafe piano uh dl4j\nand chainer these are just a few of the\ndeep learning frameworks we're talking\nabout neural networks if you're just\nstarting out never seen a neural network\nyou can go into python in the scikit and\ndo the neural network in there which is\nprobably the most simplest version i\nknow but the most robust version out\nthere the most top of the ladder as far\nas the technology right now is\ntensorflow and that of course is\nchanging from day to day and some of\nthese\nare\nbetter for different purposes\nso let's dive into tensorflow let's see\nwhat is tensorflow what is tensorflow\ntensorflow is a popular open source\nlibrary released in 2015 by google brain\nteam for building machine learning and\ndeep learning models\nit is based on python programming\nlanguage and performs numerical\ncomputations using data flow graphs to\nbuild models so let's take a look at\nsome of the features of tensorflow it\nworks efficiently with multi-dimensional\narrays\nif you've ever played with any of the\nsimpler packages of neural networks\nyou're going to find that you have to\npretty much flatten them and make sure\nyour your stuff is set in a flat model\ntensorflow works really good so we're\ntalking pictures here where you have\nx and y coordinates where the picture is\nand then each pixel has three or four\ndifferent channels that's a very\ncomplicated array very multi-dimensional\narray it provides scalability of\ncomputation across machines and large\ndata sets\nthis is so new right now\nand you might think that's a minor thing\nbut when\npython is operating on one computer and\nit has a float value\nand it truncates it differently on each\ncomputer you don't get the same results\nand so your training model might work on\none machine and then another it doesn't\nthis is one of the things that\ntensorflow\naddresses and does a very good job on\nit supports fast debugging and model\nbuilding\nthis is why i love tensorflow\ni can go in there and i can build a\nmodel with different layers each layer\nmight have different properties\nthey have like the convolutional neural\nnetwork which you can then sit on top of\na regular neural network with reverse\npropagation there's a lot of tools in\nhere and a lot of options and each layer\nthat it goes through can utilize those\ndifferent options and stack differently\nand it has a large community and\nprovides tensorboard to visualize the\nmodel tensorboard is pretty uh recent\nbut it's a really nice tool to have so\nyou when you're working with other\npeople or showing your\nclients or the\nshareholders in the company you can give\nthem a nice visual model so they know\nwhat's going on what are they paying for\nand let's take a glance at some of the\ndifferent uses or applications for\ntensorflow when we talk about tensorflow\napplications\nclearly this is data analytics we're\ngetting into the data science i like to\nuse data science as probably a better\nterm this is the programming side\nand it's really the sky is a limit um we\ncan look at face detection language\ntranslation fraud detection video\ndetection\nthere are so many different things out\nthere that tensorflow can be used for\nwhen you think of neural networks\nbecause tensorflow is a neural network\nthink of complicated chaotic data this\nis very different than if you have a set\nnumbers like you're looking at the stock\nmarket you can use this on the stock\nmarket but if you're doing something\nwhere the numbers are very clear\nand not so chaotic as you have in a\npicture then you're talking more about\nlinear regression models\nand different regression models when\nyou're looking at that when you're\ntalking about these really complicated\ndata patterns\nthen you're talking neural networks in\ntensorflow and if we're going to talk\nabout tensorflow we should talk about\nwhat tensors are after all that is what\ntensor that's what this is named after\nso we talk about tensors in tensorflow\ntensorflow is derived from its core\ncomponent known as a tensor a tensor is\na vector or a matrix of n dimensions\nthat represent all types of data and you\ncan see here we have the scalar which is\njust a single\nnumber you have your vector which is two\nnumbers\nmight be a number in a direction\nyou have a simple matrix and then we get\ninto the tensor i mentioned how a\npicture is a very complicated tensor\nbecause it has your x y coordinates and\nthen each one of those pixels has three\nto four channels for your different\ncolors\nand so each image coming in would be its\nown tensor\nand\nin tensorflow tensors are defined by a\nunit of dimensionality called as rank\nand you can see here we have our\nscalar which is a single number that has\na rank of zero because it has no real\ndimensions to it other than it's just a\nsingle point\nand then you have your vector which\nwould be a single list of numbers\nso it's a rank one\nmatrix would have rank two and then as\nyou can see right here as we get into\nthe full tensor it has a rank three\nand so\nthe next step is to understand how a\ntensorflow works and if you haven't\nlooked at\nthe basics of a neural network in\nreverse propagation that is the basics\nof tensorflow and then it goes through a\nlot of different options and properties\nthat you can build into your different\ntensors\nso a tensorflow performs computations\nwith the help of data flow graphs it has\nnodes that represent the operations in\nyour model and if you\nlook at this you should see a\nneural network going on here we have our\ninputs bc and d\nand you might have x equals b plus c y\nequals d minus four\na equals x times y and then you have an\noutput\nand so\neven though this isn't a neural network\nhere it's just a simple set of\ncomputations going across\nyou can see how the more complicated it\ngets the more you can actually one of\nthe tensors is a neural network with\nreverse propagation\nbut it's not limited to that there's so\nmuch more you can do with it and this\nhere is just a basic uh flow of\ncomputations of the data going across\nand you can see we can plug in the\nnumbers uh b equals four c equals three\nd equals six\nand you get x equals four plus three\nso x equals seven y equals six minus\nfour so y equals two and finally a\nequals seven times two or a equals\nfourteen like i said this is a very\nsimplified version of how tensorflow\nworks each one of these layers can get\nvery complicated\nbut tensorflow does such a nice job that\nyou can spin different setups up very\neasily and test them out so you can test\nout these different models to see how\nthey work now tensorflow has gone\nthrough two major stages\nwe had the original tensorflow release\nof 1.0 and then they came out with the\n2.0 version and the 2.0 addressed so\nmany things out there that the 1.0\nreally need it so we start talking about\ntensorflow 1.0 versus 2.0\ni guess you would need to know this for\na legacy programming job if you're\npulling apart somebody else's code the\nfirst thing is that tensorflow 2.0\nsupports eager execution by default it\nallows you to build your models and run\nthem instantly and you can see here from\ntensorflow 1 to tensorflow 2\nwe have\nalmost double the code to do the same\nthing so if i want to do with tf.session\nor tensorflow session as a session the\nsession run you have your variables your\nsession run you have your tables\ninitializer and then you do your model\nfit\nx train y train and then your validation\ndata your x value y value and your epics\nand your batch size all that goes into\nthe fit\nand you can see here where that was all\njust compressed to make it run easier\nyou can just create a model and do a fit\non it and you only have like that last\nset of code on there so it's automatic\nthat's what they mean by the eager so if\nyou see the first part you're like what\nthe heck is all the session thing going\non that's tensorflow 1.0 and then when\nyou get into 2.0 it's just nice and\nclean\nif you remember from the beginning i\nsaid cross\non our list up there\nand cross is the high level api in\ntensorflow 2.0\ncross is the official high level api of\ntensorflow 2.0 it has incorporated cross\nas tf.caras cross provides a number of\nmodel building apis such as sequential\nfunctional and subclassing so you can\nchoose the right level of abstraction\nfor your project and\nwe'll hopefully touch base a little bit\nmore on this sequential being the most\ncommon uh form that is your your\nlayers are going from one side to the\nother so everything's going in a\nsequential order\nfunctional\nis where you can split the layer so you\nmight have your input coming in one side\nit splits into two completely mod\ndifferent models and then they come back\ntogether\nand one of them might be doing\nclassification the other one might be\ndoing just linear regression kind of\nstuff or a neural basic\nreverse propagation neural network and\nthen those all come together into\nanother layer which is your\nneural network reverse propagation setup\nsubclassing\nis the most complicated as you're\nbuilding your own models and you can\nsubclass your own models into cross so\nvery powerful tools here this is all the\nstuff that's been coming out currently\nin the tensorflow cross setup a third\nbig change we're going to look at is it\nin tensorflow 1.0 uh in order to use tf\nlayers as variables you would have to\nwrite tf variable block so you'd have to\npre-define that\nin tensorflow 2 you just add your layers\nin under the sequential and it\nautomatically defines them as long as\nthey're flat layers\nof course this changes a little bit as\nthe more complicated\ntensor you have coming in but all of\nit's very easy to do and that's what 2.0\ndoes a really good job of and here we\nhave\na little bit more on the scope of this\nand you can see how tensorflow 1 asks\nyou to do\nthese different layers and values if you\nlook at the scope and the default name\nyou start looking at all the different\ncode in there to create the variable\nscope that's not even necessary in\ntensorf 2.0 so you'd have to do one\nbefore you do do what you see the code\nin 2.0 in 2.0 you just create your model\nit's a sequential model then you can add\nall your layers in you don't have to\npre-create the\num variable scope so if you ever see the\nvariable scope you know that came from\nan older version and then we have the\nlast two which is our api cleanup and\nthe autograph\nin the api cleanup tensorflow 1 you\ncould build models using tf gans tf app\ntf contrib tf flags etc in tensorflow 2\na lot of apis have been removed and this\nis just they just cleaned them up\nbecause people weren't using them and\nthey've simplified them and that's your\ntf app your tf flags your tf logging are\nall gone\nso there's those are three legacy\nfeatures that are not in 2.0\nand then we have our tf function and\nautograph feature\nin the old version uh tensorflow 1 0 the\npython functions were limited and could\nnot be compiled or exported re-imported\nso you were continually having to redo\nyour code you couldn't very easily just\nput a pointer to it and say hey let's\nreuse this\nin tensorflow 2 you can write a python\nfunction using the tf function to mark\nit for the jit compilation for the\npython jit so that tensorflow runs it as\na single graph autograph feature of tf\nfunction helps to write graph code using\nnatural python syntax\nnow we just threw in a new word in you\ngraph a graph is not a picture of a\nperson\nyou'll hear graph x and some other\nthings\ngraph is what are all those lines that\nare connecting different objects so if\nyou remember from before where we had\nthe different layers going through\nsequentially each one of those white\nlined arrows would be a graph x that's\nwhere that computation is taken care of\nand that's what they're talking about\nand so if you had your own special code\nor python way that you're sending that\ninformation forward you can now put your\nown function in there instead of using\nwhatever function they're using\nin neural networks this would be your\nactivation function although it could be\nalmost anything out there depending on\nwhat you're doing next let's go for\nhierarchy and architecture and then\nwe'll cover three basic tools in\ntensorflow before we roll up our sleeves\nand dive into the example so let's just\ntake a quick look at tensorflow toolkits\nin their hierarchy at the high level we\nhave our object oriented api so this is\nwhat you're working with you have your\ntf cross you have your estimators\nthis sits on top of your tf layers tf\nlosses tf metrics so you have your\nreusable libraries for model building\nthis is really where tensorflow shines\nis between the cross\nrunning your estimators and then being\nable to swap in different layers you can\nyour losses your metrics all of that is\nso built into tensorflow makes it really\neasy to use and then you can get down to\nyour low level tf api\nyou have extensive control over this you\ncan put your own formulas in there your\nown procedures or models in there\nyou could have it split we talked about\nthat earlier so with the 2.0 you can now\nhave it split one direction we do a\nlinear regression model and then go to\nthe other where it does a\nneural network and maybe each neural\nnetwork has a different activation set\non it and then it comes together into\nanother layer which is another neural\nnetwork so you can build these really\ncomplicated models and at the low level\nyou can put in your own apis you can\nmove that stuff around and most recently\nwe have the tf code can run on multiple\nplatforms\nand so you have your cpu\nwhich is\nbasically like on the computer i'm\nrunning on i have\neight cores and 16 dedicated threads i\nhear they now have one out there that\nhas over 100 cores\nso you have your cpu running and then\nyou have your gpu which is your graphics\ncard\nand most recently they also include the\ntpu setup which is specifically for\ntensorflow models\nneural network kind of setup\nso now you can export the tf code and it\ncan run on all kinds of different\nplatforms for the most\ndiverse setup out there and moving on\nfrom the hierarchy to the architecture\nin the tensorflow 2.0 architecture\nwe have\nyou can see on the left this is usually\nwhere you start out with and 80 of your\ntime in data science is spent\npre-processing data making sure it's\nloaded correctly and everything looks\nright\nso the first level in tensorflow is\ngoing to be your read and pre-processed\ndata your tf data feature columns\nthis is going to feed into your tf cross\nor your pre-made estimators\nand kind of you have your tensorflow hub\nthat sits on top of there so you can see\nwhat's going on uh once you have all\nthat set up you have your distribution\nstrategy where are you gonna run it\nyou're gonna be running it on just your\nregular cpu are you gonna be running it\nwith the gpu added in\nlike i have a pretty high-end graphics\ncard so it actually grabs that gpu\nprocessor and uses it or do you have a\nspecialized tpu setup in there that you\npaid extra money for\nit could be if you're\nin later on when you're distributing the\npackage you might need to run this on\nsome really high processors because\nyou're processing at a server level for\nuh let's say net you might be processing\nthis at a\ndistribute you're distributing it not\nthe distribution strategy but you're\ndistributing it into a server where that\nserver might be analyzing thousands and\nthousands of purchases done\nevery minute\nand so you need that higher speed to\ngive them a\nto give them a recommendation or a\nsuggestion so they can buy more stuff\noff your website or maybe you're looking\nfor uh data fraud analysis working with\nthe banks you want to be able to run\nthis at a high speed so that when you\nhave hundreds of people sending their\ntransactions in it says hey this doesn't\nlook right someone's scamming this\nperson and probably has their credit\ncard so when we're talking about all\nthose fun things we're talking about\nsaved model this is we were talking\nabout that earlier where it used to be\nwhen you did one of these models\nit wouldn't truncate the float numbers\nthe same and so a model going from one\nyou build the model on your\nmachine in the office and then you need\nto distribute it and so we have our\ntensorflow serving cloud on premium\nthat's what i was talking about if\nyou're like a banking or something like\nthat\nnow they have tensorflow lite so you can\nactually run a tensorflow on an android\nor an ios or raspberry pi a little\nbreakout board there in fact they just\ncame out with a new one that has a\nbuilt-in this is a little mini tpu with\nthe camera on it so it can pre-process a\nvideo so you can load your tensorflow\nmodel onto that\ntalking about an affordable way to beta\ntest a new product you have the\ntensorflow js which is for browser and\nnode server so you can get that out on\nthe browser for some simple computations\nthat don't require a lot of heavy\nlifting but you want to distribute to a\nlot of endpoints and now they also have\nother language bindings so you can now\ncreate your tensorflow backend save it\nand have it accessed from c java go\nc sharp rust r or from whatever package\nyou're working on so we kind of have an\noverview of the architecture and what's\ngoing on behind the scenes and in this\ncase what's going on as far as\ndistributing it let's go ahead and take\na look at\nthree specific pieces of tensorflow\nand those are going to be constants\nvariables and sessions\nso very basic things you need to know\nand understand when you're working with\nthe tensorflow\nsetup so constants in tensorflow in\ntensorflow constants are created using\nthe function constant in other words\nthey're going to stay static the whole\ntime whatever you're working with\nthe syntax for constant\nvalue d type 9 shape equals none name\nconstant verify shape equals false\nthat's kind of the syntax you're looking\nat and we'll explore this with our hands\non a little more in depth\nand you can see here we do z equals t f\ndot constant 5.2 name equals x\nd type is a float that means that we're\nnever going to change that 5.2 it's\ngoing to be a constant value and then we\nhave our variables in tensorflow\nvariables in tensorflow are in memory\nbuffers that store tensors\nand so we can declare a two by three\ntensor populated by ones you could also\ndo constants this way by the way so you\ncan create a an array of ones for your\nconstants i'm not sure why you'd do that\nbut you know you might need that for\nsome reason\nin here we have v equals tf.variables\nand then in tensorflow you have tf.ones\nand you have the shape which is 2 3\nwhich is then going to create a nice 2\nby 3\narray that's filled with ones and then\nof course you can go in there and\nthey're variables so you can change them\nit's a tensor so you have full control\nover that and then you of course have\nsessions in tensorflow a session in\ntensorflow is used to run a\ncomputational graph to evaluate the\nnodes\nand remember when we're talking a graph\nor graph x we're talking about all that\ninformation then goes through all those\narrows and whatever computations they\nhave that take it to the next node and\nyou can see down here where we have\nimport tensorflow as tf if we do x\nequals a tf.constant of 10\nwe do y equals a tf constant of 2.0 or\n20.0 and then you can do z equals\ntf.variable\nand it's a tf dot add x comma y\nand then once you have that set up in\nthere you go ahead and knit your tf\nglobal variables initializer\nwith tf session as session you can do a\nsession run init\nand then you print the session run y\nand so when you run this you're going to\nend up with of course the 10 plus 20 is\n30. and we'll be looking at this a lot\nmore closely as we actually roll up our\nsleeves and put some code together\nso let's go ahead and take a look at\nthat and for my coding today i'm going\nto go ahead and go through anaconda and\nthen i'll use specifically the jupiter\nnotebook on there and of course this\ncode is going to work uh whatever\nplatform you choose whether you're in a\nnotebook\nthe jupiter lab which is just a jupiter\nnotebook but with tabs for larger\nprojects we're going to stick with\njupiter notebook\npycharm whatever it is you're going to\nuse in here you have your spyder and\nyour qt console for different\nprogramming environments the thing to\nnote\nis kind of hard to see but i have my\nmain\npi 3 6.\nright now when i was writing this\ntensorflow works in python version 3 6.\nif you have python version 3 7 or 3 8\nyou're probably going to get some errors\nin there might be that they've already\nupdated it and i don't know it now you\nhave an older version\nbut you want to make sure you're in\npython version 3.6 in your environment\nand of course in anaconda i can easily\nset that environment up make sure you go\nahead and and pip in your tensor flow or\nif you're in anaconda you can do a conda\ninstall tensorflow to make sure it's in\nyour package\nso let's just go ahead and dive in and\nbring that up\nthis will open up a nice browser window\ni just love the fact i can zoom in and\nzoom out depending on what i'm working\non making it really easy to just\ndemo for the right size go under new and\nlet's go ahead and create a new python\nand once we're in our new python window\nthis is going to leave it untitled\nlet's go ahead and import import\ntensorflow as tf\nat this point we'll go ahead and just\nrun it real quick\nno errors yay no errors\ni\ni do that whenever i do my imports\nbecause i unbearably will have opened up\na new environment and forgotten to\ninstall tensorflow into that environment\nuh or something along those lines so\nit's always good to double check\nuh and if we're gonna double check that\nwe also it's also good to know uh what\nversion we're working with and we can do\nthat simply by\nusing the version command in tensorflow\nwhich you should know is is probably\nintuitively the tf\ndot underscore underscore version\nunderscore underscore\nand\nyou know it always confuses me because\nsometimes you do tf.version for one\nthing you do tf dot underscore version\nunderscore for another thing this is a\ndouble underscore in tensorflow for\npulling your version out\nand it's good to know what you're\nworking with we're going to be working\nin tensorflow version 2.1.0 and i did\ntell you the the um we were going to dig\na little deeper into our constants and\nyou can do an array of constants and\nwe'll just create this nice array\na equals tf.constant\nand we're just going to put the ray\nright in there 4361.\nuh we can run this and now that is what\na is equal to and if we want to just\ndouble check that uh remember we're in\njupiter notebook where you can just put\nthe letter a\nand it knows that that's going to be\nprint\notherwise you'd round you surround it in\nprint and you can see it's a tf tensor\nit has the shape the type and the and\nthe array on here it's a two by two\narray and just like we can create a\nconstant we can go and create a variable\nand this is also going to be a two by\ntwo array and if we go ahead and print\nthe v out we'll run that\nand sure enough there's our tf variable\nin here\nthen we can also let's just go back up\nhere and add this in here\ni could create another tensor and we'll\nmake it a constant this time\nand we're going to put that in over here\nwe'll have b tf constant\nand if we go and print out v and b\nwe're going to run that\nand this is an interesting thing that\nalways that happens in here you'll see\nright here when i print them both out\nwhat happens it only prints the last one\nunless you use print commands so\nimportant to remember that in jupyter\nnotebooks we can easily fix that by go\nahead and print and surround v with\nbrackets and now we can see with the two\ndifferent variables we have\nwe have the three one five two which is\na variable and this is just a flat\nconstant so it comes up as a tf tensor\nshape two kind of two and that's\ninteresting to note\nthat this label is a tf.tensor and this\nis a tf variable\nso that's how it's looking in the back\nend when you're talking about the\ndifference between a variable and a\nconstant\nthe other thing i want you to notice is\nthat in variable we capitalize the v and\nwith the constant we have a lowercase c\nlittle things like that can lose you\nwhen you're programming and you're\ntrying to find out hey why doesn't this\nwork\nso those are a couple little things to\nnote in here and just like any other\narray in math\nwe can do like a concatenate or\nconcatenate to the different values here\nand you can see we can take a b\nconcatenated you just do a tf.concat\nvalues and there's our a b axes on one\nhopefully you're familiar with axes and\nhow that works when you're dealing with\nmatrixes and if we go ahead and print\nthis out\nyou'll see right here we end up with a\ntensor so let's put it in as a constant\nnot as a variable\nand you have your array four three seven\neight and six one four five it's\nconcatenated the two together and again\ni wanna highlight a couple things on\nthis our axis equals one this means\nwe're doing the columns\nso if you had a longer array like right\nnow we have an array that is like you\nknow has a shape one whatever it is two\ncomma two\naxes\nzero\nis going to be your first one and axes\none is going to be your second one and\nit translates as columns and rows\nif we had a shape let me just put the\nword shape here\num\nso you know what i'm talking about it's\nvery clear and this is i'll tell you\nwhat i spent a lot of time\nlooking at these shapes and trying to\nfigure out which direction i'm going in\nand whether to flip it or whatever\nso you can get lost in which way your\nmatrix is going which is column which is\nrows are you dealing with the third axes\nor the second axes\naxes one you know zero one two that's\ngoing to be our columns and if you can\ndo columns then we also can do rows and\nthat is simply just changing the\nconcatenate\nwe'll just grab this one here and copy\nit we'll do the whole thing over\nctrl copy\nctrl v and changes from axis one\nto axis zero and if we run that\nyou'll see that now we concatenate by\nrow as opposed to column\nand you have four three six one seven\neight four seven so it just brings it\nright down and turns it into rows versus\ncolumns you can see the difference there\nyour output\nthis really you want to look at the\noutput sometimes just to make sure your\neyes are looking at it correctly and\nit's in the format i find visually\nlooking at it is almost more important\nthan\nunderstanding\nwhat's going on because conceptually\nyour mind just just too many dimensions\nsometimes\nthe second thing i want you to notice is\nthis says a numpy array so tensorflow is\nutilizing numpy as part of their format\nas far as python is concerned\nand so you can treat you can treat this\noutput like a numpy array because it is\njust that it's going to be a numpy array\nanother thing that comes up uh more than\nyou would think is filling uh one of\nthese with zeros or ones and so you can\nsee here we just create a tensor\ntf.zeros\nand we give it a shape we tell it what\nkind of data type it is in this case\nwe're doing an integer\nand then if we\nprint out our tensor again we're in\njupiter so i can just type out tensor\nand i run this you can see i have a nice\narray of the shape three comma four of\nzeros one of the things i want to\nhighlight here is integer 32 if i go to\nthe\ntensorflow data types i want you to\nnotice how\nwe have float 16 float 32 float 64\ncomplex if we scroll down you'll see the\ninteger down here 32 the reason for this\nis that we want to control how many bits\nare used in the precision\nthis is for exporting it to another\nplatform\nuh so what would happen is i might run\nit on this computer where python goes\ndoes a float to indefinite however long\nit wants to\nand then we can take it but we want to\nactually say hey we don't want that high\nprecision we want to be able to run this\non any computer and so we need to\ncontrol whether it's a tf float 16 in\nthis case we did an integer 32\nwe could also do this as a float\nso if i run this as a float 32\nthat means this has a 32-bit precision\nyou'll see zero point whatever and then\nto go with zeros\nwe have ones if we're going from the\nopposite side and so we can easily just\ncreate a tensorflow with ones and you\nmight ask yourself why would i want\nzeros and ones and your first thought\nmight be to initiate a new tensor\nusually we initiate a lot of this stuff\nwith random numbers because it does a\nbetter job solving it if you start with\na uniform\nset of ones or zeros you're dealing with\na lot of bias so be very careful about\nstarting a neural network\nfor one of your rows or something like\nthat with ones and zeros\non the other hand\ni use this for masking you can do a lot\nof work with masking you can also have\nit might be that\none tensor row is masked\nyou know zero is is false one is true or\nwhatever you want to do it um\nand so in that case you do want to use\nthe zeros and ones and there are cases\nwhere you do want to initialize it with\nall zeros or all ones and then swap in\ndifferent numbers as\nthe tensor learns so it's another form\nof control\nbut in general\nyou see zeros and ones you usually are\ntalking about a mask over another array\nand just like in numpy you can also\ndo reshapes so if we take our remember\nthis is shaped three comma four maybe we\nwanna swap that to four comma three\nand if we print this out\nyou will see let me just go and do that\nctrl v\nlet me run that\nand you'll see that the the order of\nthese is now switched instead of four\nacross now we have three across and four\ndown\nand just for fun let's go back up here\nwhere we did the ones\nand i'm going to change the ones to\ntf.random\nuniform\nand we'll go ahead and just take off\nwell we'll go and leave that we'll go\nand run this\nand you'll see now we have 0.0441\nand this way you can actually see how\nthe reshape looks a lot different\n0.041.15.71 and then instead of having\nthis one it rolls down here to the 0.14\nand this is what i was talking about\nsometimes you fill a lot of times you\nfill these with random numbers and so\nthis is the random.uniform is one of the\nways to do that now i just talked a\nlittle bit about this float 32 and all\nthese data types\none of the things that comes up of\ncourse is\nrecasting your data\nso if we have a d type float 32 we might\nwant to convert these to integers\nbecause of the project we're working on\ni know one of the projects i've worked\non\nended up wanting to do a lot of round\noff so that it would take a dollar\namount or a float value and then have to\nrent it off to a dollar amount so we\nonly wanted two decimal points um in\nwhich case you have a lot of different\noptions you can multiply by 100 and then\nround it off or whatever you want to do\nthere's a lot of or then converted to an\ninteger was one way to round it off\nkind of\na cheap and dirty trick\nuh so we can take this and we can take\nthis same\ntensor and we'll go ahead and create a\num as an integer and so we're going to\ntake this tensor we're going to tf.cast\nit\nand if we print\ntensor\nand then we're going to go ahead and\nprint\nour\ntensor\nlet me just do a quick copy and paste\nand when i'm actually programming i\nusually type out a lot of my stuff just\nto double check it\nin doing a demo\ncopy and paste works fine but sometimes\nbe aware that copy and paste can copy\nthe wrong code over\npersonal choice depends on what i'm\nworking on\nand you can see here we took a float 32\n4.6 4.2 and so on and it just converts\nit right down to a integer value\nthat's our integer 32 set up and\nremember we talked about\na little bit about reshape\nas far as flipping it and i just did\nfour comma three on the reshape up here\nand we talked about axes zero axis one\nuh one of the things that is important\nto be able to do is to take one of these\nvariables we'll just take this last one\ntensor as integer\nand i want to go ahead and transpose it\nand so i can do\nwe'll do a\nequals tf.transpose\nand we'll do our tensor integer in there\nand then if i print the a out and we run\nthis\nyou'll see that's the same array but\nwe've flipped it so that our columns and\nrows are flipped this is\nthe same as reshaping uh so when you\ntranspose you're just doing a reshape\nwhat's nice about this is if you look at\nthe numbers the columns\nwhen we went up here and we did the\nreshape they kind of rolled down to the\nnext row so you're not maintaining the\nstructure of your matrix so when we do a\nreshape up here they're similar but\nthey're not quite the same and you can\nactually go in here and there's settings\nin the reshape that would allow you to\nturn it into a transform\nuh so we come down here it's all done\nfor you and so there are so many times\nyou have to transpose\nyour digits that this is important to\nknow that you can just do that you can\nflip your rows and columns rather\nquickly here and just like numpy you can\nalso do multiple your different math\nfunctions we'll look at multiplication\nand so we're going to take matrix\nmultiplication of tensors\nwe'll go ahead and create a\nas a constant 5839\nand we'll put in a vector v 4 comma 2.\nand we could have done this where they\nmatched where this was a 2 by 2 array\nbut instead\nwe're going to do just a 2 by 1 array\nand the code for that is your tf.mat\nmole\nso matrix multiplier and we have a times\nv and if we go ahead and run this up\nlet's\nmake sure we print out our av on there\nand if we go ahead and run this\nyou'll see that we end up with 36 by 30.\nand if it's been a while since you've\nseen the matrix math\nthis is\n5 times 4 plus 8 times 2\num three times four plus nine times two\nand that's where we get the 36 and 30.\nnow i know we're covering a lot really\nquickly as far as the basic\nfunctionality\nso the matrix or your matrix multiplier\nis a very commonly used back-end tool as\nfar as computing\ndifferent models or linear regression\nstuff like that\none of the things\nis to note is that just like in\nnumpy you have all of your different\nmath so we have our tf math\nand if we go in here we have\nfunctions we have our cosines absolute\nangle all of that's in here so all of\nthese\nare available for you to use in the\ntensorflow model\nand if we go back to our example and\nlet's go ahead and pull\noh let's do some multiplication that's\nalways good we'll stick with our\nav\nour\nconstant a and our vector v\nand we'll go ahead and do some bit wise\nmultiplication and we'll create an av\nwhich is a times b let's go and print\nthat out\nand you can see coming across here\nwe have the 4 2 and the 5 8 3 9 and it\nproduces 20 32 6 18.\nand that's pretty straight forward if\nyou look at you have 4 times\n5 is 20 4 times 8 is\n32 that's where those numbers come from\nnow we can also quickly create an\nidentity matrix\nwhich is basically\nyour main values on the diagonal being\nones and zeros across the other side\nlet's go ahead and take a look and see\nwhat that\nlooks like and we can do let's do this\nah\nso we're going to get the shape this is\na simple way very similar to your numpy\nyou can do a dot shape and it's going to\nreturn a tuple in this case our rows and\ncolumns and so we can do a quick print\nwe'll do rows\nand we'll do columns\nand if we run this\nyou can see we have three rows\ntwo columns\nand then if we go ahead and create an\nidentity matrix\nthe script for that\ngot a wrong button there the script for\nthat looks like this\nwhere we have the number of rows equals\nrows the number of columns equals\ncolumns and d type is a 32 and then if\nwe go ahead and just print out our\nidentity\nyou can see we have a nice identity\ncolumn with our ones going across here\nnow clearly we're not going to go\nthrough every math module\navailable but we do want to start\nlooking at this as a prediction model\nand seeing how it functions\nso we're going to move on to a more of a\ndirect setup we can actually see the\nfull tensorflow in use for that let's go\nback and create a\nnew setup\nand we'll go in here new python 3 module\nthere we go\nbring this out so it takes up the whole\nwindow because i like to do that\nhopefully you made it through that first\npart and you have a basic understanding\nof tensorflow as far as being a series\nof numpy arrays you've got your math\nequations and different things that go\ninto them\nwe're going to start building a full\nsetup as far as the numpy so you can see\nhow\nkara sits on top of it and the different\naspects of how it works\nthe first thing we want to do is we're\ngoing to go ahead and do a lot of\nimports\ndate times warning scipy scipy is your\num math so the back end scientific math\nwarnings because\nwhenever we do a lot of this you have\nolder versions newer versions\nand so sometimes when you get warnings\nyou want to go ahead and just suppress\nthem we'll talk about that if it comes\nup on this particular setup and of\ncourse date time\npandas again is your data frame think\nrows and columns we import it as pd\nnumpy is your numbers array\nwhich of course tensorflow is integrated\nheavily with\nseaborne for our graphics and the\nseaborn as sns is going to be set on top\nof our map plot library which we import\nas mpl and then of course we're going to\nimport our matplot library pi plot as\nplt and right off the bat we're going to\nset some graphic colors um patch force\nedge color equals true\nthe style we're going to use the 538\nstyle you can look this all up there's\nwhen you get into matplot library into\nseaborn there are so many options in\nhere it's just kind of nice to make it\nlook pretty when we start the um\nwhen we start up that way we don't have\nto think about it later on\nuh and then we're going to take we have\nour uh mplrc we're going to put a patch\nadd color dim gray line width again this\nis all part of our graphics here in our\nsetup uh we'll go ahead and do an\ninteractive shell node interactivity\nequals last expression\nhere we are pd for pandas options\ndisplay max columns so we don't want to\ndisplay more than 50.\nand then our matplot library is going to\nbe inline this is a jupiter notebook\nthing the matplot library in line then\nwarnings we're going to filter our\nwarnings and we're just going to ignore\nwarnings that way when they come up we\ndon't have to worry about them\nnot really what you want to do when\nyou're working on a major project you\nwant to make sure you know those\nwarnings and then\nfilter them out and ignore them later on\nand if we run this it's just going to be\nloading all that into the background\nso that's a little back end kind of\nstuff then we want to go ahead and do is\nwe want to go ahead and import\nour specific packages\nthat we're going to be working with\nwhich is under keras now remember cross\nkind of sits on tensorflow so when we're\nimporting cross and the sequential model\nwe are in effect importing\ntensorflow underneath of it\nwe just brought in the math probably\nshould have put that up above\nand then we have our cross models we're\ngoing to import sequential now if you\nremember from our\nslide there was three different options\nlet me just flip back over there so we\ncan have a quick uh recall on that and\nso in cross uh we have sequential\nfunctional and subclassing so remember\nthose three different setups in here we\ntalked about earlier and if you remember\nfrom here we have a sequential where\nit's going\none tensor flow layer at a time you go\nkind of look at think of it as going\nfrom left to right or top to bottom or\nwhatever direction it's going in but it\ngoes in one direction all the time where\nfunctional can have a very complicated\ngraph of directions you can have the\ndata split into two separate\ntensors and then it comes back together\ninto another tensor\nall those kinds of things and then\nsubclassing is really the really\ncomplicated one where now you're adding\nyour own subclasses into the tensor to\ndo external computations right in the\nmiddle of like a huge flow of data\nbut we're going to stick with sequential\nit's not a big jump to go from\nsequential to functional but we're\nrunning a sequential tensorflow and\nthat's what this first import is here we\nwant to bring in our sequential and then\nwe have our layers and let's talk a\nlittle bit about these layers this is\nwhere cross and tensorflow\nreally are happening this is what makes\nthem so nice to work with is all these\nlayers are pre-built\nso from cross we have layers import\ndense\nfrom cross layers import lstm\nwhen we talk about these layers\ncross has so many built-in layers you\ncan do your own layers\nthe dense layer is your standard neural\nnetwork\nby default it uses relu for its\nactivation\nand then the lstm is a long short term\nmemory layer since we're going to be\nlooking probably at sequential data\nwe want to go ahead and do the lstm and\nif we go into um cross and we look at\ntheir layers this is across website you\ncan see as we scroll down for the cross\nlayers that are built in\nwe can get down here and we can look at\nlet's see here we have our layer\nactivation our base layers\nactivation layer weight layer waste\nthere's a lot of stuff in here we have\nthe relu which is the basic activation\nthat was listed up here for layer\nactivations you can change those and\nhere we have our core layers\nand are dense layers you have an input\nlayer a dense layer\nand then we've added a more customized\none with the long term short term memory\nlayer and of course you can even do your\nown custom layers in cross there's a\nwhole functionality in there if you're\ndoing your own thing what's really nice\nabout this is it's all built in even the\nconvolutional layers this is for\nprocessing graphics there's a lot of\ncool things in here you can do\nthis is why cross is so popular it's\nopen source and you have all these tools\nright at your fingertips so from cross\nwe're just going to import a couple\nlayers the dense layer\nand the long short term memory layer\nand then of course from\nsk learn our scikit\nwe want to go ahead and do our min max\nscalar standard scalar for pre editing\nour\ndata and then metrics just so we can\ntake a look at the errors and compute\nthose let me go ahead and run this and\nthat just loads it up we're not\nexpecting anything from the output and\nour file coming in\nis going to be air quality.csv\nand let's go ahead and take a quick look\nat that this is in openoffice it's just\na standard you know like you can do\nexcel whatever you're using for your\nspreadsheet and you can see here we have\na number of columns uh number of rows it\nactually goes down to like 8 000.\nthe first thing we want to notice is\nthat the first row\nis kind of just a random number put in\ngoing down\nprobably not something we're going to\nwork with\nthe second row\nis bandung\ni'm guessing that's a reference for the\nprofile\nif we scroll to the bottom which i'm not\ngoing to do because it takes forever to\nget back up\nthey're all the same\nthe same thing with the status the\nstatus is the same\nwe have a date so we have a sequential\norder here\nhere is the jam which i'm going to guess\nis the time stamp on there so we have a\ndate and time\nwe have our o3 co no2 reading so2 no co2\nvoc\nand then some other numbers here pm1 pm\n2.5 pm 4 pm 10\n10\nwithout actually\nlooking through the data i mean some of\nthis i can guess is like temperature\nhumidity i'm not sure what the pms are\nbut we have a whole slew of data here so\nwe're looking at air quality as far as\nan area in a region and what's going on\nwith our date time stamps on there and\nso code wise we're going to read this\ninto a pandas data frame so our data\nframe df is a nice abbreviation commonly\nused for data frames equals pd.read csv\nand then our the path to it just happens\nto be on my d drive uh separated by\nspaces and so if we go ahead and run\nthis\nwe'll print out the head of our data and\nagain this looks very similar to what we\nwere just looking at\nbeing in jupiter i can take this and go\nthe other way\nmake it real small so you can see all\nthe columns going across and we get a\nfull view of it\nor we can bring it back up in size\nthat's pretty small on there overshot\nbut you can see it's the same data we\nwere just looking at we're looking at\nthe number we're looking at the profile\nwhich is the bandung the\ndate we have a timestamp\nour 03 count co and so forth on here\nand this is just your basic\npandas printing out the top five rows we\ncould easily have done\nthree rows\nfive rows ten whatever you want to put\nin there by default that's five for\npandas now i talk about this all the\ntime so i know i've already said it at\nleast once or twice during this video\nmost of our work is in pre-formatting\ndata what are we looking at how do we\nbring it together\nso we want to go ahead and start with\nour\ndate time it's come in in two columns\nwe have our date here and we have our\ntime\nand we want to go ahead and combine that\nand then we have this is just a simple\nscript in there that says combine date\ntime that's our formula we're building\nour we're going to submit our\npandas data frame\nand the tab name\nwhen we go ahead and do this\nthat's all of our information that we\nwant to go ahead and create\nand then goes for i in range df\nshape 0.\nso we're going to go through\nthe whole setup and we're going to list\ntab append df location i\nand here is our\ndate going in there and then return the\nnumpy array list tab d types date time\n64. that's all we're doing we're just\nswitching this to a date time stamp and\nif we go ahead and do df date time\nequals combined date time\nand then i always like to\nprint we'll do df head\njust so we can see what that looks like\nand so when we come out of this\nwe now have our setup on here and of\ncourse it's edited on to the far right\nhere's our date time\nyou can see the format's changed\nso there's our we've added in the date\ntime column and we've brought the date\nover and we've taken this format here\nand it's an actual variable with a 0 0 0\non here well that doesn't look good so\nwe need to also include the time part of\nthis we want to convert it into hourly\ndata\nso let's go ahead and do that\nto do that to finish combining our date\ntime let's go ahead and create a\nlittle\nscript here to combine the time in there\nsame thing we just did we're just\ncreating a numpy array returning a numpy\narray and cr forcing this into a date\ntime format and we can actually spend\nhours just going through uh these\nconversions how do you\npull it from the pandas data frame how\ndo you set it up um so i'm kind of\nskipping through it a little fast\nbecause i want to stay focused on\ntensorflow and cross\nkeep in mind this is like 80 of your\ncoding when you're doing a lot of this\nstuff is going to be reformatting these\nthings resetting them back up\nso that it looks right on here and you\nknow just takes time to get through all\nthat but that is usually what the\ncompanies are paying you for that's what\nthe big\nbucks are for\nand we want to go ahead and a couple\nthings going on here is we're going to\ngo ahead and do our date time we're\ngoing to reorganize some of our setup in\nhere convert into hourly data we just\nput a pause in there\nnow remember we can select from df are\ndifferent columns we're going to be\nworking with and you're going to see\nthat we actually dropped\na couple of the columns those ones i\nshowed you earlier they're just\nrepetitive data so there's nothing in\nthere that exciting\nand then we want to go ahead and we'll\ncreate a second\ndata frame here let me just get rid of\nthe df head\nand df2 is we're going to group by date\ntime and we're looking at the mean value\nand then we'll print that out so you can\nsee we're talking about\nwe have now reorganized this so we put\nin date time 03 co\nso now this is in the same order\nas it was before\nand you'll see the date time now has our\nzero zero same date 1 2 3 and so on so\nlet's group the data together\nso there's a lot more manageable and in\nthe format we want and in the right\nsequential order\nand if we go back to\nthere we go our air quality\nyou can see right here we're looking at\num\nthese columns going across we really\ndon't need since we're going to create\nour own\ndate time column we can get rid of those\nthese are the different columns of\ninformation we want and that should\nreflect right here in the columns we\npicked coming across so this is all the\nsame columns on there that's all we've\ndone is reformatted our data\ngrouped it together by date and then you\ncan see the different data coming out\nset up on there and then as a data\nscientist\nfirst thing i want to do is get a\ndescription what am i looking at uh and\nso we can go ahead and do the df2\ndescribe and this gives us our you know\ndescribe gives us our basic uh data\nanalytics information we might be\nlooking for like what is the mean\nstandard deviation\nuh minimum amount maximum amount we have\nour first quarter second quarter and\nthird quarter\num\nnumbers also in there uh so you can get\na quick look at a glance describing the\ndata or descriptive analysis\nand even though we have our quantile\ninformation in here we're going to dig a\nlittle deeper into that\nwe're going to calculate the quantile\nfor each variable uh we're going to look\nat a number of things for each variable\nand we'll see right here q1 we can\nsimply do the quantile 0.25 percent\nwhich should match\nour 25 percent up here and we'll be\nlooking at the min the max\nand we're just going to do this is\nbasically we're breaking this down\nfor each uh different\nvariable in there\none of the things that's kind of fun to\ndo\nwe're going to look at that in just a\nsecond let me get put the next piece of\ncode in here um clean out some of our um\nwe're going to drop a couple thing our\nlast rows and first row because those\nhave\nusually have a lot of null values in the\nfirst row is just our titles so that's\nimportant it's important to drop those\nrows in here and so this right here as\nwe look at our different quantiles\nagain it's it's the same you know we're\nstill looking at the 25\nquantile here\nwe're going to do a little bit more with\nthis\nso now that we've cleared off our first\nand last rows\nwe're going to go ahead and go through\nall of our columns and this way we can\nlook at each\ncolumn individually and so we'll\njust create a q1 q3 min max min iqr max\niqr\nand calculate the quantile of i of df2\nwe're basically doing\nthe math that they did up here but we're\nsplitting it apart that's all this is\nand this happens a lot because you might\nwant to look at individual if this was\nmy own project i would probably spend\ndays and days going through\nwhat these different values mean\none of the biggest\ndata science uh\nthings we can look at that's important\nis uh use your use your common sense\nyou know if you're looking at this data\nand it doesn't make sense and you go\nback in there and you're like wait a\nminute what the heck did i just do at\nthat point you probably should go back\nand double check what you have going on\nnow\nwe're looking at this and you can see\nright here here's our attribute for our\no3 so we've broken it down\nwe have our q1 5.88 q3 10.37 if we go\nback up here here's our 5.8 we've\nrounded it off\n10.37 is in there\nso we've basically done the same math\njust split it up we have our minimum and\nour max iqr and that's computed let's\nsee where is it here we go uh q1 minus\n1.5 times iqr and the iqr is your q3\nminus q1 so that's the difference\nbetween our two different quarters this\nis all\ndata science\nas far as the hard math\nwe're really not we're actually trying\nto focus on cross and tensorflow you\nstill got to go through all this stuff i\ntold you 80 percent of your programming\nis going through and understanding what\nthe heck\nhappened here\nwhat's going on what does this data mean\nand so when we're looking in that we're\ngoing to go ahead and say hey\nwe've computed these numbers and the\nreason we've computed these numbers is\nif you take the minimum value and it's\nless than your minimum iqr\nuh that means something's going wrong\nthere and they usually in this case is\ngoing to show us an outlier so we want\nto go ahead and find the minimum value\nif it's less than the min minimum iqr\nit's an outlier and if the max value is\ngreater than the\nmax iqr we have an outlier and that's\nall this is doing low outliers found\nminimum value high outliers found\nreally important actually outliers are\nalmost everything in data sometimes\nsometimes you do this project just to\nfind the outliers because you want to\nknow\ncrime detection what are we looking for\nwe're looking for the outliers what\ndoesn't fit a normal business deal and\nthen we'll go ahead and throw in um just\nthrew in a lot of code oh my goodness uh\nso we have if your max is greater than\niqr print outlier is found what we want\nto do is we want to start cleaning up\nthese outliers and so we want to convert\nwe'll do create a convert nand\nx max iqr equals max\nunderscore iqr min iqr equals mini qr so\nthis is just saying this is the data\nwe're going to send that's all that is\nin python and if x is greater than the\nmax iqr and x is less than the min iqr x\nequals uh null we're going to set it to\nnull why because we want to clear these\noutliers out of the data now again if\nyou're doing fraud detection you would\ndo the opposite you would be cleaning\neverything else that's not in that\nseries so that you can look at just the\noutlier and then we're going to convert\nthe nand hum again we have x\nmax iqr is 100 percent min iqr is min\niqr\nif x is greater than max iqr and x is\nless than min iqr again we're going to\nreturn a null value otherwise it's going\nto remain the same value x x equals x\nand you can see as we go through the\ncode if i equals\nour hqm\nthen we go ahead and do that's the\nthat's a column specific to humidity\nthat's your hum column\nuh then we're going to go ahead and\nconvert do the\nrun a map on there and convert the non\ne2m\nuh you can see here it's this is just\ncleanup uh we run we found out that\nhumidity probably has some weird values\nin it\nwe have our outliers\nthat's all this is\nand so when we go ahead and finish this\nand we take a look at our outliers\nand we run this code here\nwe have a low outlier 2.04 we have a\nhigh outlier\n99.06\noutliers have been interpolated\nthat means we've given them a new value\nchances are these days when you're\nlooking at something like\nthese sensors coming in\nthey probably have a failed sensor in\nthere something went wrong\nthat's the kind of thing that you really\ndon't want to do your data analysis on\nuh so that's what we're doing is we're\npulling that out and then uh converting\nit over and setting it up uh method\nlinear\nso we interpolate left linear as it's\ngoing to fill that data in based on a\nlinear regression model of similar data\nsame thing with this up here with the\ndf2y interpolate that's what we're doing\nagain this is all data prep we're not\nactually talking about tensorflow we're\njust trying to get all our data\nset up correctly so that when we run it\nit's not going to cause problems or have\na huge bias\nso we've dealt with outliers\nspecifically in\nhumidity and again this is one of these\nthings where when we start running\nwe run through this you can see down\nhere that we have our\noutliers found\nhigh low outliers\nmigrated them in\nwe also know there's other issues going\non with this data\nhow do we know that\nsome of it's just looking at the data\nplaying with it until you start\nunderstanding what's going on let's take\nthe temp value and we're going to go\nahead and use a logarithmic function on\nthe temp value\nand\nit's interesting because it's like how\ndo you how do you heck do you even know\nto use logarithmic on the temp value\nthat's domain specific\nwe're talking about being an expert in\nair care i'm not an expert in air care\num you know it's not\nwhat i go look at i don't look at air\ncare data in fact this is probably the\nfirst air care data set up i've looked\nat but the experts come in there and\nthey come to you and say hey in data\nscience this is a exponentially variable\nvariable on here so we need to go ahead\nand do\ntransform it\nand use a logarithmic scale on that\nso at that point that would be coming\nfrom your\ndata here we go data science programmer\noverview does a lot of stuff connecting\nthe database and connecting in with the\nexperts\ndata analytics a lot of times you're\ntalking about somebody who is a data\nanalysis might be all the way usually a\nphd level\ndata science programming level\ninterfaces database manager that's going\nto be the person who's your admin\nworking on it\nso when we're looking at this we're\nlooking at something they've sent to me\nand they said hey\ndomain air care\nthis needs to be this is a skew because\nthe data just goes up exponentially and\naffects everything else and we'll go\nahead and take that data let me just go\nahead and run this\njust for another quick look at it\nwe have our\nuh we'll do a distribution df\nwe'll create another data frame from the\ntemp values and then from a data set\nfrom the\nlog temp so we can put them side by side\nand we'll just go ahead and do a quick\nhistogram and this is kind of nice plot\nof figure figure size here's our plt\nfrom matplot library\nand then we'll just do a distribution\nunderscore df there's our data frames\nthis is nice because it just integrates\nthe histogram right into pandas love\npandas\nand this is the chart you would send\nback to your data analysis and say hey\nis this what you wanted this is how the\ndata is converting on here as a data\nscientist scientist the first thing i\nnote is we've gone from a 10\n20 30 scales a 2.5 3.0 3.5 scale\nand the data itself has kind of been\nadjusted a little bit based on some kind\nof a skew on there so let's jump into\nwe're getting a little closer to\nactually doing our\ncross on here\nwe'll go ahead and split our data up\nand this of course is any good data\nscientists\nyou want to have a training set and a\ntest set\nand we'll go ahead and do the train size\nwe're going to use 0.75 percent of the\ndata make sure it's an integer we don't\nwant to take a slice as a float value\ngive you a nice error\nand we'll have our train size of 75\npercent and the test size is going to be\nof course the train size minus the\nlength of the data set and then we can\nsimply do train comma test\nhere's our data set\nwhich is going to be the train size the\ntest size uh and then if we go and print\nthis let me just go ahead and run this\nwe can see how these values\nsplit it's a nice split of 1298 and then\n433 points of value\nthey're going to be for our\nsetup on here and if you remember we're\nspecifically looking at the data set\nwhere did we create that data set from\num that was from up here that's what we\ncalled the\nlogarithmic\nvalue of the temp\nthat's where the data set came from so\nwe're looking at just that column with\nthis train size and the test with the\ntrain and test data set here and let's\ngo ahead and do\nconvert an array of values into a data\nset matrix we're going to create a\nlittle\nsetup in here we'll create our data set\nour data set's going to come in we're\ngoing to do a look back of one so we're\ngoing to look back one piece of data\ngoing backward\nand we have our data x and our data y\nfor i and range length of data set look\nback -1\nthis is creating let me just go ahead\nand run this actually the best way to do\nthis\nis to go ahead and create this data\nand take a look at the shape of it let\nme go ahead and just put that code in\nhere\nso we're going to do a look back one\nhere's our train x our train y\nand it's going to be adding the data on\nthere and then when we come up here\nand we take a look at the shape\nthere we go\nand we run this piece of code here\nwe look at the shape on this and we have\na new slightly different change on here\nbut we have a shape of x 1296 comma 1\nshape of y train y test x text y\nand so what we're looking at is that\nthe x comes in\nand we're only having a single value out\nwe want to predict what the next one is\nthat's what this little piece of code is\nhere for what are we looking for well we\nwant to look back one that's the um what\nwe're going to train the data with is\nyesterday's data yesterday says hey the\nhumidity was at\n97\nwhat should today's humidity be at if\nit's 97 yesterday is it going to go up\nor is it going to go down today if 97\ndoes it go up to 100 what's going on\nthere uh and so our we're looking\nforward to the next piece of data which\nsays hey tomorrow's is going to you know\ntoday's humidity is this this is what\ntomorrow's humidity is going to be\nthat's all that is all that is is\nstacking our data so that\nour y is basically\nx plus 1 or x could be y minus 1.\nand then a couple things to note is our\nx data\nwe're only dealing with the one column\nbut you need to have it in a shape that\nhas it by the columns so you have the\ntwo different numbers and since we're\ndoing just a single point of data\nwe have and you'll see with the train y\nwe don't need to have the extra shape on\nhere\nnow this is going to run into a problem\nand the reason is is that we have what\nthey call a time step\nand the time step is that long-term\nshort-term memory layer\nuh so we're going to add another reshape\non here let me just go down here and put\nit into the next cell\nand so we want to reshape the input\narray in the form of sample time step\nfeatures\nwe're only looking at one feature\nand i mean this is one of those things\nwhen you're playing with this you're\nlike why am i getting an error in the\nnumpy array why is this giving me\nsomething weird going on\nso we're going to do is we're going to\nadd one more\nlevel on here instead of being 1299.1 we\nwant to go one more\nand when they put the code together in\nthe back you can see we kept the same\nshape the 1299\nwe added the one dimension and then we\nhave our train x shape one\nand this could have depends again on how\nfar back in the long short term memory\nyou want to go\nthat is what that piece of code is for\nand that reshape is and you can see the\nnew shape is now 1\n12 99 1 1\nversus the 1299 one and then the other\npart of the shape 432 1 1\nagain this is our tr our x in and of\ncourse our test x and then our y is just\na single column because we're just doing\none output that we're looking for\nso now we've done our eighty percent um\nyou know that's all the the\nwriting all the code reformatting our\ndata\num\nbringing it in now we want to go ahead\nand do the fun part which is we're going\nto go ahead and create and fit\nthe lstm neural network\nand if we're going to do that the first\nthing we need is we're going to need to\ngo ahead and create a model and we'll do\nthis sequential model\nand if you remember sequential means it\njust goes in order that means we have if\nyou have two layers the layers go from\nlayer one to layer two or layer zero to\nlayer one\nthis is different than functional\nfunctional allows you to split the data\nand run two completely separate models\nand then bring them back together\nwe're doing just sequential on here and\nthen we decided to do the long short\nterm memory uh and we have our input\nshape which it comes in again this is\nwhat all this switching was we could\nhave easily made this one two three or\nfour going back as far as the end number\non there we just stuck to going back one\nand it's always a good idea when you get\nto this point where the heck is this\nmodel coming from\nwhat kind of models do we have available\nand there's let me go and put the next\nmodel in there\nbecause we're going to do two models and\nthe next model is going to go ahead and\nwe're going to do dents so we have model\nequal sequential\nand then we're going to add the lstm\nmodel and then we're going to add a\ndense model and if you remember from the\nvery top of our code\nwhere we did the imports oops there we\ngo our cross\nthis is it right here here's our\nimporting a dense model and here's our\nimporting an lstm now just about every\ntensorflow model uses dents\nyour dense model is your basic\nforward propagation reverse propagation\nerror\nor it does reverse propagation to\nprogram the model\nso any of your neural networks you've\nalready looked at that\nluxon says here's the error and sends\nthe error backwards that's what this is\nthe long short-term memory is a little\ndifferent the real question that we want\nto look at right now is where do you\nfind these models what kind of models do\nyou have available and so for that let's\ngo to the cross website\nwhich is the cross dot io\nif you go under api\nlayers and i always have to do a search\njust search for cross api layers it'll\nopen up and you can see we have\nyour base layers right here class\ntrainable weights all kinds of stuff\nlike there your activation\nso a lot of your layers you can switch\nhow it activates\nrelu which is like your smaller arrays\nor if you're doing convolutional neural\nnetworks the convolution usually uses a\nrelu\nyour sigmoid all the way up to soft mac\nsoft plus all these different choices as\nfar as how those\nare set up and what we want to do is we\nwant to go ahead and if you scroll down\nhere you'll see your core layers and\nhere is your dense layer\nso you have an input object your dense\nlayer your activation layer embedding\nlayer\nthis is your your kind of your one set\nup on there that's most common\nuh convolutional neural networks or\nconvolutional layers these are like for\ndoing image categorizing so trying to\nfind objects in a picture that kind of\nthing\nwe have pooling layers so as you have\nthe layers come together\nusually you bring them down into\na single layer although you can still do\nlike global max pulling 3d and there is\njust i mean this list just goes on and\non there's all kinds of different things\nhidden in here as far as what you can do\nand it changes you know you go in here\nand you just have to do a search for\nwhat you're looking for\nand figure out what's going to work best\nfor you\nas far as which project you're working\non\nlong short-term memory is a big one\nbecause this is when we start talking\nabout text\nwhat if someone says the what comes\nafter the\nthe cat and the hat a little kid's book\nthere\nit starts programming it and so you\nreally want to know not only\nwhat's going on but it's going to be\nsomething that has a history the history\nbehind it tells you what the next one\ncoming up is\nnow once we've built all our different\nyou know we built our model we've added\nour different layers we went in there\nplay with it remember if you're in\nfunctional you can actually link these\nlayers together and they branch out and\ncome back together if you do a\nthe sub\nsetup then you can create your own\ndifferent model you can embed a model in\nthere that might be coming linear\nregression you can embed a linear\nregression model\nas part of your functional split and\nthen have that come back together with\nother things\nso we're going to go ahead and compile\nyour model this brings everything\ntogether we're going to put in what the\nloss is which will use the mean squared\nerror\nand we'll go ahead and use the atom\noptimizer clearly there's a lot of\nchoices on here depending on what you're\ndoing and just like any of these\ndifferent prediction models if you've\nbeen doing any\nscikit from python\nyou'll recognize that we have to then\nfit the model\nso what are we doing in here we're going\nto send in our train x our train y\num we're going to decide how many epochs\nwe're going to run it through\n500 is probably a lot for this i'm\nguessing it'd probably be about 200 or\n300 probably do just fine\nour batch size\nso how many different uh when you\nprocess it this is the math behind it\nif you're in data analytics\nyou might try know what this number is\nas a data scientist where i haven't had\nthe phd level math\nthat says this is why you want to use\nthis particular batch size you kind of\nplay with this number a little bit\nyou can dig deeper into the math\nsee how it affects the results depending\nwhat you're doing\nand there's a number of other settings\non here we did verbose 2. i'd have to\nactually look that up to tell you what\nverbose means i think that's actually\nthe default on there if i remember\ncorrectly\nthere's a lot of different settings when\nyou go to fit it\nthe big ones are your epic and your\nbatch size those are what we're looking\nfor and so we're going to go ahead and\nrun this\nand this is going to take a few minutes\nto run because it's going through\n500 times\nthrough all the data so if you have a\nhuge data set this is the point where\nyou're kind of wondering oh my gosh is\nthis going to finish tomorrow\nif i'm running this on a single machine\nand i have a tera terabyte of data\ngoing into it\nif this is my personal computer and i'm\nrunning a terabyte of data into this um\nyou know this is running rather quickly\nthrough all 500 iterations uh but yeah a\nterabyte of data we're talking something\ncloser to days week\nyou know even with a\n3.5 gigahertz machine and in eight cores\nit's still going to take a long time to\ngo through a full terabyte of data\nand then we want to start looking at\nputting it into some other framework\nlike spark or something that will probe\nthe process on there more across\nmultiple um processors and multiple\ncomputers\nand if we scroll all the way down to the\nbottom you're going to see here's our\nsquare mean error of 0.0088\nif we scroll way up you'll see it kind\nof oscillates between 0.088 and 08089\nit's right around 2\n250 where you start seeing that\noscillation where it's really not going\nanywhere so we really didn't need to go\nthrough a full 500 epics\nyou know if you're retraining the stuff\nover and over again it's kind of good to\nknow where that\nerror zone is so you don't have to do\nall the extra processing of course if\nyou're going to build a model\nwe want to go ahead and run a prediction\non it\nso let's go ahead and make our\nprediction remember we have our training\ntest set\nand our test set or the\nwe have the\ntrain x and the train y for training it\nor train predict and then we have our\ntest x and our test y going in there\nso we can test to see how good it did\nand we come in here we have\nyou'll see right here we go ahead and do\nour train predict equals\nmodel predict train x\nand test predict model predict test x\nwhy would we want to run the prediction\non train x well it's not 100 on its\nprediction we know it has a certain\namount of error and we want to compare\nthe error we have on what we programmed\nit with with the error we get when we\nrun it on new data that's never seen the\nmodel's never seen before and one of the\nthings we can do we go ahead and invert\nthe predictions this helps us\nlevel it off a little bit more\nget rid of some of our bias we have\ntrain predict equals and np\nexponential m1 the train predict\nand then train y equals the exponential\nm1 for train y and then we do the again\nthat with train test predict and test y\num\nagain reformatting the data so that we\ncan it all matches and then we want to\ngo ahead and calculate the root mean\nsquare error\nso we have our train score\nwhich is your math square root times the\nmean square root error train\ny and train predict and again we're just\nthis is just feeding the data through so\nwe can compare it and the same thing\nwith the test\nand let's take a look at that because\nreally\nthe code makes sense if you're going\nthrough it line by line you can see\nwe're doing but the answer really helps\nto zoom in\nso we have a train score which is 2.40\nof our root mean square error\nand we have a test score of 3.16 of the\nroot mean square error\nif these were reversed if our test score\nis better than our training score than\nwe've over trained something's really\nwrong at that point you got to go back\nand figure out what you did wrong\nbecause you should never have a better\nresult on your test data than you do\nwhen you're training data and that's why\nwe put them both through that's why we\nlook at the error for both the training\nand the testing\nwhen you're going out and quoting you're\npublishing this and you're saying hey\nhow good is my model it's the test score\nthat you're showing people this is what\nit did on my test data that the model\nhad never seen before this is how good\nmy model is and a lot of times you\nactually want to put together like a\nlittle formal code\nwhere we actually want to print that out\nand if we print that out you can see\ndown here\ntest prediction standard deviation of\ndata set 3.16 is less than 4.40\ni'd have to go back\nand we're\nup here if you remember we did the\nsquare means error this is standard\ndeviation that's why these numbers are\ndifferent\nit's saying the same thing that we just\ntalked about\nuh\n3.16 is less than 4.40 model is good\nenough we're saying hey this is this\nmodel is valid we have a valid model\nhere so we can go ahead and go with that\nand along with\nputting a formal print out of there um\nwe want to go ahead and plot what's\ngoing on\nuh and this we just want to pretty graft\nhere so that people can see what's going\non when i walk into a meeting and i'm\ndealing with a number of people\nthey really don't want these numbers\nthey don't want to say hey what's i mean\nstandard deviation unless you know what\nstatistics are\nyou might be dealing with a number of\ndifferent departments head of cells\nmight not work with standard deviation\nor have any idea what that really means\nnumber wise and so at this point we\nreally want to put it in a graph so we\nhave something to display and with\ndisplaying you remember that we're\nlooking at the data\ntoday going into it and what's going to\nhappen tomorrow\nso let's take a quick look at this we're\ngoing to go ahead and shift the train\npredictions for plotting we have our\ntrain predict plot\nnp empty like data set train predict\nplot\nset it up with null values\nyou know it's just kind of it's kind of\na weird thing where we're creating the\num\nthe\ndata groups as we like them\nand then putting the data in there is\nwhat's going on here\nso we have our train predict plot\nuh which is going to be our look back\nour length\nplus look back\nwe're just is going to equal train uh\ntrain predict so we're creating this\nbasically we're taking this and we're\ndumping the train predict into it so now\nwe have our nice train predict plot\nand then we have the shift test\npredictions for the plotting we're going\nto continue more of that oops looks like\ni put it in here double no it's just\nyeah they put it in here double\num didn't mean to do that\nwe really only need to do it once oh\nhere we go\num this is where the problem was is\nbecause\nthis is the test predict\nso we have our training prediction we're\ndoing the shift on here and then the\ntest predict we're going to look at that\nsame thing we're just creating those two\ndata sets\ntest\npredict plot length prediction\nsetup on there\nand then we're going to go through the\nplotting the original data set and the\npredictions so we have a time axis\nalways nice to have your time set on\nthere\nset that to the time array\ntime axes lap\nall this is setting up the time variable\nfor the bottom and then we have a lot of\nstuff going on here as far as setting up\nour figure\nlet's go ahead and run that and then\nwe'll break it down\nwe have on here\nuh our main plot we have two different\nplots going on here the ispu going up\nand the data and the ispu here with all\nthese different settings on it\nand so we look at this we have our ax1\nthat's the main plot i mean our ax\nthat's the main plot and we have our ax1\nwhich is the secondary plot over here so\nwe're doing a figure plt\nor plt.figure and we're going to dump\nthose two graphs on there\nand so we take\nand if you\ngo through the code piece by piece\nuh which we're not going to do we're\ngoing to do the um the\ndata set here\nexponential reverse exponential so it\nlooks correctly we're going to label it\nthe original data set\nwe're going to plot the train predict\nplot that's what we just created\nwe're going to make that orange and\nwe'll label it train prediction\ntest predicts plot we're going to make\nthat red and label it test prediction\nand so forth\nset our ticks up this actually just put\nticks time axes gets its ticks\nthe little little marks there going\nalong the axes that kind of thing and\nlet's take a look and see what these\ngraphs look like\nand these are just kind of fun you know\nwhen you show up into a meeting and this\nis the final output you say hey this is\nwhat we're looking at\nhere's our original data in blue\nhere's our training prediction\nyou can see that it trains pretty close\nto what the data is up there\ni would also probably put a\nlike a little little time stamp and do\njust right before and right after where\nwe go from train to test prediction\nand you can see with the test prediction\nthe data comes in in red\nand then you can also see what the\noriginal data set look like behind it\nand how it differs\nand then we can just isolate that here\non the right that's all this is\nis just the\ntest prediction on the right uh and it's\nyou know there's you'll see with the\noriginal data set there's a lot of peaks\nwere missing and a lot of lows were\nmissing but as far as the actual test\nprediction it's pretty does pretty good\nit's pretty right on you can get a good\nidea what to expect for your ispu\nand so from this we would probably\npublish it and say hey this is\nwhat you expect and this is our area of\nthis is a range of error that's the kind\nof thing i put out on a daily basis\nmaybe we predict the cells are going to\nbe this or maybe a weekly\nso you kind of get a nice you kind of\nflatten the\ndata coming out and you say hey this is\nwhat we're looking at the big takeaway\nfrom this is that we're working with\nlet me go back up here oops oh too far\nthere we go\nis this model here this is what this is\nall about we worked through all of those\npieces all the tensorflows and that is\nto build this sequential model and we're\nonly putting in the two layers\nthis can get pretty complicated if you\nget too complicated it never\nit never verges into a usable model\nso if you have like 30 different layers\nin here there's a good chance you might\ncrash it kind of thing\nso don't go too haywire on that and that\nyou kind of learn as you go again it's\ndomain knowledge\nand also starting to understand all\nthese different layers and what they\nmean\nthe data\nanalytics behind those layers\nis something that your data analysis\nprofessional will come in and say this\nis what we want to try\nbut i tell you as a data scientist\na lot of these basic setups are common\nand i don't know how many times uh\nworking with somebody and they're like\noh my gosh if i only did a tangent h\ninstead of a relu activation\ni worked for two weeks to figure that\nout well the data science i can run it\nthrough the model in you know five\nminutes instead of spending two weeks\ndoing the the math behind it um so\nthat's one of the advantages of data\nscientists is we do it from programming\nside and a data analytics is going to\nlook for it how does it work in math and\nthis is really the core right here of\ntensorflow and cross is being able to\nbuild your data model quickly and\nefficiently and of course uh with any\ndata science putting out a pretty graph\nso that your shareholders again we want\nto take and\nreduce the information down to something\npeople can look at and say oh that's\nwhat's going on they can see stuff\nwhat's going on as far as the dates and\nthe change in the ispu\nand with that\nwe have come to the end of this video\ntutorial on python libraries for data\nscience i hope it was useful and\ninteresting if you enjoyed watching the\nvideo then please feel free to like and\nshare it\ndon't forget to subscribe to the simply\nlearn channel thank you for watching and\nkeep learning\n[Music]\nhi there if you like this video\nsubscribe to the simply learn youtube\nchannel and click here to watch similar\nvideos turn it up and get certified\nclick here\nyou\n",
  "words": [
    "python",
    "popular",
    "programming",
    "language",
    "field",
    "data",
    "science",
    "python",
    "provides",
    "range",
    "libraries",
    "help",
    "perform",
    "data",
    "analysis",
    "data",
    "visualization",
    "model",
    "building",
    "faster",
    "efficiency",
    "full",
    "course",
    "video",
    "learn",
    "top",
    "python",
    "libraries",
    "data",
    "science",
    "first",
    "get",
    "overview",
    "top",
    "5",
    "python",
    "libraries",
    "data",
    "science",
    "deep",
    "dive",
    "learning",
    "numpy",
    "library",
    "detail",
    "numpy",
    "library",
    "mainly",
    "used",
    "numerical",
    "computation",
    "next",
    "learn",
    "popular",
    "data",
    "manipulation",
    "library",
    "spanned",
    "moving",
    "learn",
    "data",
    "visualization",
    "using",
    "matplotlib",
    "library",
    "look",
    "scrape",
    "data",
    "web",
    "using",
    "beautiful",
    "soup",
    "library",
    "finally",
    "learn",
    "tensorflow",
    "library",
    "provided",
    "google",
    "let",
    "get",
    "started",
    "python",
    "widely",
    "used",
    "programming",
    "language",
    "today",
    "comes",
    "solving",
    "data",
    "science",
    "tasks",
    "challenges",
    "python",
    "never",
    "ceases",
    "surprise",
    "audience",
    "data",
    "scientists",
    "already",
    "leveraging",
    "power",
    "python",
    "every",
    "day",
    "hi",
    "abeksha",
    "simply",
    "learn",
    "well",
    "thought",
    "bit",
    "research",
    "finally",
    "able",
    "narrow",
    "choice",
    "top",
    "python",
    "libraries",
    "data",
    "science",
    "let",
    "find",
    "let",
    "talk",
    "amazing",
    "library",
    "tensorflow",
    "also",
    "one",
    "favorites",
    "tensorflow",
    "library",
    "high",
    "performance",
    "numerical",
    "computations",
    "around",
    "35",
    "000",
    "github",
    "comments",
    "vibrant",
    "community",
    "around",
    "1500",
    "contributors",
    "used",
    "across",
    "various",
    "scientific",
    "domains",
    "basically",
    "framework",
    "define",
    "run",
    "computations",
    "involves",
    "tensors",
    "tensors",
    "say",
    "partially",
    "defined",
    "computational",
    "objects",
    "eventually",
    "produce",
    "value",
    "tensorflow",
    "let",
    "talk",
    "features",
    "tensorflow",
    "tensorflow",
    "majorly",
    "used",
    "deep",
    "learning",
    "models",
    "neural",
    "networks",
    "libraries",
    "like",
    "torch",
    "theano",
    "also",
    "tensorflow",
    "hands",
    "better",
    "computational",
    "graphical",
    "visualizations",
    "compared",
    "also",
    "tensorflow",
    "reduces",
    "error",
    "largely",
    "50",
    "60",
    "percent",
    "neural",
    "machine",
    "translations",
    "highly",
    "parallel",
    "way",
    "train",
    "multiple",
    "neural",
    "networks",
    "multiple",
    "gpus",
    "highly",
    "efficient",
    "scalable",
    "models",
    "parallel",
    "computing",
    "feature",
    "tensorflow",
    "also",
    "called",
    "pipelining",
    "also",
    "tensorflow",
    "advantage",
    "seamless",
    "performance",
    "backed",
    "google",
    "quicker",
    "updates",
    "frequent",
    "new",
    "releases",
    "latest",
    "features",
    "let",
    "look",
    "applications",
    "tensorflow",
    "extensively",
    "used",
    "speech",
    "image",
    "recognition",
    "text",
    "based",
    "applications",
    "time",
    "series",
    "analysis",
    "forecasting",
    "various",
    "applications",
    "involving",
    "video",
    "detection",
    "favorite",
    "thing",
    "tensorflow",
    "already",
    "popular",
    "among",
    "machine",
    "learning",
    "community",
    "open",
    "trying",
    "us",
    "already",
    "using",
    "let",
    "look",
    "example",
    "tensorflow",
    "model",
    "example",
    "dive",
    "deep",
    "explanation",
    "model",
    "beyond",
    "scope",
    "video",
    "using",
    "amnest",
    "dataset",
    "consists",
    "images",
    "handwritten",
    "digits",
    "handwritten",
    "digits",
    "easily",
    "recognized",
    "building",
    "simple",
    "tensorflow",
    "model",
    "let",
    "see",
    "visualize",
    "data",
    "using",
    "matplotlib",
    "library",
    "inputs",
    "look",
    "something",
    "like",
    "create",
    "tensorflow",
    "model",
    "create",
    "basic",
    "tensorflow",
    "model",
    "need",
    "initialize",
    "variables",
    "start",
    "session",
    "training",
    "model",
    "validate",
    "data",
    "predict",
    "accuracy",
    "model",
    "predicted",
    "92",
    "percent",
    "accuracy",
    "let",
    "see",
    "pretty",
    "well",
    "model",
    "tensorflow",
    "need",
    "understand",
    "tutorial",
    "detail",
    "go",
    "ahead",
    "watch",
    "deep",
    "learning",
    "tutorial",
    "simply",
    "learn",
    "shown",
    "right",
    "corner",
    "interesting",
    "right",
    "let",
    "move",
    "next",
    "library",
    "let",
    "talk",
    "common",
    "yet",
    "powerful",
    "python",
    "library",
    "called",
    "numpy",
    "number",
    "fundamental",
    "package",
    "numerical",
    "computation",
    "python",
    "stands",
    "numerical",
    "python",
    "name",
    "suggests",
    "around",
    "18",
    "000",
    "comments",
    "github",
    "active",
    "community",
    "700",
    "contributors",
    "general",
    "purpose",
    "array",
    "processing",
    "package",
    "way",
    "provides",
    "high",
    "performance",
    "objects",
    "called",
    "arrays",
    "tools",
    "working",
    "also",
    "numpy",
    "addresses",
    "slowness",
    "problem",
    "partly",
    "providing",
    "arrays",
    "talked",
    "functions",
    "operators",
    "operate",
    "efficiently",
    "arrays",
    "interesting",
    "right",
    "let",
    "talk",
    "features",
    "number",
    "easy",
    "work",
    "large",
    "arrays",
    "mattresses",
    "using",
    "numpy",
    "numpy",
    "fully",
    "supports",
    "object",
    "oriented",
    "approach",
    "example",
    "coming",
    "back",
    "nd",
    "array",
    "class",
    "possessing",
    "numerous",
    "methods",
    "attributes",
    "ndra",
    "provides",
    "larger",
    "repeated",
    "computations",
    "numpy",
    "offers",
    "vectorization",
    "faster",
    "compact",
    "traditional",
    "methods",
    "always",
    "wanted",
    "get",
    "rid",
    "loops",
    "vectorization",
    "numpy",
    "clearly",
    "helps",
    "let",
    "talk",
    "applications",
    "numpy",
    "numpy",
    "along",
    "pandas",
    "extensively",
    "used",
    "data",
    "analysis",
    "forms",
    "basis",
    "data",
    "science",
    "helps",
    "creating",
    "powerful",
    "array",
    "whenever",
    "talk",
    "numpy",
    "mention",
    "array",
    "without",
    "mention",
    "powerful",
    "array",
    "also",
    "number",
    "extensively",
    "used",
    "machine",
    "learning",
    "creating",
    "machine",
    "learning",
    "models",
    "forms",
    "base",
    "libraries",
    "like",
    "etc",
    "start",
    "creating",
    "machine",
    "learning",
    "models",
    "data",
    "science",
    "realize",
    "models",
    "bases",
    "numpy",
    "pandas",
    "also",
    "number",
    "used",
    "scipy",
    "matplotlib",
    "used",
    "replacement",
    "matlab",
    "let",
    "look",
    "simple",
    "example",
    "array",
    "numpy",
    "see",
    "multiple",
    "array",
    "manipulation",
    "routines",
    "like",
    "basic",
    "examples",
    "copy",
    "values",
    "one",
    "array",
    "another",
    "give",
    "new",
    "shape",
    "array",
    "maybe",
    "one",
    "dimensional",
    "make",
    "two",
    "dimensional",
    "array",
    "return",
    "copy",
    "array",
    "collapsed",
    "one",
    "dimension",
    "let",
    "look",
    "example",
    "jubilee",
    "notebook",
    "create",
    "basic",
    "array",
    "uh",
    "detailed",
    "explanation",
    "watch",
    "videos",
    "targets",
    "explanations",
    "libraries",
    "first",
    "whenever",
    "using",
    "library",
    "python",
    "import",
    "np",
    "areas",
    "using",
    "let",
    "create",
    "simple",
    "array",
    "let",
    "look",
    "type",
    "array",
    "end",
    "array",
    "type",
    "array",
    "also",
    "let",
    "look",
    "shape",
    "array",
    "shape",
    "array",
    "saw",
    "expand",
    "shape",
    "array",
    "change",
    "shape",
    "array",
    "using",
    "functions",
    "let",
    "create",
    "array",
    "using",
    "arrange",
    "functions",
    "give",
    "arrange",
    "12",
    "give",
    "1d",
    "array",
    "12",
    "numbers",
    "like",
    "reshape",
    "array",
    "3",
    "comma",
    "4",
    "write",
    "range",
    "function",
    "reshape",
    "function",
    "works",
    "numpy",
    "let",
    "discuss",
    "next",
    "library",
    "scipy",
    "another",
    "free",
    "open",
    "source",
    "python",
    "library",
    "extensively",
    "used",
    "data",
    "science",
    "high",
    "level",
    "computations",
    "library",
    "name",
    "suggests",
    "stands",
    "scientific",
    "python",
    "around",
    "19",
    "000",
    "comments",
    "github",
    "active",
    "community",
    "600",
    "contributors",
    "extensively",
    "used",
    "scientific",
    "technical",
    "computations",
    "also",
    "extends",
    "numpy",
    "provides",
    "many",
    "efficient",
    "routines",
    "scientific",
    "calculations",
    "let",
    "discuss",
    "features",
    "scipy",
    "scipy",
    "collection",
    "algorithms",
    "functions",
    "built",
    "numpy",
    "extension",
    "python",
    "secondly",
    "various",
    "high",
    "level",
    "commands",
    "data",
    "manipulation",
    "visualization",
    "also",
    "ndmh",
    "function",
    "scipy",
    "useful",
    "image",
    "processing",
    "includes",
    "functions",
    "solving",
    "differential",
    "equations",
    "linear",
    "algebra",
    "many",
    "features",
    "let",
    "discuss",
    "applications",
    "cyber",
    "used",
    "image",
    "operations",
    "functions",
    "read",
    "images",
    "disk",
    "number",
    "arrays",
    "write",
    "arrays",
    "discuss",
    "images",
    "resize",
    "images",
    "etc",
    "solving",
    "differential",
    "equations",
    "fourier",
    "transforms",
    "optimization",
    "algorithms",
    "linear",
    "algebra",
    "etc",
    "let",
    "look",
    "simple",
    "example",
    "learn",
    "kind",
    "functions",
    "inside",
    "importing",
    "constants",
    "package",
    "scipy",
    "library",
    "package",
    "constants",
    "mentioning",
    "c",
    "h",
    "library",
    "already",
    "knows",
    "fetch",
    "like",
    "speed",
    "light",
    "planck",
    "constant",
    "etc",
    "used",
    "calculations",
    "data",
    "analysis",
    "integral",
    "part",
    "data",
    "science",
    "data",
    "scientists",
    "spend",
    "day",
    "data",
    "munching",
    "cleaning",
    "data",
    "also",
    "hence",
    "mention",
    "pandas",
    "must",
    "data",
    "science",
    "life",
    "cycle",
    "yes",
    "pandas",
    "popular",
    "widely",
    "used",
    "python",
    "library",
    "data",
    "science",
    "along",
    "numpy",
    "matplotlib",
    "name",
    "stands",
    "python",
    "data",
    "analysis",
    "around",
    "17",
    "000",
    "comments",
    "github",
    "active",
    "community",
    "1200",
    "contributors",
    "heavily",
    "used",
    "data",
    "analysis",
    "cleaning",
    "provides",
    "fast",
    "flexible",
    "data",
    "structures",
    "like",
    "data",
    "frames",
    "cvs",
    "designed",
    "work",
    "structured",
    "data",
    "easily",
    "intuitively",
    "let",
    "talk",
    "features",
    "pandas",
    "panas",
    "offers",
    "eloquent",
    "syntax",
    "rich",
    "functionalities",
    "like",
    "various",
    "methods",
    "pandas",
    "like",
    "drop",
    "n",
    "fill",
    "n",
    "gives",
    "freedom",
    "deal",
    "missing",
    "data",
    "also",
    "panas",
    "provides",
    "powerful",
    "apply",
    "function",
    "lets",
    "create",
    "function",
    "run",
    "across",
    "series",
    "data",
    "forget",
    "writing",
    "loops",
    "using",
    "pandas",
    "also",
    "library",
    "high",
    "level",
    "abstraction",
    "low",
    "level",
    "numpy",
    "written",
    "pure",
    "c",
    "also",
    "contains",
    "high",
    "level",
    "data",
    "structures",
    "manipulation",
    "tools",
    "makes",
    "easy",
    "work",
    "pandas",
    "like",
    "data",
    "structures",
    "series",
    "let",
    "discuss",
    "applications",
    "pandas",
    "panas",
    "extensively",
    "used",
    "general",
    "data",
    "wrangling",
    "data",
    "cleaning",
    "pandas",
    "also",
    "finds",
    "usage",
    "edl",
    "jobs",
    "data",
    "transformation",
    "data",
    "storage",
    "excellent",
    "support",
    "loading",
    "csv",
    "files",
    "data",
    "frame",
    "format",
    "pandas",
    "used",
    "variety",
    "academic",
    "commercial",
    "domains",
    "including",
    "statistics",
    "finance",
    "neuroscience",
    "economics",
    "web",
    "analytics",
    "etc",
    "pandas",
    "also",
    "useful",
    "time",
    "series",
    "specific",
    "functionality",
    "like",
    "date",
    "range",
    "generation",
    "moving",
    "window",
    "linear",
    "regression",
    "date",
    "shifting",
    "etc",
    "let",
    "look",
    "simple",
    "example",
    "create",
    "data",
    "frame",
    "data",
    "frame",
    "useful",
    "data",
    "structure",
    "pandas",
    "powerful",
    "functionalities",
    "enlisting",
    "important",
    "libraries",
    "data",
    "science",
    "explore",
    "videos",
    "learn",
    "libraries",
    "detail",
    "let",
    "go",
    "ahead",
    "create",
    "data",
    "frame",
    "using",
    "jupiter",
    "notebook",
    "using",
    "pandas",
    "importing",
    "pandas",
    "library",
    "let",
    "go",
    "run",
    "data",
    "frame",
    "import",
    "file",
    "csv",
    "file",
    "excel",
    "files",
    "many",
    "functions",
    "things",
    "also",
    "create",
    "data",
    "put",
    "data",
    "frame",
    "taking",
    "random",
    "data",
    "putting",
    "data",
    "frame",
    "also",
    "creating",
    "index",
    "also",
    "giving",
    "column",
    "names",
    "pd",
    "alias",
    "given",
    "pandas",
    "random",
    "data",
    "6x4",
    "index",
    "taking",
    "range",
    "six",
    "numbers",
    "column",
    "name",
    "giving",
    "abcd",
    "let",
    "go",
    "ahead",
    "look",
    "created",
    "data",
    "frame",
    "column",
    "name",
    "sub",
    "abcd",
    "list",
    "six",
    "numbers",
    "zero",
    "five",
    "random",
    "data",
    "six",
    "four",
    "data",
    "frame",
    "another",
    "table",
    "rows",
    "columns",
    "various",
    "functions",
    "also",
    "go",
    "ahead",
    "describe",
    "data",
    "frame",
    "see",
    "giving",
    "functionalities",
    "count",
    "mean",
    "standard",
    "deviation",
    "etc",
    "okay",
    "pandas",
    "let",
    "talk",
    "next",
    "library",
    "last",
    "one",
    "matplotlib",
    "fun",
    "library",
    "powerful",
    "yet",
    "beautiful",
    "visualizations",
    "see",
    "coming",
    "slides",
    "plot",
    "matplotlib",
    "suggests",
    "plotting",
    "library",
    "python",
    "around",
    "26",
    "000",
    "comments",
    "github",
    "vibrant",
    "community",
    "700",
    "contributors",
    "graphs",
    "plots",
    "produces",
    "majorly",
    "used",
    "data",
    "visualization",
    "also",
    "provides",
    "api",
    "used",
    "embed",
    "plots",
    "applications",
    "let",
    "talk",
    "features",
    "matplotlib",
    "pi",
    "plot",
    "module",
    "matplotlib",
    "provides",
    "interface",
    "matplotlib",
    "designed",
    "usable",
    "matlab",
    "advantage",
    "free",
    "open",
    "source",
    "also",
    "supports",
    "dozens",
    "output",
    "types",
    "means",
    "use",
    "regardless",
    "operating",
    "system",
    "using",
    "output",
    "format",
    "wish",
    "pandas",
    "used",
    "droppers",
    "around",
    "matplotlib",
    "api",
    "drive",
    "matplotlib",
    "via",
    "cleaner",
    "modern",
    "apis",
    "also",
    "start",
    "using",
    "library",
    "realize",
    "little",
    "memory",
    "consumption",
    "good",
    "runtime",
    "behavior",
    "let",
    "talk",
    "applications",
    "matplotlib",
    "important",
    "discover",
    "unknown",
    "relationship",
    "variables",
    "data",
    "set",
    "library",
    "helps",
    "visualize",
    "correlation",
    "analysis",
    "variables",
    "also",
    "machine",
    "learning",
    "visualize",
    "95",
    "percent",
    "confidence",
    "interval",
    "model",
    "communicate",
    "well",
    "model",
    "fits",
    "data",
    "matlab",
    "finds",
    "application",
    "outlier",
    "detection",
    "using",
    "scatter",
    "plot",
    "etc",
    "visualize",
    "distribution",
    "data",
    "gain",
    "instant",
    "insights",
    "let",
    "make",
    "simple",
    "plot",
    "get",
    "basic",
    "idea",
    "already",
    "imported",
    "libraries",
    "function",
    "matplotlib",
    "inline",
    "help",
    "show",
    "plots",
    "jupiter",
    "notebook",
    "also",
    "called",
    "magic",
    "function",
    "wo",
    "able",
    "display",
    "plots",
    "jupiter",
    "notebook",
    "use",
    "function",
    "using",
    "function",
    "numpy",
    "fix",
    "random",
    "state",
    "reproducibility",
    "take",
    "n",
    "30",
    "assign",
    "random",
    "values",
    "variables",
    "function",
    "generating",
    "30",
    "random",
    "numbers",
    "trying",
    "create",
    "scatter",
    "plot",
    "want",
    "decide",
    "area",
    "let",
    "put",
    "multiplying",
    "30",
    "random",
    "numbers",
    "power",
    "2",
    "get",
    "area",
    "plot",
    "see",
    "minute",
    "using",
    "scatter",
    "function",
    "alias",
    "matplotlib",
    "plt",
    "created",
    "use",
    "small",
    "circles",
    "scatter",
    "plot",
    "colorful",
    "nice",
    "one",
    "easy",
    "plot",
    "suggest",
    "explore",
    "matplotlib",
    "sure",
    "enjoy",
    "let",
    "create",
    "histogram",
    "using",
    "style",
    "gg",
    "plot",
    "assigning",
    "values",
    "variables",
    "random",
    "values",
    "assigning",
    "bars",
    "colors",
    "alignment",
    "plot",
    "get",
    "graph",
    "create",
    "different",
    "type",
    "visualizations",
    "plots",
    "work",
    "upon",
    "using",
    "matplotlib",
    "simple",
    "leading",
    "python",
    "libraries",
    "field",
    "data",
    "science",
    "along",
    "libraries",
    "data",
    "scientists",
    "also",
    "leveraging",
    "power",
    "useful",
    "libraries",
    "example",
    "like",
    "tensorflow",
    "keras",
    "another",
    "popular",
    "library",
    "extensively",
    "used",
    "deep",
    "learning",
    "neural",
    "network",
    "modules",
    "keras",
    "drafts",
    "tensorflow",
    "theano",
    "backends",
    "good",
    "option",
    "want",
    "dive",
    "details",
    "tensorflow",
    "scikit",
    "learn",
    "machine",
    "learning",
    "library",
    "provides",
    "almost",
    "machine",
    "learning",
    "algorithms",
    "need",
    "designed",
    "interpolate",
    "numpy",
    "cbon",
    "another",
    "library",
    "data",
    "visualization",
    "say",
    "seaborne",
    "enhancement",
    "matplotlib",
    "introduces",
    "additional",
    "plot",
    "types",
    "welcome",
    "numpy",
    "name",
    "richard",
    "kirschner",
    "simply",
    "learn",
    "team",
    "get",
    "certified",
    "get",
    "ahead",
    "well",
    "today",
    "going",
    "part",
    "one",
    "numpy",
    "series",
    "going",
    "go",
    "numpy",
    "installing",
    "importing",
    "numpy",
    "numpy",
    "array",
    "numpy",
    "array",
    "versus",
    "python",
    "list",
    "basics",
    "numpy",
    "finding",
    "size",
    "shape",
    "array",
    "range",
    "arrange",
    "functions",
    "numpy",
    "string",
    "functions",
    "part",
    "two",
    "move",
    "cover",
    "axes",
    "array",
    "manipulation",
    "much",
    "let",
    "start",
    "numpy",
    "numpy",
    "core",
    "library",
    "scientific",
    "numerical",
    "computing",
    "python",
    "provides",
    "high",
    "performance",
    "array",
    "object",
    "tools",
    "working",
    "arrays",
    "go",
    "step",
    "say",
    "many",
    "modules",
    "python",
    "built",
    "numpy",
    "fundamentals",
    "numpy",
    "important",
    "latch",
    "onto",
    "python",
    "understand",
    "modules",
    "numbies",
    "main",
    "object",
    "array",
    "table",
    "elements",
    "usually",
    "numbers",
    "type",
    "indexed",
    "tuple",
    "position",
    "integers",
    "numpy",
    "dimensions",
    "called",
    "axes",
    "take",
    "one",
    "dimensional",
    "array",
    "remember",
    "dimensions",
    "also",
    "called",
    "axes",
    "say",
    "first",
    "axis",
    "0",
    "1",
    "2",
    "3",
    "4",
    "five",
    "see",
    "shape",
    "six",
    "six",
    "different",
    "elements",
    "one",
    "dimension",
    "array",
    "usually",
    "denote",
    "six",
    "comma",
    "empty",
    "node",
    "two",
    "dimensional",
    "array",
    "see",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "two",
    "axes",
    "two",
    "dimensions",
    "shape",
    "two",
    "four",
    "looking",
    "matrix",
    "mathematical",
    "functions",
    "see",
    "kinds",
    "importance",
    "shape",
    "going",
    "cover",
    "shape",
    "today",
    "cover",
    "part",
    "two",
    "know",
    "numpy",
    "array",
    "class",
    "called",
    "nd",
    "array",
    "numpy",
    "data",
    "array",
    "going",
    "take",
    "detour",
    "working",
    "python",
    "two",
    "favorite",
    "tools",
    "python",
    "jupiter",
    "notebook",
    "like",
    "use",
    "sitting",
    "top",
    "anaconda",
    "flip",
    "dot",
    "org",
    "go",
    "install",
    "want",
    "use",
    "anaconda",
    "notebook",
    "jupiter",
    "setup",
    "documentation",
    "jupiter",
    "jupiter",
    "opens",
    "web",
    "browser",
    "makes",
    "nice",
    "portable",
    "files",
    "saved",
    "computer",
    "run",
    "ipython",
    "iron",
    "python",
    "create",
    "kinds",
    "different",
    "environments",
    "show",
    "minute",
    "like",
    "use",
    "anaconda",
    "install",
    "anaconda",
    "install",
    "jupiter",
    "notebook",
    "anaconda",
    "separate",
    "install",
    "jupiter",
    "notebook",
    "run",
    "completely",
    "separate",
    "anaconda",
    "jupiter",
    "notebook",
    "see",
    "opened",
    "anaconda",
    "navigator",
    "like",
    "navigator",
    "fresh",
    "install",
    "new",
    "computer",
    "always",
    "nice",
    "launch",
    "jupyter",
    "notebook",
    "bring",
    "tools",
    "anaconda",
    "lot",
    "environments",
    "one",
    "environment",
    "open",
    "terminal",
    "specific",
    "environment",
    "one",
    "happens",
    "python37",
    "current",
    "version",
    "tutorial",
    "open",
    "terminal",
    "going",
    "pip",
    "installs",
    "stuff",
    "like",
    "different",
    "modules",
    "also",
    "create",
    "different",
    "environments",
    "maybe",
    "need",
    "python",
    "36",
    "python",
    "python35",
    "see",
    "nice",
    "framework",
    "like",
    "anaconda",
    "really",
    "helps",
    "track",
    "jupiter",
    "notebook",
    "different",
    "jupiter",
    "notebook",
    "setups",
    "go",
    "ahead",
    "launch",
    "jupiter",
    "notebook",
    "set",
    "browser",
    "window",
    "default",
    "chrome",
    "going",
    "open",
    "chrome",
    "see",
    "opens",
    "folder",
    "computer",
    "couple",
    "different",
    "options",
    "remember",
    "set",
    "environment",
    "python",
    "would",
    "install",
    "additional",
    "modules",
    "already",
    "installed",
    "python",
    "keeps",
    "separate",
    "environment",
    "install",
    "separate",
    "modules",
    "match",
    "environment",
    "couple",
    "things",
    "look",
    "running",
    "different",
    "clusters",
    "installed",
    "new",
    "machine",
    "one",
    "couple",
    "things",
    "run",
    "recently",
    "go",
    "upper",
    "right",
    "new",
    "pull",
    "menu",
    "see",
    "python",
    "open",
    "new",
    "window",
    "jupiter",
    "python",
    "python",
    "window",
    "print",
    "course",
    "hello",
    "world",
    "run",
    "prints",
    "hello",
    "world",
    "command",
    "line",
    "couple",
    "special",
    "things",
    "know",
    "going",
    "today",
    "graphics",
    "never",
    "seen",
    "one",
    "things",
    "also",
    "equals",
    "hello",
    "world",
    "put",
    "bunch",
    "equals",
    "hello",
    "world",
    "b",
    "equals",
    "goodbye",
    "world",
    "put",
    "b",
    "return",
    "b",
    "run",
    "last",
    "one",
    "see",
    "put",
    "variable",
    "show",
    "variable",
    "jupiter",
    "notebook",
    "inline",
    "coding",
    "basic",
    "python",
    "jupiter",
    "notebook",
    "shorthand",
    "see",
    "little",
    "bit",
    "back",
    "numpy",
    "numpy",
    "array",
    "versus",
    "python",
    "list",
    "python",
    "list",
    "basic",
    "list",
    "python",
    "use",
    "numpy",
    "array",
    "python",
    "list",
    "well",
    "first",
    "fast",
    "numpy",
    "array",
    "optimized",
    "years",
    "years",
    "multiple",
    "programmers",
    "usually",
    "quick",
    "compared",
    "basic",
    "python",
    "list",
    "setup",
    "convenient",
    "lot",
    "functionality",
    "basic",
    "python",
    "list",
    "also",
    "uses",
    "less",
    "memory",
    "optimized",
    "speed",
    "memory",
    "use",
    "let",
    "go",
    "ahead",
    "jump",
    "jupyter",
    "notebook",
    "since",
    "coding",
    "best",
    "way",
    "learn",
    "coding",
    "code",
    "like",
    "best",
    "way",
    "learn",
    "write",
    "right",
    "best",
    "way",
    "learn",
    "cook",
    "cook",
    "let",
    "coding",
    "today",
    "like",
    "modules",
    "import",
    "numpy",
    "almost",
    "always",
    "import",
    "np",
    "standard",
    "see",
    "commonly",
    "run",
    "access",
    "numpy",
    "module",
    "inside",
    "python",
    "common",
    "thing",
    "course",
    "go",
    "create",
    "number",
    "array",
    "send",
    "regular",
    "list",
    "go",
    "ahead",
    "send",
    "regular",
    "array",
    "let",
    "one",
    "two",
    "three",
    "make",
    "simple",
    "going",
    "type",
    "run",
    "see",
    "output",
    "array",
    "one",
    "two",
    "three",
    "could",
    "also",
    "print",
    "reminder",
    "inline",
    "command",
    "would",
    "work",
    "using",
    "different",
    "editor",
    "see",
    "array",
    "one",
    "two",
    "three",
    "go",
    "leave",
    "kind",
    "nice",
    "feature",
    "see",
    "really",
    "quick",
    "jupyter",
    "notebook",
    "like",
    "standard",
    "arrays",
    "go",
    "0",
    "going",
    "value",
    "course",
    "go",
    "way",
    "1",
    "value",
    "2",
    "whether",
    "using",
    "numpy",
    "array",
    "basic",
    "python",
    "list",
    "going",
    "look",
    "pretty",
    "familiar",
    "pretty",
    "straightforward",
    "remember",
    "first",
    "value",
    "always",
    "zero",
    "set",
    "let",
    "take",
    "look",
    "using",
    "numpy",
    "went",
    "slide",
    "little",
    "bit",
    "let",
    "take",
    "look",
    "see",
    "actually",
    "looks",
    "like",
    "want",
    "look",
    "fact",
    "fast",
    "convenient",
    "uses",
    "less",
    "memory",
    "let",
    "take",
    "glance",
    "code",
    "see",
    "actually",
    "looks",
    "like",
    "writing",
    "python",
    "differences",
    "going",
    "go",
    "ahead",
    "import",
    "couple",
    "modules",
    "going",
    "import",
    "time",
    "module",
    "time",
    "going",
    "import",
    "system",
    "module",
    "take",
    "look",
    "much",
    "memory",
    "uses",
    "go",
    "run",
    "imported",
    "b",
    "equals",
    "oh",
    "range",
    "1",
    "yeah",
    "one",
    "thousand",
    "fine",
    "going",
    "create",
    "list",
    "one",
    "thousand",
    "zero",
    "nine",
    "hundred",
    "ninety",
    "nine",
    "remember",
    "starts",
    "zero",
    "stops",
    "right",
    "one",
    "thousand",
    "without",
    "actually",
    "going",
    "one",
    "thousand",
    "let",
    "go",
    "ahead",
    "print",
    "want",
    "system",
    "dot",
    "get",
    "size",
    "pick",
    "integer",
    "know",
    "zero",
    "thousand",
    "throw",
    "one",
    "five",
    "matter",
    "whatever",
    "integer",
    "put",
    "going",
    "generate",
    "value",
    "looking",
    "size",
    "much",
    "memory",
    "stores",
    "integer",
    "want",
    "link",
    "b",
    "many",
    "integers",
    "go",
    "ahead",
    "execute",
    "run",
    "line",
    "see",
    "oops",
    "wrong",
    "comma",
    "multiply",
    "together",
    "see",
    "generates",
    "28",
    "000",
    "size",
    "looking",
    "28",
    "000",
    "believe",
    "bytes",
    "sounds",
    "right",
    "let",
    "go",
    "ahead",
    "create",
    "numpy",
    "go",
    "c",
    "equals",
    "np",
    "range",
    "number",
    "command",
    "thing",
    "list",
    "also",
    "use",
    "value",
    "1000",
    "created",
    "c",
    "value",
    "c",
    "np",
    "dot",
    "range",
    "let",
    "go",
    "ahead",
    "print",
    "c",
    "dot",
    "size",
    "times",
    "c",
    "dot",
    "item",
    "size",
    "similar",
    "get",
    "size",
    "c",
    "size",
    "size",
    "array",
    "item",
    "size",
    "reversed",
    "size",
    "integer",
    "five",
    "item",
    "size",
    "going",
    "integers",
    "c",
    "size",
    "let",
    "take",
    "look",
    "see",
    "generates",
    "wow",
    "okay",
    "got",
    "4",
    "000",
    "versus",
    "28",
    "significant",
    "difference",
    "memory",
    "much",
    "memory",
    "using",
    "array",
    "let",
    "go",
    "ahead",
    "take",
    "look",
    "speed",
    "let",
    "um",
    "oh",
    "let",
    "size",
    "tried",
    "lower",
    "values",
    "would",
    "happen",
    "fast",
    "npra",
    "kept",
    "coming",
    "zero",
    "rounded",
    "size",
    "let",
    "create",
    "l1",
    "moles",
    "range",
    "size",
    "l2",
    "set",
    "thing",
    "also",
    "range",
    "size",
    "go",
    "a1",
    "equals",
    "np",
    "dot",
    "range",
    "size",
    "let",
    "2",
    "equals",
    "np",
    "dot",
    "range",
    "keep",
    "size",
    "going",
    "going",
    "take",
    "two",
    "different",
    "arrays",
    "going",
    "perform",
    "basic",
    "functions",
    "let",
    "go",
    "ahead",
    "load",
    "go",
    "ahead",
    "run",
    "set",
    "memory",
    "except",
    "typo",
    "quickly",
    "fix",
    "go",
    "loaded",
    "let",
    "start",
    "equals",
    "time",
    "dot",
    "time",
    "going",
    "look",
    "clock",
    "time",
    "see",
    "time",
    "result",
    "equals",
    "let",
    "let",
    "say",
    "got",
    "array",
    "going",
    "say",
    "let",
    "addition",
    "x",
    "plus",
    "x",
    "comma",
    "zip",
    "two",
    "different",
    "arrays",
    "two",
    "different",
    "arrays",
    "gon",
    "na",
    "multiply",
    "individual",
    "things",
    "l1",
    "l2",
    "go",
    "add",
    "value",
    "l1",
    "plus",
    "l2",
    "value",
    "array",
    "want",
    "go",
    "ahead",
    "print",
    "let",
    "say",
    "python",
    "list",
    "took",
    "time",
    "dot",
    "time",
    "subtract",
    "start",
    "time",
    "whoops",
    "messed",
    "quotation",
    "marks",
    "okay",
    "go",
    "time",
    "minus",
    "start",
    "convert",
    "second",
    "go",
    "milliseconds",
    "times",
    "one",
    "thousand",
    "let",
    "hit",
    "run",
    "kind",
    "fun",
    "also",
    "get",
    "view",
    "ways",
    "manipulate",
    "script",
    "see",
    "also",
    "bed",
    "typing",
    "go",
    "okay",
    "go",
    "ahead",
    "run",
    "see",
    "python",
    "list",
    "took",
    "34",
    "actually",
    "go",
    "back",
    "look",
    "conversion",
    "see",
    "takes",
    "roughly",
    "second",
    "go",
    "ahead",
    "print",
    "result",
    "let",
    "run",
    "see",
    "kind",
    "data",
    "looking",
    "zero",
    "two",
    "four",
    "six",
    "eight",
    "adding",
    "together",
    "looks",
    "pretty",
    "straightforward",
    "scroll",
    "bottom",
    "answer",
    "see",
    "python",
    "list",
    "took",
    "46",
    "little",
    "different",
    "time",
    "depending",
    "core",
    "eight",
    "core",
    "computer",
    "depends",
    "core",
    "running",
    "else",
    "pulling",
    "computer",
    "time",
    "let",
    "go",
    "back",
    "start",
    "time",
    "paste",
    "time",
    "going",
    "result",
    "equals",
    "really",
    "cool",
    "notice",
    "elegant",
    "straightforward",
    "lot",
    "reason",
    "people",
    "started",
    "using",
    "numpy",
    "add",
    "two",
    "arrays",
    "together",
    "simply",
    "going",
    "a1",
    "plus",
    "a2",
    "makes",
    "lot",
    "sense",
    "looking",
    "convenient",
    "remember",
    "slide",
    "looking",
    "fast",
    "convenient",
    "less",
    "memory",
    "look",
    "convenient",
    "really",
    "easy",
    "read",
    "real",
    "easy",
    "see",
    "know",
    "need",
    "print",
    "result",
    "let",
    "go",
    "ahead",
    "print",
    "time",
    "borrow",
    "top",
    "part",
    "really",
    "lazy",
    "typer",
    "python",
    "list",
    "numpy",
    "list",
    "number",
    "array",
    "let",
    "go",
    "ahead",
    "see",
    "comes",
    "get",
    "let",
    "take",
    "look",
    "two",
    "numbers",
    "46",
    "versus",
    "round",
    "huge",
    "difference",
    "like",
    "10",
    "times",
    "faster",
    "like",
    "15",
    "times",
    "roughly",
    "quick",
    "glance",
    "go",
    "math",
    "look",
    "going",
    "vary",
    "little",
    "bit",
    "depending",
    "running",
    "background",
    "computer",
    "obviously",
    "looked",
    "go",
    "back",
    "found",
    "much",
    "faster",
    "yes",
    "different",
    "going",
    "different",
    "speeds",
    "depending",
    "array",
    "convenient",
    "easy",
    "read",
    "uses",
    "less",
    "memory",
    "core",
    "numpy",
    "lot",
    "people",
    "base",
    "many",
    "modules",
    "numpy",
    "widely",
    "used",
    "glance",
    "couple",
    "operations",
    "looking",
    "speed",
    "size",
    "let",
    "dive",
    "little",
    "bit",
    "basic",
    "operations",
    "always",
    "nice",
    "see",
    "mean",
    "certainly",
    "want",
    "go",
    "get",
    "cheat",
    "sheet",
    "using",
    "first",
    "time",
    "know",
    "look",
    "things",
    "google",
    "friend",
    "basic",
    "numpy",
    "dot",
    "array",
    "np",
    "dot",
    "array",
    "go",
    "ahead",
    "create",
    "array",
    "let",
    "pairs",
    "one",
    "comma",
    "two",
    "let",
    "three",
    "comma",
    "four",
    "let",
    "five",
    "comma",
    "six",
    "go",
    "go",
    "ahead",
    "take",
    "run",
    "go",
    "ahead",
    "line",
    "print",
    "see",
    "makes",
    "nice",
    "array",
    "us",
    "look",
    "three",
    "different",
    "objects",
    "two",
    "values",
    "hopefully",
    "starting",
    "think",
    "well",
    "many",
    "dimensions",
    "indexes",
    "see",
    "three",
    "two",
    "let",
    "go",
    "ahead",
    "take",
    "look",
    "let",
    "go",
    "dot",
    "dimensions",
    "speaking",
    "run",
    "two",
    "dimensions",
    "object",
    "item",
    "size",
    "dot",
    "saw",
    "earlier",
    "looked",
    "many",
    "items",
    "wanted",
    "multiply",
    "item",
    "size",
    "times",
    "actual",
    "size",
    "object",
    "memory",
    "used",
    "versus",
    "item",
    "size",
    "see",
    "four",
    "memory",
    "compressed",
    "always",
    "good",
    "thing",
    "shape",
    "shape",
    "important",
    "working",
    "data",
    "science",
    "moving",
    "one",
    "format",
    "another",
    "shape",
    "talked",
    "three",
    "two",
    "three",
    "rows",
    "two",
    "objects",
    "one",
    "generally",
    "look",
    "much",
    "size",
    "dimensions",
    "always",
    "looking",
    "nice",
    "automate",
    "might",
    "converting",
    "something",
    "might",
    "need",
    "know",
    "many",
    "dimensions",
    "going",
    "next",
    "machine",
    "learning",
    "package",
    "automatically",
    "send",
    "information",
    "looked",
    "shape",
    "let",
    "go",
    "create",
    "slightly",
    "different",
    "array",
    "np",
    "dot",
    "array",
    "let",
    "go",
    "ahead",
    "original",
    "setup",
    "one",
    "features",
    "really",
    "important",
    "type",
    "equals",
    "case",
    "let",
    "np",
    "float",
    "done",
    "converting",
    "float",
    "type",
    "instead",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "see",
    "float",
    "values",
    "one",
    "dot",
    "zero",
    "actual",
    "zero",
    "one",
    "dot",
    "one",
    "period",
    "two",
    "three",
    "period",
    "four",
    "period",
    "five",
    "period",
    "six",
    "period",
    "data",
    "science",
    "know",
    "many",
    "times",
    "convert",
    "something",
    "integer",
    "float",
    "going",
    "work",
    "correctly",
    "model",
    "using",
    "common",
    "features",
    "aware",
    "able",
    "get",
    "around",
    "use",
    "also",
    "let",
    "curiosity",
    "item",
    "size",
    "go",
    "ahead",
    "run",
    "see",
    "doubled",
    "size",
    "huge",
    "increase",
    "well",
    "doubling",
    "always",
    "big",
    "increase",
    "computers",
    "huge",
    "increase",
    "compared",
    "would",
    "running",
    "python",
    "list",
    "format",
    "shape",
    "earlier",
    "without",
    "set",
    "float64",
    "let",
    "go",
    "ahead",
    "shape",
    "set",
    "three",
    "comma",
    "two",
    "matches",
    "gone",
    "remember",
    "really",
    "brand",
    "new",
    "according",
    "cambridge",
    "study",
    "cambridge",
    "university",
    "learning",
    "brand",
    "new",
    "word",
    "foreign",
    "language",
    "average",
    "person",
    "repeat",
    "163",
    "times",
    "memorized",
    "lot",
    "build",
    "hopefully",
    "repeat",
    "163",
    "times",
    "manage",
    "repeat",
    "least",
    "twice",
    "little",
    "bit",
    "let",
    "go",
    "ahead",
    "take",
    "going",
    "look",
    "one",
    "setup",
    "let",
    "take",
    "last",
    "statement",
    "converting",
    "properties",
    "data",
    "instead",
    "float",
    "64",
    "let",
    "complex",
    "let",
    "see",
    "looks",
    "like",
    "let",
    "go",
    "ahead",
    "print",
    "run",
    "complex",
    "data",
    "set",
    "see",
    "denoted",
    "one",
    "dot",
    "plus",
    "zero",
    "dot",
    "j",
    "flip",
    "basic",
    "search",
    "numpy",
    "data",
    "types",
    "better",
    "go",
    "original",
    "web",
    "page",
    "pull",
    "bunch",
    "see",
    "whole",
    "list",
    "different",
    "number",
    "data",
    "types",
    "shorthand",
    "complex",
    "complex",
    "complex",
    "64",
    "complex",
    "128",
    "complex",
    "number",
    "represented",
    "264",
    "bit",
    "floats",
    "real",
    "imaginary",
    "components",
    "one",
    "option",
    "float",
    "16",
    "float32",
    "float",
    "shorthand",
    "float64",
    "commonly",
    "used",
    "course",
    "different",
    "ones",
    "possibly",
    "put",
    "numpy",
    "array",
    "covered",
    "basic",
    "addition",
    "comparing",
    "fast",
    "runs",
    "basic",
    "components",
    "set",
    "numpy",
    "array",
    "many",
    "dimensions",
    "item",
    "size",
    "data",
    "type",
    "item",
    "went",
    "item",
    "size",
    "also",
    "shape",
    "probably",
    "one",
    "used",
    "used",
    "shape",
    "time",
    "commonly",
    "used",
    "see",
    "actually",
    "created",
    "numpy",
    "complex",
    "data",
    "type",
    "let",
    "look",
    "features",
    "numpy",
    "one",
    "could",
    "numpy",
    "dot",
    "zeros",
    "gon",
    "na",
    "three",
    "comma",
    "four",
    "go",
    "go",
    "ahead",
    "run",
    "see",
    "np",
    "dot",
    "zeros",
    "create",
    "numpy",
    "array",
    "zeros",
    "really",
    "important",
    "building",
    "neural",
    "network",
    "needed",
    "create",
    "array",
    "initialized",
    "weights",
    "want",
    "weight",
    "case",
    "wanted",
    "start",
    "zero",
    "particular",
    "project",
    "working",
    "options",
    "numpy",
    "ones",
    "thing",
    "three",
    "comma",
    "four",
    "run",
    "see",
    "created",
    "array",
    "numpy",
    "ones",
    "case",
    "comes",
    "float",
    "array",
    "interesting",
    "note",
    "let",
    "go",
    "back",
    "python",
    "lrange5",
    "print",
    "l",
    "list",
    "run",
    "create",
    "range",
    "fact",
    "actually",
    "execute",
    "upgrade",
    "python",
    "python27",
    "actually",
    "created",
    "array",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "one",
    "actually",
    "creates",
    "script",
    "used",
    "actually",
    "generates",
    "array",
    "numpy",
    "range",
    "remember",
    "numpy",
    "range",
    "5",
    "let",
    "l",
    "equals",
    "leave",
    "numpy",
    "fine",
    "go",
    "run",
    "see",
    "actually",
    "get",
    "array",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "value",
    "numpy",
    "arrange",
    "range",
    "five",
    "generates",
    "actual",
    "array",
    "part",
    "one",
    "going",
    "one",
    "section",
    "basic",
    "setup",
    "going",
    "concatenation",
    "concatenation",
    "example",
    "go",
    "going",
    "strings",
    "let",
    "take",
    "look",
    "strings",
    "going",
    "let",
    "oh",
    "let",
    "see",
    "print",
    "let",
    "np",
    "character",
    "something",
    "new",
    "going",
    "add",
    "brackets",
    "going",
    "add",
    "oh",
    "let",
    "say",
    "let",
    "hello",
    "comma",
    "hi",
    "brackets",
    "let",
    "create",
    "another",
    "one",
    "one",
    "going",
    "b",
    "c",
    "x",
    "z",
    "creating",
    "randomly",
    "making",
    "go",
    "ahead",
    "print",
    "run",
    "come",
    "course",
    "make",
    "sure",
    "brackets",
    "open",
    "closed",
    "correctly",
    "see",
    "concatenate",
    "example",
    "numpy",
    "takes",
    "two",
    "different",
    "arrays",
    "set",
    "combines",
    "hello",
    "abc",
    "high",
    "xyz",
    "also",
    "something",
    "like",
    "print",
    "oh",
    "let",
    "np",
    "character",
    "dot",
    "multiply",
    "lot",
    "different",
    "functions",
    "look",
    "probably",
    "good",
    "look",
    "see",
    "good",
    "also",
    "see",
    "action",
    "let",
    "hello",
    "space",
    "comma",
    "three",
    "run",
    "one",
    "run",
    "without",
    "error",
    "see",
    "hello",
    "hello",
    "hello",
    "multiplied",
    "three",
    "also",
    "let",
    "take",
    "whole",
    "thing",
    "instead",
    "retyping",
    "character",
    "center",
    "instead",
    "multiply",
    "let",
    "center",
    "keep",
    "hello",
    "going",
    "take",
    "space",
    "let",
    "center",
    "20",
    "fill",
    "character",
    "equals",
    "fill",
    "dashes",
    "run",
    "see",
    "prints",
    "hello",
    "dashes",
    "side",
    "keep",
    "going",
    "also",
    "addition",
    "fill",
    "function",
    "play",
    "capitalize",
    "title",
    "lowercase",
    "uppercase",
    "split",
    "split",
    "line",
    "strip",
    "join",
    "common",
    "ones",
    "let",
    "go",
    "ahead",
    "look",
    "see",
    "look",
    "like",
    "one",
    "going",
    "hello",
    "world",
    "favorite",
    "mine",
    "would",
    "like",
    "say",
    "hello",
    "universe",
    "see",
    "capital",
    "h",
    "world",
    "want",
    "capitalize",
    "capitalize",
    "first",
    "one",
    "array",
    "get",
    "hello",
    "world",
    "also",
    "take",
    "instead",
    "capitalizing",
    "another",
    "feature",
    "title",
    "let",
    "change",
    "instead",
    "let",
    "run",
    "see",
    "created",
    "title",
    "capitalizes",
    "first",
    "letter",
    "word",
    "one",
    "going",
    "character",
    "lower",
    "two",
    "different",
    "examples",
    "array",
    "hello",
    "world",
    "capitalized",
    "hello",
    "see",
    "one",
    "array",
    "one",
    "string",
    "run",
    "get",
    "array",
    "hello",
    "world",
    "lowercase",
    "hello",
    "lowercase",
    "going",
    "way",
    "also",
    "opposite",
    "way",
    "also",
    "upper",
    "let",
    "paste",
    "see",
    "opposite",
    "python",
    "easy",
    "hopefully",
    "starting",
    "get",
    "picture",
    "python",
    "scripting",
    "simple",
    "put",
    "bigger",
    "picture",
    "together",
    "starts",
    "building",
    "puzzles",
    "somebody",
    "asks",
    "hey",
    "need",
    "first",
    "letter",
    "capitalized",
    "unless",
    "title",
    "start",
    "realizing",
    "get",
    "really",
    "complicated",
    "numpy",
    "makes",
    "simple",
    "like",
    "case",
    "python",
    "data",
    "uppercase",
    "python",
    "easy",
    "like",
    "shouting",
    "messenger",
    "python",
    "easy",
    "ever",
    "processing",
    "text",
    "tokenizing",
    "lot",
    "times",
    "first",
    "thing",
    "split",
    "text",
    "going",
    "run",
    "coming",
    "party",
    "returns",
    "array",
    "individual",
    "words",
    "coming",
    "party",
    "splitting",
    "spaces",
    "going",
    "split",
    "spaces",
    "also",
    "need",
    "know",
    "split",
    "lines",
    "like",
    "basic",
    "split",
    "command",
    "also",
    "split",
    "lines",
    "hello",
    "see",
    "scoop",
    "new",
    "line",
    "run",
    "following",
    "split",
    "part",
    "words",
    "see",
    "hello",
    "two",
    "different",
    "lines",
    "split",
    "apart",
    "let",
    "review",
    "three",
    "wrap",
    "commonly",
    "used",
    "string",
    "variable",
    "manipulations",
    "strip",
    "case",
    "nina",
    "admin",
    "anita",
    "going",
    "strip",
    "let",
    "see",
    "looks",
    "like",
    "end",
    "nin",
    "diminished",
    "basically",
    "takes",
    "leading",
    "trailing",
    "letters",
    "case",
    "looking",
    "common",
    "would",
    "space",
    "might",
    "also",
    "punctuation",
    "anything",
    "like",
    "need",
    "remove",
    "letters",
    "words",
    "going",
    "strip",
    "clean",
    "data",
    "also",
    "need",
    "able",
    "reformat",
    "join",
    "together",
    "see",
    "character",
    "join",
    "go",
    "ahead",
    "run",
    "first",
    "one",
    "splits",
    "letters",
    "colon",
    "second",
    "one",
    "dash",
    "see",
    "really",
    "useful",
    "processing",
    "case",
    "date",
    "day",
    "month",
    "year",
    "year",
    "month",
    "date",
    "common",
    "things",
    "always",
    "switch",
    "around",
    "manipulate",
    "depending",
    "going",
    "working",
    "finally",
    "let",
    "look",
    "one",
    "last",
    "character",
    "string",
    "going",
    "replace",
    "misinformation",
    "good",
    "pulling",
    "news",
    "articles",
    "replacing",
    "case",
    "good",
    "dancer",
    "going",
    "replace",
    "see",
    "good",
    "dancer",
    "hopefully",
    "bad",
    "fall",
    "like",
    "know",
    "1920s",
    "gotten",
    "old",
    "go",
    "covered",
    "lot",
    "basics",
    "numpy",
    "far",
    "creating",
    "array",
    "important",
    "stuff",
    "feeding",
    "know",
    "shape",
    "size",
    "happens",
    "convert",
    "regular",
    "integer",
    "float",
    "value",
    "far",
    "much",
    "space",
    "takes",
    "saw",
    "doubled",
    "item",
    "size",
    "n",
    "dimensions",
    "probably",
    "used",
    "shape",
    "cover",
    "shape",
    "part",
    "two",
    "make",
    "sure",
    "join",
    "us",
    "part",
    "two",
    "lot",
    "important",
    "things",
    "shaping",
    "setting",
    "also",
    "saw",
    "create",
    "zeros",
    "based",
    "array",
    "create",
    "one",
    "ones",
    "range",
    "see",
    "lot",
    "easier",
    "use",
    "create",
    "range",
    "range",
    "numpy",
    "saw",
    "easy",
    "add",
    "two",
    "arrays",
    "saw",
    "earlier",
    "plus",
    "sign",
    "got",
    "strings",
    "working",
    "strings",
    "concatenate",
    "two",
    "different",
    "arrays",
    "strings",
    "bring",
    "together",
    "also",
    "saw",
    "fill",
    "add",
    "nice",
    "headline",
    "dash",
    "dash",
    "dash",
    "saw",
    "capitalize",
    "first",
    "letter",
    "saw",
    "turning",
    "title",
    "first",
    "letters",
    "capitalized",
    "lower",
    "case",
    "letters",
    "upper",
    "letters",
    "lower",
    "upper",
    "nice",
    "abbreviation",
    "also",
    "covered",
    "split",
    "character",
    "set",
    "strip",
    "want",
    "strip",
    "leading",
    "ai",
    "ending",
    "spaces",
    "easily",
    "also",
    "join",
    "data",
    "sets",
    "character",
    "join",
    "option",
    "strings",
    "finally",
    "character",
    "replace",
    "last",
    "time",
    "covered",
    "part",
    "one",
    "went",
    "difference",
    "python",
    "array",
    "numpy",
    "array",
    "easier",
    "use",
    "uses",
    "less",
    "memory",
    "resources",
    "also",
    "faster",
    "python",
    "list",
    "also",
    "went",
    "number",
    "basic",
    "features",
    "like",
    "looking",
    "min",
    "max",
    "median",
    "go",
    "ahead",
    "create",
    "basic",
    "arrays",
    "fill",
    "zeros",
    "fill",
    "ones",
    "look",
    "size",
    "shape",
    "covered",
    "lot",
    "covered",
    "range",
    "equivalent",
    "python",
    "well",
    "sort",
    "equivalent",
    "python",
    "list",
    "range",
    "looked",
    "lot",
    "characters",
    "working",
    "np",
    "character",
    "capitalize",
    "center",
    "change",
    "title",
    "lowercase",
    "uppercase",
    "splitting",
    "stripping",
    "joining",
    "replacing",
    "characters",
    "today",
    "going",
    "go",
    "array",
    "manipulation",
    "going",
    "go",
    "numpy",
    "arithmetic",
    "operations",
    "slicing",
    "arrays",
    "iterating",
    "arrays",
    "array",
    "concatenation",
    "splitting",
    "arrays",
    "numpy",
    "histogram",
    "using",
    "matplot",
    "library",
    "useful",
    "functions",
    "numpy",
    "practice",
    "examples",
    "end",
    "hopefully",
    "already",
    "got",
    "jupiter",
    "notebook",
    "like",
    "use",
    "anaconda",
    "certainly",
    "use",
    "direct",
    "jupiter",
    "notebook",
    "let",
    "go",
    "ahead",
    "dive",
    "since",
    "going",
    "right",
    "part",
    "two",
    "getting",
    "coding",
    "going",
    "belt",
    "jupiter",
    "notebook",
    "go",
    "new",
    "create",
    "new",
    "folder",
    "python",
    "think",
    "forgot",
    "last",
    "time",
    "could",
    "control",
    "plus",
    "plus",
    "browser",
    "enlarges",
    "page",
    "makes",
    "lot",
    "easier",
    "see",
    "always",
    "nice",
    "feature",
    "another",
    "beautiful",
    "benefit",
    "using",
    "jupiter",
    "notebook",
    "let",
    "go",
    "ahead",
    "show",
    "neat",
    "thing",
    "jupiter",
    "nice",
    "working",
    "people",
    "demo",
    "large",
    "screen",
    "going",
    "hashtag",
    "pound",
    "symbol",
    "array",
    "manipulation",
    "kind",
    "title",
    "working",
    "going",
    "call",
    "cell",
    "cell",
    "type",
    "markdown",
    "opposed",
    "code",
    "see",
    "highlights",
    "run",
    "turns",
    "array",
    "manipulation",
    "specifically",
    "going",
    "working",
    "array",
    "manipulation",
    "changing",
    "shape",
    "start",
    "go",
    "ahead",
    "mark",
    "cell",
    "also",
    "markdown",
    "nice",
    "little",
    "look",
    "comes",
    "see",
    "like",
    "said",
    "highlights",
    "makes",
    "bold",
    "print",
    "making",
    "easier",
    "read",
    "python",
    "thing",
    "jupiter",
    "thing",
    "good",
    "know",
    "especially",
    "working",
    "shareholders",
    "since",
    "investing",
    "money",
    "course",
    "first",
    "thing",
    "import",
    "going",
    "import",
    "numpy",
    "p",
    "standard",
    "start",
    "python",
    "program",
    "data",
    "science",
    "numpy",
    "something",
    "bring",
    "let",
    "go",
    "ahead",
    "create",
    "array",
    "going",
    "np",
    "dot",
    "range",
    "remember",
    "zero",
    "well",
    "going",
    "zero",
    "nine",
    "print",
    "little",
    "title",
    "original",
    "array",
    "print",
    "array",
    "remember",
    "first",
    "lesson",
    "array",
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "let",
    "add",
    "print",
    "space",
    "let",
    "create",
    "second",
    "array",
    "b",
    "want",
    "reshape",
    "array",
    "mean",
    "command",
    "simply",
    "reshape",
    "nine",
    "items",
    "important",
    "right",
    "aware",
    "weird",
    "numbers",
    "gon",
    "na",
    "work",
    "want",
    "multiples",
    "nine",
    "know",
    "three",
    "times",
    "3",
    "9",
    "going",
    "reshape",
    "array",
    "3",
    "3",
    "going",
    "print",
    "well",
    "let",
    "give",
    "title",
    "oops",
    "many",
    "brackets",
    "modified",
    "array",
    "let",
    "go",
    "ahead",
    "print",
    "b",
    "let",
    "see",
    "looks",
    "like",
    "come",
    "see",
    "taken",
    "gone",
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "array",
    "arrays",
    "0",
    "1",
    "2",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "split",
    "three",
    "three",
    "guess",
    "tried",
    "reshape",
    "let",
    "five",
    "three",
    "fifteen",
    "going",
    "give",
    "error",
    "going",
    "work",
    "going",
    "reshape",
    "something",
    "unless",
    "shape",
    "data",
    "matches",
    "correctly",
    "take",
    "9",
    "flat",
    "9",
    "call",
    "flex",
    "single",
    "array",
    "reshape",
    "3x3",
    "array",
    "first",
    "might",
    "think",
    "matrixes",
    "used",
    "definitely",
    "use",
    "lot",
    "graphing",
    "come",
    "array",
    "x",
    "comma",
    "x",
    "one",
    "one",
    "comma",
    "x",
    "two",
    "two",
    "shape",
    "might",
    "2",
    "length",
    "number",
    "points",
    "need",
    "separate",
    "x",
    "flat",
    "ray",
    "flat",
    "array",
    "see",
    "easy",
    "reshape",
    "array",
    "course",
    "go",
    "back",
    "b",
    "let",
    "print",
    "b",
    "dot",
    "latin",
    "remember",
    "said",
    "called",
    "flatten",
    "array",
    "run",
    "see",
    "goes",
    "back",
    "original",
    "one",
    "takes",
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "flattens",
    "back",
    "single",
    "array",
    "one",
    "feature",
    "aware",
    "flatten",
    "one",
    "commands",
    "put",
    "order",
    "let",
    "go",
    "ahead",
    "order",
    "equals",
    "f",
    "strangely",
    "enough",
    "f",
    "stands",
    "fortran",
    "whole",
    "fortran",
    "days",
    "remember",
    "actually",
    "studying",
    "fortran",
    "programming",
    "language",
    "case",
    "see",
    "uses",
    "first",
    "like",
    "036",
    "order",
    "instead",
    "flattening",
    "like",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "zero",
    "three",
    "six",
    "one",
    "four",
    "seven",
    "two",
    "five",
    "eight",
    "go",
    "numpy",
    "array",
    "page",
    "see",
    "flatten",
    "open",
    "numpy",
    "array",
    "flattened",
    "setup",
    "look",
    "three",
    "different",
    "options",
    "c",
    "f",
    "whether",
    "flatten",
    "c",
    "based",
    "c",
    "code",
    "works",
    "flattening",
    "originally",
    "worked",
    "row",
    "major",
    "fortran",
    "column",
    "major",
    "preserve",
    "column",
    "fortran",
    "ordering",
    "whatever",
    "default",
    "c",
    "version",
    "default",
    "saw",
    "could",
    "put",
    "orders",
    "equal",
    "c",
    "effect",
    "saw",
    "could",
    "even",
    "order",
    "equals",
    "would",
    "also",
    "effect",
    "default",
    "really",
    "thing",
    "really",
    "need",
    "change",
    "change",
    "c",
    "need",
    "see",
    "right",
    "f",
    "mean",
    "c",
    "thing",
    "really",
    "want",
    "change",
    "f",
    "fortron",
    "order",
    "column",
    "versus",
    "row",
    "let",
    "look",
    "go",
    "reshape",
    "let",
    "create",
    "range",
    "12",
    "let",
    "reshape",
    "4",
    "comma",
    "3",
    "one",
    "remember",
    "numpy",
    "forgot",
    "np",
    "p",
    "dot",
    "arrange",
    "type",
    "print",
    "full",
    "print",
    "course",
    "jupyter",
    "notebook",
    "even",
    "little",
    "extra",
    "print",
    "beginning",
    "run",
    "see",
    "create",
    "nice",
    "array",
    "zero",
    "one",
    "two",
    "reshaped",
    "four",
    "rows",
    "three",
    "columns",
    "could",
    "call",
    "three",
    "columns",
    "four",
    "rows",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "ten",
    "eleven",
    "one",
    "important",
    "np",
    "transpose",
    "let",
    "go",
    "ahead",
    "run",
    "helps",
    "get",
    "leave",
    "see",
    "taken",
    "array",
    "remember",
    "correctly",
    "0",
    "1",
    "2",
    "3",
    "4",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "ten",
    "eleven",
    "swapped",
    "gone",
    "three",
    "four",
    "four",
    "three",
    "three",
    "four",
    "really",
    "helps",
    "looking",
    "like",
    "huge",
    "number",
    "rows",
    "data",
    "comes",
    "like",
    "let",
    "say",
    "features",
    "row",
    "one",
    "features",
    "row",
    "two",
    "x",
    "z",
    "well",
    "go",
    "plot",
    "send",
    "x",
    "one",
    "array",
    "white",
    "one",
    "array",
    "z",
    "another",
    "array",
    "really",
    "important",
    "transpose",
    "rather",
    "quickly",
    "kind",
    "fun",
    "thing",
    "highlight",
    "brackets",
    "around",
    "remember",
    "correctly",
    "jupiter",
    "matter",
    "print",
    "automatically",
    "print",
    "us",
    "see",
    "hit",
    "run",
    "button",
    "comes",
    "exact",
    "thing",
    "let",
    "play",
    "reshape",
    "know",
    "let",
    "zoom",
    "little",
    "bit",
    "make",
    "even",
    "bigger",
    "really",
    "see",
    "going",
    "let",
    "play",
    "reshape",
    "little",
    "bit",
    "b",
    "equals",
    "np",
    "dot",
    "range",
    "let",
    "8",
    "reshape",
    "2",
    "comma",
    "let",
    "go",
    "ahead",
    "print",
    "b",
    "run",
    "see",
    "two",
    "rows",
    "bit",
    "like",
    "four",
    "maybe",
    "two",
    "rows",
    "four",
    "things",
    "might",
    "x",
    "components",
    "components",
    "switch",
    "back",
    "forth",
    "real",
    "easy",
    "important",
    "know",
    "whether",
    "2",
    "comma",
    "4",
    "case",
    "4",
    "comma",
    "3",
    "12",
    "elements",
    "however",
    "split",
    "got",
    "equal",
    "four",
    "times",
    "three",
    "equals",
    "twelve",
    "pretty",
    "straightforward",
    "thing",
    "two",
    "times",
    "four",
    "equals",
    "eight",
    "change",
    "let",
    "say",
    "two",
    "comma",
    "three",
    "let",
    "run",
    "find",
    "get",
    "error",
    "ca",
    "split",
    "eight",
    "two",
    "rows",
    "three",
    "pick",
    "something",
    "split",
    "arrange",
    "let",
    "go",
    "ahead",
    "run",
    "fun",
    "let",
    "go",
    "reshape",
    "b",
    "type",
    "reshape",
    "b",
    "else",
    "goes",
    "eight",
    "well",
    "could",
    "two",
    "two",
    "two",
    "take",
    "three",
    "different",
    "dimensions",
    "course",
    "um",
    "going",
    "come",
    "variable",
    "go",
    "ahead",
    "run",
    "print",
    "also",
    "print",
    "statement",
    "like",
    "see",
    "two",
    "different",
    "groups",
    "two",
    "variables",
    "two",
    "different",
    "dimensions",
    "2",
    "2",
    "let",
    "go",
    "ahead",
    "assign",
    "variable",
    "c",
    "equals",
    "b",
    "reshape",
    "let",
    "something",
    "little",
    "different",
    "let",
    "roll",
    "axes",
    "roll",
    "axes",
    "take",
    "c",
    "two",
    "comma",
    "one",
    "go",
    "ahead",
    "run",
    "going",
    "print",
    "oops",
    "hit",
    "wrong",
    "button",
    "let",
    "one",
    "roll",
    "axis",
    "see",
    "set",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "zero",
    "two",
    "one",
    "three",
    "four",
    "six",
    "five",
    "seven",
    "going",
    "taking",
    "rolling",
    "numbers",
    "around",
    "let",
    "simplify",
    "c",
    "comma",
    "one",
    "run",
    "roll",
    "single",
    "axis",
    "got",
    "0",
    "1",
    "rolled",
    "4",
    "5",
    "2",
    "3",
    "6",
    "7",
    "2",
    "let",
    "see",
    "happens",
    "one",
    "things",
    "really",
    "play",
    "start",
    "filling",
    "taken",
    "0",
    "2",
    "4",
    "6",
    "1",
    "3",
    "5",
    "7",
    "see",
    "rolled",
    "two",
    "digits",
    "instead",
    "rolling",
    "one",
    "set",
    "rolled",
    "two",
    "digits",
    "go",
    "back",
    "one",
    "rolled",
    "zero",
    "one",
    "four",
    "five",
    "gon",
    "na",
    "take",
    "two",
    "rolled",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "start",
    "rolling",
    "things",
    "around",
    "lot",
    "different",
    "things",
    "another",
    "way",
    "manipulate",
    "numbers",
    "numpy",
    "finally",
    "let",
    "go",
    "ahead",
    "swap",
    "axes",
    "c",
    "let",
    "go",
    "ahead",
    "run",
    "going",
    "give",
    "error",
    "requires",
    "multiple",
    "arguments",
    "left",
    "arguments",
    "swap",
    "get",
    "zero",
    "two",
    "one",
    "three",
    "four",
    "six",
    "five",
    "seven",
    "see",
    "everything",
    "swapped",
    "around",
    "next",
    "thing",
    "want",
    "go",
    "want",
    "go",
    "numpy",
    "arithmetic",
    "operations",
    "take",
    "use",
    "let",
    "go",
    "ahead",
    "put",
    "cell",
    "markdown",
    "go",
    "run",
    "nice",
    "thing",
    "right",
    "nice",
    "title",
    "always",
    "helpful",
    "let",
    "start",
    "creating",
    "two",
    "arrays",
    "ep",
    "np",
    "range",
    "range",
    "nine",
    "let",
    "reshape",
    "three",
    "three",
    "saying",
    "reshape",
    "stuff",
    "look",
    "pretty",
    "familiar",
    "zero",
    "one",
    "two",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "let",
    "create",
    "second",
    "one",
    "b",
    "time",
    "instead",
    "range",
    "let",
    "n",
    "p",
    "array",
    "create",
    "straight",
    "array",
    "array",
    "three",
    "objects",
    "going",
    "three",
    "one",
    "go",
    "ahead",
    "print",
    "b",
    "let",
    "run",
    "actually",
    "pretty",
    "common",
    "something",
    "like",
    "three",
    "whatever",
    "three",
    "three",
    "array",
    "math",
    "kind",
    "kind",
    "setup",
    "go",
    "um",
    "np",
    "dot",
    "add",
    "b",
    "forget",
    "always",
    "put",
    "print",
    "statement",
    "add",
    "see",
    "comes",
    "goes",
    "okay",
    "adding",
    "10",
    "everything",
    "could",
    "actually",
    "something",
    "make",
    "interesting",
    "11",
    "10",
    "11",
    "let",
    "change",
    "b",
    "10",
    "11",
    "12",
    "let",
    "run",
    "see",
    "10",
    "1",
    "plus",
    "11",
    "12",
    "2",
    "plus",
    "12",
    "14",
    "13",
    "10",
    "plus",
    "3",
    "13",
    "11",
    "plus",
    "4",
    "15",
    "12",
    "plus",
    "5",
    "17",
    "put",
    "back",
    "since",
    "original",
    "setup",
    "let",
    "10",
    "10",
    "10",
    "run",
    "run",
    "get",
    "original",
    "answer",
    "going",
    "add",
    "together",
    "need",
    "go",
    "ahead",
    "subtract",
    "b",
    "run",
    "get",
    "minus",
    "10",
    "minus",
    "9",
    "minus",
    "8",
    "like",
    "would",
    "expect",
    "subtraction",
    "0",
    "minus",
    "10",
    "minus",
    "10",
    "going",
    "add",
    "subtract",
    "guess",
    "next",
    "one",
    "going",
    "multiply",
    "multiply",
    "b",
    "pretty",
    "straightforward",
    "expect",
    "multiply",
    "10",
    "times",
    "0",
    "got",
    "0",
    "10",
    "times",
    "10",
    "10",
    "finally",
    "going",
    "multiply",
    "last",
    "one",
    "got",
    "divide",
    "happens",
    "divide",
    "b",
    "run",
    "going",
    "get",
    "0",
    "0",
    "divided",
    "10",
    "0",
    "1",
    "divided",
    "10",
    "2",
    "divided",
    "10",
    "math",
    "pretty",
    "straightforward",
    "makes",
    "easy",
    "whole",
    "setup",
    "went",
    "let",
    "say",
    "change",
    "instead",
    "10",
    "hundred",
    "make",
    "thousand",
    "go",
    "run",
    "add",
    "see",
    "got",
    "10",
    "plus",
    "100",
    "plus",
    "thousand",
    "thing",
    "subtract",
    "thing",
    "multiply",
    "also",
    "see",
    "thing",
    "divide",
    "lot",
    "control",
    "array",
    "math",
    "let",
    "set",
    "back",
    "10",
    "oops",
    "right",
    "wrong",
    "section",
    "go",
    "go",
    "ahead",
    "run",
    "get",
    "back",
    "brings",
    "us",
    "next",
    "section",
    "slicing",
    "let",
    "put",
    "make",
    "cell",
    "cell",
    "type",
    "markdown",
    "run",
    "course",
    "gives",
    "us",
    "nice",
    "looking",
    "slicing",
    "slicing",
    "means",
    "going",
    "take",
    "sections",
    "array",
    "let",
    "create",
    "array",
    "p",
    "range",
    "let",
    "remember",
    "0",
    "remember",
    "always",
    "print",
    "always",
    "put",
    "print",
    "jupiter",
    "demo",
    "jupiter",
    "great",
    "controls",
    "slice",
    "four",
    "look",
    "familiar",
    "python",
    "lot",
    "different",
    "scripting",
    "languages",
    "four",
    "go",
    "zero",
    "one",
    "two",
    "three",
    "first",
    "four",
    "thing",
    "skip",
    "sum",
    "starts",
    "one",
    "first",
    "four",
    "skip",
    "also",
    "opposite",
    "go",
    "till",
    "fourth",
    "one",
    "run",
    "get",
    "zero",
    "one",
    "two",
    "three",
    "quite",
    "opposite",
    "single",
    "item",
    "pick",
    "object",
    "number",
    "five",
    "list",
    "run",
    "five",
    "happens",
    "five",
    "order",
    "one",
    "interesting",
    "equals",
    "slice",
    "let",
    "create",
    "slice",
    "let",
    "two",
    "comma",
    "nine",
    "comma",
    "yeah",
    "let",
    "leave",
    "two",
    "create",
    "slice",
    "take",
    "array",
    "array",
    "taking",
    "slice",
    "let",
    "go",
    "ahead",
    "run",
    "let",
    "take",
    "look",
    "see",
    "generated",
    "first",
    "started",
    "two",
    "two",
    "beginning",
    "going",
    "end",
    "nine",
    "happens",
    "eight",
    "stops",
    "nine",
    "remember",
    "arrays",
    "python",
    "step",
    "two",
    "two",
    "four",
    "six",
    "eight",
    "could",
    "three",
    "let",
    "run",
    "see",
    "changes",
    "five",
    "eight",
    "could",
    "uh",
    "let",
    "leave",
    "three",
    "change",
    "ten",
    "oops",
    "let",
    "make",
    "twelve",
    "go",
    "run",
    "two",
    "five",
    "eight",
    "eleven",
    "pretty",
    "straightforward",
    "nice",
    "feature",
    "slice",
    "take",
    "different",
    "parts",
    "series",
    "right",
    "middle",
    "accessed",
    "different",
    "pieces",
    "array",
    "let",
    "get",
    "iterating",
    "iteration",
    "interesting",
    "sister",
    "runs",
    "college",
    "data",
    "science",
    "division",
    "first",
    "question",
    "asks",
    "go",
    "data",
    "asking",
    "know",
    "iterate",
    "data",
    "know",
    "basic",
    "loop",
    "know",
    "go",
    "piece",
    "data",
    "numpy",
    "cool",
    "controls",
    "mark",
    "go",
    "run",
    "called",
    "nd",
    "iter",
    "sure",
    "nd",
    "stands",
    "iter",
    "iterator",
    "though",
    "let",
    "create",
    "array",
    "something",
    "actually",
    "iterate",
    "call",
    "equals",
    "np",
    "range",
    "let",
    "something",
    "little",
    "funny",
    "funky",
    "0",
    "45",
    "sure",
    "guys",
    "back",
    "picked",
    "particular",
    "one",
    "kind",
    "fun",
    "one",
    "run",
    "see",
    "get",
    "0",
    "5",
    "10",
    "15",
    "20",
    "25",
    "30",
    "35",
    "array",
    "looks",
    "like",
    "slice",
    "could",
    "slice",
    "created",
    "slice",
    "0",
    "45",
    "0",
    "45",
    "step",
    "also",
    "equals",
    "shape",
    "let",
    "go",
    "ahead",
    "take",
    "reshape",
    "since",
    "nine",
    "variables",
    "reshape",
    "three",
    "three",
    "run",
    "oops",
    "missed",
    "something",
    "really",
    "helps",
    "reshape",
    "go",
    "ahead",
    "print",
    "get",
    "0",
    "5",
    "10",
    "15",
    "20",
    "25",
    "30",
    "35",
    "simply",
    "4",
    "x",
    "numpy",
    "nd",
    "colon",
    "go",
    "ahead",
    "print",
    "x",
    "let",
    "see",
    "happens",
    "run",
    "print",
    "one",
    "goes",
    "way",
    "whole",
    "array",
    "thing",
    "saw",
    "got",
    "0",
    "5",
    "10",
    "15",
    "20",
    "25",
    "30",
    "35",
    "prints",
    "object",
    "array",
    "go",
    "view",
    "one",
    "certainly",
    "remember",
    "could",
    "also",
    "flatten",
    "array",
    "also",
    "get",
    "result",
    "lot",
    "ways",
    "proper",
    "way",
    "nd",
    "iterator",
    "minimize",
    "amount",
    "resources",
    "needed",
    "go",
    "different",
    "objects",
    "numpy",
    "array",
    "hopefully",
    "asked",
    "question",
    "question",
    "change",
    "instead",
    "object",
    "first",
    "let",
    "go",
    "ahead",
    "take",
    "cell",
    "type",
    "mark",
    "run",
    "going",
    "work",
    "iteration",
    "order",
    "c",
    "style",
    "f",
    "style",
    "remember",
    "c",
    "came",
    "c",
    "programming",
    "f",
    "came",
    "old",
    "fortran",
    "programming",
    "let",
    "give",
    "us",
    "reminder",
    "print",
    "four",
    "x",
    "np",
    "iterate",
    "also",
    "want",
    "specific",
    "order",
    "know",
    "really",
    "lazy",
    "typer",
    "let",
    "go",
    "back",
    "nd",
    "iterator",
    "knew",
    "missing",
    "nd",
    "part",
    "let",
    "order",
    "equals",
    "c",
    "print",
    "x",
    "let",
    "time",
    "order",
    "order",
    "equals",
    "f",
    "go",
    "order",
    "equals",
    "f",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "happens",
    "first",
    "thing",
    "going",
    "notice",
    "original",
    "array",
    "0",
    "5",
    "10",
    "15",
    "20",
    "25",
    "30",
    "35",
    "order",
    "c",
    "default",
    "0",
    "5",
    "10",
    "15",
    "20",
    "come",
    "see",
    "f",
    "order",
    "f",
    "0",
    "15",
    "30",
    "takes",
    "first",
    "digit",
    "sub",
    "arrays",
    "second",
    "dimension",
    "goes",
    "second",
    "one",
    "520",
    "35",
    "10",
    "25",
    "slightly",
    "different",
    "order",
    "iterating",
    "need",
    "covered",
    "reshaping",
    "covered",
    "math",
    "covered",
    "iteration",
    "covered",
    "number",
    "things",
    "next",
    "section",
    "want",
    "go",
    "ahead",
    "go",
    "going",
    "joining",
    "arrays",
    "need",
    "bring",
    "together",
    "let",
    "go",
    "ahead",
    "take",
    "cell",
    "make",
    "markdown",
    "cell",
    "type",
    "markdown",
    "go",
    "run",
    "let",
    "work",
    "joining",
    "arrays",
    "bring",
    "together",
    "different",
    "options",
    "let",
    "uh",
    "np",
    "array",
    "one",
    "two",
    "comma",
    "three",
    "four",
    "go",
    "ahead",
    "print",
    "let",
    "oops",
    "first",
    "rays",
    "big",
    "let",
    "go",
    "ahead",
    "keep",
    "one",
    "line",
    "run",
    "first",
    "array",
    "one",
    "two",
    "three",
    "four",
    "whoops",
    "forgot",
    "automatically",
    "wraps",
    "way",
    "go",
    "ahead",
    "keep",
    "separate",
    "print",
    "go",
    "let",
    "go",
    "ahead",
    "b",
    "five",
    "six",
    "seven",
    "eight",
    "notice",
    "keeping",
    "shape",
    "two",
    "arrays",
    "depending",
    "shapes",
    "match",
    "let",
    "go",
    "ahead",
    "print",
    "second",
    "array",
    "print",
    "b",
    "go",
    "ahead",
    "run",
    "oops",
    "missed",
    "something",
    "let",
    "fix",
    "real",
    "quick",
    "reformatting",
    "go",
    "separate",
    "lines",
    "messed",
    "go",
    "run",
    "right",
    "first",
    "array",
    "one",
    "two",
    "three",
    "four",
    "second",
    "array",
    "five",
    "six",
    "seven",
    "eight",
    "put",
    "carried",
    "return",
    "keyword",
    "use",
    "concatenate",
    "familiar",
    "linux",
    "usually",
    "means",
    "adding",
    "end",
    "going",
    "call",
    "long",
    "axis",
    "zero",
    "concatenate",
    "b",
    "along",
    "axis",
    "zero",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "looks",
    "like",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "array",
    "four",
    "two",
    "nice",
    "shape",
    "four",
    "two",
    "one",
    "going",
    "along",
    "axis",
    "0",
    "guess",
    "next",
    "one",
    "going",
    "along",
    "one",
    "axis",
    "let",
    "see",
    "differ",
    "let",
    "go",
    "ahead",
    "run",
    "adding",
    "axis",
    "equals",
    "one",
    "concatenate",
    "b",
    "axis",
    "one",
    "remember",
    "couple",
    "things",
    "one",
    "shape",
    "two",
    "two",
    "dimensions",
    "going",
    "going",
    "get",
    "error",
    "concatenating",
    "something",
    "instead",
    "one",
    "two",
    "uh",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "five",
    "six",
    "seven",
    "eight",
    "give",
    "error",
    "fact",
    "let",
    "take",
    "look",
    "see",
    "happens",
    "let",
    "take",
    "one",
    "two",
    "three",
    "three",
    "four",
    "five",
    "let",
    "run",
    "come",
    "oh",
    "got",
    "says",
    "input",
    "three",
    "dimensions",
    "except",
    "concatenation",
    "axes",
    "must",
    "match",
    "exactly",
    "let",
    "know",
    "mess",
    "always",
    "good",
    "thing",
    "let",
    "go",
    "ahead",
    "take",
    "back",
    "let",
    "go",
    "ahead",
    "run",
    "zero",
    "axes",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "bring",
    "together",
    "see",
    "different",
    "setup",
    "along",
    "axis",
    "one",
    "end",
    "instead",
    "four",
    "two",
    "end",
    "two",
    "four",
    "one",
    "two",
    "five",
    "six",
    "three",
    "four",
    "seven",
    "eight",
    "changing",
    "axes",
    "going",
    "go",
    "ahead",
    "concatenate",
    "find",
    "talking",
    "concatenate",
    "joining",
    "arrays",
    "really",
    "got",
    "play",
    "make",
    "sure",
    "understand",
    "mean",
    "axes",
    "looks",
    "intuitive",
    "looking",
    "actually",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "axes",
    "one",
    "splitting",
    "different",
    "way",
    "one",
    "two",
    "five",
    "six",
    "three",
    "four",
    "seven",
    "eight",
    "actually",
    "using",
    "real",
    "data",
    "start",
    "really",
    "get",
    "feel",
    "means",
    "going",
    "let",
    "go",
    "ahead",
    "look",
    "splitting",
    "array",
    "mark",
    "run",
    "go",
    "nice",
    "little",
    "title",
    "go",
    "ahead",
    "create",
    "array",
    "nine",
    "let",
    "np",
    "split",
    "gon",
    "na",
    "split",
    "three",
    "let",
    "see",
    "looks",
    "like",
    "split",
    "get",
    "array",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "get",
    "three",
    "separate",
    "arrays",
    "remember",
    "looking",
    "let",
    "print",
    "looking",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "split",
    "three",
    "separate",
    "arrays",
    "let",
    "take",
    "gon",
    "na",
    "right",
    "move",
    "split",
    "instead",
    "3",
    "let",
    "4",
    "comma",
    "put",
    "brackets",
    "way",
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "six",
    "seven",
    "eight",
    "kind",
    "interesting",
    "sure",
    "expect",
    "get",
    "split",
    "four",
    "comma",
    "five",
    "get",
    "totally",
    "different",
    "setup",
    "far",
    "way",
    "split",
    "array",
    "understand",
    "works",
    "going",
    "change",
    "five",
    "seven",
    "visually",
    "make",
    "little",
    "bit",
    "clear",
    "four",
    "five",
    "went",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "see",
    "markers",
    "four",
    "five",
    "four",
    "seven",
    "get",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "looking",
    "first",
    "markers",
    "going",
    "go",
    "four",
    "first",
    "split",
    "four",
    "marker",
    "four",
    "second",
    "split",
    "going",
    "position",
    "seven",
    "thing",
    "four",
    "position",
    "five",
    "splitting",
    "two",
    "sections",
    "could",
    "also",
    "seventh",
    "let",
    "see",
    "looks",
    "like",
    "run",
    "see",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "split",
    "kinds",
    "different",
    "ways",
    "create",
    "different",
    "set",
    "multiple",
    "arrays",
    "split",
    "kinds",
    "different",
    "ways",
    "get",
    "graphs",
    "miscellaneous",
    "stuff",
    "let",
    "go",
    "ahead",
    "look",
    "resizing",
    "array",
    "going",
    "take",
    "cell",
    "set",
    "cells",
    "mark",
    "run",
    "give",
    "us",
    "nice",
    "title",
    "array",
    "uh",
    "input",
    "array",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "gon",
    "na",
    "print",
    "let",
    "go",
    "print",
    "dot",
    "shape",
    "go",
    "ahead",
    "run",
    "whoops",
    "hit",
    "wrong",
    "button",
    "hit",
    "comma",
    "instead",
    "dot",
    "shape",
    "two",
    "comma",
    "three",
    "important",
    "note",
    "start",
    "resizing",
    "going",
    "mess",
    "different",
    "aspects",
    "shape",
    "go",
    "ahead",
    "print",
    "scoop",
    "blank",
    "line",
    "go",
    "let",
    "b",
    "equals",
    "np",
    "dot",
    "resize",
    "going",
    "resize",
    "let",
    "resize",
    "three",
    "two",
    "go",
    "ahead",
    "print",
    "b",
    "print",
    "b",
    "period",
    "shape",
    "comma",
    "run",
    "oops",
    "forgot",
    "quotation",
    "marks",
    "around",
    "end",
    "go",
    "ahead",
    "run",
    "let",
    "see",
    "looks",
    "like",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "original",
    "array",
    "shape",
    "two",
    "three",
    "want",
    "go",
    "ahead",
    "resize",
    "three",
    "two",
    "end",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "end",
    "shape",
    "three",
    "two",
    "much",
    "surprise",
    "know",
    "got",
    "six",
    "elements",
    "resize",
    "two",
    "three",
    "original",
    "one",
    "actually",
    "reshaping",
    "kind",
    "comes",
    "resize",
    "like",
    "happens",
    "something",
    "little",
    "different",
    "let",
    "go",
    "ahead",
    "take",
    "whole",
    "thing",
    "copy",
    "see",
    "looks",
    "like",
    "instead",
    "3",
    "2",
    "remember",
    "last",
    "time",
    "reshape",
    "messed",
    "numbers",
    "gave",
    "error",
    "resize",
    "match",
    "numbers",
    "dimensions",
    "instead",
    "going",
    "2",
    "3",
    "3",
    "2",
    "resize",
    "3",
    "let",
    "take",
    "look",
    "see",
    "handles",
    "come",
    "3",
    "3",
    "end",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "repeats",
    "one",
    "two",
    "three",
    "actually",
    "takes",
    "data",
    "adds",
    "whole",
    "block",
    "based",
    "original",
    "data",
    "repeating",
    "right",
    "point",
    "know",
    "looking",
    "tons",
    "numbers",
    "moving",
    "stuff",
    "around",
    "want",
    "go",
    "ahead",
    "get",
    "little",
    "visual",
    "certainly",
    "picture",
    "different",
    "numbers",
    "let",
    "look",
    "histogram",
    "let",
    "put",
    "histogram",
    "let",
    "go",
    "ahead",
    "run",
    "going",
    "use",
    "matte",
    "plot",
    "library",
    "matplot",
    "library",
    "going",
    "import",
    "pi",
    "plot",
    "plt",
    "usually",
    "notation",
    "see",
    "pi",
    "plot",
    "ever",
    "see",
    "plt",
    "code",
    "probably",
    "pi",
    "plot",
    "matplot",
    "library",
    "guys",
    "back",
    "nice",
    "job",
    "gals",
    "guys",
    "gals",
    "back",
    "team",
    "simply",
    "learn",
    "put",
    "together",
    "nice",
    "array",
    "20",
    "87",
    "4",
    "40",
    "53",
    "bunch",
    "numbers",
    "way",
    "something",
    "play",
    "want",
    "want",
    "plot",
    "histogram",
    "remember",
    "histogram",
    "says",
    "many",
    "times",
    "different",
    "numbers",
    "come",
    "going",
    "put",
    "bins",
    "0",
    "20",
    "40",
    "60",
    "80",
    "might",
    "matplot",
    "library",
    "call",
    "bins",
    "might",
    "hear",
    "term",
    "buckets",
    "put",
    "buckets",
    "really",
    "common",
    "term",
    "want",
    "give",
    "title",
    "way",
    "works",
    "histogram",
    "plt",
    "title",
    "plt",
    "show",
    "single",
    "array",
    "numpy",
    "array",
    "let",
    "go",
    "ahead",
    "run",
    "piece",
    "code",
    "taking",
    "moment",
    "come",
    "says",
    "figure",
    "size",
    "generating",
    "graph",
    "see",
    "let",
    "take",
    "look",
    "go",
    "size",
    "go",
    "okay",
    "see",
    "taking",
    "look",
    "0",
    "20",
    "three",
    "values",
    "20",
    "4",
    "11",
    "zero",
    "one",
    "two",
    "three",
    "actually",
    "four",
    "values",
    "start",
    "zeros",
    "remember",
    "always",
    "count",
    "zero",
    "twenty",
    "forty",
    "got",
    "twenty",
    "one",
    "forty",
    "42",
    "3",
    "4",
    "5",
    "see",
    "histogram",
    "shows",
    "common",
    "numbers",
    "coming",
    "going",
    "40",
    "60",
    "range",
    "least",
    "common",
    "80",
    "100",
    "looks",
    "like",
    "age",
    "demographics",
    "looks",
    "like",
    "see",
    "would",
    "put",
    "buckets",
    "different",
    "age",
    "groups",
    "would",
    "nice",
    "way",
    "looking",
    "histograms",
    "important",
    "powerful",
    "demos",
    "explaining",
    "data",
    "able",
    "quickly",
    "put",
    "histogram",
    "shows",
    "common",
    "trending",
    "really",
    "important",
    "using",
    "numpy",
    "really",
    "easy",
    "know",
    "let",
    "take",
    "data",
    "want",
    "show",
    "bins",
    "buckets",
    "data",
    "used",
    "calling",
    "buckets",
    "bins",
    "let",
    "instead",
    "20",
    "let",
    "tens",
    "see",
    "happens",
    "happens",
    "tens",
    "miss",
    "see",
    "nice",
    "curve",
    "first",
    "one",
    "second",
    "one",
    "looks",
    "like",
    "ladder",
    "going",
    "plummet",
    "ladder",
    "going",
    "plummet",
    "ladder",
    "going",
    "first",
    "would",
    "indicative",
    "age",
    "group",
    "second",
    "one",
    "would",
    "would",
    "get",
    "divide",
    "incorrectly",
    "would",
    "see",
    "natural",
    "trend",
    "know",
    "would",
    "maybe",
    "much",
    "food",
    "eat",
    "hopefully",
    "50",
    "right",
    "middle",
    "means",
    "get",
    "ton",
    "food",
    "compared",
    "everybody",
    "else",
    "kind",
    "democrat",
    "maybe",
    "mental",
    "maybe",
    "knowledge",
    "hit",
    "certain",
    "point",
    "start",
    "losing",
    "marbles",
    "start",
    "leaking",
    "something",
    "start",
    "knowing",
    "something",
    "get",
    "older",
    "grow",
    "see",
    "lose",
    "lose",
    "continuity",
    "thing",
    "split",
    "histogram",
    "many",
    "bins",
    "many",
    "buckets",
    "actually",
    "plotted",
    "individual",
    "numbers",
    "would",
    "bunch",
    "dots",
    "graph",
    "would",
    "mean",
    "whole",
    "lot",
    "looked",
    "graphs",
    "terms",
    "ton",
    "useful",
    "functions",
    "numpy",
    "sure",
    "even",
    "new",
    "ones",
    "going",
    "let",
    "cover",
    "important",
    "ones",
    "really",
    "need",
    "know",
    "using",
    "numpy",
    "framework",
    "one",
    "line",
    "space",
    "function",
    "generating",
    "data",
    "line",
    "space",
    "1",
    "3",
    "10",
    "end",
    "10",
    "numbers",
    "count",
    "10",
    "numbers",
    "1",
    "3",
    "evenly",
    "spaced",
    "get",
    "1",
    "total",
    "10",
    "right",
    "1",
    "three",
    "range",
    "lot",
    "uses",
    "probably",
    "obscure",
    "lot",
    "common",
    "numpy",
    "arrays",
    "set",
    "real",
    "common",
    "one",
    "summation",
    "summation",
    "case",
    "create",
    "numpy",
    "array",
    "one",
    "um",
    "two",
    "different",
    "arrays",
    "one",
    "two",
    "three",
    "two",
    "different",
    "dimensions",
    "one",
    "two",
    "three",
    "three",
    "four",
    "five",
    "going",
    "sum",
    "axes",
    "zero",
    "columns",
    "remember",
    "correctly",
    "columns",
    "one",
    "plus",
    "three",
    "two",
    "plus",
    "four",
    "three",
    "plus",
    "five",
    "three",
    "columns",
    "change",
    "flip",
    "one",
    "get",
    "two",
    "numbers",
    "get",
    "one",
    "two",
    "three",
    "added",
    "together",
    "equals",
    "six",
    "three",
    "plus",
    "four",
    "plus",
    "five",
    "equals",
    "twelve",
    "set",
    "back",
    "zero",
    "go",
    "since",
    "looking",
    "actually",
    "zero",
    "probably",
    "could",
    "communities",
    "math",
    "section",
    "square",
    "root",
    "standard",
    "deviation",
    "two",
    "important",
    "tools",
    "use",
    "throughout",
    "machine",
    "learning",
    "process",
    "data",
    "science",
    "simply",
    "take",
    "np",
    "array",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "three",
    "four",
    "five",
    "know",
    "need",
    "keep",
    "recreating",
    "probably",
    "could",
    "kept",
    "take",
    "square",
    "root",
    "goes",
    "takes",
    "square",
    "root",
    "different",
    "terms",
    "also",
    "take",
    "standard",
    "deviation",
    "much",
    "deviate",
    "value",
    "rabble",
    "function",
    "run",
    "np",
    "array",
    "x",
    "going",
    "x",
    "equals",
    "say",
    "change",
    "x",
    "x",
    "equals",
    "ravel",
    "sets",
    "columns",
    "one",
    "two",
    "three",
    "four",
    "five",
    "columns",
    "similar",
    "flattened",
    "function",
    "kind",
    "look",
    "almost",
    "identical",
    "also",
    "option",
    "ravel",
    "column",
    "another",
    "one",
    "log",
    "mathematical",
    "log",
    "array",
    "case",
    "1",
    "2",
    "3",
    "find",
    "log",
    "base",
    "10",
    "three",
    "numbers",
    "couple",
    "ca",
    "number",
    "log",
    "also",
    "log",
    "base",
    "log",
    "base",
    "10",
    "pretty",
    "commonly",
    "used",
    "go",
    "go",
    "let",
    "little",
    "fun",
    "let",
    "little",
    "practice",
    "session",
    "challenging",
    "questions",
    "start",
    "think",
    "stuff",
    "fits",
    "together",
    "right",
    "looked",
    "basics",
    "basic",
    "tools",
    "let",
    "numpy",
    "practice",
    "examples",
    "let",
    "start",
    "figuring",
    "plot",
    "say",
    "sine",
    "wave",
    "numpy",
    "would",
    "look",
    "like",
    "project",
    "would",
    "already",
    "run",
    "want",
    "go",
    "ahead",
    "import",
    "numpy",
    "np",
    "import",
    "matplot",
    "library",
    "piplot",
    "plt",
    "get",
    "tools",
    "going",
    "break",
    "two",
    "sections",
    "need",
    "x",
    "coordinates",
    "first",
    "let",
    "create",
    "x",
    "coordinates",
    "x",
    "coordinates",
    "going",
    "set",
    "range",
    "want",
    "error",
    "range",
    "since",
    "sine",
    "cosine",
    "going",
    "0",
    "use",
    "np",
    "actually",
    "look",
    "numpy",
    "stores",
    "pi",
    "option",
    "pulling",
    "pi",
    "directly",
    "numpy",
    "variables",
    "stores",
    "pull",
    "numpy",
    "pi",
    "generate",
    "nice",
    "range",
    "let",
    "go",
    "ahead",
    "run",
    "curiosity",
    "let",
    "see",
    "x",
    "looks",
    "like",
    "always",
    "like",
    "point",
    "one",
    "point",
    "two",
    "point",
    "three",
    "point",
    "four",
    "going",
    "uh",
    "zero",
    "case",
    "nine",
    "point",
    "four",
    "three",
    "times",
    "numpy",
    "pi",
    "pi",
    "like",
    "three",
    "point",
    "something",
    "something",
    "something",
    "makes",
    "sense",
    "nine",
    "intervals",
    "create",
    "nice",
    "range",
    "data",
    "need",
    "create",
    "variable",
    "going",
    "simply",
    "equal",
    "np",
    "numpy",
    "dot",
    "sine",
    "x",
    "x",
    "print",
    "let",
    "go",
    "print",
    "see",
    "let",
    "looks",
    "print",
    "x",
    "print",
    "basically",
    "two",
    "arrays",
    "data",
    "like",
    "going",
    "simply",
    "plt",
    "dot",
    "plot",
    "going",
    "plot",
    "points",
    "x",
    "comma",
    "want",
    "actually",
    "see",
    "graph",
    "plot",
    "dot",
    "show",
    "go",
    "ahead",
    "run",
    "see",
    "get",
    "nice",
    "sine",
    "wave",
    "number",
    "0",
    "nine",
    "sine",
    "value",
    "oscillates",
    "minus",
    "one",
    "one",
    "like",
    "expected",
    "next",
    "challenge",
    "let",
    "create",
    "six",
    "six",
    "two",
    "dimensional",
    "array",
    "let",
    "one",
    "zero",
    "placed",
    "alternatively",
    "across",
    "diagonals",
    "oh",
    "little",
    "confusing",
    "let",
    "think",
    "going",
    "create",
    "six",
    "six",
    "two",
    "dimensional",
    "shape",
    "six",
    "six",
    "two",
    "dimensional",
    "array",
    "let",
    "one",
    "zero",
    "placed",
    "alternatively",
    "across",
    "diagonals",
    "remember",
    "lesson",
    "one",
    "fill",
    "whole",
    "numpy",
    "array",
    "zeros",
    "ones",
    "whatever",
    "gon",
    "na",
    "np",
    "create",
    "numpy",
    "zeros",
    "gon",
    "na",
    "six",
    "six",
    "go",
    "ahead",
    "make",
    "sure",
    "knows",
    "integer",
    "even",
    "though",
    "usually",
    "default",
    "real",
    "quick",
    "let",
    "take",
    "look",
    "see",
    "looks",
    "like",
    "run",
    "see",
    "get",
    "six",
    "six",
    "grid",
    "six",
    "six",
    "zero",
    "zero",
    "zero",
    "zero",
    "zero",
    "understand",
    "correctly",
    "say",
    "ones",
    "zero",
    "placed",
    "alternatively",
    "across",
    "diagonals",
    "want",
    "center",
    "diagonal",
    "maybe",
    "going",
    "stay",
    "zero",
    "way",
    "next",
    "diagonal",
    "ones",
    "way",
    "across",
    "diagonally",
    "next",
    "one",
    "zeros",
    "next",
    "one",
    "ones",
    "next",
    "one",
    "zeros",
    "hopefully",
    "see",
    "mouse",
    "lit",
    "highlighting",
    "let",
    "take",
    "little",
    "piece",
    "code",
    "z",
    "one",
    "colon",
    "colon",
    "two",
    "comma",
    "colon",
    "colon",
    "two",
    "equals",
    "one",
    "wow",
    "mouthful",
    "right",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "saying",
    "hey",
    "let",
    "look",
    "case",
    "row",
    "one",
    "one",
    "gon",
    "na",
    "go",
    "every",
    "row",
    "two",
    "gon",
    "na",
    "skip",
    "row",
    "skip",
    "skip",
    "skip",
    "going",
    "way",
    "going",
    "every",
    "row",
    "going",
    "way",
    "hard",
    "highlight",
    "columns",
    "see",
    "right",
    "touching",
    "row",
    "like",
    "row",
    "right",
    "touched",
    "okay",
    "going",
    "start",
    "row",
    "one",
    "going",
    "skip",
    "row",
    "another",
    "one",
    "going",
    "every",
    "two",
    "rows",
    "every",
    "two",
    "rows",
    "looking",
    "every",
    "two",
    "starting",
    "beginning",
    "thing",
    "blank",
    "means",
    "gon",
    "na",
    "start",
    "beginning",
    "gon",
    "na",
    "look",
    "gon",
    "na",
    "skip",
    "every",
    "two",
    "starting",
    "row",
    "one",
    "look",
    "rows",
    "two",
    "steps",
    "go",
    "one",
    "skip",
    "one",
    "know",
    "one",
    "skip",
    "one",
    "one",
    "skip",
    "one",
    "one",
    "left",
    "every",
    "one",
    "would",
    "ones",
    "fact",
    "let",
    "see",
    "looks",
    "like",
    "go",
    "like",
    "run",
    "see",
    "get",
    "ones",
    "notation",
    "allows",
    "us",
    "go",
    "row",
    "row",
    "row",
    "going",
    "every",
    "row",
    "set",
    "going",
    "start",
    "row",
    "one",
    "also",
    "control",
    "z",
    "try",
    "go",
    "start",
    "row",
    "zero",
    "going",
    "go",
    "row",
    "step",
    "two",
    "start",
    "row",
    "zero",
    "go",
    "every",
    "row",
    "time",
    "start",
    "one",
    "column",
    "one",
    "go",
    "every",
    "one",
    "going",
    "step",
    "step",
    "two",
    "skipping",
    "every",
    "one",
    "gon",
    "na",
    "set",
    "equal",
    "one",
    "let",
    "see",
    "looks",
    "like",
    "see",
    "get",
    "answer",
    "get",
    "0",
    "1",
    "0",
    "0",
    "ones",
    "going",
    "diagonals",
    "every",
    "diagonal",
    "0",
    "every",
    "one",
    "little",
    "bit",
    "brain",
    "teaser",
    "one",
    "trying",
    "get",
    "one",
    "work",
    "see",
    "arrange",
    "rows",
    "step",
    "different",
    "access",
    "next",
    "one",
    "find",
    "total",
    "number",
    "locations",
    "missing",
    "values",
    "array",
    "first",
    "challenge",
    "create",
    "missing",
    "numbers",
    "let",
    "create",
    "ray",
    "z",
    "going",
    "numpy",
    "dot",
    "10",
    "comma",
    "second",
    "part",
    "let",
    "take",
    "second",
    "part",
    "let",
    "see",
    "looks",
    "like",
    "let",
    "run",
    "go",
    "10",
    "10",
    "random",
    "array",
    "randomly",
    "picking",
    "numbers",
    "next",
    "want",
    "go",
    "ahead",
    "take",
    "random",
    "integer",
    "size",
    "equals",
    "five",
    "going",
    "random",
    "random",
    "10",
    "size",
    "equals",
    "five",
    "z",
    "going",
    "select",
    "number",
    "random",
    "spaces",
    "set",
    "equal",
    "null",
    "value",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "looks",
    "like",
    "look",
    "array",
    "created",
    "one",
    "two",
    "three",
    "four",
    "fifth",
    "one",
    "eyes",
    "may",
    "failing",
    "created",
    "series",
    "zero",
    "zero",
    "five",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "got",
    "five",
    "different",
    "null",
    "values",
    "kind",
    "neat",
    "notation",
    "notice",
    "generate",
    "random",
    "integers",
    "size",
    "equals",
    "five",
    "generates",
    "five",
    "five",
    "miniature",
    "grid",
    "inside",
    "tell",
    "put",
    "nands",
    "kind",
    "cool",
    "little",
    "thing",
    "want",
    "look",
    "see",
    "many",
    "null",
    "values",
    "simply",
    "np",
    "none",
    "z",
    "simple",
    "none",
    "want",
    "sum",
    "going",
    "sum",
    "different",
    "null",
    "values",
    "let",
    "one",
    "one",
    "feature",
    "really",
    "cool",
    "let",
    "go",
    "ahead",
    "print",
    "indexes",
    "np",
    "arg",
    "np",
    "nan",
    "z",
    "going",
    "create",
    "another",
    "np",
    "array",
    "let",
    "run",
    "see",
    "comes",
    "four",
    "indexes",
    "count",
    "four",
    "tells",
    "one",
    "nine",
    "two",
    "zero",
    "four",
    "six",
    "five",
    "four",
    "let",
    "go",
    "ahead",
    "run",
    "run",
    "run",
    "go",
    "time",
    "got",
    "five",
    "get",
    "random",
    "numbers",
    "another",
    "fun",
    "one",
    "always",
    "like",
    "similar",
    "n",
    "p",
    "z",
    "dot",
    "sums",
    "summing",
    "number",
    "nands",
    "get",
    "indexes",
    "reshape",
    "indexes",
    "also",
    "inds",
    "np",
    "nan",
    "z",
    "let",
    "print",
    "let",
    "print",
    "print",
    "inds",
    "let",
    "see",
    "looks",
    "like",
    "similar",
    "zero",
    "one",
    "three",
    "zero",
    "six",
    "three",
    "eight",
    "six",
    "nine",
    "three",
    "split",
    "two",
    "different",
    "arrays",
    "x",
    "kind",
    "coordinates",
    "going",
    "z",
    "inds",
    "equals",
    "point",
    "also",
    "instead",
    "getting",
    "sum",
    "get",
    "means",
    "numbers",
    "kind",
    "thing",
    "average",
    "one",
    "thing",
    "could",
    "could",
    "pick",
    "average",
    "common",
    "data",
    "science",
    "get",
    "average",
    "use",
    "value",
    "go",
    "set",
    "zero",
    "let",
    "go",
    "ahead",
    "print",
    "z",
    "run",
    "see",
    "come",
    "wherever",
    "null",
    "value",
    "zero",
    "set",
    "whatever",
    "want",
    "another",
    "way",
    "replace",
    "data",
    "help",
    "clean",
    "data",
    "depending",
    "wow",
    "covered",
    "lot",
    "stuff",
    "quick",
    "rehash",
    "going",
    "everything",
    "went",
    "looked",
    "array",
    "manipulation",
    "changing",
    "shape",
    "switch",
    "around",
    "even",
    "flattened",
    "remember",
    "another",
    "command",
    "lower",
    "similar",
    "could",
    "change",
    "order",
    "f",
    "remember",
    "f",
    "stands",
    "fortran",
    "strange",
    "connotation",
    "c",
    "f",
    "c",
    "standard",
    "f",
    "switches",
    "different",
    "order",
    "honest",
    "usually",
    "look",
    "almost",
    "never",
    "use",
    "f",
    "need",
    "like",
    "oh",
    "gosh",
    "order",
    "let",
    "quick",
    "google",
    "talked",
    "reshape",
    "making",
    "sure",
    "dimensions",
    "want",
    "like",
    "something",
    "12",
    "objects",
    "reshape",
    "see",
    "11",
    "5",
    "work",
    "divide",
    "transpose",
    "switch",
    "go",
    "4",
    "three",
    "three",
    "four",
    "oops",
    "way",
    "around",
    "three",
    "four",
    "four",
    "three",
    "covered",
    "reshaping",
    "array",
    "roll",
    "axes",
    "weird",
    "things",
    "swapping",
    "rolling",
    "axes",
    "transposing",
    "numbers",
    "dug",
    "little",
    "bit",
    "arithmetic",
    "talked",
    "adding",
    "talked",
    "subtracting",
    "multiplying",
    "dividing",
    "know",
    "point",
    "important",
    "look",
    "numpy",
    "mathematics",
    "see",
    "everything",
    "trigonometry",
    "uh",
    "hyperbolic",
    "functions",
    "roundings",
    "sums",
    "products",
    "differences",
    "many",
    "different",
    "miscellaneous",
    "mathematical",
    "connotations",
    "know",
    "google",
    "go",
    "main",
    "numpy",
    "page",
    "look",
    "different",
    "setups",
    "covered",
    "slicing",
    "break",
    "apart",
    "iterating",
    "array",
    "covered",
    "joining",
    "arrays",
    "concatenate",
    "remember",
    "concatenate",
    "means",
    "add",
    "case",
    "adding",
    "b",
    "onto",
    "read",
    "linux",
    "catch",
    "concatenate",
    "used",
    "regularly",
    "splitting",
    "array",
    "talked",
    "split",
    "array",
    "different",
    "ways",
    "split",
    "array",
    "arrays",
    "kinds",
    "different",
    "ways",
    "split",
    "array",
    "resize",
    "remember",
    "resize",
    "shape",
    "resize",
    "take",
    "data",
    "begin",
    "beginning",
    "add",
    "new",
    "rows",
    "size",
    "bigger",
    "smaller",
    "truncates",
    "cuts",
    "end",
    "looked",
    "histogram",
    "plot",
    "uh",
    "mentioned",
    "bind",
    "buckets",
    "bins",
    "call",
    "pipelot",
    "covered",
    "lot",
    "useful",
    "functions",
    "numpy",
    "talked",
    "line",
    "space",
    "setup",
    "numbers",
    "series",
    "sum",
    "axes",
    "part",
    "mathematical",
    "formulas",
    "looked",
    "sum",
    "also",
    "means",
    "median",
    "compute",
    "num",
    "b",
    "also",
    "square",
    "root",
    "standard",
    "deviation",
    "ravel",
    "function",
    "similar",
    "flat",
    "honest",
    "almost",
    "always",
    "use",
    "flat",
    "know",
    "ravel",
    "kind",
    "functionality",
    "went",
    "numpy",
    "practice",
    "examples",
    "challenged",
    "create",
    "sine",
    "wave",
    "numpy",
    "kind",
    "looking",
    "range",
    "remember",
    "range",
    "beginning",
    "value",
    "n",
    "value",
    "three",
    "times",
    "pi",
    "number",
    "pi",
    "going",
    "intervals",
    "equals",
    "numpy",
    "sign",
    "x",
    "math",
    "math",
    "page",
    "looking",
    "remember",
    "right",
    "top",
    "finally",
    "went",
    "kind",
    "little",
    "brain",
    "teaser",
    "diagonal",
    "zeros",
    "ones",
    "playing",
    "different",
    "connotations",
    "z",
    "numpy",
    "array",
    "random",
    "size",
    "played",
    "little",
    "bit",
    "null",
    "values",
    "playing",
    "null",
    "values",
    "data",
    "science",
    "know",
    "null",
    "values",
    "like",
    "headache",
    "big",
    "sets",
    "data",
    "get",
    "rid",
    "small",
    "debt",
    "sets",
    "data",
    "factor",
    "something",
    "like",
    "figure",
    "average",
    "median",
    "replace",
    "pandas",
    "really",
    "core",
    "python",
    "module",
    "need",
    "data",
    "science",
    "data",
    "processing",
    "many",
    "modules",
    "come",
    "actually",
    "sits",
    "kind",
    "numpy",
    "already",
    "numpy",
    "array",
    "hopefully",
    "already",
    "gone",
    "numpy",
    "tutorial",
    "one",
    "two",
    "today",
    "going",
    "cover",
    "pandas",
    "discuss",
    "series",
    "discuss",
    "basic",
    "operations",
    "series",
    "get",
    "data",
    "frame",
    "basic",
    "operations",
    "data",
    "frame",
    "file",
    "related",
    "operations",
    "data",
    "frame",
    "visualization",
    "practice",
    "examples",
    "roll",
    "sleeves",
    "get",
    "coding",
    "underneath",
    "let",
    "start",
    "real",
    "general",
    "pandas",
    "pandas",
    "tool",
    "data",
    "processing",
    "helps",
    "data",
    "analysis",
    "provides",
    "functions",
    "methods",
    "officially",
    "manipulate",
    "large",
    "data",
    "sets",
    "step",
    "say",
    "using",
    "spark",
    "hadoop",
    "big",
    "data",
    "talking",
    "big",
    "data",
    "talking",
    "pandas",
    "connections",
    "like",
    "interface",
    "going",
    "availability",
    "really",
    "know",
    "pandas",
    "working",
    "big",
    "data",
    "know",
    "data",
    "frames",
    "well",
    "pandas",
    "data",
    "frame",
    "primarily",
    "couple",
    "different",
    "pieces",
    "look",
    "never",
    "worked",
    "data",
    "frames",
    "data",
    "frame",
    "basically",
    "like",
    "excel",
    "spreadsheet",
    "rows",
    "columns",
    "access",
    "data",
    "either",
    "row",
    "column",
    "index",
    "different",
    "kind",
    "set",
    "dig",
    "get",
    "deeper",
    "pandas",
    "think",
    "like",
    "giant",
    "excel",
    "spreadsheet",
    "optimized",
    "run",
    "larger",
    "data",
    "computer",
    "said",
    "data",
    "frame",
    "data",
    "structures",
    "pandas",
    "series",
    "one",
    "dimensional",
    "arrays",
    "data",
    "frame",
    "two",
    "dimensional",
    "array",
    "really",
    "centers",
    "around",
    "data",
    "frame",
    "series",
    "happens",
    "part",
    "data",
    "frame",
    "closer",
    "look",
    "pandas",
    "series",
    "series",
    "one",
    "dimensional",
    "array",
    "labels",
    "contain",
    "data",
    "type",
    "including",
    "integers",
    "strings",
    "floats",
    "python",
    "objects",
    "diverse",
    "remember",
    "numpy",
    "studied",
    "uniform",
    "pandas",
    "pandas",
    "lot",
    "pandas",
    "actually",
    "kind",
    "sits",
    "numpy",
    "really",
    "need",
    "know",
    "done",
    "numpy",
    "tutorials",
    "see",
    "index",
    "one",
    "two",
    "three",
    "four",
    "five",
    "data",
    "b",
    "c",
    "e",
    "straightforward",
    "two",
    "columns",
    "nice",
    "index",
    "label",
    "column",
    "label",
    "data",
    "data",
    "frame",
    "data",
    "structure",
    "labels",
    "use",
    "labels",
    "locate",
    "data",
    "see",
    "go",
    "back",
    "one",
    "index",
    "one",
    "two",
    "three",
    "four",
    "five",
    "one",
    "series",
    "would",
    "share",
    "index",
    "row",
    "index",
    "row",
    "index",
    "df",
    "dot",
    "index",
    "column",
    "index",
    "look",
    "like",
    "said",
    "would",
    "really",
    "familiar",
    "done",
    "work",
    "spreadsheets",
    "excel",
    "kind",
    "resembles",
    "make",
    "lot",
    "easier",
    "manipulate",
    "data",
    "add",
    "columns",
    "delete",
    "columns",
    "move",
    "around",
    "thing",
    "rows",
    "lot",
    "control",
    "course",
    "going",
    "jupiter",
    "notebook",
    "use",
    "python",
    "editors",
    "highly",
    "suggest",
    "installed",
    "jupyter",
    "worked",
    "probably",
    "one",
    "best",
    "ways",
    "easily",
    "displaying",
    "project",
    "working",
    "skip",
    "lot",
    "different",
    "user",
    "interfaces",
    "ides",
    "editing",
    "python",
    "simply",
    "always",
    "let",
    "mine",
    "sit",
    "anaconda",
    "real",
    "quick",
    "open",
    "oops",
    "offline",
    "mode",
    "show",
    "see",
    "different",
    "tools",
    "actually",
    "install",
    "anaconda",
    "including",
    "jupiter",
    "notebook",
    "comes",
    "default",
    "access",
    "environments",
    "named",
    "large",
    "one",
    "largest",
    "world",
    "largest",
    "snakes",
    "jupiter",
    "notebook",
    "case",
    "going",
    "go",
    "jupiter",
    "notebook",
    "going",
    "go",
    "ahead",
    "new",
    "python",
    "3",
    "open",
    "python",
    "3",
    "untitled",
    "folder",
    "diving",
    "right",
    "let",
    "go",
    "ahead",
    "give",
    "title",
    "pandas",
    "tutorial",
    "go",
    "cell",
    "change",
    "cell",
    "type",
    "mark",
    "execute",
    "actual",
    "code",
    "one",
    "wonderful",
    "tools",
    "jupyter",
    "notebooks",
    "demos",
    "let",
    "go",
    "ahead",
    "import",
    "pandas",
    "usually",
    "people",
    "call",
    "pd",
    "become",
    "standard",
    "industry",
    "go",
    "ahead",
    "run",
    "pandas",
    "imported",
    "jupyter",
    "notebook",
    "oh",
    "go",
    "ahead",
    "let",
    "control",
    "plus",
    "since",
    "internet",
    "explorer",
    "enlarge",
    "easily",
    "nice",
    "pretty",
    "view",
    "oops",
    "big",
    "go",
    "whenever",
    "working",
    "new",
    "module",
    "good",
    "check",
    "version",
    "module",
    "pandas",
    "use",
    "case",
    "pd",
    "dot",
    "underscore",
    "underscore",
    "version",
    "underscore",
    "underscore",
    "actually",
    "pretty",
    "common",
    "python",
    "modules",
    "different",
    "ways",
    "look",
    "version",
    "one",
    "common",
    "ones",
    "go",
    "ahead",
    "run",
    "get",
    "go",
    "pandas",
    "site",
    "see",
    "latest",
    "release",
    "course",
    "reminder",
    "going",
    "environment",
    "need",
    "install",
    "need",
    "pip",
    "install",
    "pandas",
    "using",
    "pip",
    "installer",
    "go",
    "close",
    "first",
    "thing",
    "want",
    "going",
    "work",
    "series",
    "lot",
    "stuff",
    "series",
    "whole",
    "data",
    "set",
    "need",
    "create",
    "one",
    "need",
    "manipulate",
    "take",
    "pieces",
    "query",
    "query",
    "delete",
    "delete",
    "different",
    "parts",
    "want",
    "things",
    "series",
    "start",
    "series",
    "almost",
    "code",
    "fact",
    "code",
    "transfer",
    "right",
    "actual",
    "data",
    "table",
    "go",
    "series",
    "single",
    "list",
    "one",
    "column",
    "take",
    "transfer",
    "whole",
    "table",
    "start",
    "creating",
    "let",
    "put",
    "go",
    "creating",
    "series",
    "list",
    "let",
    "call",
    "arr",
    "equals",
    "0",
    "1",
    "2",
    "3",
    "remember",
    "last",
    "one",
    "could",
    "easily",
    "r",
    "equals",
    "range",
    "5",
    "would",
    "0",
    "r",
    "equals",
    "0",
    "4",
    "call",
    "s1",
    "go",
    "pd",
    "series",
    "capitalized",
    "one",
    "always",
    "throws",
    "letters",
    "capitalize",
    "modules",
    "getting",
    "uniform",
    "got",
    "watch",
    "python",
    "going",
    "go",
    "ahead",
    "arr",
    "going",
    "take",
    "python",
    "list",
    "going",
    "turn",
    "series",
    "jupiter",
    "put",
    "print",
    "statement",
    "put",
    "s1",
    "print",
    "series",
    "us",
    "let",
    "go",
    "ahead",
    "run",
    "take",
    "look",
    "see",
    "two",
    "rows",
    "numbers",
    "first",
    "one",
    "index",
    "automatically",
    "creates",
    "index",
    "starting",
    "zero",
    "unless",
    "tell",
    "differently",
    "get",
    "0",
    "index",
    "row",
    "0",
    "0",
    "1",
    "1",
    "2",
    "2",
    "3",
    "3",
    "4",
    "series",
    "need",
    "title",
    "column",
    "one",
    "column",
    "title",
    "also",
    "lets",
    "know",
    "data",
    "type",
    "integer",
    "print",
    "series",
    "basic",
    "series",
    "created",
    "let",
    "second",
    "series",
    "pd",
    "use",
    "data",
    "list",
    "let",
    "go",
    "ahead",
    "order",
    "give",
    "order",
    "equals",
    "oh",
    "let",
    "way",
    "let",
    "go",
    "index",
    "equals",
    "order",
    "helps",
    "actually",
    "give",
    "order",
    "order",
    "equals",
    "let",
    "one",
    "two",
    "three",
    "four",
    "five",
    "instead",
    "starting",
    "zero",
    "going",
    "give",
    "order",
    "starting",
    "one",
    "going",
    "run",
    "go",
    "ahead",
    "print",
    "s2",
    "see",
    "index",
    "1",
    "2",
    "3",
    "4",
    "5",
    "represents",
    "0",
    "1",
    "2",
    "3",
    "4",
    "series",
    "still",
    "data",
    "type",
    "integer",
    "common",
    "missing",
    "numpy",
    "arrays",
    "import",
    "numpy",
    "np",
    "remember",
    "numpy",
    "tutorials",
    "go",
    "ahead",
    "create",
    "numpy",
    "random",
    "random",
    "numbers",
    "five",
    "let",
    "see",
    "end",
    "looks",
    "like",
    "see",
    "number",
    "looks",
    "like",
    "nice",
    "random",
    "float",
    "values",
    "last",
    "tutorial",
    "numpy",
    "tutorial",
    "one",
    "two",
    "instead",
    "calling",
    "order",
    "let",
    "call",
    "index",
    "going",
    "set",
    "index",
    "equal",
    "b",
    "c",
    "e",
    "want",
    "show",
    "index",
    "integer",
    "something",
    "different",
    "let",
    "go",
    "ahead",
    "create",
    "use",
    "s2",
    "np",
    "numpy",
    "series",
    "capital",
    "n",
    "np",
    "numpy",
    "pd",
    "pandas",
    "go",
    "switching",
    "anachronisms",
    "n",
    "want",
    "index",
    "equals",
    "index",
    "created",
    "let",
    "go",
    "ahead",
    "see",
    "looks",
    "like",
    "s2",
    "print",
    "let",
    "run",
    "see",
    "nice",
    "series",
    "going",
    "b",
    "c",
    "e",
    "indexes",
    "instead",
    "0",
    "1",
    "2",
    "3",
    "4",
    "make",
    "index",
    "whatever",
    "want",
    "see",
    "numbers",
    "going",
    "randomly",
    "generated",
    "number",
    "array",
    "use",
    "numpy",
    "create",
    "panda",
    "series",
    "right",
    "continuing",
    "creating",
    "series",
    "one",
    "use",
    "often",
    "create",
    "series",
    "dictionary",
    "dictionary",
    "case",
    "went",
    "ahead",
    "1",
    "b",
    "2",
    "c",
    "3",
    "d4",
    "ef5",
    "one",
    "key",
    "value",
    "going",
    "use",
    "oh",
    "let",
    "use",
    "s3",
    "equals",
    "pd",
    "pandas",
    "series",
    "want",
    "go",
    "ahead",
    "print",
    "s3",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "got",
    "1",
    "b",
    "two",
    "c",
    "three",
    "four",
    "e",
    "five",
    "still",
    "integer",
    "64",
    "actual",
    "data",
    "one",
    "two",
    "three",
    "four",
    "five",
    "integer",
    "64",
    "type",
    "last",
    "thing",
    "want",
    "creating",
    "section",
    "series",
    "go",
    "ahead",
    "modify",
    "index",
    "going",
    "start",
    "modifying",
    "data",
    "let",
    "start",
    "modifying",
    "index",
    "series",
    "remember",
    "let",
    "print",
    "time",
    "s1",
    "go",
    "ahead",
    "run",
    "reason",
    "print",
    "prints",
    "last",
    "variable",
    "put",
    "s1",
    "going",
    "another",
    "variable",
    "back",
    "lower",
    "wo",
    "print",
    "first",
    "one",
    "last",
    "one",
    "going",
    "go",
    "ahead",
    "take",
    "s1",
    "index",
    "going",
    "set",
    "equal",
    "new",
    "index",
    "obviously",
    "number",
    "objects",
    "index",
    "equal",
    "number",
    "objects",
    "data",
    "last",
    "variable",
    "go",
    "ahead",
    "s1",
    "let",
    "run",
    "see",
    "went",
    "0",
    "0",
    "0",
    "1",
    "2",
    "3",
    "4",
    "index",
    "altered",
    "b",
    "c",
    "e",
    "would",
    "much",
    "readable",
    "might",
    "representational",
    "larger",
    "database",
    "working",
    "cool",
    "tools",
    "covered",
    "creating",
    "database",
    "based",
    "basic",
    "array",
    "python",
    "array",
    "showed",
    "reset",
    "index",
    "showed",
    "use",
    "numpy",
    "array",
    "put",
    "numpy",
    "array",
    "know",
    "numpy",
    "array",
    "set",
    "index",
    "thing",
    "dictionary",
    "versatile",
    "pulls",
    "data",
    "pull",
    "data",
    "different",
    "sources",
    "different",
    "setups",
    "create",
    "new",
    "series",
    "easily",
    "pandas",
    "looked",
    "changing",
    "index",
    "new",
    "index",
    "want",
    "go",
    "ahead",
    "selection",
    "let",
    "basic",
    "slicing",
    "common",
    "thing",
    "probably",
    "s1",
    "notation",
    "start",
    "look",
    "really",
    "familiar",
    "going",
    "put",
    "output",
    "usually",
    "change",
    "s1",
    "selects",
    "might",
    "equals",
    "s1",
    "print",
    "see",
    "looks",
    "first",
    "three",
    "zero",
    "one",
    "two",
    "thing",
    "go",
    "ahead",
    "take",
    "reminder",
    "actually",
    "changing",
    "s1",
    "viewing",
    "s1",
    "simple",
    "slicing",
    "likewise",
    "append",
    "pen",
    "let",
    "quick",
    "kind",
    "fun",
    "one",
    "two",
    "minus",
    "one",
    "see",
    "covers",
    "everything",
    "e",
    "course",
    "minus",
    "two",
    "side",
    "one",
    "another",
    "way",
    "select",
    "go",
    "far",
    "end",
    "likewise",
    "two",
    "cde",
    "end",
    "starts",
    "second",
    "one",
    "another",
    "way",
    "minus",
    "two",
    "looks",
    "last",
    "two",
    "slice",
    "see",
    "easy",
    "slice",
    "data",
    "course",
    "reason",
    "could",
    "select",
    "wanted",
    "view",
    "helps",
    "32",
    "32",
    "going",
    "show",
    "first",
    "three",
    "go",
    "also",
    "append",
    "take",
    "oh",
    "let",
    "create",
    "another",
    "series",
    "append",
    "one",
    "remember",
    "s3",
    "s3",
    "s1",
    "go",
    "ahead",
    "s1",
    "let",
    "go",
    "ahead",
    "oh",
    "let",
    "call",
    "s4",
    "equals",
    "s1",
    "pin",
    "s3",
    "going",
    "combine",
    "two",
    "s4",
    "go",
    "ahead",
    "print",
    "s4",
    "see",
    "b",
    "c",
    "e",
    "b",
    "c",
    "e",
    "0",
    "1",
    "2",
    "3",
    "1",
    "2",
    "3",
    "4",
    "5",
    "started",
    "data",
    "one",
    "easy",
    "append",
    "one",
    "series",
    "next",
    "going",
    "append",
    "one",
    "series",
    "next",
    "need",
    "go",
    "ahead",
    "drop",
    "delete",
    "one",
    "drop",
    "key",
    "word",
    "let",
    "e",
    "index",
    "e",
    "run",
    "see",
    "print",
    "b",
    "c",
    "e",
    "remember",
    "changes",
    "type",
    "s4",
    "see",
    "s4",
    "still",
    "e",
    "change",
    "affect",
    "series",
    "unless",
    "tell",
    "like",
    "x",
    "s4",
    "equals",
    "s4",
    "dot",
    "drop",
    "e",
    "another",
    "way",
    "show",
    "later",
    "let",
    "cut",
    "one",
    "go",
    "right",
    "covered",
    "kinds",
    "cool",
    "tools",
    "appending",
    "slicing",
    "creating",
    "stuff",
    "earlier",
    "see",
    "setup",
    "easy",
    "manipulate",
    "series",
    "next",
    "want",
    "get",
    "want",
    "get",
    "operations",
    "happen",
    "series",
    "let",
    "go",
    "ahead",
    "change",
    "cell",
    "mark",
    "go",
    "run",
    "series",
    "operations",
    "series",
    "let",
    "start",
    "creating",
    "couple",
    "arrays",
    "call",
    "array",
    "one",
    "zero",
    "seven",
    "array",
    "two",
    "six",
    "six",
    "seven",
    "eight",
    "nine",
    "five",
    "know",
    "threw",
    "five",
    "end",
    "let",
    "go",
    "ahead",
    "run",
    "load",
    "jupiter",
    "little",
    "backwards",
    "going",
    "s5",
    "equals",
    "panda",
    "series",
    "array",
    "two",
    "reverse",
    "s5",
    "see",
    "zero",
    "four",
    "automatically",
    "assign",
    "index",
    "67895",
    "series",
    "let",
    "go",
    "ahead",
    "call",
    "s6",
    "set",
    "equal",
    "pd",
    "series",
    "first",
    "array",
    "s6",
    "print",
    "see",
    "something",
    "similar",
    "got",
    "zero",
    "six",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "seven",
    "data",
    "two",
    "series",
    "created",
    "series",
    "six",
    "five",
    "six",
    "one",
    "first",
    "things",
    "add",
    "one",
    "series",
    "next",
    "s5",
    "dot",
    "add",
    "s6",
    "let",
    "see",
    "generates",
    "quick",
    "thing",
    "never",
    "use",
    "pandas",
    "think",
    "going",
    "happen",
    "fact",
    "five",
    "different",
    "values",
    "one",
    "seven",
    "values",
    "let",
    "see",
    "end",
    "6",
    "8",
    "10",
    "12",
    "9",
    "goes",
    "oh",
    "ca",
    "add",
    "nothing",
    "gives",
    "us",
    "null",
    "return",
    "different",
    "numpy",
    "would",
    "given",
    "error",
    "instead",
    "tells",
    "value",
    "could",
    "generate",
    "one",
    "easily",
    "add",
    "s5",
    "dot",
    "add",
    "s6",
    "likewise",
    "s5",
    "dot",
    "sub",
    "subtract",
    "s6",
    "run",
    "add",
    "subtract",
    "guessed",
    "going",
    "multiply",
    "divide",
    "next",
    "see",
    "null",
    "values",
    "ca",
    "subtract",
    "two",
    "values",
    "subtract",
    "also",
    "s5",
    "multiply",
    "mul",
    "three",
    "letters",
    "one",
    "ways",
    "remember",
    "figured",
    "code",
    "remember",
    "three",
    "letters",
    "mole",
    "go",
    "ahead",
    "run",
    "see",
    "multiplied",
    "together",
    "also",
    "s5",
    "div",
    "three",
    "letters",
    "s6",
    "run",
    "see",
    "goes",
    "infinity",
    "zero",
    "wrong",
    "position",
    "actually",
    "gives",
    "whole",
    "different",
    "answer",
    "important",
    "notice",
    "null",
    "values",
    "data",
    "ca",
    "actually",
    "produce",
    "answer",
    "old",
    "missing",
    "data",
    "since",
    "data",
    "science",
    "let",
    "s6",
    "median",
    "let",
    "look",
    "median",
    "data",
    "simply",
    "median",
    "sorry",
    "following",
    "three",
    "letters",
    "median",
    "three",
    "letters",
    "see",
    "s6",
    "let",
    "print",
    "median",
    "average",
    "s6",
    "let",
    "print",
    "max",
    "comma",
    "s6",
    "like",
    "median",
    "max",
    "value",
    "going",
    "max",
    "value",
    "also",
    "minimum",
    "value",
    "let",
    "pop",
    "minimum",
    "go",
    "ahead",
    "run",
    "starting",
    "see",
    "something",
    "would",
    "generated",
    "like",
    "say",
    "r",
    "starting",
    "get",
    "different",
    "statistics",
    "medium",
    "value",
    "3",
    "max",
    "value",
    "7",
    "minimum",
    "value",
    "hits",
    "null",
    "values",
    "values",
    "could",
    "still",
    "could",
    "actually",
    "know",
    "let",
    "go",
    "let",
    "pick",
    "one",
    "multiplied",
    "let",
    "go",
    "s7",
    "equals",
    "go",
    "print",
    "s7",
    "keep",
    "nice",
    "uniform",
    "still",
    "s7",
    "run",
    "want",
    "take",
    "s7",
    "s7",
    "null",
    "values",
    "infinity",
    "value",
    "let",
    "see",
    "happens",
    "going",
    "interesting",
    "want",
    "see",
    "infinity",
    "end",
    "median",
    "6",
    "maximum",
    "27",
    "minimum",
    "correct",
    "drops",
    "values",
    "gets",
    "know",
    "drops",
    "values",
    "computes",
    "remaining",
    "data",
    "important",
    "know",
    "making",
    "computations",
    "looking",
    "min",
    "max",
    "median",
    "going",
    "know",
    "values",
    "unless",
    "double",
    "check",
    "data",
    "null",
    "values",
    "important",
    "thing",
    "note",
    "real",
    "quick",
    "review",
    "done",
    "created",
    "pd",
    "series",
    "gone",
    "ahead",
    "done",
    "addition",
    "subtraction",
    "multiplication",
    "division",
    "three",
    "letters",
    "sub",
    "min",
    "div",
    "add",
    "looked",
    "median",
    "maximum",
    "minimum",
    "going",
    "go",
    "ahead",
    "jump",
    "next",
    "big",
    "topic",
    "create",
    "data",
    "frame",
    "going",
    "go",
    "series",
    "going",
    "create",
    "number",
    "series",
    "bundle",
    "together",
    "make",
    "data",
    "frame",
    "go",
    "cell",
    "type",
    "markdown",
    "let",
    "go",
    "run",
    "nice",
    "title",
    "always",
    "good",
    "good",
    "title",
    "right",
    "first",
    "data",
    "frame",
    "jump",
    "stuff",
    "looks",
    "little",
    "complicated",
    "break",
    "first",
    "going",
    "create",
    "dates",
    "know",
    "let",
    "go",
    "ahead",
    "want",
    "see",
    "looks",
    "like",
    "creating",
    "created",
    "series",
    "dates",
    "pd",
    "date",
    "range",
    "going",
    "use",
    "index",
    "okay",
    "look",
    "see",
    "basically",
    "comes",
    "kind",
    "like",
    "basic",
    "python",
    "list",
    "numpy",
    "array",
    "however",
    "want",
    "look",
    "different",
    "dates",
    "going",
    "generated",
    "six",
    "going",
    "whatever",
    "time",
    "right",
    "thing",
    "date",
    "time",
    "time",
    "stamp",
    "right",
    "see",
    "11",
    "19",
    "2008",
    "11",
    "20",
    "11",
    "19",
    "looking",
    "future",
    "generating",
    "series",
    "dates",
    "going",
    "use",
    "index",
    "pandas",
    "command",
    "date",
    "range",
    "nice",
    "one",
    "tools",
    "hidden",
    "pandas",
    "use",
    "next",
    "going",
    "use",
    "numpy",
    "go",
    "ahead",
    "generate",
    "random",
    "numbers",
    "case",
    "6",
    "comma",
    "look",
    "rows",
    "columns",
    "move",
    "pandas",
    "course",
    "could",
    "reshape",
    "backwards",
    "data",
    "want",
    "six",
    "match",
    "rows",
    "six",
    "periods",
    "indexes",
    "match",
    "along",
    "rows",
    "know",
    "next",
    "one",
    "let",
    "go",
    "ahead",
    "print",
    "numpy",
    "arrays",
    "see",
    "looks",
    "like",
    "one",
    "two",
    "three",
    "four",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "four",
    "six",
    "nice",
    "little",
    "setup",
    "since",
    "working",
    "data",
    "frames",
    "visual",
    "let",
    "give",
    "columns",
    "four",
    "columns",
    "going",
    "give",
    "names",
    "b",
    "c",
    "columns",
    "also",
    "let",
    "put",
    "together",
    "data",
    "frame",
    "actually",
    "know",
    "let",
    "since",
    "everything",
    "else",
    "let",
    "go",
    "ahead",
    "columns",
    "see",
    "columns",
    "go",
    "ahead",
    "df1",
    "equals",
    "pandas",
    "dot",
    "data",
    "frame",
    "note",
    "f",
    "capitalized",
    "series",
    "always",
    "highlight",
    "know",
    "many",
    "times",
    "things",
    "get",
    "retyped",
    "forget",
    "capitalized",
    "minor",
    "thing",
    "pick",
    "right",
    "away",
    "lot",
    "first",
    "thing",
    "want",
    "want",
    "go",
    "ahead",
    "take",
    "numpy",
    "array",
    "going",
    "create",
    "data",
    "frame",
    "numpy",
    "array",
    "want",
    "index",
    "equal",
    "dates",
    "index",
    "also",
    "columns",
    "equals",
    "columns",
    "finally",
    "let",
    "see",
    "looks",
    "like",
    "remember",
    "different",
    "data",
    "looks",
    "like",
    "jumble",
    "data",
    "column",
    "names",
    "everything",
    "else",
    "numpy",
    "array",
    "kind",
    "jumble",
    "array",
    "four",
    "six",
    "could",
    "sort",
    "read",
    "look",
    "nice",
    "looks",
    "mean",
    "come",
    "board",
    "meeting",
    "working",
    "shareholders",
    "pretty",
    "readable",
    "know",
    "date",
    "b",
    "c",
    "whatever",
    "maybe",
    "one",
    "dates",
    "leads",
    "closures",
    "lost",
    "leads",
    "total",
    "dollar",
    "made",
    "know",
    "whatever",
    "fits",
    "business",
    "maybe",
    "measurements",
    "scientific",
    "equipment",
    "whether",
    "searching",
    "material",
    "know",
    "like",
    "higher",
    "temperature",
    "low",
    "day",
    "humidity",
    "date",
    "whatever",
    "see",
    "really",
    "create",
    "nice",
    "clear",
    "chart",
    "looks",
    "like",
    "spreadsheet",
    "know",
    "rows",
    "columns",
    "data",
    "one",
    "use",
    "time",
    "going",
    "create",
    "create",
    "like",
    "saw",
    "numpy",
    "array",
    "easy",
    "reshape",
    "also",
    "create",
    "dictionary",
    "array",
    "data",
    "let",
    "go",
    "notch",
    "see",
    "data",
    "animal",
    "case",
    "cat",
    "cat",
    "snake",
    "dog",
    "dog",
    "cat",
    "snake",
    "cat",
    "dog",
    "age",
    "array",
    "ages",
    "number",
    "visits",
    "priority",
    "high",
    "priority",
    "yes",
    "going",
    "take",
    "going",
    "create",
    "labels",
    "b",
    "c",
    "e",
    "f",
    "g",
    "h",
    "want",
    "notice",
    "title",
    "animal",
    "basically",
    "python",
    "list",
    "lists",
    "necessarily",
    "equal",
    "know",
    "numpy",
    "array",
    "null",
    "value",
    "want",
    "go",
    "ahead",
    "create",
    "labels",
    "equal",
    "number",
    "list",
    "first",
    "cat",
    "b",
    "second",
    "cat",
    "c",
    "snake",
    "dog",
    "go",
    "ahead",
    "create",
    "labels",
    "going",
    "use",
    "index",
    "call",
    "df",
    "let",
    "way",
    "call",
    "df2",
    "equals",
    "pd",
    "pandas",
    "data",
    "frame",
    "data",
    "like",
    "index",
    "equals",
    "labels",
    "going",
    "go",
    "let",
    "go",
    "ahead",
    "print",
    "see",
    "looks",
    "like",
    "df2",
    "let",
    "go",
    "ahead",
    "run",
    "another",
    "nice",
    "clean",
    "chart",
    "look",
    "gone",
    "mess",
    "data",
    "looks",
    "like",
    "organized",
    "spreadsheet",
    "visual",
    "easy",
    "read",
    "animal",
    "age",
    "visits",
    "priority",
    "j",
    "cats",
    "different",
    "animals",
    "programming",
    "lot",
    "times",
    "important",
    "know",
    "data",
    "types",
    "simply",
    "df2",
    "types",
    "run",
    "see",
    "animal",
    "object",
    "string",
    "comes",
    "object",
    "age",
    "float64",
    "integer",
    "64",
    "priority",
    "object",
    "exploring",
    "one",
    "popular",
    "let",
    "go",
    "df",
    "two",
    "head",
    "print",
    "df2",
    "head",
    "returns",
    "first",
    "five",
    "change",
    "five",
    "might",
    "want",
    "look",
    "top",
    "two",
    "maybe",
    "want",
    "look",
    "let",
    "see",
    "oh",
    "let",
    "six",
    "maybe",
    "look",
    "top",
    "six",
    "database",
    "data",
    "frame",
    "actually",
    "creates",
    "another",
    "data",
    "frame",
    "could",
    "df3",
    "equal",
    "df2",
    "takes",
    "df2",
    "first",
    "six",
    "values",
    "df3",
    "run",
    "get",
    "answer",
    "head",
    "data",
    "also",
    "tail",
    "thing",
    "df",
    "tail",
    "look",
    "last",
    "tail",
    "default",
    "five",
    "last",
    "five",
    "course",
    "look",
    "last",
    "three",
    "real",
    "quick",
    "see",
    "end",
    "data",
    "get",
    "tell",
    "love",
    "tail",
    "one",
    "like",
    "index",
    "something",
    "like",
    "show",
    "last",
    "whatever",
    "last",
    "entry",
    "looking",
    "stock",
    "values",
    "might",
    "want",
    "look",
    "last",
    "five",
    "days",
    "stock",
    "values",
    "data",
    "frame",
    "tail",
    "key",
    "things",
    "look",
    "index",
    "df2",
    "dot",
    "index",
    "want",
    "notice",
    "call",
    "function",
    "put",
    "brackets",
    "end",
    "give",
    "error",
    "index",
    "callable",
    "object",
    "also",
    "columns",
    "go",
    "ahead",
    "let",
    "let",
    "print",
    "remember",
    "first",
    "one",
    "going",
    "show",
    "unless",
    "print",
    "df2",
    "column",
    "see",
    "indexes",
    "columns",
    "listed",
    "animal",
    "age",
    "visits",
    "priority",
    "tells",
    "kind",
    "object",
    "kind",
    "data",
    "type",
    "object",
    "finally",
    "df2",
    "dot",
    "values",
    "brackets",
    "end",
    "actual",
    "object",
    "callable",
    "function",
    "go",
    "ahead",
    "run",
    "creates",
    "displays",
    "nice",
    "array",
    "easy",
    "way",
    "convert",
    "back",
    "numpy",
    "array",
    "basically",
    "go",
    "next",
    "section",
    "let",
    "take",
    "quick",
    "look",
    "covered",
    "far",
    "data",
    "frame",
    "came",
    "created",
    "data",
    "frame",
    "numpy",
    "array",
    "first",
    "setting",
    "columns",
    "index",
    "index",
    "setting",
    "set",
    "series",
    "look",
    "familiar",
    "whole",
    "format",
    "numpy",
    "array",
    "index",
    "dates",
    "columns",
    "columns",
    "remember",
    "numpy",
    "array",
    "looking",
    "row",
    "comma",
    "column",
    "six",
    "rows",
    "four",
    "columns",
    "reads",
    "data",
    "frame",
    "went",
    "ahead",
    "also",
    "dictionary",
    "case",
    "animal",
    "column",
    "name",
    "date",
    "data",
    "underneath",
    "column",
    "age",
    "data",
    "visits",
    "data",
    "priority",
    "data",
    "course",
    "added",
    "labels",
    "index",
    "difference",
    "automatically",
    "pulled",
    "column",
    "names",
    "important",
    "know",
    "dealing",
    "data",
    "frame",
    "importing",
    "data",
    "frame",
    "way",
    "looking",
    "type",
    "looked",
    "head",
    "tail",
    "looking",
    "data",
    "really",
    "quick",
    "also",
    "index",
    "columns",
    "values",
    "note",
    "brackets",
    "end",
    "next",
    "thing",
    "want",
    "go",
    "ahead",
    "since",
    "dealing",
    "data",
    "science",
    "want",
    "go",
    "describe",
    "data",
    "going",
    "manipulate",
    "minute",
    "let",
    "see",
    "generates",
    "see",
    "right",
    "age",
    "visits",
    "looking",
    "data",
    "let",
    "go",
    "way",
    "animal",
    "age",
    "visits",
    "priority",
    "nice",
    "job",
    "generating",
    "age",
    "versus",
    "visits",
    "data",
    "account",
    "means",
    "standard",
    "deviation",
    "minimum",
    "value",
    "25",
    "group",
    "50",
    "75",
    "maximum",
    "value",
    "look",
    "familiar",
    "data",
    "science",
    "setup",
    "describe",
    "quick",
    "look",
    "data",
    "frame",
    "data",
    "let",
    "start",
    "manipulating",
    "data",
    "frame",
    "moving",
    "stuff",
    "around",
    "start",
    "transposing",
    "simply",
    "capital",
    "transpose",
    "run",
    "flips",
    "columns",
    "indexes",
    "indexes",
    "column",
    "names",
    "columns",
    "indexes",
    "animal",
    "age",
    "visits",
    "priority",
    "come",
    "data",
    "shaped",
    "wrong",
    "4x6",
    "quickly",
    "swap",
    "backwards",
    "big",
    "deal",
    "also",
    "sort",
    "data",
    "something",
    "ca",
    "difficult",
    "lot",
    "packages",
    "data",
    "frame",
    "really",
    "easy",
    "take",
    "data",
    "frame",
    "df2",
    "going",
    "sort",
    "underscore",
    "values",
    "equals",
    "age",
    "run",
    "see",
    "default",
    "ascending",
    "everything",
    "else",
    "organized",
    "look",
    "indexes",
    "moved",
    "around",
    "index",
    "moves",
    "whole",
    "row",
    "one",
    "piece",
    "data",
    "sorted",
    "quick",
    "way",
    "sort",
    "age",
    "different",
    "data",
    "data",
    "frame",
    "addition",
    "sorting",
    "also",
    "slice",
    "data",
    "frame",
    "df2",
    "look",
    "familiar",
    "earlier",
    "one",
    "three",
    "going",
    "pull",
    "oops",
    "help",
    "use",
    "df",
    "instead",
    "going",
    "pull",
    "one",
    "three",
    "zero",
    "b",
    "two",
    "b",
    "one",
    "c",
    "two",
    "one",
    "two",
    "include",
    "three",
    "standard",
    "python",
    "even",
    "something",
    "like",
    "combine",
    "always",
    "fun",
    "remember",
    "returns",
    "data",
    "frame",
    "take",
    "df2",
    "dot",
    "sort",
    "values",
    "equals",
    "age",
    "kind",
    "fun",
    "going",
    "slice",
    "go",
    "double",
    "check",
    "typing",
    "run",
    "see",
    "fa",
    "fa",
    "1",
    "two",
    "quickly",
    "create",
    "whole",
    "string",
    "narrows",
    "know",
    "sort",
    "slice",
    "kinds",
    "fun",
    "things",
    "data",
    "frame",
    "go",
    "back",
    "original",
    "one",
    "run",
    "go",
    "slice",
    "row",
    "also",
    "query",
    "data",
    "frame",
    "df2",
    "little",
    "different",
    "going",
    "create",
    "array",
    "within",
    "array",
    "case",
    "going",
    "look",
    "oh",
    "let",
    "age",
    "comma",
    "visits",
    "look",
    "different",
    "format",
    "one",
    "three",
    "done",
    "slicing",
    "integer",
    "value",
    "done",
    "df2",
    "age",
    "comma",
    "visits",
    "array",
    "run",
    "see",
    "get",
    "two",
    "columns",
    "get",
    "age",
    "visits",
    "quick",
    "way",
    "select",
    "two",
    "columns",
    "select",
    "number",
    "columns",
    "working",
    "stop",
    "slicing",
    "almost",
    "identical",
    "slice",
    "location",
    "uses",
    "integer",
    "location",
    "one",
    "comma",
    "three",
    "push",
    "pandas",
    "move",
    "particular",
    "setup",
    "instead",
    "regular",
    "slice",
    "confusing",
    "slice",
    "one",
    "three",
    "select",
    "age",
    "visits",
    "push",
    "go",
    "ahead",
    "move",
    "eye",
    "location",
    "thing",
    "see",
    "bc",
    "also",
    "copy",
    "command",
    "df3",
    "equals",
    "df2",
    "copy",
    "going",
    "create",
    "straight",
    "copy",
    "course",
    "df3",
    "df2",
    "df3",
    "equals",
    "let",
    "df3",
    "dot",
    "null",
    "looking",
    "null",
    "values",
    "return",
    "nice",
    "map",
    "see",
    "everything",
    "false",
    "except",
    "go",
    "cat",
    "h",
    "null",
    "go",
    "damn",
    "couple",
    "also",
    "underneath",
    "let",
    "see",
    "dog",
    "okay",
    "bunch",
    "nulls",
    "let",
    "look",
    "see",
    "false",
    "true",
    "null",
    "value",
    "create",
    "quick",
    "chart",
    "null",
    "values",
    "use",
    "things",
    "leverage",
    "null",
    "value",
    "maybe",
    "take",
    "average",
    "something",
    "fill",
    "null",
    "spaces",
    "data",
    "also",
    "modify",
    "location",
    "df3",
    "location",
    "notice",
    "location",
    "location",
    "ilocation",
    "integer",
    "location",
    "uses",
    "case",
    "variables",
    "left",
    "go",
    "set",
    "equal",
    "let",
    "um",
    "pick",
    "spot",
    "let",
    "go",
    "back",
    "let",
    "f",
    "let",
    "see",
    "looking",
    "oh",
    "go",
    "let",
    "f",
    "h",
    "f",
    "set",
    "age",
    "find",
    "incorrect",
    "data",
    "go",
    "ahead",
    "switch",
    "df3",
    "equal",
    "going",
    "print",
    "df3",
    "go",
    "f",
    "age",
    "changing",
    "value",
    "df3",
    "changing",
    "actual",
    "data",
    "frame",
    "remember",
    "lot",
    "stuff",
    "slice",
    "like",
    "returns",
    "another",
    "data",
    "frame",
    "changes",
    "actual",
    "data",
    "frame",
    "value",
    "data",
    "frame",
    "covered",
    "uh",
    "location",
    "eye",
    "location",
    "null",
    "making",
    "copy",
    "eye",
    "location",
    "equivalent",
    "slice",
    "also",
    "selecting",
    "columns",
    "want",
    "dive",
    "take",
    "little",
    "detour",
    "let",
    "look",
    "df3",
    "means",
    "kind",
    "nice",
    "either",
    "select",
    "single",
    "column",
    "way",
    "add",
    "column",
    "selection",
    "right",
    "like",
    "could",
    "age",
    "look",
    "mean",
    "creates",
    "series",
    "run",
    "age",
    "take",
    "instead",
    "selecting",
    "whole",
    "setup",
    "age",
    "visits",
    "priority",
    "animal",
    "well",
    "integers",
    "really",
    "hard",
    "values",
    "average",
    "guess",
    "could",
    "histogram",
    "probably",
    "look",
    "later",
    "two",
    "things",
    "really",
    "look",
    "age",
    "visits",
    "average",
    "mean",
    "age",
    "mean",
    "visits",
    "let",
    "df3",
    "visits",
    "go",
    "steal",
    "visits",
    "remember",
    "different",
    "functions",
    "looked",
    "series",
    "well",
    "sum",
    "run",
    "see",
    "sum",
    "could",
    "also",
    "look",
    "minimum",
    "remember",
    "minimum",
    "one",
    "max",
    "functionality",
    "go",
    "back",
    "summing",
    "adding",
    "together",
    "real",
    "quick",
    "shown",
    "take",
    "series",
    "operations",
    "put",
    "data",
    "frame",
    "actually",
    "interesting",
    "one",
    "df3",
    "sum",
    "run",
    "see",
    "different",
    "summations",
    "combines",
    "like",
    "way",
    "combines",
    "strings",
    "priority",
    "animal",
    "looked",
    "null",
    "also",
    "looked",
    "copying",
    "along",
    "different",
    "slices",
    "talked",
    "earlier",
    "let",
    "talk",
    "strings",
    "let",
    "dive",
    "string",
    "setup",
    "let",
    "go",
    "ahead",
    "create",
    "string",
    "series",
    "string",
    "equals",
    "pd",
    "series",
    "put",
    "right",
    "c",
    "b",
    "c",
    "popped",
    "null",
    "value",
    "cow",
    "owl",
    "know",
    "picked",
    "cal",
    "al",
    "background",
    "someone",
    "must",
    "like",
    "animals",
    "course",
    "string",
    "run",
    "see",
    "leave",
    "r",
    "get",
    "error",
    "put",
    "see",
    "simple",
    "series",
    "0",
    "1",
    "c",
    "2",
    "automatically",
    "indexes",
    "0",
    "go",
    "string",
    "dot",
    "lower",
    "talking",
    "data",
    "frame",
    "case",
    "data",
    "series",
    "string",
    "case",
    "use",
    "string",
    "function",
    "str",
    "going",
    "make",
    "lower",
    "go",
    "ahead",
    "put",
    "brackets",
    "see",
    "gone",
    "capital",
    "capital",
    "c",
    "abc",
    "baca",
    "cba",
    "cow",
    "al",
    "lower",
    "case",
    "already",
    "course",
    "want",
    "go",
    "lower",
    "also",
    "upper",
    "go",
    "ahead",
    "run",
    "see",
    "c",
    "baca",
    "everything",
    "capitalized",
    "except",
    "null",
    "value",
    "still",
    "null",
    "right",
    "looked",
    "basic",
    "string",
    "see",
    "string",
    "functions",
    "upper",
    "lower",
    "going",
    "jump",
    "important",
    "topic",
    "even",
    "going",
    "give",
    "header",
    "important",
    "topic",
    "missing",
    "values",
    "panda",
    "great",
    "tools",
    "dive",
    "call",
    "work",
    "df4",
    "remember",
    "df",
    "copy",
    "going",
    "make",
    "copy",
    "df3",
    "let",
    "take",
    "quick",
    "look",
    "data",
    "working",
    "oops",
    "df3",
    "forgot",
    "three",
    "go",
    "cats",
    "snakes",
    "dogs",
    "hopefully",
    "container",
    "would",
    "probably",
    "mean",
    "made",
    "copy",
    "going",
    "working",
    "df4",
    "reason",
    "made",
    "copy",
    "want",
    "go",
    "ahead",
    "fill",
    "data",
    "simply",
    "fill",
    "going",
    "give",
    "value",
    "want",
    "put",
    "give",
    "value",
    "run",
    "see",
    "df4",
    "n",
    "filled",
    "value",
    "four",
    "thing",
    "lot",
    "times",
    "compute",
    "mean",
    "first",
    "might",
    "mean",
    "age",
    "equals",
    "df4",
    "want",
    "go",
    "ahead",
    "age",
    "dot",
    "mean",
    "something",
    "like",
    "df4",
    "want",
    "select",
    "age",
    "want",
    "fill",
    "mean",
    "age",
    "run",
    "see",
    "df4h",
    "means",
    "quick",
    "way",
    "showing",
    "combine",
    "let",
    "go",
    "back",
    "original",
    "one",
    "go",
    "run",
    "keeping",
    "good",
    "practices",
    "df5",
    "equals",
    "df",
    "three",
    "dot",
    "copy",
    "print",
    "df5",
    "original",
    "one",
    "df5",
    "drop",
    "missing",
    "data",
    "going",
    "simply",
    "drop",
    "going",
    "use",
    "equals",
    "going",
    "drop",
    "row",
    "missing",
    "data",
    "see",
    "missing",
    "data",
    "h",
    "let",
    "go",
    "ahead",
    "see",
    "df5",
    "looks",
    "like",
    "go",
    "gone",
    "h",
    "create",
    "new",
    "data",
    "frame",
    "missing",
    "values",
    "lot",
    "data",
    "dropping",
    "values",
    "good",
    "way",
    "take",
    "care",
    "miss",
    "data",
    "whole",
    "lot",
    "data",
    "working",
    "like",
    "iris",
    "data",
    "set",
    "something",
    "like",
    "something",
    "small",
    "want",
    "start",
    "trying",
    "find",
    "way",
    "fill",
    "data",
    "lose",
    "computational",
    "power",
    "data",
    "got",
    "quick",
    "look",
    "processing",
    "null",
    "values",
    "missing",
    "values",
    "fill",
    "usually",
    "means",
    "people",
    "use",
    "medium",
    "mode",
    "different",
    "ways",
    "fill",
    "one",
    "way",
    "means",
    "also",
    "drop",
    "rows",
    "two",
    "main",
    "things",
    "missing",
    "data",
    "go",
    "uh",
    "going",
    "cover",
    "next",
    "love",
    "data",
    "frames",
    "file",
    "operations",
    "saved",
    "much",
    "time",
    "many",
    "different",
    "tools",
    "bringing",
    "data",
    "saving",
    "data",
    "looking",
    "data",
    "frame",
    "file",
    "operations",
    "really",
    "streamlined",
    "know",
    "many",
    "times",
    "go",
    "different",
    "data",
    "downloads",
    "panda",
    "download",
    "standard",
    "widely",
    "used",
    "let",
    "start",
    "common",
    "file",
    "csv",
    "df3",
    "csv",
    "animal",
    "let",
    "show",
    "folder",
    "going",
    "right",
    "untitled",
    "things",
    "nothing",
    "labeled",
    "animal",
    "go",
    "ahead",
    "run",
    "saved",
    "animal",
    "hard",
    "drive",
    "see",
    "animal",
    "folder",
    "let",
    "edit",
    "notepad",
    "oh",
    "let",
    "open",
    "regular",
    "notepad",
    "go",
    "wordpad",
    "open",
    "see",
    "comma",
    "separated",
    "titles",
    "index",
    "categories",
    "top",
    "index",
    "comma",
    "different",
    "data",
    "separated",
    "commas",
    "standard",
    "csv",
    "file",
    "going",
    "send",
    "csv",
    "notice",
    "format",
    "dot",
    "2",
    "underscore",
    "csv",
    "name",
    "file",
    "sending",
    "also",
    "put",
    "complete",
    "path",
    "default",
    "going",
    "go",
    "whatever",
    "active",
    "directory",
    "program",
    "running",
    "folders",
    "df3",
    "csv",
    "going",
    "put",
    "want",
    "also",
    "get",
    "back",
    "call",
    "one",
    "df",
    "underscore",
    "animal",
    "equals",
    "pd",
    "read",
    "underscore",
    "csv",
    "always",
    "remember",
    "two",
    "underscore",
    "csv",
    "read",
    "underscore",
    "csv",
    "always",
    "want",
    "like",
    "capital",
    "underscore",
    "going",
    "active",
    "directory",
    "print",
    "df",
    "animal",
    "let",
    "ahead",
    "want",
    "look",
    "first",
    "three",
    "lines",
    "go",
    "ahead",
    "run",
    "see",
    "first",
    "three",
    "lines",
    "match",
    "saved",
    "csv",
    "easy",
    "save",
    "import",
    "csv",
    "files",
    "turns",
    "df",
    "3",
    "also",
    "2",
    "xl",
    "actually",
    "lot",
    "different",
    "formats",
    "know",
    "old",
    "school",
    "excel",
    "real",
    "popular",
    "long",
    "still",
    "go",
    "ahead",
    "save",
    "going",
    "call",
    "sheet",
    "named",
    "sheet1",
    "also",
    "df",
    "call",
    "animal2",
    "animal2",
    "one",
    "going",
    "come",
    "format",
    "go",
    "still",
    "animal",
    "xlsx",
    "sheet",
    "one",
    "coming",
    "index",
    "columns",
    "equals",
    "none",
    "going",
    "going",
    "suppress",
    "indexing",
    "columns",
    "n",
    "values",
    "assign",
    "0",
    "indexes",
    "says",
    "index",
    "columns",
    "equals",
    "none",
    "added",
    "null",
    "values",
    "values",
    "want",
    "make",
    "sure",
    "marked",
    "n",
    "go",
    "ahead",
    "print",
    "animal",
    "animal",
    "2",
    "go",
    "let",
    "run",
    "let",
    "make",
    "let",
    "whole",
    "thing",
    "go",
    "ahead",
    "run",
    "probably",
    "help",
    "completely",
    "forgot",
    "read",
    "animal",
    "2",
    "equals",
    "excel",
    "go",
    "excel",
    "go",
    "ahead",
    "run",
    "expect",
    "happening",
    "data",
    "frame",
    "flick",
    "back",
    "folder",
    "see",
    "animal",
    "one",
    "excel",
    "one",
    "csv",
    "two",
    "file",
    "types",
    "formats",
    "two",
    "common",
    "ones",
    "used",
    "know",
    "many",
    "times",
    "stuff",
    "excel",
    "need",
    "pull",
    "ever",
    "played",
    "excel",
    "nightmare",
    "back",
    "end",
    "way",
    "indexing",
    "makes",
    "quick",
    "easy",
    "pull",
    "excel",
    "spreadsheet",
    "looked",
    "two",
    "different",
    "ways",
    "bring",
    "data",
    "save",
    "files",
    "looked",
    "kinds",
    "different",
    "ways",
    "manipulating",
    "data",
    "set",
    "slicing",
    "creating",
    "data",
    "frame",
    "let",
    "get",
    "put",
    "visualization",
    "always",
    "big",
    "thing",
    "end",
    "one",
    "lets",
    "check",
    "see",
    "make",
    "sure",
    "looks",
    "right",
    "also",
    "going",
    "show",
    "somebody",
    "else",
    "makes",
    "clear",
    "going",
    "see",
    "something",
    "visual",
    "really",
    "important",
    "part",
    "data",
    "science",
    "let",
    "go",
    "ahead",
    "bring",
    "tools",
    "going",
    "import",
    "numpy",
    "np",
    "want",
    "make",
    "sure",
    "amber",
    "sign",
    "matte",
    "plot",
    "library",
    "line",
    "lets",
    "jupiter",
    "know",
    "going",
    "print",
    "page",
    "using",
    "different",
    "ide",
    "really",
    "necessarily",
    "need",
    "help",
    "displays",
    "correctly",
    "jupiter",
    "notebook",
    "remember",
    "earlier",
    "could",
    "create",
    "uh",
    "gon",
    "na",
    "call",
    "ts",
    "gon",
    "na",
    "create",
    "pandas",
    "cute",
    "cuddly",
    "creatures",
    "versus",
    "pandem",
    "short",
    "pandemonium",
    "ts",
    "equals",
    "pd",
    "series",
    "going",
    "create",
    "random",
    "setup",
    "index",
    "set",
    "equal",
    "panda",
    "date",
    "range",
    "today",
    "periods",
    "equals",
    "50",
    "50",
    "match",
    "want",
    "notice",
    "something",
    "import",
    "matplot",
    "library",
    "already",
    "pandas",
    "already",
    "connection",
    "interface",
    "matplot",
    "library",
    "import",
    "go",
    "ahead",
    "ts",
    "equals",
    "ts",
    "dot",
    "cumulative",
    "sum",
    "gon",
    "na",
    "cumulative",
    "sum",
    "little",
    "reformatting",
    "go",
    "ahead",
    "plot",
    "let",
    "take",
    "look",
    "looks",
    "like",
    "nice",
    "graph",
    "dates",
    "bottom",
    "set",
    "nice",
    "range",
    "case",
    "minus",
    "four",
    "looks",
    "like",
    "two",
    "maybe",
    "one",
    "minus",
    "four",
    "one",
    "done",
    "plotted",
    "basic",
    "series",
    "single",
    "row",
    "data",
    "set",
    "indexes",
    "also",
    "whole",
    "data",
    "frame",
    "let",
    "see",
    "looks",
    "like",
    "first",
    "let",
    "go",
    "ahead",
    "create",
    "data",
    "frame",
    "random",
    "numbers",
    "going",
    "50",
    "4",
    "go",
    "create",
    "columns",
    "b",
    "x",
    "index",
    "gon",
    "na",
    "use",
    "index",
    "keep",
    "nice",
    "uniform",
    "already",
    "generated",
    "dates",
    "go",
    "like",
    "series",
    "also",
    "data",
    "frame",
    "df",
    "equals",
    "df",
    "cumulative",
    "sum",
    "going",
    "sum",
    "whole",
    "data",
    "frame",
    "simply",
    "df",
    "plot",
    "let",
    "put",
    "let",
    "go",
    "ahead",
    "run",
    "look",
    "easy",
    "quick",
    "generate",
    "nice",
    "graph",
    "different",
    "data",
    "shared",
    "index",
    "shared",
    "columns",
    "different",
    "data",
    "one",
    "easily",
    "look",
    "compare",
    "quick",
    "way",
    "displaying",
    "data",
    "imagine",
    "working",
    "oh",
    "think",
    "mentioned",
    "stock",
    "earlier",
    "analysis",
    "stock",
    "lately",
    "date",
    "would",
    "stock",
    "stock",
    "b",
    "stock",
    "x",
    "whatever",
    "put",
    "one",
    "chart",
    "see",
    "look",
    "like",
    "next",
    "far",
    "graphs",
    "look",
    "like",
    "randomly",
    "generated",
    "stock",
    "lot",
    "randomness",
    "one",
    "reasons",
    "actually",
    "play",
    "models",
    "testing",
    "lot",
    "features",
    "pandas",
    "going",
    "show",
    "one",
    "thing",
    "things",
    "like",
    "go",
    "deep",
    "looked",
    "top",
    "two",
    "importing",
    "data",
    "csv",
    "excel",
    "spreadsheet",
    "showed",
    "quickly",
    "plot",
    "data",
    "settings",
    "going",
    "one",
    "thing",
    "kind",
    "fun",
    "one",
    "changes",
    "markdown",
    "run",
    "would",
    "remove",
    "repeated",
    "data",
    "using",
    "pandas",
    "data",
    "set",
    "comes",
    "maybe",
    "feeding",
    "one",
    "location",
    "instead",
    "noting",
    "repeated",
    "date",
    "like",
    "oh",
    "let",
    "go",
    "back",
    "stocks",
    "good",
    "visual",
    "stocks",
    "23rd",
    "adds",
    "another",
    "row",
    "row",
    "importing",
    "23rd",
    "data",
    "repeated",
    "three",
    "times",
    "need",
    "go",
    "back",
    "figure",
    "get",
    "rid",
    "track",
    "let",
    "start",
    "creating",
    "quick",
    "database",
    "data",
    "frame",
    "database",
    "keep",
    "saying",
    "databases",
    "data",
    "frame",
    "make",
    "data",
    "frame",
    "using",
    "dictionary",
    "going",
    "data",
    "frame",
    "one",
    "data",
    "series",
    "fine",
    "df",
    "print",
    "see",
    "one",
    "two",
    "two",
    "two",
    "two",
    "four",
    "five",
    "four",
    "five",
    "six",
    "seven",
    "would",
    "remove",
    "well",
    "neat",
    "feature",
    "data",
    "frames",
    "called",
    "shift",
    "along",
    "another",
    "feature",
    "lets",
    "us",
    "select",
    "certain",
    "date",
    "information",
    "go",
    "location",
    "function",
    "put",
    "brackets",
    "remember",
    "location",
    "location",
    "let",
    "spread",
    "little",
    "bit",
    "really",
    "easy",
    "read",
    "fact",
    "going",
    "go",
    "upscale",
    "since",
    "little",
    "bit",
    "complicated",
    "see",
    "location",
    "dfa",
    "going",
    "shift",
    "one",
    "default",
    "actually",
    "change",
    "two",
    "three",
    "even",
    "minus",
    "one",
    "shifts",
    "way",
    "going",
    "shift",
    "one",
    "default",
    "going",
    "say",
    "equal",
    "df",
    "want",
    "look",
    "one",
    "two",
    "two",
    "two",
    "two",
    "two",
    "run",
    "logic",
    "shift",
    "gets",
    "rid",
    "duplicates",
    "went",
    "one",
    "two",
    "two",
    "two",
    "two",
    "four",
    "four",
    "five",
    "whatever",
    "one",
    "two",
    "two",
    "two",
    "four",
    "four",
    "four",
    "five",
    "five",
    "five",
    "six",
    "six",
    "six",
    "one",
    "two",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "see",
    "index",
    "deletes",
    "index",
    "stays",
    "obviously",
    "want",
    "dates",
    "change",
    "working",
    "index",
    "dated",
    "setup",
    "deletes",
    "duplicates",
    "quick",
    "way",
    "introduce",
    "one",
    "fact",
    "add",
    "logic",
    "gates",
    "two",
    "eye",
    "location",
    "allows",
    "use",
    "shift",
    "shift",
    "function",
    "location",
    "selects",
    "based",
    "true",
    "false",
    "wow",
    "actually",
    "covered",
    "lot",
    "today",
    "pandas",
    "really",
    "covered",
    "basics",
    "selecting",
    "different",
    "series",
    "column",
    "data",
    "frame",
    "index",
    "rows",
    "slice",
    "plot",
    "hopefully",
    "take",
    "beyond",
    "start",
    "combining",
    "different",
    "things",
    "create",
    "long",
    "strings",
    "really",
    "explore",
    "data",
    "generate",
    "nice",
    "graphs",
    "jupyter",
    "notebook",
    "great",
    "demo",
    "show",
    "others",
    "know",
    "jupiter",
    "notebook",
    "jupyter",
    "notebook",
    "download",
    "always",
    "never",
    "really",
    "look",
    "closely",
    "downloads",
    "load",
    "html",
    "post",
    "blog",
    "got",
    "neat",
    "feature",
    "really",
    "powerful",
    "tool",
    "really",
    "powerful",
    "tools",
    "data",
    "science",
    "getting",
    "learning",
    "started",
    "half",
    "battle",
    "could",
    "free",
    "visit",
    "skill",
    "simply",
    "learn",
    "click",
    "link",
    "description",
    "know",
    "today",
    "going",
    "study",
    "matplot",
    "library",
    "python",
    "code",
    "matte",
    "plot",
    "library",
    "types",
    "plots",
    "plotting",
    "graphs",
    "sub",
    "graphs",
    "adding",
    "graph",
    "inside",
    "graph",
    "graph",
    "parameters",
    "title",
    "label",
    "legend",
    "line",
    "graphs",
    "line",
    "types",
    "color",
    "transparency",
    "canvas",
    "grid",
    "axis",
    "range",
    "2d",
    "plots",
    "scatter",
    "step",
    "bar",
    "fill",
    "radar",
    "chart",
    "histogram",
    "contour",
    "image",
    "3d",
    "surface",
    "image",
    "hit",
    "practice",
    "example",
    "pie",
    "chart",
    "let",
    "start",
    "matte",
    "plot",
    "library",
    "map",
    "plot",
    "library",
    "open",
    "source",
    "drawing",
    "library",
    "supports",
    "rich",
    "drawing",
    "types",
    "used",
    "draw",
    "2d",
    "3d",
    "graphics",
    "many",
    "packages",
    "matplot",
    "library",
    "going",
    "cover",
    "basics",
    "many",
    "packages",
    "sit",
    "top",
    "maplight",
    "library",
    "ca",
    "even",
    "cover",
    "today",
    "hit",
    "main",
    "one",
    "good",
    "understanding",
    "matplot",
    "library",
    "basics",
    "understand",
    "data",
    "easily",
    "visualizing",
    "help",
    "matplot",
    "library",
    "generate",
    "plots",
    "histograms",
    "bar",
    "charts",
    "many",
    "charts",
    "lines",
    "code",
    "basic",
    "types",
    "plots",
    "see",
    "go",
    "bar",
    "chart",
    "histogram",
    "boy",
    "use",
    "lot",
    "histograms",
    "stuff",
    "scatter",
    "plot",
    "line",
    "chart",
    "pie",
    "chart",
    "area",
    "graph",
    "let",
    "start",
    "plotting",
    "going",
    "using",
    "jupiter",
    "notebook",
    "use",
    "python",
    "interfaces",
    "programming",
    "scripting",
    "running",
    "course",
    "really",
    "like",
    "jupiter",
    "notebook",
    "basic",
    "lot",
    "basic",
    "stuff",
    "visual",
    "jupiter",
    "notebook",
    "opens",
    "case",
    "using",
    "google",
    "chrome",
    "go",
    "new",
    "create",
    "new",
    "python",
    "3",
    "set",
    "familiar",
    "jupyter",
    "notebook",
    "tutorial",
    "covers",
    "basics",
    "look",
    "tutorials",
    "usually",
    "cover",
    "number",
    "showing",
    "set",
    "jupiter",
    "anaconda",
    "use",
    "jupiter",
    "anaconda",
    "fact",
    "let",
    "go",
    "ahead",
    "open",
    "take",
    "look",
    "see",
    "looks",
    "like",
    "see",
    "anaconda",
    "navigator",
    "install",
    "automatically",
    "install",
    "jupyter",
    "notebook",
    "also",
    "installs",
    "lot",
    "things",
    "know",
    "people",
    "like",
    "qt",
    "console",
    "python",
    "spyder",
    "never",
    "used",
    "actually",
    "use",
    "notepad",
    "plus",
    "plus",
    "one",
    "editors",
    "use",
    "jupiter",
    "notebook",
    "lot",
    "easy",
    "visual",
    "programming",
    "even",
    "simple",
    "script",
    "python",
    "take",
    "jupyter",
    "notebook",
    "save",
    "always",
    "go",
    "file",
    "download",
    "python",
    "program",
    "download",
    "actual",
    "python",
    "versus",
    "ipython",
    "saves",
    "let",
    "go",
    "ahead",
    "dive",
    "see",
    "got",
    "going",
    "let",
    "go",
    "ahead",
    "put",
    "matplot",
    "library",
    "tutorial",
    "going",
    "turn",
    "cell",
    "mark",
    "actually",
    "run",
    "see",
    "nice",
    "little",
    "title",
    "jupiter",
    "notebook",
    "mat",
    "plot",
    "library",
    "let",
    "import",
    "pi",
    "lab",
    "back",
    "one",
    "let",
    "go",
    "ahead",
    "print",
    "go",
    "pi",
    "lab",
    "version",
    "let",
    "go",
    "ahead",
    "run",
    "going",
    "import",
    "pi",
    "lab",
    "module",
    "matplot",
    "library",
    "find",
    "version",
    "always",
    "important",
    "note",
    "version",
    "probably",
    "reading",
    "article",
    "said",
    "number",
    "one",
    "thing",
    "python",
    "programmers",
    "struggle",
    "remembering",
    "version",
    "working",
    "making",
    "sure",
    "going",
    "one",
    "platform",
    "version",
    "gon",
    "na",
    "graph",
    "things",
    "think",
    "need",
    "data",
    "graph",
    "going",
    "import",
    "numpy",
    "np",
    "familiar",
    "numpy",
    "definitely",
    "go",
    "back",
    "check",
    "numpy",
    "tutorial",
    "many",
    "different",
    "things",
    "dealing",
    "reshaping",
    "data",
    "creating",
    "data",
    "going",
    "use",
    "create",
    "data",
    "us",
    "lot",
    "ways",
    "create",
    "data",
    "going",
    "use",
    "space",
    "going",
    "create",
    "numpy",
    "array",
    "way",
    "read",
    "going",
    "create",
    "numbers",
    "0",
    "10",
    "going",
    "create",
    "25",
    "numbers",
    "going",
    "divide",
    "equally",
    "0",
    "x",
    "coordinates",
    "probably",
    "coordinates",
    "something",
    "simple",
    "like",
    "x",
    "times",
    "x",
    "plus",
    "2",
    "let",
    "take",
    "look",
    "going",
    "print",
    "x",
    "print",
    "let",
    "go",
    "ahead",
    "run",
    "let",
    "see",
    "got",
    "going",
    "x",
    "coordinates",
    "0",
    "etc",
    "look",
    "xy",
    "plot",
    "0",
    "quick",
    "reminder",
    "going",
    "print",
    "np",
    "array",
    "x",
    "comma",
    "25",
    "comma",
    "reason",
    "want",
    "want",
    "show",
    "something",
    "lot",
    "times",
    "program",
    "returns",
    "x",
    "comma",
    "array",
    "x",
    "comma",
    "x",
    "comma",
    "x",
    "comma",
    "working",
    "pie",
    "plot",
    "separate",
    "reshape",
    "start",
    "pairs",
    "like",
    "reshape",
    "know",
    "25",
    "pairs",
    "switch",
    "2",
    "25",
    "kind",
    "goofy",
    "anyways",
    "reshape",
    "going",
    "reshape",
    "25",
    "2",
    "back",
    "2",
    "25",
    "run",
    "see",
    "end",
    "output",
    "x",
    "two",
    "different",
    "arrays",
    "important",
    "want",
    "x",
    "separate",
    "numpy",
    "stuff",
    "important",
    "understand",
    "format",
    "matplot",
    "library",
    "works",
    "works",
    "array",
    "x",
    "match",
    "array",
    "one",
    "25",
    "different",
    "entities",
    "basic",
    "plotting",
    "data",
    "takes",
    "one",
    "command",
    "draw",
    "graph",
    "data",
    "use",
    "imported",
    "pi",
    "lab",
    "take",
    "pi",
    "lab",
    "key",
    "plot",
    "plotting",
    "line",
    "want",
    "x",
    "coordinates",
    "coordinates",
    "throw",
    "r",
    "r",
    "simply",
    "means",
    "red",
    "going",
    "draw",
    "line",
    "red",
    "let",
    "go",
    "run",
    "actually",
    "switch",
    "around",
    "wanted",
    "different",
    "b",
    "blue",
    "lot",
    "fun",
    "yellow",
    "hard",
    "see",
    "yellow",
    "go",
    "go",
    "ahead",
    "stick",
    "red",
    "run",
    "presentations",
    "try",
    "consistent",
    "know",
    "business",
    "shareholders",
    "send",
    "spreadsheet",
    "losses",
    "red",
    "use",
    "red",
    "losses",
    "graph",
    "try",
    "consistent",
    "use",
    "green",
    "profit",
    "money",
    "necessarily",
    "use",
    "green",
    "whatever",
    "using",
    "whatever",
    "company",
    "using",
    "try",
    "mirror",
    "way",
    "people",
    "going",
    "confused",
    "switch",
    "data",
    "around",
    "every",
    "time",
    "one",
    "graph",
    "red",
    "loss",
    "one",
    "graph",
    "blue",
    "loss",
    "gets",
    "really",
    "confusing",
    "make",
    "sure",
    "consistent",
    "graphs",
    "coloring",
    "something",
    "know",
    "going",
    "cover",
    "minute",
    "canvas",
    "size",
    "canvas",
    "going",
    "next",
    "going",
    "look",
    "sub",
    "graphs",
    "okay",
    "let",
    "take",
    "pi",
    "lab",
    "create",
    "sub",
    "plot",
    "one",
    "things",
    "also",
    "know",
    "working",
    "matplot",
    "library",
    "setting",
    "drawing",
    "canvas",
    "pi",
    "lab",
    "imported",
    "pi",
    "lab",
    "drawing",
    "images",
    "important",
    "know",
    "subplot",
    "going",
    "give",
    "different",
    "values",
    "going",
    "represent",
    "rows",
    "columns",
    "indexes",
    "let",
    "one",
    "two",
    "one",
    "going",
    "first",
    "row",
    "second",
    "column",
    "index",
    "like",
    "stack",
    "graphs",
    "things",
    "like",
    "worry",
    "much",
    "indexes",
    "rows",
    "columns",
    "want",
    "go",
    "ahead",
    "use",
    "row",
    "one",
    "column",
    "two",
    "going",
    "one",
    "object",
    "probably",
    "two",
    "plot",
    "data",
    "onto",
    "subplot",
    "order",
    "important",
    "going",
    "stick",
    "x",
    "comma",
    "let",
    "going",
    "add",
    "third",
    "parameter",
    "remember",
    "red",
    "going",
    "add",
    "shorthand",
    "dash",
    "dash",
    "dashed",
    "lines",
    "plots",
    "data",
    "row",
    "one",
    "column",
    "two",
    "going",
    "let",
    "another",
    "one",
    "going",
    "row",
    "one",
    "let",
    "column",
    "two",
    "index",
    "two",
    "time",
    "going",
    "add",
    "g",
    "green",
    "denotes",
    "style",
    "going",
    "set",
    "pylab",
    "subplot",
    "go",
    "right",
    "lab",
    "got",
    "go",
    "ahead",
    "plot",
    "pi",
    "lab",
    "plot",
    "instead",
    "x",
    "want",
    "comma",
    "x",
    "oops",
    "messed",
    "wrong",
    "spot",
    "go",
    "move",
    "real",
    "quick",
    "goes",
    "plot",
    "part",
    "subplot",
    "tells",
    "row",
    "column",
    "index",
    "pi",
    "plot",
    "tells",
    "data",
    "case",
    "switched",
    "color",
    "style",
    "shorthand",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "takes",
    "canvas",
    "splits",
    "two",
    "different",
    "graphs",
    "red",
    "one",
    "dashed",
    "lines",
    "green",
    "one",
    "little",
    "stars",
    "going",
    "take",
    "let",
    "um",
    "fun",
    "let",
    "change",
    "run",
    "index",
    "one",
    "puts",
    "index",
    "also",
    "gives",
    "warning",
    "strange",
    "way",
    "two",
    "subplots",
    "depreciated",
    "another",
    "way",
    "people",
    "ignore",
    "warning",
    "going",
    "go",
    "away",
    "anytime",
    "soon",
    "using",
    "setup",
    "happens",
    "instead",
    "let",
    "change",
    "column",
    "find",
    "happens",
    "column",
    "really",
    "like",
    "setup",
    "disappears",
    "let",
    "keep",
    "column",
    "2",
    "let",
    "change",
    "row",
    "second",
    "one",
    "2",
    "run",
    "see",
    "kind",
    "squishes",
    "everything",
    "together",
    "causes",
    "issues",
    "let",
    "take",
    "index",
    "need",
    "unique",
    "index",
    "see",
    "made",
    "changes",
    "said",
    "row",
    "two",
    "look",
    "happens",
    "change",
    "column",
    "two",
    "row",
    "two",
    "column",
    "two",
    "index",
    "two",
    "squished",
    "could",
    "put",
    "another",
    "graph",
    "underneath",
    "kinds",
    "different",
    "things",
    "really",
    "play",
    "numbers",
    "till",
    "get",
    "handle",
    "know",
    "repeat",
    "164",
    "times",
    "according",
    "cambridge",
    "university",
    "completely",
    "new",
    "see",
    "right",
    "go",
    "three",
    "run",
    "go",
    "see",
    "takes",
    "little",
    "bit",
    "sometimes",
    "play",
    "get",
    "numbers",
    "right",
    "hopefully",
    "hit",
    "wrong",
    "one",
    "let",
    "go",
    "three",
    "three",
    "run",
    "go",
    "overlapping",
    "doubled",
    "right",
    "go",
    "ahead",
    "leave",
    "column",
    "row",
    "two",
    "two",
    "different",
    "indexes",
    "appear",
    "nice",
    "neatly",
    "side",
    "side",
    "saw",
    "flashing",
    "put",
    "top",
    "let",
    "highlight",
    "copy",
    "paste",
    "one",
    "two",
    "one",
    "one",
    "two",
    "one",
    "also",
    "one",
    "puts",
    "two",
    "subplots",
    "directly",
    "top",
    "gives",
    "us",
    "warning",
    "see",
    "two",
    "different",
    "sets",
    "data",
    "graphed",
    "top",
    "also",
    "see",
    "indexes",
    "since",
    "one",
    "0",
    "10",
    "green",
    "one",
    "x",
    "axis",
    "one",
    "0",
    "10",
    "took",
    "greatest",
    "value",
    "either",
    "one",
    "used",
    "shared",
    "value",
    "let",
    "next",
    "look",
    "operator",
    "description",
    "go",
    "ahead",
    "turn",
    "cell",
    "markdown",
    "run",
    "looks",
    "nice",
    "fig",
    "remember",
    "talked",
    "canvas",
    "earlier",
    "briefly",
    "mentioned",
    "going",
    "look",
    "little",
    "bit",
    "canvas",
    "later",
    "figure",
    "fid",
    "going",
    "add",
    "axes",
    "going",
    "initialize",
    "subplot",
    "add",
    "subplot",
    "rows",
    "columns",
    "kinds",
    "different",
    "things",
    "let",
    "look",
    "code",
    "see",
    "exactly",
    "going",
    "want",
    "notice",
    "fig",
    "actual",
    "canvas",
    "matplot",
    "library",
    "ax",
    "commonly",
    "used",
    "refer",
    "subplots",
    "creating",
    "subplots",
    "see",
    "ax",
    "equals",
    "plt",
    "subplot",
    "earlier",
    "pi",
    "lab",
    "let",
    "go",
    "ahead",
    "import",
    "pi",
    "plot",
    "matplot",
    "library",
    "going",
    "plt",
    "see",
    "lot",
    "really",
    "standard",
    "industry",
    "call",
    "plt",
    "like",
    "pandas",
    "pd",
    "numpy",
    "array",
    "np",
    "certainly",
    "import",
    "whatever",
    "want",
    "would",
    "stick",
    "standards",
    "going",
    "graph",
    "pi",
    "lab",
    "plt",
    "looks",
    "familiar",
    "reason",
    "want",
    "show",
    "figure",
    "part",
    "works",
    "working",
    "canvas",
    "goes",
    "going",
    "plot",
    "call",
    "fig",
    "going",
    "set",
    "equal",
    "plot",
    "figure",
    "figure",
    "canvas",
    "let",
    "create",
    "variable",
    "called",
    "axes",
    "going",
    "set",
    "equal",
    "fig",
    "dot",
    "add",
    "axes",
    "going",
    "control",
    "left",
    "right",
    "width",
    "height",
    "canvas",
    "zero",
    "one",
    "go",
    "ahead",
    "going",
    "put",
    "stuff",
    "got",
    "point",
    "one",
    "point",
    "eight",
    "point",
    "eight",
    "looking",
    "zero",
    "one",
    "could",
    "say",
    "fifty",
    "percent",
    "ten",
    "percent",
    "eighty",
    "eighty",
    "percent",
    "control",
    "going",
    "control",
    "left",
    "right",
    "along",
    "width",
    "height",
    "width",
    "height",
    "gon",
    "na",
    "use",
    "eighty",
    "percent",
    "going",
    "like",
    "little",
    "indent",
    "left",
    "right",
    "look",
    "familiar",
    "x",
    "use",
    "dot",
    "plot",
    "x",
    "comma",
    "let",
    "give",
    "color",
    "red",
    "since",
    "recreating",
    "graph",
    "let",
    "keep",
    "uniform",
    "oops",
    "helps",
    "use",
    "axis",
    "instead",
    "ax",
    "es",
    "know",
    "came",
    "looks",
    "identical",
    "one",
    "axis",
    "plot",
    "x",
    "comma",
    "red",
    "graph",
    "setup",
    "time",
    "added",
    "variable",
    "equal",
    "figure",
    "dot",
    "add",
    "axes",
    "plot",
    "figures",
    "canvas",
    "axes",
    "working",
    "x",
    "comma",
    "draw",
    "sub",
    "graphs",
    "let",
    "put",
    "like",
    "little",
    "different",
    "totation",
    "going",
    "fig",
    "comma",
    "axes",
    "equal",
    "going",
    "number",
    "rows",
    "going",
    "one",
    "row",
    "columns",
    "equals",
    "two",
    "remember",
    "one",
    "row",
    "two",
    "different",
    "graphs",
    "going",
    "thing",
    "know",
    "figure",
    "canvas",
    "axes",
    "going",
    "create",
    "actually",
    "two",
    "different",
    "axes",
    "going",
    "create",
    "row",
    "1",
    "column",
    "axis",
    "array",
    "information",
    "simply",
    "4",
    "let",
    "x",
    "axes",
    "look",
    "familiar",
    "x",
    "dot",
    "plot",
    "going",
    "x",
    "comma",
    "go",
    "ahead",
    "make",
    "red",
    "keep",
    "everything",
    "looking",
    "remember",
    "nice",
    "uniform",
    "graphs",
    "everything",
    "looks",
    "go",
    "ahead",
    "run",
    "see",
    "get",
    "two",
    "nice",
    "graphs",
    "look",
    "setup",
    "fun",
    "let",
    "change",
    "columns",
    "three",
    "run",
    "see",
    "three",
    "let",
    "see",
    "make",
    "little",
    "bit",
    "interesting",
    "rows",
    "equals",
    "two",
    "see",
    "going",
    "get",
    "attribute",
    "error",
    "trying",
    "scrunch",
    "everything",
    "together",
    "limit",
    "much",
    "stuff",
    "put",
    "one",
    "small",
    "space",
    "important",
    "know",
    "fix",
    "changing",
    "canvas",
    "size",
    "look",
    "minute",
    "ways",
    "change",
    "go",
    "rows",
    "two",
    "columns",
    "equals",
    "one",
    "see",
    "two",
    "nice",
    "images",
    "right",
    "go",
    "back",
    "original",
    "one",
    "row",
    "two",
    "columns",
    "side",
    "side",
    "left",
    "right",
    "also",
    "draw",
    "picture",
    "graph",
    "inside",
    "another",
    "graph",
    "kind",
    "fun",
    "thing",
    "important",
    "note",
    "layer",
    "stuff",
    "top",
    "makes",
    "really",
    "nice",
    "presentation",
    "let",
    "start",
    "uh",
    "fig",
    "let",
    "create",
    "another",
    "figure",
    "going",
    "start",
    "canvas",
    "set",
    "equal",
    "new",
    "canvas",
    "let",
    "axes",
    "call",
    "axes",
    "one",
    "two",
    "axis",
    "one",
    "equals",
    "fig",
    "dot",
    "add",
    "axes",
    "remember",
    "earlier",
    "similar",
    "numbers",
    "used",
    "saying",
    "big",
    "axis",
    "figure",
    "axis",
    "going",
    "big",
    "axes",
    "let",
    "axes",
    "2",
    "equals",
    "another",
    "figure",
    "axes",
    "going",
    "need",
    "data",
    "let",
    "go",
    "ahead",
    "plot",
    "data",
    "axes",
    "axes1",
    "dot",
    "plot",
    "make",
    "simply",
    "x",
    "comma",
    "comma",
    "make",
    "red",
    "let",
    "go",
    "axes2",
    "dot",
    "plot",
    "let",
    "reverse",
    "comma",
    "x",
    "comma",
    "green",
    "go",
    "told",
    "swapping",
    "axes",
    "around",
    "plotting",
    "data",
    "five",
    "different",
    "directions",
    "confusing",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "looks",
    "like",
    "let",
    "talk",
    "little",
    "bit",
    "talked",
    "let",
    "grab",
    "annotation",
    "left",
    "right",
    "width",
    "height",
    "going",
    "left",
    "right",
    "left",
    "point",
    "one",
    "point",
    "five",
    "know",
    "let",
    "play",
    "little",
    "bit",
    "happens",
    "change",
    "point",
    "one",
    "moves",
    "way",
    "left",
    "point",
    "one",
    "make",
    "point",
    "four",
    "run",
    "go",
    "see",
    "move",
    "around",
    "branches",
    "left",
    "right",
    "see",
    "happens",
    "point",
    "oh",
    "let",
    "make",
    "point",
    "one",
    "actually",
    "left",
    "right",
    "thought",
    "wrong",
    "actually",
    "far",
    "bottom",
    "let",
    "switch",
    "bottom",
    "go",
    "go",
    "ahead",
    "put",
    "back",
    "run",
    "point",
    "three",
    "let",
    "make",
    "point",
    "three",
    "also",
    "width",
    "course",
    "height",
    "make",
    "really",
    "tiny",
    "actually",
    "let",
    "let",
    "run",
    "see",
    "changes",
    "height",
    "make",
    "even",
    "smaller",
    "see",
    "get",
    "stuck",
    "playing",
    "make",
    "look",
    "right",
    "sometimes",
    "take",
    "little",
    "bit",
    "certainly",
    "settings",
    "presentation",
    "try",
    "keep",
    "uniform",
    "unless",
    "make",
    "sense",
    "graph",
    "working",
    "try",
    "keep",
    "colors",
    "position",
    "look",
    "feel",
    "mentioned",
    "earlier",
    "adjust",
    "canvas",
    "size",
    "earlier",
    "copied",
    "going",
    "data",
    "looking",
    "change",
    "figure",
    "size",
    "16",
    "nine",
    "let",
    "run",
    "show",
    "looks",
    "like",
    "fills",
    "whole",
    "screen",
    "normally",
    "working",
    "screen",
    "worry",
    "much",
    "set",
    "dpi",
    "300",
    "run",
    "goes",
    "dots",
    "per",
    "inch",
    "output",
    "printing",
    "hard",
    "copy",
    "want",
    "higher",
    "quality",
    "would",
    "suggest",
    "nothing",
    "300",
    "professional",
    "print",
    "might",
    "get",
    "little",
    "less",
    "whenever",
    "professional",
    "graphics",
    "printing",
    "something",
    "300",
    "dots",
    "per",
    "inch",
    "kind",
    "minimal",
    "go",
    "lot",
    "higher",
    "keep",
    "mind",
    "higher",
    "get",
    "memory",
    "takes",
    "lag",
    "time",
    "resources",
    "use",
    "usually",
    "300",
    "good",
    "solid",
    "number",
    "use",
    "dots",
    "per",
    "inch",
    "see",
    "drills",
    "nice",
    "draws",
    "nice",
    "large",
    "canvas",
    "16",
    "9",
    "dpi",
    "300",
    "little",
    "higher",
    "quality",
    "curiosity",
    "wonder",
    "long",
    "takes",
    "draw",
    "something",
    "double",
    "size",
    "600",
    "see",
    "600",
    "dpi",
    "going",
    "take",
    "goes",
    "utilizing",
    "lot",
    "graphics",
    "let",
    "go",
    "back",
    "300",
    "actually",
    "let",
    "100",
    "going",
    "see",
    "difference",
    "web",
    "based",
    "graphics",
    "pretty",
    "low",
    "saw",
    "plot",
    "figure",
    "works",
    "figure",
    "axes",
    "subplot",
    "figure",
    "size",
    "go",
    "ahead",
    "axes",
    "dot",
    "plot",
    "x",
    "comma",
    "comma",
    "stick",
    "red",
    "let",
    "go",
    "ahead",
    "run",
    "get",
    "almost",
    "thing",
    "axes",
    "subplot",
    "fixed",
    "size",
    "dpi",
    "let",
    "take",
    "let",
    "remove",
    "real",
    "quick",
    "run",
    "go",
    "back",
    "original",
    "figure",
    "let",
    "look",
    "things",
    "one",
    "things",
    "set",
    "title",
    "axis",
    "axis",
    "set",
    "title",
    "see",
    "right",
    "since",
    "put",
    "axis",
    "main",
    "title",
    "whole",
    "graph",
    "going",
    "title",
    "also",
    "label",
    "label",
    "x",
    "label",
    "set",
    "label",
    "case",
    "going",
    "call",
    "x",
    "keep",
    "nice",
    "uniform",
    "run",
    "see",
    "added",
    "nice",
    "x",
    "label",
    "label",
    "whoops",
    "go",
    "turns",
    "environment",
    "put",
    "title",
    "let",
    "go",
    "ahead",
    "put",
    "title",
    "xy",
    "let",
    "run",
    "course",
    "also",
    "upper",
    "size",
    "little",
    "bit",
    "see",
    "going",
    "little",
    "better",
    "x",
    "label",
    "x",
    "come",
    "see",
    "x",
    "label",
    "label",
    "course",
    "change",
    "x",
    "label",
    "change",
    "maybe",
    "whatever",
    "want",
    "course",
    "title",
    "graph",
    "go",
    "run",
    "title",
    "graph",
    "label",
    "x",
    "label",
    "set",
    "nice",
    "little",
    "plot",
    "move",
    "next",
    "section",
    "let",
    "one",
    "thing",
    "thing",
    "called",
    "legend",
    "gon",
    "na",
    "gon",
    "na",
    "set",
    "ax",
    "legend",
    "label",
    "one",
    "label",
    "two",
    "format",
    "let",
    "go",
    "actually",
    "use",
    "going",
    "two",
    "different",
    "plots",
    "going",
    "axes",
    "plot",
    "x",
    "x",
    "times",
    "x",
    "squared",
    "x",
    "cubed",
    "run",
    "see",
    "puts",
    "two",
    "nice",
    "graphs",
    "setup",
    "nice",
    "legend",
    "telling",
    "going",
    "legend",
    "actually",
    "axes",
    "since",
    "two",
    "plots",
    "legend",
    "created",
    "array",
    "equals",
    "x",
    "squared",
    "equals",
    "x",
    "cubed",
    "actually",
    "put",
    "whatever",
    "want",
    "strings",
    "location",
    "two",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "looks",
    "like",
    "see",
    "puts",
    "nice",
    "legend",
    "upper",
    "left",
    "hand",
    "corner",
    "location",
    "two",
    "location",
    "three",
    "run",
    "drops",
    "bottom",
    "location",
    "one",
    "ca",
    "remember",
    "go",
    "upper",
    "right",
    "one",
    "number",
    "refers",
    "different",
    "locations",
    "screen",
    "zero",
    "kinda",
    "play",
    "look",
    "remember",
    "work",
    "kind",
    "moves",
    "around",
    "depending",
    "want",
    "legend",
    "section",
    "cover",
    "title",
    "graph",
    "labels",
    "legends",
    "getting",
    "starting",
    "look",
    "really",
    "fancy",
    "something",
    "actually",
    "put",
    "see",
    "title",
    "graph",
    "looks",
    "little",
    "fuzzy",
    "might",
    "web",
    "setup",
    "put",
    "dpi",
    "couple",
    "notches",
    "maybe",
    "put",
    "200",
    "100",
    "might",
    "work",
    "fine",
    "know",
    "something",
    "notice",
    "playing",
    "different",
    "things",
    "subplots",
    "dpi",
    "equals",
    "oh",
    "let",
    "200",
    "see",
    "looks",
    "like",
    "see",
    "lot",
    "clearer",
    "also",
    "larger",
    "nice",
    "little",
    "feature",
    "throw",
    "dpi",
    "dots",
    "per",
    "inch",
    "next",
    "section",
    "let",
    "look",
    "graph",
    "features",
    "going",
    "look",
    "line",
    "color",
    "transparency",
    "size",
    "things",
    "oops",
    "forgot",
    "main",
    "title",
    "figure",
    "axis",
    "equals",
    "plot",
    "subplots",
    "going",
    "dpi",
    "equals",
    "150",
    "graph",
    "comes",
    "nice",
    "large",
    "easy",
    "see",
    "let",
    "go",
    "ahead",
    "three",
    "plots",
    "x",
    "x",
    "plus",
    "one",
    "going",
    "straight",
    "line",
    "plot",
    "x",
    "plus",
    "x",
    "plus",
    "two",
    "axis",
    "dot",
    "plot",
    "x",
    "x",
    "plus",
    "three",
    "looks",
    "like",
    "nearest",
    "neighbor",
    "setup",
    "showing",
    "uh",
    "located",
    "data",
    "putting",
    "lines",
    "nearest",
    "neighbors",
    "go",
    "draws",
    "nice",
    "little",
    "graph",
    "three",
    "lines",
    "one",
    "things",
    "control",
    "alpha",
    "oops",
    "actually",
    "see",
    "um",
    "lines",
    "automatically",
    "pulls",
    "different",
    "colors",
    "setup",
    "automatic",
    "automatic",
    "things",
    "going",
    "lot",
    "times",
    "comma",
    "r",
    "going",
    "color",
    "equals",
    "red",
    "another",
    "notation",
    "let",
    "go",
    "ahead",
    "run",
    "bright",
    "red",
    "line",
    "matte",
    "plot",
    "library",
    "limited",
    "red",
    "also",
    "use",
    "one",
    "many",
    "different",
    "color",
    "references",
    "see",
    "pound",
    "sign",
    "one",
    "one",
    "five",
    "five",
    "dd",
    "blue",
    "thing",
    "another",
    "color",
    "turns",
    "green",
    "easily",
    "green",
    "blue",
    "oops",
    "go",
    "blue",
    "run",
    "see",
    "red",
    "blue",
    "green",
    "want",
    "want",
    "make",
    "going",
    "say",
    "called",
    "alpha",
    "going",
    "set",
    "equal",
    "halfway",
    "run",
    "almost",
    "going",
    "look",
    "pink",
    "see",
    "let",
    "change",
    "little",
    "bit",
    "make",
    "kind",
    "fun",
    "let",
    "square",
    "go",
    "run",
    "nice",
    "square",
    "comes",
    "see",
    "crosses",
    "plotted",
    "two",
    "lines",
    "alpha",
    "red",
    "behind",
    "lines",
    "case",
    "pink",
    "alpha",
    "halfway",
    "let",
    "go",
    "ahead",
    "alpha",
    "equals",
    "oh",
    "know",
    "instead",
    "squaring",
    "let",
    "take",
    "power",
    "kind",
    "interesting",
    "see",
    "go",
    "keep",
    "squared",
    "go",
    "run",
    "let",
    "go",
    "back",
    "look",
    "crosses",
    "first",
    "thing",
    "see",
    "right",
    "blue",
    "kind",
    "light",
    "blue",
    "see",
    "two",
    "colors",
    "add",
    "together",
    "get",
    "almost",
    "purple",
    "clearly",
    "see",
    "red",
    "crosses",
    "blue",
    "line",
    "green",
    "blanks",
    "opaqueness",
    "alpha",
    "great",
    "lots",
    "data",
    "crosses",
    "need",
    "able",
    "track",
    "lines",
    "better",
    "go",
    "ahead",
    "run",
    "oops",
    "equals",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "right",
    "easily",
    "see",
    "red",
    "line",
    "crosses",
    "green",
    "blue",
    "want",
    "default",
    "one",
    "solid",
    "change",
    "point",
    "eight",
    "let",
    "oops",
    "58",
    "go",
    "run",
    "oops",
    "must",
    "hit",
    "wrong",
    "button",
    "let",
    "try",
    "actually",
    "get",
    "rid",
    "bracket",
    "let",
    "go",
    "ahead",
    "run",
    "come",
    "look",
    "still",
    "see",
    "passes",
    "behind",
    "green",
    "dominates",
    "blue",
    "dominates",
    "80",
    "instead",
    "50",
    "less",
    "kind",
    "fun",
    "although",
    "point",
    "lanes",
    "kind",
    "fade",
    "usually",
    "best",
    "setting",
    "nice",
    "pastel",
    "easily",
    "see",
    "cross",
    "like",
    "play",
    "colors",
    "play",
    "line",
    "width",
    "know",
    "let",
    "let",
    "try",
    "dpi",
    "100",
    "see",
    "looks",
    "like",
    "screen",
    "equals",
    "100",
    "go",
    "ahead",
    "take",
    "ax",
    "plot",
    "let",
    "four",
    "lines",
    "see",
    "look",
    "next",
    "real",
    "quick",
    "go",
    "run",
    "appear",
    "automatically",
    "different",
    "colors",
    "let",
    "color",
    "equals",
    "blue",
    "forgot",
    "quotation",
    "marks",
    "go",
    "go",
    "ahead",
    "make",
    "blue",
    "purposes",
    "nice",
    "uniform",
    "want",
    "want",
    "line",
    "width",
    "width",
    "equals",
    "let",
    "copy",
    "paste",
    "let",
    "equals",
    "one",
    "let",
    "one",
    "let",
    "make",
    "equal",
    "two",
    "let",
    "see",
    "looks",
    "like",
    "see",
    "goes",
    "thin",
    "line",
    "point",
    "five",
    "one",
    "one",
    "point",
    "five",
    "two",
    "twice",
    "width",
    "one",
    "going",
    "different",
    "sizes",
    "different",
    "colors",
    "alpha",
    "scheme",
    "let",
    "take",
    "whole",
    "thing",
    "let",
    "paste",
    "another",
    "one",
    "instead",
    "line",
    "width",
    "let",
    "look",
    "styles",
    "something",
    "know",
    "actually",
    "abbreviate",
    "lw",
    "line",
    "width",
    "also",
    "point",
    "let",
    "everything",
    "point",
    "two",
    "let",
    "set",
    "line",
    "style",
    "first",
    "one",
    "dashes",
    "let",
    "paste",
    "lot",
    "extra",
    "typing",
    "go",
    "take",
    "dashed",
    "dash",
    "dot",
    "let",
    "dash",
    "dot",
    "colon",
    "go",
    "lot",
    "different",
    "options",
    "look",
    "go",
    "different",
    "ways",
    "highlighting",
    "data",
    "look",
    "everything",
    "line",
    "width",
    "two",
    "straight",
    "line",
    "dashed",
    "line",
    "dot",
    "dash",
    "dot",
    "dot",
    "dot",
    "line",
    "another",
    "thing",
    "add",
    "going",
    "ax",
    "plot",
    "x",
    "let",
    "x",
    "plus",
    "um",
    "goes",
    "right",
    "top",
    "color",
    "black",
    "line",
    "width",
    "smaller",
    "line",
    "going",
    "take",
    "line",
    "going",
    "set",
    "dashes",
    "look",
    "changed",
    "notation",
    "line",
    "ax",
    "plot",
    "set",
    "line",
    "comma",
    "equal",
    "x",
    "plot",
    "change",
    "line",
    "settings",
    "way",
    "run",
    "let",
    "run",
    "see",
    "5",
    "10",
    "15",
    "10",
    "creates",
    "series",
    "dashes",
    "buried",
    "link",
    "link",
    "case",
    "alternate",
    "short",
    "dash",
    "long",
    "dash",
    "play",
    "numbers",
    "curiosity",
    "always",
    "happens",
    "play",
    "numbers",
    "see",
    "look",
    "like",
    "let",
    "let",
    "paste",
    "two",
    "kind",
    "fun",
    "play",
    "let",
    "change",
    "10",
    "3",
    "going",
    "change",
    "one",
    "15",
    "let",
    "run",
    "see",
    "differences",
    "lines",
    "oops",
    "little",
    "bit",
    "confusing",
    "forgot",
    "change",
    "lines",
    "top",
    "let",
    "change",
    "really",
    "quick",
    "let",
    "run",
    "see",
    "original",
    "dashed",
    "line",
    "alternating",
    "change",
    "numbers",
    "second",
    "one",
    "end",
    "value",
    "three",
    "see",
    "dashes",
    "five",
    "let",
    "see",
    "going",
    "guess",
    "dash",
    "five",
    "skip",
    "ten",
    "dashes",
    "15",
    "skip",
    "three",
    "goes",
    "back",
    "beginning",
    "dash",
    "five",
    "dashes",
    "skip",
    "ten",
    "fifteen",
    "dashes",
    "skip",
    "three",
    "course",
    "last",
    "one",
    "switched",
    "little",
    "bit",
    "looks",
    "lot",
    "uniform",
    "using",
    "two",
    "sets",
    "ten",
    "something",
    "like",
    "change",
    "thirty",
    "really",
    "becomes",
    "pronounced",
    "far",
    "distances",
    "instead",
    "4",
    "let",
    "go",
    "oh",
    "let",
    "put",
    "30",
    "also",
    "30",
    "30",
    "go",
    "really",
    "pronounced",
    "one",
    "let",
    "look",
    "one",
    "important",
    "group",
    "plotting",
    "data",
    "going",
    "plot",
    "started",
    "x",
    "plus",
    "one",
    "x",
    "plus",
    "two",
    "x",
    "plus",
    "three",
    "blue",
    "one",
    "three",
    "four",
    "different",
    "blue",
    "lines",
    "property",
    "want",
    "add",
    "actual",
    "plots",
    "see",
    "plots",
    "graph",
    "might",
    "marker",
    "equals",
    "run",
    "see",
    "puts",
    "dot",
    "25",
    "dots",
    "25",
    "x",
    "values",
    "actually",
    "zero",
    "different",
    "values",
    "x",
    "plotted",
    "dots",
    "want",
    "limit",
    "dots",
    "also",
    "plus",
    "sign",
    "another",
    "option",
    "dots",
    "common",
    "actually",
    "like",
    "dots",
    "best",
    "plus",
    "sign",
    "see",
    "puts",
    "nice",
    "crosshairs",
    "plus",
    "sign",
    "marker",
    "number",
    "different",
    "markers",
    "use",
    "think",
    "one",
    "another",
    "one",
    "nice",
    "square",
    "actually",
    "good",
    "one",
    "square",
    "period",
    "okay",
    "kind",
    "weird",
    "see",
    "probably",
    "markers",
    "another",
    "one",
    "number",
    "one",
    "run",
    "see",
    "little",
    "hatch",
    "marks",
    "let",
    "take",
    "oh",
    "let",
    "go",
    "one",
    "way",
    "works",
    "square",
    "really",
    "nicely",
    "stuff",
    "gon",
    "na",
    "second",
    "let",
    "marker",
    "size",
    "equals",
    "two",
    "change",
    "five",
    "run",
    "see",
    "puts",
    "nice",
    "little",
    "tiny",
    "dot",
    "versus",
    "size",
    "dot",
    "interesting",
    "said",
    "two",
    "thought",
    "would",
    "bigger",
    "gets",
    "even",
    "smaller",
    "let",
    "10",
    "see",
    "looks",
    "like",
    "run",
    "looks",
    "huge",
    "marker",
    "size",
    "lot",
    "dependent",
    "dpi",
    "setups",
    "things",
    "switch",
    "around",
    "far",
    "way",
    "size",
    "shows",
    "got",
    "little",
    "careful",
    "change",
    "one",
    "setting",
    "change",
    "markers",
    "let",
    "take",
    "square",
    "marker",
    "size",
    "also",
    "marker",
    "face",
    "set",
    "equal",
    "red",
    "course",
    "mean",
    "change",
    "one",
    "notch",
    "run",
    "whoops",
    "must",
    "mistyped",
    "something",
    "marker",
    "face",
    "color",
    "equals",
    "red",
    "run",
    "see",
    "squares",
    "marker",
    "face",
    "color",
    "course",
    "mix",
    "match",
    "come",
    "make",
    "instead",
    "let",
    "make",
    "plus",
    "seven",
    "make",
    "size",
    "15",
    "marker",
    "face",
    "color",
    "equals",
    "green",
    "go",
    "run",
    "hard",
    "actually",
    "see",
    "going",
    "still",
    "25",
    "dots",
    "kind",
    "overlap",
    "see",
    "print",
    "course",
    "really",
    "wanted",
    "make",
    "look",
    "horrible",
    "could",
    "make",
    "really",
    "huge",
    "generally",
    "though",
    "want",
    "something",
    "little",
    "bit",
    "smaller",
    "cuter",
    "try",
    "way",
    "go",
    "small",
    "even",
    "see",
    "face",
    "four",
    "start",
    "see",
    "face",
    "around",
    "four",
    "maybe",
    "eight",
    "eight",
    "might",
    "good",
    "number",
    "go",
    "eight",
    "depends",
    "trying",
    "show",
    "display",
    "covered",
    "lot",
    "stuff",
    "far",
    "lines",
    "covered",
    "opaque",
    "alpha",
    "setting",
    "give",
    "us",
    "nice",
    "pastels",
    "see",
    "overlap",
    "cross",
    "covered",
    "line",
    "width",
    "different",
    "size",
    "different",
    "formats",
    "line",
    "combine",
    "line",
    "width",
    "equals",
    "two",
    "line",
    "style",
    "equals",
    "dash",
    "bring",
    "also",
    "markers",
    "added",
    "markers",
    "entered",
    "circle",
    "plus",
    "sign",
    "square",
    "little",
    "tick",
    "uses",
    "one",
    "marker",
    "size",
    "marker",
    "color",
    "face",
    "combine",
    "see",
    "get",
    "nice",
    "different",
    "series",
    "representations",
    "also",
    "briefly",
    "mentioned",
    "color",
    "use",
    "like",
    "used",
    "color",
    "black",
    "someplace",
    "find",
    "use",
    "actual",
    "number",
    "color",
    "opposed",
    "changed",
    "red",
    "blue",
    "get",
    "precise",
    "color",
    "specific",
    "color",
    "set",
    "need",
    "match",
    "website",
    "whatever",
    "working",
    "tools",
    "matplot",
    "library",
    "one",
    "piece",
    "formatting",
    "graph",
    "want",
    "show",
    "two",
    "big",
    "sections",
    "going",
    "go",
    "different",
    "graphs",
    "along",
    "challenge",
    "problem",
    "let",
    "go",
    "last",
    "section",
    "going",
    "look",
    "limits",
    "going",
    "limit",
    "data",
    "first",
    "primer",
    "going",
    "paste",
    "going",
    "create",
    "subplots",
    "one",
    "two",
    "one",
    "row",
    "two",
    "columns",
    "gon",
    "na",
    "figure",
    "size",
    "ten",
    "comma",
    "five",
    "look",
    "familiar",
    "since",
    "done",
    "number",
    "gon",
    "na",
    "go",
    "ahead",
    "plot",
    "interesting",
    "notation",
    "notice",
    "axis",
    "zero",
    "one",
    "used",
    "instead",
    "iterate",
    "array",
    "array",
    "zero",
    "still",
    "axes",
    "first",
    "axes",
    "two",
    "going",
    "plot",
    "x",
    "x",
    "squared",
    "x",
    "x",
    "cubed",
    "lined",
    "two",
    "gon",
    "na",
    "go",
    "ahead",
    "plot",
    "two",
    "graphs",
    "right",
    "top",
    "without",
    "multiple",
    "plots",
    "set",
    "grid",
    "equal",
    "true",
    "one",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "two",
    "plots",
    "x",
    "value",
    "going",
    "across",
    "going",
    "something",
    "similar",
    "way",
    "look",
    "see",
    "grid",
    "easier",
    "spot",
    "data",
    "going",
    "across",
    "going",
    "take",
    "data",
    "axes",
    "plot",
    "x",
    "x",
    "squared",
    "x",
    "x",
    "cubed",
    "line",
    "two",
    "time",
    "going",
    "take",
    "axes",
    "one",
    "limit",
    "actually",
    "set",
    "underscore",
    "limit",
    "axis",
    "going",
    "array",
    "two",
    "two",
    "values",
    "0",
    "comma",
    "60",
    "making",
    "numbers",
    "guys",
    "back",
    "actually",
    "made",
    "using",
    "numbers",
    "going",
    "set",
    "x",
    "limit",
    "set",
    "x",
    "limit",
    "forget",
    "brackets",
    "two",
    "comma",
    "five",
    "data",
    "going",
    "setting",
    "limit",
    "let",
    "go",
    "ahead",
    "run",
    "let",
    "see",
    "comes",
    "limit",
    "zero",
    "sixty",
    "looking",
    "lower",
    "part",
    "curve",
    "x",
    "limit",
    "two",
    "five",
    "starts",
    "right",
    "two",
    "see",
    "different",
    "graphs",
    "kind",
    "nice",
    "could",
    "actually",
    "put",
    "one",
    "top",
    "wanted",
    "draw",
    "focus",
    "one",
    "part",
    "graph",
    "remember",
    "earlier",
    "one",
    "inside",
    "quick",
    "note",
    "easily",
    "limit",
    "graph",
    "kind",
    "reshape",
    "way",
    "looks",
    "quite",
    "easily",
    "also",
    "add",
    "grid",
    "want",
    "grid",
    "run",
    "add",
    "grid",
    "oops",
    "guess",
    "grid",
    "beforehand",
    "switch",
    "go",
    "sometimes",
    "order",
    "really",
    "important",
    "may",
    "double",
    "check",
    "order",
    "printing",
    "things",
    "also",
    "helps",
    "change",
    "one",
    "case",
    "might",
    "order",
    "wonder",
    "go",
    "back",
    "one",
    "go",
    "matter",
    "order",
    "grid",
    "set",
    "grid",
    "easy",
    "viewing",
    "nice",
    "setup",
    "see",
    "limit",
    "data",
    "let",
    "start",
    "looking",
    "2d",
    "graphs",
    "make",
    "cell",
    "markdown",
    "run",
    "nice",
    "pretty",
    "title",
    "let",
    "go",
    "ahead",
    "create",
    "data",
    "np",
    "array",
    "0",
    "5",
    "go",
    "let",
    "look",
    "4",
    "common",
    "graphs",
    "put",
    "side",
    "side",
    "figure",
    "axes",
    "equals",
    "plot",
    "subplots",
    "one",
    "four",
    "columns",
    "figure",
    "size",
    "hopefully",
    "fit",
    "nicely",
    "seems",
    "pretty",
    "good",
    "go",
    "run",
    "since",
    "run",
    "see",
    "four",
    "blank",
    "plots",
    "start",
    "axes",
    "zero",
    "let",
    "set",
    "title",
    "want",
    "scatter",
    "plot",
    "scatter",
    "plot",
    "means",
    "bunch",
    "dots",
    "axis",
    "zero",
    "dot",
    "scatter",
    "easy",
    "remember",
    "scatter",
    "bunch",
    "plots",
    "x",
    "n",
    "go",
    "let",
    "go",
    "ahead",
    "axes",
    "set",
    "title",
    "scatter",
    "already",
    "gon",
    "na",
    "scatter",
    "notice",
    "create",
    "scatter",
    "plot",
    "simply",
    "scatter",
    "control",
    "let",
    "variable",
    "x",
    "x",
    "plus",
    "let",
    "throw",
    "randomness",
    "usually",
    "scatter",
    "plots",
    "lot",
    "random",
    "numbers",
    "connected",
    "bigger",
    "x",
    "gets",
    "bigger",
    "randomness",
    "times",
    "randomness",
    "end",
    "scatter",
    "plot",
    "see",
    "go",
    "kind",
    "random",
    "numbers",
    "moves",
    "line",
    "plus",
    "points",
    "remember",
    "back",
    "marker",
    "plotting",
    "basically",
    "marker",
    "scatter",
    "plot",
    "probably",
    "less",
    "used",
    "step",
    "plot",
    "exes",
    "one",
    "go",
    "ahead",
    "step",
    "plot",
    "see",
    "looks",
    "like",
    "time",
    "use",
    "n",
    "value",
    "instead",
    "x",
    "generated",
    "n",
    "value",
    "n",
    "n",
    "times",
    "2",
    "r",
    "n",
    "squared",
    "n",
    "times",
    "2",
    "n",
    "squared",
    "line",
    "width",
    "equals",
    "2",
    "run",
    "creates",
    "nice",
    "step",
    "let",
    "see",
    "got",
    "scatter",
    "plot",
    "got",
    "step",
    "plot",
    "let",
    "bar",
    "plot",
    "use",
    "formula",
    "n",
    "squared",
    "alignment",
    "centered",
    "left",
    "right",
    "alpha",
    "remember",
    "correctly",
    "opaque",
    "let",
    "see",
    "looks",
    "like",
    "nice",
    "see",
    "nice",
    "bar",
    "plot",
    "look",
    "similar",
    "step",
    "plot",
    "colored",
    "change",
    "width",
    "let",
    "see",
    "happens",
    "run",
    "take",
    "width",
    "completely",
    "run",
    "see",
    "starts",
    "coming",
    "together",
    "change",
    "alpha",
    "take",
    "alpha",
    "run",
    "solid",
    "colors",
    "take",
    "center",
    "run",
    "everything",
    "really",
    "ca",
    "see",
    "shift",
    "actually",
    "default",
    "common",
    "settings",
    "bar",
    "graph",
    "let",
    "put",
    "back",
    "go",
    "alignment",
    "center",
    "alpha",
    "ca",
    "say",
    "used",
    "step",
    "craft",
    "much",
    "certain",
    "certain",
    "guess",
    "domains",
    "expertise",
    "require",
    "step",
    "graph",
    "scatter",
    "plot",
    "bar",
    "graph",
    "common",
    "especially",
    "bar",
    "graph",
    "look",
    "histograms",
    "minute",
    "use",
    "histograms",
    "lot",
    "especially",
    "data",
    "science",
    "nice",
    "concrete",
    "objects",
    "somebody",
    "many",
    "people",
    "wearing",
    "yellow",
    "hats",
    "kind",
    "thing",
    "going",
    "let",
    "go",
    "ahead",
    "last",
    "one",
    "see",
    "lot",
    "sciences",
    "certainly",
    "using",
    "data",
    "science",
    "like",
    "mapping",
    "saw",
    "publication",
    "solar",
    "flares",
    "discussing",
    "energy",
    "filling",
    "graph",
    "gives",
    "different",
    "look",
    "going",
    "fill",
    "like",
    "think",
    "filled",
    "underscore",
    "x",
    "x",
    "squared",
    "x",
    "x",
    "cubed",
    "color",
    "green",
    "alpha",
    "case",
    "data",
    "want",
    "plot",
    "see",
    "forms",
    "nice",
    "squared",
    "coming",
    "also",
    "look",
    "bottom",
    "one",
    "squared",
    "value",
    "upper",
    "line",
    "cubed",
    "value",
    "fills",
    "everything",
    "remember",
    "calculus",
    "would",
    "like",
    "car",
    "motor",
    "efficiency",
    "would",
    "talk",
    "efficiency",
    "going",
    "loss",
    "looking",
    "space",
    "area",
    "two",
    "lines",
    "gives",
    "nice",
    "visual",
    "let",
    "look",
    "basic",
    "two",
    "dimensionals",
    "figure",
    "figure",
    "size",
    "going",
    "radar",
    "chart",
    "honest",
    "never",
    "used",
    "radar",
    "chart",
    "business",
    "data",
    "science",
    "ca",
    "find",
    "reason",
    "use",
    "one",
    "first",
    "line",
    "radar",
    "chart",
    "add",
    "axes",
    "figure",
    "actually",
    "creates",
    "oh",
    "let",
    "let",
    "run",
    "see",
    "creates",
    "creates",
    "nice",
    "looks",
    "like",
    "submarine",
    "tracking",
    "hunt",
    "red",
    "october",
    "something",
    "like",
    "needs",
    "polar",
    "fact",
    "polar",
    "coordinates",
    "zero",
    "zero",
    "point",
    "six",
    "point",
    "six",
    "size",
    "take",
    "things",
    "run",
    "get",
    "box",
    "take",
    "half",
    "pretty",
    "much",
    "get",
    "nothing",
    "change",
    "numbers",
    "change",
    "little",
    "bit",
    "see",
    "gets",
    "bigger",
    "go",
    "ahead",
    "leave",
    "one",
    "kind",
    "fun",
    "size",
    "height",
    "width",
    "let",
    "create",
    "data",
    "equals",
    "np",
    "line",
    "space",
    "0",
    "2",
    "times",
    "np",
    "times",
    "pi",
    "remember",
    "distance",
    "across",
    "going",
    "generate",
    "hundred",
    "points",
    "thing",
    "data",
    "putting",
    "together",
    "simply",
    "ax",
    "dot",
    "plot",
    "case",
    "let",
    "comma",
    "would",
    "diagonal",
    "line",
    "regular",
    "chart",
    "give",
    "nice",
    "color",
    "equals",
    "blue",
    "line",
    "width",
    "equals",
    "three",
    "let",
    "see",
    "looks",
    "like",
    "see",
    "spiral",
    "coming",
    "remember",
    "would",
    "diagonal",
    "line",
    "regular",
    "chart",
    "happens",
    "take",
    "instead",
    "times",
    "go",
    "see",
    "slightly",
    "alters",
    "way",
    "spirals",
    "could",
    "times",
    "two",
    "spirals",
    "little",
    "quicker",
    "kind",
    "fun",
    "like",
    "said",
    "never",
    "used",
    "radar",
    "chart",
    "column",
    "always",
    "think",
    "radar",
    "submarine",
    "kind",
    "looks",
    "like",
    "one",
    "airplane",
    "none",
    "would",
    "complete",
    "discuss",
    "histograms",
    "oh",
    "gosh",
    "use",
    "histogram",
    "much",
    "use",
    "numpy",
    "set",
    "np",
    "generate",
    "oh",
    "looks",
    "like",
    "hundred",
    "thousand",
    "variables",
    "going",
    "set",
    "equal",
    "n",
    "course",
    "create",
    "figure",
    "axes",
    "subplots",
    "one",
    "two",
    "figure",
    "size",
    "12",
    "going",
    "look",
    "two",
    "different",
    "variations",
    "histogram",
    "set",
    "title",
    "default",
    "histogram",
    "set",
    "title",
    "simply",
    "hist",
    "histogram",
    "go",
    "ahead",
    "put",
    "n",
    "let",
    "run",
    "see",
    "looks",
    "like",
    "let",
    "talk",
    "going",
    "generated",
    "array",
    "data",
    "1000",
    "random",
    "arrays",
    "looks",
    "like",
    "mostly",
    "4",
    "adds",
    "one",
    "says",
    "0",
    "35",
    "000",
    "zero",
    "common",
    "20",
    "000",
    "somewhere",
    "range",
    "right",
    "minus",
    "two",
    "well",
    "looks",
    "like",
    "one",
    "minus",
    "two",
    "somewhere",
    "zero",
    "1",
    "30",
    "000",
    "numbers",
    "saying",
    "common",
    "variables",
    "gives",
    "point",
    "many",
    "directions",
    "looking",
    "data",
    "science",
    "go",
    "ahead",
    "run",
    "histogram",
    "always",
    "histogram",
    "always",
    "put",
    "limits",
    "different",
    "things",
    "array",
    "like",
    "graphs",
    "going",
    "cumulative",
    "detailed",
    "histogram",
    "histogram",
    "let",
    "set",
    "cumulative",
    "equal",
    "true",
    "bins",
    "equal",
    "really",
    "want",
    "highlight",
    "cumulative",
    "equals",
    "true",
    "important",
    "choose",
    "many",
    "bins",
    "first",
    "one",
    "kind",
    "selected",
    "us",
    "case",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "prints",
    "data",
    "us",
    "whoops",
    "must",
    "missed",
    "oh",
    "go",
    "help",
    "put",
    "old",
    "one",
    "go",
    "okay",
    "default",
    "histogram",
    "cumulative",
    "histogram",
    "50",
    "steps",
    "let",
    "find",
    "true",
    "much",
    "counting",
    "going",
    "count",
    "want",
    "count",
    "let",
    "change",
    "10",
    "see",
    "happens",
    "see",
    "10",
    "counts",
    "could",
    "set",
    "5",
    "run",
    "5",
    "go",
    "ahead",
    "take",
    "cumulative",
    "equals",
    "true",
    "see",
    "looks",
    "like",
    "let",
    "run",
    "looks",
    "like",
    "think",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "eight",
    "different",
    "bins",
    "default",
    "came",
    "put",
    "back",
    "run",
    "look",
    "almost",
    "identical",
    "put",
    "cumulative",
    "back",
    "see",
    "looks",
    "like",
    "cumulative",
    "run",
    "see",
    "shifts",
    "everything",
    "slightly",
    "different",
    "luck",
    "wait",
    "shifts",
    "right",
    "actually",
    "shift",
    "right",
    "cumulative",
    "total",
    "different",
    "occurrences",
    "means",
    "like",
    "consider",
    "like",
    "year",
    "rainfall",
    "like",
    "day",
    "one",
    "little",
    "bit",
    "rain",
    "day",
    "two",
    "rain",
    "look",
    "number",
    "hundred",
    "thousand",
    "thirty",
    "five",
    "thousand",
    "accumulative",
    "detail",
    "histogram",
    "currents",
    "grows",
    "rainfall",
    "good",
    "one",
    "would",
    "cumulative",
    "histogram",
    "much",
    "rain",
    "occurred",
    "throughout",
    "year",
    "going",
    "look",
    "two",
    "graphs",
    "already",
    "looked",
    "bunch",
    "looked",
    "radar",
    "graph",
    "looked",
    "scatter",
    "step",
    "bar",
    "fill",
    "basic",
    "plots",
    "looked",
    "different",
    "ways",
    "showing",
    "data",
    "increase",
    "size",
    "line",
    "look",
    "color",
    "alpha",
    "setting",
    "let",
    "look",
    "contour",
    "maps",
    "let",
    "put",
    "go",
    "draw",
    "contour",
    "map",
    "draw",
    "contour",
    "map",
    "need",
    "go",
    "ahead",
    "create",
    "data",
    "contours",
    "data",
    "going",
    "three",
    "different",
    "values",
    "let",
    "go",
    "ahead",
    "create",
    "data",
    "import",
    "matplot",
    "library",
    "numpy",
    "numbers",
    "array",
    "import",
    "color",
    "maps",
    "different",
    "color",
    "maps",
    "look",
    "like",
    "hundreds",
    "color",
    "maps",
    "want",
    "color",
    "even",
    "color",
    "map",
    "pretty",
    "diverse",
    "course",
    "plt",
    "going",
    "pi",
    "plot",
    "generate",
    "different",
    "data",
    "going",
    "create",
    "delta",
    "start",
    "x",
    "going",
    "create",
    "array",
    "3",
    "delta",
    "increments",
    "something",
    "similar",
    "create",
    "x",
    "mesh",
    "grid",
    "numpy",
    "commands",
    "familiar",
    "want",
    "go",
    "back",
    "review",
    "numpy",
    "tutorial",
    "exponential",
    "minus",
    "x",
    "squared",
    "minus",
    "squared",
    "z1",
    "z2",
    "two",
    "different",
    "areas",
    "z",
    "equals",
    "z1",
    "minus",
    "z2",
    "times",
    "two",
    "created",
    "number",
    "values",
    "let",
    "go",
    "ahead",
    "run",
    "let",
    "plug",
    "see",
    "values",
    "going",
    "set",
    "going",
    "create",
    "figure",
    "x",
    "plt",
    "subplots",
    "going",
    "create",
    "variable",
    "cs",
    "going",
    "contour",
    "right",
    "cs",
    "contour",
    "surface",
    "feeding",
    "x",
    "z",
    "remember",
    "x",
    "created",
    "x",
    "components",
    "using",
    "mesh",
    "grid",
    "know",
    "let",
    "kind",
    "good",
    "see",
    "let",
    "go",
    "ahead",
    "print",
    "x",
    "let",
    "print",
    "always",
    "like",
    "working",
    "something",
    "either",
    "really",
    "complicated",
    "case",
    "looking",
    "understand",
    "yet",
    "created",
    "mesh",
    "grid",
    "x",
    "done",
    "end",
    "x",
    "set",
    "values",
    "x",
    "coordinates",
    "also",
    "created",
    "z",
    "based",
    "x",
    "x",
    "capital",
    "x",
    "capital",
    "capital",
    "z",
    "three",
    "components",
    "x",
    "coordinates",
    "z",
    "going",
    "actual",
    "height",
    "since",
    "contour",
    "map",
    "created",
    "contour",
    "map",
    "x",
    "z",
    "coordinates",
    "want",
    "go",
    "ahead",
    "put",
    "c",
    "label",
    "maybe",
    "want",
    "go",
    "ahead",
    "title",
    "put",
    "set",
    "title",
    "contour",
    "go",
    "contour",
    "map",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "looks",
    "like",
    "see",
    "generated",
    "nice",
    "little",
    "contour",
    "map",
    "different",
    "settings",
    "play",
    "picture",
    "mountain",
    "climb",
    "line",
    "represent",
    "zero",
    "maybe",
    "sea",
    "level",
    "moving",
    "contours",
    "minus",
    "1",
    "different",
    "setups",
    "little",
    "hills",
    "guess",
    "minus",
    "like",
    "pit",
    "guess",
    "going",
    "pit",
    "minus",
    "5",
    "minus",
    "1",
    "side",
    "see",
    "going",
    "levels",
    "mountaintop",
    "like",
    "basin",
    "kind",
    "data",
    "science",
    "could",
    "represent",
    "lot",
    "things",
    "could",
    "also",
    "representing",
    "two",
    "different",
    "values",
    "maybe",
    "profits",
    "loss",
    "know",
    "ever",
    "really",
    "contour",
    "map",
    "sure",
    "creative",
    "find",
    "something",
    "fun",
    "contour",
    "map",
    "going",
    "look",
    "one",
    "last",
    "map",
    "3d",
    "map",
    "really",
    "important",
    "final",
    "product",
    "show",
    "much",
    "additional",
    "information",
    "ca",
    "fit",
    "graphs",
    "go",
    "draw",
    "3d",
    "image",
    "going",
    "import",
    "mpl",
    "toolkits",
    "implant",
    "3d",
    "axis",
    "3d",
    "going",
    "import",
    "axis",
    "3d",
    "going",
    "let",
    "us",
    "work",
    "3d",
    "image",
    "look",
    "familiar",
    "going",
    "create",
    "another",
    "figure",
    "like",
    "figure",
    "size",
    "14",
    "6",
    "good",
    "fit",
    "screen",
    "go",
    "ahead",
    "run",
    "figure",
    "let",
    "go",
    "ahead",
    "take",
    "x",
    "going",
    "set",
    "equal",
    "fig",
    "dot",
    "add",
    "subplot",
    "also",
    "familiar",
    "earlier",
    "going",
    "work",
    "sets",
    "settings",
    "projection",
    "going",
    "use",
    "one",
    "two",
    "one",
    "projection",
    "3d",
    "see",
    "looks",
    "like",
    "minute",
    "created",
    "data",
    "x",
    "z",
    "capital",
    "x",
    "z",
    "going",
    "reuse",
    "data",
    "going",
    "use",
    "since",
    "also",
    "also",
    "image",
    "let",
    "use",
    "graph",
    "simply",
    "ax",
    "plot",
    "underscore",
    "surface",
    "capital",
    "x",
    "capital",
    "capital",
    "z",
    "data",
    "coming",
    "going",
    "add",
    "settings",
    "going",
    "r",
    "stride",
    "4",
    "c",
    "stride",
    "4",
    "line",
    "width",
    "show",
    "minute",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "graph",
    "course",
    "helps",
    "add",
    "extra",
    "comma",
    "see",
    "generates",
    "really",
    "beautiful",
    "graph",
    "let",
    "take",
    "little",
    "bit",
    "time",
    "explore",
    "numbers",
    "going",
    "r",
    "stride",
    "4",
    "c",
    "stride",
    "4",
    "projection",
    "3d",
    "projection",
    "3d",
    "important",
    "one",
    "telling",
    "us",
    "3d",
    "graph",
    "first",
    "numbers",
    "1",
    "2",
    "1",
    "let",
    "change",
    "one",
    "going",
    "change",
    "5",
    "going",
    "give",
    "error",
    "let",
    "change",
    "oh",
    "work",
    "let",
    "change",
    "middle",
    "one",
    "three",
    "instead",
    "going",
    "see",
    "starts",
    "reshaping",
    "size",
    "fits",
    "screen",
    "change",
    "first",
    "one",
    "two",
    "run",
    "one",
    "changed",
    "dimensions",
    "size",
    "fits",
    "play",
    "numbers",
    "get",
    "nice",
    "look",
    "feel",
    "part",
    "tilt",
    "angle",
    "seven",
    "one",
    "go",
    "see",
    "really",
    "shifted",
    "changes",
    "size",
    "fits",
    "canvas",
    "leave",
    "one",
    "two",
    "get",
    "good",
    "look",
    "talking",
    "column",
    "width",
    "index",
    "one",
    "one",
    "one",
    "see",
    "spreads",
    "way",
    "across",
    "uses",
    "whole",
    "set",
    "size",
    "big",
    "want",
    "one",
    "term",
    "cover",
    "yet",
    "used",
    "throughout",
    "whole",
    "setup",
    "going",
    "type",
    "even",
    "though",
    "going",
    "go",
    "detail",
    "term",
    "heat",
    "map",
    "might",
    "see",
    "kind",
    "starting",
    "lose",
    "ground",
    "far",
    "common",
    "reference",
    "sure",
    "lot",
    "people",
    "still",
    "talk",
    "heat",
    "maps",
    "heat",
    "map",
    "well",
    "simply",
    "color",
    "map",
    "ever",
    "see",
    "term",
    "heat",
    "map",
    "refers",
    "fact",
    "different",
    "colors",
    "representing",
    "different",
    "heights",
    "one",
    "heat",
    "map",
    "see",
    "switched",
    "let",
    "go",
    "back",
    "go",
    "one",
    "different",
    "colors",
    "different",
    "values",
    "lot",
    "times",
    "use",
    "like",
    "instead",
    "x",
    "might",
    "heat",
    "map",
    "fourth",
    "value",
    "fourth",
    "value",
    "represents",
    "color",
    "see",
    "3d",
    "image",
    "nice",
    "colors",
    "represented",
    "heat",
    "map",
    "see",
    "term",
    "heat",
    "map",
    "means",
    "plotting",
    "data",
    "color",
    "make",
    "stand",
    "give",
    "fourth",
    "dimension",
    "case",
    "covered",
    "lot",
    "things",
    "matplot",
    "brings",
    "us",
    "cover",
    "basics",
    "brings",
    "us",
    "practice",
    "example",
    "going",
    "challenge",
    "let",
    "go",
    "ahead",
    "change",
    "cell",
    "cell",
    "type",
    "mark",
    "run",
    "looks",
    "pretty",
    "practice",
    "example",
    "write",
    "path",
    "python",
    "program",
    "create",
    "pie",
    "chart",
    "popularity",
    "programming",
    "languages",
    "okay",
    "excellent",
    "going",
    "challenge",
    "need",
    "data",
    "throw",
    "import",
    "map",
    "library",
    "beginning",
    "automatically",
    "data",
    "plot",
    "going",
    "languages",
    "going",
    "python",
    "going",
    "java",
    "php",
    "javascript",
    "c",
    "sharp",
    "c",
    "plus",
    "plus",
    "six",
    "categories",
    "popularity",
    "oops",
    "misspelling",
    "popularity",
    "give",
    "first",
    "one",
    "percent",
    "java",
    "know",
    "real",
    "numbers",
    "pulled",
    "guess",
    "might",
    "made",
    "know",
    "python",
    "really",
    "much",
    "popular",
    "ones",
    "maybe",
    "specific",
    "data",
    "science",
    "python",
    "popular",
    "data",
    "science",
    "right",
    "many",
    "options",
    "program",
    "highly",
    "used",
    "exclusively",
    "data",
    "science",
    "r",
    "python",
    "big",
    "python",
    "also",
    "lot",
    "full",
    "programming",
    "language",
    "r",
    "primarily",
    "data",
    "science",
    "put",
    "r",
    "python",
    "java",
    "php",
    "see",
    "different",
    "values",
    "given",
    "different",
    "percentages",
    "add",
    "add",
    "100",
    "adds",
    "71",
    "percent",
    "something",
    "like",
    "going",
    "give",
    "colors",
    "chosen",
    "guys",
    "back",
    "brought",
    "colors",
    "sure",
    "colors",
    "find",
    "minute",
    "exciting",
    "see",
    "using",
    "actual",
    "color",
    "values",
    "pull",
    "color",
    "wheel",
    "something",
    "like",
    "could",
    "easily",
    "done",
    "blue",
    "red",
    "green",
    "lazy",
    "pick",
    "exact",
    "colors",
    "let",
    "go",
    "ahead",
    "solve",
    "see",
    "got",
    "going",
    "something",
    "little",
    "fancy",
    "first",
    "thing",
    "going",
    "going",
    "use",
    "variable",
    "called",
    "explode",
    "notice",
    "six",
    "variables",
    "matches",
    "six",
    "different",
    "categories",
    "first",
    "one",
    "done",
    "point",
    "one",
    "zero",
    "zero",
    "zero",
    "zero",
    "zero",
    "point",
    "one",
    "put",
    "explode",
    "plot",
    "actually",
    "push",
    "square",
    "really",
    "cool",
    "feature",
    "highlight",
    "certain",
    "information",
    "pie",
    "chart",
    "simply",
    "plotting",
    "popularity",
    "go",
    "add",
    "really",
    "cool",
    "settings",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "generate",
    "nice",
    "flat",
    "pie",
    "exciting",
    "go",
    "ahead",
    "put",
    "extras",
    "talked",
    "explode",
    "explode",
    "one",
    "values",
    "explode",
    "equals",
    "explode",
    "labels",
    "languages",
    "want",
    "know",
    "different",
    "colors",
    "mean",
    "colors",
    "equals",
    "colors",
    "auto",
    "picture",
    "standard",
    "print",
    "format",
    "python",
    "setup",
    "going",
    "put",
    "value",
    "pie",
    "slice",
    "going",
    "add",
    "shadow",
    "looks",
    "cooler",
    "shadow",
    "gives",
    "little",
    "3d",
    "look",
    "start",
    "angle",
    "let",
    "go",
    "ahead",
    "run",
    "take",
    "look",
    "see",
    "comes",
    "look",
    "changes",
    "whole",
    "setup",
    "labels",
    "value",
    "put",
    "slice",
    "pushed",
    "shadow",
    "3d",
    "effect",
    "started",
    "could",
    "also",
    "rotate",
    "let",
    "angle",
    "run",
    "see",
    "blue",
    "pie",
    "slice",
    "moved",
    "little",
    "bit",
    "could",
    "actually",
    "actually",
    "let",
    "take",
    "whole",
    "starting",
    "triangle",
    "run",
    "default",
    "zero",
    "looks",
    "like",
    "defaulted",
    "zero",
    "depending",
    "want",
    "highlighted",
    "slice",
    "appear",
    "usually",
    "want",
    "appear",
    "left",
    "people",
    "read",
    "left",
    "right",
    "draws",
    "focus",
    "onto",
    "case",
    "python",
    "great",
    "python",
    "little",
    "biased",
    "teaching",
    "python",
    "tutorial",
    "understandable",
    "looking",
    "python",
    "one",
    "last",
    "reference",
    "close",
    "go",
    "map",
    "plot",
    "library",
    "dot",
    "pi",
    "plot",
    "set",
    "go",
    "underneath",
    "different",
    "functions",
    "look",
    "website",
    "see",
    "full",
    "list",
    "important",
    "go",
    "tutorial",
    "like",
    "list",
    "massive",
    "trying",
    "figure",
    "like",
    "bar",
    "plot",
    "bar",
    "h",
    "add",
    "barbs",
    "box",
    "plot",
    "cover",
    "c",
    "labels",
    "totally",
    "different",
    "kind",
    "contour",
    "plot",
    "set",
    "go",
    "figures",
    "used",
    "showed",
    "basics",
    "figure",
    "see",
    "closer",
    "references",
    "histogram",
    "hist",
    "also",
    "2d",
    "makes",
    "2d",
    "histogram",
    "plot",
    "h",
    "lines",
    "different",
    "commands",
    "underneath",
    "see",
    "pretty",
    "extensive",
    "covered",
    "basic",
    "ones",
    "know",
    "solid",
    "ground",
    "look",
    "different",
    "options",
    "come",
    "functions",
    "going",
    "look",
    "little",
    "look",
    "unfamiliar",
    "still",
    "availability",
    "probably",
    "understand",
    "basic",
    "understanding",
    "matplot",
    "library",
    "certainly",
    "many",
    "reasons",
    "able",
    "go",
    "online",
    "scrape",
    "different",
    "websites",
    "range",
    "everything",
    "pulling",
    "different",
    "links",
    "pulling",
    "data",
    "websites",
    "data",
    "scientist",
    "might",
    "need",
    "get",
    "information",
    "website",
    "direct",
    "api",
    "pull",
    "information",
    "python",
    "wonderful",
    "tool",
    "talk",
    "python",
    "talk",
    "web",
    "scraping",
    "talking",
    "beautiful",
    "suit",
    "package",
    "add",
    "python",
    "running",
    "come",
    "website",
    "software",
    "slash",
    "beautiful",
    "soup",
    "actually",
    "read",
    "little",
    "bit",
    "currently",
    "beautiful",
    "soup",
    "4",
    "current",
    "version",
    "remember",
    "full",
    "website",
    "always",
    "go",
    "search",
    "beautiful",
    "soup",
    "official",
    "site",
    "almost",
    "always",
    "comes",
    "right",
    "top",
    "click",
    "take",
    "software",
    "site",
    "beautiful",
    "soup",
    "going",
    "use",
    "whatever",
    "python",
    "interface",
    "want",
    "ide",
    "going",
    "use",
    "jupiter",
    "lab",
    "built",
    "jupiter",
    "notebook",
    "anaconda",
    "open",
    "anaconda",
    "navigator",
    "see",
    "different",
    "tools",
    "available",
    "might",
    "using",
    "different",
    "editor",
    "okay",
    "might",
    "pycharm",
    "something",
    "like",
    "need",
    "jupiter",
    "lab",
    "jupiter",
    "notebook",
    "added",
    "tabs",
    "added",
    "features",
    "basically",
    "beta",
    "testing",
    "got",
    "little",
    "glitches",
    "saving",
    "things",
    "moving",
    "projects",
    "part",
    "great",
    "upgrade",
    "jupiter",
    "notebook",
    "use",
    "together",
    "mean",
    "built",
    "jupiter",
    "notebooks",
    "anything",
    "jupyter",
    "notebook",
    "open",
    "jupiter",
    "lab",
    "first",
    "thing",
    "need",
    "need",
    "go",
    "ahead",
    "case",
    "going",
    "environments",
    "since",
    "partitions",
    "environments",
    "going",
    "open",
    "terminal",
    "window",
    "install",
    "packages",
    "work",
    "lot",
    "choices",
    "simplicity",
    "using",
    "conda",
    "install",
    "use",
    "pip",
    "install",
    "thing",
    "going",
    "install",
    "beautiful",
    "soup",
    "four",
    "type",
    "whole",
    "thing",
    "beautiful",
    "soup",
    "use",
    "pip",
    "install",
    "using",
    "different",
    "environment",
    "using",
    "python",
    "version",
    "although",
    "according",
    "beautiful",
    "soup",
    "also",
    "work",
    "three",
    "seven",
    "way",
    "27",
    "olive",
    "3x",
    "according",
    "beautiful",
    "soup",
    "website",
    "beautiful",
    "soup",
    "4",
    "works",
    "anything",
    "install",
    "anything",
    "python",
    "27",
    "way",
    "python",
    "3",
    "versions",
    "happens",
    "python",
    "36",
    "lot",
    "packages",
    "work",
    "three",
    "seven",
    "yet",
    "go",
    "ahead",
    "run",
    "install",
    "let",
    "go",
    "environmental",
    "setup",
    "course",
    "conda",
    "goes",
    "finds",
    "dependencies",
    "pip",
    "much",
    "far",
    "finding",
    "dependencies",
    "know",
    "exactly",
    "pip",
    "huge",
    "distribution",
    "probably",
    "want",
    "use",
    "pip",
    "install",
    "track",
    "going",
    "conda",
    "like",
    "let",
    "take",
    "since",
    "major",
    "distributed",
    "package",
    "going",
    "another",
    "quick",
    "note",
    "pip",
    "conda",
    "start",
    "project",
    "one",
    "environments",
    "using",
    "pip",
    "stick",
    "pip",
    "using",
    "conda",
    "stick",
    "conda",
    "track",
    "packages",
    "run",
    "issues",
    "tracking",
    "packages",
    "something",
    "gets",
    "overwritten",
    "important",
    "stay",
    "consistent",
    "install",
    "environments",
    "also",
    "need",
    "go",
    "ahead",
    "install",
    "numpy",
    "environment",
    "pandas",
    "go",
    "ahead",
    "added",
    "packages",
    "go",
    "ahead",
    "install",
    "environment",
    "working",
    "course",
    "pandas",
    "simply",
    "uh",
    "install",
    "pandas",
    "let",
    "install",
    "couple",
    "packages",
    "case",
    "let",
    "get",
    "install",
    "map",
    "plot",
    "library",
    "going",
    "plot",
    "end",
    "since",
    "going",
    "collecting",
    "data",
    "project",
    "packages",
    "need",
    "go",
    "close",
    "installer",
    "whatever",
    "setup",
    "go",
    "back",
    "home",
    "launch",
    "jupyter",
    "lab",
    "open",
    "browser",
    "window",
    "coming",
    "jupiter",
    "notebooks",
    "first",
    "time",
    "lab",
    "go",
    "ahead",
    "create",
    "first",
    "notebook",
    "python3",
    "also",
    "file",
    "launcher",
    "see",
    "new",
    "notebook",
    "automatically",
    "opens",
    "click",
    "right",
    "pop",
    "open",
    "left",
    "right",
    "click",
    "rename",
    "rename",
    "beautiful",
    "n",
    "b",
    "file",
    "look",
    "familiar",
    "jupyter",
    "notebook",
    "file",
    "new",
    "one",
    "mults",
    "past",
    "usually",
    "hid",
    "computer",
    "notes",
    "lesson",
    "today",
    "notes",
    "going",
    "go",
    "ahead",
    "start",
    "going",
    "see",
    "looks",
    "like",
    "data",
    "pull",
    "front",
    "end",
    "see",
    "works",
    "data",
    "scientist",
    "pulling",
    "information",
    "website",
    "first",
    "thing",
    "want",
    "want",
    "go",
    "ahead",
    "close",
    "side",
    "window",
    "way",
    "looks",
    "get",
    "nice",
    "full",
    "screen",
    "also",
    "size",
    "little",
    "bit",
    "one",
    "wonderful",
    "things",
    "working",
    "browser",
    "window",
    "control",
    "plus",
    "thing",
    "packages",
    "talked",
    "pandas",
    "imported",
    "pandas",
    "already",
    "data",
    "frame",
    "done",
    "pandas",
    "tutorial",
    "definitely",
    "worthy",
    "time",
    "go",
    "understand",
    "pandas",
    "powerful",
    "tool",
    "basically",
    "turns",
    "data",
    "spreadsheet",
    "data",
    "frame",
    "numpy",
    "number",
    "array",
    "uh",
    "kind",
    "works",
    "pandas",
    "closely",
    "far",
    "manipulating",
    "data",
    "arrays",
    "matplot",
    "want",
    "go",
    "ahead",
    "bring",
    "plt",
    "plot",
    "data",
    "end",
    "line",
    "right",
    "says",
    "matplot",
    "library",
    "inline",
    "jupiter",
    "notebook",
    "specifically",
    "tells",
    "print",
    "page",
    "lot",
    "newer",
    "versions",
    "actually",
    "require",
    "line",
    "still",
    "print",
    "page",
    "still",
    "include",
    "jupiter",
    "lab",
    "setup",
    "url",
    "going",
    "import",
    "url",
    "open",
    "opening",
    "website",
    "bs4",
    "beautiful",
    "soup",
    "going",
    "import",
    "beautiful",
    "soup",
    "last",
    "one",
    "manipulating",
    "regular",
    "expressions",
    "get",
    "part",
    "importing",
    "data",
    "lot",
    "reformatting",
    "something",
    "use",
    "one",
    "tools",
    "go",
    "ahead",
    "run",
    "bring",
    "imported",
    "packages",
    "web",
    "scraping",
    "program",
    "gon",
    "na",
    "run",
    "going",
    "dive",
    "pull",
    "data",
    "nice",
    "website",
    "pull",
    "let",
    "go",
    "ahead",
    "use",
    "upper",
    "results",
    "2018",
    "martin",
    "luther",
    "king",
    "race",
    "take",
    "actually",
    "take",
    "get",
    "well",
    "go",
    "find",
    "website",
    "going",
    "scrape",
    "see",
    "right",
    "says",
    "copy",
    "link",
    "right",
    "http",
    "website",
    "looking",
    "see",
    "right",
    "information",
    "looking",
    "let",
    "say",
    "want",
    "wanted",
    "run",
    "statistics",
    "sure",
    "would",
    "nice",
    "able",
    "pull",
    "direct",
    "api",
    "means",
    "need",
    "pull",
    "website",
    "download",
    "although",
    "ever",
    "done",
    "download",
    "click",
    "maybe",
    "paging",
    "hundred",
    "websites",
    "uh",
    "one",
    "case",
    "uh",
    "pulling",
    "different",
    "united",
    "states",
    "bills",
    "passed",
    "track",
    "voted",
    "project",
    "imagine",
    "know",
    "hundreds",
    "hundreds",
    "thousands",
    "documents",
    "voted",
    "voted",
    "goes",
    "senate",
    "goes",
    "back",
    "congress",
    "opened",
    "website",
    "pull",
    "links",
    "match",
    "certain",
    "criteria",
    "look",
    "minute",
    "go",
    "html",
    "reformat",
    "could",
    "hand",
    "download",
    "one",
    "one",
    "time",
    "would",
    "nightmare",
    "nice",
    "automate",
    "case",
    "going",
    "pulling",
    "chart",
    "want",
    "figure",
    "pull",
    "chart",
    "website",
    "go",
    "back",
    "jupiter",
    "notebook",
    "got",
    "url",
    "name",
    "string",
    "nothing",
    "fancy",
    "notice",
    "slashes",
    "forward",
    "forward",
    "slash",
    "single",
    "forward",
    "hdp",
    "double",
    "forward",
    "switch",
    "match",
    "setup",
    "going",
    "go",
    "ahead",
    "use",
    "html",
    "equals",
    "url",
    "open",
    "url",
    "url",
    "library",
    "request",
    "opening",
    "link",
    "website",
    "least",
    "pointing",
    "run",
    "sets",
    "set",
    "done",
    "setup",
    "let",
    "go",
    "ahead",
    "create",
    "object",
    "called",
    "soup",
    "remember",
    "beautiful",
    "soup",
    "imported",
    "bs4",
    "package",
    "working",
    "going",
    "beautiful",
    "soup",
    "need",
    "go",
    "ahead",
    "send",
    "html",
    "knows",
    "opening",
    "second",
    "part",
    "tell",
    "format",
    "coming",
    "common",
    "one",
    "html",
    "polls",
    "lxml",
    "setup",
    "almost",
    "end",
    "using",
    "lxml",
    "options",
    "common",
    "newer",
    "versions",
    "lot",
    "times",
    "leave",
    "already",
    "default",
    "go",
    "ahead",
    "leave",
    "remind",
    "us",
    "go",
    "ahead",
    "run",
    "newer",
    "versions",
    "actually",
    "default",
    "xml",
    "setup",
    "html",
    "leave",
    "call",
    "html",
    "going",
    "pull",
    "url",
    "run",
    "created",
    "object",
    "soup",
    "pulled",
    "website",
    "soup",
    "contains",
    "information",
    "along",
    "information",
    "website",
    "going",
    "let",
    "go",
    "real",
    "quick",
    "start",
    "digging",
    "actual",
    "soup",
    "start",
    "scooping",
    "stuff",
    "imported",
    "different",
    "modules",
    "going",
    "use",
    "package",
    "specifically",
    "beautiful",
    "soup",
    "install",
    "beautiful",
    "soup",
    "remember",
    "correctly",
    "call",
    "beautiful",
    "soup",
    "4",
    "specifically",
    "knows",
    "bringing",
    "line",
    "right",
    "key",
    "bs4",
    "installs",
    "module",
    "importing",
    "beautiful",
    "soup",
    "found",
    "url",
    "case",
    "going",
    "go",
    "pull",
    "information",
    "martin",
    "luther",
    "king",
    "dream",
    "run",
    "set",
    "html",
    "url",
    "open",
    "url",
    "see",
    "right",
    "imported",
    "import",
    "url",
    "open",
    "requesting",
    "connection",
    "send",
    "connection",
    "beautiful",
    "soup",
    "creates",
    "object",
    "called",
    "soup",
    "one",
    "course",
    "chose",
    "soup",
    "goes",
    "beautiful",
    "soup",
    "guess",
    "could",
    "chosen",
    "beautiful",
    "start",
    "extracting",
    "information",
    "website",
    "pulled",
    "onto",
    "computer",
    "soup",
    "start",
    "looking",
    "title",
    "website",
    "soup",
    "dot",
    "title",
    "print",
    "title",
    "dot",
    "text",
    "see",
    "lot",
    "beautiful",
    "suit",
    "title",
    "contains",
    "kinds",
    "information",
    "want",
    "text",
    "title",
    "add",
    "dot",
    "text",
    "end",
    "see",
    "right",
    "2018",
    "mlk",
    "dream",
    "run",
    "5k",
    "race",
    "results",
    "look",
    "tab",
    "actual",
    "title",
    "2018",
    "mlk",
    "dream",
    "run",
    "5k",
    "race",
    "title",
    "website",
    "might",
    "curious",
    "title",
    "whole",
    "title",
    "storing",
    "well",
    "let",
    "go",
    "ahead",
    "print",
    "print",
    "title",
    "print",
    "run",
    "see",
    "html",
    "tags",
    "title",
    "forward",
    "slash",
    "title",
    "end",
    "really",
    "pulling",
    "piece",
    "html",
    "code",
    "look",
    "text",
    "inside",
    "particular",
    "part",
    "html",
    "earlier",
    "mentioned",
    "links",
    "want",
    "get",
    "links",
    "page",
    "oh",
    "would",
    "fun",
    "uh",
    "could",
    "soup",
    "dot",
    "find",
    "underscore",
    "put",
    "bracket",
    "quotation",
    "marks",
    "going",
    "put",
    "key",
    "find",
    "start",
    "seeing",
    "div",
    "different",
    "options",
    "finding",
    "entities",
    "website",
    "let",
    "go",
    "ahead",
    "print",
    "links",
    "see",
    "shows",
    "different",
    "links",
    "marked",
    "eggs",
    "find",
    "also",
    "little",
    "bit",
    "hard",
    "pull",
    "h",
    "reference",
    "also",
    "add",
    "find",
    "fine",
    "tune",
    "case",
    "h",
    "reference",
    "equals",
    "true",
    "actually",
    "filter",
    "finally",
    "might",
    "four",
    "link",
    "links",
    "simply",
    "something",
    "like",
    "link",
    "want",
    "actually",
    "find",
    "h",
    "reference",
    "know",
    "h",
    "reference",
    "run",
    "see",
    "comes",
    "prints",
    "one",
    "time",
    "really",
    "useful",
    "might",
    "looking",
    "something",
    "https",
    "know",
    "link",
    "running",
    "something",
    "else",
    "might",
    "looking",
    "mail",
    "tags",
    "know",
    "mail",
    "addresses",
    "either",
    "way",
    "easily",
    "find",
    "links",
    "html",
    "document",
    "paging",
    "course",
    "packages",
    "evolved",
    "time",
    "also",
    "link",
    "dot",
    "get",
    "h",
    "reference",
    "thing",
    "format",
    "see",
    "certainly",
    "get",
    "print",
    "particular",
    "case",
    "really",
    "want",
    "get",
    "data",
    "page",
    "uh",
    "let",
    "go",
    "ahead",
    "let",
    "see",
    "looks",
    "like",
    "data",
    "let",
    "call",
    "rows",
    "go",
    "equals",
    "soup",
    "dot",
    "find",
    "underscore",
    "brackets",
    "looking",
    "row",
    "database",
    "remember",
    "html",
    "code",
    "looking",
    "tag",
    "tr",
    "want",
    "find",
    "tr",
    "take",
    "let",
    "go",
    "ahead",
    "take",
    "rows",
    "print",
    "rows",
    "time",
    "going",
    "guess",
    "going",
    "get",
    "huge",
    "amount",
    "information",
    "dumped",
    "onto",
    "page",
    "sure",
    "enough",
    "look",
    "kind",
    "goes",
    "forever",
    "array",
    "row",
    "considered",
    "array",
    "something",
    "simply",
    "putting",
    "brackets",
    "print",
    "first",
    "let",
    "first",
    "five",
    "rows",
    "beginning",
    "five",
    "see",
    "first",
    "five",
    "rows",
    "sometimes",
    "like",
    "let",
    "row",
    "zero",
    "see",
    "row",
    "zero",
    "finishers",
    "finishers",
    "191",
    "curiosity",
    "zero",
    "row",
    "one",
    "male",
    "okay",
    "starting",
    "see",
    "titles",
    "going",
    "across",
    "come",
    "rows",
    "let",
    "take",
    "look",
    "see",
    "10",
    "take",
    "look",
    "information",
    "comes",
    "across",
    "place",
    "bib",
    "name",
    "gender",
    "age",
    "city",
    "state",
    "chip",
    "chip",
    "pace",
    "gender",
    "comes",
    "way",
    "kind",
    "ending",
    "right",
    "one",
    "actually",
    "looks",
    "like",
    "start",
    "information",
    "one",
    "one",
    "1191",
    "max",
    "randolph",
    "must",
    "name",
    "male",
    "29",
    "start",
    "seeing",
    "information",
    "starts",
    "getting",
    "displayed",
    "going",
    "next",
    "thing",
    "want",
    "go",
    "back",
    "edit",
    "space",
    "starts",
    "make",
    "little",
    "bit",
    "sense",
    "keep",
    "together",
    "want",
    "row",
    "rows",
    "looking",
    "information",
    "looking",
    "well",
    "th",
    "header",
    "td",
    "looks",
    "like",
    "individual",
    "information",
    "really",
    "looking",
    "actual",
    "data",
    "looking",
    "td",
    "tags",
    "rows",
    "remember",
    "stores",
    "row",
    "also",
    "stores",
    "tags",
    "underneath",
    "rows",
    "different",
    "tags",
    "see",
    "right",
    "print",
    "one",
    "look",
    "row",
    "create",
    "another",
    "variable",
    "call",
    "row",
    "list",
    "set",
    "equal",
    "case",
    "row",
    "already",
    "pulled",
    "rows",
    "soup",
    "want",
    "find",
    "row",
    "want",
    "find",
    "td",
    "go",
    "ahead",
    "print",
    "going",
    "notice",
    "changed",
    "indent",
    "going",
    "print",
    "row",
    "list",
    "last",
    "value",
    "go",
    "row",
    "list",
    "last",
    "row",
    "going",
    "print",
    "course",
    "make",
    "sure",
    "underscore",
    "instead",
    "period",
    "typing",
    "underscore",
    "td",
    "print",
    "last",
    "row",
    "see",
    "data",
    "coming",
    "across",
    "191",
    "1216",
    "zuma",
    "ochoa",
    "hope",
    "said",
    "right",
    "female",
    "believe",
    "age",
    "40",
    "take",
    "row",
    "list",
    "lot",
    "things",
    "row",
    "list",
    "let",
    "object",
    "let",
    "cell",
    "row",
    "list",
    "going",
    "look",
    "cell",
    "look",
    "commas",
    "separated",
    "different",
    "objects",
    "going",
    "go",
    "ahead",
    "print",
    "cell",
    "dot",
    "text",
    "let",
    "take",
    "look",
    "see",
    "looks",
    "like",
    "see",
    "row",
    "get",
    "191",
    "191",
    "12",
    "16",
    "12",
    "16",
    "uh",
    "individual",
    "race",
    "forth",
    "way",
    "different",
    "settings",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "variable",
    "uh",
    "call",
    "let",
    "call",
    "data",
    "keep",
    "simple",
    "uh",
    "data",
    "row",
    "take",
    "row",
    "break",
    "individual",
    "cells",
    "call",
    "data",
    "row",
    "set",
    "empty",
    "empty",
    "row",
    "going",
    "take",
    "cells",
    "tab",
    "know",
    "cell",
    "generates",
    "text",
    "want",
    "want",
    "take",
    "data",
    "row",
    "let",
    "replace",
    "let",
    "take",
    "data",
    "row",
    "let",
    "append",
    "cell",
    "dot",
    "text",
    "going",
    "add",
    "row",
    "going",
    "row",
    "different",
    "text",
    "create",
    "row",
    "want",
    "data",
    "going",
    "everything",
    "append",
    "row",
    "data",
    "row",
    "go",
    "ahead",
    "come",
    "let",
    "print",
    "data",
    "lurking",
    "large",
    "data",
    "careful",
    "throwing",
    "data",
    "page",
    "see",
    "throw",
    "date",
    "page",
    "get",
    "finishers",
    "199",
    "male",
    "78",
    "female",
    "113",
    "one",
    "look",
    "headers",
    "file",
    "finishers",
    "uh",
    "male",
    "females",
    "like",
    "general",
    "statistics",
    "first",
    "one",
    "actually",
    "uh",
    "empty",
    "data",
    "set",
    "data",
    "continues",
    "actually",
    "actual",
    "information",
    "looking",
    "one",
    "1191",
    "max",
    "randolph",
    "mill",
    "29",
    "washington",
    "dc",
    "run",
    "time",
    "uh",
    "one",
    "78",
    "uh",
    "could",
    "really",
    "quickly",
    "get",
    "rid",
    "number",
    "different",
    "ways",
    "one",
    "gon",
    "na",
    "set",
    "data",
    "two",
    "uh",
    "get",
    "rid",
    "everything",
    "wan",
    "na",
    "keep",
    "randolph",
    "make",
    "sure",
    "randolph",
    "oh",
    "lost",
    "randolph",
    "let",
    "try",
    "one",
    "go",
    "max",
    "randolph",
    "uh",
    "simply",
    "redo",
    "date",
    "data",
    "probably",
    "want",
    "rows",
    "one",
    "going",
    "data",
    "equals",
    "data",
    "one",
    "reasons",
    "split",
    "way",
    "data",
    "science",
    "sometimes",
    "want",
    "touch",
    "original",
    "data",
    "case",
    "need",
    "case",
    "need",
    "first",
    "row",
    "put",
    "maybe",
    "call",
    "titles",
    "titles",
    "equals",
    "data",
    "zero",
    "could",
    "something",
    "print",
    "print",
    "titles",
    "print",
    "data",
    "case",
    "instead",
    "one",
    "let",
    "go",
    "minus",
    "two",
    "let",
    "look",
    "last",
    "two",
    "rows",
    "data",
    "titles",
    "uh",
    "reason",
    "put",
    "finishers",
    "191",
    "expecting",
    "little",
    "bit",
    "last",
    "couple",
    "people",
    "look",
    "like",
    "data",
    "looks",
    "fine",
    "turns",
    "generic",
    "statistics",
    "get",
    "rid",
    "titles",
    "completely",
    "really",
    "us",
    "good",
    "know",
    "data",
    "comes",
    "look",
    "data",
    "look",
    "end",
    "data",
    "minus",
    "two",
    "end",
    "see",
    "pulls",
    "data",
    "pretty",
    "good",
    "anything",
    "funky",
    "looking",
    "looks",
    "pretty",
    "clean",
    "got",
    "little",
    "careful",
    "point",
    "might",
    "come",
    "back",
    "clean",
    "data",
    "get",
    "error",
    "running",
    "data",
    "analysis",
    "might",
    "find",
    "unusual",
    "characters",
    "something",
    "missed",
    "data",
    "also",
    "notice",
    "everything",
    "string",
    "bringing",
    "might",
    "conversions",
    "test",
    "convert",
    "whatever",
    "kind",
    "data",
    "format",
    "working",
    "time",
    "want",
    "go",
    "ahead",
    "bring",
    "pandas",
    "let",
    "go",
    "ahead",
    "call",
    "idea",
    "data",
    "frame",
    "set",
    "equal",
    "remember",
    "correctly",
    "imported",
    "pandas",
    "pd",
    "standard",
    "see",
    "code",
    "examples",
    "call",
    "import",
    "pandas",
    "pd",
    "capital",
    "capital",
    "f",
    "data",
    "frame",
    "going",
    "bring",
    "data",
    "called",
    "let",
    "take",
    "print",
    "working",
    "data",
    "frames",
    "usually",
    "talking",
    "large",
    "amounts",
    "data",
    "almost",
    "never",
    "want",
    "print",
    "whole",
    "data",
    "frame",
    "going",
    "go",
    "ahead",
    "anyway",
    "see",
    "looks",
    "like",
    "see",
    "brings",
    "data",
    "frame",
    "coming",
    "mess",
    "information",
    "data",
    "let",
    "go",
    "ahead",
    "print",
    "df",
    "see",
    "looks",
    "like",
    "data",
    "frame",
    "nice",
    "organizes",
    "easy",
    "read",
    "table",
    "set",
    "label",
    "0",
    "1",
    "two",
    "three",
    "four",
    "five",
    "six",
    "row",
    "uh",
    "mel",
    "uh",
    "seventy",
    "eight",
    "none",
    "none",
    "none",
    "going",
    "across",
    "get",
    "way",
    "see",
    "max",
    "randall",
    "number",
    "three",
    "first",
    "thing",
    "flags",
    "brought",
    "bunch",
    "information",
    "really",
    "want",
    "uh",
    "three",
    "want",
    "clean",
    "one",
    "two",
    "ways",
    "try",
    "clean",
    "data",
    "clean",
    "data",
    "frame",
    "depending",
    "trying",
    "fix",
    "um",
    "want",
    "go",
    "ahead",
    "change",
    "actual",
    "data",
    "pull",
    "need",
    "information",
    "rerun",
    "reload",
    "data",
    "run",
    "see",
    "max",
    "randolph",
    "right",
    "top",
    "list",
    "like",
    "data",
    "going",
    "data",
    "frame",
    "remember",
    "said",
    "usually",
    "print",
    "whole",
    "data",
    "frame",
    "go",
    "ahead",
    "prints",
    "first",
    "five",
    "rows",
    "see",
    "13",
    "columns",
    "max",
    "randall",
    "way",
    "theo",
    "kinman",
    "usually",
    "also",
    "print",
    "df",
    "tail",
    "reason",
    "like",
    "particular",
    "two",
    "setups",
    "going",
    "change",
    "two",
    "rows",
    "put",
    "many",
    "rows",
    "want",
    "good",
    "look",
    "first",
    "part",
    "end",
    "usually",
    "extra",
    "data",
    "brought",
    "uh",
    "something",
    "messed",
    "also",
    "see",
    "190",
    "rows",
    "comes",
    "zuma",
    "lisha",
    "list",
    "nice",
    "data",
    "frame",
    "columns",
    "rows",
    "easily",
    "look",
    "see",
    "setup",
    "look",
    "names",
    "everything",
    "point",
    "might",
    "looking",
    "individual",
    "columns",
    "find",
    "different",
    "information",
    "needs",
    "try",
    "whole",
    "column",
    "pandas",
    "upper",
    "part",
    "code",
    "went",
    "cell",
    "cell",
    "row",
    "row",
    "look",
    "individual",
    "cells",
    "maybe",
    "find",
    "marker",
    "cell",
    "something",
    "specific",
    "like",
    "remove",
    "colons",
    "semicolons",
    "something",
    "brackets",
    "lot",
    "options",
    "find",
    "one",
    "actually",
    "comes",
    "pretty",
    "clean",
    "way",
    "next",
    "thing",
    "really",
    "want",
    "want",
    "look",
    "headers",
    "know",
    "make",
    "sense",
    "column",
    "one",
    "know",
    "1191",
    "need",
    "name",
    "kaiser",
    "runner",
    "guessing",
    "column",
    "two",
    "names",
    "third",
    "one",
    "looks",
    "like",
    "male",
    "female",
    "probably",
    "age",
    "want",
    "guess",
    "want",
    "bring",
    "column",
    "know",
    "exactly",
    "looking",
    "make",
    "beautiful",
    "soup",
    "us",
    "well",
    "let",
    "take",
    "column",
    "headers",
    "going",
    "set",
    "equal",
    "soup",
    "find",
    "underscore",
    "going",
    "look",
    "headers",
    "th",
    "files",
    "since",
    "jupiter",
    "lab",
    "case",
    "jupiter",
    "notebook",
    "type",
    "column",
    "headers",
    "last",
    "variable",
    "listed",
    "automatically",
    "print",
    "kind",
    "shorthand",
    "see",
    "right",
    "place",
    "guessing",
    "bib",
    "name",
    "gender",
    "age",
    "city",
    "state",
    "chip",
    "time",
    "chip",
    "pace",
    "headers",
    "right",
    "type",
    "go",
    "ahead",
    "go",
    "ahead",
    "header",
    "list",
    "equals",
    "empty",
    "array",
    "column",
    "column",
    "headers",
    "take",
    "header",
    "list",
    "pin",
    "want",
    "want",
    "text",
    "column",
    "come",
    "print",
    "header",
    "list",
    "let",
    "see",
    "looks",
    "like",
    "right",
    "get",
    "nice",
    "list",
    "different",
    "column",
    "headings",
    "want",
    "place",
    "bib",
    "name",
    "pandas",
    "pandas",
    "cool",
    "simply",
    "df",
    "columns",
    "equals",
    "header",
    "header",
    "list",
    "simply",
    "said",
    "df",
    "column",
    "set",
    "df",
    "headers",
    "print",
    "take",
    "look",
    "see",
    "right",
    "nicely",
    "placed",
    "values",
    "place",
    "bib",
    "name",
    "gender",
    "age",
    "quickly",
    "created",
    "nice",
    "data",
    "frame",
    "data",
    "displayed",
    "nice",
    "rows",
    "columns",
    "easy",
    "read",
    "data",
    "scientist",
    "first",
    "thing",
    "want",
    "know",
    "info",
    "columns",
    "rows",
    "headers",
    "see",
    "right",
    "come",
    "object",
    "big",
    "flag",
    "want",
    "anything",
    "coming",
    "strings",
    "object",
    "usually",
    "mean",
    "strings",
    "case",
    "string",
    "variable",
    "quickly",
    "read",
    "191",
    "entries",
    "date",
    "columns",
    "total",
    "14",
    "columns",
    "total",
    "14",
    "columns",
    "data",
    "shows",
    "different",
    "names",
    "type",
    "column",
    "probably",
    "good",
    "also",
    "look",
    "shape",
    "data",
    "go",
    "ahead",
    "run",
    "see",
    "191",
    "14",
    "14",
    "columns",
    "191",
    "entries",
    "like",
    "look",
    "numpy",
    "array",
    "191",
    "14",
    "shape",
    "remember",
    "variable",
    "put",
    "last",
    "variable",
    "last",
    "value",
    "set",
    "cells",
    "jupiter",
    "automatically",
    "prints",
    "different",
    "ide",
    "want",
    "go",
    "ahead",
    "use",
    "print",
    "statement",
    "uh",
    "one",
    "things",
    "want",
    "also",
    "go",
    "create",
    "second",
    "one",
    "df2",
    "equals",
    "df",
    "dot",
    "drop",
    "axis",
    "automatically",
    "equal",
    "zero",
    "lot",
    "times",
    "see",
    "something",
    "like",
    "axes",
    "equal",
    "zero",
    "comma",
    "equals",
    "axis",
    "equals",
    "0",
    "default",
    "means",
    "looking",
    "going",
    "rows",
    "could",
    "look",
    "column",
    "going",
    "across",
    "let",
    "remove",
    "going",
    "confuse",
    "axis",
    "whether",
    "going",
    "columns",
    "looking",
    "row",
    "row",
    "row",
    "row",
    "could",
    "looking",
    "column",
    "column",
    "column",
    "would",
    "drop",
    "column",
    "would",
    "drop",
    "n",
    "column",
    "equals",
    "want",
    "always",
    "confuse",
    "start",
    "means",
    "means",
    "drop",
    "would",
    "drop",
    "column",
    "null",
    "value",
    "want",
    "zero",
    "know",
    "drop",
    "value",
    "null",
    "value",
    "0",
    "always",
    "default",
    "leave",
    "curious",
    "shape",
    "lose",
    "anything",
    "null",
    "values",
    "df2",
    "dropped",
    "df",
    "go",
    "ahead",
    "run",
    "see",
    "191",
    "really",
    "drop",
    "anything",
    "always",
    "good",
    "check",
    "ways",
    "also",
    "let",
    "see",
    "n",
    "detect",
    "n",
    "values",
    "infinite",
    "values",
    "another",
    "one",
    "got",
    "watch",
    "working",
    "data",
    "going",
    "something",
    "minute",
    "got",
    "little",
    "careful",
    "also",
    "convergence",
    "going",
    "convert",
    "something",
    "people",
    "typed",
    "weird",
    "characters",
    "describe",
    "data",
    "certain",
    "way",
    "got",
    "point",
    "different",
    "columns",
    "different",
    "data",
    "point",
    "maybe",
    "asking",
    "maybe",
    "shareholder",
    "company",
    "asking",
    "hey",
    "look",
    "based",
    "chip",
    "time",
    "chip",
    "time",
    "plot",
    "versus",
    "gender",
    "gender",
    "versus",
    "chip",
    "time",
    "compare",
    "take",
    "first",
    "thing",
    "look",
    "say",
    "hey",
    "well",
    "chip",
    "time",
    "came",
    "string",
    "going",
    "issue",
    "number",
    "ways",
    "change",
    "one",
    "could",
    "go",
    "way",
    "back",
    "created",
    "data",
    "find",
    "way",
    "tag",
    "say",
    "hey",
    "whenever",
    "cell",
    "text",
    "maybe",
    "instead",
    "appending",
    "notice",
    "time",
    "two",
    "colons",
    "probably",
    "time",
    "signature",
    "let",
    "uh",
    "convert",
    "time",
    "signatures",
    "date",
    "time",
    "filled",
    "whatever",
    "lot",
    "times",
    "get",
    "get",
    "option",
    "always",
    "question",
    "bringing",
    "data",
    "whether",
    "convert",
    "data",
    "coming",
    "beginning",
    "wait",
    "till",
    "open",
    "convert",
    "go",
    "use",
    "going",
    "go",
    "ahead",
    "convert",
    "got",
    "data",
    "frame",
    "df2",
    "dropped",
    "n",
    "dropped",
    "shape",
    "fact",
    "let",
    "since",
    "difference",
    "df",
    "df2",
    "well",
    "go",
    "ahead",
    "use",
    "df2",
    "let",
    "go",
    "ahead",
    "take",
    "df2",
    "want",
    "take",
    "specific",
    "field",
    "convert",
    "kind",
    "numerical",
    "value",
    "use",
    "let",
    "add",
    "another",
    "column",
    "lot",
    "times",
    "something",
    "want",
    "want",
    "go",
    "ahead",
    "keep",
    "original",
    "columns",
    "add",
    "new",
    "column",
    "new",
    "column",
    "going",
    "based",
    "remember",
    "correctly",
    "chip",
    "time",
    "going",
    "look",
    "okay",
    "want",
    "chip",
    "time",
    "versus",
    "gender",
    "go",
    "pandas",
    "find",
    "pandas",
    "2",
    "delta",
    "actually",
    "time",
    "delta",
    "want",
    "take",
    "df2",
    "going",
    "use",
    "chip",
    "time",
    "column",
    "going",
    "say",
    "hey",
    "let",
    "look",
    "let",
    "convert",
    "everything",
    "df2",
    "chip",
    "time",
    "time",
    "delta",
    "format",
    "data",
    "type",
    "going",
    "put",
    "let",
    "go",
    "ahead",
    "run",
    "go",
    "info",
    "df2",
    "keep",
    "going",
    "look",
    "particular",
    "column",
    "want",
    "keep",
    "data",
    "frame",
    "list",
    "columns",
    "want",
    "look",
    "dot",
    "info",
    "run",
    "info",
    "see",
    "time",
    "delta",
    "64",
    "nanoseconds",
    "uh",
    "well",
    "really",
    "want",
    "nanoseconds",
    "actually",
    "probably",
    "want",
    "minutes",
    "uh",
    "let",
    "take",
    "look",
    "let",
    "take",
    "whole",
    "thing",
    "tf2",
    "let",
    "set",
    "df2",
    "df2",
    "column",
    "working",
    "use",
    "type",
    "property",
    "pandas",
    "set",
    "equal",
    "df2",
    "take",
    "column",
    "set",
    "type",
    "time",
    "delta",
    "second",
    "still",
    "delta",
    "time",
    "run",
    "see",
    "still",
    "comes",
    "hopefully",
    "turns",
    "float",
    "float",
    "64",
    "number",
    "seconds",
    "delta",
    "time",
    "finally",
    "want",
    "go",
    "ahead",
    "turn",
    "seconds",
    "say",
    "minutes",
    "know",
    "60",
    "seconds",
    "minutes",
    "divide",
    "60",
    "still",
    "float",
    "info",
    "shows",
    "us",
    "float",
    "go",
    "ahead",
    "print",
    "df2",
    "let",
    "keep",
    "small",
    "want",
    "look",
    "data",
    "want",
    "head",
    "run",
    "see",
    "right",
    "go",
    "last",
    "one",
    "chip",
    "time",
    "minutes",
    "lot",
    "times",
    "make",
    "life",
    "easy",
    "viewing",
    "since",
    "looking",
    "particular",
    "element",
    "chip",
    "time",
    "minutes",
    "see",
    "oops",
    "take",
    "go",
    "ahead",
    "take",
    "info",
    "done",
    "run",
    "see",
    "minutes",
    "minutes",
    "minutes",
    "float",
    "number",
    "keep",
    "mind",
    "16",
    "minutes",
    "80",
    "seconds",
    "always",
    "throw",
    "going",
    "many",
    "numbers",
    "forget",
    "important",
    "remember",
    "also",
    "going",
    "look",
    "one",
    "looking",
    "gender",
    "want",
    "look",
    "gender",
    "chip",
    "time",
    "minutes",
    "see",
    "head",
    "get",
    "male",
    "male",
    "male",
    "number",
    "different",
    "setups",
    "let",
    "switch",
    "tail",
    "real",
    "quick",
    "look",
    "end",
    "female",
    "female",
    "male",
    "female",
    "female",
    "two",
    "different",
    "genders",
    "chip",
    "time",
    "minutes",
    "remember",
    "brought",
    "plt",
    "used",
    "plot",
    "library",
    "matplot",
    "library",
    "drawing",
    "place",
    "putting",
    "stuff",
    "plt",
    "going",
    "bar",
    "graph",
    "want",
    "simply",
    "use",
    "df2",
    "gender",
    "df2",
    "chip",
    "time",
    "minutes",
    "going",
    "plot",
    "two",
    "bars",
    "make",
    "pretty",
    "go",
    "ahead",
    "give",
    "x",
    "label",
    "gender",
    "label",
    "chip",
    "time",
    "minutes",
    "simply",
    "remember",
    "always",
    "plots",
    "x",
    "plots",
    "gender",
    "chip",
    "time",
    "give",
    "nice",
    "title",
    "uh",
    "comparison",
    "average",
    "minutes",
    "run",
    "male",
    "female",
    "go",
    "ahead",
    "run",
    "correct",
    "titles",
    "everything",
    "matches",
    "uh",
    "get",
    "nice",
    "graph",
    "see",
    "comparison",
    "average",
    "minutes",
    "run",
    "male",
    "female",
    "chip",
    "time",
    "minutes",
    "men",
    "seem",
    "slackers",
    "particular",
    "case",
    "actually",
    "uh",
    "number",
    "studies",
    "show",
    "women",
    "team",
    "tend",
    "far",
    "lot",
    "women",
    "longer",
    "endurance",
    "men",
    "surprising",
    "see",
    "average",
    "chip",
    "time",
    "around",
    "70",
    "women",
    "100",
    "minutes",
    "another",
    "really",
    "cool",
    "thing",
    "describe",
    "data",
    "pandas",
    "function",
    "like",
    "info",
    "going",
    "include",
    "uh",
    "np",
    "number",
    "numpy",
    "number",
    "run",
    "see",
    "comes",
    "says",
    "chip",
    "time",
    "minutes",
    "account",
    "gives",
    "average",
    "mean",
    "standard",
    "deviation",
    "minimum",
    "maximum",
    "um",
    "different",
    "descriptive",
    "information",
    "going",
    "want",
    "data",
    "set",
    "kinds",
    "fun",
    "ways",
    "let",
    "box",
    "plot",
    "display",
    "information",
    "uh",
    "box",
    "plot",
    "column",
    "equals",
    "chip",
    "time",
    "minutes",
    "let",
    "go",
    "ahead",
    "run",
    "keep",
    "mistaking",
    "chip",
    "time",
    "minutes",
    "see",
    "puts",
    "nice",
    "box",
    "plot",
    "showing",
    "information",
    "different",
    "values",
    "floaters",
    "always",
    "interesting",
    "nice",
    "way",
    "seeing",
    "uh",
    "floaters",
    "one",
    "two",
    "course",
    "nice",
    "spread",
    "box",
    "plot",
    "also",
    "modify",
    "little",
    "bit",
    "add",
    "equals",
    "gender",
    "give",
    "give",
    "blank",
    "title",
    "know",
    "going",
    "get",
    "blank",
    "title",
    "add",
    "plot",
    "label",
    "run",
    "time",
    "run",
    "see",
    "box",
    "plot",
    "grouped",
    "gender",
    "chip",
    "time",
    "minutes",
    "female",
    "male",
    "two",
    "different",
    "areas",
    "see",
    "vary",
    "two",
    "different",
    "outlier",
    "also",
    "see",
    "overlap",
    "two",
    "different",
    "values",
    "looking",
    "like",
    "wow",
    "know",
    "really",
    "could",
    "draw",
    "conclusive",
    "thing",
    "saying",
    "women",
    "run",
    "time",
    "general",
    "overlapped",
    "much",
    "would",
    "one",
    "conclusions",
    "come",
    "get",
    "maybe",
    "partners",
    "come",
    "company",
    "say",
    "hey",
    "like",
    "know",
    "age",
    "versus",
    "chip",
    "time",
    "minutes",
    "something",
    "worth",
    "knowing",
    "statistics",
    "first",
    "thought",
    "simply",
    "plot",
    "actually",
    "plot",
    "scatter",
    "plot",
    "chip",
    "time",
    "versus",
    "df2",
    "h",
    "xy",
    "coordinates",
    "remember",
    "df2",
    "info",
    "let",
    "go",
    "way",
    "back",
    "looking",
    "data",
    "object",
    "far",
    "chip",
    "time",
    "h",
    "converted",
    "chip",
    "time",
    "also",
    "need",
    "convert",
    "age",
    "right",
    "plot",
    "actually",
    "let",
    "us",
    "plot",
    "give",
    "us",
    "error",
    "let",
    "us",
    "plot",
    "see",
    "ages",
    "come",
    "mess",
    "converting",
    "weird",
    "float",
    "numbers",
    "kinds",
    "things",
    "want",
    "want",
    "take",
    "age",
    "call",
    "ah",
    "underscore",
    "going",
    "take",
    "age",
    "going",
    "create",
    "another",
    "column",
    "df2",
    "age",
    "underscore",
    "going",
    "stand",
    "integers",
    "choice",
    "values",
    "number",
    "ways",
    "going",
    "uh",
    "pandas",
    "2",
    "merrick",
    "best",
    "way",
    "pandas",
    "reason",
    "numeric",
    "creates",
    "float",
    "value",
    "uh",
    "right",
    "bat",
    "want",
    "stuff",
    "converted",
    "converts",
    "least",
    "common",
    "denominator",
    "integers",
    "already",
    "get",
    "integers",
    "see",
    "kind",
    "conversion",
    "converts",
    "float",
    "value",
    "thing",
    "numeric",
    "null",
    "value",
    "put",
    "like",
    "blank",
    "line",
    "dash",
    "represent",
    "information",
    "uh",
    "convert",
    "null",
    "uh",
    "goes",
    "like",
    "string",
    "null",
    "versus",
    "kind",
    "made",
    "number",
    "python",
    "somehow",
    "created",
    "graph",
    "want",
    "add",
    "df2h",
    "converting",
    "numeric",
    "want",
    "coerce",
    "couple",
    "different",
    "options",
    "like",
    "process",
    "pandas",
    "coerce",
    "means",
    "gets",
    "weird",
    "value",
    "null",
    "value",
    "since",
    "dealing",
    "errors",
    "happens",
    "get",
    "error",
    "converting",
    "want",
    "coerce",
    "go",
    "put",
    "end",
    "bracket",
    "finally",
    "want",
    "go",
    "round",
    "put",
    "brackets",
    "around",
    "way",
    "around",
    "rounds",
    "everything",
    "series",
    "done",
    "taken",
    "df2h",
    "type",
    "object",
    "case",
    "mostly",
    "strings",
    "couple",
    "blank",
    "ones",
    "going",
    "convert",
    "numeric",
    "automatically",
    "go",
    "float",
    "going",
    "take",
    "wherever",
    "error",
    "wherever",
    "says",
    "hey",
    "convert",
    "usually",
    "blank",
    "screen",
    "like",
    "said",
    "worked",
    "many",
    "databases",
    "someone",
    "puts",
    "none",
    "someone",
    "types",
    "space",
    "sometimes",
    "dash",
    "none",
    "get",
    "really",
    "weird",
    "conversion",
    "coming",
    "covers",
    "pandas",
    "really",
    "nice",
    "way",
    "coercing",
    "saying",
    "hey",
    "number",
    "let",
    "make",
    "null",
    "value",
    "going",
    "round",
    "finally",
    "let",
    "go",
    "ahead",
    "take",
    "df",
    "sign",
    "um",
    "df2",
    "df2",
    "rounded",
    "rounded",
    "integer",
    "places",
    "age",
    "going",
    "age",
    "dropped",
    "null",
    "values",
    "way",
    "going",
    "get",
    "errors",
    "try",
    "plot",
    "null",
    "value",
    "also",
    "makes",
    "sure",
    "data",
    "deleting",
    "rows",
    "automatically",
    "axis0",
    "rows",
    "axes",
    "one",
    "column",
    "automatically",
    "removes",
    "rows",
    "null",
    "values",
    "cleans",
    "rows",
    "go",
    "ahead",
    "plot",
    "see",
    "nice",
    "clean",
    "data",
    "age",
    "way",
    "chip",
    "time",
    "set",
    "age",
    "going",
    "across",
    "makes",
    "nice",
    "plot",
    "easily",
    "show",
    "display",
    "easily",
    "show",
    "shareholders",
    "whatever",
    "group",
    "working",
    "makes",
    "really",
    "nice",
    "quick",
    "easy",
    "display",
    "going",
    "cover",
    "scikit",
    "learn",
    "tutorial",
    "lot",
    "features",
    "kinds",
    "api",
    "explore",
    "data",
    "data",
    "science",
    "effect",
    "probably",
    "one",
    "top",
    "data",
    "science",
    "packages",
    "site",
    "kit",
    "learn",
    "simple",
    "efficient",
    "tool",
    "data",
    "mining",
    "data",
    "analysis",
    "built",
    "numpy",
    "scipy",
    "matplot",
    "library",
    "interfaces",
    "well",
    "modules",
    "open",
    "source",
    "commercially",
    "usable",
    "bsd",
    "license",
    "bsd",
    "originally",
    "stood",
    "berkeley",
    "software",
    "distribution",
    "license",
    "means",
    "open",
    "source",
    "restrictions",
    "far",
    "another",
    "reason",
    "really",
    "like",
    "site",
    "kit",
    "learn",
    "setup",
    "pay",
    "commercial",
    "license",
    "versus",
    "many",
    "copyrighted",
    "platforms",
    "achieve",
    "using",
    "site",
    "kit",
    "learn",
    "use",
    "class",
    "two",
    "main",
    "things",
    "classification",
    "regression",
    "models",
    "classification",
    "identifying",
    "category",
    "object",
    "belongs",
    "one",
    "application",
    "commonly",
    "used",
    "spam",
    "detection",
    "spam",
    "spam",
    "yes",
    "banking",
    "might",
    "good",
    "loan",
    "bad",
    "loan",
    "today",
    "looking",
    "wine",
    "going",
    "good",
    "wine",
    "bad",
    "wine",
    "regression",
    "predicting",
    "attribute",
    "associated",
    "object",
    "one",
    "example",
    "stock",
    "prices",
    "prediction",
    "going",
    "next",
    "value",
    "stock",
    "today",
    "sold",
    "23",
    "dollars",
    "five",
    "cents",
    "share",
    "think",
    "gon",
    "na",
    "sell",
    "tomorrow",
    "next",
    "day",
    "next",
    "day",
    "would",
    "regression",
    "model",
    "thing",
    "weather",
    "weather",
    "forecasting",
    "regression",
    "models",
    "looking",
    "one",
    "specific",
    "prediction",
    "one",
    "attribute",
    "today",
    "classification",
    "like",
    "said",
    "gon",
    "na",
    "looking",
    "whether",
    "wine",
    "good",
    "bad",
    "certainly",
    "regression",
    "model",
    "many",
    "cases",
    "useful",
    "looking",
    "actual",
    "value",
    "also",
    "little",
    "harder",
    "follow",
    "sometimes",
    "classification",
    "really",
    "good",
    "place",
    "start",
    "also",
    "clustering",
    "model",
    "selection",
    "clustering",
    "taking",
    "automatic",
    "grouping",
    "similar",
    "objects",
    "sets",
    "customer",
    "segmentation",
    "example",
    "customers",
    "like",
    "probably",
    "also",
    "like",
    "like",
    "particular",
    "kind",
    "features",
    "objects",
    "maybe",
    "like",
    "objects",
    "referral",
    "good",
    "one",
    "especially",
    "shopping",
    "networks",
    "model",
    "selection",
    "comparing",
    "validating",
    "choosing",
    "parameters",
    "models",
    "actually",
    "little",
    "bit",
    "deeper",
    "far",
    "site",
    "kit",
    "learn",
    "looking",
    "different",
    "models",
    "predicting",
    "right",
    "course",
    "best",
    "course",
    "best",
    "solution",
    "today",
    "like",
    "said",
    "looking",
    "wines",
    "going",
    "get",
    "best",
    "wine",
    "compare",
    "different",
    "models",
    "look",
    "little",
    "bit",
    "improve",
    "model",
    "accuracy",
    "via",
    "different",
    "parameters",
    "part",
    "one",
    "gon",
    "na",
    "much",
    "tuning",
    "models",
    "looking",
    "point",
    "go",
    "two",
    "features",
    "dimensionality",
    "reduction",
    "dimensionality",
    "reduction",
    "reducing",
    "number",
    "random",
    "variables",
    "consider",
    "increases",
    "model",
    "efficiency",
    "wo",
    "touch",
    "today",
    "tutorial",
    "aware",
    "know",
    "thousands",
    "columns",
    "data",
    "coming",
    "thousands",
    "features",
    "going",
    "duplicated",
    "combine",
    "form",
    "new",
    "column",
    "reducing",
    "different",
    "features",
    "smaller",
    "amount",
    "increase",
    "efficiency",
    "model",
    "process",
    "faster",
    "cases",
    "less",
    "biased",
    "weighing",
    "feature",
    "going",
    "biased",
    "feature",
    "feature",
    "extraction",
    "normalization",
    "going",
    "transforming",
    "input",
    "data",
    "text",
    "use",
    "machine",
    "learning",
    "algorithms",
    "simple",
    "scaling",
    "one",
    "preprocessing",
    "point",
    "get",
    "discuss",
    "point",
    "let",
    "go",
    "ahead",
    "roll",
    "sleeves",
    "dive",
    "see",
    "got",
    "like",
    "use",
    "jupiter",
    "notebook",
    "use",
    "anaconda",
    "navigator",
    "install",
    "anaconda",
    "navigator",
    "default",
    "come",
    "jupiter",
    "notebook",
    "install",
    "jupyter",
    "notebook",
    "code",
    "work",
    "python",
    "setups",
    "believe",
    "running",
    "environment",
    "set",
    "go",
    "environments",
    "look",
    "python",
    "setup",
    "one",
    "three",
    "x",
    "uh",
    "go",
    "launch",
    "open",
    "web",
    "browser",
    "kind",
    "nice",
    "keeps",
    "everything",
    "separate",
    "anaconda",
    "actually",
    "different",
    "environments",
    "different",
    "versions",
    "python",
    "different",
    "modules",
    "installed",
    "environment",
    "powerful",
    "tool",
    "lot",
    "development",
    "jupyter",
    "notebook",
    "wonderful",
    "visual",
    "display",
    "certainly",
    "use",
    "know",
    "spyder",
    "another",
    "one",
    "installed",
    "anaconda",
    "actually",
    "use",
    "simple",
    "notepad",
    "plus",
    "plus",
    "python",
    "script",
    "ides",
    "work",
    "fine",
    "jupyter",
    "notebook",
    "iron",
    "python",
    "designed",
    "interface",
    "good",
    "aware",
    "different",
    "tools",
    "launch",
    "jupyter",
    "notebook",
    "open",
    "like",
    "said",
    "web",
    "page",
    "go",
    "new",
    "create",
    "new",
    "python",
    "setup",
    "like",
    "said",
    "believe",
    "python",
    "37",
    "three",
    "scikit",
    "learn",
    "works",
    "three",
    "x",
    "even",
    "two",
    "seven",
    "versions",
    "around",
    "long",
    "time",
    "big",
    "development",
    "side",
    "guys",
    "back",
    "guys",
    "gals",
    "develop",
    "went",
    "ahead",
    "put",
    "together",
    "let",
    "go",
    "ahead",
    "import",
    "different",
    "packages",
    "reading",
    "tutorials",
    "recognize",
    "pandas",
    "pd",
    "pandas",
    "library",
    "pretty",
    "widely",
    "used",
    "data",
    "frame",
    "set",
    "like",
    "columns",
    "rows",
    "spreadsheet",
    "lot",
    "different",
    "features",
    "looking",
    "stuff",
    "seaborne",
    "sits",
    "top",
    "map",
    "plot",
    "libraries",
    "graphing",
    "see",
    "quick",
    "throw",
    "graph",
    "view",
    "jupiter",
    "notebook",
    "demos",
    "showing",
    "people",
    "going",
    "going",
    "use",
    "random",
    "forest",
    "svc",
    "support",
    "vector",
    "classifier",
    "also",
    "neural",
    "network",
    "going",
    "look",
    "actually",
    "going",
    "go",
    "look",
    "three",
    "different",
    "classifiers",
    "common",
    "common",
    "classifiers",
    "let",
    "show",
    "work",
    "setup",
    "different",
    "going",
    "setup",
    "want",
    "go",
    "ahead",
    "import",
    "metrics",
    "use",
    "confusion",
    "metrics",
    "classification",
    "report",
    "going",
    "use",
    "sklearn",
    "standard",
    "scalar",
    "label",
    "encoder",
    "standard",
    "scalar",
    "probably",
    "commonly",
    "used",
    "lot",
    "different",
    "packages",
    "sklearn",
    "model",
    "selection",
    "splitting",
    "data",
    "one",
    "many",
    "ways",
    "split",
    "data",
    "different",
    "sections",
    "last",
    "line",
    "percentage",
    "map",
    "plot",
    "library",
    "line",
    "seaboard",
    "map",
    "plot",
    "library",
    "go",
    "ahead",
    "display",
    "perfectly",
    "line",
    "without",
    "wo",
    "good",
    "always",
    "include",
    "jupiter",
    "notebook",
    "jupiter",
    "notebook",
    "ide",
    "run",
    "actually",
    "open",
    "new",
    "window",
    "display",
    "graphics",
    "way",
    "need",
    "running",
    "editor",
    "like",
    "one",
    "specifically",
    "jupiter",
    "notebook",
    "even",
    "familiar",
    "editors",
    "like",
    "sure",
    "sure",
    "firefox",
    "version",
    "something",
    "jupiter",
    "notebook",
    "happens",
    "widely",
    "used",
    "go",
    "ahead",
    "hit",
    "run",
    "button",
    "saved",
    "underneath",
    "packages",
    "packages",
    "loaded",
    "run",
    "whether",
    "run",
    "top",
    "run",
    "left",
    "packages",
    "available",
    "us",
    "project",
    "working",
    "gon",
    "na",
    "make",
    "little",
    "side",
    "note",
    "playing",
    "delete",
    "something",
    "add",
    "something",
    "even",
    "went",
    "back",
    "deleted",
    "cell",
    "hit",
    "scissors",
    "still",
    "loaded",
    "kernel",
    "go",
    "kernel",
    "restart",
    "restart",
    "clear",
    "restart",
    "run",
    "still",
    "access",
    "pandas",
    "important",
    "know",
    "done",
    "loaded",
    "maybe",
    "module",
    "loaded",
    "code",
    "changed",
    "mind",
    "wondering",
    "keep",
    "putting",
    "wrong",
    "output",
    "realize",
    "still",
    "loaded",
    "kernel",
    "restart",
    "kernel",
    "quick",
    "side",
    "note",
    "working",
    "jupiter",
    "notebook",
    "one",
    "troubleshooting",
    "things",
    "comes",
    "going",
    "go",
    "ahead",
    "load",
    "data",
    "set",
    "using",
    "pandas",
    "yet",
    "go",
    "look",
    "pandas",
    "tutorial",
    "simple",
    "read",
    "csv",
    "separation",
    "let",
    "go",
    "ahead",
    "run",
    "loaded",
    "variable",
    "wine",
    "let",
    "take",
    "quick",
    "look",
    "actual",
    "file",
    "always",
    "like",
    "look",
    "actual",
    "data",
    "working",
    "case",
    "wine",
    "quality",
    "dash",
    "red",
    "open",
    "open",
    "office",
    "set",
    "separated",
    "semicolons",
    "important",
    "notice",
    "open",
    "see",
    "go",
    "way",
    "looks",
    "like",
    "1600",
    "lines",
    "data",
    "minus",
    "first",
    "one",
    "15",
    "1599",
    "lines",
    "number",
    "features",
    "going",
    "across",
    "last",
    "one",
    "quality",
    "right",
    "bat",
    "see",
    "quality",
    "uh",
    "different",
    "numbers",
    "five",
    "six",
    "seven",
    "really",
    "sure",
    "high",
    "level",
    "goes",
    "see",
    "anything",
    "seven",
    "kind",
    "five",
    "seven",
    "see",
    "five",
    "six",
    "seven",
    "four",
    "five",
    "six",
    "seven",
    "looking",
    "see",
    "values",
    "looking",
    "demo",
    "begin",
    "realize",
    "setup",
    "see",
    "different",
    "quality",
    "values",
    "alcohol",
    "sulfates",
    "ph",
    "density",
    "total",
    "sulfur",
    "dioxide",
    "features",
    "going",
    "looking",
    "since",
    "pandas",
    "wine",
    "head",
    "prints",
    "first",
    "five",
    "rolls",
    "rows",
    "data",
    "course",
    "pandas",
    "command",
    "see",
    "looks",
    "similar",
    "looking",
    "everything",
    "across",
    "automatically",
    "assigned",
    "index",
    "left",
    "pandas",
    "give",
    "index",
    "column",
    "names",
    "assigned",
    "first",
    "row",
    "first",
    "row",
    "data",
    "pulled",
    "comma",
    "separated",
    "variable",
    "file",
    "case",
    "semicolon",
    "separated",
    "shows",
    "different",
    "features",
    "going",
    "across",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "ten",
    "eleven",
    "features",
    "12",
    "including",
    "quality",
    "one",
    "want",
    "work",
    "understand",
    "uh",
    "panda",
    "data",
    "frame",
    "also",
    "let",
    "go",
    "ahead",
    "run",
    "tells",
    "us",
    "lot",
    "variables",
    "working",
    "see",
    "1599",
    "said",
    "spreadsheet",
    "looks",
    "correct",
    "float",
    "important",
    "information",
    "especially",
    "null",
    "values",
    "really",
    "trip",
    "us",
    "number",
    "ways",
    "process",
    "values",
    "one",
    "delete",
    "data",
    "enough",
    "data",
    "might",
    "delete",
    "values",
    "another",
    "one",
    "fill",
    "information",
    "like",
    "average",
    "common",
    "values",
    "means",
    "gon",
    "na",
    "worry",
    "look",
    "another",
    "way",
    "also",
    "wine",
    "null",
    "sum",
    "give",
    "us",
    "similar",
    "wo",
    "tell",
    "us",
    "float",
    "values",
    "give",
    "us",
    "summation",
    "go",
    "let",
    "run",
    "give",
    "us",
    "summation",
    "many",
    "null",
    "values",
    "one",
    "wanted",
    "know",
    "would",
    "able",
    "say",
    "okay",
    "null",
    "value",
    "tell",
    "many",
    "null",
    "values",
    "one",
    "would",
    "clearly",
    "tell",
    "maybe",
    "five",
    "null",
    "values",
    "two",
    "null",
    "values",
    "might",
    "seven",
    "null",
    "values",
    "different",
    "data",
    "probably",
    "delete",
    "ninety",
    "percent",
    "data",
    "null",
    "values",
    "might",
    "rethink",
    "either",
    "different",
    "data",
    "collection",
    "setup",
    "find",
    "different",
    "way",
    "deal",
    "null",
    "values",
    "talk",
    "little",
    "bit",
    "models",
    "models",
    "features",
    "especially",
    "forest",
    "model",
    "going",
    "look",
    "point",
    "need",
    "make",
    "choice",
    "keep",
    "simple",
    "going",
    "little",
    "data",
    "going",
    "create",
    "bins",
    "bins",
    "going",
    "2",
    "comma",
    "comma",
    "means",
    "going",
    "take",
    "values",
    "remember",
    "let",
    "scroll",
    "back",
    "quality",
    "quality",
    "comes",
    "two",
    "eight",
    "basically",
    "one",
    "eight",
    "five",
    "five",
    "five",
    "six",
    "see",
    "first",
    "five",
    "lines",
    "variation",
    "quality",
    "going",
    "separate",
    "two",
    "bends",
    "quality",
    "decided",
    "create",
    "two",
    "bins",
    "bad",
    "good",
    "going",
    "labels",
    "two",
    "bins",
    "spread",
    "exact",
    "index",
    "exact",
    "index",
    "0",
    "8",
    "change",
    "could",
    "actually",
    "make",
    "smaller",
    "greater",
    "looking",
    "really",
    "good",
    "wine",
    "looking",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "looking",
    "wines",
    "seven",
    "eight",
    "high",
    "quality",
    "know",
    "like",
    "want",
    "put",
    "dinner",
    "table",
    "night",
    "might",
    "taste",
    "good",
    "wine",
    "wine",
    "mediocre",
    "wine",
    "panda",
    "pd",
    "remember",
    "stands",
    "pandas",
    "pandas",
    "cut",
    "means",
    "cutting",
    "wine",
    "quality",
    "replacing",
    "bins",
    "equals",
    "bins",
    "command",
    "bins",
    "actual",
    "command",
    "variable",
    "bins",
    "comma",
    "two",
    "different",
    "bins",
    "labels",
    "bad",
    "good",
    "also",
    "let",
    "way",
    "wine",
    "quality",
    "since",
    "working",
    "let",
    "look",
    "unique",
    "another",
    "pandas",
    "command",
    "run",
    "get",
    "lovely",
    "error",
    "get",
    "error",
    "well",
    "replaced",
    "wine",
    "quality",
    "cut",
    "changes",
    "things",
    "literally",
    "altered",
    "one",
    "variables",
    "saved",
    "memory",
    "go",
    "kernel",
    "restart",
    "run",
    "starts",
    "beginning",
    "see",
    "fixes",
    "error",
    "cutting",
    "something",
    "already",
    "cut",
    "wine",
    "quality",
    "unique",
    "wine",
    "quality",
    "unique",
    "bad",
    "good",
    "two",
    "qualities",
    "objects",
    "bad",
    "less",
    "good",
    "meaning",
    "bad",
    "going",
    "zero",
    "good",
    "going",
    "one",
    "make",
    "happen",
    "need",
    "actually",
    "encode",
    "use",
    "label",
    "quality",
    "equals",
    "label",
    "encoder",
    "label",
    "encoder",
    "let",
    "go",
    "back",
    "since",
    "part",
    "sklearn",
    "one",
    "things",
    "imported",
    "label",
    "encoder",
    "see",
    "right",
    "sklearn",
    "dot",
    "processing",
    "import",
    "standard",
    "scalar",
    "going",
    "use",
    "minute",
    "label",
    "encoder",
    "tells",
    "use",
    "equals",
    "0",
    "good",
    "equals",
    "go",
    "ahead",
    "run",
    "need",
    "apply",
    "data",
    "take",
    "wine",
    "quality",
    "going",
    "set",
    "equal",
    "label",
    "quality",
    "encoder",
    "let",
    "look",
    "line",
    "right",
    "dot",
    "fit",
    "transform",
    "see",
    "common",
    "used",
    "fit",
    "transform",
    "fit",
    "transform",
    "often",
    "also",
    "transforming",
    "data",
    "fit",
    "combined",
    "one",
    "command",
    "going",
    "take",
    "wine",
    "quality",
    "feed",
    "back",
    "put",
    "back",
    "wine",
    "quality",
    "setup",
    "run",
    "wine",
    "head",
    "first",
    "five",
    "values",
    "go",
    "ahead",
    "run",
    "see",
    "right",
    "underneath",
    "quality",
    "zero",
    "zero",
    "zero",
    "go",
    "little",
    "look",
    "better",
    "wines",
    "let",
    "see",
    "ones",
    "yeah",
    "go",
    "ones",
    "look",
    "ten",
    "see",
    "way",
    "zero",
    "one",
    "quality",
    "looking",
    "high",
    "quality",
    "looking",
    "seven",
    "eights",
    "six",
    "point",
    "five",
    "uh",
    "let",
    "go",
    "ahead",
    "grab",
    "go",
    "wine",
    "quality",
    "let",
    "take",
    "look",
    "else",
    "information",
    "wine",
    "quality",
    "simple",
    "pandas",
    "thing",
    "value",
    "counts",
    "hopefully",
    "type",
    "correctly",
    "see",
    "217",
    "wines",
    "going",
    "higher",
    "quality",
    "217",
    "rest",
    "fall",
    "bad",
    "bucket",
    "zero",
    "uh",
    "1382",
    "looking",
    "top",
    "percentage",
    "top",
    "probably",
    "little",
    "20",
    "percent",
    "looking",
    "top",
    "wines",
    "seven",
    "eights",
    "let",
    "use",
    "let",
    "plot",
    "graph",
    "take",
    "look",
    "sns",
    "remember",
    "correctly",
    "let",
    "go",
    "back",
    "top",
    "seaborn",
    "seaborn",
    "sits",
    "top",
    "matplot",
    "library",
    "lot",
    "added",
    "features",
    "plus",
    "features",
    "matplot",
    "library",
    "also",
    "makes",
    "quick",
    "easy",
    "put",
    "graph",
    "simple",
    "bar",
    "graph",
    "actually",
    "call",
    "count",
    "plot",
    "want",
    "count",
    "plot",
    "wine",
    "quality",
    "let",
    "put",
    "wine",
    "quality",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "looks",
    "like",
    "nice",
    "line",
    "remember",
    "inline",
    "make",
    "sure",
    "appears",
    "see",
    "blue",
    "space",
    "first",
    "space",
    "represents",
    "low",
    "quality",
    "wine",
    "second",
    "bar",
    "high",
    "quality",
    "line",
    "see",
    "looking",
    "top",
    "quality",
    "wine",
    "wine",
    "want",
    "give",
    "away",
    "neighbors",
    "maybe",
    "like",
    "neighbors",
    "maybe",
    "give",
    "good",
    "quality",
    "wine",
    "know",
    "bad",
    "quality",
    "wine",
    "guess",
    "use",
    "cooking",
    "go",
    "see",
    "forms",
    "nice",
    "little",
    "graph",
    "us",
    "seaboard",
    "see",
    "setup",
    "looked",
    "done",
    "described",
    "data",
    "little",
    "bit",
    "picture",
    "much",
    "wine",
    "expect",
    "high",
    "quality",
    "low",
    "quality",
    "checked",
    "fact",
    "none",
    "null",
    "values",
    "contend",
    "odd",
    "values",
    "things",
    "sometimes",
    "look",
    "like",
    "values",
    "way",
    "chart",
    "measurement",
    "might",
    "miscalibrated",
    "equipment",
    "scientific",
    "field",
    "next",
    "step",
    "want",
    "go",
    "ahead",
    "want",
    "go",
    "ahead",
    "separate",
    "data",
    "set",
    "reformat",
    "data",
    "set",
    "usually",
    "use",
    "capital",
    "x",
    "denotes",
    "features",
    "working",
    "usually",
    "use",
    "lowercase",
    "denotes",
    "uh",
    "case",
    "quality",
    "looking",
    "take",
    "go",
    "wine",
    "going",
    "full",
    "thing",
    "wine",
    "dropping",
    "dropping",
    "dropping",
    "quality",
    "features",
    "minus",
    "quality",
    "make",
    "sure",
    "axes",
    "equals",
    "one",
    "left",
    "would",
    "still",
    "come",
    "correctly",
    "way",
    "processes",
    "defaults",
    "going",
    "remove",
    "quality",
    "x",
    "going",
    "one",
    "quality",
    "looking",
    "put",
    "go",
    "ahead",
    "run",
    "separated",
    "features",
    "want",
    "use",
    "predict",
    "quality",
    "wine",
    "quality",
    "next",
    "step",
    "going",
    "create",
    "data",
    "set",
    "model",
    "got",
    "know",
    "good",
    "model",
    "going",
    "split",
    "data",
    "train",
    "test",
    "splitting",
    "data",
    "one",
    "packages",
    "imported",
    "sklearn",
    "actual",
    "package",
    "train",
    "test",
    "split",
    "going",
    "x",
    "test",
    "size",
    "random",
    "state",
    "returns",
    "four",
    "variables",
    "common",
    "see",
    "capital",
    "x",
    "train",
    "going",
    "train",
    "set",
    "capital",
    "x",
    "test",
    "data",
    "going",
    "keep",
    "side",
    "test",
    "train",
    "remember",
    "stands",
    "quality",
    "answer",
    "looking",
    "train",
    "going",
    "use",
    "x",
    "train",
    "train",
    "test",
    "see",
    "good",
    "x",
    "test",
    "train",
    "test",
    "split",
    "let",
    "go",
    "back",
    "top",
    "part",
    "sklearn",
    "model",
    "selection",
    "import",
    "train",
    "test",
    "split",
    "lot",
    "ways",
    "split",
    "data",
    "first",
    "starting",
    "first",
    "model",
    "probably",
    "start",
    "basics",
    "one",
    "test",
    "training",
    "one",
    "test",
    "test",
    "size",
    "point",
    "two",
    "twenty",
    "percent",
    "random",
    "state",
    "means",
    "start",
    "like",
    "random",
    "seed",
    "number",
    "important",
    "back",
    "randomly",
    "selecting",
    "ones",
    "going",
    "use",
    "since",
    "common",
    "way",
    "going",
    "use",
    "today",
    "even",
    "sk",
    "learned",
    "package",
    "yet",
    "someone",
    "still",
    "putting",
    "one",
    "new",
    "things",
    "split",
    "data",
    "thirds",
    "run",
    "model",
    "combine",
    "thirds",
    "two",
    "thirds",
    "training",
    "one",
    "testing",
    "actually",
    "go",
    "data",
    "come",
    "three",
    "different",
    "test",
    "results",
    "pretty",
    "cool",
    "pretty",
    "cool",
    "way",
    "could",
    "actually",
    "splitting",
    "thirds",
    "test",
    "size",
    "one",
    "test",
    "set",
    "third",
    "split",
    "training",
    "set",
    "also",
    "thirds",
    "also",
    "get",
    "three",
    "different",
    "data",
    "sets",
    "works",
    "fine",
    "projects",
    "especially",
    "starting",
    "works",
    "great",
    "x",
    "train",
    "x",
    "test",
    "train",
    "test",
    "need",
    "go",
    "ahead",
    "scalar",
    "let",
    "talk",
    "really",
    "important",
    "models",
    "need",
    "scaling",
    "going",
    "models",
    "create",
    "scalar",
    "variable",
    "call",
    "sc",
    "standard",
    "scalar",
    "remember",
    "correctly",
    "imported",
    "wrong",
    "label",
    "encoder",
    "standard",
    "scalar",
    "setup",
    "scalar",
    "going",
    "convert",
    "values",
    "instead",
    "values",
    "go",
    "zero",
    "remember",
    "values",
    "54",
    "60",
    "40",
    "59",
    "total",
    "sulfur",
    "dioxide",
    "would",
    "huge",
    "values",
    "coming",
    "model",
    "models",
    "would",
    "look",
    "become",
    "biased",
    "sulfur",
    "dioxide",
    "hugest",
    "impact",
    "value",
    "chlorides",
    "would",
    "little",
    "impact",
    "small",
    "number",
    "take",
    "scalar",
    "kind",
    "level",
    "playing",
    "field",
    "depending",
    "scalar",
    "sets",
    "0",
    "1",
    "lot",
    "times",
    "let",
    "go",
    "ahead",
    "take",
    "look",
    "go",
    "ahead",
    "start",
    "x",
    "train",
    "x",
    "train",
    "equals",
    "sc",
    "fit",
    "transform",
    "talked",
    "earlier",
    "sk",
    "learn",
    "setup",
    "going",
    "fit",
    "transform",
    "x",
    "train",
    "x",
    "train",
    "variable",
    "x",
    "train",
    "also",
    "need",
    "test",
    "important",
    "need",
    "note",
    "want",
    "refit",
    "data",
    "want",
    "use",
    "fit",
    "used",
    "training",
    "testing",
    "otherwise",
    "get",
    "different",
    "results",
    "oops",
    "fit",
    "transform",
    "going",
    "transform",
    "test",
    "side",
    "data",
    "x",
    "test",
    "want",
    "transform",
    "let",
    "go",
    "ahead",
    "run",
    "idea",
    "let",
    "go",
    "ahead",
    "take",
    "print",
    "x",
    "train",
    "oh",
    "let",
    "first",
    "10",
    "variables",
    "similar",
    "way",
    "head",
    "data",
    "frame",
    "see",
    "variables",
    "much",
    "uniform",
    "scaled",
    "scale",
    "certain",
    "numbers",
    "basic",
    "scalar",
    "fine",
    "tune",
    "let",
    "defaults",
    "fine",
    "cases",
    "really",
    "need",
    "mess",
    "much",
    "look",
    "like",
    "goes",
    "like",
    "minus",
    "probably",
    "minus",
    "two",
    "two",
    "something",
    "like",
    "looking",
    "train",
    "variable",
    "go",
    "ahead",
    "cut",
    "one",
    "actually",
    "build",
    "models",
    "start",
    "discussing",
    "sk",
    "learned",
    "models",
    "going",
    "use",
    "covered",
    "lot",
    "ground",
    "working",
    "models",
    "put",
    "lot",
    "work",
    "data",
    "looked",
    "data",
    "notice",
    "uh",
    "separated",
    "loaded",
    "went",
    "found",
    "null",
    "values",
    "hard",
    "say",
    "nodal",
    "values",
    "none",
    "none",
    "nobody",
    "ca",
    "say",
    "course",
    "sum",
    "lot",
    "null",
    "values",
    "would",
    "really",
    "important",
    "coming",
    "null",
    "summary",
    "looked",
    "data",
    "far",
    "quality",
    "looking",
    "bins",
    "would",
    "something",
    "might",
    "start",
    "playing",
    "maybe",
    "want",
    "super",
    "fine",
    "wine",
    "want",
    "seven",
    "eights",
    "maybe",
    "want",
    "split",
    "differently",
    "certainly",
    "play",
    "bins",
    "get",
    "different",
    "values",
    "make",
    "bins",
    "smaller",
    "lean",
    "towards",
    "lower",
    "quality",
    "like",
    "medium",
    "high",
    "quality",
    "went",
    "ahead",
    "gave",
    "labels",
    "pandas",
    "setting",
    "unique",
    "labels",
    "group",
    "names",
    "bad",
    "good",
    "badass",
    "lesson",
    "good",
    "could",
    "important",
    "know",
    "many",
    "times",
    "people",
    "go",
    "models",
    "reversed",
    "something",
    "go",
    "back",
    "like",
    "data",
    "looking",
    "correct",
    "important",
    "remember",
    "double",
    "check",
    "used",
    "label",
    "encoder",
    "um",
    "set",
    "quality",
    "zero",
    "one",
    "good",
    "case",
    "bad",
    "good",
    "zero",
    "one",
    "double",
    "check",
    "make",
    "sure",
    "came",
    "quality",
    "threw",
    "graph",
    "people",
    "like",
    "see",
    "graphs",
    "know",
    "start",
    "looking",
    "numbers",
    "text",
    "get",
    "say",
    "oh",
    "yes",
    "know",
    "much",
    "wine",
    "going",
    "label",
    "subpar",
    "good",
    "much",
    "going",
    "label",
    "good",
    "got",
    "finally",
    "separating",
    "data",
    "ready",
    "go",
    "models",
    "models",
    "take",
    "x",
    "case",
    "x",
    "features",
    "minus",
    "one",
    "looking",
    "features",
    "looking",
    "case",
    "dropped",
    "quality",
    "case",
    "added",
    "quality",
    "need",
    "training",
    "set",
    "test",
    "set",
    "see",
    "good",
    "models",
    "went",
    "ahead",
    "split",
    "models",
    "x",
    "train",
    "x",
    "test",
    "train",
    "test",
    "using",
    "train",
    "test",
    "split",
    "part",
    "sk",
    "learn",
    "package",
    "far",
    "testing",
    "size",
    "point",
    "two",
    "twenty",
    "percent",
    "default",
    "twenty",
    "five",
    "percent",
    "leave",
    "default",
    "setup",
    "random",
    "state",
    "equals",
    "leave",
    "use",
    "random",
    "state",
    "believe",
    "default",
    "one",
    "look",
    "back",
    "finally",
    "scaled",
    "data",
    "important",
    "scale",
    "data",
    "going",
    "back",
    "something",
    "coming",
    "hundred",
    "going",
    "really",
    "outweigh",
    "something",
    "models",
    "different",
    "models",
    "handle",
    "differently",
    "look",
    "different",
    "models",
    "talk",
    "little",
    "bit",
    "going",
    "look",
    "three",
    "models",
    "today",
    "three",
    "top",
    "models",
    "used",
    "see",
    "compare",
    "numbers",
    "come",
    "going",
    "look",
    "three",
    "different",
    "setups",
    "oh",
    "let",
    "change",
    "cell",
    "mark",
    "go",
    "going",
    "start",
    "random",
    "forest",
    "classifier",
    "three",
    "sets",
    "looking",
    "random",
    "forest",
    "classifier",
    "support",
    "vector",
    "classifier",
    "neural",
    "network",
    "start",
    "random",
    "forest",
    "classifier",
    "least",
    "amount",
    "parts",
    "moving",
    "parts",
    "fine",
    "tune",
    "let",
    "go",
    "ahead",
    "put",
    "going",
    "call",
    "rfc",
    "random",
    "force",
    "classifier",
    "remember",
    "imported",
    "let",
    "go",
    "back",
    "top",
    "real",
    "quick",
    "import",
    "random",
    "fourth",
    "classifier",
    "sk",
    "learn",
    "ensemble",
    "also",
    "let",
    "point",
    "svm",
    "imported",
    "support",
    "vector",
    "classifier",
    "svm",
    "support",
    "vector",
    "model",
    "support",
    "vector",
    "classifier",
    "also",
    "neural",
    "network",
    "going",
    "perceptron",
    "classifier",
    "kind",
    "mouthful",
    "p",
    "perceptron",
    "worry",
    "much",
    "name",
    "neural",
    "network",
    "lot",
    "different",
    "options",
    "setups",
    "came",
    "perceptron",
    "three",
    "different",
    "models",
    "going",
    "go",
    "one",
    "going",
    "weigh",
    "metrics",
    "going",
    "use",
    "confusion",
    "metrics",
    "also",
    "sklearn",
    "package",
    "see",
    "good",
    "model",
    "split",
    "let",
    "go",
    "back",
    "take",
    "look",
    "rfs",
    "equals",
    "random",
    "forest",
    "classifier",
    "n",
    "estimators",
    "equals",
    "value",
    "play",
    "random",
    "forest",
    "classifier",
    "many",
    "forests",
    "need",
    "many",
    "trees",
    "forest",
    "many",
    "models",
    "makes",
    "pretty",
    "good",
    "startup",
    "model",
    "playing",
    "one",
    "number",
    "pretty",
    "clear",
    "lower",
    "number",
    "raise",
    "usually",
    "start",
    "higher",
    "number",
    "bring",
    "see",
    "keeps",
    "value",
    "less",
    "know",
    "smaller",
    "model",
    "better",
    "fit",
    "easier",
    "send",
    "somebody",
    "else",
    "going",
    "distribute",
    "random",
    "forest",
    "classifier",
    "everything",
    "read",
    "says",
    "used",
    "kind",
    "data",
    "set",
    "run",
    "big",
    "data",
    "run",
    "smaller",
    "data",
    "obviously",
    "tends",
    "work",
    "best",
    "go",
    "ahead",
    "take",
    "rfc",
    "copied",
    "side",
    "dot",
    "fit",
    "x",
    "train",
    "comma",
    "train",
    "sending",
    "features",
    "quality",
    "train",
    "want",
    "predict",
    "simple",
    "fit",
    "remember",
    "sk",
    "learn",
    "everything",
    "fit",
    "transform",
    "another",
    "one",
    "predict",
    "second",
    "let",
    "predict",
    "rfc",
    "equals",
    "rfc",
    "model",
    "predict",
    "predicting",
    "well",
    "trained",
    "train",
    "values",
    "need",
    "test",
    "x",
    "test",
    "done",
    "going",
    "three",
    "lines",
    "code",
    "need",
    "create",
    "random",
    "force",
    "variable",
    "fit",
    "training",
    "data",
    "programming",
    "fit",
    "case",
    "got",
    "200",
    "different",
    "trees",
    "going",
    "build",
    "going",
    "predict",
    "let",
    "go",
    "ahead",
    "run",
    "actually",
    "something",
    "like",
    "oh",
    "let",
    "predict",
    "rfc",
    "real",
    "quick",
    "look",
    "first",
    "20",
    "variables",
    "let",
    "go",
    "ahead",
    "run",
    "uh",
    "first",
    "20",
    "variables",
    "three",
    "wines",
    "make",
    "cut",
    "17",
    "17",
    "bad",
    "quality",
    "three",
    "good",
    "quality",
    "predicted",
    "values",
    "remember",
    "correctly",
    "go",
    "ahead",
    "take",
    "based",
    "test",
    "first",
    "20",
    "values",
    "test",
    "see",
    "different",
    "features",
    "listed",
    "skilled",
    "look",
    "little",
    "bit",
    "confusing",
    "look",
    "hard",
    "read",
    "minus",
    "01",
    "minus",
    "still",
    "minus",
    "0",
    "1",
    "think",
    "confused",
    "earlier",
    "said",
    "0",
    "2",
    "negative",
    "1",
    "scale",
    "go",
    "ahead",
    "cut",
    "run",
    "setup",
    "run",
    "prediction",
    "predicted",
    "values",
    "well",
    "one",
    "could",
    "publish",
    "well",
    "want",
    "want",
    "see",
    "model",
    "model",
    "performed",
    "whole",
    "reason",
    "splitting",
    "training",
    "testing",
    "model",
    "remember",
    "imported",
    "classification",
    "report",
    "sklearn",
    "confusion",
    "matrix",
    "classification",
    "report",
    "classification",
    "report",
    "actually",
    "sits",
    "confusion",
    "matrix",
    "uses",
    "information",
    "classification",
    "report",
    "want",
    "know",
    "good",
    "tests",
    "actual",
    "values",
    "versus",
    "predicted",
    "rfc",
    "go",
    "ahead",
    "print",
    "report",
    "let",
    "take",
    "look",
    "see",
    "precision",
    "zero",
    "point",
    "92",
    "labeled",
    "bad",
    "actually",
    "bad",
    "precision",
    "quality",
    "wines",
    "running",
    "78",
    "percent",
    "kind",
    "give",
    "us",
    "overall",
    "90",
    "see",
    "f1",
    "score",
    "support",
    "set",
    "recall",
    "could",
    "also",
    "confusion",
    "matrix",
    "gives",
    "little",
    "bit",
    "information",
    "going",
    "good",
    "enough",
    "right",
    "going",
    "look",
    "good",
    "model",
    "want",
    "compare",
    "random",
    "fourth",
    "classifier",
    "two",
    "models",
    "know",
    "let",
    "go",
    "ahead",
    "put",
    "confusion",
    "matrix",
    "see",
    "test",
    "prediction",
    "rfc",
    "confusion",
    "matrix",
    "see",
    "266",
    "correct",
    "seven",
    "wrong",
    "missed",
    "labels",
    "bad",
    "wine",
    "lot",
    "missed",
    "labels",
    "good",
    "wine",
    "quality",
    "labels",
    "good",
    "good",
    "predicting",
    "bad",
    "wine",
    "good",
    "predicting",
    "whether",
    "good",
    "quality",
    "wine",
    "important",
    "note",
    "basic",
    "random",
    "force",
    "classifier",
    "let",
    "go",
    "ahead",
    "upsell",
    "change",
    "cell",
    "type",
    "mark",
    "run",
    "nice",
    "label",
    "let",
    "look",
    "svm",
    "classifier",
    "support",
    "vector",
    "model",
    "look",
    "familiar",
    "clf",
    "going",
    "create",
    "call",
    "like",
    "call",
    "rfc",
    "clf",
    "dot",
    "fit",
    "identical",
    "x",
    "train",
    "comma",
    "train",
    "like",
    "let",
    "go",
    "ahead",
    "prediction",
    "clf",
    "predict",
    "going",
    "equal",
    "clf",
    "dot",
    "predict",
    "want",
    "go",
    "ahead",
    "use",
    "x",
    "underscore",
    "test",
    "right",
    "realize",
    "create",
    "different",
    "models",
    "actually",
    "create",
    "loop",
    "go",
    "different",
    "models",
    "put",
    "data",
    "designed",
    "designed",
    "ability",
    "let",
    "go",
    "ahead",
    "run",
    "let",
    "go",
    "ahead",
    "classification",
    "report",
    "going",
    "copy",
    "right",
    "say",
    "copy",
    "paste",
    "code",
    "reason",
    "go",
    "edit",
    "unbearably",
    "miss",
    "something",
    "two",
    "lines",
    "think",
    "safe",
    "today",
    "let",
    "go",
    "ahead",
    "run",
    "let",
    "take",
    "look",
    "svm",
    "classifier",
    "came",
    "90",
    "running",
    "86",
    "percent",
    "good",
    "remember",
    "randomly",
    "split",
    "data",
    "run",
    "bunch",
    "times",
    "see",
    "changes",
    "numbers",
    "size",
    "data",
    "read",
    "hundred",
    "times",
    "would",
    "probably",
    "within",
    "plus",
    "minus",
    "three",
    "four",
    "fact",
    "ran",
    "100",
    "times",
    "probably",
    "see",
    "come",
    "almost",
    "far",
    "well",
    "classification",
    "confusion",
    "matrix",
    "let",
    "take",
    "look",
    "one",
    "22",
    "25",
    "one",
    "35",
    "quite",
    "good",
    "shows",
    "71",
    "percent",
    "versus",
    "78",
    "percent",
    "going",
    "svm",
    "classifier",
    "also",
    "want",
    "show",
    "one",
    "kind",
    "tease",
    "little",
    "bit",
    "jump",
    "neural",
    "networks",
    "big",
    "save",
    "deep",
    "learning",
    "everything",
    "else",
    "must",
    "shallow",
    "learning",
    "joke",
    "let",
    "talk",
    "little",
    "bit",
    "svm",
    "versus",
    "random",
    "forest",
    "classifier",
    "svm",
    "tends",
    "work",
    "better",
    "smaller",
    "numbers",
    "also",
    "works",
    "really",
    "good",
    "lot",
    "times",
    "convert",
    "things",
    "numbers",
    "bins",
    "things",
    "like",
    "random",
    "forest",
    "tends",
    "better",
    "least",
    "brief",
    "experience",
    "lot",
    "raw",
    "data",
    "coming",
    "svm",
    "usually",
    "fastest",
    "easiest",
    "apply",
    "model",
    "benefits",
    "find",
    "run",
    "like",
    "100",
    "times",
    "difference",
    "two",
    "data",
    "set",
    "like",
    "going",
    "go",
    "away",
    "randomness",
    "involved",
    "depending",
    "data",
    "took",
    "classify",
    "big",
    "one",
    "neural",
    "networks",
    "makes",
    "neural",
    "networks",
    "nice",
    "look",
    "huge",
    "amounts",
    "data",
    "project",
    "like",
    "probably",
    "need",
    "neural",
    "network",
    "important",
    "see",
    "work",
    "differently",
    "come",
    "differently",
    "work",
    "huge",
    "amounts",
    "data",
    "also",
    "many",
    "respects",
    "work",
    "really",
    "good",
    "text",
    "analysis",
    "especially",
    "time",
    "sensitive",
    "order",
    "text",
    "come",
    "different",
    "ways",
    "feeding",
    "data",
    "series",
    "order",
    "words",
    "really",
    "important",
    "thing",
    "uh",
    "starting",
    "predict",
    "stock",
    "market",
    "tons",
    "data",
    "coming",
    "different",
    "sources",
    "neural",
    "network",
    "really",
    "process",
    "powerful",
    "way",
    "pull",
    "things",
    "seen",
    "say",
    "lots",
    "data",
    "coming",
    "talking",
    "high",
    "lows",
    "run",
    "svm",
    "real",
    "easily",
    "talking",
    "data",
    "comes",
    "maybe",
    "pulled",
    "twitter",
    "feeds",
    "word",
    "counts",
    "going",
    "pulled",
    "uh",
    "different",
    "news",
    "feeds",
    "business",
    "looking",
    "different",
    "releases",
    "release",
    "different",
    "reports",
    "different",
    "data",
    "coming",
    "neural",
    "network",
    "really",
    "good",
    "pictures",
    "picture",
    "processing",
    "really",
    "moving",
    "heavily",
    "neural",
    "network",
    "pixel",
    "2",
    "pixel",
    "3",
    "phone",
    "put",
    "google",
    "neural",
    "network",
    "kind",
    "goofy",
    "put",
    "little",
    "star",
    "wars",
    "androids",
    "dancing",
    "around",
    "pictures",
    "things",
    "like",
    "done",
    "neural",
    "network",
    "lot",
    "different",
    "uses",
    "also",
    "requires",
    "lot",
    "data",
    "little",
    "something",
    "like",
    "look",
    "familiar",
    "done",
    "twice",
    "persepotron",
    "classifier",
    "call",
    "mlpc",
    "imported",
    "mlpc",
    "classifier",
    "lot",
    "settings",
    "first",
    "one",
    "hidden",
    "layers",
    "hidden",
    "layers",
    "going",
    "three",
    "layers",
    "11",
    "many",
    "nodes",
    "layer",
    "comes",
    "based",
    "fact",
    "11",
    "features",
    "coming",
    "went",
    "ahead",
    "three",
    "layers",
    "probably",
    "get",
    "lot",
    "less",
    "want",
    "sit",
    "play",
    "afternoon",
    "one",
    "things",
    "play",
    "lot",
    "hidden",
    "layers",
    "resources",
    "using",
    "also",
    "run",
    "problems",
    "overfitting",
    "many",
    "layers",
    "also",
    "run",
    "higher",
    "iterations",
    "max",
    "iteration",
    "set",
    "500",
    "default",
    "200",
    "used",
    "three",
    "layers",
    "11",
    "way",
    "kind",
    "default",
    "use",
    "realized",
    "usually",
    "three",
    "layers",
    "going",
    "number",
    "features",
    "going",
    "across",
    "see",
    "pretty",
    "common",
    "first",
    "classifier",
    "working",
    "neural",
    "networks",
    "also",
    "means",
    "higher",
    "iterations",
    "iterations",
    "500",
    "means",
    "going",
    "data",
    "500",
    "times",
    "program",
    "different",
    "layers",
    "carefully",
    "adjust",
    "full",
    "tutorials",
    "go",
    "look",
    "neural",
    "networks",
    "understand",
    "neural",
    "network",
    "settings",
    "lot",
    "course",
    "looking",
    "previous",
    "model",
    "fit",
    "thing",
    "mlpc",
    "fit",
    "x",
    "train",
    "train",
    "going",
    "create",
    "prediction",
    "let",
    "predict",
    "mlpc",
    "going",
    "equal",
    "mlpc",
    "take",
    "thing",
    "predict",
    "x",
    "test",
    "let",
    "put",
    "dot",
    "predict",
    "test",
    "run",
    "programmed",
    "prediction",
    "go",
    "ahead",
    "copy",
    "print",
    "always",
    "careful",
    "copy",
    "paste",
    "always",
    "run",
    "chance",
    "missing",
    "one",
    "variables",
    "lot",
    "coding",
    "might",
    "want",
    "skip",
    "copy",
    "paste",
    "type",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "looks",
    "like",
    "came",
    "88",
    "going",
    "compare",
    "86",
    "tree",
    "svm",
    "classifier",
    "90",
    "random",
    "force",
    "classifier",
    "keep",
    "mind",
    "random",
    "forest",
    "classifiers",
    "good",
    "data",
    "svm",
    "smaller",
    "amounts",
    "data",
    "although",
    "honest",
    "think",
    "necessarily",
    "split",
    "two",
    "things",
    "actually",
    "come",
    "together",
    "random",
    "number",
    "times",
    "see",
    "noun",
    "good",
    "wines",
    "mislabeled",
    "setup",
    "par",
    "random",
    "forest",
    "surprise",
    "identical",
    "good",
    "bad",
    "wines",
    "labeling",
    "bad",
    "one",
    "let",
    "see",
    "yeah",
    "266",
    "260",
    "mislabeled",
    "couple",
    "bad",
    "wines",
    "good",
    "wines",
    "explored",
    "three",
    "basic",
    "classifiers",
    "probably",
    "three",
    "widely",
    "used",
    "right",
    "might",
    "even",
    "throw",
    "random",
    "tree",
    "open",
    "website",
    "go",
    "supervised",
    "learning",
    "linear",
    "model",
    "almost",
    "data",
    "usually",
    "start",
    "linear",
    "model",
    "going",
    "process",
    "quickest",
    "mean",
    "use",
    "least",
    "amount",
    "resources",
    "see",
    "linear",
    "quadratic",
    "kernel",
    "ridge",
    "support",
    "vector",
    "stochastic",
    "gradient",
    "nearest",
    "neighbors",
    "nearest",
    "neighbors",
    "another",
    "common",
    "one",
    "used",
    "lot",
    "similar",
    "svm",
    "gaussian",
    "process",
    "cross",
    "decomposition",
    "naive",
    "bayes",
    "intellectual",
    "one",
    "see",
    "used",
    "lot",
    "like",
    "basis",
    "lot",
    "things",
    "decision",
    "tree",
    "another",
    "one",
    "used",
    "lot",
    "ensemble",
    "methods",
    "much",
    "algorithms",
    "feature",
    "selection",
    "neural",
    "networks",
    "one",
    "use",
    "course",
    "forest",
    "see",
    "sk",
    "learn",
    "many",
    "different",
    "options",
    "developed",
    "years",
    "covered",
    "three",
    "commonly",
    "used",
    "ones",
    "went",
    "little",
    "bit",
    "different",
    "neural",
    "network",
    "fun",
    "work",
    "deep",
    "learning",
    "shallow",
    "learning",
    "told",
    "mean",
    "svm",
    "actually",
    "shallow",
    "lot",
    "covers",
    "lot",
    "things",
    "thing",
    "decision",
    "random",
    "forest",
    "classifier",
    "notice",
    "number",
    "different",
    "classifier",
    "options",
    "three",
    "common",
    "ones",
    "probably",
    "throw",
    "nearest",
    "neighbor",
    "decision",
    "tree",
    "usually",
    "part",
    "decision",
    "us",
    "depending",
    "back",
    "end",
    "using",
    "since",
    "human",
    "beings",
    "shareholders",
    "office",
    "would",
    "want",
    "leave",
    "confusion",
    "matrix",
    "need",
    "information",
    "making",
    "decisions",
    "want",
    "give",
    "one",
    "particular",
    "score",
    "would",
    "go",
    "ahead",
    "sklearn",
    "metrics",
    "going",
    "import",
    "accuracy",
    "score",
    "going",
    "random",
    "forest",
    "since",
    "best",
    "model",
    "cm",
    "accuracy",
    "score",
    "forgot",
    "print",
    "remember",
    "jupiter",
    "notebook",
    "last",
    "variable",
    "leave",
    "print",
    "cm",
    "accurate",
    "score",
    "get",
    "90",
    "percent",
    "matches",
    "already",
    "see",
    "precision",
    "either",
    "quote",
    "lot",
    "times",
    "people",
    "like",
    "see",
    "highlighted",
    "end",
    "precision",
    "model",
    "final",
    "stage",
    "would",
    "like",
    "use",
    "future",
    "let",
    "go",
    "ahead",
    "take",
    "wine",
    "remember",
    "correctly",
    "one",
    "head",
    "run",
    "remember",
    "original",
    "data",
    "set",
    "gone",
    "many",
    "steps",
    "going",
    "go",
    "back",
    "original",
    "data",
    "see",
    "top",
    "10",
    "top",
    "10",
    "list",
    "two",
    "make",
    "high",
    "enough",
    "quality",
    "wine",
    "us",
    "interested",
    "let",
    "go",
    "ahead",
    "create",
    "data",
    "call",
    "x",
    "new",
    "equals",
    "important",
    "data",
    "kind",
    "randomly",
    "selected",
    "data",
    "looks",
    "awful",
    "lot",
    "like",
    "numbers",
    "look",
    "like",
    "x",
    "new",
    "equals",
    "important",
    "people",
    "forget",
    "step",
    "x",
    "new",
    "equals",
    "sc",
    "remember",
    "sc",
    "standard",
    "scalar",
    "variable",
    "created",
    "go",
    "right",
    "back",
    "anything",
    "else",
    "created",
    "sc",
    "fit",
    "transformed",
    "need",
    "transform",
    "data",
    "going",
    "feed",
    "going",
    "go",
    "back",
    "going",
    "transform",
    "x",
    "new",
    "going",
    "go",
    "ahead",
    "use",
    "go",
    "random",
    "forest",
    "remember",
    "rfc",
    "predict",
    "model",
    "right",
    "let",
    "go",
    "ahead",
    "grab",
    "new",
    "equals",
    "rfc",
    "predict",
    "x",
    "new",
    "kind",
    "nice",
    "know",
    "actually",
    "puts",
    "according",
    "print",
    "prediction",
    "wine",
    "oh",
    "bad",
    "wine",
    "okay",
    "pick",
    "good",
    "wine",
    "ex",
    "new",
    "expected",
    "wine",
    "remember",
    "correctly",
    "small",
    "percentage",
    "wine",
    "matter",
    "quality",
    "requirements",
    "look",
    "say",
    "oh",
    "try",
    "another",
    "wine",
    "fine",
    "like",
    "try",
    "new",
    "wines",
    "certainly",
    "collection",
    "old",
    "wine",
    "bottles",
    "match",
    "see",
    "gone",
    "whole",
    "process",
    "quick",
    "rehash",
    "imports",
    "touched",
    "lot",
    "sk",
    "learn",
    "random",
    "forest",
    "svm",
    "mlp",
    "classifier",
    "support",
    "vector",
    "classifier",
    "random",
    "forests",
    "neural",
    "network",
    "three",
    "top",
    "used",
    "classifiers",
    "sk",
    "learn",
    "system",
    "also",
    "confusion",
    "metric",
    "matrix",
    "classification",
    "report",
    "used",
    "standard",
    "scalar",
    "scaling",
    "label",
    "encoder",
    "course",
    "needed",
    "go",
    "ahead",
    "split",
    "data",
    "implot",
    "line",
    "train",
    "explored",
    "data",
    "null",
    "values",
    "set",
    "quality",
    "bins",
    "took",
    "look",
    "data",
    "actually",
    "put",
    "nice",
    "little",
    "plot",
    "show",
    "quality",
    "looking",
    "went",
    "three",
    "different",
    "models",
    "always",
    "interesting",
    "spend",
    "much",
    "time",
    "getting",
    "models",
    "kind",
    "go",
    "models",
    "play",
    "get",
    "best",
    "training",
    "without",
    "becoming",
    "biased",
    "always",
    "challenge",
    "train",
    "data",
    "point",
    "training",
    "fit",
    "test",
    "value",
    "finally",
    "went",
    "ahead",
    "actually",
    "used",
    "applied",
    "new",
    "wine",
    "unfortunately",
    "make",
    "cut",
    "going",
    "one",
    "drink",
    "glass",
    "save",
    "rest",
    "cooking",
    "course",
    "according",
    "random",
    "forest",
    "use",
    "best",
    "model",
    "came",
    "welcome",
    "tensorflow",
    "tutorial",
    "going",
    "cover",
    "today",
    "deep",
    "learning",
    "frameworks",
    "tensorflow",
    "features",
    "tensorflow",
    "tensorflow",
    "applications",
    "tensorflow",
    "works",
    "tensorflow",
    "versus",
    "tensorflow",
    "architecture",
    "go",
    "tensorflow",
    "demo",
    "roll",
    "sleeves",
    "dive",
    "right",
    "code",
    "let",
    "start",
    "deep",
    "learning",
    "frameworks",
    "start",
    "chart",
    "even",
    "filled",
    "justice",
    "exploded",
    "major",
    "frameworks",
    "cross",
    "happens",
    "sit",
    "tensorflow",
    "integrated",
    "tensorflow",
    "pie",
    "torches",
    "cafe",
    "piano",
    "uh",
    "dl4j",
    "chainer",
    "deep",
    "learning",
    "frameworks",
    "talking",
    "neural",
    "networks",
    "starting",
    "never",
    "seen",
    "neural",
    "network",
    "go",
    "python",
    "scikit",
    "neural",
    "network",
    "probably",
    "simplest",
    "version",
    "know",
    "robust",
    "version",
    "top",
    "ladder",
    "far",
    "technology",
    "right",
    "tensorflow",
    "course",
    "changing",
    "day",
    "day",
    "better",
    "different",
    "purposes",
    "let",
    "dive",
    "tensorflow",
    "let",
    "see",
    "tensorflow",
    "tensorflow",
    "tensorflow",
    "popular",
    "open",
    "source",
    "library",
    "released",
    "2015",
    "google",
    "brain",
    "team",
    "building",
    "machine",
    "learning",
    "deep",
    "learning",
    "models",
    "based",
    "python",
    "programming",
    "language",
    "performs",
    "numerical",
    "computations",
    "using",
    "data",
    "flow",
    "graphs",
    "build",
    "models",
    "let",
    "take",
    "look",
    "features",
    "tensorflow",
    "works",
    "efficiently",
    "arrays",
    "ever",
    "played",
    "simpler",
    "packages",
    "neural",
    "networks",
    "going",
    "find",
    "pretty",
    "much",
    "flatten",
    "make",
    "sure",
    "stuff",
    "set",
    "flat",
    "model",
    "tensorflow",
    "works",
    "really",
    "good",
    "talking",
    "pictures",
    "x",
    "coordinates",
    "picture",
    "pixel",
    "three",
    "four",
    "different",
    "channels",
    "complicated",
    "array",
    "array",
    "provides",
    "scalability",
    "computation",
    "across",
    "machines",
    "large",
    "data",
    "sets",
    "new",
    "right",
    "might",
    "think",
    "minor",
    "thing",
    "python",
    "operating",
    "one",
    "computer",
    "float",
    "value",
    "truncates",
    "differently",
    "computer",
    "get",
    "results",
    "training",
    "model",
    "might",
    "work",
    "one",
    "machine",
    "another",
    "one",
    "things",
    "tensorflow",
    "addresses",
    "good",
    "job",
    "supports",
    "fast",
    "debugging",
    "model",
    "building",
    "love",
    "tensorflow",
    "go",
    "build",
    "model",
    "different",
    "layers",
    "layer",
    "might",
    "different",
    "properties",
    "like",
    "convolutional",
    "neural",
    "network",
    "sit",
    "top",
    "regular",
    "neural",
    "network",
    "reverse",
    "propagation",
    "lot",
    "tools",
    "lot",
    "options",
    "layer",
    "goes",
    "utilize",
    "different",
    "options",
    "stack",
    "differently",
    "large",
    "community",
    "provides",
    "tensorboard",
    "visualize",
    "model",
    "tensorboard",
    "pretty",
    "uh",
    "recent",
    "really",
    "nice",
    "tool",
    "working",
    "people",
    "showing",
    "clients",
    "shareholders",
    "company",
    "give",
    "nice",
    "visual",
    "model",
    "know",
    "going",
    "paying",
    "let",
    "take",
    "glance",
    "different",
    "uses",
    "applications",
    "tensorflow",
    "talk",
    "tensorflow",
    "applications",
    "clearly",
    "data",
    "analytics",
    "getting",
    "data",
    "science",
    "like",
    "use",
    "data",
    "science",
    "probably",
    "better",
    "term",
    "programming",
    "side",
    "really",
    "sky",
    "limit",
    "um",
    "look",
    "face",
    "detection",
    "language",
    "translation",
    "fraud",
    "detection",
    "video",
    "detection",
    "many",
    "different",
    "things",
    "tensorflow",
    "used",
    "think",
    "neural",
    "networks",
    "tensorflow",
    "neural",
    "network",
    "think",
    "complicated",
    "chaotic",
    "data",
    "different",
    "set",
    "numbers",
    "like",
    "looking",
    "stock",
    "market",
    "use",
    "stock",
    "market",
    "something",
    "numbers",
    "clear",
    "chaotic",
    "picture",
    "talking",
    "linear",
    "regression",
    "models",
    "different",
    "regression",
    "models",
    "looking",
    "talking",
    "really",
    "complicated",
    "data",
    "patterns",
    "talking",
    "neural",
    "networks",
    "tensorflow",
    "going",
    "talk",
    "tensorflow",
    "talk",
    "tensors",
    "tensor",
    "named",
    "talk",
    "tensors",
    "tensorflow",
    "tensorflow",
    "derived",
    "core",
    "component",
    "known",
    "tensor",
    "tensor",
    "vector",
    "matrix",
    "n",
    "dimensions",
    "represent",
    "types",
    "data",
    "see",
    "scalar",
    "single",
    "number",
    "vector",
    "two",
    "numbers",
    "might",
    "number",
    "direction",
    "simple",
    "matrix",
    "get",
    "tensor",
    "mentioned",
    "picture",
    "complicated",
    "tensor",
    "x",
    "coordinates",
    "one",
    "pixels",
    "three",
    "four",
    "channels",
    "different",
    "colors",
    "image",
    "coming",
    "would",
    "tensor",
    "tensorflow",
    "tensors",
    "defined",
    "unit",
    "dimensionality",
    "called",
    "rank",
    "see",
    "scalar",
    "single",
    "number",
    "rank",
    "zero",
    "real",
    "dimensions",
    "single",
    "point",
    "vector",
    "would",
    "single",
    "list",
    "numbers",
    "rank",
    "one",
    "matrix",
    "would",
    "rank",
    "two",
    "see",
    "right",
    "get",
    "full",
    "tensor",
    "rank",
    "three",
    "next",
    "step",
    "understand",
    "tensorflow",
    "works",
    "looked",
    "basics",
    "neural",
    "network",
    "reverse",
    "propagation",
    "basics",
    "tensorflow",
    "goes",
    "lot",
    "different",
    "options",
    "properties",
    "build",
    "different",
    "tensors",
    "tensorflow",
    "performs",
    "computations",
    "help",
    "data",
    "flow",
    "graphs",
    "nodes",
    "represent",
    "operations",
    "model",
    "look",
    "see",
    "neural",
    "network",
    "going",
    "inputs",
    "bc",
    "might",
    "x",
    "equals",
    "b",
    "plus",
    "c",
    "equals",
    "minus",
    "four",
    "equals",
    "x",
    "times",
    "output",
    "even",
    "though",
    "neural",
    "network",
    "simple",
    "set",
    "computations",
    "going",
    "across",
    "see",
    "complicated",
    "gets",
    "actually",
    "one",
    "tensors",
    "neural",
    "network",
    "reverse",
    "propagation",
    "limited",
    "much",
    "basic",
    "uh",
    "flow",
    "computations",
    "data",
    "going",
    "across",
    "see",
    "plug",
    "numbers",
    "uh",
    "b",
    "equals",
    "four",
    "c",
    "equals",
    "three",
    "equals",
    "six",
    "get",
    "x",
    "equals",
    "four",
    "plus",
    "three",
    "x",
    "equals",
    "seven",
    "equals",
    "six",
    "minus",
    "four",
    "equals",
    "two",
    "finally",
    "equals",
    "seven",
    "times",
    "two",
    "equals",
    "fourteen",
    "like",
    "said",
    "simplified",
    "version",
    "tensorflow",
    "works",
    "one",
    "layers",
    "get",
    "complicated",
    "tensorflow",
    "nice",
    "job",
    "spin",
    "different",
    "setups",
    "easily",
    "test",
    "test",
    "different",
    "models",
    "see",
    "work",
    "tensorflow",
    "gone",
    "two",
    "major",
    "stages",
    "original",
    "tensorflow",
    "release",
    "came",
    "version",
    "addressed",
    "many",
    "things",
    "really",
    "need",
    "start",
    "talking",
    "tensorflow",
    "versus",
    "guess",
    "would",
    "need",
    "know",
    "legacy",
    "programming",
    "job",
    "pulling",
    "apart",
    "somebody",
    "else",
    "code",
    "first",
    "thing",
    "tensorflow",
    "supports",
    "eager",
    "execution",
    "default",
    "allows",
    "build",
    "models",
    "run",
    "instantly",
    "see",
    "tensorflow",
    "1",
    "tensorflow",
    "2",
    "almost",
    "double",
    "code",
    "thing",
    "want",
    "tensorflow",
    "session",
    "session",
    "session",
    "run",
    "variables",
    "session",
    "run",
    "tables",
    "initializer",
    "model",
    "fit",
    "x",
    "train",
    "train",
    "validation",
    "data",
    "x",
    "value",
    "value",
    "epics",
    "batch",
    "size",
    "goes",
    "fit",
    "see",
    "compressed",
    "make",
    "run",
    "easier",
    "create",
    "model",
    "fit",
    "like",
    "last",
    "set",
    "code",
    "automatic",
    "mean",
    "eager",
    "see",
    "first",
    "part",
    "like",
    "heck",
    "session",
    "thing",
    "going",
    "tensorflow",
    "get",
    "nice",
    "clean",
    "remember",
    "beginning",
    "said",
    "cross",
    "list",
    "cross",
    "high",
    "level",
    "api",
    "tensorflow",
    "cross",
    "official",
    "high",
    "level",
    "api",
    "tensorflow",
    "incorporated",
    "cross",
    "cross",
    "provides",
    "number",
    "model",
    "building",
    "apis",
    "sequential",
    "functional",
    "subclassing",
    "choose",
    "right",
    "level",
    "abstraction",
    "project",
    "hopefully",
    "touch",
    "base",
    "little",
    "bit",
    "sequential",
    "common",
    "uh",
    "form",
    "layers",
    "going",
    "one",
    "side",
    "everything",
    "going",
    "sequential",
    "order",
    "functional",
    "split",
    "layer",
    "might",
    "input",
    "coming",
    "one",
    "side",
    "splits",
    "two",
    "completely",
    "mod",
    "different",
    "models",
    "come",
    "back",
    "together",
    "one",
    "might",
    "classification",
    "one",
    "might",
    "linear",
    "regression",
    "kind",
    "stuff",
    "neural",
    "basic",
    "reverse",
    "propagation",
    "neural",
    "network",
    "come",
    "together",
    "another",
    "layer",
    "neural",
    "network",
    "reverse",
    "propagation",
    "setup",
    "subclassing",
    "complicated",
    "building",
    "models",
    "subclass",
    "models",
    "cross",
    "powerful",
    "tools",
    "stuff",
    "coming",
    "currently",
    "tensorflow",
    "cross",
    "setup",
    "third",
    "big",
    "change",
    "going",
    "look",
    "tensorflow",
    "uh",
    "order",
    "use",
    "tf",
    "layers",
    "variables",
    "would",
    "write",
    "tf",
    "variable",
    "block",
    "tensorflow",
    "2",
    "add",
    "layers",
    "sequential",
    "automatically",
    "defines",
    "long",
    "flat",
    "layers",
    "course",
    "changes",
    "little",
    "bit",
    "complicated",
    "tensor",
    "coming",
    "easy",
    "really",
    "good",
    "job",
    "little",
    "bit",
    "scope",
    "see",
    "tensorflow",
    "1",
    "asks",
    "different",
    "layers",
    "values",
    "look",
    "scope",
    "default",
    "name",
    "start",
    "looking",
    "different",
    "code",
    "create",
    "variable",
    "scope",
    "even",
    "necessary",
    "tensorf",
    "one",
    "see",
    "code",
    "create",
    "model",
    "sequential",
    "model",
    "add",
    "layers",
    "um",
    "variable",
    "scope",
    "ever",
    "see",
    "variable",
    "scope",
    "know",
    "came",
    "older",
    "version",
    "last",
    "two",
    "api",
    "cleanup",
    "autograph",
    "api",
    "cleanup",
    "tensorflow",
    "1",
    "could",
    "build",
    "models",
    "using",
    "tf",
    "gans",
    "tf",
    "app",
    "tf",
    "contrib",
    "tf",
    "flags",
    "etc",
    "tensorflow",
    "2",
    "lot",
    "apis",
    "removed",
    "cleaned",
    "people",
    "using",
    "simplified",
    "tf",
    "app",
    "tf",
    "flags",
    "tf",
    "logging",
    "gone",
    "three",
    "legacy",
    "features",
    "tf",
    "function",
    "autograph",
    "feature",
    "old",
    "version",
    "uh",
    "tensorflow",
    "1",
    "0",
    "python",
    "functions",
    "limited",
    "could",
    "compiled",
    "exported",
    "continually",
    "redo",
    "code",
    "could",
    "easily",
    "put",
    "pointer",
    "say",
    "hey",
    "let",
    "reuse",
    "tensorflow",
    "2",
    "write",
    "python",
    "function",
    "using",
    "tf",
    "function",
    "mark",
    "jit",
    "compilation",
    "python",
    "jit",
    "tensorflow",
    "runs",
    "single",
    "graph",
    "autograph",
    "feature",
    "tf",
    "function",
    "helps",
    "write",
    "graph",
    "code",
    "using",
    "natural",
    "python",
    "syntax",
    "threw",
    "new",
    "word",
    "graph",
    "graph",
    "picture",
    "person",
    "hear",
    "graph",
    "x",
    "things",
    "graph",
    "lines",
    "connecting",
    "different",
    "objects",
    "remember",
    "different",
    "layers",
    "going",
    "sequentially",
    "one",
    "white",
    "lined",
    "arrows",
    "would",
    "graph",
    "x",
    "computation",
    "taken",
    "care",
    "talking",
    "special",
    "code",
    "python",
    "way",
    "sending",
    "information",
    "forward",
    "put",
    "function",
    "instead",
    "using",
    "whatever",
    "function",
    "using",
    "neural",
    "networks",
    "would",
    "activation",
    "function",
    "although",
    "could",
    "almost",
    "anything",
    "depending",
    "next",
    "let",
    "go",
    "hierarchy",
    "architecture",
    "cover",
    "three",
    "basic",
    "tools",
    "tensorflow",
    "roll",
    "sleeves",
    "dive",
    "example",
    "let",
    "take",
    "quick",
    "look",
    "tensorflow",
    "toolkits",
    "hierarchy",
    "high",
    "level",
    "object",
    "oriented",
    "api",
    "working",
    "tf",
    "cross",
    "estimators",
    "sits",
    "top",
    "tf",
    "layers",
    "tf",
    "losses",
    "tf",
    "metrics",
    "reusable",
    "libraries",
    "model",
    "building",
    "really",
    "tensorflow",
    "shines",
    "cross",
    "running",
    "estimators",
    "able",
    "swap",
    "different",
    "layers",
    "losses",
    "metrics",
    "built",
    "tensorflow",
    "makes",
    "really",
    "easy",
    "use",
    "get",
    "low",
    "level",
    "tf",
    "api",
    "extensive",
    "control",
    "put",
    "formulas",
    "procedures",
    "models",
    "could",
    "split",
    "talked",
    "earlier",
    "split",
    "one",
    "direction",
    "linear",
    "regression",
    "model",
    "go",
    "neural",
    "network",
    "maybe",
    "neural",
    "network",
    "different",
    "activation",
    "set",
    "comes",
    "together",
    "another",
    "layer",
    "another",
    "neural",
    "network",
    "build",
    "really",
    "complicated",
    "models",
    "low",
    "level",
    "put",
    "apis",
    "move",
    "stuff",
    "around",
    "recently",
    "tf",
    "code",
    "run",
    "multiple",
    "platforms",
    "cpu",
    "basically",
    "like",
    "computer",
    "running",
    "eight",
    "cores",
    "16",
    "dedicated",
    "threads",
    "hear",
    "one",
    "100",
    "cores",
    "cpu",
    "running",
    "gpu",
    "graphics",
    "card",
    "recently",
    "also",
    "include",
    "tpu",
    "setup",
    "specifically",
    "tensorflow",
    "models",
    "neural",
    "network",
    "kind",
    "setup",
    "export",
    "tf",
    "code",
    "run",
    "kinds",
    "different",
    "platforms",
    "diverse",
    "setup",
    "moving",
    "hierarchy",
    "architecture",
    "tensorflow",
    "architecture",
    "see",
    "left",
    "usually",
    "start",
    "80",
    "time",
    "data",
    "science",
    "spent",
    "data",
    "making",
    "sure",
    "loaded",
    "correctly",
    "everything",
    "looks",
    "right",
    "first",
    "level",
    "tensorflow",
    "going",
    "read",
    "data",
    "tf",
    "data",
    "feature",
    "columns",
    "going",
    "feed",
    "tf",
    "cross",
    "estimators",
    "kind",
    "tensorflow",
    "hub",
    "sits",
    "top",
    "see",
    "going",
    "uh",
    "set",
    "distribution",
    "strategy",
    "gon",
    "na",
    "run",
    "gon",
    "na",
    "running",
    "regular",
    "cpu",
    "gon",
    "na",
    "running",
    "gpu",
    "added",
    "like",
    "pretty",
    "graphics",
    "card",
    "actually",
    "grabs",
    "gpu",
    "processor",
    "uses",
    "specialized",
    "tpu",
    "setup",
    "paid",
    "extra",
    "money",
    "could",
    "later",
    "distributing",
    "package",
    "might",
    "need",
    "run",
    "really",
    "high",
    "processors",
    "processing",
    "server",
    "level",
    "uh",
    "let",
    "say",
    "net",
    "might",
    "processing",
    "distribute",
    "distributing",
    "distribution",
    "strategy",
    "distributing",
    "server",
    "server",
    "might",
    "analyzing",
    "thousands",
    "thousands",
    "purchases",
    "done",
    "every",
    "minute",
    "need",
    "higher",
    "speed",
    "give",
    "give",
    "recommendation",
    "suggestion",
    "buy",
    "stuff",
    "website",
    "maybe",
    "looking",
    "uh",
    "data",
    "fraud",
    "analysis",
    "working",
    "banks",
    "want",
    "able",
    "run",
    "high",
    "speed",
    "hundreds",
    "people",
    "sending",
    "transactions",
    "says",
    "hey",
    "look",
    "right",
    "someone",
    "scamming",
    "person",
    "probably",
    "credit",
    "card",
    "talking",
    "fun",
    "things",
    "talking",
    "saved",
    "model",
    "talking",
    "earlier",
    "used",
    "one",
    "models",
    "would",
    "truncate",
    "float",
    "numbers",
    "model",
    "going",
    "one",
    "build",
    "model",
    "machine",
    "office",
    "need",
    "distribute",
    "tensorflow",
    "serving",
    "cloud",
    "premium",
    "talking",
    "like",
    "banking",
    "something",
    "like",
    "tensorflow",
    "lite",
    "actually",
    "run",
    "tensorflow",
    "android",
    "ios",
    "raspberry",
    "pi",
    "little",
    "breakout",
    "board",
    "fact",
    "came",
    "new",
    "one",
    "little",
    "mini",
    "tpu",
    "camera",
    "video",
    "load",
    "tensorflow",
    "model",
    "onto",
    "talking",
    "affordable",
    "way",
    "beta",
    "test",
    "new",
    "product",
    "tensorflow",
    "js",
    "browser",
    "node",
    "server",
    "get",
    "browser",
    "simple",
    "computations",
    "require",
    "lot",
    "heavy",
    "lifting",
    "want",
    "distribute",
    "lot",
    "endpoints",
    "also",
    "language",
    "bindings",
    "create",
    "tensorflow",
    "backend",
    "save",
    "accessed",
    "c",
    "java",
    "go",
    "c",
    "sharp",
    "rust",
    "r",
    "whatever",
    "package",
    "working",
    "kind",
    "overview",
    "architecture",
    "going",
    "behind",
    "scenes",
    "case",
    "going",
    "far",
    "distributing",
    "let",
    "go",
    "ahead",
    "take",
    "look",
    "three",
    "specific",
    "pieces",
    "tensorflow",
    "going",
    "constants",
    "variables",
    "sessions",
    "basic",
    "things",
    "need",
    "know",
    "understand",
    "working",
    "tensorflow",
    "setup",
    "constants",
    "tensorflow",
    "tensorflow",
    "constants",
    "created",
    "using",
    "function",
    "constant",
    "words",
    "going",
    "stay",
    "static",
    "whole",
    "time",
    "whatever",
    "working",
    "syntax",
    "constant",
    "value",
    "type",
    "9",
    "shape",
    "equals",
    "none",
    "name",
    "constant",
    "verify",
    "shape",
    "equals",
    "false",
    "kind",
    "syntax",
    "looking",
    "explore",
    "hands",
    "little",
    "depth",
    "see",
    "z",
    "equals",
    "f",
    "dot",
    "constant",
    "name",
    "equals",
    "x",
    "type",
    "float",
    "means",
    "never",
    "going",
    "change",
    "going",
    "constant",
    "value",
    "variables",
    "tensorflow",
    "variables",
    "tensorflow",
    "memory",
    "buffers",
    "store",
    "tensors",
    "declare",
    "two",
    "three",
    "tensor",
    "populated",
    "ones",
    "could",
    "also",
    "constants",
    "way",
    "way",
    "create",
    "array",
    "ones",
    "constants",
    "sure",
    "know",
    "might",
    "need",
    "reason",
    "v",
    "equals",
    "tensorflow",
    "shape",
    "2",
    "3",
    "going",
    "create",
    "nice",
    "2",
    "3",
    "array",
    "filled",
    "ones",
    "course",
    "go",
    "variables",
    "change",
    "tensor",
    "full",
    "control",
    "course",
    "sessions",
    "tensorflow",
    "session",
    "tensorflow",
    "used",
    "run",
    "computational",
    "graph",
    "evaluate",
    "nodes",
    "remember",
    "talking",
    "graph",
    "graph",
    "x",
    "talking",
    "information",
    "goes",
    "arrows",
    "whatever",
    "computations",
    "take",
    "next",
    "node",
    "see",
    "import",
    "tensorflow",
    "tf",
    "x",
    "equals",
    "10",
    "equals",
    "tf",
    "constant",
    "z",
    "equals",
    "tf",
    "dot",
    "add",
    "x",
    "comma",
    "set",
    "go",
    "ahead",
    "knit",
    "tf",
    "global",
    "variables",
    "initializer",
    "tf",
    "session",
    "session",
    "session",
    "run",
    "init",
    "print",
    "session",
    "run",
    "run",
    "going",
    "end",
    "course",
    "10",
    "plus",
    "20",
    "looking",
    "lot",
    "closely",
    "actually",
    "roll",
    "sleeves",
    "put",
    "code",
    "together",
    "let",
    "go",
    "ahead",
    "take",
    "look",
    "coding",
    "today",
    "going",
    "go",
    "ahead",
    "go",
    "anaconda",
    "use",
    "specifically",
    "jupiter",
    "notebook",
    "course",
    "code",
    "going",
    "work",
    "uh",
    "whatever",
    "platform",
    "choose",
    "whether",
    "notebook",
    "jupiter",
    "lab",
    "jupiter",
    "notebook",
    "tabs",
    "larger",
    "projects",
    "going",
    "stick",
    "jupiter",
    "notebook",
    "pycharm",
    "whatever",
    "going",
    "use",
    "spyder",
    "qt",
    "console",
    "different",
    "programming",
    "environments",
    "thing",
    "note",
    "kind",
    "hard",
    "see",
    "main",
    "pi",
    "3",
    "right",
    "writing",
    "tensorflow",
    "works",
    "python",
    "version",
    "3",
    "python",
    "version",
    "3",
    "7",
    "3",
    "8",
    "probably",
    "going",
    "get",
    "errors",
    "might",
    "already",
    "updated",
    "know",
    "older",
    "version",
    "want",
    "make",
    "sure",
    "python",
    "version",
    "environment",
    "course",
    "anaconda",
    "easily",
    "set",
    "environment",
    "make",
    "sure",
    "go",
    "ahead",
    "pip",
    "tensor",
    "flow",
    "anaconda",
    "conda",
    "install",
    "tensorflow",
    "make",
    "sure",
    "package",
    "let",
    "go",
    "ahead",
    "dive",
    "bring",
    "open",
    "nice",
    "browser",
    "window",
    "love",
    "fact",
    "zoom",
    "zoom",
    "depending",
    "working",
    "making",
    "really",
    "easy",
    "demo",
    "right",
    "size",
    "go",
    "new",
    "let",
    "go",
    "ahead",
    "create",
    "new",
    "python",
    "new",
    "python",
    "window",
    "going",
    "leave",
    "untitled",
    "let",
    "go",
    "ahead",
    "import",
    "import",
    "tensorflow",
    "tf",
    "point",
    "go",
    "ahead",
    "run",
    "real",
    "quick",
    "errors",
    "yay",
    "errors",
    "whenever",
    "imports",
    "unbearably",
    "opened",
    "new",
    "environment",
    "forgotten",
    "install",
    "tensorflow",
    "environment",
    "uh",
    "something",
    "along",
    "lines",
    "always",
    "good",
    "double",
    "check",
    "uh",
    "gon",
    "na",
    "double",
    "check",
    "also",
    "also",
    "good",
    "know",
    "uh",
    "version",
    "working",
    "simply",
    "using",
    "version",
    "command",
    "tensorflow",
    "know",
    "probably",
    "intuitively",
    "tf",
    "dot",
    "underscore",
    "underscore",
    "version",
    "underscore",
    "underscore",
    "know",
    "always",
    "confuses",
    "sometimes",
    "one",
    "thing",
    "tf",
    "dot",
    "underscore",
    "version",
    "underscore",
    "another",
    "thing",
    "double",
    "underscore",
    "tensorflow",
    "pulling",
    "version",
    "good",
    "know",
    "working",
    "going",
    "working",
    "tensorflow",
    "version",
    "tell",
    "um",
    "going",
    "dig",
    "little",
    "deeper",
    "constants",
    "array",
    "constants",
    "create",
    "nice",
    "array",
    "equals",
    "going",
    "put",
    "ray",
    "right",
    "uh",
    "run",
    "equal",
    "want",
    "double",
    "check",
    "uh",
    "remember",
    "jupiter",
    "notebook",
    "put",
    "letter",
    "knows",
    "going",
    "print",
    "otherwise",
    "round",
    "surround",
    "print",
    "see",
    "tf",
    "tensor",
    "shape",
    "type",
    "array",
    "two",
    "two",
    "array",
    "like",
    "create",
    "constant",
    "go",
    "create",
    "variable",
    "also",
    "going",
    "two",
    "two",
    "array",
    "go",
    "ahead",
    "print",
    "v",
    "run",
    "sure",
    "enough",
    "tf",
    "variable",
    "also",
    "let",
    "go",
    "back",
    "add",
    "could",
    "create",
    "another",
    "tensor",
    "make",
    "constant",
    "time",
    "going",
    "put",
    "b",
    "tf",
    "constant",
    "go",
    "print",
    "v",
    "b",
    "going",
    "run",
    "interesting",
    "thing",
    "always",
    "happens",
    "see",
    "right",
    "print",
    "happens",
    "prints",
    "last",
    "one",
    "unless",
    "use",
    "print",
    "commands",
    "important",
    "remember",
    "jupyter",
    "notebooks",
    "easily",
    "fix",
    "go",
    "ahead",
    "print",
    "surround",
    "v",
    "brackets",
    "see",
    "two",
    "different",
    "variables",
    "three",
    "one",
    "five",
    "two",
    "variable",
    "flat",
    "constant",
    "comes",
    "tf",
    "tensor",
    "shape",
    "two",
    "kind",
    "two",
    "interesting",
    "note",
    "label",
    "tf",
    "variable",
    "looking",
    "back",
    "end",
    "talking",
    "difference",
    "variable",
    "constant",
    "thing",
    "want",
    "notice",
    "variable",
    "capitalize",
    "v",
    "constant",
    "lowercase",
    "c",
    "little",
    "things",
    "like",
    "lose",
    "programming",
    "trying",
    "find",
    "hey",
    "work",
    "couple",
    "little",
    "things",
    "note",
    "like",
    "array",
    "math",
    "like",
    "concatenate",
    "concatenate",
    "different",
    "values",
    "see",
    "take",
    "b",
    "concatenated",
    "values",
    "b",
    "axes",
    "one",
    "hopefully",
    "familiar",
    "axes",
    "works",
    "dealing",
    "matrixes",
    "go",
    "ahead",
    "print",
    "see",
    "right",
    "end",
    "tensor",
    "let",
    "put",
    "constant",
    "variable",
    "array",
    "four",
    "three",
    "seven",
    "eight",
    "six",
    "one",
    "four",
    "five",
    "concatenated",
    "two",
    "together",
    "wan",
    "na",
    "highlight",
    "couple",
    "things",
    "axis",
    "equals",
    "one",
    "means",
    "columns",
    "longer",
    "array",
    "like",
    "right",
    "array",
    "like",
    "know",
    "shape",
    "one",
    "whatever",
    "two",
    "comma",
    "two",
    "axes",
    "zero",
    "going",
    "first",
    "one",
    "axes",
    "one",
    "going",
    "second",
    "one",
    "translates",
    "columns",
    "rows",
    "shape",
    "let",
    "put",
    "word",
    "shape",
    "um",
    "know",
    "talking",
    "clear",
    "tell",
    "spent",
    "lot",
    "time",
    "looking",
    "shapes",
    "trying",
    "figure",
    "direction",
    "going",
    "whether",
    "flip",
    "whatever",
    "get",
    "lost",
    "way",
    "matrix",
    "going",
    "column",
    "rows",
    "dealing",
    "third",
    "axes",
    "second",
    "axes",
    "axes",
    "one",
    "know",
    "zero",
    "one",
    "two",
    "going",
    "columns",
    "columns",
    "also",
    "rows",
    "simply",
    "changing",
    "concatenate",
    "grab",
    "one",
    "copy",
    "whole",
    "thing",
    "ctrl",
    "copy",
    "ctrl",
    "v",
    "changes",
    "axis",
    "one",
    "axis",
    "zero",
    "run",
    "see",
    "concatenate",
    "row",
    "opposed",
    "column",
    "four",
    "three",
    "six",
    "one",
    "seven",
    "eight",
    "four",
    "seven",
    "brings",
    "right",
    "turns",
    "rows",
    "versus",
    "columns",
    "see",
    "difference",
    "output",
    "really",
    "want",
    "look",
    "output",
    "sometimes",
    "make",
    "sure",
    "eyes",
    "looking",
    "correctly",
    "format",
    "find",
    "visually",
    "looking",
    "almost",
    "important",
    "understanding",
    "going",
    "conceptually",
    "mind",
    "many",
    "dimensions",
    "sometimes",
    "second",
    "thing",
    "want",
    "notice",
    "says",
    "numpy",
    "array",
    "tensorflow",
    "utilizing",
    "numpy",
    "part",
    "format",
    "far",
    "python",
    "concerned",
    "treat",
    "treat",
    "output",
    "like",
    "numpy",
    "array",
    "going",
    "numpy",
    "array",
    "another",
    "thing",
    "comes",
    "uh",
    "would",
    "think",
    "filling",
    "uh",
    "one",
    "zeros",
    "ones",
    "see",
    "create",
    "tensor",
    "give",
    "shape",
    "tell",
    "kind",
    "data",
    "type",
    "case",
    "integer",
    "print",
    "tensor",
    "jupiter",
    "type",
    "tensor",
    "run",
    "see",
    "nice",
    "array",
    "shape",
    "three",
    "comma",
    "four",
    "zeros",
    "one",
    "things",
    "want",
    "highlight",
    "integer",
    "32",
    "go",
    "tensorflow",
    "data",
    "types",
    "want",
    "notice",
    "float",
    "16",
    "float",
    "32",
    "float",
    "64",
    "complex",
    "scroll",
    "see",
    "integer",
    "32",
    "reason",
    "want",
    "control",
    "many",
    "bits",
    "used",
    "precision",
    "exporting",
    "another",
    "platform",
    "uh",
    "would",
    "happen",
    "might",
    "run",
    "computer",
    "python",
    "goes",
    "float",
    "indefinite",
    "however",
    "long",
    "wants",
    "take",
    "want",
    "actually",
    "say",
    "hey",
    "want",
    "high",
    "precision",
    "want",
    "able",
    "run",
    "computer",
    "need",
    "control",
    "whether",
    "tf",
    "float",
    "16",
    "case",
    "integer",
    "32",
    "could",
    "also",
    "float",
    "run",
    "float",
    "32",
    "means",
    "precision",
    "see",
    "zero",
    "point",
    "whatever",
    "go",
    "zeros",
    "ones",
    "going",
    "opposite",
    "side",
    "easily",
    "create",
    "tensorflow",
    "ones",
    "might",
    "ask",
    "would",
    "want",
    "zeros",
    "ones",
    "first",
    "thought",
    "might",
    "initiate",
    "new",
    "tensor",
    "usually",
    "initiate",
    "lot",
    "stuff",
    "random",
    "numbers",
    "better",
    "job",
    "solving",
    "start",
    "uniform",
    "set",
    "ones",
    "zeros",
    "dealing",
    "lot",
    "bias",
    "careful",
    "starting",
    "neural",
    "network",
    "one",
    "rows",
    "something",
    "like",
    "ones",
    "zeros",
    "hand",
    "use",
    "masking",
    "lot",
    "work",
    "masking",
    "also",
    "might",
    "one",
    "tensor",
    "row",
    "masked",
    "know",
    "zero",
    "false",
    "one",
    "true",
    "whatever",
    "want",
    "um",
    "case",
    "want",
    "use",
    "zeros",
    "ones",
    "cases",
    "want",
    "initialize",
    "zeros",
    "ones",
    "swap",
    "different",
    "numbers",
    "tensor",
    "learns",
    "another",
    "form",
    "control",
    "general",
    "see",
    "zeros",
    "ones",
    "usually",
    "talking",
    "mask",
    "another",
    "array",
    "like",
    "numpy",
    "also",
    "reshapes",
    "take",
    "remember",
    "shaped",
    "three",
    "comma",
    "four",
    "maybe",
    "wan",
    "na",
    "swap",
    "four",
    "comma",
    "three",
    "print",
    "see",
    "let",
    "go",
    "ctrl",
    "v",
    "let",
    "run",
    "see",
    "order",
    "switched",
    "instead",
    "four",
    "across",
    "three",
    "across",
    "four",
    "fun",
    "let",
    "go",
    "back",
    "ones",
    "going",
    "change",
    "ones",
    "uniform",
    "go",
    "ahead",
    "take",
    "well",
    "go",
    "leave",
    "go",
    "run",
    "see",
    "way",
    "actually",
    "see",
    "reshape",
    "looks",
    "lot",
    "different",
    "instead",
    "one",
    "rolls",
    "talking",
    "sometimes",
    "fill",
    "lot",
    "times",
    "fill",
    "random",
    "numbers",
    "one",
    "ways",
    "talked",
    "little",
    "bit",
    "float",
    "32",
    "data",
    "types",
    "one",
    "things",
    "comes",
    "course",
    "recasting",
    "data",
    "type",
    "float",
    "32",
    "might",
    "want",
    "convert",
    "integers",
    "project",
    "working",
    "know",
    "one",
    "projects",
    "worked",
    "ended",
    "wanting",
    "lot",
    "round",
    "would",
    "take",
    "dollar",
    "amount",
    "float",
    "value",
    "rent",
    "dollar",
    "amount",
    "wanted",
    "two",
    "decimal",
    "points",
    "um",
    "case",
    "lot",
    "different",
    "options",
    "multiply",
    "100",
    "round",
    "whatever",
    "want",
    "lot",
    "converted",
    "integer",
    "one",
    "way",
    "round",
    "kind",
    "cheap",
    "dirty",
    "trick",
    "uh",
    "take",
    "take",
    "tensor",
    "go",
    "ahead",
    "create",
    "um",
    "integer",
    "going",
    "take",
    "tensor",
    "going",
    "print",
    "tensor",
    "going",
    "go",
    "ahead",
    "print",
    "tensor",
    "let",
    "quick",
    "copy",
    "paste",
    "actually",
    "programming",
    "usually",
    "type",
    "lot",
    "stuff",
    "double",
    "check",
    "demo",
    "copy",
    "paste",
    "works",
    "fine",
    "sometimes",
    "aware",
    "copy",
    "paste",
    "copy",
    "wrong",
    "code",
    "personal",
    "choice",
    "depends",
    "working",
    "see",
    "took",
    "float",
    "32",
    "converts",
    "right",
    "integer",
    "value",
    "integer",
    "32",
    "set",
    "remember",
    "talked",
    "little",
    "bit",
    "reshape",
    "far",
    "flipping",
    "four",
    "comma",
    "three",
    "reshape",
    "talked",
    "axes",
    "zero",
    "axis",
    "one",
    "uh",
    "one",
    "things",
    "important",
    "able",
    "take",
    "one",
    "variables",
    "take",
    "last",
    "one",
    "tensor",
    "integer",
    "want",
    "go",
    "ahead",
    "transpose",
    "equals",
    "tensor",
    "integer",
    "print",
    "run",
    "see",
    "array",
    "flipped",
    "columns",
    "rows",
    "flipped",
    "reshaping",
    "uh",
    "transpose",
    "reshape",
    "nice",
    "look",
    "numbers",
    "columns",
    "went",
    "reshape",
    "kind",
    "rolled",
    "next",
    "row",
    "maintaining",
    "structure",
    "matrix",
    "reshape",
    "similar",
    "quite",
    "actually",
    "go",
    "settings",
    "reshape",
    "would",
    "allow",
    "turn",
    "transform",
    "uh",
    "come",
    "done",
    "many",
    "times",
    "transpose",
    "digits",
    "important",
    "know",
    "flip",
    "rows",
    "columns",
    "rather",
    "quickly",
    "like",
    "numpy",
    "also",
    "multiple",
    "different",
    "math",
    "functions",
    "look",
    "multiplication",
    "going",
    "take",
    "matrix",
    "multiplication",
    "tensors",
    "go",
    "ahead",
    "create",
    "constant",
    "5839",
    "put",
    "vector",
    "v",
    "4",
    "comma",
    "could",
    "done",
    "matched",
    "2",
    "2",
    "array",
    "instead",
    "going",
    "2",
    "1",
    "array",
    "code",
    "mole",
    "matrix",
    "multiplier",
    "times",
    "v",
    "go",
    "ahead",
    "run",
    "let",
    "make",
    "sure",
    "print",
    "av",
    "go",
    "ahead",
    "run",
    "see",
    "end",
    "36",
    "since",
    "seen",
    "matrix",
    "math",
    "5",
    "times",
    "4",
    "plus",
    "8",
    "times",
    "2",
    "um",
    "three",
    "times",
    "four",
    "plus",
    "nine",
    "times",
    "two",
    "get",
    "36",
    "know",
    "covering",
    "lot",
    "really",
    "quickly",
    "far",
    "basic",
    "functionality",
    "matrix",
    "matrix",
    "multiplier",
    "commonly",
    "used",
    "tool",
    "far",
    "computing",
    "different",
    "models",
    "linear",
    "regression",
    "stuff",
    "like",
    "one",
    "things",
    "note",
    "like",
    "numpy",
    "different",
    "math",
    "tf",
    "math",
    "go",
    "functions",
    "cosines",
    "absolute",
    "angle",
    "available",
    "use",
    "tensorflow",
    "model",
    "go",
    "back",
    "example",
    "let",
    "go",
    "ahead",
    "pull",
    "oh",
    "let",
    "multiplication",
    "always",
    "good",
    "stick",
    "av",
    "constant",
    "vector",
    "v",
    "go",
    "ahead",
    "bit",
    "wise",
    "multiplication",
    "create",
    "av",
    "times",
    "b",
    "let",
    "go",
    "print",
    "see",
    "coming",
    "across",
    "4",
    "2",
    "5",
    "8",
    "3",
    "9",
    "produces",
    "20",
    "32",
    "6",
    "pretty",
    "straight",
    "forward",
    "look",
    "4",
    "times",
    "5",
    "20",
    "4",
    "times",
    "8",
    "32",
    "numbers",
    "come",
    "also",
    "quickly",
    "create",
    "identity",
    "matrix",
    "basically",
    "main",
    "values",
    "diagonal",
    "ones",
    "zeros",
    "across",
    "side",
    "let",
    "go",
    "ahead",
    "take",
    "look",
    "see",
    "looks",
    "like",
    "let",
    "ah",
    "going",
    "get",
    "shape",
    "simple",
    "way",
    "similar",
    "numpy",
    "dot",
    "shape",
    "going",
    "return",
    "tuple",
    "case",
    "rows",
    "columns",
    "quick",
    "print",
    "rows",
    "columns",
    "run",
    "see",
    "three",
    "rows",
    "two",
    "columns",
    "go",
    "ahead",
    "create",
    "identity",
    "matrix",
    "script",
    "got",
    "wrong",
    "button",
    "script",
    "looks",
    "like",
    "number",
    "rows",
    "equals",
    "rows",
    "number",
    "columns",
    "equals",
    "columns",
    "type",
    "32",
    "go",
    "ahead",
    "print",
    "identity",
    "see",
    "nice",
    "identity",
    "column",
    "ones",
    "going",
    "across",
    "clearly",
    "going",
    "go",
    "every",
    "math",
    "module",
    "available",
    "want",
    "start",
    "looking",
    "prediction",
    "model",
    "seeing",
    "functions",
    "going",
    "move",
    "direct",
    "setup",
    "actually",
    "see",
    "full",
    "tensorflow",
    "use",
    "let",
    "go",
    "back",
    "create",
    "new",
    "setup",
    "go",
    "new",
    "python",
    "3",
    "module",
    "go",
    "bring",
    "takes",
    "whole",
    "window",
    "like",
    "hopefully",
    "made",
    "first",
    "part",
    "basic",
    "understanding",
    "tensorflow",
    "far",
    "series",
    "numpy",
    "arrays",
    "got",
    "math",
    "equations",
    "different",
    "things",
    "go",
    "going",
    "start",
    "building",
    "full",
    "setup",
    "far",
    "numpy",
    "see",
    "kara",
    "sits",
    "top",
    "different",
    "aspects",
    "works",
    "first",
    "thing",
    "want",
    "going",
    "go",
    "ahead",
    "lot",
    "imports",
    "date",
    "times",
    "warning",
    "scipy",
    "scipy",
    "um",
    "math",
    "back",
    "end",
    "scientific",
    "math",
    "warnings",
    "whenever",
    "lot",
    "older",
    "versions",
    "newer",
    "versions",
    "sometimes",
    "get",
    "warnings",
    "want",
    "go",
    "ahead",
    "suppress",
    "talk",
    "comes",
    "particular",
    "setup",
    "course",
    "date",
    "time",
    "pandas",
    "data",
    "frame",
    "think",
    "rows",
    "columns",
    "import",
    "pd",
    "numpy",
    "numbers",
    "array",
    "course",
    "tensorflow",
    "integrated",
    "heavily",
    "seaborne",
    "graphics",
    "seaborn",
    "sns",
    "going",
    "set",
    "top",
    "map",
    "plot",
    "library",
    "import",
    "mpl",
    "course",
    "going",
    "import",
    "matplot",
    "library",
    "pi",
    "plot",
    "plt",
    "right",
    "bat",
    "going",
    "set",
    "graphic",
    "colors",
    "um",
    "patch",
    "force",
    "edge",
    "color",
    "equals",
    "true",
    "style",
    "going",
    "use",
    "538",
    "style",
    "look",
    "get",
    "matplot",
    "library",
    "seaborn",
    "many",
    "options",
    "kind",
    "nice",
    "make",
    "look",
    "pretty",
    "start",
    "um",
    "start",
    "way",
    "think",
    "later",
    "uh",
    "going",
    "take",
    "uh",
    "mplrc",
    "going",
    "put",
    "patch",
    "add",
    "color",
    "dim",
    "gray",
    "line",
    "width",
    "part",
    "graphics",
    "setup",
    "uh",
    "go",
    "ahead",
    "interactive",
    "shell",
    "node",
    "interactivity",
    "equals",
    "last",
    "expression",
    "pd",
    "pandas",
    "options",
    "display",
    "max",
    "columns",
    "want",
    "display",
    "matplot",
    "library",
    "going",
    "inline",
    "jupiter",
    "notebook",
    "thing",
    "matplot",
    "library",
    "line",
    "warnings",
    "going",
    "filter",
    "warnings",
    "going",
    "ignore",
    "warnings",
    "way",
    "come",
    "worry",
    "really",
    "want",
    "working",
    "major",
    "project",
    "want",
    "make",
    "sure",
    "know",
    "warnings",
    "filter",
    "ignore",
    "later",
    "run",
    "going",
    "loading",
    "background",
    "little",
    "back",
    "end",
    "kind",
    "stuff",
    "want",
    "go",
    "ahead",
    "want",
    "go",
    "ahead",
    "import",
    "specific",
    "packages",
    "going",
    "working",
    "keras",
    "remember",
    "cross",
    "kind",
    "sits",
    "tensorflow",
    "importing",
    "cross",
    "sequential",
    "model",
    "effect",
    "importing",
    "tensorflow",
    "underneath",
    "brought",
    "math",
    "probably",
    "put",
    "cross",
    "models",
    "going",
    "import",
    "sequential",
    "remember",
    "slide",
    "three",
    "different",
    "options",
    "let",
    "flip",
    "back",
    "quick",
    "uh",
    "recall",
    "cross",
    "uh",
    "sequential",
    "functional",
    "subclassing",
    "remember",
    "three",
    "different",
    "setups",
    "talked",
    "earlier",
    "remember",
    "sequential",
    "going",
    "one",
    "tensor",
    "flow",
    "layer",
    "time",
    "go",
    "kind",
    "look",
    "think",
    "going",
    "left",
    "right",
    "top",
    "bottom",
    "whatever",
    "direction",
    "going",
    "goes",
    "one",
    "direction",
    "time",
    "functional",
    "complicated",
    "graph",
    "directions",
    "data",
    "split",
    "two",
    "separate",
    "tensors",
    "comes",
    "back",
    "together",
    "another",
    "tensor",
    "kinds",
    "things",
    "subclassing",
    "really",
    "really",
    "complicated",
    "one",
    "adding",
    "subclasses",
    "tensor",
    "external",
    "computations",
    "right",
    "middle",
    "like",
    "huge",
    "flow",
    "data",
    "going",
    "stick",
    "sequential",
    "big",
    "jump",
    "go",
    "sequential",
    "functional",
    "running",
    "sequential",
    "tensorflow",
    "first",
    "import",
    "want",
    "bring",
    "sequential",
    "layers",
    "let",
    "talk",
    "little",
    "bit",
    "layers",
    "cross",
    "tensorflow",
    "really",
    "happening",
    "makes",
    "nice",
    "work",
    "layers",
    "cross",
    "layers",
    "import",
    "dense",
    "cross",
    "layers",
    "import",
    "lstm",
    "talk",
    "layers",
    "cross",
    "many",
    "layers",
    "layers",
    "dense",
    "layer",
    "standard",
    "neural",
    "network",
    "default",
    "uses",
    "relu",
    "activation",
    "lstm",
    "long",
    "short",
    "term",
    "memory",
    "layer",
    "since",
    "going",
    "looking",
    "probably",
    "sequential",
    "data",
    "want",
    "go",
    "ahead",
    "lstm",
    "go",
    "um",
    "cross",
    "look",
    "layers",
    "across",
    "website",
    "see",
    "scroll",
    "cross",
    "layers",
    "built",
    "get",
    "look",
    "let",
    "see",
    "layer",
    "activation",
    "base",
    "layers",
    "activation",
    "layer",
    "weight",
    "layer",
    "waste",
    "lot",
    "stuff",
    "relu",
    "basic",
    "activation",
    "listed",
    "layer",
    "activations",
    "change",
    "core",
    "layers",
    "dense",
    "layers",
    "input",
    "layer",
    "dense",
    "layer",
    "added",
    "customized",
    "one",
    "long",
    "term",
    "short",
    "term",
    "memory",
    "layer",
    "course",
    "even",
    "custom",
    "layers",
    "cross",
    "whole",
    "functionality",
    "thing",
    "really",
    "nice",
    "built",
    "even",
    "convolutional",
    "layers",
    "processing",
    "graphics",
    "lot",
    "cool",
    "things",
    "cross",
    "popular",
    "open",
    "source",
    "tools",
    "right",
    "fingertips",
    "cross",
    "going",
    "import",
    "couple",
    "layers",
    "dense",
    "layer",
    "long",
    "short",
    "term",
    "memory",
    "layer",
    "course",
    "sk",
    "learn",
    "scikit",
    "want",
    "go",
    "ahead",
    "min",
    "max",
    "scalar",
    "standard",
    "scalar",
    "pre",
    "editing",
    "data",
    "metrics",
    "take",
    "look",
    "errors",
    "compute",
    "let",
    "go",
    "ahead",
    "run",
    "loads",
    "expecting",
    "anything",
    "output",
    "file",
    "coming",
    "going",
    "air",
    "let",
    "go",
    "ahead",
    "take",
    "quick",
    "look",
    "openoffice",
    "standard",
    "know",
    "like",
    "excel",
    "whatever",
    "using",
    "spreadsheet",
    "see",
    "number",
    "columns",
    "uh",
    "number",
    "rows",
    "actually",
    "goes",
    "like",
    "8",
    "first",
    "thing",
    "want",
    "notice",
    "first",
    "row",
    "kind",
    "random",
    "number",
    "put",
    "going",
    "probably",
    "something",
    "going",
    "work",
    "second",
    "row",
    "bandung",
    "guessing",
    "reference",
    "profile",
    "scroll",
    "bottom",
    "going",
    "takes",
    "forever",
    "get",
    "back",
    "thing",
    "status",
    "status",
    "date",
    "sequential",
    "order",
    "jam",
    "going",
    "guess",
    "time",
    "stamp",
    "date",
    "time",
    "o3",
    "co",
    "no2",
    "reading",
    "so2",
    "co2",
    "voc",
    "numbers",
    "pm1",
    "pm",
    "pm",
    "4",
    "pm",
    "10",
    "10",
    "without",
    "actually",
    "looking",
    "data",
    "mean",
    "guess",
    "like",
    "temperature",
    "humidity",
    "sure",
    "pms",
    "whole",
    "slew",
    "data",
    "looking",
    "air",
    "quality",
    "far",
    "area",
    "region",
    "going",
    "date",
    "time",
    "stamps",
    "code",
    "wise",
    "going",
    "read",
    "pandas",
    "data",
    "frame",
    "data",
    "frame",
    "df",
    "nice",
    "abbreviation",
    "commonly",
    "used",
    "data",
    "frames",
    "equals",
    "csv",
    "path",
    "happens",
    "drive",
    "uh",
    "separated",
    "spaces",
    "go",
    "ahead",
    "run",
    "print",
    "head",
    "data",
    "looks",
    "similar",
    "looking",
    "jupiter",
    "take",
    "go",
    "way",
    "make",
    "real",
    "small",
    "see",
    "columns",
    "going",
    "across",
    "get",
    "full",
    "view",
    "bring",
    "back",
    "size",
    "pretty",
    "small",
    "overshot",
    "see",
    "data",
    "looking",
    "looking",
    "number",
    "looking",
    "profile",
    "bandung",
    "date",
    "timestamp",
    "03",
    "count",
    "co",
    "forth",
    "basic",
    "pandas",
    "printing",
    "top",
    "five",
    "rows",
    "could",
    "easily",
    "done",
    "three",
    "rows",
    "five",
    "rows",
    "ten",
    "whatever",
    "want",
    "put",
    "default",
    "five",
    "pandas",
    "talk",
    "time",
    "know",
    "already",
    "said",
    "least",
    "twice",
    "video",
    "work",
    "data",
    "looking",
    "bring",
    "together",
    "want",
    "go",
    "ahead",
    "start",
    "date",
    "time",
    "come",
    "two",
    "columns",
    "date",
    "time",
    "want",
    "go",
    "ahead",
    "combine",
    "simple",
    "script",
    "says",
    "combine",
    "date",
    "time",
    "formula",
    "building",
    "going",
    "submit",
    "pandas",
    "data",
    "frame",
    "tab",
    "name",
    "go",
    "ahead",
    "information",
    "want",
    "go",
    "ahead",
    "create",
    "goes",
    "range",
    "df",
    "shape",
    "going",
    "go",
    "whole",
    "setup",
    "going",
    "list",
    "tab",
    "append",
    "df",
    "location",
    "date",
    "going",
    "return",
    "numpy",
    "array",
    "list",
    "tab",
    "types",
    "date",
    "time",
    "switching",
    "date",
    "time",
    "stamp",
    "go",
    "ahead",
    "df",
    "date",
    "time",
    "equals",
    "combined",
    "date",
    "time",
    "always",
    "like",
    "print",
    "df",
    "head",
    "see",
    "looks",
    "like",
    "come",
    "setup",
    "course",
    "edited",
    "far",
    "right",
    "date",
    "time",
    "see",
    "format",
    "changed",
    "added",
    "date",
    "time",
    "column",
    "brought",
    "date",
    "taken",
    "format",
    "actual",
    "variable",
    "0",
    "0",
    "0",
    "well",
    "look",
    "good",
    "need",
    "also",
    "include",
    "time",
    "part",
    "want",
    "convert",
    "hourly",
    "data",
    "let",
    "go",
    "ahead",
    "finish",
    "combining",
    "date",
    "time",
    "let",
    "go",
    "ahead",
    "create",
    "little",
    "script",
    "combine",
    "time",
    "thing",
    "creating",
    "numpy",
    "array",
    "returning",
    "numpy",
    "array",
    "cr",
    "forcing",
    "date",
    "time",
    "format",
    "actually",
    "spend",
    "hours",
    "going",
    "uh",
    "conversions",
    "pull",
    "pandas",
    "data",
    "frame",
    "set",
    "um",
    "kind",
    "skipping",
    "little",
    "fast",
    "want",
    "stay",
    "focused",
    "tensorflow",
    "cross",
    "keep",
    "mind",
    "like",
    "80",
    "coding",
    "lot",
    "stuff",
    "going",
    "reformatting",
    "things",
    "resetting",
    "back",
    "looks",
    "right",
    "know",
    "takes",
    "time",
    "get",
    "usually",
    "companies",
    "paying",
    "big",
    "bucks",
    "want",
    "go",
    "ahead",
    "couple",
    "things",
    "going",
    "going",
    "go",
    "ahead",
    "date",
    "time",
    "going",
    "reorganize",
    "setup",
    "convert",
    "hourly",
    "data",
    "put",
    "pause",
    "remember",
    "select",
    "df",
    "different",
    "columns",
    "going",
    "working",
    "going",
    "see",
    "actually",
    "dropped",
    "couple",
    "columns",
    "ones",
    "showed",
    "earlier",
    "repetitive",
    "data",
    "nothing",
    "exciting",
    "want",
    "go",
    "ahead",
    "create",
    "second",
    "data",
    "frame",
    "let",
    "get",
    "rid",
    "df",
    "head",
    "df2",
    "going",
    "group",
    "date",
    "time",
    "looking",
    "mean",
    "value",
    "print",
    "see",
    "talking",
    "reorganized",
    "put",
    "date",
    "time",
    "03",
    "co",
    "order",
    "see",
    "date",
    "time",
    "zero",
    "zero",
    "date",
    "1",
    "2",
    "3",
    "let",
    "group",
    "data",
    "together",
    "lot",
    "manageable",
    "format",
    "want",
    "right",
    "sequential",
    "order",
    "go",
    "back",
    "go",
    "air",
    "quality",
    "see",
    "right",
    "looking",
    "um",
    "columns",
    "going",
    "across",
    "really",
    "need",
    "since",
    "going",
    "create",
    "date",
    "time",
    "column",
    "get",
    "rid",
    "different",
    "columns",
    "information",
    "want",
    "reflect",
    "right",
    "columns",
    "picked",
    "coming",
    "across",
    "columns",
    "done",
    "reformatted",
    "data",
    "grouped",
    "together",
    "date",
    "see",
    "different",
    "data",
    "coming",
    "set",
    "data",
    "scientist",
    "first",
    "thing",
    "want",
    "get",
    "description",
    "looking",
    "uh",
    "go",
    "ahead",
    "df2",
    "describe",
    "gives",
    "us",
    "know",
    "describe",
    "gives",
    "us",
    "basic",
    "uh",
    "data",
    "analytics",
    "information",
    "might",
    "looking",
    "like",
    "mean",
    "standard",
    "deviation",
    "uh",
    "minimum",
    "amount",
    "maximum",
    "amount",
    "first",
    "quarter",
    "second",
    "quarter",
    "third",
    "quarter",
    "um",
    "numbers",
    "also",
    "uh",
    "get",
    "quick",
    "look",
    "glance",
    "describing",
    "data",
    "descriptive",
    "analysis",
    "even",
    "though",
    "quantile",
    "information",
    "going",
    "dig",
    "little",
    "deeper",
    "going",
    "calculate",
    "quantile",
    "variable",
    "uh",
    "going",
    "look",
    "number",
    "things",
    "variable",
    "see",
    "right",
    "q1",
    "simply",
    "quantile",
    "percent",
    "match",
    "25",
    "percent",
    "looking",
    "min",
    "max",
    "going",
    "basically",
    "breaking",
    "uh",
    "different",
    "variable",
    "one",
    "things",
    "kind",
    "fun",
    "going",
    "look",
    "second",
    "let",
    "get",
    "put",
    "next",
    "piece",
    "code",
    "um",
    "clean",
    "um",
    "going",
    "drop",
    "couple",
    "thing",
    "last",
    "rows",
    "first",
    "row",
    "usually",
    "lot",
    "null",
    "values",
    "first",
    "row",
    "titles",
    "important",
    "important",
    "drop",
    "rows",
    "right",
    "look",
    "different",
    "quantiles",
    "know",
    "still",
    "looking",
    "25",
    "quantile",
    "going",
    "little",
    "bit",
    "cleared",
    "first",
    "last",
    "rows",
    "going",
    "go",
    "ahead",
    "go",
    "columns",
    "way",
    "look",
    "column",
    "individually",
    "create",
    "q1",
    "q3",
    "min",
    "max",
    "min",
    "iqr",
    "max",
    "iqr",
    "calculate",
    "quantile",
    "df2",
    "basically",
    "math",
    "splitting",
    "apart",
    "happens",
    "lot",
    "might",
    "want",
    "look",
    "individual",
    "project",
    "would",
    "probably",
    "spend",
    "days",
    "days",
    "going",
    "different",
    "values",
    "mean",
    "one",
    "biggest",
    "data",
    "science",
    "uh",
    "things",
    "look",
    "important",
    "uh",
    "use",
    "use",
    "common",
    "sense",
    "know",
    "looking",
    "data",
    "make",
    "sense",
    "go",
    "back",
    "like",
    "wait",
    "minute",
    "heck",
    "point",
    "probably",
    "go",
    "back",
    "double",
    "check",
    "going",
    "looking",
    "see",
    "right",
    "attribute",
    "o3",
    "broken",
    "q1",
    "q3",
    "go",
    "back",
    "rounded",
    "basically",
    "done",
    "math",
    "split",
    "minimum",
    "max",
    "iqr",
    "computed",
    "let",
    "see",
    "go",
    "uh",
    "q1",
    "minus",
    "times",
    "iqr",
    "iqr",
    "q3",
    "minus",
    "q1",
    "difference",
    "two",
    "different",
    "quarters",
    "data",
    "science",
    "far",
    "hard",
    "math",
    "really",
    "actually",
    "trying",
    "focus",
    "cross",
    "tensorflow",
    "still",
    "got",
    "go",
    "stuff",
    "told",
    "80",
    "percent",
    "programming",
    "going",
    "understanding",
    "heck",
    "happened",
    "going",
    "data",
    "mean",
    "looking",
    "going",
    "go",
    "ahead",
    "say",
    "hey",
    "computed",
    "numbers",
    "reason",
    "computed",
    "numbers",
    "take",
    "minimum",
    "value",
    "less",
    "minimum",
    "iqr",
    "uh",
    "means",
    "something",
    "going",
    "wrong",
    "usually",
    "case",
    "going",
    "show",
    "us",
    "outlier",
    "want",
    "go",
    "ahead",
    "find",
    "minimum",
    "value",
    "less",
    "min",
    "minimum",
    "iqr",
    "outlier",
    "max",
    "value",
    "greater",
    "max",
    "iqr",
    "outlier",
    "low",
    "outliers",
    "found",
    "minimum",
    "value",
    "high",
    "outliers",
    "found",
    "really",
    "important",
    "actually",
    "outliers",
    "almost",
    "everything",
    "data",
    "sometimes",
    "sometimes",
    "project",
    "find",
    "outliers",
    "want",
    "know",
    "crime",
    "detection",
    "looking",
    "looking",
    "outliers",
    "fit",
    "normal",
    "business",
    "deal",
    "go",
    "ahead",
    "throw",
    "um",
    "threw",
    "lot",
    "code",
    "oh",
    "goodness",
    "uh",
    "max",
    "greater",
    "iqr",
    "print",
    "outlier",
    "found",
    "want",
    "want",
    "start",
    "cleaning",
    "outliers",
    "want",
    "convert",
    "create",
    "convert",
    "nand",
    "x",
    "max",
    "iqr",
    "equals",
    "max",
    "underscore",
    "iqr",
    "min",
    "iqr",
    "equals",
    "mini",
    "qr",
    "saying",
    "data",
    "going",
    "send",
    "python",
    "x",
    "greater",
    "max",
    "iqr",
    "x",
    "less",
    "min",
    "iqr",
    "x",
    "equals",
    "uh",
    "null",
    "going",
    "set",
    "null",
    "want",
    "clear",
    "outliers",
    "data",
    "fraud",
    "detection",
    "would",
    "opposite",
    "would",
    "cleaning",
    "everything",
    "else",
    "series",
    "look",
    "outlier",
    "going",
    "convert",
    "nand",
    "hum",
    "x",
    "max",
    "iqr",
    "100",
    "percent",
    "min",
    "iqr",
    "min",
    "iqr",
    "x",
    "greater",
    "max",
    "iqr",
    "x",
    "less",
    "min",
    "iqr",
    "going",
    "return",
    "null",
    "value",
    "otherwise",
    "going",
    "remain",
    "value",
    "x",
    "x",
    "equals",
    "x",
    "see",
    "go",
    "code",
    "equals",
    "hqm",
    "go",
    "ahead",
    "column",
    "specific",
    "humidity",
    "hum",
    "column",
    "uh",
    "going",
    "go",
    "ahead",
    "convert",
    "run",
    "map",
    "convert",
    "non",
    "e2m",
    "uh",
    "see",
    "cleanup",
    "uh",
    "run",
    "found",
    "humidity",
    "probably",
    "weird",
    "values",
    "outliers",
    "go",
    "ahead",
    "finish",
    "take",
    "look",
    "outliers",
    "run",
    "code",
    "low",
    "outlier",
    "high",
    "outlier",
    "outliers",
    "interpolated",
    "means",
    "given",
    "new",
    "value",
    "chances",
    "days",
    "looking",
    "something",
    "like",
    "sensors",
    "coming",
    "probably",
    "failed",
    "sensor",
    "something",
    "went",
    "wrong",
    "kind",
    "thing",
    "really",
    "want",
    "data",
    "analysis",
    "uh",
    "pulling",
    "uh",
    "converting",
    "setting",
    "uh",
    "method",
    "linear",
    "interpolate",
    "left",
    "linear",
    "going",
    "fill",
    "data",
    "based",
    "linear",
    "regression",
    "model",
    "similar",
    "data",
    "thing",
    "df2y",
    "interpolate",
    "data",
    "prep",
    "actually",
    "talking",
    "tensorflow",
    "trying",
    "get",
    "data",
    "set",
    "correctly",
    "run",
    "going",
    "cause",
    "problems",
    "huge",
    "bias",
    "dealt",
    "outliers",
    "specifically",
    "humidity",
    "one",
    "things",
    "start",
    "running",
    "run",
    "see",
    "outliers",
    "found",
    "high",
    "low",
    "outliers",
    "migrated",
    "also",
    "know",
    "issues",
    "going",
    "data",
    "know",
    "looking",
    "data",
    "playing",
    "start",
    "understanding",
    "going",
    "let",
    "take",
    "temp",
    "value",
    "going",
    "go",
    "ahead",
    "use",
    "logarithmic",
    "function",
    "temp",
    "value",
    "interesting",
    "like",
    "heck",
    "even",
    "know",
    "use",
    "logarithmic",
    "temp",
    "value",
    "domain",
    "specific",
    "talking",
    "expert",
    "air",
    "care",
    "expert",
    "air",
    "care",
    "um",
    "know",
    "go",
    "look",
    "look",
    "air",
    "care",
    "data",
    "fact",
    "probably",
    "first",
    "air",
    "care",
    "data",
    "set",
    "looked",
    "experts",
    "come",
    "come",
    "say",
    "hey",
    "data",
    "science",
    "exponentially",
    "variable",
    "variable",
    "need",
    "go",
    "ahead",
    "transform",
    "use",
    "logarithmic",
    "scale",
    "point",
    "would",
    "coming",
    "data",
    "go",
    "data",
    "science",
    "programmer",
    "overview",
    "lot",
    "stuff",
    "connecting",
    "database",
    "connecting",
    "experts",
    "data",
    "analytics",
    "lot",
    "times",
    "talking",
    "somebody",
    "data",
    "analysis",
    "might",
    "way",
    "usually",
    "phd",
    "level",
    "data",
    "science",
    "programming",
    "level",
    "interfaces",
    "database",
    "manager",
    "going",
    "person",
    "admin",
    "working",
    "looking",
    "looking",
    "something",
    "sent",
    "said",
    "hey",
    "domain",
    "air",
    "care",
    "needs",
    "skew",
    "data",
    "goes",
    "exponentially",
    "affects",
    "everything",
    "else",
    "go",
    "ahead",
    "take",
    "data",
    "let",
    "go",
    "ahead",
    "run",
    "another",
    "quick",
    "look",
    "uh",
    "distribution",
    "df",
    "create",
    "another",
    "data",
    "frame",
    "temp",
    "values",
    "data",
    "set",
    "log",
    "temp",
    "put",
    "side",
    "side",
    "go",
    "ahead",
    "quick",
    "histogram",
    "kind",
    "nice",
    "plot",
    "figure",
    "figure",
    "size",
    "plt",
    "matplot",
    "library",
    "distribution",
    "underscore",
    "df",
    "data",
    "frames",
    "nice",
    "integrates",
    "histogram",
    "right",
    "pandas",
    "love",
    "pandas",
    "chart",
    "would",
    "send",
    "back",
    "data",
    "analysis",
    "say",
    "hey",
    "wanted",
    "data",
    "converting",
    "data",
    "scientist",
    "scientist",
    "first",
    "thing",
    "note",
    "gone",
    "10",
    "20",
    "30",
    "scales",
    "scale",
    "data",
    "kind",
    "adjusted",
    "little",
    "bit",
    "based",
    "kind",
    "skew",
    "let",
    "jump",
    "getting",
    "little",
    "closer",
    "actually",
    "cross",
    "go",
    "ahead",
    "split",
    "data",
    "course",
    "good",
    "data",
    "scientists",
    "want",
    "training",
    "set",
    "test",
    "set",
    "go",
    "ahead",
    "train",
    "size",
    "going",
    "use",
    "percent",
    "data",
    "make",
    "sure",
    "integer",
    "want",
    "take",
    "slice",
    "float",
    "value",
    "give",
    "nice",
    "error",
    "train",
    "size",
    "75",
    "percent",
    "test",
    "size",
    "going",
    "course",
    "train",
    "size",
    "minus",
    "length",
    "data",
    "set",
    "simply",
    "train",
    "comma",
    "test",
    "data",
    "set",
    "going",
    "train",
    "size",
    "test",
    "size",
    "uh",
    "go",
    "print",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "values",
    "split",
    "nice",
    "split",
    "1298",
    "433",
    "points",
    "value",
    "going",
    "setup",
    "remember",
    "specifically",
    "looking",
    "data",
    "set",
    "create",
    "data",
    "set",
    "um",
    "called",
    "logarithmic",
    "value",
    "temp",
    "data",
    "set",
    "came",
    "looking",
    "column",
    "train",
    "size",
    "test",
    "train",
    "test",
    "data",
    "set",
    "let",
    "go",
    "ahead",
    "convert",
    "array",
    "values",
    "data",
    "set",
    "matrix",
    "going",
    "create",
    "little",
    "setup",
    "create",
    "data",
    "set",
    "data",
    "set",
    "going",
    "come",
    "going",
    "look",
    "back",
    "one",
    "going",
    "look",
    "back",
    "one",
    "piece",
    "data",
    "going",
    "backward",
    "data",
    "x",
    "data",
    "range",
    "length",
    "data",
    "set",
    "look",
    "back",
    "creating",
    "let",
    "go",
    "ahead",
    "run",
    "actually",
    "best",
    "way",
    "go",
    "ahead",
    "create",
    "data",
    "take",
    "look",
    "shape",
    "let",
    "go",
    "ahead",
    "put",
    "code",
    "going",
    "look",
    "back",
    "one",
    "train",
    "x",
    "train",
    "going",
    "adding",
    "data",
    "come",
    "take",
    "look",
    "shape",
    "go",
    "run",
    "piece",
    "code",
    "look",
    "shape",
    "new",
    "slightly",
    "different",
    "change",
    "shape",
    "x",
    "1296",
    "comma",
    "1",
    "shape",
    "train",
    "test",
    "x",
    "text",
    "looking",
    "x",
    "comes",
    "single",
    "value",
    "want",
    "predict",
    "next",
    "one",
    "little",
    "piece",
    "code",
    "looking",
    "well",
    "want",
    "look",
    "back",
    "one",
    "um",
    "going",
    "train",
    "data",
    "yesterday",
    "data",
    "yesterday",
    "says",
    "hey",
    "humidity",
    "97",
    "today",
    "humidity",
    "97",
    "yesterday",
    "going",
    "go",
    "going",
    "go",
    "today",
    "97",
    "go",
    "100",
    "going",
    "uh",
    "looking",
    "forward",
    "next",
    "piece",
    "data",
    "says",
    "hey",
    "tomorrow",
    "going",
    "know",
    "today",
    "humidity",
    "tomorrow",
    "humidity",
    "going",
    "stacking",
    "data",
    "basically",
    "x",
    "plus",
    "1",
    "x",
    "could",
    "minus",
    "couple",
    "things",
    "note",
    "x",
    "data",
    "dealing",
    "one",
    "column",
    "need",
    "shape",
    "columns",
    "two",
    "different",
    "numbers",
    "since",
    "single",
    "point",
    "data",
    "see",
    "train",
    "need",
    "extra",
    "shape",
    "going",
    "run",
    "problem",
    "reason",
    "call",
    "time",
    "step",
    "time",
    "step",
    "memory",
    "layer",
    "uh",
    "going",
    "add",
    "another",
    "reshape",
    "let",
    "go",
    "put",
    "next",
    "cell",
    "want",
    "reshape",
    "input",
    "array",
    "form",
    "sample",
    "time",
    "step",
    "features",
    "looking",
    "one",
    "feature",
    "mean",
    "one",
    "things",
    "playing",
    "like",
    "getting",
    "error",
    "numpy",
    "array",
    "giving",
    "something",
    "weird",
    "going",
    "going",
    "going",
    "add",
    "one",
    "level",
    "instead",
    "want",
    "go",
    "one",
    "put",
    "code",
    "together",
    "back",
    "see",
    "kept",
    "shape",
    "1299",
    "added",
    "one",
    "dimension",
    "train",
    "x",
    "shape",
    "one",
    "could",
    "depends",
    "far",
    "back",
    "long",
    "short",
    "term",
    "memory",
    "want",
    "go",
    "piece",
    "code",
    "reshape",
    "see",
    "new",
    "shape",
    "1",
    "12",
    "99",
    "1",
    "1",
    "versus",
    "1299",
    "one",
    "part",
    "shape",
    "432",
    "1",
    "1",
    "tr",
    "x",
    "course",
    "test",
    "x",
    "single",
    "column",
    "one",
    "output",
    "looking",
    "done",
    "eighty",
    "percent",
    "um",
    "know",
    "writing",
    "code",
    "reformatting",
    "data",
    "um",
    "bringing",
    "want",
    "go",
    "ahead",
    "fun",
    "part",
    "going",
    "go",
    "ahead",
    "create",
    "fit",
    "lstm",
    "neural",
    "network",
    "going",
    "first",
    "thing",
    "need",
    "going",
    "need",
    "go",
    "ahead",
    "create",
    "model",
    "sequential",
    "model",
    "remember",
    "sequential",
    "means",
    "goes",
    "order",
    "means",
    "two",
    "layers",
    "layers",
    "go",
    "layer",
    "one",
    "layer",
    "two",
    "layer",
    "zero",
    "layer",
    "one",
    "different",
    "functional",
    "functional",
    "allows",
    "split",
    "data",
    "run",
    "two",
    "completely",
    "separate",
    "models",
    "bring",
    "back",
    "together",
    "sequential",
    "decided",
    "long",
    "short",
    "term",
    "memory",
    "uh",
    "input",
    "shape",
    "comes",
    "switching",
    "could",
    "easily",
    "made",
    "one",
    "two",
    "three",
    "four",
    "going",
    "back",
    "far",
    "end",
    "number",
    "stuck",
    "going",
    "back",
    "one",
    "always",
    "good",
    "idea",
    "get",
    "point",
    "heck",
    "model",
    "coming",
    "kind",
    "models",
    "available",
    "let",
    "go",
    "put",
    "next",
    "model",
    "going",
    "two",
    "models",
    "next",
    "model",
    "going",
    "go",
    "ahead",
    "going",
    "dents",
    "model",
    "equal",
    "sequential",
    "going",
    "add",
    "lstm",
    "model",
    "going",
    "add",
    "dense",
    "model",
    "remember",
    "top",
    "code",
    "imports",
    "oops",
    "go",
    "cross",
    "right",
    "importing",
    "dense",
    "model",
    "importing",
    "lstm",
    "every",
    "tensorflow",
    "model",
    "uses",
    "dents",
    "dense",
    "model",
    "basic",
    "forward",
    "propagation",
    "reverse",
    "propagation",
    "error",
    "reverse",
    "propagation",
    "program",
    "model",
    "neural",
    "networks",
    "already",
    "looked",
    "luxon",
    "says",
    "error",
    "sends",
    "error",
    "backwards",
    "long",
    "memory",
    "little",
    "different",
    "real",
    "question",
    "want",
    "look",
    "right",
    "find",
    "models",
    "kind",
    "models",
    "available",
    "let",
    "go",
    "cross",
    "website",
    "cross",
    "dot",
    "io",
    "go",
    "api",
    "layers",
    "always",
    "search",
    "search",
    "cross",
    "api",
    "layers",
    "open",
    "see",
    "base",
    "layers",
    "right",
    "class",
    "trainable",
    "weights",
    "kinds",
    "stuff",
    "like",
    "activation",
    "lot",
    "layers",
    "switch",
    "activates",
    "relu",
    "like",
    "smaller",
    "arrays",
    "convolutional",
    "neural",
    "networks",
    "convolution",
    "usually",
    "uses",
    "relu",
    "sigmoid",
    "way",
    "soft",
    "mac",
    "soft",
    "plus",
    "different",
    "choices",
    "far",
    "set",
    "want",
    "want",
    "go",
    "ahead",
    "scroll",
    "see",
    "core",
    "layers",
    "dense",
    "layer",
    "input",
    "object",
    "dense",
    "layer",
    "activation",
    "layer",
    "embedding",
    "layer",
    "kind",
    "one",
    "set",
    "common",
    "uh",
    "convolutional",
    "neural",
    "networks",
    "convolutional",
    "layers",
    "like",
    "image",
    "categorizing",
    "trying",
    "find",
    "objects",
    "picture",
    "kind",
    "thing",
    "pooling",
    "layers",
    "layers",
    "come",
    "together",
    "usually",
    "bring",
    "single",
    "layer",
    "although",
    "still",
    "like",
    "global",
    "max",
    "pulling",
    "3d",
    "mean",
    "list",
    "goes",
    "kinds",
    "different",
    "things",
    "hidden",
    "far",
    "changes",
    "know",
    "go",
    "search",
    "looking",
    "figure",
    "going",
    "work",
    "best",
    "far",
    "project",
    "working",
    "long",
    "memory",
    "big",
    "one",
    "start",
    "talking",
    "text",
    "someone",
    "says",
    "comes",
    "cat",
    "hat",
    "little",
    "kid",
    "book",
    "starts",
    "programming",
    "really",
    "want",
    "know",
    "going",
    "going",
    "something",
    "history",
    "history",
    "behind",
    "tells",
    "next",
    "one",
    "coming",
    "built",
    "different",
    "know",
    "built",
    "model",
    "added",
    "different",
    "layers",
    "went",
    "play",
    "remember",
    "functional",
    "actually",
    "link",
    "layers",
    "together",
    "branch",
    "come",
    "back",
    "together",
    "sub",
    "setup",
    "create",
    "different",
    "model",
    "embed",
    "model",
    "might",
    "coming",
    "linear",
    "regression",
    "embed",
    "linear",
    "regression",
    "model",
    "part",
    "functional",
    "split",
    "come",
    "back",
    "together",
    "things",
    "going",
    "go",
    "ahead",
    "compile",
    "model",
    "brings",
    "everything",
    "together",
    "going",
    "put",
    "loss",
    "use",
    "mean",
    "squared",
    "error",
    "go",
    "ahead",
    "use",
    "atom",
    "optimizer",
    "clearly",
    "lot",
    "choices",
    "depending",
    "like",
    "different",
    "prediction",
    "models",
    "scikit",
    "python",
    "recognize",
    "fit",
    "model",
    "going",
    "send",
    "train",
    "x",
    "train",
    "um",
    "going",
    "decide",
    "many",
    "epochs",
    "going",
    "run",
    "500",
    "probably",
    "lot",
    "guessing",
    "probably",
    "200",
    "300",
    "probably",
    "fine",
    "batch",
    "size",
    "many",
    "different",
    "uh",
    "process",
    "math",
    "behind",
    "data",
    "analytics",
    "might",
    "try",
    "know",
    "number",
    "data",
    "scientist",
    "phd",
    "level",
    "math",
    "says",
    "want",
    "use",
    "particular",
    "batch",
    "size",
    "kind",
    "play",
    "number",
    "little",
    "bit",
    "dig",
    "deeper",
    "math",
    "see",
    "affects",
    "results",
    "depending",
    "number",
    "settings",
    "verbose",
    "actually",
    "look",
    "tell",
    "verbose",
    "means",
    "think",
    "actually",
    "default",
    "remember",
    "correctly",
    "lot",
    "different",
    "settings",
    "go",
    "fit",
    "big",
    "ones",
    "epic",
    "batch",
    "size",
    "looking",
    "going",
    "go",
    "ahead",
    "run",
    "going",
    "take",
    "minutes",
    "run",
    "going",
    "500",
    "times",
    "data",
    "huge",
    "data",
    "set",
    "point",
    "kind",
    "wondering",
    "oh",
    "gosh",
    "going",
    "finish",
    "tomorrow",
    "running",
    "single",
    "machine",
    "tera",
    "terabyte",
    "data",
    "going",
    "personal",
    "computer",
    "running",
    "terabyte",
    "data",
    "um",
    "know",
    "running",
    "rather",
    "quickly",
    "500",
    "iterations",
    "uh",
    "yeah",
    "terabyte",
    "data",
    "talking",
    "something",
    "closer",
    "days",
    "week",
    "know",
    "even",
    "gigahertz",
    "machine",
    "eight",
    "cores",
    "still",
    "going",
    "take",
    "long",
    "time",
    "go",
    "full",
    "terabyte",
    "data",
    "want",
    "start",
    "looking",
    "putting",
    "framework",
    "like",
    "spark",
    "something",
    "probe",
    "process",
    "across",
    "multiple",
    "um",
    "processors",
    "multiple",
    "computers",
    "scroll",
    "way",
    "bottom",
    "going",
    "see",
    "square",
    "mean",
    "error",
    "scroll",
    "way",
    "see",
    "kind",
    "oscillates",
    "08089",
    "right",
    "around",
    "2",
    "250",
    "start",
    "seeing",
    "oscillation",
    "really",
    "going",
    "anywhere",
    "really",
    "need",
    "go",
    "full",
    "500",
    "epics",
    "know",
    "retraining",
    "stuff",
    "kind",
    "good",
    "know",
    "error",
    "zone",
    "extra",
    "processing",
    "course",
    "going",
    "build",
    "model",
    "want",
    "go",
    "ahead",
    "run",
    "prediction",
    "let",
    "go",
    "ahead",
    "make",
    "prediction",
    "remember",
    "training",
    "test",
    "set",
    "test",
    "set",
    "train",
    "x",
    "train",
    "training",
    "train",
    "predict",
    "test",
    "x",
    "test",
    "going",
    "test",
    "see",
    "good",
    "come",
    "see",
    "right",
    "go",
    "ahead",
    "train",
    "predict",
    "equals",
    "model",
    "predict",
    "train",
    "x",
    "test",
    "predict",
    "model",
    "predict",
    "test",
    "x",
    "would",
    "want",
    "run",
    "prediction",
    "train",
    "x",
    "well",
    "100",
    "prediction",
    "know",
    "certain",
    "amount",
    "error",
    "want",
    "compare",
    "error",
    "programmed",
    "error",
    "get",
    "run",
    "new",
    "data",
    "never",
    "seen",
    "model",
    "never",
    "seen",
    "one",
    "things",
    "go",
    "ahead",
    "invert",
    "predictions",
    "helps",
    "us",
    "level",
    "little",
    "bit",
    "get",
    "rid",
    "bias",
    "train",
    "predict",
    "equals",
    "np",
    "exponential",
    "m1",
    "train",
    "predict",
    "train",
    "equals",
    "exponential",
    "m1",
    "train",
    "train",
    "test",
    "predict",
    "test",
    "um",
    "reformatting",
    "data",
    "matches",
    "want",
    "go",
    "ahead",
    "calculate",
    "root",
    "mean",
    "square",
    "error",
    "train",
    "score",
    "math",
    "square",
    "root",
    "times",
    "mean",
    "square",
    "root",
    "error",
    "train",
    "train",
    "predict",
    "feeding",
    "data",
    "compare",
    "thing",
    "test",
    "let",
    "take",
    "look",
    "really",
    "code",
    "makes",
    "sense",
    "going",
    "line",
    "line",
    "see",
    "answer",
    "really",
    "helps",
    "zoom",
    "train",
    "score",
    "root",
    "mean",
    "square",
    "error",
    "test",
    "score",
    "root",
    "mean",
    "square",
    "error",
    "reversed",
    "test",
    "score",
    "better",
    "training",
    "score",
    "trained",
    "something",
    "really",
    "wrong",
    "point",
    "got",
    "go",
    "back",
    "figure",
    "wrong",
    "never",
    "better",
    "result",
    "test",
    "data",
    "training",
    "data",
    "put",
    "look",
    "error",
    "training",
    "testing",
    "going",
    "quoting",
    "publishing",
    "saying",
    "hey",
    "good",
    "model",
    "test",
    "score",
    "showing",
    "people",
    "test",
    "data",
    "model",
    "never",
    "seen",
    "good",
    "model",
    "lot",
    "times",
    "actually",
    "want",
    "put",
    "together",
    "like",
    "little",
    "formal",
    "code",
    "actually",
    "want",
    "print",
    "print",
    "see",
    "test",
    "prediction",
    "standard",
    "deviation",
    "data",
    "set",
    "less",
    "go",
    "back",
    "remember",
    "square",
    "means",
    "error",
    "standard",
    "deviation",
    "numbers",
    "different",
    "saying",
    "thing",
    "talked",
    "uh",
    "less",
    "model",
    "good",
    "enough",
    "saying",
    "hey",
    "model",
    "valid",
    "valid",
    "model",
    "go",
    "ahead",
    "go",
    "along",
    "putting",
    "formal",
    "print",
    "um",
    "want",
    "go",
    "ahead",
    "plot",
    "going",
    "uh",
    "want",
    "pretty",
    "graft",
    "people",
    "see",
    "going",
    "walk",
    "meeting",
    "dealing",
    "number",
    "people",
    "really",
    "want",
    "numbers",
    "want",
    "say",
    "hey",
    "mean",
    "standard",
    "deviation",
    "unless",
    "know",
    "statistics",
    "might",
    "dealing",
    "number",
    "different",
    "departments",
    "head",
    "cells",
    "might",
    "work",
    "standard",
    "deviation",
    "idea",
    "really",
    "means",
    "number",
    "wise",
    "point",
    "really",
    "want",
    "put",
    "graph",
    "something",
    "display",
    "displaying",
    "remember",
    "looking",
    "data",
    "today",
    "going",
    "going",
    "happen",
    "tomorrow",
    "let",
    "take",
    "quick",
    "look",
    "going",
    "go",
    "ahead",
    "shift",
    "train",
    "predictions",
    "plotting",
    "train",
    "predict",
    "plot",
    "np",
    "empty",
    "like",
    "data",
    "set",
    "train",
    "predict",
    "plot",
    "set",
    "null",
    "values",
    "know",
    "kind",
    "kind",
    "weird",
    "thing",
    "creating",
    "um",
    "data",
    "groups",
    "like",
    "putting",
    "data",
    "going",
    "train",
    "predict",
    "plot",
    "uh",
    "going",
    "look",
    "back",
    "length",
    "plus",
    "look",
    "back",
    "going",
    "equal",
    "train",
    "uh",
    "train",
    "predict",
    "creating",
    "basically",
    "taking",
    "dumping",
    "train",
    "predict",
    "nice",
    "train",
    "predict",
    "plot",
    "shift",
    "test",
    "predictions",
    "plotting",
    "going",
    "continue",
    "oops",
    "looks",
    "like",
    "put",
    "double",
    "yeah",
    "put",
    "double",
    "um",
    "mean",
    "really",
    "need",
    "oh",
    "go",
    "um",
    "problem",
    "test",
    "predict",
    "training",
    "prediction",
    "shift",
    "test",
    "predict",
    "going",
    "look",
    "thing",
    "creating",
    "two",
    "data",
    "sets",
    "test",
    "predict",
    "plot",
    "length",
    "prediction",
    "setup",
    "going",
    "go",
    "plotting",
    "original",
    "data",
    "set",
    "predictions",
    "time",
    "axis",
    "always",
    "nice",
    "time",
    "set",
    "set",
    "time",
    "array",
    "time",
    "axes",
    "lap",
    "setting",
    "time",
    "variable",
    "bottom",
    "lot",
    "stuff",
    "going",
    "far",
    "setting",
    "figure",
    "let",
    "go",
    "ahead",
    "run",
    "break",
    "uh",
    "main",
    "plot",
    "two",
    "different",
    "plots",
    "going",
    "ispu",
    "going",
    "data",
    "ispu",
    "different",
    "settings",
    "look",
    "ax1",
    "main",
    "plot",
    "mean",
    "ax",
    "main",
    "plot",
    "ax1",
    "secondary",
    "plot",
    "figure",
    "plt",
    "going",
    "dump",
    "two",
    "graphs",
    "take",
    "go",
    "code",
    "piece",
    "piece",
    "uh",
    "going",
    "going",
    "um",
    "data",
    "set",
    "exponential",
    "reverse",
    "exponential",
    "looks",
    "correctly",
    "going",
    "label",
    "original",
    "data",
    "set",
    "going",
    "plot",
    "train",
    "predict",
    "plot",
    "created",
    "going",
    "make",
    "orange",
    "label",
    "train",
    "prediction",
    "test",
    "predicts",
    "plot",
    "going",
    "make",
    "red",
    "label",
    "test",
    "prediction",
    "forth",
    "set",
    "ticks",
    "actually",
    "put",
    "ticks",
    "time",
    "axes",
    "gets",
    "ticks",
    "little",
    "little",
    "marks",
    "going",
    "along",
    "axes",
    "kind",
    "thing",
    "let",
    "take",
    "look",
    "see",
    "graphs",
    "look",
    "like",
    "kind",
    "fun",
    "know",
    "show",
    "meeting",
    "final",
    "output",
    "say",
    "hey",
    "looking",
    "original",
    "data",
    "blue",
    "training",
    "prediction",
    "see",
    "trains",
    "pretty",
    "close",
    "data",
    "would",
    "also",
    "probably",
    "put",
    "like",
    "little",
    "little",
    "time",
    "stamp",
    "right",
    "right",
    "go",
    "train",
    "test",
    "prediction",
    "see",
    "test",
    "prediction",
    "data",
    "comes",
    "red",
    "also",
    "see",
    "original",
    "data",
    "set",
    "look",
    "like",
    "behind",
    "differs",
    "isolate",
    "right",
    "test",
    "prediction",
    "right",
    "uh",
    "know",
    "see",
    "original",
    "data",
    "set",
    "lot",
    "peaks",
    "missing",
    "lot",
    "lows",
    "missing",
    "far",
    "actual",
    "test",
    "prediction",
    "pretty",
    "pretty",
    "good",
    "pretty",
    "right",
    "get",
    "good",
    "idea",
    "expect",
    "ispu",
    "would",
    "probably",
    "publish",
    "say",
    "hey",
    "expect",
    "area",
    "range",
    "error",
    "kind",
    "thing",
    "put",
    "daily",
    "basis",
    "maybe",
    "predict",
    "cells",
    "going",
    "maybe",
    "weekly",
    "kind",
    "get",
    "nice",
    "kind",
    "flatten",
    "data",
    "coming",
    "say",
    "hey",
    "looking",
    "big",
    "takeaway",
    "working",
    "let",
    "go",
    "back",
    "oops",
    "oh",
    "far",
    "go",
    "model",
    "worked",
    "pieces",
    "tensorflows",
    "build",
    "sequential",
    "model",
    "putting",
    "two",
    "layers",
    "get",
    "pretty",
    "complicated",
    "get",
    "complicated",
    "never",
    "never",
    "verges",
    "usable",
    "model",
    "like",
    "30",
    "different",
    "layers",
    "good",
    "chance",
    "might",
    "crash",
    "kind",
    "thing",
    "go",
    "haywire",
    "kind",
    "learn",
    "go",
    "domain",
    "knowledge",
    "also",
    "starting",
    "understand",
    "different",
    "layers",
    "mean",
    "data",
    "analytics",
    "behind",
    "layers",
    "something",
    "data",
    "analysis",
    "professional",
    "come",
    "say",
    "want",
    "try",
    "tell",
    "data",
    "scientist",
    "lot",
    "basic",
    "setups",
    "common",
    "know",
    "many",
    "times",
    "uh",
    "working",
    "somebody",
    "like",
    "oh",
    "gosh",
    "tangent",
    "h",
    "instead",
    "relu",
    "activation",
    "worked",
    "two",
    "weeks",
    "figure",
    "well",
    "data",
    "science",
    "run",
    "model",
    "know",
    "five",
    "minutes",
    "instead",
    "spending",
    "two",
    "weeks",
    "math",
    "behind",
    "um",
    "one",
    "advantages",
    "data",
    "scientists",
    "programming",
    "side",
    "data",
    "analytics",
    "going",
    "look",
    "work",
    "math",
    "really",
    "core",
    "right",
    "tensorflow",
    "cross",
    "able",
    "build",
    "data",
    "model",
    "quickly",
    "efficiently",
    "course",
    "uh",
    "data",
    "science",
    "putting",
    "pretty",
    "graph",
    "shareholders",
    "want",
    "take",
    "reduce",
    "information",
    "something",
    "people",
    "look",
    "say",
    "oh",
    "going",
    "see",
    "stuff",
    "going",
    "far",
    "dates",
    "change",
    "ispu",
    "come",
    "end",
    "video",
    "tutorial",
    "python",
    "libraries",
    "data",
    "science",
    "hope",
    "useful",
    "interesting",
    "enjoyed",
    "watching",
    "video",
    "please",
    "feel",
    "free",
    "like",
    "share",
    "forget",
    "subscribe",
    "simply",
    "learn",
    "channel",
    "thank",
    "watching",
    "keep",
    "learning",
    "music",
    "hi",
    "like",
    "video",
    "subscribe",
    "simply",
    "learn",
    "youtube",
    "channel",
    "click",
    "watch",
    "similar",
    "videos",
    "turn",
    "get",
    "certified",
    "click"
  ],
  "keywords": [
    "python",
    "popular",
    "programming",
    "data",
    "science",
    "provides",
    "range",
    "libraries",
    "analysis",
    "model",
    "building",
    "full",
    "course",
    "learn",
    "top",
    "first",
    "get",
    "5",
    "deep",
    "dive",
    "learning",
    "numpy",
    "library",
    "used",
    "next",
    "using",
    "matplotlib",
    "look",
    "beautiful",
    "soup",
    "finally",
    "tensorflow",
    "let",
    "today",
    "comes",
    "never",
    "already",
    "every",
    "simply",
    "well",
    "bit",
    "able",
    "find",
    "talk",
    "also",
    "one",
    "high",
    "computations",
    "around",
    "000",
    "across",
    "basically",
    "run",
    "say",
    "objects",
    "value",
    "features",
    "models",
    "neural",
    "networks",
    "like",
    "better",
    "error",
    "percent",
    "machine",
    "way",
    "train",
    "multiple",
    "feature",
    "called",
    "new",
    "applications",
    "image",
    "text",
    "based",
    "time",
    "series",
    "thing",
    "open",
    "trying",
    "us",
    "example",
    "easily",
    "simple",
    "see",
    "something",
    "create",
    "basic",
    "need",
    "variables",
    "start",
    "session",
    "training",
    "predict",
    "pretty",
    "understand",
    "tutorial",
    "go",
    "ahead",
    "right",
    "interesting",
    "move",
    "common",
    "powerful",
    "number",
    "package",
    "name",
    "array",
    "processing",
    "arrays",
    "tools",
    "working",
    "talked",
    "functions",
    "easy",
    "work",
    "object",
    "coming",
    "back",
    "always",
    "wanted",
    "rid",
    "helps",
    "along",
    "pandas",
    "creating",
    "copy",
    "values",
    "another",
    "give",
    "shape",
    "maybe",
    "make",
    "two",
    "notebook",
    "uh",
    "import",
    "np",
    "type",
    "end",
    "saw",
    "change",
    "12",
    "numbers",
    "reshape",
    "3",
    "comma",
    "4",
    "function",
    "works",
    "level",
    "many",
    "useful",
    "linear",
    "operations",
    "read",
    "resize",
    "kind",
    "importing",
    "c",
    "h",
    "constant",
    "part",
    "drop",
    "n",
    "fill",
    "gives",
    "missing",
    "makes",
    "csv",
    "frame",
    "format",
    "specific",
    "date",
    "window",
    "regression",
    "important",
    "jupiter",
    "file",
    "excel",
    "things",
    "put",
    "random",
    "putting",
    "index",
    "column",
    "pd",
    "six",
    "created",
    "list",
    "zero",
    "five",
    "four",
    "rows",
    "columns",
    "mean",
    "standard",
    "deviation",
    "okay",
    "last",
    "fun",
    "plot",
    "plotting",
    "graphs",
    "plots",
    "api",
    "pi",
    "module",
    "output",
    "types",
    "means",
    "use",
    "little",
    "memory",
    "good",
    "set",
    "scatter",
    "imported",
    "show",
    "display",
    "take",
    "30",
    "want",
    "2",
    "minute",
    "plt",
    "nice",
    "sure",
    "histogram",
    "colors",
    "graph",
    "different",
    "network",
    "modules",
    "almost",
    "going",
    "versus",
    "basics",
    "size",
    "string",
    "cover",
    "axes",
    "much",
    "step",
    "main",
    "usually",
    "dimensions",
    "remember",
    "axis",
    "0",
    "1",
    "three",
    "seven",
    "looking",
    "matrix",
    "kinds",
    "know",
    "anaconda",
    "dot",
    "install",
    "setup",
    "computer",
    "environments",
    "separate",
    "jupyter",
    "bring",
    "lot",
    "environment",
    "happens",
    "version",
    "pip",
    "stuff",
    "really",
    "setups",
    "default",
    "couple",
    "options",
    "would",
    "match",
    "running",
    "upper",
    "pull",
    "print",
    "hello",
    "world",
    "command",
    "line",
    "graphics",
    "equals",
    "b",
    "variable",
    "quick",
    "uses",
    "less",
    "since",
    "best",
    "code",
    "commonly",
    "send",
    "could",
    "leave",
    "whether",
    "familiar",
    "went",
    "actually",
    "looks",
    "fact",
    "oh",
    "thousand",
    "fine",
    "nine",
    "starts",
    "integer",
    "throw",
    "whatever",
    "generate",
    "link",
    "oops",
    "wrong",
    "multiply",
    "together",
    "times",
    "item",
    "similar",
    "got",
    "um",
    "lower",
    "keep",
    "quickly",
    "x",
    "plus",
    "gon",
    "na",
    "add",
    "minus",
    "convert",
    "second",
    "hit",
    "ways",
    "takes",
    "eight",
    "depending",
    "else",
    "pulling",
    "paste",
    "cool",
    "notice",
    "reason",
    "people",
    "real",
    "huge",
    "10",
    "15",
    "math",
    "looked",
    "certainly",
    "hopefully",
    "starting",
    "think",
    "indexes",
    "earlier",
    "actual",
    "might",
    "automatically",
    "information",
    "original",
    "case",
    "float",
    "done",
    "instead",
    "correctly",
    "big",
    "gone",
    "average",
    "build",
    "page",
    "whole",
    "ones",
    "covered",
    "probably",
    "zeros",
    "particular",
    "project",
    "note",
    "creates",
    "section",
    "strings",
    "character",
    "brackets",
    "z",
    "come",
    "concatenate",
    "space",
    "20",
    "side",
    "play",
    "title",
    "split",
    "capital",
    "picture",
    "hey",
    "complicated",
    "splitting",
    "lines",
    "letters",
    "anything",
    "clean",
    "dash",
    "switch",
    "bad",
    "far",
    "setting",
    "sets",
    "min",
    "max",
    "median",
    "slicing",
    "matplot",
    "control",
    "call",
    "cell",
    "mark",
    "said",
    "6",
    "8",
    "guess",
    "single",
    "goes",
    "order",
    "f",
    "row",
    "equal",
    "even",
    "beginning",
    "ten",
    "ca",
    "left",
    "everything",
    "saying",
    "11",
    "100",
    "slice",
    "skip",
    "sum",
    "changes",
    "piece",
    "25",
    "came",
    "long",
    "says",
    "talking",
    "marker",
    "point",
    "bins",
    "term",
    "figure",
    "age",
    "dots",
    "added",
    "square",
    "coordinates",
    "grid",
    "hard",
    "try",
    "null",
    "tell",
    "none",
    "smaller",
    "spreadsheet",
    "labels",
    "uniform",
    "e",
    "label",
    "df",
    "check",
    "underscore",
    "r",
    "s1",
    "still",
    "32",
    "minimum",
    "double",
    "dates",
    "chart",
    "animal",
    "visits",
    "df2",
    "head",
    "df3",
    "stock",
    "packages",
    "location",
    "map",
    "cumulative",
    "settings",
    "shift",
    "html",
    "color",
    "canvas",
    "bar",
    "contour",
    "3d",
    "draw",
    "lab",
    "red",
    "blue",
    "green",
    "sometimes",
    "width",
    "limit",
    "layer",
    "quality",
    "squared",
    "alpha",
    "cross",
    "website",
    "fit",
    "url",
    "male",
    "gender",
    "chip",
    "test",
    "minutes",
    "classification",
    "wine",
    "prediction",
    "wines",
    "forest",
    "vector",
    "classifier",
    "scalar",
    "transform",
    "svm",
    "score",
    "layers",
    "tensor",
    "sequential",
    "tf",
    "iqr",
    "outliers"
  ]
}