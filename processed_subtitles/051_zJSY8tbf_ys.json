{
  "text": "in this massive course you will go from\nhaving no coding experience to having\nthe essential skills of a front-end\ndeveloper you will learn various\nfront-end Technologies and build a few\nprojects along the way Zack golwitzer\nteaches this course Zach is an\nexperienced software engineer and full\nstack developer hey everyone my name is\nZach and today in this 20 plus hour\ncourse I'm going to take you through the\ncore foundations of front-end web\ndevelopment now before I get into what\nthat actually entails I wanted to spend\na minute to thank free code camp for\nhaving me on the channel it's always a\nprivilege to share my content with such\na broad audience um reach so many\ndifferent people and I genuinely hope\nthat you find this course helpful if you\ndo be sure to give them a big thumbs up\nand a subscribe they're an awesome\nChannel contributed to a lot of my early\nlearnings as a web developer so without\nfurther Ado let's get into it the first\nthing that I wanted to start off with is\nsome background context because a lot of\nthe content within this course was\nobviously not filmed all at once it's\nquite long um it's something that I\nworked on over the course of a year um\npieced it together lesson by lesson and\na lot of the content is on my YouTube\nchannel um just separated out into\ndifferent videos I wanted to compile it\nall together um as it does follow a very\nlogical sequence from start to end end\nand it's perfect for the complete\nbeginner so this should take you from\nnever having written a single line of\ncode in your life to having at least a\nsolid grasp of what coding languages are\nparticularly JavaScript and what is web\ndevelopment particularly front-end web\ndevelopment you should be able to build\nbasic web pages and understand basic uh\nfundamentals of coding after this course\nis complete while this course is mainly\ngeared for the complete beginner some of\nthe later chapters of it where we get\ninto CSS flexbox and stuff like that\ncould actually be more intermediate\nlevel and be useful to anyone so be sure\nto look through the chapters below and\nyou can skip around to what interests\nyou so basically the structure here is\nthe three main tenants of front-end web\ndevelopment and those would be HTML CSS\nand JavaScript now often times you'll\nsee tutorials kind of start with HTM ML\nand CSS and then move into the more\ncomplicated more challenging JavaScript\nI've actually reversed that a little bit\nwe will be starting with JavaScript\nwhich is going to be the biggest section\num and I think it's useful to do that\nbecause number one if you're going to be\na frontend web developer you have to\nknow all three anyways and also I think\nthere's a lot of Concepts uh that you'll\npick up learning a general programming\nlanguage like JavaScript that will kind\nof help you catch on to the HTML and CSS\nin Bring It full picture for you my goal\nwith this course is to be the course\nthat I needed when I was starting out\nand what I'm really trying to do here is\nconnect all of these Concepts together\nHTML CSS and JavaScript are not um born\nin isolation they all work together to\nbuild a web page and I'll talk about\nthis analogy a little bit later but you\ncan think of these three core tenants of\nfront-end web development just like you\nwould building a house so when you build\na house you've got the you know the\nframework the structure which is the\nconcrete foundation all of the 2x4s that\ngo up and the roof that would be your\nHTML then you get in there you put some\nwiring in there you put some Plumbing\nall the other stuff that would be your\nJavaScript which makes it actually\nfunctional and then finally you put the\nfinish on you put you know the roof\ntiles you put paint on the outside the\ninside you just make it look good and\nthat will be the CSS if you walk away\nwith anything from this C\nI want you to understand most\nimportantly the relationships between\nthese three and have a pretty firm grasp\nof each of them in isolation as well the\nlast thing before I actually get started\nis to let you know that in the video\ndescription there's going to be a link\nand that link is going to lead you to a\npage that gives you all of the resources\nthat you need for this course we'll have\nsome time stamps some chapters um so you\ncan navigate around the course and then\nI will leave code Snippets solutions to\nany of the challenges and even some\nadditional resources in next steps for\ncertain topics if you want to take them\na little bit further so that's it\nwithout further Ado let's jump into\nfront-end web development\nfoundations I want to start here with a\nquick win I want you to see the power of\ncode and see what we can do with it very\nearly on so that you can kind of have\nthat confidence to know that you don't\nhave to go through You Know download a\nbunch of crazy things onto your computer\nand and write a bunch of crazy lines of\ncode in a terminal to actually do\nsomething cool since we're going to be\njumping into code here in the first\nlesson before you know anything about it\nyou're going to be confused and that is\nvery okay don't worry about that I\npromise we'll go back through everything\nthat we talked about in this video in\ncouple videos from now you will probably\nbe able to actually do\nwhat we're going to do in this video so\nif you're a fan of the Netflix series\nstranger things you might remember in\nthe first season the kids were talking\nto their Professor about this thing\ncalled the upside down and basically\nwhat the professor was talking about was\na lot of physics Concepts and stuff like\nthat but basically he was talking about\nthis tight RPP where there's a human on\nthe tight RPP and then a flea on the\ntight RPP and the flea can actually go\naround this tight RPP and see all\ndifferent sides of it but the human\ncannot\nand that's ultimately what we're going\nto be doing throughout this series we're\ngoing to be looking at something that\nyou've spent a lot of time with already\nand actually go to the other side of it\nand understand what's going on behind\nthe scenes and the first thing that\nwe're going to touch on is something\ncalled browser developer tools now you\nmight have seen uh something like this\nbefore this is called a web browser and\nyou probably use it every day of your\nlife but have you ever right-clicked and\nclicked inspect element and gone into\nthis uh tool on the right where there's\nall these different you know\napplications that you can go through to\nsee what's going on on this web page as\na fullstack web developer or more\nparticularly a front-end developer which\nis kind of a subset of fullstack\ndevelopment you're going to be using\nthese developer tools a ton and you're\ngoing to get very used to them and in\nthis video I actually want to walk you\nthrough the most common parts of these\ndeveloper tools and actually write some\ncode within them to give you an idea of\nwhat this is all about the first thing I\nwant you to do though is download the\nFirefox web browser so just type in\nFirefox download go to the download and\nget that onto your computer I want to be\nworking with the same tool across the\nboard although you have developer tools\nwithin any other browser whether that be\nEdge or Chrome or Firefox you have these\ndeveloper tools there but I want to make\nsure that you're looking at the same\nthing that I'm looking at and Firefox is\nactually a great web browser for uh\ndevelopers because it has some really\nAdvanced developer tools and in my\nopinion has probably some of the best\ndeveloper tools of any browser so get\nthat downloaded and then once you have\nit downloaded go to\ngoogle.com and take a look at this pane\non the right and if you don't remember I\njust right clicked anywhere on the page\nand I clicked inspect l\nnow the first thing we're going to talk\nabout here is the inspector now the\ninspector is probably the portion of\ndeveloper tools that you will become\nmost familiar with and the reason is it\nallows you to basically as you might\nexpect to inspect the page that you're\nlooking at or the web page so as I'm\nscrolling over these different lines of\nHTML code you'll see that different\nparts of the web page are actually\nhighlighted and I can click down and\ndrop this down and get more specific at\nwhat I'm selecting so I can basically\nsee what's going on in this web page and\nthen if I go to the bottom here these\nare all these stylings or the CSS styles\nthat go along with the HTML again don't\nworry about this we're going to get into\nthese you know languages later into the\ncourse but for now I just want to show\nyou the landscape and to really show you\nwhat's going on let me open up uh\nanother tab here go to\ngoogle.com/ IM Imes and let's just type\nin dog let's grab any dog here I like\nthis one here and we want to open this\nin a new tab so let's say copy link\nlocation now we come back here to the\npage and let's click this button up here\nthis is kind of our selector uh for\ndifferent elements of the page and let's\nclick on this image here you can see at\nthe top there well I can't show you but\nthere's an IMG or image HTML tag let's\nclick that and then let's go into this\nSource attribute and paste in that link\nthat we just uh grabbed of the dog photo\nonce we press enter you'll see that our\nweb page has actually updated and we can\nclose the developer tools and google.com\njust got a makeover now this is not\npermanent changes obviously this would\nnot be permanent changes but we can uh\nrightclick inspect element again let's\nclick on the image and let's make this a\nlittle bit uh smaller so let's put a\nwidth of 100 and now you can see that\nthe dog is a little bit uh more styled\non Google's homepage but as I said this\nis not permanent these developer tools\nare great because they allow you to make\nvery temporary changes to your web page\nso you might have the code that you're\nwriting you know on the back end and uh\nin your terminal or your code editor and\nthose are the live changes but you can\ncome here to just make little changes\nlike you saw how the picture was too big\nso I went in and and changed it to a\ndifferent dimension and I can kind of\ntest out these different changes and the\npower of this is just it allows you to\ndo things in real time but the second\nthat we click Refresh on the page you're\ngoing to see that it goes back to the\noriginal web page so you are the only\none seeing these changes within the\ninspect utility nobody else sees them\nand the changes are not permanent like I\nsaid we're going to be spending a ton of\ntime here so don't worry if none of this\nreally made sense but as you can see\nwe're clicking through we can click on\ndifferent elements so let's maybe click\nthis little icon down here and you'll\nsee how powerful this is once we get\ninto this stuff in the bottom right\nwhere we can see the Box model and we\ncan actually uh look at the document\nobject model or the Dom we're going to\nget into all of these things but the\nnext thing I want to show you is this\nthing called the console now the console\nis probably the second uh most popular\ntool within developer tools or at least\nin this series we're going to be using\nthe console quite a lot and what the\nconsole is it's actually called a repple\nand that stands for uh read evaluate\nprint and loop now you don't really need\nto know that what I want you to remember\nabout this console is two things number\none it allows you to write JavaScript\nand number two it allows you to actually\nmodify the document object model or the\nDom and we're going to talk about that a\nlittle bit later in the series but these\nare the two main things that the console\nallows us to do and to show you I'm\ngoing to just give you a short example\nof how we can use the console to make\nsome of the changes that we are also\nmaking here in the inspector so if you\nremember we kind of changed the image uh\nwithin the inspector we can also do that\nwithin the console so let's grab a\ndifferent dog picture here just for fun\ngrab this uh this one here like this and\ncopy the image location and all that's\ndoing is just copying the actual uh file\nthat we're looking at from here we can\ngo back to our our page and what we want\nto do is actually select the image tag\non this page so all we have to do is say\ndocument. query selector and then type\nin IMG and you can see that when I do\nthis this little element here that we\nwere editing earlier is highlighted and\ndown here it's actually printing out\nwhat we're going to get uh when we press\nenter so when we press enter we get this\nuh image but we actually have to save\nthat in a variable real quick so let's\nsay our image and again don't worry\nabout what's going on here we'll talk\nabout all of this later but we'll say\ndocument. query selector\nIMG we'll save that so now our image is\nactually representing this element on\nthe page and then we can say our image .\nset attribute and what I want to set is\nthe source and I want to set that equal\nto the link that we just copied from\nthat dog photo and when I press enter\nit's actually going to change this on\nthe page and I can also resize this just\nlike we did earlier so our image. set\nattribute um or actually no it's not set\nattribute it's style dot width equals\nlet's say\n100 I'm sorry it's actually not it is an\nattribute so let's set the attribute\nsorry I'm doing this in real time here\nuh so let's go with width and we'll go\nfor 100 here and you can see that it\ngoes down resizes accordingly so this is\njust a short example of how we can use\nthe console to actually edit uh the\ndocument object model or we can just\nthink of it as the web page for now not\nonly that but we can also write pure\nvanilla JavaScript within this repple or\nthis console and to show you that I've\nactually already showed you that because\nI saved our uh element in a variable a\nJavaScript variable but we could also\nwrite a function so we could write a\nfunction that says change image or\nsomething like that and it takes a\nURL and then it's going to actually\nchange the image so let's go ahead and\nmake that function and what that's going\nto do is going to say\ndocument. query selector IMG do set\nattribute and we're going to say source\nand then we're going to pass in the URL\nonce again don't worry about what I'm\ndoing here this is just examples and\nthen I'm going to say enter down and\nthat's our function so now I can execute\nthis function and I can paste in that\nURL and click enter and I guess it's\nalready there so it's not going to\nchange but if we went over to a\ndifferent dog\npicture and run this function\nyou'll see that it changes the image in\nthe browser so we can write JavaScript\nwe can modify the web page all that\nstuff within the console and we're\nactually going to be learning a lot of\nthe initial concepts of JavaScript here\nin the console because it is so easy to\nset up and get going all you have to do\nis as we showed you just rightclick\ninspect element click on the console and\nboom you're ready to write JavaScript so\nit's a great place to start so that we\nyou don't have to set up all this\nelaborate stuff just to write basic\nJavaScript there are a couple of other\nfeatures within developer tools that I\nwant to show you here but they're less\nimportant than the first two that we\nlooked at so the inspector and the\nconsole now just to remind you right\nclick inspect element and from here I\nwant to go up to the network tab so this\nnetwork tab is something that you will\nbe using uh a lot later on and if we\nrefresh the page you're going to see\nthat there's some activity here and what\nthe what's happening here in this\nnetwork tab is you're actually seeing\nall of the resources that are being\ntransferred to and from Over the network\nto this web page so Google's backend\nservers are actually Rec uh sending\nresources to the front end and you're\nactually seeing all these resources\ndisplayed in the browser so an example\nof that would be this Google image right\nhere and if we click on the images part\nyou can see that the December holidays\nuh in the response is actually the image\nthat we're looking at here and if you\nwanted to see other things about this\nsuch as the timings how long it took to\nload um you know you can look at the\nHTTP headers all that kind of stuff this\nwill be very useful for us as we get\ninto more of the backend development\nwhere we're talking about API request\nand you know HTTP and all that kind of\nstuff so we'll come back to this we'll\nspend some time here a lot later in the\nseries but I wanted to expose you to it\nuh initially so you can see that this is\nsomething that we will be using now\nanother thing we will be using if you\nclick this little arrow over here is\nstorage and storage is useful for a\ncouple of things storage is going to be\nuseful for tracking user behavior on a\nsite so uh not to to play the blame game\nhere but when we talk about Facebook and\nall the cookies that Facebook puts on uh\nyour web browser on your mobile phone\nand all that kind of stuff this is where\nthis is being stored so you can see\nGoogle is storing these cookies about us\nas the user and although these probably\nwon't mean a whole lot to us as people\nusing the site these have specific IDs\nand all sorts of identifiers that um\nallow Google to know things about the\nuser this is also great for\nauthentication this is how we're going\nto actually log in uh and register\npeople to our app and when we build our\nbackend dashboard for editing our blog\nfor our personal website we're going to\nneed authentication because we don't\nwant just anyone coming and editing our\nblog so this storage tab is what we're\ngoing to use to actually do that and\nwhile it's a very Advanced topic that\ncomes later down the road I also wanted\nto show it to you everything else that\nyou see here whether it be the inspector\nconsole debugger Network style editor\nall this kind of stuff um everything\nelse is not quite important enough for\nus to cover here so I'm just going to\nleave it there for now you probably\nwon't even use anything outside of what\nI talked about for at least several\nmonths or even years or maybe even ever\nas a web developer all right so I think\nI've covered mostly what these developer\ntools are about just to review\nrightclick anywhere on a web page\ninspect element and you'll get to these\ndeveloper tools now the last thing I\nwant to do in this video is actually\nshow you what coding is all about and\nhave you write your first JavaScript\nprogram well you probably will not\nunderstand the concepts behind the code\nwe're about to write I want to get you\nin the habit of actually writing code\nand you know get you uh feeling\ncomfortable in this console that we\ntalked about earlier so open up a web\nbrowser hopefully the Firefox browser\nyou just downloaded put this video on\nthe side open up the console so right\nclick inspect go to the console you can\neven type clear with uh two little\nparentheses to clear the console and we\nare ready to get started now the goal of\nthis program is going to be every time\nwe click on Google's web page so when I\nclick it I'm actually clicking right now\num I want the background of the page to\nactually change color and I want that\ncolor to be a random color we can do\nthis with JavaScript code and I'm going\nto walk you through line by line how\nwe're doing it and kind of explain um\nwhat each line does just to give you a\nfeeler again don't worry about how\neverything's working we're going to go\ninto the details of the JavaScript\nlanguage in future videos the first\nthing we have to do is save the body\nHTML tag in a variable so when I say\nbody HTML tag every web page that you're\ngoing to go to has this thing called the\nbody and this represents kind of the\ncontainer uh for the entire web page\naside from of course the topmost uh\ncontainer which is called HTML so we\nwant to select this body and this is\nwhat we want to actually change the\nbackground for so we can actually do\nthis manually and we can come down here\nand right now you see on the body the\nbackground is uh # FFF which is just the\nhex code for the color white now we can\ntype in green and you can see that the\nbackground actually changes in our web\nbrowser now what I want to do is do this\nin vanilla JavaScript and do it every\ntime we click the screen so in order to\ndo that the first thing that we have to\naccomplish is saving that body tag so\nlet's type clear to get a clean space\nand then let's type in a variable so\nhere's our JavaScript variable we want\nto set that equal to document. query\nselector and then we want to get the\nbody tag so when we press enter that's\ngoing to be the h HML body you can\nactually print that out and see that we\nhave successfully retrieved that and\nstored it in that variable from here we\nactually need to create a function now\nthis function we're going to save in a\nvariable and I know this is getting a\nlittle bit confusing at this point but\nbear with me and type along as I'm doing\nthis so we're going to go through this\nuh function and we're going to assign\nsomething called an array so so this\narray is going to contain various colors\nof our choice so you can put as many as\nyou want in here separated by commas I'm\njust going to put in a couple random\ncolors here that I've saved so 29 42\nthese are just hex codes so you can\nactually go uh hex codes something like\nthat um you can go to Google and you can\nsee all the different hex codes here\nthere's various tools that you can use\nfor this um but anyways we're going to\nsave these as a comma separate\narray and let's go add a few\nmore and then you can also uh a valid\nCSS value would be something like red\nblue or green so we can also type in red\nblue uh\ngreen\nyellow orange and maybe even purple all\nright so we have saved this colors array\nnow the next thing that we have to do is\nget a random index from this array and\nwhen I say index each of these values\nare at a certain index within this array\nand we'll talk more about this later\nagain but this one would be the zeroth\nindex this would be the first index the\nsecond third so on and so forth to get\nthis random index we have to actually\nuse a built-in JavaScript library called\nthe math library and we need a random\nrandom index between zero and let's see\nuh 1 2 3 4 5 6 7 8 uh there's eight\nitems within this array so we want a\nindex between zero and seven because uh\narrays are zero index they don't start\nat one so we'll get a random index here\nthat'll be equal to math.\nfloor and we're going to pass in\nmath.random please don't worry about\nwhat's going on here this is just an\nexample and this will give us our random\nindex and I actually pressed enter a\nlittle bit too early so we actually have\nto rewrite this function okay I've kind\nof returned to where I was before I\npressed enter and screwed this all up um\nbut basically we're getting a random\nnumber between zero and seven and the\nway that we do that is actually get the\nlength of the array by typing colors.\nlength so let's not make that mistake\nagain let's enter down a couple times\nand now we have to actually grab the\nrandom color and save that in a variable\nso we'll grab the random color um\nthat'll be equal to colors and then\nwe'll insert our random index that we\nhave\ngenerated then we are going to actually\nstyle the body so all we have to do is\ngrab this uh variable that we saved up\nhere called HTML\nbody and then we want to go to the uh\nstyle and then background color not clip\nbackground color and then we want to set\nthat equal to our random color here so\nthat's going to actually do what we\nshowed earlier and change the background\ncolor and then the last thing I want to\ndo is just print to the console a\nconfirmation that this worked so we'll\ndo something like this we'll say the\nuser\nclicked and set the color to and then\nwe'll concatenate this string in here\nand say a random color okay our function\nis done hopefully it works here and the\nway that we see if it works is by\nrunning it or executing it so we'll do\nrandom click function and it looks like\nthe user has clicked and changed the\ncolor now to finish this program off the\nlast thing we have to do is set an event\nlistener on the HTML body element now\nthis is a little bit Advanced but it's\nkind of a cool feature uh of you know\nJavaScript and all that kind of stuff so\nall we have to do is go to HTML body and\nsay onclick so it's saying when the user\nclicks I want to execute this random\nclick function all right so once I press\nenter now we have wired it up so that\nevery time we click it's going to change\nthe the color so I'm going to click\ncouple times\nsince it's random we might get a couple\nduplicates here but then we can even\nclose this and keep clicking and get all\nsorts of different results here so it's\nactually a pretty cool program that we\njust wrote and you can see you know even\nyou who have never written a line of\ncode before were able to kind of follow\nalong and type what I was typing and\nwrite your first little program in other\nwords you just did something that almost\neveryone in the world does not know how\nto do and will never know how to do your\nbrain is probably in utter confusion\nright now but don't worry in the next\ncouple videos we're going to actually be\ndeep diving into this JavaScript\nprogramming language and we're going to\nbe learning how I wrote this program\nwhat are all these different symbols\nthat we're typing into the console and\nall that kind of good stuff so don't\nworry if you're completely confused this\nvideo was mainly to give you an\nintroduction to the developer tools that\nyou can have within any browser we're\nusing Firefox um but it just gives you\nthat introduction and also just some\nexposure um in some comfort levels\nactually writing real JavaScript code\nand that's it for this first video be\nsure to hit the Subscribe button and\nalso that little bell so you're notified\nwhen new videos are posted to this\nseries and thanks for\nwatching today we're going to be talking\nabout what is Javascript and why do we\nuse it let's see what Wikipedia has to\nsay because we know that's going to be\nsimple JavaScript often abbreviated as\nJS is a programming language that\nconforms and I think I'm going to stop\nright there because this is not a useful\ndefinition especially for most people\nwatching this what you can remember\nJavaScript as is just a programming\nlanguage and more specifically it's a\nprogramming language that is made for\nthe web you have other languages like\nC++ python PHP Ruby um C all these\ndifferent languages and they all kind of\nhave their unique characteristics\nand javascript's unique characteristic\nis that unlike these other languages\nthat cannot run in a web browser\nJavaScript can't this has been the case\nfor quite some time but recently as you\ncan see the 1.0 version of web assembly\nhas been released in four different\nbrowsers which does let you write all of\nthese other programming languages to run\nwithin the browser but for now just\nthink of JavaScript as the programming\nlanguage of the web because it's the\neasy to write in the browser and even\nwith web assembly there's a lot of\ncomplicated steps to get all of that set\nup so you say JavaScript is the\nprogramming language of the web but is\nthat all it can do well the answer is no\nbut if you asked that question 20 years\nago you might have been laughed at since\nthat time though JavaScript has gained a\nlot of traction in development\ncommunities and was the most used\nlanguage in the stack Overflow developer\nsurvey of 2020 and to name a few things\nthat you can do with JavaScript let's\npull this up here you can create web\napplications so there's lots of\nfront-end Frameworks like angular here\nyou've also got react I think this is\nthe most popular one at the moment um\nyou can do backend uh pieces of your web\napplication or backend servers with\nthings like nestjs you can also create\ndesktop applications if I pull up my\nvisual studio code which is a code\neditor this is actually a desktop\napplication that was built using this\ntool called or framework called electron\nso you can build desktop applications\nfor various operating systems you can\nalso create mobile apps with react\nnative and Native script and then\nfinally you can do Ai and machine\nlearning data science projects with\ntensorflow.js and a couple other\nlibraries so to say that JavaScript is\nnot a powerful language is a bit of a\nmiss here because JavaScript has many\ndifferent applications the next question\nthat you might ask is can JavaScript get\nyou a job and the answer to that is a\nresounding yes but JavaScript alone is\nnot going to do it you have to actually\nlearn Frameworks such as the ones that\nI've gone through here angular react\nnestjs electron react native all of\nthese Frameworks um that are built\naround JavaScript are what you get hired\nfor and speaking of Frameworks what is a\nJavaScript framework or any framework\nfor that matter well the way that I\nthink about it is the framework is\nsomething on top of a programming\nlanguage so it's an abstraction on top\nof JavaScript that enables a developer\nto do something more efficiently in less\ntime Facebook is created largely with a\nframework a front-end framework called\nreact and this is a very popular\nframework we just went over it and\nFacebook could definitely have been\nbuilt without a framework it could be\nbuilt in just JavaScript uh HTML and C\nSS but the reason that it wasn't is\nbecause the developers there decided hey\nthis is getting really repetitive and we\nhave certain things that we do over and\nover and over again that we want to kind\nof automate and therefore react was born\nreact is something that the developers\nat Facebook kind of created in order to\nmake their jobs easier and more\nefficient we can use a little bit of a\nconstruction analogy to think about\nFrameworks if you're trying to build\nsome commercial real estate building are\nyou going to use a shovel and a ladder\nto create this whole entire building and\nyou know drive all the materials back\nand forth in pickup trucks the answer is\nno you're going to get huge trucks\nyou're going to get bulldozers you're\ngoing to get cranes you're going to get\nall sorts of uh big materials in order\nto build this huge building and it's the\nsame thing with building web apps or\nhonestly anything that you would build\nwith code if you're trying to do it with\njust a language anguage like JavaScript\nand you're you're not using some of the\npopular Frameworks that have been built\non top of that you're basically showing\nup to a construction site with a shovel\nand a pickup truck so you don't want to\ndo that in order to be employable you\nneed to understand how to use these\ndifferent Frameworks like angular or\nreact or even a framework like electron\nwhich is uh enables you to write desktop\napplications like Visual Studio code all\nright I think that's enough on\nFrameworks for now could do a whole\nvideo on on it let's go to the next\nquestion which is is Javascript the same\nas Java or at least similar and the\nanswer to that is no if you search\nenough on the internet you'll probably\nstumble upon uh the analogy of a car\nversus a carpet they both have car\nwithin the word but they're nothing\nalike and that's kind of the story with\nJavaScript and Java now Java was\nactually the inspiration for JavaScript\nway back in the day and JavaScript was\nmeant to be a companion to to Java so\nthey do have some similarity but when\nyou're writing each of the languages\nthey could not be more different the\nnext question is Javascript better than\npython or honestly insert any language\nthere the answer to that is always going\nto be it depends and the reason that I\nsay that is because all these different\nlanguages that you're choosing between\nhave different unique use cases and\nwhile they can all kind of do the same\nthing they all are programming languages\nso some of them are better for certain\ntypes of Industries than others so if\nyou're asking me to build uh an app like\nFacebook I'm probably going to go with\nJavaScript and use some JavaScript\nFrameworks because that's what those are\nmade for they're made for creating apps\nlike Facebook but if you wanted me to do\nsome machine learning and do you know\nbuild out the computer that sits in a\nTesla I'm probably not going to use\nJavaScript I'm probably going to use\nPython because py Pyon has a much uh\nmore mature ecosystem around this topic\nof machine learning AI data science all\nthat kind of stuff so when you're asking\nwhether you should go with JavaScript or\nanother language it really depends on\nwhat kind of industry you're getting in\nwhat you're trying to build all that\nkind of stuff if you're trying to build\na web app like Facebook JavaScript is\ngreat if you're trying to do some\nmachine learning python is great if\nyou're trying to create an extremely\nefficient uh we'll say banking\napplication or something like that a\nlanguage like C++ which is much faster\nin execution than a JavaScript would be\na good choice there's no right answer\nhere but there are um different\necosystems around each of these\nlanguages and you'll kind of notice as\nyou study them that certain types of\ndevelopers kind of gravitate towards\ndifferent languages another question\nthat you might have is HTML and CSS\nrequired to work with JavaScript and the\nanswer to that is yes and no it it kind\nof depends on where you're actually\nrunning that JavaScript now let's start\nwith the front end because this is a\nlittle bit easier to explain and then\nwe'll move on to the back end if you\ndon't know the difference between those\nI actually made a video on the\ndifference between front end and backend\ndevelopment anyways let's go over to my\nbrowser here on the left side of my\nscreen I have an HTML file that is\nactually open in notepad here on the\nright not doing any fancy editors here\njust want to get a few points across so\nlet's create a basic HTML document here\nI know I haven't actually gone through\nhow this all works yet but we will get\nthere I promise at some point\nhere in the body of the HTML I'm just\ngoing to create a button that says click\nme so when we refresh the page we should\nsee all of this reflected on our web\npage and you see that we have a very\nunstyled button which is just click me\nso this is a example of a web page this\nis no different than you know the\nhomepage of Facebook except for the fact\nthat it is not including both CSS and\nJavaScript so this is HTML alone now if\nwe add CSS to the picture we're actually\ngoing to be able to style this now we\ncan uh add some styles to this button so\nlet's do that right now we'll add a\nbackground color of\ntransparent and then I want to\nsay um the border is going to be one\npixel solid Navy then I want to add some\npadding to it so we'll say 20 PX we want\nthe font size to be 1.4 REM just\nsomewhere in that\nrange and let's go ahead and close that\nbracket off save it and refresh the page\nyou can see that we have a much better\nstyled button here we can also add some\nhover styles to it so let's go down here\nand say button hover and now I want the\nbackground color to be Navy and I want\nthe um let's see the Border uh to be\nnone I want the color of the text to be\nwhite so that it stands out on that Navy\nbackground save this refresh and you can\nsee that we have a styled button that uh\nchanges Styles when we hover over it so\nthis is the power of CSS but if I click\nthis button\nif I click this button it's not going to\ndo anything does nothing it's just a\nstatic element on the page and while it\nlooks like it's changing looks like it's\ndoing something that's only being done\nwith CSS in HTML now in many web\napplications you have various buttons\nand forms that users can click on in\norder to do things within the app so I'm\nsure you've been to uh a login page\nbefore where you enter your email and\nyour password and you press log in well\nthat is actually being triggered by\nJavaScript and while you do need the\nHTML and preferably CSS if you want a\nweb app that people are going to\nvisually like you need JavaScript to\nactually react to different um uh\ninteractions on the Page by the user if\nyou just have HTML and CSS your login\nform is going to not do anything and\nyou're going to have a useless app to\nkind of give you an idea what I mean\nobviously this is not real real istic\nbut um I added some JavaScript to this\nHTML document that also has CSS and you\ncan now see that every time I click on\nthis button it's going to add an element\nto the page so I'll click it and you can\nsee that I'm adding a P tag with the\ntext clicked the button every time I\nclick it and this is just to demonstrate\nhow once you add JavaScript to your HTML\nand CSS you can actually interact with\nthe page rather than just looking at a\nstatic website well in this case all I\ndid was add some stupid text to the page\nyou can see that how every time we click\nthe button we can fire an event and\nmaybe send in the login credentials to\nour backend server authenticate get the\nresponse back and then redirect that\nuser to a different page of our site\nwhen we're working with Java Script on\nthe front end or in the browser HTML and\nCSS are pretty much required for\nJavaScript to run now yes it could run\nwithout them but it would be completely\nuseless you'd just be running it in the\nconsole like we did in the previous\nlesson so it has to have something to\nactually interact with now on the back\nend since JavaScript is both a front-end\nand backend language uh we can actually\nrun JavaScript without any HTML in CSS\nand it can be extremely useful when\nwe're working with JavaScript in the\nbrowser HTML and CSS are required to\nmake this JavaScript do anything useful\nbecause ultimately the JavaScript in the\nbrowser is all about taking those HTML\nelements and modifying them and and\ninteracting with backend data all that\nkind of stuff so HTML and CSS are\nrequired in the front end on the back\nend if we're using the node.js runtime\nwhich is the way that we can run backend\nJavaScript we don't need HTML and CSS\nlet's write a simple node.js program to\ndemonstr that we don't need HTML and CSS\nin order to do that once again we have\nnot covered this in this series yet so\nbear with me um but we need to create a\nsample. JS file and then we'll open this\nup with Vim which is going to allow us\nto edit this so once we have this again\nhaven't covered this either uh but we\ncan make a uh do math function something\nlike that where we can enter in two\nvalues and get some you know result so\nlet's do a multiplication problem so\nwe'll just uh we'll say return x * Y and\nclose the braces and then in order to\nactually run this program we are going\nto actually store it in a result\nvariable so do math and we'll say five\nand 80 something like that big enough\nwhere we can't necessarily do it in our\nhead we'll do like 87 or something and\nso it's going to store that in the\nresult and then we want to print the\nresult to the console so from there we\ncan save and quit and then we can clear\nthe console and run this sample. JS\nprogram and you'll see that it did that\nM multiplication for us so obviously\nthis is very useless and you wouldn't\never do such a simple function but think\nabout back when we were working on the\nfront end and when we clicked that\nbutton so let's say that was a register\nform you add your email and your\npassword you click the button the\nJavaScript in the front end is going to\nsay okay the button was clicked I need\nto do something and so what it's going\nto do is grab all that data the email\nand password it's going to send it over\nto your backend server and your backend\nserver is going to run the nodejs you\nknow version of JavaScript and it's\ngoing to say okay I got an email and a\npassword let me look up this email in\nthe database uh hash the password and\ncompareed the hashed password to the one\nwithin the database and then I'm going\nto send some data back to the front end\nin order to tell it whether the user has\nsuccessfully authenticated so you can\nsee how these uh different uh sides of\nJavaScript work in different ways but\nthe point is no you don't need HTML and\nCSS on the back end but yes you need it\non the front end and the last question\nthat I'm going to cover is what is the\ndifference between something like es5 or\nES\nand JavaScript well there's actually an\norganization called uh ecma\nInternational not even sure if I said\nthat right but this is just a standards\norganization and in order to really\nvisualize this I want to go into a quick\nexample of something that's not related\nto JavaScript well not entirely and that\nis the iso 8601 date standard so we're\ngoing to go through this example and\nthen I think everything else is going to\nmake a little bit more sense so if I\nopen up the console like we did in the\nfirst lesson of this series and I run\nlet me save uh a date into a date\nvariable and then I want to print this\ndate as an ISO string and you can see\nthat I have this uniquely formatted date\nand it looks very standardized and\nthat's because it is and it's actually\nstandardized by this you know uh\norganization called ISO which is is I\nthink the international standards\norganization and there's actually\norganizations like this across the world\nfor various you know different\nstandardized things and the same thing\napplies for JavaScript and that is where\necma International and the ecmascript\nspecification or in other words you\nmight hear this as es5 or es6 all\ndifferent versions of this spec this is\nwhere these have originated and so\nJavaScript is actually an implement\nation of this specification and the\nreason this is so important is because\nof browser compatibility among other\nthings so if you go to this mdn uh web\ndocs article you can see a grid of all\nthe JavaScript apis that are supported\nwithin different browsers and the reason\nthat this uh ecma standards is so\nimportant is because the specification\njust needs to be updated and maintained\nin one place and then all of the\ndifferent browser developers you've got\ndifferent teams for each of these\ndifferent browsers they can look at that\nspecification and Implement their\nbrowser knowing that all of these\nspecifications are not going to just\nrandomly change when you know say\nsomeone uh working on the JavaScript\nlanguage decides that they want you know\na new API feature so just remember\nJavaScript is an implementation of the\nes6 or es5 or uh whatever version you're\nworking with it's an implementation of\nthat specification all right I think\nthat does it for this first rapid fire\nuh Q&A session that was not very rapid\nfire whatsoever but this last part of\nthe video is totally optional it's for\nthe people who really want to uh learn\nthe ins and outs of web development and\nwant to continue on with this series\nhere and what we're going to be talking\nabout in the last part of the video is\njust the question of what is a\nprogramming language so we talked about\nhow JavaScript is a programming language\nand it's kind of unique CU it can run on\nthe back end and the front end and a\nbrowser but we didn't really cover what\nis a programming language and I think\nthat this is a very important question\nto ask because if you're going to be\nwriting a lot of code you probably\nshould understand what's happening\nbehind the scenes at least at a high\nlevel so for this last part what we're\ngoing to call a programming language is\nis a group of tokens or symbols that\nwhen combined together in a very very\nspecific way uh can be translated by\nsomething called a compiler into machine\ncode or ones and zeros that all\ncomputers know how to run you can think\nabout it like this um let's let's take a\nspoken language um something that I\ndon't know which is pretty much every\nlanguage except for English um but we'll\ncall it I don't know something like\nPortuguese if you started speaking\nPortuguese to me my brain would not be\nable to comprehend what those words and\nsymbols and expressions actually mean\nsemantically although I can't understand\nPortuguese what I can understand is the\nbody language of someone speaking it so\nif you've got someone speaking\nPortuguese and they have a very you know\nsad demeanor to them I can understand\ngenerally that what they're saying is\nnot a happy thing and it's the same\nthing with computers well a computer\ncannot understand JavaScript it cannot\nunderstand python it cannot understand\nC++ it can't understand any of these\nlanguages but if we use something called\na compiler which is just another program\nmore code that actually reads other code\nand compiles it down into ones and zeros\nthat a computer can actually understand\nso it's taking a language and it's\ncompiling it down into one on and zeros\nor we can think of them as body language\nbecause all computers understand ones\nand zeros now this is where it gets\nreally complex and I'm not going to\nactually dive into it during this video\num once we start talking about compilers\nthen we have to get into the topic of\nOperating System Theory and which you\nknow what is our Target runtime that\nwe're dealing with like where are we\nactually executing these ones and zeros\nbecause each computer is going to have a\nslightly different CPU slightly\ndifferent uh ALU or arithmetic logical\nunit all of these things matter when\nwe're compiling code down and for each\ndifferent language and kind of each\ndifferent operating system you have to\nhave slightly different compilers and\nother tools that I'm not mentioning here\nin order to do that now if you're\nsomeone who really wants to understand\nthis in a great level of detail\nsomething that was very important to me\nthen I recommend reading this book right\nhere which is the elements of computing\nsystems and you'll see within this book\nyou know I'll see if I can show like a\nlittle page here but we actually get\ninto things like the arithmetic logical\nunit and how these ones and zeros are\nactually uh translated into commands for\nthe computer now I will say if you're\ngoing to read that book I will warn you\nright now it's going to take you months\nand it's very difficult to get through\num that said I came out of it learning\nin a ton and I was really happy with\nwhat I learned from that book but if\nyou're trying to get a job quickly\nyou're trying to become employable as\nfast as possible do not read that book\nit's going to take you too long it's\ngoing to distract you from actually\nwriting web applications now if you're\nsomeone who wants to understand this\nstuff but doesn't have time to build a\ncomputer from scratch which is what\nyou'll do in that book uh I recommend a\nbook called code by Charles petel and\nthis is going to give you all that\ninformation it's going to teach you the\nones and zeros compiling all that kind\nof stuff but it's going to do it a\nlittle bit quicker and you're not going\nto be quite as Hands-On with it and the\nfinal question of this video is where\ndoes JavaScript actually run and the\nanswer to that is very similar to the\nquestion that I asked earlier it um\nwhich is is HTML and CSS required to run\nJavaScript and I said well it depends\nwhether you're running it in the front\nend or the back end and what we're\nasking here is where does JavaScript run\nand this is where we get into the topic\nof something called a runtime and a\nruntime is basically uh an environment\nwhere code is run and it gets into those\ntopics that we just talked about with\ncompilers and how do we target different\nplatforms and compile down to ones and\nzeros and there's actually two run times\nfor JavaScript and that would be the\nnode.js runtime and then the browser\nruntime and and uh believe it or not the\nbrowser run time within Google Chrome\nuses something called the V8 engine and\nthis is going to actually do all of that\ncompilation that I was talking about and\nit's going to get into a bunch of other\nstuff some optimization um using the\njust in time compilation method all that\nkind of stuff it's going to basically\ntake your JavaScript code and convert it\nto something the computer can read and\nnode.js which is kind of the backend\nversion of JavaScript or the runtime\nthat we're going to use for our backend\nJavaScript servers and stuff like that\nthat also uses the V8 engine which is\nsimilar to Chrome so you can kind of\nguess that the creators of nodejs and\nthe creators of the V8 engine that runs\nin Chrome and node.js they kind of\nbecome good friends here over the last\ncouple years but this is not the only\nway that we can run JavaScript you know\nyou have node.js which which is probably\nwhich is the most uh popular way to run\nuh JavaScript on the back end and Google\nChrome which is one of the most popular\nbrowsers but in this course we're using\nFirefox as our web browser because I\nthink the developer tools are a little\nbit better there and with Firefox we're\nnot actually using the V8 engine in\norder to compile the JavaScript down\nwe're using something called spider\nmonkey which is the original engine for\nJavaScript that was built with within\nthe Netscape browser uh way back in the\nday and as a side note if you really\nwant an interesting podcast to listen to\nlook up browser Wars I think it's by the\npodcast called business Wars and it's a\nreally cool story about Netscape and how\nall this all these browsers gained\nmarket share really worth checking out\nin my opinion so in summary JavaScript\ncan be run on the back end or the front\nend and if it's run on the back end in\nnode.js it's being compiled down using\nthe V8 engine if it's running on the\nfront within Google Chrome it's also\nusing the V8 if it's running in Firefox\nit's using spider monkey if it's running\nin Safari it's using some other uh\ncompilation method and that I can't\nthink of off the top of my head but\nultimately these are all different run\ntimes and you do have to be aware of you\nknow where you're running your\nJavaScript code because it's going to\nrun differently there are things that\nyou cannot run within the node.js run\ntime if I tried to let's say open up uh\nthe nodejs runtime here all I have to do\nis Click uh type node and it'll bring me\ninto the the console if I tried to say\ndocument. query selector and then grab\nthe body tag of the HTML and I press\nenter it's going to say uncaught\nreference error document is not defined\nand that is because in the node.js\nruntime the document object model does\nnot exist like it does in the browser so\nyou have to be aware of these different\nrun times and understand that certain\ntypes of code can run um in the\ndifferent run times it's all JavaScript\nbut you kind of get what I'm saying here\nand at this point per usual I've uh a\nDron on way too long longer than I ever\nthought that I would but you have\nreached the end of the second lesson of\nmy full stack web developer roadmap\nseries and while we haven't written any\nJavaScript yet well I guess we did in\nthe first lesson but we haven't actually\nlearned JavaScript yet we do have a lot\nof context around it now which was the\npurpose of this video I really wanted to\nput this video together in order to give\nyou that context so that when we start\ngetting into the details you know\nvariables and data structures and\nfunctions and Loops all that kind of\nstuff you have a little bit of a\nbackground uh to understand it from if\nyou liked this video please give it a\nthumbs up and subscribe to the channel\nif you want to follow along with this\nseries and Series in the future and with\nthat hope you enjoyed the video and I'll\nsee you in the next\n[Music]\nlesson in this video we're going to be\ntalking about JavaScript variables and\ndata types and be sure to stick around\ntill the end of the video because I have\nsome challenges and some practice\nquestions that you can use to apply the\nskills that you learned in this video\nbefore we start talking about variables\nand data types I just want want to\nmention that as we go through this\nseries I'm not going to be covering\neverything that there is to know about\nthe JavaScript programming language\nthere are a lot of different features\nwithin JavaScript a lot of built-in uh\nfunctions and and you know syntax\nshortcuts and all sorts of things like\nthat that you can do but they're not\nabsolutely necessary for you to write\nJavaScript code for example let me\ncreate a basic array here so we'll say\nmy array and then we'll put some numbers\nin it and this is actually what this\nvideo is all about so don't worry if you\ndon't understand this quite yet but\nJavaScript has some built-in methods\nthat we can use on this array so we\ncould say my array. push and then we can\nadd a number to the end of this array so\nit just returned the length of our new\narray and if we print it out you can see\nthat there's the number 50 at the end of\nit now that is an example Le of a very\nuseful and commonly used built-in\nJavaScript uh prototype method that\nwe're going to be covering in this\nseries but there are other methods and\nthere are a lot of them that we will not\nso for example we can say my array.\nreverse now this one's pretty simple all\nit does is it reverses the order of the\nitems within that array as you can see\nbut this is not critical for you to\nlearn to write good JavaScript codee and\nbe a web developer so I'm going to\nselectively exclude things like that and\ntry to focus in on the most important\nthings of JavaScript likewise there are\nalso some very complex topics that we\ncan discuss around the internals of\nJavaScript and how it works behind the\nscenes and how prototypes work and why\nit's technically not a class-based\nlanguage and all these things are\nimportant for you to understand later\ndown the road but when trying to get you\nfrom from you know zero to deploying\nyour first full stack web application\nthey're not uh completely essential per\nse and believe it or not a lot of web\ndevelopers that work full-time jobs and\nare employed getting paid lots of money\ndon't fully understand the internals of\nJavaScript and that's why this series\ncalled you don't know JavaScript written\nby Kyle Simpson or his GitHub username\nis getify and he's written this\nwonderful series or book series on\nJavaScript and how it works and you can\ngo to each of the series on GitHub and\nactually read all about you know how\nJavaScript Works under the hood and he\nhas a tremendous understanding of this\nlanguage and explains it in great detail\nbut I would say that you would use this\nas a reference and personally I think\nit's geared towards someone who has\nwritten JavaScript for some amount of\ntime and it's something that I reference\nback to even now after writing jav\nJavaScript for about four plus years\nit's still a great resource to look back\non so just know as we go through this\nseries I'm not going to be covering\nabsolutely everything and if you have\nquestions be sure to just Google it or\ngo to this you don't know JavaScript\nseries and uh pick the section you want\nto learn about and kind of read a little\nbit more about it and finally if I can\nget through this long intro we'll\nfinally get to variables and data types\nbut I want to show you one thing real\nquick and that is the console.log\nstatement so when we're working within\nthe JavaScript console in our Firefox\nDev tools you can print a variable by\nusing the console.log statement and this\nis built into JavaScript you can use it\nuh on the front end in the JavaScript\nconsole or the back end in the nodejs\nconsole and we can print something like\nHello World we've done this already once\nin a previous video but this is how\nwe're printing we print different\nvariables so if I just say my first\nvariable and set it equal to 20 and then\nconsole.log that first\nvariable you'll see that it prints it to\nthe console that's going to be used\nheavily within this series so I want you\nto be familiar with it the next thing is\nthe concept of comments so if you put\ntwo forward slashes before your code and\nthen you write something this is\nobviously invalid JavaScript and you\npress enter it's not going to throw an\nerror on you while if you type it like\nthis it's going to say that there's a\nreference err because we haven't\ncommented it out there's another way to\nwrite comments let me clear the screen\nhere and you can put a forward slash and\nthen a star and then you can enter down\nwrite whatever comments you want and\nthen you just have to close it out by a\nstar and then a forward slash and when\nwe press enter it's not going to yell at\nus with any sort of error because we\nhave written a comment so I just just\nwant wanted to basically introduce those\nConcepts the console.log the single line\ncomment and the multi-line comment\nyou're going to see them a lot and\nthey're very useful for um you know\nmarking up your code and remembering\nthings about the code that you've\nwritten a big congrats if you're still\nwatching this video it means that you\nare dedicated to learning how to code\nand for that reason let's jump into\nvariables and data types in JavaScript\nso when I think of a variable in\nJavaScript I just think of a data\ncontainer and a good analogy for this is\nthe Amazon warehouse so they've got\nthese big vertical yellow uh stacks of\ncontainers with different products in\nthem and then on the bottom they have\nlittle robots that kind of Drive these\ncontainers around according to when the\nitem items in the containers are meant\nto be shipped and I like to think of\nthis as an analogy because JavaScript\nvariables are very similar in that\nAmazon warehouse\neach container is registered and all the\nrobots know exactly where to find the\ncontainer and the products that are\nwithin that container same thing goes\nfor JavaScript variables your computer\nknows exactly where to find all of these\nJavaScript variables that you declare\nand assign values to and it's able to\nretrieve them instantly so you can think\nof JavaScript variables as you know you\nwrite them and then they are are\nbasically like little Amazon products\nthat get put into these containers and\nput in the back of the warehouse but the\ncomputer at all times knows exactly\nwhere to go in that warehouse to find\nthe values of these variables in\ncomputer language we wouldn't really\ncall it a warehouse we would just call\nit memory but it's a good analogy to go\nby and I think it'll help you remember\nwhat variables are all about just like\nAmazon's containers can have various\ntypes of products stored within them so\ncan JavaScript variables and we can look\nat this here we're going to just go\nthrough a couple examples of variables\nthe first one will be we'll say your\nfirst variable and we'll say learning to\ncode gives you\nsuperpowers or something like that so\nthat would be one example of a variable\nand that is actually a string variable\nwe'll go into that a little bit later\nnow you can have your second variable\nwhich will be equal to number this time\nso equal to 10 and finally we'll say\nyour third variable and that'll be equal\nto an object and we'll say that this\nobject has a property that says\nsomething like hello world and this is\nalso a valid variable and to print these\nvariables once again we can use this\nconsole.log statement and we can print\nyour first variable something like that\nand you can see that it printed out to\nthe console so these are just examples\nof writing variables and now I want to\ngo into each component of these\nstatements so as you can see we have\nthis keyword called const we have a\nlittle space here then we have what\nseems to be our variable's name then we\nhave this equal sign then we have some\nsort of data in a semicolon at the end\nthese are all really critical parts to\nwriting uh JavaScript variables because\nwhen the compiler goes to basically\ninterpret um the code that you have\nwritten it reads it in a specific order\nand it looks at every single uh what we\ncall token within the code so for\nexample if I tried to define a new\nvariable and this time I'll just say\nanother hello world something like that\nthis would be valid but if we took out\njust even this single little quotation\nand pressed enter it's going to give us\na syntax error and you're going to get a\nlot of these syntax errors when you\nfirst start out because they basically\nsay Hey you haven't written this\nJavaScript program correctly you've\nmissed a a specific token within your\ncode now a lot of times you don't have\nto actually worry about these syntax\nerrors what I have pulled up here is\nVisual Studio code which is a code\neditor we're going to work with a little\nbit later in the series we're not there\nyet but what I want to show you is that\nif we tried to say new variable and then\nthen we\nDefine hello world with a semicolon at\nthe end it's going to look fine but if\nwe go over here and delete this little\nuh quotation you're going to see that\nVisual Studio code picks up on the fact\nthat there's an air in this syntax so a\nlot of the times when you're writing\ncode we're not going to see it you know\nhere in the console which is what we're\nusing right now but once we get into\ncode editors it's going to point these\nthings out and you don't really have to\nworry too much about getting everything\nright um as you're writing your code the\nnext thing we have to talk about with\nJavaScript variables is the concept of\nDeclaration and assignment to properly\nuse a variable you have to do that uh\nsequence of steps in order so you first\nhave to declare the variable then you\nhave to assign a value to it now if we\ntyped in you know something like new\nvariable and I'm going to actually\nrefresh the page so we clear out all of\nthe uh variables that we have already\nwritten so if I say\nnew variable something like that and we\nsay hello\nworld that is going to not only declare\nbut also assign this variable at the\nsame time so in many cases we're doing\nit simultaneously but we can also break\nit out into individual steps and we can\ndo that by using the let keyword and\nwe'll say uh let another variable equal\nwe'll say 20 this time um or actually no\nwe need to just put a semicolon at the\nother end of it and by doing that we\nhave actually declared the variable and\nnow we have to assign a value to it and\nwe don't have to put the let keyword at\nthe beginning we just assign a value and\nwe can print this to the console by\nsaying another\nvariable and you can see that it equals\n20 so in the second example I declared\nit then I assigned it and it's important\nto understand this concept you don't\nnecessarily have to you know think about\nthis while you're coding but I wanted to\npoint this out and it brings up another\ngood point about this const versus let\nversus VAR keywords at the beginning of\nyour variable Expressions let me go\nahead and write the same uh variable per\nse in three different ways so first we\ncan say variable 1 equal 10 and that's\nusing the con keyword then we can say\nlet variable we'll say two this time\nequals 10 that's valid and then we can\nsay VAR variable\nthree can't type here equals 10 and you\ncan see that all three of these ways of\nwriting a JavaScript variable are valid\nso you might ask the question well how\ndo we decide between const let and VAR\nyou need one of them at least to uh\ncreate a variable if if we just tried to\nsay um you know\nrandom random keyword and then\nvariable 4 equals 10 it's going to give\nus an error because random is not an\nassigned keyword such as conet or VAR\nlet's go ahead and start with VAR and\nthat is the only keyword that I would\nrecommend against using it's kind of a\nlegacy keyword within JavaScript um it's\nsomething that existed in the old\nversions in standards of JavaScript and\nnowadays we have the constant let\nkeywords which will pretty much cover\nevery situation that we need to now the\nreason VAR is not used anymore is\nbecause it can be uh redeclared so if we\nsay uh VAR my variable equals 10 and\nthen we say VAR my\nvariable\nequals I'm sorry I can't type today\nequals 20 it's going to actually update\nthe value of that variable without\nyelling at you at all but if you use a\nkey word like const so we'll say another\nvariable equals 10 and then we say const\nanother variable equals 20 it's going to\nsay that there's a syntax error and it's\ngoing to yell at us for redeclaring a\nconstant variable with the VAR keyword\nbeing able to redeclare a variable seems\ncon convenient and it actually is when\nwe're working within the console but\nwhen you're actually writing code it can\nbe kind of dangerous and you can have\nsome unwanted Side Effects by being able\nto redeclare a variable the next key\nword I want to talk about is let and let\nis something that you will use whenever\nyou expect to reassign a variable at\nsome point in your code so we just kind\nof talked about redeclaring a variable\nand that's very different from\nreassigning a variable so if you\nremember you first declare the variable\nwhich is basically saying um go back to\nour Amazon analogy where we're talking\nabout you know the containers and the\nrobots have to remember where those\ncontainers are in the warehouse well\nyour computer has to First register or\ndeclare these variables and then once\nit's declared it kind of allocates some\nmemory space um on the hard drive or\nsomething like that or in Ram to\nbasically remember where to retrieve\nthat variable from so that's the\nDeclaration step and then the assignment\nstep is where we take an actual value\nand we say okay put put this value in\nthis variable and so the computer will\ngo find that variable that was declared\ninto memory and assign your new value to\nthat you know little memory slot so we\nwill always use let when we expect to\nreassign a variable so let me show you\nwhat this uh basically looks like so\nlet's say that we have a counter and we\nstart that counter at zero and then we\nwant to actually increase the value of\nthat counter so we can say counter\nequals counter + 1 and we can also say\ncounter Plus+ that will do the same\nthing as the previous line that I just\nwrote so now we should have it equal to\nuh\ntwo and you can see that it is now equal\nto two and you can see that we are\nreassigning the value of this variable\nmultiple times now if we tried to uh Let\nme refresh the page real quick so that\nwe can use this variable\nagain and if we tried to say counter\nequals zero with the const keyword and\nthen we tried to say Plus+ it's going to\nsay that we have a type error because we\ncan't assign or reassign a value to a\nconstant variable so that's when you\nwant to use constants uh is basically\nwhen you expect the value to never\nchange so a good example of that is say\nwe have a program that calculates some\nsort of uh I don't know income statement\nyou want to put in a tax rate for this\nindividual so you might program in\nsomething like a tax rate and that will\nbe equal to 0.08 for 8% and you press\nenter and now this constant variable is\nnever going to change your tax rate's\nnever going to change and that is the\nbest use case for a constant variable so\njust remember you use let when you\nexpect the value to be reassigned to a\nvariable and you use const when you um\nexpect the variable to never change\nvalues now the the concept of a constant\nis pretty Universal in programming and\nit spans across many languages often\ntimes you'll see constants written\nsomething like this so we'll say tax\nrate equals 0\n8% and you can see that the variable has\nbeen written in all caps and separated\nby an\nunderscore now you'll see this very\noften but this is just a semantic\ndifference and it's functionally the\nsame as what we had written before and\nthat actually leads us into our next\ndiscussion which is about variable\nnaming conventions I'm going to paste a\ncouple different versions of variables\nin here and we'll press enter and you\ncan see that all of these are actually\nvalid in JavaScript they're all written\nslightly differently but they're\nfunctionally kind of the same so these\nare all saying your First variable but\nJavaScript recognizes them as different\nvariables that's why we're allowed to\ndeclare all of these at once and they\nall functionally operate the same but\nthere are a couple of these that are\nmore preferable in the JavaScript\nprogramming language than others so for\nexample the first variable that we have\nhere is written in something called\ncamel case and that is basically where\nthe first letter of your variable is\nlowercase and then each successive word\nor logical separated word within your\nvariable is going to be\ncapitalized so this is called camel case\nand then there's another version down\nhere which is called Pascal case um\nwhich is basically where it's the same\nthing as camel case except the first\nletter is capitalized the second\nvariable here where we have underscores\nin between lowercase letters is called\nsnake case then you have this one right\nhere that we just talked about which is\ncalled constant case and then finally\nyou just have a totally lowercase\nvariable and these are all different\nsemantic styles that you can put on a\nJavaScript variable or any programming\nlanguage variable and often times these\nindicate to other programmers something\nabout your code I'll talk about what\nthese mean in just a second but first\nwant to talk about what makes these\nvalid so you can really think of a\nvariable in JavaScript uh kind of like a\nTwitter hashtag so if you were to write\na Twitter hashtag and we'll say the full\nstack road map which is the one that we\nhave for this series this would be a\nvalid Twitter hashtag because it's all\none word now if I put a space here at\nthe end then Twitter is only going to\nrecognize that first part or full stack\nand then it's going to treat road map as\njust normal text and that's exactly how\nJavaScript works with variables if we\ntried to Define this as a variable so\nlet's say const full stack road map\nequals 10 it's going to give us a syntax\nerror because we have a space in between\nuh these two words to have a valid\nJavaScript variable you have to put\neverything in one word and use one of\nthese conventions up here at the top now\nthere's also a few things you can't do\nso we we cannot do something like this\nwhere we say full stack equals 10 you\ncan't have these little quotes here um\nthis is not going to work and then you\nalso cannot start a variable with a\nnumber so you can see that I put one at\nthe beginning of this variable it's\ngoing to throw an air but if I put full\nstack one at the end so now we have our\nnumber at the end of the variable that\nworks just fine so these are just some\nof the things to watch out for it's\nfairly intuitive and you'll get the hang\nof this uh really quickly and if you\ndon't get the hang of it the JavaScript\ndebugger is going to yell at you and\nit's basically going to give you a bunch\nof syntax errors all right so now that\nyou know how to validly declare and\nassign a variable um let's talk about\nsomething called a style guide and this\ngoes back to the concept that we see up\nhere where we have all these different\nsemantic ways to write a variable they\nall work but some of them are more\npreferable than others depend depending\non what language you're writing in and\nwhat you're trying to do with the\nindividual variable that you're\ndeclaring if you type in JavaScript\nstyle guide into Google you'll find a\ncouple different style guides by\ndifferent companies so this is Google's\nJavaScript style guide and here would be\nairbnb's JavaScript style guide so\nbasically what these are are\nspecifications for the employees of\nthese different companies that says here\nis how we want you to write your\nJavaScript for our company and what this\nmight entail is different naming\nconventions different um use cases of\ndifferent JavaScript features um all\nthat kind of stuff there's a plethora of\nthings that you'll find Within These\nstyle guides but the one I want to look\nat is naming conventions so we can find\nthis within uh each of the style guides\nkind of have to look for it here real\nquick so here is naming for Google so we\nhave the naming style guide for Google\nand Airbnb\nand you'll see that um each of them\nrecommend camel case so we can see uh\npackage names need to be lower camel\ncase uh class names are upper camel case\nlet's go down to um uh normal variables\nso non-constant field names should be\nlower camel case um local variables\nlower camel case you kind of get the\npoint they're all pointing towards this\nlower camel case um convention and if we\ngo to Airbnb you'll see here that it\nsays use camel case when naming objects\nfunctions and instances this is a bad\nexample this would be a good example so\nyou'll see Within These two different\ncompanies they're both recommending\ncamel case and that's actually a\nrecommendation across all of the\nJavaScript community so you'll see a lot\nof JavaScript code written in this camel\ncase as we saw here with our first\nvariable and this is what I would\nrecommend you as you're starting to\nlearn how to write JavaScript the last\nthing I want to talk about with naming\nconventions for variables is what we're\nactually naming them so you'll see here\nthat these are very descriptive um this\nis clearly indicating to the programmer\nthat you're practicing you're writing\nyour first variable but there's also\ngoing to be programs where you're going\nto have multiple variables within a\nsingle function or a class and you need\nto identify between these different\nvariables so tell me would this be an\nappropriate way to name a variable if we\njust said Q equals 20 well the answer is\nno because how are you going to ever\nknow what that Q is supposed to\nrepresent maybe it rep represents a\ncounter in a for Loop uh maybe it\nrepresents uh I don't know the the tax\nrate on something you know whatever it\nmeans you need to uh name your variable\naccordingly so if this 20 represents a\n20% tax rate or something like that we\nneed to call it tax rate for net income\nor something like that where you're\nclearly specifying what this value\nrepresents now there's also the the case\nwhere you can get two complex with this\nand write out a variable that's way too\nlong and in that case it gets hard to\nwrite that code because you're\nconstantly having to type this super\nlong variable and it takes you longer so\nyou want to find that middle ground\nwhere you're not being so vague where\nit's just saying the the variable's name\nis q and you're not so specific that you\ncan't you know write your variable\nwithin 10 seconds the next thing we have\nto talk about is the left side of the\nvariable expression and the right side\nof the variable expression so let's\nwrite our first\nvariable JavaScript gives you\nsuperpowers something like that we'll\npress enter and let's take a look at\nthis so on the left side when I say the\nleft side I'm talking about everything\nleft of this little equal sign in the\nmiddle and when I say the right side I'm\ntalking everything right of this little\nequal sign in the middle so it's very\nimportant to make a distinction between\nthe left and the right because uh\ndepending on what you're putting on each\nside you're going to get different\nbehaviors the left side of the equal\nsign is always going to include two\nthings it's going to include either\nconst or let and you could use VAR but I\ndon't recommend it and then it's going\nto have a single space right here and\nthen it's going to have your properly\nconstructed variable name and then I\nalways use another space uh this is just\ngood code formatting after that and then\nan equal sign and everything left at the\nequal sign is considered the Target or\nthat container that you're trying to put\nsome sort of data or value\ninto so this is where you're storing\nyour container now on the right side of\nthe equal sign you have the actual value\nthat you're assigning so the right side\ncould be one of many different things\nand this is where we get into the\nconcept of data types in this case we\nhave a string on the right side of our\nequal sign and Then followed by a\nsemicolon that's to indicate the end of\nthe uh variable expression so I want to\ntouch on real quick let's say that we\nhad uh one variable equals 20 and then\nconst second variable equals 30 this\nwould be a valid expression we wrote\nthem on the same line but we ended each\nstatement with this semicolon now if we\nwere to pull this up again all I did was\npress the up Arrow key to get my last\nstatement in the console that's a quick\nshort cut for you and if we were to take\nout this semicolon here and let's go\nahead and I don't know rename these\nvariables so that we can actually\nexperiment around with them so one and\nsecond and then press enter it's going\nto yell at us because we don't have a\nsemicolon at the end of our first\nvariable declaration and that's why that\nsemicolon is so important it kind of\nindicates the end of an expression just\nfor an example here's a bunch of code\nthat I wrote that is demonstrating that\nwe can have multiple different things on\nthe right side of our expression so you\ncan see in each line we have our basic\nvariable declarations but on the right\nside we have anything from a number to\nanother variable to a string to an\nobject to an immediately invoked\nfunction to a combination sorry it keeps\ndisappearing a combination or addition\nof variables and if we were to\nconsole.log\nvariable six here you're going to see\nhello my name is Zach and basically what\nthat's doing is it's taking the value\nderived from variable five which is\nreturning us this hello my name is and\nthen it's adding to variable three which\nis Zach so you can see how we have a lot\nof different options on the right side\nand this is always going to equal the\nvalue which could uh come from a\nfunction or a specific data type it can\ncome from a lot of things and that is\nassigned to the Target container on the\nleft side of the equal sign all right\nlet's go a little bit simpler here again\nI'm going to paste in three variables\nthe first one we have is a number the\nsecond is a string and the third is a\nBoolean so let's talk about these\ndifferent data types A little bit there\nare a couple different data types in\nJavaScript and the three most common are\nsitting on this screen right now these\nare kind of the prim primitive data\ntypes now you might notice that as we we\nhave declared and assigned these\nvariables we didn't really mention what\ndata type we are specifying here and in\na lot of languages such as C or C++ or\nJava they actually require you to\nspecify what type of data you are\nassigning to this variable um another\nexample of that would be typescript\nwhich is actually a suet of JavaScript\nthat we might talk about a little bit\nlater in the series but basically it's a\nit's a language that compiles down or\nit's actually transpiled down to\nJavaScript and it allows for type uh\nchecking or static typing so this is how\nyou would declare a variable within\ntypescript so we would say the variable\none equals a number and that is equal to\n10 so in this declaration and assignment\nwe are saying okay we have this variable\none this is a number and here's the\nvalue which is a number a assigned to it\nand this is what we would call a\nstatically typed language and when we\nsay statically typed all we mean by that\nis the fact that you are uh before you\nrun your code telling the compiler what\ntypes of data to expect now JavaScript\nis what we would call a dynamically\ntyped language and you can see this\nabove where this variable one the\ncompiler is going to have no clue what\ntype of variable this is until it\nactually eval valuates uh the assignment\nvalue that you've given it and figures\nout what type it is and you can actually\nsee the type of each variable so if we\ntyped in variable one using this buil-in\ntype of function um we can also say\nvariable two and variable three to see\nthe different types of the variables so\nyou might say well if JavaScript is\ndynamically typed and we don't really\nneed to specify the data type that we're\nassigning to the variable then why\nshould we even care well that is exactly\nthe reason you should care because if\nyou're writing code like this and you're\nassigning all sorts of different values\nto uh these variables it's really\nimportant that you always recognize what\ntypes of values you're assigning to your\nvariables so that you know you don't try\nto do something like this where you say\nvariable one plus variable\n2 and then it will say 10 some value so\nclearly something happened here you\ntried to add a number and a string\ntogether but JavaScript has magically\ncoerced the um first variable which is a\nnumber into a string and it has combined\nthose or C concatenated those strings\ntogether into a single string so without\nunderstanding the different uh data\ntypes that you're assigning to your\nvariables things like this are going to\nget very confusing and you might try to\nadd things together or combined uh\nvariables together and you don't know\nwhy they're combining in the way that\nthey are this right here is actually\ncalled implicit coercion of a variable\ntype we're not going to talk about this\nquite yet but basically what's happening\nis it's taking variable one which is of\ntype number and variable two which is of\ntype string and it's saying I want to\ncoers this number into a string and then\ncombine the values together so you can\nhave a variable such as number one will\nequal to will be equal to 10 as a string\nand then we can say number 2 equals 20\nas a number and if we said the type of\nnumber one it's going to give us a\nstring and the type of number two is\ngoing to be a number but what we can\nactually do is explicitly rather than\nimplicitly coers these two uh variables\ntogether so if we implicitly do it and\nsay number one plus number two it's\ngoing to give us 1020 because it is uh\nbasically coerced this number of 20 into\na string and concatenated together with\nthis uh first string which is 10 but if\nI wanted to add these two together as\nnumbers all I have to do is use the\nbuilt-in math function to uh or not math\nI'm sorry number function to put the\nnumber one which is a string into a\nnumber and then I can add that to number\ntwo which is already a number and now\nit's going to give me the correct answer\num which is 30 and that is the addition\nof those two numbers so you can see that\nif you're not paying attention to the\ntypes of data that you're working with\nyou might have unexpected results as we\nsaw right here when we added a string\nand a number together all right so now\nthat we've talked about the importance\nof data type let's go through each of\nthem and just get an overview of what\nthey look like so let's clear this out\nso the first one we're going to do is a\nstring value and there are actually two\nways that you can declare a string value\nyou can first say something like hello\nworld with these single quotations and\nthat would be valid you can also say\nanother string value and specify with\ndouble\nquotations hello world and that's going\nto work just the same there's no better\nyou know way to do this but I would say\njust like we use lower camel case for uh\nwriting JavaScript variables the\nconvention within the industry is\ngenerally going to converge on these\nsingle quotes and a lot of uh code\nlinters which actually um a code linter\nis something that will take a big style\nguide like the ones we looked at before\nand it'll actually write these rules\ninto code and then while you're typing\nyour code within a code editor like\nVisual Studio code it will take all\nthose rules and it will apply it to the\ncode that you're writing as you're\nwriting it so a lot of these code\nlinters are going to specify that they\nwant your code written with these single\nquotes rather than the double quotes um\nthat you can also write a string as\nmoving on to numbers these are a little\nbit easier all you have to say uh let's\nsay number value is our variable all you\nhave to do is specify a number and\nthere's nothing nothing to it here now\nthe one thing that you might mess up on\nat some point let's just make this a\ndifferent variable you might try to add\na comma in there to specify a larger\nnumber and when you press enter here\nit's going to give you a syntax error\nbecause this is not a valid way to write\na number you always have to just write\nthe number as one big number there's no\ncommas or anything that you can put in\nit booleans are are also pretty simple\nso if we want to write a Boolean uh\nBoolean value is going to either be\nequal to true or it's going to be equal\nto false so that's pretty simple there's\nonly two possible values that you can\nput in there um that's booleans now the\nnext one is arrays and this is where we\nstart to get into a little bit more\ncomplex data types so let me clear the\nscreen to work on this real quick and if\nwe wanted to say first array and then we\nwant to put in some numbers here we can\ndo that and you can see that an array is\nspecified by these opening and closing\nbrackets and then values here that are\nseparated by commas so you can think of\nan array and I know computer science uh\npeople would yell at me for saying this\nbut you can think of this array as just\nbasically a list and this list is uh\nseparated by commas and within this list\nyou can actually put any data type that\nyou want so we have numbers in this\nfirst array but we could also put in a\nvariety of data types so we can put in a\nnumber uh a string here we can put in an\nobject we're going to get to that in a\nsecond and we can also put in another\narray so we just put in another array\nwithin this array so these are all Val\nthings you can put in an array and you\ncan kind of mix them together you\nprobably won't do this very often where\nyou're mixing data types but just wanted\nto uh say that you can do that and\nthat's part of javascript's dynamically\ntyped language feature now the important\nthing to understand about arrays is that\nthey are indexed and when we say index\neach of these values uh separated by\ncommas are uh identified by a single\nindex and these indexes start at zero so\nthey don't start at one as you would\nthink so in this first array you might\nsay oh this value 10 is represented by\nthe index of one well no that's not the\ncase this is represented by the index of\nzero and then you just count up in order\nso uh 10 would be represented by zero 20\nwould be represented by 1 30 by 2 and 40\nby 3 and we can retrieve these values\nfrom the array um by saying first array\nso you type out your array variable and\nthen you use brackets just like you uh\ndid to write them but this time you pass\nin the index so if we wanted to grab\nthis uh value of 10 from the first array\nwe just type in the zeroth index and\npress enter and it's going to give us\nthat value from the array now we can\nalso retrieve uh these other values so\nsay from the second array let's say that\nwe wanted to uh get this last value\nwhich is actually another array we could\nsay\nconsole.log uh second array and then we\ncan use brackets and we'll count this is\nzero this is one this is two and then\nthis would be the third so we can say\nthree and that's going to give us this\narray we can even tack on another set of\nbrackets and we'll say we want the third\nor the actually the second value I'm\nsorry I'm misspeaking totally here we\nwant the fourth value from this array by\nusing the index of three and then let's\nsay we want the zeroth value or this\nvalue of one from the the array that\nwe've grabbed there and now you can see\nthat we can grab uh values from nested\narrays so that's the important thing to\nknow about arrays you have to pay\nattention to the indexes and then you\nuse bracket notation to retrieve those\nvalues from their respective\nindexes the next thing we'll talk about\nis objects and in JavaScript these are\nvery important important you might even\nhear the phrase that everything is an\nobject in JavaScript um and that that is\ntrue I don't want to get into the\nsubtleties of it today but it is very\nimportant nonetheless to learn how these\nobjects work in JavaScript because\nyou're going to be using them in every\nsingle program that you ever write to\nunderstand objects just think of them as\na complex container so going back to\nthat Amazon analogy where you have those\ncarts of different containers and then\nwithin the containers uh let's say that\nyou have other containers that have the\nAmazon products so let's say that you\nhave some sort of jewelry product um\nthat is sold on Amazon you might have a\nbig container and then you might have 30\ndifferent little containers within that\nbig container and then within each of\nthose uh 30 little containers you have\nuh different pieces of jewelry so that\nis kind of what a JavaScript object is\nall about you can make it infinitely\ncomplex infinitely nested um there's\njust so much you can do with it so let's\njump in and and see what a basic object\nlooks like so we'll say uh object\nvariable and then this is indicated by\nthese little curly braces um this is\nwhat you enclose an object in and then\nwithin an object you have to give it\nproperties so these properties are\nwritten just like a JavaScript variable\nand you can kind of think of them as\nvariables contained within the object so\nwe might say prop one and then you use a\nlittle colon to say okay that variable I\nwant to assign the following value to so\nwe'll say we want to assign uh the\nnumber 20 and then to create another\nproperty you have to put a comma after\nthe first property so it's sort of kind\nof like an array where you have um a\nbunch of different values separated by\ncommas but in this case you kind of have\nto think of it as a key value pair so\nthis is the key which would be the prop\none or the variable and then this is the\nvalue right here on the other side of\nthe colon if you want to say prop two\nand then we want to set that to 50 you\ncan do so like that and then you put\nyour semicolon at the end press enter\nand now we have the object variable with\nprop one and prop two now to access\nthese prop properties within the object\nwe use something called dot notation so\nunlike the array where we would say\nobject variable and then you put little\nbrackets and say uh zero or something\nlike that we can't do that that's not\ngoing to work but if we said object\nvariable do prop one like that then\nwe're going to get the value of 20 so we\naccess the properties using notation and\nthis can be infinitely nested so let's\nconstruct an object right here um we'll\nsay it's a nested object and it'll be\nequal to uh we'll say layer\none and then Layer Two and we're just\nmaking a bunch of objects nested within\neach other and then we'll say Target\nvalue will be 20 and so this target\nvalue is simply a property nested within\nuh several other properties within this\nobject so we'll press enter and then to\nget that value you just say nested\nobject. layer 1. layer 2. layer three\nand then Target value and you get the\nvalue of 20 so you can see how this dot\nnotation allows you to basically grab\nthe values of the properties off of uh\nthe object and notice how when I'm using\nthis dot\nnotation I'm specifying the property so\nwe could also do this um so we're going\nback to our object variable right up\nhere so we can also like I said you\ncan't use this zero here but what you\ncan do is you can use this bracket\nnotation you just have to define the\nproperty that you want to grab uh in\nthat bracket notation so that's another\nway to retrieve a value from an object\num I prefer the dot notation usually but\nin some cases you might need this\nbecause maybe you know the name of the\nproperty so you know the name of the\nproperty is property one so instead of\nexplicitly writing this uh property as a\nstring you might store it in another\nvariable and then pass um the property\nvalue variable into your object um I\ndon't want to get too far into that\nbecause that's going down a little bit\nof a rabbit hole but you may need both\nof these in certain situations the last\nthing we'll talk about is functions and\nwe're not really going to talk about\nthem much but I did want to say that\nfunctions are valid uh things that you\ncan assign to a variable and this goes\nback to the concept of everything is an\nobject in JavaScript so let me just show\nyou a brief example uh we'll say uh\nfunction\ncontainer variable just to be\ndescriptive here and then we can write a\nfunction like this um and this function\nwill maybe return the value of 20 so we\nare storing that function in this\nvariable and then we can actually uh\ncall this function like this and get the\nvalue of 20 that was returned from it\nbut we haven't learned how functions\nwork return values all that stuff so\ndon't worry about this I just wanted to\nshow you that this is a variable and we\ncan actually assign a function to that\nvariable so that's a valid uh thing to\nput on the right side of that equal side\nall right if you're still here huge\ncongrats you're probably one of very few\npeople that uh have the patience to sit\nthrough a video of mine uh that goes\ninto sometimes excruciating detail about\nthings but thank you for watching um I\njust want to go through a quick summary\nof what we learned here and then offer\nyou some exercises that you can um use\nto actually practice the concepts we\nlearned in this video so just to\nsummarize when using variables we first\nhave to declare it and then we have to\nass assign it a value and these are\noften done in the same line of code the\nsame\nstep um when we are using the different\nkeywords so let const and VAR uh we\nprobably never want to use VAR but when\nwe use let it's because we want to\nreassign the value of a variable and\nwhen we use const it's because we expect\nthe value of this variable to not change\nwithin the\nprogram next up the left side of the\nequal\nrepresents the variable that will hold\nthe value that you're assigning so it's\nkind of the target for that\ndata um the right side represents the\nactual value there are many ways to\nwrite a JavaScript variable but camel\ncase is the preferred way you'll see\nthis most often in the JavaScript\ncommunity and then there are five main\ntypes of variables you have strings\nnumbers booleans arrays and objects and\nthose functions that we just talked\nabout kind of fall into that object data\ntype so the final thing is that a\nsemicolon represents the end of a\nJavaScript expression you always put\nthat at the end except if you're using\nan object in which case you can enter\ndown on the multiple lines and you\nactually have to use commas to separate\nthose different object properties that's\nit for the summary now let's move on to\nthe challenges and practice for this\nvideo so like I said you're not going to\nbe able to just watch these videos and\nlearn how to code you have to actually\napply them and at the end of each video\nI want to at least give you a few\nchallenges to work through to apply your\nknowledge so I'm going to just put these\nchallenges on the screen here for a few\nseconds and you can go ahead and work\nthrough them in the console within the\nFirefox Dev tools that we talked about\nin the previous uh lesson and how to use\nthat and the answers are going to be on\nmy GitHub account and I'll link to those\nin the description so that you can see\nif you got them right all right on to\nthe challenges for today good luck and I\nwill see you in the next video\n[Music]\ntoday we're going to be talking about\nJavaScript operators and be sure to\nstick around till the end because I have\na handful of challenges for you to try\nout and solve on your own to practice\nthe skills that you learn in this video\nbefore we talk about JavaScript\noperators I want to do a little review\nof what we talked about in the previous\nvideo which was JavaScript variables and\nand data types because they're going to\nactually come into play during this\nvideo so if we rightclick anywhere in\nour Firefox web browser and click\ninspect element uh let me make this a\nlittle bit larger for us so that we can\nsee and then you go to the console\nyou're going to get into a repple or I\nthink that stands for read evaluate\nprint and loop which basically allows\nyou to execute JavaScript uh without\nsetting anything up so we're going to be\nusing this to to uh code in this lesson\nbut also to review what we did last time\nso last time we talked about JavaScript\nvariables and the way that you declare\nand assign a variable is one of three\nways we can say uh const and then a\nspace and then the variable name we're\njust going to call it a here and then\nyou give it some sort of value this is a\nvalid way to define a variable we can\nalso do it with let a equal 20 and we\ncould or not we can't use a actually\nbecause we already declared this up here\nwith the const so we need to do\nsomething like B and then we can also\nuse VAR but I don't recommend using this\nbecause it's kind of an outdated Legacy\nfeature of JavaScript but nevertheless\nit still works we can still declare and\nassign a variable that way now we also\ntalked about how you cannot reassign um\nsomething that you assigned as cons so\nif you wanted to say value will will not\nchange as the variable name and you set\nthat equal to 20 and then you try to say\nvalue will not change equals 30 it's\ngoing to give you an error because you\nassigned it with const but if you say\ninstead of const you say let and then\nvalue will change equals 20 then you can\ncome down here and say value will change\nequals 30 and it lets you do that so\nthat's the difference between const and\nlet again we don't use bar because it's\nkind of a Legacy uh keyword in\nJavaScript now we also talked about the\ndifferent data types that you can use so\nI'll just use the const keyword for our\nvariables here we'll say my string\nequals hello world so we can define a\nstring value which is represented by\nthese little uh quotations the single\nquotations and declare that as a\nvariable now we can also again I just\npressed the up arrow on my keyboard to\nget that last command that we typed and\nwe can kind of circle through all of the\ncommands that uh I have typed along the\nway um but anyways we can declare a\nstring so we'll say the second string uh\nthis is basically just a different\nvariable and we can use double quotes to\ndo the same thing so these are\nfunctionally equivalent some style\nguides would recommend that you use\nsingle quotes others would recommend\ndouble quotes it doesn't really matter\nyou just got to pick one so that's how\nyou define a string and if we wanted to\ndefine a number so\nmy number we just give it a number\nthat's pretty easy we also have booleans\nwhich are going to either be true or\nthey're going to be false so that's\npretty easy there's only two answers\nthat you can possibly have there and\nthen finally we have arrays and objects\nlet me clear some space here so we'll\nstart with my array and we can fill that\nwith pretty much anything so we can do\nsome numbers right here so that'll be\nour first array and then maybe we can\nsay our second array will be uh\nsomething like string one and string two\nand if you remember we can access the\nproperties from these arrays by using\nbracket notation so we just look for the\nindex um this would be the zeroeth index\nthe first index the second and the third\nso we use that here to identify\ndifferent objects or different uh values\nwithin that array and then finally we\nhave objects which are going to be a\nlittle bit more complex and they're kind\nof the the Cornerstone of JavaScript\num but we can say property one equals\nsome value and then so that's a string\nvalue and we can access that by just\nsaying using dot notation so we just say\nmy object Dot and then property one and\nthat's going to give us some value we\ncan also with objects use bracket\nnotation and if we pass in the string\nversion of that property it will still\ngive us some value so that's just a\nquick review view of how JavaScript\nvariables uh work and all the different\ndata types now we're going to take these\nConcepts and extend them a little bit\nfurther in talking about JavaScript\noperators so the first thing we got to\nbasically resolve is what is an operator\nwell an operator is something that\nexists in all coding languages not just\nJavaScript the one we're working in\nyou'll see these operators in anything\nfrom JavaScript python uh you know Java\nC C++ all the these different languages\nhave this concept of operators and\nthere's not a really great way to\nexplain it without just jumping in but\nbasically how I'd summarize it is an\noperator is something that allows you to\neither compare two values or more than\ntwo values um you can modify values\nmodify variables you know combine them\ntogether it just allows you some more\nflexibility and in kind of to test the\nuh different equalities of different\nvariables so I know a kind of a tough\nexplanation but let's just jump in\nyou'll see what I mean now there are\nfour main types of operators we're\nlooking at arithmetic assignment\ncomparison and logical operators you'll\nsee how these kind of fit in in just a\nsecond when we jump into them we'll\nstart with some of the easiest ones\nwhich would be arithmetic operators so\nthis would be plus uh minus or addition\nsubtraction multiplication and division\nso you can see how this works it's\npretty easy easy we can have a series of\nnumbers and and remember we're using a\nJavaScript console which basically reads\nthe value of a JavaScript expression and\nthen prints it back to us once we start\nwriting code in files later in the\nseries we're not going to be able to um\nlike let's just say some random variable\nhere equals 20 and you can see that all\nwe have to do is type in some random\nvariable and press enter and it's going\nto evaluate what the uh variable\nactually has stored in it we don't\nactually have to use this console.log\nstatement that we have been uh looking\nat in Prior videos you know you\ndefinitely can and it's going to print\n20 but you don't have to you can just\ntype it the variable so this is going to\nbe very useful when looking at these\noperators here so in any JavaScript\nconsole you can just take numbers like\nthis so we'll say 20 + 50 and that will\nequal 70 and it shows how it evaluates\nthose and this plus sign in the middle\nis considered a JavaScript operator so\nyou can already start to see what these\nuh operators actually represent you can\nalso do something like 50 minus 20 I'm\ntrying to space it out here for us but\nwe can say 50 - 20 = 30 and we can also\ndo some division so 20 / 2 is 10 um as\nwell as multiplication 2 * 2 is going to\nbe equal to 4 so these are all what we\ncall operators this plus operator the\nsubtraction operator Division and\nmultiplication and these are the most\nbasic arithmetic operators at this point\nyou might be wondering well what are we\ndoing here I've never seen this uh\nsyntax written before well this is not\nactually valid JavaScript code um it\nworks here in the console but if you\ntried to write it in a file it's not\ngoing to work out so well generally\nyou're going to be doing these\noperations and assigning the value to an\nactual variable so let's say that we\nwant to do a result variable and we want\nto say 20 + 50 / 2 or something like\nthat and we save that and now we print\nout the result and it's going to be 45\nbecause we did 20 + 50 is going to be 70\n/ 2 is 45 and then it stores it within\nthis uh result variable so what we call\nthe right side here and this is going\nback to the prior lesson we talked a\nlittle bit about the left side of the\nequal sign and the right side of the\nequal sign um so this equal sign right\nhere so we got left and then right\neverything on the right side is what\nwe're going to be calling a JavaScript\nexpression and so we're using all of\nthese different values along with the\noperators to create some sort of\nexpression that is going to be evaluated\nin full and then once it's evaluated\nit's going to take that that single\nvalue that it um came up with and assign\nit to the variable on the left side of\nthat equal sign there are actually a\ncouple more arithmetic operators as well\nso we can use something called a modulus\noperator so let's do 100 and then a\nlittle percent sign and then we'll say\n50 and that's going to equal zero and\nbasically what this is doing is doing a\ndivision problem so 100 / 50 and then\nit's figuring out what is the remainder\nof that division problem in this case 50\nis a factor of 100 it goes into 100 two\ntimes with no remainders so we're going\nto get zero but what if we said 100\nmodulus I don't know\n77 well we're going to get 23 because 77\ngoes into 100 one time with a remainder\nof 23 so this may not seem very useful\nto you right now but I promise you\nthere's going to be times when you're\ncoding where this modulus op operator\nwill come in handy moving on we also\nhave the exponent operator so if we\nwanted to say I don't know 8 to the\npower of two so generally you would see\nit written like this well this is not\nactually what the exponent operator\nlooks like we would have to put in two\nstars here and we'll say 8 to ^ of two\nis going to equal 64 8 * 8 is 64 and\nthat's how we use the exponentiation\noperator so that's two little stars you\ncan remember that where the\nmultiplication is going to be one star\nso 8 * 2 is 16 and then if we do 8\ndouble star 2 that's 8 to the power of\ntwo so that's the exponent operator and\nthen finally there's a couple operators\nthat are not going to kind of fit into\nthis um this schema that we've been\nlooking at so far it's going to be a\nlittle bit confusing but I'll try to\nexplain it best I can uh one of those is\ngoing to be the increment operator and\nthen the next will be the decrement\noperator so let's say that we have a\nvariable I'm going to intentionally mess\nthis one up so let's say that we have a\nstarting number and that will be equal\nto zero now notice what we used here we\nused the const um keyword here so we\ncannot reassign this value so the\noperator that we're trying to use here\nis called the increment operator and the\nway that it works is you take a iable or\nsome value and you put two plus signs at\nthe end and when we press enter you're\ngoing to see that it's invalid because\nwe have a const declaration or a value\nthat cannot change now if we wanted to\ndeclare this with the let operator so\nwe'll say start number this is a\ndifferent uh actually let's just clear\nthe whole screen so that we're we're\nvery clear on what we're doing here so\nwe'll say let starting number\nequal 0 now this value can be reassigned\nso all we have to do is say starting\nnumber Plus+ and when we press enter\nit's going to say zero but the actual\nvalue of the starting number variable is\nactually equal to one and we can see\nthat by printing it out once more and if\nwe do this increment operator again and\nthen we print out starting number again\nwe're going to get two so you can see\nhow it's adding one to the variable and\nthis is actually equivalent to saying\nstarting number equals starting number +\none so you take the previous value and\nyou add one so if we press enter now\nyou're going to see that the starting\nnumber is equal to three now we can also\ndo this with a decrement operator so we\ncan say starting number uh actually let\nme clear the screen real quick we'll say\nstarting number which is currently at\nthree and put two little minus signs at\nthe end and it's going to now equal two\nand we can do it again couple minuses\nand now it's equal to one so you might\nsay well why is this useful in many\ncases when you're going through Loops\nwhich we're going to talk about in a\nfuture video this is going to come in\nhandy so we just made it through the\narithmetic operators but now we can move\non to something called an assignment\noperator and believe it or not we've\nactually already covered this so when we\nwrite a variable my variable equals 20\nwe're actually using an an operator\nalready so this equal sign that we've\ntalked about so much is actually an\nassignment operator and believe it or\nnot this is the only assignment operator\nthat you're ever going to need although\nthis is all you'll ever need um pretty\nmuch forever I want to show you some of\nthe other assignment operators that we\ncan use just so that you know that\nthey're out there but once again these\nare not required and quite honestly I\ndon't even use these a lot of PR\nprogrammers that have been coding for 20\n30 years will never use these so they're\njust this is just for educational\npurposes honestly I would recommend just\nwriting your code out long form and I'm\ngoing to show you what I mean in just a\nsecond let's say that we had a value\nwe'll assign a variable equal to 10\nnotice how we use this let keyword so we\ncan reassign this variable and what if\nwe wanted to add five to it well this\nwould be pretty simple all we would have\nto do is say X equals and then we want\nto take the previous value of x which is\ncurrently equal to 10 and we add using\nthe addition operator five so that's the\nend of our expression press enter and\nnow X is equal to 15 well there's\nactually a shorter way to write this and\nall we have to do is use a different\nassignment operator so the way that we\nwould do this let's start over I'm going\nto refresh the page\nclear out all this nonsense up here and\nlet's say that we have our variable\nagain equal to 10 well we can also write\nit like this we'll say plus equal 5 and\nwhen I press enter this is actually\ngoing to reassign that variable of x\nfrom 10 to 15 so add five to it and you\ncan see that if we print out X it's now\nequal to 15 so you can see this little\noperator here the plus and then the\nequal sign this is an assignment\noperator uh which works the same as just\nour normal equal sign but instead it's\ngoing to take whatever's on the right\nside of it and it's going to add it to\nthe variable on the left side we also\nhave this for every different operation\nso we have the plus equals so let's\nlet's just start with X we'll use this\nas a example here again so we'll say\nplus equals 5 this should turn it into\n20 uh we also have uh X minus equal to 5\nwhich should bring it back down to 15 um\nwe have x / by equals and then we'll say\nthree so that should equal five and then\nfinally we have X multiply\nequals uh we'll say two and that's going\nto equal 10 so you can see how we have\nseveral different assignment operators\nthat are just shortcuts for us to do\nsomething that we could already do uh\nwriting it out L hand and what I want to\nsay about this like I said you don't\nneed these operators all you really need\nis this one right here and that's the\nequal sign and the reason being is sure\nyou could save a few characters of Code\nbut it's just a lot more clear if we\nwanted to take our value so let's get X\nthis is currently equal to 10 it's much\nmore clear in my opinion if we just say\nx = x +\n5 rather than saying X Plus or equal to\n5 and it just eliminates the need to\nmemorize a bunch of stuff um you really\njust don't need these and I would\nrecommend just not worrying about them\nso just to do a little recap we have our\narithmetic operators so let me just\nwrite this out in a comment so we have\nour arithmetic operators and this is\ngoing to be plus minus multiply divide\nmodulus um increment decrement and I\nbelieve that covers all of it um I\napologize if I missed one here but these\nare all arithmetic operators and they\nallow us to basically uh modify\ndifferent variables we also have\nassignment operators so\nassignment um\noperators and this is going to be the\nequal sign that we're very familiar with\num the plus equals minus equals multiply\nequals and divide equal equals these are\nall valid assignment operators but once\nagain I just recommend learning this one\nand being done with it now the next sort\nof operators that we can talk about are\ncomparison operators and in my opinion\nthese are the hardest to understand\nbecause um it introduces a concept that\nwe haven't really looked at a lot yet\nlet's go ahead and start with a basic\nexample so let's assign a result\nvariable and we'll assign it equal to\nthe following JavaScript expression\nand when we print out this result\nvariable it's going to equal true and if\nyou can just kind of logically think\nthrough this um not to be confused with\nlogical operators um but if we can just\nthink through this 20 is greater than 18\nthis is actually the greater than\noperator we're going to talk about all\nof these in a second but you can\nbasically figure this out intuitively\nthis is bigger than this so the result\nshould be true right well let's bring in\nsomething a little bit more complicated\nso um let's say something like I don't\nknow constant result 2 is going to be\nequal to\n20 equal sign three times and then 20 so\nin this case it's a little bit harder to\nunderstand what we're doing here we've\ngot an equal sign here and then we have\nthree more over here and this has\nprobably got you thinking like well\nwhat's going on here the answer to this\nexpression is going to be true and that\nis because 20 does equal 20 but we have\nto understand what's going on here on\nthe right side of the equal sign before\nwe can really think through this so to\nreally understand this we have to get\nsuper super clear when we're talking\nabout the left side of the equal sign\nand the right side of the equal sign we\ntalked about this in the last lesson but\nwe're going to go into this even deeper\nnow so if we look at this second\nexpression that we did this is the\nassignment operator and we have to be\nclear what we're looking at here so the\nleft side is going to be the variable\nthat we're assigning the right side over\nhere too so this right side as I talked\nabout a little bit earlier is going to\nevaluate to some value some single value\nand this is what we call a JavaScript\nexpression and in this case we're using\na special operator which is the triple\nequal sign and this triple equal sign\nbehaves in a certain way that basically\nsays well is the left side of it and the\nright side of it or maybe this a little\nbit confusing is 20 equal to 20 in both\nvalue and type so we talked about data\ntypes before and this is where that all\ncomes into play so as we go through\nthese make sure that you're being clear\nabout what you're looking at so the left\nside versus the right side these equal\nsigns over here are not doing the same\nthing as this equal sign right here\nthink of this as kind of like the master\nequal sign that kind of determines um\neverything about this whole JavaScript\nstatement and then any other equal sign\nthat you see are actually going to be\noperators that are doing some sort of\ncomparison when we're talking about\ncomparison operators in JavaScript there\nare four main comparison operators that\nhave to do with equality so we have the\ntriple equal sign we have the double\nequal sign we have the not equal sign\nwith two right there and then we have\nthe not equals with one so you can think\nof these two so this this one right here\nand this one right here these are kind\nof opposites well the double equals and\nthe single exclamation and single equals\nare kind of functionally opposite now\nwhat do they actually do well to find\nout we need to start playing around with\na few values so once again just like we\ncould do 20 plus plus 20 and get 40 we\ncan also evaluate uh different\nexpressions using these comparison\noperators so if we said 20 dou equals 20\nthat's going to evaluate to true we\ncould also say 20 triple equals 20 is\ngoing to evaluate to true so what's the\ndifference between the two well the\ndifference is it has to do with the data\ntype that we're working with so if you\nremember from the last lesson 20 written\nlike like this is going to be very\ndifferent from the 20 written like this\nin the first case we're looking at a\nnumber in the second case we're looking\nat a string and you can see that the\nexpression evaluates to true but we're\nnot quite there yet so let's say um we\nwant a number value and that'll be equal\nto that 20 and then we also want a\nstring value which is going to be equal\nto I don't know we'll say 50 but notice\nhow we have these single quotations we\ncould also have done uh double\nquotations here doesn't really matter\nit's just another way to write it and so\nnow we have a number value and a string\nvalue and if we use the type of operator\nthis is actually one that will um we've\nwe've already used a little bit but this\nis actually an operator itself um and\nthen we put the number value it's going\nto evaluate to number and we can also\nput in the string value and that'll be a\nstring so we know that this number\nvariable and the string variable are of\nnumber and string types but we can try\nto compare them um with each other using\nthe double equals and triple equals\nequality so I kind of messed up here I\nmeant to say that this string value\nshould be equal to 20 so let me just go\nahead and redo this once\nmore so we'll say string value\nequals uh 20\nand then we'll say number value equals\n20 and we're back to where we started\nhere and now what we can do is we can\nsay string value double equals number\nvalue and this is going to be equal and\nit's going to return a value of true\nwhich is a Boolean and the reason being\nis because while these are not the same\ndata type they are the same value so if\nwe were to convert um this string value\ninto a number so we can use the built-in\nJavaScript number function and pass in\nthe string value we're going to get 20\nwhich is a valid JavaScript number and\nwhat's happening here when we compare\nthe string value to the number value\nusing the double equal sign what it's\ndoing is it's first converting them to\nthe same data type so it might convert\nthe string value to a number and then\ncompare it to the number value so it's\ncomparing Apple to Apples and then it\nchecks whether the actual values are\ngoing to be equal to each other in this\ncase they're both equal to 20 so we have\na resultant uh expression uh of true now\nif we try to do this with triple equals\nso string value triple equals number\nvalue we're going to get false because\nthis time if we do triple equals it's\nnot going to convert the types to match\neach other so basically what it's saying\nis um well yeah the numbers the actual\nvalues are the same but the data types\nare not so therefore this expression\nevaluates to false so when we're looking\nat these different the double equals and\nthe triple equals the double equals does\nnot care about the data type while the\ntriple equals does care about the data\ntype and in almost all cases I would\nrecommend using triple equals because\nwe're just being a lot more explicit\nabout what we're writing in our code\nthat way well you can see that string\nvalue does uh resolve the true when we\ncompare it with the double equal sign\nthis is only because it is implicitly\ncoercing the data type of these uh\nvalues now if we did it with the triple\nequal sign it's obviously false because\nthey're different uh values but like I\nsaid we could do the number string value\nso this is explicitly not implicitly\nlike JavaScript does with the double\nequals but we are explicitly coercing\nthis string into a number and then we\ncan triple equals compare it to this\nnumber value and it's going to equal\ntrue like I mentioned these comparison\noperators are probably the most\ndifficult of all the operators to kind\nof grasp your head around um\nnevertheless hopefully this makes sense\nwhen we're talking about double equals\nversus Triple equals and then\nfurthermore if we were to set a a uh\nresult variable equal to the value of\nstring value triple uh or double equals\nnumber value which we know equals true\nright here then what's going to happen\neven though we have these equal signs on\nthe right side remember right side\nversus left side we have these this\nexpression this entire expression on the\nright side of this equal sign and\ntherefore what JavaScript is doing is\nit's saying okay first let me look at\nthis this expression\nlet me evaluate it and see what it uh\nresults in in this case it results in\ntrue so now I have a true value on the\nright and now I want to assign this into\nthe result variable so we press enter\nand we're going to get the value of true\nin that result variable now moving on to\nthe not equals or this little\nexclamation point with the double equals\nor the exclamation with a single equal\nsign these are basically the opposite of\nwhat we were doing with the double and\ntriple equal signs so let's try this\nonce more we'll say uh we want a number\nvalue of 20 and then we want a string\nvalue of also 20 but this is in string\nform so these are not going to be equal\nif we use the triple equal sign because\nthat cares about the value and the type\nbut it will be equal if we use the\ndouble equal sign now if if we just plop\nin this exclamation part uh point it's\ngoing to reverse everything so if we do\nthe exclamation point with a single\nequal sign and then we say string value\nthat's basically saying um is the number\nvalue not equal to the string value and\nin this case it is equal to the string\nvalue because we're using only one equal\nsign so the answer is false I know\nthat's a little bit tough to wrap your\nhead around but if you think about it\nlong enough it'll make sense now if we\nplop in this double equal sign and put\nin the string value uh this is going to\nevaluate to true because remember if we\nhave the uh in in the case of let's say\nhold on one second triple equals this is\ngoing to carry uh care about the value\nand the type so it's the same deal with\nthis uh exclamation point in the double\nequals so basically it's saying the\nnumber value is not equal to the string\nvalue because the types are not equal\nand it evaluates to true because no they\nare actually not equal to each other so\njust try to reverse it in your head\ndon't think about this too much um when\nthe time comes you'll figure out how to\nuse these but I just wanted to uh\nbriefly go over them and show you that\nthey're just the exact opposite of\ndouble and triple equals now with these\nequality operators it gets a little bit\ntricky when dealing with different data\ntypes so thus far we've only compared\nnumbers in strings\nso if we said 20 triple equals 20 that\nequals true CU it's uh a number in\ncomparison to a number and they're of\nthe same type we can also say 20 double\nequals 20 because you know that's kind\nof saying the same thing it doesn't care\nabout the types the types are the same\ndoesn't care but the values are the same\nso it equals true we can also compare\nstrings so we can say hello world and\nthat is going to be triple equal equal\nto hello world and that's going to equal\ntrue and we're also able to remove one\nof those equal signs and it's going to\ngive us the same answer because the\nvalues are the same the types are the\nsame it doesn't really matter there so\nwe can use it with numbers and strings\nwe can also do booleans so if we said\ntrue triple equals true that's going to\ngive us true now I know that's a little\nbit of a uh a tongue twister there but\nwe're saying that the value of true\nwhich is a Boolean is equal to another\nvalue of true so that expression\nevaluates to a truthy value and it\nprints true so I've said true about 50\ntimes in the last 30 seconds uh so let\nme stop doing that but basically we can\ndo strings numbers and booleans with our\nequality operators now if we try to do\narrays and objects the game changes a\nlittle bit so let's say that we have an\nobject which is equal to uh we'll say\nproperty one some value and then we'll\nwe'll go down um actually I needed to\nhold shift down while I did that so let\nme redo this real quick so starting over\nwe have my object and this will be equal\nto property one which is equal to some\nstring value and then we have we'll say\nProperty 2 is going to be equal to a\nnumber and there's our object we also\nwill Define my array and this will be\nequal to 1 2 3 4 five just a bunch of\nnumbers in there and all we have to say\nto prove this out is um is my array\nequal to my array and the value here is\ngoing to be equal to true because you're\ncomparing the same variable with itself\nbut let's say that we created another\narray and this time it's going to equal\nthe same exact thing so I'm going to put\nin the same exact numbers it's going to\nlook exactly the same we'll press enter\nand now if we compare my array triple\nequals another array it's going to equal\nfalse so in the first case when we were\ncomparing the same variable with itself\nit equals true which makes sense but why\ndoes this not equal each other why does\nmy array not equal another array they\nlook exactly the same and this is one of\nthe quirky parts of JavaScript you'll\nhear that a lot but um I'm not going to\nget into why these are not equal and\nactually how to compare two different\narrays um using JavaScript it's just too\ncomplex for what we're talking about but\njust know you cannot compare everything\nand the same goes for objects so if we\nsaid my object triple equals my object\nit's going to equal true because we're\ncomparing the same exact object but if\nwe say another object and we make that\nequal to the same exact one so property\none is going to be equal to some\nvalue and then Property 2 is going to be\nequal to 20 so this is the same exact\nobject that we had up top but this time\nif we say my object triple equals\nanother object we're going to get false\nand you might be wondering well maybe\nthis is just because we're using triple\nequals well that's not the case even if\nwe used my array double equals another\narray it's still going to be false and\nif we use my object double equals\nanother object it will also be false so\nyou cannot compare with these comparison\noperators arrays and objects you\nactually have to use a different library\nin a lot of cases and a lot of\ndevelopers turn to a library called Low\nDash so if we uh just type in low Dash\ninto the browser you'll you'll see that\nthis is a utility library that basically\nprovides you with a bunch of different\nmethods that you can use to um do a\nbunch of common JavaScript operations\nthat would otherwise take you um writing\na good amount of code to do but again\nthis is way too complex for what we're\ndoing right now so we're going to go\nback and keep going with our discussion\non operators so we've gotten through the\nbulk of these comparison operators the\nhardest ones are done now we just have\nto talk about numeric comparison\noperators and these will not come as a\nsurprise we have the greater than less\nthan greater or equal to and less than\nor equal to operators and you can see\nhow these work uh 40 is greater than 20\nthat's true uh 20 is less than 40 that's\nalso true uh 20 is less than or equal to\n20 that is true and 20 is greater than\nor equal to 20 so you can see how these\nuh all work they're pretty common and if\nyou took any sort of math class you'll\nknow exactly how these work now the\nfinal operator that falls into this\ncomparison operator category is\nsomething called the Turner operator and\nthat is spelled let's see if I can spell\nthis tary is what I'm saying here and\nthis tary operator is going to look like\nthis so we'll say we want to assign a\nresult variable and we want to assign\nthis equal to the following expression\nso we'll say 20 triple equals 20 we'll\nadd a little question mark and then\nwe'll say values\nmatch and then we'll add a colon and\nwe'll say values do not match and we'll\npress enter and you're going to see that\nthe result is values match so this is a\nvery confusing expression to look at at\nfirst glance but you will get used to\nthis this is something that a lot of\nprogrammers really like some of them do\nnot like it because they think it makes\nit more complicated um we haven't talked\nabout conditionals yet but I think\nyou'll be able to understand this a\nlittle bit so I'm going to try to\nexplain it real quick this this\nexpression right up here is going to be\nfunctionally equivalent to the following\nexpression so we'll say if 20 triple\nequals 20 then we'll say um return or\nactually no we need to redo this real\nquick we need to First say uh or declare\na variable so we'll say result\nvariable and we don't need to assign a\nvalue to it yet we'll say if 20 triple\nequals\n20 then we want to assign the result\nvariable equal to values\nmatch and if it does not equal so else\nthen our result variable is going to be\nequal to values do not\nmatch if I can spell right okay so when\nwe press enter it's going to say that it\nevaluated to values match just like it\nshowed up here when we printed the\nresult and if we type out result\nvariable you can see that it has been\nassigned that value so I wanted to show\nyou this even though we haven't gone\nthrough the if else statements yet the\nconditionals um but I think it's fairly\nintuitive to understand we're saying if\nthis expression evaluates to true then I\nwant to assign the variable to what is\nafter this question mark or the values\nmatch otherwise this lse statement which\nis going to be substituted by the colon\nwe want to assign it to values do not\nmatch so in other words this question\nmark is kind of like the If part and\nthis colon is kind of like the else part\nand this uh everything left of the\nquestion mark is going to be the\nexpression that we're actually evalu Val\nating and remember this is where it gets\nyou know this is where it's kind of\nconfusing when you're first starting out\nremember we have to keep the right side\nand the left side separate in our head\nso we're looking at this equal sign what\nis to the left side of the equal sign\nwell that is the result variable now\nwhat is to the right side of the equal\nsign well that's everything here so this\nentire expression is to the right side\nand when JavaScript looks at this the\nfirst thing it does is it says what's on\nthe right side and furthermore how do I\nevaluate that and then it uses the rules\nof this tary operator to say Okay first\nI want to look at 20 triple equals 20\nwhat does that resolve to well that\nresolves to true for reasons we\ndiscussed before and therefore I'm going\nto grab this value right here now if it\nwould have resolve to false then it\nwould say okay I don't want this I\nactually want uh this one over here and\nthen once it's found that answer it's\ndone all of this work on the right side\nit's come to a single answer which is\nthe value values match now it's going to\nassign that to the result variable so\nyou have to be very clear with yourself\nwhether we're talking about the right\nside which could be a really long\nexpression or the left side which is the\ntarget variable that we're assigning the\nend result of the right side too we are\nfinally done with the comparison\noperators I know I know this took up\nmost of the video but they are very\nimportant and you'll see why once you\nstart writing a good amount of code\nyou're going to use them a ton now the\nlast type of operator is what we call a\nlogical operator and there's only three\nof them we have this uh double and sign\nwe have the double pipe sign and then we\nhave the exclamation point now the\nexclamation point is kind of the same as\nwhat we talked about earlier with this\nexclamation equals but it's kind of\ngoing to function in a different way\nusing it as a logical operator we'll\nstart with the and sign and basically\nall this is doing is it's saying it's\nlooking at two different Expressions so\n20 uh triple equals 20 and then we put\nthe and sign and now we can say 10\ntriple equal 10 and what it's saying is\nokay on the left side we have this\nexpression 20 equal 20 which evaluates\nto true and then in order for the entire\nexpression so this whole line in order\nfor this to be true both sides have to\nevaluate to true so in this case we get\ntrue but we could also say 12 and in\nthis case it's going to be false because\nthe left side does equal true but in\norder for the entire expression to be\ntrue both sides have to be true and you\ncan see on the right side these are not\nequal so we get false now the or\noperator if we did the same example and\nwe said 20 triple equals 20 and then we\nuse these double pipes this is basically\nor and now we can say 10 triple equal 12\nand it's going to be equal to true\nbecause it's saying this entire\nexpression is going to be equal to true\nif one of them is equal to true so in\nthis case the right side is equal to\ntrue and that's all that we need for\nthis to work now if we tried to write\nthis expression where both sides are\nactually false I actually did that wrong\nthere we only have one pipe in there\nsomehow so we'll say 20 triple equals 18\ndouble pipes 10 triple equal 12 both of\nthese are false so it's going to be\nfalse now the last one that we're\ntalking about let me clear the screen is\ngoing to be this exclamation point what\nthe exclamation point does is basically\nreverses everything so generally we're\ngoing to be talking about a Boolean\nvalue here so let's say that we have an\nexpression 20 triple equals 20 which\nevaluates to True obviously if we put\nsome parentheses around this and then we\num it still equals true but then we put\nan exclamation at the beginning of that\nstatement it's going to reverse it to\nfalse now it's important to note you\ncannot put this at the end that's not\nvalid you have to put it at the\nbeginning of the expression that you're\ntrying to reverse so that's what this\nexclamation point does and it's a little\nbit different than if we were to put in\nthe exclamation and then the double\nequals um that does a slightly different\nthing as we talked about earlier in the\nvideo so just to show you a practical\nexample of how you might use one of\nthese um this is a pretty common one\nthat I've seen and I've used in my apps\nand we're not going to actually be\nwriting the code that I would write in\nan app but you'll kind of get the point\nso we'll have a variable that says is\nuser logged in and we'll set set it\nequal to true so our user is going to be\nlogged in in this case and then we'll\nsay does user have permission and we'll\nsay false on this one so it might be a\npretty common thing to see if we were to\nuh check both of these values to see\nwhether a user can per perform a\nspecific action in an app so what we\nmight do is we'll say uh\ncan user perform action and then we'll\nset that equal to is user logged in and\ndoes user have permissions and in this\ncase if we were to evaluate this\nexpression on the right side of this\nequal sign the is user logged in is true\nbut this does have permissions is false\nso this entire expression resolves to\nfalse so in many cases in our apps we\nmight say if can user perform action or\nsomething like that\nthen we can allow them to perform the\naction so that's just a a practical\nexample of how we might use these\noperators in the real world and the\nfinal part of this video before we get\nto the actual challenges that I'm going\nto give you is going to be combining all\nof these operators and this is where\nthis concept of an expression really\ncomes to life so I'm going to put a\npretty complex expression on the screen\nhere and we're going to walk through how\nit's actually working so we'll we'll say\nresult is equal to uh exclamation point\nwe're going to put a couple parentheses\nhere say 40 / 20 equal\n2 and then we'll say um something like I\ndon't know\ntrue and then we'll say on the right\nside um try to make this clear we'll say\nor and then put another\nparentheses yes triple equals to no and\nwhen we evaluate this expression we're\ngoing to see that it equals false and\nthis is actually a totally valid uh\nJavaScript expression um although it's\nvery confusing to look at but if we take\nthis step by step I think you'll\nunderstand how we can combine all these\noperators into a single expression now I\nwill say before we get into this you\ngenerally are not going to be writing\nsomething this complex if you're writing\nsomething that is this confusing to read\nthen you could probably break it out\ninto several steps and it's not a sign\nof intelligence when you're trying to\nmake it so complicated like this you\nwant to be as simple as possible and in\nmany cases um you're going to write more\nlines of code in order to improve\nreadability of your code so this code is\nnot readable this is something that\nwould take someone you know let's say\nthat I wrote this code and you had to go\nreview this code this is going to take\nyou you know at least 20 seconds to\nfigure out what it's doing and in most\ncases we want it so that you can see\nexactly what the code is doing as\nquickly as possible nevertheless we can\nsee how this evaluates by breaking it\nout into different steps so I'm going to\njust store each step in a variable and\nthen we'll kind of work our way down to\nunderstanding the entire expression so\nif you remember we're talking about the\nright side versus the left side left\nside is the variable right side is the\nentire expression so we'll say say step\none is going to be equal to 40 / 20 so\nwe'll start right here so we'll save\nthat into step one now the second step\nis we take this 40 divid 20 and use the\nequality operator to set it equal to two\nso we'll say step two is going to be\nequal to Step One triple equals\n2 okay so now we can check this at this\npoint we're equal to True right now and\nthe next step is going to be taking this\nentire expression that we just uh\nbasically combined into step two and\nadding the and sign in putting it to\ntrue so we're going to say um conep 3 is\ngoing to be equal to step two double and\ntrue and you can guess that since we\nalready had it equal to True right here\nand we're doing another Boolean value of\ntrue it's going to equal true so step\nthree is actually equal to True uh true\nright now and you can see that right\nthere and now we want to combine this\nwith um we've we've already done this\nentire expression here so maybe we want\nto store this in a variable so we'll say\nstep uh four is going to\nbe equal\nto yes triple equals no which is\nobviously going to be equal to false so\nthat's our step four so now let's take\nour step three right here and our step\nfour and combine them uh using these\ndouble pipes so we'll say step five is\nequal to step\nthree double pipes and then step four\nand that's going to be equal to let's\nsee step five will be equal to True um\nI'll try to scroll up here so we've got\nthis one um this one and this entire\nexpression evaluated so the last thing\nwe need to do is just add the um\nexclamation point at the beginning of\neverything so all we have to do here is\nsay step six is going to be equal to not\nstep five and step six is going to be\nequal to false and if you see up here\nthe total result of this entire\nexpression is equal to false and all of\nthese steps that we did down here were\njust intermediary steps that we used to\nkind of break out this entire expression\nand figure out what the result variable\nwas ultimately assigned so in summary an\nexpression on the right side of the\nequal sign can be as complex as you want\nit to be and furthermore it can actually\nbe something other than just what we've\nbeen working with um we've been just\nlooking at um simple variables like\nnumbers and strings and and simple\ncomparisons but it can be much more\ncomplex than that so you could even have\nsomething like um a function evaluating\nto a specific variable so let me refresh\nthe page and we're going to set result\nequal to a function and we haven't\ncovered this yet but I just want to\ndemonstrate uh what I'm talking about\nhere so in this case we're going to\nreturn 20 from that function so what's\nhappening here is again we have to be\nvery conscious of the left side versus\nthe right side\nso left side is going to be our result\nvariable and right side is going to be\nthe entire function so in this case\nwe're going to set um the right side\nequal to a function that returns a value\nof 20 now this is not going to\nautomatically execute itself so we have\nto actually assign it uh using something\ncalled an immediately invoked function\nand once we do that we're going to\nactually be assigning that result\nvariable on the left equal to whatever\nthis function here returns when it is\nevaluated so you can see result is equal\nto 20 and this kind of just demonstrates\nfor us how the right side of this equal\nsign can be infinitely complex and\nthat's why it's so important to\nunderstand um that an expression should\nbe solved in individual steps um that's\nhow the computer looks at it and that's\nhow I would recommend you to look at it\nwhen you're trying to figure out what\nit's going to set that variable too like\nI've been saying throughout this series\num watching these videos alone is not\ngoing to do it for you you have to\nactually practice so let's jump into\nsome of the challenges that I've put\ntogether for this video and I'll say\nthat as we get better writing code and\nas we go through all of the different\nparts of JavaScript not just variables\nand operators but you know getting into\nloops and functions and conditionals and\nbasically learning how to write code\nwe're going to actually migrate\nourselves over to to a site called Cod\nWars so if you go over to uh Cod\nwars.com\nyou're going to see this is actually a\npretty popular site for um doing\ndifferent programming challenges and I'm\ngoing to actually start uh recommending\nchallenges from this code War site and\nwe can basically work on them out of a\nprofile and you know you can kind of go\nthrough these challenges on your own but\nfor now we're not quite Advanced enough\nto look at that so I'm going to pop up a\nfew challenges on your screen and then\nI'm going to walk you through each of\nthem and how we go about solving them if\nyou want to get the most out of this I\nrecommend trying them on your own first\nso pause the video for each of them and\ntry to work them out in your browser uh\nor your Dev tools console and then once\nyou figured them out I'll kind of go\nthrough the explanation\nall right so this is the first Challenge\nand the question is why does this code\nnot work and the answer is going to be\nbecause of the const Declaration that\nwe've made at the beginning of the code\nso if you remember when using const we\ncannot reassign the value so if we say\nconst number variable equals 0 and then\nwe try to reassign this using our\nincrement operator it's going to give us\nan error but if we go ahead and change\nthat to let instead of const so we'll\nsay let number variable equals 0 and\nthen we can say number variable Plus+\nnumber variable Plus+ and then do it one\nmore time we're going to be able to do\nthat and then in the end if we\nconsole.log number variable it's going\nto be equal to three so that is the\nsolution to the first challenge\nchallenge number two so this one is a\nlittle bit of a trick question\num these are not going to evaluate to\nthe same value I think you could\nprobably figure that out but the second\npart of this question is um which one of\nthese would you recommend and the answer\nto that I would not recommend either of\nthese blocks of code so the first one is\ngoing to um evaluate to false because\nwe're using triple equals while the\nsecond one is going to to evaluate to\ntrue because we're using double equals\nbut in this case the problem is not\neither block of code but\num the variables that we're declaring so\nthis is how I would actually write this\nrather than what we have in both of\nthose code blocks so we'll say first\nnumber equals 20 we'll say the second\nnumber also equals 20 and instead of the\nstring value let's just put a number in\nthere that's the real solution right\nthere and then from there we can Define\nour result which will be equal to first\nnumber triple equals second number\nbecause we always want to favor triple\nequals be explicit when we can and then\nnow we can print out the result which is\ngoing to be equal to true so that's how\nI'd solv that problem Challenge number\nthree now this one is a little bit\ntrickier but I think you probably could\nhave gotten it um let's refresh this\nscreen real quick now the question was\nwhat does the expression five resolve to\nand the answer to that is that\nexpression five let me make sure I get\nthis right here um answer five is going\nto resolve to false and this is why it's\ngoing to do that so let's just walk\nthrough each of the lines and see what\nthey resolve to so we have 100 we'll\nsave them in the variables so expression\none is 100 modulus 50 and if you\nremember 100 / 50 is 2 with no remainder\nso we should get zero for this so\nexpression one should be equal to zero\nyou'll see that here now Expression 2 is\ngoing to be equal to 100 / 50 which does\nequal 2 so that's going to be equal to\ntwo then Expression\n3 is going to be equal to expression 1\nis less than expression two and in this\ncase expression one was equal to zero\nand expression two should be equal to\ntwo so this expression right here should\nevaluate to true so let's press enter on\nthat and see if that's the case uh we'll\nsay expression three that equals true as\nwe would expect now expression\n4 is going to be equal to expression\nthree we'll use the and symbol and we'll\nsay 300 +\n5 triple equals 305 so this is a little\nbit trickier how we look at this uh\nusing the order of operations is we\nfirst first look at this one on the\nright so we'll say 300 + 5 what does\nthat equal that equals 305 and then so\nwe replace this basically and say\n305 is triple equals to 305 which is\ngoing to be equal to true so then we\nkind of replace that with true and\nexpression three is true so they're both\ntrue and expression four is going to\nresult in true\nand then finally we're just going to\nreverse that so expression five is going\nto be equal to exclamation or the\nreverse of expression 4 so it's going to\nflip this true to false and we're going\nto get false for the final answer and if\nyou tried to solve um the problem of\ngetting this all into one expression I'm\ngoing to just copy this into the console\nand just show you how it works um you\ncan see that we get false just like we\njust looked at um and this is how I\nwould combine this into a single\nexpression remember the order of\noperations matters here moving on to\nchallenge number four this is actually a\nslight review of last time combined with\nthe concepts that we learned in this\nvideo so we're looking at an object and\nan array so we'll say my object I'm just\ngoing to write this out so that we have\nsomething to work with and we'll say\nprop one is equal to First value and\nthen prop two\nis going to be equal to 20 so there's\nyour object and then your array so my\narray here is going to be equal to 40 50\nand 2 now if you remember from last time\nthe way that we access properties from\nobjects and arrays is with DOT notation\nand um bracket notation respectively so\nif we wanted to say get this value of 20\nfrom this object all we would do is say\nmy\nobject. prop 2\nyou could also use the bracket notation\nwith a string um for prop two and that\nwill give you 20 but I would always\nprefer using this dot notation so we'll\njust get it this way all right so if we\nwanted to get one of the values from\nthis array say we wanted to get 50 we\nwould have to use bracket notation and\nif you remember an array is zero indexed\nso this is index zero this is index one\nand this is index 2 so if we wanted to\nget that 50 all we would say is my array\nbracket and then we want to pass in one\nbecause the index of 50 is one and that\nwill give us that value of 50 so knowing\nthat this problem gets pretty easy so we\nsaid in our result array we are saying\nmy object. propop 2 triple equals and\nthen my\narray 0 divided by my array 2 so if you\nremember um we'll we'll store that in\nthe result variable for now but you just\nhave to basically break this down into\ndifferent pieces so what is my object.\nprop 2 well that equals 20 Now what is\nmy array uh with the index of zero well\nthat is going to be equal to 40 and then\nwhat is my array with the index of two\nthat is going to be equal to two if I\ncan type it out here so we got two so\nbasically what this expression is is\nit's saying 20 triple\nequals 40 / 2 and if we look at that\nexpression that's going to resolve to\ntrue because 40 divid 2 is 20 set equal\nto 20 is true so if you break it down\ninto pieces it's not all that hard now\nchallenge 5 is a little bit of a tough\none but we're going to use the same\nmethod that we did in challenge 4 to\nsolve it so I'm going to actually just\ncopy in the object and the array or\nbasically just all the code here so\nwe'll we'll copy this in we'll resolve\nit and let's uh open this up and we need\nto print the result which is going to be\ntrue now we have to walk through each\nstep of this one by one to really\nunderstand it so the first thing that we\nhave to remember is how to access\ndifferent properties so if we wanted to\naccess the quantity of nested object one\nall we would have to do is my object.\nnested object\none. quantity and and that's going to\ngive us a value of five down here if we\nwere to evaluate that expression now the\nonly tricky part here is this line right\nhere we're actually putting the array um\nor we're assigning each of these nested\nobjects as the values of this array so\nto access this nested object number two\nwe could do one of two things we could\nsay my object nested object 2 and then\nwe might say the price which is going to\ngive us 150 now since we put this into\nour array here we can also ACC access it\nlike this so we can say my array and\nthen we would say um we want the nested\nobject number two which is the uh index\none so this is index zero this is index\none so we're going to grab index one and\nyou can see it's really nice in the\nconsole you'll see exactly what that\nevaluates to and then from there we can\nuse notation to get the different uh\nattributes from it so the price which is\n150 so knowing this it's pretty easy to\nevaluate this expression so if we looked\nat my array Z uh. price which is the\nfirst part of our little expression this\nis going to evaluate to 100 um then we\ncan say my\narray\n0. quantity which is going to be five\nand then in the second part of this uh\nexpression we have the second object in\nthe array and we're just getting the\nprice and the quantity so really what\nthis result variable is saying is it's\nsaying we want to look at\n100 * 5 and compare that we'll say\nthat's greater than and then we'll say\n150 * 2 and what this evaluates to is\ntrue because 100 * 5 is 500 which is\ngreater than 150 * 2 which is going to\nbe 300 so that's going to give you the\nresult variable and you can see how if\nyou just break it down into little steps\nyou'll be able to figure out what the\nexpression equals and you can actually a\naccess um nested objects and um array\nproperties um by mixing them\ntogether in today's video like I said\nwe're talking about functions\nconditionals and loop\nand in the previous videos in lessons\nthree and four we talked about um\nJavaScript variables how to we declare\nand assign a variable and then also\nJavaScript Expressions which includes um\nall of the different operators whether\nthose be arithmetic operators assignment\noperators logical operators Etc that's\nwhat we're going to do in this video\nwe're going to cover a lot of ground\nhere um and then we're going to\nsupplement it with a ton of practice\nproblems so I'm making a video where\nwe're going to have 25 JavaScript\nchallenges and I'm going to walk you\nthrough them and kind of explain how I'm\ngoing about solving them what I'm\nthinking about and we're going to use\nthe topics that we covered within this\nvideo and the previous lessons to kind\nof uh solve these problems and we'll\nfill in a lot of the gaps that are not\ncovered in the main content all right\nlet's jump into conditionals in\nJavaScript so we've actually covered\nthis already\num just briefly in previous lessons we\nhaven't talked about how it works though\nso let me show you a basic conditional\nstatement we're going to say if some\nstring so we're talking about a string\ndata type is triple equals to so we're\ncomparing value and data type uh another\nstring so these are obviously not going\nto be equal because although the uh data\ntype is the same the value is not if\nthat is the case we're going to\nconsole.log\nthe strings are equal and then if it's\nnot we're going to say else and we're\ngoing to\nconsole.log the strings are not equal\nall right so that is our basic\nconditional statement when I press enter\nyou're going to see that the strings are\nnot equal so it basically went into the\nsecond code path that's what we kind of\ncall it is the the different paths that\nthe code can take so we're saying if\nthis is equal then I want to execute the\ncode code Within These two brackets\notherwise so else we're going to execute\nthe code between these two brackets so\nthere's a couple things I want to point\nout here just to connect the dots for\nthe previous lesson that we talked about\nso let's just get the basic structure of\nan if then statement we have if and then\nelse and this is basically what we're\nlooking at and obviously there's\nindentation uh line breaks all that kind\nof stuff that's just format adding but\nthis is the basic structure so in this\nparentheses we have a JavaScript\nexpression and then we have some\nbrackets that contains the code for the\ntruthy uh code path so if that\nexpression evaluates to true and then we\nhave a brackets where we can put our\ncode for the falsy path um so if the\nexpression is false and we've previously\ncovered expressions in JavaScript um in\nterms of variables so we might have said\nsomething like uh I don't know say 20\ntriple equals 20 and um 50 triple equals\n50 so obviously both of these are uh\ngoing to evaluate to true and then you\ncombine it with the and operator and the\nwhole expression evaluates to true and\nthen we assign that True Value to the\nvariable right here now that's all we've\nlooked at um in Prior videos but you can\nactually take this expression which is\nright of the equal sign and you can drop\nit into this uh parentheses for the\nconditional statement so just a\ndifferent way to use an expression\nyou'll see it a lot and it's um\nsomething that I think is worth pointing\nout I'm going to drop a couple of\ndifferent ways that we can write\nconditionals on the screen so it's a lot\nof code we're going to walk through each\nof these um so let's open this up so\nI've declared a couple of variables up\ntop so we have a number two number\nvariables 20 and 10 and then a\nJavaScript expression which is basically\nsaying is the first number greater than\nthe second number which is going to\nresult in true and then we've put these\nin some different conditionals so the ba\nmost basic one that we can do is going\nto be uh a basic if statement so you\ndon't even need to have an else\nstatement um at the end of this you can\njust use if and this is actually really\nuseful you know you'll see as you start\ncoding when this comes into play so\nwe're saying if this JavaScript\nexpression is equal to true that's what\nwe mean by just putting it in there so\nusually you're you know kind of getting\nused to seeing like an equal sign put in\nan expression well if we're uh looking\nat a Boolean all we have to do is drop\nit in the parenthesis and it's going\ngoing to evaluate to either true or\nfalse so since this does equal to true\nwe would expect that this console.log\nstatement will be reached and it'll\nprint this expression is true and if you\ncome down the first uh console log has\nbeen printed right here now moving on to\nthe next one we have an if else\nstatement I'm going to skip over this\nbecause we just covered it basically if\nJS expression is true um console.log\nthis otherwise this and then finally we\ncan um include other conditions so not\nonly can we do an if else statement we\ncan also add some other uh code paths\nfor our code to to go down so if this is\nequal to true we want to console.log the\nexpression is true else if the first\nnumber is greater than zero so basically\nwhat we're saying here is let me sorry I\nclosed that out there but if the JS\nexpression is false we're going to skip\nthis first uh block of code and then\nwe're going to go to the next condition\nso we know if we get to the next\ncondition that first one is going to be\nfalse so we know JS expression is false\nand then we're checking if the first\nnumber is greater than zero if that is\nthe case then we're going to say the\nexpression is false and the first number\nis greater than zero but if it is false\nso if the expression is false and the\nfirst number is uh less than or equal to\nzero we're going to fall into the else\nstatement which is basically a catch all\nfor any other condition that we might\nhave so the expression is false in first\nnumber Z or less so in this case\nobviously the variable is true so we uh\ngo down this first code path and you see\nthis expression is true down here or I\nguess this yeah the expression is true\nand then finally the last one that we\nhave is just a formatting uh difference\nso we have an if statement but we've put\nit all on one line and this is just to\ndemonstrate that we don't have to format\nit um you know all pretty like we did up\nhere although it's helps for code\nreadability and in other languages such\nas python the indentation and formatting\nactually does matter for running your\ncode but in JavaScript it doesn't it's\nmore of uh just a readability thing the\nlast type of conditional that you might\nsee is called a switch case statement\nand this is equivalent um in many ways\nto the if else if else if else if else\nuh type conditional so if you have a lot\nof conditions that you're testing then a\nswitch case statement might be\nappropriate for you so let me paste um\nsome code on the screen again and we're\ngoing to execute this um the output is\nthe color is blue and we'll see exactly\nwhy in a second so first I put an array\nup here and I put the indexes or indices\non top so the first one is an index of\n0er 1 2 3 4 and then we have to get a\nrandom index so this is just uh some\ncode that I wrote you don't have to\nunderstand this but um we're basically\ngoing to get a random number between 0o\nand four and assign it to this random\nindex variable so just think of this\nrandom index variable as carrying any\nvalue between 0 and four which happens\nto correspond with the indexes\nof the colors array then we're going to\ngrab a random color from the array um so\nremember we can get um something from an\narray by passing in the index value\nusing bracket notation and since random\nindex here um carries one of those\nvalues we can pass that in to the colors\narray so this the right side expression\nis going to evaluate to one of these\ncolors but we don't know which one\nbecause we have a random index being\ngenerated then we come down here and we\ncan write some basic conditionals so if\nthe random color so again this is going\nto be uh one of the array values if it's\norange we're going to say the color is\norange and then you can kind of look\ndown here and just see it's doing the\nsame thing for all of the different\nconditions if we get to the last lse\nstatement there was no color found but\nthat's never going to happen because we\nuh know that we have an index between 0\nand four in this case the color turned\nout to be blue but it was a random color\nrandom choice we didn't know that as the\ndeveloper before it happened now the\nreason that I bring this up is because\nthis if else if statement where we have\na lot of else ifs in here it gets very\nconfusing and it's tough to read\nsometimes so this is why we might want\nsomething like a switch case statement\nand I'll show you the same code written\nin the switch case for format oh and by\nthe way if you're tired of getting uh\ninto this browser console um remember\nyou just rightclick inspect element to\nget here um I promise you we're going to\nget to an actual code editor soon but I\njust want to keep this um focused on\nJavaScript we're not getting into\nsetting up a local development\nenvironment yet so anyways here is that\nswitch case statement um same thing up\nhere same colors array same random index\nsame random color obviously since it's\nrandom it might not be blue which I\nthink is the one we last saw so let's\npress enter it did turn out to be blue\num might have been a coincidence there\nbut basically what we're doing is\neverything's the same up here but we\ncome down to the switch statement and\nwhat we're saying is that we have a\nswitch statement and we put the\nexpression that we're evaluating in the\nparentheses so similar to the if then or\nuh or the if else statement um we can\nput in that condition into the\nparentheses and then we come into these\nlittle uh brackets which is going to\ncontain a bunch of cases so if the case\nis orange or in other words if the\nrandom color variable evaluates to the\nvalue of orange then we're going to hit\nthis code right here and when we hit\nthis code sorry about that when we hit\nthis code the color is orange it's going\nto print that to the console and then\nthis break statement is a special\nstatement that we can write to basically\nsay okay I found the correct case now\nstop executing the code entirely so if\nwe were to get the random color orange\nit's going to print it to the console\nand then it's going to break and then\nbasically all of the rest of this code\ndown here will never be reached because\nwe broke out of that statement so that's\nwhat it's doing it's basically just\ngoing um down the the different cases\nit's saying okay what is random color\nequal does it equal orange no okay does\nit equal green no does it equal yellow\nno purple no and then we finally get to\nBlue which it does equal and so it's\ngoing to console log that and then break\nout of the uh switch case statement now\nthere's this last condition down here\nwhich is called default and this is\nbasically the catchall this is the else\nstatement uh in our conditional and it's\nsaying if random color does not evaluate\nto any of these cases\nlet's go to the default value which\nwe're just going to say no color is\nfound so that is the basic switch case\nstatement let me write this uh Let me\nrefresh and I'm going to write this in a\nlittle bit simpler format so we have\nswitch and then here we have case um or\nthe different cases and then the break\nstatements so this is obviously not\nvalid but we have a switch then we put\nour condition in here which can be any\nJavaScript expression and then between\nthe brackets we put all the different\ncases so switch state or switch case\nstatements how often are you going to\nuse them well in my uh experience I\nhaven't used them a ton usually an if\nstatement or an if else statement is\ngoing to be sufficient and often times\nif you start using too many uh switch\ncase statements there's that's kind of\nan indication that you may not be\nwriting the most efficient code but\nthat's to worry about later uh right now\njust want you to kind of be aware of\nthis understand how it works and uh just\nbe familiar when you look it up and try\nto use it for the first time all right\ncontinuing on lesson five so\nconditionals functions and Loops we're\ngoing to talk about loops right now and\nlooping in JavaScript is a very\neffective concept and you will use it\nall the time so you really have to\nunderstand this um there's not a whole\nlot to it but I think the hardest thing\nis understanding why we need Loops in\nthe first place as we go through coding\nchallenges uh a little bit later and you\ndo more coding challenges just in\ngeneral um you're going to use Loops a\nlot but it's generally just to solve\nsome sort of challenge so you often will\nwonder to yourself well why do we\nactually need this in the real world and\nthe reason um at least in my opinion the\nreason we have loops um or the most\ncommon use case of a loop is to iterate\nor Loop over a set of resources so when\nwe're talking about something called a\nresource um that's basically saying that\nuh we have a bunch of uh pieces of data\nthat are very similar to each other so\noften stored in a database and that\nmight include something like um if you\nhave a Blog it might be a blog post um\nI'm trying to think of of another thing\nif you're running an app you have a\nbunch of users and there's a lot of\ndifferent concepts that you can um\nreplicate but basically resources is a\nlist of similar types of data and when\nwe have those it's more efficient to\nactually Loop over those than to\nmanually print them out so again if we\nhave an array something like this so\nI'll just say array and then we have 20\n40 60 something like this we can go\nahead and print to the console using\nthis bracket bracket notation so array\nof zero and then array index one and\narray index 2 so that's how we can\nmanually print each value of the array\nbut when you have a thousand uh\ndifferent blog posts that you want to\nrender onto a web page it's not going to\nbe efficient enough for you to just go\ninto your code and start typing out each\nand every index not only that but once\nwe add new blog posts to our our\ndatabase we're going to have to go in\nand change the code which is going to be\nextremely cumbersome it's not\nrecommended you you just you won't get\naway with that in software engineering\nyou have to do things more efficiently\nand that is when Loops come in to\ndemonstrate this let's take a look at uh\nmaybe a sample array of blog post so\nthis is not something that you have seen\nbefore in uh my tutorial videos because\nwe've been writing arrays on a single\nline but AR Rays just like you know\nconditionals and anything else in\nJavaScript can be indented and broken\nonto different lines this is all just a\nformatting uh thing so basically what\nwe're doing here is we have three\ndifferent objects so here's one object\nthen we have another object and a third\nand you can see these objects are very\nsimilar looking in each of them we have\na title property an author property uh\npublish date and content now obviously\nthe values of these properties is going\nto be a little bit different for each of\nthe objects but you can see that you\nknow you can already start to infer that\nif We're looping over this array of blog\npost we can use the fact that they have\nsimilar properties and let me just show\nyou something really quickly that we\ncould do using a loop now I'm not going\nto explain how the loop Works yet but\njust to show you what I'm talking about\nso let me collapse this um so that we\nhave room here and I'm going to paste in\nthis line of code this is what we call a\nloop and there are several ways to write\na loop but again I'm not going to cover\nthat quite yet but what you can see is\nthat instead of hardcoding the index uh\nthe indices that we are passing in to\nour blog post array so in other words we\nwant to retrieve a certain uh blogpost\nuh object from that array we would need\nan index to do that instead of\nhardcoding it we're using this variable\ncalled I so all I'm doing with the first\nfour variables here is I'm grabbing a\nspecific object from this array so I'm\nonly grabbing one of them and then I'm\ntaking all of the properties and\ngrabbing the value of those properties\nand assigning it to each variable then\nI'm printing the variables below so when\nI press enter you're going to see it\nLoops through all of our blog post\npretty much instantaneously or at least\nit seems like it to our our human brain\num and it's going to Loop through and\nit's going to print uh each of the\nvalues for each of the blog posts so\nthis is our first one what is Javascript\nit's by me December 20th 2020 and some\npost content here and you can see that\nthat is the first object in that array\nand then we go to how do arrays work and\nthen how long does it take to learn\ncoding so you can see that here and then\nfinally here at the bottom so we have\nlooped through every blog post in that\narray now let me talk about how these\narrays actually work we're going to go\ninto a little bit simpler examples so\nthat you can really isolate these\nConcepts in your head so let me write a\nbasic Loop in\nJavaScript so we're going to let I\nequals z we're going to go until I is uh\nequal to 100 that's just an arbitrary\nnumber that we're coming up with you can\nobviously pass a variable in place of\nthis like we did with that first example\nand then we're going to to increment the\nvalue of I so remember this from the\nlast um lesson this is basically the\nsame thing I'm going to come out here\njust for a second that's the same thing\nas saying I equal I + 1 so basically\nsaying if I is zero then we're going to\nincrement it by one and then we're going\nto put some brackets here and press\nenter and so everything within these\nbrackets here is going to be considered\none iteration of this Loop so the code\nWithin These brackets is going to be\nexecuted as many times as we do this\nLoop in this case we've set the uh stop\ncondition at 100 so let's walk through\neach of these and kind of connect the\ndots between the previous lessons that\nwe've talked about in this series and I\nthink you're going to really understand\nthis so the first thing that we see here\nis we declare this for Loop using the\nfour keyword so this is similar to how\nwe have an if statement so we say if and\nthen we put parentheses in some brackets\nnow we're just saying for now in the\nparentheses is going to be the loop\nconditions the first one is going to be\nthe variable that We're looping over so\nlet I equals z and notice this semicolon\nto end that statement we're just\nstarting I at a a value of zero and the\nreason that we start it at a value of\nzero is because arrays start at an index\nof zero so it makes sense that if for\nlooping through our array we want to\nstart at the first value in that array\nwhich has an index of zero you might\nalso ask why do we choose I what is I\nwell I is just a variable we could put\nin anything that we want we could say my\niterator or something like that and then\nall we have to do is replace each\noccurrence of that with our new variable\nso we can choose whatever variable name\nwe want and if you see this entire\nexpression this is very similar to or\nit's the exact same thing that we use to\ndeclare a variable in JavaScript now the\none thing you'll notice is that we're\nusing the let keyword and that is really\nimportant it's important because this\niterator variable so I'm going to flip\nthis back to I really quickly because\nthis is kind of like an industry\nstandard a lot of uh developers will\njust use this as a convention uh when\nlooping so we're going to use the let\nkeyword because I\nis going to be reassigned throughout the\nloop as you can see at the end we talked\nabout this is going to add one to I\nafter each iteration of the loop so\nthat's basically the same thing as\nreassigning it and if you remember from\nthe previous lesson when we try to use\nthis increment operator on a variable\nthat was declared with the const keyword\nit doesn't work it throws an air so\nthat's why we need the let keyword in\nhere and then finally we have this uh\ncode in the middle which is probably the\nmost difficult to understand this is the\nstop condition so basically what we're\nsaying here is we want to go through\nthis Loop we want to do as many Loops\nuntil I equals a value of 100 so each\ntime we go through the loop it's going\nto increment by one so basically since\nwe're starting at zero and we're saying\nless than we're going to go through 100\niterations of this Loop so all I'm going\nto do here is just demonstrate this I\nwant to console.log the value of I and\nyou're going to see when I press enter\nit's just going to go um 0 to 99 so we\npress enter and we got 99 here at the\nbottom and we started at zero so that's\n100 iterations remember starting at zero\nending at 99 and the significance of\nthis is you know we printed console.log\nwe just printed a number here but you\ncan do all sorts of things um like we\nsaw with the blog post array you can\nLoop through the blog post array and um\nassign values and all that kind of stuff\nto finish this topic off let's just go\nthrough a super simple example so let's\nmake an array uh we'll call an ARR for\narray and then we're going to put in um\na couple different values here so I'm\njust going to put some random strings in\nhere these are string values nothing of\nsignificance um you know just put\nwhatever we want and then let's put in\nsome\nnumbers and then a couple more\nstrings and what we're going to do here\nis combine our uh knowledge of\nconditionals that we looked at in the\nprevious video um and looping to do an\nexample so let's write our Loop here\nwe'll say I equals z and then we want to\ngo\nuntil um the array is complete complete\nso you'll use this quite often where\nyou're going to look at the array you're\nlooping over and you're going to grab\nthe length of the array um because that\nbasically means we're going to Loop\nuntil there's nothing left to Loop\nthrough so that's a very common thing\nthat you'll see within arrays and then\nof course our increment operator and\nthen we'll jump into our Loop and then\nin this case we want to set a\nconditional so we're going to say if the\ntype of um\narray and then we'll pass in I so\nremember this I is going to be\nincrementing um each Loop of the uh or\neach iteration of this Loop so it starts\nat zero and then it goes 1 2 3 4 5 all\nthe way up to the length of this array\nso when we pass in I we're basically\nsaying okay I want to grab whatever's in\nthis array at the index that I is\ncurrent currently at so it'll start with\nzero and we'll grab this first value\nthen it'll go to one and we'll grab this\nvalue so on and so forth so we're saying\nthe type of the array value so basically\nthis is equivalent uh for the first\niteration of this array if we copy this\ndown here um the first iteration is\nbasically going to be saying type of\nthis value and of course this is going\nto return string as we've seen in in\nPrior videos while the numbers are going\nto return the type of number so let's uh\nbring this back to what we had\npreviously so we grab the array variable\nand we pass in I and what we're going to\nsay is if the type of the array and I\nactually didn't even put a condition in\nhere if it equals number so that's what\nit will return if we have one of these\nnumbers then I want to\nconsole.log the array at that index so\nBAS basically what this uh loop is going\nto do is it's going to Loop through that\nentire array and it's going to look at\nthe value see if it's a number and if it\nis it's going to print it to the console\nin other words we're going to skip all\nof those gibberish strings that we put\nin there so let's press enter and you\ncan see that we have only the numbers\nprinting so this is just a super simple\nexample that demonstrates how we can use\nan array to quickly iterate over um or\nuse a loop sorry to iterate over an\narray in this part of lesson five we're\ntalking about functions and we finally\nget to do something fun with JavaScript\nin the previous videos previous lessons\nwe've been talking about the uh rather\nmundane parts of JavaScript things that\nyou can't really do much with but when\nwe combine all of those concepts with\nfunctions we have Limitless\npossibilities that we can um have with\nJavaScript of course there's other\nthings but like I said in this video\nseries series I'm taking you through the\nmost important parts we're not going\ninto the super fine details yet we're\ngoing to do that through practice\nproblems and through real world practice\nwe're going to fill in those gaps there\nso again we're talking about functions\nin this video and the first way that I\nwant to start this out is by writing out\na basic function so here is how we write\na function in\nJavaScript we're going to say my\nfunction so if you notice this is kind\nof similar to what we've been doing with\nthe if uh statements the conditionals\nand the loops we have some sort of\nkeyword at the beginning then we have so\nwell this is different we have a name of\nthe function and then we have a\nparentheses so it's kind of similar\nsyntax and then we have these uh\nbrackets here where our code will go so\nwith the function we have to give it a\nname here and in the parentheses we\ndon't actually have to put anything in\nthere we'll talk about that in just a\nsecond let's go ahead and print\nsomething hello world this is my first\nfunction we're going to end that\nstatement with the semicolon and press\nenter and what you'll notice is that it\ndoesn't do anything and this is\ndifferent from what we've talked about\nwith some of the previous Concepts um\nwhere everything happens at once so\nremember if we you know declare a\nvariable set it equal to 20 something\nlike that when we press enter the\nvariable is declared and it's assigned\nat the same time and with functions\nwhat's happening is we break out those\nsteps into two steps so up here what\nwe've done is we've declared the\nfunction but what we haven't done is\ncalled this function or what we call\ninvoked this function those are kind of\nsynonymous terms in order to do that we\njust grab the name of the function which\nas you can see similar to this variable\nthis my function uh word right here this\nis just a variable that the computer\nremembers so since the computer\nremembers it since we already declared\nit it's going to uh recognize it when we\ntype it out so if we said type of my\nfunction it's going to give us function\nbecause it remembers what that is and to\nexecute this so I'm kind of using all\nthese different words to execute a\nfunction to call a function and to\ninvoke a function uh for our purposes\nthey are all the same thing\nso anyways we call the function using\nthese two parentheses right here and a\nsemicolon and when we press enter it's\ngoing to say hello world this is my\nfirst function because it ran the code\nwithin the function so just to review\nwith functions you first have to declare\nit and then you have to call invoke or\nexecute it all the same kind of\nterminology now there is one way that we\ncan uh declare and call call the\nfunction in the same step and although\nyou're not going to use these all that\noften I do want to show you them just so\nthat you have an awareness of them and\nwhat these are called is an immediately\ninvoked function so let's say that we\nwrite um another function so another\nfunction here and we enter down we say\nconsole.log hello now if we pressed\nenter this is going to just declare it\nbut all we have to do is wrap this\nentire function in some parentheses and\nthen put our parentheses that we used to\ncall it at the end semicolon and you're\ngoing to get this function to declare\nand execute um at the same time\nobviously the computer does it in\ndifferent steps but for our purposes\nit's happening all at once this is what\nwe call an immediately invoked function\nand like I said you're not going to use\nthis a ton but just be aware of it you\nmight it pop up in some stack Overflow\nanswers or you might even use it at some\npoint so we got a basic function but\nit's not useful like what are you going\nto do with the function that we just\nwrote obviously there's more to it and\nthe thing that I want to introduce next\nis the concept of parameters and\narguments and what I would say with\nthese two terms is they're kind of uh\ntwo sides of the same coin and once you\nget into more advanced programming uh\nprogrammers are probably going to be\nusing these parameters and arguments uh\nterms interchangeably because like I\nsaid they're two sides of the same coin\nbut for our purposes we're going to\ndistinguish between these so let's write\na function we'll say my function again\nand we'll enter down onto a new line now\nwhat I want to do to add into this\nparentheses is going to be something\ncalled a parameter now these parameters\nare basically saying uh to the computer\nhey computer um I'm going to pass in uh\nsome sort of values into this function\nso be ready for them so basically what\nI'm going to say to this function is hey\nI'm going to pass in some number and\nthen I'm going to pass in some string\nvalue now obviously with JavaScript it's\na dynamically typed language so you\ndon't have to say like some number or\nsome string this is just an example\nmaybe we could even say something like\nPam one and Pam 2 so let's just go with\nthat these are arbitrary names that we\nhave and then what I want to do is\nconsole. log Pam one and then we'll go\non to a new line oh I accidentally\nmessed that up let me go ahead and try\nthis once more oh we really messed up\nhere okay one second let's refresh the\nbrowser clear it\nout and then we need to enter to a new\nline and console.log pram 2 all right so\nwhat we're doing here is we're taking\nthe value of Pam 1 and the value of Pam\n2 which in this case within the function\nthese are variables these are variables\nthat we can retrieve the value from and\nprint out so we're going to declare that\nfunction well as you can see uh it's a\nlittle bit later in the day here so I\nhad to take a break but getting back to\nwhat we were talking talking about with\nthese parameters so the question is what\nare they equal to what is pram 1 and\npram 2 equal to well the answer to that\nis we don't know yet and we don't know\nbecause we haven't assigned them as what\nwe call arguments so we know that this\nis a declared function but we still have\nto call or invoke it and to do that you\nknow how to do that you just put in the\nlittle parentheses at the end and you'd\npress enter now if we just press enter\nright now it's going to return undefined\nbecause we didn't pass in any parameters\nso when this code tries to execute and\nit tries to reference these parameter\nvariables there's no value to grab\nbecause we never gave it a value so to\nanswer the question of what they\nrepresent well they represent the\narguments that you pass into the\nfunction so if we have this function we\ncan pass in say a number and then some\nstring of some sort and and now these\nare what we call the arguments now like\nI said arguments and parameters are kind\nof the you know two sides of the same\ncoin but in this case whatever we pass\nin the values we pass in are called the\narguments and then the initial variables\nthat we were declaring would be the\nparameters so 20 is going to correspond\nto Pam one and then some string is going\nto correspond to Pam 2 so we should get\nuh 20 and then some string printed out\nwhen we run this function don't worry\nabout this little undefined here that's\njust kind of part of the console we got\nour 20 and some string printed in order\naccording to the function that we wrote\nso that's just a basic overview of uh\narguments and parameters now the next\nthing that we're going to talk about is\na brief introduction to Scopes in\nJavaScript so when I say scope what I'm\ngenerally referring to is where these\nvariables are available in the code so\nin other words we notice that Pam 1 and\nPam 2 were used within this function but\nif we were to just try to print Pam one\ninto the console it's not going to work\nand the reason is Pam 1 is not available\nin the global scope it's only available\nin the function scope which is any code\nthat's written between these two little\nbrackets right here so we pass in these\nvalues but these are only available to\nthe function it's not available to the\nrest of the code that you're writing in\nthe file or the console that you know\nyou're writing the code in so that's\njust a basic introduction to Scopes\nthere's a lot to this topic and as I\nsaid we're not trying to cover every\nlast detail of JavaScript um that's\nsomething that I think you'll have to\nfill in kind of uh outside of this\ntutorial and as we do practice problems\nand get into some more like real world\nexamples you'll start to understand\nthese Scopes and I'll try to you know\nPoint them out as we go through like I\nsaid the you don't know JavaScript\nseries is a great way to get a super\ndeep dive into things um topics like the\ntopic of Scopes but beware it's very\ncomplicated and there will be a lot of\nconfusion if you kind of go down that\nroute up until this time I've shown you\nhow to write a function as we see on the\nscreen right now but there is actually\nanother way to write a function and let\nme show you how that's done so let's go\nahead and clear this uh this\nconsole and we'll create a function just\nlike we are used to creating so no\nparameters going in there just a basic\nfunction and we'll console. log\nsomething all right so that's our basic\nfunction now another way that we could\nwrite this is by assigning it to a\nvariable so so in this case the my\nfunction variable is already defined and\nit represents a function so we can't use\nthat in our variable declaration but we\ncan say something like another function\nand then we want to set that equal to a\nfunction so this is just a normal\nvariable and all we have to do is say\nfunction define it and we'll\nconsole.log another thing all right so\nwe set that equal to another function\nand if we say type of another\nfunction it's going to give us the type\nof function now I'm saying this word a\nlot so I got to slow down here but\nanyways if we wanted to invoke this\nfunction or call it it works the same\nway that we were using it before so just\nlike we call my function just like this\nand it prints out something we can\ninvoke another function the same exact\nway even though it is a variable now\nthere are a few little uh subtle\ndifferences between these two uh ways of\nwriting functions and like I said it\ngets into some details that we're not\nquite ready for and I'm just going to\nleave out for now it's not and these\ndetails are not essential for you to\nwrite good code and get it up and\nrunning they're more like edge cases\nwhere your code doesn't work and you\ncan't figure out why well it's because\nof this subtle Nuance so I wouldn't\nworry about it too much all right so\nwe've got these two different ways the\nmain difference that I want you to\nrecognize is the fact that this function\nright here does not have a name this is\nwhat we call an anonymous function and\nthe reason we can use an anonymous\nfunction is because we are assigning it\nto a variable so we're giving it a name\nnow up here we just do it all at once we\njust give it a name and we're done so if\nyou tried to write a function without a\nname so something like this\nyou're not going to get it to work\nbecause this is an anonymous function\nand you need to declare some sort of\nname and you see the syntax there it\nsays function statement requires a name\nso that is not valid because it's\nAnonymous you have to assign it to a\nvariable now there is another way to\nwrite functions and this is a little bit\ntricky but I'd like to cover it because\nyou're going to be using this next type\nof writing a function a ton so as of\n2015 when the es6 standard came out so\nif you remember back from I think lesson\ntwo we talked about ecmascript standard\nand um how there's a standards body that\nbasically defines the spec for the\nJavaScript language well they upgraded\nthat spec in 2015 with es6 and they came\nout with something called a arrow\nfunction so that Arrow function looks\nlike this um so we'll say Arrow function\nequals and then we'll put some\nparentheses we'll put an arrow and then\nwrite it just like\nnormal so we'll say I am an arrow\nfunction all right so we press enter and\nlike our other functions we can call it\nor invoke it the same way so we just\npress Arrow function with the two\nparentheses at the end and boom it\nexecutes so it's functionally equivalent\nin a way um again there's some subtle\nnuances that we're not going to get into\nbut this Arrow function is mainly here\nso it improves readability and another\nbenefit that it has is it um really\nhelps out with the Scopes of your you\nknow your code and specifically the this\nkeyword which we'll get into much later\nbut um it does improve on that that's\nwhy they came out with it in the first\nplace so this is a very um different way\nof writing a function but here's the\nbasic syntax you just have this little\nparenthesis which is basically here's\nwhere you put the parameters then you\nhave this Arrow that's why they call it\nan arrow function so an equal sign and\nthen a right carot or greater than sign\nand then you have these two brackets\njust like you would any function once\nagain you cannot just use this alone\nthis is kind of similar to that\nAnonymous function we looked at and you\ncan't just Define a function like this\nand you know this this won't work\nbecause it doesn't have a name so you\ndon't have a name specified um it didn't\nthrow an air like the previous one but\nyou have no way of referencing back to\nthis you don't know how to actually call\nit because there's no name for it so you\nhave to assign these Anonymous functions\nand arrow functions to some sort of\nvariable these Arrow functions or\nAnonymous functions can also be used in\nsomething called a callback but again\nthat's going to be a little bit later\ndown the road all right from now on I'm\ngoing to be focusing a lot on these\nArrow functions I'm going to be writing\nthem for the most part now obviously if\nyou're defining a function on its own\nyou have to write it you know with the\nnormal syntax so you have to write it\nwith the name and then the parentheses\njust like this but for a lot of cases we\ncan just assign it to a variable and I'd\nlike to get you practicing the arrow\nfunctions because you're going to use\nthem so much so the next thing that\nwe're going to talk about here here is\nthe concept of return values in\nfunctions so far we haven't returned\nanything from our functions and if we're\nwriting these so let's say my function\nsave it to a variable and use the arrow\nfunction syntax and then we just\nconsole.log something all right very\nsimple my function does not actually\nreturn anything so if we were to assign\na result variable to it so we're going\nto say my function and and then we're\ngoing to call it so remember this is\njust uh executing the function we\ndefined above and then it's assigning\nthe result of that function to the\nresult variable so we press enter and\nthis is just the console.log that was\nexecuted as part of the function but if\nwe type out result it's going to give us\nundefined and the reason is because our\nfunction didn't return anything so if we\nwant our function to produce a value we\nhave to put a return statement in there\nall right so let's go ahead and do that\num return function that's what I'm going\nto name it here that's just a variable\nwe'll use the arrow\nsyntax enter down and this time we're\ngoing to return a value of 20 and we\nalso could have returned you know some\nstring or we also could have returned a\nvariable so if we wanted to you know\nmake a variable called a and that equals\n20 um oh I accidentally uh hit enter\nthere but if we wanted to we could come\ndown here and return a now it's going to\nbug out on me because I've already\ndeclared it like right here on accident\nso let's let's refresh the page real\nquick so that we can get back into this\nso um we'll just say my function this\ntime we've got the fat Arrow\nfunction enter down we'll Define a\nvariable set it to 20 and then we will\nreturn that variable now we could also\nreturn like some sort of expression so\nwhat if we wanted to return a is greater\nthan 30 which it's not obviously so this\nwould return false so let's just see you\nknow how these different uh return types\naffect the function we're just going to\nreturn a which will be 20 and now we\nwant to set that equal to a result\nvariable so we'll get my function we're\ngoing to execute it and then assign the\nresult to that result variable and now\nwhen we print out the result it's going\nto equal 20 because it took the result\nvalue the function and assigned it to\nthat variable like I said you can um do\nExpressions here so if we wanted to\nDefine another function we'll just put\ntwo at the end so it's Unique and then\nwe want to say a is less than uh 30\nwhich it is this will return true I'm\njust going to put a comment there and\ntherefore we would expect that this\nwhole function is going to um evaluate\nthis last expression here and then\nreturn it so let's press enter and then\nwe'll say result 2 is equal to my\nfunction 2 and then if we get the value\nit's going to be true so you can see\nthat there's a lot of different things\nthat we can return from a function heck\nwe could even return a function from a\nfunction but that's getting into way too\nmuch detail and it's not necessary for\nwhat we're trying to do so going to skip\nthat hopefully this gives you a brief\noverview of return values now the last\nthing that we have to talk about is is\nwhat happens after the return value so\nlet's say that we had I'm going to go\nahead and clear the screen um we'll\nsay\nimproper return\nfunction and then we're going to set\nthat equal to our Arrow function and\nwe're going to return 20 or no let's go\nahead and set a variable um I mess this\nup again it's kind of tough working in\nthe console but we will eventually get\nto a code editor which is going to be a\nlot easier on us so let's say my\nfunction do this one more\ntime and in this case let's Define a\nvariable so we'll say let um my\nnumber equal 20 and then we're going to\nreturn my number now let's enter down\nonto the next line and then we'll say my\nnumber equals 50 all right so we're\ngoing to press enter\nand it's going to give us an air it says\nunreachable code after the return\nstatement you won't get this from all\nlike this is just in the console you may\nnot get this error anywhere else but\nthis is giving us a hint that we've done\nsomething wrong here but it is still\nvalid so basically what we're saying\nhere is we're going to run the function\nit's going to return 20 and that's\nbecause we've returned the value before\nwe reassigned it so this is valid code\nto write but it's it's useless because\nthis last line right here is never going\nto be reached no matter what happens\nit's always going to return beforehand\nand you'll never return a value of 50 so\njust know that for the return values\nwhatever happens after it doesn't matter\nand you pretty much will never have um a\nreturn value before the end of your\nfunction so let's say that we have a\nglobal variable um we'll just say\nsomething like um my number equals 20\nall right so we're going to set that in\nthe global scope again Scopes are going\nto get important here soon so just kind\nof keep that in the back of your head\nnow we're going to define a function so\nwe're going to say um let's go ahead and\nuse let because in case I screw up again\nand we have to reassign it so we're\ngoing to go ahead and say uh my\nfunction and we're going to set that\nequal to an arrow\nfunction now we're going to say if my\nnumber so this kind of seems like going\nagainst what I told you earlier about\nScopes so if there's a parameter that\nhas a function scope it cannot be\naccessed at the global level but if you\nhave a global variable you can access it\nfrom within a function so it goes one\nway but not the other when it when it\ncomes to Scopes so since this is in a\nit's in technically a higher scope than\nthe function has it the function can\nactually recognize what this variable is\nequal to so we're going to say if my\nnumber and then we're going to enter\ndown um and actually I need an\nexpression here if my number is we'll\nsay less than 15 then I want to return\nuh returned the function early all right\nand then we're going to enter down and\nthen we're going to return uh 40 these\nare all random numbers I'm making up\nhere but it's just trying to show you\nthat um if you have a condition where\nyou know if the number is less than 15\nwhich it is not in this case you can\nactually return multiple things from the\nsame function so my number is not less\nthan 15 so we're going to actually skip\nthis return function and return 40 but\nif we change that so let's say um we\nChang that to less than 50 and 20 is\nleft less than 50 so we're going to\nactually return this function early and\nwe'll never reach the second return\nstatement so let's go ahead and enter\nthat down and execute it and you'll see\nthat we get that returned the function\nearly uh output so you can have multiple\nreturn statements within a function just\nyou can't have like two of them on the\nsame line so if I were to recreate this\nfunction and maybe have you know like a\nreturn statement of 50 and then return\n40 right after it both of these code\npaths are going to be reached so this\ndoesn't make any sense you only want to\nreturn one value so that's just an\noverview of return values we're going to\nget a lot more into this as we start\nwriting some more realistic code just\nwanted to give you a brief overview the\nlast thing that I want to do prior to\ngetting into the 25 practice exercises\nor coding challenges I have for you I\nwant to talk a little bit about objects\nand functions together so this is a\nlittle bit of a confusing topic but it's\ngoing to hopefully help you understand\num when we start talking about the\nbuilt-in functions of JavaScript we're\ngoing to talk about that in a few\nminutes um hopefully this will help you\nunderstand that better so let's go ahead\nand Define a function we're going to\ncall it my function again and then let's\nI don't know return a value of 20 from\nit so this is a very simple function um\nwe'll go ahead and execute it just to\ndemonstr straight it returns 20 now what\nif I wanted to set this equal to um\nanother variable I can actually do that\neven though it's already called my\nfunction so I can say um you know Alias\nyou know an alias is just another name\nfor something so we'll say Alias\nvariable equals my function all right so\nif we press enter now Alias variable is\nexactly equal to this function\ndeclaration that we made\num above so if we wanted to execute that\nas Alias variable we're going to get the\nsame answer of 20 so we can assign it to\ndifferent variables which means that we\ncan also assign it to object properties\nso let's go ahead and clear the well I\nguess we don't need to clear the screen\nlet's go ahead and create an object so\nwe'll say my object and then we'll set\nthat equal to prop one we'll just give\nit some random value just to have\nsomething there and then we'll say prop\ntwo is going to be equal to my function\nall right so we have declared my object\nin prop two just a random property name\nthat I've given it is going to be\nexactly equal to the function\ndeclaration just like we made this Alias\nvariable equal to the function\ndeclaration so what does this mean well\nwe can actually execute the function by\naccessing a value of or by accessing a\nproperty of the object so if we come\ndown here and let's just um go ahead and\nsay my object and then we need to get a\nproperty from the object so let's go\nahead and get property two and you'll\nsee in the autocomplete down here it's\npretty much telling us that that is\nequal to my function now if we wanted to\nexecute it we can still put those little\nparentheses at the end and it's going to\nexecute and give us the same answer so\nwhat we did here was was we grabbed an\nobject we grabbed a property off of that\nobject using the dot notation and then\nonce we had that we just threw those\nlittle parentheses at the end and\nexecuted it so I just wanted to get you\nfamiliar with this because what we're\nabout to talk about is the built-in\nfunctions of\nJavaScript so JavaScript has a bunch of\nbuiltin functions and objects and all\nsorts of other stuff that we can use\nwithout having to write any code and if\nyou go to there's there's several\nresources that you can use to see these\nI'm on tutorials point which has a good\nlist of them but they're they're all\nover documented pretty much everywhere\nand within JavaScript there are\ndifferent data types as we have talked\nabout so you have strings you have uh\nbooleans you have numbers and all of\nthese different uh data types will\nactually have some built-in functions\nthat you can call on top of them so if\nwe go here and just look at some of\ndifferent methods so method is another\num I guess synonym for function we can\ncall like it's not completely synonymous\nbut if you have like an object and then\nyou have a function attached to that\nobject as we just showed that's called\nan object method so it's kind of the\nsame thing and you can see that we have\nnumber methods we have Boolean methods\nand we have string Methods and we have\narray methods probably down here\nsomewhere so array methods and depending\non the variable type that you're working\nwith you can use all of these to modify\nyour your variables and just take a\nbunch of shortcuts with your code so let\nme go ahead and show you a few of these\num just to give you an idea of how they\nwork because when we go into the coding\nchallenges um throughout this course\nwe're going to be using these uh as much\nas we can now the first thing I'll say\nhere is don't try to memorize these\nthese are not to be memorized there is\ndocumentation for a reason so that you\ncan Google it and look it up when you\nneed it you'll pick up on a few of them\nover time but for the most part I only\nhave a few of these actually committed\nto memory all right so let's go ahead\nand try out a few string Methods so\nlet's say that we wanted to I don't know\nuse this replace method we go back to\nthe console let's clear everything\nout and let's define ourself a string so\nwe'll say my string equals um Zach and\nthen we're going to use the replace um\nmethod so maybe I spelled my name wrong\nthis is how you spell my name but what\nif there's a k at the end so I might\nwant to replace it so I can say my\nstring. replace and then I'm going to\nreplace the H with a K and when we press\nenter it's going to return Zach with a K\nand now my string um is actually going\nto still be equal to the original\nbecause it didn't replace the value it\njust returned a new value so it doesn't\nalter the original value here it just\nreturns a new one so if we wanted to say\nuh new name we can just say uh my\nstring.\nreplace H and K and then we set that uh\nequal to new name and now now my new\nname is going to be spelled differently\nnow something that I want you to notice\nwhen we're looking at this is that we're\nusing the same notation here that we\nused um earlier when we accessed that\nproperty of the object and executed it\nas a function now this works a little\nbit differently than that but you can\nkind of think of it that way so maybe\nthe my string is considered your object\nand then you use do notation to get a\nproperty off of that object called\nreplace which happens to be a function\nthat takes two parameters and the first\nparameter it takes is the letter or\nstring that you want to find within your\nstring so I want to find the letter H\nwithin my string and then I want to\nreplace it with the uh string K just a\nletter um so my string will be replaced\nso these are the parameters and if you\nwere to look at the replace method and\nyou go ahead and click on it it gives\nyou a description of this and we're\ngoing to learn how to you know read\nthrough documentation a little bit later\nbut anyways you can go down here and\njust see what kind of uh parameters are\nrequired for this so here's the syntax\nand it gives you um the parameters that\nyou want to search for then the\nparameters you want to replace it with\ncouple examples some output all that\nstuff so that's how I've you know\nfigured out how to use that again we're\ngoing to go through it quite a bit as we\ngo through the coding challenges I'll\njust go through a couple more examples\njust to get you comfortable with what's\ngoing going on here so let's go ahead\nand use my string uh once again and this\ntime I want to use the string method\ncalled two uppercase and you can see\nwhat that does is it returns us the\nuppercase version of our variable now I\nknow we got a lot of different versions\ngoing on here so let's go ahead and\nclear that out and reprint my string so\nthat is what my string variable is equal\nto right now we can also chain the\nmethods together so this is a little bit\nof an odd concept uh to someone starting\nout but you'll see how this actually\nworks um once we get into the challenges\nso let me just do a simple example here\nwe have my string um equal to Zach but\nlet's go ahead and say uh we want a new\nstring or something so let's call it um\nI don't know let's make a new one we'll\njust call it Str Str for string and this\none we're going to say hello world in\nthere so that that's the string right\nthere and what we want to do is first\nmake it uppercase so we'll say two\nuppercase and we'll execute that you\nknow method that sits on the string\nobject and that's going to Output us\nhello world as it's kind of telling us\nhere now we can put another dot there\nand we can chain these methods on top of\neach other so I'm going to use another\nmethod called split and what split does\nis it's going to take whatever delimiter\nthat you put put um as a uh as a\nparameter or not a parameter as an\nargument so if we put in a space right\nhere it's going to look at the string\nand it's going to say there's one space\nin there so I want to split hello and\nWorld apart from each other and then\nwhat it does there as you can see down\nhere is it actually changes the data\ntype from a string to an array where the\nfirst uh part of that array is the first\nthe hello and the second is world\nso let's set this equal to a variable\nwe'll just say a result variable is what\nwe want and our result variable is now\nan array and from there we can actually\ndo array methods so let's go ahead and\ngo back to the documentation here and\nlet's scroll down to some of our array\nmethods that we can use so what would be\na good one to use so we'll use the index\nof method so this just basically gives\nus the index of a value so we'll say\nresult. index of and then I want to\nsearch for the word world and when we\npress enter it's going to return us one\nbecause this is an index of zero and\nthis is an index of one and that matches\nthe string that we are searching for\nthat we passed in as an argument to this\nfunction now of course you don't have to\ndo this by chaining them together you\ncan do it in separate steps so in the\ncase of above we made this to uppercase\nand then we split it into an array in a\nsingle step but if it gets too complex\nfor you and you just want to stick to\nthe basics you can do this in different\nsteps so we'll say uh first let's see\nwhat string is equal to it's still equal\nto hello world because we you know while\nwe did this right here we didn't modify\nthe original variable we just assigned\nit to a new one so string still\nrepresents hello world and in this case\nuh we'll say step one variable we want\nto take that and we want to make it\nuppercase all right so we'll make it\nuppercase and then maybe just type it\nout to make sure that it worked now\nwe're going to do step two right here\nwhere we say uh step one so we want to\ngrab whatever values in step one and\nthen we want to split that based on a\nspace all right so we set that to step\ntwo and then step two we can print out\nand we see that it's an array and then\nwe come to say step three and we'll say\nstep two whatever values in that\nvariable and then we'll say um index of\nlike we did above and then we'll search\nfor the word world and we'll set that to\nstep three and we get an index of one so\nyou can see we can split these out into\ndifferent steps but I just wanted you to\nknow that as you see some different\nsyntax when you're reading through code\nthis is a valid way to use these\nbuilt-in methods in JavaScript all right\nthere was a lot here there is a lot\ngoing on in this video and um I would\nnever expect you to take it all in at\nonce and process it and understand every\nlast bit of it and that is why we're\ngoing to use um a bunch of practice\nexercises or coding challenges to brush\nup on these skills and really cement\nsome of the concepts we've talked about\nvariables we've talked about op\noperators we've talked about um\nconditionals so if else if else or else\nif doing a tongue twister there we've\ntalked about loops and we've talked\nabout functions so there is a lot going\non here and to combine it all together\nand actually write code um I think it's\nuseful to go through some\nexercises in this video we're going to\ngo through 25 maybe a few more we'll see\nhow it goes um but we're going to go\nthrough some coding challenges and these\nare going to be at the very beginner\nlevel so like very beginner level of\ncoding and what I want to do with this\nis walk you through my own thought\nprocess and help you understand how I'm\nthinking about this and how you should\nuse the previous lessons that we have\ngone through so lesson uh three and four\nwhere we talk about the basics of\nJavaScript I want to apply those to\nactual coding challenges like I've said\nthroughout this series I'm not taking\nyou extremely deep into the JavaScript\nprogramming language um there are other\npeople who have done that and um I I\nthink at this point when you're just\ntrying to get off the ground um digging\ninto complex topics like you know\nhoisting and um Advanced Scopes and\nstuff like that it's not necessary for\nwhen you're just starting and you can\nfill in the blanks as you go later on\nand partially why I'm making this video\nwith these challenges is to help you do\nthat so if I haven't talked about it in\nthe previous lessons hopefully we'll\nkind of fill in the blanks here with\nthese challenges and to do so we're\ngoing to do this on a site called code\nWars and if you go here um pull up the\nscreen um this is going to be the\ncollection that I've put together so\nthere's 25 exercises here um that I've\nput into a collection we'll see how it\ngoes I might add a few more um if we\nblow through these but basically just go\nto hit hit the link in the description\num to find this uh series of questions\nand then get to this page right here\ncreate a profile go ahead and follow me\ntoo um let's see what my profile is uh\nZach go just look me up follow me I'll\nfollow you back so that we can do this\ntogether and then once you get to the\ncollection um again Link in the\ndescription you'll go to this uh top\nleft corner and click train now and when\nwe click this it's going to drop us into\neach of the problems uh that I have\nbasically chosen for this video and I\njust want to give you a quick tour of\ncode Wars if you've never been on here\nbefore um I actually just started using\nit for this purpose just to go through\nsome practice\nexercises um but basically on the left\nside here we have the instructions so\nit's going to tell us the instructions\nthis code does not execute properly\nfigure out why basically fix it um you\ncan see the output here this is when we\nactually run our test so if we run our\ntest obviously it's going to fail um and\nthis is where we see the output and then\nover here is where we write our solution\nso we can write valid JavaScript code\nover in this uh terminal over here and\nthen finally at the bottom this is the\nthe sample test that we can look at so\num obviously this is a little bit more\nadvanced than we're um probably\naccustomed to at this point if you're\nwatch watching this video but this is\ngoing to basically be a bunch of code\nthat actually tests the code that you\nwrite so it takes the inputs that um or\nit takes a set of inputs it puts those\ninputs through the code that you've\nwritten and then it um gets the outputs\nand checks to see whether um that\nmatches the expected output so that's\njust a brief tour um just a few other\nthings you'll notice that we're writing\nin the JavaScript language uh that's\nwhat this video is about uh node is\ngoing to be the runtime so node.js is\nkind of the backend version of\nJavaScript but you know just like we've\nbeen working on in this series we can\nyou know this is the browser Dev tools\nconsole um and this would be you know\nthe same code that we're writing here so\num nothing new here and then finally\nthis Vim versus emac thing if you click\neither of these it's going to actually\ndrop you or it's it's going to create\nthis editor right here um into like say\na Vim editor I have a video on this if\nyou want to check out the Vim code\neditor or text editor but don't click\nthis for now that's a whole different uh\nball game that we would get into if we\nstarted using those so keep those\nunchecked all right so from this point\nwe're going to go through the the\nexercises I'm going to walk you through\nhow I'm thinking about them the first\none is rather simple um if you've been\nfollowing along with this uh road map\nseries you'll know exactly what we need\nto do here it's saying this doesn't\nexecute how do we fix it well right now\nif we you know ran it and did the output\nwe ran it earlier it says it expected\nundefined to equal one so basically\nthat's saying that um we haven't\nreturned anything from this function and\ntherefore we just need to add a return\nstatement right here and then we can\ntest it and it should pass so we pass it\ngo ahead and click attempt at the bottom\nright corner it passed all of our test\nso we'll submit\nit all right once you submit a solution\nand you did it correctly it's going to\nshow you other people's solutions to the\nsame problem and this can be useful but\nalso detrial so listen up here um the\nway that this can be useful is by\nscrolling down and you know just seeing\nthe possibilities because you can solve\nevery one of these problems in many\ndifferent ways and so sometimes it's fun\nto see how other people have solved them\nand it also can open your eyes to\ndifferent types of thinking that you you\nknow wouldn't have thought about so it\nis good in that way it's not good um\nbecause sometimes people will solve\nthese in very clever ways and when I say\nclever that does not mean the best way\nnow I'm not a competitive programmer um\nI don't claim to be I I don't really\nhave any plans on becoming one um but\nwhen you get into the world world of\ncompetitive programming it's all about\noptimizing Your solution writing the\nleast amount of code or the fastest code\num that kind of thing and I'm not that I\njust want to write some code that helps\nyou understand the solution and help you\nread the code in the simplest way\npossible and some of these Solutions\ndown here for example this one right\nhere this is unnecessary um there has\nyou know nobody said that you have to\ncheck and validate all of the ARG inputs\nso uh in this case A and B are the\ninputs to our function and what this\nperson has done is basically checked to\nmake sure that you know the uh the\ninputs are not some you know invalid\ninput it it makes sure that they're a\nnumber and this is totally unnecessary\nfor this solution it never told us that\nwe have to check that and this is just\noverly complicated in my opinion you'll\nsee that there's uh a lot of votes for\nthe clever and in many cases when you\nsee a lot of votes for the clever\nsolution it's probably not geared\ntowards the beginner it's probably not\nwhat we want to focus on right now at\nleast now I will point out one that's um\na little bit useful for us and that's\ndown here so this would be our Solution\nthat's what we came up with we just\nadded a return statement and called it a\nday now there's another way to do this\nthat is actually it's it's very clever\nbut it's also something something that\nwe talked about in a previous lesson so\nthe I think it was the previous video we\nactually might have mentioned this at\none point but basically if you have an\narrow function which is what um we don't\nhave an arrow function in the original\nsolution we just have this you know\nstandard function a named function but\nwe could set this function equal to a\nvariable called multiply and then we set\nit equal to uh an arrow function and\nwith an arrow function if um you put it\nall on one line you don't actually have\nto put a return statement in there so\nthis is a nice uh nice thing to look at\nbecause it gives you kind of opens up\nyour world to understanding oh I can\nwrite it like this as well all right so\nenough on this um we're not going to\nspend this much time on every challenge\nbut I wanted to walk through uh how you\nthink about these Solutions here all\nright so if you would if you clicked\nthat button so let me actually go back\nto make sure that we're clear on this\nwe'll go to collections go to the lesson\nfive practice challenges and if you just\nclick on one of these challenges it's\ngoing to take you to that challenge but\nwhen you click next it's not going to\nkeep you within the collection so make\nsure that you've clicked this train now\nbutton so that when you solve the\nproblem and click next it takes you to\nthe next one um in the um collection so\nI guess we got to solve this one again\nreal quick so we'll attempt it with that\nsolution we passed it let's submit it\nall right and now we can pre press next\nuh next Kata or Kata I don't actually\nknow how to say that I'm sure there's a\nreference to that that I'm not getting\nbe sure to leave that in the comments if\nuh you do know what it means anyways\nthis is the next problem that we have so\nlet's go ahead and actually is this yeah\nthis is it so let's train again I guess\nI've already opened this at one point um\nyeah when I was putting the collection\ntogether so the function is not\nreturning the correct values can you\nfigure out why so this is going to\nactually get us into the switch case\nstatement that we talked about um just\nin the previous couple videos and if you\nremember with the switch case statement\nthis is basically like saying if and\nthen else if and then a bunch of else\nifs to test a specific condition if you\nremember from the switch case statement\nsyntax we are missing something right\nhere that is causing our solution to be\nwrong and I think what's going to happen\nif we execute this we're going to get\nNeptune uh every time so let's let's see\nif that's the case yeah so we got\nNeptune every single time and the reason\nthat's happening is we don't have any\nbreak statements here so in other words\nwe're getting the ID um passed in\ncorrectly so that's passed in as an\nargument ID is the parameter uh that\nwe're defining within the function and\nthen what it's doing is it's looking at\nthat ID so that's in the switch\nstatement and it's saying what does the\nID equal and then once it figures that\nout it goes to all the cases and so it\nsays does the ID equal one okay if it\ndoes we'll set the name equal to mercur\nMercury and then we'll return the name\ndown here but the problem is since\nthere's no break state\nit's always going to hit the last case\nso let's say that the ID um you know we\ngo down to the test and they're passing\nin two as an argument and we're\nexpecting that that will return Venus so\nif we you know pass in an ID of two it's\ngoing to get passed in and then we're\ngoing to look at case one and say okay\nID does not equal one so let's go to the\nnext one all right ID does equal two so\nlet's set the name equal to Venus but\ninstead of breaking and coming down to\nthe return statement and returning that\nanswer it doesn't do anything it's just\ngoing to keep going down all the cases\nso it's going to say does case equal 3\ndoes case equal 4 does case equal 5 so\non and so forth till it hits the last\none so we need to add some break\nstatements in here and all we have to do\nis just put in break with a\nsemicolon and we'll do that for all of\nthese lines\nall right so we've got our break\nstatement Let's test this once more and\nthis time we're passing it so that's all\nwe needed to do we just this was purely\na syntax error and it's something that\nyou would have had to kind of look up\nthe documentation for a switch case\nstatement or watch my previous lesson to\nfigure out so let's go ahead and attempt\nit we know it's going to pass and we'll\nsubmit it all right let's see what\neveryone else was doing um there's some\nclever Solutions here obviously this one\nis very clever but I would not recommend\ndoing this at our skill level right now\num so looks like we did it did it okay\nin this case this person has opted to\nuse a return statement which is valid\nbut a break statement works just as well\nso um you can see that this was the I\nguess the top solution most common and\nthat's kind of what we used there the\none thing I'll point out is I put a\nbreak statement after Neptune but that\nwasn't really necessary since it's the\nlast one all right we'll go to the next\nuh\nchallenge this is reversing a string so\nlet's go ahead and train on this so\nbasically all we're doing is taking this\nstring and reversing it and I know how\nto solve this solution um with just a\nsingle line but I don't actually know\nexactly how to do that I can take a\nguess so let me try and just return\nstring. reverse and see if that\nworks okay so reverse is not a function\nas I kind of suspected so in JavaScript\nas we talked about in the previous video\nthere's a bunch of built-in functions uh\nthat come with JavaScript and you can\nlook these up so we'll just say\nJavaScript builtin\nfunctions um and then we'll we'll go to\ntutorials point I like this one pretty\nsimple and then if we go to the string\nMethods that's where we want to go\nbecause what we're trying to do is\nreverse a string so anytime that you're\ntrying to modify um a certain data type\nyou can First Look to those built-in\nmethods so you don't have to do\nsomething manually so in this case we're\nworking with a string and we need to\nreverse it so let's go ahead and see\nwhat we can do um using the string\nMethods\nand it turns out if we're just looking\nthrough these different string Methods\nthere's nothing that says reverse here\num I had actually for some reason\nthought that we did have a reverse\nmethod um don't know how that slipped my\nmind but we don't so we have to think of\nanother solution now realistically if we\nwere solving this problem um you know in\nthe real world where we had to write\nsome code that reversed a string what\nI'm going to do is this I'm opening up\nGoogle and and then I'm going to type in\nhow to reverse a string JavaScript all\nright and usually there's going to be a\nstack Overflow post um because stack\nOverflow is where you basically get the\nanswer to anything when you're coding\nand what's going to happen is we're\ngoing to find a solution here so I\nwasn't that far off we actually do have\na reverse method but this is not going\nto be entirely apparent uh to you if\nyou're like a complete beginner but what\nwe're doing in this solution here is\nwe're actually converting this to an\narray first so let's go back this is all\nI need to see for now um let's go back\nto our our documentation and take a look\nat the array methods so if we have a\ndata type of an array we can actually\nreverse it so uh looks like there's a\nreverse method right here and I'm going\nto go ahead and go to the dev console um\njust right click anywhere on the screen\num let's just show you how to do that\nright click inspect element if you've\nbeen watching the series this is not\nnews to you and now we can type away\nwith any JavaScript so let's see how we\ncan do this with an array we'll just set\nan array uh equal to 1 2 3 and if we\nwant to reverse this array we can just\nsay array. reverse and it's going to\nreverse the values in the array so\nbasically what this stack overflow flow\nsolution is telling us is that we first\nneed to convert the string into an array\nby letter and then we need to reverse it\nand then we need to join it back into a\nstring so this is a you know one-step\nsolution where we can basically do it\nall in one step we talked about chaining\nuh these built-in methods in just the\nprior video but I want to break this out\ninto individual steps uh just for\nclarity so let's go ahead and do that\nright right now the first thing we want\nto do is split the string into an array\nso basically it's going to take every\ncharacter in the string and it's going\nto make each character uh a value of\nthat array so again let's come back to\nour console um let's say that we have a\nstring and that's equal to hello all\nright and then we want to say string dot\num what were we using here we're using\nsplit and we're going to uh just split\nit with an empty character so if I can\nget back here so we'll say string\ndosit and we'll put in just an empty\ncharacter and that's going to give us an\narray where we have each uh letter being\nseparated in the array all right so now\nthat we have the array we can split or\nwe can reverse it so um let's just go\nback and do that here so the first thing\nwe have to do is uh put it into array so\nstring do spit and then we just need to\npass in an empty character and then from\nthere we can reverse it so as we saw so\nwe'll say we'll save it into a reversed\nvariable so we'll say array. reverse all\nright so that's going to assign it there\nand then often times when I'm solving a\nproblem like this I'm going to write\nsome code and then actually test it out\nbefore I move on so let me go ahead and\nconsole.log the Reversed value and then\nwe'll click test which is obviously\ngoing to fail but what we do see is that\nwe get some output so you'll see that we\nlogged this to the console and this to\nthe console which basically tells us\nthat we have our like our reversed\nvariable is an array and that array is\nreversed from the original string so the\nlast thing we need to do since we have\nit in the form of an array data type is\nwe need to take that reversed array and\njust combine it together into a string\nand to do that I think all we have to do\nis um join it so if we do string\ndosit um and then we say join it's going\nto join it uh by a comma so we actually\nwill have to replace those commas let's\nsee how the stack Overflow solution did\nit okay let's\nsee and we have to when we join it we\nhave to also enter that empty string\nright there so that's just a a little\ntricky part to this so let's go back to\nour problem um and then we'll say Final\nAnswer equals the Reversed array so this\nis an array and then we join it by that\nempty character and then we go ahead and\nreturn the final\nanswer and let's go ahead and test\nthat you can see that we passed all of\nthe tests so let's attempt it I think\nwe'll be fine here and we solved it so\nthat's just how we take it out into\ndifferent steps um of course we could\nhave solved this by um just saying we\nwant to do string\ndosit do\nreverse\ndojin and this uh we can delete all\nthese uh intermediate variables right\nhere we can test this and it's going to\npass everything let's go ahead and\nattempt it and submit it so like I said\nthere's a couple different ways to solve\nit but um you might be asking at this\npoint well you're cheating like you went\non stack Overflow and figured this out\nthat way and well yes if I was doing a\nprogramming competition um I would be\ncheating and that's you know that's why\nI'm not a competitive programmer I'd\nnever want to be because Google is you\nknow your best friend when you're a\nprogrammer and it is not cheating to\nGoogle something so um we'll try to do\nmore of these on our own for the\nremainder of the video but for now I\njust really wanted to beat that into\nyour head that it is okay to go to\nGoogle and search something like that\nand that's how pretty much everyone that\noperates in a real world environment is\ngoing to do so uh just a tidbit of\nknowledge there um take it for what it\nis all right so we'll go to the next\nchallenge see what we got here\nokay even or odd let's see what we are\ntrying to solve so it says create a\nfunction or write a script in Shell\nthat's not something that we're going to\ndo um that takes an integer as an\nargument and returns even um so notice\nthat they're asking for a string a\ncapitalized string that says even uh for\neven numbers or uh capitalized odd for\nodd numbers all right so let's see what\nwe can do here\nthe first thing I'm thinking about is\nmaybe a modulus operator but I don't\neven think that we need to do that or do\nwe yeah that is correct so a modulus\noperator if we were to divide\nsomething by two right okay I I don't I\nknow what I was thinking here so just\ndivide it by two right so um let's let's\ngo over to our little playground here\nand refresh just so that we can test a\nfew things out so if we got 20 / two\nthat comes out to an even number if we\nhave 21 which is odd divided two we have\na decimal now we would have to complete\nsome additional steps to actually figure\nout which one's a decimal which one's a\nwhole number so I kind of like the idea\nof the modulus operator because if we do\n20 instead of divided by two but modulus\n2 it's going to give us zero um but\n21 modulus 2 is going to give us one so\nbasically every time we have an even\nnumber uh doing modulus 2 is going to\nreturn zero because there's zero\nremainder if we do that division\noperation so in previous lessons we\ntalked about this modulus operator um in\nmy video video about operators and\nbasically what it's doing is it's doing\na division problem and it's returning\nwhat the remainder of that division\nproblem is so as we know going back to\nbasic math if you divide something and\nthere's no and there it goes into it\nevenly there's going to be a remainder\nof zero which we're going to see for any\neven number so if we do 40 modulus 2\nthat's zero if we do two modulus 2\nthat's zero so that's basically how\nwe're going to solve this um and we\ncould do some intermediate steps but we\ncan actually just return the\nsolution um or actually no we do have to\ndo some intermediate steps so if we need\na conditional in here we want to say if\nthe number so we're grabbing that from\nthe parameter um and then you know the\ntest cases are going to pass in\ndifferent arguments and then the\nparameter called number just think of it\nas a variable available to this function\num is going to uh be different per the\ntest case so replace that number with\nwhatever argument you have and then what\nwe want to do is write an expression\nthat says the number modulus 2 all right\nso we want to say if that is equal to so\nwe'll use triple equals to check both uh\nthe value and the data type to be the\nsame and we want to set that equal to\nzero so if the number modulus 2 equals 0\nthen we know that it is an even number\nso we'll drop down into our if statement\nand we'll return what we need to return\nbased on the instructions over here\ncalled even all right and then we'll put\nan else statement so we know that if\nit's not even it is odd so we're going\nto just\nreturn odd in that case and let's test\nthis\nout all right we passed all our test\nlet's go ahead and attempt it and we\npassed all of our test so let's submit\nthis answer and see what everyone else\nuh did to answer\nthis I'm sure there's some more clever\nsolution than what I came up with all\nright so this is just using the Turner\noperator um we talked about this very\nbriefly in the operator's video but it's\nbasically just a shorthand uh clever way\nto write an if else statement and we\ncould have used this but I just don't\nwant to confuse anyone\nunnecessarily uh this looks to be our\nsolution um actually there's not not\nmuch variance here so these are just\nabbreviate ways abbreviated ways to\nwrite our function they're just using\nthe arrow functions rather than um our\nclassic function here so um we did\npretty good on that one let's go to the\nnext challenge\nall right we are counting sheep in this\nchallenge let's see what we got\nhere okay we are returning the number or\nthe count of the vowels in the given\nstring we will consider AE IO U as vows\nfor this uh problem but Y is not going\nto be in there okay so that's good to\nknow the input string will only consist\nof lowercase letters and or spaces all\nright so this is another point that I\nreally want to bring up um if you're you\nknow just starting out you're a beginner\nand you're solving problems this is kind\nof how an interview question might be\nlaid out where the last part is going to\ntell you something about the input so\nobviously the the functions that we have\nbeen writing here um they're being\nexecuted by something and that something\nare the automated test um these are this\nis a sample test down here but um\nthere's code that's going to run when we\nactually click this test button this\nsite is going to execute our function\nwith a bunch of different parameters to\nmake sure that we um implemented it\ncorrectly you know you don't want to\njust test it with one set of parameters\nyou want to put in a bunch of different\nthings and with that we could have an\ninfinite number of things passed into\nthis function as arguments and often\ntimes in uh more complex problems and\nand harder challenges they're going to\nchallenge you to handle all of the\ndifferent edge cases that might come up\nand when I say edge cases you know it\nmight be something like okay what\nhappens if I uh pass in uh an undefined\nvalue as my argument or what happens if\nI pass in um you know a number instead\nof a string into this as an argument\nwell all of these things need to be\nhandled by your code so this last\nsentence here is it doesn't seem um very\nuseful and you might even ask like why\nis it here but this is telling you\nsomething about the input it's basically\nsaying to us as the programmer it's\nsaying hey this is only going to give\nyou lowercase letters and or spaces and\nthat's basically saying in other words\nwe're not going to pass in numbers we're\nnot going to pass in undefined values\nnull values Boolean values you know all\nyou need to worry about are you know\nsingle lowercase letters and spaces all\nright so that is very useful information\nit's going to save us a lot of time when\nwe're solving this problem all right so\nit says enter your magic here spelled\nincorrectly at least in English I don't\nknow how spell it in other languages\nanyways um let's see what we got here so\nwe have uh a starting point now one\nthing I'm going to fix here they're\nusing uh the VAR um keyword and in the\nlessons I've basically told you we're\nnot using this and I also stand by that\nso let's go ahead and set that equal to\nlet um because it looks like we're going\nto have to reassign this at some point\nall right so this is actually a fairly\neasy solution um once you've been\nprogramming for a little bit um how I\nsee us solving this is first let's put\nin our input into an array um of some\nsort and then I want to Loop over that\narray\nand check if it's a vow all right so um\nlet's go ahead and do that um there's\nactually a lot of ways that you can\nsolve this but let's just stay\nconsistent with what we did in the\nprevious one so we'll take uh we'll\nwe'll convert this to an array by saying\nstring. split and then we want to pass\nin that empty character so if you\nremember what that does is it takes\nevery letter of the string and it puts\nit out it expands it out into an array\nso going back to this tab um we'll just\nsay you know let's look at an\narray and then or no we'll we'll look at\na\nstring so the string will be hello and\nthen we can just say string.\nsplit and then that's what it's\nbasically going to do here so it's going\nto split it into an array and then from\nan array we know that we can write a\nloop so this is kind of the previous\ncouple videos that we've been talking\nabout loops so we're going to Loop over\nevery single value in that array so to\ndo that we're going to say let I equal 0\nthis is just the syntax we use for uh\nlooping and then we want to go for the\nlength so the array that we just created\nhas a certain length has a certain\namount of characters uh but we don't\nknow that beforehand so we're just going\nto pass in a ray. length and then we're\ngoing to increment I using the increment\noperator\nall right so we're going through this\narray and now we're just going to write\na s uh simple if statement so we'll just\nsay if um let's say we'll grab from the\narray each of the indexes so remember I\nis going to increment it's going to go\nfrom zero to 1 to two to three to four\nand all the way till it reaches the end\nof that array which has the individual\nletters um of this you know input\nargument so we're going to grab that\nlike basically this array um or ARR\nbracket I is going to represent a single\nletter of that array so we're going to\nask whether that equals um any of the\nvowels so there's there's actually some\nreally short ways that you can write\nthis but I'm going to go ahead and do\nthis the clunky you know really drawn\nout way just because it's the most clear\nfor a beginner so we'll say if the array\nor actually we can use this switch a\nswitch statement um as we saw in a\nprevious challenge so the the thing that\nwe want to evaluate is that single\nletter and then we're going to come down\nhere and we're going to say case does it\nequal a all right if it equals a then I\nwant to take this vows count variable\nand increment it by one so that's what\nwe're doing there and then we will break\nout of the statement remember that's\nvery important all right so we're going\nto do this for all of the different vows\nand we're just going to paste this\ncode below here and it's going to get\nall messed up with formatting so let's\nsee and like I said there is a much\nquicker solution um and I'm sure that\nwe'll see someone that used it um but\nthis is you know in the scope of what\nwe've talked about already so I just\nwant to stay consistent with what we've\ntalked about you know not throw any huge\ncurve balls here all right so we're\ngetting to our last one let's pass that\nin we actually don't need a break\nstatement for this last one\nhere and so basically what what's going\nto happen here is we're going to Loop\nthrough this array so basically we're\ngoing to look at every single letter in\nthe array from that original string and\nwe're going to ask does it equal a if it\ndoes we're going to increment the vels\ncount does it equal e increment the vs\nCount and if it doesn't equal any of\nthose the vows count variable is going\nto stay where it is so at the end of\nthis loop we're going to have a total\ncount and then we just return it at the\nbottom so let's go ahead and run the\ntest on this and see what we get you can\nsee we passed one of the tests so let's\ngo ahead and attempt it and we passed\nall five of them so we obviously got\nthis correct so let's submit it guess it\ndidn't submit so let's try that again\nsometimes this is a little bit slow it\nhas to actually run a bunch of tests so\nall right so let's see what we got here\nthe first answer very clever um this\nthis gets into regular Expressions which\nwe haven't even come close to touching\non and I don't want to so we'll skip\nthat um this right here looks um a\nlittle bit similar to what we did so\nthis is actually a double Loop so we're\nactually looping through two different\narrays I really don't want to get into\nto that either because that that will\nmake anyone's braid and spin to be\nhonest um got some more regular\nExpressions\nsee I'm just looking for the one that I\nwas thinking of that would be a lot okay\nthere it is so we looped through this\narray and what we could have done is\njust checked instead of writing out this\nswitch case statement um all we would\nhad to do is put the vowels in an array\nand then we would have to you know take\nthat array and use the includes method\nand then Loop through all the letters\nand check if that letter um was included\nin that vowels array so that's what I\nwas thinking of just a little bit easier\nway to do it looks like this person kind\nof solved it like us but like I said\nthere's a ton of ways to solve each of\nthese challenges you know we can solve\nthem however we want so let's go to the\nnext one um looks like Jenny's secret\nmessage I wonder what Jenny's secret\nmessage is so let's train on this I got\nto take a little break here solving all\nthese these challenges it's tired all\nright here we go so Jenny's secret\nmessage Jenny has written a function\nthat returns a greeting for a user\nhowever she's in love with Johnny and\nwould like to greet him slightly\ndifferent that's romantic all right she\nadded a special case to her function but\nshe made a mistake\nso let's look at the function it looks\nlike we're just trying to edit some code\nhere all right the first thing I'm going\nto do here is just run the test see what\nwe're getting um kind of gives us some\nClues um all right so now let's look at\nthe code let's see what What's Happening\nHere is that we have a single parameter\ncalled name so that's basically saying\nall right this function expects a single\nargument to be passed through it when\nit's executed and that is called name um\nthen we're going to use that name to\nfigure out if we're dealing with Johnny\nif we're not dealing with Johnny then we\ndon't want to add you know um any\nspecialized message we just want to say\nhello to that name so up here this is\nhow we would do that we're just\nconcatenating a bunch of strings\ntogether um so we're saying we have a\nHello string and then we're adding the\nname that is passed in and then an\nexclamation point so this is basically\nwhat we want to return for everyone\nexcept Johnny all right so that's what\nwe want to return there let's space it\nout a little bit and then if the name is\nJohnny we want to return hello my love\nall we have to do here I think is\nreverse these so what's happening right\nnow is we're going through this function\nand it never even gets to this if\nstatement because we're already\nreturning something so basically every\ntime we run this function it's returning\nhello you know name with an exclamation\npoint at the top it never checks to see\nif Johnny is the name because that's\nlike this code block down here just\nnever gets reached so all we have to do\nis cut that from there and put that at\nthe top so if the name equals Johnny\nreturn hello my love so let's go ahead\nand test that and it's going to pass now\nsomething that you might be wondering\nabout right here if you've been watching\nthe videos is this if statement so\nnormally we write an if statement with\nthese brackets and then we would put the\nreturn right in there and that's how I\nprefer to see it but um JavaScript has a\nbunch of little quirks and if you have a\nsimple if statement like that where just\nwhere you're just returning a single\nline you don't actually have to add the\nbrackets that's just a syntactical thing\nthis is totally fine if we run the test\nagain it's it's going to pass and let's\ngo ahead and attempt it so we passed the\ntest let's go ahead and\nsubmit just going through a couple of\nthe possible answers again this is\nanother uh Turner or no it's\nnot yeah this is using a Turner operator\nso it's basically enclosing that Turner\noperator within parentheses and then\nit's putting it in the middle of that\nstring concatenation that we're doing so\nvery clever but it's not something that\nwe need to do totally unnecessary and\nit's honestly not not quite as readable\nas what we have done um all the other\nones these are uh rather simple this is\na nice one this is a good solution if\nthe name is Johnny we return this else\nwe return something else we kind of did\nsomething similar we just didn't add the\nlse statement all right let's go to the\nnext\nproblem the next problem is n divisible\nby X and Y let's see what we got\nhere okay so we got quite a bit of uh\nquite a few examples create a function\nthat checks if number n is divisible by\ntwo numbers X and Y all inputs are\npositive nonzero digits so again this\nlast sentence is useful because it's\ntelling us hey we're not going to throw\nany you know crazy arguments through\nthis function you don't have to worry\nabout handling you know different types\nof data um you know know you don't have\nto worry about uh a string being passed\ninto this data in that case you might\nhave to convert it or just throw an air\nbut in this case all inputs are positive\nnonzero digits so it's going to be from\none to Infinity basically all right so\nhere are some of the examples we might\nas well use these um so n = 3 x = 1 y =\n3 this is true because 3 is divisible by\n1 and 3 all right and + 12 x = 2 y = 6\ntrue because 12 is divisible by 2 and 6\nall right so it's basically you know\nlooking at all these numbers trying to\nfigure out if they're divisible by each\nother all right immediately I'm kind of\nthinking about that modulus operator\nagain because anytime we look at\nsomething that says is it divisible by\num that comes in handy so and then also\nthe other thing that I'm thinking about\ninitially is that it's saying checks if\nnumber n is divisible by both of these\nnumbers so this and is capitalized which\ntells me that we're probably going to be\nusing this and operator at some point so\njust keeping that in mind as we solve it\num again all inputs are positive non\nzero so basically what we're going to do\nis uh we're going to do two different\nmath problems so we'll say result one is\ngoing to do is going to be equal to n /\nX and then then result\ntwo is going to be n / y all right so\nwe're just running both of the math\nproblems and we're getting it into a\nresult variable and then from here all\nwe have to do is basically um divide\nlet's see so let's let's go ahead and\nconsole. log out these results just so\nso that we can see some output that\nwe're\nreceiving so we we will test it\nobviously everything failed um but you\ncan see what we were getting here so\nwe're getting some decimals as we might\nexpect if it doesn't go into it evenly\nnow a good way to check whether a uh\nnumber is a whole number or a decimal is\nusing that modulus operator and if you\nthink about it if we divide a number by\none it's going to always go into itself\nright unless it is a decimal so if we\nwere to let's go over to our play ground\nhere um if\nwe divide this by 1 it's going to give\nus 20 19 / 1 is 19 but\n2.5 / 1 is 2.5 so it's not a whole\nnumber it's a decimal number and because\nof that the modulus operator is not\ngoing to return zero so if we did 20\nmodulus 1 that's zero 19 modulus 1 is 0\nbut\n2.5 modulus 1 is 0.5 so any whole number\nis going to if we do modulus one is\ngoing to return us with zero so we can\nuse that in our solution here so we'll\nsay if Result One modulus 1 equals 0 and\nthen this is where that and statement\ncomes in and result two\nmodulus 1 equals 0 then we know that we\nhave a correct answer so let's see what\nit wants us to return again it\nsays checks if it's divisible\nokay okay so we're returning true or\nfalse so in this case we're going to\njust\nreturn true and then if that's not true\nthen we return false so if the if the\nfirst result the first division problem\nand the second division problem if both\nof those are not equal to zero when we\nuse the modulus operator then uh we\nreturn false down here so let's test it\nsee what we get looks like we passed\nthat's great let's attempt it and you\ncan see that we passed all the\ntest let's see what everyone else was\ndoing here for this I'm going to guess\nthat a lot of people solved it this\nway but but of course there's always\nthese clever folks out here that are\njust solving it in one\nline um this one this is interesting\nright\nhere I'm not going to go into it you\nknow these are these are not totally\nrelevant to us we solved it in a very\nstraightforward way wasn't clever but it\nwas very straightforward and that's all\nwe're asking for here so feel free to\nlook through these let's go on to the\nnext\nchallenge at this point I'm going to try\nto solve these a little bit quicker um\njust so that we can blow through the\nrest of the video I'll Point things out\nas we go of course but um I've kind of\nyou know harked on a lot of the most\nimportant things like how to how to look\nat a test how to think about it how to\nGoogle all that kind of stuff so we'll\nkind of we'll try to speed through these\na little bit faster all right so this\none is return negative in the simplest\nassignment you are given a number and\nhave to make it or in this simple\nassignment you are given a number and\nhave to make it negative but maybe the\nnumber is already negative all right so\nit's kind of implying to us that we have\nto check whether the number is negative\nfirst and then we have to apply some\nsort of operation on it so immediately\nwe know that if we multiply something by\na negative one then it turns it you know\nthe opposite sign that it was so if we\nall we have to do is say if the number\nis less than zero we we know that it's\nnegative so we're just going to return\nthe number because it's already negative\notherwise if it's not less than zero\nthen we're going to return the number\nmultiplied by -1 and that should be the\nsolution right\nthere we passed I think this is going to\nwork it's a pretty simple\nstraightforward answer so again if you\nhave caught on to this when we're using\nthe if else statements um that's an\nopportunity to use a Turner operator and\nyou're going to see that in um some of\nthese Solutions so here is the Turner\noperator at work it's basically the same\nexact thing that we did has a little bit\nof a a different thing so if you can\njust put a negative at the beginning of\nyour variable to flip the sign of it\nthat's just a shortcut in JavaScript um\nbut then there's another solution this\nis actually interesting if you use the\nbuilt-in um math function called the\nabsolute method that's going to turn any\nnumber to a positive value so if we just\nturn everything that we get to a\npositive value and then reverse that to\na negative we're always going to get a\nnegative value so that that is a clever\nsolution and honestly I think that's the\nbest solution if you just thought of\nusing this but of course if you're a\nbeginner you're not going to think of\nusing the math. absolute meth method\nbecause you probably don't know about it\nbut again you can look up these\nJavaScript built-in functions and I'm\nsure that it um this one might not show\nyou yeah so we have the math methods\ndown here and you could um once again\nI'm on tutorials point I just searched\nfor JavaScript built-in functions but we\nhave these math methods and the first\none is the absolute method so it Returns\nthe absolute value of a number and if\nyou knew that you could think of it and\njust use that for our solution so\nanyways like I said we're not going for\nthe most optimized solution we're going\nfor the most straightforward and clear\nsolution for a\nbeginner all right so we're finding the\nsmallest integer in the array for this\none all right given an array of integers\nYour solution should find the smallest\ninteger all right so this looks like a\nperfect opportunity to write a\nloop and you can see in our solution\nhere this this is actually getting us\ninto the concept of classes which we we\nhave not talked about one bit so far but\nbasically um each class is going to have\nyou know several different instance\nmethods um and then the F smallest int\nis actually an instance method so I'm\nnot sure if we we might be able to edit\nthis let me\nsee well as you can see in the test it's\ninstantiating this new class so we can't\nreally do anything about it but I'm just\ntelling you don't worry about the class\nright now all we have to do is e um\nimplement this method and we should be\ngood so within this method we're going\nto get some uh arguments this is\nactually what we would call this would\nbe\nparams um because that's what the prams\nare what we Define within the function\ndeclaration and the arguments are what\nwe passed through it but again in those\nprevious lessons I told you that\narguments and parameters are two sides\nto the same coin and in this case that's\nbeen demonstrated there um we're using\nargs and prms\ninterchangeably all right so we'll just\nchange it to prams to say stay\nconsistent here and then from here we're\ngoing to go ahead and loop through this\narray so the pams that we're going to\nreceive is an array of integers all\nright so and then it says at the bottom\nyou can assume for the purpose of this\nchallenge that the supplied array will\nnot be empty so we don't have to handle\nthe case where it's empty but it doesn't\nsay anything well actually yeah it does\nwe're going to get an array of integers\nso we're good so let's go ahead and um\nassume that the pams is an array so I\nactually want to name this something\neven more\ndescriptive so we'll call this array of\nnumbers just so that we can remember\nwhat we're doing and now we're going to\nmake a for Loop so basic for Loop here\nand let's go ahead and go until we get\nto the\nend of this so we're going to grab the\nlength of that array of\nnumbers and then for each number in the\narray we're going to check if it is the\nsmallest integer so to do this we\nactually have to declare a a variable\nhere that's going to keep track of the\nsmallest integer as we Loop through the\narray so let's just call this the small\nnumber and we're just going to declare\nit because we have not um looped through\nany of the numbers yet so or actually\nyeah let's go ahead and declare it the\nsmallest number that we can possibly get\num it's an array of integers and we\nmight get negative numbers so let's just\ngo ahead and initialize this at zero so\njust for comparison purposes you'll see\nwhat I mean in a second so as we Loop\nthrough this array the way that we're\ngoing to get an individual number from\nthe array is by using this syntax here\nso we're going to grab the array itself\nand then we're going to pass in the\nindex which should be I which is going 0\n1 2 3 all the way till the length of the\narray so that's going to represent our\nnumber and just for clarity I'm going to\ngo ahead and say that so we'll just say\nindividual number equals that so that's\nwhat we're going to do for each loop\nwe're going to um declare and assign a\nvariable for that then we're going to\ncheck and we're going to say if the\nsmallest number is greater than the\nindividual number you also could have\nsaid if the individual number is\nobviously less than um the smallest\nnumber either way works then we're going\nto set it to a new value so if the\nsmallest number is greater than the\nindividual number so the indivi well\nmaybe we should name this something more\ndescriptive so individ ual number uh\narray we'll just say array number that's\na little bit more\ndescriptive I'm sorry this is this is\nnot right even at all I just need to\ntake a little break here from talking um\nso what we want to do is we want to say\nif the array number that we're looking\nat you know in this iteration if this is\nless than the existing smallest number\nthen what we want to do is we want to\nset the smallest number equal to that\narray number so it takes its place as\nthe new smallest number and basically\nwhat's going to happen is as we Loop\nthrough the array um it's going to check\neach number and if it's not smaller then\nit's just going to skip it and it's\ngoing to go to the next iteration of the\narray so we really can come down to the\nbottom of this and return from this\nfunction the smallest number after we've\nlooped through all of the numbers in the\narray let's go ahead and test this looks\nlike we failed some so I think this is\nbecause we didn't handle negative\nnumbers let's\nsee oh actually this is just a mistake\non my part so I initialized this at zero\nbut this is a problem if we have\npositive numbers because if we have an\narray that are you know full of positive\nnumbers so let's say that we had an\narray that looked like this we had two\nwe had five and we had six it's going to\nLoop through all three of these numbers\nand it's going to compare it to our\nalready smallest number of zero and none\nof these are smaller so the smallest\nnumber at the end is going to return\nzero so we need to actually not declare\nthis we're going to actually just\ndeclare it and not assign it and then\nthe first thing we going to do at the\nvery first iteration of the loop we're\ngoing going to set the smallest number\nequal to that first number so we're just\ngoing to say if I equals 0 which\nbasically means we're at the very first\niteration of our Loop we want to set the\nsmallest number equal to the array of\nnumbers and then we want to grab that\nindex of I and actually we can we can\nactually put this below so uh let's get\nthe number that we're talking about\nfirst and then we can replace this\nnow with array\nnumber okay so just to review what what\nI just changed here what we're doing is\nwe're saying we're going to initialize\nthis or declare this variable it's not\ngoing to have a value yet so we have to\nassign it a value on the first iteration\nof our array so um you know the first\nvalue of the array basically and we know\nthat that's always going to be when I is\nequal to Z so first let's get the number\nthat we are looking at in this specific\niteration we'll assign it to the array\nnumber variable and then we're going to\nask is this the first iteration of the\narray if it is I want to set the\nsmallest number variable equal to the\nfirst number in the array so now we have\nsomething to compare against and in the\nsame iteration so still on the first\niteration of this array we're going to\ncompare the array number to the smallest\nnumber they're going to be equal so\nwe're not going to get there it'll go\nthrough and now it should work a little\nbit better for\nus and now we have an infinite Loop\nbecause I'm just getting scatterbrained\nhere and I actually set I equal to one\nwhen I was looking at this conditional\nand that is a big no no because what's\nhappening is now we're going through\nthis for Loop in each iteration of the\nloop we're resetting I to zero\nand therefore we have an infinite Loop\nand that is actually something that\nyou'll stumble upon a lot and infinite\nLoops are not fun so uh make sure you\ndon't make that mistake let's replace\nthis with triple equals which is going\nto actually do a equality comparison we\nshould be better off this time so we\npassed all of them let's attempt it and\nwe pass the test this point I probably\ntake a break cuz I'm getting a little\nbit a little bit fuzzy in the brain here\nso let's submit this and let's just look\nat what other people did obviously\nthere's a better solution in all cases\num but I don't think any of these are at\nthe level that we're at right now at\nthis point I just can't even think\nanymore so I'm going to take a break and\nwe'll come back and finish the rest of\nthe problems the next challenge is\ngrasshopper summation so we'll see what\nthat's all\nabout says write a program that finds\nthe summation the sum of every number\nfrom one to the variable called number\nor num the number will always be a\npositive integer greater than zero\nremember pay attention to this right\nhere we don't have to worry about\nnegative numbers in this case let's just\nlook at an example cuz I I want to go\nthrough that first so if the number is\neight it's just saying go from one to 8\nand add everything together in\nsuccession so the first thing that we'll\nnotice here is that it's only adding one\nso not it's not only adding one but the\nnumber that we're adding only increases\nby one so it looks very similar to a for\nLoop so we can probably write a for Loop\nso let's go ahead and template that out\nso we'll let I equal uh zero to start we\nmight have to change that\nactually and then we'll say I is less\nthan\nnum um yeah I is less than num because\nwe want to go through as many iterations\num as we need to get to num or the the\nvalue that's passed in and then we'll\nsay\ni++ so we start at the value of zero and\nif we add zero to something that you\nknow adds zero so that doesn't matter so\nwe're fine doing that and then it wants\nto go\nuntil I is less than the number so in\nthis case we may have to actually start\nthis at I 1 and then we say I is less\nthan or equal to number so let's go\nahead and do that let's start it at 1\nand then go up to the number and for\nstarters I just want to print this out\nto the console and see what we get so I\nwant to print out I each time in the\nloop and since it's not a very good you\nknow place to do that I'm just going to\ngo over here to my Dev tools console and\nwe're going to paste that in there um um\nand of course num is not defined because\nuh we don't have that in past's a\nargument or anything to the function so\nlet's just put a random number let's put\n10 in there and press enter and what\nwe're going to see is that it counts 1 2\n3 4 all the way to 10 which since we\nstarted it at 1 we get to 10 but if we\nwere to start this at uh zero like we\nnormally do for a loop\nand then we take away this equal sign\nit's going to go from 0 to 9 and if we\nadd all these numbers it's not going to\nadd up to the right sum so it's very\nimportant that we start it at an\niteration of one and then we go all the\nway up to 10 so we put that little equal\nsign we also could have you know deleted\nthat and gone up to less than 11 but you\nkind of get the point just be conscious\nof that now all we have to do is make a\nvariable called the\nsum and we'll uh initialize that at zero\nbecause we start at a sum of zero and\nthen all we have to\ndo is say sum equals sum plus I so when\nI starts at one so we're saying 0 + 1\nthen I increments to two our sum is\ngoing to be stored at 1 so we do 1 + 2\nand then we go I = 3 so our current sum\nis going to be um 3 because we had 1 + 2\nso then 3 + 3 is 6 so on and so forth so\nthat's going to give us our sum another\nway we could write this if you were\npaying attention during the uh previous\nvideo where we went through the\nmathematical operators you can just do\nplus equals and then you can say I so\nwhat this is going to do is it's going\nto take sum and it's going to say what\nis the value of the variable called sum\nand then once it finds that value it\nsays take that value and add the value\nof I to it so this is a abbreviated\nversion of doing that but again I'm\ngoing for readability here so I'm just\ngoing to say sum equals sum plus I\nthat's the most clear way that we could\nprobably write that so then we get to\nthe bottom we've gone through all of our\niterations so the sum variable should\nequal the sum of all of those different\nuh I values so now we just return the\nsum let's see what we\nget we pass both test cases I think\nwe've got\nit all right so we passed all 105 test\ncases not sure why anyone would want to\nwrite 105 test cases for this but\nnevertheless let's submit our\nanswer all right let me just check to\nsee where we are within\nthis series we'll go to\ncollections all right so we are on\nget the mean of an array so let's see\nwhere we are\nhere all right so we're right here we\nhave one two three four five six seven\neight left all right not bad let's go\nahead and train on this so get the mean\nof an array all right the instructions\nsay it's the academic Year's End fateful\nmoment of the school report all remember\nthat the averages must be calculated all\nthe students come to you and entreat you\nto calculate their average for them easy\nyou just need to write a script all\nright when they say a script that's\nbasically just saying you need to write\nsome code return the average of the\ngiven array rounded down to its nearest\ninteger the array will never be empty so\nyou're always going to get a number in\nthis array and it says round it down and\nwhat I'm going to think about\nimmediately is we going going to use one\nof those utility functions or the\nbuilt-in JavaScript functions so how do\nwe round a number down let's go to the\nbuilt-in functions we're already looking\nat the math\nmethods and we can see that if we uh\nlook at the floor method or function it\nsays it Returns the largest integer less\nthan or equal to a number so basically\nrounds it down so math. floor is going\nto round our numbers down and if we go\nto the console here let's go ahead and\nclear this because we got so much stuff\ngoing on and if we say math. floor um\nand then pass in a number\n2054 it's going to give us 20 so it just\nrounded it down so that's basically the\nround down function we're going to use\nthat in our practice or our challenge\nhere um this is kind of a useless\ncomment once again this marks marks\nright here I don't like the name that\nthey've given this so I'm going to\nrename it uh cuz we can name our\nparameters anything that we want so I'm\ngoing to say uh score array so we're\ngoing to have all the test scores or\nwhatever scores we're doing here now\nwithin that array um let's see what do\nwe have to do again we have to get the\naverage okay so what is the average the\naverage is going to be the sum of all\nthe numbers\ndivided by the count of all the numbers\nall right so that's your average formula\npretty simple there so to get the count\nthat's the easy part we'll just say the\nscore\narraylength so that's going to give us\nhow many numbers are in this array and\nthen for the sum unfortunately this is\nsomething I know from uh just writing\ncode there is no uh sum function of an\narray like built into JavaScript so if\nyou were to go to Google um let's go to\nGoogle and search how to sum values in\nArray\nJavaScript and let's go to stack\nOverflow um you can use this uh method\ncalled reduce and then you can actually\nuse an arrow function um but this is\nrather complicated and it's not really\nat the level that we're trying to be at\nright now right now we're just trying to\ndo it in the most straightforward way\npossible and this kind of comes later\nwhen you're more experienced writing\nJavaScript code so in our case we can do\nit a little bit easier with a for Loop\nso all we have to do is write ourselves\na\nloop started at index of zero we want to\ngo until we've hit all the numbers in\nthe\narray so we can actually in this case\nwe've already gotten the length of the\narray so all we have to pass in here is\nthe variable count that we stored that\nin so that's a way to simplify your code\nand then finally let's break down\nhere all right so we're going to Loop\nthrough each of these and what we want\nto do is add them all together so kind\nof similar to the last problem we did\nbut in this case we want to\nassign um so we don't want to count uh\nwe don't want to say the same variable\nso we'll say the sum equals z right now\nand for each iter ation we're just going\nto say sum equals the existing sum\namount so it starts at zero and then\neach time we iterate through the array\nto the score array we're going to grab\nthat individual number that we're\nlooking at and add it to the existing\nsum so now we get down here to the\nbottom we have the count and we have the\nsum so let's go ahead and just return\nthe average which is going to be the sum\ndivided by the count let's see what this\nresults in\nall right so we passed two of them but\nwe failed one of them and the reason is\nbecause we forgot to round down I forgot\nthat requirement so all we need to do is\nsurround this with the math. floor\nfunction and that should return the\nright answer I could have broken this\nout onto the uh another line just for\nSimplicity so we'll say the average is\nthe sum divided by the count and then we\ncan say rounded\ndown equals math. floor and then pass in\nthe average so take the variable we just\nassigned here and then we just want to\nreturn the\nrounded down variable and that should\ngive us the same answer hopefully we get\nthis right this time and we did let's\nattempt it we should be able to get this\nawesome so that's just how we would\nsolve that problem so as you can see\njust to take a slight break and and\nreview what we're doing here um a big\npart of solving these problems is um\nobviously getting the instructions right\nand understanding what type of input\nwe're going to be receiving into this\nfunction the second part um with these\neasier um these easier challenges we're\ngoing to do a lot of um looping through\narrays and stuff like that and that is\nactually really consistent with the real\nworld um when we're writing code and\nbuilding apps we're going to be doing\nyou know stuff like this quite a bit\nwe're not going to be solving useless\nproblems like this but we're going to be\nlooping through arrays a lot and setting\ncounter variables and sum variables all\nthat kind of stuff so this is actually\ngoing to be testing us on on very useful\nskills that you're going to use in the\nfuture all right so if you remember from\nthat stack Overflow question they're\ntalking about reducing it um to get the\naverage and you can see that that's\nexactly what the the top solution or I\nguess the the best practice solution is\ndoing um it's it's basically using\nmarks. reduce so this is going to get us\nthe average then we're going to divide\nit by the length and then we're going to\nput it to the floor so basically uh\nround it down so that's that's what I\nwas talking about with this stack\nOverflow solution honestly if you ask me\nit's kind of weird that the array uh\narrays don't have an average method\nseems like a very common one to have but\nnevertheless we don't so\nall right so this challenge looks like\nwe have a picture to look\nat let's let's do some rock paper\nscissors okay so it says let's play you\nhave to return which player won in case\nof a draw return draw okay and this is\njust a reminder of how rock paper\nscissors works I think most people would\nknow that um immediately when I look at\nthis I'm not a huge fan of this so we're\nnaming the variable that we're storing\nthis Arrow function in as RPS or rock\npaper scissors um I'm going to just\nrename this\nbecause we need to\nhave meaningful variables here so we're\ngoing to name it rock paper scissors\nspelled out and then P1 and P2 again\nthese are not very um uh descriptive so\nlet's replace those parameters with\nsomething that makes more sense so uh\nplayer\none and player two all right so now\nwe've got this written out I like this a\nlittle bit better now let's go through\nour different cases so first thing you\nmight want to do is write some pseudo\ncode so pseudo code is basically um you\nknow just writing out like logically how\nthis should work and maybe this isn't\neven considered pseudo code but let's\nwrite out all of the different scenarios\nthat we can have so uh we'll say rock is\nour\npaper is p\nand scissors is s all right so for\nplayer\none over here and then player\ntwo and then the result so let's go\nahead and write these out um we have\nplayer one we'll do rock and then since\nthere's three different possibilities\nwe're going to have just a matrix of\npossibilities so we'll rock rock rock\npaper paper paper scissors scissors\nscissors okay so that's all of the\npossible plays that player one can do\nand then obviously we will go through\nwith player two over here and we'll\nalternate so we'll go\nrock\npaper scissors and then again we'll go\nrock\nokay so in this comment we've written\nout all of the different possibilities\nand who's going to win in each case so\nyou can see that there's three draws um\nthree times where player two wins and\nthen three times where player one is\ngoing to win as we might expect so how\ncan we convey this what we're seeing\nright here in code and to answer that um\nthere's there's a couple methods that\nyou can go about doing it but once again\nI'm going to try to go with the simplest\nmost straightforward and easy to read\nmethod so seeing this written out like\nthis where we have all these different\nscenarios I think that we can say that\nwe're going to go with player one and\njust have three if statements so if\nplayer one chooses Rock if player one\nchooses paper or scissors so we'll just\nput out those if statements real quick\nso we'll say if player one equals\nRock and then we're going to copy that\ndown okay so we got rock paper scissors\nso these are the three scenarios for\nplayer one and then for player two um\nwe're obviously alternating between\nthese so let's say uh player one plays\nRock so um we could probably put a\nswitch statement in here but I don't\nknow if we need to so we'll just say if\nplayer\n2 equals\nRock then that's going to be a draw so\nwe're going to return\ndraw then we'll say if player\n2 equals\npaper then that is going to be\nreturn player 2 one\nand then finally if player 2\nequals\nscissors then in this case return player\none one okay so now we can basically\njust copy these same three down into\neach of\nthese and this is going to work so uh\nthis one's complete let's just fill out\nthe rest of the results so if player one\nuh chooses paper player two chooses Rock\nit's going to be player\none so if we're going paper against\npaper it's going to be a\ndraw and then player two for that last\none all right and then scissors versus\nRock so we're going to say player uh two\none this one will be player one and then\nthis one will be H\nraw let's go ahead and test\nthis looks like we failed um and it's\ncomplaining that RPS is not defined and\nthat's just because I changed the name\nof the function at the beginning of this\nwhich I guess I can't do after all but I\nwould not prefer to see it like this it\nshould be more descriptive so let's go\nahead and test that and it looks like\nall of them passed so we fulfilled all\nof our different scenarios that we wrote\nout for ourselves but I can guarantee\nyou that there is a more efficient\nsolution because in many cases we have\nlike overlapping scenarios but if you're\njust thinking about this logically and\nyou want the the easiest thing to read\nthat you know even a beginner could go\nthrough and understand what it's doing\nthis solution works okay so let's\nattempt it we passed our test and let's\nsee how someone who is going to optimize\nit a little bit more would have solved\nthis\nproblem okay so here's the first\none so it's saying if P1 is equal to P2\nthen we return a draw so that eliminates\nthree of our scenarios that we had to\nwrite out in separate if statements so\nthat's already reducing our amount of\nCode by a lot then what they're going to\ndo is they're going to put the rules\nwithin um an object which is actually\nquite interesting so they're basically\nsaying that for one player here is the\nrule so rock is always going to beat\nscissors paper is always going to beat\nrock and scissors is always going to\nbeat Paper so that's very interesting\nhow they're doing that and then um\nthey're saying if P2 so player two is\nequal to the\nrules so it's\ngrabbing whatever player one responded\nwith and and then it's going to grab the\nvalue of that and compare it to what\nplayer two uh responded with yeah so\nthis is a very very smart solution very\nefficient um but at this point after\nsolving how however many we've solved\nhere 20 or so my brain's a little shot\nand we're going with the simple answer\nhere now this is something a little bit\ncloser to what we might have been able\nto do so we could have combined the\nconditions into Expressions so rather\nthan separating it out into a bunch of\nif statements we could have combined\nthem together this is how we kind of\nstarted doing it so obviously there's a\nlot of solutions to this problem all\nright this next one looks relatively\nstraightforward oh it says it's pretty\nstraightforward so your goal is to\ncreate a function that removes the first\nand last characters of a string you're\ngiven one parameter the original string\nyou don't have to worry with strings\nwith less than two\ncharacters okay so this is going to be a\ngreat um time to use one of these\nbuilt-in functions so let's go to the\nstring Methods and see what we have\navailable to us and string so this is\nwhat we're looking at um so we could use\nthis character at um because we could\nspecify the end of the string and the\nbeginning of the string with zero and\nthen you know we could find the length\nof the string to find the last character\num that seems a little bit indirect\nthough um let's see we can also return a\nsubstring this is actually going to be\nthe most direct route here so a\nsubstring is going to return the\ncharacters in a string beginning at the\nspecified location through the specified\nnumber of characters okay so I'll show\nyou how we're going to use this um but\nfirst let's kind of get an idea of how\nit works so if we have a string and that\nstring is hello what we can do is say\nstring. substring\nand maybe I want to start at the very\nbeginning which is going to have an\nindex of zero now we haven't really\ntalked about this we've always talked\nabout arrays having indexes but strings\nalso do as well you can think of each\nindividual character within this string\nas being a separate index so H is going\nto be an index of zero E1 L2 so on and\nso forth so if we're starting at index\nof zero that means we're starting at h\nand then the next uh argument that we\nget to pass in according to the\ninstructions um that we looked at here I\nkind of know how to use this already but\nyou could click on here and it's going\nto say we're going to pass in what we\nwant to start with and then the length\nthat we want to grab so let's go ahead\nand grab two characters from this string\nso we start at H and then we grab two\nfull characters starting there and we\nget he so if we would omit this we're\njust going to start at zero or start at\nthe beginning and get all of the\ncharacters but if we replace this with\none we're going to get all the\ncharacters except for that first one so\nwe're actually um partially to our\nsolution we've got the first character\nremoved now we have to figure out how to\nremove the last character and to do that\nwe have to figure out how long the\nstring is in total and to find out how\nlong the string is is I believe there\nmight be I think there's a method for\nthat or a\nfunction so there should be yeah string.\nlength so let's try that\nout um let's get rid of this and we'll\nsay string. length is equal to 5 so if\nwe know the length of the string and we\nknow that the string starts at an index\nof zero we then know where our substring\nis so all we have to do is say uh\nstring. substring we want to start at\nindex of one one because that omits the\nfirst character of our string and then\nwe want to end or not end we want to\ngrab how many different letters well we\nwant to grab let's see the string.\nlength\nminus uh what would it be\ntwo yeah it would be two because we've\nremoved the first letter and we want to\nremove the last letter so we want to\ngrab just the total length of the string\nminus 2 okay so that is our solution\nright there let's just go ahead over to\nour problem and write it out so this is\npretty easy we just return string.\nsubstring or maybe we can break this out\nso that it's you know clear as day for\nyou uh length of\nstring is going to be equal to string.\nlength and notice how I have not added\nthese parentheses at the end that is\njust the nature of this function and I\njust know this by experience but you'd\nfigure it out uh probably by Googling it\nor at some point after you try doing\nthis so let's say we try to do this as\nwe would think this makes logical sense\nbut it's going to say string. length is\nnot a function now go ahead and copy\nthis just copy this and paste it into\nGoogle and you're going to get stack\nOverflow answer that tells you how to do\nthis and it says oh you have to use just\nlength and you don't have to add those\nparentheses so that's how might figure\nthat out on your own but I happen to\nknow that that is how we write it so\nstring. length and then we need to get\nthe substring so we'll just return that\nstraight away string. substring we want\nto start at the first character or\nactually the second character and then\nwe want to get the length of string\nminus two\ncharacters okay so let's see what we\nget pass the test as we expected\nokay let's submit\nit now as you can see there's a maybe\neven simpler way to do this so we can\nuse the slice method um if we go to the\nbuilt-in functions if we would have\nlooked so we grabb the substring method\nbut there is a slice method uh which is\nright above it so extracts a section of\na string and returns a new string well\nin this case I was just not being smart\nI overlooked that and didn't realize but\nif you just read through these this\nwould obviously be a better selection\nthan substring but it does give us the\nidea that you can solve this in multiple\ndifferent ways and I'm sure that at some\npoint yep down here someone solved it\nthe way that we solved it um in this\ncase they're doing string. length minus\none which is very interesting oh so this\nis actually not the same so substring is\ndifferent than the one that we used as\nyou can see we have the one that we used\nused and then substring so these are two\ndifferent methods they work kind of\nsimilar a little bit different so that's\nwhy that one works that way but you can\nsee that uh this person used exactly\nwhat we did so multiple ways to solve a\nproblem let's see if we can blow through\nthe the last couple of these so let's go\nto sum of positive you get an array of\nnumbers return the sum of all of the\npositive\nones okay\nso we're going to Loop through\nthis we're going to grab\nevery number from that array and then\nwe're going to say\nif the individual number that we have\ngrabbed is greater\nthan um or no yeah we'll say greater or\nequal to\nzero um I guess we don't even need that\nwe just say greater than zero then we\nwant to sum it but we need to have a sum\nvariable so let's initialize a sum\nvariable and set it equal to zero and\nthen we'll say if it's a positive number\nwe're going to say sum equals sum plus\nthe number that we're using there and\nthen at the bottom we just return the\nsum variable and we should get the\ncorrect\nanswer passed it all this is pretty\nsimilar to a previous question that we\ndid\nuh in this video so we'll submit\nthis as you can see this is uh a well-\ncommented solution that is kind of the\nsame thing that we just did so we didn't\ndo too bad now obviously you can use a\nsimpler method so reduce similar to how\nyou'd find the average of an array um\nbut once again this is this is pretty\ncomplex like you're using a pretty\ncomplex um function on an array and\nyou're using a Turner operator within\nhere so that's you know that is\noptimized to the\nmax so we got some basic mathematical\noperations let's go ahead and go here it\nsays your task is to create a function\nthat does four basic math operations it\nshould take three op oper or arguments\nso we want the operation which is going\nto tell us are we adding subtracting\nmult multiplying or dividing and then\nthe two values we're doing so this is\nthis is rather simple um this person has\nformatted this function a little\ndifferently than we're used to this is\njust a different way to format it I'm\njust going to bring it back to how we're\nused to seeing it doesn't really matter\nokay so the basic operations so the\nfirst thing we want to do is write a\nswitch statement you're probably getting\nused to this at this point and for the\nswitch statement we want to pass in the\noperation so it's going to evaluate that\nand see what the operation is and in the\ncase that the operation is a plus we'll\ndo something add a break statement and\nthen we'll fill in the rest of these\nwith case\nstatements then I believe all we have to\ndo is just fill these in so we can\nreturn uh from here or we could set it\nequal to um you know a variable so since\nwe added the break statements let's go\nahead and just initialize a variable we\nwe'll call it\nresult and we're going to say the result\nis equal to Value 1 plus value\ntwo we can copy this same line down\nand then at the end we can return the\nresult whatever we get so let's indent\nthese correctly doesn't really matter\njust for readability and then we'll just\nchange the sign here so we can put a\nminus sign here we can put a\nmultiplication sign here and a division\nsign here all right let's go ahead and\nattempt\nit all right that\nworked I have a feeling that someone\nsolved this in one line\nwe'll see this is how we did\nit yep right here so this this is very\num simplified but let me explain what\nthis is doing so if we type in eval\nlet's look at uh JavaScript\neval and we're going to learn about this\na little bit so what this does the eval\nfunction evaluates or executes an\nargument so if we have three uh\narguments passed in we have the\noperation we have the first number and\nthe second number and it's always going\nto be the same um for each one so each\none we're just substituting this\noperation well you might think oh hey\nlet's or let's go ahead and train again\non this one so that I can show you\nexactly what I'm talking about so let's\ngo up\nhere and in this case we might just say\nreturn the or the value one and then the\noperation and then value two now this is\ngoing to obviously not work that's not\nvalid JavaScript right here and all\nwe're trying to do is we're trying to\nturn this operation into a JavaScript\noperator and all we have to do to make\nthat happen is surround it in this eval\nstatement right here and basically what\nit's going to do I believe you separate\nit by comma separated values\nor no you put it in one big string so\nlet's go ahead and create our uh string\nso our\noperation string is going to equal value\nOne Plus operation plus value two um and\nin this case some of these are going to\nbe numbers so we yep that should work\nbecause value one is a string so\neverything else is going to be um\ncoerced into a string so that should\nwork so operation plus value one value\ntwo and then I want to just console. log\nthat so that we can see what it\nrepresents here so we'll console log\nthat and comment out this return value\nfor just a second so let's test that and\nyou're going to see that the console log\nis giving us the following operations\nhere and if you you know look at these\nthese look like you know valid MTH\noperations but right now we just have\nthem as a string but once we enclose it\nin uh the eval function so we say eval\nand then we pass in our operation string\nit's going to evaluate that string so in\nother words it's going to evaluate the\nstring of 4 + 7 and then we can just\nreturn the\nresult and this should work the same as\nour much longer code that we wrote\nso let's let's go back and just see what\nthat one person wrote there they just\nyou know abbreviated everything but did\nthe same exact thing so just another way\nto solve it more efficient next up we\nhave a string\nrepeat write a function called repeat\nstring which repeats the given string\nSource exactly count number of\ntimes okay so this is what we're going\nto get they're going to pass\nwe want to repeat it six times or five\ntimes and here's the string that we want\nto\nrepeat this is another classic example\nof where you can use um a loop so we'll\njust set a loop equal\nto\num just the basic\nsyntax we want to go until I is less\nthan the I is less than n so let me\nreplace these number of repeats\nand then the string that we want to\nrepeat so number of\nrepeats okay so We're looping through\nthis and let's go ahead and make a\nstarter\nstring and we'll just set that equal to\njust an empty string here now all we're\ngoing to do is concatenate strings as\nmany times as this Loop goes so we'll\njust say starter string equals whatever\nexists in that starter string plus the\nstring value and this should return the\ncorrect answer for\nus it works pretty consistent with what\nwe've done in previous problems with the\nloop and then we have a variable up here\nthat Stores um some sort of value that\nwe later return after we've modified it\nseveral times with values in a\nloop and of course there's a an easier\nsolution so you can see down here that\nwe can just use the repeat function I\ndidn't actually know this was a function\num but if you go to the string Methods\nthere should be some sort of\nrepeat so let's see not seeing it right\nnow what are they doing\nhere so that is a string\nmethod did I miss\nit let's search for it on the page\ndon't see it here this might be a new\nmethod okay so maybe maybe use W3\nschools it's more updated that must have\nbeen a recently added method of some\nsort\nyeah it looks like this came out in\nes6 which is the newest version of\nJavaScript uh spec so that's probably\nwhy it's not on the other site there\ninteresting so you can use a repeat\nstring to uh repeat a string number of\ntimes very interesting okay go to the\nnext\nproblem convert a string to an array\nthis should be very easy because we've\nalready done it um at least I think\nwe've done so many problems at this\npoint I think all we have to do is say\nstring\ndo uh split and then we split it with an\nempty\ncharacter oh that's not how we do it\nokay uh we\ndon't want to split it like that so\nlet's\nsee oh oh okay so we want to split it by\nspaces so there's a space in between\nthese words so all we have to do is\npress the space bar in between these\nquotes and it adds a space in here that\nwe want to split it by and this one does\npass you can see that pretty much\neveryone solved it the exact same way\nhere\nshould be getting to the end of these\nproblems here congrats if you are still\naround and solving these problems with\nme I would presume that uh very few\npeople would\nbe so remove string\nspaces so remove the spaces from the\nstring then return the resultant string\nnow this one feels like there is some\nsort of built-in method that we can use\nuh since we didn't find the newer\nmethods on tutorials Point let's go to\nuh W3\nschools I'm thinking something called\ntrim yeah like trim might do this says\nremove white space from both sides of a\nstring I think that's what we're looking\nfor here so let's go ahead and return X\nwhich should be a string like I don't\nknow why they're calling it X here just\ncall it a string so string.\ntrim see what that\ndoes uh this is not going to work looks\nlike there's some numbers uh put in\nhere and it looks\nlike the trim method is only going to do\nthis at the end of the string so let's\ntry this out in our uh Dev console\nlet's do a test\nstring uh string that has spaces\nbetween oh I'm just blanking out\ncompletely I got to name this variable\nso string equals that sorry about that\nI'm kind of losing it here all right so\nif we use string.\ntrim it looks like what's happening is\nit's only removing the spaces at the end\nkind of as this um tells us so I wonder\nif there's another\nmethod don't know if there\nis so what we're going to do is we're\njust going to combine the methods\ntogether so first maybe we put this into\nan array so we'll say string dosit and\nwe want to split it by a space so now\nthat we have um everything split out now\nwe want to go through each of these in\nthe\narray um and we want to remove the white\nspaces around them so let's let's go\nahead and write this code out and see\nwhat we\nget so we'll turn it into an array so\nwe'll split it by spaces and then we're\ngoing to Loop through this\narray as we've been doing\nand for each item in the array we're\ngoing to uh remove the spaces around it\nand we're actually going to build a new\narray so this is going to introduce the\npush method so uh we'll say new array.\npush and what that's going to do is add\nan element to the end of the array so\nright now it is an empty array and we\ncan push items into the array and what\nwe want to push is going to be the\ntrimmed version\nof each string that we have or each\ndifferent array item which just happens\nto be the subsets of that original\nstring so in this case we'll say trimmed\nstring just breaking this out for\nclarity is going to be um equal to the\nuh what are we looking at so the\narray at index\ni. trim so now we know that this string\nis trimmed together there are no spaces\nanywhere\nand now we're going to push this into\nthe array so at this point let's go\nahead and console.log that new array\nthat we're\ngetting so let's test that and you're\ngoing to see that we have an array in\nevery case that's going to have you know\nthe characters with no spaces around it\nand in this case it's just an empty\nstring that's not even a space or\nanything so if we combine that it's not\ngoing to add any spaces of any kind\nat this point we can use um a method\ncalled join so all we have to do is um\nour final string is going to be equal to\nour new array. jooin and we want to join\nit by that empty character there and at\nthis point we can return the final\nstring and I think that that should\nsolve the\nproblem all right so we passed it looks\ngood okay I think we're we're closing in\non the end\nhere beginner lost without a map given\nan array of integers return a new array\nwith each value doubled okay so there's\nactually um it says for the beginner try\nto use the map method and this is\nbasically just saying um to you as the\nbeginner like hey you could solve this\nin you know an easier way but go ahead\nand try to use the map method so we'll\nwe'll do that we might as well so we're\ngoing to get uh some array I'm just\ngoing to rename that so that it's not\nundescriptive and then we're going to go\nand look at the map method and this\nactually belongs to arrays so we go to\nJavaScript arrays and then we go down to\nthe array methods or functions and\nyou're going to see this one called map\ndown here and what this map um function\nis going to do is it's going to take the\noriginal value in the array and it's\ngoing to apply a transformation to it\nand that transformation is just\nbasically going to return a brand new\narray where every unit of that array has\nbeen transformed so previously we have\nbeen going through these for loops and\nstoring things in variables and in\ncreating new variables and stuff like\nthat but we could always use this map\nmethod um so let's go ahead and try it\nso we're going to return the array. map\nand then in this case we actually have\nto pass in an Arrow function so this\nthis is what we call like a a call back\nfunction we'll get into this uh a little\nbit later but we're going to have a\ncallback function so this right here\nlet's just break it out you know into a\nseparate space so you can see what we're\ndoing so all we're doing is writing an\nanonymous function or a arrow function\nand then within that Arrow function\nwe're going to break down into the new\nline and we're going to return a value\nso this is a very weird um setup here so\nI'm actually going to um I'm going to go\nahead\nand remove this so I'm going to say our\nresult array is equal to whatever this\nmap function returns and then we're\ngoing to return the result later so that\nwe don't have that weird syntax so\nbasically whatever we return from this\nmap method or this this function that's\nactually embedded within the map method\num whatever we return is going to be the\ntransformation and then whatever we pass\ninto it so um we can just provide a\nparameter so uh array item is going to\nbe what's going to be passed in into\nthere as an argument so we're going to\njust say array item multiplied by two\nwhich is what they want us to do with\neach value so this is going to return us\nan array with the values doubled in it\nand we return the\nresult we passed um I would suggest\nreading up on that method trying it out\na little bit but just realized that what\nwe've done here is we've put a function\nwithin this other function that takes\nthat function as an argument so um to to\nsummarize this we've basically passed in\na function as an argument to another\nfunction and then that function actually\nexecutes our function that we passed in\nso it's it's a bit of a tongue twister\nbut you will understand this with due\ntime and I would definitely put this on\nyour radar as something that's very\nuseful in\nJavaScript at this point I'm doubting\nmyself for picking 25 problems this is\nexhausting but again congrats if you're\nstill around um let's keep\ngoing all right is he going to survive a\nhero is on his way to the castle to\ncomplete his mission however he's been\ntold that the castle is surrounded with\na couple of powerful dragons each Dragon\ntakes two bullets to be defeated our\nhero has no idea how many bullets he\nshould carry Assuming he's going to grab\na specific given number of bullets and\nmove forward to fight another specific\ngiven number of dragons will he\nsurvive return true if yes false\notherwise\nokay so basically what this is saying to\nus is that we don't know how many\nbullets are coming and we don't know how\nmany dragons are coming either but we\nstill have to figure out if this hero is\ngoing to defeat the dragon so let's see\nhow we do that the rule is this each\nDragon takes two bullets to be\ndefeated\nokay so basically what we could say is\nif the bullets is double or more than\nthe amount of dragons then we return\ntrue so we'll basically just say in in\nthis case let's go ahead and use the\nTurner operator I know it's late in the\nvideo brain's probably fried at this\npoint but let's use the ternary operator\nwe'll store it in a result variable so\nwe'll say if the\nbullets divided by dragons is greater or\nequal to two then we're going to return\ntrue otherwise we'll return false and\nthen we can just return the result but\nwe don't even need to do that we can\njust return that tary operator\nso let's go to the\nbeginning and hit return so basically\nwhat it's doing is it's looking at this\nexpression and it's uh evaluating\nwhether that expression is true or false\num and then if it's true we return true\nif it's false we return false so there's\nactually some duplication going on here\nwe don't even need this Turner operator\nin the first place all we have to do is\nreturn that expression because if this\nuh evaluates to true then the hero\ndefeats the dragon if not then we return\nfalse so we should be able to just do\nthis you passed it and it works so\nthat's how you would solve this in the\nmost simple way possible and honestly\nit's just a math problem plus uh\nJavaScript expression with some\noperators array plus an array so let's\ntrain again I'm new to coding and now I\nwant to get the sum of two arrays\nactually the sum of all their elements\nI'll appreciate for your help huh it\nlooks like this person was not writing a\nchallenge they were asking a question\nokay PS each array includes only integer\nnumbers output is a number\ntwo maybe they weren't asking a question\nvery very weird wording for\nthis okay so this is not going to work\nlet's go ahead and test it as it's\nwritten you can't just add an array\ntogether um but what you can do is you\ncan Loop through each um value of the\narray and this is actually a perfect uh\ntime to talk about embedded for Loops\nlet's go ahead and do that first we're\ngoing to write our outer for Loop which\nis just what we've been writing all this\ntime so we're going to say until I is\nless than array1 or array one. length\ni++ and then we go into it okay but we\nalso want to grab um the values of array\nto so basically what we're trying to do\nhere let's say that we have an array of\n1 2 3 and an array of\n2 3 4 our resultant array should be 3 5\n7 because we added uh we added the\nnumber at index zero for both arrays\nthen we added the number at index one\nfor both arrays and then we put it into\na new one so that's what we're going for\nI'm going to leave this down here for a\nsecond just for our reference but in\nthis first Loop all we're able to get is\num actually we don't we don't need an\nembedded for loop I don't know what I\nwas thinking there all we have to do is\nthis we just have to say um array one\nvalue is going to be equal to array 1 I\nand then we can come down and say array\n2 value is is array 2i all right and\nthen we want to uh say added value\nsomething like that so we'll say array\none Value Plus array 2 value that gives\nus the sum and now we want to start\nbuilding a new array so new array equals\nsomething empty and like we did in a\nprevious uh problem we can use the push\nmethod to push a new value to that array\nso we'll just say the added value here\nand now when we get done with this for\nLoop right here we should have this new\narray populated with our new value uh\nwhich should be this resultant summed\narray so let's return the new\narray and see how it\ngoes looks like we failed in in a lot of\ncases okay let's see why\noh so I misinterpreted this question\nentirely uh we want to\nactually give a single number okay so\nI'm new to Okay blah blah\nblah so we got two arrays we want to sum\nall of their\nelements okay so we don't need a new\narray we just need a sum variable which\nis going to start at zero so the added\nvalue we can keep that then then we can\njust say the sum equals the sum plus the\nadded\nvalue and then\nreturn the sum at the\nend this time we passed it okay just m\nmisread the question and honestly I I\ndon't know if this was the best question\nto\nchoose I think this is our last uh easy\nquestion coming up maybe so all right so\nthis one has some nice clear\ninstructions that's nice so the\nintroduction the first century spans\nfrom year one up to an including the\nyear 100 the second from year 101 up to\nand including the year 200 the task is\ngiven a year return the century it is in\nso the century of 1705 Returns the 18th\ncentury okay I mean this is just uh\npretty basic so let's go ahead and\nsolve\nit now it looks like the catch here is\ngoing to be these two examples so 1900\nis going to be the 19th century while\n16001 is going to be the 17th so like it\nsays if it's you know one greater than\nthe even year then we go up a century\nokay I believe we can use some sort of\nmodulus operator\nhere let me try um so let's let's let's\nsay that we have a century of\n1901 um let's go ahead and do modulus\nwe'll just start with\n100 okay so 100 goes into\n1901 a uh well it would be what 19 times\nwith a remainder of\none but if we had\n1900 modulus 100 we get\nzero okay so that's interesting so what\nwe could do is we say if the Sentry we\nhave modulus 100 returns a zero then we\nwant to just grab the first two letters\nor first two digits of that number and\nreturn it so in this case 1900 we just\nwant to return 19 I\nbelieve right so we just want to return\n19 so let's just say that this is this\nmay be a bad solution but let's try it\nso if the year modulus\n100 equals\n0 then that means it's an even uh even\nsentury so we're going to just say we\nwant to return the first two digits and\nto do that um we can um let's go ahead\nand look at some of the the number\nvalues\nokay so pretty much what we're going to\nhave to do is we're going to have to\nconvert it to a string grab the first\ntwo you know digits or characters and\nthen convert it back to a number this\nmay be an indirect way to do it but\nwe'll try it anyway so we'll say year\ntwo string then I'm going to chain um\nchain something on here and I want to\ngrab the substring in this case I want\nto start at zero and grab two characters\nand then I want to turn this entire\nthing into a number so we'll just cast\nit into a number this way and let's go\nahead and test that to see if we solved\na couple of these excellent so we solved\nthe ones where it's an even now if it's\nnot then we know that it's not an even\nyear so it's always going to be one\ngreater so 1705 returns 18 so again we\ncan grab that substring so we're going\nto grab first two digits it's going to\nbe equal to the year two\nstring substring 02 so that gives us the\nfirst two digits and we want to keep\nthat as a number and since we're\nrepeating ourselves here let's go ahead\nand put this at the top of our code and\njust get that from the very beginning\nand now we can take this expression here\nand\nreplace it in here so all we have to say\nis first two digits so now that works\nthe same we're turning that into a\nnumber but down here what we want to\nFirst do is we want to return a number\nof course um well it's already okay\nnever\nmind so this is going to give us a\nstring we need to return a number so um\nthe first thing we need to do is turn\nthat into a number by saying first two\ndigits and then we want to add since\nthis is a number then we want to add one\nso I think this may work\nactually okay so the problem here is the\ntest for year 89 since we're doing\nmodulus 100 of course this is not going\nto work if it's less than\n100 so in this one Edge case we could\njust put this at the top at the very top\nand say if the year is less than\n100 we just return one so that takes\ncare of that case and we test it should\npass all of them we'll see if it passes\nall the\ntest okay so clearly that was not that\nwas a quick fix solution it didn't\nactually solve our greater problem so\nlet's dig in to see what we're dealing\nwith here obviously there are larger\nnumbers num at stake and much smaller\nnumbers at stake so our uh attempt at\nusing modulus 100 is not going to work\nvery\nwell so I believe our solution may be\nclose I'm actually going to go ahead and\nsee if there's something in the\ndiscussion down here so you can always\nlook at the comments and\nsuggestions to see what other people are\nthinking\nabout um we'll see\nokay these are very\nuseless okay so this is not really\nhelping us that\nmuch at this point my brain's so fried\nwe're going to go ahead and search this\non Google stack\nOverflow uh we'll just\nsay\nCentury from year\nJavaScript stack Overflow just curious\nto see how other people solv\nthis okay so it looks like what they're\ndoing here is using the the math.\nsealing\nfunction let's see what this\nis okay so here's the the ceiling\nfunction it returns X rounded upwards to\nthe nearest\ninteger so we'll go back and attempt\nthis again and see all of those\ndifferent\nuh test cases so let's just grab one of\nthem here so 400\n390 and let's see what math.\nceiling returns for\nthat oh and we have to divide it by 100\nso let's do that\nagain so\n404 which is what we're trying to get at\nbecause we round this up to the nearest\n100\nokay so that's basically the answer then\num couldn't think of that on my own here\ntoday so let's go ahead and try that um\ninstead of all this stuff let's just\nreturn it math. sealing is year over 100\nand this may not may not get the cases\nwhere it's an even or maybe it does\nlet's attempt it all right there you go\nso that's that's very clever but um I\nguess in this case when I was trying to\nsolve it here um I did not go through\nthe scenario in my head where the years\nwould be you know greater than say\n1720 or\n1930 like I didn't think about what if\nwe have like year\n20,000 something like that so in this\ncase it's a little bit of the\ninstructions like they didn't you know\nsay a whole lot about what the input was\ngoing to be they didn't say that were\ngoing to you know go up to a huge uh\ninput like they ended up doing so that's\npartially the instructions and then it's\npartially you know I should have thought\nof all the edge cases and should have\nthought of the fact that the number\ncould be greater than four digits like\nthis so we solved the problem with a\nspecific set of input but not all of the\npossible input and that's just that's\nvery common when you're solving coding\nchallenges you always have to think of\nthe edge cases so while I didn't get\nthis the first time it's definitely a\ngood learning opportunity um just to see\nyou know how it is when you're trying to\nsolve coding challenges all right for\nthis one we're converting cat years and\ndog years and human years\nso we're only going to get whole numbers\nand we're only going to get human years\none or\ngreater okay so 15 cat years for the\nfirst year nine cat years for the the\nsecond year and four for each year after\nthat uh 15 dog years for the first year\nnine for the second and five after that\nso notice we have some similarities in\nthe first two they both go up by 15 and\nN in the first two\nyears okay so what are we getting here\nwhat's the input um I have a cat and a\ndog I got them at the same time as\nkitten and puppy that was human years\nago so we're going to get a number\npassed in\nhere return their respective ages now\nokay so the easiest one is going to be\nhuman years\nplus or no we just say human years in\nthere so that should be the answer to\nthe first part of the array the second\ntwo are a little bit harder so we have\nto get the dogs and the\ncats all right so the first thing that\nwe want to do\nlet's see let's say human years is one\nwell in that case we're going to return\n15 for both of them\nso let's make a variable\nhere and then we'll say if human years\nequals\n1 we want to return um this right here\nso so we're going to say human years and\nthen we're going to say the cat's age is\ngoing to be\nwhat\n15 and the dog's age will will be\n15 if the human years are equal to\ntwo let's see we're going to add nine to\nthat so we're going to return something\nvery similar but this CA uh this time\nwe're going to return 24 here\nall right and then the remainder we're\ngoing to say uh in the first two years\nwe get to 24 for both the dog and the\ncat but then they increment by different\namounts so how do we solve\nthis okay so so let's say um cat excess\nyears is going to be equal\nto human year\nminus\n2 or we'll just say we can just say\nexcess years and use this for both so\nwe're basically trying to find you know\nhow many years above the first two years\nare we looking at here and then from\nthere we can probably just multiply it\nby whatever this multiple is so um we'll\nsay extra dog or no we'll start with cat\nextra cat years equals excess years\ntime what 4 and then for the dog years\nwe're going to do five so we're just\ngoing to make a new variable and say\nextra dog years so then we just return\nat the bottom here if we have not hit\neither of these uh logical\nstatements um because if we return from\nhere everything's done we don't reach\nany of the code below but if we have not\nreached either these code paths we're\ngoing to reach this and we're going to\nalways return human years just as the\nnumber of years but then we're going to\nsay um we know that we've got at least\ntwo years if we reach this code so we'll\nsay 24 plus the extra cat\nyears and then we'll say 24 plus extra\ndog years let's see if this gets it\nright awesome we got it right so that's\nhow I would solve that problem let's see\nhow other people would solve\nit okay so this is interesting it's it's\nsimilar concept we asked if it was the\nuh year one or year two and then we\nbasically just um did the same thing\njust in less code so I feel pretty good\nabout that we did pretty good on that\none so especially not being able to\nthink I've been going at this for a\nwhile now all right I think we have like\ntwo more in total I'm going to make it\nto the\nend our football team finished the\nchampionship the results of each match\nlooks like X colon Y results of all the\nmatches are recorded in the collection\nall right write a function that takes\nsuch collection and counts the points of\nour team in the\nchampionship the rules for counting\npoints if x is greater than y three\npoints if x is less than y 0er points if\nthey're equal one\npoint there are 10 matches\ntotal and X is going to be between 0 and\n4 or not between it's going to be\ninclusive of\n024 and then Y is going to be\n024\nokay so this games let's just make this\nmore specific that's going to be a games\narray um we'll initialize by saying let\ntotal points equal zero and we're going\nto set up a for\nLoop all right so we're going to go\nthrough each and we expect each value to\nequal something like this\nso we'll just say value and that's going\nto be games array with the index of I\nwhich starts at zero so just for\nreference I'm going to say sample value\nin a comment and this will be 3 colon\none all right so the first thing I going\nto think about doing since three and one\nare used for calculating this I'm going\nto split them so we're going to say\nparts are going to be equal to value.\nsplit and we're going to split it by a\ndelimer of a colon so now let's console.\nlog the parts of this array and we're\njust going to see what that looks\nlike so these are the values that we're\ngetting in each iteration of the for\nLoop so we're getting you know one and\none two and two three and three so on\nand so forth and now what we're going to\ndo is we're going to say all of these\ndifferent scenarios so we're going to\nsay\nif Parts zero so the first one if the\nfirst value so X\nyeah so X and Y so the first one is X so\nif Parts zero which is going to be X we\nmight as well break this out into a\ndescriptive\nvariable so there's your X and there's\nyour\ny the first and second value of that\narray and we're going to say if x is\ngreater than y we're just following the\nrules over here\nbasically we're going to do something\nand if x\nis we'll say else if x equals\ny and then finally else which is just\nbasically going to be that last\ncondition which means X is less than\ny okay so let's just put it in there\nwe'll say total points equals total\npoints plus and in this case it's going\nto be\nthree then down here let's just use a\nshortcut cuz we can so we'll do plus\nequal this is just an operator that does\nthe same thing as here except just in a\nshorter way so we'll do plus equal and\nthen in this case it's a tie so it's one\npoint and then otherwise it's zero\npoints so in this case we actually don't\neven need this last block because it's\nadding zero which doesn't even matter\nmatter let's return the total points\nhere all right we passed\nit\nawesome not even going through the\nexplanation there I will assume that\nyou're pausing the video to do\nthat oh that's an interesting solution\nright\nthere not going to get into that though\nokay at this point I believe this is the\nlast\nquestion no we finished it h looks like\nwe finished all of them I I don't know I\nthink we skipped this last one The Vow\ncount no we did that at the beginning\nanyways if you enjoyed this video give\nit a like um subscribe to the channel uh\nplease I'm very tired right now from\ngoing through all these challenges\ntogether with you be sure to follow me\non code Wars and I'll follow you back\nand stick around for the next video in\nthis lesson series see you\n[Music]\nlater now in the last couple of videos\nwe have talked about um the basics of\nJavaScript essentially so we started\nwith some variables and we went through\nyou know functions and loops and\noperators conditionals all that good\nstuff so at this point we're ready to\njump into some of the built-in um\nfunctions in objects within JavaScript\nwhich is going to save us a ton of time\nwhen we're actually writing our code\nbecause it basically uh it's a bunch of\nshortcuts essentially and also just kind\nof the basis of the JavaScript language\nhere's what we're going to cover in this\nvideo and the next couple videos but all\nencompassed within lesson six of the\nseries so we're going to learn how to\nread documentation that's a really\nimportant thing as a developer uh we're\ngoing to do a quick start kind of an\noverview of callback functions they're a\nlittle bit confusing but we'll get\nthrough them and then we'll talk about\nprimitive values versus um object values\nwithin JavaScript talk about dates\nregular Expressions string Methods array\nmethods um the math Library air types\nand then a couple data types that we\nhave not actually covered yet that would\nbe not a number or n an and then also\nnull and undefined values so we've got a\npretty pretty big laundry list of things\nto cover uh in this lesson it's going to\ntake a little bit of time but I promise\nyou when we get to the end you're going\nto have a much uh bigger overview of\nwhat the JavaScript language is all\nabout now the one thing that I'll say as\nwe go into this lesson is this is\nprobably going to be the last one where\nwe're just focusing solely on JavaScript\nwe have to get through a lot of\ndifferent things so we have to cover\nHTML and CSS and then a couple different\nother things before we actually writing\nour web apps so this will be the last\nkind of lesson that we're talking about\nJavaScript alone now there are other\nthings in JavaScript that we will not\ncover quite yet so that would be like\nthe async AWA and promises and classes\nobjectoriented programming you know it\nall kind of goes together and those are\nsome more advanced JavaScript topics\nthat I'm going to pick up later down the\nroad when we've actually written uh some\nsort of sub substantial web app so hold\ntight on that I'm not going to cover it\nyet but we are going to get through the\nbasics here and then we'll start getting\ninto actually building that web app of\nours the first thing that I want to do\nis actually go through how do we read\ndocumentation and we can start at the\nMilla web docs which is called mdn for\nshort and we've looked at this\npreviously um in the code challenges\nfrom the last lesson 5 but we didn't\nactually go into depth on how to read\nthis documentation and I think it's\nreally important uh to do so so you get\nto the homepage of the mdn web docs you\ngo to Technologies and you'll find\nJavaScript now JavaScript is documented\nin a variety of places this just happens\nto be um what most people consider the\nofficial JavaScript documentation so\nonce we're on the JavaScript homepage\nyou can see on the left you've got this\nnavigation bar uh there's some tutorials\nthat you don't need to go to because\nthis is a tutorial about JavaScript but\nthen what we're interested is the\nreferences so when we talk about\nreferences that's generally going to be\na big part of any sort of documentation\nthat you're looking at generally with\ndocumentation you're going to have some\nsort of quick start guide just to get\nyou started with whatever library or\nframework that uh you're reading the\ndocumentation for then you're going to\nhave some sort of tutorial usually and\nthen finally you're going to have an API\nreference um sometimes they just call it\na reference like they do here sometimes\nthey call it the API sometimes they call\nit the API reference uh whatever the\ncase it's all kind of centered around\nokay here's the core of of this library\nor language or framework and this is\nwhere you need to go to learn more about\nusing it so that's what we're interested\nuh in for JavaScript in particular\nright now since this video is all about\nthe built-in objects and functions uh we\ncan go to this built-in objects drop\ndown in here you'll scroll down and\nyou'll see a variety of different uh\ntypes of objects and um these objects\nhave things called instance methods uh\nit kind of gets into object-oriented\nprogramming and I don't want to go there\nbut that's why I'm saying objects and\nfunctions um now it's going to say\nobjects here but the functions are kind\nof\nuh what we call a method on top of these\nobjects that that you can call from the\nobject so um you can scroll down and see\na bunch of different ones most of these\nare going to be irrelevant to you as the\ncomplete beginner and quite honestly\nthey're going to be irrelevant to you um\neven as you get better so the point of\nthis video is to point out the most\nimportant ones the ones that you're\ngoing to be um that you're going to need\nto get the most familiar with and we'll\ngo through them\nuh in more detail but I just wanted to\ngive you an overview of this and then as\nyou click through a specific object so\nlet's say we go to string which as\nyou'll learn in a little bit a little\nbit later in maybe the next video or\nsomething uh a string is actually an\nobject in JavaScript like everything\nelse so it's a little bit confusing but\nyou'll get the point in a little bit now\nonce we're on the string uh\ndocumentation page or reference it's\ngoing to give you an overview of\neverything and this is kind of the the\nmain homepage for this string object now\nin JavaScript everything kind of behaves\nas an object and it has these things\ncalled Methods on it which are the\nfunctions I'm talking about when I say\nmethod you can just think of it as a\nfunction um that is you know attached to\nthat object so as we scroll down here on\nthe left you're going to see this thing\nit says string. prototype. whatever\nmethod we're talking about now the\nPrototype part that's a complexity of\nthe JavaScript language that we have not\ncovered and we will not cover in this\nseries that's a little bit uh above our\npay grade and we don't need to get into\nthat to actually start writing the code\nonce again I've said this in previous\nlessons if you want to understand the\nPrototype chain and all of these complex\nthings about JavaScript um of course\nafter you've kind of mastered the basics\nyou can go to the you don't know\nJavaScript series series um it's\ncompletely free so you don't know\nJavaScript and it's actually hosted on\nGitHub um I think his name is Kyle\nSimpson um I would go to the first\nedition Branch here and then you can\nscroll down and just see all of the\ndifferent books that he's written on\nJavaScript it's a really good guide\nthat's going to take you through uh the\nnuances of this language anyways coming\nback to here so we have the object at\nthe beginning prototype and then the\nmethod so let's click on one of these\nmethods and see how we actually read the\nspec or the reference for each method I\nthink a good one to start with um let's\nsee which one do we want so we want to\nstart with the pop method this is a\nreally easy one to um get used to and\nthis is not part of the string spec so\nwe need to go to arrays actually so\nlet's go to JavaScript\nand then we'll go to built-in objects\nand click array now same thing you have\nall these methods here and we're going\nto go down here to the pop method now\nwhen we get to the pop method reference\nyou're going to see a little summary and\nthen an example and this is the case for\nall of these different methods usually\nyou should be able to figure out or get\nthe gist of what this does and how to\nuse it from just the starting section\nbut it's really important to start\ndeveloping the skill of learning how to\nread documentation and often times it\ncan be a little bit confusing um\nespecially since each uh language and\nsite and framework and Library it\ndepends on how they've written their\ndocumentation it might look a little bit\ndifferent so anyways the pop method\nremoves the last element from an array\nand returns that element this method\nchanges the length of the array all\nright so we know it is mutating or\nchanging um the existing array that\nwe're working on\nnow if we come down to the syntax\nsection this is what I want to focus on\nin this video because if you are a more\nexperienced developer you should be able\nto um kind of figure out all of the\nnuances of a specific method or function\nfrom this syntax section now when we\nlook at the pop method it just gives us\nthis basic little syntax and you can see\nthat there's nothing in this parentheses\num nothing that you pass in and then\nwhen you come down to the return value\nit says the return value is the removed\nelement from the array and then it says\nundefined if the array is empty so it\ntells you here's what the normal return\nvalue is and then if you by chance pass\nin an empty array which you probably\nwon't um unless you're looping through\nit or something then it returns\nundefined so this is a really basic one\nand just by looking at this you can see\nhow it works and we can come over to our\nconsole\nwe can create some sort of array here so\nwe'll just put a couple numbers in here\nnow if we print the array it's one two 3\nand then array. pop it's going to return\nthe length of the array so three is the\nlength of of the array but now if we\nprint the array we only have two\nelements in it because it removed the\nlast one now this is a really simple one\nbut the next one that we want to look at\nis going to be the joint method and\nthat's because it's going to add in a\nlittle bit harder documentation for us\nto read now before I do that though let\nme go back to the pop method so we got\nthis overview section the syntax the\ndescription just gives you some more\ncontext around it and then you have some\nexamples now as we get to the\nspecifications this is going to actually\ntake you to the specific link within the\necmascript um spec and we talked about\nthat in I think lesson two when we\ntalked about what is\nJavascript um but this spec is going to\nwe might as well click it and just see\nwhere it takes us so it should take us\nto the pop method you can see up here\nand this is the spec for you know the\nJavaScript language so just takes you\nthere it's not something that you'll be\nprobably clicking on all that often and\nthen finally you come down here to\nbrowser compatibility and you'll see all\nof the different uh browsers and then\nyou'll also see a runtime over here so\nso node.js is not a browser but it's a\nruntime that runs JavaScript so it shows\nyou the compatibility for this method\nwithin all the different browsers in\nthis case uh the pop method is one of\nthe oldest array methods in JavaScript\nso it's supported by all the browsers\nbut as you'll see with some other\nmethods that we look at it's not\nsupported in all the different browsers\nand often times it's Internet Explorer\nthat doesn't support it so not a big\ndeal all right so anyways let's go back\nto let's see not the pop method we\nwanted the join method which is going to\nbe somewhere here all right so looking\nat the join method this is going to be a\nlittle bit more complex I'm going to\nkind of skip over this first section\njust to get an overview it says it\ncreates and returns a new string by\nconcatenating or joining all the\nelements in an array all right so that's\nthe basics now coming down down to the\nSy tax where we're trying to focus on\nyou'll see that this um this code block\nhere has a little bit more complex uh\nsyntax going on so it says array. jooin\nand then in here we have this uh word\ncalled separator and we have these\nlittle brackets around it now what these\nbrackets mean within the JavaScript or\nthe mdn documentation it means that they\nare optional so the separator this is\njust a description like that word is\narbitrary so it says separator just to\ngive you an idea of what type of\nparameter it takes as I guess an\nargument so remember we talked about\nparameters and arguments two sides of\nthe same coin parameters are what we\nDefine when we declare a function\narguments are what we pass in to that\nfunction when we actually invoke it call\nit um you know whatever you want to say\nthere so this in this case we have\nseparator and we can read more about\nthis here so the separator specifies a\nstring to separate each pair of adjacent\nelements of the array the separator is\nconverted to a string if necessary if\nomitted the array elements are separated\nwith a comma if separator is an empty\nstring all the elements are joined\nwithout any characters in between them\nso if you are following along with the\n25 practice problems from the prior\nlesson we use this method a couple of\ntimes and we actually had to use that\nempty string to join all the elements\ntogether with nothing between them so\nthis is where we would have found that\nnow of course it's optional so if you\ndon't pass anything in there it says if\nomitted the array elements are separated\nby a comma so it's optional and then we\ncome down to the return value and it\nsays a string with all array elements\njoined if the array length is zero and\nempty string is returned so we can go\nahead and test that too so let's go into\nour console we have an array here um\nlet's let's actually create a new one so\nlet me clear the\nscreen and we'll say string\narray and then we'll say hello world all\nright so what if we wanted to combine\nthose together now we'd use the join\nmethod so we can say string array. jooin\nnow as we see it right here we omit all\nof the arguments\num it just joins it with this little\ncomma down here now if we go back and\nlook at what else we can do so uh if the\nseparator is an empty string it joins it\nwithout anything between them so let's\nput in an empty string here and you can\nsee that it uh joins those together into\none string with nothing between them now\nwe can add a space here and press enter\nand this is probably closest to what we\nwould want if we were doing this so\nthat's just how you would read this now\nthe last one I'm going to look at for\nreading documentation is a little bit uh\ntrickier and we're going to have to kind\nof use these Concepts we just talked\nabout to get through it the example that\nwe're going to do is the array. includes\nmethod so let's click on that wherever\nit\nis now this includes method determines\nwhether an array includes a certain\nvalue among its entries returning true\nor false as appropriate now we're going\nto cover this a little bit later uh in\nthis lesson\nso I'm not going to go too deep into it\nbut let's go ahead and look at the\ndocumentation here it says um this is\nthe code block that we're looking at and\nyou'll notice that we have a value to\nfind and then we have uh the brackets\nhere and the from index so breaking this\ndown from how we understand it there are\nno brackets around the value to find\nwhich tells us that there is that is a\nrequired parameter you really can't run\nthis method effectively without that\nrequired parameter now it has this comma\nhere which basically means okay we're\ngoing to the next parameter that this\nfunction will take um and then it's\nsurrounded by these brackets at the\nbeginning and end which means that the\nsecond parameter is going to be optional\nnow if we look down into the parameters\ndescription value to find is the value\nthat we're searching for and it says it\nis case sensitive so that's nice to know\nand then the optional parameter is the\nfrom index and it's basically saying you\ncan start looking within this array at a\ncertain index so you know if the value\nto to find is earlier than that index\nyou specify it's not going to include it\nso that's just how we would read the\nsyntax of this and again we're going to\ngo through this a little bit later in\nthe lesson so I'm not going to do an\nexample right now and just to point out\nwhat I was talking about earlier if you\nscroll down so includes is actually a\nlittle bit of a new method I believe\num I could be wrong on that but I\nthought that it was offered only in the\nlatest spec of\nJavaScript um so if you scroll down to\nthe browser compatibility you'll see\nthat Internet Explorer has no support\nfor this method so if you're developing\nan application for that has to run\neffectively in Internet Explorer um\nprobably the only case that that's going\nto happen is if you work for like a\nreally large company and that company\nkind of has Legacy systems and\napplications that still run in Internet\nExplorer you don't want to be using this\nincludes method because it might screw\nup your application so that's just what\nI was talking about\nearlier in the next part of this lesson\nuh six here we're going to be talking\nabout callback functions when I first\nstarted I was really confused about\nthese and I honestly think that it's\njust because I never stumbled upon a\ngood explanation um something that\nreally broke it out into the pieces that\nI could understand so hopefully in this\nvideo um I can do that for you and\nprevent you from suffering from that\nconfusion for several months like I did\nnow the reason we're talking about this\nis because the built-in functions that\nwe'll see later in this lesson are going\nto use callbacks or callback functions\nheavily and if you don't understand them\nyou're not going to be able to use those\nbuilt-in methods so with callback\nfunctions they're not not any different\nfrom the functions we were writing in\nthe previous lesson use you know use the\nsame syntax so you can use the regular\nfunction syntax you can use uh Anonymous\nfunctions or Arrow functions it's all\nthe same it's just a different way of\nusing functions and it's just a little\nbit different way of thinking in general\nto start us off I'm going to paste in\nsome code that we're going to actually\nunderstand by the end of this little\nlesson so this would be an example of\nusing a call back function go ahead and\npause the video just so that you can\ntake a look at it and get yourself\nacquainted so I'll press enter here and\nyou can also simplify that code that we\njust looked at um into this right here\nso it does the same exact thing um you\ncan see the answer is the same and I\nwould just pause the video and just look\nat those two code blocks just for a few\nseconds to just get your mindset uh\naround what we're doing here now the\nentire reason that I'm walking you\nthrough callbacks here is because often\ntimes you're going to see code that\nlooks like the second option here which\nis simplified yes and it's how I would\nwrite it but it definitely does not\ndisplay the concepts that you're\nsupposed to be understanding very well\nso in this section I'm going to be\nwriting code that I normally would not\nwrite um just because it's a little bit\nlonger form and more broken out than I\nwould write it you know if I was\ndeveloping an application but hopefully\nyou know that longer form of the code is\ngoing to uh clear up some of these\nconcepts for you and really help you\nunderstand what callbacks are all about\nso let's take a look at each of these\ncode blocks um let me clear the screen\nand just get us the um main code block\nand I have some comments pasted in here\nso let me clear the screen and we'll\npaste this in here maybe space it out a\nlittle bit so that we have some room to\nwork with all right and if we look at\nthis code here uh there's a couple\nthings going on the first thing is we\nhave two different functions here um the\nmain function right here and then the\nCallback function so often times you'll\nsee the Callback function kind of just\nuh embedded within that main function um\nbut in this case like I said I'm\nbreaking it out for clarity so this main\nfunction it takes three arguments the\nfirst argument is going to be some\nnumber I just called it random number\nit's arbitrary um and then should call\nso this is going to be a Boolean value\nuh value which is basically going to ask\nwhether we should go into the call back\nand then the call back itself so walking\nthrough this code let's first look at\nresult so the result variable is going\nto be set equal to the random number now\nwhat is random number now of course\nrandom number is a parameter to this\nfunction and therefore whatever we pass\nin as the argument uh to the function is\ngoing to be the value of random number\nso if we go to the bottom where we\nactually invoke or call this main\nfunction you'll see that the random\nnumber is going to be 20 right here so\nin this case random number equals 20 and\ntherefore the result variable also\nequals 20 because we're assigning it now\nif we come down to this next part uh\nthere's some comments here that's not\naffecting the code at all we just have a\nsimple if statement so we say if should\ncall so if you remember we can pass a\nBoolean value alone we don't have to put\nany equal signs or anything and we can\nplace that within a conditional to\nevaluate it so if should call is true\nthen we're going to reach the code\nwithin this uh this conditional block if\nit's false then we just skip this\nconditional block and we return the\nresult so basically if should call is\nfalse then we're going to skip this in\nthe result is currently equal to 20 and\nthen we return the result so the return\nof this main function is going to equal\n20 but of course it returns 40 as we see\ndown here so therefore the should call\nis true as we see here in the invocation\nof the function now the last part is the\ntricky part that's the call back now the\nfirst thing I want to point out here is\nthat callback this name that I've given\nit is entirely arbitrary\nyou'll see this very often you might see\num either this as call back or you might\nsee uh the letters c and b for called\nback and that's probably a convention\nthat you're going to come across but it\ndoesn't have to be that way you can call\nthat whatever you want it's just a\nnormal uh parameter but in this case\ninstead of passing in a number or a\nBoolean like we did for the first two uh\nparameters we're actually passing in\nanother function so basically what we're\ndoing is we're passing in a function to\nanother function and we're asking that\nyou know parent function to execute the\nfunction that we passed in in this case\nmy call back is what we've passed in you\ncan see in the arguments down here at\nthe bottom so we've passed in my call\nback which has just been declared hasn't\nbeen executed yet and so call back right\nhere is going to equal the\nDeclaration of this function called my\ncallback so if you know how to uh run\nthis if we wanted to run my call back\nall we have to do is put these\nparentheses at the end and pass in some\nsort of number and you can see if we\nexecute this we get 40 which is the same\nanswer of course that would be the more\ndirect way to do this but this is a\ncontrived example that's hopefully going\nto explain callbacks to you all right so\nwe've got this value called callback and\nthat is equal to a function uh a\nfunction data type that has not been\ninvoked yet so just a\ndeclaration and we can basically call\nthis just like this but in this case the\ncall back is actually the function that\nwe want to call so we're doing that\nsorry about that we're doing that in\nthis line right here so if should call\nthat is true so we get down to this code\nright here and what we're doing is we're\ntaking that function that's been passed\nin and we are executing it with the\nrandom number par parameter which\nhappens to equal 20 so we're basically\ndoing what we did down here but within\nthe main function we're letting our code\nactually execute the function so we're\nsetting that equal to result which\nreturns 40 and then we're going to\nreturn result at the bottom so that's\ngoing to return 40 and that's how we've\ngotten to our answer now like I showed\nyou um with that second example a little\nbit ago um it's a little bit more\nabbreviated way to do this and you do\nnot have to write a separ SE function\ncalled my callback in order to you know\nbasically run a callback function so\nwhat we could have done in the first\ncase this is how we executed main\nfunction we passed in 20 we passed in\ntrue and then we passed in a predefined\nfunction that we had already written up\nhere but we could abbreviate this so let\nme collapse this main part and what we\ncan do is say main function and we know\nthat we have to pass in a random number\nso in this case we'll stay consistent\nwe'll pass in uh a value of 20 we want\nthe call back to actually be called\nwithin the function so we need to pass\nin true as the should call argument and\nthen we need to pass in the function so\nin the first case we just put in my call\nback and it worked but we also could do\nit like this so we could write a uh\nAnonymous function and this function is\ngoing to take a number so that's just\nthe parameter that we're defining and we\nknow that if we go up to the main\nfunction here it's going to pass in this\nrandom number as the argument so that's\nwhat number or num is going to represent\nand then we have to break it down here\nand then we have to return the num * 2\nwhich is going to ultimately return us\n40 and that's another way that we could\nwrite that call back there's other\nsimpler ways so we can also do it like\nthis so let's do main function pass in\n20 true and then in this case let's just\nput in an arrow function so we have num\nand then we use our Arrow function\nsyntax and then we return the num * 2\nand once again we get 40 so just another\nway to pass that in and we can even\nsimplify this a little bit more so we\ncan pass in the same parameters we don't\nactually need these parentheses here\nbecause it's a single argument so we'll\ntake num and then uh we also don't need\nto break down onto the second line we\ncan actually just take num * 2 and\nthat's going to return it the same way\nand now we've gotten our answer of 40\nonce again so as you can see that's how\nwe get from the most you know contrived\nsimple elaborate example to the code\nthat you're probably going to be seeing\nin a lot of examples this is what a lot\nof people use because it's just a much\nsimpler quicker way to write a callback\nfunction so hopefully this section um I\nknow it's a little bit confused\nbut rewatch it again if you are not\ntotally clear on this because we're\ngoing to be going into the built-in\nfunctions that use these callbacks very\nheavily and it's going to be important\nthat you understand how they're working\nso you might understand callbacks now\nbut why do we actually need them they\nseem overly complicated don't they well\nthe reason we need them is in my opinion\num this is just based from on experience\nand just observation the two things that\nit enables is reusability and\nasynchronous programming now I'll talk\nabout each of these we're not going to\ngo too much into asynchronous\nprogramming in this video for reasons\nI'm about to explain but let's start\nwith the reusability thing and that is\ngoing to be crucial to really connecting\nthe dots when we get into some of those\nmore advanced array built-in methods\nthat we're talking about later in the\nlesson to really understand the\nreusability thing we're going to look at\na common array method that's called map\nso we're going to look at this a little\nbit later in the video too but I really\nwant to show this as a lesson of why we\nneed callback functions so what this map\nmethod does if we look at the\ndocumentation is it creates a new array\npopulated with the results of calling a\nprovided function on every element in\nthe calling array so it's basically\ndoing a transformation and you're um\nable to define the function that has all\nthat logic to figure out what it's doing\nto each element in the array let's take\na look at a very simple example now this\nisn't going to make total sense but it\nwill kind of connect the dots from what\nwe just did with that uh original\ncallback example so what I'm doing is\nconstructing an array very simple one at\nthat and then I'm going to Define my\ncustom map operation and we'll just say\ncall back so we want to be very specific\nwith what this function represents to us\num and then the parameter is going to be\nthe item from the array that we're\nmapping over and what we're actually\ndoing here is we're kind of iterating\nover the array so when we get each\nelement of the array which is going to\nbe passed in as an argument uh into this\nfunction we want to return a value and\nthat value is going to be the\ntransformed value that will kind of\noccupy the new array that we have so\nwe're going to take the item from array\nand we're going to multiply it by two so\nwe're we're basically going to take this\nentire array up here and uh for each\nelement we're going to multiply it by\ntwo so we've got that function defined\nso far it's not really doing anything\nbut if we take my array and then we\nactually we need to set this equal to a\nnew array because that the map method is\ngoing to actually return the modified\narray it's not going to um modify the\noriginal array so we're going to take my\narray map so we're just calling the\nfunction that's built into our array and\nwhat it requires is going to be a\ncallback function and in this case we've\nalready defined that so we're going to\npass in my custom map operation callback\nand then we're going to execute it now\nif we look at the new array you're going\nto see that every element has been\ndoubled and what it's done is it's\nlooped through it's started at two then\nit's taken that value of two multiply by\ntwo to get four so on and so forth so\nyou can see how um we've kind of\niterated over the array and applied some\nsort of transformation defined by our\ncallback function now here is where we\nreally understand this concept of\nreusability so in this case sure it\nworks we're multiplying something by two\nbut it doesn't really convey to us why\nthis call back is so useful now when the\ncreators of the JavaScript programming\nlanguage introduced this map array what\nthey wanted was to enable the developer\nto use this same method for a variety of\nuse cases so what if we had an array\nthat was full of strings so let me copy\nin a new array here um I need to name it\nsomething different so we'll just say\nstring array and this is going to have a\nbunch of strings in it and you might say\nokay well I need to find a different\nbuilt-in method to map over this and do\nsome sort of transformation well because\nwe have a callback as one of the\nparameters of this predefined function\nwe have a lot of flexibility and instead\nof looking for a new method we can just\nredefine our custom map operation now in\nthis case I'm not going to do it long\nhand like we've been doing I'm going to\nshow you the shortcut so we'll say not\nmy array but the string array which we\njust defined we're going to call the map\nmethod on it and then we're going to\npass in a callback function so let me\ntemplate that out I'm going to have an\narrow function right here and what I'm\ngoing to pass in is going to be the item\nfrom the array so we'll just say item\nfrom array we don't need any parentheses\naround that because it's a single\nargument and now the transformation that\nwe're trying to do so if we do this on\none line whatever is right of this arrow\nis going to be returned from that\nfunction so all we have to do is\ntransform per it in some different way\nso maybe we wanted to construct just the\nfirst letter of each of these words so\nmaybe we wanted a new array that has the\nletter h w m n i and Z all we have to do\nis maybe return um the item from the\narray and actually what I'm going to do\nhere is pass in um no I don't need to\nI'm just going to take item from array\nand then I'm going to get it give it the\nzero index because you can access the\nfirst letter of any string by using the\nzero index second letter by one third by\ntwo so on and so forth so you can see\nthat we've returned the first letter of\neach of these elements in the array and\nwe did this for an array of strings by\njust redefining that callback function\nso that's the value of these callback\nfunctions it enables us to reuse the\nsame function over and over again so in\nthis case the built-in map function and\nkind of modify it for or whatever needs\nthat we have and we can do something way\nmore complex than just multiplying by\ntwo we can have conditional logic in\nhere we can say you know if the number\nis prime then we want to multiply it by\ntwo um if it's not prime then we just\nwant to return the number itself you\nknow you can do all sorts of different\nthings with this as complex as you want\nit all right so I think you probably\nunderstand why we uh why callbacks\nenable reusability why they're important\nyou know how they work all that kind of\nstuff now let's move on to the\nasynchronous topic so I told you that um\ncallbacks enable asynchronous\nprogramming and what that gets us into\nis a whole another topic that I'm only\ngoing to briefly touch on here so when I\nsay asynchronous all I'm talking about\nis code that does not run um immediately\nso with the code that we've run here on\nthis screen you'll probably notice that\nwhen we press enter it executes\nimmediately it's it pretty much seems\ninstantaneous to our human brain now\nthere are times when we're writing code\nthat it might even take up to two three\nor 4 seconds for a piece of code to\nexecute and a good example of that is\nlet's say our application database that\nstores all of our data is you know on a\nin a different continent from where the\nuser is actually uh clicking so maybe\nhost my database here in the United\nStates but someone from um I don't know\nItaly or something is visiting my web\napp and has to access uh the web app\nfrom their browser in Italy and so it's\ngoing to send off a a request to my\nserver and then to the database and that\nrequest to get all of the uh information\nfor that web app and perform different\nfunctions is going to take a certain\namount of time and it's not\ninstantaneous so we have to handle that\nwith our programming and you might just\nsay well okay let's just wait until it's\ndone and then execute the next line of\ncode well in that case with a web app\nyou're going to have multiple\nasynchronous operations going at the\nsame time so you're going to have\nmultiple calls to a web server that are\ngoing to take you know half a second uh\none and a half seconds maybe even a\nlittle bit more and if you added all of\nthose together and you just did it in\norder your web app is going to take 30\nseconds to load and in that case\nnobody's going to use it so we have to\nrun all of this code kind of at the same\ntime and for that reason we have\nasynchronous programming which basically\nallows us to um run some code and then\nrun other code while that previous code\nis still running now I know this kind of\ngets into the topic of like threads uh\nexecution threads on a computer it's not\nreally what we're talking about here and\nI really don't want to get into all of\nthe details of this but as we go through\nthis series we're going to be talking\nabout uh asynchronous callbacks promises\nand the newer um es6 async and await so\nthese are all different ways that we can\nwrite asynchronous JavaScript code\nyou'll see how it comes into play a\nlittle bit later in the\nseries if you've been following along\nwith this series you might have heard me\nsay that everything in JavaScript is an\nobject but I haven't really EXP explain\nmyself on that one and since we're uh\ntalking about all the buil-in objects\nwithin JavaScript in this lesson I\nreally want to give an overview of this\nconcept of Primitives versus uh the\nactual objects themselves I'm going to\nput some code on the screen that will\nhopefully give you a little bit of an\nintroduction and some things to think\nabout here so when we run this code um\nyou can see that we've defined two\ndifferent strings and we have compared\nthese strings with each other\nso in the first case we've got this\nweird syntax here where we're actually\nusing this thing called a new uh it's\nactually the new operator we're going to\ntalk about in a second and then we are\ndefining our string with this uppercase\nstring which looks like some sort of\nobject or something and if you go to the\nJavaScript docs so or documentation so\nlet's go to JavaScript built-in objects\nand then you go down to string right\nhere that is the same\nsyntax the string that we Ed to Define\nthis um string right here so string one\nis actually an object now string two is\nwhat we call A Primitive now this is\nbecause we didn't you know uh\ninstantiate it with the object syntax\nand you can see if we compare the\nequality of these two the triple equals\nwhich Compares both value and type is\ngoing to return false because in the\nfirst case we're looking at an object in\nthe the second case we're looking at a\nstring primitive and if we use the\ndouble equals they're of course true\nbecause they are the same value they're\njust not the same type so at this point\nyou're probably probably have a lot of\nconfusion in your head um you're\nprobably thinking a couple things well\nyou're telling me that string one is not\nactually a string and the answer is yes\nit's it is not a string it is actually\nan object and then furthermore you're\nsaying that this string down here so\nstring to that is a string but how would\nwe execute any of these built-in methods\non something that's not an object so\nthere's a couple floating questions here\nand to understand them you have to know\na little bit of the behind the scenes\nstuff that's going on with the\nJavaScript programming language let's\nstart off by asking the question what is\na primitive now A Primitive this is not\na topic that is specific to JavaScript\nwe talk about primitive data types\nacross varying languages so you know\npython Java C++ they all have their uh\nPrimitives but in JavaScript A Primitive\nuh there are six different Primitives\nthat we can look at and we can go to the\nuh documentation here um for primitive\nand it will maybe show us all of the\ndifferent um Primitives that we have so\nmaybe it doesn't actually I thought that\nit did but anyways the six that we have\nare a string a number a big int Ian\nundefined and symbol some of these we\nhaven't talked about but that's totally\nfine we don't need to talk about it yet\nbut what you can think about uh when\nwe're talking about Primitives is that\nit is the simplest form of something so\nif a coding language had a periodic\ntable of elements then The Primitives\nwould be those elements of the periodic\ntable so that's kind of how I would uh\nthink about it and those Primitives can\nactually be used to build up um other\nthings\nnow as you would expect a primitive data\ntype does not have any sort of methods\nor functions that you can call on them\nso it doesn't make any sense if we were\nto come here in the console and let's\ndefine a string here so we've got some\nstring and now I'm going to put a dot at\nthe end of it just like I was calling a\nfunction or a method on an object and if\nI were to take this sum string and say\nuppercase so that is actually a built-in\nfunction on strings so if you go down to\num the bottom here you can see that two\nuppercase is a built-in um method on the\nstring object but if we're saying that\nthis is a string primitive then it\nshouldn't be able to work right well\nwrong it does work and that is because\nbehind the scenes when we have a\nprimitive value like this where we\nDefine it with those little quotes or\nthe double quotes even it actually wraps\nit in that string object so what we did\nup here right here this is actually\nhappening behind the scenes when you\ncall a specific built-in method on a\nprimitive um data type within JavaScript\nnow this is kind of interesting and all\nbut what do you actually do with it well\nthe answer to that is not really\nanything this is more of something that\nyou should be aware of it's just good to\nknow type of information so that you're\nnot wondering in your head well what is\ngoing on here you know we're talking\nabout strings but if we go to the\ndocumentation it sure looks like this is\nsome sort of object here so it just\nclears that up for us and if you go to\nthe string built-in object and scroll\ndown um a little bit we have this\nsection called string Primitives and\nstring objects which kind of explains\nthe same thing that I just talked about\nso feel free to read that and really dig\nin if you want to understand this a\nlittle bit better so the takeaway here\nis that you should not be using this\nsyntax up here with the string\nConstructor um this is not the way that\nyou write strings I taught you the\ncorrect way to write strings in the\nprevious videos this is just for\nclarification now if you go to the\nactual documentation you'll see in this\nsection on string Primitives and objects\num down here it says for these reasons\nthe code may break when it encounters\nstring objects when it expects A\nPrimitive instead so the documentation\neven recommends to not Define them like\nthis CU JavaScript takes care of it for\nyou but anyways that's just some\ninformation around here now the next\nthing that I want to talk about is that\nkeyword that we looked at because this\nis also a little bit confusing and as we\ngo into the next couple sections of this\nlesson it's going to be important to\nunderstand and that is this new keyword\nwhich is actually considered an operator\nalthough we didn't talk about it when we\num covered operators in a previous\nlesson in the next section of this\nlesson we're going to be talking about\nJavaScript dates which you actually have\nto use that new operator for to actually\ncreate so if we wanted to create a date\nhere what we have to say is new and then\nwe pass in the date object with these\nparentheses at the end and this is what\nwe call constructing um a instance of\nthat date object so you can kind of\nthink of this um\nin terms of like you have this template\nthat you're working with so the date\nobject would be the template and then\nyou're going to actually take a copy of\nthat template and store it in a new\nvariable um that has all of those\nattributes of the template it does\neverything that that template has kind\nof predefined it to do now this is kind\nof an object-oriented programming uh\ndiscussion I don't want to get too far\ninto it but just know that this new\noperat Ator is a special keyword in\nJavaScript and that's what it's doing so\nif you actually look into the new\nkeyword it's going to do a couple of\nthings so it creates a blank object and\nthen it links that blank object to the\nparent so when I talk about template and\nan instance of that template that's what\nI'm kind of referring to so there are\nadditional steps that get into the\nPrototype chain again I'm not going to\ntalk about um that because it's another\ncomplexity that we need to visit right\nnow in the previous parts of this lesson\nwe've talked about a lot of the\nessential Concepts that we're going to\nbe using when we're talking about these\nbuilt-in JavaScript objects and the\nfirst one we're going to be talking\nabout is Javascript dates now these\nJavaScript dates are a little bit\nconfusing and I'll be honest I think a\nlot of developers even more experienced\nones have a little bit of trouble with\ncertain types of dates and JavaScript\nand the reason is because um writing\nJavaScript dates is not really um All\nAbout coding skill you also have to\nunderstand how time zones work um and\nall that stuff when you're actually\ngetting into uh implementing the date\nobjects and stuff like that now I've\nwritten a post on this so um I'm on my\nsite here so I'll just scroll down um at\nsome point here I talked about\nJavaScript dates so right here and with\nthis date post I really go into detail\nabout all of the different uh time zones\nand how we use dates and all the\ndifferent nuances of it so I'd check\nthat out if this is not enough detail\nfor you but here we're going to actually\ngo into the basics of writing dates and\nhow we do that uh I showed it briefly in\nthe last part of this lesson but all we\nhave to do is Define a variable and then\nassign a new date object or kind of a\ncopy of that template which is date\nand we're going to assign it and now if\nwe print out to the screen it's going to\nshow us a a date object here and it's\ngoing to be the current time because we\npassed in no parameters or no arguments\nto that uh date Constructor now here's\nwhere dates get a little bit confusing\nwhat we have defined here um the value\nthat is stored within this date object\nactually represents the number of\nmilliseconds that have elapsed since\nmidnight on January 1st\n1970 UTC time zone that's a lot to\nhandle in one sentence here um and you\nmight be asking why January 1st 1970\nwell the answer is not so simple and\nagain I would read this post that I\nwrote to really get a background on that\nbut basically it's an arbitrary date and\ntime that we are basing all of our\nfuture dates off of and what I mean when\nI say the value that we're storing with\nwithin this date is equal to the number\nof milliseconds cuz right here it sure\ndoesn't look like milliseconds that\nwe're printing but if you said now which\nrepresents the date that we just defined\nand then you say value of it's going to\nprint the number of milliseconds since\nJanuary 1st 1970 and that is the in the\ncoordinated universal time zone so if\nyou converted this to years and then\ndays you would get exactly to this with\ndates there are a variety of things that\nyou can pass into that Constructor as an\nargument to define a date and what I'm\ngoing to do is just paste a bunch of\ncode onto the screen because we don't\nneed to go through writing all of it you\ncan pause the video look through this\nfor a second I'm going to walk through\nit but again read that post if you want\na ton of information about dates so the\nfirst example we're passing in um the\nthe year the month the day and then the\ntime or I guess hour minute second\nmillisecond whatever and we're passing\nthat in as comma separated uh arguments\nto the date Constructor um we can also\npass in just a string in a variety of\ndifferent formats as you can see in this\ncode uh right here and then going down\nwe can um input a number of milliseconds\nso we can just give it the the value\nitself or we can pass it in as ISO 8601\nformat um again that post talks all\nabout it and then finally you can do\ntime zones down here you can pass in\ntime zones um this last part the date.\nnow um that's kind of an interesting\nthing that we can talk about here so you\nknow we're used to creating a date by\nsaying new date but you can also create\na date with a static method that's what\nthis is called here and you just say\ndate. now represents the same thing as\nnew date obviously not anymore because\ntime has elapsed but it's just giving\nyou the Primitive value of that date now\nwe're here in this video to talk about\nsome of the instance methods that we can\nuse on a date object the built-in method\nso let's define a date so that'll be\nequal to now or maybe maybe instead\nwe'll just say uh my date because now is\nsometimes not descriptive because the\nsecond you press enter it's not now any\nlonger so that's a little bit confusing\nso let's create a date here and and\nthat's going to represent pretty much\nyou know right now minus a few seconds\nand from this date we can use a couple\ndifferent methods so one of them will be\nthe two string method and that's going\nto print what we've used here in the\nconsole but of course this is a repple\nso it kind of read evaluate print Loop\nall that kind of good stuff so we can\nuse this two string method to print out\nthe um string of the date and this is\nactually going to print the value of\nthat date which is stor stored in the un\nuh the coordinated universal Tim or UTC\nand it's going to convert it to our\nlocal time zone which is the time zone\nthat our computer has stored on it so\nthat's actually stored in some file on\nour computer I'm not going to go into\nthat but um anyways here we go for the\nnext method so we have my date and then\nwe can use the two ISO string so the iso\nstring is a specific format and let's\nscroll down in my post here because\nwe've got it up anyways and I think I\nhave a little screenshot of the UTC time\nor not UTC but ISO\n8601 um and let's expand this just a\nlittle\nbit and you can see this is going to be\nthe format that we're using for the iso\n8601 standard pause the video look at\nthis if you're uh Curious all right so\nlet's bring this back and well not clear\nthe screen and then my\ndate get date is going to give us the\nactual day of the month so today is the\n16th of January so we get 16 um we can\nalso use my\ndate. uh get month which is a little bit\nunique because this is going to return\nthe zero um it's going to return the\nmonth of the year but it's going to use\nzero indexing so instead of January\nbeing equal to one January is equal to\nzero which is what we're seeing here\nsince this is being filmed in uh January\nso we'll go to my dat. getet full year\nand that's going to return\n2021 um so those are some of the the\nbasic methods that you can use on a\nJavaScript date and honestly these are\nprobably the most common ones you won't\nbe looking at anything else for the most\npart but you can go to the docs\nJavaScript um documentation so again\nJavaScript built-in objects then you can\ngo down to date and then you can see all\nof the different methods that we're\nusing here um something to point out uh\nyou'll see this a couple times within\nthe\ndocumentation uh if you look at the\ndate. getyear method it has this little\nthumbs down icon which basically means\nthat it's deprecated and a deprecated\nmethod is something that is no longer\ngoing to be supported so you don't want\nto use those now if you click on the get\nyear method you'll notice that in our\nexam Le we got we used the G full year\nmethod and the reason is because it says\nthe gete method Returns the year in the\nspecified date blah blah blah and it\nsays it is no longer used and has been\nreplaced by the git full year method so\nthat's how I knew to go to that get fure\nmethod as a\nreplacement so in the previous section\nwe talked about JavaScript dates and now\nwe're talking about the built-in object\ncalled regular expression and this is\nnot just a built-in JavaScript object\nthis is an an entire topic like I almost\nthink of this as um another language\nthat you're kind of trying to learn in\nprogramming it's obviously not turning\ncomplete or anything but regular\nexpressions are basically a way to\npattern match within strings and you\nmight be asking well why would we want\nto do that and to show you why let me\njust open up um a web application we'll\njust go to uh you need a budget and this\nis a budgeting app that I use and really\nlike um but if you go to the login page\num login right here and you type in your\nemail address but you type it in\nincorrectly it's going to say please\nenter a valid email address and you\nmight be asking well how does it know\nwhat is an invalid email address it you\nknow you may go through a bunch of\ndifferent um you know types of emails\nlike a big long list of emails that's\nprobably not going to be efficient of\ncourse but what we can do is we can use\nregular Expressions to pattern match and\nbasically say okay I expect to see um\nthese certain characters and then an at\nsymbol because every email address has\nan at symbol and then some sort of valid\nuh domain or whatever for that email\naddress so we can pattern match and\nthat's why regular expressions are so\npowerful you you can validate emails and\nyou can also do a whole host of other\nthings uh it's great for validation but\nit's not only for validation now as\nwe're going through this just keep this\nin mind this is a very loaded topic as I\nsaid and you don't need to fully\nunderstand how to write these uh regular\nExpressions it's really not a high\npriority thing for you right now if\nyou're trying to learn how to code\nbecause you can get away without regular\nExpressions um while writing web apps\nthey're just very nice to have they can\nreally speed up your workflow uh down\nthe road and you need to be at least\nexposed to them so all I ask here in\nthis video is you understand what they\nare what they do and uh just how to read\nthem in general just kind of\nunderstanding the symbols and be able to\npiece together what a regular expression\nis doing I wouldn't worry about uh\nlearning and mastering how to write them\nso if we go to the JavaScript\ndocumentation um let's see here we'll go\nto Technologies JavaScript as we've been\ndoing just kind of reiterating this then\nyou go to built-in objects and then we\ncan go down to the regular expression\nobject which is going to uh be\nregex and it says it's an object used\nfor matching text with a pattern so as I\nsaid pattern matching now let's go ahead\nand write a basic regular expression um\nI'll show you how to do this here so\nwe'll say email validator regular\nexpression and this will be\nuh kind of similar to what we just\nlooked at where it's validating whether\nthe email address um is correct now this\nimplementation that I'm about to write\nis by no means uh exhaustive and it's\ndefinitely going to miss a couple cases\nand I guarantee you you know YNAB or you\nneed a budget is using a much more\ncomplex expression than the one that I'm\nabout to show you here so anyways let's\ngo through this and just get an idea of\nwhat we're dealing with so let's say\nthat our user input this is what we type\ninto the form so you know I go here I\ntype into the form I type something\nthat's what this user input variable is\ngoing to represent and I might put in\nsomething like invalid email at G and\nobviously this is not a valid email so\nwe should reject this by using this\nregular expression so we'll say a new\nvariable we'll say it's uh is valid and\nthen what we have to do is we take our\nemail validator regular expression from\nup here and we can use one of the\nbuilt-in methods on it so if you come\ndown to the left you can see all of the\ndifferent built-in methods and one of\nthese uh if we go down\nto uh methods are we even on the right\none here okay we're on regular\nexpression okay I was just missing it\ncompletely so here are the methods um\nthese are pretty uh confusing to look at\nbut the two that we're looking at here\nis going to be exec and test so we can\nuse test to just see if something is\nvalid so we're going to go ahead and do\nthat we're going to use the test and\nthen we're going to pass in our user\ninput so we're saying take this regular\nexpression or this pattern that we've\ndefined and map it up against this\nstring that we have defined and if you\npress enter it's going to uh and then\nshow what the value is it's going to be\nfalse because this is an invalid email\nand that expression up there that\nregular expression did not match it now\nif we look at this regular expression\nthere's all these characters which\nprobably look like complete gibberish to\nyou um but I'll quickly walk you through\nwhat this is doing and then we'll go\nback to the basics and really understand\nit so this first character just says I\nwant to start at the beginning of the\nline this period represents all\ncharacters and then this uh plus sign\nthat comes directly after the after the\nperiod says I want to match any\ncharacter one or more times then we have\nthe at symbol which is just looking for\nthe at symbol and then we have this\nperiod again so we want um any character\none or more times and then we use this\nslash to basically escape and actually\nlook for a period so if you have\ngmail.com we need that period and in\norder for this special character to be\nescaped we have to use this uh backslash\nor right here and then we use another\nperiod for any characters one or more\ntimes and finally the end of the line\nwith the dollar sign so I know that's\nsuper confusing I would never expect you\nto follow along with what I just said\nbut just to give you a taste of what\nwe're dealing with here all right so\nlet's go kind of to the very Basics here\nwith uh regular Expressions I like to\nthink of it in two pieces so you have\nthe identifiers and then you have the\nquantifiers and the identifiers can be\none of a ton of different things it can\nbe special characters or just the\ncharacters or phrases that you're trying\nto match these identifiers are what\nyou're actually trying to pattern match\nwithin the string so if we created a\nregular expression we'll say new regular\nexpression and then we're going to pass\nin the letter G and now I'm going to\npass in a couple of strings here so\nwe'll say string one and string two and\nyou'll see that if we're trying to match\nthe letter G it only occurs in the\nsecond string right here so if we were\nto say the regular expression. test and\nthen pass in string one we're going to\nget false but if we test it against\nstring two it's going to give us a value\nof true because it did in fact match the\nG in the middle of the string but in\nthis case our regular expression is just\ntaking a single character and looking\nfor it which is probably not what you're\ngoing going to be doing you're probably\ngoing to get a little bit more complex\nthan that so maybe you test for an\nentire word so let's type another one so\nwe'll say reg or reg re x 2 some people\nsay reg X some Rex regular Expressions\nwhatever um but anyways we're going to\nsay this one is going to be equal to an\nentire word so in both strings we have\nthe word favorite so now if we test the\nsecond uh regular expression up against\nboth of the strings it's going to return\ntrue so no matter which string we put in\nthere it's going to return true there um\nas you can see so we can also match a\nfull word um in addition to just a\nsingle character but the interesting\nthing about regular Expressions um or I\nguess maybe not interesting but\nimportant thing is that it's case\nsensitive so if I were to make another\nregular expression let me go ahead and\njust clear the screen for a second so we\nget some more room um and let's say our\nregular expression\nis going to be equal to um favorite with\ncapital letters at the beginning and the\nend and we of course need to bring in\nour strings again because we refreshed\nthe page but this count this time if we\nmap up the regular expression and test\nit against string one we're going to get\nfalse because there are no Capital uh\nthere's no word in there called favorite\nthat has a capital f and a capital E so\nso you'll see string two also returns\nfalse so this is case sensitive you have\nto pay attention to the uppercase and\nlowercase letters now you don't have to\njust use single letters or single words\nor phrases you can use special\ncharacters and that's really where the\npower of a regular expression comes in\nso there are a multitude of special\ncharacters that we can use but I'm going\nto put on the screen a couple of the\nreally popular or common ones so the\nfirst one is going to be anything that\nwe put in two brackets um and another\nthing that I want to share here is that\nyou don't have to write a regular\nexpression like we did up here this is\none way to do it just like we saw with\nthe strings you can uh modif or create a\nstring in two different ways now the\nmore common way that we're going to be\ncreating a regular expression is you put\ntwo forward slashes and then you put in\nyour regular expression here so in this\ncase I could put in G um and that's\ngoing to be our regular expression that\nwe wrote first we could also put in\nfavorite and that's going to be a\nregular expression and as we saw you can\nactually execute methods on you know a\nliteral uh like this so we can test\nstring one against this but if we go\nback and lowercase these\nletters now it's going to return true so\nthis will be good for me to uh show this\nsyntax so we can quickly Loop through a\nbunch of different patterns here so\nwe're just going to change the regular\nexpression here and we're comparing it\nagainst string one the first thing you\ncan do in a regular expression is a\ncharacter group and all you do is have\nthese two brackets and then whatever you\ndefine in that character group is going\nto apply to the regular expression so\nwhat we could say is a to z um uppercase\nand what that is doing is matching all\nuppercase letters now in our string\nstring one there are no uppercase\nletters so we return false because it\ndoesn't match but we can also pass in uh\nA to Z where we have all lowercase\nletters which obviously does uh does\nmatch at least one of these letters uh\nmoving on we can also have 0 through 9\nwhich is going to match all numbers\nwithin a string now there's no numbers\nhere so it's not going to match returns\nfalse and then you can combine these\ntogether so you can match\nall uppercase letters all lowercase\nletters all numbers and then you could\neven match spaces in here so if we added\na space here we could match uh spaces\nand this is going to return true because\nuh we're matching the spaces the\nlowercase letters so on and so forth so\nthat's what we're using with these\nbrackets you have a lot of different\noptions uh within those brackets now we\ntalked about earlier that this period\nwhen used in the context of a regular\nexpression represents any character uh\nwhatsoever now this is going to return\ntrue um because it represents any\ncharacter uh now the next one we'll look\nat is back SL D and this is going to\nmatch all numbers this is equivalent to\nsaying brackets 0 through 9 so it's\ncompletely equivalent just a different\nway to write it in this case there's no\nnum so it returns false we also have uh\nback SLS which will match any wh space\ncharacters there's spaces between uh the\nwords in these strings so it does match\num then we also have uh back slw which\nmatches all letters and numbers so alpha\nnumeric so these are just some shortcuts\nthat you can use as I said when I was\ninterpreting that uh email validator\nthis little carrot represents the\nbeginning of a string so if we put in\nthe carrot and then we put in an F it's\ngoing to return false because the first\nletter of the string we're testing it\nagainst so string one is actually M now\nif we put in M it's going to return true\nbut we could put in the F returns false\nbecause we're starting at the beginning\nof the line but if we take that out it\nthen returns true because we're no\nlonger constrained to the beginning of\nthe line now what we could do also is\nthe end of the line which is a dollar\nsign so uh f is not the last letter of\nthe stre string it's actually K so\nthat's how we would make that return\ntrue um and then finally we have these\nuh little groups that we can make so if\nyou put parentheses here and then you\ncan say um you could say code or uh\nstake or something like that and that's\ngoing to match either code the word code\nor the word stake and in this case we're\nlooking at string one uh stake is in\nthere so it's going to match so those\nare just some of the different ways that\nwe can write the identifiers and you can\nsee how flexible this is and how\ncreative you can get to match different\num patterns within a string or like a\nline of\ntext now the next thing and the the\nsecond piece of this equation is going\nto be quantifiers now so far we have\nbeen using this test method to basically\nshow whether or not we have matched a\ncertain character in the string but if\nwe um let's rewrite this here so let's\nsay that we want to match um all\nlowercase letters which returns true\nthat's all that's telling us is that in\nstring one we have at least one\nlowercase character now if we come over\nhere and change this test method to exec\nit's going to do a little bit different\noperation and you can read about this\nhere in exec um it shows you kind of\nwhat it returns the different values of\nthis array that it returns but basically\nwhat this is telling us here is that all\nthat it matched when we wrote this\nregular expression is the letter M\nbecause it started at the beginning of\nthe string it matched that one lowercase\ncharacter and it said okay that's all I\nneed to match now if we want to match\nmore than just one character we want to\nmatch a section of a string then we have\nto actually tell it that and the way we\ndo that is through quantifiers so there\nare a a couple different quantifiers and\nI'll try to roll through um all of them\nand explain all of them just really\nquickly as this again is just an\noverview so the first one is a star and\nthe way that this works is you put your\nuh\nidentifier um at the beginning and then\nyou follow that by a star or another\nquantifier that you're trying to use and\nso what this is saying is that I expect\nor I'm trying to match uh any lowercase\nletter and the star is saying I want to\nmatch any lowercase letter zero or more\ntimes so in this case it's you know\nsince we're matching zero or more of the\npreceding character it's pretty much\ngoing to return something every time now\nwe can change this to a plus sign which\nis going to um match one or more of the\npreceding character and then we can put\na question mark to represent either zero\nor one uh quantity of that previous\ncharacter and in this case you see that\nthe uh matched value is going to be only\nthe first letter because we're looking\nfor zero or one now we can be explicit\nabout this so we can say we want to\nmatch a certain amount of uh characters\nbut before we do that I want to add a\nlittle space within this uh uh\nidentifier because right now we're only\nmatching this first word here so if we\nadd a space in here now it's going to\nstart matching the entire uh sentence or\nstring so if we put in the plus sign you\ncan see my favorite food is steak so it\nmatches the entire string because\nthey're all lowercase letters now if we\nwanted to be specific we wanted to match\na certain amount all we'd have to do is\nthese little brackets as a quantifier\nand then we can pass in a specific\nnumber so let's say that we wanted to\nmatch say five characters\nwell it's going to get the first five\ncharacters so my space that counts fa\nand that's going to match the first five\ncharacters now we can also do a range so\num we can say we want to match between\ntwo and six of the preceding character\nuh that we're looking at so it's just\ngoing to match six because that's the\nupper bound but you can match like a\nrange of characters so these are all the\ndifferent quantifiers\num and you can use these to take the\npattern that you're matching and tell it\nhow much of that pattern you want to\nmatch now before we go into kind of a\nfinal example to just tile the concepts\ntogether I want to show you one other\nthing um and that is going to be in the\ndocumentation there is this thing called\na flag so if you define a regular\nexpression so we'll say our reg X is\ngoing to be equal to you know a new\nregular expression but we could also\nwrite it with these two slashes you can\nalso pass in a flag and that goes at the\nend of these two slashes and here are\nall the possible Flags in this case we\nmight want to do a global search so it\nwill search for the pattern um even if\nit occurs multiple times and if you\nwanted to use that all you would have to\ndo is write your regular expression here\nso we might say we want to match uh all\nlowercase letters one or more time\nand then at the end we put a g which\nrepresents that flag so that's just a um\na slight Nuance to this and you'll see\nthis so just be able to recognize it um\nanyways let's move into a basic example\nwhere we can just apply those concepts\nof the identifiers and then the\nquantifiers and then we'll wrap it up\nfor this uh section on regular\nExpressions so we're going to write um\nfirst a string so here's the string that\nwe're going to uh want want to match so\nwe'll say Hello World um and then let's\nput in a couple\nnumbers\n2021 and then let's put in a couple\nspaces here uh and we'll put in I don't\nknow we'll put an at symbol in here as\nwell and then more of a string at the\nend and our goal is to basically write a\nregular expression that is going to\nmatch this entire string so we can do it\nin a multitude of ways but I'll just uh\ngo with the most obvious ways that I can\nthink of so we'll write our regular\nexpression and we're going to use this\nsyntax here so the first thing that\nwe'll notice is that we have some\nlowercase letters uh to start so uh we\ncan use the brackets here so this is\nagain not the most simple way to do this\nbut this will uh hit home all these\nconcepts for you so we'll say that we\nwant to match lowercase letters and\nspaces so let's add in that space right\nthere and we want to match that one or\nmore times and then um actually I'm\ngoing\nto um do this in real time so that we\ncan see what's happening so instead of\nputting it in a variable we'll do it how\nwe did it before so we're going to look\nat um all lowercase letters and then add\na space and then I'm going going to\nexecute that against the string so we\ncan kind of begin to see what we're\nmatching here so we're looking for all\nlowercase letters one or more times so\nwe got the hello world then we're\nlooking for a comma we can just put the\ncomma in as it is um then we're looking\nfor some spaces and numbers so why don't\nwe pass in 0 to 9 and then another space\nand we want to match that one or more\ntimes\nand then we want to match the at symbol\nand then we want to match uh lowercase\nletters so again A to Z and then we need\na space in there and then we say one or\nmore times and then for good measure\nthis is not necessary but we can just\nput this little uh upwards carrot to\nindicate the beginning of the string and\na dollar sign to indicate the end of the\nstring you can see here that we have\nmatched this entire string now of course\nwe can do this a lot lot simpler all we\nneed to do is put a period in there and\na plus sign which matches any character\nuh one or more times and there we match\nthe whole string but hopefully this was\njust a brief overview a very basic\nexplanation of regular Expressions um\nit's a built-in object within JavaScript\nlike we talked about that you're going\nto stumble upon and eventually it may\ncome in handy for you but most\nimportantly just have an understanding\nof what they are what they do and how to\nread\nthem so we've covered a lot in this\nlesson but we're finally making it to\nthe string built-in object in JavaScript\num so again let's come to the beginning\nso Technologies JavaScript built-in\nobjects and then you go down to string\nright here so we kind of talked about uh\nthe string object versus Primitives got\nan overview of this but what we didn't\ndo is talk about some of the methods\nthat we can use on this string and what\nI want to do as I've been doing in this\nlesson all along is basically give you\nthe most important methods the ones that\nI've used a lot myself that other\ndevelopers use commonly and just give\nyou a brief overview of them so that\nthey're kind of in your memory bank and\nyou have them for recall uh later when\nyou have to use them in your code or\nmaybe some code challenges or interviews\nor whatever so we're looking at strings\nand you can see there are a lot of\ndifferent string Methods that we can uh\nuse and again this little downwards\nthumb means that it's a deprecated\nmethod so don't go trying to use uh any\nof those um but again there's a lot of\nthem here and I want to point out some\nof the most important ones so what we're\ngoing to be looking at um let's go ahead\nand refresh\nthis oh I don't know what I've done here\nokay there we go we'll clear this the\nscreen and what we're going to be\nlooking at is the replace all method\nwe're going to look at the two uppercase\nmethod the substring method the trim\nmethod and the match method so that's\nwhat we're going to be covering here and\nagain just basic examples of each as we\ngo through these I'm going to show you\nthe documentation first because I really\nwant you to get used to um reading it\nand understanding how it's working so\nlet's go to the replace all method it\nsays this method returns a new string\nwith with all matches of a pattern\nreplaced by replacement the pattern can\nbe a string or a regular expression so\nwe just learned about that and the\nreplacement can be a string or a\nfunction to be called for each match now\nwe're not going to get into that\nfunction piece that's a little bit\ncomplicated but if we look at the syntax\nhere you'll see some new uh symbols here\nso this little pipe means that there are\nmultiple types of parameters that you\ncan pass in um or not multiple types of\nparameters because obviously there are\nmultiple parameters but for this single\nparameter there's multiple types of data\nthat you can pass in so in this case\nit's saying either a regular expression\nor just a string to match and then the\nsecond parameter so we have the comma\nhere to say okay we're on a new\nparameter uh a new substring so just a\nregular string or a function that will\nreturn basically whatever we want to\nreplace it with so come down here to the\nparameters you can read a little bit\nmore about that but we don't need to\nbecause I'm going to show you how to use\nit so let's go ahead and Define a string\nreally quickly so uh we'll say my dog\njumped on the\nbed my dog is a bad dog all right and\nyou'll notice that I have some weird\ncapitalization in here which is going to\nbe what we're replacing so we want to\nsay we want a new string and then for\nthe string we want to replace all so\nthis is different from the replace\nmethod because um obviously we're\nreplacing all occurrences of the match\nrather than just the first and that's\nwhy I use this one uh more frequently\nbecause in most cases I want to replace\nall rather than just the first match so\nin this case we could just say we want\nto replace the word dog with cat and\nthat's going to assign the new string to\nour variable and you're going to see my\ncat jumped on the bed my dog is a bad\ncat which obviously makes no sense\nwhatsoever because we missed one and\nthat's because this is case sensitive\nbut what we can do is write a regular\nexpression and we just learned about\nthat so we might as well do it all right\nso we're going to say correct\nstring equals my string do replace all\nand then in this case we're going to\npass in a regular expression and then\nwe're we're going to replace that with\nuh lowercase cat so all occurrences of\nthe the word dog uppercase and lowercase\nare going to be replaced with this right\nhere so in this regular expression we\nare going to put a character group and\nwe're going to say we want either an\nuppercase D or a lowercase D and then we\nwant to match exactly so we're going to\nput these little brackets and put a one\nin there so we're going to match exactly\none of these characters either uppc\nlowercase and then we're just going to\npass in uh OG because it's always going\nto end in OG in the lowercase form so\nthen we're going to finally pass in\nLet's see we need to pass in the global\nflag because we want to um replace or\nfind all instance of instances of that\nso let's go ahead and press enter and\nsee what we\ngot so the correct string it looks like\nwe have cat in all of the instances so\nwe replaced it correctly again this g at\nthe end is just the global flag and um\nthere's a bunch of different flags that\nyou can bring into a regular expression\nbut this just means uh match all\noccurrences not just the first the next\nmethod we're looking at is the two\nuppercase method this is a pretty easy\none let's go to the documentation and\ntake a look it says two uppercase\nReturns the calling string value\nconverted to uppercase um um and the\nvalue will be converted to a string if\nit isn't one all right so very simple um\nvery simple function here and we can\npretty much figure out what it does by\njust experimenting around so we'll say\nuh that we want my string to be equal to\nsust string and then all we do oh it's\nsaying I redeclared my string so I need\nto refresh the browser because I already\ndid that so my string equals some\nstring and then we say my string. 2\nuppercase and you'll see that it\ncapitalizes every single character\nwithin that string so it's very\nstraightforward um you'll see where this\ncomes in handy in just a second so the\nnext one we're looking at is the\nsubstring method I use this quite a bit\num if we go to the documentation you're\ngoing to see that there are actually two\nmethods and if you have been following\nalong with this tutorial in the prior\nvideo the 25\nchallenges I actually used the wrong\nmethod here so um you can see that we\nhave the two methods we have the\nsubstring and then we have\nsubst and this substr has the little\ndownwards thumb which means don't use it\nit's deprecated and of course I used it\nin the previous video so um apologize\nfor that but we're going to be using the\nnon-deprecated method and it says it\nReturns the part of the string between\nthe start and end IND uh\nindices so if we we go down to the uh\nfunction signature uh you can see that\nthere's one required parameter it's not\nsurrounded by those brackets and then\none uh optional parameter and these\nrepresent the index of the first\ncharacter that we want to include in the\nreturn string and then the last\ncharacter if we uh want that otherwise\nit's just going to take everything um\nafter that first character so let's go\nahead and give this a try um we'll use\nthe same string here so we'll say my\nstring do substring and let's say that\nwe want to get um everything starting at\nI don't know the letter M so if you\nthink about this the S has an index of\nzero the O has an index of one M will be\n2 E3 the space will be\nfour and the second s will be five so\nmaybe we'll start it at five so we just\nget the second word and then if if we\ndon't pass in a second parameter it just\ngoes to the end of the string which is\nkind of what we want but you could also\npass in something like seven and it kind\nof cuts it off there so that's kind of\nhow the substring method works now I\nwant to provide you with some common\nways that we might use all these methods\nand one of the common ways that I've\nfound to use the substring method um is\nif you want to maybe capitalize the\nfirst word of a sentence so let's say\nthat we wanted to take take my string\nwhich is some string with all lowercase\nand we just wanted to capitalize this s\nand combine that into the full string so\nbasically what we're looking for is this\nright here now if we wanted to convert\nthat here's what we would do we would\nsay um let's just assign it to a result\nvariable so we will say my string and\nthen we want to grab the first letter of\nthe entire string which is going to be\nthat s\nnow we're going to use that two\nuppercase method that we saw in the\nprevious uh method right there and what\nthat's going to do is it's going to grab\nthat s and then it's going to capitalize\nit so all we're getting right now is a\nsingle letter so we can use the plus\nsign we can concatenate uh two strings\ntogether so now we have to get the\nremainder of the string right here and\nthe way that we do that is using the\nsubstring method so we'll say my string\num and then we want to use the substring\nmethod and we want to start at an index\nof one because we've already got the\nfirst uh the zeroth index of s so we\nwant to start the substring at one all\nright and then we can go to the end of\nthe string so all we would have to do is\nbasically just leave it like that and\nwe're done but if you I don't know maybe\nhave a good reason to do this you could\nalso grab my string\nlength to get the very last character in\nthe string as our bounds of that\nsubstring so if you press enter and then\nyou type out result you can see that we\nhave\ncapitalized uh this string or sentence\nif it was longer so that's just a common\nuse case of the substring method\ncombined with the two uppercase method\nand you can start to see how when we\ncombine them together it makes our job a\nlot easier the next method we're talking\nabout is the trim method and this may\nnot seem um all that useful when we\nfirst start looking at it but I will\nshow you why we might use this in the\nreal world so the trim method removes\nwhite space from both ends of a string\nnotice it says both ends it doesn't\nremove white space from in the middle of\nthe string um Whit space in this context\nis all Whit space characters space tab\nno break space Etc um and all the line\nTerminator characters so um a carriage\nreturn here but we don't need to worry\nabout that and the uh call Signature the\nfunction signature is very simple you\njust call it on the string and it\nremoves the Whit space so again you\nmight say well this is not very useful\nbut what if we got some external data\nthat looked like this so this might be\nsome data that you retrieved from an\nexternal database or something and you\nhave no control over how you receive it\nand in this case we have some spaces um\nin these strings so how would we go\nabout remov removing those and returning\nan object that has uh kind of a cleaned\nup um piece of data well we can do that\nusing a loop and the trim method so\nlet's just write a loop a for Loop so we\ndid this a lot in the challenges the\ncode challenges from the last lesson and\nthen we also um learned it in the last\nlesson so you should be familiar with\nthis so we're going to write the loop um\nI Plus\nplus now we're going to Loop through\neach piece of data and what I'm going to\ndo is actually break this out so I'm\ngoing to say the current title is going\nto be equal to external\ndata then we're going to grab the index\nthat we're on. tile and then we're going\nto go down and we're going to grab the\ncurrent author equals external data\niauthor\nnow we're coming down here and this is\nwhere we're going to uh reassign the\nvalues of these properties to the\ntrimmed version of them so we're just\ngoing to say the external data I do\ntitle is going to be equal to the\ncurrent title. trim so it's going to\ntrim the whites space and assign it back\nto that property then we'll do the same\nthing for the author so external data\nauthor equals the current author that\nwe're iterating over trim and there is\nour for Loop so if we print out external\ndata and we look at the array here\nyou're going to see that all of these\nvalues have been trimmed of the white\nspace so that's just um a way that I've\nused it in the past um something that\nhas come in handy for me so I just\nwanted to show you that method for that\nreason now the final method that we're\ngoing to look at the built-in method on\na string object is the match method now\nthis is going to be very familiar to you\nbecause we learned about regular\nExpressions already so I'm going to\nactually bring in something that we've\nalready looked at here so let's write a\nregular expression and we'll just say we\nwant to match uh any lowercase\ncharacters in a quantity of one or more\nand that's going to be our regular\nexpression and then our string is going\nto just be a bunch of gibberish let's\nwrite this correctly\nbunch of gibberish and then maybe some\nnumbers in here and then some more\ngibberish letters all right so there's\nour string and there are actually two\nways that we can test this the first way\nis something we've already seen where we\njust run the exec method on the string\nand of course since we're matching\nlowercase letters in a quantity of one\nor more it's going to grab all of these\nuntil it gets to the numbers and then it\nno longer matches so that's one way we\ncould do it but we we can also do it in\nreverse like it does the same exact\nthing except we're doing it from the\nstring method so all we have to do is\nsay string. match and then we pass in\nthe regular expression and it's going to\nshow us kind of the same thing now this\nis going to be exactly the same as long\nas you are not using the global flag so\nif we were to put in um let's say you\nknow if we defined the regular\nexpression and we put in a to z you know\none or more and then we put this Global\nflag in there that would be when these\ntwo methods do not behave identical but\nfor our intents and purposes you can use\neither one it really doesn't matter just\npick one and go with\nit to this point in this lesson we've\ntalked about dates regular expressions\nand built-in string Methods but we\nhaven't talked about arrays and this is\nwhere it gets really fun now I will say\nthat this list of methods that we're\ngoing to be going through you can\nactually see them on the screen um all\nthese different methods here so we have\nthe push pop shift and unshift those are\nkind of grouped together we have slice\nsplice that these are actually different\nwe have find index and index of they're\nkind of grouped together map for each\nincludes filter and reduce and I chose\nthese because these are the ones that\nyou're going to be using most of the\ntime and these represent kind of the\nbulk\num you know if we can kind of go with\nthat whole 8020 rule this is this is the\n8020 rule of array methods and it's\nobviously not exhaustive um and I'm not\ngoing to go into every last detail of\neach method but I hope that Um this can\nbasically walk you through the basics of\neach so that when you have to use them\nit's not a complete shock you kind of\nknow what's available to you um which is\nkind of half the battle sometimes just\nremember these are not to memorize don't\ntry to memorize these um like any\nbuilt-in method you can always look them\nup and as I've been going through in\nthis video you know how to read the\ndocumentation now and I'll continue\ndoing that for each of these array\nmethods so that you can just get better\nand better at um you know acquainting\nyourself with the different uh syntax of\nthis documentation so let's get started\nwe'll start with the push pop shift and\nunshift methods and we're not going to\nreally go through all of these in the\ndocumentation because they're so similar\nwell let's go to JavaScript again\nbuilt-in objects and we're going to the\narray object which has instance methods\nthat we're going to be looking at here\nall right so we will start with pop\nwe've actually already looked at this\nwhen we talked about reading\ndocumentation this is going to remove\nthe last element from an array now we\nalso have uh shift right here this is\ngoing to remove the first element of the\narray then you have the method that\nwe're going to be using using the most\nout of all of these um which is the push\nmethod this just takes an element and uh\nor an element or more than one element\nand adds it to the end of the existing\narray and then finally the unshift\nmethod um down here somewhere this is\ngoing to add an element or elements at\nthe beginning of the array again I think\nthe push method is probably going to be\nthe most uh widely used but let's just\ngo ahead and see what we're deal de with\nhere so we'll make an array we'll add\nthree elements in there and um\nmaybe let's go ahead and put a gap in\nthere so we'll skip four and we'll put\nin five and six or something like that\nall right so there's our array so what\nif we wanted to um basically add the\nfour in there so basically all we have\nto do is array. pop that's going to take\noff the six and it returns six not\nbecause the value is six but because\nthere are um six elements or maybe maybe\nit did it does return the element that\nthey that it removed from the array I'm\nsorry about that all right anyways we\nwill go and do that\nagain because we need to remove one more\nso now our array looks like this we just\nhave 1 2 3 and now we can push four five\nand six to the end and we are back to\nwhat we started with but this time it\nhas all of the uh numbers in order so of\ncourse we can add the zero at the\nbeginning so we just say array. unshift\nput a zero in there and now our array\nhas zero through six so you can kind of\nget an idea of how this works and\nthere's not a whole lot to it all right\nlet's move on to the slice method now\nthis one is going to come in handy um\nwhen you need to make a copy of an array\nand this is not going to be apparent why\nthis is useful right now but once you\nstart getting into\num front-end programming where you're uh\nwriting code in either angular or react\nor uh view JS or something like that\nthere's this concept that we call state\nwhich basically um it it's how the data\nflows through the front end of your\napplication and when a user updates\ntheir profile or whatever and that data\nupdate affects another part of the\napplication um the state is what makes\nthose changes propagated across the\nentire application and when we're\ndealing with State we often deal are\ndealing with IM mutable objects things\nthat cannot be changed so making a copy\nof the data that you're um putting into\nstate is going to be extremely useful\nand to do that you can use this slice\nmethod so let's look at it um in the\ndocumentation we'll go to slice um it\nsays it returns a shallow copy of a\nportion of an array when it says say\nshallow here that just means that you\nhave like if you have nested objects or\narrays it's not going to uh pick up on\nthose it only gets like the first layer\nor whatever um you'll need a more\nadvanced method to do like a deep copy\nof an object and I'll talk about that a\nlittle bit um later in this lesson so\nbasically what it's doing is it's taking\ntwo optional parameters um so if we\ndon't Supply any sort of parameters at\nall then it's just going to let's see\nwhat it says so if we don't put any\nparameters at all it's just going to\ncreate a copy of the entire thing\notherwise it will create a copy of a\nspecific part of an array so let's see\nhow this works we have an array already\nright here but um let's say that we\nwanted to take out two three and four or\nsomething like that so we've already got\nan array on the screen and let's say\nthat we wanted to make a copy of the\nentire thing so we can say copy of the\narray is going to be array. slice we\ndon't need to pass in any parameters cuz\nwe just want the entire thing and now\nthe copy of the array is going to be a\nperfect copy now if you were to compare\nthese so copy of the array versus the\narray they're not going to be equal so I\nsay that Loosely but that is a concept\nthat we talked about when we uh looked\nat the JavaScript operators in a\nprevious lesson all right so if we\nwanted to grab like a specific part of\nthis array so another copy and we want\nto grab um everything starting at three\ntill the end of the array you might say\nslice and then you want to give it an\nindex of uh not zero not one not two but\nyou want to start at three so you want\nto give it an index of three and now\nanother copy is going to be equal to\n3456 so that's just a uh quick overview\nof the slice method the next meth method\nthat we're dealing with is called splice\nand it is not to be confused with slice\nso if we go to the documentation click\non splice it will say that this method\nchanges the contents of an array by\nremoving or replacing existing elements\nand or adding new elements in place so\nin other words this is useful if unshift\nand push those two methods we learned\nabout are not sufficient you want to\nactually replace something in the middle\nof the array rather than just the\nbeginning or the end now I want to look\nat the function signature on this one\nbecause it's kind of interesting so it's\nthere's a lot going on but the only\nrequired parameter is this start which\nis the index at which you want to start\nchanging the array then the comma here\nit says we're going to a new parameter\nwe want the delete count so it's\nbasically saying we want to start at a\nspecific index and now we need to\nspecify how many items of that array\naray are we going to delete starting at\nthat index now if we don't provide this\nbecause it is entirely optional it says\nif this is omitted or if its value is\nequal to or larger than the array.\nlength minus the start we don't need to\nget into that then all the elements from\nstart to the end of the array will be\ndeleted so let's say that we you know\nspecified the start as index of one then\nit's going to basically delete\neverything except for that first element\nso um the next part that we have are\nthese interesting brackets where we just\nhave item one item two and then the dot\ndot dot this is basically saying that\nyou can have an infinite number of\nparameters um that you can replace and\nit looks like if we come down here to\nitem one two dot dot dot it says the\nelements to add to the array beginning\nfrom start if you do not specify any\nelements splice will only remove\nelements from the array so this kind of\nchanges the behavior of the entire\nmethod we go from removing elements to\nadding elements to the array so you can\nsee how reading the documentation can be\nvery helpful in our case we're just\ngoing to go through a basic example so\nwe'll say that our array is going to be\nequal to 1 2 3 and then we'll put in\nsome string that doesn't belong there\nfour five six all right so what if we\nwanted to well hold on I cleared the\nscreen but did not refresh and I tried\nto redec that array variable so let's\ntry again so 1 2\nthree four five\nsix and what if we wanted to remove that\nstring from there so all we'd have to do\nis array. splice and then we want to\nspecify that we want to start at the\nindex of three so this is 0 1 2 and then\nthree so we want to start at the index\nof three we want to remove a single\nelement so we just want to put in a one\nright there and then at the end we can\nput in um let's say what we want to\nreplace it with so in this case we want\nto remove this string and replace it\nwith something so maybe something in\nbetween we'll put 3.5 or something all\nright so it Returns the uh item that was\nremoved and now our new array has the\nreplacement value in there so at this\npoint I think it's a good time to just\nbriefly mention um the fact that we are\nmutating this array right here now when\nwe looked at string Methods none of\nthose methods actually uh modified the\nexisting string and that is because an\narray is not a primitive value now a\nstring is a primitive value and for that\nreason it is immutable and you cannot\nchange it now an array is mutable so\nthat means that these uh methods that\nwe're using are actually editing the\narray itself and um you don't have to\nbasically create copies you could if you\nuse the slice method though all right so\nthe next one that we're dealing with is\ngoing to be the find index and index of\nmethod so here's the find index it\nReturns the index of the first element\nso only one that satis satisfies the\nprovided testing function\nall right so this is where we start\ngetting into the Callback functions that\nI talked about so if you don't\nunderstand callback functions be sure to\ngo to that prior part of the lesson here\nand really uh wrap your head around\nthose because from here moving forward\nwe're going to be dealing with them in\npretty much every array method anyways\nit says if there's no match so if your\ntesting function does not match an\nelement you're going to get a value of\nnegative one so we know that if this\nmethod returns us Nega -1 then what\nwe're trying to match does not exist in\nthe array otherwise we get the index uh\nto grab it from now this is kind of\nsimilar so the find index is kind of\nsimilar to the index of method so if we\ncome down here and grab the index of\nmethod it's just going to return the\nfirst index where the given element is\nfound there's no such thing as this you\nknow callback function that matches or\nanything we're just searching for a\nspecific string\num and again this will return NE -1 if\nthat is not present now this is a little\nbit less powerful and like I said uh\ncallback functions enable reusability in\nthis case we just search for a raw\nstring with the find index we can\nspecify an entire testing function so in\nthis case if you can grasp your head\naround these callback functions the find\nindex is going to be a little bit more\npowerful for you so let's see if we can\ncome up with a good example for this\nwe'll use what we got for the index of\nmethod so again array is equal to this\nright here and we could just say array\nindex of and maybe we want to look for\nthat value of\n3.5 and it's going to give us an index\nof three so what we could do here is we\ncould basically say Okay I want to get\nthat uh value here so we can say array\nthen we can use the bracket notation we\nobviously have to pass in an index and\nthen we can find this index it's kind of\nuh circular here but I'm just trying to\nshow you how this might be used and then\nwe pass in there and now we can actually\nget the value so previously we just\nlooked at for the index right here but\nnow we're actually getting the value\nreturned because we used that index and\ngrabbed it from the array all right so\nthat's how you use index of now let's uh\ntalk about how you might use the find\nindex method for a little bit more\npowerful search now what if you had a\nmore complex array um like this this is\nobviously got a lot more to it it's got\nobjects that have two properties first\nname and last name now if you tried to\nuse the uh index of method so more\ncomplex array and then you used index of\nand then you started putting an object\nin here and typing out first\nname um equals Bob so on and so forth\nyou're not going to get a match it will\nnever match because you can't do that\nkind of uh equality comparison so all we\nhave to do is use the find index so this\nis going to return us the index of the\nfirst match that we have identified\nwithin this array so let's say that we\nwant to identify um any or we want to\nidentify the first item in this array\nwhere the last name uh does not equal\nSmith so that's obviously the last um\nvalue and that would be the 0o 1 2 third\nindex so we expect an index of three to\nbe returned and what this expects as an\nargument if we go to the find index\nagain you'll see that we uh need to\nreturn a call back and that call back is\ngoing to have a couple of uh arguments\nthat we uh can use here so let's look at\nthis real quick the Callback has an\nelement so that's the current element\nbeing processed in the array that's not\nnew to us we have the index of the array\nwe don't probably don't need that and\nthen we have the original uh array that\nwe're looking at and we probably don't\nneed that as well um and then finally we\nhave uh another argument after the call\nback and it says optional object to use\nas this when executing the call back we\nhaven't talked about um the this keyword\nyet so we're not going to worry about\nthat all right so we need to pass in a\ncall back let's go ahead and populate\nthat with the array item and that's all\nwe're going to use here we could have\npassed in the index and the original\narray but we don't need to and then in\nthis case since we're searching for\nanything that does not equal Smith we\ncan just say where array item. last name\ndoes not\nequal uh\nSmith All right so what this is going to\ndo is return us a value of three which\nis the index of the first element that\nis not Smith which happens to be this\nlast uh object down here John Doe so so\nyou can see how powerful this is as\ncompared to the index of method um\nthere's a lot more things you can do\nwith it but as I said this is just an\noverview of each method the next method\nwe're looking at is the map method now\nwe've already looked at this in the\ndocumentation a little bit earlier in\nthis lesson let's look at it once more\num this was the method we kind of used\nto prove out the reusability thing um\nbut basically if we look at the\nparameters that we can put in here it\nsays that we have a a callback function\nand then similar to the um the previous\nmethod we just looked at we have the\nthis ARG which we haven't covered\nanything about that so we're not going\nto get into it so basically if you\nremember this is just a transformation\nfunction and it's going to Loop through\nan array and per uh perform a\ntransformation according to your\ncallback function on each element in the\narray so let's consider this array right\nhere where we have blog posts from a\ndatabase and in this case all all of\nthem are\nuncategorized so what if we wanted to\nreturn a new array but in the new array\nthe category is going to be set to\nsomething like web development well all\nwe' have to do is use the map method now\nof course you could you know type it out\nand say blog post\nfrom database and then go at zero and\nthen type in the category and set it\nequal to something but that's going to\nget really clunky and slow so what we\nneed to do is say blog post from\ndatabase. map now this is where we pass\nin our map function so we're going to\npass in the array\nitem so as we go through each item the\nfirst thing that we need to do is we\nneed to modify that actual property and\nthen we need to return um the item in\nfull so we'll say array item. category\nequals web development all right so\nthere we have modified this individual\narray items category property and now\nwe're going to return the array item\nwhich has been modified all right so\nwe'll press enter and now you can see\nthis map function Returns the following\narray and in this case we now have the\ncategory updated for all of these\nproperties so this would be a really\nuseful function to do um in the real\nworld and I've actually used um\nsomething very similar to this example\nuh in some of my app so it's super\nrealistic and super helpful it will save\nyou a lot of time next up in our lineup\nis the for each method and until this\npoint we've been looking at arrays uh\nand looping through arrays in one\nspecific way so this is how we've been\ndoing it if we have an array that has a\ncouple values in it now we write our for\nLoop so we initialize I to zero we go\nuntil I is uh less than the array.\nlength and then we increment I then we\ndrop down into the for Loop and we're\ngoing to do something here so maybe\nwe're just going to print the uh element\nof the array that we're at so there you\ngo print it and we can do all sorts of\nstuff within that code block now there's\nanother way to write a for Loop that we\nhaven't talked about yet and that is the\nfour each um method on an array so\nhere's how we would do that\nwe would um say array. 4 each and now\nwhat's going to happen is we have a\ncallback function that gives us the\narray item and then we drop down into\nthe function and we can once again\nconsole.log the array item all right so\nthat's just a simple way to replicate\nthat array up there you can also get the\nindex so if we looked at the\ndocumentation uh of the for each method\nit's going to say here's our call back\nthat we're looking at and it's going to\npass us the current value and it's going\nto pass us the index and the original\narray so again this is this signature\nright here the the function signature is\ngoing to be very similar if not the same\nfor pretty much all of these more\nadvanced array methods so in this case\nif we wanted to take this uh for Loop so\nlet's clear the screen once more here's\nour array that we're looking at and if\nwe wanted to do the for Loop we use four\neach uh we want the array item and then\nwe can grab the index so in this case we\nhave two things to work with and we'll\nconsole.log say the array\nitem and then we will enter down and\nconsole.log the index and you can see\nthat we are printing uh the value of one\nwhich has a zero index the value of two\nwhich has a one index and the value of\nthree which has has number two index so\nthis is really useful um a little bit\nquicker than our other for Loop now\nthere are a couple differences but\nnothing that we need to talk about right\nnow you'll find those out as you start\nprogramming and I'll try to point them\nout within this series if we stumble\nupon them the next method that we're\ntalking about is the includes method so\nthis is going to help you find um a\nsingle element and determine whether it\nexists within an array so there are\nmultiple ways to do this and I'll show\nyou a couple different ways uh and kind\nof prove out why the includes method\nmight be the best in a lot of cases so\nlet's say that you have the following\narray you have my colors you want to\nfigure out whether um the color orange\nexist within this array using some code\nnow there are a couple ways that you can\ndo this but one way that we can use is\nwhat we're basically um accustomed to\nseeing and we're going to initialize\nthis variable right here we'll say that\nit's false and then if When We're\nlooping through this array if any of the\ncolors equals orange then we set that\nvariable to true and now we can figure\nout if orange exists which should be\ntrue so that's one way to do it but\nthere is a simpler way to do it with the\nfor each method so we could say um\nsomething like this so we've already got\nthe orange exist um variable and all\nwe'd have to do is Loop through it that\nway set it to true and we can say orange\nexist and that is going to be equal to\ntrue now there is a even simpler way and\nit's using the includes method so all we\nwould have to say is my colors do\nincludes and then type orange and it's\ngoing to tell us true that does exist in\nthe array so as you can see it's a lot\neasier to use a method like this then go\nthrough all of those for loops and you\nknow store the value in a variable and\nstuff like that now just to connect the\ndots here and show you that there's a\nvariety of ways to solve problems within\nuh coding you could have also used the\nindex of method so if we would have said\nmy colors and then you say index of and\nthen you type orange and you return that\nit's going to give you an index of three\nso basically all you would have to say\nis that statement right there and you\nsay if that does not equal -1 then our\nitem exist with the in the array because\nif it returns NE -1 then it didn't find\nit and we know that it doesn't exist so\nthat's just another way to solve it and\nhopefully You' seen that there are in\nthis case there are four different ways\nthat I went through something like that\nof checking whether something exists in\nan array the next method that we're\ngoing to use is filter and this is\nprobably the most um frequent in method\nfor me uh this is the one that I use the\nmost probably I don't know for sure but\num this one and map are probably the two\nthat I would use the most within my code\nnow the filter method does exactly what\nyou think it would do it filters out\ndifferent results so let's say that you\ngo on Amazon and you go to your orders\npage it might look something like this\nyou know this is fictitious it's not\nactually what their data model is going\nto look like but you can see that maybe\nwe have some different properties on our\nERS array and this is going to represent\nall of the orders but you know when you\ngo on Amazon you can click on buttons\nand filter those orders by date um by\nwhether they're open open whether\nthey're cancelled or whether they're\ndigital and we can do this with the\nfilter method which is basically going\nto return us an array that has been uh\nfiltered based on a callback function\nthat we provide to it so with this array\nyou can see that we have this is digital\nproperty so we could find all of the uh\ndigital products uh we could save that\nto an array by saying digital orders and\nthen we'll set that equal to all orders.\nfilter and now this is where we pass in\nour callback function which again\nreceives the array item and then we will\npass that into our function and return\nanything that is digital so we'll say\narray item. is digital which is a\nBoolean so if it's true then we're going\nto return return a true value and it's\ngoing to be included in our resultant\narray so now our digital orders if we\nprint that out you'll see that we have\ntwo of them and it says is digital true\nso we know that we match those correctly\nnow there's a couple other filters that\nwe could do we could paste in this and\nsay okay we want all of the digital and\ncancelled orders so we're returning a\ncondition where it says we want to check\nif it is digital and it is canceled so\nin this case we can print this\narray digital canell orders and we only\nhave one of those uh where you can see\nis digital is true and is canceled is\nalso true so this is a super useful\nmethod and it's often used on the front\nend where you're like I said on your\norders page on Amazon and you click the\nbutton and it might execute uh this\nfilter method and just show the user\nwhatever is filtered so this is really\nuse I use it all the time um on the\nfront end and you can even use it on the\nback end a little bit as well now I\nsaved the hardest for last um of course\nbecause I didn't anticipate the fact\nthat I'd be talking uh for such a long\nperiod of time but we're going to go\nahead and try this anyways this is the\nreduce method so if we look at the\nreduce method um within the\ndocumentation it's going to give us a\nvery interesting um callback function so\ninstead of the array item and then the\nindex and then the original array that\nwe get passed into our callback it's\ngoing to give us some interesting\nparameters so it gives us the\naccumulator it gives us the current\nvalue and then it gives us some optional\nparameters here index and then the\noriginal array and then finally we pass\nin uh in addition to the call back an\ninitial value that we want to initialize\nthis accumulator to so I'm not going to\ngo through all of these I'm going to put\nthis into terms that I think we can all\nkind of recognize so let's go ahead and\npaste this in and this is the code that\nyou're probably used to seeing so if we\nwanted to find the sum of this array so\nwe wanted to add all of these numbers\ntogether this is how we would do it and\nthis is how we did it in the 25 coding\nchallenges that we practiced for the\nprevious lesson so in this case we\ninitialize a sum variable to equal zero\nso we start the count at zero then we\nLoop through our array and for each\nelement in the array we add it to the\nsum using the Plus or plus equals\noperator and then at the end we conso\nlog the sum which is going to equal 99\nuh because that's the sum of all of\nthese values in the array now what I\nwant to point out is the fact that this\nsum variable is essentially accumulating\nvalue values so it's basically called\nour accumulator so if we go back to the\ndocumentation it shows that the first\nargument of this call back is the\naccumulator so you can think of this as\nour sum variable that we just wrote\nright here so what I'm going to do is\nright below here I'm going to rewrite\nall of this code but using the reduce\nmethod so the first thing I'll do is\nwrite our reducer callback function and\nwhat this callback function is going to\ndo is it's going to accumulate the value\nso if you uh look at the documentation\nit's going to First Take This\naccumulator parameter which is basically\ngoing to act as this sum variable right\nhere so up top we defined it like\noutside of the for Loop but here we can\njust pass it in as a parameter to the\nCallback and then we have an array item\nso that's going to be another parameter\nand we have others but we don't need\nthem so let's go ahead and just use this\nand now what we're going to do is we're\ngoing to return a value so we always\nreturn a value from the call back for\neach array item and in this case this\nsum variable is going to be uh\naccumulated over the course of looping\nover this array so the reduce method\nautomatically takes care of that and\nmakes sure that that accumulates a value\nso all we have to do is say sum Plus or\nequal array item and what this is going\nto do is exactly the same thing that\nwe're doing up here but we're adding the\narray item and we're doing it all within\na callback function so let's define that\nand now we can say that we want our\nresult to be equal to array. reduce so\nwe're uh using the reduce method and we\nneed to pass in our reducer call back\nand then we need to pass in one more\nthing so if you go over to the um syntax\nyou'll see that we have the call back\nwhich is encompassed uh in the Highlight\nright here but then you'll see after\nthat highlight we have a comma and then\nanother uh parameter called initial\nvalue and if you come down and read\nabout the initial value it's basically\nsaying that this will represent the\nstarting value of this sum variable that\ngets passed in for every iteration so we\nwant to start that at 0o just like we\nstarted the sum up here at zero and when\nwe press enter and print the result\nwe're going to get 99 which has done the\nsame thing as our code above so while it\nlooks very confusing um it is very\nconfusing you can kind of anchor\nyourself to this more uh simplistic code\nthat we've already written and already\nunderstand so that is the reduce method\nand the last thing I want to show you\nabout it is how you can use this to\nbasically uh get the average of numbers\nin an array so we went through some\npractice problems um in the 25 practice\nProblem video previous to this lesson\nand we had to calculate an average of an\narray I believe and of course there is\nno average method on the array object\nI'm not sure why doesn't make a whole\nlot of sense to me but you can use this\nreduce method to actually calculate your\nown average of the array in just a\nsingle line here's how you're going to\ndo that all right so we're going to say\narray. reduce and then we're going to of\ncourse pass in the sum and then the\narray item so we're writing the same\nthing that we have written already we're\njust going to do this in one line so\nwe're going to take the sum Plus or\nequal the array item all right so what\nthis should give us right here is going\nto be equal to um of course after we\npass in our initial value that's going\nto give us the sum of the array and then\nall you have to do is divide that total\nby the array. the length and now you\nhave uh retrieved the\naverage of this array so that's just a\nway that this can be really useful and\nyou might take a second to look at this\ncode and see what it's doing because\nit's a little bit confusing um as a\noneliner like this but anyways that's\njust a really practical example of\nsomething that I've used before in uh\nwriting actual code all right so that is\nthe end of the uh most common built-in\narray methods now you might be wondering\nwell what happens if I find an operation\nthat doesn't have a method um already\nbuilt for it and the answer to that is\nyou probably will be using some sort of\nexternal library to do that and the most\ncommon one uh for us JavaScript\ndevelopers is going to be the low Dash\nLibrary so if you type in low Dash and\nyou click here this is a modern\nJavaScript utility Library delivering\nmodularity performance and Extras and if\nyou go to the documentation you'll see\non the left that at the top we have our\narray data type and you'll see that we\nhave a bunch of different methods that\nwe can do all sorts of really um\ninteresting things with so we have a\nlimited set of built-in JavaScript\nobjects but the developers of low Dash\nhave taken it a step further and\nbasically um created some additional\nmethods so if you remember something\nthat was tough for us is comparing the\nequality of two objects\nso if we go in here and create uh two\nobjects so we'll say object one and\nwe'll set that equal to prop one and\nsome value all right and then we have\nobject two and then we want to just set\nthat perfectly equal to this all right\nso we put that in there and now if we\ntry to compare them it's going to say\nfalse and that's going to stay false\neven if we use double equals and that's\nbecause we can't compare the equality of\nof two objects and if you wanted to\nwrite a function that actually compares\nthe equality of two objects it's going\nto take you hundreds of lines of code\nbut if you use the low Dash Library you\ncan actually look at something um let's\ngo down here a little\nbit and we have this method called is\nequal and this is equal can actually\ntake two objects as you see here so\nthese are basically the example we just\ncame up with\nand it checks if they're equal and it\nreturns true and behind the scenes this\nlibrary is running hundreds of lines of\ncode to make this comparison and you can\nsee how we can extend our functionality\nby using external\nlibraries so let's go ahead and look if\nwe go to the documentation on mdn Go to\nJavaScript go to built-in objects and go\ndown to the math object you're going to\nsee that there's a lot of built-in math\nfunctions and as a developer you might\nbe saying well hey I'm not writing a\nbunch of Finance applications I probably\ndon't need this well I'll show you in\njust a few seconds why it might be\nuseful for you all right so if we go\ndown here this is a little bit different\nthan we're used to seeing so if we come\ninto the console and talk about like\ndates or something we know that we can\nmake a date by saying new date all right\nso that's the syntax that we're used to\nIt's called The Constructor syntax\nbecause we are constru ing a uh I guess\ncopy of this uh date template or the\nobject I mean these are all terms that\nI'm kind of using in quotations because\nthey're not uh perfectly true but you\nkind of get the point all right so this\nis the way of constructing an object now\nwith the math Library you'll see that\nall of the methods we're just taking the\nactual object we're so we're saying math\nand then we're just executing the method\nagainst it so instead of saying let's\nsay my date equals new date and then we\nsay my dat. getet uh date or something\nlike that we are uh first constructing\nthe object and then using a method on it\nand this is how we've done it with all\nof these so you might say well why don't\nwe say uh math equals new math and you\npress enter and it's going to say math\nis not a Constructor well this gets us\ninto uh the concept of object or\noriented programming um the math Library\nactually has rather than instance\nmethods so uh with the previous ones\nwith the date object and the string and\nthe array we have to first construct the\nactual object and then we uh call\nmethods on top of that object which are\ncalled instance because we have an\ninstance of that object and we call\nmethods on top of it now with the math\nLibrary we're just using static methods\nso we just call it directly from the\nobject and it's pretty simple so let's\njust go through a couple of quick ones\nthat you might um you know find useful\nso uh let's see what my list shows right\nhere so let's clear the\nscreen and here are some of the common\nones so we have math. Pi that's going to\ngive you the value of pi um we have\nmath. so this is I think ul's constant\nor something like that that might be\nsomething that you use\num and then we start getting into the\nmethods so we have the absolute method\nand we can actually um pass in a\nnegative number and get a positive or\nabsolute value of that we also have the\nuh math. sealing method which is going\nto round up to the nearest integer so\nlet's say that we pass in math. piy\nwe're going to round 3.14 up to the\nnearest integer of four likewise we have\nthe floor method so we take math. piy\nagain and it rounds it down to three and\nthen finally we have the math.round\nmethod and again if we put in math. pi\nit's going to round it to three because\n3.14 is closer to three than it is to\nfour all right so those are some quick\nuh methods that you can use you can also\nuse the Min and the Max uh method so if\nwe had Min you can pass in a couple\nnumbers and this is going to give you\nthe smallest number and then of course\nMax will do the opposite so same numbers\nbut we get the highest number all right\nand then the final one is math.random so\nthis is going to give you a random\nnumber or random decimal between 0o and\none now this has implications that you\nprobably don't understand but we've\nactually used this to get a random index\nof an array for previous videos and I'll\nshow you exactly how we can do that all\nright so let's decompose this into steps\nso first let's get a random number and\nset that equal to math.random all right\nso this is going to equal something\nbetween 0 and one let's just see what it\nequals right now all right so it equals\n97 all right so we know that if we\nmultiply um something between zero and\none by another number it's going to give\nus a whole number between zero and\nwhatever number we're multiplying it by\nso if we multiply random\nnumber times 5 we're going to get a\nnumber between 0 and 5 so we can use\nthat to say that we want a larger number\nwe'll just call it that and we'll say\nthat will be equal to random number um\ntimes a you know we'll say 100 so now we\nget 0 to 100 and then finally this is\ngoing to be a decimal when we look at it\nbut if we wanted to bring this down to a\nwhole number we just say math. floor and\nthen pass in the larger number and now\nwe have 97 all right so we can combine\nthis with our knowledge of uh the length\nof an array to get um a range of random\nnumbers that are within the bounds of an\narray so let's just Define an array real\nquick and we'll just\nsay\nsome\nvalues blah\nblah all right so we got four values in\nthere um the length of this array is\nfour so here's how we get a random index\nof our array we'll say random index and\nwe'll be setting that equal to all right\nso we will say math. floor because we\nknow we need a whole number now we want\nto pass in math. random so a number\nbetween 0er and one and then we want to\nmultiply that by the array. length so\nthat we can get from zero to the length\nof the array which is always going to\ngive us a valid index all right so we\nwill set that equal press enter and now\nwe can just take our array and pass in\nour random index and it's going to give\nus a random value of that\narray next up we have to talk about air\ntypes within JavaScript and we're going\nto combine that with some of the data\ntypes that we haven't quite talked about\num up to this point all right so air\nhandling in Java JavaScript is something\nthat a beginner is not going to um find\nthe value in most likely I know I didn't\nwhen I first started out I could not\nunderstand why we need to handle errors\nwithin our code but there are some\nreally important implications to this so\nif you have an external library that\nyou're calling or maybe you're fetching\ndata from an external database um or\nsomething like that you don't know what\nthe behavior of that external code is\ngoing to be so it could give you an air\nor for that matter let's say that you're\nbuilding an app that's similar to say\nInstagram and your user who maybe is got\nsome spotty internet at the time is\nabout to press post on their Instagram\nphoto and as they're pressing post their\ninternet goes out all right so clearly\nthe code that's going to be run is going\nto fail and what we want to do is handle\nthat correctly so when you try to post\nand you got no internet you're probably\ngoing to see a message on the screen\nthat says something like no internet\nplease try again when you're connected\nnow that is proper air handling because\nwe have detected that something went\nwrong and given the user a meaningful\nmessage um for that now if we didn't\nhandle errors and we just you know ran\nour code and just you know threw caution\nto the wind and said hope it works well\nin that case when that user post post\nthe photo and the internet goes out the\nwhole Instagram app is going to crash so\nwe obviously don't want that to happen\nthat's a terrible user experience and\nthat is the value of air handling now in\nJavaScript there are three main types of\nairs there are actually more so if we go\nto the um\ndocumentation JavaScript built-in\nobjects and then we go to\nair now this is going to be what we call\nthe B class this is the like you know\nparent air type and within this air type\nthere are several um subtypes of erors\nthat we might see now there are three of\nthem that I consider the most common and\nyou'll probably see the most often and\nthose are the ones that we're going to\ntalk about here in this video so the\nthree we're going to talk about are\ngoing to be the reference air the syntax\nair and the type air and I'm just going\nto walk you through a couple situations\nwhere you might encounter these and just\nexplain like what they are and then\nfinally we're going to talk about how to\nactually handle an error in JavaScript\nso the first one is going to be a\nreference there so let's click on that\nand this reference error it says is\ngoing to represent an error where there\nis a non-existent variable that is\ntrying to be referenced basically all\nright so a good example of that is if we\ndon't have a variable defined but we try\nto maybe print it to the screen or use\nit so let's just just Define some\nvariable we'll set it equal to 20 and\nwhen we try to reference that by just\ntyping it into the repple or the console\nit's going to give us a value but if we\nwere to type in um another variable and\npress enter we're going to say it's an\nuncaught uncaught reference error\nbecause another variable is not Define\nso when we think of referencing we're\nbasically trying to find a reference in\nthe computer's memory of that variable\nand if we haven't declared it yet then\nit obviously doesn't exist and we have a\nreference or a lookup err so that's the\nbasics of a reference error now a syntax\nerror is the next one so let's look at\nthat um we'll go back to the main eror\npage go to syntax error this is where\nyou're writing invalid JavaScript so\nthis one's not very hard to replicate\nall you have to do is write invalid\nJavaScript so um let's say that we\nwrite an object and we set it equal to\nthis right here so we'll say prop one\nsome value and put a semicolon at the\nend enter\ndown and another value and put another\nsemicolon semicolon at the end and it's\ngoing to give us a syntax error because\nthese semicolons right here don't need\nto be there those those should be commas\nnot semicolons so we wrote invalid\nJavaScript and we got a syntax erir\nbecause of it so this one's pretty easy\nnow the last one the type ER this one is\na little bit more confusing so let's\nlook at it real quick go back to the\nmain documentation go to type air now\nit's going to say a type air represents\nan air when the operation could not be\nperformed because you're doing it on you\nknow a variable or a data type that\ndoesn't have that operation so something\nthat you might think is going to throw\nthis kind of air is I don't know adding\ntwo objects together so let's say that\nwe have object one and we're going to\nset that equal\nto uh I don't know say 20 here and then\nwe'll come down and do another\nobject this is just totally arbitrary\nI'm just making some examples now what\nif we said object one plus object two\nyou would think that in instead of\nreturning this string with like\nmeaningless object uh notation we would\nactually get a uh type A because we're\ntrying to do something um that can't be\ndone we can't add two objects together\nlike this they're not uh integers or or\nnumbers when you're going to get a type\nair is when you're trying to um pretty\nmuch call a method on the wrong data\ntype so let's say that you have a number\nall right so we'll set that equal to 20\nand on that number you're going to say\ntwo\nuppercase now we know from earlier in\nthis video that two uppercase is a\nmethod attached to the string object not\nthe number object so in this case we get\na type air because it's not a function\nnow this might also happen um we have\nthese objects up here and our property\non the object is not a function but if\nwe tried to call it like we call a\nfunction it's going to give us a type\neror because prop one is not a function\nso that's what a type air is all about\nnow the last thing that we have to talk\nabout is actual air handling and as we\ntalked about it's important because you\nwant to give a user um the correct\nmessage when they you know run into an\nair and you also don't want your\napplication to completely crash every\ntime an air happens because it happens\nall the time with code so to do this we\nuse something called a try catch block\nso the first part we put um the word try\nand then we put these two brackets so we\nenter down and whatever code goes in\nthese brackets is going to be um checked\nfor errs and if there's an air then it's\ngoing to throw that air and send it to\nthe um catch block so let's write some\ncode that actually throws an air so\nlet's say that same example of we have a\nnumber and then we try to make that\nnumber uppercase which is obviously\ninvalid so we know that's going to throw\nan air but because it's within this Tri\nblock we're going to pass that air it's\ngoing to be thrown and then this air is\ngoing to be um populated with that new\nair object so this could be anything we\ncould make it E we could make it air or\nER r or we could make it air it doesn't\nmatter it's just a parameter like we've\nseen before so let's enter down into the\ncatch block and now we can actually\ncheck to see what this erir is is now\nI'm not going to just console log it CU\nthen you might get confused like okay\nwhat happened so let's go ahead and um\nactually first let's let's just cheat\nreal quick I'm going to put a VAR here\nso that we can use this code block again\num so let's press enter and you'll see\nthat nothing no errors were thrown here\nand the reason is we had some invalid\ncode but it got caught here and then we\ndidn't run any code in the catch block\nso if we try this again no pun intended\nhere um we can actually print some\ndetails about this air so let's\nconsole.log something um where we say\nair is an instance of we'll say type air\nand in this case it is a type ER because\nwe're trying to call a method that\ndoesn't exist on this data type and this\ninstance of operator is basically going\nto look at whatever is to the left of it\nwhich is that newly populated air object\nand it's going to say is this an\ninstance of or kind of like a copy of\nthe template that we call type air now\nthat's going to hopefully return true if\nit does what we expected and then an\nairor actually has a name um attached to\nit or a message so we can say air.\nmessage and print out whatever that air\nmessage is so you can see that if you\nlooked at the um instance properties we\nhave message so that's how I knew how to\naccess that all right so we press enter\nand now we get the value of true because\nthis evaluates to true and then this\nsentence right here is going to be the\nair message so you can see that we have\nhandled an air what we call gracefully\nwe have not crashed our application and\nthis is going to come in handy when\nwe're using external libraries that we\ndon't know how they're going to behave\nand finally kind of going along with\nthese error objects we didn't talk about\nthose much we also have three more data\ntypes that we have not touched on so\nlet's clear the screen and look at what\nwe're talking about the first one is\ngoing to be n for not a number so that's\nactually a data type then we have\nundefined um or actually let's go with\nnull we'll talk talk about null first\nand then we have undefined and you can\nsee if we go to the\ndocumentation um we go to the main\nJavaScript documentation with the\nbuilt-in objects you will see that we\nhave not a number right here so you can\nsee little bit about that you can also\nsee if we um look at the built-in\nobjects that we have undefined\nsomewhere so here's undefined and then\nfinally we have null value right here\nall right so these are all you know\nbuilt-in objects and in like when we're\nlooking at this the null and undefined I\nbelieve are Primitives so let me just\ncheck that make sure I'm talking about\nthat correctly so yes the the undefined\nand null are going to be Primitives um\nas we talked about a little bit earlier\nso let's start with the least common one\nwhich is going to be not a number so\nthis is kind of something that it's not\nreally used all that often you probably\nwon't even see it all that often it's\njust nice to know about because you may\nget this response\num at some point so basically not a\nnumber is uh meaning exactly what you\nwould think it would mean it's saying\nthat something is not a number so if we\nhad a\nstring and we set that equal to some\nstring and then we tried to coers we've\ndone this before if you surround a uh\nnumber or like a string value so let's\nsay that we\nhad this number Constructor or whatever\nand then we pass in a string but that\nstring is equal to a number value this\nis going to work fine but if we tried to\npass in my string you're going to get\nnot a number because you can't possibly\nconvert a string like that into a number\nso that's where you might get not a\nnumber you also might get it if you're\ntrying to you know\nadd uh that string with a number that\ndoesn't work either um and then you also\nwill get it if you say my string\nmultiplied by two / two uh or minus 2\nyou're going to get not a number in all\nof those cases again you're not going to\nsee this very often so I'm just going to\nmove on from here the next one is going\nto be null so unlike not a number you're\ngoing to encounter null values pretty\nmuch all the time and what this\nrepresents um how I think of it is going\nto be the intentional absence of a value\nor a placeholder that you put in to a\nvariable so if you were to Define a\nvariable so we'll say let uh PL or no\nnot placeholder we'll just say let my\nnumber and then we'll set it equal to\nnull um it says we're redeclaring it\nbecause uh we've already defined my\nnumber so we'll just say num equals\nnull and we've redeclared this so I've\nbeen typing into this console uh too\nmuch and using the same VAR variables so\nlet's go ahead and refresh the whole\npage all right so this should work\nbetter we'll say num um does not equal\n20 it'll equal null so this is a\nplaceholder value um and this evaluates\nto a falsy value so if we\nsay um\nnum triple equals false then it's going\nto say false because it's not perfectly\nequal to a Boolean but we say if num and\nthen we get into a conditional block um\nwe'll console. log this will not be\nreached because this will evaluate to\nfalse so this\nblock will be reached and when we press\nenter you'll see this will be reached\nbecause we said if num and num equals\nnull so it's a falsy value so this does\nnot get reached so that's just something\nuh nice to know as you're using\nconditionals and then finally we're\ntalking about undefined which is very\nsimilar to\nbut instead of being an intentional um\nassignment of value so kind of a\nplaceholder this is when you just\ndeclare a variable so let's say we um\ndeclare a variable called myar and we\ndon't assign it to a value now you've\nprobably been seeing this undefined\nhappen within the console but that's not\nactually um representative of what we're\ntalking about here so if you were to\ntype console that log myar you're going\nto get undefined and you're going to get\nit twice because it always prints\nundefined within the browser console but\nthis actually does equal undefined and\nif you were to pull up this conditional\nstatement again and you put in my VAR\nit's still going to print this lse\nstatement because you didn't reach um\nthis because this evaluates to a falsy\nvalue all right so that's it for this\nlesson number six it was a very long one\num obviously split up into multiple\nvideos um but if you made it here\ncongrats and I look forward to talking\nabout some more complex subjects we're\ngoing to try to get a little bit away\nfrom JavaScript um but in the meantime I\ndo have some practice problems for you\nand you can continue on to practice some\nof the things that we have learned\nwithin this\nlesson we've done practice problems in\nprevious lessons um we did 25 of them\nthat took over 2 hours to do um in you\ncan check out this video to go to those\nthose will be a little bit easier for\nyou but now in the previous lesson or\nlesson six um I guess it's this lesson\nwe went through a lot of the built-in\nobjects and then the associated\nfunctions uh for those objects within\nJavaScript so we have a much broader\nunderstanding of what's available to us\nand therefore we'll be a lot better at\nsolving these challenges so I'm going to\nwalk through each of them I recommend\nthat you try them out first on your own\nand then you can go through through my\nsolution we'll kind of look at some\ncommunity members Solutions as well now\nin the previous uh code challenge video\nwhere I did 25 of them I didn't zoom in\nso I made sure to have a nice big screen\nthat you can see um that was a little\nbit annoying to actually edit that video\nso hopefully this will work out better\nbut anyways go to the link in the\ndescription to get to the collection\nwe're going to be working on so this is\nmy profile on code Wars um and if you go\nto my profile or no this this is my\nprofile if we go to my profile here you\ncan come down and you can see the\ncollections and you can see that for\nlesson five we did 25 um problems and\nthen for lesson six we have some\nchallenges and once you get here you can\nclick on the train now button which is\ngoing to take you into all of these uh\nproblems that I've laid out for you here\non the right and there's 10 of them so\nwe'll go ahead and click train now which\nis going to basically put us in this\nlist and keep us there when we press you\nknow next uh Kata or whatever that's\ncalled I think it's something that has\nto do with jiu-jitsu I uh didn't know in\nthe previous video but I think I learned\nsince then um again leave it in the\ncomments if you know uh totally what it\nmeans anyways let's get started with our\nfirst code challenge which is going to\nbe list filtering now if you remember\nfrom the previous uh couple of videos we\nwent through the built-in methods and\none of those was the filter uh method on\nan array so in this case I would guess\nthat we're probably going to be using\nthat to solve this problem now I haven't\nseen any of these um or I've seen them I\npicked them but I haven't tried to solve\nany of these so we're going to be going\nin real time um but I think the filter\nmethods probably going to be what we\nwant here so it says in this Kata you\nwill create a function that takes a list\nof non- negative integers and strings\nand returns a new list with the strings\nfiltered out so this is a perfect uh use\nof our filter method we'll go here and\nas we always do let's um change our\nparameter name so it's more descriptive\nso we'll call this um so num list or\neven better num array and what we have\nto do is basically return num array and\nthen we want to add the filter method on\nthe end of that and the filter method as\nyou might remember is going to basically\ntake a call back function and whatever\nthat call back function returns um if it\nreturns true on the individual element\nthat We're looping through then it's\ngoing to keep that in the array if it\nreturns false then it's going to throw\nit out and not include it in the\nresultant array so just for the sake of\nclarity I'm going to actually break this\nout into a separate function and then\nwe'll refactor it so that it's a little\nbit uh more concise so we'll say our\ncallback uh function is going going to\ntake an array item so that's how all of\nthese uh methods on the arrays work they\npass in the array item to the call back\nand then we're going to return a\ncondition so in this case we want to\nlook and see if we have a non- negative\ninteger so any negative number or string\nis something that we need to filter out\nso we'll say um first off if the the\ntype of array\nitem um which is going to return us with\nthe type of the the variable if that is\nnot equal to a number which we actually\nhave to put in quotes so let's go to our\nour little uh playground here and if we\nhave a number something like this and we\nsay type of 20 it's going to give us\nnumber in quotes and then if we put in\nsome sort of string it's going to give\nus string we're using that uh knowledge\nand we're saying if the array item does\nnot equal number then we want to filter\nit out and then we also want want to add\na condition um we can say if it's not a\nnumber or with these two pipes or if the\narray item is negative so how do we\nfigure out if a number is negative well\nwe could just multiply it by NE -1 and\nif that turns out to be positive um\nthat's the case but we we could also do\nsomething else so in our callback\nfunction we need to return either true\nor false which will determine whether\nthis individual array item that We're\nlooping over will be uh returned in that\nfinal array so in this case we have two\nconditions so we'll put this in a\ncomment we'll say our first condition is\nthat it is um it is a number our second\ncondition is it is positive so all we\nhave to say is if the array item is\ngreater or equal to zero um and the type\nof the array item is equal to number\nthen we want to return true otherwise we\nreturn false here and exclude it so this\nlittle type of operator we've looked at\nit before a couple of times just to show\nyou what I'm talking about um I have up\nhere if we say type of uh string or put\na string in there it's going to return\nthe value of string but if we put in say\na number it's going to give us number so\nthat's what I'm doing here I'm saying if\nthe type of the item is equal to number\nthen we want to keep it all right so\nthere's our callback function this\nshould work and all we'd have to do is\nsay return num\narray. filter and then we pass in our\ncallback function and let let's see if\nthat works when we test\nit so it does work but there's a couple\nways we can refactor this the first way\nis that we don't need this conditional\nall we have to do really is return this\nexpression right here which if this\nexpression evaluates to true we want to\nkeep it and if it evaluates to false we\nwant to throw it away so if we just\nreturn the expression it should work\njust the same now another way we can\nrefactor this is by taking this entire\ncallback function and simplifying it so\ninstead of passing it in as a\ndeclaration or whatever we can just\nDefine it right here so we can say array\nitem and then use an arrow function to\nactually return this so let's break down\nonto the new line and we will return\nthis expression right here and then we\ncan get rid of this second function test\nit again and we should pass it now the\nlast thing that we can do we don't even\nneed these little brackets here um we\ncan get rid of those and get rid of the\nreturn statement because if we put it\nall in one line it should work just fine\nso let's go ahead and test that um looks\nlike we got some sort of syntax error uh\nyeah we have this little semicolon at\nthe end which is not valid so let's go\nahead and test it now and we're passing\nit so that's how you might take this and\nrefactor it to work correctly let's\nattempt the solution and we pass them\nall so so we solved this one uh just\nokay so we'll submit it and see what\nother people have used to solve this um\nsolution all right let's go down here\nand um let's see this one did something\nvery similar to us looks like they're\nsaying if this is equal to number so I\ndon't know if they accounted for\nnegative numbers but maybe there's\nsomething about this that\ndoes um down here let's see\nwell maybe I misread this actually so I\nwonder what the instructions were maybe\ngo back and and see I guess maybe we\ndidn't need to uh look for non- negative\nnumbers um I don't know all right let's\nmove on uh it's not super important you\ncan go back and kind of look at that on\nyour\nown all right our next challenge is\narray. diff so probably getting the\ndifference of an array of some sort so\nlet's go into the instructions\nit says your goal in this Kata is to\nimplement a difference function which\nsubtracts one list from another and\nReturns the result it should remove all\nvalues from list a which are present in\nlist B okay so looking at this we see\nthat one is in both of these arrays so\nit's going to remove that and leave us\nwith an array of two um in this one we\nhave two present in both arrays so we're\ngoing to remove that two and we're left\nwith one and three which gives us us our\nresult so that's basically how this is\nworking um and hopefully we can use one\nof our built-in methods to solve this so\njust a fun fact if you go to the low\nDash\nLibrary um this is something I talked\nabout in a prior lesson or not a prior\nlesson in this lesson in a prior video\nyou can go to the documentation and\nthere's actually a method here um so we\ncan go to the\nintersection um the intersection method\nis going to find what is alike within\nthe arrays but we're trying to find the\ndifference so we can go to the\ndifference method right here so\nultimately our challenge is to implement\nthis method which we can use in low Dash\nit's very just kind of an interesting\nthing to know and if you start using the\nlow Dash Library like we might do kind\nof later in this series it will come in\nhandy for this reason so what we're\ntrying to do is find the difference um\nand I think the way that we can do this\nis by using the array. includes method\nlet me pull up the mdn\ndocumentation so we'll go to the web\ndocs Go to JavaScript go to built-in\nobjects click array and now we can go\ndown to the uh includes method which we\ntalked about in a prior video in this\nlesson so this is basically going to\nfigure out if something is uh included\nin another array or if a value is\nincluded in another array so if we were\nto Loop through one of these arrays and\nthen ask is each value included in the\nother and if so just remove it then that\nmight help us solve this problem the\nfirst thing I want to do is check for\nthe edge cases so if you see in the test\ndown here there's a couple times where\nthe first array might be uh nothing or\nthe second array is nothing and in those\ncases we just have to return whatever is\nin the other array so let's say that if\num\na.length is equal to\nzero um then we want to return B so we\nwant to return the other array and then\nwe'll say if\nb.length is zero then we want to return\na and let's go ahead and test that to\nsee if we got a couple of them right and\nyou see that we passed one of the test\nbecause it uh passed in as an argument\nin empty array so now have to actually\nsolve the question of how do we get that\nintersection and figure out um what is\nactually different between the two\narrays so I'm just going to open this up\nhere to full screen and then maybe we\ncan put in an example just so that we're\nuh anchored to something so let's put in\nsomething like three five six\nsix five and two and then the second\narray will be something like three and\nsix so we know that we want to have in\nthe final array we want five um five and\ntwo so let's see that how we can\nactually solve that so what I think we\nshould do is Loop through this um one of\nthe arrays so we'll say a do4 each and\nthen we have to pass in our callback\nfunction which will do something on each\niteration so we'll say array item and\nthen we also probably want to grab the\narray index and I'll show you why in\njust a second so let's Dro down into our\nfunction here and this needs to be um\nstored in a result we could also just\nreturn it but we'll store that in a\nresult and then we'll return the result\nat the end of the function so every time\nwe iterate through this we're going to\nactually um use each item check if it\nexists in the other array and if it does\nexist we're going to remove that item\nfrom both of the arrays um in each\niteration of the AL Loop in order to do\nthat we need something that removes an\nitem at a specific uh index of an array\nso let's go on to the documentation and\njust refresh ourselves on this method\ncalled splice now this is something we\ntalked about in a prior video of this\nlesson but this is going to change the\ncontents of an array by removing or\nreplacing existing elements so we can\nremove um an element at a start index\nand then we can um that's kind of how\nwe're going to solve this so we'll say\nthat if the array\nitem or actually let's say we're we're\niterating through array called a so if B\nso the other array includes the array\nitem if if that includes the array item\nthen we want to remove it so I'm going\nto put some comments\nhere we have found this element in uh\nboth arrays so we know that we need to\nremove that so how do we do that well we\nhave to probably get a new array for\neach of these and then now we're going\nto be working with that as that uh you\nknow most recent array so let's make a\nvariable up here for we'll say current\narray\num\na and we'll just set that equal to to I\ndon't know we'll put a placeholder in\nthere called null and then we'll say let\ncurrent array b equal null so that will\nbe the placeholder that we're going to\nassign these if we have mutated the\narray so now what we want to do is\ncreate two uh separate arrays so we'll\nsay new\na and then we'll come down here I'm not\ndone with this yet but we'll say new B\nso we're going to grab two arrays that\nhave these values removed from\nand the way that we do that is basically\nby saying a. filter so we're going to\nuse the filter method and then I'm just\ngoing to uh pass in the name of the item\nis item because we don't want to\nconflict uh with this right here that\nwe've used in kind of the parent call\nback that we're using and then let's go\nahead and return this so long as this\nitem that We're looping through does not\nequal the array item that we want to\nremove so as long as item\ndoes not equal array item we want to put\nthat into the new array and we can\nactually use the same um syntax down\nhere we just need to replace a with B so\nthis will be the new array um for each\nof them and all we have to do here is\nreplace this with our placeholder so\ncurrent array a and I'm actually going\nto just call this new\na just for Simplicity\nand then new\nB and we'll change that here so new\na and new B and so now each time we\nbasically what we're doing so far here\nis We're looping through every element\nwithin the a array and then we're going\nto um basically create a new array for\nboth of them with the only the elements\nthat have not been matched across both\nof them so let's see what this is\nreturning I'll exit out of here let's\njust test\nit um looks like we've got something\ngoing on here so let's go ahead and\nprint what the result is before we\nactually return it so let's print the\nresult and see what we're getting so a\nbig mistake that I made that I just\nrealized is that I'm actually modifying\nthe original arrays and we don't want to\ndo that because that's basically saying\nOkay We're looping through both of the\nor through this array but within the\nloop we're modifying it at the same time\nand we definitely do not want to do that\nso let's open up the code block once\nmore and now what we need to do is we\nneed to get a copy of each of them so\nwe'll say a copy is going to be equal to\na. slice which is just going to create a\ncopy of that array and then B copy is b.\nslice so that's just going to give us\ntwo copies of the array and now what\nwe're going to say is instead of of a.\nfilter and b. filter we're going to do\nthe a copy and the B copy and that's how\nwe're going to uh sort through these\nlet's go ahead and test that and see if\nit gets uh us an answer here so looks\nlike we're getting undefined for our\nresult and I wonder why that's happening\nso let's see oh that's because okay I'm\njust not thinking here so we're not\ngoing to assign the for Loop to a value\nCU it doesn't return uh in a r\nit just Loops through it doesn't really\nreturn anything so uh returning the\nresult is going to not work so what we\nneed to do is just return either one of\nthese I believe so let's see what\nhappens if we console log new a and then\nmaybe return\nit okay so we're passing more of them\nnow um let's see it looks like this\nsample test it says if a is an empty\narray then we want to return an empty\narray so I think I messed that up here\num okay so here we have the first one\nempty so we want the result to be empty\nso if a.length equals z then we just\nwant to return an empty array rather\nthan the BR array so let's test that\nlooks like we passed all of them let's\ngo ahead and attempt it I'm not sure if\nthis is going to pass um it looks like\nwe got some uh problems if we have\nnegative numbers Maybe let's see what\nwe're dealing with here okay I think\nsomething that I'm doing wrong here is\nI'm taking a copy of the original array\neach time but we probably want to take a\ncopy of the um New array that we've\ncreated so each time it Loops through\nit's going to remove you know one of the\nelements but if we keep uh making a copy\nof the original array we're going to\nkeep adding back those ones that we REM\nremoved already so let's go go ahead and\ninstead of making a copy here I'll\nexpand this out we'll make a copy of new\na and new B so this should represent um\nthe updated array so how this is working\nI just want to take a second to explain\nthis let's say that we have um the\nfollowing example so we have 1 2 two and\nthree and then maybe we have two and\nthree or something something like that\nso what's going to happen is we start\nwith array a and we're going to Loop\nthrough it with this for each Loop so\nwe're saying okay we're going down into\nour code uh new a is going to be equal\nto null to start and we're going to be\nuh taking a copy of that which is going\nto give us uh null and then we're going\nto say if B includes the array item so\nin this case the array item is going to\nbe one so we're saying if this array B\nincludes the value of one then we're\ngoing to drop into this code right here\nand if that's the case then we're going\nto take new a and we're going to filter\nit um and set it equal to or we're going\nto filter the copy and set it equal to\nnew a so we probably need to initialize\nthis um to be equal to the original\narray so we'll say we'll start it with a\nand then we'll start it with with B\nthere so now we're starting with the\noriginal array and each time we get down\ninto the loop we're going to take a copy\nof whatever has been updated and each\ntime in the loop we're going to check\nokay is one included in this second\narray yes it is so now let's set new a\nwhich was the original array at the\nbeginning but now we're going to filter\nout um this item that we found in both\nof them so now as we go um through the\nsecond time it's going to uh be removing\nelements so in the first iteration of\nthis Loop one is not found here so we\ndon't do anything the second time that\nwe come around we look at two and we see\nthat two is included in both of these\narrays so we are going to drop down into\nthis if statement and we're going to\nreassign these uh placeholder arrays um\nwith our filtered array that does not\ninclude the two anymore so it's going to\njust have 1 and three and then two and\nthree and then finally we get to the\nlast one after a couple iterations we\nsee it's in both we remove that and then\nwe assign it to New a and new B so let's\nsee if um this works a little bit\nbetter looks like we passed the easy\nones and then we passed all of them so\nthis was a tough question like if you\nlook at the difficulty of it it's\n6kyu and I once once again have not gone\nthrough this beforehand like I don't\nknow I didn't know how to solve this\nproblem before I looked at it so um\nhopefully that gives you a good idea of\nhow thinking through this works like it\ntakes a lot of iterations it's not\nsomething where I'm just like all right\nwe're going in and solving it I know\nexactly how to do it you have to try\nsome things you have to test it you know\nyou realize oh I didn't account for this\ndidn't account for that and eventually\nyou will get to the answer so this was a\nreally tough one I would definitely not\ncall this a beginner uh JavaScript\nproblem but hopefully you can see in our\nbig solution here how we have\nused um a bunch of different methods so\nwe used slice we used filter we used\nincludes and we used four each we used\nall of these in the same problem and\nthat's how these built-in methods of\nJavaScript can really come in\nhandy and it looks like after solving\nthat since it was a tougher problem\nlooks like I have leveled up here um I\nstarted this Cod Wars thing uh to make\nthese videos so that's why I'm not a\nlittle bit higher up\nall right enough notifications here\nlet's go to the next\nproblem looks like we have another tough\none\n6kyu um so let's see if we can solve\nthis a little bit quicker than the uh\nfirst one that we did here okay so let's\nlook at some of the uh potential inputs\nand at the bottom it says note all the\nhashes are prevalidated and will only\ncontain uppercase and lowercase letters\num a little uh Dash\nand looks like a period so that's all\nthat we would expect to\nsee um and then looking at the examples\nyou see we have a list of objects where\neach object has a property called name\nand as we scroll over okay that's all\nthat we're working with there um so in\nthis case Bart Lisa and Maggie so it\nlooks like we have to put a comma after\nthe first one um probably a comma after\nthe second one if there's more than\nthree\nbut in this case there's three so you\nput the and instead of the\ncomma okay and then in this case where\nthere is nothing in the array so it's\nempty we just return an empty string so\nthat's a really easy one to start with\num I'm going to actually zoom out this\nis a little bit zoomed in I wanted\npeople to be able to see everything but\num in this case we running out of space\nso let's go if the names. length equals\n0\nthen we want to return an empty string\nand if we test this we should pass pass\nat least one of them um for that empty\narray so we did that we got that uh test\ncase covered now we have to actually go\nthrough each of these so let's see how\nthat how we can do that we'll probably\nbe iterating through the array with a\nfour each Loop um but let's\nsee okay let's try that so we'll say\nnames do4 each and then we can say name\nwill be the uh argument that we're\ndealing with let's put some parentheses\nin here because we're actually going to\nneed need the array index which is the\nsecond argument of the for each\ncallback um and again if you wanted to\nsee that if you wanted to actually\nfigure this out on your own if you go to\nthe for each method so I go to\nTechnologies\nJavaScript built-in objects array and\nthen I go to the for each method and\nthen you can read all the syntax and it\nsays the call back is going to have\nthese parameters right here so it first\npasses in the current value then the\nindex of the array That We're looping\nthrough and then the original array so\nthat's how I knew to add in the name and\nthen the array index and you could have\njust called this the array item to be a\nlittle bit more clear so let's break\nthis down onto a new\nline all right so We're looping through\nand that's not going to return anything\nso we'll probably need to store this in\nour final string which will be equal to\nnothing to start all right so we'll Loop\nthrough um and actually if this array\nhas a length of zero then this for each\nLoop is not going to do anything so we\nprobably could just return the final\nstring and instead of having this if\nstatement up there we'll just have this\nso let's test that and make sure it\nworks with that empty array which it\ndoes all right\nso back to here we're basically going to\nbe grabbing the name property so we'll\nsay name is going to be equal to the\narray item. name because we know that\nthe array item is going to be an object\nlike right here and it has a property\ncalled name all right so we have our\nname um and we just want to add that to\nthe final string so let's see um we need\nto first check if the array index does\nnot equal um the total names array.\nlength so Bas so basically what we're\nsaying is that if we're not on the last\nindex of the\narray then we want to do something so if\nwe're not on the last uh index of the\narray we want to take our final string\nand we want to add the current array\nitem uh name which is stored in the name\nvariable that we put right here so\nthat's going to just add the names and\nthen of course we need the comma so we\nwant to add the name um so let's just\nremove this equal sign um and then we'll\nsay final string equals final string\nplus name and then plus a comma and then\na space all right so that's going to\nbasically reassign that final string and\nadd the names with the commas so let's\nuh console.log\nthe final string as we have it it's\ndefinitely not going to be right but\nwe'll see what we're\ngetting okay so we have Bart comma Lisa\ncomma Maggie comma Homer comma and Marge\ncomma all right so that's kind of what\nwe're expecting here but now we have to\nadd in the and symbol and you can see in\nthe last one right here we've um put in\na comma so let's see what this one\nactually was passing in as a test\nokay so one mistake that I made if the\narray index is not equal to the names.\nlength remember the uh length of the\narray is going to be um literally how\nmany elements are in the array but the\narray is zero indexed so we'll actually\nnever reach the um index that is equal\nto the length of the array so we have to\nsay the names. length minus one and if\nwe test this we should not see um this\noutput here we should basically skip\nthat\none so you see that we skipped Marge\nthis time so that is actually correct\nnow um we'll put an else condition in\nhere so otherwise if it is kind of the\nlast element of the array so in here\nwe'll put the final string will be equal\nto final string plus the and symbol and\nthen plus the um name itself all right\nso I don't think this is going to work\nperfect perfectly but let's test it yeah\nso we're seeing and Marge without a\nspace here so all we need to do is add a\nspace in there and test\nit all right so this looks a lot closer\nto what we're um\nexpecting so what we're missing here why\nit's failing is because we still have\nthis comma here and when we have the and\nsymbol we don't want the comma at the\nend so\nbasically um this condition is not going\nto be correct so we want to actually\nIdentify two different situations we\nwant to identify when we are on the\nsecond to last and then um when we're on\nthe last one so instead of saying not\nequal to let's say um equal to so if the\nindex that we're working with let's go\nahead and expand this a little bit so if\nthe index that we're working with is\nequal to the last one um that's when\nwe're going to paste in this right here\nso we want to put and name okay um\notherwise so else if the array\nindex equals names. length minus 2 so\nthe I guess third to last we want to say\nthe final string will be equal to final\nstring uh plus the name but we don't\nwant uh any of the commas going on here\nand then other otherwise we just want to\nreturn the final string will be equal to\nuh final string\nplus the name plus a comma and a\nspace so let's try this out and see what\nwe're getting as\noutput uh you can see that we're getting\na lot closer so we have everything\ncorrect except we need a space right\nbefore the and symbol so let's just add\nthat real quick here's where we're doing\nand let's just put a space there and\ntest it again and now you can see that\nwe're passing most of the test cases now\nwe have one down here um it says wrong\noutput for a single name so if we have a\nsingle\nname we probably need to just return the\nname itself okay so we can just cover\nthat in a separate test case so we can\nsay if the\nnames. uh length is equal to one\nwe're going to just return the\nnames um\nz. name so that should cover when we\nhave a single\nname so we passed all of them let's\nattempt it and we passed all of them so\nthis was another really tough one um\nprobably not a beginner problem\nnecessarily but hopefully again you see\nhow we're iterating through this and and\ntrying out different things until we get\nto the final solution all right so let's\nsubmit this one and go to the\nnext as you can see someone solved it\nwith the reduce method which we learned\nabout in the prior uh uh video of this\nlesson um but I didn't think of that so\nthat's a that's a useful one and\nbasically anytime that we're using like\nan accumulator so in this case we had\nthe variable called final strings so go\nback in the video to see that if you\nhave a accumulator variable followed by\na for Loop that modifies that that's\nalways a good use case for the reduce\nmethod I didn't think about it in this\nuh particular scenario but that's that's\nalways a good use case um this one's\nvery interesting I'm not going to go\nthrough all of these but be sure to look\nat them because people come up with some\nvery clever Solutions all right so let's\nlook at this one this again is a pretty\ntough one so I guess we're getting all\nthe tough ones in a row and then it's\ngoing to get a little bit easier here so\nin this problem it's basically um the\nname is take a 10-minute walk and it's\nsaying you live in this city blah blah\nblah where the roads are laid out in a\nperfect grid and you arrive 10 minutes\nearly to an appointment you want to go\ntake a walk um you've got an app that\ngenerates a little route and you can go\neither north south east or west and each\nunit is going to be a single block all\nright right so we need to figure out um\nif a given array of directions is going\nto put us back at our original\ndestination and it's going to take\nexactly 10 minutes and it says that um\neach block is going to take you one\nminute so you takes you one minute to\nTraverse one city block so we're\nbasically returning true if it does\nfalse otherwise and then it says note\nyou'll always receive a valid array\ncontaining a random assortment of\ndirectional letters and you're not going\nto receive anything other than north\nsouth east or west so in this case I\nthink I have an idea of how we might\nsolve this just initially so let's open\nthis up and say the first condition um\nwe know that if there's not exactly 10\nelements in in the array it's going to\ntake us more or less than 10 minutes so\nwe'll say if walk. length does not equal\n10 we're going to return false all right\nso if it doesn't equal 10 we're\nreturning false and not going to the\nrest of the code if it does equal 10\nthen we'll go into the rest of the code\nand see if it gets us back in 10 minutes\nto our original destination now in this\ncase I think what we're going to do is\num initiate or initialize four different\nvariables so we'll say uh North\noffset equals\n0 uh West offset equals\nZ and we're going to do this for all of\nthe directions\nso East\noffset and South\noffset all right so now we're going to\nuh loop through the array so we're going\nto use the for each method and we're\ngoing to pass in instead of array item\nlet's start learning how to actually um\nname our parameters to be a little bit\nmore descriptive so we'll say Direction\nwhich will represent the direction that\nwe're going to receive and then we'll go\ndown into the for Loop and for each\ndirection we're going to set um our\nvariables uh offsets so we'll use a\nswitch case statement so we're going to\nput in the direction in the switch\nstatement and then we're going to say\ncase if it equals n then it's going to\nbe North all right so we're going to put\na break statement in there if it is west\nall right and then we'll just put the\ncases for all of the other\nones we don't need that last break\nstatement because it'll get there no\nmatter what okay so we're going through\nall the different cases and in each one\nwe're going to change the offset so if\nit is North we're going to say the north\noffset is going to be plus or equal 10\nall right so that's just going to say um\nor not 10 we'll just say one so we've\ngone North one block if the case is\nnorth and we're going to do that for all\nof these different cases so we'll say uh\nWest offset will be plus or equal\n1 and then um let's see East offset Plus\nor equal\n1 and then in the last case we will say\nSouth offset Plus or equal\n1 so if we reach our destination like if\nwe get put back to our destination then\nI think the sum of all of the offsets\nshould net to zero um or not not the sum\nyou have to subtract them so the north\noffset will offset the South one and\nthen West and then East so basically if\nNorth minus South equals 0 and West\nminus East equals 0 then we know that we\nhave returned to the original\ndestination\nso if we go down to the uh for Loop here\nwe'll say if North offset minus South\noffset equals z and West offset minus\nEast offset equals z then we will return\ntrue otherwise we return false now in\nall of these cases you're going to start\ncatching on that when we just return\ntrue in a conditional often times we can\njust return the expression itself so\nlet's copy that and instead of this\ncomplicated block let's just return the\nexpression itself all right so let's\nbreak out of here and test it and see\nwhat\nhappens and we passed all of them so my\nassumption was correct you just\ncalculate the offsets they should net to\nzero if you subtract them and if the you\nknow left and right offset is zero and\nthe top and bottom offset is zero then\nyou've returned to your office or your\nappointment so let's attempt it see if\nwe covered all the cases and we did so\nawesome let's submit it now this one I\nthink was a little easier than the last\ntwo that we did but still required a\nlittle bit of thinking and I'm sure\nsomeone solved it in a much more\nefficient way so when it loads we'll see\nall right so the first solution here um\npretty much the same thing that we did\nso we did pretty good on this one\nall right once again we have a 6\nKyu so might be a little bit tough but\nlet's uh jump in and see it says write a\nfunction called persistence right here\nthat takes in a positive parameter num\nand returns its multiplicative\npersistence which is the number of times\nyou must multiply the digits in Num\nuntil you reach a single digit so I\ndon't understand this fully at first but\nlet's look at the examples all right so\nif we pass in\n39 it says we do 3 * 9 which is going to\nbe 27 right here and then you do 2 * 7\nwill equal 14 and then 1 * 4 will equal\n4 which is a single\ndigit\nokay now does it always do positive\nnumbers okay it says positive parameter\nokay so we know it's going to be a\npositive\nnumber so we know how to identify what\nwhether the solution is a single digit\nwe basically say you know if it is less\nthan 10 it's a single digit okay so\nwe're probably going to go in some sort\nof loop here to iterate over each new\nsolution and we might actually use\nsomething called recursion I'm not sure\nabout that yet but we'll see so let's\nsee if this works so we'll say um how do\nwe get the individual pieces of this\nnumber though so let's go um I can't\nactually remember if you can do this but\nlet's take a number like\n299 and see if we can access individual\npieces of it looks like you cannot so we\nhave to figure out how to get the first\num digit of each of the numbers so in\nthis case I probably should know this\nbut I don't and in the real world this\nis what I would do I would just open up\na new tab and say find\num or maybe not find we'll say get first\ndigit of a number in\nJavaScript so this will work get the\nsecond digit of a\nnumber okay so looks like we're turning\nit into a string grabbing the first\ndigit and then converting it to a number\nokay so let's put a num equal to 299 and\nthen say num to string okay it gives us\n299\nand then we can grab the first uh piece\nof that and then we will convert that to\na number now there's a quick way to do\nthis um you could just put it wrap it\naround with this number object and it'll\nturn it back to a number or what you can\ndo this is a shortcut you can just put a\nplus sign at the beginning and it\nautomatically coerces it into a number\nso this is the pattern that we're going\nto use we're going to grab each of the\num digits of that number number and then\nwe can see you know multiply them\ntogether\nbasically so the thing I'm curious about\nis whether uh we have okay so if we have\nthree digits here we have to multiply\nall three of them okay so that's good to\nknow so it could be up to maybe you know\nfour or five or six digits so we have to\ndo you know this times that times that\ntimes that so that's um something we\nhave to take into account here now if\nit's already a one-digit number it says\nto return zero so let's just say that\nfirst we'll say if num is less than 10\nwhich means it's a on- digigit number\nwe're going to return zero and if we\ntest that we should get at least one of\nthese correct so if if it passes in a on\ndigigit number we got that correct okay\nso the next part let's\nsee so what I think we should do here is\nwe should convert the number to a Str\nstring and then maybe instead of doing\nwhat I was showing you over here\nconverting it back to a number maybe\nwhat we can do is take the string and\nput it into an array so let's go ahead\nand do that um string version is going\nto be num. two string and then from the\nstring what we know we can do is\nactually convert that to an array so\nwe'll say array version is going to be\nequal to the string version\nand then um let's see I actually can't\nremember exactly what we used there so\nlet's go to the\ndocumentation um and go to the string\nMethods is what we're looking for the\nreason we're looking for a string method\nis because we're trying to convert this\nstring here into an array so let's go to\nbuilt-in\nobjects string down here and then let's\nlook through the methods I know that\nthere's a way that you can can turn this\ninto an\narray okay so it should be the split\nmethod yep that's what we need I don't\nknow why I couldn't think of that but um\nif we take a string so let me just use\nan example so you remember we can\nactually write a string literal so um\nsome\nstring example and then we can take that\nliteral string and chain a method on top\nof it um because it wraps it in the\nactual string object that has methods\nautomatically so what we can do is say\nsplit and then if we just pass in a\nempty string it's going to split it by\neach of the uh values here and that's\nexactly what we want to do so let's go\nahead and see how that would work so if\nwe say num. two string so we first\nconvert it to a string and then we say\ndo split and we pass in an empty string\nit's going to give us each of those um\nnumbers um in string form all right and\nthen from here we can basically convert\nthose to numbers and multiply them\ntogether a good way that we can do that\nis by using the reduce method so if we\nchain on one more thing here we can say\nreduce and then we can say the the um\naccumulator which is going to be\naccumulating that\nmultiplication uh operation\num but we have to pass in a call back\nfunction so we'll put the accumulator\nand then the actual array item or the\nnumber so maybe we'll just pass in Num\nfor number and then now what we want to\ndo is accumulate so multiply equal so\nit's going to take accum like whatever\nthat's equal to now and it'll multiply\nthat by the new number and store that in\nthe same variable called ACC for\naccumulator so we'll just do that\nmultiplied by a number and we get the\nanswer of\n162 all right so that's our that's our\nsolution here so if we do 2 * 9 * 9 we\nget 162 which is our answer here so this\nis basically what we're going to do and\nwe can do it in one step like we've done\nhere but we can also see it a little bit\nmore clearly if I break it out into\nsteps so let's go ahead and do that\nwe've already converted it to a string\nnow we want it to be in an array so\nwe'll say split by an empty\nstring and then finally we want to get\nthe uh\nmultiplication value is going to be\nequal to array version. ruce and then we\nof course have our accumulator and our\nnumber and then what we want to return\nfrom that callback function is the\naccumulator multiply\nnot added sorry multiplied by that\nnumber okay so that's our call back\nfunction multiplication value should get\nthe multiplication of all of them and\nthen we'll say if\nmultiplication value is less than\n10 then we want to return true so you\ncan already see where this one's going\nwe can just return\nmultiplication value is less than 10 so\nif it is less then we return true\notherwise we return false um now the\nproblem with this is we have to figure\nout how many times um we have to iterate\nthrough this before we get something\nthat is less than 10 so we're not quite\ndone with this solution\nyet so this I believe is where the\nrecursion comes in and recursion in uh\ncoding languages is probably the hardest\nconcept that you could um learn so this\none don't beat yourself up if you don't\nunderstand what this is doing fully um\nthis is something that took me a long\nlong couple hours uh early on in my\njourney to fully understand like how it\nworked so don't beat yourself up um but\nI'm going to show you how I'm going to\ndo this and hopefully it will actually\nwork so I'm not talking a bunch of\nnonsense here all right so for this\nsolution I had to turn off the camera um\nI didn't realize that we'd be dealing\nwith recursion here um until I looked at\nthis problem\nbut a trick that you can use for\nrecursion and just to kind of explain\nthis code just at a high level and again\nyou don't need to understand exactly how\nit's working because recursion is a very\ntough subject but basically what we're\ndoing is we you know go through this\ncode which I explained a little bit\nearlier and this is going to give us our\nmultiplication value and then for\nrecursion where we're you know calling\nthe function multiple times on itself\nyou need a stop condition okay so the\nstop condition is um when multiplication\nvalue is not greater or equal to 10 so\nbasically in this uh else return and\nwhat we're doing here when we say return\none plus the uh persistence what it's\ndoing is it's this is just a trick of\nrecursion and if you read up on how\nrecursive functions work in JavaScript\nyou'll see this notation right here but\nbasically what we're doing is we know\nthat if the stop condition is met then\nwe return the value of one otherwise\nwe're going to keep calling the\npersistence function until we reach that\nso if we add one to the return value of\neach iteration or recursion then we're\ngoing to accumulate a total value of how\nmany times we went through this so again\nthis is a little bit confusing it was\nreally confusing to me I had to brush up\non recursion a little bit to solve this\nproblem but basically this is I think\nthe best solution that you're going to\nfind for this problem so let's go ahead\nand attempt\nit we passed all of them so let's see\nhow other people solved it maybe there's\na way to do this without recursion um\nbut nevertheless this is probably the\nmost efficient\nsolution okay so actually the first\nsolution might be more simple than um\nwhat we used here so this doesn't use\nany sort of recur verion at all this is\nsimply um using the reduce method kind\nof as we had used so we we did this\nexact thing um but it's looping through\nwhile the the numb numb counter is\ngreater than one so and then it uses\nthis times variable to kind of collect\nthe number of times that we've gone\nthrough this um this one right here this\nis like this is as concise of a solution\nas you could possibly get this is\nbasically what we did um it's a little\nbit syntactically compressed so you have\na lot of little JavaScript tricks going\nin here but you can see the where we do\none plus the persistence function so\nwe're recursing over it so that would be\nthe most clever solution as you can see\nhere um but once again recursion is a\nvery tough subject I wouldn't expect um\nany beginner that's watching this to\nreally understand how to do that but of\ncourse you could have solved it this way\nwhich didn't require recursion like I\nused okay so we're on a 7 Kyu um problem\nwhich should be a little bit easier so\nlet's see if that's the case it says ATM\nmachines allow four or six-digit PIN\ncodes and PIN codes cannot contain\nanything but exactly four digits or\nexactly six digits if the function is\npast a valid pin string return true else\nreturn false so this one looks pretty\neasy we're going to be using regular\nExpressions here\num so this is exactly four digits um\nthis is four digits but it's alpha\nnumeric so there's a letter in here so\nit's not valid so this one should be\npretty easy we can go over here to\nactually look um at these uh regular\nExpressions a little bit so let's say\nthat we have a string and the string is\nuh four digits here and then we want to\nmatch that against a regular expression\nof some sort so if we want to do that\nwe're looking for numbers between 0 or 9\nand we want either four or six so the\nway we can do that is we can basically I\nthink I think we can just wrap this in a\nparentheses and then repeat it with an\nor and then instead of four we pass in\nsix here so let's see if that works if\nwe add in one more it should not match\nit but if we add in two more it\nshould um no so that's not working we\ncould just separate this into multiple\nregular Expressions because I can't\nremember exactly how to do this um for\nboth of them so in this case we're\nlooking for any number so this will\nexclude letters automatically in a\nquantity of exactly four and we could be\neven more specific by saying the start\nof the line and end of the line with the\ndollar sign and basically if we're\nmatching this then we're good so if we\ncome up with anything here now if we put\nin uh five of them we're going to get an\nanswer of null so we know that if we get\nan answer of null then it's not correct\nso let's go ahead and just write two\nregular Expressions so we'll say four\ndigits regular expression is going to be\nequal to what we just wrote here so\nlet's just paste that\nin and then we can come down here and\nsay six digits regular expression and\njust change this right here to a six so\nwe're either matching all numbers uh in\na quantity of four or all numbers in a\nquantity of six so we can basically\nreturn you know if both of these are\nnull that means that we didn't match\neither of them so the answer is false\nbut if either of them are true so they\nhave a you know they're not null then we\ncan return true so let's let's say we\nwant to return\num four\ndigits R\nRex um and we have we actually have to\nmatch this up against the PIN code so\nlet's do that real quick so we'll say\nresult\none equals and then if you remember you\ncan take the string pin number um I'm\nnot sure if it is a\nstring okay so it's pasted a string\nvalue so we're good so we'll say uh pin.\nmatch and then we'll pass in the four\ndigits regular expression and then we\nmight want to look for result number two\nand pass in the s six digits regular\nexpression so here's what we can say we\ncan say um\nreturn result one. length is greater\nthan zero or no because if it's null\nthen we don't have an array that we can\ncheck that on so basically we can say if\nresult 1 equals null and result 2 equals\nnull then we want to return\nfalse otherwise we want to return true\nbecause we matched one of them so null\nvalues um default to falsy values so we\ncan actually remove this um and say\nif not\nresult and not result\nto and you can see that it passed uh now\nwe can simplify this even further uh so\nif we say let's see if we just return\nthis\nexpression can't spell so if we're\nsaying if both of these are equal to\nnull then we uh return false so let's\nsee if that works it may actually be the\nopposite yeah so it's it's going to be\nthe opposite um let's see so all we have\nto do is reverse this by wrapping it in\nparenthesis kind of reversing the\nresult and this time it should pass so\nthis is a decent solution but I\nguarantee you there's going to be\nsolutions that are a little simpler than\nthis where we don't\nhave two different regular Expressions\nthere's definitely going to be a\nsolution where we have a single regular\nexpression that checks for both of them\nand I'll point that out when we get\nthere okay so this one would be the best\none uh the back slash D represents the\ndigits so that's the same thing as our\nbrackets and then 0 to 9 and you can see\nthat it's doing the same thing that I\nwas kind of trying to do I must have\njust messed up part of the syntax there\num but it's just testing against this\nregular expression so um that's\nbasically um the best solution and this\nis the one I'd recommend using if you\nhad the time to actually figure out how\nto write the regular expression that\ncovers both cases now this is another\nregular expression this one should be\neven\neasier um because it's 8 Kyu so it says\nyour task is simply to count the total\nnumber of lowercase letters in a\nstring okay so let's take one of these\ncomplicated ones here and just take it\ninto our um little sandbox that we've\nbeen using so I'll paste that into the\nstring and we'll start over with our\nregular expression so in this case we're\ncounting the number of results that we\nhave so we probably want to pass in the\nglobal flag to our regular expression so\nput that at the end and then we want to\nlook for a through z uh lowercase\nletters and that's basically going to\ngive us our answer I believe so if we\njust pass in a through z and then we\npass in This Global so if we take this\noff it's just going to match the first\nlowercase letter but if we put it back\non it will give us all of them so that's\npretty much all we're having to do here\nand then we just need to count the\nlength of the array so let's do that we\nwill just say return string. match and\nthen we'll pass in lowercase a to\nlowercase z we'll pass in the global\noption and then we'll return the length\nof that\narray looks like we failed one of them\num so cannot read property length of\nnull so in this case there's\nprobably no array that we're getting\nright so if there's nothing if there's\nno lowercase letters we're not going to\nget a valid array and you can see that\nhere if we were to take out all of these\nlowercase letters you're going to get a\nvalue of null so we need handle that\ninstead of just tacking on the length we\nhave to first check whether it is a\ntruthy value so let's see how we could\ndo this kind of\nSimply so we can use a Turner operator\nto do this so if we C if we um basically\nsay if this is a valid expression so as\nlong as this does not equal null then\nwe're going to get put into um this part\nof the Turner operator so let's let's go\nahead and save the result so the result\nis going to be equal to our regular\nexpression\nevaluation um and then we're going to\nsay if the result is a a truthy value\nthen we're going to return result.\nlength and otherwise we're going to\nreturn false or something like that\nlet's see what it says in the\ninstructions okay so if there's nothing\nwe want to return zero so sorry about\nthat it shouldn't be false it should be\nzero all right so we passed it this time\nlet's just clean that up and attempt\nit cool so this one was rather simple a\nlittle bit easier than our previous\nregular expression and again as I said\nin the lesson you don't need to\nnecessarily know like all of the details\nabout writing regular Expressions it's\njust good to be able to read them and\nthat's why I wanted to go through this\nas an\nexample so the next one we're doing is\ngoing to look at some basic dates and\nthis one is asking is the date equal to\ntoday so it says write a simple function\nthat takes a parameter as a date object\nor um takes as a parameter a date object\nand returns a Boolean value representing\nwhether the date is today or not okay so\nthis last part is basically just telling\nus like hey there is um going to be you\nknow the 10th of January and the 10th of\nFebruary so you can't just look at the\nday of the month which um we will look\nat but not\nexclusively so let's just make a bunch\nof variables here so our um check day so\nthis will be the date that we're passed\nwe can just use the get date method\nthat's going to give us the day of the\nmonth all right so check month is going\nto be\ndate. month I believe we can go to the\ndate methods so if we go\nto um the mdn document ation go to\nbuilt-in objects and go to date you'll\nsee that we have the get month method um\nthe get full year method and the get\ndate method now you might say get day um\nbut this is the day of the week not the\nday of the month so we need get date\ninstead so this will be day or this will\nbe month of year and then this is zero\nindexed so that's important to remember\nso January is going to be zero\nand then uh the check year is going to\nbe the date. getet full year all right\nand then our uh date today is going to\nbe very similar so let's just copy all\nof this code down\nhere and we'll say today instead of\ncheck and then we'll replace all this\nwith\num the actual current date so today is\ngoing to be equal to a new date that's\nhow we initialize it and then we can\npass this in here in uh place of the\ndate so then we just\nreturn um check\nday equals today day and all of the\nother ones match so let's just write\nthat out\nall right so it's a little bit of a long\nexpression but it should work all right\nso we passed\nit now the quickest way to do this um it\nlooks like is this solution so what are\nthey doing here so they're creating a\nnew date converting it to a date\nstring and checking if that is equal to\nthe date that was supplied to date\nstring I actually didn't know that you\ncould do that because this will give you\ndifferent\ntimes but I guess it matches if you have\nuh different times of the day so let's\njust try that real quick in our um\nconsole just to see if it's true so\nwe'll set a to a date and then we'll set\nB to a date and then see if B equals a\nwhich is false so if you go um obviously\nthose are not going to be equal because\nthe value of the date is milliseconds\nsince whatever January 1st 1970 at\nmidnight um but if we convert it to\nstring so two\nstring and then try it with b.2\nstring that's going to give you a false\nvalue too so I'm not sure what's going\non here\noh to a date string okay that's what\nthat's where we went wrong we're using\nto date string so that should work\nnow okay so that equals true so let's\ntake a look at that um method on our\ndocumentation so it says\ntwo date string which is not some not\none of them that we covered in our\nlessons which is why we didn't use it\nhere but it says this Returns the date\nportion of the date object uh so that's\nbasically going to strip off the time um\nand check if it's the same day so that's\na good solution didn't think of that but\nthat's a lot more concise that than what\nwe did this is what we did we just\nchecked it up against um all of the\ndifferent methods that we had covered in\nour lessons all right so let's go to the\nnext\nchallenge and this is alternate\ncapitalization given a string capitalize\nthe letter letter that occupy even\nindexes and odd indexes separately in\nreturn as shown below index zero will be\nconsidered\neven okay so we're going to return\nbasically two strings for each argument\nhere the input's always going to be\nlowercase with no spaces\nokay okay to solve this we first need to\nget this into an array so we need string\nto be into an array and then we'll uh\ncapitalize them separately and then\nwe'll combine them back into a string\nand assign them to different array\nvalues so how that's going to look um\nlet's\nsee we will say array is equal to string\ndosit and we're going to split it by an\nempty string which will just separate\nall of the characters by a comma all\nright so if we just did that and\nconsole. logged it here's what we're\ngoing to\nget here's our string right here so\nwe've got all of each letter uh broken\nout and we know that we have to take\nthis array and we need to capitalize it\nin two different ways so we'll just say\narray one is going to be string dosit\nand then we will also have array 2 and\nthen we're going to Loop through these\narrays so array\n1.4\neach and we'll say for each item then we\nalso probably want the index because we\ngot figure out if it's even or odd and\nthen we'll say array two but let's not\ndo that quite yet we'll just figure this\none out first so for array one we want\nto check um if the index is we'll say\neven so this will be\neven capitalization can't spell\nhere all right so if it's even that\nwould include\nzeros um so how do we find out if a\nnumber is even well we could use the\nmodulus 2 operator so if we came to our\nlittle playground here in the\nconsole and we said okay 0 modulus 2 is\ngoing to be zero one modulus 2 is going\nto be one two modulus 2 will be zero and\nthree modulus 2 will be one so basically\nanything modulus 2 that returns us with\nzero is going to be even everything else\nis going to be odd so that's all we have\nto do here we'll say if the index\nmodulus 2 equals 0 then it's even and\nfor that case we'll say array one at the\nindex that we're looking at um and then\nwe want to set that to\nuppercase Okay so we've got array one\ncompleted and let's go ahead and\nconsole. log that and see if we did it\ncorrectly\nand we didn't do this correctly I don't\nknow what I was actually thinking here\nwe already have the array item so we\njust need to take the item and make it\nuppercase I\nthink okay so we have a problem here\nwe're trying to modify the actual item\nwhich is not going to modify the\noriginal array um I just realized that\nso if you go to the array methods um and\nGo to JavaScript built-in objects and go\nto array you're going to see if we look\nat the for each method which is right\nhere the Callback function takes the\ncurrent value the index and the array so\nwe want to actually grab this third\nparameter and modify it within our uh\nproblem here so we'll pass in the item\nindex and then the original array and in\nthis case we'll take\nthe original array we'll pass in the\nindex of that and and then we'll set\nthat equal to the item. two upper case\nso I believe this one should work now\nwe'll\nsee and you'll see that we did\ncapitalize the first so that's even\nlower case on the second uppercase on\nthe third um so that should be working\num and I believe we did that right but\nlet's check one\ntime um so Capital capitalize the\nletters that occupy even indexes index\nzero will be considered even okay so we\ndid that correctly so array one is done\nand then we can basically just do this\nagain for odd\ncapitalization change this to array two\nand then instead of saying when it's\nequal to zero we'll say when it's not\nequal to zero and then we just need to\nreturn a final array and we pass an\narray one and array two and I think that\nshould get us this to An\nAnswer U maybe we did this in the wrong\norder let's\nsee oh I'm sorry I'm not doing this\ncorrectly so our arrays are um split out\ninto IND individual letters so we have\nto convert those back to Strings so let\nme do that real quick um array one\nstring is going to be array one um and\nthen join by an empty string which will\nor actually yeah I believe by an empty\nstring which will uh join them all\ntogether and then we can do the same\nthing for array two\nstring pass in Array two and then we\nwill return those like\nthis and see what we\nget all right so we passed them this\ntime let's just open this up and review\nwhat we did\nso as you see we're going to first take\nthese um strings and turn them into an\narray so if we go back here if we have\nsome sort of string and then we say\nsplit and we use a empty character it's\ngoing to put it all into an array then\nwe go and we Loop through that existing\narray with the for each method and we\nknow that the Callback function that\nwe're using is going to pass the item\nthat we're looking at the index of that\nitem and then the original array that we\ncan actually modify within that Loop and\nthat's we knew this because we looked at\nthe documentation here um otherwise uh\nyou probably would have to do just a\nregular four Loop which acts a little\nbit different than a 4 each so anyways\nwe are going through and we're asking if\nthe index is uh modulus 2 equals z which\nindicates it's an even number and when\nit uh equals an even number we take our\noriginal array we pass in the index into\nthe brackets to grab the item and we set\nthat equal to the item itself in\nuppercase form and then for the odd\ncapitalization we just um basically do\nthe opposite if modulus 2 does not equal\nzero then we want to make it uppercase\nthen finally We join those back together\nso um if we go to this array here so we\nsplit them into an array and then if we\nadd join with an empty character it just\njoins them back together to the original\nstring but we've obviously capitalized a\nfew of them in the middle so we join\nthem back together and then we just\nplace them in a new array and return\nthat array and that should give us the\nanswer okay I think this is getting to\nthe end one of our last ones here if not\nthe last one uh it says given a number\nreturn the maximum number that could be\nformed from the digits of the number\ngiven only natural numbers passed to the\nfunction numbers contain digits 0\nthrough n inclusive digit duplications\ncould occur so also consider it when\nforming the largest okay so that's a\ngood hint for us to remember here's an\nexample so uh three goes first two goes\nsecond and one goes third that makes\nsense that's the maximum number that we\ncould\nform\nokay so basically we have to take our\nnumber and we have to order it from\ngreatest to least so I think a good way\nto do that is we might have to convert\nit into an array\npossibly so basically what this is\nasking us to do if we think about it um\nyou know all of these numbers are going\nto be in the uh descending order so you\nhave the largest one first and so\nbasically what this is asking us to do\nis sort an array because we know that we\ncan take this number convert it to a\nstring and then separate that out into\nan array and if we can just sort that\narray then um we got the answer but the\nsort method does not do it correctly\nwhen we have numbers here so let's just\ntype it in to\nGoogle um this is just an algorithm so\nsort array numerically in JavaScript and\nwe'll see what the answers are so it\nsays how to sort an array of integers\ncorrectly and let's\nsee okay so we can just use the sort uh\nfunction we actually can use it we have\nto pass in a call back um that will\ncompare the two numbers so um let's\nsee the sort method takes a compare\nfunction okay so I was just reading this\nincorrectly so we can take a call back\nand look at the compare function and\nreturn the greatest number so let's go\nahead and do that uh just practice real\nquick so let's say that we have an array\nof numbers so two\n631 and we want to sort that so we will\npass in our single num and then we want\nto say let's\nsee what does it pass into this call\nback so let's look the first element and\nthe second element is what it's going to\npass in there so if we go to our little\nplayground here it's not just one number\nbut we'll\nhave the first and second element and so\nif the second element is greater than\nthe first um then we'll return true I\nbelieve so let's see how it did it in\nthis stack Overflow answer it says\nreturn a minus B so actually it's the\nother way around so if a is greater than\nb um we return that as true and then\nthat's going to actually sort our array\nfor us so let's test that out real quick\nwe just want to return First -\n2 and now we have it sorted in ascending\norder I wonder if we take it second\nminus\nfirst okay so that's going to do it in\ndescending order so we want to do second\nminus first for our problem here all\nright so the first thing we need to do\nis get this into a string so we're just\ngoing to try to do this all in one line\nbecause it'll help us kind of visualize\nchaining the method me together so we're\ngoing to return\nn uh two\nstring okay so that converts it to a\nstring and then we want to split it into\nan\narray now we've got it into an array of\nnumbers here and then we want to sort it\nand pass in the first\nnumber first number and second number\nand then we want to return second minus\nfirst okay and then that's going to give\nus um a sorted array of numbers so maybe\nwe won't do this um let's just store\nthis in a result for now and then\nconsole.log that\nresult and see what we have so far so\nwe'll test that and you'll see that it\nprints to the console a descending order\nof that array now we know that we can\ntake an array of numbers and we can\nactually um just combine those together\nwith join so maybe that's all we need to\ndo we just at the end here so hold on\none second let's return this\nagain no let's not do that let's keep it\nin the result and then at the end here\nI'm going to break out um for a second\nand we can actually uh put these down\nonto separate lines\nso we'll say\nsplit do sort and then the last thing\nthat we want to do is we've got it in\nthe descending um array so then we can\njoin it back together as a string and\nthat's going to give us one big number\nand then we need to just convert that to\na number and all we have to do is add a\nplus sign at the beginning to do that so\nnow let's see what our result equals\nlooks like we're getting the correct\nnumber here so all we have to do is\nreturn this result now so we don't even\nneed to store it in a variable we can\njust return it and let's see how it\nworks looks like we passed everything\nand again this is just some indentation\nit doesn't really matter how you do this\num we're just chaining all of these\nmethods together and you could certainly\nhave broken that out into separate steps\nso let's attempt it looks like we passed\neverything and see what um others use to\nuh solve this\nproblem okay so this person um did not\npass in a sort call back they just\npassed in no um no function whatsoever\nand that's going to default to ascending\norder as you saw up here so it\nsays\num the default sort order is ascending\nso here they're going to split it into\nan array they're going to sort it to\nascending then they're going to use the\nreverse array method to make it\ndescending and then they're going to\njoin it together and then wrap it in a\nnumber which we did by adding the Plus\nat the beginning of the entire\nexpression so you can see I believe yeah\nthis one right here is the exact\nsolution that we used so pretty good um\npretty happy with that one and with that\nI think we are done with these problems\num hopefully you learned a little bit I\nknow some of these were uh more\ncomplicated and challenging than you\nwould expect for a beginner and\ncertainly when we talked about recursion\nthere for a little bit that's getting a\nlittle bit over the pay grade of someone\njust starting out but it is an important\ntopic to explore and kind of understand\num it definitely will come up in some\nsort of coding interview if you're doing\nthose um but yeah hopefully you enjoyed\nthis um if you care to drop a like on\nthis video I'd really appreciate it\nsubscribe to the channel for future\nlessons um and hit me up on Twitter I'm\nat\nzgd uh tell me what you thought of this\nvideo and um how the challenges went for\nyou all right so I will see you in the\nnext lesson I believe that is lesson\nseven this is an HTML crash course and\nI'm really excited to walk you through\nit and I want to show you exactly what\nwe're going to build over the next\ncouple of videos so here is our ultimate\nchallenge that we're trying to create\nand what this does is you've got a bunch\nof buttons here on the right where we\ncan click them and a random meme is\ngoing to be shown to the screen or you\ncan have a joke displayed on the screen\na quote or a riddle where you're going\nto get the riddle and then you have to\nreveal the answer here so this is going\nto be a really fun project but before we\nget into it we have to learn a little\nbit about HTML now you'll notice that\nit's styled pretty nicely and this\nactually has some CSS in it but we're\nnot going to be covering that in um this\nlesson number seven of the series in the\nprior lessons of this series we've been\ntalking a lot about JavaScript and\nbasically how to program in general now\nwe're going to jump into HTML and then\nin the next uh lesson series we're going\nto jump into CSS and we're ultimately\ngoing to complete our introduction to\nfront-end web development before we dive\ninto to the details of HTML I want to\nstart with a little bit of an analogy\nthat will help us uh kind of going\nforward in this crash course and then\nalso the CSS one in the next lesson so\nthat analogy is building a house if you\nwere building a house you basically have\nthree steps first you have to build the\nstructure so that would be the wood the\nconcrete the brick the roofing all that\nkind of stuff then you have to set up\nthe function of the house so that would\nbe the plumbing the electric the water\nlines all of that kind of stuff has to\ngo into the house to make it functional\nand then finally the third step is to\nmake it look good you obviously don't\nwant to build a house that doesn't look\ngood you want to paint it correctly and\nyou want to do some landscaping around\nit put some siding on it all of that\nstuff is very important for the market\nvalue of the house so if our house was a\nwebsite the structure would be the HTML\nnow the function uh the electric the\nplumbing all that kind of stuff would be\nthe JavaScript and then the styling so\nthe the paint and the Landscaping that\nwould be the CSS now you could live in\nyour house with just the structure or\nthe HTML um you wouldn't have any\nfunction so you wouldn't have running\nwater you wouldn't have heat or anything\nthat makes a house livable but you\ncertainly could live um in that house\nand you'd have a roof over your head now\nif you add in the function you could\nlive with just that too so you know add\nin the electric and the plumbing and now\nyou've got a house that is functioning\nbut one that is not worth that much if\nyou went to try and sell it because you\nhaven't painted it you haven't put\nlandscaping around it and you haven't\nmade it look attractive to another buyer\nso that's where the CSS comes in that's\nwhere the styling comes in so ultimately\nthe goal of this analogy is to say that\nHTML is the only true requirement of a\nweb page\nbut if you want it to do anything useful\nyou got to add some JavaScript and if\nyou want to make it presentable to other\npeople your users you have to add in the\nCSS so that's just a nice analogy to\nremember how everything relates to each\nother and how HTML CSS and JavaScript\nplay nicely together to create a full\nuser experience on the web while these\nall work together we're going to be\nskipping the CSS part in this lesson so\nlike I said we've learned a lot of about\nJavaScript in the prior uh couple of\nlessons of this full stack road map\nseries um and now we're going to learn\nabout HTML so we're basically going to\nbe focusing only on those two how do\nthey interact and just as a hint it's\ngoing to be a big conversation about\nsomething called the document object\nmodel or the Dom and that's basically\nthe model that represents the HTML and\nallows us to plug our uh JavaScript into\nthat HTML and make it fun functional but\nat this point we're getting too detailed\nuh we'll get there in a second first we\nneed to understand what is HTML how does\nit work and how do we write it the first\nthing that we have to ask is what is\nHTML and it stands for hypertext markup\nlanguage and despite the last word\nlanguage it's generally not considered a\nfull-on programming language like\nsomething U like JavaScript that we've\nbeen working with before it's something\nthat allows you to structure um your\ntext and all different components that\nyou're going to put on a web page but\nit's not a full-on programming language\nyou can't add in a whole lot of logic\nbehind the scenes and make things\nDynamic without adding in that\nJavaScript now there's a ton to talk\nabout with HTML but similar to how I've\nbeen handling other Concepts within this\nseries I'm not trying to get into\nabsolutely everything and do a super\ndeep dive into it my goal here is to get\nyou exposed and learning the most\nessential concepts of HTML those things\nthat you absolutely have to know to\nbuild web applications I think a great\nplace to start is to understand the\noverall structure of an HTML document so\nsomething you have to understand is that\nevery browser tab that you have open is\ngoing to have one and only one HTML\ndocument is what we call it within it so\nthat one document follows a standard you\nknow boiler plate is what we call it\nstructure and that structure is what I'm\ngoing to put on the screen right here\nthis is going to be the most basic way\nto write an HTML document now everything\nwithin those HTML tags we call these\ntags um is going to define the whole\ndocument and then within that document\nyou have a head tag which has a site\ntitle so if you look up into the browser\ntab um you know the the name name that\nyou see within that browser tab is\ndefined by that title within the head\nand then there's other things that go in\nthe head of the HTML document some\nthings like um different stylesheets uh\nmeta tags all that kind of stuff that\nwe're not going to get too much in\ndetail with in this lesson now what\nwe're going to be focusing on is\neverything within that body tag so\nthat's going to represent the bulk of\nyour HTML document and it's going to\nrepresent the stuff that you're actually\nseeing on that web page well the thing\nthat I have up on the screen right now\nis going to represent the most basic\nform of an HTML document there is a more\nstandard boiler plate that you're\nprobably going to see so I'm going to\nput that up right now so this\nboilerplate HTML document um pretty much\nhas everything that you need to learn in\nHTML CSS and JavaScript I'm not going to\ngo through absolutely everything that\nyou're seeing here but I do want to\ncover a few things that are very\nimportant um we're not going to actually\nget into writing these but if you'll\nnotice you see within the head you see\nthis link tag and you'll see that it um\nreferences something called a Styles\nsheet and then it gives a file that is\npassed in so this is actually called a\nCSS document and that's going to be fed\ninto the HTML to actually style it if\nyou look further down in this uh\ndocument you're going to see a script\ntag which represents the JavaScript that\nis connected to the HTML and gives it\nfunction now in our case we're going to\nbe working in an environment called\ncodeen so what I've got up on the screen\nis a basic code pen document I suggest\nthat you create an account it's free and\nyou'll be using it throughout this uh\nspecific lesson on HTML so if you look\non the left side you see HTML CSS and\nJavaScript now going back to that boil\nplate that I just showed on the screen\nthis is basically a beginner friendly\nway to write that so code pen has\nalready taken care of connecting\neverything up so the CSS and the\nJavaScript are automatically connected\nto the HTML and within this HTML area\nthis is actually going to be what we're\nfilling in to the body so you know how I\ntalked about there's the the whole HTML\ndocument and then you have the head and\nthe body well this represents the body\nand you can just assume that CSS and\nJavaScript are all connected up and\nready to go with this I'm going to be\nusing this code pen uh playground\nbecause it's going to be a very\nuserfriendly way to explain what HTML is\nall about later in the series we'll talk\nabout writing our HTML CSS and\nJavaScript in our own local environment\nbut as we've been doing with the\nJavaScript earlier in the series using\nthe browser um Dev tools console\nthis is kind of the same deal we're\ngoing to just get into an environment\nthat's easy to use right off the bat\nlike I said HTML represents hypertext\nmarkup language and it only has a few\nkey things that you have to understand\nabout it what we're going to be focusing\non a lot in this uh HTML crash course\nare two things so number one we are\ngoing to be talking about HTML tags and\nnumber two we're going to be talking\nabout HTML attributes so what do I mean\nby those\nwell let's take a look at this code pen\nand you'll see that we can write a basic\nHTML tag by using these little brackets\nhere so this is this happens to be a\nparagraph tag um represented by P and\nwithin it you have this these little\nbrackets here so the the tag itself is\nenclosed in the brackets and then\nbetween it this is where we put some\ntext that we want to display in the\nbrowser and you'll see that once it\nrenders we have some text um displaying\nwithin the code uh Cod pen browser all\nright so the end of this is going to be\nwhat we call the closing tag and you'll\nnotice that we have this forward slash\nbefore the tag itself so I'm going to\nput up on the screen a basic diagram\nthat gives you the anatomy of an HTML\nelement so if we're breaking it down you\nbasically have an opening tag then you\nhave one or more attributes that you\nhave defined for that specific element\nthen you have the content that you put\nwithin the element which can be just\ntext or it can be other HTML elements in\ncertain cases we'll talk about that in a\nsecond and then finally you close it off\nwith a closing HTML tag so you might be\nwondering you know what is this whole\nattribute thing about you'll see you\nknow in that diagram that I put up we've\ngot a class attribute which just happens\nto be one of many attributes that we can\num Define for an HTML element in this\ncase the attribute we're talking about\nis a class attribute we're going to talk\nmore about the different types you can\nuse but in this case a class attribute\ndirectly relates to kind of identifying\nthe element with CSS now we're not going\nto be talking a whole lot about CSS in\nthis lesson but I do want to show you\njust the basics of what this attribute\nis doing so so we might say some class\num def defined within this class\nattribute and then we can come down into\nthe CSS and Define that and then we can\nmaybe give it a different color and now\nthe text up here is going to be red so\nthat's what we're doing with this\nattribute but that doesn't mean that all\nattributes relate to CSS we also can\nhave attributes that um are totally\nunrelated to CSS so for example if we\nwanted to add an image tag here and\nwe're going to talk about this a little\nbit more later so don't worry about the\nsyntax here yet we can define something\ncalled a source attribute so this Source\nattribute is going to actually give us\num the image URL that we want to display\nwithin that image tag so let me get an\nimage to put in there real quick and\nI'll show you what I mean all right so\nI'm going to put a dog image in here\njust as I normally do so we'll paste\nthat in there and now you should see\nonce it reloads a very large picture\nhere so we're going to use another\nattribute that I just know from\nexperience about we can put a width\nproperty on here and maybe Define it to\nabout 300 pixels so that it's much\nsmaller and we can see the image all\nright so again you should not understand\nyou know the the P tag and the image tag\nyou don't need to understand that quite\nyet we're going to cover it in a second\nbut what I want to uh demonstrate here\nis that these attributes can you know\nserve a lot of different purpose\npurposes and they're ultimately the same\nthing like you can think about them just\nlike JavaScript variables so just like\nwe're defining some sort of you know\nvariable here or attribute and then\nassigning it some value you can do the\nsame thing in JavaScript so you could\nDefine an attribute and give it some\nvalue here and that's the variable the\nJavaScript variable that we are so used\nto working with from the previous\nlessons so it's kind of a similar\nconcept but these you know what we call\nvariables or attributes here are\nspecific to these HTML elements that we\nare creating all right before we get any\nfurther into these details that you're\nnot understanding quite yet I want to\ntalk about the difference between an\nelement so an HTML element and an HTML\ntag so when I think of an element I\nthink of it as a complete unit so it not\nonly has an HTML tag but it also might\nhave some attributes or maybe even some\nevent listeners we're going to talk\nabout that a little bit later too so let\nme write out a full element real quick\njust like we saw a second ago um so\nwe'll say a paragraph element and then\nwe'll close it off with our closing\nbrackets so I think of this as a\ncomplete unit and a full HTML element\nand we can also add on some attributes\nso maybe an ID is going to be P1 or\nsomething and then we can add a class\nattribute now it doesn't matter what\nattributes you're putting here I'm just\ntrying to demonstrate this is a full\nHTML element now if we're talking about\ntags I like to think of those as the\nactual um indicator for what type of\nelement we're creating so in this case\nwe're going to put a P tag um indicated\nby the letter P right here so as we move\nforward think of the tag as the function\nor like what the element is supposed to\nbe doing and then the whole element as a\ngeneral structure of that HTML the next\nthing I want to talk about is the types\nof HTML tags that we can use so far we\njust looked at a paragraph tag and an\nimage tag but there are obviously plenty\nmore that we can use within our HTML\ndocuments so the first type of tag at\nleast how I categorize it there's plenty\nmore classifications that you'll find\nwith official documentation but just\njust for our brains to understand it I\nthink we can think about this in terms\nof normal HTML elements and self-closing\nHTML uh elements or maybe tags would be\na better way to say that so let me paste\nin a few of them here these are all you\nknow different tags that we can use so\nthe P tag the H1 tag div span and strong\nand all of these are what we consider\nkind of normal HTML tags because they\nhave an opening tag right here and then\na closing tag and then you put something\nin the middle of them to actually create\nthe entire element so these are what we\nconsider normal now there are some other\nHTML tags that have some different\nbehaviors where they're actually called\nself-closing and I'm going to paste a\nfew of those within our code pen here so\nlet's get a rid of these and now we're\nlooking at self-closing tags and this\nwould be image input meta tags these go\nin the head of the HTML document uh link\ntags this is how we link up the\nstylesheets to our HTML um something\nthat's going on behind the scenes here\nso these are self-closing which\nbasically means we have everything we\nneed within this single tag and we put\nthis forward slash at the end of it so\nrather than doing this let me just give\nyou a very specific example here so\nrather than saying image and then having\na closing tag and then putting something\nbetween them that's not valid we just\nhave to uh create one tag right here\ncalled image and then put the forward\nslash at the end of it to close it so\nthese are the two types of tags that\nwe're dealing with you'll start to\nrecognize them as you get more\nexperience writing HTML um I'll be sure\nto point them that as we go now the\nreason that I talk about the difference\nbetween you know normal and self closing\ntags is they have different behaviors so\nif you wanted to embed some content\nwithin a normal element so let's take a\ndiv uh element which I just think of as\nkind of a general purpose container that\nwe can use in HTML and I can put some\ntext in here it's going to work just\nfine as you see on the screen I can also\nenter down and put in another HTML\nelement uh maybe a paragraph tag here\nand I can embed HTML within that div tag\nall right so that's a normal HTML\nelement that has an opening and closing\ntag but if we Tred to do this with\nsomething like an image tag all right so\nthis is a valid way to write uh an image\nand we of course need a source attribute\nso let me see if I can get another image\nhere okay so let me get an actual image\nin here uh so that this is a valid image\ntag all right so it's working on the\nright but what I want to show you is\nthat if you try to put something within\nthis tag so let's come right here and\ntry to put maybe a p element in here and\nwe'll put some text right there you're\ngoing to see that this is not going to\nwork um all that well so you'll see\nthese weird brackets here at the end and\nwhile the overall image is working and\nyou still see some text uh printed to\nthe screen this is not valid HTML to\nwrite this is um you know it'll render\nbut it's not valid so just remember as\nwe write these self-closing HTML\nelements you can't put anything within\nthem now a more subtle difference that I\nwant to point out you know within these\nuh elements that we call normal or the\ntags that we call normal so for example\na paragraph tag we've got some text that\nwe can put in there now we can also put\nstuff within this but does it make sense\nto do so and the answer is probably not\nso if we have a paragraph tag and we put\nsome text in here and then we also try\nto put maybe another paragraph uh tag so\nwe'll put some more text in there this\ndoes not make a lot of sense to me and\nit doesn't make sense in general when\nyou're writing HTML because in general a\ntag such as the paragraph tag is not\nmeant to have elements um embedded\nbetween it other than just plain text so\nthere are some HTML elements that have\num these kind of container\nfunctionalities and then there are some\nelements that just are meant to store\ntext and only text so while we don't\nwant to put you know elements within a\nparagraph tag if we just change this to\na div that's going to be more\nappropriate so we can put you know as\nmany other elements within a div as we\nwant to because it's kind of structured\nand meant to do something like that it's\nkind of meant to be um a more of a con\ncontainer type uh HTML tag all right so\nwe've gone through some of the nuances\nof you know what type of HTML tags\nyou're going to be looking at now in\nthis next section I want to actually\nwalk through some of the most common\nones that you'll see and you'll use not\nonly that but I want to show you how to\nactually inspect your HTML in the\nbrowser and also how do we look these\ndifferent tags up in our documentation\nyou know if you don't know what\nsomething is or you don't know what it's\nsupposed to be used for you can go to\nthe documentation to figure it out like\nI said there are a ton of HTML tags um\nthat you can use and I'm not going to be\ncovering you know even half of them here\nuh that's not the goal the goal here is\nto get you the most essential ones and\nhelp you understand how to find um and\nuse different tags without having prior\nknowledge of them as we talked about\nearlier HTML is not styled it's all\nabout structure so if you look at this\npage got pulled up on the screen you can\nsee a bunch of really ugly um web\nelements um and we're going to walk\nthrough each of these very briefly just\nso that you can kind of get the gist of\nthem and I'll show you you know for a\ncouple of them how we actually look them\nup in the documentation and see what\nthey're for so just as a preview we've\ngot some content elements up here we've\ngot headings paragraph tags then we come\ndown into um some more content elements\nso we have uh span Elements which which\nallow you to kind of um custom style\nthis this actually has some CSS within\nit um which we're not covering but um\nyou can see how you can do things with\nthe paragraph tags and make it a little\nbit more customized using span and em\nand strong elements and then we can also\nuse uh images and links so a would be a\nlink image and then buttons here so we\ngot buttons and then we have some list\nand then finally tables like I said\nwe're not going to be covering that a\nwhole lot um but this is just the\nlandscape of most of the elements that\nyou'll be using on a daily basis as a\nweb developer but before we jump into\nthat I want to show you exactly how we\ninspect these now you'll notice I jumped\nover to Google Chrome here um I'm using\nthat for a very specific reason that\nwe'll kind of talk about a little bit\nlater in this lesson but it's very\nsimilar to Firefox all you have to do is\nright click and click inspect and then\nfrom here if you uh rearrange this\nyou'll see that the elements panel is\nwhere you can actually see the HTML\nwithin this document so if we click down\non the body you can see all of these\nelements and every time we hover over\nthem it will actually you know highlight\nit in the browser uh itself all right so\nyou can scroll down and just basically\nsee the source of this HTML document um\nwhich is a great way to um understand it\nnow I also o have this um this exact\ndocument linked in a code pen pen you\ncan find that in the materials in the\ndescription of this video so you can\njust look through this on your own time\nif I go through something a little bit\ntoo fast here all right the first ones\nwe're going to be talking about the\nfirst HTML tags are heading tags so that\nis H1 through H6 now if we go to the\ndocumentation this is I'm going to just\ngo through this exercise with you so\nthat you can get used to um doing this\nbut we basically go to mdn we go to\nTechnologies and click HTML and then we\ncan go down to the references and click\nthe HTML elements from here we can\nobviously go through and look for all\nthese different tags that we can use and\nin this case we want the headings so\nI'll click\nH1 and you can see that it just has one\npage for H1 through H6 because they're\nall so similar types of elements when\nyou're on a documentation page it's good\nto read this first sentence here just\nglance at the demo but if you come down\nto usage notes this is where you're\ngoing to learn like what is this tag\nactually for you know as we talked about\nHTML is the structure of the web and\ntherefore every uh tag that we're using\nhas a very specific purpose so this one\nsays heading information can be used by\nuser agents to construct a table of\ncontents for a document automatically\nall right so basically what that's\nsaying for us\nis that we can um use the H1 through H6\nto organize our web pages so let's start\nwith an H1 uh element all right and we\ncan give it a page title all right so\nthat's kind of what H1 is used for when\nyou go onto a web page there's always\ngoing to be a title of that you know\nblog Post article um or just the page in\ngeneral and usually it's going to be H1\nthat's what Google searches for with the\nsearch engines so a lot of seos will um\nyou know recommend that you have this uh\nsemantically laid out so that the H1\nonly occurs once on the page and then\nyou have everything else as H2 or even\nsmaller so we'll make some H2S here this\nwill be a secondary heading and like I\nsaid this is going to lay out your\ndocument um semantically based on the\norder of importance of your text so I\nthink you probably get the point of this\nyou can do this for you know H3 all the\nway to H6 not all that complicated so\nwe're going to just stop it right here\nbut you kind of get the point play\naround with this and and basically all\nI'll say about this is that H1 through\nH3 is probably the furthest you're going\nto go you might use an H4 every once in\na while but generally those first three\nare sufficient to build a web page next\nup we have the paragraph tag which we've\nalready used a little bit so if we come\nto um the mdn\ndocumentation and we go back to our well\nlet me just go through the full process\nso we get used to it so Technologies\nHTML HTML elements and then we can\nscroll down and look for the relevant\ntag so it'll come all the way down here\nto the P tag so it says the HTML P\nelement represents paragraph paragraphs\nare usually represented in visual media\nas blocks of text separated from\nadjacent blocks blah blah blah bunch of\nuh jargon here that we don't really need\nto read too much about this is basically\nwhat you're going to see everywhere on\nthe web so when you read an article blog\npost most of the text is going to be a\nparagraph element and it's very simple\nto write as we saw we can just put some\ntext between the opening and closing\ntags and you've got yourself a paragraph\nelement now while we're here I want to\nhighlight something kind of important\nwith HTML and there actually two things\nso number one HTML is not case sensitive\nso if if we wanted to capitalize one of\nthese tags and then have\nlowercase tags over here on the end it's\nstill going to work just fine because\nHTML doesn't care about\ncapitalization now it also does not care\nabout line breaks so if we had a couple\nelements here um let's just make a\ncouple paragraph tags and we put a bunch\nof spaces in here and we entered it down\na bunch um let's make some uh enter down\nin some more spaces you'll see that the\noutput is going to be the same no matter\nwhat and that's because the spaces\nbetween the tags doesn't matter\nwhatsoever basically when it's rendered\nin the web uh or in the browser it's\njust looking for the opening and closing\ntag and then it automatically knows how\nto lay that out on the page so it's not\ncase sensitive and these line breaks and\nspaces do not matter between these\nelements all right with that said we're\nmoving on to the next elements and that\nwould be um some other content elements\nthat allow you to uh basically style\nyour paragraphs but I will say that as\nwe talk about semantic HTML um the whole\ngoal of the new HTML 5 standard which is\nthe latest uh spec similar to when we\ntalked about JavaScript in previous\nlessons how there's the ecmascript\nstandard um and es6 all that kind of\nstuff well there's also an HTML spec\nthat is supposed to be followed and in\nthe latest one the goal is to basically\nuse HTML for structure and um function\nonly so instead of using HTML to\nactually Style Elements you're supposed\nto use only CSS to do that that said you\nwill see these Tags I'm about to show\nyou uh quite often in Old code and\npeople still use them um so you need to\nknow what they are and what they do do\nso let's write a paragraph tag right\nhere some text that I want\nto emphasize and make\nbold and styled all right so these words\nare going to be manipulated by other\nHTML elements and as I said earlier A P\ntag is generally not something you want\nto embed other HTML elements within so\nlike I said you probably do not want to\nput another P tag within a P tag and put\ntext in there but there are a couple\nexceptions and they relate to the uh\nstrong emphasis and span elements so the\nfirst one is going to we'll look at is\ngoing to be span so let's go ahead go\nback to the\ndocumentation go back to this uh\nreference and look for the span tag\nokay so we'll click\nspan and it says this element is a\ngeneric inline container for phrasing\ncontent which does not inherently\nrepresent anything it can be used to\ngroup elements for styling purposes or\nbecause they share attribute values so\non and so forth so basically what that\nis saying is if you want something um an\nHTML element that's not going to break\ndown to a new line it's just going to be\nin line with the rest of the text but\nyou want it to look a little bit\ndifferent or function a little bit\ndifferent than the rest of it you might\nuse a span tag so an example of that\nwe'll wrap this last word styled within\na span tag all right and as of right now\nyou see that it is red the reason this\nis Red is because behind the scenes I\ndidn't tell you this but I wrote some\nCSS that will take any span element and\nturn it the color red using CSS so if I\nopen this up you'll see that I uh said\nfor every span element I want the color\nto be red now I don't expect you to\nunderstand what that CSS is saying yet\nwe're going to cover that in the next\nlesson but basically that's the point of\na span is you can take a single you know\npiece of text within a paragraph tag and\nyou can emphasize it in whatever way you\nwant using CSS similar to a span we also\nhave the strong and em or emphasize uh\ntags so let's take a look at those in\nthe\ndocumentation let's go to the EM tag\nthis is uh it marks text that has\nemphasis so basically italics is what\nit's saying and then if we go to the\nstrong tag down here this indicates that\nits contents have strong importance\nseriousness or urgency which is another\nway of saying bold so like I said this\nin the new HTML standard you probably\nshould not use these uh tags but I'm\nshowing you them because you'll see them\noften people still use them and they are\nvalid HTML so if I wanted to emphasize\nthis word or in other words make it\nitalic I can surround it with these uh\nwith this em tag and you'll see that\nthis one word is now\nitalicized now we can also make a word\nbold by wrapping it with the strong\ntag and now this will be a bold word so\nas you can see we can use these\ndifferent HTML elements to actually\nstyle our HTML but again not recommended\nI would go ahead and use the best\npractices and style these with CSS\ninstead and I know you're probably\nwondering what the heck that means and\nbasically all that means is instead of\nusing the EM tag we might put in a span\nhere for the emphasis all right and now\nthat this is um wrapped in a span we can\nchange the CSS so right now it's just\nmaking everything the color red but if\nwe wanted to put an attribute in each of\nthese so we'll put a class and we'll say\num red color so for for this span it's\ngoing to be a red color um let me make\nthis a little bit bigger and then for\nthis span we'll put an attribute in\nthere or a class called italics all\nright and now we can come down in the\nCSS let me delete all of this so down\nhere in the CSS I can BAS basically look\nat elements that have these specific\nclasses again I'm I'm sorry for getting\ntoo much into this but I really want to\nshow you what this what I mean when I\nsay you should style it with CSS rather\nthan the uh em and strong tags so what\nwe can do is we can select that class in\nCSS and then we can basically say the\nfont style should be italic all right\nand once we do that you'll see that this\nword is emphasized with italics again\nbut this time instead of using the em\nelement we're using a span with some CSS\nStyles now we can also come down and\nselect the red color class and just give\nit a color equal to red and now you can\nsee that we're back to the original\nstyle that we had so again we're not\ncovering CSS too much in this lesson but\nI do want to show you how it's working\nwith the\nHTML um in unison all right so the next\nelements that we got to talk about um I\nthink a big one is going to be the div\nelement now this is going to be one that\nyou use all the time and it's very\nimportant and I consider it to be just a\ngeneral container element but let's look\nit up in the\ndocumentation and there's our div tag\nall right so this is called an HTML\ncontent division element and it's a\ngeneric container for flow content so\nlike I said it's just like a generic\ncontainer that we can basically separate\nout pieces of our HTML and you know the\nthe most important thing about it is we\ncan take each of these individual units\nthat are within a specific div and then\nwe can style it so very similar to that\nspan element where we're taking a\nindividual piece of text and we're\nmaking it look different than the others\nwe can also use some CSS magic along\nwith this HTML structure to separate out\nour content so let me show you what I\nmean by that so let's say that we have\ntwo div contain containers all right and\nthen Within These we have some\nelements in container one all right and\nwe'll just make a bunch of those and\nthen we'll do the same thing for\nelements within container\n2 so right now on the screen these don't\nlook separated at all you know you\nbasically look at this and say like oh\nit's all just one big piece together but\nsince we wrapped these within div\nelements we can actually\nput some styles on here to separate them\nout and like I said you're not going to\nunderstand how these styles are working\nquite yet we'll do that in the next\nlesson but I do want to show you how the\ndiv is able to separate out our content\nso the first one we need to identify by\ndiv one just an arbitrary class name\nthat we're giving it and then div two\nall right so what we're going to do is\nwe're going to make some boxes around\nthese so all we have to do is Select\nboth of them and give them a\nborder all right and from here you can\nsee that now we're getting some\nseparation of our HTML elements and we\ncan even put some margin around there\nand now it's going to be very apparent\nthat we have two very separate sections\nof our HTML document and that is the\npower of a div and you'll be using these\ndiv elements to section out your content\nall the time the next next element we're\ngoing to talk about or not element but\ntag is going to be the a tag which\nrepresents a link in HTML let's take a\nlook in the documentation again just as\na recap Technologies\nHTML HTML elements and then you can\nclick a so this is actually called The\nAnchor element that's what what a stands\nfor and it says with its href attribute\ncreates a hyperlink to web pages files\nemail addresses locations on the same\npage or anything else a UR L can address\nall right so an anchor tag or a link tag\nis going to require this single\nattribute called the a href attribute\nnow with HTML um tags most of them do\nnot have required attributes but with a\ncouple of them there are some required\nattributes this happens to be one of\nthem so if we were to come into our HTML\nas we have it here and maybe we wanted\nto um make a link around some of these\ntext so what I'm going to do is make an\na\ntag surrounded by this first uh\ncontainer one text and right now you'll\nsee that nothing is happening over here\nwhen I click it there's nothing there\nbut once I put in that href attribute\nand I put in a link so we'll say\nwww.google.com now you'll see that we\nhave this link styling and if we click\nthis it should take to the appropriate\nlink now one weird thing about code pen\num since it's kind of like an integrated\nuh environment that we can write HTML\nCSS and JavaScript when you have link\ntags within a code pen you can't click\non them and actually go outside of\ncodepen so I've actually pulled up um\nlet's let's actually look at the local\nfile that I have so this is what I was\nshowing you how to navigate around the\ndifferent elements and if if we go down\nto where I have the link example right\nhere so let's go ahead and click this um\nbutton up here to select a specific\nelement and then I can click on that and\nit takes me there on the right side and\nyou can see that I have this a or anchor\ntag with the href um attribute right\nhere representing my uh my personal\nwebsite all right so when I click this\nit's going to take me directly to my\nwebsite and that's how an anchor element\nis going to work now there's one\nadditional thing that we can add to an\nanchor element to affect the behavior of\nthe link so if we were to go in here and\nwe can actually edit HTML directly\nwithin the dev tools and if we put a\nattribute called Target and then we give\nit an underscore blank value so if we\nwere to go to the documentation to see\nthis you'll see that there's a couple\nattributes available here HF being one\nof them but if you go down you can see\nthere's a Target attribute and it gives\nyou the possible values that you can put\nin there and it says where to display\nthe linked URL as a name for a browsing\ncontext so basically it's saying where\ndo I need to open this link and if we go\nto blank it says usually a new tab and\nthat's exactly what's going to happen\nonce I put in this target equals blank\nand I click this link it's opening a\nbrand new tab rather than taking me to\nthat link within the current tab like I\nsaid there's other attributes on an\nanchor element but those are probably\nthe most common two ones that you'll\nneed and the href attribute is actually\nrequired to make it function as a link\nat all the next one we're covering is\nthe input element and this one is loaded\nwith functionality especially when you\nstart putting it within a form element\nall right so we're not going to talk a\nwhole lot about this because this comes\nlater in this series and we're going to\ntalk a lot about it in the context of a\nfront-end um web framework like react or\nangular uh vue.js\nbut I just want to introduce it to you\nso we'll go to input tag um we got to go\nback on the\ndocumentation um it actually has an\nentire section just for input types and\nlike I said there's a lot going on here\nthere's a lot um to do with forms within\nthe web so let's open up the normal HTML\nreference and go down and find the\ninput all right so we'll click input and\nit says it's used to create interactive\ncontrols for web-based forms in order to\naccept data from a user and that's\npretty much where we're going to stop\nbecause that's all that we need to know\nfor now I'm just going to show you a\ncouple basic um attributes that you can\nuse with this and just give you the\ngeneral concept of what it is so let's\ngo to the um page we're working with\nhere\nand let me just clear out everything and\nput an input tag now this is going to be\na self-closing tag we talked about that\nearlier just like an image tag is and\nwithin this input you'll see that we\nalready have something showing up here\non the right that we can type some text\ninto so right off the bat it's usable\nbut if we just left it like this and we\ntried to hook up some JavaScript to it\nit'd be very difficult to uh select it\nand grab the data that the user typing\nin um from it so something that we'll\noften do is give an input a name and\nthis is very important when you put this\nwithin a form so it can identify which\ninput um it needs to grab data from so\nwe'll just say this will be input one\nand then another thing that you can put\nanother attribute you can put is going\nto be a placeholder and this placeholder\nis going to be whatever shows up in kind\nof a grade out uh text to indic to the\nuser what they need to type so we can\nsay enter email address here and you'll\nsee that this placeholder gets put in\nthere and then once you start typing it\ngoes away so that's a very common\nelement or attribute that you can use\nfor the input tag now you can also put a\npredefined value in there so instead of\na placeholder if we were to put uh value\nit's going to replace that placeholder\nwith an actual value so you can see how\nthere's text already in here and if you\nwanted to change it you'd have to delete\nit and then type some new text so those\nare some of the common attributes that\nyou can use for inputs and again I'm not\ngoing to cover inputs in very much\ndetail at all right now because we're\ngoing to talk about them a lot later in\nthe series next up we're going to be\ntalking about image um tags and we've\nalready looked at it a little bit so\nlet's go to our HTML elements reference\nand then look for the image tag there it\nis\nall right so the image element embeds an\nimage into the document all right and\nthere's going to be a couple common\nattributes that you'll use for this and\nthere's one that is required so the\nsource attribute is required as you can\nsee in the\ndocumentation and then the alt attribute\nis highly recommended so when we're\ntalking about web accessibility and\nwe're talking about you know how do we\nknow what this image represents if it\ndoesn't render correctly\nthat's going to be what the alt\nattribute does so I'll show you exactly\nwhat what I'm talking about here let's\nwrite our image tag which is self-\nclosing and then from here we're not\ngoing to see anything because we don't\nhave our required Source attribute now\nlet's go back to this dog photo we'll\nput in the source attribute and paste in\nthe link to that photo and it's of\ncourse going to be very large here\nbecause the image is much larger than\nour page here but we can also add in\nadditional attribute and a quick tip\nwith HTML you can actually enter these\ndown so it doesn't have to you know all\nbe on one line we can separate out the\ndifferent attributes from the the tags\nso we'll go with Source first and then\nwe'll put in another common one which\nwill be with so you can also specify\nthis within CSS but this would be a\nquick way to make the width of this\nimage 300 pixels all right so that gives\nus a more manageable image to work with\nand then finally we have the alt\nattribute so we'll say a dog image or\nsomething like that to describe what our\nimage is all about and the reason we use\nthis is because if our link is broken so\nif I just break the link real quick\nyou're going to see when it reloads that\nit's going to give this little image\nicon and then whatever we put in the alt\nattribute it'll say a dog image so if\nthe link ever breaks the user will know\nlike oh this is supposed to be a dog\nimage and I kind of know um what the\ncontext of this image is and then\nfinally one of my favorite content\nelements is going to be button all right\nso this is what we get to click and do\nfun things with so how we write this is\nwe just basically write out button it's\na normal you know opening and closing\ntag type of element um let's take a look\nin the documentation real\nquick go to HTML elements and we'll find\nthe button element it says it represents\nclickable button used to submit forms or\nanywhere in a document for accessible\nstandard button functionality all right\nso we click buttons all the time when we\nuse web apps and it's basically brings\nour web apps to life it allows the user\nto know like okay I got to click this to\ndo something so within our button we can\ngive it some text so we might say click\nme in all caps and you'll see that now\nwe have a button that we can click now\nit's not going to do anything right off\nthe bat because we haven't hooked up any\nevent listeners or uh stuff like that to\nit now there's really not any common\nattributes that you'll see on a button\nlike this but there is one common thing\nthat you'll have to have for a button\nfor it to really do anything and that is\na um event listener now we're not quite\nready to talk about events um within\nHTML but I do want to quickly show you\nwhat I'm talking talking about um with\nbuttons so if I wanted to do something\nevery time someone clicked on this\nbutton I have to assign it an onclick\nevent now this is built-in this is\nactually not an attribute this is an\nevent listener so in here it expects a\nspecific function to be called every\ntime we click this button all right so\nif I go down to the JavaScript section\nof this code pen and I Define a basic\nfunction it says alert me all right so\nsomething like this where every time we\nclick the button it's going to bring up\nan alert in the browser and it's going\nto say hi all right so very simple and\nnow if we put that into the button right\nhere and we click the button it's going\nto make an alert pop up and say hi every\ntime we click it all right so that's\njust the basics of event handling within\nHTML and we're going to talk about that\nin a little bit more detail when we get\ninto the concept of the document object\nmodel or the Dom the next element I want\nto talk about is another content element\nand it's a list so with a list we can\nbasically have bullet points or we can\nhave numbered list all right so if we\nwanted to have a bullet point list we're\ngoing to use some tag called UL all\nright so what UL stands for is unordered\nlist and if we go to the documentation\nhere\nwe should be able to see that somewhere\nso let's go down to the HTML elements\nand find\nUL all right so there is the UL and it's\ngoing to say this represents an\nunordered list of items typically\nrendered as a bulleted list all right so\nthat's basically what that stands for\nand within it we have to put some um Li\nuh tags so you can see if we click lii\nthis element is used to represent an\nitem in a list all right so we can put\nthat here so we'll say Li and we'll say\nitem\none and then we can copy this down a\ncouple of\ntimes and give it item two and three and\nnow you can see on the right side we\nhave a bulleted list um of content all\nright and if we wanted to change this to\na numbered list all we have to do is\nchange the UL kind of container to an O\ncontainer\nyou can see it changed here on the\nbottom automatically and now you can see\nthat it is numbered and if we go to the\ndocumentation um we should be able to\nclick on o to see that this represents\nan ordered list of items all right so\nthose are the two types of list and\nthese will be very helpful to us when\nwe're uh laying out content and often\ntimes you'll see these list um\ncorresponding to a loop so if we talked\nabout in JavaScript earlier how loops\nwork and we can take an array of\nelements and we can Loop through them\nwell it makes sense that we could\nbasically Loop through an array of\nelements and display them in a list like\nthis so just keep that in mind as we\nmove forward in the series and then the\nlast thing I want to cover is tables and\nI know I said at the beginning we're not\ngoing to be talking about this all that\noften but I want to just glance over it\nvery quickly and I recommend that you\nlook at this on your own if you want\nmore details about it so if we go to the\ndocument ation once again we go down to\nHTML elements and table all right so\nwe'll click table and it says represents\ntab tabular data and then it shows you\nthe basic structure of a table you can\nsee that we have the table as the main\ncontainer and then we have the T head\ntag will be the header tags and then the\nT body will be whatever data we're\nputting within our table within that\nthat body we have TR tags which are\ngoing to be the rows and then within the\nTR uh tags we have table data for which\nwe'll put TD tags in there all right so\nas you can see it's a pretty complex\nstructure and like I said I recommend\njust using a table generator you can\njust search for it on Google um it's\nmuch easier than trying to remember this\nstructure now of course you could look\nit up and just copy in this example and\nget started that way too anyways let's\nmove on to the next part of our lesson\nand that's going to be talking about\nHTML attributes in a little bit more\ndetail in this next part of the HTML\ncrash course we're going to be talking\nabout the HTML attributes now I know\nit's probably been a little bit\nconfusing so far we've gone through a\nbunch of different HTML tags that we can\nbe using we briefly covered attributes\nand how they work but we didn't really\ntalk about when do you use them how do\nyou know when to use them you know\nwhat's fair game here so we're going to\nstart by talking about the difference\nbetween a global attribute and an\nelement specific attribute in short a\nglobal attribute is something that's\navailable to any HTML element you know\nno matter what it is an element specific\nattribute is an attribute that only does\nsomething to elements that it applies to\nso a good example of this can be the\nimage tag so let's go ahead and look at\nthat on the screen real quick so if we\nmake an image tag and we give it a\nsource property and then we give it a\nclass or not property but attribute you\ncan see the difference between a global\nand an element specific one so again\nlet's go ahead and put the source in\nthere and then let's make the width\nequal to 300 like we did earlier and\nwhat you can see on this um image tag um\nand then the total HTML element that we\ncall an image you can see that we have\nThe Source um attribute which is\nspecific to this image tag we also have\nthe WID attribute which is also specific\nto the image tag now the class attribute\nis a global attribute which means it can\nbe used on any element or any tag and to\nshow that let's go ahead and make a\nparagraph tag\nbelow we'll put some text in there and\nthen we'll give it a class\nall right so we've given it a class here\nand you can see that um it's not doing\nanything right now but if we were to\nactually style these two different\nelements we would use these class values\nas a way to select them within our CSS\nso as I kind of shown you uh showed you\nearlier you can actually select these\ndifferent classes and um basically put\nsome styles on here so what if I wanted\nto put a border on this uh image we we\ncan do it like that we can make that\nborder a little bit larger um and you\ncan see how we can style that or we can\ncome down and select the other one so\nsome class value and we can give this\ntext a different color so maybe we'll\ncall it green and so now we can see that\nthe text is green but this is not a CSS\ntutorial I just wanted to show you that\nthat is a global attribute that we can\nuse to connect up our HTML and our CSS\nbut if I came down here and put\nsomething like a width on the P element\nand I gave it maybe 20 PX or something\nlike that it's not going to actually do\nanything because this is not um\napplicable to the paragraph tag and\nlikewise if we put a source on here and\nthen we copied in the um image URL it's\nnot going to do anything either because\nthis is a paragraph tag it doesn't have\na source attribute so it'll still render\nin the browser okay it just won't do\nanything and that's the difference\nbetween a global and an element specific\nattribute if you wanted to connect the\ndots with the previous lessons we've\ngone through you can think of these\nelement specific attributes just like we\nhave JavaScript methods so if you\nremember if we have a string like this\nthere are a certain number of methods\nthat are available to this string data\ntype in certain methods that are not so\nfor example if we wanted to um call a\nmethod like string. two\nuppercase all right something like that\nthat's going to work just fine and I'm\nactually going to come over to um a\nconsole that we can use to show this so\nwe got a string all right right here and\nthen if we say string to uppercase it's\ngoing to work just fine it's going to\nmake all of the letters uppercase but if\nwe said string. reverse it's going to\nsay type air because reverse is a method\nthat's only available to an array um\ndata type so we would need an array like\nthis and then use array. reverse to\nactually use that method and the same\nthing applies to HTML attributes there\nare just certain attributes that only\napply to certain um tag types all right\nat this point we have covered quite a\nlot about HTML and I want to have you\nactually go through a practice exercise\nand a challenge to reinforce some of\nthese Concepts um so that when we talk\nabout some um how we actually connect\nJavaScript to the HTML you're not still\ntrying to figure out like how does html\nwork so I'm going to give you this\nchallenge if we go to my code pen let's\nsee if we can open this up here all\nright so as you can see um this is the\nchallenge that we're going to be working\nwith and what I've done here is I've put\na couple different HTML elements and\nyour goal is to basically create this\nbut put in your own personal details of\ncourse and um something that you can\nshare maybe on Twitter use the 100 days\nof code hashtag uh maybe hit me up\nzgd but anyways we're going to be\nbuilding something like this but\npersonalized and I've given you a\nstarter template so this will be linked\nto in the description below so be sure\nto check that out and you'll just open\nthis uh starter challenge up and you'll\nsee that within the HT ml I've kind of\nlaid out a basic template for you and it\nsays your code goes here now within code\npen it actually this HTML part as I\ntalked about a little bit earlier\nrepresents the body part so really all\nwe have to do is just start typing right\nhere so I'll leave you with that and you\ncan just start typing some HTML so um\nyou can put some text in there and\nyou're going to see that it\nautomatically shows up on the screen and\nfurthermore it's going to be styled just\nlike the one that I showed you because\nI've already written some uh CSS styles\nthat will basically apply to your HTML\nyou know no matter how you use it so I\nrecommend that you just browse through\nthese Styles but don't worry about how\nthey work just focus on writing the HTML\nthat is necessary to create something\nthat looks like this so just a few hints\nas we go through this looks like some\nsort of heading we've got some\nparagraphs in here we've got a link\nwe've got a list and then we've got an\nimage down here so that's basically all\nyou need to do so go ahead and try that\nchallenge out and be sure to share your\nresults on Twitter I think this is a\nrather basic challenge um not saying\nit's going to be easy it will not be\neasy uh starting out but it's basic\nenough I'm not going to go through it\nhere on video but if you'd like to go\ndown in the description and I also have\nlinked to this code pen where I've Sol\nit so you can see the code that I wrote\nand how I wrote it um to compare against\nyour\n[Music]\nsolution the next part of this video we\nare talking about something called the\nDom and that stands for document object\nmodel and it's very closely related to\nHTML which we talked about in the\nprevious part of this lesson now I will\nsay if you have not completed the\nchallenge that I gave um in the prior\nvideo go ahead and complete that and I\nwould recommend that you have at least a\nbasic understanding of HTML and kind of\nunderstand how to put something together\nwithin you know a code pen document or\nsomething like that because if you don't\nhave at least a basic level of\nunderstanding of HTML this stuff is not\ngoing to make any sense before we get\ninto this I want to show you a little\nbit about the code pen environment so\nthat we can understand like how do we\nactually debug um JavaScript within the\nbrowser and you know take those Concepts\nwe've been looking at in the prior\nvideos where we've you know pretty much\nright clicked um so let's take a look at\nthe screen here if we rightclick and\ninspect and then we come to the console\nthen we can write you know basic\nJavaScript within the console so we've\nbeen working in the console quite a bit\nbut when we go to codeen since it's kind\nof it's its own environment we have to\ndo a few things to make sure that that\nconsole is working the same so if we\ncome down to the JS section of the code\npen this is a little bit different than\nwhat we've been working with in the\nconsole now if we were to just type\nsomething like you know\nconsole.log hello now this is going to\nbe printed to the console but it's going\nto do it over and over again every time\nthe page loads because this JavaScript\nthat we're working with here is directly\nconnected to the HTML document above so\nit's not really like a free form console\nthat we can use to test out different um\nJavaScript now codepen does have a\nconsole down here at the bottom left and\nif you open it up you'll see that we\nhave that hello that we printed by\nwriting that JavaScript code but we can\nalso do something like that down here in\nthe console and this is supposed to\nrepresent the same type of thing that\nwe've been working with um when we\nrightclick and inspect and go to the dev\ntools console but the problem is this is\nnot a really nice and easy console to\nwork with like if you started to you\nknow Define a variable that's like a\nstring or something and then you type a\nand you hit enter it's not going to say\nit's not going to like be defined and\nthat's a problem because we want to be\nable to experiment around and work with\num our JavaScript as we're building it\nso to solve that problem we're not going\nto be using the code pen console what\nwe're going to do is rightclick and\ninspect within the code document so it\nstill opens up this um console and I\nwill note I'm in Google Chrome not\nFirefox this is not work um quite as\nwell in Firefox unfortunately so I've\nswitched to Chrome for that reason and\nif we go to the console you'll see some\nof the the hellos that we put there from\nearlier but if you go to this little\ndrop down here when we first enter the\ndocument you might see something like\ntop but in order to get the right cont\ntext to work in you have to drop this\ndown and scroll down to code pen now we\ncan actually um select elements from the\ncode pen document that we've written\nhere and we don't have to um or we're\nbasically going to have some\nresponsiveness with our JavaScript just\nto quickly show you this and we're going\nto cover all of this stuff um in a\nlittle bit but let me put a basic\nparagraph tag in our code pen document\nand you can see it shown up there and if\nwe have this context the JavaScript\ncontext set to top and we try to type\ndocument. query selector and then grab\nall the paragraph tags it's not going to\ngrab us the right ones so this is a\nparagraph tag but it's not the one that\nwe're looking for here so we have to go\ndown to the right context so select code\npen and now when we run this it should\ngive us the correct element that we're\nlooking for so that's just really\nimportant if you're trying to follow\nalong with this like code along as I'm\ndoing it just make sure that you're in\nGoogle Chrome you rightclick inspect\nelement and make sure that the context\nis the right one it's under the code pen\ncontext all right now we got that\ncovered um just want to make sure that\nyou're able to follow along let's jump\ninto what the document object model or\nthe Dom is all about now how I would\ndescribe the Dom is a bridge between\nHTML and JavaScript prior to these\nlessons we've been going through how to\nwrite JavaScript code we've gone through\nall the basics of it so you have at\nleast a a basic level of understanding\nof how to write JavaScript we also just\nlearned about the basics of HTML which\nas you saw is a lot easier to learn than\nJavaScript now what we're going to do is\nwe're going to take these two concepts\nand we're going to combine them together\nto make our um HTML come alive so\nremember with the house analogy HTML is\nthe structure CSS is the styling and\nJavaScript is the function so um in\nother words with the house analogy HTML\nis the bricks and the concrete in the\nwood the CSS is the paint on the house\nand the JavaScript is going to be the\nplumbing and the electric and all that\nkind of stuff now the first question\nyou're going to ask is why are we\nlooking at the Dom in the first place\nhow do we know that this is important\nwell the Dom is basically at the root of\nany frontend framework that you're ever\ngoing to work in it's the only way that\nwe can connect our JavaScript to HTML\nand while you may not see it directly it\nmay kind of you know be doing a bunch of\nstuff behind the scenes when you're\nworking with a framework like angular\nreactor vue.js it's still there it's\nstill using the Dom API we're going to\ntalk about that in a second so it's\nimportant to know that it exists and\nknow the basics of how it works and what\nit's trying to accomplish so what is the\nDom now we know it's the document object\nmodel which gives us a little bit of a\nclue what we're talking about here but\nit's a little bit more complex than just\nthat now I'll start with what it is not\nso the Dom is not a programming language\nit's also not natively part of\nJavaScript so it only exists within the\nbrowser um and there's different browser\nimplementations whether you're on\nFirefox or Chrome or Safari they all\nhave slightly different implementations\nof the Dom for our intents and purposes\nwe don't really care about those\ndifferences we just want to know you\nknow what it is and how it works so the\nbest way to think about the Dom is an\nAPI for an HTML document now you may not\nknow what an API is but luckily I have\ndone a video on just that so go ahead\nand watch that if you're unclear of what\nan API is but just as a you know 10,000\nfoot view what I consider an API and\nthis is my personal definition of it\nthat that makes sense in my head is a\nsoftware API can be thought of as a user\nmanual that allows developers to do\nsomething useful with a third-party\nsoftware or Hardware without knowing the\ninner workings of that software or\nHardware so basically the API that we\ncall the Dom is going to allow us to\nmanipulate HTML without knowing you know\nhow is HTML actually you know\nmanipulated within the browser all we\nhave to know is how to write the HTML\nand then how to use the API that we call\nthe Dom to manipulate it I know your\nhead's probably spinning at this point\nso let's jump into a simple example to\nunderstand what I'm talking about so\nwhat I'm going to do here is paste in\nsome HTML all right so this is going to\nbe a basic HTML document I've got an H2\ntag a paragraph tag and a button now if\nwe click this button and we kind of\ntalked about this a little bit earlier\nwhen we click this button it's not going\nto do anything and the reason is we\ndon't have any JavaScript connected up\nto it in order to connect it up all we\nhave to do is first identify the element\nthat we're wanting to make interactive\nand then once we identify it we need to\ninstruct it to do something via\nJavaScript so just as an example we can\nidentify this button using pure\nJavaScript and all we have to do is type\ndocument. query selector and then we\ntype in button because that's the tag\nthat we're looking for now of course I\nneed to select the correct context to\nwork in so we want the code pen context\nand then from here when we press enter\nwe're going to see the button that is\nwithin our code pen output all right so\nthat's how we would select that button\nnow from there we can actually store\nthat within a variable so if we were to\nrewrite that command and then just store\nit in a basic variable so BTN is our\nvariable now we can reuse it and we can\ndo things with it but at this point you\nprobably don't have any clue what all of\nthese commands are like what is document\nhere what's query selector all that kind\nof stuff doesn't make any sense yet\nbecause we haven't talked about the Dom\nso to better understand it I want to\nbring in yet another analogy for us now\nwhen we think about an HTML document\njust a static HTML document that we've\nbeen working with so far so this one\nright here on the screen that is kind of\nthe equivalent to a paper map so with a\npaper map there's only so many things\nyou can do with it um you can write on\nit of course but you're not going to be\nable to you know click into it and and\nsee some more details about it but we\ncan do that with a something like Google\nMaps we can click in and go to different\nplaces and do a bunch of other uh\nfunctions with it so the analogy here is\nthat HTML alone is like a paper map but\nwhen we add the Dom uh API with that\nHTML then it becomes something like\nGoogle Maps where we have a lot of\ninteractivity that we can put into it so\nto really talk about the document object\nmodel let's take a look from 10,000 ft\nall right so we know some things about\nJavaScript that are pretty familiar to\nus so for example this is a string in\nJavaScript we know that all right and we\nalso know that this is going to be a\nnumber all right all right but what\nabout that button that we just um\ndefined here so we saved it into the\nbutton variable so if we look at that\nvariable what type of data is that well\nwe don't actually have a good indication\nof that all we have to do is say type of\nbutton and it's going to say object well\nclearly there's got to be something more\nspecific than just object and there is\nwhen we start using the Dom or document\nobject object model terminology from the\nDom's perspective this element right\nhere or this variable right here is\nconsidered an element so if we were to\ncome to the document object model um uh\ndocumentation here you're going to see\nall sorts of interfaces and stuff it's\nit's a pretty complex API that we're not\ngoing to even um cover half of but if we\nclick in and look at the element this is\nthe most uh General base class from\nwhich all element object object in a\ndocument inherit all right so that would\nbe what we are looking at when we have\nsaved that um selected element into a\nvariable called BTN and once we know\nthat this is of this element type we can\ncome here in the documentation we can\nsee there's all sorts of properties that\nwe can look at and there's all sorts of\nmethods that we can use on this specific\nvariable so we have a lot of\nfunctionality available to us but we\nhave to first understand you know uh the\nthe whole 10,000 ft view so what I'm\ngoing to do in order for us to\nunderstand it better is show you a\npicture that's going to represent um\nwhat the Dom is really trying to do so\nat its highest level the Dom has two um\nbuilt-in objects that are probably going\nto be used more than any other um\nobjects that you'll look at so at the\ntop level the very top level you have\nthe window object and what you can think\nof that as is literally the browser\nwindow that we're working in more\nspecifically it's kind of referring to\nthe individual tab browser tab that\nwe're working in but in some cases it\ncan cross over between tabs so you can\nactually program using that one object\nyou can do all sorts of things within a\nbrowser so as a general user of a web\nbrowser there are several things that\nyou do every day that you don't realize\nare programmable so one of those things\nis scrolling down all right scrolling\ndown or scrolling up every time you\nscroll you can actually do that\nprogrammatically with JavaScript now\nanother thing you can do is you can\nresize the browser window so if you were\nto resize it like this you can actually\ndo that with JavaScript all right and\nfinally if you refresh the page that's\nalso something you can do with\nJavaScript and the way that you do it is\nby connecting in to the Dom via that top\nlevel object that we call Window all\nright so I'm going to quickly show you\nhow we can programmatically do these\nthings by using that object but first\nlet's take a look at this in the mdn\ndocumentation so we'll search for window\nand here is what we're looking for and\nit says the window interface represents\na window containing a Dom document the\ndocument property points to the Dom\ndocument loaded in that window so\nbasically it's saying that the windows\nthe browser itself or the tab and then\nthere's an HTML document represented by\nthe document object within it all right\nso that picture that I just showed you\nkind of uh shows that relationship how\nwe have a HTML document that we are\nputting in that browser window now from\nhere this window object like I said has\nall sorts of properties and methods that\nwe can um use to do things that we\ncommonly do um just by clicking around\nin the browser on a normal basis so you\ncan see down this left hand side these\nare all of the different um you know\nthings we can do with it so for example\nwe have this alert method so let's go\nahead and inspect element so we're in\nthe browser console and if we type\nwindow. alert and then we say I love\nprogramming or something like that and\npress enter it's going to open up an\nalert window and you can see how we're\nalready starting to program this browser\nwindow using that object here's another\nthing we can do we can open up um new\ntabs so if we say window.open and maybe\ngo to Google all right when we press\nenter it's going to open a new tab and\nput us at google.com so that's pretty\ncool um let's see another thing that we\ncan do is we can scroll so you have to\nobviously be on a page that has a scroll\nbar which this one does and from here we\njust say window scroll by and and then\nwe give it a bunch of options here these\nare all documented within this method so\nif you were to um go down to the\nmethods of window let's see if we can\nfind them all right so we found the\nmethods here and let's see if we can\nfind this scroll by uh\nMethod All right so we have scroll by we\ncan click on that and it just tells us\nokay you can pass in some options here\nand those options that we're passing in\nare scroll two options all right and\nthen from here we have the top left and\nbehavior so we're going to Define we\nwant to scroll um from the top we want\nto scroll window.in height which is\ngoing to be a built-in property of that\nwindow object which basically says\nhere's how tall this entire HTML\ndocument um is all right so from the top\nwe want to scroll down the entire length\nof the page essentially we're going to\nthe bottom of this page all right and\nthen from the left we want zero we don't\nwant to scroll left and right and the\nbehavior that we want is going to be\nsmooth we don't want to just jolt down\nthe page we want to smoothly scroll all\nright so when we do this and close out\nthis method and press enter you got to\nwatch the screen now it's going to\nscroll all the way down to the bottom of\nthis you know page or whatever and I\nguess it didn't go um all the way down\nbecause I actually explained that wrong\nso window.in height if we look at that\ninner height is only going to Define how\nlarge the visible window is so it's not\ngoing to uh Define how large the entire\ndocument is so obviously this is a much\nlarger document so it's only going to\nscroll down one entire page and then\nfinally we've are able to actually\nreload the page so we can tap into the\nwindow.location property and then that\nlocation property has a method called\nreload and you could have found this in\nthe documentation if you looked hard\nenough but I don't want to write now\njust for sake of time so let's press\nenter and you can see um you may not\nhave seen it but it reloaded the entire\npage um programmatically so you can see\nhow that top level window object is\nbasically our control over the browser\nand the way that this is happening is\nvia the Dom API so the Dom again is just\nan API to connect in with our browser in\nHTML document now another thing to\nmention about this is It's a global\nobject which means we don't have to\nactually specify it every time we use it\nso I showed you before that we could do\nwindow. alert and then type in something\nto get an alert all right so we can also\ndo this by dropping window like we don't\neven need that because it's Global and\nwe can go ahead and get the same results\nthere all right so so that's important\nto keep in mind with the window object\nand the document object these are both\nGlobal so we don't need to specify them\nbefore calling their methods or\nproperties so a couple common properties\non window we're not going to go through\nall of the methods and properties for\nall these objects but this is just such\na high level one and important one that\nI want to so window has a few common\nproperties that you might want to tap\ninto one of those is going to be the\ninner height and I spelled that wrong so\nit's not going to give me anything so\nwe've got inner height is going to give\nus the height in pixels of the space\nthat displays the HTML so the visible um\narea that's displaying that HTML now if\nwe said outer height that's going to\ngive us the uh pixel height of the\nentire browser window so if you look at\nthis value it's 1040 but if you uh make\nthis browser window smaller and you say\nouter height it's going to give us a\ndifferent value 894 the same thing\napplies for inner width and outer width\nso inner width is going to give you the\nwidth of this space that's displaying\nthe HTML so if you resized this you're\ngoing to get a different inner width all\nright so I don't want to spend too much\ntime on the properties but you can kind\nof get the gist of what that's showing\nyou now another common property that we\nmight look at here with window is going\nto be local storage all right right so\nthis is going to be a big one that will\ncome up as we start getting into more um\nuh Advanced web development Concepts and\nbasically what this allows you to do is\nstore data temporarily in the browser so\nif I were to go to the application here\nin Chrome it's called a little bit\ndifferent thing in Firefox I actually\ntalked about that in like the third\nlesson of the series but if you click\nhere you can actually see key value data\npairs that can be set and retrieved\nthrough the local storage object so if\nwe wanted to set an item um we'll just\nsay test and then we want to set it\nequal to 20 we can do that and then we\ncome to application and you can see test\num has a value of 20 here so it's a\ngreat way to store temporary values and\nthat is accessed through the local\nstorage um uh object that sits on the\nwindow object all right and then finally\nI want to talk about the location\num because this is going to basically\nrepresent an object that has details\nabout where you're visiting right now so\nright now we're on the mdn web docs and\nif we were to look at the\nwindow.location you're going to get all\nsorts of details about that um location\nwe have in the address bar so these are\nsome of the common properties um just\none more or two more that I want to show\nyou here before we move on um window has\na scroll X property which is going to\nindicate how much we have scrolled from\nthe left side of the page or I guess\nright and left horizontal scrolling and\nthen we have window. scroll Y which is\ngoing to indicate how much we've\nscrolled up and down um so you see this\nscroll bar here this is going to change\nthe value of this property every time we\nscroll a little bit so these are all\ngoing to come in handy as we work with\nthe Dom later on and we want to you know\nprogrammatically do things within this\nbrowser window now I've briefly\nmentioned it before but we can have\nthese things called events happening um\nwithin the Dom now this is going to be a\nlittle bit complicated but I want to\njust show you a basic example of this um\nsomething that you can do on the top\nlevel window object so we can say window\nonscroll so basically we're saying we\nwant to tap into the onscroll event\nwhich basically every time I move that\nbrowser scroll bar it's going to fire\nthis event and what I want to do every\ntime I scroll I want to execute a\nfunction so right here I'm using an\nanonymous function and I'm just going to\nconsole.log high all right so something\nvery simple and now we have set an event\nlistener on this the entire window all\nright so now when I touch this scroll\nbar we're going to get this Printing\nHigh to the con conso for a lot of\ndifferent iterations here so that's just\na basic event now I just want you to\nknow that that is available and it's\nsomething that you can do but we're not\ngoing to really dig into the the super\nnitty-gritty details of it in this\nlesson all right so now that we've\ntalked about the window object which\nrepresents the entire You Know Tab that\nwe have open or I guess the um browser\nthat we're working in let's talk about\nthe document object so let's put that\nback up on the screen that um 10,000 ft\nview of the Dom API we've got at the top\nwe've got the window object and then a\nproperty of the window object is going\nto be document and this is where the\nreal fun begins because document is\nbasically a representation of your\nentire HTML document that you've written\nso let's take a look at this I'm going\nto refresh the browser so we don't have\nthat onscroll um event firing every time\nbut we have window at the top and then\nwe have this property called document\nall right so we press enter on this and\nyou now see that we have this um big\nobject that has basically the HTML\ndocument defined within it and while we\ncan expand these different things um\nvisually within the console there's\nactually a lot of things that we can do\nprogrammatically using this document\nobject we can add or remove HTML\nelements from the existing page we can\nmodify existing HTML elements and we can\neven set events on specific HTML\nelements we saw how we set an event on\nthe entire window but we could set an\nevent um like we talked about earlier in\na in the prior video something like that\nwhere we have a button and we want to\nwait for a click event and we want to\nfire some sort of function that does\nsomething every time that button is\nclicked so this document object is very\npowerful and there's a lot of things\nthat we have to cover to understand what\nactually does so let me show you a basic\nexample of this uh we'll go back over to\nour um code pen which we have a basic\nHTML document here and I'm going to type\ndocument and let's take a look at what\nwe're um dealing with so right here we\nhave this top level HTML wrapper which\nwe talked about is um going to happen\nfor every single HTML document in codeen\nyou know you'll notice over here we\ndon't have that written but code pen is\nautomatically wrapping our HTML within\nthe HTML wrapper all right so we expand\nthis down we have a head code pen takes\ncare of this and a body and then from\nhere this is where the actual HTML and\nJavaScript that we're writing is going\nto be placed so you'll see that we have\nour H2 element our paragraph element and\nour button element and then you also see\nsome scripts down here at the bottom and\nbasically these scripts are what are\nrepresented here in the JavaScript so\nany JavaScript we type here is connected\nup to our HTML document via these script\ntags so again don't have to understand\nhow that all works we'll get into that\nin future lessons but um I just wanted\nto show you the anatomy of this document\nobject now if you've been following this\nseries all the way through and you went\nthrough the JavaScript series you know\nhow to write basic JavaScript and you\nalso know that if we have a JavaScript\nobject we can access properties of it so\nlet's define a basic object with a\nproperty all right something like prop\none and prop two nothing fancy here but\nif we were to actually let's make a\nnested object as well um we'll say\nnested right here and then we will end\nthis all right so object. propop 2.\nnested is going to equal our value right\nhere because we use the dot notation to\naccess the different um embedded uh\nproperties and values within this object\nnow you would think that we could do the\nsame thing with the document object but\nwe can't all right so if we try to do\nthe same sort of access let's clear the\nscreen and if we try document um and\nthen let's go ahead and look at it one\none quick second so we obviously have\ndocument then we have HTML then we have\nbody so if we typed document.\nhtmlbody it's going to say we cannot\nread the property of body because it's\nundefined so we clearly cannot just\naccess these different HTML elements\nwith notation we have to use um the\ndocument object model API to do so and\nit's a little bit different takes a\nlittle bit of getting used to but\nhopefully we can walk through some of\nthe more common ways to use it here in\nthe remainder of this video\nso I'm going to put on a new HTML\ndocument here with some additional uh\nparts to it so that we can really\nvisualize what this Dom is all about all\nright so we can think of the document\nobject model as a tree and furthermore\nwe can think of this tree as um kind of\nlike we think about ancestry um trees or\nwhatever where you have grandparents and\nthen you have parents and you have uh\nchildren and stuff like that so what\nyou're seeing on the screen right now is\nthis HTML document that we just created\nin this code pen um represented as the\nDom tree all right so you can see that\nwe have the document at the top then we\ngo down to HTML and then from there we\nhave the head and the body and\nunderneath the body specifically we have\nall of this HTML that we have written\nhere and within that HTML we have a lot\nof siblings but we also have some\nchildren so for for example um let's\nlook at this main div right here for the\nmain body so the main body div is going\nto be the parent to this H1 tag these\ntwo P tags and this UL or unordered list\ntag all right so that's going to be the\nparent to these uh four now if we look\nat the list items its parent is going to\nbe the unordered list and its\ngrandparent is going to be the main body\ndiv so you can see how these\nrelationships to build and furthermore\nwe have you know the concept of siblings\nso all of these list items these are all\ngoing to be siblings within the document\nobject model and this unordered list the\nP tags and the H1 they're all siblings\nso what do we call all of these elements\nwell in the document object model we\ncall them all nodes now this is very\ndifferent you should not um confuse this\nwith nodejs we'll talk about that later\nin the series but that's basic basically\nthe backend server side version of\nwriting JavaScript this is a totally\ndifferent concept all of these elements\nare considered nodes within the Dom tree\nnow of course they're all different so\nthey're all different types of nodes and\nI'm going to put the um image back on\nthe screen that we looked at in um the\nprior part of this lesson when we talked\nabout the basics of HTML So within this\num element that we have defined it's a\ntotal unit we we have different types of\nnodes here so at the simplest level we\nhave something called an element node\nand that's going to be represented by\nthe P tag all right and then we have an\nattribute on that uh HTML element and we\ncall that an attribute node and then\nfinally we have a text node which is\ngoing to be the content that we're\nputting between the starting and closing\nparagraph tags now to prove this out to\nyou I'm going to actually take this\nelement\nand create it in JavaScript and then\ninsert it into the page that we're\nlooking at right here all right so the\nfirst thing we have to do is Define each\nof those three different types of nodes\nall right so the first one is going to\nbe an element node and let me let me\nactually zoom out a little bit here so\nwe've got an element node and we have to\nuse the document object and then we use\ncreate element and before we do that I\nkeep forgetting we have to change the\ncontext\nto code pen so that we're working with\nthe document that we're seeing over here\nrather than the whole document all right\nso sorry about that and what we're going\nto do is create our element node which\nis going to be a P tag all right so\nwe're just creating that element we just\nput on the screen so let's press enter\nand we have created our first element\nnode and if we look at that it's just\ngoing to be an mtyp tag there's nothing\nin it yet all right so now we have to\ncreate our text node all right right so\nwe're going to type document. create\ntext node and then here we're going to\nput in the word content which is the\nstuff that was between the P tags all\nright so we press enter and right now\nthis element node is still empty all\nright so we still have an empty P tag\nand the reason is we haven't assigned\nthe text node to that element yet before\nwe do that let's create our last node\nwhich is going to be an attribute\nattribute node so we'll create an\nattribute and we want to call this a\nclass attribute because that's the type\nof attribute we had on this uh HTML\nelement all right so at this point let's\nlook at what we have here so we have\nelement node which is a empty P tag then\nwe have the text node which is going to\nbe content as a string or more\nspecifically a Dom string and then\nfinally we have\nour attribute node which is going to be\nclass equals to empty so basically we\nhaven't assigned a value to this\nattribute yet but we've initialized it\nthe first thing I want to do is I want\nto take our text node and I want to put\nit inside our um P tag or element node\nso all we have to do is say element\nnode. append child and then we pass in\nthe text node press enter And now when\nwe print out the element node it's going\nto be a P tag with that content placed\nbetween it now we are starting to build\nout this element the next thing that we\nhave to do is give a value to our\nattribute so if you saw before we have\nclass equal to an empty string all we\nhave to do to do that is we say\nattribute node and then we say value\nequals Su class all right so now we have\nthis attribute node if we print that\nit's going to say class equals Su class\nso we're getting closer the only thing\nthat we are missing is this attribute is\nnot connected up with our um paragraph\nelement so to do that all we have to do\nis take our element node and we say set\nattribute and then we pass in the\nattribute node and it says it failed to\nexecute um because there are\ntwo oh okay I messed it up so not set\nattribute we have to set attribute node\nall right so we press enter there and\nnow the element node is going to be our\nfull HTML element that we saw in the\nmodel before the last thing we have to\ndo is insert it into the document and\nthe way that we do that is we use the\ndocument object so we type document and\nthen we use the append child method we\nhaven't talked about this yet but I just\nwant to show how it works and now we\njust pass in element node and if you\nlook at the bottom of our code pen\nyou're going to see this element\ninserted into the\ndocument and it's going to say it failed\nto execute um because I'm messed up once\nagain I forgot I need to add one more\npiece of code in here I need to say\ndocument.body so instead of just\ninserting it at the end of the document\nwhich represents the whole HTML um\ndocument I need to specify that I want\nto look at the body specifically so if\nwe go over to elements and we look at\nthe entire well I guess this is not a\ngood example cuz code pen is adding a\nbunch of other stuff but basically we\nneed to put in the body element so let's\npress enter and you can now see that our\ncontent has been inserted into our\nexisting HTML document so you may not\nhave recognized it but we're actually\ntapping into the Dom's API to do\neverything we just did we created a new\nHTML element with JavaScript alone and\nyou can see that we use things like Set\nuh set attribute node and a pen child\nand we've used create attribute create\ntext create element these are all\nmethods that are defined within the\ndocument object model all right so we\nare actually using the Dom as we speak\nhere now you might ask what's the point\nof this every time we refresh the page\nso if we refresh this page reload it\nwe're not going to have those same\nelements inserted into our document\nanymore and um not sure what I'm doing\nhere okay so HTML I actually need to\ncopy in some stuff\nhere it's because I didn't save the\nactual code pen but whatever the case\nthat content at the bottom is going to\nbe temporary and you might ask well\nwhat's the point of inserting stuff with\nJavaScript and the answer to that is for\nuser experience so when a user creates a\ncalendar event on Google Calendar you'll\nsee a calendar event pop up immediately\non that calendar and that was done via\nJavaScript you know tapping into the Dom\nall right another example is a user adds\na to-do item to their to-do app or a\nuser creates a post on Facebook all of\nthese things are using JavaScript via\nthe Dom so the Dom's API to insert\nelements and modify elements that are\nexisting within the HTML document but\nthey're only temporary and it's because\nwe want a better user experience so we\nwant to immediately change that you know\nweb page and then later we kind of save\nthat to the database and reload it with\nnew data later all right so at this\npoint we have gone through a lot of\ndifferent angles to think about the Dom\nwith but we haven't actually you know\nbuckled down and tried to understand you\nknow how do we actually use the Dom here\nwhat are some of the methods available\nto us um what exactly is the Dom like\nyou know we've been working with the\nwindow object and the document object\nbut there's so much more more to it we\ncan also work with individual elements\nand with each element we can do certain\nthings with that just like we talked\nabout with HTML and JavaScript before\nthe purpose of this series is not to\nmake you an expert in any one thing it's\nto take you from zero to launching your\nfirst full stack application and\ndeploying it so we got to cover a lot of\nground so I'm going to walk you through\nan example of using the Dom we're going\nto cover some of the common uh methods\nand um you know properties that we can\nuse within the Dom but we're not going\nto cover everything and quite frankly\nmost developers don't know everything\nabout the Dom it's very complicated and\nthere's a lot of stuff that you will\nnever end up using within your career\nanyways let's get started let's go ahead\nand put some new HTML in our code pen\nall right and this one says welcome to\nmy HTML tutorial click the button below\nto begin and this button what we want to\ndo with this is we want every time we\nclick it we want to add a new paragraph\nelement to the bottom of this page so\nhow do we do that well it's three steps\nnumber one we have to find a way to\nidentify the button element so that we\ncan start working with it number two we\nhave to register a click event on this\nbutton which is part of the Dom it's\npart of the Dom API and then number\nthree we need to write a function that\nwill insert a new paragraph element in\nthe web page every time we click it so\nlet's take a look at our button here we\nhave a global attribute called ID every\nHTML element is um able to have this ID\nattribute and we also have a global\nattribute called class every HTML\nelement is El eligible to have a class\non it so we have multiple ways to\nidentify this button so let me take you\nthrough a couple of those ways to better\nexplain some of the methods we have on\nthe Dom here's the first way we can do\nit and this is probably the most generic\nwe can say document. query selector and\nthen we can just type in button because\nthis is going to be um button is going\nto represent the tag that we're looking\nfor so what this is going to do um right\nnow is it's going to look for any button\non the entire page here including um\ncode Pen's you know interface and the\nreason is we don't have the right\ncontext text so let's go down to code\npen again and try this again so we're\ngoing to select button and what this is\ngoing to do is it's going to look\nthrough the HTML document that we're\nworking with and it's going to find the\nfirst occurrence of a button tag and if\nit doesn't find it it's just going to\nreturn null now the question is how did\nI know to use this document. query\nselector all right the reason I knew\nthat is because if you go to the\ndocumentation\nyou go to\napisd then you go down to Dom and you\nfind that document object so this is\nthat document object that we talked\nabout it represents the HTML document\nitself this has certain properties and\nit has certain methods that are\navailable for us to use so if we scroll\ndown all the way to the methods you will\nsee a couple of different query methods\num so we have query command enabled you\nwon't use that much um couple others but\nyou can see query selector it's actually\nlisted twice I'm not sure if that's\nmeant to do not meant to be that way um\nI don't think it is actually but we can\ngo to query selector and this will tell\nus basically how to use it so we can put\nin selectors it says uh a Dom string\ncontaining one or more selectors to\nmatch the string must be valid um CSS\nselector string so we don't know a whole\nlot about CSS quite yet but basically\nwhat that means is if we pass in um to\nthis query selector if we pass in\nsomething with a hashtag at the\nbeginning that represents an ID so if\nyou remember we've got this ID equal to\nbtm-1 so if we put the hashtag and type\nBT BTN D1 we should be able to find this\nelement again of course we got to go\nback to the code pen uh context it's\nvery annoying um that I have to do that\nbut um I promise it'll get a little bit\neasier in the future so we'll go BTN D1\nand we can find that element that way\nnow we can also use a class selector\nwhich is a period all right so you can\nsee our class is my- BTN so if we do\nperiod my- BTN we should be able to find\nthe same button that way as well and\nthese are just more specific ways to\nfind a single element with within the\nDom now of course as with anything in\nprogramming there's lots of ways to\nsolve the same problem and if we go back\nto this documentation let's go back to\nthe main document object and if we look\nat some of the methods here we've got\nthese query selectors which are kind of\ngeneric query selectors that I basically\nit's all I use to find elements within\nthe HTML document but you can also get\nan element by ID all right so that's\nanother way to Lo at an element so if we\nwere to replace this so we say get\nelement by ID and then this time all we\nhave to do is pass in the ID you don't\neven need a hashtag at the end oh I\nmessed this up here all right let's try\nthat again so get element by ID and\nbutton one and we should be able to find\nthat button once again by using a\ndifferent method so as you can see\nthere's many ways to skin a cat here\nhere and um with the document object\nmodel you can get very creative with\nyour code now the reason that um\nselecting it by an ID is the most\nspecific way to do it and probably the\nbest way to do this is because you\ncannot have two elements with the same\nID so if I tried to copy this button\ndown here and it's got the same exact ID\nas the other button it's going to have a\nconflict so this is not really valid\nHTML it'll still render but it will\ncause you problems if you're trying to\nuse any sort of front-end framework or\neven locate things with the Dom so what\nI'm going to do here is paste in all of\nthe different ways we can identify this\none button let me get rid of uh the\nbutton here the second one and then it's\ngoing to kind of refresh put me back in\nthe wrong context so I'm going to go\nback and now if I paste in all of these\ndifferent methods so you can see there's\nquite a lot of different ways to\nidentify this button but these are all\nvalid ways to do it and this only\nexecuted it looks like one of them um\nbut if you were to type each of these in\nindividually it's going to locate at\neach time but obviously there are some\nthat are more specific than others and\nwe always prefer to be as specific as\npossible when identifying elements\nwithin the Dom all right so now that we\nknow how to identify this element let's\ngo ahead and write that in our code so\nso far we haven't used this JavaScript\nsection quite yet but what I'm going to\ndo is I'm going to say\nadd paragraph and we're going to make a\nfunction that's going to be actually\ncalled every time we click that button\nso from here all we have to do is locate\nthe button and assign it to a variable\nso we're going to use one of those\nmethods I just will choose the query\nselector and we're going to pass in the\nID of that button in order to identify\nit all right so this button variable\nshould represent our button and from\nhere we should be able to do something\nwith it every time it is clicked and I'm\nactually going to not put this within\nthe function this will just be in the uh\nGlobal scope of our uh JavaScript\ndocument here I'm going to close out\nthis console so that we have some more\nroom to write just for a second all\nright so now we have this button being\nidentified and then we have a function\nthat's going to add a paragraph all\nright and the last thing that we have to\ndo is we have to add an event listener\nso this is how we do that we just say\nadd event listener and then we specify\nthe event that we're trying to listen to\nand then the function or the call back\nthat we're going to pass in to execute\non that event happening now this is the\nfirst way to register an event on a\nspecific HTML element this is one way to\ndo it another way to do it it is if we\ntake our element button and then we say\nonclick and then we set it equal to add\nparagraph then that's going to also\nregister that event on the button and\nthen a third way we can do it is in the\nHTML itself and this is what we looked\nat previously in this tutorial if we\ncome here to the button and we say\nonclick and then we set that equal to\nadd paragraph and then we actually\nexecute it within those parentheses then\nthat that's going to register that click\nevent as well so there's three different\nways that we can register a click event\nbut in this case I want to do it\ndirectly with JavaScript so we'll go\nahead and go with this one this is a\npretty simple one but you might be\nasking like how do we know that that's a\nevent that's valid and the reason we\nknow that is if we go to the event\nreference within the mdn web docs um\nthis is going to give us all of the\ndifferent events that we have for\nelements on the web all right so not all\nof these are going to work with like say\na button but um a lot of these will just\nwork for various components within a web\npage so here we have Mouse events and\nyou can see the click event and this is\ngoing to um tell us that the event\nhandler property is the onclick which is\nwhat we put in right here so you'll get\nused to un you know you'll basically\npick up on all of the common events um\nwith due time um there's only a few of\nthem that are used on a frequent basis\nand the onclick method is actually one\nof the most common events that you'll\nuse in web programming so at this point\nwe have our event wired up and this add\nparagraph function is going to fire\nevery time we um click the button so\nlet's say the button is working all\nright and if we go ahead and open back\nup that console so rightclick inspect\ngo to the console and we're in the\ncorrect context it looks like and we can\njust say or click the button and it's\ngoing to say the button is working and\nit's going to do it over and over again\nevery time we click it so the goal here\nis to insert a new paragraph element\nevery time we click that button right\nnow it's just console logging some a\nstring to the console but we can also\nconstruct a new element just like we did\nbefore and this time around I'm going to\nshow you a few shortcut Cuts that's\ngoing to make it a little bit easier to\ncreate this paragraph element now we\nwant to have some random uh data to be\nprinted to each new paragraph element so\nI'll just generate a random number um\nwe'll say random num is going to be\nequal to math. floor this is a trick\nthat we learned in a previous lesson and\nwe'll just do between zero and 100\nsomething like that all right and then\nwe're going to say the P content this is\nwhat we want to actually add with within\nthat paragraph element we're going to\ncombine this with the random number\nwe're just going to say the random\nnumber is and then we're going to add\nvia string concatenation that random\nnumber all right so now the P content is\nthe random uh string and let's go ahead\nand just test that out real quick by\nprinting our random string to the\nconsole every time it is clicked all\nright so we will click me and it's going\nto say the random number is eight all\nright so that's done now we need to\nactually create our paragraph element\nthe way that we do that is going to be\num we're going to define a new element\nvariable and we're going to use the\ndocument. create new element Method All\nright so if we go to the mdn docs and we\ngo to Technologies\napis Dom and then we go down to the\ndocument object right\nhere and then we go down to the methods\nall right so we're going down to the\nmethods here in the documentation we\nshould see a create element right here\num so it's not create new element I\ndon't know why I said that here we're\njust going to do create element and then\nwe need to pass in the type of element\nthat we're looking for so if we look at\nthe create element documentation it's\ngoing to say that our tag name is the\nonly required property um or parameter\nof this method so any tag name Works in\nthis case we're going to pass in P for\nthat tag name and now we have a new\nelement assigned to a variable the next\nthing that we'll do is we're just going\nto instead of creating a new text node\nlike we did in that first example we're\njust going to take the new element and\nwe're going to use a property called\ntext content which exists on it and\nwe're going to set that equal to the P\ncontent variable that we created prior\nall right so if we go to the um\ndocumentation here and we go to um let's\nsee the element reference so this is\ngoing to be of type element and then the\ntext content is going to be part of that\nso really the fastest way to do this is\njust type text content um and it's going\nto be part of the node um interface so\nif you remember the Dom tree is just\nconstructed of a bunch of nodes and no\nmatter what type of node we're working\nwith it's always going to have the\nproperties and methods of this node\ninterface so you can see in the\nproperties if we scroll down to text\ncontent you can see that we can actually\nset this to new content uh directly so\nwe'll do that here and now we just need\nto basically add this to the document um\nat the very end so the way that we do\nthat is we come down here at the bottom\nwe say document m. body.\nappend child and then we put in the new\nelement which has our random text\ncontent we'll get rid of this uh\nconsole.log here all right so here's the\nwhole um function that we're dealing\nwith so we have ADD paragraph we get a\nrandom number we Generate random content\nfrom that number we create a paragraph\nelement we assign the random content as\nthe text content of that element and\nthen we append it to the end of the HTML\nbody which is basically going to be\nafter this button all right so let's go\nahead and test this out so we press\nclick me and we're going to get a new\nparagraph element with a random number\nevery time we click it so it's pretty\ncool um like this is where programming\nstarts to get kind of fun is when we\nactually can start building things that\nare interactive and we can click buttons\nand get results so hopefully this um\nbrings you a little bit of excitement\nobviously it's not something useful but\nwe will soon get there in future videos\nas you can see with some of the examples\nwe've gone through there's really only a\nfew um methods and properties that you\nkind of have to remember with the Dom um\nwe got the query selectors so how do we\nidentify the element we want and then\nthe methods where we can create new\nelements and modify both their content\ntheir attributes we haven't talked too\nmuch about that yet um but we can do a\nbunch of stuff with these elements so\nthe next thing we have to talk about is\ngoing to be how do we navigate an HTML\ndocument now I talked about the Dom tree\nand how there's you know siblings and\nparents grandparents child all that kind\nof stuff and that's going to come into\nplay here how do we actually navigate\nthrough a complex HTML document to do\nthis I'm going to copy in a predefined\nHTML document here that you'll see we've\nlooked at this before and we're going to\nbasically figure out how this Dom um all\nthe Dom interfaces actually work here\nwhen I talk about you know Dom nodes and\nyou know elements and how elements kind\nof inherit from a Dom node like what\ndoes that all mean and that's going to\nbecome more apparent when we work\nthrough the navigation of this HTML\ndocument so let's put that um diagram\nback up on the screen where we can see\nthis document right here visualized as a\ntree and from this um this visual you\ncan see that um these list items are\ngoing to be siblings and they're going\nto be Children of the unordered list so\nhow do we select this unordered list and\nthen get all of the children of it with\nJavaScript well this is actually simpler\nthan you might think so we've already\nbeen able to identify um elements from\nthe Dom so we use document. Query select\nctor and then we pass in either a tag or\nan ID or a class name something like\nthat to identify it since we only have\none unordered list in this entire\ndocument we can just put in UL as the\ntag name and that's going to when we\nchange the context\nhere and try it again that's going to\nselect this list right here now let's go\nahead and assign this to a variable so\nthat we have something to work with so\nwe'll say our list is equal to document.\nquery selector and then we're grabbing\nthe actual HTML tag so we press enter\nnow we have a list and that's going to\nbe um showing us the HTML here now\nobviously this is just a visual\nrepresentation of the object um but if\nwe wanted to figure out you know what is\nthis variable representing you know what\ndoes the list variable actually\nrepresent we have a way of doing that if\nyou're ever confused what type variable\nyou're working with you can use this\nhandy property that every node in the\nDom tree has all right so if we say\nlist. node type it's going to return us\na number all right and we wonder what is\nthat number well if we go to the\ndocumentation and we type in uh\nnode. node type so if you were to just\ntype in node type you can find this and\nonce you click on it and scroll down to\nthe constants so these type constants\nthis will tell you what type of element\nyou're working with so in this case we\ngot the value of one and that tells us\nthat we're working with an element node\nand from here we can click element and\nwe can see okay this is the type of um\nnode within the Dom that we're working\nwith and here are the properties and\nmethods that are available to us so if\nwe were to scroll down and look at the\nproperties of the element\nwe see this property called children all\nright so if we click on that it's going\nto say the parent node property children\nis a readon property that returns a live\nHTML collection which contains all of\nthe child elements of the node upon\nwhich it is called all right so let's go\nback to our um document here and we'll\nsay\nlist. and you can see that we're getting\nreturned this HTML collection now from\nhere HTML collection is of course\nanother thing that we don't understand\nbut we can once again go back to the\ndocumentation and click on HTML\ncollection to see what we're dealing\nwith and from here we can once again go\nover to the methods and properties and\nthere's this one method called item on\nthe HTML collection which is going to\nreturn us the element at a specific\nindex of that HTML collection so\nbasically like an array that we've\nworked with in JavaScript before but\nit's not quite an array you can't just\num come over here and pass in Brackets\nand put in a zero or a one um at least I\ndon't think maybe you can\num I'm not sure okay maybe you actually\ncan do that but um if we put in list.\nchildren. item and we select one this is\ngoing to select the second item of the\nlist so this is the way that I've always\num done it in the way that the\ndocumentation kind of presents it but it\nlooks like um at least in the browser\nI'm working in the bracket notation\nworks as well from here though we can\nidentify specific elements within our\nlist and then we can set those equal to\nvariables just like we did the list\nitself so if we come over to the left\nand we say um list item is equal to the\nsecond one in the list and we press\nenter now we have that that entire HTML\nelement stored in a variable and we can\nuse um different properties on it to\nmodify it so if we came over here and we\nsaid list item which is representing\nthat second item and we said text\ncontent all right this is list item\nnumber two but we can set it equal to\nsome new content all right so we did\nthis already but watch what happens in\nthe HTML document when I press enter it\nchanges the content so this is just kind\nof kind of showing you how you can you\nknow look at the whole Dom tree and you\ncan say okay here's the parent and then\nI can get children and then I can select\none of the child elements of that you\nknow set of children and then from there\nI have a standalone HTML element that I\ncan do all sorts of things with I can\nset event listeners on it I can change\nthe text content and I can do all sorts\nof other things that are defined by the\ndocumentation that I'm working with now\nonce again maybe we don't know what this\nlist item\num represents what is the node type of\nit well all we have to do is say node\ntype and we get the answer of one once\nagain which means it is an element and\nfrom there we just go to the\ndocumentation we can just go back up\nhere and just search element and then\nfrom here we have all the properties all\nof the methods all of the event\nlisteners that are available to this\nspecific element that we have stored in\nthe variable all right the next thing I\nwant to do is I want to dig a little bit\ndeep into this concept of nodes so I've\nbeen beating around the bush here a\nlittle bit um talking about how\neverything in the Dom tree is considered\na node but we've also been looking at\nelements and HTML Collections and stuff\nlike that and it can get very confusing\nlike all of these different interfaces\nwhat's going on here like these are all\ndifferent data types they all have\ndifferent properties and methods how do\nI know where to look what has what\navailable to it so on and so forth well\nbefore I get into into this this is a\nobject-oriented programming concept and\nthat's not something that we've covered\nyet um we may cover it in future videos\num but this gets into things like\nclasses and inheritance and um class\nmethods and static methods and all that\nkind of stuff and the thing that I want\nyou to recognize right now is that we\nhave all these different interfaces\ndefined by the Dom all right so at the\nvery top we have this thing called a\nnode so let's go back to to the\nnode and what I want you to remember is\nthat everything in the Dom inherits from\nthis node interface so everything below\nit so an element um or an HTML element\ninterface these all inherit up to this\nnode interface which basically means\nthese elements have all of their own\nproperties and methods but they also\nhave access to this you know master node\nuh interface as well so if we were to go\nlook at some of the things we have\navailable on this node um you can see\nthis aen child method that we've been\nusing quite frequently and let's see if\nwe can find a couple other ones um it\nlooks like that might be the only\none um that we've been using but we also\nhave text content so we've been using\nthat to modify the um text within an\nHTML element and we have node type we've\nused that one before um let's see what\nelse uh it looks like that's pretty much\nit but you can see that this node has a\nbunch of properties and methods that are\navailable to anything below it so in\nother words if we come back to our um\ndocument here our HTML document and we\nknow that we have this unordered list\nstored in the variable called list all\nright and we know that list if we say\nlist. node type is is of type element\nwhich inherits from that you know uh\nnode interface that basically defines\nevery element from here all we have to\ndo is we say list. appen child and\nthat's going to be a valid method\nbecause it's part of the node interface\nas we just saw and from here we can\ninsert an HTML element and actually add\nit to the end of this list but first we\nhave to actually create that element and\nthis will be a good opportunity um to\nshow another method that we've already\nseen but didn't really dig into yet so\nwhat I'm going to do here is I'm going\nto take\nlist.\nappend child and I'm going to say\ndocument. new um or no create element\nand we're going to make it a list item\nand this is going to be completely empty\nno content within it and you can see\nthat we have a new list item showing up\nat the end of this list and all we have\nto do now is we say\nlist. and we select the final element um\nor no we have to say item and then we\nselect the final element and then we say\ntext content and we can put in some\ncontent here and now we have added a new\nitem to the end of the list and modified\nit so you can see how we can start\nparsing through and navigating through\nthis hierarchy um pretty easily once we\nget the hang of\nnow what I want to introduce is\nsomething a little bit tricky and this\nis where we really have to think when\nwe're um navigating through the Dom\nbecause in this HTML document you can\nsee that we have two P elements that\ndon't have an ID and they don't have a\nclass and that basically means we have\nno way of identifying these in an easy\nspecific way so the first way that we\ncan you know think about identifying um\none of these elements is by the query\nselector method and what we're going to\ntry to do here is basically insert\nanother element between these two\nparagraph tags and if you go to the\ndocumentation um and you go to the I\nbelieve it's the\nnode let's see yeah so the node\ninterface has this method called insert\nbefore and what that does is it\nbasically inserts a HTML node or element\num that inherits from node node um\nbefore a specific reference element so\nbasically in our case we're going to use\nthis method and we're going to have to\nfigure out how do we identify this\nsecond P tag right here now the way that\nwe would think about doing this is we\nsay document. query selector and then we\ngrab anything that has a P tag all right\nand in this case when we press enter\nwe're going to get the wrong one because\nthe query selector method only gets the\nfirst occurrence\nnow what we can do is we can change this\nto query selector all and what this is\ngoing to return us is a node list so\nunlike an HTML collection which we got\nwhen we looked at the children of that\nunordered list now we have just a node\nlist which is a slightly different data\ntype if we didn't know what this meant\nwe can just go back to the\ndocumentation we can type in node\nlist and let's see what this does all\nright so node list objects are\ncollection of nodes usually returned by\nproperties such as node. child nodes and\nmethods such as document. query selector\nall which is what we used and let's look\nat a few more things we have some\nproperties we have the length of it and\nthen we have methods so we have this\nmethod called item similar to HTML\ncollection where we can select something\nwith an index so we can go ahead and do\nthat and we can actually just chain it\nto the end of this so we'll say item and\nthen maybe we'll pass in item number one\nand that's going to get the first index\nso remember it's zero index so the first\nP element will be zero then the next one\nwill be one so now we have selected the\nsecond element and what we want to do is\nwe want to assign that to a variable so\nwe'll\nsay uh P element is equal to that and\nnow we want to use the P element um\nlet's first say uh node type and we're\ngoing to get a type of one which means\nit's an element type and we know that\nelement is kind of like a a child or um\nit inherits from that node type which is\nthe base class so we're getting the node\ntype and so we know that the P element\nor P LM is going to have this insert\nbefore me meth so let's go ahead and\nlearn how do we use that so if we go\nback um to what we were looking at\npreviously so we've got node. insert\nbefore now let's look at the syntax we\nlearned about this in Prior lessons how\nto read this documentation and what\nwe're seeing here is that we have um the\nparent node right here is going to be\nthe parent of the newly inserted node so\nwe have to ask ourself what is the\nparent to the node that we're trying to\ninsert let's go back to our uh HTML\ndocument and maybe we can even pop up\nthe diagram on the screen and see that\nwhat is the parent to an element that we\ninsert between these two paragraph tags\nin other words what is the parent of one\nof these paragraph tags well the answer\nis going to be the mainbody div all\nright so we need to pass in a reference\nto this main body div as that first um\nparent node right here so we know that\nwe have to select that and then we have\nto put in a new node which is going to\nrepresent a new element that we create\nand then finally a reference node so the\nreference node as we can see down here\nis going to be the the node or the\nelement that our new one is going to be\ninserted before um or we're going to\ninsert it before this element all right\nso if this is null then the new node is\ninserted at the end but we don't care\nabout that because it's not so let's go\nback and the first thing that we need to\ndo is identify that parent so we'll say\nparent is equal to document. query\nselector and then this time since we\nhave a class to select it by we're going\nto select it with the class\nnotation so we have parent we'll just\ncheck that that we're getting the right\none and now we just have to say parent.\ninsert before all right and then we have\nto make a new node so the new node is is\ngoing to be a p element so let's go\nahead and create that real quick so or\nactually no\nwe yeah we need to create a new element\nso new P tag is going to be document.\ncreate um element of type P and then\nwe're going to assign some text\ncontent we'll say programmatically added\nbetween all right so now we have our new\nelement and finally we're going to take\nthe parent we're going to insert before\nwe're going to pass in the um new\nelement that we're putting there and\nthen we're going to um reference the\nelement that we want to insert it before\nso that would be\nP LM all right so we did that up there\nbefore so let's see if this works and\nyou can see that we have program\nprogrammatically added this paragraph\ntag between these two paragraph tags\nright here so this was a little bit of a\ntricky example and we kind of ventured\nout into a method that we definitely had\nto read the documentation for before we\nknew how to use it but this just goes to\nshow how we can kind of navigate around\nthe Dom by visualizing it as a tree and\nreally understanding what's the parent\nwhat's the child what's the sibling and\nyou know what is the interface that I'm\nworking with within the Dom all right if\nyou are still watching this video um\nthat's awesome um most people are not\ngoing to make it through this kind of\nconversation about the document object\nmodel but I will say that if you're at\nthis point and you're very confused that\nis totally okay the purpose of this\nvideo and this crash course um\nespecially this section about the\ndocument object model is not to make you\nan expert at it the purpose is to expose\nyou to what it is what are some of the\nthings we can do with it and just get\nyou\num started and thinking independently of\nokay if I don't know something how do I\ngo figure it out you know we went\nthrough a bunch of examples where I\ndidn't necessarily know how to use these\ndifferent methods or I didn't know what\ntype of data we're working with but you\ngo to the documentation you search for\nit and you figure it out so if you're\nconfused that's totally okay keep moving\nforward we're not going to actually be\nusing the Dom all that much throughout\nthe rest of the series but as I said in\nthe beginning it's super important that\nyou understand what it is because it is\nat the root of every frontend framework\nthat you're going to work with you know\nif you start working in react you're\ngoing to hear something called the\nvirtual Dom and if you don't know what\nthe real Dom is it's going to be very\nhard to understand what the virtual Dom\nis and furthermore if you're working\nwith like angular or vew vue.js you know\nthese all connect in with this Dom API\nto um basically expose their own API so\nyou're G to you know have some easier\nways of working with this HTML once we\nget into um frontend Frameworks but\nunderneath the surface those Frameworks\nare just connecting in with the same API\nthat we just used in this video so to do\na huge recap of HTML I think of it in\ntwo different parts first is going to be\nthe static HTML and that's going to be\njust the HTML like the stuff you see on\nthe page here this is static HTML and no\nmatter what you do it's not going to\nchange all right now the next part is\ndynamic HTML and that is what we see\nwhen we start working with the Dom and\nwe start manipulating and adding\nremoving changing modifying those kind\nof things with the existing static HTML\nso there are two different parts the\nfirst one's pretty simple and I think\nyou probably caught um you know how to\nuse it pretty easily but the second one\nis very um confusing and even once you\nwork with this for years it's still\ngoing to be something that you're\nlearning over and over and over again\nand perfecting along the way but what I\nreally want you to take away is that we\ncan model an HTML document in a\npredictable way and then we can write a\nspecification called the document object\nmodel and allow JavaScript to connect in\nwith that API to actually modify the\nstatic HTML now the very last thing\nbefore we get into to our lesson um code\nchallenge is going to be semantic HTML\nand I'm not going to spend a whole lot\nof time here but when we first went\nthrough it at the beginning of this uh\ncrash course we were talking about the\nmost simple elements possible so we've\ngot divs we've got paragraph tags images\num inputs list all of those kind of\nthings with the new HTML 5 spec the um\nthe new thinking on HTML is that you\nknow consistent with the concept that we\nwant to use it for structure um we also\nwant to use it for intent so what do we\nintend to use these different elements\nfor are we trying to section off a part\nof the web page are we trying to make a\nnav bar are we trying to make a footer\nyou know normally you would just put all\nof this into uh div um elements so you\ncan make a header and a navbar and a you\nknow blog section and a sidebar and a\nfooter you can make all of those things\nwith just divs but in the new HTML 5\nspec it's you know you're basically\nsupposed to plug into some of the new\ntags that they have available and in\nthis case instead of using divs for all\nof these different um features of your\nweb page you should be using a nav bar\num so the nav uh tag and for your\nsection so like the blog section that\nshould use a section tag as well as as\nthe um the sidebar and stuff like that\nand then you have this tag called main\nwhich represents the main content of the\npage and then you have an article tag\nwhich might represent a single blog post\nand then finally you have a footer tag\nwhich obviously represents the footer so\nall of these give more semantic uh more\nmeaning to the intent of how you're\ntrying to use your HTML and it's not\nsuper important for you starting out but\nI wants you to understand um that it is\nout there and when you see other people\nwriting HTML and people that are really\npaying attention to best practices\nyou'll see those different elements pop\nup but remember you can always look at\nthe documentation if you ever have a\nquestion about a certain type of HTML\ntag go to the documentation and type it\ninto the search bar and read about it\nthat's the only way and the best way to\nlearn as you're reading through other\npeople's code all right this has been a\npretty long um HTML crash course but\nunlike some like shorter crash courses I\nreally wanted to um walk you through my\nline of thinking and help you be more\nindependent when thinking about HTML in\nthe document object model so hopefully\nthis was um informative and now I have a\nchallenge for you that's going to really\nuh test you this is a tough one but um\nI'll go ahead and solve it with you on\nvideo after you've tried it yourself and\nhopefully by doing so you're going to\nlearn a lot about you know how do we\nreason through some of these different\nuh Concepts and how do we take our\nstatic HTML and make it Dynamic and\nbring something to life so what you see\non the screen I showed it to you before\nbut this is what we're going to create\nwhere we basically have a random\ngenerator for memes and jokes and random\nquotes and then riddles so we can reveal\nthe answer and this will be a really\ncool project that I think you'll be\nexcited to share with your network and\num be sure to tag me on Twitter with it\num 100 days of code uh is the hashtag\nthat you want to use but I'm really\nexcited to dive into this so in the next\nvideo we're going to be solving it but I\nI recommend that you first try it on\nyour own and see how far you can get so\nthe link to the code pen starter pack is\nin the description and what you're going\nto be working with is basically\nuh this right here so let me go back to\nthe\nstarter portion all right so we have\nsome code already written for you so\nI've already put some buttons in here\nand I've already linked up some of the\nevents um that are going to be called\nand then I've uh made some template\nfunctions for you that are going to\ncorrespond to those click events and\nthen finally I have all this random data\ndown here so bunch of random quotes and\nuh meme URLs and stuff like that and\nthen then I have a helper function uh\ncalled get random data where in each of\nthe methods that you're going to\nimplement yourself it's already grabbing\na random piece of data that you just\nneed to figure out how to put into the\nHTML document and display it in the\nright spot once again I'm leaving a link\ninto the in the description so you can\ngo through and see like what are the\nuser stories so user stories are\nbasically like what should a user be\nable to do when they're looking at this\napplication and so I've got those\nwritten out I also have a few hints to\nhelp you out um just point you in the\nright direction on this and then once\nyou've tried it watch the next video of\nthis series and we will solve it\ntogether welcome to the lesson 7 code\nChallenge and this is going to be\nbasically an HTML plus JavaScript\nchallenge where we're going to use the\nDom to basically Loop in our JavaScript\ninto our HTML and bring it live into a\ndynamic uh web page that's going to\nbasically Generate random memes jokes\nquotes and riddles so if you haven't\nseen this before just you can click\nthese buttons on the right and it should\ngenerate something random every time we\nclick it and we can do jokes and quotes\nand riddles and um you have to reveal\nthe riddle answer uh by clicking this\nbutton right here so this is going to be\na really cool challenge you can\nobviously see that there are some Styles\nalready applied to it and since we\nhaven't covered CSS yet in this uh full\nstack road map series um that's going to\nbe the next lesson I've done this for\nyou so I've already wired up all the CSS\nStyles and all you have to do is write\nthe HTML and the JavaScript um to make\nthis thing come to life so let's go\nahead and take a look at some of the\nuser stories so this is from the blog\npost that I uh wrote here for this\nlesson and just as a recap a user story\nis something that we use quite often in\nprogramming to come up with requirements\na good example of a common user story is\nevery time a user enters his email um\nand password and clicks log in it the\nuser should be you know dropped into\ntheir homepage within the app you know\nthat's a basic user story that just says\nokay when the user does this this\nhappens and we have some user stories\ndefined for this code challenge um the\nfirst one is a user should be able to\nclick buttons on the right side of the\nscreen to Generate random memes jokes\nquotes or riddles so as we saw we can\nclick these buttons and get something\nrandom um obviously going in the correct\nlocation only one piece of content so\nthis is the second one only one piece of\ncontent should show at a time so for\nexample if the user clicks show a meme\nand there's a quote already showing the\napplication should remove the quote and\nshow a random meme so as you see every\ntime I click a new button this content\nright here is going to disappear and\nit's going to replace it with nothing\nand then generate a different type of\ncontent so right now we have a riddle if\nwe replace it with a joke that goes away\ndown here and our joke shows up up here\nso that's another\nrequirement um The Third One content\nshould be displayed under the\nappropriate heading so in other words if\nI click tell me a joke the joke needs to\nshow up under tell me something funny\nrather than I want a riddle or something\nlike that and then when showing a random\nriddle the answer should never be\nrevealed um before the user explicitly\nclicks to reveal the answer so when I\nclick riddle you're going to see that I\nget the riddle but I don't get the\nanswer and I have to click this reveal\nriddle answer in order to get the answer\nitself the next one is if a user clicks\nreveal riddle answer and there is no\nRiddle an alert should show letting them\nknow so in other words um there's no\nRiddle populated down here and if I\nclick reveal riddle answer I get an\nalert up here at the top of the screen\nsaying there's no Riddle for to show an\nanswer for and then likewise if a user\nclicks reveal riddle answer and the\nanswer is already revealed an alert\nshould let them know that it's already\nthere\nso let's go to a riddle let's reveal it\nand then let's click this again and the\nriddle um is going to say or it's going\nto say the riddle answer is already\nexposed all right so those are the\nrequirements and of course I gave some\nhints here um the div element within uh\nwith a unique ID or class name can be a\ngreat way to establish a container for\nfuture content so I'll show you how that\nworks um we also need to use the HTML\nelement. hidden property so that has to\ndo with hiding and showing that riddle\nanswer um it says there's no perfect\nsolution there's obviously a 100\nsolutions to this and then we got some\nstarter code all right so here is the\nstarter code that we're working with and\nwe have to basically take this which\nonly has some buttons that don't do\nanything yet and we have to turn it into\nthis a working content generator so as\nwe solve this I'm going to try to walk\nyou through my thought process a little\nbit but I'm not going to spend uh in\noverly detailed amount of time on each\nof the components like the main purpose\nof this is to give you the solution um\nnot to basically build an entire app and\nthink through every last detail of it so\nlet's go to our\nstarter and we'll keep this one up so\nthat we have a template to look at of\nwhat we're trying to do um and then from\nthis starter let's go ahead and get\nacquainted with what is here already so\nwe'll start in the HTML section you can\nsee in this HTML section we have let's\nzoom out just a little bit we have um\nsome instructions so uh notice how we've\nuse semantic HTML here so at the end of\nthe previous video we talked about\nsemantic HTML how HTML should show\nintent and what we've done here is we've\ncreated uh a main tag which is going to\nsay here's the main content area and\nthen we have uh one section which is\ngoing to be the content this is the\nempty uh area right here and then we\nhave another section called sidebar\nwhich is where all the actions are okay\nso that's what we mean by semantic\nHTML um and it looks like everything has\nbeen implemented for us so we have our\nactions our buttons and our buttons are\nconnected up to click events um that are\ndown in the JavaScript section so our\ncontent what we're going to do is add it\nright here in the section with a class\ncalled content all right so then of\ncourse we have CSS this is just styling\nthe whole web page for us but this is\nnot required since we haven't really\ntalked about how to use CSS yet so this\nshould just automatically work for us\nand there's no action required by us uh\nin that and then finally we have\nJavaScript all right so this one's where\nwhere some of the tricky part is going\nto come in where we're going to be\nworking with the document object model\nas you can see we have some templated\nfunctions and we have our to-do items so\nwith each of these functions we need to\nshow a random you know piece of content\nin the correct location and never show\nmore than one at a time so similar to\nour um user stories this is just\nreiterating that so we have a show meme\nfunction which is going to be connected\nup if we look at our HTML\nit's connected up with this show meme\nbutton all right so if we were to um go\ndown here at the bottom of this function\nand just\nconsole.log um is\nworking all right so we've got that\nconnected up and now we just click show\nMeme and if we open up the console so\ndown at the bottom left and we see is\nworking we know that this has been wired\nup correctly so lucky for us we've got\nthis wired up already no work to be done\nthere all right so we've got a show meme\nthen we have show joke which is um wired\nup to this button and then that does the\nsame thing for quote and riddle for the\nnext two buttons and then finally the\nreveal answers function is going to be\nwired up to this reveal riddle answer\nbutton all right and obviously this is\nstyled a little bit differently but it's\nstill a button uh HTML tag and then at\nthe bottom um you can see a bunch of\ncode that I wrote uh already for you\nwhich is just a bunch of content that we\ncan use for randomly generated content\nand then it has a couple of helper\nmethods so it has a data object it gets\na random number and then it uses those\ntwo things um in this method right here\nto get random data so basically what we\ndo is we pass in um we have a parameter\ncalled type and if we pass in memes\nwe'll get a random Meme and if we pass\nin riddles we'll get a random riddle and\nyou can see that I've already hooked\nthat up to these uh functions that are\nwired up to the buttons so as you can\nsee we have for the meme one we have\nalready assigned a variable to this\nrandom meme URL and if we were to just\nconsole.log what we're getting\nhere and then we press show a meme um\nhold on so show a meme let's go to the\nconsole and you'll see that we get a\nlink to an image which is going to\nrepresent the meme all right so that's\nthe overview of what we're working with\nall we have to do is write some HTML and\nthen finish these functions that have\nalready been templated out for us I\nthink the first thing that we'll do is\nprobably the easiest so in our template\nyou can see that we have the these uh\nheadings here so this output looks like\nan H2 heading um and these ones down\nhere look like maybe H3 headings or\nsomething like that so let's go ahead\nand um put those in there so where it\nsays your HTML code goes here let's make\nan H2 so all you have to do in code pen\nit's pretty easy is type the um uh type\nthe tag that you want to make and then\npress Tab and it creates that element\nfor you so we'll go ahead and type\noutput and see what we\nget looks like we're getting the correct\nelement there and now we have to go to\nthe headings so we want in the next one\nwe want uh an H3 and we want programmer\nmemes so far so good we're looking\nokay um tell me something funny so this\nwill be jokes so another trick you can\nuse in code pen and also Visual Studio\ncode once we start working with it um if\nyou go to the end of a line and press\ncontrl C and then press contrl V you'll\nget the same line um copied down so\nlet's do that uh one more time and then\nreplace the text within it so give me\nsome wisdom and I want a\nriddle actually we need one more uh so\nwe've got programmer memes oh we missed\nthe tell me something funny so let's do\ndo that real\nquick all right so we've got our output\nand all of our sections defined now if\nyou remember in the user or in the hints\num if we go back here and look at the\nhints it says the div element with a\nunique ID or class name can be a great\nway to establish a container for future\ncontent so what I mean by that is if we\ngo here and we look at these headings we\nobviously have to insert some sort of\nHTML element probably a paragraph tag\nafter each of these now how do we you\nknow how do we know where to put it like\nhow do we select each of these headings\nand have a container to put it after\nthem well something that I think is\nsmart to do is create a div element\nwhich is going to act as that container\nfor all of our future paragraph tags\nwhich will have or paragraph or image\ntags which will have the content itself\nso let's see what we're going to do here\nso I think what we want to do is after\neach of these headings instead of trying\nto um dynamically figure out where to\nput these different pieces of content\nlet's be explicit about it so let's make\na div um so we'll type div and we want\nto give it a class or an ID because we\nwant to be able to\nidentify um this individual div as the\ncontainer that we want to to put the\ncontent in so for this one let's just\ngive it a class and we'll call it meme\ncontent all right so we'll enter down\nand basically what we want to accomplish\nwith the\nJavaScript is we want to identify this\ndiv and then we want to insert our\ncontent within that container that's\nalready sitting there ready in waiting\nfor us now we could programmatically\ngenerate a div like this but it just\nwould be a lot of extra work unnecessary\nwork and it would require a lot more\ncode so let's do this with all of the\ndifferent sections so we'll go down\nhere and now let's just replace these\nclasses because we want unique\nidentifiers for our JavaScript to\nbasically be able to query so this one\nwill be uh jokes content or joke content\nwe'll stay consistent here and then\nquote content and finally riddle content\nall right so these should be able to be\nselected by JavaScript very easily all\nwe would need to do um let me save this\nreal quick all we need to do is open up\nthe console uh let me see if I can get\nthis all right so the console looks like\nwe're in the right JavaScript context\nand all we need to do is document. query\nselector and then since we have classes\nhere here as the attribute we need to\nuse the class selection syntax which is\nthe dot preceding the name of the class\nso if we wanted to select this container\nright here called meme content we can\njust type in meme content and we should\nget that div all right so from there all\nwe have to do if we want to insert\nsomething in it is we save it in a\nvariable so we'll maybe say a\ncontainer and then from there we say\ncontainer. append child and then this is\nwhere we pass in our generated HTML\nelement so in this case let's just go\nahead and create something um for that\nthis is just practice to understand how\nwe're solving this problem we're not\nactually doing anything yet so we'll say\nnew element is equal to\ndocument.createelement and then maybe we\nwant to put in um let's let's go ahead\nand practice this with the meme\ncontainer so we need to put in an image\nso to do that we type in image tag all\nright so we're going to create that\nelement and then we're going to use\nsomething called the set attribute\nproperty all right so um in order to\ncreate an image element we know how to\ndo that so let's go ahead and practice\nthat here if we say image it's going to\ngive us um a source attribute and an ALT\nattribute we're going to ignore this alt\nattribute CU it's not like totally\nnecessary and then then from here we can\npass in a URL to an image and that will\ndisplay it um within the browser here so\nlet's just go ahead and go down to our\ndata here and we've got this array of\nmemes so let's just grab one of the URLs\njust to test it for a second and paste\nthat into the source attribute of our\nimage and you can see that our image is\ncoming in there nicely and I've actually\nwritten some CSS if you were to look in\nthe CSS portion I've actually selected\nall images here and I've said that the\nmax width is going to be 350 pixels so\nit's already going to come in nicely for\nyou you don't have to worry about doing\nthat so this is basically what we want\nto insert into that um specific\nprogrammer memes area and if we wanted\nto do that we've already got our new\nimage element and all we have to do here\nis say new\nelement. set attribute all right so if\nwe were to if we didn't know anything\nabout this this is how we'd figure it\nout so first we say new\nelement. uh node\ntype so we talked about this in the\nprior video looks like we lost the\ncontext so we have to go back to the\ncode pen context let's see if that still\nhas this okay we got to redefine this\nreal quick\nso first let's select the container so\nwe just got to redo this cuz it lost the\ncontext that we were working in so now\nwe have the container which is the meme\ncontent and then we have to create the\nnew element all right so we created an\nimage and now we just say new element.\nnode type and it's going to return us\none now in the mdn\ndocumentation let's go to the mdn\ndocumentation real quick and let's type\nin node type this is a method we learned\nabout prior um in Prior videos and you\ncan see in the node constant or the node\ntype constants a value of one represents\nan element so let's click on that\nelement and then we come down and we can\nsee that within the element there are\nmethods and one of those should be if\nI'm remembering this correctly is set\nattribute so if we click on set\nattribute it says that we give it the\nname of the attribute we're wanting to\nset and then the value we want to set so\nin this case if we were trying to um set\nthe source attribute of an image we just\nhave to say new element. set attribute\nsource is the name of the attribute\nwe're setting and then you know maybe\nwe'll paste in that link that we had\nearlier so that will be the value of the\nsource so we press enter and now what we\ncan do is basically take this new\nelement that we have um and we take the\ncontainer and we append append child we\nuse the append child method to pass in\nthat new element and boom we have a new\nimage showing up in that section that we\nwant it to show up in so like I said we\nhaven't actually done anything this is\njust practicing and figuring out um in\nthe live console like okay how do we\nactually reason through this what\nmethods are we going to use all that\nkind of stuff now we should be able to\ngo down into the JavaScript and\nImplement some of these functions to do\nexactly this all right so let's close\nthis out here we don't need this for for\na little bit um and then let's let's\nrefresh the page because we want a a\nclean slate here um it looks like\nactually not sure why this is still\nthere um let's\nsee oh that's right because we had put\nthis in here already okay let's get rid\nof that we don't want anything to start\noff we want this to be empty and now\nlet's come down to our templated methods\nand in this case we want to show a meme\nright now when we click the button and\nwe open up the console it's going to\nprint a random meme URL and we know that\nthis URL should be set equal to the\nsource attribute of an image tag or\nimage HTML element so we also know how\nto create that so let's go ahead and\nstart writing this method the first\nthing we need to do is grab the\ncontainer that we want to put it in so\nwe will say container will be equal to\ndocument. query selector and then we\nneed to pass in meme content all right\nso we should have the container selected\nyou could obviously test that if you\nwanted to um I think if we just pass it\ninto\nconsole.log should be able to do\nthat and show a meme and we get the\ncontainer so we're doing good so far\nfrom here we need to say New Image is\ngoing to be equal to document.\ncreate\num is it create element or new element I\ncan't\nremember okay so it is create element\nand we want an image element now we just\nneed to set the attribute so we want to\nset the source attribute and what do we\nwant to set that equal to well we want\nto set it equal to a URL and we happen\nto have that already so we just drop in\nthe r random meme URL and that should\nset the attribute for us and then\nfinally we come down here at the bottom\nand we say container. append child and\nwe pass in our new image okay so let's\ngo ahead and save our our pen here and\nwhen we click this show meme we should\nget an image populating in the right\nsection\nand we do all right so if we click it\nagain it should put another image in\nthere um after this and it does and then\nanother\none and we could keep going with that\nbut obviously the instructions one of\nthe user stories is saying if there's\nalready something there delete it and\nreplace it with the new one so we have\nto figure out how to do that and a good\nway to do that is by using an if\nstatement so if we come down to our\nmethod here of show meme um we need to\nask before we uh insert that into the\nContainer we need to say if the um if\nthere's an existing image there so how\ndo we do\nthat one way that I can think of um is\nif we\ntake um is we'll just say set a variable\nis image equal to container. query\nselector and then we'll look for an\nimage so basically what this is doing is\nit's saying this container which\nrepresents this div right here if we\ngrab that container and within it we\nlook for an image element and if we find\nsomething then this value is image is\ngoing to represent the actual HTML\nelement if we don't find anything then\nit's going to return null so we're going\nto get nothing so basically what what we\nhave to do is we say if is image so if\nthat's a truthy value um which should it\nshould be truthy as long as it comes\nback with an image then we need to clear\nthe contents of this container so a way\nthat we can do that is by using the\ninner HTML property and if we go to the\nmdn documentation I believe this exists\non the Node uh interface so let's take a\nlook\nuh looks like it's not here so let's\nsearch for that so inner\nHTML okay so it's on element so on each\nHTML element there is this property\ncalled in HTML and it says the element\nproperty in HTML gets or sets the HTML\nmarkup contained within the element so a\nquick trick um this is something that I\njust have learned over time you wouldn't\nnecessarily know it from this\ndocumentation\nis you can pass in an empty string to\nthis property to clear all the HTML from\na specific container so if there's an\nimage already there we're going to say\nthe containers inner HTML is equal to an\nempty string okay so basically what\nwe're going to do is every time we click\nthis button we're going to generate a\nrandom meme URL then we're going to\ncreate a new image we're going to check\nif there's an existing image and if so\nclear it and then we're going to insert\nthe new image so basically this is\nanother way of saying let's replace\nwhatever's there so let's try it out so\nwe got our first image here and if we\nclick this\nagain it should replace it excellent so\nwe are replacing it correctly we've got\nthis in the right spot and for the rest\nof the methods we pretty much should be\nable to implement the same type of logic\num and implement it for all the rest of\nthe buttons so let's get rid of this\nto-do because we have done it we have\nimplemented that\ncorrectly um now one thing I want to do\nbefore we um get any further is\nimplement this clear all method now the\nreason I want to do this is because it's\nbasically um since we see that we have\nbuttons that kind of do the same thing\nwe don't really need to write this logic\nright here um every single time all we\nneed to do is we need to write one\nmethod that looks at all of the\ncontainers here and it clears all of the\ncontainers before we replace it with new\ncontent so in order to do that let's go\nahead and take some of this code here so\nwe'll take that out of there and put it\nin the clear all so let's rename this\nvariable and we'll say meme all right\nand let's go ahead and grab this\ncontainer so actually this is not valid\ncode we need to type document. query\nselector and we need to grab the meme\ncontent\ncontainer so we'll say meme container is\nequal to that and this should\nrepresent um this div right here now we\ncan do the same thing for the other divs\nso the joke content and the quote\ncontent and the riddle content so I'll\nshow you what we're going to do here\nlike this will make sense in a second so\njust bear with me so we're going to copy\nthis down four times we're going to say\nthis one will be a joke container this\none will be a quote container and this\none will be a riddle container and then\nwe of course have to replace this with\njoke and\nquote and riddle all right so in this\nJavaScript that we just wrote we are\nbasically selecting each of these\ncontainers that should have the content\nthat we're putting in and from here all\nwe have to do is set the inner HTML to\nan empty string and no matter if there's\nsomething there or there's nothing there\nit doesn't matter we're just going to\nclear it no matter what so we'll say mem\ncontainer.\ninnerhtml equals an empty string and\nwe'll do that four times over and just\nreplace these variables with the correct\none\nall right so this clear all method is\ngoing to look in all of the different\nsections and it's going to clear them no\nmatter what's there so all we have to do\ndown in this show meme thing is before\nwe append a new image we just have to\ncall the clear all method so that should\nclear everything out so let's try it out\nlet's show a meme and then click it\nagain and and it looks like it's\nclearing it and putting in the new one\nand that's going to happen for all of\nthese because we're just going to pass\nthis clear all method into each of these\ntemplate\nfunctions okay so the next one is show a\njoke all right so we've already got a\nrandom joke uh text but let's go ahead\nand\nconsole.log the\nrandom joke text just to see what we're\nworking\nwith so let's click the button make sure\nit's working and let's open up up the\nconsole all right it looks like we're\ngetting a string that represents the\njoke so in this case we want to insert a\nparagraph element and put this text\ncontent in it all right so the this\nshould be rather simple so we'll say new\nparagraph is equal to\ndocument.createelement and we'll put in\na P tag and then we say p. text content\nis equal to the random joke text so I'm\ntaking the variable here which should be\nequal to a random joke and I'm assigning\nit to the new P element that I just\ncreated and then finally I need to clear\nall because I need to clear anything\nthat's there already and then I need to\ninsert it into the Container so before\nwe wrote out uh a different variable\nthat selects the container and then we\ndid it in two steps but we can basically\njust do this in one step so we can say\nquery selector in this case we want to\nget the joke\ncontent ah can't type and then at the\nend we can just chain on this append\nchild and pass in the new paragraph\nelement let's see if that works by\nclicking tell me a joke and it's saying\np is not\ndefined um that's because I for some\nreason uh just said P instead of new P\nso that should work better this time all\nright so we're getting um some content\nhere now this will be the real test if I\nclick show a meme does this content get\nerased in a meme show up that's what\nshould happen so let's show a meme and\nwe see that in the jokes uh section\nthere's nothing there which is great so\nlet's tell another joke and you can see\nthat we have a joke but no meme so far\neverything's working great so let's go\nto the next method that we need to\nimplement so this will be a quote\nall right so let's go ahead like we've\nbeen doing we'll console.log the random\nquote and we'll click the button and you\ncan see in the console we get an object\nwith two keys or two properties we have\nthe author property in the quote\nproperty both which are strings so what\nwe want to do here is we want to display\na p or a paragraph uh element and then\nanother paragraph element right below it\nwith the author so so let's do\nthat so we'll say uh the quote itself is\ngoing to be\ndocument.createelement\nand that will be a paragraph element and\nthen we'll say the author is going to be\ndocument.createelement and that will\nalso be a p element now for the text\ncontent the quote will be pretty\nstraightforward we just say quote. text\ncontent equals the random quote and then\nwe need to actually get the quote\nproperty which is the quote itself now\nfor the author text content we need to\ngrab the random quote again um and grab\nthe author property but we also want to\nput that little Dash uh before it so all\nwe have to do is make a string with a\ndash and a space and then we concatenate\nthat with the um the author name all\nright so we've got our text content um\nor let's let's see if we did this right\nso we got our quote and then our author\nstored in 2 p elements so now all we\nshould have to do is first clear all so\nwe clear everything out and then we come\ndown here and we say document. query\nselector we want to grab the quote\ncontent container and then we\nappend child and we put in the first we\nwant to put in the quote and then the\nnext thing we want to do is grab the\nsame container and put in the author so\nlet's go ahead and run this looks like\nwe got a random quote working just fine\nbut this is kind of messy I want to\nrefactor this a little bit we never want\nto write the same thing two lines in a\nrow that's just bad practice so what we\nwant to do is we want to store the\ncontainer like we did\nbefore in a variable so let's put this\nright here\nso now we have the container in that\ncontainer variable and now we just have\nto uh call container. appendchild for\nboth of\nthese and this should work still awesome\nso now we can do jokes we can do quotes\nand we can do memes and they all kind of\nclear each other out when um a new piece\nof content is\ngenerated now the last one is going to\nbe the hardest one and that's because we\nonly want to show the riddle itself but\nwe don't want to show the answer to it\nuntil this reveal riddle answer is\nclicked so let's mark off our to-dos\nhere we are done with the show quote we\nare done with the show\njoke and we're done with the clear all\nmethod so we're we're doing pretty good\nhere and finally we have to show the\nriddle so I think what we're going to do\nis let's first see what we're getting it\nalready shows us I already wrote in a\ncom that says this is what you should\nget but let's just verify\nit oh is good practice so console.log\nRandom riddle and let's click the button\nwe get our random riddle with a answer\nprop and question prop so let's let's go\nahead and um be explicit about this and\nI'm going to show you a little es6 or\nthe latest spec of JavaScript I'll show\nyou a trick on how to uh destructure a\nbelieve that's the correct term for it\nbut we're going to destructure\nproperties off of this object so all we\nhave to do is we say const and then we\nput these little brackets here and then\nwe pass in the properties that we're\nlooking for so we want a question and we\nwant an answer and that will be set\nequal to the random riddle that we're\ngetting so now we should be able to\nconsole.log a variable called question\nas well as a variable called\nanswer right here so let's see if that\nis\ntrue all right so we got these printing\nout okay and basically what I did here\nthis right here is the equivalent so let\nme comment it out for a second what I\njust wrote there is the es6 or the\nlatest spec of JavaScript equivalent\nsyntax to doing this so we say question\nis equal to random riddle do question\nand then answer is equal to random\nriddle do answer so these two lines of\ncode can be simplified into this single\nline of code right here by putting these\nlittle brackets around there and\nselecting the property that you want so\nthat's just a little trick um thought\nI'd show you as we're solving this all\nright so we've got our question we've\ngot our answer now we have to create our\nparagraph elements so I think we're\ngoing to show the question and the\nanswer both in a paragraph element um\njust like we did with the quote but we\nobviously have to hide the answer up\nfront so how we'll do that is this we'll\nsay the um question element will\nbe equal to document.createelement we'll\nput a paragraph tag in there and then\nwe'll set the text\ncontent equal to the question itself and\nthen let's go ahead and take um since\nwe're inserting twice let's go ahead and\nget a single variable for the container\nso document. query selector and we'll\ngrab the uh riddle we need a DOT at the\nbeginning to select a class we want the\nriddle content div so that will be this\nriddle content div and that should work\nand now we want to say container. append\nchild and we'll put in the question\nelement let's see if that\nworks okay awesome we have this\nparagraph element um representing the\nriddle and now what we have to do is we\nhave to insert the answer but we have to\nmake it hidden all right so I think the\nway that we're going to do this um if\nyou remember from the hints it says you\nmay need to use the HTML element. hidden\nproperty so let's take a look at what\nthat is so the HTML element property\nhidden is a Boolean which is true if the\nelements hidden otherwise it's false and\nyou can actually set this equal to true\nor false to navigate between something\nthat shows and something that hides so\nthat's good to know uh we should be able\nto use that on any element that we're\nworking with here all right so what\nwe're going to do is we're going to\ncreate a similar to this question\nelement let's just copy this\ndown and this time it's going to be the\nanswer so we'll do answer\nelement and then that will be set equal\nto the answer all right now there's one\nadditional thing that we have to do so\nwe've got this button over here called\nreveal the riddle answer and that's\ngoing to call this function down here\ncalled reveal answers now if we're\nanticipating in the future um this is\nsomething that you'd probably figure out\nafter you implemented it and you're like\noh shoot I realized this now but I've\nalready built this I know how it works\nso what I'm saying is that in the future\nwe're going to have to click this button\nand we're going to have to figure out\nwhether there's a riddle answer\navailable and whether that riddle answer\nis hidden or not hidden so in order to\ndo that in order to make our jobs easier\nwe should probably set an ID attribute\non this p paragraph tag we're calling\nanswer so we've already set the text\ncontent um so let's let's go ahead and\nappend this to the HTML so just so that\nyou can see what's going on here um so\nwe're appending the answer element so\nnow when we say riddle me we get the\nriddle and the answer which is obviously\nnot what we want to do but what we can\ndo here is after this we say answer\nelement. set attribute rute and what I\nwant to set is an ID um and then what I\nwant to do with that ID is set it to\nriddle answer all right so what this is\nbasically going to do is down here in\nthe riddle content it's going to create\na P tag that has an\nID equal to riddle answer okay and then\nthe answer to the riddle will be sitting\nright there so later on when we click\nthe reveal riddle answer button it's\njust going to say okay go find me uh A P\ntag with an ID of riddle answer and if\nthat's there then if it's there and it's\nhidden I want to unhide it if it's not\nthere I want to alert the user that it's\nnot there okay so that's basically what\nwe're doing with that code down here um\nand then of course we need\nto call the clear all method as we did\nwith all the other functions and then\nthe last thing we need to do is we need\nto hide this so we need to grab the\nhidden property and set it to true on\nthis answer element so when I click\nriddle me we should see just the\nquestion and the answer should be hidden\nso let's click riddle me and we get\nexactly what we're looking for here so\nthat's good now the last thing we have\nto do so we have completed this to-do I\nbelieve let's let's just test it by\nclicking out or clicking on some other\nones okay looks good so\nfar and now we have to implement this\nreveal answers so let's go back to our\nrequirements\nhere our user stories say when showing a\nrandom riddle the answer should never be\nrevealed until we click that button so\nwe got that um if the user clicks reveal\nand there is no Riddle and alert should\nlet the uh user know that there's no\nRiddle there um if it's already there\nand it's already revealed another alert\nshould be um popped up so what we need\nto do here is we need to first check um\nlet's see what do we need to check so\nwhat we need to check is if there is a\nriddle answer um or not or not a riddle\nanswer but a riddle in general so the\nway that we do that is we first grab the\nriddle container which will be equal to\ndocument. query\nselector riddle content okay so that\nshould give us this div right here and\nthen from there we can say the riddle is\ngoing to be equal to the riddle\ncontainer. query selector and in this\ncase we want to search for a paragraph\ntag so if there's any paragraph tag\nsitting within that div we know that\nthere's a riddle there and if we know\nthat there's a riddle there then we know\nthat you know we either need to reveal\nthe riddle answer or we need to alert\nthe user that it's already\nrevealed okay so now we're going to do\nan if else if statement so we'll say if\nthere is a\nriddle if there's a riddle revealed and\nthen we actually we have one more step\nto\ndo so we need to say the answer is equal\nto um document. query selector and the\nanswer is going to be what we named it\nabove right here so riddle answer is the\nID that we're looking for so we just put\nthis hashtag to search for an ID rather\nthan a class and we type in riddle\nanswer okay so there's our answer and\nwhat we're going to say is if there's a\nriddle and there is an\nanswer then I want to alert the user\nthere is\nalready um an answer revealed or\nactually no because even if there's an\nanswer Reve or even if there's an answer\nhidden it's still going to be registered\nunder this variable so let's go ahead\nand test that out real quick let's\ncomment this code right now and then\nwe'll\nconsole.log answer okay so what we would\nexpect is we've already created in this\nprevious method we've created this\nelement um with an ID called riddle\nanswer but we've hidden it so it's there\nit's just hidden so what we want to\ncheck is when we search for this by its\nID if it is hidden what value do we get\nso we're going to console log that\nanswer I'm first going to click riddle\nme and then I'm going to click reveal\nanswers I'm going to look at the console\nand you can see that even though it's\nhidden we still found the element within\nthe Dom using this query selection\nVector so in other words we have to\ncheck whether it's hidden so we got to\nuh print out answer. hidden instead of\njust answer so let's generate a riddle\nand then reveal it and we're going to\nsee that it that the hidden property is\nset to true so now what we need to do is\nuncomment this\ncode and we're going to say if riddle\nand the answer is hidden then we need to\nreveal it okay so we need to say answer.\nhidden equals false all right so that\nline of code right there should pretty\nmuch complete our um web page here with\nthe exception of those alerts so let's\ngo ahead and generate a riddle and click\nreveal the answer and you can see that\nit reveals the answer right there okay\nand maybe we even want to come up to\nthis method and instead of just setting\nthe text content to answer we can put\nthe answer\nis and then the answer so let's try that\none says the answer is an echo so\nperfect now the last thing that we have\nto do is handled those other cases so\nelse if so if the riddle is true so if\nthere's a riddle there and the answer is\nhidden we're going to reveal it if the\nriddle is there and the\nanswer is not hidden so right here um so\nwe basically this is redundant so if we\nmake it to this else if block that means\nthat the that either the riddle was not\nthere or the answer was not hidden so if\nwe get here and we say if the riddle is\nthere that's all we need to check so if\nthe riddle is there and we're trying to\num uh we're trying to unhide it again\nand then we're going to say alert the\nanswer is already revealed okay so let's\nsee if that works so we'll click the\nriddle we're going to reveal it and\nwe're going to click the reveal button\nagain and it says the answer is already\nrevealed all right and then the last\npiece is just the lse statement which\nbasically means that we um don't have a\nriddle at all but we're trying to reveal\nthe answer so we'll say there is no\nRiddle to reveal the answer to sorry the\nvideo cut out here I do not know exactly\nwhere I was at but basically we were\njust completing the last part here where\nif you click on the riddle and you\nreveal the answer it reveals if you\nreveal it again it's already revealed um\nor if you have a random quote and you\ntry to reveal the riddle answer it's\ngoing to say there's no Riddle to reveal\nthe answer to so we've pretty much\ncompleted this challenge um hopefully it\nwas fun for you um a quick quick way\nthat you can share this is click the\nshare button down here and share it on\nTwitter be sure to tag me uh at\nzgd and put in the hashtag 00 days of\ncode um that's where you can get support\nfrom The Tech Community the webdev\ncommunity on Twitter and hopefully um\nwe'll see this popping up a couple times\nI I think this is a fun little web page\nto create with some interactive\nJavaScript and if you want to customize\nit a little bit you can go down to the\nJS section and replace some of these\nquotes and some of these memes and um\njokes with your own\nfavorites in this video and subsequent\nvideos we're going to be going through a\nCSS crash course so this is all about\nstyling your web pages now before we get\ninto a lot of the details I want to show\nyou exactly what we're going to be able\nto build by the end of this and we're\ngoing to use a tool called front-end\nMentor because this is basically uh a\nbunch of professional look web designs\nthat have been implemented for us but\nthey have not been coded so what you do\nis you click on a challenge and you can\ngo in and get the design and then you\ncode up the design and submit it and get\nfeedback on it so the three that I've\nchosen based on what I want to cover are\ngoing to be this little uh single price\ngrid component this will be the first\none that we do right after getting\nthrough the crash course and it's a nice\nlittle introductory challenge you see\nthat we'll make a desktop version and\nthen a mobile version and then we will\nmove on after we've gone through a\ncouple other tutorials to this um\ntestimonials grid section which is going\nto help us get through uh the skills of\nflexbox and CSS grid which are going to\nbe super important to you as a developer\nbefore I get into the topics I just want\nto say that the prerequisites are\nbasically you got to know how to write\nHTML the basics of HTML is all you need\num we're also going to be working in the\ncodeen environment so this is just an\nexample right here um where we can type\nout HTML CSS and JavaScript so get\nyourself comfortable with that um and\nthen optionally like I said we're going\nto be combining all of our skills for\nsome of the code challenges so watching\nthe previous uh parts of this full stack\ndeveloper series is going to be\nimportant now in this lesson on CSS I\nwant to go through what we're going to\nactually learn but more importantly what\nwe're not going to learn I'll be\ncompletely honest when I put this\ntogether I got a little carried away I\nthought this was going to be a simple\ncrash course in CSS but um was humbly\nreminded um that CSS has a lot of things\ngoing on there's a whole lot of things\nthat we can cover and I tried to keep it\nhoned in on the most important Concepts\nper how I've been trying to do it with\nthis series but there's just a lot to\ncover so as you can see on the left\nwe're going to be talking through what\nis CSS and the basics of it\nwe're going to be walking through the\nBox model which is basically defining\nhow much space and elements going to\ntake up on your web page um that's going\nto get us into some discussions on Block\nversus inline elements box sizing and\nlayouts and then we're going to cover a\nbunch of other things and I'm pretty\nexcited to share a four-step system that\nI use when I create HTML and CSS uh\nbasically take a design and put it into\ncode cuz thinking through that was\nreally hard for me when I first started\nand I want to share that with with you\nso that's the main core lessons we also\nhave some supplementary or optional\nlessons which includes responsive design\nso what happens when your web page gets\nput and opened up on a mobile device\nlike an iPhone does it look the same is\nit going to have a pleasant experience\nfor the user um in today's age that's\nrequired if you want to make a web app\nso we're going to talk about that in a\nseparate video and then we're also going\nto have separate videos on flexbox and\nCSS grid which is going to allow us to\nlay out our elements a little bit and\nlike I said we have this project right\nhere um which gives us a great\nopportunity to apply those Concepts and\nput this into a nice looking grid now\nwhat we're not going to be covering in\nthis crash course is going to be graphic\ndesign and wireframing now there's a\ngood reason for that that we're using\nfrontend Menor because they already have\nprofessional looking designs built out\nand implemented for us and I don't want\nto waste a lot of time on going into\ndesign principles that I'm not really an\nexpert at um so we're going to use and\nleverage existing designs and learn how\nto turn those into code on a web page\ndon't get me wrong these are super\nimportant Concepts uh as a fullstack\ndeveloper you always start with your\nwireframing and your design and your\nrequirements and all that kind of stuff\nbut that kind of comes later down the\nroad I really want to focus on the Core\nConcepts of how do we actually turn\nthings into code we also not going to\ncover CSS pre-processors I'm not going\nto talk too much about it but basically\nit's a more convenient way to write CSS\nand it basically allows you to write a\nlittle bit less code and it gets\npre-processed or I guess transpiled down\ninto vanilla CSS through a bunch of code\nthat does that so um SAS and less are\npopular uh pre-processors and you'll\noften find them on much larger projects\nwhere trying to organize your CSS\nis really important but we're not going\nto be working with that we don't have\nhuge projects going on and it's not\nessential to our journey what we're also\nnot going to be talking about is CSS\nFrameworks so the last thing that I want\nto do in this full stack web developer\nseries is lock you into a path um to\nsomething that is really popular right\nnow but may not be in two years and\nthat's kind of the deal with CSS\nFrameworks when I was first learning\nbootstrap was huge um every tutorial was\ntalking about bootstrap and now Tailwind\nis a pretty popular CSS framework and\nall these Frameworks are doing is taking\nvanilla CSS what we're going to be\nlearning and writing some abstractions\non top of that and just making it more\nconvenient to you know lay out elements\non the page and style them more quickly\nand efficiently I think it's really\nimportant to understand the barebones\nbasics of writing vanilla CSS and\ntherefore we're not going to be looking\na whole lot at these all right at this\npoint I think we are finally ready to\nget into the CSS crash course um as\nalways apologies for the long intro but\nI really want to make sure that we're\nclear on what we're actually going\nthrough in this lesson the very first\nthing that I want to dive into is the\nbasic synx of CSS so we already learned\nabout HTML and you might actually\nrecognize this HTML diagram up here from\nthe last lesson now CSS is relatively\nsimple and all we're trying to do\nis Target a specific HTML element and\napply some sort of style to it or some\nuh some sort of layout to it in this\nexample here you can see that we have\ndefined an HTML element with a class\ncalled su- class and then down here at\nthe bottom where we look at our CSS\nwe're using something called a CSS\nselector and we are targeting a class um\nof some class so we're basically saying\nwith this rule down here I want to find\nany HTML element that has a class of\nthis and then I want to assign this\nspecific CSS property um to that\nspecific HTML element or elements if\nthere are multiple elements that have\nthe same class now this is just one of\nmany examples that we can go through so\nin this case we're targeting a specific\nclass we could also Target um IDs or\nHTML tags and we can do a bunch of\ncombinations um of the three so we're\ngoing to be walking through how that\nworks and then we're also going to be\ntalking about these properties down here\nso similar to what we talked about with\nJavaScript when we're looking at uh\nJavaScript objects where we have you\nknow some sort of property and then a\nvalue um at the other side of that\nproperty same thing applies here with\nCSS we have a bunch of predefined\nproperties that were able to use um to\nachieve different types of objectives\nwhether that be laying out you know HTML\nelements on a page so do I want to put\nsomething side by side with each other\nor do I want to just style it so do I\nwant to make the background green or do\nI want to make the text red or something\nlike that we are of course going to get\ninto all of the most common properties\nand selectors and all that kind of stuff\nbut as with um all the other lessons\nthat I've taken you through I want to\nbasically introduce this documentation\nso this is the mdn web docs we have\nvisited this many times uh in the prior\nlessons of this series\nbut now if we go to Technologies we can\ngo to CSS and then we go to the CSS\nreference and then we scroll down and\nyou should find this section called\nindex and this is going to list out all\nof the possible CSS properties that we\ncan use to achieve these layout and\nstyle objectives for our HTML elements\nso as we go through this if you ever get\nlost you can always look up these\nproperties that we're using on this\ndocumentation page so we've got the B\nbasic syntax of CSS and we'll go into\nthat even a little bit more but what is\nthe actual purpose here like what are we\ntrying to do well there are two things\nin my head that CSS is really good for\nand that is going to be layout and style\nso how are the elements the HTML\nelements laid out on the page are they\non top of each other are they next to\neach other are they in a grid a table\nall that kind of stuff and then\nfurthermore we can actually apply Styles\nso what color is the text what color is\nthe background Do you have a a\nbackground image what kind of Font Are\nyou you know working with on the page so\nwhat I did was I put together a really\nbasic example of this um this is nothing\nfancy but it just shows you um don't\nworry about the CSS uh quite yet here\nbut it basically shows you how we can\ncombine the two so we've got a container\non the left and a container on the right\nand then furthermore we have colored\nborders and a little bit of colored text\nwithin this along with you know some\nhead things and paragraph text so this\nis kind of the ultimate goal of CSS we\ncan not only you know do style but we\ncan also do layouts but if you zoom out\neven further the real goal of CSS is to\nTarget a specific HTML element or\nelements and apply some sort of styling\nto that element or elements there are\nthree primary ways that we can select\nand style HTML elements with CSS we can\ndo it by HTML tag we can do it by a\nclass which is the the syntax example\nthat we looked at a little bit ago and\nthen we can also do it by ID so if we\nlook at this on the page here let's go\nahead and just make a simple paragraph\ntag and put some text in there so the\nfirst thing we can do is we can just\nTarget that specific HTML tag and give\nit a different text color and you'll see\nthat this turns red up here we can also\nadd in a class so we can say\nuh paragraph you know element or\nsomething like that and we can replace\nthis by adding a period before which\nindicates I want to Target a class and\nthen you type in the class that you're\ntrying to Target and then you give it\nsome sort of style and again we can see\nthe red text there and then finally we\ncan also have an ID on an element so\nlet's just call this one ABC or\nsomething like that\nand we can come down here and use a\nhashtag in the front and that's going to\nsay I want to try to Target some sort of\nID on the page and then you type the ID\nand then once again give it some sort of\nCSS property as you can see we've styled\nthis red once again if you've been\nfollowing along with this series these\nlook familiar to you because we talked\nabout them with JavaScript already so if\nwe were to come down to the JavaScript\nsection and you know we go through our\nbasic doc doent query\nselector and then we try to Target a\nspecific HTML element on the page we use\nthe same selector syntax so if we were\ntrying to Target this element by its\nHTML tag we just drop in the letter P\nwhich targets all or targets the first\nparagraph element that it finds on the\npage we can also Target it by class so\nonce again we put a dot before and then\nwe target the class that we're trying to\ngo after and that's going to find find\nthe first HTML element uh with that\nclass on it and then finally we can do\nthe same thing with these IDs so we can\njust type in hashtag and then the ID and\nwe've selected it with JavaScript so\nthis is actually a pretty familiar\nconcept if you've been following along\nwith this series and it's relatively\neasy to kind of grasp and hold on to but\nwhat is not so simple is understanding\nwhat happens when you have multiple CSS\nselectors in a single stylesheet and\nthey're all targeting the same element\nwhat happens there which CSS rule takes\nprecedence over the other for example if\nI put in this CSS stylesheet um if I\ntargeted the ID right here and gave it a\ncolor of\ngreen let's see if I can write that\ncorrectly and then I also come down and\nTarget the class and give it a color of\nred you have to ask yourself which one's\ngoing to apply we're going to cover that\nhere in more detail in just a second but\nI want to go through a couple other ways\nthat we can actually Target HTML\nelements um when we have some more\ncomplex HTML in our web page aside from\nselecting HTML elements with tags\nclasses and IDs we also have something\ncalled combinators that we can do um to\nparse through all the HTML in Target\nspecific elements and to help us with\nthis I'm bringing back a diagram that we\nlooked at in the prior lesson um on the\nDom or the document object model and\nwhat the Dom describes is the structure\nof your web page and how the HTML is\nlaid out and in this diagram we talked\nabout how there's grandparents and\nthere's parents and there's uh children\nchildren and siblings um based on the\nlevel that an HTML element is at in the\ndocument so you can see that coming down\nhere we've got you know an H1 A P tag\nanother P tag and unordered list and all\nfour of these are considered siblings so\nthat's just a quick review and what we\ncan do with this is we can come back to\nour playground here and actually select\ndifferent HTML elements based on these\nrelationships the first combinator that\nI want to talk about is selecting\ndescendants in HTML so if we go back to\nour our visual doet Tre you can see that\nthis div right here has several\ndescendants so it has Direct children\nwhich are these four elements but then\nit has grandchildren which the children\nand the grandchildren are all considered\ndescendants of that specific div so what\nwe can do within CSS is we can Target\nall descendants with a single selector\nnow I'm going to do it the wrong way\nfirst so that we can see why this\nmatters in the first place let's say\nthat I wanted to style these list items\nright here one way that I could do it is\nI could Target the HTML tag Li and then\nI can give it some sort of style so\nmaybe I want the text color to be green\nI'm sticking with this color property\nbecause we haven't talked about all the\nCSS properties yet and it's pretty\nsimple and easy to kind of intuitively\nunderstand so with this example I tried\nto select and style these list items and\ndid so successfully but by targeting it\njust like this we run into problems if\nwe change the HTML structure the future\nand let's say that we put in some sort\nof footer so this isn't going to look\ngreat but let's go ahead and make a div\nand then an unordered list and then you\nknow footer link number\none and then we'll put three of those in\nthere so number two and number three so\nthis list right here imagine this being\ndown low in the footer and what we would\nwant to do with that is we want to\nactually make those align horizontally\nand we want to style them with a\ndifferent text color and we probably\nwant to give them a link and you see\nwhat's happening when we just select the\nLI elements all descendants we're\nactually picking up these footer um\nlinks right here and we don't want to be\nso there's a better way to actually\nTarget specific types of descendants\nwithin a document um to allow us to have\nmore specificity with targeting our HTML\nelements to make this example a little\nmore clear let's go ahead and add some\nclass uh attributes here so this will be\nthe we'll call it the main container and\nthen the second div down here is going\nto be called the footer now this is not\nsemantic HTML like we talked about\npreviously but it'll do the job here so\nwhat we're trying to do is we want to\nstyle just these list items so the the\nones within the main container div but\nwe don't want to Target the ones that\nare sitting in the footer because those\nare going to be styled a little bit\ndifferently the way that we can do that\nrather than just targeting the LI tag\nwhat we can do is we can actually\ncombine selectors so combinators is what\nwe're calling this and I can say I want\nto Target the main container class and\nthen I want to look for any list item\nthat is a descendant of that main\ncontainer class so the first div that we\ntalked about here on the left um that's\nthe only div that has this class and so\ntherefore we're only going to be styling\nthe ones that we're targeting at this\npoint we can also add additional list\nitems to our main container div and it's\ngoing to get that style so if we were to\ncome down right after this list make\nanother div another unordered list and\nthen put in some text here you're going\nto see that that will turn green because\nit still is a descendant of that main\ncontainer but once again we have our\nfooter links uh you know avoiding that\nstyle because we've been specific in\nselecting only descendants of that main\ndiv now I want to stop for just a second\nand look at this syntax that we're\nworking with so you can see that we have\na class selector with this period right\nhere that determines that and then we\nhave a tag selector separated by a\nsingle space so what we call this first\none is going to be a pre- selector and\nthen the LI is the actual selector\nso in this CSS rule that we have defined\nwe're not really targeting the main\ncontainer we're targeting list items so\nthe one that is furthest to the right is\nalways going to be the HTML element that\nwe actually want to style if we were\njust targeting the main container here\nso if we dropped this down into a\nseparate Rule and gave a color of blue\nper se you're going to see that not only\nlist items but everything else there is\ngoing to get that style so it's very\ndifferent saying I want to Target this\nmain container class and saying I want\nto Target all of the list items that are\ndescendants of this pre-selector main\ncontainer class all right I'm going to\nclear all of these Styles out I'm going\nto also clear the HTML that we're\nworking with and let's go ahead and drop\nin some different HTML because the\nsecond one that we're going to talk\nabout the second CSS combinator is how\nto select children of a specific element\nwith the descendants selector which is\njust a space separating two different\nselectors we're grabbing everything\nbelow a certain HTML element but with\nthe children selector we're only\ngrabbing the first children so with this\ndiv right here that we're calling an ID\nof main we only have three or we have\nfour different children so we have the\nfirst three paragraph tags and then we\nhave this div element which are all\ngoing to be considered children so if we\nwanted to style just those elements then\nwe can use a slightly different syntax\nso remember we're targeting an ID right\nhere so instead of using a period we're\ngoing to use a hashtag then we're going\nto pass in that ID drop down into our\nCSS Rule and now what we're going to do\nis give a color of we'll call it green\nagain now this is just going to Target\neverything because we're just targeting\neverything in the div but if we added a\nchild selector combin Ator we can Target\njust those first three paragraph\nelements and how we do that is we use\nthis little carrot right here and we\ntype in paragraph tag right after that\nso what this is saying is I want to look\nat the div with an ID of Main and then I\nwant to grab all of the children the\ndirect children um that are P tags below\nthat so the only three that qualify for\nthat rule are these first three\nparagraphs and therefore we style them\nto have a text color of green so we know\nhow to select descendants we know how to\nselect direct children now there's also\na CSS combinator or combinators that we\ncan use to select sibling elements now I\nwill make the disclaimer that I don't\nuse these ever I don't know if I've ever\nactually used these sibling selectors\nand the reason being is because whenever\nyou change your HTML structure it's\ngoing to affect the CSS rules so it's a\nlittle bit brittle um when you're\nputting these together but the reason\nI'm walking you through them is because\nyou may see them in code somewhere and\nit's just good to know that they exist\nand how they work to do this I'm going\nto copy in a little bit different HTML\nbecause we need a different structure to\nwork with and let me zoom out just a\nlittle bit so we can see more so within\nthis HTML you can see that we have\nanother you know main container and then\nwe have paragraph elements and list\nitems uh separated uh throughout the\nHTML now I'm going to get rid of this\nCSS rule right here and now we're going\nto select some sibling elements let's\nsay for some odd reason you want to\nstyle every paragraph element that\ndirectly follows a list group so in this\ncase it would be this first paragraph\nhere and the fourth paragraph here\nbecause they directly follow these list\ngroups in order to do that we can use a\nspecial CSS combinator that selects only\nthe first\nuh sibling of an element what we call\nthis is the adjacent sibling selector so\nwhat we'll do is we will grab um let's\nsee how do we do this we need to grab\nall unordered list so UL is what we're\ngoing to Target and then what we do is\nwe add a plus sign and then we target\nall P elements that are going to be\nadjacent siblings to those unordered\nlists and from here we can just assign\nwe'll call it blue this time and what\nyou'll see is that only the first\nparagraph and the fourth paragraph have\nbeen targeted now what I was saying just\na little bit earlier is that if you\nchange your HTML structure at all these\nrules break so if we were to come in\nhere and for you know some reason this\nis actually pretty common we wanted to\nmaybe wrap this last unordered list in a\ndiv so let's copy this in another div\nand then you're going to see that our\nrule that we wrote has broken down so\nthis fourth paragraph here is no longer\nstyled with blue text and that's simply\nbecause we changed the structure of that\nHTML so that's why I'm not a huge fan of\nthese selectors um they're pretty uh\nfragile in that sense now the last\nsibling selector we looked at the\nadjacent one which just grabs the first\num sibling next to an element but we can\nalso grab all siblings next to an\nelement so let's say that we wanted to\nstyle all of these paragraphs s um that\nare direct siblings to an unordered list\nthe way that we do that is we open up\nour CSS and instead of a plus sign we're\ngoing to use this little till day um\nsign right here and what that's going to\ndo is it's going to look for unordered\nlist and it's going to look for direct\nsiblings that have a you know a type\nparagraph and give it this style so once\nagain pretty fragile um I don't use\nthese often but they're good to know you\nknow how they work and um you might see\nthem in code at some point and hopefully\nyou would fix them and make them a\nlittle bit more robust over the last few\nminutes I've talked about how fragile\nthese selectors are but didn't really\noffer you a better solution so that's\nwhat we're going to do right now if I\nhad a situation where let me go ahead\nand remove these CSS rules if I had a\nsituation where I wanted to Target this\nfirst paragraph and this fourth\nparagraph what I'm going to do is just\ngive them a class so I'm going to come\nto the HTML and on the first paragraph\nI'm going to say blue text color is\ngoing to be my class name and then I'm\ngoing to copy that same class down to\nthe fourth\nparagraph and now I'm just going to\nselect that class with our class\nselector and then I'm going to give it a\ncolor of blue and now we've achieved the\nsame exact result but now if we change\nthe HTML structure this CSS rule is not\ngoing to break so that would be the\npreferred method at least in my head of\ndoing that now believe it or not there\nare other ways to select HTML elements\nother than these the main three which is\nuh tag class ID and then also the\ncombinators um we have some other ways\nto do it so let's say that we had this\nspecific HTML right here so we have a p\nelement and a div element and they both\nhave the class called regular text let's\nsay for some odd reason we want to style\nall elements with a class regular text a\ncertain way but we don't want those\nstyles to apply to a div element we only\nwant them to apply to a p element well\none way that we could do this is we\ncould come down to our CSS and write\nthis funky syntax where we actually\nspecify the class that we want to Target\nalong with the tag so we're kind of um\ngrouping them all together so what this\nis saying is I want to style only\nelements that are paragraph elements\nthat also have this uh class so it's\nkind of like an and statement and you\ncome down here give it a color of blue\nwe'll say and now we have selected only\none of these as opposed to if we just\nwere to select the uh class and then\ngive it a color blue it's going to apply\nto both of them so that's a kind of\nobnoxious way to solve this problem\nright here it's totally unnecessary but\nI just want to show you that there are\nother ways that you can do this and um I\nmainly would say if you're going down\nthat route I would use it on a caseby\ncasee basis you don't need to go out\ntrying to learn all the different ways\nbecause in the end the three main ways\ntag class and ID are going to be totally\nsufficient uh for writing good web\napplications by this point hopefully\nyou're at least somewhat comfortable\nwith writing a CSS rule that targets a\nspecific HTML element we also kind of\ntalked about how you might Target\nmultiple elements I'm going to write out\na couple CSS properties that we have not\ncovered yet so I wouldn't expect you to\nunderstand how they work but just try to\nfollow along um intuitively for the\nmoment and we'll get into them later so\nwe've got this HTML right here where we\nhave a div with a class of box one and\nthen another div with a class of box two\nand what we want to do with this is we\nwant to apply some styles that are going\nto be shared across these boxes and then\nsome Styles which are going to be unique\nthis is very similar to the example we\nlooked at a little bit earlier where we\nhave um two boxes right here and some of\nthe styles are the same so these are the\nsame sized boxes they both have borders\nbut the borders and some of the text are\ngoing to be different between the two so\nhow do we go about you know writing the\nleast amount of code and achieving that\nsame result here is going to be the most\ninefficient way to do it but it's still\ngoing to work okay so what we're going\nto do is we're going to Target box one\nby class and then we'll also come down\nand Target box number two by class now\nat this point we can use some CSS\nproperties again we haven't learned all\nof these quite yet but maybe we want to\ngive a border to both of them so I want\nto give box one a green border and then\nI want to come down and give box\ntwo a blue border so now we have borders\naround these elements and let's also add\nsome padding to both of them so we'll\ngive them 20 pixels of padding we'll\ntalk about these units a little bit\nlater in this crash course um and then\nfinally let's go ahead and write some\ntext in here we've got uh box box one\nand box two and I want to give these\ndifferent colors so this box will have\ngreen text and this one is going to have\nblue text so far in this example\neverything's been a little bit different\nbut let's say that we wanted to um make\nthese the same width and height so let's\nsay that we want box one to have a width\nof 200 pixels and then a height of 200\npixels and then we come down here with\nbox two and we give it a width of 200\nagain and a height of 200 again so in\nthis case we've got two boxes that have\nsome different properties but some\nsimilar properties so one way that we\ncan actually simplify our code a little\nbit and um share some properties is by\nthis special CSS syntax where we just\nleave a comma between the two classes\nthat we're trying to select or IDs or\ntags or whatever you're trying to select\nboth at once so what this CSS rule is\ndoing here um this box one and box two\nis it's saying I want to select both uh\nelements with a class of box one and\nelements with a class of box two so what\nwe can do here is we can take these with\nand height properties and take them out\nof these individual Styles and go ahead\nand put them right here so we've\nbasically eliminated two whole lines of\ncode and we've followed the dry\nprinciple which is do not repeat\nyourself and that's a pretty important\none that you're going to you know come\nacross as you develop you know bigger\nand bigger software as with everything\nin code there's multiple ways to do this\nso we could write this rule right here\nwhere we're targeting two elements at\nonce and applying um shared Styles now\nwe can also achieve the same exact\nresult by instead of targeting it in our\nCSS we can actually give multiple\nclasses to a single element so instead\nof having just box one and box two maybe\nwe have each of these have their own\nclasses but then they also have a shared\nclass which is called box so instead of\ncoming down into the CSS and targeting\nit like this all we have to do is get\nrid of these and give them that shared\nclass and now we're going to get the\nsame exact result but in a slightly\ndifferent way now honestly this is\nprobably my preferred way of doing it it\njust is a little bit more\nstraightforward and simple in my head\nbut both of them are valid ways to you\nknow provide shared styles to your HTML\nall right for the most part I think\nwe've covered a lot of the selector\nstuff with CSS but while we're here we\ndo have to talk about the pseudo\nselectors now we're not going to get\ninto a whole lot of detail here because\nI don't think it's extremely important\nat this point but I do want to mention\nit I want to show you probably one of\nthe most common ways of using something\ncalled a pseudo selector so let me get\nrid of all this stuff here and paste in\na simple button so you can see that we\nhave a button right now and you know\nclick it it doesn't do anything it's not\nstyled nicely or anything like that but\nwhat we can do with this button is we\ncan apply something called I believe\nit's it's a pseudo class and that pseudo\nclass will allow us to style this button\ndifferently based on different states of\nthe button before we get into this there\nis a page on the documentation if you\njust type in uh pseudo classes to the\nmdn documentation you can read up on it\nbut let's go ahead and get back to this\nexample and I'll show you exactly what\nthis does so what we're going to do is\nfirst Target the button so maybe we want\nto apply a couple styles to this button\num again we haven't gone through the\nproperties quite yet we're going to get\nthere um but let's just say that we want\nto give a background color of Navy and\nthen we want to give um uh we'll say\ntext color of white and you're going to\nsee that we now have a slightly better\nlooking button not really a really nice\nlooking button so maybe we get rid of\nthe border so that it looks a little bit\ncleaner and then add some padding in\nhere all things we're going to learn a\nlittle bit later in this course so now\nwe've got a button that looks a little\nbit better um not great and what we want\nto do with this is we want to attach\nthis hover pseudo class which basically\nsays I want to Target the button HTML\nelement and when it is in its hover\nstate so basically when I hover my mouse\nover it I want to apply these Styles so\nthe first thing that I want to do is\ngive it a different cursor so when you\nhover over this you'll see that the curs\ncursor stays the same but I want it to\nbe that little clicking cursor so all we\nneed to do is come down and give it the\ncursor property and say we want it to be\nthe pointer so now if we hover over this\nyou'll see that the cursor changes to\nthat hover pointer another thing we\ncould do is we can change the opacity of\nthis so maybe we want to give the\nbackground color uh 80% opacity so now\nwe're going to get a different cursor\nand then it's also going to change color\nto kind of indicate to the user that\nthey can click this and it'll do\nsomething so that is all made possible\nby this hover sud sudo class and then if\nyou were to go to the documentation\nthere's all sorts of different pseudo\nclasses um that you can use you know\nhere are a couple of these um but we're\nnot going to get into a whole lot of\ndetail on that right now now the last\nthing I want to talk about while we're\non the topic of CSS selectors is kind of\ndifferentiate between two that we've\nalready talked about\nso we've already seen these multiple\nselectors so let me go back um we've got\nthis box example but let me let me bring\nthis back to the multiple selectors\nwhere we have box one and box two being\nselected and let's go ahead and compare\nthis to something like where we go with\nbox one and then we pass in a P tag or\nsomething like that now these are they\nlook very similar but they're very\ndifferent in this case we're saying I\nwant to Target box one and box two and\nthen in the second rule we're saying I\nwant to Target any P element so the the\nactual selector that exist as a\ndescendant of the box one class element\nso they're very different try to keep\nthose separate in your head as we go\nthrough this tutorial now that we've\ncovered how to select HTML elements with\nCSS rules let's talk about this whole\ncascading concept so CSS stands for\ncascading Style sty sheets and what that\nterm refers to is the concept of when\nyou've got multiple Styles sheets which\nis possible and multiple CSS rules\nwithin those stylesheets that all\ncompete against each other to style the\nsame HTML element it's asking which one\nis going to win which one's going to\ntake the most precedence and actually\nstyle the element before I start writing\na bunch of things I want to show you a\ntool that we've actually looked at\nbefore um but we have not looked at yet\nwith CSS so I know I've been working in\nFirefox previously we're in Google\nChrome just cuz I've got this Google\nSlides up here um but we can do the same\nthing we can inspect um elements with\nthe dev tools and when we come to the\nelements tab which is the first one that\nyou're going to see in all browsers you\ncan parse through the HTML and you know\nclick through and drill down and figure\nout which HTML element that you want to\nlook at and then in this right hand pane\nover here this is where all of the\nstyles that are applying to that element\nare going to be housed and in many cases\nyou're going to see multiple Styles so\nlet's go ahead and just click on one of\nthese here so I don't know it doesn't\nreally matter um but what you're going\nto see on the right side is a bunch of\nstyles and in some cases you're going to\nsee that they're crossed out and what\nthat basically means is that they have\nbeen um cancelled out by another\nstylesheet or uh CSS rule that takes\nmore precedence over the one that was\nwritten so that's what you're going to\nbe seeing all the time with your web\npages and I want to talk about how we\ndetermine which one takes that\nprecedence let's throw some HTML on the\npage here one that has plenty of things\nto select so we have a div with a\nparagraph element within it and the div\nhas a class the paragraph element has a\nclass and an ID so we've got plenty of\nways that we can select this HTML\nelement and we're going to do so so the\nfirst one pretty easy let's go ahead and\njust use a HTML tag selector and give it\nthe color red now let's come down and\nselect a class so we're going to select\nthe P element by its class and we're\ngoing to give it a color of\nblue so far we've changed what we're\nlooking at here each time that we've\nwritten a rule let's come down and even\na little bit more specific so let's uh\nselect this by its ID by putting a\nhashtag and typing in the ID and then\nthis time we're going to style it a\ncolor green so in the first case we\ntried to style it red then we tried to\nstyle it blue and then finally green and\nas you can see within this document this\nlast rule right here is currently\nwinning it's it has the most precedence\nand we're going to find out exactly why\nthat's the case in just a a second but\nlet's keep going there's actually\nmultiple ways that we can you know\nselect this single element and I'm\nactually going to paste them all in\nbecause I don't want to uh bore you and\nwaste your time by typing them all out\nbut let's go ahead and paste all of the\ndifferent ways that we can style this\nsame uh paragraph element it's pretty\npretty wild how many different ways that\nwe can do this so we've got the three\nthat we wrote and then we've got all of\nthese different ways that are all\ntargeting that same element and the\nquestion is when we look at all of these\nhow do we know which one is going to end\nup you know winning and which one's\ngoing to apply now I'm sure the question\nthat you're asking um is why would this\never happen why would you ever write 10\ndifferent rules that are going to style\nthe same element well the answer to that\nis you probably would not but what could\nhappen is you could have external style\nsheets that are going to come into your\nproject and they're going to have their\nopinions on how you know certain\nelements need to be styled and then\nyou've got your own stylesheets um\nlocally within the project and those\nhave styles so it's pretty common to see\nmultiple stylesheets coming into a\nsingle web application and it's really\nimportant to understand you know which\none's going to win so there are two ways\nthat we can determine this or there's\ntwo factors in this equation uh so let's\ngo ahead and just write this out two\nfactors for determining CSS\nprecedence all right so the first way is\ngoing to or let's go ahead and make a an\nordered list because we're just\npracticing here so the first way is\ngoing to be uh the location of the CSS\nrule in the file and the second one is\ngoing to be the specificity of it so the\nspecificity of the CSS Rule now we don't\nreally understand either of these quite\nyet but the first one's pretty simple\nand the second one you'll catch on\nbecause we talked about it so much\nearlier in this lesson so let's start\nwith the location piece so location of\nthe CSS rule in the file this is really\nwhat we're referring to when we say\ncascading stylesheets so if we came down\nhere to the CSS and we targeted list\nitems so these two list items right here\nis what we're targeting and we want to\nturn them a different color now I'm\ngoing to write this rule right here here\nand then I'm going to take the same\nexact CSS rule but just change the color\nto Blue and you'll see that it actually\nchanges the color to Blue but it's not\nquite apparent why the bottom one is\ngoing to take precedence over the top\none well that's just how CSS works you\nalways read from the top to bottom and\nbasically the way that I think about it\nis um the the CSS interpreter that's\nreading through and figuring out what to\napply is going to just read read from\nthe top and it's going to say okay I\nwant to style all my list items uh with\na text color of green and then it's\ngoing to say okay as long as I don't see\nanything else in the rest of this\nstylesheet or any other stylesheet that\ncomes after it then that's going to be\nthe style that I apply but if I do see\nsomething which I do hear then I'm going\nto replace that previous Style with the\nmost recent one that I saw when I read\nit from top to bottom so that's what\nwe're talking about when we say\ncascading style sheets and that's uh one\nway that we can determine precedence\nwith CSS selectors now I know it seems a\nlittle weird cuz when we worked with\nJavaScript you definitely cannot declare\nthe same variables and stuff like that\nso it seems a little odd that we could\nput the same exact CSS selector in one\nCSS stylesheet but this is totally valid\nthat rule does not apply to CSS like it\ndoes JavaScript it's a totally different\ntype of you know language that we're\ndealing with here so we know know that\nthe last uh selector in the fil is\nalways going to win unless we have a\nselector that's higher up but has more\nspecificity so that is the second piece\nof this equation and we're going to\nbreak this out um real quick to see how\nit works so let's say that we have these\nlist items right here and let's go ahead\nand add a class to both both of them so\nwe'll just say list item something very\ngeneric here\nand we know that now that we have the\nclass we can select it in two different\nways so the question I have for you is\nif we try to select this with its tag so\njust use the LI tag to color the text\nand then we also added a rule that\nselected it by class which one is going\nto win over and then furthermore does it\nmatter which order we put them in in the\nfile before I type this in just pause\nthe video and see if you can kind of\nReason through that uh for a second all\nright so let's try this out first we're\ngoing to select it by the tag and we're\ngoing to give it a color of green then\nwe're going to select it by its class\nand we're going to give it a color of\nblue and you're going to see that it\nchanges to Blue but we don't quite know\nyet why this is the case because in the\nfirst rule that we talked about we said\nokay we read top to bottom and we're\nalways going to take the last Rule and\napply it so that would make sense here\nbecause list items the last rule in the\nfile and it's got a color of blue so\nthat's why it's styled that way well\nthat's actually the wrong answer um the\nreason that it's styled blue is because\nthe second rule is more specific than\nthe first so if we were to take this and\nput it before this other selector we're\nstill going to see blue text because\neven though this is last in the file\nthis first one is more specific so the\nquestion is how do we know what is more\nspecific than another to figure this out\nwe just need a little visual which says\nthat um on a Continuum from the left to\nright so least important to most\nimportant or in other words least\nspecific to most specific we have tags\nthen classes and then IDs so you might\nhave picked this up by now but if we\nwere to put an ID so let's say list item\nnumber one and we try to style this um\nlet's go ahead and put at the top of the\nfile to make sure that we rule out this\nwhole you know first to last uh stuff\nthat applies and now we're going to\nselect it by its ID and we're going to\ngive it a color of orange in this case\nyou're going to see that this specific\none um it's not applying to both because\nyou can't assign an ID to two different\nuh HTML elements but when we're looking\nat this first element we're selecting it\nuh one time right here another time\nright here and then a third time right\nhere and this top one despite being at\nthe top of the file is going to be the\nmost specific because of this Continuum\nright here and therefore it's going to\nbe the one that wins out and applies the\nstyle to that HTML uh element if you're\nfollowing along intently you're probably\nasking yet another question and that is\nwhat about these combinators that we\ntalked about earlier in the video what\nhappens if I get rid of all these CSS\nrules and I come in here and let's say\nsay that I select it by just its ID and\nI give it a color of green and then I\nalso come in and I say I want to select\num let's see I want to go ahead and look\nin all the ordered list and I want to\nTarget all the list items that have an\nID of list item number one so this is\ngoing to be the same exact element that\nwe're selecting so it's going to be the\nfirst one right here but let's go ahead\nand see if we can turn this a different\ncolor with this selector right here and\nwe can and even if we take this and we\nput it at the top of the\nfile we're still going to get the same\nresult it's still going to be blue\nbecause this rule right here is more\nspecific than this one right here\ndespite the fact that we're using the\nmost specific selector according to this\nlittle Continuum so as you can see it\ngets a little bit uh tricky here when we\nstart using combinators but there is two\nways that we can um identify pretty\nreliably which one's going to win out\nthe first one is probably my favorite\nwhich is to just try it out and in this\ncase it's really easy we're using Code\npen and we can just try it out and see\nwhat works but that's not going to give\nyou a really good understanding of why\nit's working that way so there's another\nmethod that we can use where we can\nactually calculate with numbers the\nlevel of specificity of a CSS rule let\nme lay out this steps here um we'll\nwe'll go ahead and practice some HTML\nfor a second so let's go after this\nfirst list item um actually the second\nlist item because we're talking about\nspecificity and let's make another\nordered list so the first step that\nwe're going to do is we're going to\ncount the number of ID selectors in the\nCSS rule so that's step number one then\nwe're going to come down we're going to\ncount the number of class selectors\nand then finally we'll count the number\nof tag\nselectors all right so if we're looking\nat these rules down here um let's go\nahead and apply this math and we'll\nfirst count the number of ID selectors\nin the CSS rule so both of these um have\na single ID so they have one ID now if\nwe go down to the next one count the\nnumber of class selectors they both have\nzero and then finally the number of tag\nselect vectors the first one has one but\nthe second one has zero so the way that\nthis is going to work out we can write\nsome uh CSS comments right here and I\nmight as well just go right above the\nactual rule so if we use this little\ncomment syntax which is a forward slash\nand a star and then a star and a forward\nslash to close it out and we can count\nthis up so we'll say ID selectors this\nis going to be one we'll say class\nselectors\nit's going to be zero and then tag\nselectors will be one so if we add these\ntogether we get a number\nof1 if we do the same exact uh little\nmath problem here let's copy it down to\nthis next rule we can say that the ID\nselectors we have one we have zero class\nselectors and zero tag selectors so our\nnumber is going to be 100 so in this\ncase the second rule has a specificity\nof 100 and this first one has a\nspecificity of 101 which means it is one\npoint or whatever you want to call it\nmore specific and therefore it will be\nthe one that applies to this element to\nreally nail this concept I'm going to\npaste in some code so we don't have to\ntype it all out and I'm just going to\nwalk you through uh a few more\ncalculations all right so we've got a\nlittle bit different HTML but all it is\nis a paragraph tag with a bunch of IDs\nand classes to give us flexibility on\nhow we select them so in the CSS I've\nwritten several rules that are going to\nbe at different levels of specificity\nand let's just walk through how each of\nthem are calculated so our first example\nwe have two classes so we get 0 2 0 and\nour total is 20 come down here we have\ntwo IDs so this is going to be uh\nactually should be oh no we're in the\nwrong spot here so we've got two IDs\nzero classes and zero tag selectors so\nour specificity is 200 come down to the\nnext one we've got a tag and we've got\nan ID so we have 1 01 for 101 and then\nyou get the point we just go down and do\nthe same thing for the rest so the most\nspecific one is the one with two ID\nselectors for a specificity of 200 and\nyou can see that the color orange is\nwhat applies to this paragraph element\nin the web page hopefully at this point\nit's making sense we know how to select\nthings we know how to determine the uh\norder of Precedence but there are a few\nother little gotas that we need to walk\nthrough and one of those is going to be\ninline Styles so if we were to write a\nparagraph element with some text we can\ncome down to the CSS and we can style it\nof course but we also have the option if\nwe give it this style attribute which is\njust an HTML attribute as we talked\nabout in a previous lesson we can pass\nin CSS style rules into this these\nlittle quotations so I can give it a\ncolor of blue and then maybe I can give\nit some padding of 10 pixels and we\nseparate this by these semicolons and we\ncan write as many rules as we want to\nnow the interesting thing about these\ninline Styles is they take precedence\nover everything else so even if we were\nto come in here and let's say that we\ngive it an\nID of you know paragraph or something\nlike that so let's go ahead and select\nour ID and let's give it a text color of\norange you would think that because of\nthis CSS importance diagram that this is\ngoing to be the most important Rule and\nthe color is going to be orange but\nobviously it's not it's blue and that's\nbecause any inline style is going to\ntake the utmost precedence over all\nStyles now there's one more thing that\neven makes it a little bit more\nconfusing and that is the important\nkeyword so if we came down into this\nstyle right here here and we put a space\nan exclamation mark and we typed\nimportant what that's going to do is\nit's going to override any style from\nany stylesheet and it's basically saying\nlike this rule right here is very\nimportant and I don't want to look at\nany of the Precedence rules that we have\ndefined within the CSS language so even\nthough we've got these inline Styles\nthis is still going to apply and even if\nwe came down here and changed this from\nan ID selector to a paragraph selector\nsame deal we're still going to get this\norange color because we've defined\nimportant on that CSS property now we\ncan use this important keyword on any\nproperty that we want I've been looking\nat the color property mainly just to\nstay consistent um and avoid confusion\nbefore we actually dive into all the\ndifferent properties but this can be\napplied to anything else so if you\nwanted to override the padding style in\nsay 50px or something like that if we\nput put it in just like this not going\nto change anything but if we put an\nimportant at the end you're going to see\nthat this text moves a lot because we've\nadded some padding so that's the whole\ndeal with important but I would\nrecommend that with both of these um\ntypes of selectors so the the inline\nselectors and the important selectors um\nuse them at a minimum in reality you\nalmost never want to use these inline\nStyles because it just clutters up your\nHTML now I've of course used it all the\ntime because it's very quick it's a\ngreat way to just quickly put a style on\nan element um and there's actually\nseveral CSS Frameworks that um do inline\nCSS only so you don't even have separate\nstyle sheets you just all you write it\nall in the HTML document so it's kind of\na contentious topic um among different\ncamps but in general you probably want\nto stay away from these inline styles\nfor now um just because it's going to\nclutter up your code likewise with the\nimportant style I think this is a more\nunanimous uh Viewpoint you should not be\nusing this important keyword unless you\nabsolutely have to and the only um\nexample of this that I guess I've\nexperienced that's a really good reason\nto use this important keyword is if\nyou've got multiple stylesheets so maybe\nyou're using a CSS framework or a UI kit\nLibrary that's got a bunch of like\nbuttons and modals and stuff like that\nthose are going to have predefined CSS\nStyles and if you want to override them\noften you have to use the important\nkeyword otherwise there's no other way\nto select them with enough specificity\nto override the existing Styles so once\nagain use the important keyword only\nwhen you have to um pretty good rule of\nthumb to stick with for the last hour or\nso or however long I've been talking\nhere we haven't really talked about CSS\nproperties yet we've been using the\ncolor property uh among a couple others\nbut there's hundreds of them that we can\npossibly use to both position the\nelements on the page and style them so\nremember CSS is all about layout and\nstyle and there's different properties\nthat allow us to do those two different\nthings so to start us off let's just see\na super basic example something that you\nmight uh have to do pretty often and\nthat is let's go ahead and take a a div\nput some text in it and then style that\nas a box with specific dimensions maybe\na background color and a border or\nsomething like that so here's how I'd\napproach that with CSS so first you have\nto make the div then you have to put\nsome text in there so some text and I\nguess what we want to do is first get\nthat background on there so I'll just\nselect the div since there's only couple\nelements here and we'll give it a\nbackground color of I don't know we'll\ncall it Navy we'll give the text color\nwhite\nwe want to give that div a width of say\n200 pixels and a height of also 200\npixels so we've got us ourselves a\nsquare with some text in it but maybe we\nwant to put that text in the middle of\nthat square so we can do that that would\nbe kind of a layout or a positioning uh\ntype property so one way we could do\nthis pretty straightforward is going to\nbe add a line height and set that equal\nto 200 pixels which is the same height\nas the square and then maybe we want to\njust set the text alignment to Center so\nthat's going to bring it to the middle\nof the square and then we can\nfurthermore put on maybe a box Shadow\nsomething like that so let's just uh\nwrite something out really quickly and\nyou'll see what happens is we get a\nlittle Shadow uh showing on this box and\nthen maybe we could even I don't know we\ncould put a border on it or something so\nwe could say border one pixel solid I\ndon't know something like green it's not\ngoing to look great but you see that we\nhave maybe we can put five pixels\ninstead of one to make it more visible\nand now you can see that we have a green\nborder on there so this is just a super\nbasic example but you can see how we use\nsome style properties and we use some\npositioning properties and this is\nactually not perfectly centered anymore\nand we'll talk about exactly why that's\nhappening when we get into the concept\nof the Box model but let's get rid of\nthis and as ask the question that you're\nprobably wondering and that is how do we\nknow what CSS properties to actually use\nI just went through that example really\nquickly and I had these on the top of my\nhead because I've just been doing it for\na while but when I first started I would\nhave no idea how to do what I just did\nand have to look up every single\nproperty that I was using and\nfurthermore I'd have to look up like if\nI wanted to do something I'd have to\ntype into Google how do I Center a\nparagraph element within a div or\nsomething like that so it's really\ndifficult without experience to know\nwhat properties to use and when and\nthere's really no great solution to that\nother than practicing and really um you\nknow just applying these Concepts that\nwe're learning in this crash\ncourse in my opinion the best way to\nunderstand the Box model better is to\njust look at it interactively and a\ngreat tool to use to do this is the\nFirefox Dev tools so we've talked about\nthis in Prior lessons um but we're\ncoming back here and as you can see I've\ngot this HTML document here in the\nbrowser and then what I've done is I've\nselected the content element that I've\njust made a single div and I've put some\ntext in that div and what I've done is\nI've applied these five uh styles that\nare pretty directly related to The Box\nmodel to see how these play out you know\non an actual web page so as you can see\nif we go to the layout section of the\ndev tools so we're up in inspector we go\nto layout and then we can scroll down to\nsee the Box model and this gives us an\nincredibly interactive way to see what\neach of these represent so if you go\nthrough and you want to see how you know\nwide is the content and how tall is it\nyou come into these little uh properties\nand you can hover over them and you see\non the left side of the screen it gives\nyou an outline of exactly what that is\napplying to furthermore we can see that\nwe've got some padding in here and again\nit's highlighted up on the screen it\ngives you a really nice uh outline of\nwhere that padding sits furthermore\nwe've got a border it outlines that\nreally nicely for us and then even some\nmargin on the outside now there are\nother tools that help you visualize this\nlike in Google Chrome so if we came back\nto Google Chrome you can see that if\nwe're just looking at a I don't know\nlet's go ahead and just select one of\nthese elements here then you can come\ndown to the Box model and you can kind\nof see what's going on but in my opinion\nit's just not quite as good as Firefox\nso that's why we're working in Firefox\nin the first place but tools aside what\nactually is the Box model well the Box\nmodel represents um these pieces that\nwe're looking at but more specifically\nyou have the content itself which is\ngoing to be you know text or just some\nspace that we've defined by a width and\na height and then outside of that\ncontent we then have some sort of\npadding or like it doesn't have to be\nset it could be zero padding but in this\ncase I defined 20 pixels of padding and\nthen outside of that we have a border\nand then outside of that we have a\nmargin and within this box model uh I\nmentioned that it tells us how much\nspace an HTML element represents within\nthe web page and the properties that um\nplay into that are going to be the width\nthe height the padding and the border\nnow the margin's a little bit different\nbecause while it does take up space it\ndoesn't actually Define the space taken\nup by that individual element it kind of\nadds like some space around the element\num so that if you have two elements and\nthey're squished together you can just\nkind of space them out a little bit so\nthose are the components of the Box\nmodel let's go ahead and dive in with\nsome um I actually made a code pen\nthat's going to allow us to\ninteractively play around with this box\nmodel so on my screen I've got a code\npen that's I've got some JavaScript\nwritten up in here you can drop down\nthese uh select uh elements and select\ndifferent CSS properties to apply to\nthis Orange um paragraph tag up here and\nwhy I created this is because when we're\ntalking about the Box model sure we can\nget into width height padding border\nmargin all that kind of stuff but what's\nreally confusing about the Box model and\nCSS in general is that based on the\nvalues that you're passing to certain\nproperties the rules of the game\ncompletely change and to highlight some\nof those rules um I thought it would be\nhelpful to put together this example and\njust visually walk you through like if\nwe switch a certain CSS property what is\nthat going to do to our HTML element\nthat we're targeting the first property\nthat I want to really touch on and and\ndig into is the display property so this\nis a related property to the Box model\nand once again the Box model is not just\none thing um but this is highly related\nto what we're talking about here and if\nwe scroll down to our um documentation\nI've just gone to mdn Technologies CSS\nthe reference and scroll down to the\nindex and we can find the display\nproperty somewhere in in here so let's\nscroll down see if we can find it uh\nhere's the d section and we'll go ahead\nand click display so it says this\nproperty sets whether an element is\ntreated as a block or inline element in\nthe layout used for its children such as\nflow layout Grid or Flex so there is a\nlot packed into this single property and\nhonestly it's probably the most um\nprobably the most complex property that\nyou'll deal with uh when you're writing\nCSS but we're going to dig into into\neach uh piece of it and you're not going\nto have to read all this documentation\nI'm just going to walk you through it so\nyou can see that there's a couple of or\nthere's there's a lot of different\nthings that you can pass to this\nproperty um but the main ones are going\nto be block inline inline block flex and\ngrid so if we came back to our Box model\nexample if we came down to the display\ntype right here and did the dropdown you\ncan see that we have all of these\ndifferent uh possible values excluding\nflex and grid and the reason we're\nexcluding those is because flexbox and\nCSS grid are going to be totally\nseparate videos um that are going to\nrequire a lot more explanation so for\nnow forget about those we're just going\nto focus on these ones right here so by\ndefault whenever you're dealing with\nmost HTML elements you're going to have\na display property of block but at this\npoint doesn't mean anything to us like\nwhat does block mean what does inline\nmean since flexbox and CSS grid are kind\nof out of the equation here we're just\nfocusing on block inline and inline\nblock display types and based on what\nyou set your elements they're going to\ninteract with the page and flow through\nthe web page a lot differently so it\nkind of changes the rules of the game\nnow by default each element is going to\nhave a certain type of display now most\nelements are going to have a display\ntype of block and you can see in this\nexample that the default display type of\na p element is block but if you were to\nlook at another type of element so if\nyou come up to the HTML that we've got\nhere it's a little bit messy but this\nspan element which is represented by\nthis green text that's actually going to\nbe by default an inline element so the\nquestion is how do we know which\nelements are going to be by default a\nblock and which which ones are going to\nbe by default inline and then\nfurthermore what do they actually do\nwhat what's the difference between a\nblock and inline element to understand\nthis um we've got this example laid out\nso watch what happens when I switch a\nblock element to an inline element so\nI'll drop this down I'll say inline and\nyou'll see that that orange um div is\ngoing to jump up to the line before it\nand it's going to share that same space\nwith the span element now that's the\nbehavior of an inline HTML element so\nwhat you'll see here is that since a div\nelement has a natural display type of\nblock what it's going to do is occupy\n100% of its container space and in this\ncase the container is 100% of the body\nHTML tag so it's occupying all of that\nspace and furthermore the height if we\ndon't give it a height specify it\nexplicitly it's going to automatically\ntake up the height of of the content\nwithin it so however large this text is\nis how big of a height this element is\ngoing to occupy the second thing about\nblock elements is that these elements\noccupy their own space they don't share\nlines with other elements so as you can\nsee here our div in Orange with the\norange background occupying all the\nspace and it's also on a different line\nthan this green um span element that's\nright above it and the span element\nactually has a default value of inline\nrather than block so different rules up\nthere but since this one is a block then\nno other element can occupy the same\nspace as it the next thing about a block\nelement is that it respects its width\nand height properties so that doesn't\nmake a whole lot of sense yet but you\nwill see what I'm talking about in just\na second so what I'm going to do is I'm\ngoing to drop down the content width and\nthis is just going to apply a 400 pixel\nwidth to the orange element so you can\nsee that it no longer takes the entire\nwidth of its container because we've\nexplicitly given it a width and then\nfurthermore we can give it a height of\n200 PX or pixels so now it's occupying a\nspace of 400 by 200 so what happens if I\nwere to do the same thing with an inline\nelement let's go ahead and see so I'm\ngoing to reset all of the properties so\nwe're going back to the beginning and\nnow what I'm going to do is come down\nhere and set set our div to be a display\ntype of inline and you can see when I\nclick that it comes up onto the previous\nline because inline elements actually\ncan share space they don't break to a\nnew line by default you'll also notice\nthat they don't occupy all of the space\nthey just occupy the size of the content\nwithin them so it's just occupying the\ntext that's within this div because\nwe've set it to that display type of\ninline now the last interesting thing is\nthat unlike a block element that obeys\num or adheres to its width and height\nproperties the inline element is not\ngoing to so even if we set the content\nwith to 400 pixels not going to change\nat all we can also try that with the\nheight set it to 200 pixels not going to\nwork so in other words if you set it to\ninline with and height CSS properties\nare not going to work on it so as you\ncan see depending on you know one proper\nproperties value you have different\nrules of CSS which can get pretty\nconfusing sometimes and it's why I'm\nspending so much time on it here now the\nlast one that we have not talked about\nis a combination between the two so just\na review a block element it's going to\ntake all the space of its container it's\ngoing to take a height of the content\nwithin it and it's going to break to a\nnew line and respect its width and\nheight properties an inline element is\ngoing to just be the width and height of\nthe content within it it's not going to\nbreak to a new line and um it's also not\ngoing to respect the width and height\nproperties if you try to set them now an\ninline block kind of adopts a couple\nattributes of both so the the main\ndifference if we were to switch this\ninline to inline block then the only\ndifference is now it's going to respect\nits width and height properties right\nnow we don't have those or I guess we do\nhave those set we have tried to set the\ncontent with in the content height but\nbecause we have an inline element right\nnow it's not respecting that those\nDimensions but the second we change this\nto inline block we're going to get those\nwidth and height properties back just\nlike we saw with the block but in this\ncase we can still make it in line so\nalthough it's broken to a new line here\nthat just happens to be the case because\nit's too large to fit on that line above\nso inline block just basically takes all\nthe properties of inline but instead of\nignoring width and height it now\nrespects those properties and takes that\nspace up this concept may not seem super\nimportant to you right now but I promise\nyou as you go through um knowing whether\nyou're dealing with a block element or\ninline or inline block is going to be\nsuper important and then further down\nthe road when we start talking about\nflexbox and CSS grid it becomes even\nmore important to understand this kind\nof stuff let's go ahead and reset\neverything here and the next thing that\nwe need to talk about are box model\nvariations so to this point we just\nlooked at the Firefox Dev tools and you\ncan visualize the Box model pretty well\nbut there's actually another way of you\nknow conceptualizing this box model and\nusing it just like the display property\nand all other CSS properties have their\ndefault values um the box type down here\nis going to have a default value of\ncontent box so that's what we're seeing\nright here but we can switch this to be\nsomething called border box which is\nbasically going to change um how all of\nthose properties so width height padding\nborder and margin it's going to change\nhow those relate to each other within\nthe Box model to understand this let's\ngo back to our Firefox uh Dev tools and\nlet's go ahead and calculate the total\nsize or space that this particular\nelement is taking up so the way that we\nwould do this is by adding things\ntogether because the default box type is\ncontent box so basically what we have to\ndo is if if we wanted to find the total\nheight of this element over here we\ncould of course just hover over it and\nwe can see exactly you know what the\nheight is but if we wanted to calculate\nthis we just come down into the Box\nmodel and we say okay what is the height\nof the content well the height of the\ncontent is going to be 100 pixels so we\nsay 100 and then we add on whatever the\npadding is on both sides so we add the\ntop padding and the bottom padding which\non both sides is going to be 20 pixels\nso we go 20 + 20 is 40 plus the content\nheight of 100 is 140 and then on top of\nthat we add the Border Dimensions which\nis going to be five pixels on the top\nand the bottom so in total the total\nheight or space and height that this\noccupies on the web page is going to be\n100 + 20 + 20 + 5 + 5 so that equals I\nguess 140 150 in total and then the\nmargin the additional 20 and 20 or 40\npixels that's not actually going to play\ninto the Box model that's kind of\nseparate from it it doesn't actually\nindicate how the total height of this\nelement so let's go ahead and see if we\ncan hover over this and you'll see that\nif we hover over the entire element it's\nshowing in pretty small text that the\nheight is 150 just like we calculated so\nagain 100 + 20 25 and five is our total\nheight and then likewise we can do that\nwith the width so we grab our content\nwidth which is 400 we add both of the\npaddings on the left and the right which\nis 40 so we got 440 and then we add the\nuh border which is 5 and five so we got\n440 + 10 is 450 and that's that's when\nwe hover over it is what the uh width is\ngoing to be so that calculation that we\ndid seems awfully complicated and it\nkind of is because we're having to add\nall these different components and\nconsider okay what's the left padding\nwhat's the right padding what's the left\nand right border you know it would be a\nlot easier if we could just Define I\nwant this element to be 400 pixels wide\nand 200 high and be done with it and\nthen have all the rest of the padding\nand border and stuff just be within it\nand that is what the Border box uh value\nof the box type property allows us to do\nso all we have to do is come to the\nstyles of the element and then we say\nbox type and we say we want border box\nnow if we apply that um it's not going\nto work because let me see why um\ninvalid property name oh I'm must be\nblanking on what we're actually using\nhere let me let me see what we're\ntalking about here here so box type so I\nwas totally blanking out it's not it's\nnot box type it is box sizing uh that\nbox type is just what I named it in our\ncode pen but if you say box sizing\nequals border box you'll see that this\nchanges just a little bit so let me go\nahead and uncheck this and watch the\ncontent up in the left top left you'll\nsee that something is going on here and\nit's really hard to tell what that\nsomething is when we just have one\nelement on on the page but what I've\ndone is put together another code pen\nthat really helps us visualize the\ndifference between the Border box and\nthe content box now stick with me here\nbecause I know it seems a little bit\nboring and why would we need to worry\nabout box sizing but when we start\nmaking grids and we start you know\nputting elements within other elements\nit's going to become really important to\nknow you know how much width do we need\nto give to Children element to fit\nwithin the parent containers so on and\nso forth so let's go ahead and dig into\nthat example that I created and you'll\nsee exactly what I mean so as I\nmentioned when we flip that box sizing\nfrom uh content box to border box it\nbasically takes the calculation of the\nspace that that HTML is occupying and it\nchanges it so now instead of taking the\ncontent height plus the padding plus the\nborder to get our total height we just\nlook at the height property and that is\nour total height and it's a lot easier\nto kind of reconcile in our brains and\nfurthermore it makes it a lot easier to\nput elements within other elements so as\nyou see on the screen here um what we're\nlooking at is a couple of divs and I've\ngot a child div and a parent div and\nwhat I'm trying to do is I'm trying to\nfit the child div within the parent and\nnot have it break out of its space and\nif you see on the right right side where\nwe've got the output of this you can see\nthat the content box we've got the\nparent container which has just a that's\njust a picture background that's not\nCSS um but that's the space that it's\noccupying and you can see that the child\nwith that border on it because border\nyou know has um an impact on the total\nsize of a Content box you can see that\nby adding that border we're breaking out\nof that parent container and that's\nreally going to be a problem when we're\ntrying to arrange elements on the page\nso furthermore if we were to add padding\nto this so um basically what this button\nis going to do when we click it is it's\ngoing to take the child element which is\nthe one with the border on it and it's\ngoing to add some padding to it so when\nwe click this you'll see that it makes\nit break out of our parent container\neven more and that's because when we add\npadding or a border to something that\nhas a sizing of content box it's going\nto add space to that element it's it's\nalways going to be additive now when we\ncome down to a border box type element\nit's not going to so what's going to\nhappen is the the content width and\nheight is going to be adjusted based on\nhow much border and padding there is so\nyou can see from the start we're already\nfitting the child element which is uh\ngot the black border right on top of the\nparent container and if we add some\npadding instead of getting larger it's\njust going to make the content within it\na little bit smaller so let's toggle the\npadding and you'll see that this text\nright here is going to come inwards a\nlittle bit but we're not going to see\nthe the Border break out of that parent\ncontainer so I understand this is a\nlittle bit confusing especially if\nyou're just starting out in CSS but I\nreally wanted to introduce this concept\nbecause you will stumble on this down\nthe road and you'll probably see like I\nsaid something like a CSS reset so let\nme let me go ahead and grab that code\nthat I'm talking about and show you\nexactly what I mean often times you'll\nsee in a CSS uh stylesheet the following\nthing and this is going to change the\nstuff over on the right a little bit but\nthat's not the point what you'll see is\nthat on the HTML element or the root\nelement they're going to change the Box\nsizing to border box so it's going to\ntake the root style and make it you know\nthis nice little handy border box where\nyou know the width is the width and the\nheight is the height and there's no math\ngoing on there and then these next\ncouple of rules um similar to what we\ntalked about where if you put a comma\nthere it will select multiple you know\nclasses or IDs or tags or whatever\nthat's what these are doing and this is\na wild card character that's basically\nsaying I want to Target every element in\nthis entire document and and then what\nit's doing is it's saying I want to set\nthe Box sizing property to inherit which\nis basically basically going to look up\nand say okay what is the root element\nset to whatever that's set to inherit\nthat down to all of the different\nelements on this web page so in effect\nwhat we call this is a CSS reset and\nit's going to uh change the default box\nsizing to this more um easy to\nunderstand border box you know box\nsizing all right I know we've covered a\nlot we've come a long way in this crash\ncourse so far we are not done yet but I\nwant to do a quick little review on a\nfew things so we've learned about how do\nwe select things um how do we select\nHTML elements we've learned about what\ntakes precedence when we have multiple\nCSS rules and we've learned about the\nBox model and what I want to review here\nis the Box model just go through a few\nthings that you should keep on the top\nof your mind so first off the Box model\ndescribes how much space an HTML element\noccupies the space is heavily influenced\nby that box sizing property that we just\ntalked about whether that's content box\nor border box so content box you have to\nadd the content width and height to the\npadding in the Border well with the\nBorder box you just take the width and\nthe height and that is the total space\nthat your HTML element\noccupies so the space is also or space\nand layout is also heavily influenced by\nthe display property so whether we have\na block element an inline element or an\ninline block element is going to\ninfluence where those elements are\nsitting on the page so those two\nproperties box sizing and display are\ngoing to really play together um\ndeciding how our web page is laid out\nand furthermore that display property\nhas two additional um values that we\nhave not talked about but will so\nflexbox and CSS grid which is going to\nallow us to make grids and it's going to\nallow us to space elements out really\nwell so that's going to be super useful\nto us in the future and finally the most\nimportant components of the Box model\nare height width padding border and\nmargin margin doesn't play into the\ntotal space it occupies but it does\ncontrol the space around it and then\nfinally all other CSS properties are\ngoing to be kind of supplemental to\nthese Core Concepts so whether we're\nstyling the text color or we're doing a\nback ground image or making a different\nfont those are all going to be just kind\nof supplementary to these Core Concepts\nwhat I would recommend is that you come\nto this uh little example that I put\ntogether um it's in the description and\njust click through all of these uh\nattributes and or not attributes but CSS\nproperties and see what happens with\ndifferent combination so change the\ndisplay type to inline and then try to\nset you know different different margins\nand paddings and stuff like that and\nyou'll see like okay the margin doesn't\nreally do anything when it's in line but\nthe padding does and then if we set this\nto block and then change the margin then\nit is going to do\nsomething aside from the display\nproperty and the Box sizing and a couple\nother things we just talked about\nthere's one other CSS property that\nyou'll use pretty often and it will\naffect the flow of the elements on the\npage and that's going to be the position\nproperty so this position property has\num I think about four or five different\npossibilities so let's go ahead and\nwrite those out um we need to make an\nunordered list and then put some list\nitems in let me get my notes here so we\ncan have a value of static we can have a\nvalue of\nabsolute we can have a value of\nrelative and then we can have fixed and\nthe last one is going to be sticky so\nwhen I'm talking about this uh position\nproperty all I'm saying is that if we\ncame down and targeted this unordered\nlist and then we gave it a position we\ncan say we want it to be fixed but what\ndoes this actually mean well this\nposition property is going to be really\nhandy when we have to uh lay out things\non the page and like make things like\nnav bars so that's what I'm going to go\nahead and show show you is an example of\nhow we might make a nav bar and show how\nthat will stay at the top of the page\nrather than scrolling down when we have\ncontent that exceeds the total height of\nthe viewport or the web page that we're\nlooking at a few notes I want to make um\nthis first one the static is going to be\nthe default value so if we came down\nhere and defined uh the position of this\nunordered list to be static that's kind\nof redundant because it's already going\nto that by default and then the other\nnote I want to make is uh the sticky\nproperty uh value is going to be a\nlittle bit newer it's unsupported in\nsome browsers and I'm not really going\nto touch on it because we can achieve\nvery similar things with this fixed\nproperty all right so those are the\npossible values let's walk through each\nof them and see what they actually do\nfor our\nHTML so the first thing I want to do is\ncreate a nav element so we talked about\nsemantic HTML in the prior lesson how we\nwant to use what the intent of that\nelement is and if we want to make a nav\nbar we should use the nav uh HTML tag so\nwithin that nav we can make some sort of\nlist which would be kind of a list of\ndifferent links or something but just to\nkeep it simple I'm just going to put in\nsome sort of heading so we'll just put\nin an H2 element and we'll say this is\nthe\nnavbar so you're going to see that pop\nup on the page and it's nothing special\nat the moment and actually let's go\nahead let's make this an H4 just to be a\nlittle bit smaller and what we want to\ndo in the CSS is we want to Target that\nnav element we want to give it a\nbackground color of blue we're going to\ntalk about those background styling\nproperties so bear with me uh here well\nwe don't know about them and then I want\nto make the height of this equal to\nwe'll call it 60 pixels so you can see\nwe have some sort of nav bar sitting up\non the page and I actually don't like\nthis blue let's go ahead and do Navy and\nthen change the color of the text to\nWhite just to make it look a little bit\nbetter and what you'll see is there's\nsome space going on around this we would\nyou know ideally want this to be at the\ntop of the page you know have no white\nspace around it and that's happening for\ntwo reasons by default this H4 element\nis going to have some sort of margin\naround it it's just a browser default\nthat um is set on this element we didn't\nset it but it's already there likewise\ncode pen has a default that puts some\neither margin or padding um within the\nbody element so anything that we write\nin this HTML is going to have a little\nbit of padding in there so that you know\nwe have this white space so all we have\nto do is just cancel that out by writing\na CSS rule so we'll start with H4 and\nwe'll just say we want zero margin on\nthere see what that does remove some of\nthe margin and then we want to come down\nand say on the body we want to have zero\nmargin I don't yeah I guess that's all\nwe needed we just need to zero out the\nmargin and now there's no space around\nthis so looking good there and if we\nwanted to Center this text within the\nnavbar we can use a little trick um we\ncan use the line height property to\nbasically say Okay I want this text to\nbe you know x amount of pixels tall\nand in this case we know exactly how\ntall the Navar is 60 pixels so what we\nneed to do with this H4 is make the line\nheight equal to 60 pixels and now we're\ngoing to see that go right in the middle\nand the last thing we'll do is on the uh\nleft side of that H4 element let's just\nput some padding on the left of say 10\npixels and that's going to push it out a\nlittle bit so I know we haven't talked\nabout a lot of these properties we will\nin a second but you can see how this is\nuh this nav bar is coming together but\nthe problem is right now if we were to\nscroll down on this page the Navar is\ngoing to kind of go away and we don't\nwant that since there's no other\nelements when I scroll you're not going\nto see anything so let's go ahead and\nadd a div that has a bunch of uh boxes\nin here so we'll say we want to div with\na class of box and then let's replicate\nthat several times down\nand then we'll come down here and style\nall the uh classes of box and what we're\ngoing to do is we're going to give it a\nwidth of 200 pixels and a height of 200\npixels and let's go ahead and give it a\nbackground color of uh I don't know\nGreen is fine for now you're going to\nsee just big one Big Blob because\nthey're all kind of smoos together um\nbut all we have to do is add some margin\naround it and those are going to be\nseparated out so the reason that I\ncreated those is just to give us more\nthan enough content so that we can\nactually see some scrolling action so\nnow you'll see the scroll bar here on\nthe right because we've got too much\ncontent for the visible screen and when\nwe scroll down what happens we're not\ngoing to see that Navar anymore and as\nyou're probably used to with most sites\nthe Navar needs to stay up top and the\nway that we do that is by using the\nposition property and we can just come\ninto the uh Navar right here and we can\nsay that we want the position to be\nfixed and what that's going to do is a\nlot of things that we don't expect and\nit's going to look a little bit\nintimidating for a second until we\nfigure out exactly what's going on so\nwhen we put it to fix it actually takes\nthat element out of the the flow of the\nthe HTML document so previously we\ntalked about how we have block elements\nand inline elements and if we change\nthose you know it kind of breaks them\nout of the flow of the content likewise\nwith the position fixed property now\nwhat's going to happen is we have to uh\nexplicitly set the width of this so\nlet's go ahead and set the width to be\n100% of its container and that should\nspan it across the entire uh web page\nhere another way that we could do that\nis a property called 100 viewport wi so\nVW and that is actually the same thing\nif we just came over to let's come over\nto our Dev Tools in Firefox and if you\nremember we could say window. inner\nheight and get some sort of value here\nand this means that the height of the\nvisible window here is 966 pixels we can\nalso get the inner\nwidth right here which is\n773 and if we were to you know change\nthis right here and run it again it's\ngoing to be a different value because\nthe visible width of this uh viewport\nchanged so these properties we know how\nto get them in JavaScript through the\nDom but we can also get them within CSS\nby using either 100 viewport WID or 100\nviewport height so VH so that is just a\nreally useful um thing to know I use it\nall the time especially when I'm making\nfull page layouts and nav barss and\nstuff like that now the last thing about\na position fixed element is that you\nhave to specify uh the offset that you\nhave to its parent container now in this\ncase the parent container of our nav is\ngoing to be the body element and that's\ngoing to be basically this visible\nscreen right here so all we have to do\nis come down and say from the top I want\nit to be zero pixels and that's going to\npull it up to the top and then since we\nhave it as 100% or 100% width we don't\nreally need to Define this other one but\nlet's go ahead and say we want it to be\nzero pixels from the left so at this\npoint what we can see is that as we\nscroll down our navbar stays at the top\nand it's considered fixed positioning\nthe last thing that we would probably\nwant to do is address this issue right\nhere our boxes or our main content has\nnow spilled under our fixed Navar and\nthe reason is because this fixed Navar\ndoesn't take up any space so unlike a\nblock element or even an inline element\nthat takes up some sort of space to the\nHTML document this navbar occupies zero\nspace whatsoever so to make sure that\nthe main content is below it at all\ntimes we have to give a margin on the\ntop of this um Box's div class so we\ncome down to the CSS give it uh Target\nthat class and then we say we want to\ngive the mar margin top probably should\nbe um a little more than 60 pixels so\nlet's just go ahead and say 80 pixels\nand that should bring all of our boxes\ndown and now it's working just fine so\nthat is the fixed positioning and it's\ngoing to be really useful when you're\ntrying to make a nav bar at the top even\nat the side on the right side or even a\nfooter at the bottom of the page that's\na really good use case for this the last\ncouple position uh property values we\ncan use so absolute and relative\npositioning um again we're not talking\nabout static because that's the default\nand sticky because that's kind of out of\nthe scope here but when we're talking\nabout um a fixed positioning what we\njust looked at that's going to set the\nelement it's going to remove it from the\nflow of the document and take up zero\nspace and it's going to be positioned\nrelative to the viewport which is always\ngoing to be the edges of the browser\nwindow so as you saw we said we want it\nto be zero pixels from the top so at the\nvery top of the viewport and zero pixels\nfrom the left so the very left of the\nviewport now with relative and absolute\npositioning it's somewhat similar we're\nstill pulling things out of the flow or\nat least with absolute positioning we're\npulling them out of the flow of the\ndocument but we're positioning them\nrelative to other elements so let's play\naround with relative positioning first\nso let me Target this first box right\nhere and what I want to do is I want to\ngive it another class\ncalled real position just to give it\nsome indication of what it's doing and\nthen within this I want to make another\ndiv and I want to say this will be\nabsolute position we're not going to do\nanything quite yet with that but I'll\nshow you what it does in just a second\nso let's focus in on this relatively\npositioned box which is this first green\nbox that we're targeting we'll come down\ninto our CSS and all we're going to do\nis give this relative position class a\nrelative position and what you're going\nto see here is nothing has happened yet\nbut what happens when we scroll is now\nthis first box goes on top of our Navar\nso only the first box though the rest of\nthem go behind it and that is a direct\nresult of setting that relative\npositioning on the element because what\nthat does like I said with a lot of CSS\nproperties setting one value will kind\nof change the rules of the game it's no\ndifferent here what this does is enables\na new property called zindex which\nbasically says okay we've got all these\nelements on the page what is the Z index\nyou know three-dimensional rather than\ntwo-dimensional so which one sits on top\nof another and when you put relative\npositioning or absolute positioning on\nan element it now has the Z index so now\nwhat we have to do is Define um what\nneeds to be on top of another so we need\nto come up to the Navar and give it a\nzindex of one to put it on top of this\nuh element once again so that's\nsomething really important to know about\nthe relative positioning but what\nrelative positioning really does is it\num as you saw it didn't really change\nthe actual position of that box but now\nwhat we can do is Define find these um\ntop left right and bottom properties um\non this element and it will change its\nposition relative to itself so that's\nkind of a a confusing topic but\nbasically the way you can think of it is\nif that green box is sitting right there\nright now if we give it a Top Value and\nwe say 20 pixels it's going to go down\n20 pixels\nand confusingly enough um since our I\nbelieve our margin was 20 pixels exactly\nit's going to blend it into the other\nboxes so let's let's go ahead and make\nthis 10 so that we see some separation\nstill but it basically takes the\noriginal position and if we add the top\nproperty it will go 10 pixels below\nwhere it was to begin with so it's a\nlittle bit confusing but it is a useful\nuh type of positioning um especially\nwhen you have some stubborn elements in\nyour HTML that you just need to get to\nmove just a little bit but you can't\nquite do it with uh normal CSS\nproperties and finally if you set the re\nuh the position to relative on a parent\nelement then you can set absolute\npositioning on the element within that\nparent element so what we can do is we\ncan look at this div that we put within\nthe relatively positioned div and we can\ntake this class and Target it with our\nCSS so we'll Target the absolutely\npositioned element which is not showing\nup yet but let's go ahead and give it a\nwidth of 20 pixels and a height of 20\npixels and give it a background color of\nsay orange so we're going to have all\nsorts of nasty colors here on the screen\nand what you'll see is that by default\nit's going to sit up there in the top\nleft corner of its parent and that's\nbecause we haven't positioned it yet so\nlet's give it the absolute positioning\nand what that's going to do is now we\nhave those top uh bottom right and left\noffsets enabled on this specific element\nbut instead of being an offset based on\nthe viewport so with this fixed Navar\nwhatever we pass to those uh properties\nis going to be in relation to the the\nedges of your viewport now we're going\nto be setting uh these\ntop right bottom left offsets based on\nthe position of the next highest element\nthat has relative or absolute\npositioning and if there's nothing above\nit that has those positionings then it's\ngoing to use the HTML element or the\nroot element so in this case we have\nsomething that is relatively positioned\nas the direct parent which is this green\nbox so if we were to come down to the\nabsolute position and say we want to put\nit 20 pixels from the top it's just\nmoving it down 20 pixels relative to the\nedges of this parent container and then\nwe can put it uh I don't know we can say\nfrom the right we want it to be 30\npixels so it's going to pull it over to\nthe right and offset it 30 pixels off of\nthat right Edge so that's what the\nabsolute positioning does and it has to\nbe used in relation with that relative\npositioning once again if you don't have\nan ele a parent element that is Rel ATIV\nL positioned so let's go ahead and\nremove this uh position relative and now\nit completely disappears and you\nprobably are asking yourself where did\nthis just go and the answer is it's I'm\nthinking it's probably behind the Navar\nso let's go ahead and give it a zindex\nof two which is greater than the Navar\nwhich has an index of one and now you\ncan see it pop up up here in the nav bar\nand the reason it's up there is because\nsince we don't have any relatively\npositioned elements as its parent or you\nknow grandparent it's positioning itself\nrelative to the viewport just like we\nsaw with the fixed positioning so now\nwhat we can say if we look at this\nabsolutely positioned element if we\nchange the top to be zero and the right\nto be also zero it's going to be\nperfectly up in the top right corner as\nyou can see here in the screen as you\ncan see these position properties can\nreally help you control where the\nelements sit on the page um and they're\nreally powerful layout properties\nobviously you're not going to be a\nmaster of them after just watching this\nbrief tutorial or demo but hopefully it\nexposed you to what's possible and when\nyou stumble upon it in the future or in\nthe code challenges you'll know exactly\nwhat's going on if I'm being honest\nwe've made it through the hardest part\nof CSS in the first part of this course\nthe remainder of this video in this\ncrash course is going to be a little bit\nmore fun a little bit more\nstraightforward and you're going to\nreally start to see the magic of CSS\ncoming into play so in the remainder\nwe're going to talk a little bit about\nCSS units so we've looked at them\nalready but uh pixels em REM units uh\npercentages maybe a couple others\nactually that's probably it and then\nwe're also going to look at color codes\nand um different color stylings so we've\nbeen using the color property to change\nthe text color throughout this tutorial\nbut we're going to get into you know how\ndo we Define different colors and you\nknow how do we do color themes and stuff\nlike that and then we'll dig into font\nproperties so how do we change the font\nthat's on the page and different font\nfamilies and import fonts and stuff like\nthat and then finally we will talk about\nbackground properties so how do we make\nan image as the background of your web\npage um and then at the end I'm going to\ntalk about uh writing shorthand CSS so\nthat's going to bring a few things\ntogether that um you may catch on to as\nwe write it but that'll be pretty\ninteresting and then um to cap it off\nI'm going to give you my kind of\nfour-step system of how I think through\num putting together HTML and then\nstyling that with CSS effectively so\nit's basically like get the layout first\nthen put the you know styles on and you\nknow iterate over that process before we\nget into the remainder of the CSS\nproperties some common ones you'll use\nwe have to talk about measurement units\nwithin CSS so you can see them on the\nscreen here uh pixels pretty\nstraightforward and common em and REM\nthose are font units uh like measuring\nhow large the font on the screen is and\nthen percentages that's going to really\nplay into some responsive design that\nwe'll talk about in a later video so\nwe'll start with pixels and it's you\nprobably already looked it up seen me\nusing it um It's relatively intuitive\nbut your computer screen is made up of\npixels and the higher resolution your\ncomputer screen is the more pixels you\ncan cram into it so there's it gets into\na pretty complex discussion when you\nactually start thinking about it too\nmuch um when you're looking at a web\npage and trying to calculate how many\npixels exist on that web page but if you\njust look at it as a way to explicit set\nthe dimensions of HTML elements it's\npretty simple so for example you saw\nthat we made this little Orange Box in\nthe top right corner we set it equal to\na width and height of 20 pixels so\nthat's obviously somewhat small and\nsomething that I wondered when I was\nfirst starting out is how do I get a\ngood grasp of how many pixels to assign\nto certain types of elements and it's\nkind of like riding a bike like as you\ngo through and write more and more CSS\nyou'll get a feel for what are kind of\nthe average pixel units that you'll be\nassigning to different types of things\nso for example I know that whenever I\nset padding or margin it's usually going\nto be in the range of 10 to 20 pixels um\nwhen I set a border radius it's going to\nbe in the range of four to 7 pixels and\nso on and so forth you kind of get a\nfeel for how large um a pixel is after\nyou've written CSS for a while next up\nI'm going to skip down away from those\nfont uh units so talking about em and\nREM I'm going to skip those for a second\nand talk about percentages now\npercentages are kind of the preferred\nway in a lot of cases to define the\nwidth and height of certain elements on\nthe page because when you go from a\ndesktop to a mobile device you're going\nto need relative dimensions rather than\njust saying oh I want this element to be\n500 pixels so a good example of this let\nme just take what I've got here on the\nscreen um and I'll go ahead and restyle\nthis first box so it's the relatively\npositioned box um I'll leave it how it\nis and I'm just going to say that I want\nthe width to be 600 pixels and what it's\ngoing to do is it's going to be wider\nnow and the problem here is that when I\nresize this screen and we go to a mobile\ndevice it's going to get cut off so as I\nmake this smaller and smaller you're\ngoing to see that that box just goes off\nthe screen completely and the problem\nwith that is you know you want to have\nresponsive designs so a better way to do\nthis is to say I want the width to be I\ndon't know we'll call it\n80% of the container so as we resize\nthis you're going to see that that\nalways stays 80% of the container that\nit's within and that's a great way to\nwrite response responsive web pages and\nagain we're going to be talking a lot\nmore about that responsive design in a\nseparate video but that's why\npercentages matter in the first place\nnow something about percentages that can\nget a little bit confusing is it's all\nrelative to its container so let's go\nahead and apply a few Concepts we've\nlearned so the question is how do we get\nthis little orange box back in the green\nbox so that we can play around with this\nwell all we have to do is set the\nposition back to relative so this Orange\nBox is going to now be relative to the\ngreen box so when I uncomment this\nproperty right here it's going to put\nthis Orange Box in the top right corner\nof the green box so at least I think\nthat's what's going to happen and that's\nexactly what happened so we now have\nthat there and now what I'm going to do\nis go ahead and reposition this so\ninstead of being in the top right we're\ngoing to put it in the top left so we'll\nput it in the top left and now what\nwe're going to to do is give it a width\nin terms of percentages rather than\npixels so what happens if I give it a\nwidth of 100% well now it spans the\nentire width of its parent element not\nthe entire web page because it exist\nwithin that parent element so it's going\nto occupy the width of the parent\nelement in other words if we were to set\num I'm just going to do this to make the\nmath a little bit more simple but let's\ngo ahead and set this green box equal to\nsay 500 uh pixels so the calculation for\nthis orange element is going to be 500\npixels * 100% is equal to 500 pixels and\nif we were to change this positioning to\ncall it 80% now it's going to be 80% of\n500 which is I guess 4 400 pixels yeah\nabout 400 pixels is what this is now\nso you can see it's relative to its\ncontainer not relative to the entire web\npage when we Define percentages we've\ntalked about pixels and percentages now\nlet's talk about em and REM units so\nthese are specific to font sizes and we\nhaven't really talked about fonts yet\nbut we have looked at text on the screen\nso why don't I go ahead and put some\ntext within our absolutely positioned\ndiv so now we've got some text here and\nwe can change the size of that text\nusing the font size property we'll talk\nabout that a little bit later but if we\ncame down into our absolutely positioned\nelement and we give it a font\nsize we can say it can be 16 pixels\nwhich is generally the standard font\nsize of a paragraph element so you won't\nsee it change because that's probably\nthe default that it already is but if we\nwent and changed that to say 18 pixels\nyou'll see that the text gets a little\nbit larger\nnow when we're talking about em and REM\nunits that's kind of the more preferred\nway to define text sizes within a web\npage and the reason being is if you're\ngoing around hunting and pecking for you\nknow trying to find all of the different\nCSS rules that you've defined font sizes\nin it gets pretty difficult you want to\nDefine it at one level so at the top\nlevel of the document and then\neverything else needs to be relative to\nthat assignment so what you'll generally\nsee with font\nsizes is you'll see um the HTML element\nso if we target the root element itself\nand we give it a font size you'll\ngenerally see it be set to about 16\npixels from there you will then Define\nelements below that root element in\nrelation to that uh 16 pixels so if I\ncame down to the absolute positioned\nelement so this text right here and I\nsaid that I want the font size to be one\nREM that means that it's going to be\n100% of the size of the text in the root\nelement or REM so in this case the root\nelement is HTML and the font size is 16\nso if we Define it as one REM then that\nmeans that we're doing 100% of 16 pixels\nor in other words 16 pixels and if we\nchanged this to say 1.2 Ram that would\nbe\n120% of 16 pixels which I don't think I\ncan do that in my head right now so um\nyou figure that out with the calculator\non your own but basically it makes it\nlarger than the default font size\nlikewise we can also use em units and\nthat basically means relative to its\nparent element so if we have this\nrelatively positioned element which is\nthe green box right here\nand we set the font\nsize right here to 16 or no we'll go\nahead and say something a lot larger so\nthat we can distinguish this so the\nrelatively positioned element is going\nto have a font size of 24 pixels and\nthen if we came down and we said we want\n1 em in the child element it's going to\nset it exactly equal to this 24 pixels\nbut if we change this back to REM units\nnow it's going to go back to the pixels\nbecause now it's relative to the HTML\ndeclaration which at the top is a font\nsize of 16 pixels so as you can see the\nbenefit of doing this and using these em\nand REM units is you can Define it one\ntime and then everything else is\nrelative to that so let's say that you\nhave your web app and you originally\nDefine it to 14 pixels and then you\nstart using the app and your users start\ncomplaining oh everything's too small\ninstead of going and changing every CSS\nrule all you have to do is go up to the\nroot element change that and then\neverything else is relative to that so\nthat would be the benefit of using em\nand REM units speaking of fonts um let's\ngo ahead and see how we can set custom\nfonts on our HTML so I'm going to get\nrid of all this because all these colors\nare driving me nuts um they're just so\nugly I can't can't deal with them\nanymore so let's get a clean slate so\nlet's go ahead and put a heading\nelement\nand some paragraph\ntext and then maybe one more um we'll\ncall this the original style text and\nwhat we'll do here is this will be the\noriginal ID and what we're going to\nstyle this as is we'll we'll put these\ntwo as a new font style and then we'll\nkeep this one as the original just as a\nreference point when we're dealing with\nfonts and my head at least there's about\nfour properties that are highly relevant\nthat you have to know the first font\nproperty that we're dealing with is the\nfont family which is going to Define\nwhat all of the text on your web page in\nyour web app what that's going to\ninherit and especially if you define it\non the body or even the HTML so the the\nwhole docu doent you can Define the font\nfamily and that's going to apply to\neverything within the document unless\nsomething is of course overwritten with\na font family on a you know more\nspecific element but let's go to the\ndocumentation I just searched for the\nfont family property uh you could also\ngo to technology\nCSS reference come down to the index and\nthen somewhere in the F here we can find\nthe font family looks like it might be\nat the very bottom though\nokay so here is the font family so\nthat's how you get there and as you can\nsee we are giving two values to this or\nyou don't have to but in most cases\nyou're going to give two values to this\nthe first one is going to be the font\nfamily that you're wanting to specify\nand there's a bunch of built-in font\nfamilies that you can use um let me just\nsee what we can find default font\nfamilies there's probably a\nresource um I think this is the one I\nclicked on before\nso w3.org it looks like this defines a\nlot of those default families that are\navailable in all your browsers so this\nfirst one is going to represent the\nfamily and then the second one or the\nsecond argument we we'll call it to this\nproperty is going to be the fallback\nfont so there's only a couple of valid\nfallback fonts and they're literally\njust like the\ntype of font so everyone knows like a\nserif and a Sans serif font and then\nlike there's a monospace font which is\nmore like a typewriter type thing um so\nthose will be fallbacks for if the\nbrowser doesn't support the first one\nthat you define but let's just go ahead\nand looking at an example in most cases\nyou're just going to put them in quotes\nthat first one because it'll be two\nwords so let's copy this one in that's a\ngood example um so we'll put that in\nthere and you'll see how this changes\nand I can comment it out you'll see it\nchange and then uncomment it and you'll\nsee the change of this font now the\nquestion is what happens if we want\nsomething more custom what if we want\nlike a really nice looking professional\nfont well there's a couple ways that you\ncan do this in CSS and a couple of them\nI'm not going to walk through but the\neasiest way is to go to Google fonts so\nlet's open up Google fonts and go here\nand then from from this page we can\nsearch through all different categories\nof fonts so let's say that we want only\nSarah fonts and then we can go down to\noh I guess different languages that\nthey're available in and uh different\nfont properties so let's scroll down and\njust pick something um see if I can find\none that might be a little bit popular I\nbelieve you can sort by trending or most\npopular so maybe we look at robo\nrobotto slab all right so that's a good\none and from here you just go down to\nall of these different font weights and\nstyles and you click select this style\nso in this in pretty much every case\nyou're going to select the regular um so\nwe'll click select that Style and what\nyou'll notice is that um in this link\nthat we're going to use in just a second\num it looks like it's just pulling in a\ndefault link but the second we add in a\ndifferent weight so let's say that we\nwant the boldest version of this font\nand we click select style now you're\ngoing to see that there's this little\nparameter in here that defines that we\nwant the weight of 400 and 900 and each\nadditional weight that you add is going\nto add a little bit more um size to this\nimport so you have to be careful with\nthat but for the most part grab a couple\nand you should be good so in this case\nwe have a regular font and we have a\nvery bold font and all we have to do is\ntake this link tag which is a valid HTML\ntag that we had talked about earlier and\nthat's actually how you import\nstylesheets uh to an HTML document and\nwe'll come back to our code pen\nplayground and come up to\nsettings um I believe\nHTML and then in this uh section here\nstuff for the head we can just paste B\nin those link tags and now those fonts\nhave been imported into our document and\nwe can access them with CSS now this is\na little bit different than how you\nwould do it if you were writing outside\nof the code pen environment so just for\na second I'm going to comment out all of\nthis\nHTML and show you exactly how you would\ndo this um on your own so you're going\nto need an\nHTML a body and then of course the head\nso this is our basic structure of an\nHTML document and then you'll of course\nhave a link um to your styles.css or\nsomething like that um so this will rep\nbe representing your stylesheet um not\nhere but in a different document it\nwould and then you can also copy in\nthose link tags that uh we imported from\nGoogle fonts so this is how you would\nbasically import a font to a custom HTML\ndocument that's outside of this\nyou know nicely programmed code pen\nenvironment so anyways let's get rid of\nthat we don't need that um we'll\nuncomment or not\nuncomment okay so we're back to the\nstart and now all we have to do is\nreplace these two uh lines with the\nimported font if you go back to robotto\nor Roboto slab you're going to see that\nthe CSS rules to specify this face\nfamily is right here so we can just copy\nthat come back here and replace this\nwhole line and now you'll watch the text\nchange to this new font so that's how\nyou would import a custom font it's\npretty much how I always do it for a lot\nof my web pages and apps is used Google\nfonts it's free and very easy to use so\nthat is the first and most important CSS\nproperty when we're dealing with fonts\nwe'll go ahead and give a font size of\n16 pixels because we're on the root HTML\nelement and that is a very standard\nvalue to be giving um an entire web page\nnow what gets interesting is the font\nweight property so font weight\ndetermines the thickness of that font\nbut the interesting thing about this one\nis you can only use the weights that\nyou've imported if you're using\nsomething like Google fonts so if you\nremember when we were looking at this we\nonly imported a weight of 400\nand 900 which means if we give the um\nlet's go ahead and Target a specific\nelement so in this case uh let's let's\nsay this will be thick\nfont and Target that by its ID and then\ngive it a font weight of\n900 and you're going to see that this\ngoes bold because we're specifying it to\nbe 900 but since we only imported that\none weight if we change this to say say\nyou know 700 it's not going to change\nanything on the page and the reason is\nwe didn't import it but if we were to\nchange this back down to 400 then it's\ngoing to go back to normal because we\ndid import the 400 or regular font size\nso that's that's how the font weight\nproperty is related to those Imports\nthat you will do the last thing we'll\ntalk about is line height so let me put\nin a paragraph tag and here let's go\nahead and copy some laurum ipsum font\nwhich is basically just generic text\nthat we can use and what you'll see on\nthe page is very normal looking text now\nif we change the line height so if we\ntarget the paragraph elements and give\nit a line height of call it 30 pixels\nyou're going to see that it spaces this\nout a little bit more than the original\nand I believe the default line height is\ngoing to be the same as the font size\nbut I could be wrong on that I I would\nhave to check but basically let's let's\nsee we can actually check that so we'll\ngo one\nREM and it looks like no it's not the\nsame as the font size because it\ndefinitely got smooshed a little bit\nmore um but anyways line height is\nbasically going to give you the space\nbetween the lines of text when there's\nmultiple lines of text we are getting to\nthe end here we have a couple more\ntopics to cover and one of those is\ncolors so there's not a whole lot to\nknow about colors but um I I do want to\nwalk through some of the basics so far\nwe've been talking about just basic you\nknow colors so if we came into our\nparagraph element here we give it a\ncolor of say red Now red is pretty easy\nto understand it's the color red but\nthat is a built-in CSS property and I'm\nwondering if there's a resource that has\nall of those potential properties so if\nyou go to the mdn\ndocumentation go to the color property\nso the color CSS property and then I\nbelieve there should be some sort of\nlist of all of the possible colors that\nyou can use let's see if we can find it\nhere so it looks like here's a few of\nthe color keywords that you can use um\nthis looks like a list I don't know if\nthis is exhaustive uh of all of the\npossible ones but it sure looks like it\nso you can just go to uh color value is\nwhere that is on the documentation but\nthat's what we've been looking at so far\nand there are also other ways that you\ncan Define colors so you can Define it\nas a hex or hexad decimal you can Define\nit as RGB or you can Define it as\nrgba so we'll walk through all of these\nand I'll show you exactly what they do\nto help us out a little bit we're going\nto use this built-in Color Picker um\njust type in RGB to hex or vice versa\nand usually comes up on Google there's\nother tools that you can use as well uh\nlet me zoom in so that we can really see\nwhat we're dealing with here and you'll\nsee that in this Color Picker we can\ndrag to look for different colors we'll\njust stop here on this green and what\nyou'll see is all these different\ncodes so we could just type in to our\nCSS we could just say we want green or\nwe want something like light green those\nare both valid values but if we wanted\nto be more specific and go with a color\ntheme we're going to have to use\nsomething a little bit more complex and\nthese color codes allow us to get to a\nvery finite amount of detail with our\ncolors and what you need to understand\nis that each color is built with red\ngreen and blue which is defined by this\nRGB value so the first number is going\nto be red then green and then blue now\nthese numbers go from 0 to\n255 um I believe that's one bite\num is how much space that takes up in\nmemory and each different combination of\nthose bite values are going to give you\na different color based on the blending\nof those uh red green and blue values\nand if you were to take these three\nvalues and convert them to heximal\nnotation which is just a numbering\nsystem you get this code right here so\nthe 128 would be represented by 80 in\nhexad decimal 235 would be represented\nby E and B in heximal and 52 uhoh just\ndrag something around there 52 will be\nrepresented by 34 in a heximal so these\nare the same exact thing just expressed\nwith different notation now there's one\nother thing that we can do and that is\nadd an rgba value so let's go ahead and\ncopy this hex code in so we'll copy that\ninto to our our color for text color and\nyou'll see that it changed a little bit\nand that works we can also come back and\ngrab the RGB values and then in our CSS\nall we need to do is type RGB put some\nparentheses and separate those values\nfrom 0 to 255 by commas now there's one\ntrick that you can use if you add an a\nat the end of the RGB you can Define one\nmore value within this I I guess array\nor whatever we're calling this and this\nrepresents the opacity that we're going\nto Define so if we wanted 100% opacity\nbasically the same color we give it one\nand that's going to give us the same\ncolor but if we wanted 50% opacity you\ngive it 0.5 and you can see how this has\nbeen kind of grayed out we can actually\nuse our um our new skills of absolutely\npositioning an element um let's go ahead\nand write a div in here and we'll say uh\noverlay and come down and style this so\nwe'll say overlay is going to be a width\nof 200 pixels a height of 200 pixels and\nthen we're going to give it the same\nexact color right here so and then maybe\nthe P color will just be uh Black by\ndefault so that we can see it really\nwell um and\nthen this overlay is not showing up and\nwhy is it not showing up hold on oh that\nis because we've set the color we need\nto set the background color to actually\nget something to show up now this is not\nover the text yet but all we have to do\nis say\nposition absolute and then give it Zero\nfrom the\ntop\nand there we go so we've now got this\nbox sitting on top of this text and you\ncan see that we can actually see the\ntext through it because we've given it\nthis 50% opacity value if we flip that\nto one it's going to disappear because\nit's 100% opacity and it's covering all\nof the text so that's what the\nrgba um CSS value is able to do with\ncolors now speaking of colors um I\nrecommend going to Adobe color which is\na great place to kind of explore\ndifferent color themes and it will show\nyou like all of the different\ncomplimentary colors to certain codes\nand you can even go to explore or go to\nTrends and you can look through\ndifferent color themes that people have\nput together um for different you know\nniches so graphic design illustration\narchitecture game design and you can go\nin and click on these pallets and it\nwill give you all of the hex codes that\nyou need and you can set those up in\nyour Global CSS values and then your\nwhole web page is going to be themed in\na uniform way all right let's get rid of\nall this stuff because we are ready for\nthe uh I think the last category of CSS\nproperties that you you'll probably need\nto be aware of and that is background\nproperties so far we have talked about\nbackground colors and um you've seen me\ndo this with these boxes where I'm just\ngiving them background colors so that we\ncan see them on the screen but you can\nalso do background images and with\nbackground images there are a couple of\nproperties just like we talked about\nbefore certain properties set to certain\nvalues kind of change the rules of the\ngame for the rest of the the page and\nthat is the same deal with background\nimages so I'm going to walk you through\na couple use cases with backgrounds and\nhow you might see them you know in in\nreal life when you actually start\nputting together web pages the first one\nis simple like I said we've already\ntalked about it and let me just go ahead\nand make some simple text on the page\njust so just so we have something but\nbut what we're going to Target is the\nbody element so that's the whole web\npage and I'm going to give the body\nelement a background color of green and\nyou're going to see on the screen that\nit turns completely green so that is the\neasiest property the next thing that you\ncan do rather than just making a a solid\ncolor background is you can put a\nbackground image on your web page it's\nactually pretty common for like a\nhomepage here's my Golf website you'll\nsee that there's a background image\nthere and um this background image I've\nactually pulled this out um into its own\nlink so that we can use it within the\ncode pen environment so let's copy this\nlink so that we have it ready and now\nwhat I'm going to do is put a div up\nhere and we're going to call it the\nmain\ncontent and then we're going to put the\ntext in there just so that we have\nsomething to see and from here we will\ngrab the main content and we're going to\nsay background rather than background\ncolor equal to something like blue we're\ngoing to say the background image is\nequal to a URL um and I guess I copied\nin the wrong thing here so let me grab\nthat link\nagain and now we have a URL so the\nproblem here is it's only taking up this\nsmall amount of space and that is\nbecause we have not defined the size of\nthis main content\nso all we need to do is say the width of\nthe content is going to be 100 uh% of\nthe viewport width so again that's the\nwhole visible screen is 100% of that\nwidth and what you'll see is there's\nstill some gaps here and that's because\nthe code pen environment automatically\nadds some margin um around the body so\nwhat we need to do there is reset that\nso we'll go to the body and give it a\nmargin of\nzero so that should bring it in line\nthere and then we have this P element\nwhich has some sort of margin on it too\num which is adding this top margin so\nwe'll make the P margin equal to zero as\nwell and now we have this at the top of\nthe screen so if we come down here and\ngive it a height of 100% of the view\nviewport height now we're going to see\nthis image across the whole page now\nobviously this image is not showing what\nit is like this is who knows what this\nimage is and we need to position it a\nlittle bit differently so the way that\nwe do that is we'll use a property\ncalled background size and we'll go\nahead and set that equal to cover so\nthat's going to cover the whole um\ncontainer that we have it as a\nbackground for and then we want to make\nsure that we specify the background\nrepeat to be no repeat just in case a\nscreen size um you know is so big that\nit has to repeat and then finally I\nthink we need to add in uh the\nbackground position which is going to\ntake two values it's going to say I\nthink you can just say like bottom right\nor something like that so let's go ahead\nand look that up if we go to the\ndocumentation and type in background\nposition so it says the background\nposition sets the initial position\nposition for each background image it's\nrelative to the position\nlayer okay and you can see that there's\nmultiple different values that you can\ngive it you can give it values relative\nto different parts of the screen or you\ncan just say position it at the top left\nor Center um that kind of thing so what\nI will do is just position it to the\nright um bottom right works but we can\njust position it to the right because\nour golfer here is on the right side and\nwe need to pull it over so that you can\nsee uh him in the background so this is\nour basic background image and then from\nhere you can put text on the screen so\nwhat if we um went up here and said on\nthe body we want the color of the text\nto be white so that we can see it and\ninstead of paragraph text maybe we have\nlike an\nH1 welcome to my site or something like\nthat and then of course we need to\nremove that margin because it's messing\nit up um and we'll come down here give\nit some margin on the top which will be\n50\npixels actually no we don't want to do\nthat we want to do some padding on the\ntop so that it\ndoesn't bring the whole image down and\nthen maybe we'll say on the body that we\nwant the text alignment to be Center so\nthat's centered on the screen so we have\na a welcome message says welcome to my\nsite and you've got a nice background\nimage there's obviously a lot more that\nyou can do here um I didn't even scratch\nthe surface on all the different things\nyou have to think about when you're\nputting together a background image and\ntrying to actually get elements like\nthis uh piece of text on top of it so\nthat gets a little bit more complicated\nbut hopefully this is just a nice\noverview of those background properties\nto see what's possible\nall right so the last thing I'm going to\nsay about CSS properties is that there\nis a short shorthand way to write them\nin some cases so to this point you've\nseen me just writing these properties\nand you know not really explaining okay\nI'm I'm giving it a margin of zero right\nhere but what does that represent you\nknow is the zero margin going to be a\nmargin on the left the right top bottom\nall four of them and the answer is it's\ngoing to be all four of them because\nthis margin property is a shorthand CSS\nproperty and what you can do um Let me\nlet me go ahead and get us a better\nexample here because this is not a good\nexample um so let's make a\ndiv and Target that div give it a width\nof 200 pixels a height of 200 pixels and\na background color of green just that we\nhave something on the screen and then\nfrom here um actually let's let's make a\ncouple of these so that we see two of\nthem and you can see that they're\ncombined together because there's no\nmargin but if we were to put some margin\non this we can say the margin is just 20\npixels and be done with it or we could\nsay that the margin top is going to be\n20 pixels so that it doesn't space it\nfrom the left side of the screen so this\nmargin property when it's defined just\non its own is a shorthand property you\ncan give it one value\nwhich makes the margin on all sides\nequal or you can come in here and you\ncan give it four different values so let\nme make sure I got this right but the\nfirst value should be the top margin\nthen you have the looks like the right\nmargin then the bottom margin and\nfinally the left margin so you can\nDefine different values for you know top\nright bottom left instead of writing it\nall out like this so we could say um\nthis this line right here I'll comment\nit out and that's going to be equivalent\nto this so we'll say margin top is 20\nmargin right is 5 pixels margin bottom\nis 10 pixels and margin left is 20\npixels so these four properties combined\ntogether is the same exact thing is this\none shorthand property so you'll see\nthis very commonly in CSS where um\nanother great example of this is border\nyou could say border is one pixel solid\nblack and you'll see that border pop up\num or not very well let's make it five\npixels so you can see it better and this\nis a shorthand property so what we could\nhave done is comment this out and say uh\nborder size is 5 pixels the Border color\nis black and then the Border I believe\nStyle is solid and it looks like I got\nsomething wrong here cuz the size is all\nmessed up but let's let's look it up in\nthe documentation so we'll type in\nBorder and it says that it sets the\nvalues border width border style and\nBorder color so that's what I missed\nit's not border size it would be border\nwidth and now you'll see the same exact\nresult as you saw um let's go ahead and\ncomment this out just so that I can\nprove this out\nso we'll comment out those three\nproperties and comment this one back in\nand the shorthand property has the same\nexact effect so shorthand properties are\nreally quick and easy way to write CSS\nyou'll kind of get used to them and just\nwanted to let you know that that was\ngoing on because I know it's kind of\nconfusing when you see all of these\ndifferent properties being written and\nnobody explains oh what we can Define\nthe margin right using like three\ndifferent ways of doing it\ncongratulations if you've made it this\nfar and know it's been probably a couple\nhours at this point of me talking about\nCSS and properties and Concepts box\nmodels all that kind of stuff um but\nhopefully that was a good introduction\nfor you and at this point we're going to\nkind of prep ourselves for the HTML and\nCSS challenges that we uh looked at at\nthe beginning of the video so I'll be\nwalking you through those on video in\nseparate videos not this one but before\nwe get there I want to introduce the\nfour-step method that I go through when\nI'm writing HTML and CSS because it was\nnot offered to me when I was first\nstarting out or I didn't find it on my\nown and I think it would be really\nhelpful to you because it took me a\nwhile to figure this out and uh really\nget into a good routine so this is a\nsystematic way to write CSS in HTML and\nthe first step is to figure out what you\nwant what you want to put on the page\nand often times that comes in the form\nof a design now we talked about we're\nnot going to go through wireframing or\ngraphic design in this course we're just\ngoing to use we're leveraging existing\ndesigns that have already been built but\nthat is a huge huge concept here you\nnever want to go into it where you have\nno idea how you want to design the\nvisual elements on the page and try to\nwrite the code and design it all at the\nsame time it's really confusing and I've\ndone it too many times and I would not\nrecommend it now once you have the\ndesign or at least some sort of of\nwireframe that gives you a sense of\nwhere you want to put the elements you\nhave to think of step two which is how\ndo I want to arrange those on the page\nwith HTML now this is a highly intuitive\nstep you're going to get a lot better at\nthis with experience and it's much\neasier after you've written a couple of\napps to understand oh I need to put you\nknow a div container here and then I\nneed three div containers within that\nmain div container and then within each\nof those contain containers I probably\nneed some text and then maybe another\ncontainer so you'll get a lot better at\nrealizing you know how to use divs and\ndifferent semantic HTML elements on the\npage um as you go along the third step\nis how can I use CSS to achieve that\noutliner layout and this is where all of\nthe stuff we talked about in this crash\ncourse come into play if you don't know\nsome of these properties and you know\nhow they work and how they you know\ndisrupt the flow of the elements on the\npage then you're not going to be able to\ndo this very well so like step number\ntwo you'll get a lot better with\npractice on this one and then finally\nstep four I really think this is\nprobably the easier uh step of this\nprocess and that is how do I want to\nstyle these elements so once you've got\nthem laid out on the page styling them\nis rather trivial you're just putting\ndifferent colors and some padding maybe\nsome margin that kind of stuff on them\nmaybe some text decoration or you know\nfont sizes that kind of stuff and it's\npretty trivial compared to getting the\nlayout correct in the first place so to\ngo through this process I'm going to\ngive you a short example here at the end\nof this video and then make sure to keep\nit in mind as we go into the challenge\nvideos and I'll be sure to kind of\nadhere to this process as we're building\nthose frontend Menor um code challenges\nso here is what we're going to build\nwith this four-step method\num this is we can think of this as the\ndesign so let me go ahead and change the\nview so that it's uh very clear so we're\ngoing to go to full page view and you'll\nsee the design that we're trying to make\nit's nothing fancy but just looking at\nthat visual design how can we lay that\nout in HTML so we have to decide you\nknow looking at this do we want some\ncontainers built out you know it looks\nlike they're next to each other how do\nwe accomplished that with\nHTML so let's go back over to our\nplayground and start writing this out\nI'm going to actually put these side by\nside so that we can see them a little\nbit\nbetter when I look at this design the\nfirst thing that I see is two div\nelements so I'm thinking I'm definitely\ngoing to have two divs and usually when\nI put something together with HTML I\nhave a container div so kind of like the\noverarching parent to all the elements\nso what I'll do here is start us out\nwith a template we'll say div. container\nand press tab to make a div with a class\nof container and then from here I want\nto make a div with a class of box one\nand then I want to make another div with\na class of box two so we've seen this\nbefore so if you remember you might be\nable to kind of figure this out but this\nis the basic structure that I think I\nwant um to lay that out and of course\nthere's two pieces of text so in each of\nthese divs I'm going to put some sort of\nH2 we'll call that box one and then we\nwill say we want some text in there and\nthen we can just copy this down into box\ntwo as you can see on the screen on the\nleft this looks nothing like the one on\nthe right and the reason I knew to put\nall of these uh HTML elements in this\nfashion is because I have experien doing\nit and I just know that we have a\noverarching container each div is going\nto represent each box and then there's\ncontent within each of these divs that\nwe can you know Center and style a\nlittle bit later so let's go back to our\nour four-step process here um we already\nasked how we want to arrange them that's\nthe design itself so what we're looking\nat over on the right we said how does\nthis Arrangement look in the form of\nHTML we already wrote that out it\ndoesn't look anything like it yet but it\nwill and now we have to say how do we\nuse CSS to imagine that layout that we\nsee on the right so from here we have to\ntake CSS and get these boxes um I need\nto label this one correctly we need to\nget these two boxes and put them next to\neach other now what I'm most comfortable\nwith is flex box I know we haven't\nlearned it and that's going to be a\nseparate video but I'm going to go ahead\nand use it here just to give an example\nand how you use that is you basically\ntake the main container and you\ndisplay that as a flex item and what\nthat's going to do is it's going to put\nthe boxes right next to each other now\nwhat you have to do is for each of the\nboxes we're going to give it a\nwidth or no we're not going to do that\nwe're going going to give it a flex\nbasis of\n50% and we'll give that also to box\nnumber two so Flex is going to be 50%\nthat's basically going to make them\nequal to each other and then we need to\ngive them a border so that we can see\nwhat is going on and I think it's about\ntwo pixels is what the Border we're\nlooking for\nis so we've got the Border here on box\nnumber one we can copy this down to box\nnumber\ntwo we want to make that one\nblue okay and the next thing that we\nwant to do is probably give some margin\naround it because currently they're\nright next to each other so we'll give\nit a margin of say 20\npixels and down here we will give it a\nmargin of 20 pixels as\nwell looks a little bit big so let's\nreduce that to 10 on both of\nthem okay that's looking a little bit\nbetter and then with the box one and box\ntwo we probably also need to do text\nalign Center so that the text is all\ncentered we're going to refactor this in\njust a\nsecond so now we're centered and at this\npoint we're pretty much spot on with our\nlayout so we need to go to the last step\nwhich is how should each element be\nstyled we already have a border so\nthat's kind of part of the process but\num the only thing that we need to do\nreally is give it a color of blue for\nthe text on the right and then give it a\ncolor of green for the text on the left\nand there you go um we have a pretty\nsimilar layout I think partially why it\ndoesn't look exactly the same is cuz\nit's smaller but maybe we gave this some\ndifferent dimensions but I'm happy with\nthis we accomplish kind of what we\nwanted here um the only thing that I\nwould do is refactor this CSS because\ncurrently you can see we've set Flex\nequal to 50% on both of these we've also\nset the text line and the margin um so\nwe can combine those into one selector\nso put a comma there select both boxes\nand then get all of these common\nproperties that apply to both of them in\nhere so we'll grab the margin\nand the flex\nbasis and then we go ahead and delete\nthat from these properties or from these\nselectors and it should look the same\nnow so this is how you would go through\nthat four-step process to solve an HTML\nand CSS\nchallenge let's jump in this is what\nwe're going to be building here it's\ngoing to be a nice way to practice uh a\nlot of those basic CSS and HTML skills\nthat we've just learned um there's\nnothing crazy going on here um but it\nwill give us that good opportunity it\nlooks like we've got a few different\nfont Styles um font weights a little bit\nof color in here and then even a button\ndown here that we can style and maybe\nadd a pseudo class uh hover effect to so\nit'll be a great comprehensive\nintroduction to writing HTML and CSS\nthis code challenge comes from the\nfrontend Menor website which is a great\nresource that you can scroll down and\nsee a bunch of professional uh web\ndesigns for different things that will\nchallenge you to use uh different skills\nin HTML CSS and JavaScript the one that\nI picked here is rather simple it's kind\nof on the the easier side of this um but\nwe are going to walk through a couple\nothers so as you see this Grid in the\ncrowdfunding product page\nthose two will be coming up in future\nvideo challenges for this video I've\npurposely not looked at this um yet and\nfigured out how I'm going to do it so\nthis is completely Raw and Uncut I\nreally want to just show you my thought\nprocess we talked about this four-step\nsystem for writing HTML and CSS in the\nactual CSS crash course and I really\nwant to apply this and walk you through\nmy thought process um of how I take a\ndesign such as this one and think about\nhow do I lay it out how do I style it\nand what resources am I using to do so\nI'm not the best at writing HTML and CSS\nin the world far from it there are\nplenty of people that could come in and\ncritique what I'm about to do uh in many\nmany ways but my goal here is to show\nyou just a realistic look at how we go\nabout building something like this\nconsistent with what we've been doing uh\nin the prior videos we're going to be\nusing the code pen environment so you\ncan start a blank code pen document and\njust follow along as we go through this\nchallenge I think our first step is\ngoing to be going over to the frontend\nMenor website um we don't need this page\nanymore but if we go ahead and click the\nvisit challenge hub for the single price\ngrid component which I'm going to leave\na link in the description to this so\nthat you don't have to go searching for\nit you'll find uh some starter files a\ndesign file that we don't need this is\nmore on the side of you know if you're\nusing figma or sketch or even Photoshop\nor something like that to mock up the\ndesign it might be useful to see what\nare the components and layers going on\nthere but like I said in the crash\ncourse this is not about graphic design\nor wireframing we're solely trying to\ntake a pre-existing design and turn it\ninto\ncode scrolling down you can see that\nthis is the Newbie uh difficulty level\nso it should be relatively\nstraightforward forward to solve um\nalmost 10,000 people have tried it and\nabout 2,000 have finished and I fully\nintend to be uh in this bottom category\nas should you and the brief that we're\ngiven is pretty simple so it says your\nchallenge is to build out this pricing\ncomponent getting it looking like the\ndesign okay you can use any tools that\nyou'd like um we're going to use vanilla\nHTML and CSS we're not bringing in\nanything additional except maybe a\nGoogle font or something like that um it\nsays your users should be able to and\nwhat I want to call out right here is\nthis is called a user story and we've\ntouched on it previously within this uh\ncrash course when we built the HTML\nchallenge but a user story is something\nthat you will write down in the\nrequirements Gathering phase of building\na web page or a web app and it's\nbasically saying okay let's come up with\na list of things that the user should be\nable to do if this is implemented\ncorrectly so the first requirement is\nthat we should be able to view the\noptimal layout for the component\ndepending on the device's screen size we\nhave not yet talked about responsive\ndesign that's I believe going to be the\nnext video in this series um so we may\nleave this part out I'm not quite sure\nyet we'll see how long it takes to build\nthe first part but basically what that's\nsaying is as we resize the screen or if\nwe look at it on desktop or for our\nmobile device it should you know look\ngood to the user the second one is you\nshould see a hover State on desktop for\nthe signup call to action so in other\nwords what they're talking about is this\nuh button down here when we hover over\nit we should see some sort of\ninteractive thing happening whether that\nbe the button gets larger or it changes\ncolors opacity something like that so we\ncan get a little bit creative with what\nwe're doing there it says download the\nstarter code go to the me file this will\ngive you further details the style guide\nwill give you the colors and the fonts\nthat we need to use so I'm going to go\nahead and open this up you'll see that\nwe have some folders and some files if\nwe open up the read me it's written in\nmarkdown um which is kind of hard to\nread here so what I'm going to do is\nopen all of these files in a tool called\nVisual Studio code which is the code\neditor that we will eventually be using\nwithin this series but for now like I\nsaid we're going to be using this code\npen environment because it's a lot more\num interactive and you can see the\nchanges happening in real time so let me\nget that opened and then we'll look at\nsome of these files I've got all the\nproject files open in Visual Studio code\nwhich again you'll get very used to as\nwe go throughout this course um but\nbasically we're just using it to see the\nthe files for now and if we open up read\nme you'll see that it's written in\nmarkdown if you don't know what markdown\nis just go Google it real quick to\nunderstand it basically takes um these\nlittle two hashtags for example and this\nwould become an H2 element within HTML\nso I've got it open in the preview it's\na little bit easier to read than you\nknow the stuff going on over here um\nmost of this stuff is not new the one\nthing that I'll talk about here is uh\ndown here in the deployment section so\nthey recommend that you use Git Version\nControl um to host this and push it to\nyour reposit itory and deploy it um with\nforell now we're going to just put this\nup on GitHub pages and we're not going\nto actually be using the git utility\nbecause we haven't covered that in the\nseries yet um but I do want to you know\ngive you a way to see it live on the\ninternet and GitHub pages is a really\nsimple way to do that I'll show you\nexactly how that works um but it will\nnot be the focus of this tutorial the\nstyle guide we don't really need to go\nthrough this uh all that much right now\nbut we'll be referring back to it when\nwe have to figure out okay what Font Are\nwe going to use how large is this card\ngoing to be um and what colors are we\nputting in there so this will be a good\nreference so let's close that out and I\nthink everything else looks like we have\ndesign these are just uh preview images\nto reference and then images we just\nhave a favicon which is going to be kind\nof up in the browser Tab and finally we\nhave this get ignore file which has to\ndo with the Git Version Control utility\nwe're not going to talk about that and\nthen finally in\nindex.html which has some predefined um\nHTML boiler plate to start with but once\nagain we're going to be using Code pen\ninstead of doing that just cuz it's a\nlittle bit more interactive for us all\nright let's get started uh coding this\nthing so once again we'll go back to\nthis four-step system for writing HTML\nin CSS and for this um I use this\nfour-step system on a component by\ncomponent basis so in our case we're\njust building this uh simple card so we\ncan pretty much use it one time through\nbut if we had a much larger project we'd\nkind of iterate and do this process\nmultiple times so the first thing is how\ndo I want to arrange these HTML elements\non the page that is basically talking\nabout this design right here so how do I\nwant to design it we've already have\nthat done for us so we can go to step\ntwo how do I uh make this Arrangement\nlook uh using HTML so um the way that we\ncan figure that out is primarily by\nexperience just knowing how you can\nwrite HTML that will be turned into\nsomething like this um but I'm going to\nwalk you through my thought process and\njust kind of start to give you that\nexperience so just taking a look at this\ndesign the first thing that I'm thinking\nabout is how do I um lay this out with\nHTML so what are the container elements\nthat I need to use and as we talked\nabout a div element is a great you know\ncontainer type element so what I'm\nthinking about is there's probably going\nto be four main containers that we're\nlooking at from a high level the first\none's going to be the entire um design\nitself so that will be one div then\nwe'll have something for this white box\nright here the bottom left box and then\nthe bottom right box so really what\nwe're going to be looking at is\nsomething like this and excuse my uh\npoor drawing I'm using a mouse so this\nis kind of tough but if we break it out\nlike this and then we draw something\naround\nit this top one is going to be a div and\nthen we'll have another div here and\nwe'll have a div here and a div here so\nwe're going to have four in total and\nthat's going to represent our entire\ndesign as we move down to this this\nbottom left section which will be\ncontained in a div it's going to be a\nlittle bit trickier than this top one um\nbecause of this part right here so you\nsee how we have some text and some more\ntext styled right next to each other\nhorizontally and as we know elements are\nblock Elements by default usually so\nwe're going to have to find a way to lay\nthat out so that they're both on the\nsame line and they have two different\nstyles so that'll be interesting to see\nhow we do that and then finally at the\nbottom we've got a button which we'll\nspend a little bit of extra time on\nbecause we need to have a hover effect\non it and then then in the bottom right\nwe have a pretty straightforward design\num where we just have a heading and then\nit looks like an unstyled list so it's\nnot necessarily paragraph text it looks\nlike this is a list without bullet\npoints so I'll show you exactly how to\ndo that and then finally we have um some\ndifferent colors throughout but that's\nnot really related to this step so we've\ngone through steps one in steps two so\nwhat I'm going to do is actually take\nstep number two and lay this out with\nHTML as we just talked about so I've got\nmy design here on the right and my code\npen here on the left so let's go ahead\nand start with this um the first thing\nthat I'm going to do is make a main div\nthat we're going to call the container\nor more descriptively we'll call it the\ncard because this is what we call a\npricing card um card is just terminology\nfor something that's like all contained\nwithin a box then furthermore I said\nthat we're going to have three more divs\nso let's lay that out and we're going to\ngive I don't know we we'll call it an ID\nso maybe let's be more specific with\neverything here because we're only\nmaking one card um in a real CSS project\nyou might want to make a card design and\nthen apply it to one class that you can\nyou know use with multiple elements but\nfor here we can just use IDs and be\nsuper specific so we have a card then we\nhave the top\nsection and then we'll come down make\nyet another div this is going to be the\nbottom left section I'm just being super\ndescriptive here and then furthermore\nwe're going to have a bottom right\nsection so let me expand this so that we\ncan really see what we're dealing with\nit's not going to show anything on the\nscreen yet because we haven't put\nanything in these divs um but one thing\nthat I just noticed that we probably\nshould be doing is this bottom right\nsection here we probably should wrap\nthat in another div just because they're\nhorizontally next to each others so\nreally what we can visualize this as is\nwe've got one section up here and then\nwe have one section down here and then\nwithin that we have two more sections\nlike that so over here in our HTML we're\ngoing to\nwrap these two in a div so let me take\nthe bottom two sections and put those in\na div as well and make sure that we have\nsome good indentation so that we can see\nexactly what's going on pretty easily um\nlet's give this one an ID so we'll just\nsay bottom section so if you look at\nthis on the right my extremely messy\ndesign we have this top section which is\nthis big box and then at the bottom we\nhave the bottom section which is the big\nbox surrounding these two little boxes\nand then the two boxes down here are\nrepresented by the bottom left section\nand the bottom right section and then\neverything is encompassed this is\ngetting extremely messy with a card\nright here all right so let me go ahead\nand disable this so that we don't have\nall that drawing there but you can kind\nof see how this layout is going to map\nover to this design at this point let's\nput something in here so that we can\nstart seeing this come to life at the\nmoment we have an empty web page because\nwe've got a bunch of div elements or\ncontainers that we've laid out but\nthere's nothing in them so what goes in\nthese sections um let's start with the\ntop section so right here contain\ncontained within this single div and\nwhat we're going to put in there is it\nlooks like a heading so that looks to me\nsomewhat like we'll call it an H2\nheading and it says join our community\nso that will be our first um heading\nright there there and of course this is\nnot going to look anything like the card\nat the beginning we're going to use CSS\nstyles to make this a lot prettier in\njust a\nsecond we'll come down here and this\nlooks like maybe an H4 heading that says\nuh\n30day hasslefree\nmoney back guarantee all right so that\nis the second part and then the third\npart is going to be some paragraph text\nso gain access to our full library and\nI'm going to stop talking so we can\nspeed through\nthis all right so we've got our top\nsection already created and once again\nit looks nothing like the top section\nover here but we will get there in due\ntime now we'll come down to these other\nsections here so we need to finish the\nbottom left section which we're going to\nput in this div right here and then the\nbottom right will be going in this div\nso with the bottom left section it looks\nlike we have an H4 tag so similar to how\nwe use for the 30day hassle-free money\nback guarantee um we'll go ahead and use\nthat same one for the monthly\nsubscription because it looks close we\ncan always change it\nlater so we'll put in monthly\nsubscription and then like I said once\nwe get down to this little uh area so if\nwe Circle these\nuh two pieces right here this is going\nto be what I think as another container\ndiv so let's go ahead and make another\ndiv and then within that div we want to\nhave we'll say\num I guess we can just make another div\nthat says\n$29 and then one more div that is going\nto say per month so this is going to\nthis total container is going to to wrap\nthat pricing component and then we're\ngoing to take these two divs right here\nand make them go horizontal to each\nother as you can see they're you know\nblock elements so they're breaking to\nnew lines but um you'll see how this\ncomes in handy in in a little bit so\nlet's go to the next part um get rid of\nthese lines here and you can see that\nafter the pricing it gives us a\nsmall um text down here so we'll we'll\nput a paragraph we'll say full access\nfor less than $1 a day and then finally\nat the very\nbottom space this out once more we're\ngoing to need a button that says sign up\nand you'll see that this button comes on\nthe page here and then finally this is\nwhere it gets a little bit confusing\nsince we haven't added any CSS yet but\nthis container on the far right is going\nto be next to the container that we just\ncreated but but for the time being since\neverything is a block element by default\nit's going to go right under here so let\nme go ahead and write this out it looks\nlike we're using the same kind of header\nhere so we'll stick with the\nH4 and say y us and then down here as I\nsaid you could interpret this as\nparagraph text you can make a bunch of\nuh paragraph text that breaks to new\nlines or we could just make a list and\nthen take the bolt points out later with\nc CSS so that's what I'm going to do I'm\ngoing to uh make an unordered list and\nthen each list item is going to be what\nwe're seeing on each\nline okay we've got it all written out\nwe've got all the text and elements that\nwe're probably going to need for this\nentire card but as you can see this\nlooks nothing like the card that we have\non the right right and believe it or not\nwe're going to use just vanilla CSS to\ntake this ugly looking thing and turn it\ninto the card that we see on the right\nso in reality if I was building this\nmyself and I wanted to do it as quick as\npossible um what I would do is probably\nnot lay it out like this where I've got\nall of the text on the page at once I\nwould probably do it um in pieces but I\nwanted to lay this out to just show you\nhow we can visualize a a design um of\ncourse you need a little bit of\nexperience to do this but we can\nvisualize a design and turn it into HTML\nelements and we can take what looks like\nnothing special and turn it into this\ncard on the right but let me go ahead\nand walk you through what I would do in\nreal life so I've basically created a\nclone of this um and what we're going to\ndo here is we're going to delete all\nthat text that we just put in here so\nwe'll get right back to where we started\nand as you can see we have just the\nlayout that we had created earlier where\nwe have the whole card we have the top\nsection bottom section and then the\nsubsections within those and\nrealistically what I would do first off\njust to get everything laid out on the\npage correctly is start giving uh some\ndimensions and some borders on this so\nthat we can visualize it and then I\nwould put in the actual uh text elements\nso let's go ahead and do that real quick\nand you'll see exactly what I mean so if\nwe were to come back to this four-step\nprocess um this step number two can\ninvolve some CSS as I'm about to show\nyou so we'll open up the CSS uh Pane and\nwhat we want to First do is Target the\noverall card so to do that with an ID\nyou use that hashtag and then Supply the\nID and now what I'm going to do is just\ngive it some sort of width and height\nand also tack on a border so that we can\nsee it on the page so let's go ahead and\ngive it a width of 200 pixels and a\nheight of 200 pixels and then a border\nwill be one pixel solid red so now\nyou're starting to see and I'm going to\nactually make this three pixels so we\ncan see it better you'll see just a\nbasic container on the page now the next\nthing I want to do is go see what the\nspecifications for the the size of this\nmain card is because this um outer\ncontainer we we're calling card should\nbe the total dimensions so if we go back\nto visual studio code and see our\nspecification so we're in the style\nguide right now it says that the designs\nwere created to the following widths so\nlike I said we're not going to be\ngetting into responsive design uh in\nthis tutorial so if you were to look at\nthe desktop design it looks like this\nand that's what we're creating but\nthere's also a mobile design which you\ncan see has a slightly different layout\nand in real life what we would be doing\nis we'd be designing on desktop to look\nlike that and then when we resize the\npage so as we you know resize the page\nin our Cod pen environment we would\nexpect this design to change but for\nthis one we're staying simple since we\nhaven't learned about responsive design\nyet and we're just creating this one\nright here so the specification for that\ndesktop\nis going to be 1440 pixels but if we\ncame to code pen and we gave it a width\nof say 1440 pixels it's going to go\ncompletely off the page so we're going\nto take a little bit of Liberty here and\nmake our own design based on the size of\nour code pen editor which I'm guessing\nis going to be around we'll call it 700\npixels maybe um that's a pretty good\nsize we're probably going to want to\ngive ourselves some some width here to\nwork with so let's make it 600 pixels\nwhich is going to give us all of this\nspace right here and then for the height\nwe're just going to eyeball it because\nthey haven't specified exactly what that\nheight should be so let's look at the\ndesktop design again um you can\ngenerally grasp the aspect ratio here\nand you can tell that we're off by a\nlittle bit so let's maybe throw this up\nto\n350 pixels and that looks like generally\nthe aspect ratio that we're dealing with\nright here so nothing nothing perfect\nbut it's going to get us close now the\nnext step since we have our main\ncontainer laid out and we just see it\nvisibly we're going to do the same thing\nwith each of the sections so you can see\nthat we have our top section which we\ncan come down into our CSS and Target\nand for this section we're going to give\nit a width of 100% because we want it to\nbe filling up the entire space of its\nmain container and then we're going to\ngive it a height if I can spell that\nright we'll give it a height of 50%\nbecause well maybe not 50% it looks like\nthe top section is call it 40% and the\nbottom section is about 60% so maybe\nwe'll go in that range where we give it\na height of 40% and a width of 100 and\nof course we can't see anything yet cuz\nbecause we haven't given it a background\nor a border so let's throw in a two\npixel solid green border so you'll see\nthat pop up in the top section here and\nthat that looks pretty good so far now\nthere's one problem that we're seeing\nalready that I want to fix right off the\nbat before we get any further and that\nis this um box sizing so as you can see\nwhen we put the border on this inner\ncontainer um you're seeing that it's\nkind of breaking out of the parent\ncontainer on the right side here and the\nreason that's happening is because our\nbox sizing is set to the default content\nbox so what we're going to do is a basic\nCSS reset that's going to make every\nelement on the page abide by the border\nbox box sizing and we talked about that\nin the first of three lessons in our CSS\ncrash course um before so go back and\nreview that if you have to to apply the\nBorder box box sizing to every element\nin this HTML document we'll just come to\nthe top of our CSS file and paste in a\npredefined HTML or css reset so we're\nsaying on the total document we want the\nBox sizing to be border box which will\nas you see it will make this box go\nwithin its container and then the second\nrule is just basically going to say I\nwant to grab every other element and\napply or inherit that you know root\nlevel box sizing so by just adding these\ntwo rules you can see that our boxes are\nfitting nicely within each other if we\ncomment them out it's going to be\nbreaking out of the box again if we\ncomment them back it goes or it should\nupdate I'm not sure why it's not\nupdating Let's uh refresh the\npage there we go so it is within the box\nwith that fixed we can go to the bottom\nsection um so let's let's go back to our\ndesign here for a second we've got our\ntop section bordered out now we have\nthis overall bottom section so we will\nwrite a CSS rule to Target the bottom\nsection div which is right here so you\ncan see the bottom section which has the\ntwo subsections within it so let's come\ndown here and just paste in these\nproperties cuz that's all we need but\nit's obviously going to be the wrong uh\nHeights and widths for now so we do want\n100% width we want it taking up all of\nthat but the height that we want is\ngoing to be 60% rather than 40 because\nas you see with 40 it doesn't take up\nthe full uh height of the entire\ncontainer but now that we've made it to\n60 um and then we'll turn this to call\nit blue you'll see that we now have a uh\nouter container in red our top container\nin green and our bottom container in\nblue now the last thing that we have to\ndo to get this layout um perfect is\ngoing to be adding these two containers\nin the bottom section that will be side\nby side I'm going to add them one at a\ntime because it's going to require us to\ndo something a little bit tricky um\nbecause they go next to each other so\nlet's target the bottom left section\nfirst so we'll copy in this ID into our\nCSS put that hashtag in front to Target\nit and here we're going to copy in these\nsame properties again just to get our\nborder now this is going to be incorrect\nat the moment because we're giving it a\nwidth of 100% um but really what we want\nis a width of 50% because we want that\nto take up the uh first half and then\nthe height that we want is going to be\n100% now I'm using these percentages\nbecause we have these already broken out\nwithin their containers so let's put a\ndifferent color on here um maybe we'll\nput on uh what's contrasting to Blue\nwe'll say orange so that we can see that\npretty nicely within that container and\nthe reason that this works is because\nthe width um the width of 50% is going\nto be relative to its parent container\nso if we look and ask ourselves okay\nwhat is the parent container of this\nbottom left section well that's going to\ngoing to be the bottom section and the\nbottom section is outlined in blue right\nhere so rather than saying 50% um width\nof the entire document we're just saying\n50% width of the bottom section which is\nalready outlined for us and you can see\num that it's occupying perfectly 50% of\nthat now if we did the same thing with\nthe bottom right section so let's change\nthis ID to the bottom right section and\nthen I'm running out of colors here but\nmaybe we'll just give it a two pixel\nsolid black border now we're running\ninto problems here because now that we\nhave a bottom right section it's\nbreaking down onto a new line because\nall of these divs are by default block\nelements and they occupy Their Own Line\nso in order for this to work we actually\nhave to make both of these um you know\nsubsections inline block elements so we\ndon't want to make them inline because\ninline elements don't respect the height\nand width properties which we want them\nto respect but we do want them to be up\non the same line so what we're going to\ndo is come to both of them and say\ndisplay inline block and then once again\ndisplay inline block now at this point\nyou're probably wondering why are these\nboxes not lining up next to each other\nwe've given one of them 50% width the\nother one 50% width and we've turned\nthem into inline blocks which basically\nmeans that they both can sit on the same\nline unlike a block element now the\nreason that this is happening is\nprobably going to make you pretty mad um\nbecause it made me mad when I found it\nout uh for the first time and a lot of\nother people and it's kind of just a\nquirky thing about CSS so when you make\nan inline block that respects the white\nspace within the document and believe it\nor not if you come up to this\nHTML where we have the bottom left\nsection and the bottom right section\nthere's actually some white space\nbetween these two elements so uh this\nthis space right here is considered\nwhite space for inline block elements so\nif we were to just backspace and bring\nthis right next to each other it's going\nto bring this box up within that\ncontainer and it's going to fit\nperfectly now I know what you're\nthinking um like I said this is kind of\ninfuriating that this is the reason that\nthat was doing that and that's kind of\nyou know coding in general sometimes you\njust find things that are completely\nridiculous and what I will say is that\nthere is um some hope so in the next\ncouple of videos we're going to be\ntalking about CSS grid and\nflexbox and both of those will be a much\nmore optimal way to make this layout\nlike we've done here\nand you won't run into these weird\nquirky problems that just exist um as a\npart of kind of the older uh method of\nwriting\nCSS all right so just keep that in mind\nwe have taken the divs that were nicely\nuh laid out in our HTML above like this\nand we've just removed the little white\nspace between them and now it's going to\nwork just fine so that's hopefully the\nonly little hack that we're going to\nhave to do throughout this project\num and like I said it's just it's a\nlittle bit frustrating but uh we have to\ndo it here and until we know CSS grid\nand flexbox at least um but this would\nbe kind of your old way of lining these\nthings up now the last thing that we\nhave to do here because we've got our\nlayout so if we come back to visual\nstudio code you can see that we've got\nour top section bottom left and bottom\nright section all outlined with these\nugly colors and and whatnot\nand at this point we can start putting\nHTML elements within them so let me go\nahead and grab some of the text that we\ncreated over here just in this ugly uh\nspace and I'm just going to copy the\nexact HTML and put it into each of the\nsections that it belongs in so we're\ngoing to see some HTML go up here and of\ncourse it's not going to not going to\nfully fit at the beginning um we will\nfix that I promise\nand then let's come down here grabb\nthis put this in the bottom left\nsection and you'll see that we have some\nuh some spacing that we're going to have\nto address here and that is partially\ndue to the the default margin that is\ngiven that is being given to H2 and H4\nelements and and paragraph elements and\nthen finally the bottom right section\nwe'll copy that and paste it into the\nbottom right\nsection Okay so we've got all of our\nelements in here and now we have to fix\na few things um one of those things is\nthe default margin that we're getting on\nthese elements so I'm going to actually\ninspect the whole page it's going to\nlook very weird for a second but if we\nhover over um some of these elements\nyou'll see that we have this Orange um\nmargin on top top and on bottom of those\nH4 elements and that is because it's\njust a browser default it's something\nthat just it you know happens by default\nand if we go over to this page you can\nsee that all of our text is is spaced\nout pretty nicely and that is because of\nthose browser defaults but obviously\nover here we don't want them to be in\neffect because we want our uh document\nto have no spacing around we want to add\nour own spacing so all we have to do is\ncome up to to the top and to our HTML or\nsorry CSS reset where we're just you\nknow resetting default properties I'm\njust going to grab the H2 element and\nthe H4 element that we have as well as\nthe paragraph element and give it a\nmargin of zero so hopefully that will\nfix a few things you can see that we\nhave no spacing around here all right\nthe last problem we're dealing with here\nit looks like we've got all of our text\nwithout default spacing so that's nice\nand the last thing that we're worrying\nabout is this Orange Box which is oddly\njust sitting there floating in space and\nif you were to rightclick and inspect\nthis and you start clicking around\nlooking at this there's not going to be\nany you know obvious reason why this is\nsitting down here there's no margin or\npadding or anything going on here so you\nkind of have to ask yourself what is\ngoing on um and from experience I just\nknow that when you have an inline block\nelement it follows different rules than\na block element and there are different\nproperties that will allow you to modify\nhow those rules are applying to your\nHTML now that's kind of similar to all\nCSS so when you change display\nproperties and box sizing there's just\ndifferent rules of the game so if we\nwere to come over to the mdn\ndocumentation and type in uh um vertical\nalign this is going to show us a\nproperty and it says the vertical align\nCSS property sets vertical alignment of\nan inline inline block or table cell box\nso this does not apply at all to block\nElements which is the default type of\nHTML element for um pretty much\neverything but what it does is it\nbasically says this is a pretty good\nvisual right here if you have two inline\nblock elements that are sitting right\nnext to each other on the same line they\ncan be aligned um at different vertical\npositions and by default um not sure\nexactly what the default is here um\nprobably the baseline or something like\nthat um but anyways we want to make sure\nthat this uh gets the top alignment\nbecause if we come back to our uh\nchallenge here we want these two uh\ninline blocks to basically lock up to\nthe top um border of their container so\nif we go into each of the sections um\nand for the bottom left section that's\nbehaving oddly if we type in vertical\nalign and then say top it's going to\nbring it right back up and snap it to\nthe top edge of its container now the\nbottom right section just so happens to\nsnap up there naturally um but let's go\nahead and add the vertical line top for\ncons consistency sake and this will also\nsnap that to the top so at this point it\nlooks like we have a nicely laid out\ncard and although it is pretty ugly\nwe've got everything that we need all of\nthe content in there and we've got the\nlayout that we need so at this point\nit's all about styling so in our\nfour-step process we looked at number\none that was just looking at the design\nin some cases you'd actually do the\ndesigning um in step two we asked\nourselves how do we lay that with HTML\nso we templated everything out now in\nstep three we have to ask how can I use\nCSS to achieve the layout that I want\nand that's exactly what we did here we\njust used a few basic CSS properties to\nput some borders and really visualize um\nthe card component that we're trying to\ncreate and now finally how should we\nstyle each element and this is kind of\nthe fun part where our ugly layout\nexample is going to turn into um what we\nsee in this example a nice styled card\nso I think the first thing that I want\nto do um let me go back to my example\nhere um since this is just called layout\nexample let's let's copy all the HTML\nhere into our original code pen and of\ncourse all of the CSS will copy in there\ntoo so this should get us back to where\nuh we were there and I can go ahead and\nclose this out so we've just got this\none example and I think what the next\nstep here is going to be is to get these\nbackground colors uh put in there so\nwe're going to start to get something\nthat doesn't look so ugly so just\nlooking at the colors um let's just drop\nthese into Google because I'm really not\nsure just they're they're saying cyan\nbright yellow light gray and a grayish\nblue and to be completely honest I don't\nknow what that refers to here um it\nlooks like this might be the yellow um\nnot sure where the gray is maybe this\ntext right here um let's let's go ahead\nand type those into Google real quick so\nwe'll go\nRGB and there should be something R RGB\nto hex maybe okay this is what we're\nlooking for just the Color Picker on\nGoogle and all we have to do is go back\nto our style guide and let's see what\nthis cyan color is so we'll we'll paste\nin these values right here I'm not sure\nwhy they're giving us hsl values because\nthat I really haven't used those all\nthat much in web development you usually\nstick at hex and RGB um but they are so\nlet's go ahead and convert those to\nsomething a little bit easier to use so\nwe'll grab a hex color here and let me\njust replace this just so we have a\nreference and then let's paste in the\nhsl for this yellow color that we're\nworking with which to me looks more\ngreen maybe I'm color blind who knows um\ngo for those hex values at the end here\njust for reference and then we'll do the\nsame thing for the remainder because I\nlike working in HEX and I've never\nreally worked with uh hsl so we'll go\nback and put these in here now to me\nwhen I look at this um these bottom the\nbottom left and bottom right boxes they\nthey look like different colors to me\nthis one looks like just a lighter\nversion of the left and in the style\nguide I'm not so sure that they've given\nus uh two of those options so if we came\nin and and looked at the\nSan um color so let me paste that in\nhere it looks like that would be the\nbottom left color that we're dealing\nwith or maybe even the bottom right\ncolor um so what I'm going to do is just\ndrag this that we have different colors\nmaybe I'm missing something here but um\nlet me just drag this so that we get a\nlittle bit lighter color that we can\nwork with and then I'm going to grab\nthat hex value and paste it into the\nstyle guide so we'll put put that in\nthere as\ndarker and then lighter and at this\npoint we can grab these color codes and\nstart using them so we'll grab the\ndarker\ncolor and we'll come back to our code\npen and just put in a background color\nproperty so for the bottom left section\nwe know that we can use the background\ncolor property and paste that in there\nand we should be getting that darker\ncyan color all right so at this point we\ncan probably remove that\nborder and that looks a little bit nicer\nfor us um and I'm also going to remove\nthe bottom section blue\nborder okay so we're looking a little\nbit better here and now I want to fill\nin the background color for this right\nsection which um as I just got a\nslightly lighter hex value so we'll go\nto the bottom right section get rid of\nthe border and replace that with a\nbackground color and paste that in and\nit's looking like it's it's a little bit\nlighter but compared to the example it's\nthere's more of a contrast here so let's\ngo ahead let's play with that a little\nbit let's make it even a little bit more\nlight grab that hex value and see what\nthat looks like\nokay so that's that's a little bit\nbetter I like that contrast and you\ncould even come over to Adobe\ncolor and we'll go to this uh this Adobe\ncolor tool and what I could do is I\ncould grab the bottom left section hex\ncode which is the darker cyan uh throw\nthis in the middle here and then I want\nsome shades of this color so uh we could\ngrab maybe this shade over here which\nensures that it's going to you know\nnicely go together and let's put that\none in the bottom right section just to\nget a little bit more compliment uh\ncolors here and then I'll go back here\nand and replace this just so we have a\nreference of\nit okay so we've got these two um the\ntop is going to be white and then at\nthis point I think we can remove all of\nthe borders just so that we don't have\nthose ugly colors going on um so let's\nlet's go up here remove the top section\ngreen border everything looks good and\nthen the red border around\neverything and boom we have ourselves a\nnicer looking layout now as you'll see\nin the\nexample uh design it is kind of standing\nout against the background and you'll\nalso notice that there are some little\nCorners that are rounded so I want to do\nthat just so that we have something as a\nreference here and I also want to kind\nof make this come out from the top left\ncorner of the page so all we'd have to\ndo for that is just add some padding to\nthe body so if I go here and just add\nsome padding of 20 pixels to the body\nyou'll see that that uh comes in a\nlittle bit so remove it add it back and\nyou can see our card just shifts inwards\nso that we can kind of visualize it a\nlittle bit better um and then finally\nfor the card because that is the main\ncontainer around everything what I'm\ngoing to do is add a box Shadow and this\nproperty is going to take I believe five\ndifferent arguments and they're all kind\nof uh referencing where the shadow is\ngoing to go so I can open up a tool\ncalled box Shadow\ngenerator uh for CSS and there's a a\ncouple tools here I don't know which\none's the best um they all should work\nbut as you see this um CSS box has a box\nShadow around it and you can you know\ndrag these sliders to get different\nsorts of box Shadows applying to this so\nthis is a good visual tool that we can\nuse to to see what we want and in our\ncase we probably want a a much smaller\nbox Shadow so let's let's go ahead and\nactually no we want to stay close to\nzero so we'll go around four pixels and\nmaybe\nthree pixels or something like that and\nmake the blur radius a little bit\nsmaller and the opacity that we want\nlet's make it down to like 0.2 or around\nthat area maybe a little bit more I\nthink that looks pretty good so the\ncodes that we need it's showing us that\nuh we need to paste in all of these\nthese webkit and Moz box Shadows are\njust for like other browser support we\ndon't necessarily need them so I'm just\ngoing to copy in this rule right here\nand we'll paste it in to the card and\nnow you're going to see around the edges\nwe're starting to get a defined um Edge\nto our card so let's go back to um our\ndesign and you can see that we're we're\ngetting a little bit closer here uh what\nI want to do is round the corners now so\nall we have to do is say on the main\ncard we say we want a border radius of\ncall it 5 pixels all right so we've got\nour border radius on here but what\nyou'll notice is that the bottom right\ncorner and the bottom left corner do not\nhave a border radius and you might ask\nwhy because we've given a border radius\nof five pixels which should apply all\naround that uh container element but the\nproblem is because we have these two\ninner container elements that are\nperfect you know squares and they occupy\n100% of the space within that main\ncontainer so as we make a border radius\nwe're actually um th those inner boxes\nare actually breaking out of the main\ncontainer now and what you're seeing\nthere is those those uh child containers\nthere's a couple ways that we could fix\nthis but a cool little trick that you\ncan use and I I know this is not\nnecessarily obvious but if you do enough\nGoogling you would find this out if you\nset the Overflow property to HD hidden\non the main container element you'll see\nthat those uh borders go rounded and\nbasically what that's saying is we want\nto take those perfect square children\ncontainers and since those are breaking\nout of the main container we want to say\nto the main container CSS style okay if\nyou have anything that's breaking out of\nyour borders just hide it and so that's\nwhat allows those bottom border radiuses\nto apply so just a cool little trick um\nit's also one of those frustrating\nthings about CSS where it's doing things\nthat you would not expect and that is\nliterally the name of the game with CSS\num is figuring out how to get around the\nthings that you're not expecting to\nhappen Okay so we're getting a little\nbit closer here um the next thing that\nwe can do that will just add a really\nnice touch uh and make this look a\nlittle bit cleaner is some padding I\nthink so let's jump back to our design\nand you can see that all around the\ncontent here so around every bit of\ncontent there is this space this nice\npadding in here and what we could do is\nwe could come in to our code pen and we\ncould just say on the total card we want\nto add some padding of say 20 pixels but\nthat's going to uh mess us up a little\nbit because although it adds nice\npadding around everything um now these\nare not occupying 100% wi and and also\nwe want some padding within these suitt\ncontainers so what I'm going to do\ninstead of adding it on the total card\num to get padding like that I'm going to\nadd them on each individual section so\nwe'll call it a padding of about 20\npixels that's a pretty standard amount\nof padding to add and we can just look\nat this little space between the edge\nand the text on the top in the left um\nto get an idea of how large that padding\nis and that looks pretty in line with\nour design so I'm I'm happy with that\nand then let's copy that rule down into\nthe uh other section so not the bottom\nsection because that represents\neverything here but I want to do it in\nthe bottom left section so we get that\nnice padding and then I also want to do\nit in the bottom right section which\nwill make the padding uh nice there too\nso at this point we've gone from a\ncompletely ugly layout design to\nsomething that actually makes sense\nvisually we obviously have a lot to do\nwith the text styles and colors in that\nbutton but we're getting a lot closer\nlet's go ahead and change the text color\nyou can see that everything in the\nbottom is a text color of white um and\nthen the top has varying text colors so\nwe'll start with the top and you can see\nthat the The Heading is the same color\nas the bottom left or at least it\nappears to be so let me grab that bottom\nleft color and we'll go ahead and apply\nthat to our join our community text\nblock so let me collapse the JS here and\nwe'll go up to the join our community\nand what you could do is you could\nTarget everything in the top section\nthat's in H2 and since we're not\nplanning on changing the HTML uh\nstructure anytime soon I'm pretty happy\nwith that you could also throw an ID uh\nyou know that says title and directly\nstyle it um but but in this case let's\ngo ahead and practice our combinator\nskills our CSS combinators to style this\nso we'll come down here and at this\npoint you'll see the CSS is getting\npretty busy you might want to rearrange\nit and organize it by section but for\nnow let's just keep going um and what\nwe'll do is we'll say the top section is\nthe pre-selector that we want and then\nwe want to grab every H2 element which\nis simply that first title and what we\nwant to do is style it a color of that\nbottom left so now we're going to get\nthe correct color let's go back to our\num Visual Studio\ncode and see what else we have so we\nhave this kind of lime green yellowish\ncolor as the next one and that is going\nto be this hex code the bright\nyellow so going back to our code pen um\nyou can see that this is the only H4\nthat is sitting in our top section so we\ncan grab a similar rule\nas we just did except this time we're\ngrabbing h4s and giving it a color of\nyellow so there is our yellow color and\nthen finally we should have some sort of\ngray color and let me get to our Visual\nStudio\ncode um this this paragraph text is gray\nand in the style guide um I believe that\nis the light gray that we're looking for\nso let's copy that hex code and then\nmake all of the paragraph elements in\nthe top section equal to this light gray\ncolor okay so that is that is very light\nI'm not sure if that's what we were\nsupposed to do\num it appears pretty pretty good here\nbut it's pretty darn light when we're\nlooking at it here so I'm going to go\nahead and make this a little bit\nstronger of a\ngray um maybe it's the grayish blue\nactually\nlet's try that\ninstead ah okay so I think that's what\nthey meant for this\nstyle yeah I think that's what we're\nlooking for here so the grayish blue\nlooks a little bit better we we'll stay\nwith that now we just have to add some\nuh some spacing between these so if you\nremember at the very top of our HTML we\ndid a reset that said for all H2 H4 and\nP elements we want to add a margin of\nzero so that removed all the default\nspacing and now we can do it custom and\nsince we've got all three of these\nelements selected with these combinators\nwe can just drop into these rules and do\nso let's take a look at our design it\nlooks like there's a good amount of\nspace um just by experience that looks\nabout 15 pixels between the top and the\nnext one let's go ahead and try that by\nadding a margin bottom\nof 15\npixels and you can see that's a nice\nlittle spacing\nthere\num what I'm starting to see is that our\ntop section now that we've got this laid\nout is a little bit small from a height\nperspective so I think I'm going to\nadjust our our total dimensions here um\npreviously we had said the bottom\nsection has a height of 60% and the top\n40% I'm going to change that to 45 and\n55 and you'll see now we have a little\nbit more realistic uh breakout between\nthe two sections I'm pretty happy with\nthat so the last thing we need to do now\nthat we've made that change is add some\nspacing between this these two text\nelements and then uh we've already got\nsome padding at the bottom so we'll go\ndown to our rule of the H4 and add a\nmargin on the bottom of 10 pixels which\nseems about right\nso comparing that up I think we're\ngetting pretty close and and now that\nI'm looking at it we might actually need\na little bit more padding around this uh\nthan we've given it so let's go to the\ntop section wherever we did that and\nlet's increase that padding to say 25\npixels that that looks a little bit\nbetter uh for us and then we'll go ahead\nand update that to 25 pixels in the\nother two spots that we had added\nthat okay so we're doing pretty good\nthere and it looks like our total card\nsize is it's starting to break out but\nI'm going to wait on that before I try\nto restyle because the text is going to\nget a little bit smaller when we uh set\nthe font size and change the font style\nso the last thing we'll do is come down\nand since everything in the bottom it\nlooks like is a color of white we can\njust go to the um selector that we used\num for the the entire bottom section so\nrather than trying to style the text in\nthe left uh section and the right\nsection we can just go to the entire\nbottom section and give it a color of\nwhite that looks pretty good um I think\nthat should work and then you can see\nthe button color is not being styled\nbecause that is a separate uh element\nthere so what I can do is actually\nTarget um all buttons cuz there's only\none button on on the entire page so\nwe'll we'll style the button and we'll\ngive it a color of white and that's\ngoing to give it a text color over white\nwe'll make that show up a little bit\nbetter once we add a background color\nwhich looks like um that lime green but\nI'm going to wait on that for just a\nsecond the next major change that I want\nto make is getting this text to be the\nright font family right now we're just\nusing the browser default um whatever\nthat is I I don't actually know off the\ntop of my head but we want to make this\na different font completely and if you\nlook at the style guide it's going to\nsay the font family that we're looking\nat is Carla and if we go to this link we\ncan see all of the different styles that\nwe need now the question is what what\nfont weights and you know styles do we\nneed well we can go and look at the spec\nit says we need weights of 400 and 700\nso let me take the font weight of 400\nand select that style and then the font\nweight of 700 and select that as well we\nwill grab the link tags that we need\nwe'll go back to our code pen over here\ngo up to the settings\nHTML and in the stuff for the head\nelement so since code pen gives us our\nown little environment we don't actually\nhave to make the head uh element or\nboiler plate so we can just paste it\nhere and by doing this and and saving\nand closing we now have access to that\nnew font but it hasn't changed anything\nbecause we have to actually select it\nwithin our document so up at the root\nelement we want to give a font family of\nCarla and you can see that it changed\nour design completely and it says that\nthe overall font size is going to be 16\npixels so let's go ahead and say that\nthe font size in the root element is\ngoing to be 16 pixels which is just\ngoing to apply to those uh paragraph\nelements as I'm flipping back and forth\nbetween these two designs looks like we\nstill need a little more space after\nthis so let me do that real quick before\nI get into anything else we'll add 20\npixels to there okay and then I'm I'm\nthinking that we're running out of space\nvertically and since we came up with an\narbitrary height um at the beginning I\ndon't mind changing that CU they didn't\nspecify what the height should be so\nlet's go ahead and uh turn that to 400\nto give us some more space and I think\nthis looks a lot closer to the card that\nwe're working with here so just\nadjusting that gives us um a pretty good\nlook and now we've got our font family\num styled here I think the next thing we\nhave to do is figure out of that font\nfamily they had us download the font\nweight of 400 and 700 which means that\nsome of these should have a font weight\nof 700 or bold so let's look at our\ndesign and see which ones uh that would\napply to it looks like to me this\n$29 uh call out is the only one where\nthe font weight is you know extra bold\nso let's come down and um because the\ndefault font weight is going to be 400\nor you could also specify it in the uh\nroot so we'll say 400 but that's once\nagain going to be the default so it's\nnot going to change but if we came down\nto our price right here um we're going\nto have to actually uh put some\nidentifiers on here to enable us uh or\nlet us select it with CSS so I'm going\nto say\nprice um price container and then this\nwill be an ID of price and then this\nwill have an ID of\num price frequency or something like\nthat so now we have IDs to basically um\nselect each of these little components\nhere and if we come down to our CSS we\nneed to set the price to a font weight\nof 700 so we'll come down to the\nbottom we'll set our price to a font\nweight of 700 and you'll see that this\ngets a little bit Bolder so if I\nuncomment it it's not bold if I comment\nit back it's going to be bold and then\nwhile we're here just give us a ballpark\nuh font size let's go ahead and say 1.4\nREM which is basically going to be 140%\nof the root elements font size which we\nknow is 16 pixels so do 140% time 16\npixels and that's how many pixels we\njust made that font size too all right\nlooking back we're we're getting closer\nwe're not we're not too far off I think\nthe next obvious thing that's going on\nthat we're missing is this button cuz\nour button looks terrible uh in\ncomparison so let's go ahead and make a\nbutton that is about the same size here\nand also has that background color we've\nalready selected the button so that we\ncould give it um white text but now we\ncan just uh go ahead and grab this color\ncode that we used for the H4 up here\nand apply it as the background color to\nthe\nbutton so we'll give the background\ncolor that light green you can see that\nthere's by default this border that\nlooks pretty terrible so we can set the\nborder to be equal to\nnone that makes that look a little bit\nbetter and then there's more spacing uh\nthan we have here around this text so\nthat's a good use for padding so all we\nneed to do is come in and add we'll say\n10 pixels of\npadding that looks roughly correct and\nthen finally you can see that this has a\nborder radius so the button has curves\naround the edges and it's equal to kind\nof the size of that container so\nremember we put some padding around the\nedges of this container so the new um\nsize that we're going to have is we\nshould be able to just say 100% I\nbelieve so let's say the width is going\nto be\n100% And yes that's going to get it get\nus equal to that uh parent container so\nat this point we just need to add a\nborder radius of call it five pixels and\nI think our button is looking pretty\ngood so um it it looks like we're a\nlittle bit wider than this right here\nbut I'm not too worried about that we\nhave the perspective uh pretty good and\nthe most important part is that it's\n100% of the container\nso I think at this point we have all of\nthe colors um in place let's just check\nthat yes we do so we have all the colors\nthat we need and our font family is\ncorrect now we just need to do two more\nthings we need to to get the font sizes\nand font weights um a little bit better\nand then we also need to get everything\nspaced out in this uh price and the\nfrequency horizontal to each other I'm\ngoing to go ahead and say that this top\nsection is completely done it's not you\nknow perfectly aligned with this design\nbut it's very close um and part of this\nis we're looking at a much larger\nversion of this so um we're never going\nto get it like exactly perfectly it's\njust not worth our time um but down here\nlet's go ahead and start working on this\nbottom left box so this monthly\nsubscription um that looks okay a little\nbit heavy in font but I'm not too\nworried about it but there needs to be\nsome space between it and the price so\nlet's target this right here and put a\nmargin at the bottom of it and the way\nwe can do that is go find in the\nHTML uh the tag that we want so the\nbottom left section and like we did in\nthe top section we can just Target\nindividual elements so we'll Target that\nand then we want to use a combinator to\nsay um that we want to Target the H4\npotentially um let's see what we have\nhere so we have the monthly subscription\nis an H4 and that's the only H4 in this\nentire section so we're pretty safe to\nTarget it with the combinator and now we\nwant to give it a margin on the bottom\nof call it 20 pixels um I think that's\npretty good maybe a little much so maybe\nwe'll go with something like uh not five\nbut 15 pixels okay I like that and now\nthe next part is we're going to take\nthis per month and drag it up onto the\nline that the $29 is on so to do that we\nonce again Target the bottom left\nsection and actually no we're not going\nto Target that we now have the this\nindividual price container um so that we\ncan work specifically with this uh\nlayout and what I want to do is grab the\nprice\nfrequency right here so we'll Target the\nprice frequency and I want to display\nthis as an inline block because I want\nit to come up on that line uh next to\nthe $29 and at the moment um it's not\ndoing it because the $29 is not an\ninline block so we can Target both of\nthose we can say price\nfrequency\num\nand the actual price to to both be in\nblocks and now they're coming um onto\nthe same line and since we have both of\nthose elements within this div container\nthe price container we can just say on\nthe entire price container that we want\na margin on the bottom of call it 20 or\n10 pixels what you'll see here is that\nthe per month is kind of aligned to the\nbottom of this\n$29 in a quick way um to do this you\nknow if if we were using Flex X Box this\nwould be super easy um but a kind of a\nquick hack to change this is set the\nposition of this element to relative\nwhich then allows us to uh basically if\nyou remember from the first video of the\nCSS crash course we talked about how\nrelatively positioned elements um you\ncan set them basically relative to\nthemselves so if we give it the top\nproperty and then we want to bring it\nupward so basically want to do a\nnegative amount of pixels and we say we\nwant to bring it up maybe three pixels\nyou'll see that that per month kind of\ngoes up a little bit so uh watch the per\nmonth and I'm going to uncomment or I'm\ngoing to comment this out it's going to\ngo back to the bottom and then I'm going\nto put it back in there and it goes up\nto the middle so I kind of like how\nthat's sitting and then furthermore on\nthat price frequency the font size\nshould be a little bit smaller so we'll\ngive it 8 R so that's a little bit\ncloser um and then you'll also see that\nit has a little bit more space between\nthe $29 and it's also a little bit\nlighter so it's not quite as uh Punchy\nof a white color so all we would have to\ndo here is maybe give it a trans or not\ntransparency but we could give it an\nopacity of maybe\npoint8 and that makes it a little bit\nlighter for us maybe even 7\nokay I like that and then finally a\nmargin to the left of it of maybe five\npixels and you can see that spaces it\nover to the right so I'm pretty happy\nwith how we've got that spaced out um\nthat's relatively relatively close in\nstyle and position and I like the size\nof the $29 so I think we're done with\nthat little subc component of the top of\nthe bottom left container\nnext up our full access for less than a\ndollar a day that's uh a little bit\nlarge in my opinion um because it looks\nlike this text is even a little bit\nsmaller than this paragraph text up here\nso we probably want to make this a\nlittle bit smaller in relation to the\nparagraph text the way that we'll do\nthat is this is the only paragraph\nelement within the bottom left section\nso once again we will uh grab the bottom\nleft section and make maybe even just\ncopy this rule right below here and\nTarget all P Elements which will be a\nsingle element and give it a font size\nof maybe 0.9 REM units and that gives us\na nice size maybe we'll make it even a\nlittle bit smaller so 80% of the the\noriginal text size of 16\npixels and then finally we just have to\nbring this button all the way down to\nthe bottom so we have a couple ways of\ndoing this but um one of those ways\nwould be you know taking this P element\nand just putting a margin on the bottom\nof maybe 40 pixels and that should bring\nthe button\ndown now flipping between these two I'm\nseeing that uh this these text right\nhere is kind of in the middle of the top\nin the button so I'm going to change a\nfew of these uh alignments here I think\nwe need a little bit more margin below\nthe monthly uh subscription so let's add\nmaybe 25 pixels instead of 15 and that\ngives us a nice little layout there so\nit's not perfect um not exactly the same\nbut it is fairly close and we've gotten\nall of the functional uh and layouts\npretty good here so at this point I\nthink we're done with the top we're done\nwith the bottom left and now we just\nhave the bottom right which should be\nrelatively simple to do so the Y us\npiece is already pretty good I like how\nthat's sitting it's in alignment with\nmonthly subscription same size as it so\nuh so that's good and now we just need\nto take the bullet points off of our\nlist item and align those two uh to the\nleft of each other so let's see that how\nwe would do this so to really show you\nwhat's going on here let's open up the\nChrome Dev tools and try to just\nrearrange this so that we can see\neverything um it's a little bit weird\ndebugging HTML and CSS in a Cod pen\nenvironment because you've got all these\ndifferent windows open but really what\nthis uh right side elements is uh doing\nis looking at this HTML page so if we\nwere to click this um selector up here\nand come down and grab the entire list\nthat we're looking at you'll immediately\nsee that there is um some sort of you\nknow padding and margin around this list\nby default so the the margin is fine\nthat doesn't bother me at all but that\ngreen little box on the left side of all\nof the text is some default padding that\nis added to list because generally you\nwant those lists to kind of be indented\nfrom the main text so that's what you\nwould want but here we don't want that\nso if we go over into this style right\nhere and we basically say padding is\nequal to zero you're going to see that\neverything goes to the left and it lines\nup with the text like we want it now the\nlast thing is there bullet points that\nwe don't want there and you can actually\nset the list style property and set that\nto none and by doing that all of the\nbullet points go away and so those are\nthe only two changes that we'll have to\nmake to get this to work so let me go\nahead and refresh the page so we get\nthis reset because those changes we made\nwere actually temporary and then we'll\ncome down to the very bottom and since\nthere's only one list in our entire HTML\ndocument we'll just Target it by tag\nand we'll say the padding is equal to\nzero and the list style is none so we've\nremoved the list styling by using this\nattribute or uh property and remove the\npadding on the left so it's all lining\nup just like our design here but what we\nare missing is this looks a little bit\nsmaller and it also isn't so um uh such\nan intense white color so it looks like\nthe opacity of it might be a a little\nbit lower similar to this per month um\npiece of text so all we need to do there\nis say font size and we'll bring it down\nto uh what did we say this one\nwas um8 REM so 80% of the root element\nsize or 80% * 16 pixels and then we can\nbring the opacity down to8 as well and I\nthink that looks pretty pretty good\nthere it's not exact but it is it's\npretty much in line with uh with\neverything at this point I think we're\npretty much done um the only remaining\nitem that I can think of is this button\nright here so the button is currently\nnot doing anything when we hover over it\nand I want to change that especially CU\nthat was part of the requirements so\nhere's our button Styles um in this\nblock right here\nand in order to style it on Hover we\nneed to give it the pseudo class of\nhover and once we do that this was\nsomething that we talked about in I\nthink the first lesson of the crash\ncourse and the first thing that we\nalways want to do on Hover is change the\ncursor to a pointer so you can see how\nthe cursor changes as I hover over this\nbutton and that's just to indicate to\nthe user that hey you can click on this\nso from here we also probably want to\nchange the color when we hover over it\nbecause the cursor is not obvious enough\nso we could just take this uh background\ncolor right here that's already on the\nbutton and make it a little bit lighter\nor a little bit darker so let's grab\nthat hex code and bring it into our\ncolor wheel of adobe color and let's\njust see if we can find like a a shade\nof this that would work I think\nsomething like maybe this one on the\nright would be okay and if we bring that\nin and we change the background color to\nthe hover state to that little bit\ndarker color it's going to just have an\neffect where it's showing us oh hey you\ncan click here and it's going to do\nsomething and to make that even more\npronounced there's a a property that you\ncan use called transform and there's\nplenty of uh values that you can pass\nhere but one of those is going to be the\nscale function and we can just say like\n1.1 or something like that so so we can\nscale it\n110% and you'll see that it you know\ngets a little bit larger when we hover\nover it and that's that's even a little\nextreme maybe we'll just do 1.02 or\n102% and I like that that's a nice\nlittle subtle indication to the user\nthat when they hover over and click this\nit will do something now right now this\nbutton doesn't do anything but just for\nfun just to add something in there we\ncan come up and use what we've learned\nin the prior lessons of this uh full\nstack road map and come up to the button\nand add ourselves an onclick listener\nand we'll pass the function alert user\nwhich we have not created yet but we'll\ncome down to the JS section and say\nalert user and then we will pass an\nalert that says hey you clicked the\nbutton so let's finish that one up and\nnow when we click this button it's going\nto alert the user that they clicked it\nso obviously not you know useful but\nit's a nice little addition to make this\na little bit more interactive now the\nfinal thing that we could do here is\nmake this mobile responsive and what I\nmean by that is if we drag this right\nside over to the left you'll see that it\njust disappears um right here and it\njust flows off of the page which is a\nterrible user experience if you're on\nmobile so this would be about the size\nof a mobile device so if your user you\nknow looked at this uh Design This is\nwhat they're going to see which is\ncompletely useless to them so what you\nwould want to do is make it a mobile\ndesign and as you see in the frontend\nMenor challenge it tells you that you\nneed to design something like this now\nwe haven't talked about mobile and\nresponsive design quite yet and I'm\ngoing to cover that in a completely\nseparate video I think that might be the\nnext video after this one so for now\nwe're going to keep it just desktop only\nbut in future challenges future\nfront-end Menor challenges we will make\nthat Ro uh we will make this mobile\nresponsive now there's one more thing\nthat I want to do because it's quick\nit's easy and it will give you at least\na little bit of a win here in terms of\nuh being able to share this and show it\noff so if we come to GitHub let me open\nup a new tab\nand go to GitHub if you followed along\nwith this full stack road map um from\nthe very beginning I had asked you to\ncreate a GitHub account because you're\ngoing to need it as a developer no\nmatter what it's just kind of expected\nof you to have a GitHub profile so if\nyou've already got one great if not go\nahead and create one and let's go ahead\nand click create new repository right\nhere and we'll say uh pricing\ncard frontend\nMenor challenge is what we're going to\nname this\nrepository and we're going to call it an\nimplementation of the frontend Menor\ncode\nChallenge and we're going to make it\npublic and you don't really need to\ninitialize any of these but let's go\nahead and add a read me I'll just show\nyou what that is and you click create\nrepository so we're going to go through\nuh Version Control and how to actually\nget this within the terminal a little\nbit later in the series but for right\nnow we're just going to use github's uh\nUI or user interface to post our code\nand then deploy it to GitHub pages and\nwhat GitHub pages is going to do is it's\ngoing to allow you to host this\nchallenge you just created on the web\nand share it as a\nURL so here is our initialized\nrepository every repo or repository is\ngoing to have a read me or at least it\nshould and this should give an\nintroduction to what this repository is\nall about and often times when you're\nbuilding a web app the readme will give\ninstructions on how to run it locally\nand how to develop it and you know you\nget the point so within the repository\nwe obviously could make files on our\nlocal computer and then use Version\nControl to push the files up to this\ninterface but for right now we're just\ngoing to add a file and we're going to\nclick create new\nfile and this one is going to be called\nindex.html so this will basically be um\nall of the HTML that we just created and\nindex.html is the default HTML document\nthat GitHub pages is going to look for\nwhen it's trying to serve it on you know\nthe live URL so it needs to be named\nthis and from here if you were to go\nback to our HTML and copy it all and\npaste it in here we have the body\nsection implemented but since code pen\nalready implements the head tag and the\num body tag that's not going to be here\nso we need to add those pieces in order\nfor this to work so the first thing that\nI'm going to do or actually let's let's\ncome back and write out that structure\nso basically we'll come to the top and\nwe'll say that we need an HTML tag and\nwe'll cop this one and put it at the\nvery\nbottom and then furthermore let me zoom\nin a little bit so you can see what I'm\nworking\non and then after this we will need the\nhead\ntag and we'll just we'll call it uh my\nfront end or no we'll say pricing card\nwill be the title which is going to show\nup in this little tab when we're viewing\nit live\nand then we'll close out the head tag\nwe'll come back to this in just a second\nto add those fonts that we put in and\nthen we've got the body tag which is\ngoing to be closed all the way down here\nat the bottom and then lastly let's just\nindent\neverything to a proper level and now you\ncan see that we've wrapped everything\ntogether in this HTML the last thing\nwe're going to need to do here is link\nup all of the style sheets and the fonts\nso if we go back to our pricing card go\nto settings HTML we're going to need all\nof that stuff that we had in the head\nand we're going to put that right after\nthe title so you can see we have these\ntwo link tags and then furthermore we're\ngoing to have to link up our uh CSS\nstylesheet that we'll put in in just a\nsecond so the way that we do that is\nanother link tag and I believe the um\nhref is going to be\nstyle.css which we're going to create in\njust a second and this will be a\nstylesheet so we'll close that off and\nwhat this means is basically I want you\nto pull in uh the file called\nstyle.css in the directory that is um\nbasically hosting this index.html file\nyou'll see what that uh means in just a\nsecond so for now let's go ahead and\ncommit this new file\nand go down to add another file and this\none is going to be\nstyle.css which is what I just talked\nabout how we linked up to that within\nour\nHTML and from here we should be able to\njust paste in all of this\nCSS right here that we had\ncreated so nothing nothing else to do\nhere we can just go ahead and commit\nthat file and then finally we need to\nadd our JavaScript file so um we added\njust a few lines of JavaScript down here\nbut in order for that to work we need to\nactually connect it up to our HTML and\nthe way that we're going to do that is\ngo back to our HTML file click edit and\nthen come down to the bottom of the body\nand this is where we need to have um our\nscript tag to do that we just type out a\nscript tag which is not self closing\nthere's actually two pieces to it and we\nneed to give it a source and we're going\nto say\num uh let's say just\nindex.js is what we're going to call our\nJavaScript um document so commit those\nchanges I believe that should work um so\nlong as we go to the main file or the\nmain directory and add that Javascript\nfile so we need to name this index\nindex.js as we just referred to in our\nHTML and then we should be able to paste\nin that function that we\ncreated and commit the\nfile from here um this is a complete\nrepository I believe unless I miss\nsomething but we'll find out in a second\nnow the only thing that we need to do is\nadd another Branch now this is um a\nlittle bit complex we're getting into\nVersion Control branching but basically\nthe rule here within GitHub is if you\nmake a branch called gh- Pages or GitHub\nPages it's automatically going to look\nfor you know the index.html file on that\ndifferent branch and it's going to\ndeploy it automatically for you so it\ndoes a lot of the heavy lifting and you\ncan for now kind of just think of it as\nbehind the scenes magic but we will\nlater learn how this all works so we're\ngoing to create a branch called GitHub\npages\nand we're going to create it from the\nmain uh Branch so it's going to copy all\nthe files uh\nover okay so at this point we've got all\nof our files in GitHub pages and if I\ndid everything correctly which usually\ndoes not happen in coding um it should\nshow up down on this GitHub Pages link\nso let's see if we click view\ndeployment awesome it looks like our\ncard actually did deploy correctly with\nthe Styles cuz it's all styled and if we\nclick sign up hopefully we'll get the\nalert so awesome we have um our deploy\nlink which you can just copy and paste\nthis link up here and share it with\nanyone and they can see the project that\nyou just worked on you could also submit\nthis to front-end Menor if you wanted to\nto get feedback on your project um so\nawesome we've got something deployed and\nand shareable\n[Music]\nas you saw in the intro our goal as web\ndevelopers is to avoid our users hurting\ntheir eyes after they look at our web\napplication on a desktop device a tablet\na mobile device or whatever they're\nviewing it on let's take a look at some\nof the\nprerequisites it's basically just HTML\nand CSS which we covered um for the most\npart in the prior lessons of this series\nnow let's talk about this for just a\nsecond on what we're going to be\ncovering here because this is a massive\ntopic that I cannot do um Justice to if\nI'm not defining exactly what we're\ngoing to be learning I'm going to start\non the right side of this screen um and\nas I said I am not the best designer\ndesigner in the world um graphic design\nis generally a painful experience for\nmyself um I've put together a few decent\ndesigns over the years but nothing that\nyou know I I could call myself a\ndesigner in any form of fashion but the\ngood news is as a fullstack web\ndeveloper you do not need to be a great\ngraphic designer for that reason I'm not\ngoing to teach you the design side of\nthings and as we've talked about um\npreviously in the series we're going to\nbe going through and making some of\nthese challenges with HTML CSS and even\nJavaScript so this is frontend Menor and\nthis is one of the designs that we're\ngoing to create after we learn about CSS\ngrid and flexbox over the next couple\nvideos and you can see that there's uh a\nresponsive design here we're going to\ntalk more about that in just a second\nlikewise we have this challenge right\nhere which is just another um looks like\ncrowdfunding page so this will be a fun\none to do and what you'll notice here is\nthat as we're going through through our\ncourse here we're leveraging existing\ndesigns we're not trying to do this on\nour own and that is the point of this\nvideo is to teach you how to leverage\nthose existing designs and make sure\nthat um everything is responsive and\nlooks good on all devices that you might\nsee it on so here are the lessons that\nwe're going to learn in this video first\noff what is responsive design now you\nprobably have a a general idea of that\nbut we'll dive a little deeper into it\nnext we'll be talking about mobile first\nversus desktop first designs and\nhonestly it took me years to figure out\nwhat this actually meant which um\nlooking back is is kind of silly because\nit's not that hard but uh we're going to\ntalk about that so mobile first versus\ndesktop first next up we'll talk about\nCSS breakpoints how they relate to Media\nqueries and how we actually write media\nqueries within our web apps and then\nfinally I'm going to leave you with a\nresponsive design checklist this is not\ngoing to be super detailed just a highle\nchecklist that you can go through to\nmake sure you're covering your bases and\na little project what we're going to do\nis take our design from a previous video\nso it was the previous video I'll link\nto it up here where we designed this\npricing card and what you'll see with\nthis pricing card is as we resize the\nscreen it just gets cut off so I'm going\nto teach you in the challenge at the end\nof the video how we can take this\nsituation and turn it into this one\nwhere as we resize it gets close gets\nclose and then boom it breaks and it\nlooks a lot better on a mobile device\nsomething that your users will not be\nangry about let's go ahead and dive into\nthat question of what is responsive web\ndesign and the answer to that at least\nin my head I like to keep it simple so\nthat we can remember it if your users um\nhurt their eyes looking at your web page\non a desktop device or a mobile device\nor a tablet or whatever they're viewing\nit on then you have not designed it\nresponsibly so that is a good little way\nto remember what responsive design is\nall about now here's the thing it's 2021\nand there's a lot of website Builders\nthere's you know Squarespace there's Wix\nWordPress um a bunch of other website\nbuilders that kind of take care of this\nresponsiveness for you and for that\nreason most websites nowadays are\nresponsive and they look pretty good so\nI had a hard time actually finding a bad\nexample of responsive web design for\nthat reason I created one that's not\ngoing to be anything um crazy but let me\nclose out a few tabs here and what I\ncreated was this you know very basic\nexample of bad web design but a few\nthings that you'll notice here is as I\nmake it larger and larger so this is a\npretty big screen I'm working on you'll\nnotice a few things so first off as my\neyes read across this text I have to\ncover a lot of real estate on the screen\nto actually get through one single line\nof text and that's kind of a no no when\nit comes to responsive web design you\nwant that text to be you know generally\nless than we'll call it 700 pixels um so\nit needs to be you know in the middle of\nthe screen it needs to be narrow enough\nfor your eyes to not have to basically\nmove great distances to read it so\nthat's one piece of this another piece\nis you see this nav bar up here we've\ngot a couple links on the left and a\ncouple on the right and they are very\nspaced out to the point where it's it's\nalmost too spaced out so those are a\ncouple issues going on with this um on a\nvery wide screen now if we make this\nmore narrow you're going to see\nsomething that is just going to hurt\nyour eyes which is not the point of\nresponsive design so as we get smaller\nthis could be a mobile device of some\nsort you'll see that we have two columns\nhere and that's not going to work on a\nmobile device you want to have most\ncontent to be you know full width on a\nmobile uh screen and and then also you\nhave all of these links up at the top\nand the contact link is almost getting\ncut off to the point where you can't\neven click it or see it or anything so\nthat's a big problem if we were viewing\nthis on a mobile device now what I did\nwas I went ahead and improved it a\nlittle bit so this is the improved uh\nversion of this design where you'll see\non a wide screen the article text is\nonly a certain width I think I made it\nsomething like 650 pixels wide as a Max\nmaximum and you can see that we can skim\nthis text without you know moving our\nheads from left to right and then also\nyou'll see that the Navar has has been\nbrought in so these links are not you\nknow at the very edges of our page and\nthen as we resize this you're going to\nsee that um everything changes so right\naround here I believe somewhere right\nthere so you'll see at this break point\nthis column goes under the main text\nwhich is going to be a little bit easier\nto see and then also you'll see The\nLinks at the top are going to turn into\na navigation menu that it doesn't do\nanything because I didn't want to spend\nthe time to do that but this would be\nlike a drop down so that you could see\nthe links there and then I left the home\nlink so that you can still navigate that\nway so even on a really small device you\ncan see that you know most of this looks\npretty good now obviously this is not\nthe most visually pleasing design in the\nworld um it's not meant to be it's meant\nto show you generally what responsive\ndesign is to get a better grasp of what\nthis is all about let's take a look at\nreally good examples of responsive\ndesign and I'll point out a few things\nthat are good about them the two\nportfolio sites we're going to be\nlooking at are um Cassie Evans this is\njust a really nice looking site and\nJason langdorf I think I said that right\nI don't know either of these people but\nI have found their portfolio sites and\nthey're just really visually pleasing\nthey've done a really good job at\nresponding to different screen sizes so\nas we look at this um let's go ahead and\nbreak this this window out so that we\ncan kind of resize it but let's just\ntake a look at how these websites react\nto different screen sizes so here is uh\nCassie's website and this is the\nhomepage you'll see that as we resize\nthis to a more mobile device that big\ntext is going to get broken out to the\nmain portion and we're going to get rid\nof that image right there so it's a\nlittle nicer to see on a mobile device\nand then as you scroll down you'll see\neverything is kind of full width if we\nwere to bring this back to a desktop now\nit's got a nice little layout so you\nkind of get the point this is just a\nreally nice uh example of good response\nof design right here likewise uh Jason\nsite is pretty good in this respect so\nyou'll see there's this picture here on\nthe left on a desktop device and as we\nresize it's going to get put on top the\nbutton gets a little bigger so so it's\neasier to click on a mobile device and\nas we go smaller and smaller you're\ngoing to see that it's really easy to\nnavigate around if we click the blog\nyou'll see it's the same thing um on a\nmobile device it looks really nice and\neverything is easy to click um on a\ndesktop it's also really nice and you\ncan see that it's in the middle of the\nscreen this was what I was talking about\nearlier you don't want your text to be\nthe full length of a desktop device\nbecause some of them are going to be\nhuge screens and you'll have to move\nyour head to read the text in the first\nplace next up we have to talk about\nmobile first versus desktop first web\ndesigns when I was first learning I'll\nbe honest I could not figure out what\nthe difference between these were um\neveryone was talking about it and saying\noh you want to do mobile first mobile\nfirst but I never understood what they\nwere talking about and it wasn't until I\nrealized that these concepts of mobile\nor desktop first design has nothing\nreally to do with the design phase of a\nproject and it has everything to do with\nwhen we start writing our CSS so it's\nreally important when you're you know\nlearning all these Concepts to really\nseparate the design phase from the\ncoding phase of a project you don't want\nto get into the um situation where\nyou're trying to design something and\ncode it at the exact same time because\nafter all designing something is very\nright brained and coding something is\nvery left brain so you're going to get\nto the point where you're just in\ncomplete confusion if you're trying to\ndo both at the same time time so my rule\nfor myself at least is before I write\nany code whatsoever I need to have at\nleast a basic visual representation of\nwhat I'm trying to create but if you're\na very mediocre designer like myself or\nif you just have no design skills\nwhatsoever what do you do you know do we\nactually try to design something or do\nwe just hire someone to do it that's a\nquestion that I was asking when I first\nstarted in my opinion you really have\nthree options when it comes to you know\ngetting that first visual representation\nof your web page in front of you number\none you can hire a designer and have\nthem design it for you but in most cases\nespecially if you're watching this you\ndon't have the time to go figure out\nwhat designer uh you want to hire and\nthen furthermore you know you don't need\nto pay anyone to learn how to code so\nthat's kind of out of the equation\nthat's for later down the road when\nyou're trying to actually build a\nproduct and sell it and you need to have\na really professional design built the\nsecond option is to browse the internet\nfor free designs and that's what we've\ndone with the frontend Menor challenges\nthis is a great way to kind of Outsource\nthat step for free and what you can see\nis we've got these designs that we're\ngoing to be creating already built for\nus and we don't have to think about them\nat all as we scroll through this you'll\nsee that there are desktop versions here\nand then there's also mobile versions so\nthat you can see how do we want this to\nlook on both uh sizes of screen if\nyou're not super worried about what you\nknow your end product is going to look\nlike but you want to still make it\nmobile responsive you can put together a\nwireframe and you can use a tool such as\nfigma um so this is a really popular\nplace to put together a wireframe or\neven a mockup which is a complete\nrepresentation of what you want to build\nbut usually pencil and paper is good\nenough for a basic wireframe and your\ngoal with a wireframe is to just get a\ngeneral idea of where the elements that\nyou have on your page should be arranged\nbased on the size of theen screen so\nI'll put something up on the screen just\na basic wireframe that I created for\nwe'll just call it like a Blog where you\nhave a sidebar and you have some regular\ncontent and you can see a desktop\nversion and a mobile version and this is\nentirely sufficient if you're just\ntrying to get a basic understanding of\nwhat you're creating now like I said if\nyou're trying to uh build out a product\nor something or if you're a great\ndesigner you can use a tool like figma\nwhich is going to allow you to put on uh\nput together full on on mockups and the\ndifference between say A wireframe and A\nmockup is a wireframe doesn't really\ncare about you know the colors and the\nfonts um all that detail it just cares\nabout kind of the layout of the elements\non the page now a mockup is a full-on\nrepresentation of what you're trying to\nbuild so a tool like figma or adobe XD\nor sketch or a couple other different uh\ngood tools for that can allow you to\ncreate full-on mockups like the one that\nwe're looking at here with frontend\nMenor so this has not been coded yet but\nit's a a perfect visual representation\nof what we do want to code and you can\ndo that with those tools so coming back\nto the original question what's the\ndifference between mobile first and\ndesktop first design you see with all\nthese mockups we have a version of the\ndesktop and Mobile on both so does it\nreally matter which one you create first\nwell the answer to that is you're asking\nthe wrong question now this took me a\nlong time to realize but mobile first\nand desktop first has nothing to do with\nthe actual design phase it has\neverything to do with when you start\nwriting that CSS and when you put\ntogether your break points so in order\nto understand these better we have to\ndive into something called a media query\nwith CSS and along with that concept\ncomes um the concept of breakpoints to\nbetter understand what I mean when I say\nbreakpoint let's look at a code pen that\nI put together to explain it now if I\nsaid said I want a breakpoint at 600\npixels what I mean by that is as the\nscreen gets smaller or bigger than a\nwidth of 600 pixels I want to have\ndifferent CSS rules for both of those so\nin other words if I'm on a mobile device\nor a desktop device I want different CSS\nlet's do a quick review so let me come\nto a page that I'm I'm not really using\nhere so let me close out a few of these\num this is just the web docs for CSS\nwe're going to right click and inspect\nand then go to the console and if we\nwere to type window.in\nwith it's going to give us a number and\nthat number\n714 is the visible width of the screen\nso as we resize this so we're kind of\npulling it to the left and right and\nresizing it we can run this again and\nyou're going to see we get a different\nnumber so now it's only 356 pixels wide\nso that's what we talk about when we say\nthe the viewport with so what I've done\nis I've written a little bit of\nJavaScript here to make this slightly\nbigger for us to see and what I've done\nhere in the bottom is basically said\nwhen it resizes the screen I want to\nchange the content of this up here so\nI've got a span an HTML span that has a\nnumber in it and that's going to be\npopulated by the window.in withth\nproperty every time the screen resizes\nso in effect you're going to see as I\ndrag this this number is going to uh\nupdate live and also what I've done and\nwe're going to learn more about what\nthis is is I've written a breakpoint at\na minimum width of 600 pixels and I've\nincluded some different styles within\nthat breakpoint so one of those is going\nto be um the H1 tag is going to have a\ncolor of red on screens that are bigger\nthan 600 pixels or equal to and then\nwhen it is not so a mobile device we're\ngoing to have a color of green so you'll\nsee as I resize this we get closer to\n600 so we're about to hit it and when I\nhit 600 it turns green so we'll go back\nup turns red back down it turns green so\nthat is the basics of a CSS breakpoint\nnow of course changing the color of some\ntext based on the screen is not really\nthat useful and you probably won't see\nit all that often but what you will see\nis see CSS that affects the layout of\nyour HTML changing on different screen\nsizes let me go ahead and uncomment um\nsome of the code here that I've created\nand what I've put in here is a couple of\npictures these are just placeholder\npictures um from the placeholder.svg\nso when we say mobile first it's all of\nthese rules at the top we have a width\nof\n75% and as we come down into this break\npoint of 600 pixels you're going to see\nthat the image width is going to be Auto\nwhich basically means it's going to fill\nits container so in effect our break\npoint at 600 pixels is going to say okay\nif it's 600 or greater I want to have um\nthese image images sitting next to each\nother otherwise I want to put them uh\n100% width of its container and they'll\nstack on top of each other so as we\nresize this we get closer and closer to\n600 it's going to change so watch what\nhappens when we get below\n600 right there you'll see that the\nimages went to 100% width or not 100%\nwidth uh 75% width and they're going to\nstack on top of each other because they\nno longer fit next to each other on the\nscreen so that's a good example of a\nbasic CS breakpoint and how we can use\nit to rearrange the layout of our page\nso you have a basic idea of what a\nbreakpoint is in CSS but the question\nbecomes what breakpoints do I actually\nuse and there's not really a simple\nanswer to that let's take a look at this\nweb page right here this is screen sizes\nUMES there that's pretty clever you're\ngoing to see that there are a lot of\ndifferent devices that we could possibly\nbuild our web page for and there's no\nway that we can go through all of these\nthere's hundreds and hundreds of\ndifferent devices there's no way that we\ncan optimize for all of them so we have\nto do our best at guessing you know\nwhich screens do we want to set our\nbreak points on and design them a little\nbit differently in general mobile\ndevices are going to be somewhere in the\nrange of 320 to call it 480 pixels wide\nyou'll have tablets between 6 and 800\npixels you'll have you know regularized\nlaptops around the you know 1,24 to 1440\npixel range and then bigger desktop\ndevices are going to have a width of\ncall it 2500 pixels so those are just\ngeneralizations um but as you can see on\nthe screen there's all sorts of\ndifferent numbers and I don't want to\nget into the discussion of things like\npixel density and what is the difference\nbetween the actual width of a device and\nthe adapted pixel uh interpretation for\nus as web developers it's a pretty\ncomplicated topic if you can just\nremember those guidelines that I just\nmentioned you should be good so as\nyou're deciding what break points you\nneed to use for your um web page or your\nweb app you have to ask three questions\nin my opinion so the first one is going\nto be will the web page even be used on\na mobile device and is that your\nintention there are plenty of apps that\nare not meant to be used on a mobile\ndevice so think about budgeting apps or\nyou know big spreadsheets things that\njust don't look very good on a mobile\ndevice you probably don't want to waste\nyour time energy and maybe even money to\ncreate a a pleasing mobile experience\nyou're just going to say to your users\nhey this is not meant for a mobile\ndevice you should be using our\napplication on a desktop another\nconsideration would be are you offering\na mobile application if you are you know\na good example might be something like\nYouTube so the YouTube application on a\nmobile device is really nice to scroll\nthrough and use but their web version so\nif you were to open up the browser and\nthen type in youtube.com rather than\nopening up the mobile app it'll still be\na semi nice experience but it definitely\nwon't be as great of an experience as\nopening the mobile app so if you're\ncreating something and you plan on\nmaking a mobile application you may not\nhave to put quite as much time and\nthought into how it looks on different\nscreens the second question you might\nask is is it actually important to have\na different design for each screen if\nyou've just got a basic website that\njust has text on it and you don't have a\nlot of images or anything like that then\nit may not be that important to have a\nbunch of breakpoints you may be able to\nget away with one design for all devices\nand it'll work just fine and the final\nquestion you have to ask is are there\nstandards for this you know why can't I\njust use the industry standard for what\neveryone is using for breakpoints and\nunfortunately given the fact there are\nso many different screen sizes and\nscreen sizes are constantly changing as\nnew physical devices are released to the\nworld there's not really an industry\nstandard that we can go off of while\nthere are no industry standards per se\nthere are these things called CSS\nFrameworks and as I talked about in the\nprior videos we're not going to be\ncovering in depth any one CSS framework\ngiven the fact that I don't want to lock\nyou into any one thing I want to teach\nyou the fundamentals of CSS rather than\ntrying to teach you a framework but\nhaving a framework um to piggyback off\nof when it comes to break points is a\nvery smart decision at least in my\nopinion these guys that create the\nFrameworks are thinking about you know\nbreak points all the time they have to\nincorporate those break points into\ntheir own Frameworks and therefore if\nit's good enough for them then it's good\nenough for me and hopefully everyone\nwatching this given the fact that\nbreakpoints are not an exact science and\nthese guys think about it a lot more\nthan you know someone like myself would\none of the most popular Frameworks or at\nleast longstanding CSS Frameworks is\nbootstrap now bootstrap you'll find it\nin several tutorials you can kind of\nread up on it it's basically you know a\nCSS framework is all about making your\njob writing CSS easier so a lot of times\nthese CSS Frameworks are going to create\ngrid systems um in layout systems so\nthat you can just have predefined\nclasses that you can pass in to make\nyour sites mobile responsive and stuff\nlike that so with that they have their\nstandard set of break points and if you\nscroll down to um on bootstraps\ndocumentation it has a list of these\nbreak points and you can see that there\nare are about five of them so by default\num bootstrap is what we call mobile\nfirst and you're going to start to catch\non to what this means and when I say\nmobile first it means that we are first\ndesigning our CSS for a mobile device\nand then what we're saying is anything\ngreater than 576 pixels will have these\nStyles and then anything greater than\n768 will have these different styles so\nbasically you're starting with the\nmobile device you're writing your CSS\nand then you're writing little blocks of\ncode with these break points to Define\noh what happens when we have a bigger\ndevice so that's kind of what we mean\nwhen we say mobile first so here are the\nbreak points got 576 768 992 1,200 and\n1,400 for small medium large uh extra\nlarge and XXL so those are the standards\nfor bootstrap and they're going to be\nour standards but the question is do we\nhave to use all of them and the answer\nto that is no we don't need to use every\nsingle break point here we just need to\nuse enough break points to make our\ndesigns look suitable on all devices and\nbased on what you're creating that may\nbe one or two breakpoints or it may be\nall of these break points that you have\nright here if we're looking at an\nexample like this pricing card that we\ncreated I'm not sure really what\nhappened here um but anyways we have\nthis pricing card and for this we really\nonly need one break point now if you're\nincorporating this into a application\nyou might have a couple more but really\nwe just have two states that we have to\ncreate we've got this fullon state which\ncan be on basically tablets and above\nand then we have this mobile state where\neverything's stacked on top of each\nother so in this case we only had to\ncome down here and write uh one single\nbreak point so we have the mwidth being\n576 which I got from from right here so\nanything greater than a small device or\na mobile device is going to have X\nStyles all right so we've been in theory\nland here this whole video and we've\nbeen talking about the the design\naspects and break points and how do we\nchoose them but we haven't actually\nwritten any code yet and I want to do\nthat now I want to show you exactly how\nto write a CSS breakpoint and how that\nrelates to this thing called media\nqueries so I'm going to come to my code\npen and make a new one so that we can\njust have a playground to work in and\nthen down here in the CSS this is where\nwe're going to write our break points\nbut we first need to have some HTML so\nuh we'll say responsive web\ndesign\nexample and from here let's just put in\nan H1 welcome to the\ntutorial all right so we have some HTML\nto work with and now down in the CSS\nsection we can write a break point and\nthe basic syntax of the CSS breakpoint\nis this so what I copied in here is a\nwhat we actually call a media query and\nthe breakpoint is the number that we\npass in as a minimum width to that media\nquery now we have a little bit more to\nlearn about this syntax because we have\nto ask ourselves what is this at media\nactually mean and if we go over to the\nmdn documentation let me close out of\nhere um this is what we've been using so\nfar in this series and you can come down\nto technology CSS and then if you come\nto the CSS reference so in the CSS\nreference the first paragraph has all\nsorts of links that we can go to and it\nsays use this reference to browse\nalphabetical index of all the properties\npseudo classes pseudo elements data\ntypes functional notations and at rules\nand this last one the at rules is what\nwe want want to click on so what these\nare they're CSS statements that instruct\nCSS how to behave so that would be\nfitting into our categorization of media\nqueries uh perfectly so if we scroll\ndown you'll see down here um in the\nindex these are all the different at\nrules or whatever tells the CSS how to\nbehave and if we click on\nmedia that's going to take us to the\nmedia query page so this is an at rule\nthat can uh be used to apply part of a\nstylesheet based on the result of one or\nmore media queries all right so then we\ncome down to the syntax and you're going\nto see some pretty complicated stuff\nbeing written um but this is the basics\nof a media query and if we come back to\nour um example here you'll see the basic\nsyntax just has at media and then in\nparentheses we write whatever rule we\nhave and then down here this is where\nthe CSS is is going to go so if we\nwanted to specify some CSS for our H1\nwe're going to put it there so anytime\nthe screen is greater than 756 pixels\nthe text will be red so if we shrink\nthis it goes back to black and then we\ngo to Red so that's the very basic\nsyntax but in this rule we're actually\nselecting every type of media device so\nif we go back to the documentation and\nlet me drag this over so we're not\ngetting so confused with our tab s um\nbut if we come to the media Rule and\nscroll down to the description you'll\nsee that there's this concept of media\ntypes so we have all print screen and\nspeech and you can actually Define\nwithin your media query which device\ntypes you're actually trying to Target\nnow in our case when we wrote this one\nwe're just saying we want all devices\nnow you can also specify in that rule\nthat you only want to Target um certain\ndevices now we're going to be working\nwith screens uh mostly that's like a\nmobile uh like an iPhone or Android a\ntablet or a desktop screen so that's\nkind of our Forte as web developers but\nyou also have print and speech which are\nsome more um specific use cases that you\ncan Target so let's see how we could\nchange our rule to Target those devices\nso if we said media all and this is\ngoing to say that we want to talk taret\nall uh media types so this is the\nequivalent of this those are the same\nthing but if we come in here and we say\nmedia print and this is only going to\napply to um print is basically like a\nprint preview view on a screen so as you\ncan see our rule down here of the color\nred no longer applies to this text\nbecause we're only targeting print media\ndevices likewise we could put in speech\nand and that's also not going to work\nbecause this is not a speech media type\nbut if we put in the word screen it's\ngoing to now apply because this is a\nscreen um and this rule should apply to\nit now with these media rules we can add\nsome logic in here I'm not going to get\ntoo deep into this but I want to at\nleast show you what it is so let's say\nthat we wanted to Target only screens um\nat a width between 400 and 600 pixels\nnow we could do that in one media Rule\nand the way that we would do that is by\nwriting some logical operators within\nCSS so if you remember with JavaScript\nif we came down here into the JavaScript\nsection and we just typed in some basic\ncode we can use conditionals so we can\nsay um we can create an if statement\nthat says if my VAR is greater than 10\nand my VAR is less than 100\nthen we'll do something within this code\nso you can see that this little and\nsymbol is The Logical operator that\nwe're using now CSS actually has logical\noperators just like this so we don't\nneed this JavaScript code um anymore but\nwe can rearrange this rule to have those\nlogical operators in Target multiple\nconditions so let's go ahead and do that\nlet me get rid of this comment um the\nfirst thing that we're going to do when\nwe're having these logical operators we\nhave to put this operator called only so\nonly when it's a screen is when we're\ngoing to use this Rule and then we can\ndrop down onto some new lines just to\nseparate these things out um we'll put\nour brackets down here and now we can\nadd another one here so we can say\nand Max width is something like 800\npixels so let's just change this we'll\ngo what did I say we wanted we wanted\nsomething between 400 pix pixels and 600\npixels and now what we're saying with\nthis rule is so at media so we want an\nat rule for CSS we only want to Target\nscreen media types which is what we're\nlooking at here and we want to Target\nsomething with a minimum width of 400\npixels and we want to Target one some\nsomething with a Max width of 600 pixels\nso basically what we're saying here is\nonly screens between 400 and 600 pixels\nshould this H1 CSS rule apply so if we\nmake the screen really big that's not\nwithin those bounds but as we go down\nand you can down here right at the\nbottom you'll see a little pixel\nindicator as I scroll but as we get\nbetween 400 and 600 we should see it\nturn red and then we go back to black as\nit gets smaller than 400 so you can see\nhow we can use CSS logical operators\nwith our media queries to Target um\ndifferent types of conditions now you\nyou can also bring in other CSS at rules\nso if we go back to our documentation\nwe'll click back um this is our our at\nrules page and you can see we have media\nqueries but we also have things like\nimport and supports so if we clicked on\nsupports this basically is an at rule\nthat lets you um check to see if a\nspecific CSS property is supported in\nthe browser that the user is using so a\ngood example of this is Xbox and CSS\ngrid which we'll learn about in the next\nfew videos those are not yet um\nsupported by all browsers now most of\nthem do but things like Internet\nExplorer I don't think do and maybe a\ncouple others with CSS grid so you can\nsee in this example we can use this to\nbasically check whether um the display\nsupports display grid property and then\nif so we will use that property within\nour CSS so as you can see me media\nqueries and CSS at rules can give us a\nwhole lot of power when designing our\nPages for different devices um media\ntypes and different browsers so we're\nnot going to get too far into it because\nthat's not the point of this video but I\ndid want to show you the basics of it\njust so that you were aware now at this\npoint I want to take you through we'll\ncall it the 8020 guide of media queries\nand CSS breakpoints I'm going to show\nyou how to take these standard break\nbreak points that we have um from the\nbootstrap framework and incorporate it\ninto an actual CSS document to do that\nlet me put some images on our page so\nwe'll say welcome to the tutorial and\nthen we'll have a bunch of just\nplaceholder images with uh on the screen\nso what we want to do with these images\nis make them responsive based on the\nscreen size so something that I can\nthink of is maybe on mobile devices we\nwant it to be you know 100% with just\nlike we're seeing here where they're\nvertically stacked then maybe on tablet\ndevices we can have two images per row\nand then on a desktop device that is\nmuch larger we could have uh we'll call\nit four Images uh in one row across the\npage as I just described we want to have\nthree different states of our web page\nwe want a mobile display a tablet\ndisplay so two images and a desktop\ndisplay four Images so we have three\nstates and that requires two CSS\nbreakpoints to achieve now you'll\nremember bootstrap has you know five of\nthem we only need two of these because\nwe're not making a super complex design\nand that is a good demonstration of how\nyou have to look at you know what's your\npurposes and then decide how many break\npoints you don't want to just throw in a\nbunch of break points just to have them\nthere the first thing we need to do is\nput in a basic CSS reset now we talked\nabout this in Prior videos of this\nseries so be sure to watch those if you\nhaven't um but it's just changing the\nBox sizing so that we can uh fit these\nimages reliably uh next to each other\nwithout any unwanted\nBehavior the next thing we'll do is\nWe'll add in our breakpoint templates if\nwe go to bootstrap and look at what we\nneed here I think what we're going to do\nis grab this one right here so I just\nwant to mention here this top one this\nis not actually a break point that we\nneed this is kind of just default so as\nwe talked about this is a mobile first\nuh approach where we want to design the\nregular CSS or the default CSS to apply\nto a Mobile screen and then we will\nconditionally style any screens that are\nlarger than a mobile device with these\nbreak points so we're going to grab the\ngreater than or equal to 576 so that's\nbasically saying what happens on\nanything greater than a mobile device\nand then we also will probably grab the\n992 which is basically saying everything\ngreater than say a tablet so mobile\ntablet and desktop is all we need to\ncover so we'll say 576 and\n992 let me just jot this down here so\n576 and 992 so I don't forget and now we\ncan write our media queries so like I\nsaid you can just use this basic syntax\nyou don't have to put any of those\nlogical operators in there and we're\ngoing to say minwidth\nis\n576 pixels and then put some brackets to\nbreak it down we will copy this put it\nright below and change this number to\n992 we can get rid of the comments here\nand we should be set up to have our CSS\nbreakpoints now now right now the\npictures on the screen no matter what\nsize screen we have are not going to be\nresponsive now you'll see that they come\nnext to each other on this larger screen\nand that is just because naturally an\nimage is I believe an inline block\nelement which means it doesn't have to\nhave its own line and these are I\nbelieve 500 pixel uh images yeah we put\nin 500 pixels for these images using the\nplacehold placeholder service and\ntherefore if the screen is bigger than\nsay a th000 pixels so 500 plus 500 those\ninline blocks are going to wrap up onto\nthe line so this is nothing of CSS that\nwe've written it's just the natural flow\nof HTML so in our mobile first approach\nlet's go down to a mobile device which\nis going to be right here and what we\nwant to do within this CSS we'll go\nright after the CSS reset and what we\nwill do is we'll Target all images on\nthe page and we'll give them a width of\n100% And what that's going to do is it's\ngoing to resize all of the images to be\n100% % of the viewport and you'll notice\nthere's a little bit of padding that's\njust natural uh a default padding and\nmargin of this browser in the code pen\nenvironment but we have these as 100%\nwidth now as we resize this you're going\nto see that it maintains that 100% width\nall the way up to these larger screens\nand of course this is a way too large of\nan image to have on the screen so we\nwant to wrap these on you know next to\neach other on the lines so what we'll\nfirst do is we'll come in to this media\nquery which is basically going to say\nanything greater than a mobile device is\nwhat we want here so we'll Target images\nand what this is going to say is if the\nscreen is greater than 576 pixels we\nwant to override the original image\nstyle and put it to something else so in\nthis case we'll give it a width of um we\nwanted two per screen so we'll say\n50% and now we should see these wrapping\num no they're not wrapping let's change\nit to\n49% okay there we go now the reason we\nhave to do 49% this is not going to be a\nproblem once we learn flexbox and CSS\ngrid but it's just uh White space and a\ncouple other things that are causing\nthis so um don't mind the fact that it's\n49% it should technically be 50 so as as\nyou see here on a mobile device we have\n100% width and they stack on top\nthen as we resize to be greater than\n576 they will break onto two or two per\nrow and then now we want to make it four\nper row once we get above 992 pixels so\nright now it's going to stay as two per\nrow no matter how big we get but if we\ncome down here and add an image style\nand give it a width of\n24% you'll see that as we getar larger\nit's going to put four per row so now we\nsee we have one per row here two per row\non a tablet and four per row on a\ndesktop device so we've successfully\nwritten a mobile first approach to CSS\nand we've designed for three different\nscreen sizes now I want to walk through\nhow the CSS interpreter is actually\nworking here because um sure we can\nwrite these break points but we really\nhave to understand what's going on\notherwise we're going to make a silly\nmistake that I'm about to show you so\nlooking at this CSS we have to ask\nourselves how do we actually read this\nor how would the the browser be\ninterpreting this so by default we've\ngot all these images here and when CSS\nis read we'll we'll first read the CSS\nreset we'll make the Border box um\ndifferent and then as we come down we'll\nsay okay I have an image CSS selector\ngiving it a width of 100% so so the CSS\ninterpreter is going to say okay great\nthe width of all images is now\n100% now as we come um further down\nyou'll see the media queries and it'll\nthe browser will basically say so is my\ntotal width of the viewport greater than\n576 pixels um let's go ahead and make\nthat true so now we're at the biggest\nsize and so as the browser is reading\nthis it says okay yeah it is bigger than\n576\nso let's go ahead and apply this rule so\nit says all right now images are not\n100% we're going to replace that with\n49% and then it reads even further down\nand it sees this next media query and it\nasked it it basically ask itself okay is\nit greater than 992 pixels the viewport\nwidth of the browser the answer to that\nin this case is yes so it's going to say\nokay now my images need to be 24% width\nand we're going to replace these\nprevious two rules up here so what we're\ndoing is we're walking through that\ncascading concept of CSS where it's read\nfrom top to bottom and the last rule so\nlong as that last rule has the same\nspecificity as rules above it is going\nto be the one that applies so where this\nis important is the order of the break\npoints that you're adding or the media\nqueries so if I were to take this last\nmedia query and place it above this one\nthings are going to change for us and\nthat is because of how the CSS is read\nfrom top to bottom so in this case what\nyou'll notice is on a mobile device we\nlook good it's working fine but as we go\nup we're only going to get two images\nper row no matter how far or how wide\nthe screen gets and you might look at\nyour CSS and say well why is that we've\ndefined that anything greater than 992\nshould get a width of 24% but the way\nthat CS s is red is top to bottom and\nwhat it's doing here is it's saying okay\nfirst we have this rule here that sets\nit to 100% then we're going to ask\nourselves is this screen bigger than\n992 the answer is yes so now we're going\nto set it to\n24% then it reads down once again and it\nsays is it greater than 576 and the\nanswer is still yes because this is\ninclusive of all screen sizes so now\nit's going to replace that image width\nwith 49% and override the 24% right here\nso the lesson here is that your media\nqueries the order of them is very\nimportant and you're going to need to do\ntwo things so first you need to add your\nmedia queries at the bottom of your CSS\nstylesheet and the reason is you've got\nall these rules for the default style\nwhich would be the mobile screens and\nyou need these at the end so that they\ncan override those Styles and then\nsecond if you're going going with the\nmobile first approach which is basically\nusing Min widths rather than Max width\nthen you need the greatest WID to be at\nthe bottom so you need to go from you\nknow smallest to greatest otherwise what\nwe just saw is going to happen and\nnothing's going to behave as you'd\nexpect so at this point I want to\nrevisit this topic of mobile first and\ndesktop first design I've alluded to it\nover the last couple of minutes what\nthis actually is but I think we're ready\nto fully understand the difference\nbetween the two like I said earlier it\nhas nothing to do with the design phase\nof your project when you're just getting\nthe graphic design laid out in your\nwireframes or your mockups doesn't\nreally matter because you're going to\ndesign multiple screen size designs no\nmatter what but when we come to write\nthe CSS the difference is going to be\nwhether we're using media queries with a\nminwidth or we're putting in media\nqueries with a Max width because that's\ngoing to change how we think about our\nCSS entirely in this case we used\nminwidth which is basically the\nequivalent to mobile first design\nbecause all of the default Styles up\nhere are going to automatically apply to\nscreens and since we're using minwidth\nthat's going to apply to mobile devices\nnow as we go up in size that's when\nwe're going to start replacing CSS\nproperties according to those bigger\nscreen sizes so so what you see here is\nmobile first and now I'm going to\nreverse it and we're going to actually\ndo a desktop first um approach which is\nnot what I recommend but I want to show\nyou the compar and contrast so if we\nwanted to go desktop first then we would\njust have to change these two to Max\nwidth all right so let's change both Min\nwidths to Max width and you'll see that\neverything is working a little bit\ndifferently it's basically the exact\nopposite so as we get bigger we go to\nthat 100% % wi and as we go smaller we\ngo into the grid which is obviously not\nwhat we want and the reason is because\nwe thought of it from a mobile first\nperspective when we built it so\nbasically when you're doing desktop\nfirst all of these default rules are\ngoing to apply to your desktop devices\nso anything that is greater than this\nthe greatest break point that you've\nassigned is going to get all of these\ndefault Styles so we're basically\nstarting from the widest and then as we\ngo down we're replacing rules so if we\nwanted to work this the same as we had\nbefore we're just going to have to\nchange the widths so all of these rules\nare for you know desktop devices so we\nwant to replace this 100% with\n24% that should get us back to the point\nwhere we have the four uh four pictures\nper row now as we come down we're going\nto change the max width of 576 so this\nis basically referring to all mobile\ndevices we want to make this 100% so\nthat on a mobile device we see them\nstacked on top of each other and it's\nnot working let me go ahead and refresh\nthe page to make sure we got this oh\nactually this is a good lesson so when\nwe go from desk or from mobile first to\ndesktop first the order of the media\nqueries is going to change so when we\nhad Min widths we said we want the\nsmallest to largest going from top to\nbottom but in this case it's going down\nthis stylesheet and it's saying okay is\nthe screen less than 576 so let's make\nit a mobile it's saying is it less than\n576 the answer is yes so let's apply an\nimage width of 100% then it goes down\nand it reads is the max width or is it\nless than 992 in this case that is also\ntrue so it's replacing the width to 24%\nso that's why we're still seeing the\ngrid there\nso if we wanted to make that work we\nneed to put for a desktop first approach\nwe need the largest media queries first\ngoing to the smallest and now we have\nour intended behavior of 100% WID on\nmobile and then we should get um let's\ngo ahead and replace this last one here\nto be\n49% and now we should have a correct\ndesign so 100% on mobile we'll have two\nimages on a tablet and then we'll have\nfour images on the desktop so as you can\nsee mobile first versus desktop first is\nall about how we're writing our media\nqueries and whether we're using midwidth\nor Max widths in general you're going to\nfind that the consensus among the\ndevelopment Community is to use a mobile\nfirst approach and the reason behind it\nis as you're getting into more complex\ndesigns it is just easier to use the\nnatural flow of H ML on a mobile device\num so no media queries is required and\nthen tweak it as you get larger because\nin many cases a desktop first design is\nprobably not going to look very good on\na mobile device but the um inverse of\nthat so A mobile first design it will\nprobably look okay on a desktop device\nwithout any modifications so in summary\nyou're basically going to have to write\nless code um in most cases all right so\nwe've covered the basics now the next\nquestion is what do I actually put\nwithin these media queries and the\nanswer to that is I can't possibly teach\nit within one lesson you're going to\nlearn you know how to resize Things\nbased on different devices through\nexperience and time I'm about to show\nyou a basic example of just that but\nfirst I want to leave you with a\nresponsive design checklist so let's\njump over here and go to the checklist\nso you can just you know take a\nscreenshot of this write it down um\nwhatever you want to do but this is what\nI go through when I'm looking at my\ndesign and my web page and testing it on\ndifferent devices I want to make sure\nthat I check all of these boxes and if\nyou can check all these boxes you've\ncovered 95% of what you need to and the\nrest is going to be you know just subtle\nlittle changes and highly dependent on\nhow many requirements you have for your\nproject first up we want fluid layouts\nthis is basically saying you know what\nwe just looked at where we have you know\nsingle images on a mobile device we have\na row of two images on a tablet and a\nrow of four images on a desktop so\nthat's what we mean when we say fluid\nlayouts we want to make the content you\nknow just look good in general now\nimages we want to make sure that we have\nthe right aspect ratios and we're not\nstretching images to be you know too\nwide Too Tall too big on certain devices\nwe also want to do the same thing with\ntext we don't want to have huge text on\na mobile device where you only have you\nknow four or five words per line that's\na really poor user experience the next\nthing up is Overflow so that's basically\nyou don't want to have any text or\nimages or whatever cut off on the side\nof the screen so you've probably seen a\na mobile design before where you know\nhalf the image is off the screen you\nwant to avoid that and then uh similar\nto that we want full width mobile\ncontent so in general this doesn't apply\nto everything but in General everything\nthat you look at is going to be stacked\non top of each other rather than having\ncolumns you never really want columns on\na mobile device and then finally just\ngeneral usability so this is not too\nhard just get a friend um someone who\nwill give you honest feedback have them\nplay around with your um web page on\nmultiple devices and anyone is going to\nbe able to tell okay this doesn't feel\nright this one's kind of clunky it's\nhard to use this on a mobile device you\nknow I'm squinting on the desktop to see\nthis you should get pretty good feedback\nand just using a common sense approach\nis usually pretty good for this all\nright at this point we're going to apply\nthese skills we just learned and we're\ngoing to take this pricing Card\nChallenge where you can see that\neverything's getting cut off and it's\nnot responsive we're going to make it\nresponsive so the answer to this is\nactually relatively simple and we can do\nit in one of two approaches so the first\nway we could do it is a desktop first\napproach which like like I said I don't\nrecommend that as your default way of\napproaching CSS but in this case we did\nDesign This with a desktop first U\nmindset we didn't really think about\nmobile design when we were doing this\nand therefore in the CSS and the HTML\nthat has been reflected so in this case\nyou can see that the width of this um\ncard that we've created we uh decided\nthat as we were creating the card and\nyou can see it right here so we've\nassigned a width of 600 pixels to this\nand for that reason I think we can\nassign a a media query or a break point\naround that 600 pixel Mark now if we did\nit exactly at 600 pixels then you're\ngoing to see a design where you know\nwe're at 635 pixels here and looks like\nabout 600 right here and obviously\nthere's something cut off so you want to\nput a little bit of a little bit of\nwiggle room there so we might want to\nwrite our media query to be somewhere\naround 650 pixels so what we'll do is\nwe'll come down to the very bottom of\nthe CSS as we're supposed to with media\nqueries we'll write at media and then\nwe'll say Max width because we're\nsolving this in the desktop first\napproach um because this will be the\nsimplest um solution and we'll say 650\npixels so dropping down into this CSS\nrule all we really have to do is make\nthese bottom the bottom left and the\nbottom right um containers that we\ncreated we want to make them 100% width\nso that they naturally stack on top of\neach other so I believe all we have to\ndo if I'm thinking about this correctly\nis Target those two and give them a 100%\nwidth when the screen is less than 650\npixels so the IDS for this would be\nbottom left section so let's grab that\nthrow it in our media query\nand paste that in and then we want to\nput a comma because we want to also do\nthe same thing for the bottom right\nsection so let's grab that and put a\nhashtag to Target it and then we'll make\na CSS rule so right now in this media\nquery we're saying anything any screen\nthat's less than 650 pixels I want to\nTarget the bottom left section in the\nbottom right section by their IDs and\nthen I want to give them a width of 100%\nall right so at this point our screen is\ngreater than 650 but as we resize you'll\nsee that it's done something for us but\nnow we have to figure out what's going\non here because we've completely lost\nthe bottom right section it's pretty\nmuch disappeared and the reason that\nthat is happening is because we've set\nexplicit Heights on this card if you\nscroll up to the the top of the CSS\nyou'll see that we gave the card a width\nof 600 pixels and a height of 400 pixels\nand then we also set the Overflow to be\nhidden which was what allowed us to make\nthose rounded Corners at the bottom so\nwhat's happening here when I resized\nthis and we're we're basically losing\nthis right side entirely is because now\nwhen we stack them on top of each other\nit's greater than that height of 400\npixels and we're hiding that overflow\ncontent so it's not being shown here so\nif we were to come down to our media\nquery\nand set the\nheight to be Auto it's going to change\nsomething for us I believe no that's not\ngoing to change CU we don't want to\nassign that to the the sections we want\nthat to be to the main card so we need\nto\nTarget the card\nitself so down in our media query we're\ngoing to Target the card and now we're\ngoing to set the height to be uh Auto\nwhich is going to take That explicit\nheight and give it its automatic height\nand you can see that now we are resizing\ncorrectly but the last problem is you're\ngoing to see it's still cut off because\nfor this card component we still do not\nhave an automatic width so we've only\nassigned 100% width to the bottom left\nand bottom right section so if we were\nto assign the width here to Auto or even\n100% we should see that it resizes now a\nappropriately so I think what we can do\nis we can actually take um since we've\nduplicated this with we can take this\nheight Auto and we can put this up into\nthis Rule and then we can just\ninclude the the main card within that\nand delete these and I think it should\nwork just fine so let's resize it and\nyou can see that it works just fine and\nyou can see that all we had to do was\nadd this little block of code to make it\nmobile responsive\nbut I don't want to leave you hanging on\nthis one um I said throughout the whole\nvideo we want to go mobile first mobile\nfirst so I want to stay true to that and\nshow you how to make this Mobil\nresponsive from a mobile first uh\nperspective or strategy this desktop\nfirst approach worked pretty well\nbecause we originally created this from\nthat approach but ideally we would have\ncreated the original card from a mobile\nfirst perspective so I'm going to show\nyou how to convert that so let's delete\nour media query that we just created\nyou'll see that it goes back to being\ncut off and not being Moby responsive\nand now what I want to do is create that\nmobile first design so instead of a Max\nwidth we're going to write a media query\nwhere we have a midwidth which is going\nto be 576 pixels we'll just go with that\nso anything greater than a mobile device\nis going to have um whatever Styles we\nput in here now the cool thing about you\nknow media queries and breakpoints is\nthat you don't have to duplicate all of\nyour CSS a lot of styles are going to be\napplied similarly across devices so for\nexample the color of this button and\nthis text and these backgrounds that's\nnot going to change based on whether\nwe're on a mobile or desktop device so\nwe don't need to rewrite those likewise\nour text is going to stay the same we're\ngoing to have the same font style no\nmatter what so really the only things\nthat you have to alter between um break\npoints is going to be layout related\nproperties so what I want to start with\nis the overall card so if you remember\nin the top part of the CSS we have a\nrule for card and right now we're giving\nit an explicit width and an explicit\nheight now if you remember from a mobile\nfirst perspective everything that's not\nwithin the media query itself is going\nto apply to a mobile device so naturally\nwhen we're on a mob device we do not\nwant these explicit widths and Heights\nso let me go ahead and comment those out\nfor a second and what you're going to\nsee is that we've already done a lot\nbetter so the the overall card is the\nright width and height now but we've got\nsome problems going on within the bottom\nleft and bottom right sections now we\ndon't want to get rid of these widths\nand Heights all together so let's go\nahead and take those out of the the main\ncard and then scroll down to our media\nquery and we'll Target the card element\nand paste in those rules again so now we\nwant to give it a width of 600 and a\nheight of 400 on any device greater than\na mobile device or 576 pixels so let's\ngo ahead and resize this and it should\nbreak somewhere around here so right\nthere you saw it so that was where our\nbreak point was and you'll see that\nbased on the uh explicit width and\nheight we've given it it's not really\nfitting correctly so we can actually\nchange this it should work just fine so\nmaybe we'll say something like I don't\nknow 550 pixels so that gets it fitting\non the screen and then the height can go\nahead and stay at 400 pixels so now as\nwe have our mobile device it's somewhat\nresponsive and then as we go to anything\ngreater than a mobile device it stays as\nthis card the next thing that we want to\nlook at is the bottom left and the\nbottom right section\nso here are the styles that we have for\nthose and you'll see that we've given\nthem widths of 50% each so in this case\nwhen we're on a mobile device we do not\nwant these widths to be 50% we want them\nto be 100% so let's go ahead and comment\nthis out and when we do that it's going\nto have the default width of Auto which\nis going to be 100% so by default it's\ngoing to be 100% And if we comment out\nboth of these I think we should start to\nsee something that makes a little bit\nmore sense so you'll see that we have\nsome Auto actually no I said that wrong\nwe cannot just use it as Auto we need\nthe the text to span 100% width of its\ncontainer so in these Styles we need to\nI guess go ahead and set a width of\n100% so that fixes this section and then\nwe'll come down here and set a width of\n100% and that should pull this one to\nthe right all right so we're looking\ngood there and I think for the most part\nwe have our mobile design complete so I\nthink this is exactly what we want so\nour mobile design is complete we just\nneed to make this desktop design look a\nlittle bit better because as of right\nnow it obviously is missing an entire\nsection so really we can just let's go\nahead and delete the width of 50% even\nthe commented out section here and then\nwe'll go down to our query at the bottom\nthat says anything greater than um a\nmobile device and we're going to Target\nthe bottom left section and the bottom\nright\nsection and here we're going to give it\na width of 50% just like we had before\nand now you'll see that it fits just\nperfectly and as we resize it it goes um\nit resizes perfectly on a mobile device\nso that is the difference it's very\nsubtle especially because our project is\nvery simple there's not you know\nhundreds of styles\nbut the difference between a mobile\nfirst and a desktop first design is\nreally important and you really have to\ninternalize that um as a full stack web\ndeveloper in this video I'm going to\nteach you how flexbox works we'll start\noff by going through what's available to\nyou what it can actually do and then\nwe'll spend the rest of the video which\nwill be the the majority of it diving\nreally deep into how flexbox Works how\ndo we calculate different things things\nand use all of the properties my goal\nfor this video is to be the most\nin-depth flexbox tutorial on YouTube and\nthe reason I'm making it so in depth is\nbecause it's important I think that not\nonly knowing flexbox allows you to uh\neliminate a lot of the frustration when\nit comes to layouts in CSS but it'll\nalso set us up for our next lesson which\nis going to be on CSS grid so let's get\nstarted this is a flexbox crash course\nand the prerequisites for it is going\ngoing to be a basic understanding of\nHTML and CSS I've covered all of this in\nPrior lessons of this series so go check\nthose out if you're unfamiliar here's\nwhat we're going to be covering in this\nvideo we're going to learn what flexbox\nis how it can help you out and make your\nlife easier we're going to go through\nall the basic properties of flexbox and\nwe're going to get pretty detailed in\nthose so that you really understand\nwhat's going on there and then finally\nwe're going to look at a frontend Menor\nproject this testimonial uh grid over\nhere which going to be creating with\nflexbox in the next video a few of the\nthings that we're not going to be\ncovering shorthand flexbox properties so\nthere's a couple properties uh within\nthis CSS I guess module or framework or\nwhatever you want to call it that allow\nyou to write less CSS to achieve the\nsame thing and that's not our goal here\nwe're trying to learn flexbox you can\napply those much later down the road\nwhen you're more comfortable with\nflexbox and we're also not going to be\ngetting very Advanced with this I have\nwritten Advanced Flex flexbox properties\nbut we're pretty much covering all the\nproperties um I guess probably the\nbetter way to say that is we're not\ngoing to be going into advanced flexbox\nmethods and you know different layouts\nand all that kind of stuff my main goal\nis to get you understanding how the\nsystem works um and get you very\ncomfortable with using it the obvious\nstarting question is what is flexbox\nwell if you have been following along\nyou might have realized that as we're\nwriting our CSS there's really two main\ncomponents you have layout related\nproperties and then you have style\nrelated properties so a style property\nwould be like uh a color or a font or\nsomething like that doesn't really\naffect how things are laid out on the\npage but layout properties do that's how\nyou create you know grids and you know\nnav bars and Footers and sidebars all of\nthat kind of stuff so far we have not\nbeen using flexbox and our job has been\na little bit difficult because we've had\nto use uh you know hacky ways of getting\nlayouts to work flexbox is going to come\nin and really help you out with that\nlayout side of things and per the mdn\nweb docs uh flexbox is called the CSS\nflexible box layout module and it's a\nmodel for displaying items in a single\nDimension so either a row or a column in\nfuture videos we're going to get into\nCSS grid which is a two-dimensional\nlayout module within CSS and some you\nknow might say that CSS grid is better\nthan flexbox or bites Versa but they\nreally work together and we're going to\ncover how those work together within our\nCSS whatever the case flexbox and then\nsubsequently CSS grid which again is a a\nfuture video These are kind of the\nfuture of CSS layouts so in the past\nlike I talked about you had to use like\nfloats and clear fixes and inline blocks\nand specific widths and if you watched\none of the previous videos we had to\nalmost you know hack our way to getting\nitems to fit Within in a container by\nremoving white space from our HTML these\nare not good Solutions they're not\nsustainable and so flexbox along with\nCSS grid come in to provide a better\nmodel for doing layouts but enough talk\nlet me show you exactly uh what we're\ndealing with here so what I've got here\nis some basic HTML and I really want you\nto start understanding this container\nchild relationship within HTML so if we\nlook at this we can see that we have a\ndiv element with a class of container\nand then we have three div elements all\nhaving the same class of item this\nrelationship is very important the\ncontainer is the parent to all three of\nthese you know children elements to show\nyou how this relationship is important\nuh let's put some width and height\nDimensions we'll go with 100 100 pixels\nfor the width and height of the items\nwithin this container and we'll give\nthem a background color of say orange\nand then maybe we'll give some margin of\nfive pixels so they kind of separate a\nlittle bit so here you can see the three\ndiv elements these are the children\nelements to that container and the\nreason this parent child relationship is\nso important is because the second you\nenable Flex box on a container all of\nthe child elements become what we call\nFlex items so this is really important\nand first off let me show you what\nhappen when we have the normal display\nproperty so right now by default each\nitem here and the container are all\ngoing to be a display type of block so\nthey're block elements and you'll see as\nI type these in it's not going to do\nanything because we're basically just uh\nexplicitly writing in what was already\nthe default now with block elements as\nwe talked about in Prior CSS videos of\nthe series these are going to have\ncertain characteristics and flex items\nFlex containers are also going to have\ncertain uh display characteristics so if\nwe remove this display block which again\nthese are just defaults for uh div\nelements and we come up to the container\nand we type display Flex you're going to\nnotice that these items change and the\nreason they change is because by adding\nthis single property on the uh container\nelement or the parent we are basically\nmaking a flex container which holds a\nbunch of flex items the container and\nthe items have specific um\ncharacteristics that you know normal\nblock or inline elements do not have in\njust a minute I'm going to explain\nexactly why these Flex items are going\nin a horizontal Direction rather than\nvertical but for now I really want to\ndrill home this point about Flex\ncontainers and flex items now you might\nask well if I set display Flex on this\ncontainer and all of these are going to\nbe Flex items\nthen can I also you know make the flex\nitem a flex container and the answer is\nyes you can actually have an element be\nboth a flex item and a flex container at\nthe same time and that's why it's\nimportant to always keep these\nrelationships clear in your head let me\nshow you what I mean so if we come down\nto the final uh div element which\ncurrently is just a flex item and then\nwe put in a few more divs so let's put\nin a class of sub item and then we're\ngoing to copy this down three times and\nright now this doesn't have any\nDimensions but if we copy this CSS\nselector of item down and then we put in\nsub item and give it some different\ndimensions so we'll give it something\nvery small like maybe 15\npixels uh wide and tall and then we'll\nmake the background color blue in a\nmargin of one pixel something like that\nand what you'll see is that these line\nup within that third container because\nthey're children of this third Flex item\nbut at the moment these are not Flex\nitems themselves they are block Elements\nby default this brings up a very\nimportant point so if you look at our\nCSS we have put the display Flex\nproperty on this main container and when\nwe do that it only turns that container\ninto a flex item and then the direct\nchildren not all descendants but only\nthe direct children will be become the\nflex items so in this case all of these\ndivs are going to be Flex items but the\nsub items are not going to be Flex items\nthese will be the default block elements\nnow what I can do is I can come in and\nturn this final div into a flex\ncontainer which will then subsequently\nturn these sub items into Flex items as\nwell just so that I have a unique\nselector on here let me turn this into\nitem three um we'll put another class on\nthere and then all we have to do is come\ndown here on item three and write\ndisplay flex and what you'll see is\nthese three blue boxes right here are\ngoing to go in a a row just like the\norange boxes are as we go throughout\nthis tutorial I want you to keep this\nclear in your head this exact model that\nwe just laid out here so let me just\nwalk you through it one more time at the\ntop level we have a div called uh with a\nclass of container this is a flex\ncontainer and the reason it's a flex\ncontainer is because we put the display\nFlex property on it now all of the items\nthese three items right here these are\nFlex items and the reason they're Flex\nitems is because their direct parent is\na flex container now these sub items\nright here these are also Flex items but\nit's not because we have display Flex on\nthe main container it's because we've\nput display Flex on this third item\nright here I know this is confusing\nright now now it's going to get a lot\nmore clear as we go through the tutorial\nbut what's Happening Here is this third\ndiv within the container is both a flex\ncontainer and it's a flex item so it can\nactually serve as both types at the same\ntime in relation to the main container\nit is a flex item in relation to these\nsub items it is a flex container with\nthat level of understanding between the\ncontainer and flex item and how we can\ncombine those here are the flex\ncontainer and flex item properties that\nyou can use we're going to go through\neach of these but you have to keep them\nvery clear in your head when you're\ngoing through because you have to first\nidentify am I dealing with a container\nor an item and as you saw in some cases\nyou can be dealing with both so you can\nactually put um a combination of these\nproperties on a single HTML element\nsometimes this gets a little bit\nconfusing and something that I had done\nwhen I was First Learning Flex boox is I\nhad this cheat sheet that I found here\num it's a really great resource I'll be\nsure to link to it in the description\nbut I just keep this open uh whenever\nI'm working with flexbox because it's\nvery interactive you can you know click\non different things and and see how\ndifferent Flex properties work and it\ncovers pretty much everything now as I\njust mentioned some properties apply to\nthe container and some to the items this\nresource does not really separate that\nout on the left uh side right here but\nfor each property you'll come down and\nyou can see what it applies to so this\none applies to flex containers so I use\nthis resource keep it open um as you're\nlearning Flex boox it's a really good\nyou know little cheat sheet to have in\naddition um as we've been going through\nin this course you can always look it up\non mdn web dox so as you can see we're\non flexbox and here's the property\nreference for all of the valid\nproperties that we can use and you can\nclick on each of them and kind of get an\noverview of what uh what's available and\nwhat I'll point out is this formal\ndefinition down here for each property\nis going to tell you what the initial\nvalue is and sometimes that's important\nto understand what the default values\nyou're dealing with are the reason\nunderstanding these default values is so\nimportant is because when we have um you\nknow Flex items and flex containers like\nthis putting this single rule on a\ncontainer is going to set a bunch of\nproperties um by default that you're not\nseeing you know in front of you in\nreality when we put display Flex on this\ncontainer it's setting all of the\nproperties that I just pasted in here so\nit's setting a flex Direction justify\ncontent align content items and flex\nwrap and these are all of the default\nvalues so you can see that nothing\nchanged over here on the left because\nthey were already applied by default\nlikewise Flex items have default\nproperties so I can come down to the\nitem itself which is going to be a flex\nitem and paste in all of these\nproperties right here and the reason\nnothing changed on the left again is\nbecause these are the defaults that we\nyou know that flexbox comes packed with\nwhat we're going to do in this tutorial\nis learn how we can modify the default\nvalues on all of these uh properties\nright here to get the intended result\nthat we want the last thing I want to\npoint out before we jump into our first\nproperty is just a quick note on\nshorthand Flex properties so if we came\ndown to the flex item so this is\ntargeting one of our Flex items here and\nwe put in something called flex and we\ngave it a value of uh let's see 01 in\nAuto this right here is what we call a\nshorthand Flex property and it is the\nexact equivalent of writing Flex grow R\n0 um\nFlex shrink one and flex basis of Auto\nso these three properties written out\nlonghand is the same thing as this\nsingle property written out shorthand\nand for this tutorial like I said we're\nnot going to be looking at these\nshorthand properties because we have\nenough to deal with with the long-and\nproperties just understanding how they\nwork so just wanted to clarify that\nbecause you might see that in the Flex\ncheat sheet so if you came down here um\nFlex flow is a shorthand property I'm\nsure Flex is somewhere on here um but\nwhatever the case just know that those\nexist but we're not going to be covering\nthem I think at this point I've covered\nall of these you know pre-requisite\npieces of knowledge to really jump into\nflexbox let's go ahead and get started\nwe're not going to use this because it's\npretty ugly and I actually put together\na little demo here so you can check out\nthe JavaScript for this it's basically\njust toggling some of the values here um\nand what this demo is meant to uh\nexplain is the main tenant of flexbox\nand that is the fact that we have\nonedimensional\num onedimensional model where we can\nalign items on either the horizontal or\nvertical axis as you'll see in the HTML\nwe've got some some HTML up here none of\nthis is really important what we're\nreally focused on here is going to be\nthis piece right here so we've got our\nmain container which is going to be our\nFlex container and then each of these uh\ndivs are going to be the actual Flex\nitems and I've actually styled these a\nlittle bit just for you know visual\npurposes but it's not important to this\ntutorial so if we're looking at this\nHTML the way that we create a flex\ncontainer of this div is by selecting it\nwith CSS and writing display Flex on so\nby default that's going to create a flex\ncontainer and then all of the direct\nchildren are going to be the flex items\nso all three of these divs right here\nnow the next property that we have to\nunderstand and this is a really\nimportant part of flexbox is the flex\nDirection property and this is by\ndefault going to be set to row what this\nproperty is defining is what we're going\nto be using as the main axis and what\nwe're going to be using as the cross\naxis\nI've written this out um with HTML and\nCSS so you can see that this is the main\naxis horizontally and this is the cross\naxis vertically but what happens is if\nyou change this Flex Direction property\nyou're going to change the flow of the\nitems within the flex container and when\nyou do that that's also going to change\nthe main in the cross axis so by default\nthis is set to row which means\neverything is going to go horizontal and\nthe main axxis is going to be horizontal\nbut if we were to toggle this Flex\nDirection which is going to Via\nJavaScript change the flex direction to\ncolumn then what's happening is the main\naxis is going to be vertical and the\ncross axis is going to be horizontal now\nso now we're looking vertically well\npreviously when it was set to row we're\nlooking horizontally so as we learn new\nproperties keep two things in mind first\noff as we talked about you got to know\nwhich um HTML element is the flex\ncontainer and which are the flex items\nnumber two you have to know which uh\nDirection the flex items are going to\nflow in so if you've got this property\nFlex Flex Direction set to row they're\ngoing to go horizontal and the main axis\nis going to be horizontal and if you set\nit to column it's going to flow um\nvertically and the main axis is going to\nbe um vertical as you can see in this\nexample our Flex container is um has a\ncertain height and width and the reason\nis because we set it down here so um if\nwe find the container that we set it on\nwe set the width and height to 300 and2\n200 pixels now if we comment these out\nwe get rid of the dimensions on the\ncontainer it's going to act similar to a\nblock element where it kind of spans the\nwidth of its parent container and then\nthe height is going to be based on the\ncontent of the items within it to keep\nthings simple we're going to keep this\nwidth and height set on our container um\njust so that we can have a nice visual\nto look at as we explore some of the\ndifferent Flex properties for the\nremainder of the tutorial we're going to\nbe working here in this workspace and I\nwant to just kind of derive how I got\nhere just so that you're not confused\nwith pre-existing styles that I put on\nhere so what I have is basically four\ndiv elements um within a main container\nand as of right now what I'm showing you\nthere's no flex box enabled here except\non these items right here but that's not\nwhat we're trying to cover so these are\nbasic divs and as of right now they're\ndisplaying as block elements and there's\nno you know dimensions on the containers\nso let me kind of derive how we get to\nour workspace first off I'm going to set\na width and a height on our main Flex\ncontainer and I'm going to put a border\non it so just uncommited those\nproperties out and and what you'll see\nhere is a black border that is 4 pixels\nin dimension and then the width itself\nis going to be 408 pixels on the whole\ncontainer the reason that it's 408 is\nbecause if you add the left border of\nFour pixels and the right border of Four\npixels that gets you eight pixels and\ntherefore what I wanted to do was\nbasically make the total area within the\ncontainer uh 400 pixels exactly so that\nwe have a better time doing you know\nbasic calculations so that's why I made\nit 48 pixels now we have to uncomment\nthe display Flex to make these Flex\nitems so now you're seeing that they're\nsitting you know on the horizontal axis\nand that's actually because of the flex\nDirection row uh default uh setting here\nand this is how we get to our basic\nworkspace and then finally I will\nuncomment these two lines of HTM L which\nare going to be styled somewhere down\nhere so that we can see the cross in the\nmain axis at all times and as we go\nthrough the rest of the tutorial we're\nalways going to be working with a flex\ndirection of row so therefore the main\naxis is always going to be horizontal\nand the cross axis is always going to be\nvertical if you want you can switch this\nand call it Flex Direction column and\nyou can see how all of these rules that\nwe're about to go through work out from\na vertical axxis perspective the next\nfew properties we're talking about are\nalignment properties which um allow you\nto align um and space out these Flex\nitems within the container the first one\nis going to be justify content so if we\ncome to mdn um here's the formal\ndefinition and we'll come down to the\nformal definition here and see that the\ninitial value is normal if we read about\nwhat normal is it says the items are\npacked in their default position as if\nno Justified content value was set so\nthat's kind of what you're seeing here\nit's all just kind of by default at the\nstart of that axis now similarly if we\nset the\njustify content property to start this\nis going to achieve the same thing so\nwe're just putting it at the start so\nfor all intents and purposes you can\nthink of the default property for\njustify content to be start if we wanted\nall of the flex items to go to the end\nof the main axis rather than the start\nwe can just type that into this property\nso if we replace this with end you'll\nsee that all of these jump to the right\nside and you'll see that as we're\nlooking on the main axis that's how\nwe're deciding where these items are\ngoing to go we're flowing horizontally\nso the start is the left side and the\nend is the right side we can also change\nthis to um Center which is going to put\nthem right in the middle\nand then we have some additional\nproperty values that will actually space\nthe items out a little bit the first one\nis going to be space between so if we\ntype space between these are going to be\nspaced out with equal amount of white\nspace between them within the container\nwe also have a property called space\naround so if we change this to that\nyou'll see that there is now some space\nsurrounding each of these items on the\nmain axis\nnow what I'll have you notice here is\nthat the amount of space between the\nitems so this little area here and here\nthose are all going to be equal in\ndimension but the edges so to the right\nof this fourth element and to the left\nof the first that's a little bit smaller\nthan the space between the elements so\nthat's kind of the uh how we distinguish\nthe space around property value with the\nspace evenly property value so so when I\ntype space evenly you'll see that these\nchanged just a little bit and now what's\nhappening is every piece of white space\nbetween the elements are going to be\nexactly equal so the justify content\nproperty tells us how the items are\nspaced out and aligned on the main axis\nlet's go ahead and set this back to\nstart because I want to have the default\nvalues so that now we can talk about the\nnext property which is the line items\nproperty let's go ahead and look this up\nin\nmdn we'll type in align\nitems and you'll see that this is the\nproperty that we use when we want to\nalign Flex items on the cross axis so\nremember we set this example to a flex\ndirection of row by default and that\nmeans that the main axis is horizontal\nand cross is vertical so the Align items\nalways applies to the cross a axis and\nis going to decide how these items are\naligned vertically looking at the mdn\ndocs you'll see that the initial value\nis again normal and if we go to normal\nwherever that\nis um I guess it's at the top here it\nsays the effect of this keyword is\ndependent on the layout mode we are in\nas you can see in the third bullet point\nit says for Flex items the keyword\nbehaves as stretch and if we come down\nto stretch it says the flex items are\nstretched such that the cross size of\nthe items margin box is the same as the\nline while respecting width and height\nconstraints that's an overly confusing\nway to say that by default the line\nitems if we set it to normal is going to\nstretch the height of these items to the\ntotal height of the flex container\nunless you have a specific height set on\nthose items already so this brings us to\na brief discussion on the width and\nheight properties of flex items right\nnow we don't have any width or height\nset on either or any of these Flex items\nright here so they're getting I guess\nwhat you call the defaults and with\nflexbox um a flex item is by default\ngoing to get the width of its inner\ncontent and the height is going to\nstretch to be equal to the total height\nof the flex container as you can see the\ninner content is going to be the numbers\nthat we've put in here and I know\nthere's a little space there but it's\nstill considered just the inner content\nand then the height is of course the\nheight of the full Flex container now if\nwe come down to flex item number one and\nwe give it a width of say 100 pixels\nit's no longer going to have that\ndefault width of the content it's going\nto respect that width that we've set on\nit likewise if we give it a height of\nsay 50 pixels it's going to respect that\nheight as well so if you put explicit\nwidth and height properties on your Flex\nitems by default they're going to get\nthose so long as there's not you know\noverflow within the flex container or\nyou've set different properties that\nwe're going to talk about in just a bit\njust as a quick review the items here\nthe flex items do not have explicit\nwidth or height properties and therefore\nthe default height that a flex item is\ngoing to get is going to be the total\nsize of the Cross axis so in this case\nthe main axis is row cross is column so\ntotal height of that column is going to\nbe the natural height this is no longer\nthe case when we start putting in\ndifferent values for the Align items so\nonce we put in something like Flex start\nyou're going to see that all of these\nitems pull up to the top of the Cross\naxis and they no longer have that total\nheight of the Cross axis and what's\nHappening Here is they just have the\nwidth and height of the inner content so\nif we change that inner content then\nit's going to adjust the size so one way\nwe could do that let's say that we have\nthis first um Flex item we'll come all\nthe way to the bottom and I'm going to\nuncomment this uh little rule that I\nwrote that made the font size for this\nfirst item much larger and you can see\nthat as we make the content bigger or\nsmaller the flex item itself gets bigger\nor smaller because we don't have those\nexplicit width or height properties now\nI'm going to leave that there because\nit's going to bring up a very good point\nhere in a second so right now we have\nFlex start we can also um bring these\ndown on the cross axis to flex end so\nthese are the end now and then we can\nCenter them with center and this is\nactually something that's really hard to\ndo without flexbox so really cool uh\npart of this flexbox model what you'll\nsee with the center is that there's like\nan imaginary horizontal line going\nthrough the middle of the content in\nthese uh Flex items but we also have\nthis property value called Baseline and\nwhat's going to happen here is we\nactually draw that horizontal line kind\nof at the at the bottom of each piece of\ncontent within the flex item so because\nthis first one has much bigger inner\ncontent our Flex Baseline is going to be\nin a different spot so they're not going\nto be perfectly aligned flush with the\ntop of that cross AIS so far we've\nlearned a couple of properties justify\ncontent and align items so we can play\naround with these let's just do a few\nexamples so that we can kind of review\nand recap so let's go ahead and say\njustify content will be Center and align\nitems will also be Center this is how\nyou can take content Flex items and put\nthem in the middle of a container and\nthis was very difficult to do before\nflexbox so this is a really cool\nadvantage of having\nflexbox um and then we can of course\nchange all of these so we can put the\njustify content to end and put that\nthere we can also put align items to\nflex and I don't know why you want to do\nthis but you can put it in the bottom\nright corner of the container so very\nflexible no pun intended of what we can\ndo here with these alignment properties\nlet me reset everything let's just put\nthese back to the defaults so all you\nhave to do is delete them and they're\nback to their defaults and then we will\ncome down here and comment out this uh\nlast rule that changes the font size of\nthat first item so now everything is\nequal and what I want to do is actually\nmake each of these items a specific\nwidth and height we'll go with 50 pixels\nby 50 pixels um one way that we can do\nthat since we have two classes set here\nand each Flex item has this fi class we\ncan just Target that one class give it a\nwidth of 50 pixels and a height of 50\npixels and now we have these perfect\nlittle squares sitting as our Flex items\nby default if you don't change any\nproperties Flex will respect the flexx\nitem width and height properties so we\nset those to 50 pixels by 50 pixels and\nthat's what we're getting right here and\nif we came down to the flex container\nagain and we set that align items\nproperty to say stretch or something\nlike that you'll see that they're not\nactually going to stretch down to the\ntotal height because we have those\nexplicit properties set already but the\nnext thing I want to explore is what\nhappens if you have too many or too\nlittle uh Flex items within your Flex\ncontainer in this example if you\nremember from a few minutes ago when we\ntalked about the actually it's at the\ntop here we set the width of the flex\ncontainer to 408 and the height to 200\npixels because the main axis is\nhorizontal as a result of the flex\nDirection equal to row property um the\nwidth is really all that we care about\nright here because everything is going\nin the width kind of Direction so we set\nthis to 408 exactly for the example I'm\nabout to show you if you've got a\ncontainer 408 pixels wide and that\ncontainer has a 4 pixel border on the\nleft and the right then the total white\nspace that is available for these Flex\nitems is exactly 400 pixels if each of\nour boxes are 50 pixels in width that\nmeans that we can fit a total of eight\nFlex items per perfectly within this\ncontainer let's go ahead and do that\njust to see what I'm talking about so\nall we have to do is copy this down\nforward more times and you should see a\nbunch of items pop up here let me just\ngo ahead and change the labels so that\nwe can see all our Flex items a little\nbit better and now you can see that we\nhave eight items perfectly fitting\nwithin our Flex container but what\nhappens if we take all of these Flex\nitems and we double it so let's say\ninstead of eight Flex items of 50 pixels\neach we have 16 so we double it what\nhappens then well let me go ahead and do\nthat real quick I'll just copy all of\nthese items and paste them below and\nwhat you're going to see as we extend\nthis is that these items are overflowing\noutside of the flex container there's a\ncouple weird things going on as well if\nyou'll notice it doesn't look like these\nitems are 50 pixels wide anymore now of\ncourse if you were wondering how wide\nthese elements are you don't have to\nguess you can rightclick inspect element\nand you're dropped into the Firefox Dev\ntools and the reason I'm in Firefox I\nknow I've been switching back and forth\nbetween Chrome and Firefox throughout\nthis series but I'm in Firefox because\nthe dev tools have an awesome flexbox um\nlittle module here that you can inspect\nelements with and really see what's\ngoing on so all we have to do is come up\nto this uh inspector here we click that\nso that we can select items on the page\nand let's first start with our overall\nFlex container when we click that Flex\ncontainer the layout tab is going to\ndrop us down into this section called\nFlex container um if you uh collapse\nthat you'll see that there's also Grid\nin the Box model so these are different\nyou know models that we can look at but\nif we look at Flex container and then we\ntoggle this little button you can see\nall of the different Flex items outlined\nfor you as well as some overflow space\nand other elements of the flex box we'll\nturn this off for now but we can also go\ndown to the flex items and you can see\nthey're being highlighted here on the\nleft um as I hover over them so you can\nclick them with this little inspector\nhere so maybe we click on number eight\num and we can look here within the\ninspector of everything that's going on\nwith this individual Flex item we're\ngoing to talk more about all of this\nstuff um in just a bit we're not quite\nready yet the thing that I want to draw\nyour attention to is the fact that if we\ngo down to the Box model which we\nlearned about in previous lessons we\nknow all about how this works um and you\nlook at the total size of a single\nelement so we'll click on number four\nyou'll see that the dimensions are 332\nby 50 which is not what we set them to\nwe set them to 50 pixels wide and 50\npixels tall so the question is why is it\nshrinking the width like we didn't tell\nit to do that why is that happening\nfurthermore if these are overflowing\noutside the container what do we do\nabout that we obviously don't want to\nshow this to our users we don't want our\nFlex items just going indefinitely off\nthe page and especially if you're making\nsay a grid of images where there's\nhundreds of images and you're using\nflexbox to display them you don't want\nthem going on a single axis you know\nindefinitely to the right or\nindefinitely down in this situation you\nhave two options the first option is\nkind of the St standard um default way\nof handling overflow in CSS and this\ndoes not this is not specific to flexbox\nitself you can use this with any type of\nCSS display type so if I came to the\nflex container and I set the Overflow\nproperty I can set this to a couple of\nvalues but usually you might want to set\nit to Auto and if you set it to Auto\nwhat's going to happen is these elements\nare no longer going to break break\noutside of that container they're just\ngoing to scroll so you see the scroll\nbar at the bottom of our Flex container\nnow and we can see all of our items\nthey're still shrunk a little bit but we\ncan see them all without you know\nbreaking out of the container but like I\nsaid with that grid of images example if\nwe could imagine that these are images\nwe don't want our users to have to\nscroll left and right to see all the\nimages we want them to just wrap down to\nthe next line and just have like a nice\nlittle grid of images so the second\noption that you have here instead of\nsetting the Overflow property which is\njust a generic solution we can set this\nFlex wrap property and if we set it to\nwrap you'll see what happens is these\nelements go back to their you know\noriginal size of 50x 50 as we intended\nand they're going to perfectly wrap onto\nthe next line now you see some white\nspace in here here in the middle and you\nmight say okay I don't really want that\nI want those to be flushed to each other\nso naturally what you're going to do is\ncome down to the flex container you're\ngoing to type in align items like we\nhead said earlier and you'll type in\nFlex start something like that and you\nwon't see anything happen and the reason\nis because the uh rules of the game just\nchanged when we put in this Flex wrap\nproperty I know you're probably um\ngetting tired of hearing me say that but\nas we go through CSS certain properties\nset to certain values change the whole\ngame just like when we set Flex box to\nThe Container you know it changes the\nbehavior of all the uh children elements\nwithin it this Flex wrap property\nchanges how we align items on the cross\naxis so instead of align items we now\nhave to use this property called align\ncontent so if Flex wrap is set to\nanything other than the default which is\ngoing to be no wrap you'll see it\noverflows again if it set anything\nexcept for this no wrap then we're going\nto use instead of align items we're\ngoing to use align content which is\ngoing to have the same um possible\nvalues for the most part as align items\nbut it's going to tell um flexbox how to\narrange this new like group of wrapped\nitems within the flex container so now\nwe can set Flex start or we could wrap\nthem at Flex end or even put them right\nin the center of everything\nso that's how we wrap items to the next\nline if they're overflowing at this\npoint we've actually covered all of the\nflex container uh properties that we can\nuse just to do a very quick review I'll\nget rid of all this extra stuff here so\nget rid of these last eight um Flex\nitems and then I'll get rid of these\nlast two properties here so just to\nreview we have of course the display\nFlex which is going to activate flexbox\nwe have the flex Direction which we can\nset to either row or column so if we set\nit to column it's going to go vertical\nif we set it to row it's going to go\nhorizontal we have justify content which\naligns uh Flex items on the main axis in\nthis case the horizontal axis we can set\nthat to Center um which is not going to\nchange anything because they're it's as\nwide as the container itself but if we\njust comment it out\nthis last Flex item you'll see how this\nworks it kind of centers all of the\ncontent in the middle and then we have\nalign items we can also put Center on\nthat to put those in the middle next up\nwe're going to talk about how do we\ninfluence the size and alignment of\nindividual Flex items so if you take a\nlook at what I'm about to do I can say\nsomething like a line self and I can say\nFlex start and you're going to see this\nfirst item drops out of the flow of the\nrest of the flex items and we can do\nthis with each individual Flex item for\na lot of um different combinations here\nspeaking of this alignment let's go\nahead and start with that because I\nthink it's the easier uh part of this\ndiscussion so I will let me just go\nahead and comment out the last four\nitems here in our container just so that\nwe have four and then and within our\nrules here I'm going to remove these\njustify content align items so that\neverything is top left default um\nsettings now if we came down to\nindividual items which I have CSS\nselectors here for on the right what we\ncan use is this align self property\nwhich is essentially the same exact\nthing as align items um except it only\napplies to a single Flex item so in this\ncas case we've set this to flex start\nwhich is the default so it all looks\nnormal but if I take this first flex\nitem so the first box here and I set\nthis to flex end you'll see that this\ndrops to the bottom while the rest stay\nat the top and I can do this to flex\nitem number four so align self Flex end\nand you'll see this one drop to the\nbottom and then maybe I wanted number\nthree in the middle so align self Center\nso this one goes in the middle you can\nsee we can individually pick and choose\nwhere our Flex items are going to go and\nof course our container level properties\nstill apply so if I came back up to the\ncontainer and set justify content to\nCenter this whole group will go to the\nmiddle so these work together it's not\none or the other you use them in tandem\nlike I said the Align self property is\npretty straightforward once you know\nalign items on the main container now\nthe last part we're going to talk about\nis the sizing of flex items and this is\nprobably the hardest part of flex box in\nmy opinion um to understand how all of\nthese work and what we're dealing with\nhere is the flex grow Flex shrink and\nflex basis properties we're going to\nstart with flex grow and this is going\nto apply to uh Flex items when they\ndon't naturally fill the entire main\naxis so in this case the main axis is\nhorizontal because of the flex Direction\nrow property and in this case we have 50\npixel wide Flex items and we have four\nof them so this should only fill about\nhalf of the total width of the container\nearlier we talked about how the total\nwhite space the total width for these\nFlex items in this container is exactly\n400 pixels if each item is 50 pixels\nwide then 50 + 50 + 50 + 50 is going to\nbe 200 pixels and therefore the occupied\nspace is going to be 200 pixels and the\nunoccupied space is going to be 200\npixels when there is unoccupied space or\nempty space along the main axis of a\nflex container the flex grow property is\ngoing to come into play by default this\nproperty on each and every single item\nis going to be set to zero and what that\nmeans is that each item by default is\ngoing to take up 0% of the empty space\nwithin the container that is why what\nwe're looking at here is not stretching\nout to fill the container right now is\nbecause all of these items by default\nare set to not take up that extra space\nbut if I come down to the first flex\nitem and I Chang that default property\nto a one you're going to see that the\nfirst item fills up all of that\nremaining space so it's going to take up\nthe original width it had of 50 pixels\nand then we also know we had empty space\nof 200 pixels so the total width of this\nfirst um item or first flex item now is\ngoing to be 50 + 200 or 250 pixels now\nof course with my tutorials I don't want\nyou to just take my word for it so let's\ngo ahead and verify what I just said 50\npixels plus 200 is\n250 so if we click the selector up here\nselect that element and go down to the\nBox model you'll see it's 250 A2 half\npixels and the reason it's a half of a\npixel more than what we calculated um\nI'm not sure that I can fully explain it\nwith uh the utmost confidence but I will\nattempt to so if we set this back to\nflex grow of zero and refresh the page\nbecause it's being\nstubborn and then if we inspect the\nelement we'll go to this first element\nand what you'll see in the Box model is\nthat the inner content of this so the\nnumber itself self is 282 pixels so if\nwe hover over this you'll see that the\nBox gets drawn around that uh number now\nif we pulled in the same exact HTML and\nCSS but in Google Chrome so I'm going to\npull in Google Chrome right here and\nwe're going to select this first box and\nscroll down to the Box model you'll see\nthat the inner content is 28 not 28 and\nA2 so browser differences are are of\ncourse a big part of web development but\nI wouldn't worry about that extra half\nthat we saw when we're trying to make\nthe calculations just make sure that you\nhave the understanding of how these are\ncalculated in programming being off by\none is sometimes a catastrophic error\nbut when we're dealing with uh CSS it's\nnot quite as big of a deal so we will we\nwill stick with this and as we go\nthroughout you're probably going to\nnotice that my calculations are going to\nbe off by just a couple decimals but\njust bear with me so let's set this back\nto a flex grow of one so we have 200\npixels of empty space now we don't\nbecause 200 pixels got allocated to flex\nitem number one now if we came down to\nflex item number two which by default\nhas a\nflex uh Flex grow value of\nzero and if we set that to one here's\nwhat's going to happen if we came down\nhere to flex item number two uh the\ndefault value for Flex grow is going to\nbe zero no changes as you see but if we\nwere to set this to one you'll see that\nnumber two element gets part of that\nempty space as well so now one and two\nare going to be completely equal now how\ndo we get to this you know what kind of\ncalculation is happening here I'm going\nto try to draw it out for you so if we\ncome to right over Flex item number one\njust make a comment what we're going to\ndo is take all of the flex items Within\nthe container and we're going to add up\ntheir Flex grow values so by default\nremember they are are all set to zero so\nFlex item number one has a value of one\nas we set it right here let me close\nthis comment so we can see it correctly\nso we have a value of one on Flex item 1\na value of one on Flex item 2 and then\nby default the last two are set to 0 and\n0o so the total of all that is going to\nequal two and what you can think of this\nas is two units of empty space so we'll\nsay two units and you might ask okay\nwhat is what unit are we measuring this\nagainst well if you remember there\nis 200 pixels of empty space and if we\ndivide that by two allocated units we\nget 100 pixels per unit so each unit\nthat we allocate is going to be 100\npixels but if we were to come down to\nflex item number three and set a flex\ngrow value of one that changes it\nbecause now our total sum we're going to\nadd a one in there and now we have a\ntotal of three units we still have 200\npixels of empty space but now we have to\ndivide that by three units and that\nshould get us to um not sure if I can do\nthat math I think that's a decimal\nactually so 20 / 3 is going to be uh\n66.\n666 uh pixels but if we come down to\nflex item number three we set a flex\ngrow factor of one and then Flex item\nnumber four and set a flex grow factor\nof one now everything changes so we have\nto update these values in our sum so now\nit's 1 + 1 + 1 + 1 so we have four units\nand we still have 200 pixels of empty\nspace to allocate because if you have\nfour items each 50 pixels wide that's\n200 pixels empty space is 200 pixels in\na 400 pixel container so still have 200\npixels of empty space to allocate over\nfour total\nunits so we'll Divi divide that by four\nand that's going to get us to 50 pixels\neach per unit so what's happening here\nis for each item in this this container\nwe have an original size of 50 pixels\nand then we allocate 50 pixels to that\nof empty space so they're each going to\nbe 100 pixels um equal across the board\nand you can see that if you click on\nhere it's 100.1 33 pixels um forget\nabout the decimals here but they're all\nequal so that's how that works now it\ndoesn't have to be a flex grow value of\none you can also give it two or three or\nfour it's all just dependent on how many\nunits you want to allocate to each uh\nFlex item let's say that we gave Flex\nitem number two a value of uh we'll say\nfour uh or maybe maybe not four let's go\nwith three so that we have an even\nnumber so now our calculation is 1 + 3 +\n1 + 1 is going to be 6 units 200 pixels\nof empty space divided by 6 units I'm\ngoing to need a calculator for that one\nso 200 / 6 is\n33.33 pixels per unit so if we are\ngiving the second Flex item three units\nof empty space in each unit of empty\nspace is\n33.33 that means that we're giving it an\nextra you know\n99.9999 or 100 pixels so we take the\noriginal width of 50 we add a about 100\nso we get 150 pixels wide for the second\nitem let's check that see if we're in\nthe ballpark and you see that it's\n150.2 so that calculation worked\nperfectly hopefully that explanation\nmade a little bit of sense just have to\nthink about it in allocated space empty\nspace and you can calculate the two\npieces by getting the total width of\nyour Flex container and then the total\nwidth of the items within the flex\ncontainer and then breaking it out into\nunits based on the amount of empty space\nthat we need to allocate back out to the\nitems now the opposite applies when we\nhave too many items in our Flex\ncontainer let me get rid of all these\nFlex grow values so that we can get it\nback to\nnormal and then let me also\nuncomment\nthese divs right here so that we have\neight total items um we know that that\nfits perfect ly but what if we put in N\nso instead of eight we have n which\nmeans we've added an extra one in there\nwhich means that we have 50 pixels of\noverflow so remember each one's 50\npixels wide 50 pixels * 8 is going to be\n400 pixels which is equal to the total\navailable space within our Flex\ncontainer so by adding a n9th we are\nmaking the total amount of flex items uh\n450 pixels wide\nversus the 400 um available space so we\nhave 50 extra pixels of overflow similar\nto how we allocate out empty space to\nflex items we can also reduce the size\nof flex items by the amount of overflow\nthat we have so if you look at this\ncontainer you're going to see that by\ndefault they all fit within the\ncontainer when we add that ninth item\nand the reason is because all of them\nactually uh shrunk a little bit when we\nput put that ninth item in there the\nreason that they shrunk is because by\ndefault every Flex item is going to have\na flex shrink value of one so if I put\nthat in for Flex item number one you\nwill not see any change because that's\nalready the default it's already\nshrinking by one unit so we know how to\ncalculate those units you basically take\nthe Overflow just like we took the empty\nspace with the flex grow so if we have\n50 pixels of\noverflow um let's let's change this\nright here to 50 pixels of overflow and\nthen we have to ask oursel how many\nunits we're allocating that across by\ndefault each Flex item is going to have\na flex shrink value of one so that means\nthat each Flex item should be allocated\nequal overflow in other words we have to\ndo 1 + 1 + 1 all the way to 9 so we have\nnine total units I'm just going to get\nrid of this because you get the point\nhere so we have nine total units with 50\npixels of overflow so we divide 50\npixels by 9 and that's going to give us\nI believe 5.33 pixels um per unit let me\ncheck that real quick so 50 / 9 equals\nno it's not 5.33 it's 5.55 pixels per\nunit in other words we're going to take\nthe original width of these items which\nwas 50 pixels and we're going to\nsubtract off 5.55 pixels from that 50 so\nin theory each item should be\n4445 pixels wide so let's inspect the\nelement we'll go to any of these here\nand you're going to see 442 pixels wide\npretty much exactly what we just\ncalculated now this is where the the\nFirefox Dev tools comes in handy so if\nyou click on one of these items it's\ngoing to pop up in the layout section\nexactly how this shrink operation worked\nso you can see the flexibility has a\nflex shrink of one and that's going to\nsay minus 52 pixels which is what we\njust calculated so it's going to take\nthe 28 1/2 pixels which is the inner\ncontent width uh subtract off 5 1/2\npixels to get down to 23 pixels and then\nyou add back in the natural padding and\nborder that um is set on these items to\nget your total width of what we\ncalculated as 445 pixels now this brings\nup a good point because if you look at\nthis model right here you're going to\nsee that each item has a minimum content\nwith so if you try to shrink something\ntoo much then it's going to make it so\nthat it will kind of get capped out it\nwon't shrink past the minimum value of\nits content I'll show you exactly how\nthis works all we have to do is add in a\nfew more\num few more Flex items so let's add one\nmore for good measure and what we see\nhere is that they're clearly breaking\nout of that container now just like we\nsaw earlier uh when we looked at this\nand we tried to wrap them onto the next\nline now from the flex shrink\nperspective these are breaking out of\nthe container because while they have\nyou know calculated the total overflow\nspace and then allocated that out to\neach of the flex items the total amount\nof overflow is going to be greater than\nthe um basically it's going to make them\nshrink smaller than their minimum values\nwhich is not possible let's see if we\ncan calculate this just for fun so we\nhave 1 through 9 10 11 12 so we have 13\ntotal Flex items which are all\nsupposedly 50 pixels wide so if you do\n13 *\n50 let's see what that is so that's 650\npixels and if you sub subtract the 400\npixels that the container wi is you get\n250 pixels so our overflow that we're\ndealing with now is going to be 250\npixels and we have 13 units to um\nallocate it over so we need to divide\nthat by 13 and what that's going to get\nus is let's see 19\n23 pixels per unit so we're going to\nhave to subtract we're going to have to\nbasically say let me break down onto the\nnext line just so we're clear we're\ngoing to take the original width minus\n19.23 pixels and what that's going to\nequal is let me see\n3077 pixels so theoretically we would\njust take all that overflow and subtract\nit from the original sizes to get us to\na total width of 3.77 pixels but if we\ninspect element and we click on any of\nthese here you're going to see that this\nlittle Min property popped up so it says\nthe minimum size of this element is\ngoing to be 12 pixels so the the minimum\ninner content is 12 pixels and when you\nadd on the padding and the border of\neach of these elements that's going to\nbreak you over\nthat value that we had calculated here\nso it's basically going to be uh the the\ncontent itself is going to be too big to\nshrink that much hopefully I haven't\nlost you here um try to lay out this in\na logical manner um and I know this is a\nlot of detail it's definitely not\ntotally necessary but I really think\nknowing this kind of stuff and how this\nis calculated is is that extra step that\nyou have to take as a developer to\nreally um understand what you're doing\nand be able to debug things and\nunderstand okay why is this breaking out\nof the flex container why won't this\nshrink enough you know those kind of\nquestions let's do one more um practice\nproblem here I guess you could call it\nso let's go back to nine elements which\nare going to Naturally Fit within this\nbut at the moment they're each being\nallocated what was it\n5.55 uh pixels so 50 minus 5.55 to get\nit shrunk down to fit now if we wanted\nto allocate it only to certain items we\ncan change the defaults so um let's go\nahead and say that we want the first\nthree items of this Flex container to\nkeep their 50 pixel width now the way\nthat we would do that is we'd go to item\none and we'd set a flex uh shrink value\nof zero which is not the default and\nwe'll copy that down to 2 and three and\nnow you'll see that each of these get\nwider and if we inspect them they're\neach going to be 50 pixels wide while\nthe remainder are going to absorb that\nuh overflow Space by shrinking so just a\nquick review if the total width of the\nitems the flex items in the flex\ncontainer do not equal the total Flex\ncontainer so if there's not enough items\nFlex grow is going to be what applies\nand that empty space is going to be\nallocated based on the flex grow values\nif the Overflow happens so if there's\nmore items that can fit in the flex\ncontainer then the flex shrink will um\napply and based on the flex shrink\nvalues of each item determines how that\noverflow space is going to be allocated\nout the last property um with all this\nsizing that we have to talk about is\nflex basis let me get our container um\nback\nto a spot where we only have four so let\nme I'll just comment out those just in\ncase we need them later\nso now we have four items which are\nexplicitly set to 50 pixels wide each so\nwe set each of them to 50 pixels wide 50\npixels tall now if we wanted to change\nthose Dimensions we can actually do that\nusing a flex item property let's go to\nthe first flex item and set the flex\nbasis to equal\n40% what you'll see is that this first\nitem gets a lot wider and it's not\nbecause it's trying trying to fill the\nempty space it's because it's respecting\nthis Flex basis property uh over the\nwidth property that we set earlier so by\ndefault this Flex basis is actually set\nto Auto and when it's set to Auto what\nthat is basically saying is that uh to\nflexbox is go ahead and look for the\nwidth and height properties and if you\nfind them respect those properties as\nthe width and height of the flex items\nif you don't find find them go ahead and\nsize the flex items based on the inner\ncontent and that's the default for Flex\nbasis but you can also assign pixel\nunits and percentage units to the flex\nbasis to override the width and height\nof your Flex items this unlocks a lot of\npossibilities and depending on how you\nuse them with flex grow and flex shrink\nyou can get a bunch of different\ncombinations so if I was looking at this\nFlex box right here I have the four\nitems each 50 pixels wide and let's say\nthat I wanted to make them even widths\nand span them across the whole container\none way that I could do that is by\ncoming to each of the flex items and\nsetting the flex grow to be equal to one\nand what that's going to do is equally\nallocate the empty space as we just\ntalked about so that's one way to do it\nnow we could also backtrack a little bit\nand instead of doing that we can set the\nflex basis to 25% on each of the items\nand that's going to equally give width\nto each of the items and give you the\nsame exact result now if we come in and\ntry to set the you know Flex grow\nproperty on one of the items it's not\ngoing to change because the flex basis\nis going to take precedence over that\nbut in some cases maybe you don't set\nthe flex basis uh property on all of the\nitems to equal 100% so in this case\nwe've given each of them 25% which adds\nup to 100 so it's going to fill the\nwhole container but let's say that we\nfor the first item we give it 10% so\nwe're going to be missing 15% of the\ncontainer and let me let me delete that\nfor a second so um now we just have Flex\nbasis properties and they sum up to what\n85% if I'm calculating that correctly so\nthere's some empty space here on the\nright it doesn't fully fill the\ncontainer but now if I put on the flex\ngrow property\nand set it to one that first element is\ngoing to take the remaining space and\nwe're back where we started so\nessentially s setting uh Flex bases of\n25 on the last three and 10% plus a flex\ngrow of one is the same as just doing\nFlex basis of 25% on all of them so many\nways to get to the same answer the last\nthing we'll talk about is the order of\nthe items along the main axis in our\nFlex container so if you wanted to to\nchange uh swap these out so maybe you\nwanted to put number two in number one's\nplace you could do that all you have to\ndo is come up to the HTML and put number\ntwo before number one and that should\njust flip them but if in Flex box you\ndon't even have to do that you can\nactually flip those with CSS so if I\ncame down to the CSS and I looked at\nFlex item number one and I gave it an\norder of two and then I gave Flex item 2\nin order of one now you're going to see\nthat um these are flipped and hold on I\nthink the reason that this is not\nworking is because you have to set them\non all so we'll set the order on three\nas three and the order on four as four\nso the three and four have their natural\norder but then two and one are going to\nbe flipped so if you set order on all of\nthe flex items you can determine you\nknow the order that they come in now you\nmight ask why is this useful well in\nmany cases it's really not useful you\nmight as well just change the order of\nyour HTML and be done with it but if you\nare designing responsively which we\ntalked about in a prior video um I think\nit was just the previous video as you're\nresizing your browser you may want\ndifferent elements on the page To Go in\ndifferent orders so say you have a nav\nbar at the top you've got main content a\nsidebar and a footer maybe you want to\norder those differently um whether\nwhether you're on a desktop or a mobile\ndevice and this would be how you would\ndo that is you'd set a media query so\nyou might come down and say at media and\nwe'd say like minwidth of 600 PX or\nsomething like that and then in here you\ncould probably set the\nflex item number\nfour to have an order of one and then\nwe'll say a flex item one will be in\norder of four something like that so as\nwe are getting bigger than 600 PX that's\nhow that's going to uh show but as we\nshrink it you'll see that those flip so\nwe can resize and order them differently\nbased on different screens at this point\nyou've learned pretty much all of the\nmain properties of flexbox now of course\nthere's some shorthand properties that\ncan make your life easier so instead of\nyou know setting the flex basis and the\ngrow and the shrink Val values um what\nyou can do is come in and just say flex\nand then the first value is going to be\nthe flex grow so maybe you want to set\nthat to one and then the second one's\nFlex shrink you might set that to one\nand then the third one is going to be\nFlex basis which is set to Auto so this\nis a shorthand way of writing Flex grow\nFlex shrink and flex basis all in one\nline so that's just a shorthand property\nbut not necessary I wouldn't even\nrecommend using those until you're very\ncomfortable with\nflexbox well this is actually a brand\nnew day same hat same hoodie whatever\nbut um I forgot to add the last part to\nthis video which is actually taking this\nprevious challenge that we had solved so\nas you're following along with the full\nstack road map we solved this pricing\nCard Challenge as a part of um the\noriginal HTML and CSS tutorials and then\nalso made it responsive in the prior\nvideo on responsive web design what I\nwant to do to wrap up this video is take\nthis design and make it uh with flex\nboox instead of how we did it before so\nif I'll remind you just for a moment\nwhat we had to do to get these bottom\nleft and bottom right sections sitting\nnext to each other with a 50% width was\nsomething a little bit hacky um if we\ncome up to the\nHTML um you'll see right here here so\nthis line doesn't look you know all that\nspectacular but what you'll see is we've\ngot a closing div right here that\ncorresponds to the bottom left section\nuh div and then the starting div for the\nbottom right section is sitting right\nnext to it which when you're looking at\nHTML that's generally not very good\nsyntax and that was kind of a hack that\nwe used to remove the white space and\nallow for the fact that we had 50% wids\non both of them so if I were to enter\nthis down one line just for formatting\nsake you'll see that the bottom right uh\npiece of the card actually disappears\nand that's because it's going underneath\nthat bottom left card and then we're\nhiding the Overflow as you'll see in the\nCSS for the main card so we've got\noverflow hidden so if we take that off\nyou'll see it pop up below here so\nthat's what's going on and we can solve\nthis very easily using flexbox and get\nrid of all of our hacky solutions that\nwe had before now to make this a little\nbit simpler for us to see exactly how\nthis is working let's go back to our\nlayout example this is what we had used\nto originally build the card so that we\ncould see what we were dealing with and\nwe didn't have to confuse oursel with\nall of the different styling while we're\njust trying to focus on\nlayout it isn't pretty but it will work\nfor our layout purposes at least and\nwhat you'll see is I've come down and\nadded a media query this is from the\nprior video If you haven't watched that\nwe talk about responsive design and\nmedia queries so basically what we're\nsaying is in this block we want to apply\ncertain styles to any uh device that is\ngreater than 500 or greater than or\nequal to 576 pixels as you'll see when\nwe shrink this it changes the layout and\nthen when we go above 576 then these two\nuh style selectors will apply and you'll\nsee that the width and the height of the\ncard gets applied and then the bottom\nleft and bottom right section are going\nto get a 50% WID each now with flex boox\nthis is relatively simple all we have to\ndo is if we're looking at this entire\ncard here it's composed of a top section\nand a bottom section with two left and\nright subbottom\nsections and what we want to do is on\nthe desktop device so this what we're\nlooking at right here we want to have\nthose bottom sections in one row and\nthen when we shrink it to mobile we want\nit to come into a column so if you\nremember from just a few minutes ago we\ntalked about the flex Direction Where We\ncan take the main axis and change it\nbased on that Flex Direction so what I'm\nthinking is that for a desktop device we\nwant Flex Direction equal to row so that\nthese two go right next to each other\nand then on a mobile device we want it\nto be in a column so the way that we do\nthat since we're designing mobile first\nhere is we come up to all the main\nStyles here and we go to the bottom\nsection because that's what we want to\nturn into a flex container we don't\nnecessarily want to turn the whole card\ninto a flex container because the top\nthe top section is actually fine and it\nwould be overkilled to put a flexbox\ncontainer on it but the bottom section\nis not so let's go into the bottom\nsection and type display\nflex and what you'll see is I believe\nnothing will happen at the moment\nbecause we're in the desktop view but\nlet's go ahead and go to the mobile view\nand now we've got some things messed up\nbecause we're designing mobile first so\nright now we're working on the mobile\ndevice\nso these are still sitting next to each\nother and all we have to do to change\nthat is set the flex direction to\ncolumn and you'll see that they jump\nright above each\nother that's pretty much it when it\ncomes to the mobile design of this let's\nsee if we can find anything that we can\nremove now um I believe we can remove\nthis vertical line okay we're going to\nget to this we'll we'll actually get to\nthis let's get the design right first\nand then we will worry about that so at\nthe moment we set the flex direction to\ncolumn and because of that because we're\ndesigning mobile first that is also\ngoing to apply to the desktop design\nunless we change it in our media query\nso let's do that we'll say bottom\nsection and we'll give it a flex\ndirection of row again so the default so\nnow as we resize we get get a very\nsimilar result and we're actually pretty\nmuch done but we have some redundant\nstyles that we can actually remove now\nthat we're using flexbox and this is\nwhere uh the nice parts of flexbox come\nin you don't have to write as much CSS\nso we can remove the bottom left and\nbottom right section\nwids and I believe that may screw us up\na\nbit after we change a few things hold on\nI think we need to change uh let's\nremove the display inline block on the\nbottom left section and the bottom right\nuh we will remove the 100%\nwidth and we'll remove the vertical\nalign top so we don't need those anymore\nbut what you'll notice is now we've got\nthis screwed up and that is by Design\nthat's not uh surprising let's make sure\nour mobile is still working so we're\ngood here Mobile's still working but\ndesk top has a little bit of work and if\nyou remember the bottom section is our\nFlex container which means based on the\nHTML here if we're looking at it the\nbottom section has two direct children\nit has the bottom left section and the\nbottom right section and we can actually\nenter this down on to its new line now\nthat we're using flexbox we don't have\nto have that hack but anyways the bottom\nleft and right section are the children\nso therefore these two style uh\nselectors are going to be the flex items\nin this desktop view we have the flex\nDirection set to row which means that\nthose that bottom section has a main\naxis that is going horizontal and if you\nremember from a few minutes ago the way\nthat we resize the flex items along the\nmain axis is going to be one of two ways\nwe can use the flex grow property or we\ncan use the flex basis\nso let's come in here and just try both\nof them just so I can show you we'll\nstart with the flex basis it may be a\nlittle more straight forward so if you\nput in 50% on the bottom left section\nand then you say Flex bases 50% on the\nbottom right section we have completed\nthe card it looks great and as we resize\nit it's still going to work so that's\none solution another solution is we\ncould come in and we could say Flex grow\nset that equal to one and flex grow\nequal to one on the bottom right section\nand this should work just fine too now\ngoing directly from Flex basis to flex\ngrow will not really illustrate that\npoint let's get rid of the flex grows\nfor just a second so that we can\nconceptualize by default these two uh\nsubcontainers down here have a natural\nwidth because we haven't give them we\nhaven't given them an explicit width so\nthey're going to take the content with\nthe content sitting within them as you\ncan see is filling the entire width of\ntheir container now these do not fill up\nthe entire section we've got this empty\nspace here on the right and the flex\ngrow property is what applies when we\nhave that empty space and so basically\nwhat we're going to do when we enable\nthe flex grow One Properties like we\ntalked about is we're going to split up\nthat space just give it one unit to the\nbottom left section and one unit to the\nbottom right and therefore it's going to\nbe I believe perfectly equal or it\nactually may not be perfectly equal it\nmay just be a coincidence that the\ncontent is a similar width let me make\nsure that that's correct so let's just\nenable these and we can check in the dev\ntools so let's\ninspect and let's see what we're dealing\nwith so this one is\n263 pixels uh wide this is 276 pixels\nwide so glad we looked at this I\nactually was not thinking about this\ncorrectly um the correct solution here\nis probably going to be the flex basis\nof\n50% um it just looks like they're equal\nwhen we use the flex grow because\nthey're similar widths by default like\nnaturally the content has a similar\nwidth in both\nsections but if I close out the dev\ntools and let's say I came up here and\njust added a bunch of content to one of\nthe list items in the bottom\nright you'll see that now that Flex grow\nis not working quite as well because\nwe're not giving them equal wids we're\ngrowing them based on their natural size\nso I stand corrected that is not the\ncorrect way to do it um Flex grow at\nleast I think Flex basis is by far the\nmost reliable way to split these into\nequal containers so we'll go with that\nand call it a day I think we have solved\nthis um to my liking so this is the\nbasic layout and then as we shrink it\ngoes down to Mobile so as we come over\nto here um back to our card and let me\nlet me bring this guy back up so that we\ncan see everything working okay so\nthere's our card now we got to turn this\ninto a Flex box and um we'll do exactly\nwhat we just did in the layout example\nso if you remember we came\ndown um we didn't need any of that we\ndid need a bottom section we wanted the\nflex direction to be row on a desktop\ndevice and then in the bottom section we\nneed to display\nFlex um set the flex direction to column\nand let's see what we got here looks\ngood now we just wanted to remove on the\nbottom left in bottom right sections I\nknow there's a lot more Styles here uh\nwe don't need this guy we don't need the\nvertical lines we don't need the\nwidth all we have to do is add a flex\nbasis of 50% on each of\nthese so we're looking good there and I\nbelieve we have solved it I don't think\nthere's anything that we did otherwise\nnow there's just one more thing that I\nwant to show you with this that we could\nuse flexbox for as you see this $29 per\nmonth these are sitting next to each\nother and whenever you have horizontal\ncontent it's usually a decent uh use\ncase for\nflexbox let's look at the HTML that we\nset this up with so you'll see that we\nhave a price container um that would be\nthe overall parent and then that parent\nhas two children items so if we turned\nprice container into a flex container\nthen the price and the price frequency\nwould therefore become the flex items\nlet's find that in our CSS so here's the\nprice container we've just set a margin\non it so that's probably going to stay\nthe same even with the flex\ncontainer um but then we also have price\nand price free frequency which looks\nlike we have styled right above it so\nlet me let me just change the order of\nthis cuz it makes a little more sense to\nhave the container on top and what we're\ngoing to do is set display\nFlex by default it's going to be set to\nrow so it will put them next to each\nother um let's get rid of all the styles\nthat we have Within These I don't think\nthat we need any of them except for\nmaybe the font size and the opacity\nbecause those are not layout related\nproperties so here's our starting point\nand you can see that by default even\nafter we removed all those styles that\ndisplay Flex making that whole container\na flex container is going to still put\nthem next to each\nother now let's just back up and\nremember exactly what's going on here we\nhave some HTML where we have a price\ncontainer and then we have two items\nwithin it so we have a flex container\nand two Flex items by default we've set\nthis to display Flex which makes the\nmain axis on the horizontal so in a row\nand therefore if we want to align things\nalong the main axis we use justify\ncontent if we want to align them on the\ncross axis we use align\nitems as you can see the per month is a\nlittle bit misaligned with that $29\nan easy way to fix that is to come on to\nthe price container set the Align items\nand set those to Center you'll see that\nthat perfectly centers those two right\nnext to each other and that's a much\nbetter solution than what we did before\nwhere we set the position to relative\nand then we set it -3 pixels to just\npull it up a little bit the last thing\nwe have to do as you'll notice there's\nno spacing between these and there's no\nreal solution here with the flex box I\nmean we could come in here and justify\ncontent and say something like space\nbetween but you'll see that that's going\nto space it out way too much so that's\nnot really going to help us so really\nthe best way to do this is just come on\nto the uh either the price frequency or\nthe price item and set a margin so we\ndon't even need this style anymore uh\nsince this is already written the price\nfrequency we can just use this and all\nwe have to say because this is the um\nper month piece all we have to say is\nmargin left and give it something like\nfive pixels and that spaces it out\nnicely very easy and straightforward so\nthere you have it that is how we solve\nthis with a mobile first fully\nresponsive solution with flexbox and it\nshrinks and gets bigger and it looks\ngreat on all\ndevices in this video we're going to be\nbuilding a testimonials grid and we're\ngoing to be doing it with a mobile first\nresponsive design um solution and we're\nalso going to be using flexbox my goal\nin this video is to not only solve this\num Challenge on frontend Menor but also\nto apply those skills that we've learned\nin previous lessons so that you can\nreally start to use them in the real\nworld lastly I'm going to be adding in a\nfew extra pieces to the puzzle so\nthroughout this series we have been\nusing codeen which is just a a nice\nenvironment where we have HTML CSS and\nJavaScript all in one place all hooked\nup and ready to go since this challenge\nis relatively straightforward and you'll\nsee as we walk through it I want to also\nadd in the concept of a code editor so\nwe're going to be downloading and using\nvisual studio code and then we're also\ngoing to be doing a little bit of\nVersion Control and I'm not going to get\nsuper detailed into it uh quite yet but\nI'm going to show you the commands that\nyou have to run to get your design\npushed up to GitHub and deployed to the\nGitHub pages so that you can you know\nshare a URL with others of what you\nbuilt but don't worry the only\nprerequisites that you really need are\ngoing to be HTML CS s and make sure\nyou've watched my flexbox and responsive\ndesign videos let's get started if we\ncome up to frontend Menor this is the\nchallenge that we are going to be\ncreating and I've already started it so\nI don't need to click here so let me go\nto my\nchallenges um or I guess\nprofile my\nchallenges and then testimonials grid\nsection so from here you can download\nthe starter files so we'll do that\nit's going to pop up on another screen\nfor me so once you've downloaded your\nfiles make sure that you have Visual\nStudio code downloaded it's just a code\neditor and I actually made a whole video\non code editors you can check it out up\nhere um of which ones I recommend and\nwhy so obviously Visual Studio code\nwould be one of those so go ahead and\ndownload that and once you've downloaded\nit open up a brand new window from here\nyou're going to want to click click file\num open a folder and then go find the\ntestimonial challenge starter pack that\nyou just downloaded so I've got it\nselected and this is going to open me up\ninto the workpace as we start looking at\nthe starter files if you open up index\nHTML which is what we're going to\nactually be working on um you can see\nthat there's all sorts of text already\nin here and luckily we have a lot of the\ntestimonials that we will need um\nthey're not really implemented in HTML\nelements but it's good to just have this\ntext ready to go now just to relate this\nback to what we've been using with\ncodepen this\nindex.html is basically the same as this\nHTML box here in codepen it's just um on\nour local computer it's in our local\nfile system rather than up in the cloud\nnow your first question is probably well\nhow do we actually view this HTML\ndocument in the browser now remember\nHTML and CSS they are only displayed in\nthe browser therefore we need a web\nbrowser to look at this the way that we\ndo that is you actually have a couple\noptions I'll show you the most barebones\noption first and then we'll go into what\nwe're actually going to be using to\nsolve this challenge to view an HTML\ndocument in the browser all you have to\ndo is go to your file explorer I'm on\nWindows but this works the same on Mac\nor Linux and just go to the folder that\nyou have it saved in and then find the\nindex.html file you'll notice that it\ndoes not say\nindex.html as you see over here and that\nis because the file type over here is\nChrome HTML document so it doesn't\ndisplay it here in the name if you\nrightclick and go down to open with you\ncan choose a browser to open it in so I\nmight just say Google Chrome and when we\nclick that it should have opened it up\nif I go back to my browser it should\nopen it up in Google Chrome and there's\na lot of text here and that's because we\nhave to actually implement this design\nbut this is the HTML document that we're\nlooking at and you can see up in the um\nURL bar we're actually looking at our\nlocal C drive um now on Mac and Linux\nthis is going to look a little bit\ndifferent um but it's the same concept\nit's just the local path to that file\ndisplayed in the browser now I'm going\nto point out a few things here that\nmight be interesting to you the first\nthing you see this little icon up here\nin the top left portion of the tab this\nis a little frontend Menor logo or\nfavicon and you might be wondering well\nhow did that get there well the way that\nwe put that there is if we come back to\nour\nfiles and we look at this link tag right\nhere um this is actually putting in that\nfavicon up into the title here's some\nmetadata about it some sizing but here's\nthe really important um attribute which\nis the href and what we've passed in is\na relative path we'll learn a lot more\nabout absolute and relative paths coming\nup when we start working in the terminal\na little bit more\nbut all this is saying is I want to look\nrelative to the current directory into\nthe images folder over here and then\ndrop that down and grab me the favicon\n32x32\nPNG and we can open that up and see the\nlittle icon that we have and that\nmatches the icon that we see up in the\ntab furthermore in the\nindex.html we've got uh the dock type\nthat's important um for just HTML Oiler\nplate and then I'm actually going to\nindent this for us so that we can see it\na little bit better we have the head tag\nwhich is pretty standard for an HTML\ndocument here are some meta tags that\nhelp with displaying the site in the\nbrowser properly these are just pretty\nstandard defaults that you might put in\nand then of course the link we just\ntalked about now the title tag this is\nwhere we actually name the tab that's\nit's going to open in so we can change\nthis and just say instead of frontend\nMenor we can just say testimonial\nChallenge and when we click save open\nthe browser up and click refresh you'll\nsee that it changed to testimonial\nchallenge right here we have some Styles\nwe haven't really been looking at this\nbut um if you come back to our browser\nand go to codepen the CSS right here\nthere's a couple ways that you can link\nthat up you can actually use use a link\ntag to link up styles or you can just\nput them all in a style HTML tag right\nhere now we're not going to do that\nbecause that's not very good practice\nfor a good amount of CSS you want to\nbreak it out into a separate file which\nis what we're going to do so we'll\ndelete all of that we don't need it and\nthen finally we have all of this text\nwhich is basically if we look at the\nchallenge\nitself I wish there's a better way to\nsee this oh yeah we actually have the\ndesign here so if we go to the desktop\ndesign you'll see that we have all of\nthe text and all this text is right here\nI'm going to cut this out and then I\njust want to make a new file so I just\nright clicked over here in the file pane\nclick new file and we'll just\nsay\nplaceholder\ntext.txt so we give it the txt file\nextension it's just a plain text\ndocument we can paste that in and save\nit just so that we have it but it\ndoesn't clutter up our HTML this last\npart the attribution this is just as we\nlook at it in the browser it's just this\nlittle piece down here so you can if you\nwant to you can go ahead and fill this\nout and link to whatever you want to\nyour you know Twitter account your\nLinkedIn account your GitHub account\nwhatever you want to do I'm going to\ndelete it here I don't really want to\nclutter up anything I want to just focus\non the challenge itself so at this point\nwe have a basic HTML boiler plate and\nI'll actually show you a shortcut to get\nto pretty much exactly this um with just\na few key strokes let's save this I'll\nrightclick create a new file and we're\ngoing to call this\ntest.html because we're just going to be\ntesting a few things within this\ndocument I'm going to show you how to\nuse m\nand what emit is if we open it up this\nis built into Visual Studio code and\nwhat you basically can do with it is\ntype shorthand you know characters and\nclick Tab and it will extend it out into\na code snippet of what you want already\nso let me just give you a brief example\nif we wanted in this HTML document you\ncan see Visual Studio code has\nidentified in the bottom right that this\nis an HTML document so if I type\nH2 it's going to pull up this box that\nsays emit\nabbreviation and you can click it to see\nwhat it's going to abbreviate to but\nreally all you have to do is Click Tab\nand it's going to extend it out into the\nelement that you want and you can just\nstart typing similarly we can actually\nget this entire HTML boiler plate in\njust a few few keystrokes so if you type\nHTML and we have a couple options here\nand you can go through and see exactly\nwhat it's going to create so basic HTML\nwill just give you the the main tag we\nwe want something a little better than\nthat um oops I already did it on\naccident um the HTML 5 let's let's go\nahead and see what HTML 5 gives us it's\ngoing to give us pretty much everything\nwe want here just like we saw earlier\nand then finally HTML XML um this is not\nsomething that you're probably going to\nuse very often so if we just click HTML5\nor scroll to it with our arrow keys and\npress tab it's going to break us out\ninto this um boiler plate which is very\nsimilar to what we were set up with when\nwe downloaded the starter files for our\nfront and Menor challenge so that's just\na handy way to create this and then of\ncourse you can change the title uh I\ndon't think there's a link tag for the\nfavicon setup by default but you've got\nall the meta tags that are necessary and\nyou're all set as we go through this\nchallenge I'm going to be using those\nEMT Snippets and I'll try to mention it\nas we go along but um just know that\nthat's going on for now I'll delete the\ntest file we don't need that any longer\nand now let me show you our workflow so\nwhat we could do is just write some HTML\nso H2 tab and then some title that's\njust basic HTML and click save and then\nwe can alt tab or switch back to the\nbrowser open up the tab that we have it\non and click refresh and you'll see the\nnew HTML document this would be very\ncumbersome and it's not a great way to\nmake everything fast so what we're going\nto do is we're going to split the\nscreens here and I'm going to put the\nvisual studio code on the left\nand the testimonial Challenge on the\nright now obviously we don't have a lot\nof room here so you can always click\nthis right here to collapse that might\nmake this a little bit smaller for us\nand then when we're working with our Dev\ntools we'll click inspect we're in\nChrome right now you can use Firefox as\nwell if you want um since we've got\nthese side by side I'm going to actually\nredock all of this stuff to be at the\nbottom so I can do that let me remember\nwhere I can do that\num let's click there we go you click\nthese three little dots and click this\ndock to bottom so now we have a much\nwider screen to work with and as you\nresize this in the top right corner you\ncan see what screen size you have or you\ncan click the toggle device toolbar and\nnow we can see it more explicitly um\nwhere we can resize the screen up here\nso this is probably going to be the\nbetter option for us and we can change\nthe Zoom to let's say be 75% so that we\ncan see it a little bit better and let\nme zoom out just a tiny bit we don't\nneed the JavaScript console because\nwe're not working with JavaScript so we\ncan close that drawer and now all we\nhave is the elements here on the left so\nthe HTML and then the styles on the\nright or the CSS and if we click this\nselect an element button and we select\nthat H2 we can locate it within the HTML\ndocument and then see the relevant\nStyles down here so that's going to be\nour workflow and as we go through this\nwe can you know just add new elements\nsome text click save come over here and\nclick refresh and now you see it's been\nadded to the document now there's just\none more thing that I want to do and\nit's just going to make this whole\nworkflow just a little bit nicer we're\ngoing to come into the extensions piece\nlet me just expand this out for us we'll\ngo to the extensions uh tab within\nVisual Studio code and let's type in\nLive\nserver now live server is a way that we\ncan get automatic updates every time we\nclick save on our HTML and CSS documents\nso let's install this it's very easy to\ninstall uh extensions in Visual Studio\ncode um so you can see it's installed I\nthink that's all we need to do so this\nis is just another tab that's been\nopened up let's close it we don't need\nit we'll close this out as well and then\nall we have to do to get this live\nserver working is come down to the\nbottom right of our screen and click the\ngo live and it's going to pop up a\nsecurity box you need to allow access\nand now what you'll see is that we've\ngot a different address this is actually\num we'll get into this a lot more later\nin the series but\n127.0.0.1 that's our local host and then\n5501 is the port that we're serving it\non and we're serving the index.html\ndocument now if we put these next to\neach other close this out and add\nanother you know piece of text so more\ntext and once we click save you'll see\nthat it immediately gets updated here in\nthe browser that's going be incredibly\nhandy for us we don't have to go back\nand forth clicking refresh every time\nand it's also really nice because\ninstead of you know going to your file\nfolder and right-clicking and opening\nwith a browser you can just do it\ndirectly from Visual Studio code I know\nthat was a very long kind of\nintroduction to get us started working\non this project but um as I've been\ntrying to do within this full stack\nseries is just take you through every\nsingle step so we're not leaving\nanything out we're going through\nabsolutely everything and that's why I\nwanted to show you the extensions the\nEMT abbreviations the favicons the metat\ntags all of these little details because\nas I was learning I was wondered about\nthem and oftentimes tutorials would just\nskip right over them but we are finally\nready to start the actual Challenge and\nstart building that testimonials grid\nvery first thing I'm going to do and\nthis is what you should always do is\nlink up your CSS document if I open the\nfile explorer you'll see that there is\nno CSS available to us yet because we\nhaven't created it so go ahead and\nrightclick create a new file call it\nstyles.css or whatever you want it\ndoesn't really matter this is just a\nconvention once you have styles.css um\nlet's just go ahead and put in a basic\nstyle so we'll use the wild card that\nselects all elements and we'll give it a\ncolor of red\nand the reason we do this is just to you\nknow verify that everything is working\ncorrectly when we click save you'll\nnotice nothing happens here and the\nreason nothing happens is not because\nour live server is not working it's\nbecause we haven't told the index.html\ndocument that we need to grab that\nstylesheet so let's use an emit\nabbreviation we'll type link and you can\nsee all sorts of different links that\nyou can use and if we go down to CSS\nclick tab you'll see that we have a CSS\nlink set up for us and since we are in\nthe same directory so index.html and\nstyles.css are in the same directory we\ncan just use this exactly so it's saying\nstyle.css and just to stay with\nconvention I I actually think it should\nbe style not Styles let's just rename it\nto style.css over here and then save the\nHTML document you'll see that\nimmediately the text color updated to be\nred so we know that our link to our\nstyle.css is working if you put in you\nknow something like styles.css and click\nsave not going to work anymore so that's\nthat's what's going on there with that\nlink tag and for those of you who have\nbeen following along with the series if\nwe come to codeen what we just did there\nwas we hooked up the CSS in the HTML by\ndefault when you're in codeen you can\njust type HTML and type CSS and they\nwork together but when you're not\nworking in code pen which honestly most\nof the time as a developer you won't be\nyou have to actually come in and link\nthem up with the link tag all right so\nlet's get started here on the layout\nwe'll close the file pane for just a\nsecond and if you look at the desktop\ndesign you'll see that we'll have to\nkind of flip back and forth or what we\ncan do is we can split these editors so\nI believe we can split\ndown and now we can close this top one\nand we have the index.html at the top\nand our desktop design at the bottom\nit's kind of small but it will at least\ngive us a general feeling for what kind\nof layout we need if you're like me and\nget kind of annoyed with all this text\nflowing off the screen just click view\ntoggle word wrap and then everything\nwraps to our view I kind of like that so\nwe'll go with that and to start us off\nlet's see what we're dealing with here\nwith the grid so the first step to\nsolving any HTML and CSS challenge um or\njust building a web app in general is to\nget the layout correct and we saw that\nin previous lessons and challenges that\nwe did where we just put a border on\neach of our div containers and then we\ndid the layout and then we filled in all\nthe content and styles so we're going to\ndo the exact same thing here and you'll\nsee it's not going to be all that\ncomplicated now the most obvious place\nto start if we make this a little bigger\nwe have 1 2 3 4 five containers and they\nall have slightly different styles um it\nlooks like the two white containers here\nuh may have the exact same style but for\nnow let's just give them all an unique\nID so that we can uh select them with\nCSS a little bit easier so to do that um\nwith EMT abbreviations you can actually\njust type the hashtag and then whatever\nID you want to give it I'm just going to\nnumber these so we'll say testimonial D1\nand then click Tab and you see what it\ndoes is it gives an ID attribute on a\ndiv so that's what by default if you use\nthe emit abbreviations to put a hashtag\nand then type something or if you put a\ndot and then type something in PR press\ntab it will give you a class so that's\njust a quick shortcut so we'll go\nthrough and we'll do the same thing here\nso we'll say\ntestimonial -2 and then another useful\nthing in Visual Studio code if you go to\nthe end of a line click contrl C to copy\nand then crl V it will just paste them\ndown so there's our five and then we can\ncome in here and give this a three a\nfour and a five so we now have all of\nthe containers that we need when we\nclick save everything's going to\ndisappear up here cuz we just have empty\ndiv containers that's okay for now the\nnext thing that I'm looking at here um\nnormally I just put a border on\neverything and and make a layout but\nthis is already kind of a grid and we\nmight as well start filling in the\ncolors as background so that we can see\nwhat we're dealing with and then\nadditionally we probably need to start\nlooking at the mobile design CU we're\ndoing this mobile first so I know this\nis going to clutter the screen up a\nlittle but let's go ahead and open up\nthe mobile design in the bottom part\nhere close this back out and here you'll\njust see that every card is going to be\nstacked directly on top of each other\nbut they're going to look relatively\nsimilar so here's the\ndesktop here's the mobile it looks like\non the mobile design the cards\nthemselves for the the grid items or\ntestimonials are going to be the height\nof the content so the items with more\ncontent are going to be taller than the\nones with less so probably the best way\nto lay this out at the beginning is to\njust grab some of this content and put a\nbackground on there and just start\ngetting the structure of everything so\nlet me pull this down I know that's\nreally small but we'll work with it and\nhere in testimonial number one I'm just\ngoing to put a small amount of content\ncuz I don't want our HTML document\ngetting super busy with a bunch of text\nyet because that'll kind of that'll take\naway from uh the concepts we're trying\nto learn here so let's go to the\nplaceholder text and maybe we'll just\ngrab this really short line of\ntext and we'll put that in a paragraph\ntag so we'll just copy it\nthere and click save um we still have\nred text I don't really want that so\nlet's replace this uh all selector\ninstead of color red we'll do box\nsizing border box because that's our um\nbasic CSS reset that we want to do we\nwant to set all box sizing to border box\nso now we got the right text and all of\nour box sizing is good let's resize the\nscreen so that we actually have the\nbrowser on the right mimicking a mobile\ndevice so this isn't perfect I don't\nknow you know this is probably not\nexactly a mobile device let's make it\neven a little bit smaller gives us more\nroom to type anyways um but this is\nclose enough and this is what we're\ngoing to um build our mobile design off\nof as we talked about in the responsive\ndesign video 576 pixels is kind of our\nstandard um mobile device so anything\n576 or below is going to be considered\nmobile so that's roughly what we're\nlooking at here and if you right click\nand inspect and then you click this\nlittle icon right here to get the full\nscreen um you should be able to see\nexactly how wide it is so if we just\ntyped\nwindow.in with we're at 584 so if we\nwanted to hit that 576 number or a\nlittle bit lower it'd be right about\nhere so we'll keep the screen size right\nhere for now and then as we uh go up to\nthe desktop uh design we'll make it a\nlittle bit wider I'm going to copy this\nsame text just so that we have something\ninto each of these additional\ntestimonial divs and now we're going to\nhave some text to work with and then\nlet's look at these colors here so how\ndo we know what colors to use well we\nhave some starter files and if we go to\nthe style guide. MD it's it's going to\ngive you layouts and then colors right\nhere so this is where we're going to\nfind the colors that we need so if we\ncome down to the colors we see all of\nthem listed in hsl format and you can\nuse that in CSS but I just it's not my\npreferred way of doing it um and\nhonestly I haven't seen a whole lot of\ndevelopers that use hsl so what I'm\ngoing to do is I'm going to convert\nthese to hex codes and that way we can\nwork with what I'm comfortable with and\nprobably what you'll more often just as\na reminder this is how I'm doing it I\njust typed in RGB to hex and then you\nget this tool that Google has and you\ncan just basically come in here grab an\nhsl value paste it into this box here\nand then copy the hex code and replace\nit here so that's all I'm doing all\nright I've got these all replaced here\nso we've got hex values a little bit\nmore comfortable for most people to be\nusing and we've got a couple notes on\nthe text colors but I think these are\nmostly related to the text itself so\nwe'll get there a little bit later I'm\ngoing to drag the style guide down to\nthis bottom um portion of our Visual\nStudio code screen just so we can have\nit as a reference now it looks like the\nbackground of the entire screen is going\nto be a light gray so we'll start with\nthat if we go to our\nstyle.css um in addition to the Box\nsizing we also want to set mark margin\nzero and padding zero on everything um\njust so that we don't have any\nunintended side effects so when we click\nsave you'll see that everything gets\nsmooshed together because we just\nexcluded the margin and padding that's\nby default set on a paragraph element in\nthe browser and now we'll come down here\nand we'll say on the body we want the\nbackground color to be I believe the\nlight gray or the light grayish blue\nwe'll see which one looks more\nsimilar so there's the light gray that\nis definitely too\ndark and there is the light grayish blue\nwhich I think that does match if my eyes\nare not playing tricks on me I think the\nbackground here uh matches pretty well\nso I think we got that right so we got\nthe back background covered and now we\ncan start filling out our containers\nthemselves so each of them again has an\nindividual\nID let's template those out so\ntestimonial one and then we can copy\nthis five\ntimes we may not need all of these but\nwe'll just have them out here for the\nstart or actually of course we'll need\nall of these they're all different\ncolors so the first one is this purple\nthe purple card here so we need to grab\nthat color from the style guide I\nbelieve the moderate Violet is what\nwe're looking for so we'll come up to\ntestimonial one and give it a background\ncolor of that and now you'll you when we\nclick save you should see that\nbackground\ncolor now the next one that we're\nlooking for is looks like kind of a\ndarkish\ngray so very dark grayish\nblue I think that's the one that we want\nso we'll come to testimonial 2 and do\nthe same\nthing and then for the rest of these I\ndon't want to waste your time I'm just\ngoing to go and kind of guess and check\nuntil I get the background colors\ncorrect on each one of these uh pieces\nto this grid but the one thing I will\nsay before I speed through this is the\nnumbering of these so we've got them\nnumbered one through five but you may be\nwondering which is one and which is five\num for reasons that you will find out\nlater as we designed this with\nflexbox um this top one will be one then\ntwo 3 four and then the one on the right\nis going to be the fifth one so just\nknow that as I'm going through and\nstyling the backgrounds on each of them\nall right I've got all the background\ncolors filled in here and as you'll see\nin this mobile design that we're trying\nto make there's some room between the\nedge of the screen and these items\nwithin the grid and what we're going to\ndo to create that is we're going to\nactually wrap all of these items in one\nbig\ncontainer and then we're going to set\nsome padding on that container to bring\nall of them inwards a little bit bit so\nwe'll go to the index.html to do that\nand right now all of these divs are just\nsitting within the body but we're going\nto say um we want to create a ID of\ntestimonial grid\ncontainer we'll just be very specific\nwith it grab the closing div down here\nand paste it in so now we want to select\nthis testimonial grid container\nand put this in our\nStyles so hashtag grab the ID and now we\nwant to set some\npadding um you can either set it in\npercentage or\npixels um for this since we're going to\nbe making it responsive I'm going to\nstart with a percentage so usually about\n2% works pretty well you can see that\nyou get a little bit of padding there um\nbut of course when we look at the the\nmobile design design and make this\nbigger there's a little more padding on\nthe top than there is on the sides so we\ncan actually use the shorthand padding\nproperty to say we want 2% and then\nmaybe 5% and we'll save that and\nactually got that wrong so the top and\nbottom is going to be the first argument\nand then the left and right will be the\nsecond let's bump that up to three see\nwhat we got this looks pretty good um so\nI'll stay with this I'm I'm fairly\nsatisfied with the spacing that we have\nhere something that is really bothering\nme right now is the text color on these\ndarker backgrounds um so before I get\ntoo mad let's just go ahead and fill\nthat out so for the first one we'll need\na\nwhite um text color so we'll throw that\nin there and then we also will just copy\nthis down for testimonial 2 we're good\non three good on five but we'll also\nneed it on four and now you'll see that\nthe text is popping out a little bit\nbetter um but it's all crammed together\nso we need to space things out just a\nlittle bit as you see in the mobile\ndesign there's not only a little bit of\nspace around the inner content of each\num grid component but there's also some\nspace between each grid component on a\nmobile device like this a simple way to\nadd the spacing between them is to just\nset a margin bottom on each of these and\nthis looks roughly around 20 pixels give\nor take so instead of trying to set that\non each of these let's create a class\nselector that grabs all of them and what\nwe could do is we could come down here\nand grab each of them um one at a time\nseparated by commas but that's going to\nget very tedious the better way to do it\nis to come to the\nHTML and instead of trying to grab them\nall by IDs let's assign a class to each\nof the grid items so we'll just say grid\nitem is going to be the class name and\nthen we can copy that down into each of\nthese divs and here's a little shortcut\nwithin Visual Studio code if you find\nthe spot that you want to go\nin and you hold down the ALT key it's\ndifferent on Mac but on Windows it' be\nthe ALT key and then you click in a\ndifferent place you'll see there's two\ncursors so we'll click again and now\nthere's three cursors and then finally\nfour and what you can do is now we can\ntype all at once and paste in those\nclass um the those classes that we just\ncreated so there we go we've got class\nof grid item in each of these grid items\nand now we can come down and just select\nthat and set a margin bottom of 20\npixels so when we click save we've got a\nnice amount of spacing between the items\nfurthermore another similar thing\nbetween all of the grid items if we look\nat our Styles here is that the padding\naround the content is the same on each\nof them and it looks like um I'm not\nexactly sure but it might be somewhere\naround 20 pixels as well so we'll start\nwith that and we can tweak it as we go\nso we'll set p adding of 20 pixels click\nsave and now our boxes are looking a\nwhole lot better than they did a few\nminutes ago so we are far from done here\nwith the mobile design but right around\nthis point once I'm like happy with the\ngeneral layout obviously the text isn't\nright in here we're missing pieces but\nonce I'm satisfied and it doesn't look\nlike completely terrible then that's\nwhen I go go to the desktop design and\nstart making it responsive because I\nwant to get the layout correct before I\nstart you know adding a bunch of other\nthings in so what we will do here is\nwe're going to shrink this Visual Studio\ncode window a little bit close the\neditor so we have some more space and\nthen make this browser window larger so\nthat we can use the Chrome Dev tools and\nwhen we bring this down here I'm going\nto click this button right here so we\ncan toggle the device toolbar and now we\nhave the ability to see this at\ndifferent sizes really quickly without\nresizing the entire screen so that'll be\nhelpful as we you know we can actually\nsee the the width up here updating live\nso that'll be really helpful as we\nresize on different devices and design\nfor that so here's about our mobile\ndesign if you just click this bar um you\ncan get a small mobile device you can\nclick here for medium and here for Large\nmobile device so here's here's the Large\nmobile device and the reason it shrunk\nis because we're at\n40% um so let's go to maybe 75% you can\nsee it a little bit better and then as\nwe resize this we're getting into the\nlarger desktop devices I know I had\nmentioned um about 576 pixels for the\nbreakpoint we're going to use um and\nagain that is because earlier in this\ncourse when we talked about responsive\ndesign I just said let's go ahead and\nuse the bootstrap uh CSS framework break\npoints they're right here so they go\nfrom 576 768\n992 in our case we've got two designs\nonly so we're only going to need a\nsingle break point for this now we just\nhave to decide at what point do we break\nso if you just play around with this\ndesign and you just look at the text\nright around so we're at 78 pixels wide\nright now and this is getting a little\nbit wide for my liking um with this\nmobile design over here so I think\n576 right about here is going to be just\nabout the widest will go for that mobile\ndesign and that's going to be our\nbreakpoint\nthen to set that breakpoint we come over\nto our CSS we write at media for a media\nquery and since we're doing mobile uh\nfirst design will set a minwidth of\n576 pixels so now we open the brackets\nup and any Styles we put here are going\nto apply to anything bigger than 576 so\nall of this right here and before we get\nto far let's go ahead and test it this\nis really important as you're coding\nwhether it's HTML CSS JavaScript or\nanything else do it incrementally don't\njust write a bunch of code and then test\nit out all at the end so let's uh test\nit out by targeting A P tag and giving\nit a color of red something obnoxious\nand we'll click save right now we're at\n444 pixels so um we would not expect\nthis style to apply but as we go above\n576 we would expect all the text to turn\nred so let's see if it does and it does\nso that means that our media query is\nworking\ngreat remember always put these media\nqueries at the bottom of your CSS\notherwise they may get overwritten by\nother styles so our goal here before we\nget any further is once we hit above 576\nso when this is turning red and the\nreason it's doing that is because I\nhaven't saved yet um but once we get\nabove here we would expect this layout\nto look like this desktop design over\nhere so the question is how do we do\nthat and the way that we're going to\nsolve this is with flexbox I'm just\ngoing to expand this uh vs code so that\nwe can really look at the design here so\nas I look at this just by experience\nAlone um I'm thinking to myself that\nusing Flex box we're probably going to\nneed to split um these into\nsubcontainers now there's a lot of\ndifferent ways that you can do it as\nalways there's more than one way to\nsolve the problem but I'm going to\nchoose the most straightforward and\nbeginner friendly way of doing this I'm\nthinking that there is probably a way\nthat we could take all four of these\nitems\non the left side wrap those in a\ncontainer and then uh control the\nOverflow of the container with flex wrap\nand then size them accordingly but I'm\nthinking that might get a little bit\ncomplex to try to implement and by\nadding just one extra container we can\navoid all of that so what I'm thinking\nis that we split the overall layout into\ntwo containers so the first container is\ngoing to be all all four of these items\nright here in the second container will\nbe this item on the right by doing this\nwe can take container one on the left\nand container two on the right and we\ncan display flex and they will go side\nby side next to each other but that\ndoesn't solve how we lay out these items\non the left so what I would want to do\nwithin those containers so so remember\nwe have one container on the left one on\nthe right and then the left container we\ncan further divide into two other\ncontainers so we'll have a top and a\nbottom container and in each of those we\nwill display Flex so that they sit next\nto each other and then we can use flex\nbasis to make the dimensions of each of\nthese um a little bit different I know\nthis is a little abstract so let me just\nshow you exactly what I mean so we'll\nkeep that down here and this all happens\nwithin the HTML\nitself so to take these four items on\nthe left and wrap them in a container we\njust need to find them so here are the\nfirst four and all we have to do is go\nat the top of here and set a container\nnow we have to decide what to name it um\nso that we can Target it with CSS naming\nthings is always difficult I'm not going\nto over complicate it here we're just\ngoing to call it main left and make that\ndiv and then Within main left like I\nsaid we're going to have a top part and\na bottom part there's a couple ways I\ncould do this but once again I'll go\nvery simple and I'll just say top and\nthen we'll name the other one bottom so\nat this point I've got everything laid\nout correctly so we want to grab items\none and two so this one and this one and\nput it in that uh top container right\nhere so we'll do that we'll just cut\nthese away here and put there and then\nin the bottom we will take items three\nand four and put them\nthere now finally we have testimon\nmonial 5 and I said we're going to make\na separate container for that but lucky\nenough we've already wrapped our entire\ngrid within the testimonial grid\ncontainer and if you think about this\nfrom a flexbox perspective we always\nhave to think container and direct\nchildren doesn't matter the you know\ngrandchildren or great-grandchildren\nthose don't apply in flexbox so all we\nhave to know is what is the parent and\nwhat direct children does that parent\nhave this testimonial grid container has\nexactly two direct children it has the\nmain left and then it has the\ntestimonial five which is that you know\nthis tall card here on the right so now\nthat we've got this laid out let's save\nit and I will now bring this back to the\nleft side of the screen so that we can\nlook at it again and you'll see that on\nthe mobile device you know nothing has\nchanged here we put all these containers\nbut since we haven't selected them with\nCSS there's really no change to the\noverall layout quite yet but now this is\nwhere the real magic is going to happen\nand what we could do is um since we're\nDivi we're now designing for the desktop\nwe did mobile first with all these\nStyles now we're doing desktop within\nthe media query but again remember you\ndon't have to put everything within that\nmedia query there can be some some\nshared CSS properties between mobile and\ndesktop designs so the first style I'll\nadd is going to be the testimonial grid\ncontainer we want to do work from the\noutside in so we'll go to\nstyle.css and we'll put that into our\nmedia query and the only thing we need\nto do here for the moment is write\ndisplay Flex X and when we click save\nyou'll see nothing happens here because\nwe're still looking at the mobile device\nbut as we make this larger now you see\nthat this um the left the main left\ncontainer with all four of those items\ngo left and then the last item\ntestimonial 5 will be pushed off to the\nright because we've displayed them on\nthe main axis which is horizontal now if\nyou look at this design obviously this\ntestimonial five\nhas much less width than the rest so we\ncan set that with flex and I suppose\nit's probably about\n25% it looks like 20 to 25% of the total\nwidth so let's come to our\nstyle.css and on each\nitem we can set the flex basis so in\nthis case we're going to want to grab\ntestimonial\n5 and Target that with our ID selector\nand then we'll say the flex basis for\nthat we'll start with 20% and see what\nthat looks\nlike okay that's a little bit small I'm\nthinking that we'll need maybe\n25% I like that a little bit better and\nwe can always tweak it as we go the next\nthing we have to do is look at these\nfour items on the left and they\nobviously the top two go next to each\nother and the bottom two go next to each\nother as well therefore we need to make\nthe top a flex container and the bottom\na flex container so you'll see the ID is\ntop and bottom so all we need to do is\ncome over here and say top display\nflex and then bottom display flex but we\nhave a little bit of a problem here\nbecause they're not taking up the whole\num height of that main container so if\nwe go to the\nindex.html we have the main left\ncontainer and we want this right\ntestimonial 5 to be uh equal in height\nto these other testimonials to do this\nwe need to also turn the main left\ncontainer into a flex container so we'll\ngo right\nhere and display\nflex and this is not going to look right\nfor a second\nbecause when we do that it puts\neverything in a row but if we change the\nflex direction of the main left to be\ncolumn now it's going to go back and\nlook the same but now we have control\nusing Flex box of how those are\ndistributed so if we look at this main\nleft container which its direct children\nare going to be the top and the bottom\nwhich are also Flex containers um we can\ndistribute those using the just justify\ncontent since we set the flex direction\nto column the main axis is going to be\ngoing vertical and therefore justify\ncontent allows us to align on the main\naxis we also have the ability to say how\nlarge we want these using Flex basis so\nwhile top and bottom are Flex containers\nin relation to their children HTML\nelements they are Flex items in relation\nto the main left container so if we come\ndown and set the flex basis to um we'll\nstart with\n50% on each of them and then I'll show\nyou why that's not going to work\nperfectly so we'll save that and now you\nsee that we have these filling up the\ntotal height of that main left container\nand I was actually wrong the flex basis\nof 50% works just fine because in the\nmobile version we set the padding or we\nset the margin bottom of 20 pixels so\nthere's already already some space\nbetween we'll obviously have to space\nout um horizontally but we'll do that in\njust a bit now the next question we have\nto ask is how do we get these\nproportions correct with these uh four\ncontainers to do that we can work\ndirectly with the top and bottom and we\ncan use the flex basis of their children\nitems to do that so all we have to do is\ngrab um let's see exactly how we need to\ndo this it looks like these are a\ncomplete mirror of each other so this\nfirst one and the fourth one are about\nequal proportion and the second and\nthird one are equal proportion so we\nknow that our percentages are going to\nwork pretty much the same so to do this\nwe're going to need to grab testimonial\n1 through 4 and put them down in our\nmedia query which is our desktop design\nso if we put these at the bottom\nremember in our desktop design these are\nconsidered Flex items um we can go ahead\nand get rid of these two properties\nbecause they're already defined in our\nmobile version which also applies to the\num desktop as long as we don't override\nthem so we can get rid of all those but\nnow we can set a flex basis so the first\none this purple one looks like it's got\nabout 75% of the width um so we'll go\nwith\n75% and then that means testimonial 2 is\ngoing to have a flex basis of 25% cuz we\nwant to fill up the whole width of that\ncontainer and testimonial 3 is going to\nhave a flex basis of also\n25% and then a flex basis of 75% for\nthat last one so when we click save you\nshould see the proportions update uh\npretty nicely here as we compare this\ndesign right here to our desktop design\nuh picture you'll probably notice that\nit looks a little bit wider overall and\nyou'll see that there's more room around\nthe entire container so let's just fix\nthat so that we are not thrown off by\nthese proportions and the way that we'll\ndo that I believe we can just add some\nwe can add a Max width to the entire\ncontainer so let's look at our\nindex.html and our testimonial grid\ncontainer is probably what we're going\nto want to select and we've already got\nthat select Ed in the media query so on\na larger device maybe we set the max\nwidth of uh let's\nsay looks like this might be like 600\npixels that's just a rough guess so\nthat's a little bit narrow so maybe\nwe'll set the max width to say 700\nmaybe that looks a little bit better\nlet's go up to\n750 I think that's kind kind of in the\nballpark and then to Center this we\ncould use like Flex box but honestly the\neasier way is this little trick where\nyou set a margin of zero pixels top and\nbottom and then left and right you give\nit auto so it's going to automatically\ngive the margin to center it so when we\nclick save you'll see it all goes to the\nmiddle and now we're starting to see a\nlittle bit more proportioned grid here\nnow at this point I think\nthis is a little bit small the\nproportion we've given to that right one\nso let's change the flex basis of\ntestimonial five to be maybe something\nlike\n35% and then of course we need to\nset the left one to be the same so we\nneed to set the flex basis on the main\nleft which is all four of these um items\ntogether we'll set this to about 70%\nI think and then update this testimonial\n5 to be\n30% and I think that looks just a little\nbit better for us once we add some\nspacing here it should look a lot lot\nbetter so to finish this off here the\nlayout um it looks like there's some\nspacing between each of these items you\nknow\nhorizontally and there's a few ways that\nwe could do this actually I'm now\nthinking we might even go like like\n35 65 here and now we have these ones\nwhich are squished a little bit so maybe\nwe need to update this container give it\na bigger Max width then we'll change the\n75 25 at this point I'm just like\nadjusting things until we get generally\nthe right fit so let's try maybe like a\n70\n30 that looks like slightly better but I\nstill think we can go a little bit more\nso\n6535 there we go I think this\nlooks relatively good and then now that\nwe've adjusted this this looks a little\nbit too big so we'll we'll claw this one\nback to\n70 and\n30 and I think we're looking good here I\nthink the proportions between this in\nour design is relatively good and then\nof course this bottom one we need to\nmatch the top so\nwe'll just come down and do that real\nquick so 6535 so this one needs to be\nupdated to 35 and 65 and now our grid is\nlooking really good now to get this\nspacing horizontally you'll see that\nthere's these little gutters here um so\nright now we don't have any spacing\nhorizontally we could do this with\nmargin um as we kind of did vertically\nwith that margin but I'm going to try to\napply our flexbox skills to make this\nhappen which is a totally valid way to\ndo it as well so the first one we have\nto take care of is the uh main left\ncontainer which surrounds all four of\nthese and then testimonial five here on\nthe right right now we have a flex basis\nof 30% on this far right and 70% on the\nmain left container so it's split in two\nbut if we reduced those by a couple\npercentages and then we aligned them\nwith space between them we could add\nthat little vertical gutter in there so\nwhat I'll do is I'll take the main left\ncontainer and just bring it down to say\n68% so now we have about 2% um empty\nspace within the container so let's save\nthat and you'll see there's no there's\nno space cuz it's kind of added at the\nend um it's kind of invisible here on\nthe right\nbut if we come up to the testimonial\ngrid\ncontainer and what we do is we justify\ncontent because remember the main left\nwith all four of those items and the\ntestimonial five on the right are\naligned on a main axis which goes\nhorizontal because the flex direction is\nset to row by default so justify content\nallows us to align those within there\nand all we have to say is space between\nand when we do that you'll see that\nthere's a little space added there\nbecause we added some extra empty space\nand then we spaced them out between we\ncan do the same exact thing with these\nFlex items here too so the top Flex\ncontainer um the flex basis is 50% or\nactually I'm not doing this right so the\ntop and bottom are going to be the flex\ncontainers so let's just set the justify\ncontent on here to be um space between\nto start\noff all right and we'll save that and we\nwon't see any changes because currently\nthe flex basis equals 100% so there's no\nspace to add between but if we reduce um\nwe'll just reduce testimonial one to 63%\nso we have 2% left over once again and\nwe'll save it and now we have that\nlittle space of 2% added in there as\nwell now of course 2% on a large\ncontainer versus 2% on a much smaller\ncontainer is going to equal a different\npixel width so as you see in the design\nthe little gutter here between this\ntestimonial five on the right and all\nfour of these on the left that vertical\ngutter is a little bit wider than the\nvertical gutters that we just added to\nthese containers right here so you see\nhow to do it with flexbox if you're okay\nwith that fact then you can just leave\nit as we have it but what I'm going to\ndo just for demonstration purposes is\nI'm going to undo everything that we\njust did so we'll set everything back to\ntheir original percentages we'll remove\nthe justify\ncontents and save it and now we're back\nto this place where we have no space\nbetween and a really simple way that we\ncould do this is we could just look at\nall of the flex items or all of the grid\nitems here on the left we can just add a\nmargin to the right of say 20 pixels and\nit will be equal across the board so if\nwe look at our\nindex.html we have all of these\nindividual items with a class of grid\nitem but we don't want to add the margin\nright to this last testimonial so one\nway that we could do that is we could\nlook at the main left container which\nhas these four items and we can select\nall descendants with a class of grid\nitem so it only selects those four so\nI'll show you what I mean here um I\nguess we'll we'll put this up here right\nunder main left and we'll say main left\nis the parent that we want to look at\nand then we want to grab all grid item\ndescendants of that and now what we can\ndo let me just show you what we're\nselecting first so we'll set a color of\nred so that the text turns red and we'll\nclick save and now you can see all of\nthese left four uh grid items have red\ntext but we've excluded the right one\nwith this CSS selector that's exactly\nwhat we want so we'll add a margin to\nthe right of 20 pixels and you're going\nto see that this just gets spaced out\nreally nicely automatically and that is\nit's a little little much maybe let's go\nwith 15 pixels and that is exactly how\nwe would add that spacing on the right\nnaturally and now it's equal between all\nof them at this point the overall\nstructure of our grid looks very good\nand now that I'm looking at it one more\ntime it seems that this right one is\nstill a little bit too wide and I\napologize for going back and forth here\ntrying to teach and uh and see how to do\nthis at the same time so it's a little\nbit tough so let's let's bring this back\nto 20 25% on testimonial 5 and 75 on the\nmain left container I think this looks\ngood and I really hope I don't change my\nmind on that again I might but as of\nright now this looks very similar and\nthe cool thing is if we resize this down\nto Mobile so once we hit 576 pixels it\nshould break and boom we have our mobile\ndesign so we don't have to up anything\non the mobile side of things we just\nmade this desktop design and it's pretty\nmuch responsive now the one thing you'll\nnotice um is as we shrink it these Get\nshrunk a little bit so it may not look\nperfect say on like a tablet but it\nshould work okay you could always add an\nadditional break point um if you wanted\nto to adjust those Flex basis numbers so\nthat it looks better on tablet but I'm\nnot going to worry about that here cuz I\nthink it would just be distracting from\nthe main lesson\nall right so we have got our layout done\nit is responsive and now we should be\nable to just go in and look at this\nentire design here and start adding in\nall of these components and styling them\nout before we do that though I'd like to\nclean up our CSS a little bit because at\nthe moment we are duplicating a lot of\nour CSS rules so this is what we would\ncall kind of refactoring so you write\nthe code out you don't really worry\nabout doing it perf perfectly the first\ntime but then you kind of edit and you\nyou know iterate on it and make it a\nlittle bit cleaner so what you'll see is\nwe've written this uh rule of display\nFlex several different times so what we\ncan do is we can take all of these um\nIDs where we're writing that display\nflex and put it into one single CSS rule\nsome might say this is not worth doing\nbut I think it is it's nice to nice to\nbreak out our code a little bit so we\nwant to select our testimonial grid\ncontainer and display Flex um let me\njust write the rule first and then of\ncourse we want to select more than just\nthe testimonial grid so what else uses\nFlex we have the main left so we'll copy\nthat in\nthere so main\nleft top and bottom\nso those are all going to display flex\nand now we can get rid of all of those\nindividual rules on each of\nthem click save it should look the same\ndown here we have these four uh Flex\nitems all set with flex basis uh\npercentages that are very similar so\nlet's group this together let's take\ntestimonial 3 combine it with that rule\nand delete all of this and we'll take\ntestimonial\n4 combine it with that rule and delete\nthis last one save it should get the\nsame thing top and bottom now both have\na flex basis of 50% and that's the Only\nRule so we don't need them broken out\nseparately we can just bring those\ntogether and delete that\nrule click save should be the same and\nthen I'm going to take all of our Flex\nrules and just kind of group them\ntogether here so let me let me just put\nthose here okay so now we have all of\nour CSS grouped up a little bit better\nand we can start working on adding the\ncontent I'm going to shrink this screen\nand we'll go ahead and close the dev\ntools and we'll just work on this first\non the mobile design so that we have\nsome more screen real estate and then\nwe'll check it on desktop to make sure\neverything is working\nso we'll open up our file explorer and\nindex.html along with our placeholder\ntext because this is what we're going to\nactually be putting in um to all of\nthese containers and I'm just going to\nlook at the desktop design I know we're\ndoing mobile over here but it's just\nbigger so we can see it better I'll go\nthrough the first one with you and then\nthe rest of them are going to be pretty\nmuch exactly the same so I'll let you do\nthose on your own and I'll just speed\nthrough it so with this first\ncard right here now we have this big\nquotation we're going to worry about\nthat totally last we're not going to\nworry about that yet um the content\nitself it looks like we have a picture\nwe have a name we have uh this says\nverified graduate so they're the status\nof that person and then we have the main\ntestimonial and um the secondary\ntestimonial so just looking at this\nimmediately we need an image tag we need\na paragraph tag another paragraph tag\nlooks like maybe an H4 tag and then\nanother paragraph tag so let's get the\npicture first this first one is Daniel\nClifford so we're going to need that\nimage and that's been provided to us if\nwe go to images folder you should see\nimage daniel. JPEG so we can finally\nstart to to replace this so we're on\ntestimonial one right here and we're\nfirst going to put in an image so we'll\nuse the EM at abbreviation click tab and\nthe source that we want is going to be\nthe relative path and then we'll say\nimages and then we want image- Daniel\nand then the alt um attribute this is\nfor accessibility you should always put\nthis in here so um Danel Danel profile\npicture just a description of what that\nis click save you'll see this image come\nin to our first uh grid item we now need\nto write in his name and verified\ngraduate so let's do that we'll just use\na P tag so Daniel\nClifford verified\ngraduate there we go we've got those\nadded in\nthere now we have to go find the text so\nit says I received a job offer midc\ncourse okay so there's our Daniel so\nhere's our first piece of\ntext we'll put that in the P tag right\nhere so there's that text and then\nfinally we'll just want one more P tag\nand actually no this will not be a P tag\nlet's just set that as an H4 I think\nthat's roughly what we would want\nhere that looks okay okay we can always\nswitch it\nlater then finally we have this last\npiece of text so this is the longer\ntestimonial that we'll put in the P tag\nright\nhere all sorts of formatting issues so\nI'm just going to get this all on one\nline here it doesn't really matter but\nI'm going to just do this\nanyway okay so we've got our first card\ndone and like I said you can go through\nand figure out how to do the rest of\nthem it's the same exact pattern for\neach of the different um testimonial\ncards so what I'm going to do is I'm\ngoing to just take this entire\nstructure and I'm going to come down and\nreplace each item with it when we click\nsave you'll see that it's all looking\nthe same and then now we can just switch\nthe individual parts so the second\ntestimonial if we open up the desktop\ndesign it's going to be Jonathan so\nbased on the image names here we have\nimage\nJonathan so we really can just come into\nthe find the second one here so\ntestimonial\n2 replace the link here click save now\nwe have Jonathan in here and then you\njust update the rest of the text so I'm\ngoing to speed through this and I'll see\nyou when I'm\ndone all right we are done and you can\nsee that I've got all of the text and\nimages in here now it's just a matter\nmatter of styling these if you look at\nthe main\ndesign they're all about the same so we\nhave the image in a circle on the left\nwith the name and the verified graduate\nright under it and then the actual\ntestimonial below so it makes no sense\nto try to Target each of these\nindividually we'll just set a uh common\nclass among all of them and then style\nit one time let's start with the image\nand the name to the right of the image\nthe first thing that we need to do\nbecause how I see this is we've got the\nimage on the left and then the name in\nverified graduate stacked on top of each\nother so to get those next to each other\na great way to do it is flex box so the\nimage will be Flex item number one and\nthen we'll make a container around the\nname in the verified graduate which will\nbe Flex item number two to do that we\njust come to the\nHTML we'll go to the first one here\nand we'll come right above the image and\nwhat should we name\nthis we'll just call it a class of\nheader and then within header we're\ngoing to have the image and then another\ncontainer with the other\ntext so I'm going to\ncall that\ncontainer header text\nokay so now all we have to do is drop in\nthe image up top and then these two P\ntags in this container down here I'm\ngoing to split our style.css to the\nright here in Visual Studio code so we\ncan see both and as we look at the\nheader and the header text we can come\ndown um since this applies to both\nmobile and desktop we'll just write it\nup in the mobile first section\nwhere it applies to pretty much any\neverything and we'll just put it at the\nbottom we want to Target header which is\ngoing to be display Flex automatically\nwhen we click save you're going to see\nit jumps on to the correct line and then\nthese are lined up so if you look at\nthis the picture and the text they're\nlike on the same\nhorizontal um axis so the way that we\nget that to happen is align items we're\naligning items on the cross AIS to be\nCenter so now that's going to work and\nthen of course we need to grab the image\nso from the header container we want to\ngrab all\nimages and we want the Border radius to\nbe this is just a trick to make circular\npictures we want that to be\n50% so you see now we have a circle uh\npicture and then we want the margin\nright to be let's call it 5\npixels um actually that's not enough so\nlet's do 10 pixels now you can see\nthere's a little space between those\nlastly we need some space under this\nheader container so we'll come back up\nto header set a margin bottom of maybe\n20 pixels and that will space us out\nfrom this top header container to the\ntext under it now of course this has not\napplied to the rest of the testimonials\nbut we will follow the same exact\nprocess as long as we keep the same\nclass on them these CSS Styles should\napply just fine so I'm going to speed\nthrough this so you don't have to watch\nme do it um completely I'm just going to\ngo and and create this exact structure\nuh below for each of them and probably\nshould have done this the first time\naround but whatever we'll we'll get\nthrough it okay so I got that done and\nthat's kind of a good lesson there you\nusually want to finish like one one\niteration so one card um get it all\ncorrect and then apply the styles to the\nrest I didn't do that so had to pay for\nit with some extra time the next thing\nI'm going to do is space out these two\npieces of text so the first one's an H4\nthe second one is a paragraph tag so we\ncan select that with our our Styles\npretty easily all we have to do is look\nat any um grid item class and select the\nh 4S and add a margin bottom so we'll\nsay grid item H4 and we'll set a margin\nbottom of 20 pixels\nmaybe I think that looks okay so 20\npixels yeah that looks pretty good we're\ngetting close to the finish line here\nthe next thing you'll notice is there's\nrounded corners on each of these cards\nthat'll be pretty easy to apply so let's\ngo find our grid item style which\nselects all the grid items\nand we'll set a border radius of around\n5 pixels maybe that'll make those\nrounded Corners so that looks good\nthere's also a little bit of a drop\nshadow on each of these um or at least\nthe white ones but we'll just go ahead\nand put it on each of them just for\nSimplicity so any grid item is going to\nget a box\nShadow you can go to a box Shadow tool\nonline this is just the standard that I\nalways put in there um is a black color\nwith 20%\nopacity and then I kind of tweak\nthese um values right here until I get\nroughly what I want so you can see\nthere's a little box Shadow there I\nmight spread this out a little bit more\nit's not exactly what we're looking for\nbut it is it's pretty close and I'm not\ntoo concerned about getting this for\nbtim to the design the next big piece to\nthis is the font so in the style guide\nif we go here to the style guide it's\ngoing to tell you what font you need to\nuse so for typography the body copy is\n13 pixels um we haven't set that\nyet um actually let's let's do that\nreally quick so for grid\nitems you could set this at multiple\nlevels but for grid items we'll set the\nfont size to be 13\npixels makes it a lot smaller here for\nus and then for grid item\nh4s we'll set the font size back up so\nwe'll say maybe 1.2 RM so that's uh the\nroot element is going to be um the HTML\nwhich I believe is set default to 16\npixels so that will make it a much\nbigger text and I think that looks\nrelatively good decent proportions there\nso I'm I'm okay with\nthat and now we have to actually change\nthe font itself so in the style guide it\nsays that we need the barow semic\ncondensed font from Google fonts I\nhappen to have this open already let me\nexpand the screen and all you have to do\nis select the styles that you want so we\nwill do that and it looks like we need\n500 and 600 font weights so we will go\ngrab\nmedium which is\n500 and 600 which is semi\nbold now it's saying that we just need\nto put this link in our HTML document so\nwe'll copy that should be good on this\nso let me resize the screen real quick\nand now all we need to do with this is\nput it into our\nHTML so we put this in the head and we\ncan put it right by our stylesheet link\nso I think usually you're supposed to\nput this after your stylesheet so that\nthis applies I'm not entirely certain if\nthat is that matters a ton let's save it\nby default it's not going to be using it\nbecause we haven't enabled it so we'll\nhave to come back to our styles.css\nand in the body this might be where we\nput the font family and this is where\nwe'll go to the rules here and and we\ncan just paste in this CSS rule actually\nso we'll be using Barlo semic condensed\nwith a fallback of sand\nserif save that and you can see all of\nthe font is is looking a lot closer to\nour demo here you'll notice that these\nWhite cards have a gray text rather than\nthe black text we're giving it so let's\nupdate\nthat I believe we have a rule for this\nalready so we can actually condense\ntestimonial 5 and\nthree um into one because they have the\nsame um\nstyles and then the font color that we\nneed if we go to the style\nguide is probably this light gray I'm\nthinking nope that's a little too light\nso we'll try the dark grayish blue\nand I think that's a little bit\ncloser may not be exact but I'm I'm\nthinking it's close enough it's it's\nbetter than the black that we had\nbefore now the smaller text has a little\nbit less opacity than the main text and\nthen we also need to send the set the\nfont weight so let's look at the style\nguide it says for the typography or note\nfor the text colors the verified\ngraduate okay we're not ready for that\nyet review PA paragraphs inside quotes\nhave the same color but are\n70%\nopacity so in our design here we have a\ncouple different P tags so we have the\nname verified graduate and then the\ntestimonial down here so if we just um\nset the font weight of a P tag and the\nopacity of a P tag for all of them that\nwill um apply to mostly what we want cuz\nwe want\nthis testimonial to have 70% opacity and\nprobably verified graduate as well and\nthen we can specifically override that\nopacity style to be 100% for the name uh\nlater so let's let's go ahead and do\nthat so we'll see if we have something\nfor this\nalready so we have grid item so we'll\njust set the grid item P tags so any any\nP tag within the grid item we want to\nset the opacity to\n70% and then for the name let's just add\na class so we can use the ALT key to\ncome into all of the P tags with the\nname just holding down\nalt and we can give it a class\nname and then we can come down into the\nname selector and give it an opacity of\n100 % maybe not the most effective\nsolution but it works and we probably\nneed to select it with header to be more\nspecific um than our grid item P because\nheader and name um that's two class\nselectors is more specific than grid\nitem P which is a class and a tag\nselector so this one takes precedence\nand we'll override it now I think we\njust need to tweak a few things with the\ntext here not not a whole lot we might\nwant to make the name just slightly\nlarger than that default 13 pixels so we\ncan come to that rule that we just\ncreated so the name and we'll say the\nfont size is going to\nbe uh\n1.1 R actually that's going to be way\ntoo\nlarge um how about one RM so 16 pixels\nthat looks better if you open this up\nyou might see a little border around\nthese pictures too um so while we're\nhere we can look at the header image and\nwe can give it a border of one\npixel um solid maybe purple I think some\nof them are different but let's just go\nwith purple on all of\nthem you can see that little uh border\nthat we have around there you can tweak\nthat how you like it lastly um I think\nthe font weights look okay okay but they\ndid tell us to import weights of 500 and\n600 so we should probably explicitly set\nthose so on the grid grid item h4s we'll\ngive a font weight of\n600 looks about the same so not a huge\nchange for the most part I think I'm\nhappy with the design we have it's not\nabsolutely perfect but it's pretty close\nand more importantly we've gone through\na lot of the Concepts we've covered in\nthe previous videos which is always fun\nto apply those leave a comment if I\nmissed anything I think the only thing\nremaining is this big quote up here and\nthere's a couple ways you could approach\nthis I do not believe there's any assets\nfor this like this is not an\nimage actually it is so this is an\nSVG and we could use this SVG um I don't\nwant to get too far into um CSS and SVG\nit's like a whole other topic but I'll\ngo ahead and just quickly put it in and\nshow you how to do it so what we can do\nis this background pattern quotation SVG\nif we click on it it's just a bunch of\nnumbers um but we can actually put this\ninto an image I\nbelieve so if we come to our\nindex.html let me get this CSS collapsed\na little bit and it's obviously on the\nmain card the purple card here so number\none we can pretty much put it\nwherever we would like here within this\nmain card so let's make an image and\nthen the source is going to\nbe images and then background pattern\nquotation so now you see that quote is\nalready in there that's nice now we just\nneed to absolutely position this because\nit's in that weird spot so it's like\nkind of randomly up there in the top\nright corner let's give it an ID so\nwe'll give it the quote ID and then we\ncome over to our\nCSS and we will select\nquote and we'll say position absolute\nand what that is going to do is position\nit relative to I believe the viewport by\ndefault um let's see how that works so\nfrom the right we want it to be 20\npixels\nroughly okay yeah so it's relative to\nthe viewport we want it relative to this\ncontainer itself so to do that we need\nto set the testimonial one container to\nbe position relative and once we do that\nthat quote will come in correctly come\ndown to quote it should be probably more\nlike 30 pixels from the right and then\nfrom the top it is pretty much flush\nwith the top so we'll do zero\nyou can see that gets us a little bit\ncloser um and as we resize this it's\nobviously going to change that a little\nbit so maybe from the right we go like\n3% I'm just going to experiment around\nwith this until we get it right maybe\nlike\n7% That's closer let's just ramp it up\nto 15 okay I like that I think 15 is\npretty good and like I said it's flush\nwith the top so that's\ngood and then\nfinally as we resize this I know this\ndoesn't look amazing we're just kind of\nin that middle state where it's like\nthis is like bigger than a mobile device\nbut smaller than a tablet so you're\nreally not going to see this on any\ndevice for the most part so like here is\nabout where you're start you're going to\nstart seeing it and it looks like the\nquote is like a little bit above that\ntext and in our actual design here it's\nshowing it as behind the text like\noverlapping that's partially because of\nthe spacing that we've given it so I'm\nnot overly concerned about it but as we\nresize it and it does kind of overlap\ntext we want that to go behind\neverything so to do that we need to go\nto the\nStyles we need to set the zindex\nequal to like negative\none or actually let's let's set this Z\nindex to one and then on the\ntestimonial one we will set the zindex\nto be uh zero so it's above the\ntestimonial\ncard but then we want it to be below the\ntestimonial text so we'll set the zindex\nof the header to\nthree think that might might get us\nthere maybe not there we go we just need\nto set it to position relative so that\nthe zindex applies and now it should be\ngoing behind any text and stuff like\nthat so should be good there and I think\nour design is pretty much complete so as\nyou can see like we could spend the next\nhour or two hours trying to get this to\nlook exactly like the example here just\nif you're curious I took a second to try\nto figure this out fully um exactly how\nwe can get it to look like this and\ndidn't come all the way there but I did\nget it somewhat close so I put a Max\nwith of 1440 according to the style\nguide here where it says the desktop is\n1440 and then I set the testimonial 5\nand Main left containers to 80 and 20%\nrespectively so this looks okay I think\nthere's it's not exact like I said but\nit's a little bit\ncloser let me know in the comments if I\nmissed anything but as we resize this it\nshould be responsive we have this like\nmiddle state where it's a little bit\nweird but honestly trying to perfect\nthat is just going to be a lot of\ntedious tweaks that you can kind of do\non your own if you want but the main\ngoal here has been accomplished on\ndesktop it looks like this and on mobile\nit looks like this where we have\neverything stacked on top of each other\nso now at this point we're going to take\nthis Local Host um that nobody can see\nand we're going to deploy this to GitHub\npages so that you can pass it off as a\nlink and show off your project so the\nway that we'll do that let's close out\neverything here so we have a clean\nworkspace so what we can do is we can\nopen up Source control this is embedded\nwithin uh Visual Studio code and what we\ncan do is initialize a repository and\nthis can be done on the command line too\nbut I think we should you know since we\nhaven't learned get yet and I don't\nexpect you to understand any of this\nquite yet um might as well use the\nvisual interface so from here it's we\ninitialized the repository and um it\nsays control enter to commit on master\nso we can write a message just say first\ncommit and then controll\nenter uh we're going to Stage all our\nchanges and commit them directly\nyes and I'm I'm actually set up with\nGitHub already so it may ask you to go\nthrough some authorization where you\nhave to sign in to GitHub so go ahead\nand do that if you have to now what we\nhave to do is create a new repository so\non our GitHub so if you don't have an\naccount sign up for GitHub you'll need\nit uh for the rest of your developer\nlife click new repository and we'll just\nsay a\ntestimonial grid frontend\nMenor challenge solution very long uh\nrepository name you don't need to make\nit that\nlong and we'll just create the\nrepository make it public not too\nworried about initializing all of this\nstuff now from here you're just going to\ncopy the\nhttps link come back to visual studio\ncode click these three dots click\nremote add remote and then we're going\nto put in that\nURL from there we should be good I think\nwe want to push it to the main branch so\nlet me see what we're working with\nhere y so we need to push to main but\nthis is just the name we're giving it so\norigin we're just linking up our code\nhere to the GitHub repository again you\ndon't need to understand this we're just\ntrying to get it deployed here so um now\nwe're going to click\npush okay then let's check it out here\nwe'll refresh and you'll see that we\nhave all of these uh files that we just\ncreated from Visual Studio code here on\nour\nrepository right now we don't have it\ndeployed to GitHub Pages um the way that\nwe can do that we can do it here or we\ncan do it within Visual Studio code but\nquite honestly doing it within the\nrepository is is relatively\nstraightforward since we already have\nindex.html in the main root of the\ndirectory so we'll go to master find or\ncreate a branch and type GitHub\npages and it says create Branch GitHub\npages from Master which is exactly what\nwe want to do this is Master what we're\nlooking at right now so we'll create\nthat branch and now let's go back to our\nmain\nrepository and and I believe it should\npublish this to GitHub pages in the next\nminute or two it doesn't happen like\ninstantaneously because what it's\nactually doing is taking our code files\nand putting them on GitHub Pages which\nis just another server and then serving\nthem over our GitHub\nURL let's refresh the page looks like\nour environments has been set up now so\nwe can click on the main repository we\ncan click GitHub pages\nand then view the deployment and you can\nsee that what we just created is now\nlive and this link up here you can copy\nand share with someone else and as we\nresize it it of course is going to\nresize to that mobile mobile responsive\nuh with and then desktop responsive all\nright that is the end of the front-end\nweb development foundations course it\nwas a long one um I applaud anyone who\ngot through every minute of it um hope\nthat you enjoyed it be sure to give free\ncode Camp a like on this video And\nsubscribe to their Channel once again\nthere is a link in the description with\nsome additional resources um for each of\nthe topics that I covered so that if you\nwant to take it to the next level you\ncan well this is a long course 20 plus\nhours it's only the beginning if you\nwant to be good at front-end web\ndevelopment or even extend your yourself\nand get into full stack development\nyou're going to need to practice there's\ngoing to be a lot more learning to come\nbut hopefully this course gets you on\nthe right foot it gets you started in\nthe right direction um on your career to\nbecoming a web developer I wish you the\nbest of luck in your journey um to stay\nconnected with me I'm pretty active on\nTwitter at\nzgd De so feel free to connect with me\nthere I've also got a YouTube channel of\nmy own which really appreciate uh you\nhop over there and uh check out what\nI've got on that channel so long and\nhappy coding\n",
  "words": [
    "massive",
    "course",
    "go",
    "coding",
    "experience",
    "essential",
    "skills",
    "developer",
    "learn",
    "various",
    "technologies",
    "build",
    "projects",
    "along",
    "way",
    "zack",
    "golwitzer",
    "teaches",
    "course",
    "zach",
    "experienced",
    "software",
    "engineer",
    "full",
    "stack",
    "developer",
    "hey",
    "everyone",
    "name",
    "zach",
    "today",
    "20",
    "plus",
    "hour",
    "course",
    "going",
    "take",
    "core",
    "foundations",
    "web",
    "development",
    "get",
    "actually",
    "entails",
    "wanted",
    "spend",
    "minute",
    "thank",
    "free",
    "code",
    "camp",
    "channel",
    "always",
    "privilege",
    "share",
    "content",
    "broad",
    "audience",
    "um",
    "reach",
    "many",
    "different",
    "people",
    "genuinely",
    "hope",
    "find",
    "course",
    "helpful",
    "sure",
    "give",
    "big",
    "thumbs",
    "subscribe",
    "awesome",
    "channel",
    "contributed",
    "lot",
    "early",
    "learnings",
    "web",
    "developer",
    "without",
    "ado",
    "let",
    "get",
    "first",
    "thing",
    "wanted",
    "start",
    "background",
    "context",
    "lot",
    "content",
    "within",
    "course",
    "obviously",
    "filmed",
    "quite",
    "long",
    "um",
    "something",
    "worked",
    "course",
    "year",
    "um",
    "pieced",
    "together",
    "lesson",
    "lesson",
    "lot",
    "content",
    "youtube",
    "channel",
    "um",
    "separated",
    "different",
    "videos",
    "wanted",
    "compile",
    "together",
    "um",
    "follow",
    "logical",
    "sequence",
    "start",
    "end",
    "end",
    "perfect",
    "complete",
    "beginner",
    "take",
    "never",
    "written",
    "single",
    "line",
    "code",
    "life",
    "least",
    "solid",
    "grasp",
    "coding",
    "languages",
    "particularly",
    "javascript",
    "web",
    "development",
    "particularly",
    "web",
    "development",
    "able",
    "build",
    "basic",
    "web",
    "pages",
    "understand",
    "basic",
    "uh",
    "fundamentals",
    "coding",
    "course",
    "complete",
    "course",
    "mainly",
    "geared",
    "complete",
    "beginner",
    "later",
    "chapters",
    "get",
    "css",
    "flexbox",
    "stuff",
    "like",
    "could",
    "actually",
    "intermediate",
    "level",
    "useful",
    "anyone",
    "sure",
    "look",
    "chapters",
    "skip",
    "around",
    "interests",
    "basically",
    "structure",
    "three",
    "main",
    "tenants",
    "web",
    "development",
    "would",
    "html",
    "css",
    "javascript",
    "often",
    "times",
    "see",
    "tutorials",
    "kind",
    "start",
    "htm",
    "ml",
    "css",
    "move",
    "complicated",
    "challenging",
    "javascript",
    "actually",
    "reversed",
    "little",
    "bit",
    "starting",
    "javascript",
    "going",
    "biggest",
    "section",
    "um",
    "think",
    "useful",
    "number",
    "one",
    "going",
    "frontend",
    "web",
    "developer",
    "know",
    "three",
    "anyways",
    "also",
    "think",
    "lot",
    "concepts",
    "uh",
    "pick",
    "learning",
    "general",
    "programming",
    "language",
    "like",
    "javascript",
    "kind",
    "help",
    "catch",
    "html",
    "css",
    "bring",
    "full",
    "picture",
    "goal",
    "course",
    "course",
    "needed",
    "starting",
    "really",
    "trying",
    "connect",
    "concepts",
    "together",
    "html",
    "css",
    "javascript",
    "um",
    "born",
    "isolation",
    "work",
    "together",
    "build",
    "web",
    "page",
    "talk",
    "analogy",
    "little",
    "bit",
    "later",
    "think",
    "three",
    "core",
    "tenants",
    "web",
    "development",
    "like",
    "would",
    "building",
    "house",
    "build",
    "house",
    "got",
    "know",
    "framework",
    "structure",
    "concrete",
    "foundation",
    "2x4s",
    "go",
    "roof",
    "would",
    "html",
    "get",
    "put",
    "wiring",
    "put",
    "plumbing",
    "stuff",
    "would",
    "javascript",
    "makes",
    "actually",
    "functional",
    "finally",
    "put",
    "finish",
    "put",
    "know",
    "roof",
    "tiles",
    "put",
    "paint",
    "outside",
    "inside",
    "make",
    "look",
    "good",
    "css",
    "walk",
    "away",
    "anything",
    "c",
    "want",
    "understand",
    "importantly",
    "relationships",
    "three",
    "pretty",
    "firm",
    "grasp",
    "isolation",
    "well",
    "last",
    "thing",
    "actually",
    "get",
    "started",
    "let",
    "know",
    "video",
    "description",
    "going",
    "link",
    "link",
    "going",
    "lead",
    "page",
    "gives",
    "resources",
    "need",
    "course",
    "time",
    "stamps",
    "chapters",
    "um",
    "navigate",
    "around",
    "course",
    "leave",
    "code",
    "snippets",
    "solutions",
    "challenges",
    "even",
    "additional",
    "resources",
    "next",
    "steps",
    "certain",
    "topics",
    "want",
    "take",
    "little",
    "bit",
    "without",
    "ado",
    "let",
    "jump",
    "web",
    "development",
    "foundations",
    "want",
    "start",
    "quick",
    "win",
    "want",
    "see",
    "power",
    "code",
    "see",
    "early",
    "kind",
    "confidence",
    "know",
    "go",
    "know",
    "download",
    "bunch",
    "crazy",
    "things",
    "onto",
    "computer",
    "write",
    "bunch",
    "crazy",
    "lines",
    "code",
    "terminal",
    "actually",
    "something",
    "cool",
    "since",
    "going",
    "jumping",
    "code",
    "first",
    "lesson",
    "know",
    "anything",
    "going",
    "confused",
    "okay",
    "worry",
    "promise",
    "go",
    "back",
    "everything",
    "talked",
    "video",
    "couple",
    "videos",
    "probably",
    "able",
    "actually",
    "going",
    "video",
    "fan",
    "netflix",
    "series",
    "stranger",
    "things",
    "might",
    "remember",
    "first",
    "season",
    "kids",
    "talking",
    "professor",
    "thing",
    "called",
    "upside",
    "basically",
    "professor",
    "talking",
    "lot",
    "physics",
    "concepts",
    "stuff",
    "like",
    "basically",
    "talking",
    "tight",
    "rpp",
    "human",
    "tight",
    "rpp",
    "flea",
    "tight",
    "rpp",
    "flea",
    "actually",
    "go",
    "around",
    "tight",
    "rpp",
    "see",
    "different",
    "sides",
    "human",
    "ultimately",
    "going",
    "throughout",
    "series",
    "going",
    "looking",
    "something",
    "spent",
    "lot",
    "time",
    "already",
    "actually",
    "go",
    "side",
    "understand",
    "going",
    "behind",
    "scenes",
    "first",
    "thing",
    "going",
    "touch",
    "something",
    "called",
    "browser",
    "developer",
    "tools",
    "might",
    "seen",
    "uh",
    "something",
    "like",
    "called",
    "web",
    "browser",
    "probably",
    "use",
    "every",
    "day",
    "life",
    "ever",
    "clicked",
    "inspect",
    "element",
    "gone",
    "uh",
    "tool",
    "right",
    "different",
    "know",
    "applications",
    "go",
    "see",
    "going",
    "web",
    "page",
    "fullstack",
    "web",
    "developer",
    "particularly",
    "developer",
    "kind",
    "subset",
    "fullstack",
    "development",
    "going",
    "using",
    "developer",
    "tools",
    "ton",
    "going",
    "get",
    "used",
    "video",
    "actually",
    "want",
    "walk",
    "common",
    "parts",
    "developer",
    "tools",
    "actually",
    "write",
    "code",
    "within",
    "give",
    "idea",
    "first",
    "thing",
    "want",
    "though",
    "download",
    "firefox",
    "web",
    "browser",
    "type",
    "firefox",
    "download",
    "go",
    "download",
    "get",
    "onto",
    "computer",
    "want",
    "working",
    "tool",
    "across",
    "board",
    "although",
    "developer",
    "tools",
    "within",
    "browser",
    "whether",
    "edge",
    "chrome",
    "firefox",
    "developer",
    "tools",
    "want",
    "make",
    "sure",
    "looking",
    "thing",
    "looking",
    "firefox",
    "actually",
    "great",
    "web",
    "browser",
    "uh",
    "developers",
    "really",
    "advanced",
    "developer",
    "tools",
    "opinion",
    "probably",
    "best",
    "developer",
    "tools",
    "browser",
    "get",
    "downloaded",
    "downloaded",
    "go",
    "take",
    "look",
    "pane",
    "right",
    "remember",
    "right",
    "clicked",
    "anywhere",
    "page",
    "clicked",
    "inspect",
    "l",
    "first",
    "thing",
    "going",
    "talk",
    "inspector",
    "inspector",
    "probably",
    "portion",
    "developer",
    "tools",
    "become",
    "familiar",
    "reason",
    "allows",
    "basically",
    "might",
    "expect",
    "inspect",
    "page",
    "looking",
    "web",
    "page",
    "scrolling",
    "different",
    "lines",
    "html",
    "code",
    "see",
    "different",
    "parts",
    "web",
    "page",
    "actually",
    "highlighted",
    "click",
    "drop",
    "get",
    "specific",
    "selecting",
    "basically",
    "see",
    "going",
    "web",
    "page",
    "go",
    "bottom",
    "stylings",
    "css",
    "styles",
    "go",
    "along",
    "html",
    "worry",
    "going",
    "get",
    "know",
    "languages",
    "later",
    "course",
    "want",
    "show",
    "landscape",
    "really",
    "show",
    "going",
    "let",
    "open",
    "uh",
    "another",
    "tab",
    "go",
    "im",
    "imes",
    "let",
    "type",
    "dog",
    "let",
    "grab",
    "dog",
    "like",
    "one",
    "want",
    "open",
    "new",
    "tab",
    "let",
    "say",
    "copy",
    "link",
    "location",
    "come",
    "back",
    "page",
    "let",
    "click",
    "button",
    "kind",
    "selector",
    "uh",
    "different",
    "elements",
    "page",
    "let",
    "click",
    "image",
    "see",
    "top",
    "well",
    "ca",
    "show",
    "img",
    "image",
    "html",
    "tag",
    "let",
    "click",
    "let",
    "go",
    "source",
    "attribute",
    "paste",
    "link",
    "uh",
    "grabbed",
    "dog",
    "photo",
    "press",
    "enter",
    "see",
    "web",
    "page",
    "actually",
    "updated",
    "close",
    "developer",
    "tools",
    "got",
    "makeover",
    "permanent",
    "changes",
    "obviously",
    "would",
    "permanent",
    "changes",
    "uh",
    "rightclick",
    "inspect",
    "element",
    "let",
    "click",
    "image",
    "let",
    "make",
    "little",
    "bit",
    "uh",
    "smaller",
    "let",
    "put",
    "width",
    "100",
    "see",
    "dog",
    "little",
    "bit",
    "uh",
    "styled",
    "google",
    "homepage",
    "said",
    "permanent",
    "developer",
    "tools",
    "great",
    "allow",
    "make",
    "temporary",
    "changes",
    "web",
    "page",
    "might",
    "code",
    "writing",
    "know",
    "back",
    "end",
    "uh",
    "terminal",
    "code",
    "editor",
    "live",
    "changes",
    "come",
    "make",
    "little",
    "changes",
    "like",
    "saw",
    "picture",
    "big",
    "went",
    "changed",
    "different",
    "dimension",
    "kind",
    "test",
    "different",
    "changes",
    "power",
    "allows",
    "things",
    "real",
    "time",
    "second",
    "click",
    "refresh",
    "page",
    "going",
    "see",
    "goes",
    "back",
    "original",
    "web",
    "page",
    "one",
    "seeing",
    "changes",
    "within",
    "inspect",
    "utility",
    "nobody",
    "else",
    "sees",
    "changes",
    "permanent",
    "like",
    "said",
    "going",
    "spending",
    "ton",
    "time",
    "worry",
    "none",
    "really",
    "made",
    "sense",
    "see",
    "clicking",
    "click",
    "different",
    "elements",
    "let",
    "maybe",
    "click",
    "little",
    "icon",
    "see",
    "powerful",
    "get",
    "stuff",
    "bottom",
    "right",
    "see",
    "box",
    "model",
    "actually",
    "uh",
    "look",
    "document",
    "object",
    "model",
    "dom",
    "going",
    "get",
    "things",
    "next",
    "thing",
    "want",
    "show",
    "thing",
    "called",
    "console",
    "console",
    "probably",
    "second",
    "uh",
    "popular",
    "tool",
    "within",
    "developer",
    "tools",
    "least",
    "series",
    "going",
    "using",
    "console",
    "quite",
    "lot",
    "console",
    "actually",
    "called",
    "repple",
    "stands",
    "uh",
    "read",
    "evaluate",
    "print",
    "loop",
    "really",
    "need",
    "know",
    "want",
    "remember",
    "console",
    "two",
    "things",
    "number",
    "one",
    "allows",
    "write",
    "javascript",
    "number",
    "two",
    "allows",
    "actually",
    "modify",
    "document",
    "object",
    "model",
    "dom",
    "going",
    "talk",
    "little",
    "bit",
    "later",
    "series",
    "two",
    "main",
    "things",
    "console",
    "allows",
    "us",
    "show",
    "going",
    "give",
    "short",
    "example",
    "use",
    "console",
    "make",
    "changes",
    "also",
    "making",
    "inspector",
    "remember",
    "kind",
    "changed",
    "image",
    "uh",
    "within",
    "inspector",
    "also",
    "within",
    "console",
    "let",
    "grab",
    "different",
    "dog",
    "picture",
    "fun",
    "grab",
    "uh",
    "one",
    "like",
    "copy",
    "image",
    "location",
    "copying",
    "actual",
    "uh",
    "file",
    "looking",
    "go",
    "back",
    "page",
    "want",
    "actually",
    "select",
    "image",
    "tag",
    "page",
    "say",
    "document",
    "query",
    "selector",
    "type",
    "img",
    "see",
    "little",
    "element",
    "editing",
    "earlier",
    "highlighted",
    "actually",
    "printing",
    "going",
    "get",
    "uh",
    "press",
    "enter",
    "press",
    "enter",
    "get",
    "uh",
    "image",
    "actually",
    "save",
    "variable",
    "real",
    "quick",
    "let",
    "say",
    "image",
    "worry",
    "going",
    "talk",
    "later",
    "say",
    "document",
    "query",
    "selector",
    "img",
    "save",
    "image",
    "actually",
    "representing",
    "element",
    "page",
    "say",
    "image",
    "set",
    "attribute",
    "want",
    "set",
    "source",
    "want",
    "set",
    "equal",
    "link",
    "copied",
    "dog",
    "photo",
    "press",
    "enter",
    "actually",
    "going",
    "change",
    "page",
    "also",
    "resize",
    "like",
    "earlier",
    "image",
    "set",
    "attribute",
    "um",
    "actually",
    "set",
    "attribute",
    "style",
    "dot",
    "width",
    "equals",
    "let",
    "say",
    "100",
    "sorry",
    "actually",
    "attribute",
    "let",
    "set",
    "attribute",
    "sorry",
    "real",
    "time",
    "uh",
    "let",
    "go",
    "width",
    "go",
    "100",
    "see",
    "goes",
    "resizes",
    "accordingly",
    "short",
    "example",
    "use",
    "console",
    "actually",
    "edit",
    "uh",
    "document",
    "object",
    "model",
    "think",
    "web",
    "page",
    "also",
    "write",
    "pure",
    "vanilla",
    "javascript",
    "within",
    "repple",
    "console",
    "show",
    "actually",
    "already",
    "showed",
    "saved",
    "uh",
    "element",
    "variable",
    "javascript",
    "variable",
    "could",
    "also",
    "write",
    "function",
    "could",
    "write",
    "function",
    "says",
    "change",
    "image",
    "something",
    "like",
    "takes",
    "url",
    "going",
    "actually",
    "change",
    "image",
    "let",
    "go",
    "ahead",
    "make",
    "function",
    "going",
    "going",
    "say",
    "document",
    "query",
    "selector",
    "img",
    "set",
    "attribute",
    "going",
    "say",
    "source",
    "going",
    "pass",
    "url",
    "worry",
    "examples",
    "going",
    "say",
    "enter",
    "function",
    "execute",
    "function",
    "paste",
    "url",
    "click",
    "enter",
    "guess",
    "already",
    "going",
    "change",
    "went",
    "different",
    "dog",
    "picture",
    "run",
    "function",
    "see",
    "changes",
    "image",
    "browser",
    "write",
    "javascript",
    "modify",
    "web",
    "page",
    "stuff",
    "within",
    "console",
    "actually",
    "going",
    "learning",
    "lot",
    "initial",
    "concepts",
    "javascript",
    "console",
    "easy",
    "set",
    "get",
    "going",
    "showed",
    "rightclick",
    "inspect",
    "element",
    "click",
    "console",
    "boom",
    "ready",
    "write",
    "javascript",
    "great",
    "place",
    "start",
    "set",
    "elaborate",
    "stuff",
    "write",
    "basic",
    "javascript",
    "couple",
    "features",
    "within",
    "developer",
    "tools",
    "want",
    "show",
    "less",
    "important",
    "first",
    "two",
    "looked",
    "inspector",
    "console",
    "remind",
    "right",
    "click",
    "inspect",
    "element",
    "want",
    "go",
    "network",
    "tab",
    "network",
    "tab",
    "something",
    "using",
    "uh",
    "lot",
    "later",
    "refresh",
    "page",
    "going",
    "see",
    "activity",
    "happening",
    "network",
    "tab",
    "actually",
    "seeing",
    "resources",
    "transferred",
    "network",
    "web",
    "page",
    "google",
    "backend",
    "servers",
    "actually",
    "rec",
    "uh",
    "sending",
    "resources",
    "front",
    "end",
    "actually",
    "seeing",
    "resources",
    "displayed",
    "browser",
    "example",
    "would",
    "google",
    "image",
    "right",
    "click",
    "images",
    "part",
    "see",
    "december",
    "holidays",
    "uh",
    "response",
    "actually",
    "image",
    "looking",
    "wanted",
    "see",
    "things",
    "timings",
    "long",
    "took",
    "load",
    "um",
    "know",
    "look",
    "http",
    "headers",
    "kind",
    "stuff",
    "useful",
    "us",
    "get",
    "backend",
    "development",
    "talking",
    "api",
    "request",
    "know",
    "http",
    "kind",
    "stuff",
    "come",
    "back",
    "spend",
    "time",
    "lot",
    "later",
    "series",
    "wanted",
    "expose",
    "uh",
    "initially",
    "see",
    "something",
    "using",
    "another",
    "thing",
    "using",
    "click",
    "little",
    "arrow",
    "storage",
    "storage",
    "useful",
    "couple",
    "things",
    "storage",
    "going",
    "useful",
    "tracking",
    "user",
    "behavior",
    "site",
    "uh",
    "play",
    "blame",
    "game",
    "talk",
    "facebook",
    "cookies",
    "facebook",
    "puts",
    "uh",
    "web",
    "browser",
    "mobile",
    "phone",
    "kind",
    "stuff",
    "stored",
    "see",
    "google",
    "storing",
    "cookies",
    "us",
    "user",
    "although",
    "probably",
    "wo",
    "mean",
    "whole",
    "lot",
    "us",
    "people",
    "using",
    "site",
    "specific",
    "ids",
    "sorts",
    "identifiers",
    "um",
    "allow",
    "google",
    "know",
    "things",
    "user",
    "also",
    "great",
    "authentication",
    "going",
    "actually",
    "log",
    "uh",
    "register",
    "people",
    "app",
    "build",
    "backend",
    "dashboard",
    "editing",
    "blog",
    "personal",
    "website",
    "going",
    "need",
    "authentication",
    "want",
    "anyone",
    "coming",
    "editing",
    "blog",
    "storage",
    "tab",
    "going",
    "use",
    "actually",
    "advanced",
    "topic",
    "comes",
    "later",
    "road",
    "also",
    "wanted",
    "show",
    "everything",
    "else",
    "see",
    "whether",
    "inspector",
    "console",
    "debugger",
    "network",
    "style",
    "editor",
    "kind",
    "stuff",
    "um",
    "everything",
    "else",
    "quite",
    "important",
    "enough",
    "us",
    "cover",
    "going",
    "leave",
    "probably",
    "wo",
    "even",
    "use",
    "anything",
    "outside",
    "talked",
    "least",
    "several",
    "months",
    "even",
    "years",
    "maybe",
    "even",
    "ever",
    "web",
    "developer",
    "right",
    "think",
    "covered",
    "mostly",
    "developer",
    "tools",
    "review",
    "rightclick",
    "anywhere",
    "web",
    "page",
    "inspect",
    "element",
    "get",
    "developer",
    "tools",
    "last",
    "thing",
    "want",
    "video",
    "actually",
    "show",
    "coding",
    "write",
    "first",
    "javascript",
    "program",
    "well",
    "probably",
    "understand",
    "concepts",
    "behind",
    "code",
    "write",
    "want",
    "get",
    "habit",
    "actually",
    "writing",
    "code",
    "know",
    "get",
    "uh",
    "feeling",
    "comfortable",
    "console",
    "talked",
    "earlier",
    "open",
    "web",
    "browser",
    "hopefully",
    "firefox",
    "browser",
    "downloaded",
    "put",
    "video",
    "side",
    "open",
    "console",
    "right",
    "click",
    "inspect",
    "go",
    "console",
    "even",
    "type",
    "clear",
    "uh",
    "two",
    "little",
    "parentheses",
    "clear",
    "console",
    "ready",
    "get",
    "started",
    "goal",
    "program",
    "going",
    "every",
    "time",
    "click",
    "google",
    "web",
    "page",
    "click",
    "actually",
    "clicking",
    "right",
    "um",
    "want",
    "background",
    "page",
    "actually",
    "change",
    "color",
    "want",
    "color",
    "random",
    "color",
    "javascript",
    "code",
    "going",
    "walk",
    "line",
    "line",
    "kind",
    "explain",
    "um",
    "line",
    "give",
    "feeler",
    "worry",
    "everything",
    "working",
    "going",
    "go",
    "details",
    "javascript",
    "language",
    "future",
    "videos",
    "first",
    "thing",
    "save",
    "body",
    "html",
    "tag",
    "variable",
    "say",
    "body",
    "html",
    "tag",
    "every",
    "web",
    "page",
    "going",
    "go",
    "thing",
    "called",
    "body",
    "represents",
    "kind",
    "container",
    "uh",
    "entire",
    "web",
    "page",
    "aside",
    "course",
    "topmost",
    "uh",
    "container",
    "called",
    "html",
    "want",
    "select",
    "body",
    "want",
    "actually",
    "change",
    "background",
    "actually",
    "manually",
    "come",
    "right",
    "see",
    "body",
    "background",
    "uh",
    "fff",
    "hex",
    "code",
    "color",
    "white",
    "type",
    "green",
    "see",
    "background",
    "actually",
    "changes",
    "web",
    "browser",
    "want",
    "vanilla",
    "javascript",
    "every",
    "time",
    "click",
    "screen",
    "order",
    "first",
    "thing",
    "accomplish",
    "saving",
    "body",
    "tag",
    "let",
    "type",
    "clear",
    "get",
    "clean",
    "space",
    "let",
    "type",
    "variable",
    "javascript",
    "variable",
    "want",
    "set",
    "equal",
    "document",
    "query",
    "selector",
    "want",
    "get",
    "body",
    "tag",
    "press",
    "enter",
    "going",
    "h",
    "hml",
    "body",
    "actually",
    "print",
    "see",
    "successfully",
    "retrieved",
    "stored",
    "variable",
    "actually",
    "need",
    "create",
    "function",
    "function",
    "going",
    "save",
    "variable",
    "know",
    "getting",
    "little",
    "bit",
    "confusing",
    "point",
    "bear",
    "type",
    "along",
    "going",
    "go",
    "uh",
    "function",
    "going",
    "assign",
    "something",
    "called",
    "array",
    "array",
    "going",
    "contain",
    "various",
    "colors",
    "choice",
    "put",
    "many",
    "want",
    "separated",
    "commas",
    "going",
    "put",
    "couple",
    "random",
    "colors",
    "saved",
    "29",
    "42",
    "hex",
    "codes",
    "actually",
    "go",
    "uh",
    "hex",
    "codes",
    "something",
    "like",
    "um",
    "go",
    "google",
    "see",
    "different",
    "hex",
    "codes",
    "various",
    "tools",
    "use",
    "um",
    "anyways",
    "going",
    "save",
    "comma",
    "separate",
    "array",
    "let",
    "go",
    "add",
    "also",
    "uh",
    "valid",
    "css",
    "value",
    "would",
    "something",
    "like",
    "red",
    "blue",
    "green",
    "also",
    "type",
    "red",
    "blue",
    "uh",
    "green",
    "yellow",
    "orange",
    "maybe",
    "even",
    "purple",
    "right",
    "saved",
    "colors",
    "array",
    "next",
    "thing",
    "get",
    "random",
    "index",
    "array",
    "say",
    "index",
    "values",
    "certain",
    "index",
    "within",
    "array",
    "talk",
    "later",
    "one",
    "would",
    "zeroth",
    "index",
    "would",
    "first",
    "index",
    "second",
    "third",
    "forth",
    "get",
    "random",
    "index",
    "actually",
    "use",
    "javascript",
    "library",
    "called",
    "math",
    "library",
    "need",
    "random",
    "random",
    "index",
    "zero",
    "let",
    "see",
    "uh",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "uh",
    "eight",
    "items",
    "within",
    "array",
    "want",
    "index",
    "zero",
    "seven",
    "uh",
    "arrays",
    "zero",
    "index",
    "start",
    "one",
    "get",
    "random",
    "index",
    "equal",
    "math",
    "floor",
    "going",
    "pass",
    "please",
    "worry",
    "going",
    "example",
    "give",
    "us",
    "random",
    "index",
    "actually",
    "pressed",
    "enter",
    "little",
    "bit",
    "early",
    "actually",
    "rewrite",
    "function",
    "okay",
    "kind",
    "returned",
    "pressed",
    "enter",
    "screwed",
    "um",
    "basically",
    "getting",
    "random",
    "number",
    "zero",
    "seven",
    "way",
    "actually",
    "get",
    "length",
    "array",
    "typing",
    "colors",
    "length",
    "let",
    "make",
    "mistake",
    "let",
    "enter",
    "couple",
    "times",
    "actually",
    "grab",
    "random",
    "color",
    "save",
    "variable",
    "grab",
    "random",
    "color",
    "um",
    "equal",
    "colors",
    "insert",
    "random",
    "index",
    "generated",
    "going",
    "actually",
    "style",
    "body",
    "grab",
    "uh",
    "variable",
    "saved",
    "called",
    "html",
    "body",
    "want",
    "go",
    "uh",
    "style",
    "background",
    "color",
    "clip",
    "background",
    "color",
    "want",
    "set",
    "equal",
    "random",
    "color",
    "going",
    "actually",
    "showed",
    "earlier",
    "change",
    "background",
    "color",
    "last",
    "thing",
    "want",
    "print",
    "console",
    "confirmation",
    "worked",
    "something",
    "like",
    "say",
    "user",
    "clicked",
    "set",
    "color",
    "concatenate",
    "string",
    "say",
    "random",
    "color",
    "okay",
    "function",
    "done",
    "hopefully",
    "works",
    "way",
    "see",
    "works",
    "running",
    "executing",
    "random",
    "click",
    "function",
    "looks",
    "like",
    "user",
    "clicked",
    "changed",
    "color",
    "finish",
    "program",
    "last",
    "thing",
    "set",
    "event",
    "listener",
    "html",
    "body",
    "element",
    "little",
    "bit",
    "advanced",
    "kind",
    "cool",
    "feature",
    "uh",
    "know",
    "javascript",
    "kind",
    "stuff",
    "go",
    "html",
    "body",
    "say",
    "onclick",
    "saying",
    "user",
    "clicks",
    "want",
    "execute",
    "random",
    "click",
    "function",
    "right",
    "press",
    "enter",
    "wired",
    "every",
    "time",
    "click",
    "going",
    "change",
    "color",
    "going",
    "click",
    "couple",
    "times",
    "since",
    "random",
    "might",
    "get",
    "couple",
    "duplicates",
    "even",
    "close",
    "keep",
    "clicking",
    "get",
    "sorts",
    "different",
    "results",
    "actually",
    "pretty",
    "cool",
    "program",
    "wrote",
    "see",
    "know",
    "even",
    "never",
    "written",
    "line",
    "code",
    "able",
    "kind",
    "follow",
    "along",
    "type",
    "typing",
    "write",
    "first",
    "little",
    "program",
    "words",
    "something",
    "almost",
    "everyone",
    "world",
    "know",
    "never",
    "know",
    "brain",
    "probably",
    "utter",
    "confusion",
    "right",
    "worry",
    "next",
    "couple",
    "videos",
    "going",
    "actually",
    "deep",
    "diving",
    "javascript",
    "programming",
    "language",
    "going",
    "learning",
    "wrote",
    "program",
    "different",
    "symbols",
    "typing",
    "console",
    "kind",
    "good",
    "stuff",
    "worry",
    "completely",
    "confused",
    "video",
    "mainly",
    "give",
    "introduction",
    "developer",
    "tools",
    "within",
    "browser",
    "using",
    "firefox",
    "um",
    "gives",
    "introduction",
    "also",
    "exposure",
    "um",
    "comfort",
    "levels",
    "actually",
    "writing",
    "real",
    "javascript",
    "code",
    "first",
    "video",
    "sure",
    "hit",
    "subscribe",
    "button",
    "also",
    "little",
    "bell",
    "notified",
    "new",
    "videos",
    "posted",
    "series",
    "thanks",
    "watching",
    "today",
    "going",
    "talking",
    "javascript",
    "use",
    "let",
    "see",
    "wikipedia",
    "say",
    "know",
    "going",
    "simple",
    "javascript",
    "often",
    "abbreviated",
    "js",
    "programming",
    "language",
    "conforms",
    "think",
    "going",
    "stop",
    "right",
    "useful",
    "definition",
    "especially",
    "people",
    "watching",
    "remember",
    "javascript",
    "programming",
    "language",
    "specifically",
    "programming",
    "language",
    "made",
    "web",
    "languages",
    "like",
    "python",
    "php",
    "ruby",
    "um",
    "c",
    "different",
    "languages",
    "kind",
    "unique",
    "characteristics",
    "javascript",
    "unique",
    "characteristic",
    "unlike",
    "languages",
    "run",
    "web",
    "browser",
    "javascript",
    "ca",
    "case",
    "quite",
    "time",
    "recently",
    "see",
    "version",
    "web",
    "assembly",
    "released",
    "four",
    "different",
    "browsers",
    "let",
    "write",
    "programming",
    "languages",
    "run",
    "within",
    "browser",
    "think",
    "javascript",
    "programming",
    "language",
    "web",
    "easy",
    "write",
    "browser",
    "even",
    "web",
    "assembly",
    "lot",
    "complicated",
    "steps",
    "get",
    "set",
    "say",
    "javascript",
    "programming",
    "language",
    "web",
    "well",
    "answer",
    "asked",
    "question",
    "20",
    "years",
    "ago",
    "might",
    "laughed",
    "since",
    "time",
    "though",
    "javascript",
    "gained",
    "lot",
    "traction",
    "development",
    "communities",
    "used",
    "language",
    "stack",
    "overflow",
    "developer",
    "survey",
    "2020",
    "name",
    "things",
    "javascript",
    "let",
    "pull",
    "create",
    "web",
    "applications",
    "lots",
    "frameworks",
    "like",
    "angular",
    "also",
    "got",
    "react",
    "think",
    "popular",
    "one",
    "moment",
    "um",
    "backend",
    "uh",
    "pieces",
    "web",
    "application",
    "backend",
    "servers",
    "things",
    "like",
    "nestjs",
    "also",
    "create",
    "desktop",
    "applications",
    "pull",
    "visual",
    "studio",
    "code",
    "code",
    "editor",
    "actually",
    "desktop",
    "application",
    "built",
    "using",
    "tool",
    "called",
    "framework",
    "called",
    "electron",
    "build",
    "desktop",
    "applications",
    "various",
    "operating",
    "systems",
    "also",
    "create",
    "mobile",
    "apps",
    "react",
    "native",
    "native",
    "script",
    "finally",
    "ai",
    "machine",
    "learning",
    "data",
    "science",
    "projects",
    "couple",
    "libraries",
    "say",
    "javascript",
    "powerful",
    "language",
    "bit",
    "miss",
    "javascript",
    "many",
    "different",
    "applications",
    "next",
    "question",
    "might",
    "ask",
    "javascript",
    "get",
    "job",
    "answer",
    "resounding",
    "yes",
    "javascript",
    "alone",
    "going",
    "actually",
    "learn",
    "frameworks",
    "ones",
    "gone",
    "angular",
    "react",
    "nestjs",
    "electron",
    "react",
    "native",
    "frameworks",
    "um",
    "built",
    "around",
    "javascript",
    "get",
    "hired",
    "speaking",
    "frameworks",
    "javascript",
    "framework",
    "framework",
    "matter",
    "well",
    "way",
    "think",
    "framework",
    "something",
    "top",
    "programming",
    "language",
    "abstraction",
    "top",
    "javascript",
    "enables",
    "developer",
    "something",
    "efficiently",
    "less",
    "time",
    "facebook",
    "created",
    "largely",
    "framework",
    "framework",
    "called",
    "react",
    "popular",
    "framework",
    "went",
    "facebook",
    "could",
    "definitely",
    "built",
    "without",
    "framework",
    "could",
    "built",
    "javascript",
    "uh",
    "html",
    "c",
    "ss",
    "reason",
    "developers",
    "decided",
    "hey",
    "getting",
    "really",
    "repetitive",
    "certain",
    "things",
    "want",
    "kind",
    "automate",
    "therefore",
    "react",
    "born",
    "react",
    "something",
    "developers",
    "facebook",
    "kind",
    "created",
    "order",
    "make",
    "jobs",
    "easier",
    "efficient",
    "use",
    "little",
    "bit",
    "construction",
    "analogy",
    "think",
    "frameworks",
    "trying",
    "build",
    "commercial",
    "real",
    "estate",
    "building",
    "going",
    "use",
    "shovel",
    "ladder",
    "create",
    "whole",
    "entire",
    "building",
    "know",
    "drive",
    "materials",
    "back",
    "forth",
    "pickup",
    "trucks",
    "answer",
    "going",
    "get",
    "huge",
    "trucks",
    "going",
    "get",
    "bulldozers",
    "going",
    "get",
    "cranes",
    "going",
    "get",
    "sorts",
    "uh",
    "big",
    "materials",
    "order",
    "build",
    "huge",
    "building",
    "thing",
    "building",
    "web",
    "apps",
    "honestly",
    "anything",
    "would",
    "build",
    "code",
    "trying",
    "language",
    "anguage",
    "like",
    "javascript",
    "using",
    "popular",
    "frameworks",
    "built",
    "top",
    "basically",
    "showing",
    "construction",
    "site",
    "shovel",
    "pickup",
    "truck",
    "want",
    "order",
    "employable",
    "need",
    "understand",
    "use",
    "different",
    "frameworks",
    "like",
    "angular",
    "react",
    "even",
    "framework",
    "like",
    "electron",
    "uh",
    "enables",
    "write",
    "desktop",
    "applications",
    "like",
    "visual",
    "studio",
    "code",
    "right",
    "think",
    "enough",
    "frameworks",
    "could",
    "whole",
    "video",
    "let",
    "go",
    "next",
    "question",
    "javascript",
    "java",
    "least",
    "similar",
    "answer",
    "search",
    "enough",
    "internet",
    "probably",
    "stumble",
    "upon",
    "uh",
    "analogy",
    "car",
    "versus",
    "carpet",
    "car",
    "within",
    "word",
    "nothing",
    "alike",
    "kind",
    "story",
    "javascript",
    "java",
    "java",
    "actually",
    "inspiration",
    "javascript",
    "way",
    "back",
    "day",
    "javascript",
    "meant",
    "companion",
    "java",
    "similarity",
    "writing",
    "languages",
    "could",
    "different",
    "next",
    "question",
    "javascript",
    "better",
    "python",
    "honestly",
    "insert",
    "language",
    "answer",
    "always",
    "going",
    "depends",
    "reason",
    "say",
    "different",
    "languages",
    "choosing",
    "different",
    "unique",
    "use",
    "cases",
    "kind",
    "thing",
    "programming",
    "languages",
    "better",
    "certain",
    "types",
    "industries",
    "others",
    "asking",
    "build",
    "uh",
    "app",
    "like",
    "facebook",
    "probably",
    "going",
    "go",
    "javascript",
    "use",
    "javascript",
    "frameworks",
    "made",
    "made",
    "creating",
    "apps",
    "like",
    "facebook",
    "wanted",
    "machine",
    "learning",
    "know",
    "build",
    "computer",
    "sits",
    "tesla",
    "probably",
    "going",
    "use",
    "javascript",
    "probably",
    "going",
    "use",
    "python",
    "py",
    "pyon",
    "much",
    "uh",
    "mature",
    "ecosystem",
    "around",
    "topic",
    "machine",
    "learning",
    "ai",
    "data",
    "science",
    "kind",
    "stuff",
    "asking",
    "whether",
    "go",
    "javascript",
    "another",
    "language",
    "really",
    "depends",
    "kind",
    "industry",
    "getting",
    "trying",
    "build",
    "kind",
    "stuff",
    "trying",
    "build",
    "web",
    "app",
    "like",
    "facebook",
    "javascript",
    "great",
    "trying",
    "machine",
    "learning",
    "python",
    "great",
    "trying",
    "create",
    "extremely",
    "efficient",
    "uh",
    "say",
    "banking",
    "application",
    "something",
    "like",
    "language",
    "like",
    "much",
    "faster",
    "execution",
    "javascript",
    "would",
    "good",
    "choice",
    "right",
    "answer",
    "um",
    "different",
    "ecosystems",
    "around",
    "languages",
    "kind",
    "notice",
    "study",
    "certain",
    "types",
    "developers",
    "kind",
    "gravitate",
    "towards",
    "different",
    "languages",
    "another",
    "question",
    "might",
    "html",
    "css",
    "required",
    "work",
    "javascript",
    "answer",
    "yes",
    "kind",
    "depends",
    "actually",
    "running",
    "javascript",
    "let",
    "start",
    "front",
    "end",
    "little",
    "bit",
    "easier",
    "explain",
    "move",
    "back",
    "end",
    "know",
    "difference",
    "actually",
    "made",
    "video",
    "difference",
    "front",
    "end",
    "backend",
    "development",
    "anyways",
    "let",
    "go",
    "browser",
    "left",
    "side",
    "screen",
    "html",
    "file",
    "actually",
    "open",
    "notepad",
    "right",
    "fancy",
    "editors",
    "want",
    "get",
    "points",
    "across",
    "let",
    "create",
    "basic",
    "html",
    "document",
    "know",
    "actually",
    "gone",
    "works",
    "yet",
    "get",
    "promise",
    "point",
    "body",
    "html",
    "going",
    "create",
    "button",
    "says",
    "click",
    "refresh",
    "page",
    "see",
    "reflected",
    "web",
    "page",
    "see",
    "unstyled",
    "button",
    "click",
    "example",
    "web",
    "page",
    "different",
    "know",
    "homepage",
    "facebook",
    "except",
    "fact",
    "including",
    "css",
    "javascript",
    "html",
    "alone",
    "add",
    "css",
    "picture",
    "actually",
    "going",
    "able",
    "style",
    "uh",
    "add",
    "styles",
    "button",
    "let",
    "right",
    "add",
    "background",
    "color",
    "transparent",
    "want",
    "say",
    "um",
    "border",
    "going",
    "one",
    "pixel",
    "solid",
    "navy",
    "want",
    "add",
    "padding",
    "say",
    "20",
    "px",
    "want",
    "font",
    "size",
    "rem",
    "somewhere",
    "range",
    "let",
    "go",
    "ahead",
    "close",
    "bracket",
    "save",
    "refresh",
    "page",
    "see",
    "much",
    "better",
    "styled",
    "button",
    "also",
    "add",
    "hover",
    "styles",
    "let",
    "go",
    "say",
    "button",
    "hover",
    "want",
    "background",
    "color",
    "navy",
    "want",
    "um",
    "let",
    "see",
    "border",
    "uh",
    "none",
    "want",
    "color",
    "text",
    "white",
    "stands",
    "navy",
    "background",
    "save",
    "refresh",
    "see",
    "styled",
    "button",
    "uh",
    "changes",
    "styles",
    "hover",
    "power",
    "css",
    "click",
    "button",
    "click",
    "button",
    "going",
    "anything",
    "nothing",
    "static",
    "element",
    "page",
    "looks",
    "like",
    "changing",
    "looks",
    "like",
    "something",
    "done",
    "css",
    "html",
    "many",
    "web",
    "applications",
    "various",
    "buttons",
    "forms",
    "users",
    "click",
    "order",
    "things",
    "within",
    "app",
    "sure",
    "uh",
    "login",
    "page",
    "enter",
    "email",
    "password",
    "press",
    "log",
    "well",
    "actually",
    "triggered",
    "javascript",
    "need",
    "html",
    "preferably",
    "css",
    "want",
    "web",
    "app",
    "people",
    "going",
    "visually",
    "like",
    "need",
    "javascript",
    "actually",
    "react",
    "different",
    "um",
    "uh",
    "interactions",
    "page",
    "user",
    "html",
    "css",
    "login",
    "form",
    "going",
    "anything",
    "going",
    "useless",
    "app",
    "kind",
    "give",
    "idea",
    "mean",
    "obviously",
    "real",
    "real",
    "istic",
    "um",
    "added",
    "javascript",
    "html",
    "document",
    "also",
    "css",
    "see",
    "every",
    "time",
    "click",
    "button",
    "going",
    "add",
    "element",
    "page",
    "click",
    "see",
    "adding",
    "p",
    "tag",
    "text",
    "clicked",
    "button",
    "every",
    "time",
    "click",
    "demonstrate",
    "add",
    "javascript",
    "html",
    "css",
    "actually",
    "interact",
    "page",
    "rather",
    "looking",
    "static",
    "website",
    "well",
    "case",
    "add",
    "stupid",
    "text",
    "page",
    "see",
    "every",
    "time",
    "click",
    "button",
    "fire",
    "event",
    "maybe",
    "send",
    "login",
    "credentials",
    "backend",
    "server",
    "authenticate",
    "get",
    "response",
    "back",
    "redirect",
    "user",
    "different",
    "page",
    "site",
    "working",
    "java",
    "script",
    "front",
    "end",
    "browser",
    "html",
    "css",
    "pretty",
    "much",
    "required",
    "javascript",
    "run",
    "yes",
    "could",
    "run",
    "without",
    "would",
    "completely",
    "useless",
    "running",
    "console",
    "like",
    "previous",
    "lesson",
    "something",
    "actually",
    "interact",
    "back",
    "end",
    "since",
    "javascript",
    "backend",
    "language",
    "uh",
    "actually",
    "run",
    "javascript",
    "without",
    "html",
    "css",
    "extremely",
    "useful",
    "working",
    "javascript",
    "browser",
    "html",
    "css",
    "required",
    "make",
    "javascript",
    "anything",
    "useful",
    "ultimately",
    "javascript",
    "browser",
    "taking",
    "html",
    "elements",
    "modifying",
    "interacting",
    "backend",
    "data",
    "kind",
    "stuff",
    "html",
    "css",
    "required",
    "front",
    "end",
    "back",
    "end",
    "using",
    "runtime",
    "way",
    "run",
    "backend",
    "javascript",
    "need",
    "html",
    "css",
    "let",
    "write",
    "simple",
    "program",
    "demonstr",
    "need",
    "html",
    "css",
    "order",
    "covered",
    "series",
    "yet",
    "bear",
    "um",
    "need",
    "create",
    "sample",
    "js",
    "file",
    "open",
    "vim",
    "going",
    "allow",
    "us",
    "edit",
    "covered",
    "either",
    "uh",
    "make",
    "uh",
    "math",
    "function",
    "something",
    "like",
    "enter",
    "two",
    "values",
    "get",
    "know",
    "result",
    "let",
    "multiplication",
    "problem",
    "uh",
    "say",
    "return",
    "x",
    "close",
    "braces",
    "order",
    "actually",
    "run",
    "program",
    "going",
    "actually",
    "store",
    "result",
    "variable",
    "math",
    "say",
    "five",
    "80",
    "something",
    "like",
    "big",
    "enough",
    "ca",
    "necessarily",
    "head",
    "like",
    "87",
    "something",
    "going",
    "store",
    "result",
    "want",
    "print",
    "result",
    "console",
    "save",
    "quit",
    "clear",
    "console",
    "run",
    "sample",
    "js",
    "program",
    "see",
    "multiplication",
    "us",
    "obviously",
    "useless",
    "would",
    "ever",
    "simple",
    "function",
    "think",
    "back",
    "working",
    "front",
    "end",
    "clicked",
    "button",
    "let",
    "say",
    "register",
    "form",
    "add",
    "email",
    "password",
    "click",
    "button",
    "javascript",
    "front",
    "end",
    "going",
    "say",
    "okay",
    "button",
    "clicked",
    "need",
    "something",
    "going",
    "grab",
    "data",
    "email",
    "password",
    "going",
    "send",
    "backend",
    "server",
    "backend",
    "server",
    "going",
    "run",
    "nodejs",
    "know",
    "version",
    "javascript",
    "going",
    "say",
    "okay",
    "got",
    "email",
    "password",
    "let",
    "look",
    "email",
    "database",
    "uh",
    "hash",
    "password",
    "compareed",
    "hashed",
    "password",
    "one",
    "within",
    "database",
    "going",
    "send",
    "data",
    "back",
    "front",
    "end",
    "order",
    "tell",
    "whether",
    "user",
    "successfully",
    "authenticated",
    "see",
    "uh",
    "different",
    "uh",
    "sides",
    "javascript",
    "work",
    "different",
    "ways",
    "point",
    "need",
    "html",
    "css",
    "back",
    "end",
    "yes",
    "need",
    "front",
    "end",
    "last",
    "question",
    "going",
    "cover",
    "difference",
    "something",
    "like",
    "es5",
    "es",
    "javascript",
    "well",
    "actually",
    "organization",
    "called",
    "uh",
    "ecma",
    "international",
    "even",
    "sure",
    "said",
    "right",
    "standards",
    "organization",
    "order",
    "really",
    "visualize",
    "want",
    "go",
    "quick",
    "example",
    "something",
    "related",
    "javascript",
    "well",
    "entirely",
    "iso",
    "8601",
    "date",
    "standard",
    "going",
    "go",
    "example",
    "think",
    "everything",
    "else",
    "going",
    "make",
    "little",
    "bit",
    "sense",
    "open",
    "console",
    "like",
    "first",
    "lesson",
    "series",
    "run",
    "let",
    "save",
    "uh",
    "date",
    "date",
    "variable",
    "want",
    "print",
    "date",
    "iso",
    "string",
    "see",
    "uniquely",
    "formatted",
    "date",
    "looks",
    "standardized",
    "actually",
    "standardized",
    "know",
    "uh",
    "organization",
    "called",
    "iso",
    "think",
    "international",
    "standards",
    "organization",
    "actually",
    "organizations",
    "like",
    "across",
    "world",
    "various",
    "know",
    "different",
    "standardized",
    "things",
    "thing",
    "applies",
    "javascript",
    "ecma",
    "international",
    "ecmascript",
    "specification",
    "words",
    "might",
    "hear",
    "es5",
    "es6",
    "different",
    "versions",
    "spec",
    "originated",
    "javascript",
    "actually",
    "implement",
    "ation",
    "specification",
    "reason",
    "important",
    "browser",
    "compatibility",
    "among",
    "things",
    "go",
    "mdn",
    "uh",
    "web",
    "docs",
    "article",
    "see",
    "grid",
    "javascript",
    "apis",
    "supported",
    "within",
    "different",
    "browsers",
    "reason",
    "uh",
    "ecma",
    "standards",
    "important",
    "specification",
    "needs",
    "updated",
    "maintained",
    "one",
    "place",
    "different",
    "browser",
    "developers",
    "got",
    "different",
    "teams",
    "different",
    "browsers",
    "look",
    "specification",
    "implement",
    "browser",
    "knowing",
    "specifications",
    "going",
    "randomly",
    "change",
    "know",
    "say",
    "someone",
    "uh",
    "working",
    "javascript",
    "language",
    "decides",
    "want",
    "know",
    "new",
    "api",
    "feature",
    "remember",
    "javascript",
    "implementation",
    "es6",
    "es5",
    "uh",
    "whatever",
    "version",
    "working",
    "implementation",
    "specification",
    "right",
    "think",
    "first",
    "rapid",
    "fire",
    "uh",
    "q",
    "session",
    "rapid",
    "fire",
    "whatsoever",
    "last",
    "part",
    "video",
    "totally",
    "optional",
    "people",
    "really",
    "want",
    "uh",
    "learn",
    "ins",
    "outs",
    "web",
    "development",
    "want",
    "continue",
    "series",
    "going",
    "talking",
    "last",
    "part",
    "video",
    "question",
    "programming",
    "language",
    "talked",
    "javascript",
    "programming",
    "language",
    "kind",
    "unique",
    "cu",
    "run",
    "back",
    "end",
    "front",
    "end",
    "browser",
    "really",
    "cover",
    "programming",
    "language",
    "think",
    "important",
    "question",
    "ask",
    "going",
    "writing",
    "lot",
    "code",
    "probably",
    "understand",
    "happening",
    "behind",
    "scenes",
    "least",
    "high",
    "level",
    "last",
    "part",
    "going",
    "call",
    "programming",
    "language",
    "group",
    "tokens",
    "symbols",
    "combined",
    "together",
    "specific",
    "way",
    "uh",
    "translated",
    "something",
    "called",
    "compiler",
    "machine",
    "code",
    "ones",
    "zeros",
    "computers",
    "know",
    "run",
    "think",
    "like",
    "um",
    "let",
    "let",
    "take",
    "spoken",
    "language",
    "um",
    "something",
    "know",
    "pretty",
    "much",
    "every",
    "language",
    "except",
    "english",
    "um",
    "call",
    "know",
    "something",
    "like",
    "portuguese",
    "started",
    "speaking",
    "portuguese",
    "brain",
    "would",
    "able",
    "comprehend",
    "words",
    "symbols",
    "expressions",
    "actually",
    "mean",
    "semantically",
    "although",
    "ca",
    "understand",
    "portuguese",
    "understand",
    "body",
    "language",
    "someone",
    "speaking",
    "got",
    "someone",
    "speaking",
    "portuguese",
    "know",
    "sad",
    "demeanor",
    "understand",
    "generally",
    "saying",
    "happy",
    "thing",
    "thing",
    "computers",
    "well",
    "computer",
    "understand",
    "javascript",
    "understand",
    "python",
    "understand",
    "ca",
    "understand",
    "languages",
    "use",
    "something",
    "called",
    "compiler",
    "another",
    "program",
    "code",
    "actually",
    "reads",
    "code",
    "compiles",
    "ones",
    "zeros",
    "computer",
    "actually",
    "understand",
    "taking",
    "language",
    "compiling",
    "one",
    "zeros",
    "think",
    "body",
    "language",
    "computers",
    "understand",
    "ones",
    "zeros",
    "gets",
    "really",
    "complex",
    "going",
    "actually",
    "dive",
    "video",
    "um",
    "start",
    "talking",
    "compilers",
    "get",
    "topic",
    "operating",
    "system",
    "theory",
    "know",
    "target",
    "runtime",
    "dealing",
    "like",
    "actually",
    "executing",
    "ones",
    "zeros",
    "computer",
    "going",
    "slightly",
    "different",
    "cpu",
    "slightly",
    "different",
    "uh",
    "alu",
    "arithmetic",
    "logical",
    "unit",
    "things",
    "matter",
    "compiling",
    "code",
    "different",
    "language",
    "kind",
    "different",
    "operating",
    "system",
    "slightly",
    "different",
    "compilers",
    "tools",
    "mentioning",
    "order",
    "someone",
    "really",
    "wants",
    "understand",
    "great",
    "level",
    "detail",
    "something",
    "important",
    "recommend",
    "reading",
    "book",
    "right",
    "elements",
    "computing",
    "systems",
    "see",
    "within",
    "book",
    "know",
    "see",
    "show",
    "like",
    "little",
    "page",
    "actually",
    "get",
    "things",
    "like",
    "arithmetic",
    "logical",
    "unit",
    "ones",
    "zeros",
    "actually",
    "uh",
    "translated",
    "commands",
    "computer",
    "say",
    "going",
    "read",
    "book",
    "warn",
    "right",
    "going",
    "take",
    "months",
    "difficult",
    "get",
    "um",
    "said",
    "came",
    "learning",
    "ton",
    "really",
    "happy",
    "learned",
    "book",
    "trying",
    "get",
    "job",
    "quickly",
    "trying",
    "become",
    "employable",
    "fast",
    "possible",
    "read",
    "book",
    "going",
    "take",
    "long",
    "going",
    "distract",
    "actually",
    "writing",
    "web",
    "applications",
    "someone",
    "wants",
    "understand",
    "stuff",
    "time",
    "build",
    "computer",
    "scratch",
    "book",
    "uh",
    "recommend",
    "book",
    "called",
    "code",
    "charles",
    "petel",
    "going",
    "give",
    "information",
    "going",
    "teach",
    "ones",
    "zeros",
    "compiling",
    "kind",
    "stuff",
    "going",
    "little",
    "bit",
    "quicker",
    "going",
    "quite",
    "final",
    "question",
    "video",
    "javascript",
    "actually",
    "run",
    "answer",
    "similar",
    "question",
    "asked",
    "earlier",
    "um",
    "html",
    "css",
    "required",
    "run",
    "javascript",
    "said",
    "well",
    "depends",
    "whether",
    "running",
    "front",
    "end",
    "back",
    "end",
    "asking",
    "javascript",
    "run",
    "get",
    "topic",
    "something",
    "called",
    "runtime",
    "runtime",
    "basically",
    "uh",
    "environment",
    "code",
    "run",
    "gets",
    "topics",
    "talked",
    "compilers",
    "target",
    "different",
    "platforms",
    "compile",
    "ones",
    "zeros",
    "actually",
    "two",
    "run",
    "times",
    "javascript",
    "would",
    "runtime",
    "browser",
    "runtime",
    "uh",
    "believe",
    "browser",
    "run",
    "time",
    "within",
    "google",
    "chrome",
    "uses",
    "something",
    "called",
    "v8",
    "engine",
    "going",
    "actually",
    "compilation",
    "talking",
    "going",
    "get",
    "bunch",
    "stuff",
    "optimization",
    "um",
    "using",
    "time",
    "compilation",
    "method",
    "kind",
    "stuff",
    "going",
    "basically",
    "take",
    "javascript",
    "code",
    "convert",
    "something",
    "computer",
    "read",
    "kind",
    "backend",
    "version",
    "javascript",
    "runtime",
    "going",
    "use",
    "backend",
    "javascript",
    "servers",
    "stuff",
    "like",
    "also",
    "uses",
    "v8",
    "engine",
    "similar",
    "chrome",
    "kind",
    "guess",
    "creators",
    "nodejs",
    "creators",
    "v8",
    "engine",
    "runs",
    "chrome",
    "kind",
    "become",
    "good",
    "friends",
    "last",
    "couple",
    "years",
    "way",
    "run",
    "javascript",
    "know",
    "probably",
    "uh",
    "popular",
    "way",
    "run",
    "uh",
    "javascript",
    "back",
    "end",
    "google",
    "chrome",
    "one",
    "popular",
    "browsers",
    "course",
    "using",
    "firefox",
    "web",
    "browser",
    "think",
    "developer",
    "tools",
    "little",
    "bit",
    "better",
    "firefox",
    "actually",
    "using",
    "v8",
    "engine",
    "order",
    "compile",
    "javascript",
    "using",
    "something",
    "called",
    "spider",
    "monkey",
    "original",
    "engine",
    "javascript",
    "built",
    "within",
    "netscape",
    "browser",
    "uh",
    "way",
    "back",
    "day",
    "side",
    "note",
    "really",
    "want",
    "interesting",
    "podcast",
    "listen",
    "look",
    "browser",
    "wars",
    "think",
    "podcast",
    "called",
    "business",
    "wars",
    "really",
    "cool",
    "story",
    "netscape",
    "browsers",
    "gained",
    "market",
    "share",
    "really",
    "worth",
    "checking",
    "opinion",
    "summary",
    "javascript",
    "run",
    "back",
    "end",
    "front",
    "end",
    "run",
    "back",
    "end",
    "compiled",
    "using",
    "v8",
    "engine",
    "running",
    "front",
    "within",
    "google",
    "chrome",
    "also",
    "using",
    "v8",
    "running",
    "firefox",
    "using",
    "spider",
    "monkey",
    "running",
    "safari",
    "using",
    "uh",
    "compilation",
    "method",
    "ca",
    "think",
    "top",
    "head",
    "ultimately",
    "different",
    "run",
    "times",
    "aware",
    "know",
    "running",
    "javascript",
    "code",
    "going",
    "run",
    "differently",
    "things",
    "run",
    "within",
    "run",
    "time",
    "tried",
    "let",
    "say",
    "open",
    "uh",
    "nodejs",
    "runtime",
    "click",
    "uh",
    "type",
    "node",
    "bring",
    "console",
    "tried",
    "say",
    "document",
    "query",
    "selector",
    "grab",
    "body",
    "tag",
    "html",
    "press",
    "enter",
    "going",
    "say",
    "uncaught",
    "reference",
    "error",
    "document",
    "defined",
    "runtime",
    "document",
    "object",
    "model",
    "exist",
    "like",
    "browser",
    "aware",
    "different",
    "run",
    "times",
    "understand",
    "certain",
    "types",
    "code",
    "run",
    "um",
    "different",
    "run",
    "times",
    "javascript",
    "kind",
    "get",
    "saying",
    "point",
    "per",
    "usual",
    "uh",
    "dron",
    "way",
    "long",
    "longer",
    "ever",
    "thought",
    "would",
    "reached",
    "end",
    "second",
    "lesson",
    "full",
    "stack",
    "web",
    "developer",
    "roadmap",
    "series",
    "written",
    "javascript",
    "yet",
    "well",
    "guess",
    "first",
    "lesson",
    "actually",
    "learned",
    "javascript",
    "yet",
    "lot",
    "context",
    "around",
    "purpose",
    "video",
    "really",
    "wanted",
    "put",
    "video",
    "together",
    "order",
    "give",
    "context",
    "start",
    "getting",
    "details",
    "know",
    "variables",
    "data",
    "structures",
    "functions",
    "loops",
    "kind",
    "stuff",
    "little",
    "bit",
    "background",
    "uh",
    "understand",
    "liked",
    "video",
    "please",
    "give",
    "thumbs",
    "subscribe",
    "channel",
    "want",
    "follow",
    "along",
    "series",
    "series",
    "future",
    "hope",
    "enjoyed",
    "video",
    "see",
    "next",
    "music",
    "lesson",
    "video",
    "going",
    "talking",
    "javascript",
    "variables",
    "data",
    "types",
    "sure",
    "stick",
    "around",
    "till",
    "end",
    "video",
    "challenges",
    "practice",
    "questions",
    "use",
    "apply",
    "skills",
    "learned",
    "video",
    "start",
    "talking",
    "variables",
    "data",
    "types",
    "want",
    "want",
    "mention",
    "go",
    "series",
    "going",
    "covering",
    "everything",
    "know",
    "javascript",
    "programming",
    "language",
    "lot",
    "different",
    "features",
    "within",
    "javascript",
    "lot",
    "uh",
    "functions",
    "know",
    "syntax",
    "shortcuts",
    "sorts",
    "things",
    "like",
    "absolutely",
    "necessary",
    "write",
    "javascript",
    "code",
    "example",
    "let",
    "create",
    "basic",
    "array",
    "say",
    "array",
    "put",
    "numbers",
    "actually",
    "video",
    "worry",
    "understand",
    "quite",
    "yet",
    "javascript",
    "methods",
    "use",
    "array",
    "could",
    "say",
    "array",
    "push",
    "add",
    "number",
    "end",
    "array",
    "returned",
    "length",
    "new",
    "array",
    "print",
    "see",
    "number",
    "50",
    "end",
    "example",
    "le",
    "useful",
    "commonly",
    "used",
    "javascript",
    "uh",
    "prototype",
    "method",
    "going",
    "covering",
    "series",
    "methods",
    "lot",
    "example",
    "say",
    "array",
    "reverse",
    "one",
    "pretty",
    "simple",
    "reverses",
    "order",
    "items",
    "within",
    "array",
    "see",
    "critical",
    "learn",
    "write",
    "good",
    "javascript",
    "codee",
    "web",
    "developer",
    "going",
    "selectively",
    "exclude",
    "things",
    "like",
    "try",
    "focus",
    "important",
    "things",
    "javascript",
    "likewise",
    "also",
    "complex",
    "topics",
    "discuss",
    "around",
    "internals",
    "javascript",
    "works",
    "behind",
    "scenes",
    "prototypes",
    "work",
    "technically",
    "language",
    "things",
    "important",
    "understand",
    "later",
    "road",
    "trying",
    "get",
    "know",
    "zero",
    "deploying",
    "first",
    "full",
    "stack",
    "web",
    "application",
    "uh",
    "completely",
    "essential",
    "per",
    "se",
    "believe",
    "lot",
    "web",
    "developers",
    "work",
    "jobs",
    "employed",
    "getting",
    "paid",
    "lots",
    "money",
    "fully",
    "understand",
    "internals",
    "javascript",
    "series",
    "called",
    "know",
    "javascript",
    "written",
    "kyle",
    "simpson",
    "github",
    "username",
    "getify",
    "written",
    "wonderful",
    "series",
    "book",
    "series",
    "javascript",
    "works",
    "go",
    "series",
    "github",
    "actually",
    "read",
    "know",
    "javascript",
    "works",
    "hood",
    "tremendous",
    "understanding",
    "language",
    "explains",
    "great",
    "detail",
    "would",
    "say",
    "would",
    "use",
    "reference",
    "personally",
    "think",
    "geared",
    "towards",
    "someone",
    "written",
    "javascript",
    "amount",
    "time",
    "something",
    "reference",
    "back",
    "even",
    "writing",
    "jav",
    "javascript",
    "four",
    "plus",
    "years",
    "still",
    "great",
    "resource",
    "look",
    "back",
    "know",
    "go",
    "series",
    "going",
    "covering",
    "absolutely",
    "everything",
    "questions",
    "sure",
    "google",
    "go",
    "know",
    "javascript",
    "series",
    "uh",
    "pick",
    "section",
    "want",
    "learn",
    "kind",
    "read",
    "little",
    "bit",
    "finally",
    "get",
    "long",
    "intro",
    "finally",
    "get",
    "variables",
    "data",
    "types",
    "want",
    "show",
    "one",
    "thing",
    "real",
    "quick",
    "statement",
    "working",
    "within",
    "javascript",
    "console",
    "firefox",
    "dev",
    "tools",
    "print",
    "variable",
    "using",
    "statement",
    "built",
    "javascript",
    "use",
    "uh",
    "front",
    "end",
    "javascript",
    "console",
    "back",
    "end",
    "nodejs",
    "console",
    "print",
    "something",
    "like",
    "hello",
    "world",
    "done",
    "already",
    "previous",
    "video",
    "printing",
    "print",
    "different",
    "variables",
    "say",
    "first",
    "variable",
    "set",
    "equal",
    "20",
    "first",
    "variable",
    "see",
    "prints",
    "console",
    "going",
    "used",
    "heavily",
    "within",
    "series",
    "want",
    "familiar",
    "next",
    "thing",
    "concept",
    "comments",
    "put",
    "two",
    "forward",
    "slashes",
    "code",
    "write",
    "something",
    "obviously",
    "invalid",
    "javascript",
    "press",
    "enter",
    "going",
    "throw",
    "error",
    "type",
    "like",
    "going",
    "say",
    "reference",
    "err",
    "commented",
    "another",
    "way",
    "write",
    "comments",
    "let",
    "clear",
    "screen",
    "put",
    "forward",
    "slash",
    "star",
    "enter",
    "write",
    "whatever",
    "comments",
    "want",
    "close",
    "star",
    "forward",
    "slash",
    "press",
    "enter",
    "going",
    "yell",
    "us",
    "sort",
    "error",
    "written",
    "comment",
    "want",
    "wanted",
    "basically",
    "introduce",
    "concepts",
    "single",
    "line",
    "comment",
    "comment",
    "going",
    "see",
    "lot",
    "useful",
    "um",
    "know",
    "marking",
    "code",
    "remembering",
    "things",
    "code",
    "written",
    "big",
    "congrats",
    "still",
    "watching",
    "video",
    "means",
    "dedicated",
    "learning",
    "code",
    "reason",
    "let",
    "jump",
    "variables",
    "data",
    "types",
    "javascript",
    "think",
    "variable",
    "javascript",
    "think",
    "data",
    "container",
    "good",
    "analogy",
    "amazon",
    "warehouse",
    "got",
    "big",
    "vertical",
    "yellow",
    "uh",
    "stacks",
    "containers",
    "different",
    "products",
    "bottom",
    "little",
    "robots",
    "kind",
    "drive",
    "containers",
    "around",
    "according",
    "item",
    "items",
    "containers",
    "meant",
    "shipped",
    "like",
    "think",
    "analogy",
    "javascript",
    "variables",
    "similar",
    "amazon",
    "warehouse",
    "container",
    "registered",
    "robots",
    "know",
    "exactly",
    "find",
    "container",
    "products",
    "within",
    "container",
    "thing",
    "goes",
    "javascript",
    "variables",
    "computer",
    "knows",
    "exactly",
    "find",
    "javascript",
    "variables",
    "declare",
    "assign",
    "values",
    "able",
    "retrieve",
    "instantly",
    "think",
    "javascript",
    "variables",
    "know",
    "write",
    "basically",
    "like",
    "little",
    "amazon",
    "products",
    "get",
    "put",
    "containers",
    "put",
    "back",
    "warehouse",
    "computer",
    "times",
    "knows",
    "exactly",
    "go",
    "warehouse",
    "find",
    "values",
    "variables",
    "computer",
    "language",
    "would",
    "really",
    "call",
    "warehouse",
    "would",
    "call",
    "memory",
    "good",
    "analogy",
    "go",
    "think",
    "help",
    "remember",
    "variables",
    "like",
    "amazon",
    "containers",
    "various",
    "types",
    "products",
    "stored",
    "within",
    "javascript",
    "variables",
    "look",
    "going",
    "go",
    "couple",
    "examples",
    "variables",
    "first",
    "one",
    "say",
    "first",
    "variable",
    "say",
    "learning",
    "code",
    "gives",
    "superpowers",
    "something",
    "like",
    "would",
    "one",
    "example",
    "variable",
    "actually",
    "string",
    "variable",
    "go",
    "little",
    "bit",
    "later",
    "second",
    "variable",
    "equal",
    "number",
    "time",
    "equal",
    "10",
    "finally",
    "say",
    "third",
    "variable",
    "equal",
    "object",
    "say",
    "object",
    "property",
    "says",
    "something",
    "like",
    "hello",
    "world",
    "also",
    "valid",
    "variable",
    "print",
    "variables",
    "use",
    "statement",
    "print",
    "first",
    "variable",
    "something",
    "like",
    "see",
    "printed",
    "console",
    "examples",
    "writing",
    "variables",
    "want",
    "go",
    "component",
    "statements",
    "see",
    "keyword",
    "called",
    "const",
    "little",
    "space",
    "seems",
    "variable",
    "name",
    "equal",
    "sign",
    "sort",
    "data",
    "semicolon",
    "end",
    "really",
    "critical",
    "parts",
    "writing",
    "uh",
    "javascript",
    "variables",
    "compiler",
    "goes",
    "basically",
    "interpret",
    "um",
    "code",
    "written",
    "reads",
    "specific",
    "order",
    "looks",
    "every",
    "single",
    "uh",
    "call",
    "token",
    "within",
    "code",
    "example",
    "tried",
    "define",
    "new",
    "variable",
    "time",
    "say",
    "another",
    "hello",
    "world",
    "something",
    "like",
    "would",
    "valid",
    "took",
    "even",
    "single",
    "little",
    "quotation",
    "pressed",
    "enter",
    "going",
    "give",
    "us",
    "syntax",
    "error",
    "going",
    "get",
    "lot",
    "syntax",
    "errors",
    "first",
    "start",
    "basically",
    "say",
    "hey",
    "written",
    "javascript",
    "program",
    "correctly",
    "missed",
    "specific",
    "token",
    "within",
    "code",
    "lot",
    "times",
    "actually",
    "worry",
    "syntax",
    "errors",
    "pulled",
    "visual",
    "studio",
    "code",
    "code",
    "editor",
    "going",
    "work",
    "little",
    "bit",
    "later",
    "series",
    "yet",
    "want",
    "show",
    "tried",
    "say",
    "new",
    "variable",
    "define",
    "hello",
    "world",
    "semicolon",
    "end",
    "going",
    "look",
    "fine",
    "go",
    "delete",
    "little",
    "uh",
    "quotation",
    "going",
    "see",
    "visual",
    "studio",
    "code",
    "picks",
    "fact",
    "air",
    "syntax",
    "lot",
    "times",
    "writing",
    "code",
    "going",
    "see",
    "know",
    "console",
    "using",
    "right",
    "get",
    "code",
    "editors",
    "going",
    "point",
    "things",
    "really",
    "worry",
    "much",
    "getting",
    "everything",
    "right",
    "um",
    "writing",
    "code",
    "next",
    "thing",
    "talk",
    "javascript",
    "variables",
    "concept",
    "declaration",
    "assignment",
    "properly",
    "use",
    "variable",
    "uh",
    "sequence",
    "steps",
    "order",
    "first",
    "declare",
    "variable",
    "assign",
    "value",
    "typed",
    "know",
    "something",
    "like",
    "new",
    "variable",
    "going",
    "actually",
    "refresh",
    "page",
    "clear",
    "uh",
    "variables",
    "already",
    "written",
    "say",
    "new",
    "variable",
    "something",
    "like",
    "say",
    "hello",
    "world",
    "going",
    "declare",
    "also",
    "assign",
    "variable",
    "time",
    "many",
    "cases",
    "simultaneously",
    "also",
    "break",
    "individual",
    "steps",
    "using",
    "let",
    "keyword",
    "say",
    "uh",
    "let",
    "another",
    "variable",
    "equal",
    "say",
    "20",
    "time",
    "um",
    "actually",
    "need",
    "put",
    "semicolon",
    "end",
    "actually",
    "declared",
    "variable",
    "assign",
    "value",
    "put",
    "let",
    "keyword",
    "beginning",
    "assign",
    "value",
    "print",
    "console",
    "saying",
    "another",
    "variable",
    "see",
    "equals",
    "20",
    "second",
    "example",
    "declared",
    "assigned",
    "important",
    "understand",
    "concept",
    "necessarily",
    "know",
    "think",
    "coding",
    "wanted",
    "point",
    "brings",
    "another",
    "good",
    "point",
    "const",
    "versus",
    "let",
    "versus",
    "var",
    "keywords",
    "beginning",
    "variable",
    "expressions",
    "let",
    "go",
    "ahead",
    "write",
    "uh",
    "variable",
    "per",
    "se",
    "three",
    "different",
    "ways",
    "first",
    "say",
    "variable",
    "1",
    "equal",
    "10",
    "using",
    "con",
    "keyword",
    "say",
    "let",
    "variable",
    "say",
    "two",
    "time",
    "equals",
    "10",
    "valid",
    "say",
    "var",
    "variable",
    "three",
    "ca",
    "type",
    "equals",
    "10",
    "see",
    "three",
    "ways",
    "writing",
    "javascript",
    "variable",
    "valid",
    "might",
    "ask",
    "question",
    "well",
    "decide",
    "const",
    "let",
    "var",
    "need",
    "one",
    "least",
    "uh",
    "create",
    "variable",
    "tried",
    "say",
    "um",
    "know",
    "random",
    "random",
    "keyword",
    "variable",
    "4",
    "equals",
    "10",
    "going",
    "give",
    "us",
    "error",
    "random",
    "assigned",
    "keyword",
    "conet",
    "var",
    "let",
    "go",
    "ahead",
    "start",
    "var",
    "keyword",
    "would",
    "recommend",
    "using",
    "kind",
    "legacy",
    "keyword",
    "within",
    "javascript",
    "um",
    "something",
    "existed",
    "old",
    "versions",
    "standards",
    "javascript",
    "nowadays",
    "constant",
    "let",
    "keywords",
    "pretty",
    "much",
    "cover",
    "every",
    "situation",
    "need",
    "reason",
    "var",
    "used",
    "anymore",
    "uh",
    "redeclared",
    "say",
    "uh",
    "var",
    "variable",
    "equals",
    "10",
    "say",
    "var",
    "variable",
    "equals",
    "sorry",
    "ca",
    "type",
    "today",
    "equals",
    "20",
    "going",
    "actually",
    "update",
    "value",
    "variable",
    "without",
    "yelling",
    "use",
    "key",
    "word",
    "like",
    "const",
    "say",
    "another",
    "variable",
    "equals",
    "10",
    "say",
    "const",
    "another",
    "variable",
    "equals",
    "20",
    "going",
    "say",
    "syntax",
    "error",
    "going",
    "yell",
    "us",
    "redeclaring",
    "constant",
    "variable",
    "var",
    "keyword",
    "able",
    "redeclare",
    "variable",
    "seems",
    "con",
    "convenient",
    "actually",
    "working",
    "within",
    "console",
    "actually",
    "writing",
    "code",
    "kind",
    "dangerous",
    "unwanted",
    "side",
    "effects",
    "able",
    "redeclare",
    "variable",
    "next",
    "key",
    "word",
    "want",
    "talk",
    "let",
    "let",
    "something",
    "use",
    "whenever",
    "expect",
    "reassign",
    "variable",
    "point",
    "code",
    "kind",
    "talked",
    "redeclaring",
    "variable",
    "different",
    "reassigning",
    "variable",
    "remember",
    "first",
    "declare",
    "variable",
    "basically",
    "saying",
    "um",
    "go",
    "back",
    "amazon",
    "analogy",
    "talking",
    "know",
    "containers",
    "robots",
    "remember",
    "containers",
    "warehouse",
    "well",
    "computer",
    "first",
    "register",
    "declare",
    "variables",
    "declared",
    "kind",
    "allocates",
    "memory",
    "space",
    "um",
    "hard",
    "drive",
    "something",
    "like",
    "ram",
    "basically",
    "remember",
    "retrieve",
    "variable",
    "declaration",
    "step",
    "assignment",
    "step",
    "take",
    "actual",
    "value",
    "say",
    "okay",
    "put",
    "put",
    "value",
    "variable",
    "computer",
    "go",
    "find",
    "variable",
    "declared",
    "memory",
    "assign",
    "new",
    "value",
    "know",
    "little",
    "memory",
    "slot",
    "always",
    "use",
    "let",
    "expect",
    "reassign",
    "variable",
    "let",
    "show",
    "uh",
    "basically",
    "looks",
    "like",
    "let",
    "say",
    "counter",
    "start",
    "counter",
    "zero",
    "want",
    "actually",
    "increase",
    "value",
    "counter",
    "say",
    "counter",
    "equals",
    "counter",
    "1",
    "also",
    "say",
    "counter",
    "thing",
    "previous",
    "line",
    "wrote",
    "equal",
    "uh",
    "two",
    "see",
    "equal",
    "two",
    "see",
    "reassigning",
    "value",
    "variable",
    "multiple",
    "times",
    "tried",
    "uh",
    "let",
    "refresh",
    "page",
    "real",
    "quick",
    "use",
    "variable",
    "tried",
    "say",
    "counter",
    "equals",
    "zero",
    "const",
    "keyword",
    "tried",
    "say",
    "going",
    "say",
    "type",
    "error",
    "ca",
    "assign",
    "reassign",
    "value",
    "constant",
    "variable",
    "want",
    "use",
    "constants",
    "uh",
    "basically",
    "expect",
    "value",
    "never",
    "change",
    "good",
    "example",
    "say",
    "program",
    "calculates",
    "sort",
    "uh",
    "know",
    "income",
    "statement",
    "want",
    "put",
    "tax",
    "rate",
    "individual",
    "might",
    "program",
    "something",
    "like",
    "tax",
    "rate",
    "equal",
    "8",
    "press",
    "enter",
    "constant",
    "variable",
    "never",
    "going",
    "change",
    "tax",
    "rate",
    "never",
    "going",
    "change",
    "best",
    "use",
    "case",
    "constant",
    "variable",
    "remember",
    "use",
    "let",
    "expect",
    "value",
    "reassigned",
    "variable",
    "use",
    "const",
    "um",
    "expect",
    "variable",
    "never",
    "change",
    "values",
    "concept",
    "constant",
    "pretty",
    "universal",
    "programming",
    "spans",
    "across",
    "many",
    "languages",
    "often",
    "times",
    "see",
    "constants",
    "written",
    "something",
    "like",
    "say",
    "tax",
    "rate",
    "equals",
    "0",
    "8",
    "see",
    "variable",
    "written",
    "caps",
    "separated",
    "underscore",
    "see",
    "often",
    "semantic",
    "difference",
    "functionally",
    "written",
    "actually",
    "leads",
    "us",
    "next",
    "discussion",
    "variable",
    "naming",
    "conventions",
    "going",
    "paste",
    "couple",
    "different",
    "versions",
    "variables",
    "press",
    "enter",
    "see",
    "actually",
    "valid",
    "javascript",
    "written",
    "slightly",
    "differently",
    "functionally",
    "kind",
    "saying",
    "first",
    "variable",
    "javascript",
    "recognizes",
    "different",
    "variables",
    "allowed",
    "declare",
    "functionally",
    "operate",
    "couple",
    "preferable",
    "javascript",
    "programming",
    "language",
    "others",
    "example",
    "first",
    "variable",
    "written",
    "something",
    "called",
    "camel",
    "case",
    "basically",
    "first",
    "letter",
    "variable",
    "lowercase",
    "successive",
    "word",
    "logical",
    "separated",
    "word",
    "within",
    "variable",
    "going",
    "capitalized",
    "called",
    "camel",
    "case",
    "another",
    "version",
    "called",
    "pascal",
    "case",
    "um",
    "basically",
    "thing",
    "camel",
    "case",
    "except",
    "first",
    "letter",
    "capitalized",
    "second",
    "variable",
    "underscores",
    "lowercase",
    "letters",
    "called",
    "snake",
    "case",
    "one",
    "right",
    "talked",
    "called",
    "constant",
    "case",
    "finally",
    "totally",
    "lowercase",
    "variable",
    "different",
    "semantic",
    "styles",
    "put",
    "javascript",
    "variable",
    "programming",
    "language",
    "variable",
    "often",
    "times",
    "indicate",
    "programmers",
    "something",
    "code",
    "talk",
    "mean",
    "second",
    "first",
    "want",
    "talk",
    "makes",
    "valid",
    "really",
    "think",
    "variable",
    "javascript",
    "uh",
    "kind",
    "like",
    "twitter",
    "hashtag",
    "write",
    "twitter",
    "hashtag",
    "say",
    "full",
    "stack",
    "road",
    "map",
    "one",
    "series",
    "would",
    "valid",
    "twitter",
    "hashtag",
    "one",
    "word",
    "put",
    "space",
    "end",
    "twitter",
    "going",
    "recognize",
    "first",
    "part",
    "full",
    "stack",
    "going",
    "treat",
    "road",
    "map",
    "normal",
    "text",
    "exactly",
    "javascript",
    "works",
    "variables",
    "tried",
    "define",
    "variable",
    "let",
    "say",
    "const",
    "full",
    "stack",
    "road",
    "map",
    "equals",
    "10",
    "going",
    "give",
    "us",
    "syntax",
    "error",
    "space",
    "uh",
    "two",
    "words",
    "valid",
    "javascript",
    "variable",
    "put",
    "everything",
    "one",
    "word",
    "use",
    "one",
    "conventions",
    "top",
    "also",
    "things",
    "ca",
    "something",
    "like",
    "say",
    "full",
    "stack",
    "equals",
    "10",
    "ca",
    "little",
    "quotes",
    "um",
    "going",
    "work",
    "also",
    "start",
    "variable",
    "number",
    "see",
    "put",
    "one",
    "beginning",
    "variable",
    "going",
    "throw",
    "air",
    "put",
    "full",
    "stack",
    "one",
    "end",
    "number",
    "end",
    "variable",
    "works",
    "fine",
    "things",
    "watch",
    "fairly",
    "intuitive",
    "get",
    "hang",
    "uh",
    "really",
    "quickly",
    "get",
    "hang",
    "javascript",
    "debugger",
    "going",
    "yell",
    "basically",
    "going",
    "give",
    "bunch",
    "syntax",
    "errors",
    "right",
    "know",
    "validly",
    "declare",
    "assign",
    "variable",
    "um",
    "let",
    "talk",
    "something",
    "called",
    "style",
    "guide",
    "goes",
    "back",
    "concept",
    "see",
    "different",
    "semantic",
    "ways",
    "write",
    "variable",
    "work",
    "preferable",
    "others",
    "depend",
    "depending",
    "language",
    "writing",
    "trying",
    "individual",
    "variable",
    "declaring",
    "type",
    "javascript",
    "style",
    "guide",
    "google",
    "find",
    "couple",
    "different",
    "style",
    "guides",
    "different",
    "companies",
    "google",
    "javascript",
    "style",
    "guide",
    "would",
    "airbnb",
    "javascript",
    "style",
    "guide",
    "basically",
    "specifications",
    "employees",
    "different",
    "companies",
    "says",
    "want",
    "write",
    "javascript",
    "company",
    "might",
    "entail",
    "different",
    "naming",
    "conventions",
    "different",
    "um",
    "use",
    "cases",
    "different",
    "javascript",
    "features",
    "um",
    "kind",
    "stuff",
    "plethora",
    "things",
    "find",
    "within",
    "style",
    "guides",
    "one",
    "want",
    "look",
    "naming",
    "conventions",
    "find",
    "within",
    "uh",
    "style",
    "guides",
    "kind",
    "look",
    "real",
    "quick",
    "naming",
    "google",
    "naming",
    "style",
    "guide",
    "google",
    "airbnb",
    "see",
    "um",
    "recommend",
    "camel",
    "case",
    "see",
    "uh",
    "package",
    "names",
    "need",
    "lower",
    "camel",
    "case",
    "uh",
    "class",
    "names",
    "upper",
    "camel",
    "case",
    "let",
    "go",
    "um",
    "uh",
    "normal",
    "variables",
    "field",
    "names",
    "lower",
    "camel",
    "case",
    "um",
    "local",
    "variables",
    "lower",
    "camel",
    "case",
    "kind",
    "get",
    "point",
    "pointing",
    "towards",
    "lower",
    "camel",
    "case",
    "um",
    "convention",
    "go",
    "airbnb",
    "see",
    "says",
    "use",
    "camel",
    "case",
    "naming",
    "objects",
    "functions",
    "instances",
    "bad",
    "example",
    "would",
    "good",
    "example",
    "see",
    "within",
    "two",
    "different",
    "companies",
    "recommending",
    "camel",
    "case",
    "actually",
    "recommendation",
    "across",
    "javascript",
    "community",
    "see",
    "lot",
    "javascript",
    "code",
    "written",
    "camel",
    "case",
    "saw",
    "first",
    "variable",
    "would",
    "recommend",
    "starting",
    "learn",
    "write",
    "javascript",
    "last",
    "thing",
    "want",
    "talk",
    "naming",
    "conventions",
    "variables",
    "actually",
    "naming",
    "see",
    "descriptive",
    "um",
    "clearly",
    "indicating",
    "programmer",
    "practicing",
    "writing",
    "first",
    "variable",
    "also",
    "going",
    "programs",
    "going",
    "multiple",
    "variables",
    "within",
    "single",
    "function",
    "class",
    "need",
    "identify",
    "different",
    "variables",
    "tell",
    "would",
    "appropriate",
    "way",
    "name",
    "variable",
    "said",
    "q",
    "equals",
    "20",
    "well",
    "answer",
    "going",
    "ever",
    "know",
    "q",
    "supposed",
    "represent",
    "maybe",
    "rep",
    "represents",
    "counter",
    "loop",
    "uh",
    "maybe",
    "represents",
    "uh",
    "know",
    "tax",
    "rate",
    "something",
    "know",
    "whatever",
    "means",
    "need",
    "uh",
    "name",
    "variable",
    "accordingly",
    "20",
    "represents",
    "20",
    "tax",
    "rate",
    "something",
    "like",
    "need",
    "call",
    "tax",
    "rate",
    "net",
    "income",
    "something",
    "like",
    "clearly",
    "specifying",
    "value",
    "represents",
    "also",
    "case",
    "get",
    "two",
    "complex",
    "write",
    "variable",
    "way",
    "long",
    "case",
    "gets",
    "hard",
    "write",
    "code",
    "constantly",
    "type",
    "super",
    "long",
    "variable",
    "takes",
    "longer",
    "want",
    "find",
    "middle",
    "ground",
    "vague",
    "saying",
    "variable",
    "name",
    "q",
    "specific",
    "ca",
    "know",
    "write",
    "variable",
    "within",
    "10",
    "seconds",
    "next",
    "thing",
    "talk",
    "left",
    "side",
    "variable",
    "expression",
    "right",
    "side",
    "variable",
    "expression",
    "let",
    "write",
    "first",
    "variable",
    "javascript",
    "gives",
    "superpowers",
    "something",
    "like",
    "press",
    "enter",
    "let",
    "take",
    "look",
    "left",
    "side",
    "say",
    "left",
    "side",
    "talking",
    "everything",
    "left",
    "little",
    "equal",
    "sign",
    "middle",
    "say",
    "right",
    "side",
    "talking",
    "everything",
    "right",
    "little",
    "equal",
    "sign",
    "middle",
    "important",
    "make",
    "distinction",
    "left",
    "right",
    "uh",
    "depending",
    "putting",
    "side",
    "going",
    "get",
    "different",
    "behaviors",
    "left",
    "side",
    "equal",
    "sign",
    "always",
    "going",
    "include",
    "two",
    "things",
    "going",
    "include",
    "either",
    "const",
    "let",
    "could",
    "use",
    "var",
    "recommend",
    "going",
    "single",
    "space",
    "right",
    "going",
    "properly",
    "constructed",
    "variable",
    "name",
    "always",
    "use",
    "another",
    "space",
    "uh",
    "good",
    "code",
    "formatting",
    "equal",
    "sign",
    "everything",
    "left",
    "equal",
    "sign",
    "considered",
    "target",
    "container",
    "trying",
    "put",
    "sort",
    "data",
    "value",
    "storing",
    "container",
    "right",
    "side",
    "equal",
    "sign",
    "actual",
    "value",
    "assigning",
    "right",
    "side",
    "could",
    "one",
    "many",
    "different",
    "things",
    "get",
    "concept",
    "data",
    "types",
    "case",
    "string",
    "right",
    "side",
    "equal",
    "sign",
    "followed",
    "semicolon",
    "indicate",
    "end",
    "uh",
    "variable",
    "expression",
    "want",
    "touch",
    "real",
    "quick",
    "let",
    "say",
    "uh",
    "one",
    "variable",
    "equals",
    "20",
    "const",
    "second",
    "variable",
    "equals",
    "30",
    "would",
    "valid",
    "expression",
    "wrote",
    "line",
    "ended",
    "statement",
    "semicolon",
    "pull",
    "press",
    "arrow",
    "key",
    "get",
    "last",
    "statement",
    "console",
    "quick",
    "short",
    "cut",
    "take",
    "semicolon",
    "let",
    "go",
    "ahead",
    "know",
    "rename",
    "variables",
    "actually",
    "experiment",
    "around",
    "one",
    "second",
    "press",
    "enter",
    "going",
    "yell",
    "us",
    "semicolon",
    "end",
    "first",
    "variable",
    "declaration",
    "semicolon",
    "important",
    "kind",
    "indicates",
    "end",
    "expression",
    "example",
    "bunch",
    "code",
    "wrote",
    "demonstrating",
    "multiple",
    "different",
    "things",
    "right",
    "side",
    "expression",
    "see",
    "line",
    "basic",
    "variable",
    "declarations",
    "right",
    "side",
    "anything",
    "number",
    "another",
    "variable",
    "string",
    "object",
    "immediately",
    "invoked",
    "function",
    "combination",
    "sorry",
    "keeps",
    "disappearing",
    "combination",
    "addition",
    "variables",
    "variable",
    "six",
    "going",
    "see",
    "hello",
    "name",
    "zach",
    "basically",
    "taking",
    "value",
    "derived",
    "variable",
    "five",
    "returning",
    "us",
    "hello",
    "name",
    "adding",
    "variable",
    "three",
    "zach",
    "see",
    "lot",
    "different",
    "options",
    "right",
    "side",
    "always",
    "going",
    "equal",
    "value",
    "could",
    "uh",
    "come",
    "function",
    "specific",
    "data",
    "type",
    "come",
    "lot",
    "things",
    "assigned",
    "target",
    "container",
    "left",
    "side",
    "equal",
    "sign",
    "right",
    "let",
    "go",
    "little",
    "bit",
    "simpler",
    "going",
    "paste",
    "three",
    "variables",
    "first",
    "one",
    "number",
    "second",
    "string",
    "third",
    "boolean",
    "let",
    "talk",
    "different",
    "data",
    "types",
    "little",
    "bit",
    "couple",
    "different",
    "data",
    "types",
    "javascript",
    "three",
    "common",
    "sitting",
    "screen",
    "right",
    "kind",
    "prim",
    "primitive",
    "data",
    "types",
    "might",
    "notice",
    "declared",
    "assigned",
    "variables",
    "really",
    "mention",
    "data",
    "type",
    "specifying",
    "lot",
    "languages",
    "c",
    "java",
    "actually",
    "require",
    "specify",
    "type",
    "data",
    "assigning",
    "variable",
    "um",
    "another",
    "example",
    "would",
    "typescript",
    "actually",
    "suet",
    "javascript",
    "might",
    "talk",
    "little",
    "bit",
    "later",
    "series",
    "basically",
    "language",
    "compiles",
    "actually",
    "transpiled",
    "javascript",
    "allows",
    "type",
    "uh",
    "checking",
    "static",
    "typing",
    "would",
    "declare",
    "variable",
    "within",
    "typescript",
    "would",
    "say",
    "variable",
    "one",
    "equals",
    "number",
    "equal",
    "10",
    "declaration",
    "assignment",
    "saying",
    "okay",
    "variable",
    "one",
    "number",
    "value",
    "number",
    "assigned",
    "would",
    "call",
    "statically",
    "typed",
    "language",
    "say",
    "statically",
    "typed",
    "mean",
    "fact",
    "uh",
    "run",
    "code",
    "telling",
    "compiler",
    "types",
    "data",
    "expect",
    "javascript",
    "would",
    "call",
    "dynamically",
    "typed",
    "language",
    "see",
    "variable",
    "one",
    "compiler",
    "going",
    "clue",
    "type",
    "variable",
    "actually",
    "eval",
    "valuates",
    "uh",
    "assignment",
    "value",
    "given",
    "figures",
    "type",
    "actually",
    "see",
    "type",
    "variable",
    "typed",
    "variable",
    "one",
    "using",
    "type",
    "function",
    "um",
    "also",
    "say",
    "variable",
    "two",
    "variable",
    "three",
    "see",
    "different",
    "types",
    "variables",
    "might",
    "say",
    "well",
    "javascript",
    "dynamically",
    "typed",
    "really",
    "need",
    "specify",
    "data",
    "type",
    "assigning",
    "variable",
    "even",
    "care",
    "well",
    "exactly",
    "reason",
    "care",
    "writing",
    "code",
    "like",
    "assigning",
    "sorts",
    "different",
    "values",
    "uh",
    "variables",
    "really",
    "important",
    "always",
    "recognize",
    "types",
    "values",
    "assigning",
    "variables",
    "know",
    "try",
    "something",
    "like",
    "say",
    "variable",
    "one",
    "plus",
    "variable",
    "2",
    "say",
    "10",
    "value",
    "clearly",
    "something",
    "happened",
    "tried",
    "add",
    "number",
    "string",
    "together",
    "javascript",
    "magically",
    "coerced",
    "um",
    "first",
    "variable",
    "number",
    "string",
    "combined",
    "c",
    "concatenated",
    "strings",
    "together",
    "single",
    "string",
    "without",
    "understanding",
    "different",
    "uh",
    "data",
    "types",
    "assigning",
    "variables",
    "things",
    "like",
    "going",
    "get",
    "confusing",
    "might",
    "try",
    "add",
    "things",
    "together",
    "combined",
    "uh",
    "variables",
    "together",
    "know",
    "combining",
    "way",
    "right",
    "actually",
    "called",
    "implicit",
    "coercion",
    "variable",
    "type",
    "going",
    "talk",
    "quite",
    "yet",
    "basically",
    "happening",
    "taking",
    "variable",
    "one",
    "type",
    "number",
    "variable",
    "two",
    "type",
    "string",
    "saying",
    "want",
    "coers",
    "number",
    "string",
    "combine",
    "values",
    "together",
    "variable",
    "number",
    "one",
    "equal",
    "equal",
    "10",
    "string",
    "say",
    "number",
    "2",
    "equals",
    "20",
    "number",
    "said",
    "type",
    "number",
    "one",
    "going",
    "give",
    "us",
    "string",
    "type",
    "number",
    "two",
    "going",
    "number",
    "actually",
    "explicitly",
    "rather",
    "implicitly",
    "coers",
    "two",
    "uh",
    "variables",
    "together",
    "implicitly",
    "say",
    "number",
    "one",
    "plus",
    "number",
    "two",
    "going",
    "give",
    "us",
    "1020",
    "uh",
    "basically",
    "coerced",
    "number",
    "20",
    "string",
    "concatenated",
    "together",
    "uh",
    "first",
    "string",
    "10",
    "wanted",
    "add",
    "two",
    "together",
    "numbers",
    "use",
    "math",
    "function",
    "uh",
    "math",
    "sorry",
    "number",
    "function",
    "put",
    "number",
    "one",
    "string",
    "number",
    "add",
    "number",
    "two",
    "already",
    "number",
    "going",
    "give",
    "correct",
    "answer",
    "um",
    "30",
    "addition",
    "two",
    "numbers",
    "see",
    "paying",
    "attention",
    "types",
    "data",
    "working",
    "might",
    "unexpected",
    "results",
    "saw",
    "right",
    "added",
    "string",
    "number",
    "together",
    "right",
    "talked",
    "importance",
    "data",
    "type",
    "let",
    "go",
    "get",
    "overview",
    "look",
    "like",
    "let",
    "clear",
    "first",
    "one",
    "going",
    "string",
    "value",
    "actually",
    "two",
    "ways",
    "declare",
    "string",
    "value",
    "first",
    "say",
    "something",
    "like",
    "hello",
    "world",
    "single",
    "quotations",
    "would",
    "valid",
    "also",
    "say",
    "another",
    "string",
    "value",
    "specify",
    "double",
    "quotations",
    "hello",
    "world",
    "going",
    "work",
    "better",
    "know",
    "way",
    "would",
    "say",
    "like",
    "use",
    "lower",
    "camel",
    "case",
    "uh",
    "writing",
    "javascript",
    "variables",
    "convention",
    "within",
    "industry",
    "generally",
    "going",
    "converge",
    "single",
    "quotes",
    "lot",
    "uh",
    "code",
    "linters",
    "actually",
    "um",
    "code",
    "linter",
    "something",
    "take",
    "big",
    "style",
    "guide",
    "like",
    "ones",
    "looked",
    "actually",
    "write",
    "rules",
    "code",
    "typing",
    "code",
    "within",
    "code",
    "editor",
    "like",
    "visual",
    "studio",
    "code",
    "take",
    "rules",
    "apply",
    "code",
    "writing",
    "writing",
    "lot",
    "code",
    "linters",
    "going",
    "specify",
    "want",
    "code",
    "written",
    "single",
    "quotes",
    "rather",
    "double",
    "quotes",
    "um",
    "also",
    "write",
    "string",
    "moving",
    "numbers",
    "little",
    "bit",
    "easier",
    "say",
    "uh",
    "let",
    "say",
    "number",
    "value",
    "variable",
    "specify",
    "number",
    "nothing",
    "nothing",
    "one",
    "thing",
    "might",
    "mess",
    "point",
    "let",
    "make",
    "different",
    "variable",
    "might",
    "try",
    "add",
    "comma",
    "specify",
    "larger",
    "number",
    "press",
    "enter",
    "going",
    "give",
    "syntax",
    "error",
    "valid",
    "way",
    "write",
    "number",
    "always",
    "write",
    "number",
    "one",
    "big",
    "number",
    "commas",
    "anything",
    "put",
    "booleans",
    "also",
    "pretty",
    "simple",
    "want",
    "write",
    "boolean",
    "uh",
    "boolean",
    "value",
    "going",
    "either",
    "equal",
    "true",
    "going",
    "equal",
    "false",
    "pretty",
    "simple",
    "two",
    "possible",
    "values",
    "put",
    "um",
    "booleans",
    "next",
    "one",
    "arrays",
    "start",
    "get",
    "little",
    "bit",
    "complex",
    "data",
    "types",
    "let",
    "clear",
    "screen",
    "work",
    "real",
    "quick",
    "wanted",
    "say",
    "first",
    "array",
    "want",
    "put",
    "numbers",
    "see",
    "array",
    "specified",
    "opening",
    "closing",
    "brackets",
    "values",
    "separated",
    "commas",
    "think",
    "array",
    "know",
    "computer",
    "science",
    "uh",
    "people",
    "would",
    "yell",
    "saying",
    "think",
    "array",
    "basically",
    "list",
    "list",
    "uh",
    "separated",
    "commas",
    "within",
    "list",
    "actually",
    "put",
    "data",
    "type",
    "want",
    "numbers",
    "first",
    "array",
    "could",
    "also",
    "put",
    "variety",
    "data",
    "types",
    "put",
    "number",
    "uh",
    "string",
    "put",
    "object",
    "going",
    "get",
    "second",
    "also",
    "put",
    "another",
    "array",
    "put",
    "another",
    "array",
    "within",
    "array",
    "val",
    "things",
    "put",
    "array",
    "kind",
    "mix",
    "together",
    "probably",
    "wo",
    "often",
    "mixing",
    "data",
    "types",
    "wanted",
    "uh",
    "say",
    "part",
    "javascript",
    "dynamically",
    "typed",
    "language",
    "feature",
    "important",
    "thing",
    "understand",
    "arrays",
    "indexed",
    "say",
    "index",
    "values",
    "uh",
    "separated",
    "commas",
    "uh",
    "identified",
    "single",
    "index",
    "indexes",
    "start",
    "zero",
    "start",
    "one",
    "would",
    "think",
    "first",
    "array",
    "might",
    "say",
    "oh",
    "value",
    "10",
    "represented",
    "index",
    "one",
    "well",
    "case",
    "represented",
    "index",
    "zero",
    "count",
    "order",
    "uh",
    "10",
    "would",
    "represented",
    "zero",
    "20",
    "would",
    "represented",
    "1",
    "30",
    "2",
    "40",
    "3",
    "retrieve",
    "values",
    "array",
    "um",
    "saying",
    "first",
    "array",
    "type",
    "array",
    "variable",
    "use",
    "brackets",
    "like",
    "uh",
    "write",
    "time",
    "pass",
    "index",
    "wanted",
    "grab",
    "uh",
    "value",
    "10",
    "first",
    "array",
    "type",
    "zeroth",
    "index",
    "press",
    "enter",
    "going",
    "give",
    "us",
    "value",
    "array",
    "also",
    "retrieve",
    "uh",
    "values",
    "say",
    "second",
    "array",
    "let",
    "say",
    "wanted",
    "uh",
    "get",
    "last",
    "value",
    "actually",
    "another",
    "array",
    "could",
    "say",
    "uh",
    "second",
    "array",
    "use",
    "brackets",
    "count",
    "zero",
    "one",
    "two",
    "would",
    "third",
    "say",
    "three",
    "going",
    "give",
    "us",
    "array",
    "even",
    "tack",
    "another",
    "set",
    "brackets",
    "say",
    "want",
    "third",
    "actually",
    "second",
    "value",
    "sorry",
    "misspeaking",
    "totally",
    "want",
    "fourth",
    "value",
    "array",
    "using",
    "index",
    "three",
    "let",
    "say",
    "want",
    "zeroth",
    "value",
    "value",
    "one",
    "array",
    "grabbed",
    "see",
    "grab",
    "uh",
    "values",
    "nested",
    "arrays",
    "important",
    "thing",
    "know",
    "arrays",
    "pay",
    "attention",
    "indexes",
    "use",
    "bracket",
    "notation",
    "retrieve",
    "values",
    "respective",
    "indexes",
    "next",
    "thing",
    "talk",
    "objects",
    "javascript",
    "important",
    "important",
    "might",
    "even",
    "hear",
    "phrase",
    "everything",
    "object",
    "javascript",
    "um",
    "true",
    "want",
    "get",
    "subtleties",
    "today",
    "important",
    "nonetheless",
    "learn",
    "objects",
    "work",
    "javascript",
    "going",
    "using",
    "every",
    "single",
    "program",
    "ever",
    "write",
    "understand",
    "objects",
    "think",
    "complex",
    "container",
    "going",
    "back",
    "amazon",
    "analogy",
    "carts",
    "different",
    "containers",
    "within",
    "containers",
    "uh",
    "let",
    "say",
    "containers",
    "amazon",
    "products",
    "let",
    "say",
    "sort",
    "jewelry",
    "product",
    "um",
    "sold",
    "amazon",
    "might",
    "big",
    "container",
    "might",
    "30",
    "different",
    "little",
    "containers",
    "within",
    "big",
    "container",
    "within",
    "uh",
    "30",
    "little",
    "containers",
    "uh",
    "different",
    "pieces",
    "jewelry",
    "kind",
    "javascript",
    "object",
    "make",
    "infinitely",
    "complex",
    "infinitely",
    "nested",
    "um",
    "much",
    "let",
    "jump",
    "see",
    "basic",
    "object",
    "looks",
    "like",
    "say",
    "uh",
    "object",
    "variable",
    "indicated",
    "little",
    "curly",
    "braces",
    "um",
    "enclose",
    "object",
    "within",
    "object",
    "give",
    "properties",
    "properties",
    "written",
    "like",
    "javascript",
    "variable",
    "kind",
    "think",
    "variables",
    "contained",
    "within",
    "object",
    "might",
    "say",
    "prop",
    "one",
    "use",
    "little",
    "colon",
    "say",
    "okay",
    "variable",
    "want",
    "assign",
    "following",
    "value",
    "say",
    "want",
    "assign",
    "uh",
    "number",
    "20",
    "create",
    "another",
    "property",
    "put",
    "comma",
    "first",
    "property",
    "sort",
    "kind",
    "like",
    "array",
    "um",
    "bunch",
    "different",
    "values",
    "separated",
    "commas",
    "case",
    "kind",
    "think",
    "key",
    "value",
    "pair",
    "key",
    "would",
    "prop",
    "one",
    "variable",
    "value",
    "right",
    "side",
    "colon",
    "want",
    "say",
    "prop",
    "two",
    "want",
    "set",
    "50",
    "like",
    "put",
    "semicolon",
    "end",
    "press",
    "enter",
    "object",
    "variable",
    "prop",
    "one",
    "prop",
    "two",
    "access",
    "prop",
    "properties",
    "within",
    "object",
    "use",
    "something",
    "called",
    "dot",
    "notation",
    "unlike",
    "array",
    "would",
    "say",
    "object",
    "variable",
    "put",
    "little",
    "brackets",
    "say",
    "uh",
    "zero",
    "something",
    "like",
    "ca",
    "going",
    "work",
    "said",
    "object",
    "variable",
    "prop",
    "one",
    "like",
    "going",
    "get",
    "value",
    "20",
    "access",
    "properties",
    "using",
    "notation",
    "infinitely",
    "nested",
    "let",
    "construct",
    "object",
    "right",
    "um",
    "say",
    "nested",
    "object",
    "equal",
    "uh",
    "say",
    "layer",
    "one",
    "layer",
    "two",
    "making",
    "bunch",
    "objects",
    "nested",
    "within",
    "say",
    "target",
    "value",
    "20",
    "target",
    "value",
    "simply",
    "property",
    "nested",
    "within",
    "uh",
    "several",
    "properties",
    "within",
    "object",
    "press",
    "enter",
    "get",
    "value",
    "say",
    "nested",
    "object",
    "layer",
    "layer",
    "layer",
    "three",
    "target",
    "value",
    "get",
    "value",
    "20",
    "see",
    "dot",
    "notation",
    "allows",
    "basically",
    "grab",
    "values",
    "properties",
    "uh",
    "object",
    "notice",
    "using",
    "dot",
    "notation",
    "specifying",
    "property",
    "could",
    "also",
    "um",
    "going",
    "back",
    "object",
    "variable",
    "right",
    "also",
    "like",
    "said",
    "ca",
    "use",
    "zero",
    "use",
    "bracket",
    "notation",
    "define",
    "property",
    "want",
    "grab",
    "uh",
    "bracket",
    "notation",
    "another",
    "way",
    "retrieve",
    "value",
    "object",
    "um",
    "prefer",
    "dot",
    "notation",
    "usually",
    "cases",
    "might",
    "need",
    "maybe",
    "know",
    "name",
    "property",
    "know",
    "name",
    "property",
    "property",
    "one",
    "instead",
    "explicitly",
    "writing",
    "uh",
    "property",
    "string",
    "might",
    "store",
    "another",
    "variable",
    "pass",
    "um",
    "property",
    "value",
    "variable",
    "object",
    "um",
    "want",
    "get",
    "far",
    "going",
    "little",
    "bit",
    "rabbit",
    "hole",
    "may",
    "need",
    "certain",
    "situations",
    "last",
    "thing",
    "talk",
    "functions",
    "really",
    "going",
    "talk",
    "much",
    "want",
    "say",
    "functions",
    "valid",
    "uh",
    "things",
    "assign",
    "variable",
    "goes",
    "back",
    "concept",
    "everything",
    "object",
    "javascript",
    "let",
    "show",
    "brief",
    "example",
    "uh",
    "say",
    "uh",
    "function",
    "container",
    "variable",
    "descriptive",
    "write",
    "function",
    "like",
    "um",
    "function",
    "maybe",
    "return",
    "value",
    "20",
    "storing",
    "function",
    "variable",
    "actually",
    "uh",
    "call",
    "function",
    "like",
    "get",
    "value",
    "20",
    "returned",
    "learned",
    "functions",
    "work",
    "return",
    "values",
    "stuff",
    "worry",
    "wanted",
    "show",
    "variable",
    "actually",
    "assign",
    "function",
    "variable",
    "valid",
    "uh",
    "thing",
    "put",
    "right",
    "side",
    "equal",
    "side",
    "right",
    "still",
    "huge",
    "congrats",
    "probably",
    "one",
    "people",
    "uh",
    "patience",
    "sit",
    "video",
    "mine",
    "uh",
    "goes",
    "sometimes",
    "excruciating",
    "detail",
    "things",
    "thank",
    "watching",
    "um",
    "want",
    "go",
    "quick",
    "summary",
    "learned",
    "offer",
    "exercises",
    "um",
    "use",
    "actually",
    "practice",
    "concepts",
    "learned",
    "video",
    "summarize",
    "using",
    "variables",
    "first",
    "declare",
    "ass",
    "assign",
    "value",
    "often",
    "done",
    "line",
    "code",
    "step",
    "um",
    "using",
    "different",
    "keywords",
    "let",
    "const",
    "var",
    "uh",
    "probably",
    "never",
    "want",
    "use",
    "var",
    "use",
    "let",
    "want",
    "reassign",
    "value",
    "variable",
    "use",
    "const",
    "expect",
    "value",
    "variable",
    "change",
    "within",
    "program",
    "next",
    "left",
    "side",
    "equal",
    "represents",
    "variable",
    "hold",
    "value",
    "assigning",
    "kind",
    "target",
    "data",
    "um",
    "right",
    "side",
    "represents",
    "actual",
    "value",
    "many",
    "ways",
    "write",
    "javascript",
    "variable",
    "camel",
    "case",
    "preferred",
    "way",
    "see",
    "often",
    "javascript",
    "community",
    "five",
    "main",
    "types",
    "variables",
    "strings",
    "numbers",
    "booleans",
    "arrays",
    "objects",
    "functions",
    "talked",
    "kind",
    "fall",
    "object",
    "data",
    "type",
    "final",
    "thing",
    "semicolon",
    "represents",
    "end",
    "javascript",
    "expression",
    "always",
    "put",
    "end",
    "except",
    "using",
    "object",
    "case",
    "enter",
    "multiple",
    "lines",
    "actually",
    "use",
    "commas",
    "separate",
    "different",
    "object",
    "properties",
    "summary",
    "let",
    "move",
    "challenges",
    "practice",
    "video",
    "like",
    "said",
    "going",
    "able",
    "watch",
    "videos",
    "learn",
    "code",
    "actually",
    "apply",
    "end",
    "video",
    "want",
    "least",
    "give",
    "challenges",
    "work",
    "apply",
    "knowledge",
    "going",
    "put",
    "challenges",
    "screen",
    "seconds",
    "go",
    "ahead",
    "work",
    "console",
    "within",
    "firefox",
    "dev",
    "tools",
    "talked",
    "previous",
    "uh",
    "lesson",
    "use",
    "answers",
    "going",
    "github",
    "account",
    "link",
    "description",
    "see",
    "got",
    "right",
    "right",
    "challenges",
    "today",
    "good",
    "luck",
    "see",
    "next",
    "video",
    "music",
    "today",
    "going",
    "talking",
    "javascript",
    "operators",
    "sure",
    "stick",
    "around",
    "till",
    "end",
    "handful",
    "challenges",
    "try",
    "solve",
    "practice",
    "skills",
    "learn",
    "video",
    "talk",
    "javascript",
    "operators",
    "want",
    "little",
    "review",
    "talked",
    "previous",
    "video",
    "javascript",
    "variables",
    "data",
    "types",
    "going",
    "actually",
    "come",
    "play",
    "video",
    "rightclick",
    "anywhere",
    "firefox",
    "web",
    "browser",
    "click",
    "inspect",
    "element",
    "uh",
    "let",
    "make",
    "little",
    "bit",
    "larger",
    "us",
    "see",
    "go",
    "console",
    "going",
    "get",
    "repple",
    "think",
    "stands",
    "read",
    "evaluate",
    "print",
    "loop",
    "basically",
    "allows",
    "execute",
    "javascript",
    "uh",
    "without",
    "setting",
    "anything",
    "going",
    "using",
    "uh",
    "code",
    "lesson",
    "also",
    "review",
    "last",
    "time",
    "last",
    "time",
    "talked",
    "javascript",
    "variables",
    "way",
    "declare",
    "assign",
    "variable",
    "one",
    "three",
    "ways",
    "say",
    "uh",
    "const",
    "space",
    "variable",
    "name",
    "going",
    "call",
    "give",
    "sort",
    "value",
    "valid",
    "way",
    "define",
    "variable",
    "also",
    "let",
    "equal",
    "20",
    "could",
    "ca",
    "use",
    "actually",
    "already",
    "declared",
    "const",
    "need",
    "something",
    "like",
    "b",
    "also",
    "use",
    "var",
    "recommend",
    "using",
    "kind",
    "outdated",
    "legacy",
    "feature",
    "javascript",
    "nevertheless",
    "still",
    "works",
    "still",
    "declare",
    "assign",
    "variable",
    "way",
    "also",
    "talked",
    "reassign",
    "um",
    "something",
    "assigned",
    "cons",
    "wanted",
    "say",
    "value",
    "change",
    "variable",
    "name",
    "set",
    "equal",
    "20",
    "try",
    "say",
    "value",
    "change",
    "equals",
    "30",
    "going",
    "give",
    "error",
    "assigned",
    "const",
    "say",
    "instead",
    "const",
    "say",
    "let",
    "value",
    "change",
    "equals",
    "20",
    "come",
    "say",
    "value",
    "change",
    "equals",
    "30",
    "lets",
    "difference",
    "const",
    "let",
    "use",
    "bar",
    "kind",
    "legacy",
    "uh",
    "keyword",
    "javascript",
    "also",
    "talked",
    "different",
    "data",
    "types",
    "use",
    "use",
    "const",
    "keyword",
    "variables",
    "say",
    "string",
    "equals",
    "hello",
    "world",
    "define",
    "string",
    "value",
    "represented",
    "little",
    "uh",
    "quotations",
    "single",
    "quotations",
    "declare",
    "variable",
    "also",
    "pressed",
    "arrow",
    "keyboard",
    "get",
    "last",
    "command",
    "typed",
    "kind",
    "circle",
    "commands",
    "uh",
    "typed",
    "along",
    "way",
    "um",
    "anyways",
    "declare",
    "string",
    "say",
    "second",
    "string",
    "uh",
    "basically",
    "different",
    "variable",
    "use",
    "double",
    "quotes",
    "thing",
    "functionally",
    "equivalent",
    "style",
    "guides",
    "would",
    "recommend",
    "use",
    "single",
    "quotes",
    "others",
    "would",
    "recommend",
    "double",
    "quotes",
    "really",
    "matter",
    "got",
    "pick",
    "one",
    "define",
    "string",
    "wanted",
    "define",
    "number",
    "number",
    "give",
    "number",
    "pretty",
    "easy",
    "also",
    "booleans",
    "going",
    "either",
    "true",
    "going",
    "false",
    "pretty",
    "easy",
    "two",
    "answers",
    "possibly",
    "finally",
    "arrays",
    "objects",
    "let",
    "clear",
    "space",
    "start",
    "array",
    "fill",
    "pretty",
    "much",
    "anything",
    "numbers",
    "right",
    "first",
    "array",
    "maybe",
    "say",
    "second",
    "array",
    "uh",
    "something",
    "like",
    "string",
    "one",
    "string",
    "two",
    "remember",
    "access",
    "properties",
    "arrays",
    "using",
    "bracket",
    "notation",
    "look",
    "index",
    "um",
    "would",
    "zeroeth",
    "index",
    "first",
    "index",
    "second",
    "third",
    "use",
    "identify",
    "different",
    "objects",
    "different",
    "uh",
    "values",
    "within",
    "array",
    "finally",
    "objects",
    "going",
    "little",
    "bit",
    "complex",
    "kind",
    "cornerstone",
    "javascript",
    "um",
    "say",
    "property",
    "one",
    "equals",
    "value",
    "string",
    "value",
    "access",
    "saying",
    "using",
    "dot",
    "notation",
    "say",
    "object",
    "dot",
    "property",
    "one",
    "going",
    "give",
    "us",
    "value",
    "also",
    "objects",
    "use",
    "bracket",
    "notation",
    "pass",
    "string",
    "version",
    "property",
    "still",
    "give",
    "us",
    "value",
    "quick",
    "review",
    "view",
    "javascript",
    "variables",
    "uh",
    "work",
    "different",
    "data",
    "types",
    "going",
    "take",
    "concepts",
    "extend",
    "little",
    "bit",
    "talking",
    "javascript",
    "operators",
    "first",
    "thing",
    "got",
    "basically",
    "resolve",
    "operator",
    "well",
    "operator",
    "something",
    "exists",
    "coding",
    "languages",
    "javascript",
    "one",
    "working",
    "see",
    "operators",
    "anything",
    "javascript",
    "python",
    "uh",
    "know",
    "java",
    "c",
    "different",
    "languages",
    "concept",
    "operators",
    "really",
    "great",
    "way",
    "explain",
    "without",
    "jumping",
    "basically",
    "summarize",
    "operator",
    "something",
    "allows",
    "either",
    "compare",
    "two",
    "values",
    "two",
    "values",
    "um",
    "modify",
    "values",
    "modify",
    "variables",
    "know",
    "combine",
    "together",
    "allows",
    "flexibility",
    "kind",
    "test",
    "uh",
    "different",
    "equalities",
    "different",
    "variables",
    "know",
    "kind",
    "tough",
    "explanation",
    "let",
    "jump",
    "see",
    "mean",
    "four",
    "main",
    "types",
    "operators",
    "looking",
    "arithmetic",
    "assignment",
    "comparison",
    "logical",
    "operators",
    "see",
    "kind",
    "fit",
    "second",
    "jump",
    "start",
    "easiest",
    "ones",
    "would",
    "arithmetic",
    "operators",
    "would",
    "plus",
    "uh",
    "minus",
    "addition",
    "subtraction",
    "multiplication",
    "division",
    "see",
    "works",
    "pretty",
    "easy",
    "easy",
    "series",
    "numbers",
    "remember",
    "using",
    "javascript",
    "console",
    "basically",
    "reads",
    "value",
    "javascript",
    "expression",
    "prints",
    "back",
    "us",
    "start",
    "writing",
    "code",
    "files",
    "later",
    "series",
    "going",
    "able",
    "um",
    "like",
    "let",
    "say",
    "random",
    "variable",
    "equals",
    "20",
    "see",
    "type",
    "random",
    "variable",
    "press",
    "enter",
    "going",
    "evaluate",
    "uh",
    "variable",
    "actually",
    "stored",
    "actually",
    "use",
    "statement",
    "uh",
    "looking",
    "prior",
    "videos",
    "know",
    "definitely",
    "going",
    "print",
    "20",
    "type",
    "variable",
    "going",
    "useful",
    "looking",
    "operators",
    "javascript",
    "console",
    "take",
    "numbers",
    "like",
    "say",
    "20",
    "50",
    "equal",
    "70",
    "shows",
    "evaluates",
    "plus",
    "sign",
    "middle",
    "considered",
    "javascript",
    "operator",
    "already",
    "start",
    "see",
    "uh",
    "operators",
    "actually",
    "represent",
    "also",
    "something",
    "like",
    "50",
    "minus",
    "20",
    "trying",
    "space",
    "us",
    "say",
    "50",
    "20",
    "30",
    "also",
    "division",
    "20",
    "2",
    "10",
    "um",
    "well",
    "multiplication",
    "2",
    "2",
    "going",
    "equal",
    "4",
    "call",
    "operators",
    "plus",
    "operator",
    "subtraction",
    "operator",
    "division",
    "multiplication",
    "basic",
    "arithmetic",
    "operators",
    "point",
    "might",
    "wondering",
    "well",
    "never",
    "seen",
    "uh",
    "syntax",
    "written",
    "well",
    "actually",
    "valid",
    "javascript",
    "code",
    "um",
    "works",
    "console",
    "tried",
    "write",
    "file",
    "going",
    "work",
    "well",
    "generally",
    "going",
    "operations",
    "assigning",
    "value",
    "actual",
    "variable",
    "let",
    "say",
    "want",
    "result",
    "variable",
    "want",
    "say",
    "20",
    "50",
    "2",
    "something",
    "like",
    "save",
    "print",
    "result",
    "going",
    "45",
    "20",
    "50",
    "going",
    "70",
    "2",
    "45",
    "stores",
    "within",
    "uh",
    "result",
    "variable",
    "call",
    "right",
    "side",
    "going",
    "back",
    "prior",
    "lesson",
    "talked",
    "little",
    "bit",
    "left",
    "side",
    "equal",
    "sign",
    "right",
    "side",
    "equal",
    "sign",
    "um",
    "equal",
    "sign",
    "right",
    "got",
    "left",
    "right",
    "everything",
    "right",
    "side",
    "going",
    "calling",
    "javascript",
    "expression",
    "using",
    "different",
    "values",
    "along",
    "operators",
    "create",
    "sort",
    "expression",
    "going",
    "evaluated",
    "full",
    "evaluated",
    "going",
    "take",
    "single",
    "value",
    "um",
    "came",
    "assign",
    "variable",
    "left",
    "side",
    "equal",
    "sign",
    "actually",
    "couple",
    "arithmetic",
    "operators",
    "well",
    "use",
    "something",
    "called",
    "modulus",
    "operator",
    "let",
    "100",
    "little",
    "percent",
    "sign",
    "say",
    "50",
    "going",
    "equal",
    "zero",
    "basically",
    "division",
    "problem",
    "100",
    "50",
    "figuring",
    "remainder",
    "division",
    "problem",
    "case",
    "50",
    "factor",
    "100",
    "goes",
    "100",
    "two",
    "times",
    "remainders",
    "going",
    "get",
    "zero",
    "said",
    "100",
    "modulus",
    "know",
    "77",
    "well",
    "going",
    "get",
    "23",
    "77",
    "goes",
    "100",
    "one",
    "time",
    "remainder",
    "23",
    "may",
    "seem",
    "useful",
    "right",
    "promise",
    "going",
    "times",
    "coding",
    "modulus",
    "op",
    "operator",
    "come",
    "handy",
    "moving",
    "also",
    "exponent",
    "operator",
    "wanted",
    "say",
    "know",
    "8",
    "power",
    "two",
    "generally",
    "would",
    "see",
    "written",
    "like",
    "well",
    "actually",
    "exponent",
    "operator",
    "looks",
    "like",
    "would",
    "put",
    "two",
    "stars",
    "say",
    "8",
    "two",
    "going",
    "equal",
    "64",
    "8",
    "8",
    "64",
    "use",
    "exponentiation",
    "operator",
    "two",
    "little",
    "stars",
    "remember",
    "multiplication",
    "going",
    "one",
    "star",
    "8",
    "2",
    "16",
    "8",
    "double",
    "star",
    "2",
    "8",
    "power",
    "two",
    "exponent",
    "operator",
    "finally",
    "couple",
    "operators",
    "going",
    "kind",
    "fit",
    "um",
    "schema",
    "looking",
    "far",
    "going",
    "little",
    "bit",
    "confusing",
    "try",
    "explain",
    "best",
    "uh",
    "one",
    "going",
    "increment",
    "operator",
    "next",
    "decrement",
    "operator",
    "let",
    "say",
    "variable",
    "going",
    "intentionally",
    "mess",
    "one",
    "let",
    "say",
    "starting",
    "number",
    "equal",
    "zero",
    "notice",
    "used",
    "used",
    "const",
    "um",
    "keyword",
    "reassign",
    "value",
    "operator",
    "trying",
    "use",
    "called",
    "increment",
    "operator",
    "way",
    "works",
    "take",
    "iable",
    "value",
    "put",
    "two",
    "plus",
    "signs",
    "end",
    "press",
    "enter",
    "going",
    "see",
    "invalid",
    "const",
    "declaration",
    "value",
    "change",
    "wanted",
    "declare",
    "let",
    "operator",
    "say",
    "start",
    "number",
    "different",
    "uh",
    "actually",
    "let",
    "clear",
    "whole",
    "screen",
    "clear",
    "say",
    "let",
    "starting",
    "number",
    "equal",
    "0",
    "value",
    "reassigned",
    "say",
    "starting",
    "number",
    "press",
    "enter",
    "going",
    "say",
    "zero",
    "actual",
    "value",
    "starting",
    "number",
    "variable",
    "actually",
    "equal",
    "one",
    "see",
    "printing",
    "increment",
    "operator",
    "print",
    "starting",
    "number",
    "going",
    "get",
    "two",
    "see",
    "adding",
    "one",
    "variable",
    "actually",
    "equivalent",
    "saying",
    "starting",
    "number",
    "equals",
    "starting",
    "number",
    "one",
    "take",
    "previous",
    "value",
    "add",
    "one",
    "press",
    "enter",
    "going",
    "see",
    "starting",
    "number",
    "equal",
    "three",
    "also",
    "decrement",
    "operator",
    "say",
    "starting",
    "number",
    "uh",
    "actually",
    "let",
    "clear",
    "screen",
    "real",
    "quick",
    "say",
    "starting",
    "number",
    "currently",
    "three",
    "put",
    "two",
    "little",
    "minus",
    "signs",
    "end",
    "going",
    "equal",
    "two",
    "couple",
    "minuses",
    "equal",
    "one",
    "might",
    "say",
    "well",
    "useful",
    "many",
    "cases",
    "going",
    "loops",
    "going",
    "talk",
    "future",
    "video",
    "going",
    "come",
    "handy",
    "made",
    "arithmetic",
    "operators",
    "move",
    "something",
    "called",
    "assignment",
    "operator",
    "believe",
    "actually",
    "already",
    "covered",
    "write",
    "variable",
    "variable",
    "equals",
    "20",
    "actually",
    "using",
    "operator",
    "already",
    "equal",
    "sign",
    "talked",
    "much",
    "actually",
    "assignment",
    "operator",
    "believe",
    "assignment",
    "operator",
    "ever",
    "going",
    "need",
    "although",
    "ever",
    "need",
    "um",
    "pretty",
    "much",
    "forever",
    "want",
    "show",
    "assignment",
    "operators",
    "use",
    "know",
    "required",
    "quite",
    "honestly",
    "even",
    "use",
    "lot",
    "pr",
    "programmers",
    "coding",
    "20",
    "30",
    "years",
    "never",
    "use",
    "educational",
    "purposes",
    "honestly",
    "would",
    "recommend",
    "writing",
    "code",
    "long",
    "form",
    "going",
    "show",
    "mean",
    "second",
    "let",
    "say",
    "value",
    "assign",
    "variable",
    "equal",
    "10",
    "notice",
    "use",
    "let",
    "keyword",
    "reassign",
    "variable",
    "wanted",
    "add",
    "five",
    "well",
    "would",
    "pretty",
    "simple",
    "would",
    "say",
    "x",
    "equals",
    "want",
    "take",
    "previous",
    "value",
    "x",
    "currently",
    "equal",
    "10",
    "add",
    "using",
    "addition",
    "operator",
    "five",
    "end",
    "expression",
    "press",
    "enter",
    "x",
    "equal",
    "15",
    "well",
    "actually",
    "shorter",
    "way",
    "write",
    "use",
    "different",
    "assignment",
    "operator",
    "way",
    "would",
    "let",
    "start",
    "going",
    "refresh",
    "page",
    "clear",
    "nonsense",
    "let",
    "say",
    "variable",
    "equal",
    "10",
    "well",
    "also",
    "write",
    "like",
    "say",
    "plus",
    "equal",
    "5",
    "press",
    "enter",
    "actually",
    "going",
    "reassign",
    "variable",
    "x",
    "10",
    "15",
    "add",
    "five",
    "see",
    "print",
    "x",
    "equal",
    "15",
    "see",
    "little",
    "operator",
    "plus",
    "equal",
    "sign",
    "assignment",
    "operator",
    "uh",
    "works",
    "normal",
    "equal",
    "sign",
    "instead",
    "going",
    "take",
    "whatever",
    "right",
    "side",
    "going",
    "add",
    "variable",
    "left",
    "side",
    "also",
    "every",
    "different",
    "operation",
    "plus",
    "equals",
    "let",
    "let",
    "start",
    "x",
    "use",
    "example",
    "say",
    "plus",
    "equals",
    "5",
    "turn",
    "20",
    "uh",
    "also",
    "uh",
    "x",
    "minus",
    "equal",
    "5",
    "bring",
    "back",
    "15",
    "um",
    "x",
    "equals",
    "say",
    "three",
    "equal",
    "five",
    "finally",
    "x",
    "multiply",
    "equals",
    "uh",
    "say",
    "two",
    "going",
    "equal",
    "10",
    "see",
    "several",
    "different",
    "assignment",
    "operators",
    "shortcuts",
    "us",
    "something",
    "could",
    "already",
    "uh",
    "writing",
    "l",
    "hand",
    "want",
    "say",
    "like",
    "said",
    "need",
    "operators",
    "really",
    "need",
    "one",
    "right",
    "equal",
    "sign",
    "reason",
    "sure",
    "could",
    "save",
    "characters",
    "code",
    "lot",
    "clear",
    "wanted",
    "take",
    "value",
    "let",
    "get",
    "x",
    "currently",
    "equal",
    "10",
    "much",
    "clear",
    "opinion",
    "say",
    "x",
    "x",
    "5",
    "rather",
    "saying",
    "x",
    "plus",
    "equal",
    "5",
    "eliminates",
    "need",
    "memorize",
    "bunch",
    "stuff",
    "um",
    "really",
    "need",
    "would",
    "recommend",
    "worrying",
    "little",
    "recap",
    "arithmetic",
    "operators",
    "let",
    "write",
    "comment",
    "arithmetic",
    "operators",
    "going",
    "plus",
    "minus",
    "multiply",
    "divide",
    "modulus",
    "um",
    "increment",
    "decrement",
    "believe",
    "covers",
    "um",
    "apologize",
    "missed",
    "one",
    "arithmetic",
    "operators",
    "allow",
    "us",
    "basically",
    "uh",
    "modify",
    "different",
    "variables",
    "also",
    "assignment",
    "operators",
    "assignment",
    "um",
    "operators",
    "going",
    "equal",
    "sign",
    "familiar",
    "um",
    "plus",
    "equals",
    "minus",
    "equals",
    "multiply",
    "equals",
    "divide",
    "equal",
    "equals",
    "valid",
    "assignment",
    "operators",
    "recommend",
    "learning",
    "one",
    "done",
    "next",
    "sort",
    "operators",
    "talk",
    "comparison",
    "operators",
    "opinion",
    "hardest",
    "understand",
    "um",
    "introduces",
    "concept",
    "really",
    "looked",
    "lot",
    "yet",
    "let",
    "go",
    "ahead",
    "start",
    "basic",
    "example",
    "let",
    "assign",
    "result",
    "variable",
    "assign",
    "equal",
    "following",
    "javascript",
    "expression",
    "print",
    "result",
    "variable",
    "going",
    "equal",
    "true",
    "kind",
    "logically",
    "think",
    "um",
    "confused",
    "logical",
    "operators",
    "um",
    "think",
    "20",
    "greater",
    "18",
    "actually",
    "greater",
    "operator",
    "going",
    "talk",
    "second",
    "basically",
    "figure",
    "intuitively",
    "bigger",
    "result",
    "true",
    "right",
    "well",
    "let",
    "bring",
    "something",
    "little",
    "bit",
    "complicated",
    "um",
    "let",
    "say",
    "something",
    "like",
    "know",
    "constant",
    "result",
    "2",
    "going",
    "equal",
    "20",
    "equal",
    "sign",
    "three",
    "times",
    "20",
    "case",
    "little",
    "bit",
    "harder",
    "understand",
    "got",
    "equal",
    "sign",
    "three",
    "probably",
    "got",
    "thinking",
    "like",
    "well",
    "going",
    "answer",
    "expression",
    "going",
    "true",
    "20",
    "equal",
    "20",
    "understand",
    "going",
    "right",
    "side",
    "equal",
    "sign",
    "really",
    "think",
    "really",
    "understand",
    "get",
    "super",
    "super",
    "clear",
    "talking",
    "left",
    "side",
    "equal",
    "sign",
    "right",
    "side",
    "equal",
    "sign",
    "talked",
    "last",
    "lesson",
    "going",
    "go",
    "even",
    "deeper",
    "look",
    "second",
    "expression",
    "assignment",
    "operator",
    "clear",
    "looking",
    "left",
    "side",
    "going",
    "variable",
    "assigning",
    "right",
    "side",
    "right",
    "side",
    "talked",
    "little",
    "bit",
    "earlier",
    "going",
    "evaluate",
    "value",
    "single",
    "value",
    "call",
    "javascript",
    "expression",
    "case",
    "using",
    "special",
    "operator",
    "triple",
    "equal",
    "sign",
    "triple",
    "equal",
    "sign",
    "behaves",
    "certain",
    "way",
    "basically",
    "says",
    "well",
    "left",
    "side",
    "right",
    "side",
    "maybe",
    "little",
    "bit",
    "confusing",
    "20",
    "equal",
    "20",
    "value",
    "type",
    "talked",
    "data",
    "types",
    "comes",
    "play",
    "go",
    "make",
    "sure",
    "clear",
    "looking",
    "left",
    "side",
    "versus",
    "right",
    "side",
    "equal",
    "signs",
    "thing",
    "equal",
    "sign",
    "right",
    "think",
    "kind",
    "like",
    "master",
    "equal",
    "sign",
    "kind",
    "determines",
    "um",
    "everything",
    "whole",
    "javascript",
    "statement",
    "equal",
    "sign",
    "see",
    "actually",
    "going",
    "operators",
    "sort",
    "comparison",
    "talking",
    "comparison",
    "operators",
    "javascript",
    "four",
    "main",
    "comparison",
    "operators",
    "equality",
    "triple",
    "equal",
    "sign",
    "double",
    "equal",
    "sign",
    "equal",
    "sign",
    "two",
    "right",
    "equals",
    "one",
    "think",
    "two",
    "one",
    "right",
    "one",
    "right",
    "kind",
    "opposites",
    "well",
    "double",
    "equals",
    "single",
    "exclamation",
    "single",
    "equals",
    "kind",
    "functionally",
    "opposite",
    "actually",
    "well",
    "find",
    "need",
    "start",
    "playing",
    "around",
    "values",
    "like",
    "could",
    "20",
    "plus",
    "plus",
    "20",
    "get",
    "40",
    "also",
    "evaluate",
    "uh",
    "different",
    "expressions",
    "using",
    "comparison",
    "operators",
    "said",
    "20",
    "dou",
    "equals",
    "20",
    "going",
    "evaluate",
    "true",
    "could",
    "also",
    "say",
    "20",
    "triple",
    "equals",
    "20",
    "going",
    "evaluate",
    "true",
    "difference",
    "two",
    "well",
    "difference",
    "data",
    "type",
    "working",
    "remember",
    "last",
    "lesson",
    "20",
    "written",
    "like",
    "like",
    "going",
    "different",
    "20",
    "written",
    "like",
    "first",
    "case",
    "looking",
    "number",
    "second",
    "case",
    "looking",
    "string",
    "see",
    "expression",
    "evaluates",
    "true",
    "quite",
    "yet",
    "let",
    "say",
    "um",
    "want",
    "number",
    "value",
    "equal",
    "20",
    "also",
    "want",
    "string",
    "value",
    "going",
    "equal",
    "know",
    "say",
    "50",
    "notice",
    "single",
    "quotations",
    "could",
    "also",
    "done",
    "uh",
    "double",
    "quotations",
    "really",
    "matter",
    "another",
    "way",
    "write",
    "number",
    "value",
    "string",
    "value",
    "use",
    "type",
    "operator",
    "actually",
    "one",
    "um",
    "already",
    "used",
    "little",
    "bit",
    "actually",
    "operator",
    "um",
    "put",
    "number",
    "value",
    "going",
    "evaluate",
    "number",
    "also",
    "put",
    "string",
    "value",
    "string",
    "know",
    "number",
    "variable",
    "string",
    "variable",
    "number",
    "string",
    "types",
    "try",
    "compare",
    "um",
    "using",
    "double",
    "equals",
    "triple",
    "equals",
    "equality",
    "kind",
    "messed",
    "meant",
    "say",
    "string",
    "value",
    "equal",
    "20",
    "let",
    "go",
    "ahead",
    "redo",
    "say",
    "string",
    "value",
    "equals",
    "uh",
    "20",
    "say",
    "number",
    "value",
    "equals",
    "20",
    "back",
    "started",
    "say",
    "string",
    "value",
    "double",
    "equals",
    "number",
    "value",
    "going",
    "equal",
    "going",
    "return",
    "value",
    "true",
    "boolean",
    "reason",
    "data",
    "type",
    "value",
    "convert",
    "um",
    "string",
    "value",
    "number",
    "use",
    "javascript",
    "number",
    "function",
    "pass",
    "string",
    "value",
    "going",
    "get",
    "20",
    "valid",
    "javascript",
    "number",
    "happening",
    "compare",
    "string",
    "value",
    "number",
    "value",
    "using",
    "double",
    "equal",
    "sign",
    "first",
    "converting",
    "data",
    "type",
    "might",
    "convert",
    "string",
    "value",
    "number",
    "compare",
    "number",
    "value",
    "comparing",
    "apple",
    "apples",
    "checks",
    "whether",
    "actual",
    "values",
    "going",
    "equal",
    "case",
    "equal",
    "20",
    "resultant",
    "uh",
    "expression",
    "uh",
    "true",
    "try",
    "triple",
    "equals",
    "string",
    "value",
    "triple",
    "equals",
    "number",
    "value",
    "going",
    "get",
    "false",
    "time",
    "triple",
    "equals",
    "going",
    "convert",
    "types",
    "match",
    "basically",
    "saying",
    "um",
    "well",
    "yeah",
    "numbers",
    "actual",
    "values",
    "data",
    "types",
    "therefore",
    "expression",
    "evaluates",
    "false",
    "looking",
    "different",
    "double",
    "equals",
    "triple",
    "equals",
    "double",
    "equals",
    "care",
    "data",
    "type",
    "triple",
    "equals",
    "care",
    "data",
    "type",
    "almost",
    "cases",
    "would",
    "recommend",
    "using",
    "triple",
    "equals",
    "lot",
    "explicit",
    "writing",
    "code",
    "way",
    "well",
    "see",
    "string",
    "value",
    "uh",
    "resolve",
    "true",
    "compare",
    "double",
    "equal",
    "sign",
    "implicitly",
    "coercing",
    "data",
    "type",
    "uh",
    "values",
    "triple",
    "equal",
    "sign",
    "obviously",
    "false",
    "different",
    "uh",
    "values",
    "like",
    "said",
    "could",
    "number",
    "string",
    "value",
    "explicitly",
    "implicitly",
    "like",
    "javascript",
    "double",
    "equals",
    "explicitly",
    "coercing",
    "string",
    "number",
    "triple",
    "equals",
    "compare",
    "number",
    "value",
    "going",
    "equal",
    "true",
    "like",
    "mentioned",
    "comparison",
    "operators",
    "probably",
    "difficult",
    "operators",
    "kind",
    "grasp",
    "head",
    "around",
    "um",
    "nevertheless",
    "hopefully",
    "makes",
    "sense",
    "talking",
    "double",
    "equals",
    "versus",
    "triple",
    "equals",
    "furthermore",
    "set",
    "uh",
    "result",
    "variable",
    "equal",
    "value",
    "string",
    "value",
    "triple",
    "uh",
    "double",
    "equals",
    "number",
    "value",
    "know",
    "equals",
    "true",
    "right",
    "going",
    "happen",
    "even",
    "though",
    "equal",
    "signs",
    "right",
    "side",
    "remember",
    "right",
    "side",
    "versus",
    "left",
    "side",
    "expression",
    "entire",
    "expression",
    "right",
    "side",
    "equal",
    "sign",
    "therefore",
    "javascript",
    "saying",
    "okay",
    "first",
    "let",
    "look",
    "expression",
    "let",
    "evaluate",
    "see",
    "uh",
    "results",
    "case",
    "results",
    "true",
    "true",
    "value",
    "right",
    "want",
    "assign",
    "result",
    "variable",
    "press",
    "enter",
    "going",
    "get",
    "value",
    "true",
    "result",
    "variable",
    "moving",
    "equals",
    "little",
    "exclamation",
    "point",
    "double",
    "equals",
    "exclamation",
    "single",
    "equal",
    "sign",
    "basically",
    "opposite",
    "double",
    "triple",
    "equal",
    "signs",
    "let",
    "try",
    "say",
    "uh",
    "want",
    "number",
    "value",
    "20",
    "want",
    "string",
    "value",
    "also",
    "20",
    "string",
    "form",
    "going",
    "equal",
    "use",
    "triple",
    "equal",
    "sign",
    "cares",
    "value",
    "type",
    "equal",
    "use",
    "double",
    "equal",
    "sign",
    "plop",
    "exclamation",
    "part",
    "uh",
    "point",
    "going",
    "reverse",
    "everything",
    "exclamation",
    "point",
    "single",
    "equal",
    "sign",
    "say",
    "string",
    "value",
    "basically",
    "saying",
    "um",
    "number",
    "value",
    "equal",
    "string",
    "value",
    "case",
    "equal",
    "string",
    "value",
    "using",
    "one",
    "equal",
    "sign",
    "answer",
    "false",
    "know",
    "little",
    "bit",
    "tough",
    "wrap",
    "head",
    "around",
    "think",
    "long",
    "enough",
    "make",
    "sense",
    "plop",
    "double",
    "equal",
    "sign",
    "put",
    "string",
    "value",
    "uh",
    "going",
    "evaluate",
    "true",
    "remember",
    "uh",
    "case",
    "let",
    "say",
    "hold",
    "one",
    "second",
    "triple",
    "equals",
    "going",
    "carry",
    "uh",
    "care",
    "value",
    "type",
    "deal",
    "uh",
    "exclamation",
    "point",
    "double",
    "equals",
    "basically",
    "saying",
    "number",
    "value",
    "equal",
    "string",
    "value",
    "types",
    "equal",
    "evaluates",
    "true",
    "actually",
    "equal",
    "try",
    "reverse",
    "head",
    "think",
    "much",
    "um",
    "time",
    "comes",
    "figure",
    "use",
    "wanted",
    "uh",
    "briefly",
    "go",
    "show",
    "exact",
    "opposite",
    "double",
    "triple",
    "equals",
    "equality",
    "operators",
    "gets",
    "little",
    "bit",
    "tricky",
    "dealing",
    "different",
    "data",
    "types",
    "thus",
    "far",
    "compared",
    "numbers",
    "strings",
    "said",
    "20",
    "triple",
    "equals",
    "20",
    "equals",
    "true",
    "cu",
    "uh",
    "number",
    "comparison",
    "number",
    "type",
    "also",
    "say",
    "20",
    "double",
    "equals",
    "20",
    "know",
    "kind",
    "saying",
    "thing",
    "care",
    "types",
    "types",
    "care",
    "values",
    "equals",
    "true",
    "also",
    "compare",
    "strings",
    "say",
    "hello",
    "world",
    "going",
    "triple",
    "equal",
    "equal",
    "hello",
    "world",
    "going",
    "equal",
    "true",
    "also",
    "able",
    "remove",
    "one",
    "equal",
    "signs",
    "going",
    "give",
    "us",
    "answer",
    "values",
    "types",
    "really",
    "matter",
    "use",
    "numbers",
    "strings",
    "also",
    "booleans",
    "said",
    "true",
    "triple",
    "equals",
    "true",
    "going",
    "give",
    "us",
    "true",
    "know",
    "little",
    "bit",
    "uh",
    "tongue",
    "twister",
    "saying",
    "value",
    "true",
    "boolean",
    "equal",
    "another",
    "value",
    "true",
    "expression",
    "evaluates",
    "truthy",
    "value",
    "prints",
    "true",
    "said",
    "true",
    "50",
    "times",
    "last",
    "30",
    "seconds",
    "uh",
    "let",
    "stop",
    "basically",
    "strings",
    "numbers",
    "booleans",
    "equality",
    "operators",
    "try",
    "arrays",
    "objects",
    "game",
    "changes",
    "little",
    "bit",
    "let",
    "say",
    "object",
    "equal",
    "uh",
    "say",
    "property",
    "one",
    "value",
    "go",
    "um",
    "actually",
    "needed",
    "hold",
    "shift",
    "let",
    "redo",
    "real",
    "quick",
    "starting",
    "object",
    "equal",
    "property",
    "one",
    "equal",
    "string",
    "value",
    "say",
    "property",
    "2",
    "going",
    "equal",
    "number",
    "object",
    "also",
    "define",
    "array",
    "equal",
    "1",
    "2",
    "3",
    "4",
    "five",
    "bunch",
    "numbers",
    "say",
    "prove",
    "um",
    "array",
    "equal",
    "array",
    "value",
    "going",
    "equal",
    "true",
    "comparing",
    "variable",
    "let",
    "say",
    "created",
    "another",
    "array",
    "time",
    "going",
    "equal",
    "exact",
    "thing",
    "going",
    "put",
    "exact",
    "numbers",
    "going",
    "look",
    "exactly",
    "press",
    "enter",
    "compare",
    "array",
    "triple",
    "equals",
    "another",
    "array",
    "going",
    "equal",
    "false",
    "first",
    "case",
    "comparing",
    "variable",
    "equals",
    "true",
    "makes",
    "sense",
    "equal",
    "array",
    "equal",
    "another",
    "array",
    "look",
    "exactly",
    "one",
    "quirky",
    "parts",
    "javascript",
    "hear",
    "lot",
    "um",
    "going",
    "get",
    "equal",
    "actually",
    "compare",
    "two",
    "different",
    "arrays",
    "um",
    "using",
    "javascript",
    "complex",
    "talking",
    "know",
    "compare",
    "everything",
    "goes",
    "objects",
    "said",
    "object",
    "triple",
    "equals",
    "object",
    "going",
    "equal",
    "true",
    "comparing",
    "exact",
    "object",
    "say",
    "another",
    "object",
    "make",
    "equal",
    "exact",
    "one",
    "property",
    "one",
    "going",
    "equal",
    "value",
    "property",
    "2",
    "going",
    "equal",
    "20",
    "exact",
    "object",
    "top",
    "time",
    "say",
    "object",
    "triple",
    "equals",
    "another",
    "object",
    "going",
    "get",
    "false",
    "might",
    "wondering",
    "well",
    "maybe",
    "using",
    "triple",
    "equals",
    "well",
    "case",
    "even",
    "used",
    "array",
    "double",
    "equals",
    "another",
    "array",
    "still",
    "going",
    "false",
    "use",
    "object",
    "double",
    "equals",
    "another",
    "object",
    "also",
    "false",
    "compare",
    "comparison",
    "operators",
    "arrays",
    "objects",
    "actually",
    "use",
    "different",
    "library",
    "lot",
    "cases",
    "lot",
    "developers",
    "turn",
    "library",
    "called",
    "low",
    "dash",
    "uh",
    "type",
    "low",
    "dash",
    "browser",
    "see",
    "utility",
    "library",
    "basically",
    "provides",
    "bunch",
    "different",
    "methods",
    "use",
    "um",
    "bunch",
    "common",
    "javascript",
    "operations",
    "would",
    "otherwise",
    "take",
    "um",
    "writing",
    "good",
    "amount",
    "code",
    "way",
    "complex",
    "right",
    "going",
    "go",
    "back",
    "keep",
    "going",
    "discussion",
    "operators",
    "gotten",
    "bulk",
    "comparison",
    "operators",
    "hardest",
    "ones",
    "done",
    "talk",
    "numeric",
    "comparison",
    "operators",
    "come",
    "surprise",
    "greater",
    "less",
    "greater",
    "equal",
    "less",
    "equal",
    "operators",
    "see",
    "work",
    "uh",
    "40",
    "greater",
    "20",
    "true",
    "uh",
    "20",
    "less",
    "40",
    "also",
    "true",
    "uh",
    "20",
    "less",
    "equal",
    "20",
    "true",
    "20",
    "greater",
    "equal",
    "20",
    "see",
    "uh",
    "work",
    "pretty",
    "common",
    "took",
    "sort",
    "math",
    "class",
    "know",
    "exactly",
    "work",
    "final",
    "operator",
    "falls",
    "comparison",
    "operator",
    "category",
    "something",
    "called",
    "turner",
    "operator",
    "spelled",
    "let",
    "see",
    "spell",
    "tary",
    "saying",
    "tary",
    "operator",
    "going",
    "look",
    "like",
    "say",
    "want",
    "assign",
    "result",
    "variable",
    "want",
    "assign",
    "equal",
    "following",
    "expression",
    "say",
    "20",
    "triple",
    "equals",
    "20",
    "add",
    "little",
    "question",
    "mark",
    "say",
    "values",
    "match",
    "add",
    "colon",
    "say",
    "values",
    "match",
    "press",
    "enter",
    "going",
    "see",
    "result",
    "values",
    "match",
    "confusing",
    "expression",
    "look",
    "first",
    "glance",
    "get",
    "used",
    "something",
    "lot",
    "programmers",
    "really",
    "like",
    "like",
    "think",
    "makes",
    "complicated",
    "um",
    "talked",
    "conditionals",
    "yet",
    "think",
    "able",
    "understand",
    "little",
    "bit",
    "going",
    "try",
    "explain",
    "real",
    "quick",
    "expression",
    "right",
    "going",
    "functionally",
    "equivalent",
    "following",
    "expression",
    "say",
    "20",
    "triple",
    "equals",
    "20",
    "say",
    "um",
    "return",
    "actually",
    "need",
    "redo",
    "real",
    "quick",
    "need",
    "first",
    "say",
    "uh",
    "declare",
    "variable",
    "say",
    "result",
    "variable",
    "need",
    "assign",
    "value",
    "yet",
    "say",
    "20",
    "triple",
    "equals",
    "20",
    "want",
    "assign",
    "result",
    "variable",
    "equal",
    "values",
    "match",
    "equal",
    "else",
    "result",
    "variable",
    "going",
    "equal",
    "values",
    "match",
    "spell",
    "right",
    "okay",
    "press",
    "enter",
    "going",
    "say",
    "evaluated",
    "values",
    "match",
    "like",
    "showed",
    "printed",
    "result",
    "type",
    "result",
    "variable",
    "see",
    "assigned",
    "value",
    "wanted",
    "show",
    "even",
    "though",
    "gone",
    "else",
    "statements",
    "yet",
    "conditionals",
    "um",
    "think",
    "fairly",
    "intuitive",
    "understand",
    "saying",
    "expression",
    "evaluates",
    "true",
    "want",
    "assign",
    "variable",
    "question",
    "mark",
    "values",
    "match",
    "otherwise",
    "lse",
    "statement",
    "going",
    "substituted",
    "colon",
    "want",
    "assign",
    "values",
    "match",
    "words",
    "question",
    "mark",
    "kind",
    "like",
    "part",
    "colon",
    "kind",
    "like",
    "else",
    "part",
    "uh",
    "everything",
    "left",
    "question",
    "mark",
    "going",
    "expression",
    "actually",
    "evalu",
    "val",
    "ating",
    "remember",
    "gets",
    "know",
    "kind",
    "confusing",
    "first",
    "starting",
    "remember",
    "keep",
    "right",
    "side",
    "left",
    "side",
    "separate",
    "head",
    "looking",
    "equal",
    "sign",
    "left",
    "side",
    "equal",
    "sign",
    "well",
    "result",
    "variable",
    "right",
    "side",
    "equal",
    "sign",
    "well",
    "everything",
    "entire",
    "expression",
    "right",
    "side",
    "javascript",
    "looks",
    "first",
    "thing",
    "says",
    "right",
    "side",
    "furthermore",
    "evaluate",
    "uses",
    "rules",
    "tary",
    "operator",
    "say",
    "okay",
    "first",
    "want",
    "look",
    "20",
    "triple",
    "equals",
    "20",
    "resolve",
    "well",
    "resolves",
    "true",
    "reasons",
    "discussed",
    "therefore",
    "going",
    "grab",
    "value",
    "right",
    "would",
    "resolve",
    "false",
    "would",
    "say",
    "okay",
    "want",
    "actually",
    "want",
    "uh",
    "one",
    "found",
    "answer",
    "done",
    "work",
    "right",
    "side",
    "come",
    "single",
    "answer",
    "value",
    "values",
    "match",
    "going",
    "assign",
    "result",
    "variable",
    "clear",
    "whether",
    "talking",
    "right",
    "side",
    "could",
    "really",
    "long",
    "expression",
    "left",
    "side",
    "target",
    "variable",
    "assigning",
    "end",
    "result",
    "right",
    "side",
    "finally",
    "done",
    "comparison",
    "operators",
    "know",
    "know",
    "took",
    "video",
    "important",
    "see",
    "start",
    "writing",
    "good",
    "amount",
    "code",
    "going",
    "use",
    "ton",
    "last",
    "type",
    "operator",
    "call",
    "logical",
    "operator",
    "three",
    "uh",
    "double",
    "sign",
    "double",
    "pipe",
    "sign",
    "exclamation",
    "point",
    "exclamation",
    "point",
    "kind",
    "talked",
    "earlier",
    "exclamation",
    "equals",
    "kind",
    "going",
    "function",
    "different",
    "way",
    "using",
    "logical",
    "operator",
    "start",
    "sign",
    "basically",
    "saying",
    "looking",
    "two",
    "different",
    "expressions",
    "20",
    "uh",
    "triple",
    "equals",
    "20",
    "put",
    "sign",
    "say",
    "10",
    "triple",
    "equal",
    "10",
    "saying",
    "okay",
    "left",
    "side",
    "expression",
    "20",
    "equal",
    "20",
    "evaluates",
    "true",
    "order",
    "entire",
    "expression",
    "whole",
    "line",
    "order",
    "true",
    "sides",
    "evaluate",
    "true",
    "case",
    "get",
    "true",
    "could",
    "also",
    "say",
    "12",
    "case",
    "going",
    "false",
    "left",
    "side",
    "equal",
    "true",
    "order",
    "entire",
    "expression",
    "true",
    "sides",
    "true",
    "see",
    "right",
    "side",
    "equal",
    "get",
    "false",
    "operator",
    "example",
    "said",
    "20",
    "triple",
    "equals",
    "20",
    "use",
    "double",
    "pipes",
    "basically",
    "say",
    "10",
    "triple",
    "equal",
    "12",
    "going",
    "equal",
    "true",
    "saying",
    "entire",
    "expression",
    "going",
    "equal",
    "true",
    "one",
    "equal",
    "true",
    "case",
    "right",
    "side",
    "equal",
    "true",
    "need",
    "work",
    "tried",
    "write",
    "expression",
    "sides",
    "actually",
    "false",
    "actually",
    "wrong",
    "one",
    "pipe",
    "somehow",
    "say",
    "20",
    "triple",
    "equals",
    "18",
    "double",
    "pipes",
    "10",
    "triple",
    "equal",
    "12",
    "false",
    "going",
    "false",
    "last",
    "one",
    "talking",
    "let",
    "clear",
    "screen",
    "going",
    "exclamation",
    "point",
    "exclamation",
    "point",
    "basically",
    "reverses",
    "everything",
    "generally",
    "going",
    "talking",
    "boolean",
    "value",
    "let",
    "say",
    "expression",
    "20",
    "triple",
    "equals",
    "20",
    "evaluates",
    "true",
    "obviously",
    "put",
    "parentheses",
    "around",
    "um",
    "still",
    "equals",
    "true",
    "put",
    "exclamation",
    "beginning",
    "statement",
    "going",
    "reverse",
    "false",
    "important",
    "note",
    "put",
    "end",
    "valid",
    "put",
    "beginning",
    "expression",
    "trying",
    "reverse",
    "exclamation",
    "point",
    "little",
    "bit",
    "different",
    "put",
    "exclamation",
    "double",
    "equals",
    "um",
    "slightly",
    "different",
    "thing",
    "talked",
    "earlier",
    "video",
    "show",
    "practical",
    "example",
    "might",
    "use",
    "one",
    "um",
    "pretty",
    "common",
    "one",
    "seen",
    "used",
    "apps",
    "going",
    "actually",
    "writing",
    "code",
    "would",
    "write",
    "app",
    "kind",
    "get",
    "point",
    "variable",
    "says",
    "user",
    "logged",
    "set",
    "set",
    "equal",
    "true",
    "user",
    "going",
    "logged",
    "case",
    "say",
    "user",
    "permission",
    "say",
    "false",
    "one",
    "might",
    "pretty",
    "common",
    "thing",
    "see",
    "uh",
    "check",
    "values",
    "see",
    "whether",
    "user",
    "per",
    "perform",
    "specific",
    "action",
    "app",
    "might",
    "say",
    "uh",
    "user",
    "perform",
    "action",
    "set",
    "equal",
    "user",
    "logged",
    "user",
    "permissions",
    "case",
    "evaluate",
    "expression",
    "right",
    "side",
    "equal",
    "sign",
    "user",
    "logged",
    "true",
    "permissions",
    "false",
    "entire",
    "expression",
    "resolves",
    "false",
    "many",
    "cases",
    "apps",
    "might",
    "say",
    "user",
    "perform",
    "action",
    "something",
    "like",
    "allow",
    "perform",
    "action",
    "practical",
    "example",
    "might",
    "use",
    "operators",
    "real",
    "world",
    "final",
    "part",
    "video",
    "get",
    "actual",
    "challenges",
    "going",
    "give",
    "going",
    "combining",
    "operators",
    "concept",
    "expression",
    "really",
    "comes",
    "life",
    "going",
    "put",
    "pretty",
    "complex",
    "expression",
    "screen",
    "going",
    "walk",
    "actually",
    "working",
    "say",
    "result",
    "equal",
    "uh",
    "exclamation",
    "point",
    "going",
    "put",
    "couple",
    "parentheses",
    "say",
    "40",
    "20",
    "equal",
    "2",
    "say",
    "um",
    "something",
    "like",
    "know",
    "true",
    "say",
    "right",
    "side",
    "um",
    "try",
    "make",
    "clear",
    "say",
    "put",
    "another",
    "parentheses",
    "yes",
    "triple",
    "equals",
    "evaluate",
    "expression",
    "going",
    "see",
    "equals",
    "false",
    "actually",
    "totally",
    "valid",
    "uh",
    "javascript",
    "expression",
    "um",
    "although",
    "confusing",
    "look",
    "take",
    "step",
    "step",
    "think",
    "understand",
    "combine",
    "operators",
    "single",
    "expression",
    "say",
    "get",
    "generally",
    "going",
    "writing",
    "something",
    "complex",
    "writing",
    "something",
    "confusing",
    "read",
    "could",
    "probably",
    "break",
    "several",
    "steps",
    "sign",
    "intelligence",
    "trying",
    "make",
    "complicated",
    "like",
    "want",
    "simple",
    "possible",
    "many",
    "cases",
    "um",
    "going",
    "write",
    "lines",
    "code",
    "order",
    "improve",
    "readability",
    "code",
    "code",
    "readable",
    "something",
    "would",
    "take",
    "someone",
    "know",
    "let",
    "say",
    "wrote",
    "code",
    "go",
    "review",
    "code",
    "going",
    "take",
    "know",
    "least",
    "20",
    "seconds",
    "figure",
    "cases",
    "want",
    "see",
    "exactly",
    "code",
    "quickly",
    "possible",
    "nevertheless",
    "see",
    "evaluates",
    "breaking",
    "different",
    "steps",
    "going",
    "store",
    "step",
    "variable",
    "kind",
    "work",
    "way",
    "understanding",
    "entire",
    "expression",
    "remember",
    "talking",
    "right",
    "side",
    "versus",
    "left",
    "side",
    "left",
    "side",
    "variable",
    "right",
    "side",
    "entire",
    "expression",
    "say",
    "say",
    "step",
    "one",
    "going",
    "equal",
    "40",
    "20",
    "start",
    "right",
    "save",
    "step",
    "one",
    "second",
    "step",
    "take",
    "40",
    "divid",
    "20",
    "use",
    "equality",
    "operator",
    "set",
    "equal",
    "two",
    "say",
    "step",
    "two",
    "going",
    "equal",
    "step",
    "one",
    "triple",
    "equals",
    "2",
    "okay",
    "check",
    "point",
    "equal",
    "true",
    "right",
    "next",
    "step",
    "going",
    "taking",
    "entire",
    "expression",
    "uh",
    "basically",
    "combined",
    "step",
    "two",
    "adding",
    "sign",
    "putting",
    "true",
    "going",
    "say",
    "um",
    "conep",
    "3",
    "going",
    "equal",
    "step",
    "two",
    "double",
    "true",
    "guess",
    "since",
    "already",
    "equal",
    "true",
    "right",
    "another",
    "boolean",
    "value",
    "true",
    "going",
    "equal",
    "true",
    "step",
    "three",
    "actually",
    "equal",
    "true",
    "uh",
    "true",
    "right",
    "see",
    "right",
    "want",
    "combine",
    "um",
    "already",
    "done",
    "entire",
    "expression",
    "maybe",
    "want",
    "store",
    "variable",
    "say",
    "step",
    "uh",
    "four",
    "going",
    "equal",
    "yes",
    "triple",
    "equals",
    "obviously",
    "going",
    "equal",
    "false",
    "step",
    "four",
    "let",
    "take",
    "step",
    "three",
    "right",
    "step",
    "four",
    "combine",
    "uh",
    "using",
    "double",
    "pipes",
    "say",
    "step",
    "five",
    "equal",
    "step",
    "three",
    "double",
    "pipes",
    "step",
    "four",
    "going",
    "equal",
    "let",
    "see",
    "step",
    "five",
    "equal",
    "true",
    "um",
    "try",
    "scroll",
    "got",
    "one",
    "um",
    "one",
    "entire",
    "expression",
    "evaluated",
    "last",
    "thing",
    "need",
    "add",
    "um",
    "exclamation",
    "point",
    "beginning",
    "everything",
    "say",
    "step",
    "six",
    "going",
    "equal",
    "step",
    "five",
    "step",
    "six",
    "going",
    "equal",
    "false",
    "see",
    "total",
    "result",
    "entire",
    "expression",
    "equal",
    "false",
    "steps",
    "intermediary",
    "steps",
    "used",
    "kind",
    "break",
    "entire",
    "expression",
    "figure",
    "result",
    "variable",
    "ultimately",
    "assigned",
    "summary",
    "expression",
    "right",
    "side",
    "equal",
    "sign",
    "complex",
    "want",
    "furthermore",
    "actually",
    "something",
    "working",
    "um",
    "looking",
    "um",
    "simple",
    "variables",
    "like",
    "numbers",
    "strings",
    "simple",
    "comparisons",
    "much",
    "complex",
    "could",
    "even",
    "something",
    "like",
    "um",
    "function",
    "evaluating",
    "specific",
    "variable",
    "let",
    "refresh",
    "page",
    "going",
    "set",
    "result",
    "equal",
    "function",
    "covered",
    "yet",
    "want",
    "demonstrate",
    "uh",
    "talking",
    "case",
    "going",
    "return",
    "20",
    "function",
    "happening",
    "conscious",
    "left",
    "side",
    "versus",
    "right",
    "side",
    "left",
    "side",
    "going",
    "result",
    "variable",
    "right",
    "side",
    "going",
    "entire",
    "function",
    "case",
    "going",
    "set",
    "um",
    "right",
    "side",
    "equal",
    "function",
    "returns",
    "value",
    "20",
    "going",
    "automatically",
    "execute",
    "actually",
    "assign",
    "uh",
    "using",
    "something",
    "called",
    "immediately",
    "invoked",
    "function",
    "going",
    "actually",
    "assigning",
    "result",
    "variable",
    "left",
    "equal",
    "whatever",
    "function",
    "returns",
    "evaluated",
    "see",
    "result",
    "equal",
    "20",
    "kind",
    "demonstrates",
    "us",
    "right",
    "side",
    "equal",
    "sign",
    "infinitely",
    "complex",
    "important",
    "understand",
    "um",
    "expression",
    "solved",
    "individual",
    "steps",
    "um",
    "computer",
    "looks",
    "would",
    "recommend",
    "look",
    "trying",
    "figure",
    "going",
    "set",
    "variable",
    "like",
    "saying",
    "throughout",
    "series",
    "um",
    "watching",
    "videos",
    "alone",
    "going",
    "actually",
    "practice",
    "let",
    "jump",
    "challenges",
    "put",
    "together",
    "video",
    "say",
    "get",
    "better",
    "writing",
    "code",
    "go",
    "different",
    "parts",
    "javascript",
    "variables",
    "operators",
    "know",
    "getting",
    "loops",
    "functions",
    "conditionals",
    "basically",
    "learning",
    "write",
    "code",
    "going",
    "actually",
    "migrate",
    "site",
    "called",
    "cod",
    "wars",
    "go",
    "uh",
    "cod",
    "going",
    "see",
    "actually",
    "pretty",
    "popular",
    "site",
    "um",
    "different",
    "programming",
    "challenges",
    "going",
    "actually",
    "start",
    "uh",
    "recommending",
    "challenges",
    "code",
    "war",
    "site",
    "basically",
    "work",
    "profile",
    "know",
    "kind",
    "go",
    "challenges",
    "quite",
    "advanced",
    "enough",
    "look",
    "going",
    "pop",
    "challenges",
    "screen",
    "going",
    "walk",
    "go",
    "solving",
    "want",
    "get",
    "recommend",
    "trying",
    "first",
    "pause",
    "video",
    "try",
    "work",
    "browser",
    "uh",
    "dev",
    "tools",
    "console",
    "figured",
    "kind",
    "go",
    "explanation",
    "right",
    "first",
    "challenge",
    "question",
    "code",
    "work",
    "answer",
    "going",
    "const",
    "declaration",
    "made",
    "beginning",
    "code",
    "remember",
    "using",
    "const",
    "reassign",
    "value",
    "say",
    "const",
    "number",
    "variable",
    "equals",
    "0",
    "try",
    "reassign",
    "using",
    "increment",
    "operator",
    "going",
    "give",
    "us",
    "error",
    "go",
    "ahead",
    "change",
    "let",
    "instead",
    "const",
    "say",
    "let",
    "number",
    "variable",
    "equals",
    "0",
    "say",
    "number",
    "variable",
    "number",
    "variable",
    "one",
    "time",
    "going",
    "able",
    "end",
    "number",
    "variable",
    "going",
    "equal",
    "three",
    "solution",
    "first",
    "challenge",
    "challenge",
    "number",
    "two",
    "one",
    "little",
    "bit",
    "trick",
    "question",
    "um",
    "going",
    "evaluate",
    "value",
    "think",
    "could",
    "probably",
    "figure",
    "second",
    "part",
    "question",
    "um",
    "one",
    "would",
    "recommend",
    "answer",
    "would",
    "recommend",
    "either",
    "blocks",
    "code",
    "first",
    "one",
    "going",
    "um",
    "evaluate",
    "false",
    "using",
    "triple",
    "equals",
    "second",
    "one",
    "going",
    "evaluate",
    "true",
    "using",
    "double",
    "equals",
    "case",
    "problem",
    "either",
    "block",
    "code",
    "um",
    "variables",
    "declaring",
    "would",
    "actually",
    "write",
    "rather",
    "code",
    "blocks",
    "say",
    "first",
    "number",
    "equals",
    "20",
    "say",
    "second",
    "number",
    "also",
    "equals",
    "20",
    "instead",
    "string",
    "value",
    "let",
    "put",
    "number",
    "real",
    "solution",
    "right",
    "define",
    "result",
    "equal",
    "first",
    "number",
    "triple",
    "equals",
    "second",
    "number",
    "always",
    "want",
    "favor",
    "triple",
    "equals",
    "explicit",
    "print",
    "result",
    "going",
    "equal",
    "true",
    "solv",
    "problem",
    "challenge",
    "number",
    "three",
    "one",
    "little",
    "bit",
    "trickier",
    "think",
    "probably",
    "could",
    "gotten",
    "um",
    "let",
    "refresh",
    "screen",
    "real",
    "quick",
    "question",
    "expression",
    "five",
    "resolve",
    "answer",
    "expression",
    "five",
    "let",
    "make",
    "sure",
    "get",
    "right",
    "um",
    "answer",
    "five",
    "going",
    "resolve",
    "false",
    "going",
    "let",
    "walk",
    "lines",
    "see",
    "resolve",
    "100",
    "save",
    "variables",
    "expression",
    "one",
    "100",
    "modulus",
    "50",
    "remember",
    "100",
    "50",
    "2",
    "remainder",
    "get",
    "zero",
    "expression",
    "one",
    "equal",
    "zero",
    "see",
    "expression",
    "2",
    "going",
    "equal",
    "100",
    "50",
    "equal",
    "2",
    "going",
    "equal",
    "two",
    "expression",
    "3",
    "going",
    "equal",
    "expression",
    "1",
    "less",
    "expression",
    "two",
    "case",
    "expression",
    "one",
    "equal",
    "zero",
    "expression",
    "two",
    "equal",
    "two",
    "expression",
    "right",
    "evaluate",
    "true",
    "let",
    "press",
    "enter",
    "see",
    "case",
    "uh",
    "say",
    "expression",
    "three",
    "equals",
    "true",
    "would",
    "expect",
    "expression",
    "4",
    "going",
    "equal",
    "expression",
    "three",
    "use",
    "symbol",
    "say",
    "300",
    "5",
    "triple",
    "equals",
    "305",
    "little",
    "bit",
    "trickier",
    "look",
    "uh",
    "using",
    "order",
    "operations",
    "first",
    "first",
    "look",
    "one",
    "right",
    "say",
    "300",
    "5",
    "equal",
    "equals",
    "305",
    "replace",
    "basically",
    "say",
    "305",
    "triple",
    "equals",
    "305",
    "going",
    "equal",
    "true",
    "kind",
    "replace",
    "true",
    "expression",
    "three",
    "true",
    "true",
    "expression",
    "four",
    "going",
    "result",
    "true",
    "finally",
    "going",
    "reverse",
    "expression",
    "five",
    "going",
    "equal",
    "exclamation",
    "reverse",
    "expression",
    "4",
    "going",
    "flip",
    "true",
    "false",
    "going",
    "get",
    "false",
    "final",
    "answer",
    "tried",
    "solve",
    "um",
    "problem",
    "getting",
    "one",
    "expression",
    "going",
    "copy",
    "console",
    "show",
    "works",
    "um",
    "see",
    "get",
    "false",
    "like",
    "looked",
    "um",
    "would",
    "combine",
    "single",
    "expression",
    "remember",
    "order",
    "operations",
    "matters",
    "moving",
    "challenge",
    "number",
    "four",
    "actually",
    "slight",
    "review",
    "last",
    "time",
    "combined",
    "concepts",
    "learned",
    "video",
    "looking",
    "object",
    "array",
    "say",
    "object",
    "going",
    "write",
    "something",
    "work",
    "say",
    "prop",
    "one",
    "equal",
    "first",
    "value",
    "prop",
    "two",
    "going",
    "equal",
    "20",
    "object",
    "array",
    "array",
    "going",
    "equal",
    "40",
    "50",
    "2",
    "remember",
    "last",
    "time",
    "way",
    "access",
    "properties",
    "objects",
    "arrays",
    "dot",
    "notation",
    "um",
    "bracket",
    "notation",
    "respectively",
    "wanted",
    "say",
    "get",
    "value",
    "20",
    "object",
    "would",
    "say",
    "object",
    "prop",
    "2",
    "could",
    "also",
    "use",
    "bracket",
    "notation",
    "string",
    "um",
    "prop",
    "two",
    "give",
    "20",
    "would",
    "always",
    "prefer",
    "using",
    "dot",
    "notation",
    "get",
    "way",
    "right",
    "wanted",
    "get",
    "one",
    "values",
    "array",
    "say",
    "wanted",
    "get",
    "50",
    "would",
    "use",
    "bracket",
    "notation",
    "remember",
    "array",
    "zero",
    "indexed",
    "index",
    "zero",
    "index",
    "one",
    "index",
    "2",
    "wanted",
    "get",
    "50",
    "would",
    "say",
    "array",
    "bracket",
    "want",
    "pass",
    "one",
    "index",
    "50",
    "one",
    "give",
    "us",
    "value",
    "50",
    "knowing",
    "problem",
    "gets",
    "pretty",
    "easy",
    "said",
    "result",
    "array",
    "saying",
    "object",
    "propop",
    "2",
    "triple",
    "equals",
    "array",
    "0",
    "divided",
    "array",
    "2",
    "remember",
    "um",
    "store",
    "result",
    "variable",
    "basically",
    "break",
    "different",
    "pieces",
    "object",
    "prop",
    "2",
    "well",
    "equals",
    "20",
    "array",
    "uh",
    "index",
    "zero",
    "well",
    "going",
    "equal",
    "40",
    "array",
    "index",
    "two",
    "going",
    "equal",
    "two",
    "type",
    "got",
    "two",
    "basically",
    "expression",
    "saying",
    "20",
    "triple",
    "equals",
    "40",
    "2",
    "look",
    "expression",
    "going",
    "resolve",
    "true",
    "40",
    "divid",
    "2",
    "20",
    "set",
    "equal",
    "20",
    "true",
    "break",
    "pieces",
    "hard",
    "challenge",
    "5",
    "little",
    "bit",
    "tough",
    "one",
    "going",
    "use",
    "method",
    "challenge",
    "4",
    "solve",
    "going",
    "actually",
    "copy",
    "object",
    "array",
    "basically",
    "code",
    "copy",
    "resolve",
    "let",
    "uh",
    "open",
    "need",
    "print",
    "result",
    "going",
    "true",
    "walk",
    "step",
    "one",
    "one",
    "really",
    "understand",
    "first",
    "thing",
    "remember",
    "access",
    "different",
    "properties",
    "wanted",
    "access",
    "quantity",
    "nested",
    "object",
    "one",
    "would",
    "object",
    "nested",
    "object",
    "one",
    "quantity",
    "going",
    "give",
    "us",
    "value",
    "five",
    "evaluate",
    "expression",
    "tricky",
    "part",
    "line",
    "right",
    "actually",
    "putting",
    "array",
    "um",
    "assigning",
    "nested",
    "objects",
    "values",
    "array",
    "access",
    "nested",
    "object",
    "number",
    "two",
    "could",
    "one",
    "two",
    "things",
    "could",
    "say",
    "object",
    "nested",
    "object",
    "2",
    "might",
    "say",
    "price",
    "going",
    "give",
    "us",
    "150",
    "since",
    "put",
    "array",
    "also",
    "acc",
    "access",
    "like",
    "say",
    "array",
    "would",
    "say",
    "um",
    "want",
    "nested",
    "object",
    "number",
    "two",
    "uh",
    "index",
    "one",
    "index",
    "zero",
    "index",
    "one",
    "going",
    "grab",
    "index",
    "one",
    "see",
    "really",
    "nice",
    "console",
    "see",
    "exactly",
    "evaluates",
    "use",
    "notation",
    "get",
    "different",
    "uh",
    "attributes",
    "price",
    "150",
    "knowing",
    "pretty",
    "easy",
    "evaluate",
    "expression",
    "looked",
    "array",
    "z",
    "uh",
    "price",
    "first",
    "part",
    "little",
    "expression",
    "going",
    "evaluate",
    "100",
    "um",
    "say",
    "array",
    "quantity",
    "going",
    "five",
    "second",
    "part",
    "uh",
    "expression",
    "second",
    "object",
    "array",
    "getting",
    "price",
    "quantity",
    "really",
    "result",
    "variable",
    "saying",
    "saying",
    "want",
    "look",
    "100",
    "5",
    "compare",
    "say",
    "greater",
    "say",
    "150",
    "2",
    "evaluates",
    "true",
    "100",
    "5",
    "500",
    "greater",
    "150",
    "2",
    "going",
    "300",
    "going",
    "give",
    "result",
    "variable",
    "see",
    "break",
    "little",
    "steps",
    "able",
    "figure",
    "expression",
    "equals",
    "actually",
    "access",
    "um",
    "nested",
    "objects",
    "um",
    "array",
    "properties",
    "um",
    "mixing",
    "together",
    "today",
    "video",
    "like",
    "said",
    "talking",
    "functions",
    "conditionals",
    "loop",
    "previous",
    "videos",
    "lessons",
    "three",
    "four",
    "talked",
    "um",
    "javascript",
    "variables",
    "declare",
    "assign",
    "variable",
    "also",
    "javascript",
    "expressions",
    "includes",
    "um",
    "different",
    "operators",
    "whether",
    "arithmetic",
    "operators",
    "assignment",
    "operators",
    "logical",
    "operators",
    "etc",
    "going",
    "video",
    "going",
    "cover",
    "lot",
    "ground",
    "um",
    "going",
    "supplement",
    "ton",
    "practice",
    "problems",
    "making",
    "video",
    "going",
    "25",
    "javascript",
    "challenges",
    "going",
    "walk",
    "kind",
    "explain",
    "going",
    "solving",
    "thinking",
    "going",
    "use",
    "topics",
    "covered",
    "within",
    "video",
    "previous",
    "lessons",
    "kind",
    "uh",
    "solve",
    "problems",
    "fill",
    "lot",
    "gaps",
    "covered",
    "main",
    "content",
    "right",
    "let",
    "jump",
    "conditionals",
    "javascript",
    "actually",
    "covered",
    "already",
    "um",
    "briefly",
    "previous",
    "lessons",
    "talked",
    "works",
    "though",
    "let",
    "show",
    "basic",
    "conditional",
    "statement",
    "going",
    "say",
    "string",
    "talking",
    "string",
    "data",
    "type",
    "triple",
    "equals",
    "comparing",
    "value",
    "data",
    "type",
    "uh",
    "another",
    "string",
    "obviously",
    "going",
    "equal",
    "although",
    "uh",
    "data",
    "type",
    "value",
    "case",
    "going",
    "strings",
    "equal",
    "going",
    "say",
    "else",
    "going",
    "strings",
    "equal",
    "right",
    "basic",
    "conditional",
    "statement",
    "press",
    "enter",
    "going",
    "see",
    "strings",
    "equal",
    "basically",
    "went",
    "second",
    "code",
    "path",
    "kind",
    "call",
    "different",
    "paths",
    "code",
    "take",
    "saying",
    "equal",
    "want",
    "execute",
    "code",
    "code",
    "within",
    "two",
    "brackets",
    "otherwise",
    "else",
    "going",
    "execute",
    "code",
    "two",
    "brackets",
    "couple",
    "things",
    "want",
    "point",
    "connect",
    "dots",
    "previous",
    "lesson",
    "talked",
    "let",
    "get",
    "basic",
    "structure",
    "statement",
    "else",
    "basically",
    "looking",
    "obviously",
    "indentation",
    "uh",
    "line",
    "breaks",
    "kind",
    "stuff",
    "format",
    "adding",
    "basic",
    "structure",
    "parentheses",
    "javascript",
    "expression",
    "brackets",
    "contains",
    "code",
    "truthy",
    "uh",
    "code",
    "path",
    "expression",
    "evaluates",
    "true",
    "brackets",
    "put",
    "code",
    "falsy",
    "path",
    "um",
    "expression",
    "false",
    "previously",
    "covered",
    "expressions",
    "javascript",
    "um",
    "terms",
    "variables",
    "might",
    "said",
    "something",
    "like",
    "uh",
    "know",
    "say",
    "20",
    "triple",
    "equals",
    "20",
    "um",
    "50",
    "triple",
    "equals",
    "50",
    "obviously",
    "uh",
    "going",
    "evaluate",
    "true",
    "combine",
    "operator",
    "whole",
    "expression",
    "evaluates",
    "true",
    "assign",
    "true",
    "value",
    "variable",
    "right",
    "looked",
    "um",
    "prior",
    "videos",
    "actually",
    "take",
    "expression",
    "right",
    "equal",
    "sign",
    "drop",
    "uh",
    "parentheses",
    "conditional",
    "statement",
    "different",
    "way",
    "use",
    "expression",
    "see",
    "lot",
    "um",
    "something",
    "think",
    "worth",
    "pointing",
    "going",
    "drop",
    "couple",
    "different",
    "ways",
    "write",
    "conditionals",
    "screen",
    "lot",
    "code",
    "going",
    "walk",
    "um",
    "let",
    "open",
    "declared",
    "couple",
    "variables",
    "top",
    "number",
    "two",
    "number",
    "variables",
    "20",
    "10",
    "javascript",
    "expression",
    "basically",
    "saying",
    "first",
    "number",
    "greater",
    "second",
    "number",
    "going",
    "result",
    "true",
    "put",
    "different",
    "conditionals",
    "ba",
    "basic",
    "one",
    "going",
    "uh",
    "basic",
    "statement",
    "even",
    "need",
    "else",
    "statement",
    "um",
    "end",
    "use",
    "actually",
    "really",
    "useful",
    "know",
    "see",
    "start",
    "coding",
    "comes",
    "play",
    "saying",
    "javascript",
    "expression",
    "equal",
    "true",
    "mean",
    "putting",
    "usually",
    "know",
    "kind",
    "getting",
    "used",
    "seeing",
    "like",
    "equal",
    "sign",
    "put",
    "expression",
    "well",
    "uh",
    "looking",
    "boolean",
    "drop",
    "parenthesis",
    "going",
    "going",
    "evaluate",
    "either",
    "true",
    "false",
    "since",
    "equal",
    "true",
    "would",
    "expect",
    "statement",
    "reached",
    "print",
    "expression",
    "true",
    "come",
    "first",
    "uh",
    "console",
    "log",
    "printed",
    "right",
    "moving",
    "next",
    "one",
    "else",
    "statement",
    "going",
    "skip",
    "covered",
    "basically",
    "js",
    "expression",
    "true",
    "um",
    "otherwise",
    "finally",
    "um",
    "include",
    "conditions",
    "else",
    "statement",
    "also",
    "add",
    "uh",
    "code",
    "paths",
    "code",
    "go",
    "equal",
    "true",
    "want",
    "expression",
    "true",
    "else",
    "first",
    "number",
    "greater",
    "zero",
    "basically",
    "saying",
    "let",
    "sorry",
    "closed",
    "js",
    "expression",
    "false",
    "going",
    "skip",
    "first",
    "uh",
    "block",
    "code",
    "going",
    "go",
    "next",
    "condition",
    "know",
    "get",
    "next",
    "condition",
    "first",
    "one",
    "going",
    "false",
    "know",
    "js",
    "expression",
    "false",
    "checking",
    "first",
    "number",
    "greater",
    "zero",
    "case",
    "going",
    "say",
    "expression",
    "false",
    "first",
    "number",
    "greater",
    "zero",
    "false",
    "expression",
    "false",
    "first",
    "number",
    "uh",
    "less",
    "equal",
    "zero",
    "going",
    "fall",
    "else",
    "statement",
    "basically",
    "catch",
    "condition",
    "might",
    "expression",
    "false",
    "first",
    "number",
    "z",
    "less",
    "case",
    "obviously",
    "variable",
    "true",
    "uh",
    "go",
    "first",
    "code",
    "path",
    "see",
    "expression",
    "true",
    "guess",
    "yeah",
    "expression",
    "true",
    "finally",
    "last",
    "one",
    "formatting",
    "uh",
    "difference",
    "statement",
    "put",
    "one",
    "line",
    "demonstrate",
    "format",
    "um",
    "know",
    "pretty",
    "like",
    "although",
    "helps",
    "code",
    "readability",
    "languages",
    "python",
    "indentation",
    "formatting",
    "actually",
    "matter",
    "running",
    "code",
    "javascript",
    "uh",
    "readability",
    "thing",
    "last",
    "type",
    "conditional",
    "might",
    "see",
    "called",
    "switch",
    "case",
    "statement",
    "equivalent",
    "um",
    "many",
    "ways",
    "else",
    "else",
    "else",
    "else",
    "uh",
    "type",
    "conditional",
    "lot",
    "conditions",
    "testing",
    "switch",
    "case",
    "statement",
    "might",
    "appropriate",
    "let",
    "paste",
    "um",
    "code",
    "screen",
    "going",
    "execute",
    "um",
    "output",
    "color",
    "blue",
    "see",
    "exactly",
    "second",
    "first",
    "put",
    "array",
    "put",
    "indexes",
    "indices",
    "top",
    "first",
    "one",
    "index",
    "0er",
    "1",
    "2",
    "3",
    "4",
    "get",
    "random",
    "index",
    "uh",
    "code",
    "wrote",
    "understand",
    "um",
    "basically",
    "going",
    "get",
    "random",
    "number",
    "0o",
    "four",
    "assign",
    "random",
    "index",
    "variable",
    "think",
    "random",
    "index",
    "variable",
    "carrying",
    "value",
    "0",
    "four",
    "happens",
    "correspond",
    "indexes",
    "colors",
    "array",
    "going",
    "grab",
    "random",
    "color",
    "array",
    "um",
    "remember",
    "get",
    "um",
    "something",
    "array",
    "passing",
    "index",
    "value",
    "using",
    "bracket",
    "notation",
    "since",
    "random",
    "index",
    "um",
    "carries",
    "one",
    "values",
    "pass",
    "colors",
    "array",
    "right",
    "side",
    "expression",
    "going",
    "evaluate",
    "one",
    "colors",
    "know",
    "one",
    "random",
    "index",
    "generated",
    "come",
    "write",
    "basic",
    "conditionals",
    "random",
    "color",
    "going",
    "uh",
    "one",
    "array",
    "values",
    "orange",
    "going",
    "say",
    "color",
    "orange",
    "kind",
    "look",
    "see",
    "thing",
    "different",
    "conditions",
    "get",
    "last",
    "lse",
    "statement",
    "color",
    "found",
    "never",
    "going",
    "happen",
    "uh",
    "know",
    "index",
    "0",
    "four",
    "case",
    "color",
    "turned",
    "blue",
    "random",
    "color",
    "random",
    "choice",
    "know",
    "developer",
    "happened",
    "reason",
    "bring",
    "else",
    "statement",
    "lot",
    "else",
    "ifs",
    "gets",
    "confusing",
    "tough",
    "read",
    "sometimes",
    "might",
    "want",
    "something",
    "like",
    "switch",
    "case",
    "statement",
    "show",
    "code",
    "written",
    "switch",
    "case",
    "format",
    "oh",
    "way",
    "tired",
    "getting",
    "uh",
    "browser",
    "console",
    "um",
    "remember",
    "rightclick",
    "inspect",
    "element",
    "get",
    "um",
    "promise",
    "going",
    "get",
    "actual",
    "code",
    "editor",
    "soon",
    "want",
    "keep",
    "um",
    "focused",
    "javascript",
    "getting",
    "setting",
    "local",
    "development",
    "environment",
    "yet",
    "anyways",
    "switch",
    "case",
    "statement",
    "um",
    "thing",
    "colors",
    "array",
    "random",
    "index",
    "random",
    "color",
    "obviously",
    "since",
    "random",
    "might",
    "blue",
    "think",
    "one",
    "last",
    "saw",
    "let",
    "press",
    "enter",
    "turn",
    "blue",
    "um",
    "might",
    "coincidence",
    "basically",
    "everything",
    "come",
    "switch",
    "statement",
    "saying",
    "switch",
    "statement",
    "put",
    "expression",
    "evaluating",
    "parentheses",
    "similar",
    "uh",
    "else",
    "statement",
    "um",
    "put",
    "condition",
    "parentheses",
    "come",
    "little",
    "uh",
    "brackets",
    "going",
    "contain",
    "bunch",
    "cases",
    "case",
    "orange",
    "words",
    "random",
    "color",
    "variable",
    "evaluates",
    "value",
    "orange",
    "going",
    "hit",
    "code",
    "right",
    "hit",
    "code",
    "sorry",
    "hit",
    "code",
    "color",
    "orange",
    "going",
    "print",
    "console",
    "break",
    "statement",
    "special",
    "statement",
    "write",
    "basically",
    "say",
    "okay",
    "found",
    "correct",
    "case",
    "stop",
    "executing",
    "code",
    "entirely",
    "get",
    "random",
    "color",
    "orange",
    "going",
    "print",
    "console",
    "going",
    "break",
    "basically",
    "rest",
    "code",
    "never",
    "reached",
    "broke",
    "statement",
    "basically",
    "going",
    "um",
    "different",
    "cases",
    "saying",
    "okay",
    "random",
    "color",
    "equal",
    "equal",
    "orange",
    "okay",
    "equal",
    "green",
    "equal",
    "yellow",
    "purple",
    "finally",
    "get",
    "blue",
    "equal",
    "going",
    "console",
    "log",
    "break",
    "uh",
    "switch",
    "case",
    "statement",
    "last",
    "condition",
    "called",
    "default",
    "basically",
    "catchall",
    "else",
    "statement",
    "uh",
    "conditional",
    "saying",
    "random",
    "color",
    "evaluate",
    "cases",
    "let",
    "go",
    "default",
    "value",
    "going",
    "say",
    "color",
    "found",
    "basic",
    "switch",
    "case",
    "statement",
    "let",
    "write",
    "uh",
    "let",
    "refresh",
    "going",
    "write",
    "little",
    "bit",
    "simpler",
    "format",
    "switch",
    "case",
    "um",
    "different",
    "cases",
    "break",
    "statements",
    "obviously",
    "valid",
    "switch",
    "put",
    "condition",
    "javascript",
    "expression",
    "brackets",
    "put",
    "different",
    "cases",
    "switch",
    "state",
    "switch",
    "case",
    "statements",
    "often",
    "going",
    "use",
    "well",
    "uh",
    "experience",
    "used",
    "ton",
    "usually",
    "statement",
    "else",
    "statement",
    "going",
    "sufficient",
    "often",
    "times",
    "start",
    "using",
    "many",
    "uh",
    "switch",
    "case",
    "statements",
    "kind",
    "indication",
    "may",
    "writing",
    "efficient",
    "code",
    "worry",
    "later",
    "uh",
    "right",
    "want",
    "kind",
    "aware",
    "understand",
    "works",
    "uh",
    "familiar",
    "look",
    "try",
    "use",
    "first",
    "time",
    "right",
    "continuing",
    "lesson",
    "five",
    "conditionals",
    "functions",
    "loops",
    "going",
    "talk",
    "loops",
    "right",
    "looping",
    "javascript",
    "effective",
    "concept",
    "use",
    "time",
    "really",
    "understand",
    "um",
    "whole",
    "lot",
    "think",
    "hardest",
    "thing",
    "understanding",
    "need",
    "loops",
    "first",
    "place",
    "go",
    "coding",
    "challenges",
    "uh",
    "little",
    "bit",
    "later",
    "coding",
    "challenges",
    "general",
    "um",
    "going",
    "use",
    "loops",
    "lot",
    "generally",
    "solve",
    "sort",
    "challenge",
    "often",
    "wonder",
    "well",
    "actually",
    "need",
    "real",
    "world",
    "reason",
    "um",
    "least",
    "opinion",
    "reason",
    "loops",
    "um",
    "common",
    "use",
    "case",
    "loop",
    "iterate",
    "loop",
    "set",
    "resources",
    "talking",
    "something",
    "called",
    "resource",
    "um",
    "basically",
    "saying",
    "uh",
    "bunch",
    "uh",
    "pieces",
    "data",
    "similar",
    "often",
    "stored",
    "database",
    "might",
    "include",
    "something",
    "like",
    "um",
    "blog",
    "might",
    "blog",
    "post",
    "um",
    "trying",
    "think",
    "another",
    "thing",
    "running",
    "app",
    "bunch",
    "users",
    "lot",
    "different",
    "concepts",
    "um",
    "replicate",
    "basically",
    "resources",
    "list",
    "similar",
    "types",
    "data",
    "efficient",
    "actually",
    "loop",
    "manually",
    "print",
    "array",
    "something",
    "like",
    "say",
    "array",
    "20",
    "40",
    "60",
    "something",
    "like",
    "go",
    "ahead",
    "print",
    "console",
    "using",
    "bracket",
    "bracket",
    "notation",
    "array",
    "zero",
    "array",
    "index",
    "one",
    "array",
    "index",
    "2",
    "manually",
    "print",
    "value",
    "array",
    "thousand",
    "uh",
    "different",
    "blog",
    "posts",
    "want",
    "render",
    "onto",
    "web",
    "page",
    "going",
    "efficient",
    "enough",
    "go",
    "code",
    "start",
    "typing",
    "every",
    "index",
    "add",
    "new",
    "blog",
    "posts",
    "database",
    "going",
    "go",
    "change",
    "code",
    "going",
    "extremely",
    "cumbersome",
    "recommended",
    "wo",
    "get",
    "away",
    "software",
    "engineering",
    "things",
    "efficiently",
    "loops",
    "come",
    "demonstrate",
    "let",
    "take",
    "look",
    "uh",
    "maybe",
    "sample",
    "array",
    "blog",
    "post",
    "something",
    "seen",
    "uh",
    "tutorial",
    "videos",
    "writing",
    "arrays",
    "single",
    "line",
    "ar",
    "rays",
    "like",
    "know",
    "conditionals",
    "anything",
    "else",
    "javascript",
    "indented",
    "broken",
    "onto",
    "different",
    "lines",
    "formatting",
    "uh",
    "thing",
    "basically",
    "three",
    "different",
    "objects",
    "one",
    "object",
    "another",
    "object",
    "third",
    "see",
    "objects",
    "similar",
    "looking",
    "title",
    "property",
    "author",
    "property",
    "uh",
    "publish",
    "date",
    "content",
    "obviously",
    "values",
    "properties",
    "going",
    "little",
    "bit",
    "different",
    "objects",
    "see",
    "know",
    "already",
    "start",
    "infer",
    "looping",
    "array",
    "blog",
    "post",
    "use",
    "fact",
    "similar",
    "properties",
    "let",
    "show",
    "something",
    "really",
    "quickly",
    "could",
    "using",
    "loop",
    "going",
    "explain",
    "loop",
    "works",
    "yet",
    "show",
    "talking",
    "let",
    "collapse",
    "um",
    "room",
    "going",
    "paste",
    "line",
    "code",
    "call",
    "loop",
    "several",
    "ways",
    "write",
    "loop",
    "going",
    "cover",
    "quite",
    "yet",
    "see",
    "instead",
    "hardcoding",
    "index",
    "uh",
    "indices",
    "passing",
    "blog",
    "post",
    "array",
    "words",
    "want",
    "retrieve",
    "certain",
    "uh",
    "blogpost",
    "uh",
    "object",
    "array",
    "would",
    "need",
    "index",
    "instead",
    "hardcoding",
    "using",
    "variable",
    "called",
    "first",
    "four",
    "variables",
    "grabbing",
    "specific",
    "object",
    "array",
    "grabbing",
    "one",
    "taking",
    "properties",
    "grabbing",
    "value",
    "properties",
    "assigning",
    "variable",
    "printing",
    "variables",
    "press",
    "enter",
    "going",
    "see",
    "loops",
    "blog",
    "post",
    "pretty",
    "much",
    "instantaneously",
    "least",
    "seems",
    "like",
    "human",
    "brain",
    "um",
    "going",
    "loop",
    "going",
    "print",
    "uh",
    "values",
    "blog",
    "posts",
    "first",
    "one",
    "javascript",
    "december",
    "20th",
    "2020",
    "post",
    "content",
    "see",
    "first",
    "object",
    "array",
    "go",
    "arrays",
    "work",
    "long",
    "take",
    "learn",
    "coding",
    "see",
    "finally",
    "bottom",
    "looped",
    "every",
    "blog",
    "post",
    "array",
    "let",
    "talk",
    "arrays",
    "actually",
    "work",
    "going",
    "go",
    "little",
    "bit",
    "simpler",
    "examples",
    "really",
    "isolate",
    "concepts",
    "head",
    "let",
    "write",
    "basic",
    "loop",
    "javascript",
    "going",
    "let",
    "equals",
    "z",
    "going",
    "go",
    "uh",
    "equal",
    "100",
    "arbitrary",
    "number",
    "coming",
    "obviously",
    "pass",
    "variable",
    "place",
    "like",
    "first",
    "example",
    "going",
    "increment",
    "value",
    "remember",
    "last",
    "um",
    "lesson",
    "basically",
    "thing",
    "going",
    "come",
    "second",
    "thing",
    "saying",
    "equal",
    "1",
    "basically",
    "saying",
    "zero",
    "going",
    "increment",
    "one",
    "going",
    "put",
    "brackets",
    "press",
    "enter",
    "everything",
    "within",
    "brackets",
    "going",
    "considered",
    "one",
    "iteration",
    "loop",
    "code",
    "within",
    "brackets",
    "going",
    "executed",
    "many",
    "times",
    "loop",
    "case",
    "set",
    "uh",
    "stop",
    "condition",
    "100",
    "let",
    "walk",
    "kind",
    "connect",
    "dots",
    "previous",
    "lessons",
    "talked",
    "series",
    "think",
    "going",
    "really",
    "understand",
    "first",
    "thing",
    "see",
    "declare",
    "loop",
    "using",
    "four",
    "keyword",
    "similar",
    "statement",
    "say",
    "put",
    "parentheses",
    "brackets",
    "saying",
    "parentheses",
    "going",
    "loop",
    "conditions",
    "first",
    "one",
    "going",
    "variable",
    "looping",
    "let",
    "equals",
    "z",
    "notice",
    "semicolon",
    "end",
    "statement",
    "starting",
    "value",
    "zero",
    "reason",
    "start",
    "value",
    "zero",
    "arrays",
    "start",
    "index",
    "zero",
    "makes",
    "sense",
    "looping",
    "array",
    "want",
    "start",
    "first",
    "value",
    "array",
    "index",
    "zero",
    "might",
    "also",
    "ask",
    "choose",
    "well",
    "variable",
    "could",
    "put",
    "anything",
    "want",
    "could",
    "say",
    "iterator",
    "something",
    "like",
    "replace",
    "occurrence",
    "new",
    "variable",
    "choose",
    "whatever",
    "variable",
    "name",
    "want",
    "see",
    "entire",
    "expression",
    "similar",
    "exact",
    "thing",
    "use",
    "declare",
    "variable",
    "javascript",
    "one",
    "thing",
    "notice",
    "using",
    "let",
    "keyword",
    "really",
    "important",
    "important",
    "iterator",
    "variable",
    "going",
    "flip",
    "back",
    "really",
    "quickly",
    "kind",
    "like",
    "industry",
    "standard",
    "lot",
    "uh",
    "developers",
    "use",
    "convention",
    "uh",
    "looping",
    "going",
    "use",
    "let",
    "keyword",
    "going",
    "reassigned",
    "throughout",
    "loop",
    "see",
    "end",
    "talked",
    "going",
    "add",
    "one",
    "iteration",
    "loop",
    "basically",
    "thing",
    "reassigning",
    "remember",
    "previous",
    "lesson",
    "try",
    "use",
    "increment",
    "operator",
    "variable",
    "declared",
    "const",
    "keyword",
    "work",
    "throws",
    "air",
    "need",
    "let",
    "keyword",
    "finally",
    "uh",
    "code",
    "middle",
    "probably",
    "difficult",
    "understand",
    "stop",
    "condition",
    "basically",
    "saying",
    "want",
    "go",
    "loop",
    "want",
    "many",
    "loops",
    "equals",
    "value",
    "100",
    "time",
    "go",
    "loop",
    "going",
    "increment",
    "one",
    "basically",
    "since",
    "starting",
    "zero",
    "saying",
    "less",
    "going",
    "go",
    "100",
    "iterations",
    "loop",
    "going",
    "demonstrate",
    "want",
    "value",
    "going",
    "see",
    "press",
    "enter",
    "going",
    "go",
    "um",
    "0",
    "99",
    "press",
    "enter",
    "got",
    "99",
    "bottom",
    "started",
    "zero",
    "100",
    "iterations",
    "remember",
    "starting",
    "zero",
    "ending",
    "99",
    "significance",
    "know",
    "printed",
    "printed",
    "number",
    "sorts",
    "things",
    "um",
    "like",
    "saw",
    "blog",
    "post",
    "array",
    "loop",
    "blog",
    "post",
    "array",
    "um",
    "assign",
    "values",
    "kind",
    "stuff",
    "finish",
    "topic",
    "let",
    "go",
    "super",
    "simple",
    "example",
    "let",
    "make",
    "array",
    "uh",
    "call",
    "arr",
    "array",
    "going",
    "put",
    "um",
    "couple",
    "different",
    "values",
    "going",
    "put",
    "random",
    "strings",
    "string",
    "values",
    "nothing",
    "significance",
    "um",
    "know",
    "put",
    "whatever",
    "want",
    "let",
    "put",
    "numbers",
    "couple",
    "strings",
    "going",
    "combine",
    "uh",
    "knowledge",
    "conditionals",
    "looked",
    "previous",
    "video",
    "um",
    "looping",
    "example",
    "let",
    "write",
    "loop",
    "say",
    "equals",
    "z",
    "want",
    "go",
    "um",
    "array",
    "complete",
    "complete",
    "use",
    "quite",
    "often",
    "going",
    "look",
    "array",
    "looping",
    "going",
    "grab",
    "length",
    "array",
    "um",
    "basically",
    "means",
    "going",
    "loop",
    "nothing",
    "left",
    "loop",
    "common",
    "thing",
    "see",
    "within",
    "arrays",
    "course",
    "increment",
    "operator",
    "jump",
    "loop",
    "case",
    "want",
    "set",
    "conditional",
    "going",
    "say",
    "type",
    "um",
    "array",
    "pass",
    "remember",
    "going",
    "incrementing",
    "um",
    "loop",
    "uh",
    "iteration",
    "loop",
    "starts",
    "zero",
    "goes",
    "1",
    "2",
    "3",
    "4",
    "5",
    "way",
    "length",
    "array",
    "pass",
    "basically",
    "saying",
    "okay",
    "want",
    "grab",
    "whatever",
    "array",
    "index",
    "current",
    "currently",
    "start",
    "zero",
    "grab",
    "first",
    "value",
    "go",
    "one",
    "grab",
    "value",
    "forth",
    "saying",
    "type",
    "array",
    "value",
    "basically",
    "equivalent",
    "uh",
    "first",
    "iteration",
    "array",
    "copy",
    "um",
    "first",
    "iteration",
    "basically",
    "going",
    "saying",
    "type",
    "value",
    "course",
    "going",
    "return",
    "string",
    "seen",
    "prior",
    "videos",
    "numbers",
    "going",
    "return",
    "type",
    "number",
    "let",
    "uh",
    "bring",
    "back",
    "previously",
    "grab",
    "array",
    "variable",
    "pass",
    "going",
    "say",
    "type",
    "array",
    "actually",
    "even",
    "put",
    "condition",
    "equals",
    "number",
    "return",
    "one",
    "numbers",
    "want",
    "array",
    "index",
    "bas",
    "basically",
    "uh",
    "loop",
    "going",
    "going",
    "loop",
    "entire",
    "array",
    "going",
    "look",
    "value",
    "see",
    "number",
    "going",
    "print",
    "console",
    "words",
    "going",
    "skip",
    "gibberish",
    "strings",
    "put",
    "let",
    "press",
    "enter",
    "see",
    "numbers",
    "printing",
    "super",
    "simple",
    "example",
    "demonstrates",
    "use",
    "array",
    "quickly",
    "iterate",
    "um",
    "use",
    "loop",
    "sorry",
    "iterate",
    "array",
    "part",
    "lesson",
    "five",
    "talking",
    "functions",
    "finally",
    "get",
    "something",
    "fun",
    "javascript",
    "previous",
    "videos",
    "previous",
    "lessons",
    "talking",
    "uh",
    "rather",
    "mundane",
    "parts",
    "javascript",
    "things",
    "ca",
    "really",
    "much",
    "combine",
    "concepts",
    "functions",
    "limitless",
    "possibilities",
    "um",
    "javascript",
    "course",
    "things",
    "like",
    "said",
    "video",
    "series",
    "series",
    "taking",
    "important",
    "parts",
    "going",
    "super",
    "fine",
    "details",
    "yet",
    "going",
    "practice",
    "problems",
    "real",
    "world",
    "practice",
    "going",
    "fill",
    "gaps",
    "talking",
    "functions",
    "video",
    "first",
    "way",
    "want",
    "start",
    "writing",
    "basic",
    "function",
    "write",
    "function",
    "javascript",
    "going",
    "say",
    "function",
    "notice",
    "kind",
    "similar",
    "uh",
    "statements",
    "conditionals",
    "loops",
    "sort",
    "keyword",
    "beginning",
    "well",
    "different",
    "name",
    "function",
    "parentheses",
    "kind",
    "similar",
    "syntax",
    "uh",
    "brackets",
    "code",
    "go",
    "function",
    "give",
    "name",
    "parentheses",
    "actually",
    "put",
    "anything",
    "talk",
    "second",
    "let",
    "go",
    "ahead",
    "print",
    "something",
    "hello",
    "world",
    "first",
    "function",
    "going",
    "end",
    "statement",
    "semicolon",
    "press",
    "enter",
    "notice",
    "anything",
    "different",
    "talked",
    "previous",
    "concepts",
    "um",
    "everything",
    "happens",
    "remember",
    "know",
    "declare",
    "variable",
    "set",
    "equal",
    "20",
    "something",
    "like",
    "press",
    "enter",
    "variable",
    "declared",
    "assigned",
    "time",
    "functions",
    "happening",
    "break",
    "steps",
    "two",
    "steps",
    "done",
    "declared",
    "function",
    "done",
    "called",
    "function",
    "call",
    "invoked",
    "function",
    "kind",
    "synonymous",
    "terms",
    "order",
    "grab",
    "name",
    "function",
    "see",
    "similar",
    "variable",
    "function",
    "uh",
    "word",
    "right",
    "variable",
    "computer",
    "remembers",
    "since",
    "computer",
    "remembers",
    "since",
    "already",
    "declared",
    "going",
    "uh",
    "recognize",
    "type",
    "said",
    "type",
    "function",
    "going",
    "give",
    "us",
    "function",
    "remembers",
    "execute",
    "kind",
    "using",
    "different",
    "words",
    "execute",
    "function",
    "call",
    "function",
    "invoke",
    "function",
    "uh",
    "purposes",
    "thing",
    "anyways",
    "call",
    "function",
    "using",
    "two",
    "parentheses",
    "right",
    "semicolon",
    "press",
    "enter",
    "going",
    "say",
    "hello",
    "world",
    "first",
    "function",
    "ran",
    "code",
    "within",
    "function",
    "review",
    "functions",
    "first",
    "declare",
    "call",
    "invoke",
    "execute",
    "kind",
    "terminology",
    "one",
    "way",
    "uh",
    "declare",
    "call",
    "call",
    "function",
    "step",
    "although",
    "going",
    "use",
    "often",
    "want",
    "show",
    "awareness",
    "called",
    "immediately",
    "invoked",
    "function",
    "let",
    "say",
    "write",
    "um",
    "another",
    "function",
    "another",
    "function",
    "enter",
    "say",
    "hello",
    "pressed",
    "enter",
    "going",
    "declare",
    "wrap",
    "entire",
    "function",
    "parentheses",
    "put",
    "parentheses",
    "used",
    "call",
    "end",
    "semicolon",
    "going",
    "get",
    "function",
    "declare",
    "execute",
    "um",
    "time",
    "obviously",
    "computer",
    "different",
    "steps",
    "purposes",
    "happening",
    "call",
    "immediately",
    "invoked",
    "function",
    "like",
    "said",
    "going",
    "use",
    "ton",
    "aware",
    "might",
    "pop",
    "stack",
    "overflow",
    "answers",
    "might",
    "even",
    "use",
    "point",
    "got",
    "basic",
    "function",
    "useful",
    "like",
    "going",
    "function",
    "wrote",
    "obviously",
    "thing",
    "want",
    "introduce",
    "next",
    "concept",
    "parameters",
    "arguments",
    "would",
    "say",
    "two",
    "terms",
    "kind",
    "uh",
    "two",
    "sides",
    "coin",
    "get",
    "advanced",
    "programming",
    "uh",
    "programmers",
    "probably",
    "going",
    "using",
    "parameters",
    "arguments",
    "uh",
    "terms",
    "interchangeably",
    "like",
    "said",
    "two",
    "sides",
    "coin",
    "purposes",
    "going",
    "distinguish",
    "let",
    "write",
    "function",
    "say",
    "function",
    "enter",
    "onto",
    "new",
    "line",
    "want",
    "add",
    "parentheses",
    "going",
    "something",
    "called",
    "parameter",
    "parameters",
    "basically",
    "saying",
    "uh",
    "computer",
    "hey",
    "computer",
    "um",
    "going",
    "pass",
    "uh",
    "sort",
    "values",
    "function",
    "ready",
    "basically",
    "going",
    "say",
    "function",
    "hey",
    "going",
    "pass",
    "number",
    "going",
    "pass",
    "string",
    "value",
    "obviously",
    "javascript",
    "dynamically",
    "typed",
    "language",
    "say",
    "like",
    "number",
    "string",
    "example",
    "maybe",
    "could",
    "even",
    "say",
    "something",
    "like",
    "pam",
    "one",
    "pam",
    "2",
    "let",
    "go",
    "arbitrary",
    "names",
    "want",
    "console",
    "log",
    "pam",
    "one",
    "go",
    "new",
    "line",
    "oh",
    "accidentally",
    "messed",
    "let",
    "go",
    "ahead",
    "try",
    "oh",
    "really",
    "messed",
    "okay",
    "one",
    "second",
    "let",
    "refresh",
    "browser",
    "clear",
    "need",
    "enter",
    "new",
    "line",
    "pram",
    "2",
    "right",
    "taking",
    "value",
    "pam",
    "1",
    "value",
    "pam",
    "2",
    "case",
    "within",
    "function",
    "variables",
    "variables",
    "retrieve",
    "value",
    "print",
    "going",
    "declare",
    "function",
    "well",
    "see",
    "uh",
    "little",
    "bit",
    "later",
    "day",
    "take",
    "break",
    "getting",
    "back",
    "talking",
    "talking",
    "parameters",
    "question",
    "equal",
    "pram",
    "1",
    "pram",
    "2",
    "equal",
    "well",
    "answer",
    "know",
    "yet",
    "know",
    "assigned",
    "call",
    "arguments",
    "know",
    "declared",
    "function",
    "still",
    "call",
    "invoke",
    "know",
    "put",
    "little",
    "parentheses",
    "end",
    "press",
    "enter",
    "press",
    "enter",
    "right",
    "going",
    "return",
    "undefined",
    "pass",
    "parameters",
    "code",
    "tries",
    "execute",
    "tries",
    "reference",
    "parameter",
    "variables",
    "value",
    "grab",
    "never",
    "gave",
    "value",
    "answer",
    "question",
    "represent",
    "well",
    "represent",
    "arguments",
    "pass",
    "function",
    "function",
    "pass",
    "say",
    "number",
    "string",
    "sort",
    "call",
    "arguments",
    "like",
    "said",
    "arguments",
    "parameters",
    "kind",
    "know",
    "two",
    "sides",
    "coin",
    "case",
    "whatever",
    "pass",
    "values",
    "pass",
    "called",
    "arguments",
    "initial",
    "variables",
    "declaring",
    "would",
    "parameters",
    "20",
    "going",
    "correspond",
    "pam",
    "one",
    "string",
    "going",
    "correspond",
    "pam",
    "2",
    "get",
    "uh",
    "20",
    "string",
    "printed",
    "run",
    "function",
    "worry",
    "little",
    "undefined",
    "kind",
    "part",
    "console",
    "got",
    "20",
    "string",
    "printed",
    "order",
    "according",
    "function",
    "wrote",
    "basic",
    "overview",
    "uh",
    "arguments",
    "parameters",
    "next",
    "thing",
    "going",
    "talk",
    "brief",
    "introduction",
    "scopes",
    "javascript",
    "say",
    "scope",
    "generally",
    "referring",
    "variables",
    "available",
    "code",
    "words",
    "notice",
    "pam",
    "1",
    "pam",
    "2",
    "used",
    "within",
    "function",
    "try",
    "print",
    "pam",
    "one",
    "console",
    "going",
    "work",
    "reason",
    "pam",
    "1",
    "available",
    "global",
    "scope",
    "available",
    "function",
    "scope",
    "code",
    "written",
    "two",
    "little",
    "brackets",
    "right",
    "pass",
    "values",
    "available",
    "function",
    "available",
    "rest",
    "code",
    "writing",
    "file",
    "console",
    "know",
    "writing",
    "code",
    "basic",
    "introduction",
    "scopes",
    "lot",
    "topic",
    "said",
    "trying",
    "cover",
    "every",
    "last",
    "detail",
    "javascript",
    "um",
    "something",
    "think",
    "fill",
    "kind",
    "uh",
    "outside",
    "tutorial",
    "practice",
    "problems",
    "get",
    "like",
    "real",
    "world",
    "examples",
    "start",
    "understand",
    "scopes",
    "try",
    "know",
    "point",
    "go",
    "like",
    "said",
    "know",
    "javascript",
    "series",
    "great",
    "way",
    "get",
    "super",
    "deep",
    "dive",
    "things",
    "um",
    "topics",
    "like",
    "topic",
    "scopes",
    "beware",
    "complicated",
    "lot",
    "confusion",
    "kind",
    "go",
    "route",
    "time",
    "shown",
    "write",
    "function",
    "see",
    "screen",
    "right",
    "actually",
    "another",
    "way",
    "write",
    "function",
    "let",
    "show",
    "done",
    "let",
    "go",
    "ahead",
    "clear",
    "uh",
    "console",
    "create",
    "function",
    "like",
    "used",
    "creating",
    "parameters",
    "going",
    "basic",
    "function",
    "console",
    "log",
    "something",
    "right",
    "basic",
    "function",
    "another",
    "way",
    "could",
    "write",
    "assigning",
    "variable",
    "case",
    "function",
    "variable",
    "already",
    "defined",
    "represents",
    "function",
    "ca",
    "use",
    "variable",
    "declaration",
    "say",
    "something",
    "like",
    "another",
    "function",
    "want",
    "set",
    "equal",
    "function",
    "normal",
    "variable",
    "say",
    "function",
    "define",
    "another",
    "thing",
    "right",
    "set",
    "equal",
    "another",
    "function",
    "say",
    "type",
    "another",
    "function",
    "going",
    "give",
    "us",
    "type",
    "function",
    "saying",
    "word",
    "lot",
    "got",
    "slow",
    "anyways",
    "wanted",
    "invoke",
    "function",
    "call",
    "works",
    "way",
    "using",
    "like",
    "call",
    "function",
    "like",
    "prints",
    "something",
    "invoke",
    "another",
    "function",
    "exact",
    "way",
    "even",
    "though",
    "variable",
    "little",
    "uh",
    "subtle",
    "differences",
    "two",
    "uh",
    "ways",
    "writing",
    "functions",
    "like",
    "said",
    "gets",
    "details",
    "quite",
    "ready",
    "going",
    "leave",
    "details",
    "essential",
    "write",
    "good",
    "code",
    "get",
    "running",
    "like",
    "edge",
    "cases",
    "code",
    "work",
    "ca",
    "figure",
    "well",
    "subtle",
    "nuance",
    "would",
    "worry",
    "much",
    "right",
    "got",
    "two",
    "different",
    "ways",
    "main",
    "difference",
    "want",
    "recognize",
    "fact",
    "function",
    "right",
    "name",
    "call",
    "anonymous",
    "function",
    "reason",
    "use",
    "anonymous",
    "function",
    "assigning",
    "variable",
    "giving",
    "name",
    "give",
    "name",
    "done",
    "tried",
    "write",
    "function",
    "without",
    "name",
    "something",
    "like",
    "going",
    "get",
    "work",
    "anonymous",
    "function",
    "need",
    "declare",
    "sort",
    "name",
    "see",
    "syntax",
    "says",
    "function",
    "statement",
    "requires",
    "name",
    "valid",
    "anonymous",
    "assign",
    "variable",
    "another",
    "way",
    "write",
    "functions",
    "little",
    "bit",
    "tricky",
    "like",
    "cover",
    "going",
    "using",
    "next",
    "type",
    "writing",
    "function",
    "ton",
    "2015",
    "es6",
    "standard",
    "came",
    "remember",
    "back",
    "think",
    "lesson",
    "two",
    "talked",
    "ecmascript",
    "standard",
    "um",
    "standards",
    "body",
    "basically",
    "defines",
    "spec",
    "javascript",
    "language",
    "well",
    "upgraded",
    "spec",
    "2015",
    "es6",
    "came",
    "something",
    "called",
    "arrow",
    "function",
    "arrow",
    "function",
    "looks",
    "like",
    "um",
    "say",
    "arrow",
    "function",
    "equals",
    "put",
    "parentheses",
    "put",
    "arrow",
    "write",
    "like",
    "normal",
    "say",
    "arrow",
    "function",
    "right",
    "press",
    "enter",
    "like",
    "functions",
    "call",
    "invoke",
    "way",
    "press",
    "arrow",
    "function",
    "two",
    "parentheses",
    "end",
    "boom",
    "executes",
    "functionally",
    "equivalent",
    "way",
    "um",
    "subtle",
    "nuances",
    "going",
    "get",
    "arrow",
    "function",
    "mainly",
    "improves",
    "readability",
    "another",
    "benefit",
    "um",
    "really",
    "helps",
    "scopes",
    "know",
    "code",
    "specifically",
    "keyword",
    "get",
    "much",
    "later",
    "um",
    "improve",
    "came",
    "first",
    "place",
    "um",
    "different",
    "way",
    "writing",
    "function",
    "basic",
    "syntax",
    "little",
    "parenthesis",
    "basically",
    "put",
    "parameters",
    "arrow",
    "call",
    "arrow",
    "function",
    "equal",
    "sign",
    "right",
    "carot",
    "greater",
    "sign",
    "two",
    "brackets",
    "like",
    "would",
    "function",
    "use",
    "alone",
    "kind",
    "similar",
    "anonymous",
    "function",
    "looked",
    "ca",
    "define",
    "function",
    "like",
    "know",
    "wo",
    "work",
    "name",
    "name",
    "specified",
    "um",
    "throw",
    "air",
    "like",
    "previous",
    "one",
    "way",
    "referencing",
    "back",
    "know",
    "actually",
    "call",
    "name",
    "assign",
    "anonymous",
    "functions",
    "arrow",
    "functions",
    "sort",
    "variable",
    "arrow",
    "functions",
    "anonymous",
    "functions",
    "also",
    "used",
    "something",
    "called",
    "callback",
    "going",
    "little",
    "bit",
    "later",
    "road",
    "right",
    "going",
    "focusing",
    "lot",
    "arrow",
    "functions",
    "going",
    "writing",
    "part",
    "obviously",
    "defining",
    "function",
    "write",
    "know",
    "normal",
    "syntax",
    "write",
    "name",
    "parentheses",
    "like",
    "lot",
    "cases",
    "assign",
    "variable",
    "like",
    "get",
    "practicing",
    "arrow",
    "functions",
    "going",
    "use",
    "much",
    "next",
    "thing",
    "going",
    "talk",
    "concept",
    "return",
    "values",
    "functions",
    "far",
    "returned",
    "anything",
    "functions",
    "writing",
    "let",
    "say",
    "function",
    "save",
    "variable",
    "use",
    "arrow",
    "function",
    "syntax",
    "something",
    "right",
    "simple",
    "function",
    "actually",
    "return",
    "anything",
    "assign",
    "result",
    "variable",
    "going",
    "say",
    "function",
    "going",
    "call",
    "remember",
    "uh",
    "executing",
    "function",
    "defined",
    "assigning",
    "result",
    "function",
    "result",
    "variable",
    "press",
    "enter",
    "executed",
    "part",
    "function",
    "type",
    "result",
    "going",
    "give",
    "us",
    "undefined",
    "reason",
    "function",
    "return",
    "anything",
    "want",
    "function",
    "produce",
    "value",
    "put",
    "return",
    "statement",
    "right",
    "let",
    "go",
    "ahead",
    "um",
    "return",
    "function",
    "going",
    "name",
    "variable",
    "use",
    "arrow",
    "syntax",
    "enter",
    "time",
    "going",
    "return",
    "value",
    "20",
    "also",
    "could",
    "returned",
    "know",
    "string",
    "also",
    "could",
    "returned",
    "variable",
    "wanted",
    "know",
    "make",
    "variable",
    "called",
    "equals",
    "20",
    "um",
    "oh",
    "accidentally",
    "uh",
    "hit",
    "enter",
    "wanted",
    "could",
    "come",
    "return",
    "going",
    "bug",
    "already",
    "declared",
    "like",
    "right",
    "accident",
    "let",
    "let",
    "refresh",
    "page",
    "real",
    "quick",
    "get",
    "back",
    "um",
    "say",
    "function",
    "time",
    "got",
    "fat",
    "arrow",
    "function",
    "enter",
    "define",
    "variable",
    "set",
    "20",
    "return",
    "variable",
    "could",
    "also",
    "return",
    "like",
    "sort",
    "expression",
    "wanted",
    "return",
    "greater",
    "30",
    "obviously",
    "would",
    "return",
    "false",
    "let",
    "see",
    "know",
    "different",
    "uh",
    "return",
    "types",
    "affect",
    "function",
    "going",
    "return",
    "20",
    "want",
    "set",
    "equal",
    "result",
    "variable",
    "get",
    "function",
    "going",
    "execute",
    "assign",
    "result",
    "result",
    "variable",
    "print",
    "result",
    "going",
    "equal",
    "20",
    "took",
    "result",
    "value",
    "function",
    "assigned",
    "variable",
    "like",
    "said",
    "um",
    "expressions",
    "wanted",
    "define",
    "another",
    "function",
    "put",
    "two",
    "end",
    "unique",
    "want",
    "say",
    "less",
    "uh",
    "30",
    "return",
    "true",
    "going",
    "put",
    "comment",
    "therefore",
    "would",
    "expect",
    "whole",
    "function",
    "going",
    "um",
    "evaluate",
    "last",
    "expression",
    "return",
    "let",
    "press",
    "enter",
    "say",
    "result",
    "2",
    "equal",
    "function",
    "2",
    "get",
    "value",
    "going",
    "true",
    "see",
    "lot",
    "different",
    "things",
    "return",
    "function",
    "heck",
    "could",
    "even",
    "return",
    "function",
    "function",
    "getting",
    "way",
    "much",
    "detail",
    "necessary",
    "trying",
    "going",
    "skip",
    "hopefully",
    "gives",
    "brief",
    "overview",
    "return",
    "values",
    "last",
    "thing",
    "talk",
    "happens",
    "return",
    "value",
    "let",
    "say",
    "going",
    "go",
    "ahead",
    "clear",
    "screen",
    "um",
    "say",
    "improper",
    "return",
    "function",
    "going",
    "set",
    "equal",
    "arrow",
    "function",
    "going",
    "return",
    "20",
    "let",
    "go",
    "ahead",
    "set",
    "variable",
    "um",
    "mess",
    "kind",
    "tough",
    "working",
    "console",
    "eventually",
    "get",
    "code",
    "editor",
    "going",
    "lot",
    "easier",
    "us",
    "let",
    "say",
    "function",
    "one",
    "time",
    "case",
    "let",
    "define",
    "variable",
    "say",
    "let",
    "um",
    "number",
    "equal",
    "20",
    "going",
    "return",
    "number",
    "let",
    "enter",
    "onto",
    "next",
    "line",
    "say",
    "number",
    "equals",
    "50",
    "right",
    "going",
    "press",
    "enter",
    "going",
    "give",
    "us",
    "air",
    "says",
    "unreachable",
    "code",
    "return",
    "statement",
    "wo",
    "get",
    "like",
    "console",
    "may",
    "get",
    "error",
    "anywhere",
    "else",
    "giving",
    "us",
    "hint",
    "done",
    "something",
    "wrong",
    "still",
    "valid",
    "basically",
    "saying",
    "going",
    "run",
    "function",
    "going",
    "return",
    "20",
    "returned",
    "value",
    "reassigned",
    "valid",
    "code",
    "write",
    "useless",
    "last",
    "line",
    "right",
    "never",
    "going",
    "reached",
    "matter",
    "happens",
    "always",
    "going",
    "return",
    "beforehand",
    "never",
    "return",
    "value",
    "50",
    "know",
    "return",
    "values",
    "whatever",
    "happens",
    "matter",
    "pretty",
    "much",
    "never",
    "um",
    "return",
    "value",
    "end",
    "function",
    "let",
    "say",
    "global",
    "variable",
    "um",
    "say",
    "something",
    "like",
    "um",
    "number",
    "equals",
    "20",
    "right",
    "going",
    "set",
    "global",
    "scope",
    "scopes",
    "going",
    "get",
    "important",
    "soon",
    "kind",
    "keep",
    "back",
    "head",
    "going",
    "define",
    "function",
    "going",
    "say",
    "um",
    "let",
    "go",
    "ahead",
    "use",
    "let",
    "case",
    "screw",
    "reassign",
    "going",
    "go",
    "ahead",
    "say",
    "uh",
    "function",
    "going",
    "set",
    "equal",
    "arrow",
    "function",
    "going",
    "say",
    "number",
    "kind",
    "seems",
    "like",
    "going",
    "told",
    "earlier",
    "scopes",
    "parameter",
    "function",
    "scope",
    "accessed",
    "global",
    "level",
    "global",
    "variable",
    "access",
    "within",
    "function",
    "goes",
    "one",
    "way",
    "comes",
    "scopes",
    "since",
    "technically",
    "higher",
    "scope",
    "function",
    "function",
    "actually",
    "recognize",
    "variable",
    "equal",
    "going",
    "say",
    "number",
    "going",
    "enter",
    "um",
    "actually",
    "need",
    "expression",
    "number",
    "say",
    "less",
    "15",
    "want",
    "return",
    "uh",
    "returned",
    "function",
    "early",
    "right",
    "going",
    "enter",
    "going",
    "return",
    "uh",
    "40",
    "random",
    "numbers",
    "making",
    "trying",
    "show",
    "um",
    "condition",
    "know",
    "number",
    "less",
    "15",
    "case",
    "actually",
    "return",
    "multiple",
    "things",
    "function",
    "number",
    "less",
    "15",
    "going",
    "actually",
    "skip",
    "return",
    "function",
    "return",
    "40",
    "change",
    "let",
    "say",
    "um",
    "chang",
    "less",
    "50",
    "20",
    "left",
    "less",
    "50",
    "going",
    "actually",
    "return",
    "function",
    "early",
    "never",
    "reach",
    "second",
    "return",
    "statement",
    "let",
    "go",
    "ahead",
    "enter",
    "execute",
    "see",
    "get",
    "returned",
    "function",
    "early",
    "uh",
    "output",
    "multiple",
    "return",
    "statements",
    "within",
    "function",
    "ca",
    "like",
    "two",
    "line",
    "recreate",
    "function",
    "maybe",
    "know",
    "like",
    "return",
    "statement",
    "50",
    "return",
    "40",
    "right",
    "code",
    "paths",
    "going",
    "reached",
    "make",
    "sense",
    "want",
    "return",
    "one",
    "value",
    "overview",
    "return",
    "values",
    "going",
    "get",
    "lot",
    "start",
    "writing",
    "realistic",
    "code",
    "wanted",
    "give",
    "brief",
    "overview",
    "last",
    "thing",
    "want",
    "prior",
    "getting",
    "25",
    "practice",
    "exercises",
    "coding",
    "challenges",
    "want",
    "talk",
    "little",
    "bit",
    "objects",
    "functions",
    "together",
    "little",
    "bit",
    "confusing",
    "topic",
    "going",
    "hopefully",
    "help",
    "understand",
    "um",
    "start",
    "talking",
    "functions",
    "javascript",
    "going",
    "talk",
    "minutes",
    "um",
    "hopefully",
    "help",
    "understand",
    "better",
    "let",
    "go",
    "ahead",
    "define",
    "function",
    "going",
    "call",
    "function",
    "let",
    "know",
    "return",
    "value",
    "20",
    "simple",
    "function",
    "um",
    "go",
    "ahead",
    "execute",
    "demonstr",
    "straight",
    "returns",
    "20",
    "wanted",
    "set",
    "equal",
    "um",
    "another",
    "variable",
    "actually",
    "even",
    "though",
    "already",
    "called",
    "function",
    "say",
    "um",
    "know",
    "alias",
    "know",
    "alias",
    "another",
    "name",
    "something",
    "say",
    "alias",
    "variable",
    "equals",
    "function",
    "right",
    "press",
    "enter",
    "alias",
    "variable",
    "exactly",
    "equal",
    "function",
    "declaration",
    "made",
    "um",
    "wanted",
    "execute",
    "alias",
    "variable",
    "going",
    "get",
    "answer",
    "20",
    "assign",
    "different",
    "variables",
    "means",
    "also",
    "assign",
    "object",
    "properties",
    "let",
    "go",
    "ahead",
    "clear",
    "well",
    "guess",
    "need",
    "clear",
    "screen",
    "let",
    "go",
    "ahead",
    "create",
    "object",
    "say",
    "object",
    "set",
    "equal",
    "prop",
    "one",
    "give",
    "random",
    "value",
    "something",
    "say",
    "prop",
    "two",
    "going",
    "equal",
    "function",
    "right",
    "declared",
    "object",
    "prop",
    "two",
    "random",
    "property",
    "name",
    "given",
    "going",
    "exactly",
    "equal",
    "function",
    "declaration",
    "like",
    "made",
    "alias",
    "variable",
    "equal",
    "function",
    "declaration",
    "mean",
    "well",
    "actually",
    "execute",
    "function",
    "accessing",
    "value",
    "accessing",
    "property",
    "object",
    "come",
    "let",
    "um",
    "go",
    "ahead",
    "say",
    "object",
    "need",
    "get",
    "property",
    "object",
    "let",
    "go",
    "ahead",
    "get",
    "property",
    "two",
    "see",
    "autocomplete",
    "pretty",
    "much",
    "telling",
    "us",
    "equal",
    "function",
    "wanted",
    "execute",
    "still",
    "put",
    "little",
    "parentheses",
    "end",
    "going",
    "execute",
    "give",
    "us",
    "answer",
    "grabbed",
    "object",
    "grabbed",
    "property",
    "object",
    "using",
    "dot",
    "notation",
    "threw",
    "little",
    "parentheses",
    "end",
    "executed",
    "wanted",
    "get",
    "familiar",
    "talk",
    "functions",
    "javascript",
    "javascript",
    "bunch",
    "builtin",
    "functions",
    "objects",
    "sorts",
    "stuff",
    "use",
    "without",
    "write",
    "code",
    "go",
    "several",
    "resources",
    "use",
    "see",
    "tutorials",
    "point",
    "good",
    "list",
    "documented",
    "pretty",
    "much",
    "everywhere",
    "within",
    "javascript",
    "different",
    "data",
    "types",
    "talked",
    "strings",
    "uh",
    "booleans",
    "numbers",
    "different",
    "uh",
    "data",
    "types",
    "actually",
    "functions",
    "call",
    "top",
    "go",
    "look",
    "different",
    "methods",
    "method",
    "another",
    "um",
    "guess",
    "synonym",
    "function",
    "call",
    "like",
    "completely",
    "synonymous",
    "like",
    "object",
    "function",
    "attached",
    "object",
    "showed",
    "called",
    "object",
    "method",
    "kind",
    "thing",
    "see",
    "number",
    "methods",
    "boolean",
    "methods",
    "string",
    "methods",
    "array",
    "methods",
    "probably",
    "somewhere",
    "array",
    "methods",
    "depending",
    "variable",
    "type",
    "working",
    "use",
    "modify",
    "variables",
    "take",
    "bunch",
    "shortcuts",
    "code",
    "let",
    "go",
    "ahead",
    "show",
    "um",
    "give",
    "idea",
    "work",
    "go",
    "coding",
    "challenges",
    "um",
    "throughout",
    "course",
    "going",
    "using",
    "uh",
    "much",
    "first",
    "thing",
    "say",
    "try",
    "memorize",
    "memorized",
    "documentation",
    "reason",
    "google",
    "look",
    "need",
    "pick",
    "time",
    "part",
    "actually",
    "committed",
    "memory",
    "right",
    "let",
    "go",
    "ahead",
    "try",
    "string",
    "methods",
    "let",
    "say",
    "wanted",
    "know",
    "use",
    "replace",
    "method",
    "go",
    "back",
    "console",
    "let",
    "clear",
    "everything",
    "let",
    "define",
    "ourself",
    "string",
    "say",
    "string",
    "equals",
    "um",
    "zach",
    "going",
    "use",
    "replace",
    "um",
    "method",
    "maybe",
    "spelled",
    "name",
    "wrong",
    "spell",
    "name",
    "k",
    "end",
    "might",
    "want",
    "replace",
    "say",
    "string",
    "replace",
    "going",
    "replace",
    "h",
    "k",
    "press",
    "enter",
    "going",
    "return",
    "zach",
    "k",
    "string",
    "um",
    "actually",
    "going",
    "still",
    "equal",
    "original",
    "replace",
    "value",
    "returned",
    "new",
    "value",
    "alter",
    "original",
    "value",
    "returns",
    "new",
    "one",
    "wanted",
    "say",
    "uh",
    "new",
    "name",
    "say",
    "uh",
    "string",
    "replace",
    "h",
    "k",
    "set",
    "uh",
    "equal",
    "new",
    "name",
    "new",
    "name",
    "going",
    "spelled",
    "differently",
    "something",
    "want",
    "notice",
    "looking",
    "using",
    "notation",
    "used",
    "um",
    "earlier",
    "accessed",
    "property",
    "object",
    "executed",
    "function",
    "works",
    "little",
    "bit",
    "differently",
    "kind",
    "think",
    "way",
    "maybe",
    "string",
    "considered",
    "object",
    "use",
    "notation",
    "get",
    "property",
    "object",
    "called",
    "replace",
    "happens",
    "function",
    "takes",
    "two",
    "parameters",
    "first",
    "parameter",
    "takes",
    "letter",
    "string",
    "want",
    "find",
    "within",
    "string",
    "want",
    "find",
    "letter",
    "h",
    "within",
    "string",
    "want",
    "replace",
    "uh",
    "string",
    "k",
    "letter",
    "um",
    "string",
    "replaced",
    "parameters",
    "look",
    "replace",
    "method",
    "go",
    "ahead",
    "click",
    "gives",
    "description",
    "going",
    "learn",
    "know",
    "read",
    "documentation",
    "little",
    "bit",
    "later",
    "anyways",
    "go",
    "see",
    "kind",
    "uh",
    "parameters",
    "required",
    "syntax",
    "gives",
    "um",
    "parameters",
    "want",
    "search",
    "parameters",
    "want",
    "replace",
    "couple",
    "examples",
    "output",
    "stuff",
    "know",
    "figured",
    "use",
    "going",
    "go",
    "quite",
    "bit",
    "go",
    "coding",
    "challenges",
    "go",
    "couple",
    "examples",
    "get",
    "comfortable",
    "going",
    "going",
    "let",
    "go",
    "ahead",
    "use",
    "string",
    "uh",
    "time",
    "want",
    "use",
    "string",
    "method",
    "called",
    "two",
    "uppercase",
    "see",
    "returns",
    "us",
    "uppercase",
    "version",
    "variable",
    "know",
    "got",
    "lot",
    "different",
    "versions",
    "going",
    "let",
    "go",
    "ahead",
    "clear",
    "reprint",
    "string",
    "string",
    "variable",
    "equal",
    "right",
    "also",
    "chain",
    "methods",
    "together",
    "little",
    "bit",
    "odd",
    "concept",
    "uh",
    "someone",
    "starting",
    "see",
    "actually",
    "works",
    "um",
    "get",
    "challenges",
    "let",
    "simple",
    "example",
    "string",
    "um",
    "equal",
    "zach",
    "let",
    "go",
    "ahead",
    "say",
    "uh",
    "want",
    "new",
    "string",
    "something",
    "let",
    "call",
    "um",
    "know",
    "let",
    "make",
    "new",
    "one",
    "call",
    "str",
    "str",
    "string",
    "one",
    "going",
    "say",
    "hello",
    "world",
    "string",
    "right",
    "want",
    "first",
    "make",
    "uppercase",
    "say",
    "two",
    "uppercase",
    "execute",
    "know",
    "method",
    "sits",
    "string",
    "object",
    "going",
    "output",
    "us",
    "hello",
    "world",
    "kind",
    "telling",
    "us",
    "put",
    "another",
    "dot",
    "chain",
    "methods",
    "top",
    "going",
    "use",
    "another",
    "method",
    "called",
    "split",
    "split",
    "going",
    "take",
    "whatever",
    "delimiter",
    "put",
    "put",
    "um",
    "uh",
    "parameter",
    "parameter",
    "argument",
    "put",
    "space",
    "right",
    "going",
    "look",
    "string",
    "going",
    "say",
    "one",
    "space",
    "want",
    "split",
    "hello",
    "world",
    "apart",
    "see",
    "actually",
    "changes",
    "data",
    "type",
    "string",
    "array",
    "first",
    "uh",
    "part",
    "array",
    "first",
    "hello",
    "second",
    "world",
    "let",
    "set",
    "equal",
    "variable",
    "say",
    "result",
    "variable",
    "want",
    "result",
    "variable",
    "array",
    "actually",
    "array",
    "methods",
    "let",
    "go",
    "ahead",
    "go",
    "back",
    "documentation",
    "let",
    "scroll",
    "array",
    "methods",
    "use",
    "would",
    "good",
    "one",
    "use",
    "use",
    "index",
    "method",
    "basically",
    "gives",
    "us",
    "index",
    "value",
    "say",
    "result",
    "index",
    "want",
    "search",
    "word",
    "world",
    "press",
    "enter",
    "going",
    "return",
    "us",
    "one",
    "index",
    "zero",
    "index",
    "one",
    "matches",
    "string",
    "searching",
    "passed",
    "argument",
    "function",
    "course",
    "chaining",
    "together",
    "separate",
    "steps",
    "case",
    "made",
    "uppercase",
    "split",
    "array",
    "single",
    "step",
    "gets",
    "complex",
    "want",
    "stick",
    "basics",
    "different",
    "steps",
    "say",
    "uh",
    "first",
    "let",
    "see",
    "string",
    "equal",
    "still",
    "equal",
    "hello",
    "world",
    "know",
    "right",
    "modify",
    "original",
    "variable",
    "assigned",
    "new",
    "one",
    "string",
    "still",
    "represents",
    "hello",
    "world",
    "case",
    "uh",
    "say",
    "step",
    "one",
    "variable",
    "want",
    "take",
    "want",
    "make",
    "uppercase",
    "right",
    "make",
    "uppercase",
    "maybe",
    "type",
    "make",
    "sure",
    "worked",
    "going",
    "step",
    "two",
    "right",
    "say",
    "uh",
    "step",
    "one",
    "want",
    "grab",
    "whatever",
    "values",
    "step",
    "one",
    "want",
    "split",
    "based",
    "space",
    "right",
    "set",
    "step",
    "two",
    "step",
    "two",
    "print",
    "see",
    "array",
    "come",
    "say",
    "step",
    "three",
    "say",
    "step",
    "two",
    "whatever",
    "values",
    "variable",
    "say",
    "um",
    "index",
    "like",
    "search",
    "word",
    "world",
    "set",
    "step",
    "three",
    "get",
    "index",
    "one",
    "see",
    "split",
    "different",
    "steps",
    "wanted",
    "know",
    "see",
    "different",
    "syntax",
    "reading",
    "code",
    "valid",
    "way",
    "use",
    "methods",
    "javascript",
    "right",
    "lot",
    "lot",
    "going",
    "video",
    "um",
    "would",
    "never",
    "expect",
    "take",
    "process",
    "understand",
    "every",
    "last",
    "bit",
    "going",
    "use",
    "um",
    "bunch",
    "practice",
    "exercises",
    "coding",
    "challenges",
    "brush",
    "skills",
    "really",
    "cement",
    "concepts",
    "talked",
    "variables",
    "talked",
    "op",
    "operators",
    "talked",
    "um",
    "conditionals",
    "else",
    "else",
    "else",
    "tongue",
    "twister",
    "talked",
    "loops",
    "talked",
    "functions",
    "lot",
    "going",
    "combine",
    "together",
    "actually",
    "write",
    "code",
    "um",
    "think",
    "useful",
    "go",
    "exercises",
    "video",
    "going",
    "go",
    "25",
    "maybe",
    "see",
    "goes",
    "um",
    "going",
    "go",
    "coding",
    "challenges",
    "going",
    "beginner",
    "level",
    "like",
    "beginner",
    "level",
    "coding",
    "want",
    "walk",
    "thought",
    "process",
    "help",
    "understand",
    "thinking",
    "use",
    "previous",
    "lessons",
    "gone",
    "lesson",
    "uh",
    "three",
    "four",
    "talk",
    "basics",
    "javascript",
    "want",
    "apply",
    "actual",
    "coding",
    "challenges",
    "like",
    "said",
    "throughout",
    "series",
    "taking",
    "extremely",
    "deep",
    "javascript",
    "programming",
    "language",
    "um",
    "people",
    "done",
    "um",
    "think",
    "point",
    "trying",
    "get",
    "ground",
    "um",
    "digging",
    "complex",
    "topics",
    "like",
    "know",
    "hoisting",
    "um",
    "advanced",
    "scopes",
    "stuff",
    "like",
    "necessary",
    "starting",
    "fill",
    "blanks",
    "go",
    "later",
    "partially",
    "making",
    "video",
    "challenges",
    "help",
    "talked",
    "previous",
    "lessons",
    "hopefully",
    "kind",
    "fill",
    "blanks",
    "challenges",
    "going",
    "site",
    "called",
    "code",
    "wars",
    "go",
    "um",
    "pull",
    "screen",
    "um",
    "going",
    "collection",
    "put",
    "together",
    "25",
    "exercises",
    "um",
    "put",
    "collection",
    "see",
    "goes",
    "might",
    "add",
    "um",
    "blow",
    "basically",
    "go",
    "hit",
    "hit",
    "link",
    "description",
    "um",
    "find",
    "uh",
    "series",
    "questions",
    "get",
    "page",
    "right",
    "create",
    "profile",
    "go",
    "ahead",
    "follow",
    "um",
    "let",
    "see",
    "profile",
    "uh",
    "zach",
    "go",
    "look",
    "follow",
    "follow",
    "back",
    "together",
    "get",
    "collection",
    "um",
    "link",
    "description",
    "go",
    "uh",
    "top",
    "left",
    "corner",
    "click",
    "train",
    "click",
    "going",
    "drop",
    "us",
    "problems",
    "uh",
    "basically",
    "chosen",
    "video",
    "want",
    "give",
    "quick",
    "tour",
    "code",
    "wars",
    "never",
    "um",
    "actually",
    "started",
    "using",
    "purpose",
    "go",
    "practice",
    "exercises",
    "um",
    "basically",
    "left",
    "side",
    "instructions",
    "going",
    "tell",
    "us",
    "instructions",
    "code",
    "execute",
    "properly",
    "figure",
    "basically",
    "fix",
    "um",
    "see",
    "output",
    "actually",
    "run",
    "test",
    "run",
    "test",
    "obviously",
    "going",
    "fail",
    "um",
    "see",
    "output",
    "write",
    "solution",
    "write",
    "valid",
    "javascript",
    "code",
    "uh",
    "terminal",
    "finally",
    "bottom",
    "sample",
    "test",
    "look",
    "um",
    "obviously",
    "little",
    "bit",
    "advanced",
    "um",
    "probably",
    "accustomed",
    "point",
    "watch",
    "watching",
    "video",
    "going",
    "basically",
    "bunch",
    "code",
    "actually",
    "tests",
    "code",
    "write",
    "takes",
    "inputs",
    "um",
    "takes",
    "set",
    "inputs",
    "puts",
    "inputs",
    "code",
    "written",
    "um",
    "gets",
    "outputs",
    "checks",
    "see",
    "whether",
    "um",
    "matches",
    "expected",
    "output",
    "brief",
    "tour",
    "um",
    "things",
    "notice",
    "writing",
    "javascript",
    "language",
    "uh",
    "video",
    "uh",
    "node",
    "going",
    "runtime",
    "kind",
    "backend",
    "version",
    "javascript",
    "know",
    "like",
    "working",
    "series",
    "know",
    "browser",
    "dev",
    "tools",
    "console",
    "um",
    "would",
    "know",
    "code",
    "writing",
    "um",
    "nothing",
    "new",
    "finally",
    "vim",
    "versus",
    "emac",
    "thing",
    "click",
    "either",
    "going",
    "actually",
    "drop",
    "going",
    "create",
    "editor",
    "right",
    "um",
    "like",
    "say",
    "vim",
    "editor",
    "video",
    "want",
    "check",
    "vim",
    "code",
    "editor",
    "text",
    "editor",
    "click",
    "whole",
    "different",
    "uh",
    "ball",
    "game",
    "would",
    "get",
    "started",
    "using",
    "keep",
    "unchecked",
    "right",
    "point",
    "going",
    "go",
    "exercises",
    "going",
    "walk",
    "thinking",
    "first",
    "one",
    "rather",
    "simple",
    "um",
    "following",
    "along",
    "uh",
    "road",
    "map",
    "series",
    "know",
    "exactly",
    "need",
    "saying",
    "execute",
    "fix",
    "well",
    "right",
    "know",
    "ran",
    "output",
    "ran",
    "earlier",
    "says",
    "expected",
    "undefined",
    "equal",
    "one",
    "basically",
    "saying",
    "um",
    "returned",
    "anything",
    "function",
    "therefore",
    "need",
    "add",
    "return",
    "statement",
    "right",
    "test",
    "pass",
    "pass",
    "go",
    "ahead",
    "click",
    "attempt",
    "bottom",
    "right",
    "corner",
    "passed",
    "test",
    "submit",
    "right",
    "submit",
    "solution",
    "correctly",
    "going",
    "show",
    "people",
    "solutions",
    "problem",
    "useful",
    "also",
    "detrial",
    "listen",
    "um",
    "way",
    "useful",
    "scrolling",
    "know",
    "seeing",
    "possibilities",
    "solve",
    "every",
    "one",
    "problems",
    "many",
    "different",
    "ways",
    "sometimes",
    "fun",
    "see",
    "people",
    "solved",
    "also",
    "open",
    "eyes",
    "different",
    "types",
    "thinking",
    "know",
    "would",
    "thought",
    "good",
    "way",
    "good",
    "um",
    "sometimes",
    "people",
    "solve",
    "clever",
    "ways",
    "say",
    "clever",
    "mean",
    "best",
    "way",
    "competitive",
    "programmer",
    "um",
    "claim",
    "really",
    "plans",
    "becoming",
    "one",
    "um",
    "get",
    "world",
    "world",
    "competitive",
    "programming",
    "optimizing",
    "solution",
    "writing",
    "least",
    "amount",
    "code",
    "fastest",
    "code",
    "um",
    "kind",
    "thing",
    "want",
    "write",
    "code",
    "helps",
    "understand",
    "solution",
    "help",
    "read",
    "code",
    "simplest",
    "way",
    "possible",
    "solutions",
    "example",
    "one",
    "right",
    "unnecessary",
    "um",
    "know",
    "nobody",
    "said",
    "check",
    "validate",
    "arg",
    "inputs",
    "uh",
    "case",
    "b",
    "inputs",
    "function",
    "person",
    "done",
    "basically",
    "checked",
    "make",
    "sure",
    "know",
    "uh",
    "inputs",
    "know",
    "invalid",
    "input",
    "makes",
    "sure",
    "number",
    "totally",
    "unnecessary",
    "solution",
    "never",
    "told",
    "us",
    "check",
    "overly",
    "complicated",
    "opinion",
    "see",
    "uh",
    "lot",
    "votes",
    "clever",
    "many",
    "cases",
    "see",
    "lot",
    "votes",
    "clever",
    "solution",
    "probably",
    "geared",
    "towards",
    "beginner",
    "probably",
    "want",
    "focus",
    "right",
    "least",
    "point",
    "one",
    "um",
    "little",
    "bit",
    "useful",
    "us",
    "would",
    "solution",
    "came",
    "added",
    "return",
    "statement",
    "called",
    "day",
    "another",
    "way",
    "actually",
    "clever",
    "also",
    "something",
    "something",
    "talked",
    "previous",
    "lesson",
    "think",
    "previous",
    "video",
    "actually",
    "might",
    "mentioned",
    "one",
    "point",
    "basically",
    "arrow",
    "function",
    "um",
    "arrow",
    "function",
    "original",
    "solution",
    "know",
    "standard",
    "function",
    "named",
    "function",
    "could",
    "set",
    "function",
    "equal",
    "variable",
    "called",
    "multiply",
    "set",
    "equal",
    "uh",
    "arrow",
    "function",
    "arrow",
    "function",
    "um",
    "put",
    "one",
    "line",
    "actually",
    "put",
    "return",
    "statement",
    "nice",
    "uh",
    "nice",
    "thing",
    "look",
    "gives",
    "kind",
    "opens",
    "world",
    "understanding",
    "oh",
    "write",
    "like",
    "well",
    "right",
    "enough",
    "um",
    "going",
    "spend",
    "much",
    "time",
    "every",
    "challenge",
    "wanted",
    "walk",
    "uh",
    "think",
    "solutions",
    "right",
    "would",
    "clicked",
    "button",
    "let",
    "actually",
    "go",
    "back",
    "make",
    "sure",
    "clear",
    "go",
    "collections",
    "go",
    "lesson",
    "five",
    "practice",
    "challenges",
    "click",
    "one",
    "challenges",
    "going",
    "take",
    "challenge",
    "click",
    "next",
    "going",
    "keep",
    "within",
    "collection",
    "make",
    "sure",
    "clicked",
    "train",
    "button",
    "solve",
    "problem",
    "click",
    "next",
    "takes",
    "next",
    "one",
    "um",
    "um",
    "collection",
    "guess",
    "got",
    "solve",
    "one",
    "real",
    "quick",
    "attempt",
    "solution",
    "passed",
    "let",
    "submit",
    "right",
    "pre",
    "press",
    "next",
    "uh",
    "next",
    "kata",
    "kata",
    "actually",
    "know",
    "say",
    "sure",
    "reference",
    "getting",
    "sure",
    "leave",
    "comments",
    "uh",
    "know",
    "means",
    "anyways",
    "next",
    "problem",
    "let",
    "go",
    "ahead",
    "actually",
    "yeah",
    "let",
    "train",
    "guess",
    "already",
    "opened",
    "one",
    "point",
    "um",
    "yeah",
    "putting",
    "collection",
    "together",
    "function",
    "returning",
    "correct",
    "values",
    "figure",
    "going",
    "actually",
    "get",
    "us",
    "switch",
    "case",
    "statement",
    "talked",
    "um",
    "previous",
    "couple",
    "videos",
    "remember",
    "switch",
    "case",
    "statement",
    "basically",
    "like",
    "saying",
    "else",
    "bunch",
    "else",
    "ifs",
    "test",
    "specific",
    "condition",
    "remember",
    "switch",
    "case",
    "statement",
    "syntax",
    "missing",
    "something",
    "right",
    "causing",
    "solution",
    "wrong",
    "think",
    "going",
    "happen",
    "execute",
    "going",
    "get",
    "neptune",
    "uh",
    "every",
    "time",
    "let",
    "let",
    "see",
    "case",
    "yeah",
    "got",
    "neptune",
    "every",
    "single",
    "time",
    "reason",
    "happening",
    "break",
    "statements",
    "words",
    "getting",
    "id",
    "um",
    "passed",
    "correctly",
    "passed",
    "argument",
    "id",
    "parameter",
    "uh",
    "defining",
    "within",
    "function",
    "looking",
    "id",
    "switch",
    "statement",
    "saying",
    "id",
    "equal",
    "figures",
    "goes",
    "cases",
    "says",
    "id",
    "equal",
    "one",
    "okay",
    "set",
    "name",
    "equal",
    "mercur",
    "mercury",
    "return",
    "name",
    "problem",
    "since",
    "break",
    "state",
    "always",
    "going",
    "hit",
    "last",
    "case",
    "let",
    "say",
    "id",
    "um",
    "know",
    "go",
    "test",
    "passing",
    "two",
    "argument",
    "expecting",
    "return",
    "venus",
    "know",
    "pass",
    "id",
    "two",
    "going",
    "get",
    "passed",
    "going",
    "look",
    "case",
    "one",
    "say",
    "okay",
    "id",
    "equal",
    "one",
    "let",
    "go",
    "next",
    "one",
    "right",
    "id",
    "equal",
    "two",
    "let",
    "set",
    "name",
    "equal",
    "venus",
    "instead",
    "breaking",
    "coming",
    "return",
    "statement",
    "returning",
    "answer",
    "anything",
    "going",
    "keep",
    "going",
    "cases",
    "going",
    "say",
    "case",
    "equal",
    "3",
    "case",
    "equal",
    "4",
    "case",
    "equal",
    "5",
    "forth",
    "till",
    "hits",
    "last",
    "one",
    "need",
    "add",
    "break",
    "statements",
    "put",
    "break",
    "semicolon",
    "lines",
    "right",
    "got",
    "break",
    "statement",
    "let",
    "test",
    "time",
    "passing",
    "needed",
    "purely",
    "syntax",
    "error",
    "something",
    "would",
    "kind",
    "look",
    "documentation",
    "switch",
    "case",
    "statement",
    "watch",
    "previous",
    "lesson",
    "figure",
    "let",
    "go",
    "ahead",
    "attempt",
    "know",
    "going",
    "pass",
    "submit",
    "right",
    "let",
    "see",
    "everyone",
    "else",
    "um",
    "clever",
    "solutions",
    "obviously",
    "one",
    "clever",
    "would",
    "recommend",
    "skill",
    "level",
    "right",
    "um",
    "looks",
    "like",
    "okay",
    "case",
    "person",
    "opted",
    "use",
    "return",
    "statement",
    "valid",
    "break",
    "statement",
    "works",
    "well",
    "um",
    "see",
    "guess",
    "top",
    "solution",
    "common",
    "kind",
    "used",
    "one",
    "thing",
    "point",
    "put",
    "break",
    "statement",
    "neptune",
    "really",
    "necessary",
    "since",
    "last",
    "one",
    "right",
    "go",
    "next",
    "uh",
    "challenge",
    "reversing",
    "string",
    "let",
    "go",
    "ahead",
    "train",
    "basically",
    "taking",
    "string",
    "reversing",
    "know",
    "solve",
    "solution",
    "um",
    "single",
    "line",
    "actually",
    "know",
    "exactly",
    "take",
    "guess",
    "let",
    "try",
    "return",
    "string",
    "reverse",
    "see",
    "works",
    "okay",
    "reverse",
    "function",
    "kind",
    "suspected",
    "javascript",
    "talked",
    "previous",
    "video",
    "bunch",
    "functions",
    "uh",
    "come",
    "javascript",
    "look",
    "say",
    "javascript",
    "builtin",
    "functions",
    "um",
    "go",
    "tutorials",
    "point",
    "like",
    "one",
    "pretty",
    "simple",
    "go",
    "string",
    "methods",
    "want",
    "go",
    "trying",
    "reverse",
    "string",
    "anytime",
    "trying",
    "modify",
    "um",
    "certain",
    "data",
    "type",
    "first",
    "look",
    "methods",
    "something",
    "manually",
    "case",
    "working",
    "string",
    "need",
    "reverse",
    "let",
    "go",
    "ahead",
    "see",
    "um",
    "using",
    "string",
    "methods",
    "turns",
    "looking",
    "different",
    "string",
    "methods",
    "nothing",
    "says",
    "reverse",
    "um",
    "actually",
    "reason",
    "thought",
    "reverse",
    "method",
    "um",
    "know",
    "slipped",
    "mind",
    "think",
    "another",
    "solution",
    "realistically",
    "solving",
    "problem",
    "um",
    "know",
    "real",
    "world",
    "write",
    "code",
    "reversed",
    "string",
    "going",
    "opening",
    "google",
    "going",
    "type",
    "reverse",
    "string",
    "javascript",
    "right",
    "usually",
    "going",
    "stack",
    "overflow",
    "post",
    "um",
    "stack",
    "overflow",
    "basically",
    "get",
    "answer",
    "anything",
    "coding",
    "going",
    "happen",
    "going",
    "find",
    "solution",
    "far",
    "actually",
    "reverse",
    "method",
    "going",
    "entirely",
    "apparent",
    "uh",
    "like",
    "complete",
    "beginner",
    "solution",
    "actually",
    "converting",
    "array",
    "first",
    "let",
    "go",
    "back",
    "need",
    "see",
    "um",
    "let",
    "go",
    "back",
    "documentation",
    "take",
    "look",
    "array",
    "methods",
    "data",
    "type",
    "array",
    "actually",
    "reverse",
    "uh",
    "looks",
    "like",
    "reverse",
    "method",
    "right",
    "going",
    "go",
    "ahead",
    "go",
    "dev",
    "console",
    "um",
    "right",
    "click",
    "anywhere",
    "screen",
    "um",
    "let",
    "show",
    "right",
    "click",
    "inspect",
    "element",
    "watching",
    "series",
    "news",
    "type",
    "away",
    "javascript",
    "let",
    "see",
    "array",
    "set",
    "array",
    "uh",
    "equal",
    "1",
    "2",
    "3",
    "want",
    "reverse",
    "array",
    "say",
    "array",
    "reverse",
    "going",
    "reverse",
    "values",
    "array",
    "basically",
    "stack",
    "overflow",
    "flow",
    "solution",
    "telling",
    "us",
    "first",
    "need",
    "convert",
    "string",
    "array",
    "letter",
    "need",
    "reverse",
    "need",
    "join",
    "back",
    "string",
    "know",
    "solution",
    "basically",
    "one",
    "step",
    "talked",
    "chaining",
    "uh",
    "methods",
    "prior",
    "video",
    "want",
    "break",
    "individual",
    "steps",
    "uh",
    "clarity",
    "let",
    "go",
    "ahead",
    "right",
    "right",
    "first",
    "thing",
    "want",
    "split",
    "string",
    "array",
    "basically",
    "going",
    "take",
    "every",
    "character",
    "string",
    "going",
    "make",
    "character",
    "uh",
    "value",
    "array",
    "let",
    "come",
    "back",
    "console",
    "um",
    "let",
    "say",
    "string",
    "equal",
    "hello",
    "right",
    "want",
    "say",
    "string",
    "dot",
    "um",
    "using",
    "using",
    "split",
    "going",
    "uh",
    "split",
    "empty",
    "character",
    "get",
    "back",
    "say",
    "string",
    "dosit",
    "put",
    "empty",
    "character",
    "going",
    "give",
    "us",
    "array",
    "uh",
    "letter",
    "separated",
    "array",
    "right",
    "array",
    "split",
    "reverse",
    "um",
    "let",
    "go",
    "back",
    "first",
    "thing",
    "uh",
    "put",
    "array",
    "string",
    "spit",
    "need",
    "pass",
    "empty",
    "character",
    "reverse",
    "saw",
    "say",
    "save",
    "reversed",
    "variable",
    "say",
    "array",
    "reverse",
    "right",
    "going",
    "assign",
    "often",
    "times",
    "solving",
    "problem",
    "like",
    "going",
    "write",
    "code",
    "actually",
    "test",
    "move",
    "let",
    "go",
    "ahead",
    "reversed",
    "value",
    "click",
    "test",
    "obviously",
    "going",
    "fail",
    "see",
    "get",
    "output",
    "see",
    "logged",
    "console",
    "console",
    "basically",
    "tells",
    "us",
    "like",
    "reversed",
    "variable",
    "array",
    "array",
    "reversed",
    "original",
    "string",
    "last",
    "thing",
    "need",
    "since",
    "form",
    "array",
    "data",
    "type",
    "need",
    "take",
    "reversed",
    "array",
    "combine",
    "together",
    "string",
    "think",
    "um",
    "join",
    "string",
    "dosit",
    "um",
    "say",
    "join",
    "going",
    "join",
    "uh",
    "comma",
    "actually",
    "replace",
    "commas",
    "let",
    "see",
    "stack",
    "overflow",
    "solution",
    "okay",
    "let",
    "see",
    "join",
    "also",
    "enter",
    "empty",
    "string",
    "right",
    "little",
    "tricky",
    "part",
    "let",
    "go",
    "back",
    "problem",
    "um",
    "say",
    "final",
    "answer",
    "equals",
    "reversed",
    "array",
    "array",
    "join",
    "empty",
    "character",
    "go",
    "ahead",
    "return",
    "final",
    "answer",
    "let",
    "go",
    "ahead",
    "test",
    "see",
    "passed",
    "tests",
    "let",
    "attempt",
    "think",
    "fine",
    "solved",
    "take",
    "different",
    "steps",
    "um",
    "course",
    "could",
    "solved",
    "um",
    "saying",
    "want",
    "string",
    "dosit",
    "reverse",
    "dojin",
    "uh",
    "delete",
    "uh",
    "intermediate",
    "variables",
    "right",
    "test",
    "going",
    "pass",
    "everything",
    "let",
    "go",
    "ahead",
    "attempt",
    "submit",
    "like",
    "said",
    "couple",
    "different",
    "ways",
    "solve",
    "um",
    "might",
    "asking",
    "point",
    "well",
    "cheating",
    "like",
    "went",
    "stack",
    "overflow",
    "figured",
    "way",
    "well",
    "yes",
    "programming",
    "competition",
    "um",
    "would",
    "cheating",
    "know",
    "competitive",
    "programmer",
    "never",
    "want",
    "google",
    "know",
    "best",
    "friend",
    "programmer",
    "cheating",
    "google",
    "something",
    "um",
    "try",
    "remainder",
    "video",
    "really",
    "wanted",
    "beat",
    "head",
    "okay",
    "go",
    "google",
    "search",
    "something",
    "like",
    "pretty",
    "much",
    "everyone",
    "operates",
    "real",
    "world",
    "environment",
    "going",
    "uh",
    "tidbit",
    "knowledge",
    "um",
    "take",
    "right",
    "go",
    "next",
    "challenge",
    "see",
    "got",
    "okay",
    "even",
    "odd",
    "let",
    "see",
    "trying",
    "solve",
    "says",
    "create",
    "function",
    "write",
    "script",
    "shell",
    "something",
    "going",
    "um",
    "takes",
    "integer",
    "argument",
    "returns",
    "even",
    "um",
    "notice",
    "asking",
    "string",
    "capitalized",
    "string",
    "says",
    "even",
    "uh",
    "even",
    "numbers",
    "uh",
    "capitalized",
    "odd",
    "odd",
    "numbers",
    "right",
    "let",
    "see",
    "first",
    "thing",
    "thinking",
    "maybe",
    "modulus",
    "operator",
    "even",
    "think",
    "need",
    "yeah",
    "correct",
    "modulus",
    "operator",
    "divide",
    "something",
    "two",
    "right",
    "okay",
    "know",
    "thinking",
    "divide",
    "two",
    "right",
    "um",
    "let",
    "let",
    "go",
    "little",
    "playground",
    "refresh",
    "test",
    "things",
    "got",
    "20",
    "two",
    "comes",
    "even",
    "number",
    "21",
    "odd",
    "divided",
    "two",
    "decimal",
    "would",
    "complete",
    "additional",
    "steps",
    "actually",
    "figure",
    "one",
    "decimal",
    "one",
    "whole",
    "number",
    "kind",
    "like",
    "idea",
    "modulus",
    "operator",
    "20",
    "instead",
    "divided",
    "two",
    "modulus",
    "2",
    "going",
    "give",
    "us",
    "zero",
    "um",
    "21",
    "modulus",
    "2",
    "going",
    "give",
    "us",
    "one",
    "basically",
    "every",
    "time",
    "even",
    "number",
    "uh",
    "modulus",
    "2",
    "going",
    "return",
    "zero",
    "zero",
    "remainder",
    "division",
    "operation",
    "previous",
    "lessons",
    "talked",
    "modulus",
    "operator",
    "um",
    "video",
    "video",
    "operators",
    "basically",
    "division",
    "problem",
    "returning",
    "remainder",
    "division",
    "problem",
    "know",
    "going",
    "back",
    "basic",
    "math",
    "divide",
    "something",
    "goes",
    "evenly",
    "going",
    "remainder",
    "zero",
    "going",
    "see",
    "even",
    "number",
    "40",
    "modulus",
    "2",
    "zero",
    "two",
    "modulus",
    "2",
    "zero",
    "basically",
    "going",
    "solve",
    "um",
    "could",
    "intermediate",
    "steps",
    "actually",
    "return",
    "solution",
    "um",
    "actually",
    "intermediate",
    "steps",
    "need",
    "conditional",
    "want",
    "say",
    "number",
    "grabbing",
    "parameter",
    "um",
    "know",
    "test",
    "cases",
    "going",
    "pass",
    "different",
    "arguments",
    "parameter",
    "called",
    "number",
    "think",
    "variable",
    "available",
    "function",
    "um",
    "going",
    "uh",
    "different",
    "per",
    "test",
    "case",
    "replace",
    "number",
    "whatever",
    "argument",
    "want",
    "write",
    "expression",
    "says",
    "number",
    "modulus",
    "2",
    "right",
    "want",
    "say",
    "equal",
    "use",
    "triple",
    "equals",
    "check",
    "uh",
    "value",
    "data",
    "type",
    "want",
    "set",
    "equal",
    "zero",
    "number",
    "modulus",
    "2",
    "equals",
    "0",
    "know",
    "even",
    "number",
    "drop",
    "statement",
    "return",
    "need",
    "return",
    "based",
    "instructions",
    "called",
    "even",
    "right",
    "put",
    "else",
    "statement",
    "know",
    "even",
    "odd",
    "going",
    "return",
    "odd",
    "case",
    "let",
    "test",
    "right",
    "passed",
    "test",
    "let",
    "go",
    "ahead",
    "attempt",
    "passed",
    "test",
    "let",
    "submit",
    "answer",
    "see",
    "everyone",
    "else",
    "uh",
    "answer",
    "sure",
    "clever",
    "solution",
    "came",
    "right",
    "using",
    "turner",
    "operator",
    "um",
    "talked",
    "briefly",
    "operator",
    "video",
    "basically",
    "shorthand",
    "uh",
    "clever",
    "way",
    "write",
    "else",
    "statement",
    "could",
    "used",
    "want",
    "confuse",
    "anyone",
    "unnecessarily",
    "uh",
    "looks",
    "solution",
    "um",
    "actually",
    "much",
    "variance",
    "abbreviate",
    "ways",
    "abbreviated",
    "ways",
    "write",
    "function",
    "using",
    "arrow",
    "functions",
    "rather",
    "um",
    "classic",
    "function",
    "um",
    "pretty",
    "good",
    "one",
    "let",
    "go",
    "next",
    "challenge",
    "right",
    "counting",
    "sheep",
    "challenge",
    "let",
    "see",
    "got",
    "okay",
    "returning",
    "number",
    "count",
    "vowels",
    "given",
    "string",
    "consider",
    "ae",
    "io",
    "u",
    "vows",
    "uh",
    "problem",
    "going",
    "okay",
    "good",
    "know",
    "input",
    "string",
    "consist",
    "lowercase",
    "letters",
    "spaces",
    "right",
    "another",
    "point",
    "really",
    "want",
    "bring",
    "um",
    "know",
    "starting",
    "beginner",
    "solving",
    "problems",
    "kind",
    "interview",
    "question",
    "might",
    "laid",
    "last",
    "part",
    "going",
    "tell",
    "something",
    "input",
    "obviously",
    "functions",
    "writing",
    "um",
    "executed",
    "something",
    "something",
    "automated",
    "test",
    "um",
    "sample",
    "test",
    "um",
    "code",
    "going",
    "run",
    "actually",
    "click",
    "test",
    "button",
    "site",
    "going",
    "execute",
    "function",
    "bunch",
    "different",
    "parameters",
    "make",
    "sure",
    "um",
    "implemented",
    "correctly",
    "know",
    "want",
    "test",
    "one",
    "set",
    "parameters",
    "want",
    "put",
    "bunch",
    "different",
    "things",
    "could",
    "infinite",
    "number",
    "things",
    "passed",
    "function",
    "arguments",
    "often",
    "times",
    "uh",
    "complex",
    "problems",
    "harder",
    "challenges",
    "going",
    "challenge",
    "handle",
    "different",
    "edge",
    "cases",
    "might",
    "come",
    "say",
    "edge",
    "cases",
    "know",
    "might",
    "something",
    "like",
    "okay",
    "happens",
    "uh",
    "pass",
    "uh",
    "undefined",
    "value",
    "argument",
    "happens",
    "pass",
    "um",
    "know",
    "number",
    "instead",
    "string",
    "argument",
    "well",
    "things",
    "need",
    "handled",
    "code",
    "last",
    "sentence",
    "seem",
    "um",
    "useful",
    "might",
    "even",
    "ask",
    "like",
    "telling",
    "something",
    "input",
    "basically",
    "saying",
    "us",
    "programmer",
    "saying",
    "hey",
    "going",
    "give",
    "lowercase",
    "letters",
    "spaces",
    "basically",
    "saying",
    "words",
    "going",
    "pass",
    "numbers",
    "going",
    "pass",
    "undefined",
    "values",
    "null",
    "values",
    "boolean",
    "values",
    "know",
    "need",
    "worry",
    "know",
    "single",
    "lowercase",
    "letters",
    "spaces",
    "right",
    "useful",
    "information",
    "going",
    "save",
    "us",
    "lot",
    "time",
    "solving",
    "problem",
    "right",
    "says",
    "enter",
    "magic",
    "spelled",
    "incorrectly",
    "least",
    "english",
    "know",
    "spell",
    "languages",
    "anyways",
    "um",
    "let",
    "see",
    "got",
    "uh",
    "starting",
    "point",
    "one",
    "thing",
    "going",
    "fix",
    "using",
    "uh",
    "var",
    "um",
    "keyword",
    "lessons",
    "basically",
    "told",
    "using",
    "also",
    "stand",
    "let",
    "go",
    "ahead",
    "set",
    "equal",
    "let",
    "um",
    "looks",
    "like",
    "going",
    "reassign",
    "point",
    "right",
    "actually",
    "fairly",
    "easy",
    "solution",
    "um",
    "programming",
    "little",
    "bit",
    "um",
    "see",
    "us",
    "solving",
    "first",
    "let",
    "put",
    "input",
    "array",
    "um",
    "sort",
    "want",
    "loop",
    "array",
    "check",
    "vow",
    "right",
    "um",
    "let",
    "go",
    "ahead",
    "um",
    "actually",
    "lot",
    "ways",
    "solve",
    "let",
    "stay",
    "consistent",
    "previous",
    "one",
    "take",
    "uh",
    "convert",
    "array",
    "saying",
    "string",
    "split",
    "want",
    "pass",
    "empty",
    "character",
    "remember",
    "takes",
    "every",
    "letter",
    "string",
    "puts",
    "expands",
    "array",
    "going",
    "back",
    "tab",
    "um",
    "say",
    "know",
    "let",
    "look",
    "array",
    "look",
    "string",
    "string",
    "hello",
    "say",
    "string",
    "split",
    "basically",
    "going",
    "going",
    "split",
    "array",
    "array",
    "know",
    "write",
    "loop",
    "kind",
    "previous",
    "couple",
    "videos",
    "talking",
    "loops",
    "going",
    "loop",
    "every",
    "single",
    "value",
    "array",
    "going",
    "say",
    "let",
    "equal",
    "0",
    "syntax",
    "use",
    "uh",
    "looping",
    "want",
    "go",
    "length",
    "array",
    "created",
    "certain",
    "length",
    "certain",
    "amount",
    "characters",
    "uh",
    "know",
    "beforehand",
    "going",
    "pass",
    "ray",
    "length",
    "going",
    "increment",
    "using",
    "increment",
    "operator",
    "right",
    "going",
    "array",
    "going",
    "write",
    "uh",
    "simple",
    "statement",
    "say",
    "um",
    "let",
    "say",
    "grab",
    "array",
    "indexes",
    "remember",
    "going",
    "increment",
    "going",
    "go",
    "zero",
    "1",
    "two",
    "three",
    "four",
    "way",
    "till",
    "reaches",
    "end",
    "array",
    "individual",
    "letters",
    "um",
    "know",
    "input",
    "argument",
    "going",
    "grab",
    "like",
    "basically",
    "array",
    "um",
    "arr",
    "bracket",
    "going",
    "represent",
    "single",
    "letter",
    "array",
    "going",
    "ask",
    "whether",
    "equals",
    "um",
    "vowels",
    "actually",
    "really",
    "short",
    "ways",
    "write",
    "going",
    "go",
    "ahead",
    "clunky",
    "know",
    "really",
    "drawn",
    "way",
    "clear",
    "beginner",
    "say",
    "array",
    "actually",
    "use",
    "switch",
    "switch",
    "statement",
    "um",
    "saw",
    "previous",
    "challenge",
    "thing",
    "want",
    "evaluate",
    "single",
    "letter",
    "going",
    "come",
    "going",
    "say",
    "case",
    "equal",
    "right",
    "equals",
    "want",
    "take",
    "vows",
    "count",
    "variable",
    "increment",
    "one",
    "break",
    "statement",
    "remember",
    "important",
    "right",
    "going",
    "different",
    "vows",
    "going",
    "paste",
    "code",
    "going",
    "get",
    "messed",
    "formatting",
    "let",
    "see",
    "like",
    "said",
    "much",
    "quicker",
    "solution",
    "um",
    "sure",
    "see",
    "someone",
    "used",
    "um",
    "know",
    "scope",
    "talked",
    "already",
    "want",
    "stay",
    "consistent",
    "talked",
    "know",
    "throw",
    "huge",
    "curve",
    "balls",
    "right",
    "getting",
    "last",
    "one",
    "let",
    "pass",
    "actually",
    "need",
    "break",
    "statement",
    "last",
    "one",
    "basically",
    "going",
    "happen",
    "going",
    "loop",
    "array",
    "basically",
    "going",
    "look",
    "every",
    "single",
    "letter",
    "array",
    "original",
    "string",
    "going",
    "ask",
    "equal",
    "going",
    "increment",
    "vels",
    "count",
    "equal",
    "e",
    "increment",
    "vs",
    "count",
    "equal",
    "vows",
    "count",
    "variable",
    "going",
    "stay",
    "end",
    "loop",
    "going",
    "total",
    "count",
    "return",
    "bottom",
    "let",
    "go",
    "ahead",
    "run",
    "test",
    "see",
    "get",
    "see",
    "passed",
    "one",
    "tests",
    "let",
    "go",
    "ahead",
    "attempt",
    "passed",
    "five",
    "obviously",
    "got",
    "correct",
    "let",
    "submit",
    "guess",
    "submit",
    "let",
    "try",
    "sometimes",
    "little",
    "bit",
    "slow",
    "actually",
    "run",
    "bunch",
    "tests",
    "right",
    "let",
    "see",
    "got",
    "first",
    "answer",
    "clever",
    "um",
    "gets",
    "regular",
    "expressions",
    "even",
    "come",
    "close",
    "touching",
    "want",
    "skip",
    "um",
    "right",
    "looks",
    "um",
    "little",
    "bit",
    "similar",
    "actually",
    "double",
    "loop",
    "actually",
    "looping",
    "two",
    "different",
    "arrays",
    "really",
    "want",
    "get",
    "either",
    "make",
    "anyone",
    "braid",
    "spin",
    "honest",
    "um",
    "got",
    "regular",
    "expressions",
    "see",
    "looking",
    "one",
    "thinking",
    "would",
    "lot",
    "okay",
    "looped",
    "array",
    "could",
    "done",
    "checked",
    "instead",
    "writing",
    "switch",
    "case",
    "statement",
    "um",
    "would",
    "put",
    "vowels",
    "array",
    "would",
    "know",
    "take",
    "array",
    "use",
    "includes",
    "method",
    "loop",
    "letters",
    "check",
    "letter",
    "um",
    "included",
    "vowels",
    "array",
    "thinking",
    "little",
    "bit",
    "easier",
    "way",
    "looks",
    "like",
    "person",
    "kind",
    "solved",
    "like",
    "us",
    "like",
    "said",
    "ton",
    "ways",
    "solve",
    "challenges",
    "know",
    "solve",
    "however",
    "want",
    "let",
    "go",
    "next",
    "one",
    "um",
    "looks",
    "like",
    "jenny",
    "secret",
    "message",
    "wonder",
    "jenny",
    "secret",
    "message",
    "let",
    "train",
    "got",
    "take",
    "little",
    "break",
    "solving",
    "challenges",
    "tired",
    "right",
    "go",
    "jenny",
    "secret",
    "message",
    "jenny",
    "written",
    "function",
    "returns",
    "greeting",
    "user",
    "however",
    "love",
    "johnny",
    "would",
    "like",
    "greet",
    "slightly",
    "different",
    "romantic",
    "right",
    "added",
    "special",
    "case",
    "function",
    "made",
    "mistake",
    "let",
    "look",
    "function",
    "looks",
    "like",
    "trying",
    "edit",
    "code",
    "right",
    "first",
    "thing",
    "going",
    "run",
    "test",
    "see",
    "getting",
    "um",
    "kind",
    "gives",
    "us",
    "clues",
    "um",
    "right",
    "let",
    "look",
    "code",
    "let",
    "see",
    "happening",
    "single",
    "parameter",
    "called",
    "name",
    "basically",
    "saying",
    "right",
    "function",
    "expects",
    "single",
    "argument",
    "passed",
    "executed",
    "called",
    "name",
    "um",
    "going",
    "use",
    "name",
    "figure",
    "dealing",
    "johnny",
    "dealing",
    "johnny",
    "want",
    "add",
    "know",
    "um",
    "specialized",
    "message",
    "want",
    "say",
    "hello",
    "name",
    "would",
    "concatenating",
    "bunch",
    "strings",
    "together",
    "um",
    "saying",
    "hello",
    "string",
    "adding",
    "name",
    "passed",
    "exclamation",
    "point",
    "basically",
    "want",
    "return",
    "everyone",
    "except",
    "johnny",
    "right",
    "want",
    "return",
    "let",
    "space",
    "little",
    "bit",
    "name",
    "johnny",
    "want",
    "return",
    "hello",
    "love",
    "think",
    "reverse",
    "happening",
    "right",
    "going",
    "function",
    "never",
    "even",
    "gets",
    "statement",
    "already",
    "returning",
    "something",
    "basically",
    "every",
    "time",
    "run",
    "function",
    "returning",
    "hello",
    "know",
    "name",
    "exclamation",
    "point",
    "top",
    "never",
    "checks",
    "see",
    "johnny",
    "name",
    "like",
    "code",
    "block",
    "never",
    "gets",
    "reached",
    "cut",
    "put",
    "top",
    "name",
    "equals",
    "johnny",
    "return",
    "hello",
    "love",
    "let",
    "go",
    "ahead",
    "test",
    "going",
    "pass",
    "something",
    "might",
    "wondering",
    "right",
    "watching",
    "videos",
    "statement",
    "normally",
    "write",
    "statement",
    "brackets",
    "would",
    "put",
    "return",
    "right",
    "prefer",
    "see",
    "um",
    "javascript",
    "bunch",
    "little",
    "quirks",
    "simple",
    "statement",
    "like",
    "returning",
    "single",
    "line",
    "actually",
    "add",
    "brackets",
    "syntactical",
    "thing",
    "totally",
    "fine",
    "run",
    "test",
    "going",
    "pass",
    "let",
    "go",
    "ahead",
    "attempt",
    "passed",
    "test",
    "let",
    "go",
    "ahead",
    "submit",
    "going",
    "couple",
    "possible",
    "answers",
    "another",
    "uh",
    "turner",
    "yeah",
    "using",
    "turner",
    "operator",
    "basically",
    "enclosing",
    "turner",
    "operator",
    "within",
    "parentheses",
    "putting",
    "middle",
    "string",
    "concatenation",
    "clever",
    "something",
    "need",
    "totally",
    "unnecessary",
    "honestly",
    "quite",
    "readable",
    "done",
    "um",
    "ones",
    "uh",
    "rather",
    "simple",
    "nice",
    "one",
    "good",
    "solution",
    "name",
    "johnny",
    "return",
    "else",
    "return",
    "something",
    "else",
    "kind",
    "something",
    "similar",
    "add",
    "lse",
    "statement",
    "right",
    "let",
    "go",
    "next",
    "problem",
    "next",
    "problem",
    "n",
    "divisible",
    "x",
    "let",
    "see",
    "got",
    "okay",
    "got",
    "quite",
    "bit",
    "uh",
    "quite",
    "examples",
    "create",
    "function",
    "checks",
    "number",
    "n",
    "divisible",
    "two",
    "numbers",
    "x",
    "inputs",
    "positive",
    "nonzero",
    "digits",
    "last",
    "sentence",
    "useful",
    "telling",
    "us",
    "hey",
    "going",
    "throw",
    "know",
    "crazy",
    "arguments",
    "function",
    "worry",
    "handling",
    "know",
    "different",
    "types",
    "data",
    "um",
    "know",
    "know",
    "worry",
    "uh",
    "string",
    "passed",
    "data",
    "case",
    "might",
    "convert",
    "throw",
    "air",
    "case",
    "inputs",
    "positive",
    "nonzero",
    "digits",
    "going",
    "one",
    "infinity",
    "basically",
    "right",
    "examples",
    "might",
    "well",
    "use",
    "um",
    "n",
    "3",
    "x",
    "1",
    "3",
    "true",
    "3",
    "divisible",
    "1",
    "3",
    "right",
    "12",
    "x",
    "2",
    "6",
    "true",
    "12",
    "divisible",
    "2",
    "6",
    "right",
    "basically",
    "know",
    "looking",
    "numbers",
    "trying",
    "figure",
    "divisible",
    "right",
    "immediately",
    "kind",
    "thinking",
    "modulus",
    "operator",
    "anytime",
    "look",
    "something",
    "says",
    "divisible",
    "um",
    "comes",
    "handy",
    "also",
    "thing",
    "thinking",
    "initially",
    "saying",
    "checks",
    "number",
    "n",
    "divisible",
    "numbers",
    "capitalized",
    "tells",
    "probably",
    "going",
    "using",
    "operator",
    "point",
    "keeping",
    "mind",
    "solve",
    "um",
    "inputs",
    "positive",
    "non",
    "zero",
    "basically",
    "going",
    "uh",
    "going",
    "two",
    "different",
    "math",
    "problems",
    "say",
    "result",
    "one",
    "going",
    "going",
    "equal",
    "n",
    "x",
    "result",
    "two",
    "going",
    "n",
    "right",
    "running",
    "math",
    "problems",
    "getting",
    "result",
    "variable",
    "basically",
    "um",
    "divide",
    "let",
    "see",
    "let",
    "let",
    "go",
    "ahead",
    "console",
    "log",
    "results",
    "see",
    "output",
    "receiving",
    "test",
    "obviously",
    "everything",
    "failed",
    "um",
    "see",
    "getting",
    "getting",
    "decimals",
    "might",
    "expect",
    "go",
    "evenly",
    "good",
    "way",
    "check",
    "whether",
    "uh",
    "number",
    "whole",
    "number",
    "decimal",
    "using",
    "modulus",
    "operator",
    "think",
    "divide",
    "number",
    "one",
    "going",
    "always",
    "go",
    "right",
    "unless",
    "decimal",
    "let",
    "go",
    "play",
    "ground",
    "um",
    "divide",
    "1",
    "going",
    "give",
    "us",
    "20",
    "19",
    "1",
    "19",
    "1",
    "whole",
    "number",
    "decimal",
    "number",
    "modulus",
    "operator",
    "going",
    "return",
    "zero",
    "20",
    "modulus",
    "1",
    "zero",
    "19",
    "modulus",
    "1",
    "0",
    "modulus",
    "1",
    "whole",
    "number",
    "going",
    "modulus",
    "one",
    "going",
    "return",
    "us",
    "zero",
    "use",
    "solution",
    "say",
    "result",
    "one",
    "modulus",
    "1",
    "equals",
    "0",
    "statement",
    "comes",
    "result",
    "two",
    "modulus",
    "1",
    "equals",
    "0",
    "know",
    "correct",
    "answer",
    "let",
    "see",
    "wants",
    "us",
    "return",
    "says",
    "checks",
    "divisible",
    "okay",
    "okay",
    "returning",
    "true",
    "false",
    "case",
    "going",
    "return",
    "true",
    "true",
    "return",
    "false",
    "first",
    "result",
    "first",
    "division",
    "problem",
    "second",
    "division",
    "problem",
    "equal",
    "zero",
    "use",
    "modulus",
    "operator",
    "uh",
    "return",
    "false",
    "let",
    "test",
    "see",
    "get",
    "looks",
    "like",
    "passed",
    "great",
    "let",
    "attempt",
    "see",
    "passed",
    "test",
    "let",
    "see",
    "everyone",
    "else",
    "going",
    "guess",
    "lot",
    "people",
    "solved",
    "way",
    "course",
    "always",
    "clever",
    "folks",
    "solving",
    "one",
    "line",
    "um",
    "one",
    "interesting",
    "right",
    "going",
    "go",
    "know",
    "totally",
    "relevant",
    "us",
    "solved",
    "straightforward",
    "way",
    "clever",
    "straightforward",
    "asking",
    "feel",
    "free",
    "look",
    "let",
    "go",
    "next",
    "challenge",
    "point",
    "going",
    "try",
    "solve",
    "little",
    "bit",
    "quicker",
    "um",
    "blow",
    "rest",
    "video",
    "point",
    "things",
    "go",
    "course",
    "um",
    "kind",
    "know",
    "harked",
    "lot",
    "important",
    "things",
    "like",
    "look",
    "test",
    "think",
    "google",
    "kind",
    "stuff",
    "kind",
    "try",
    "speed",
    "little",
    "bit",
    "faster",
    "right",
    "one",
    "return",
    "negative",
    "simplest",
    "assignment",
    "given",
    "number",
    "make",
    "simple",
    "assignment",
    "given",
    "number",
    "make",
    "negative",
    "maybe",
    "number",
    "already",
    "negative",
    "right",
    "kind",
    "implying",
    "us",
    "check",
    "whether",
    "number",
    "negative",
    "first",
    "apply",
    "sort",
    "operation",
    "immediately",
    "know",
    "multiply",
    "something",
    "negative",
    "one",
    "turns",
    "know",
    "opposite",
    "sign",
    "say",
    "number",
    "less",
    "zero",
    "know",
    "negative",
    "going",
    "return",
    "number",
    "already",
    "negative",
    "otherwise",
    "less",
    "zero",
    "going",
    "return",
    "number",
    "multiplied",
    "solution",
    "right",
    "passed",
    "think",
    "going",
    "work",
    "pretty",
    "simple",
    "straightforward",
    "answer",
    "caught",
    "using",
    "else",
    "statements",
    "um",
    "opportunity",
    "use",
    "turner",
    "operator",
    "going",
    "see",
    "um",
    "solutions",
    "turner",
    "operator",
    "work",
    "basically",
    "exact",
    "thing",
    "little",
    "bit",
    "different",
    "thing",
    "put",
    "negative",
    "beginning",
    "variable",
    "flip",
    "sign",
    "shortcut",
    "javascript",
    "um",
    "another",
    "solution",
    "actually",
    "interesting",
    "use",
    "um",
    "math",
    "function",
    "called",
    "absolute",
    "method",
    "going",
    "turn",
    "number",
    "positive",
    "value",
    "turn",
    "everything",
    "get",
    "positive",
    "value",
    "reverse",
    "negative",
    "always",
    "going",
    "get",
    "negative",
    "value",
    "clever",
    "solution",
    "honestly",
    "think",
    "best",
    "solution",
    "thought",
    "using",
    "course",
    "beginner",
    "going",
    "think",
    "using",
    "math",
    "absolute",
    "meth",
    "method",
    "probably",
    "know",
    "look",
    "javascript",
    "functions",
    "sure",
    "um",
    "one",
    "might",
    "show",
    "yeah",
    "math",
    "methods",
    "could",
    "um",
    "tutorials",
    "point",
    "searched",
    "javascript",
    "functions",
    "math",
    "methods",
    "first",
    "one",
    "absolute",
    "method",
    "returns",
    "absolute",
    "value",
    "number",
    "knew",
    "could",
    "think",
    "use",
    "solution",
    "anyways",
    "like",
    "said",
    "going",
    "optimized",
    "solution",
    "going",
    "straightforward",
    "clear",
    "solution",
    "beginner",
    "right",
    "finding",
    "smallest",
    "integer",
    "array",
    "one",
    "right",
    "given",
    "array",
    "integers",
    "solution",
    "find",
    "smallest",
    "integer",
    "right",
    "looks",
    "like",
    "perfect",
    "opportunity",
    "write",
    "loop",
    "see",
    "solution",
    "actually",
    "getting",
    "us",
    "concept",
    "classes",
    "talked",
    "one",
    "bit",
    "far",
    "basically",
    "um",
    "class",
    "going",
    "know",
    "several",
    "different",
    "instance",
    "methods",
    "um",
    "f",
    "smallest",
    "int",
    "actually",
    "instance",
    "method",
    "sure",
    "might",
    "able",
    "edit",
    "let",
    "see",
    "well",
    "see",
    "test",
    "instantiating",
    "new",
    "class",
    "ca",
    "really",
    "anything",
    "telling",
    "worry",
    "class",
    "right",
    "e",
    "um",
    "implement",
    "method",
    "good",
    "within",
    "method",
    "going",
    "get",
    "uh",
    "arguments",
    "actually",
    "would",
    "call",
    "would",
    "params",
    "um",
    "prams",
    "define",
    "within",
    "function",
    "declaration",
    "arguments",
    "passed",
    "previous",
    "lessons",
    "told",
    "arguments",
    "parameters",
    "two",
    "sides",
    "coin",
    "case",
    "demonstrated",
    "um",
    "using",
    "args",
    "prms",
    "interchangeably",
    "right",
    "change",
    "prams",
    "say",
    "stay",
    "consistent",
    "going",
    "go",
    "ahead",
    "loop",
    "array",
    "pams",
    "going",
    "receive",
    "array",
    "integers",
    "right",
    "says",
    "bottom",
    "assume",
    "purpose",
    "challenge",
    "supplied",
    "array",
    "empty",
    "handle",
    "case",
    "empty",
    "say",
    "anything",
    "well",
    "actually",
    "yeah",
    "going",
    "get",
    "array",
    "integers",
    "good",
    "let",
    "go",
    "ahead",
    "um",
    "assume",
    "pams",
    "array",
    "actually",
    "want",
    "name",
    "something",
    "even",
    "descriptive",
    "call",
    "array",
    "numbers",
    "remember",
    "going",
    "make",
    "loop",
    "basic",
    "loop",
    "let",
    "go",
    "ahead",
    "go",
    "get",
    "end",
    "going",
    "grab",
    "length",
    "array",
    "numbers",
    "number",
    "array",
    "going",
    "check",
    "smallest",
    "integer",
    "actually",
    "declare",
    "variable",
    "going",
    "keep",
    "track",
    "smallest",
    "integer",
    "loop",
    "array",
    "let",
    "call",
    "small",
    "number",
    "going",
    "declare",
    "um",
    "looped",
    "numbers",
    "yet",
    "actually",
    "yeah",
    "let",
    "go",
    "ahead",
    "declare",
    "smallest",
    "number",
    "possibly",
    "get",
    "um",
    "array",
    "integers",
    "might",
    "get",
    "negative",
    "numbers",
    "let",
    "go",
    "ahead",
    "initialize",
    "zero",
    "comparison",
    "purposes",
    "see",
    "mean",
    "second",
    "loop",
    "array",
    "way",
    "going",
    "get",
    "individual",
    "number",
    "array",
    "using",
    "syntax",
    "going",
    "grab",
    "array",
    "going",
    "pass",
    "index",
    "going",
    "0",
    "1",
    "2",
    "3",
    "way",
    "till",
    "length",
    "array",
    "going",
    "represent",
    "number",
    "clarity",
    "going",
    "go",
    "ahead",
    "say",
    "say",
    "individual",
    "number",
    "equals",
    "going",
    "loop",
    "going",
    "um",
    "declare",
    "assign",
    "variable",
    "going",
    "check",
    "going",
    "say",
    "smallest",
    "number",
    "greater",
    "individual",
    "number",
    "also",
    "could",
    "said",
    "individual",
    "number",
    "obviously",
    "less",
    "um",
    "smallest",
    "number",
    "either",
    "way",
    "works",
    "going",
    "set",
    "new",
    "value",
    "smallest",
    "number",
    "greater",
    "individual",
    "number",
    "indivi",
    "well",
    "maybe",
    "name",
    "something",
    "descriptive",
    "individ",
    "ual",
    "number",
    "uh",
    "array",
    "say",
    "array",
    "number",
    "little",
    "bit",
    "descriptive",
    "sorry",
    "right",
    "even",
    "need",
    "take",
    "little",
    "break",
    "talking",
    "um",
    "want",
    "want",
    "say",
    "array",
    "number",
    "looking",
    "know",
    "iteration",
    "less",
    "existing",
    "smallest",
    "number",
    "want",
    "want",
    "set",
    "smallest",
    "number",
    "equal",
    "array",
    "number",
    "takes",
    "place",
    "new",
    "smallest",
    "number",
    "basically",
    "going",
    "happen",
    "loop",
    "array",
    "um",
    "going",
    "check",
    "number",
    "smaller",
    "going",
    "skip",
    "going",
    "go",
    "next",
    "iteration",
    "array",
    "really",
    "come",
    "bottom",
    "return",
    "function",
    "smallest",
    "number",
    "looped",
    "numbers",
    "array",
    "let",
    "go",
    "ahead",
    "test",
    "looks",
    "like",
    "failed",
    "think",
    "handle",
    "negative",
    "numbers",
    "let",
    "see",
    "oh",
    "actually",
    "mistake",
    "part",
    "initialized",
    "zero",
    "problem",
    "positive",
    "numbers",
    "array",
    "know",
    "full",
    "positive",
    "numbers",
    "let",
    "say",
    "array",
    "looked",
    "like",
    "two",
    "five",
    "six",
    "going",
    "loop",
    "three",
    "numbers",
    "going",
    "compare",
    "already",
    "smallest",
    "number",
    "zero",
    "none",
    "smaller",
    "smallest",
    "number",
    "end",
    "going",
    "return",
    "zero",
    "need",
    "actually",
    "declare",
    "going",
    "actually",
    "declare",
    "assign",
    "first",
    "thing",
    "going",
    "first",
    "iteration",
    "loop",
    "going",
    "going",
    "set",
    "smallest",
    "number",
    "equal",
    "first",
    "number",
    "going",
    "say",
    "equals",
    "0",
    "basically",
    "means",
    "first",
    "iteration",
    "loop",
    "want",
    "set",
    "smallest",
    "number",
    "equal",
    "array",
    "numbers",
    "want",
    "grab",
    "index",
    "actually",
    "actually",
    "put",
    "uh",
    "let",
    "get",
    "number",
    "talking",
    "first",
    "replace",
    "array",
    "number",
    "okay",
    "review",
    "changed",
    "saying",
    "going",
    "initialize",
    "declare",
    "variable",
    "going",
    "value",
    "yet",
    "assign",
    "value",
    "first",
    "iteration",
    "array",
    "um",
    "know",
    "first",
    "value",
    "array",
    "basically",
    "know",
    "always",
    "going",
    "equal",
    "z",
    "first",
    "let",
    "get",
    "number",
    "looking",
    "specific",
    "iteration",
    "assign",
    "array",
    "number",
    "variable",
    "going",
    "ask",
    "first",
    "iteration",
    "array",
    "want",
    "set",
    "smallest",
    "number",
    "variable",
    "equal",
    "first",
    "number",
    "array",
    "something",
    "compare",
    "iteration",
    "still",
    "first",
    "iteration",
    "array",
    "going",
    "compare",
    "array",
    "number",
    "smallest",
    "number",
    "going",
    "equal",
    "going",
    "get",
    "go",
    "work",
    "little",
    "bit",
    "better",
    "us",
    "infinite",
    "loop",
    "getting",
    "scatterbrained",
    "actually",
    "set",
    "equal",
    "one",
    "looking",
    "conditional",
    "big",
    "happening",
    "going",
    "loop",
    "iteration",
    "loop",
    "resetting",
    "zero",
    "therefore",
    "infinite",
    "loop",
    "actually",
    "something",
    "stumble",
    "upon",
    "lot",
    "infinite",
    "loops",
    "fun",
    "uh",
    "make",
    "sure",
    "make",
    "mistake",
    "let",
    "replace",
    "triple",
    "equals",
    "going",
    "actually",
    "equality",
    "comparison",
    "better",
    "time",
    "passed",
    "let",
    "attempt",
    "pass",
    "test",
    "point",
    "probably",
    "take",
    "break",
    "cuz",
    "getting",
    "little",
    "bit",
    "little",
    "bit",
    "fuzzy",
    "brain",
    "let",
    "submit",
    "let",
    "look",
    "people",
    "obviously",
    "better",
    "solution",
    "cases",
    "um",
    "think",
    "level",
    "right",
    "point",
    "ca",
    "even",
    "think",
    "anymore",
    "going",
    "take",
    "break",
    "come",
    "back",
    "finish",
    "rest",
    "problems",
    "next",
    "challenge",
    "grasshopper",
    "summation",
    "see",
    "says",
    "write",
    "program",
    "finds",
    "summation",
    "sum",
    "every",
    "number",
    "one",
    "variable",
    "called",
    "number",
    "num",
    "number",
    "always",
    "positive",
    "integer",
    "greater",
    "zero",
    "remember",
    "pay",
    "attention",
    "right",
    "worry",
    "negative",
    "numbers",
    "case",
    "let",
    "look",
    "example",
    "cuz",
    "want",
    "go",
    "first",
    "number",
    "eight",
    "saying",
    "go",
    "one",
    "8",
    "add",
    "everything",
    "together",
    "succession",
    "first",
    "thing",
    "notice",
    "adding",
    "one",
    "adding",
    "one",
    "number",
    "adding",
    "increases",
    "one",
    "looks",
    "similar",
    "loop",
    "probably",
    "write",
    "loop",
    "let",
    "go",
    "ahead",
    "template",
    "let",
    "equal",
    "uh",
    "zero",
    "start",
    "might",
    "change",
    "actually",
    "say",
    "less",
    "num",
    "um",
    "yeah",
    "less",
    "num",
    "want",
    "go",
    "many",
    "iterations",
    "um",
    "need",
    "get",
    "num",
    "value",
    "passed",
    "say",
    "start",
    "value",
    "zero",
    "add",
    "zero",
    "something",
    "know",
    "adds",
    "zero",
    "matter",
    "fine",
    "wants",
    "go",
    "less",
    "number",
    "case",
    "may",
    "actually",
    "start",
    "1",
    "say",
    "less",
    "equal",
    "number",
    "let",
    "go",
    "ahead",
    "let",
    "start",
    "1",
    "go",
    "number",
    "starters",
    "want",
    "print",
    "console",
    "see",
    "get",
    "want",
    "print",
    "time",
    "loop",
    "since",
    "good",
    "know",
    "place",
    "going",
    "go",
    "dev",
    "tools",
    "console",
    "going",
    "paste",
    "um",
    "um",
    "course",
    "num",
    "defined",
    "uh",
    "past",
    "argument",
    "anything",
    "function",
    "let",
    "put",
    "random",
    "number",
    "let",
    "put",
    "10",
    "press",
    "enter",
    "going",
    "see",
    "counts",
    "1",
    "2",
    "3",
    "4",
    "way",
    "10",
    "since",
    "started",
    "1",
    "get",
    "10",
    "start",
    "uh",
    "zero",
    "like",
    "normally",
    "loop",
    "take",
    "away",
    "equal",
    "sign",
    "going",
    "go",
    "0",
    "9",
    "add",
    "numbers",
    "going",
    "add",
    "right",
    "sum",
    "important",
    "start",
    "iteration",
    "one",
    "go",
    "way",
    "10",
    "put",
    "little",
    "equal",
    "sign",
    "also",
    "could",
    "know",
    "deleted",
    "gone",
    "less",
    "11",
    "kind",
    "get",
    "point",
    "conscious",
    "make",
    "variable",
    "called",
    "sum",
    "uh",
    "initialize",
    "zero",
    "start",
    "sum",
    "zero",
    "say",
    "sum",
    "equals",
    "sum",
    "plus",
    "starts",
    "one",
    "saying",
    "0",
    "1",
    "increments",
    "two",
    "sum",
    "going",
    "stored",
    "1",
    "1",
    "2",
    "go",
    "3",
    "current",
    "sum",
    "going",
    "um",
    "3",
    "1",
    "2",
    "3",
    "3",
    "6",
    "forth",
    "going",
    "give",
    "us",
    "sum",
    "another",
    "way",
    "could",
    "write",
    "paying",
    "attention",
    "uh",
    "previous",
    "video",
    "went",
    "mathematical",
    "operators",
    "plus",
    "equals",
    "say",
    "going",
    "going",
    "take",
    "sum",
    "going",
    "say",
    "value",
    "variable",
    "called",
    "sum",
    "finds",
    "value",
    "says",
    "take",
    "value",
    "add",
    "value",
    "abbreviated",
    "version",
    "going",
    "readability",
    "going",
    "say",
    "sum",
    "equals",
    "sum",
    "plus",
    "clear",
    "way",
    "could",
    "probably",
    "write",
    "get",
    "bottom",
    "gone",
    "iterations",
    "sum",
    "variable",
    "equal",
    "sum",
    "different",
    "uh",
    "values",
    "return",
    "sum",
    "let",
    "see",
    "get",
    "pass",
    "test",
    "cases",
    "think",
    "got",
    "right",
    "passed",
    "105",
    "test",
    "cases",
    "sure",
    "anyone",
    "would",
    "want",
    "write",
    "105",
    "test",
    "cases",
    "nevertheless",
    "let",
    "submit",
    "answer",
    "right",
    "let",
    "check",
    "see",
    "within",
    "series",
    "go",
    "collections",
    "right",
    "get",
    "mean",
    "array",
    "let",
    "see",
    "right",
    "right",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "left",
    "right",
    "bad",
    "let",
    "go",
    "ahead",
    "train",
    "get",
    "mean",
    "array",
    "right",
    "instructions",
    "say",
    "academic",
    "year",
    "end",
    "fateful",
    "moment",
    "school",
    "report",
    "remember",
    "averages",
    "must",
    "calculated",
    "students",
    "come",
    "entreat",
    "calculate",
    "average",
    "easy",
    "need",
    "write",
    "script",
    "right",
    "say",
    "script",
    "basically",
    "saying",
    "need",
    "write",
    "code",
    "return",
    "average",
    "given",
    "array",
    "rounded",
    "nearest",
    "integer",
    "array",
    "never",
    "empty",
    "always",
    "going",
    "get",
    "number",
    "array",
    "says",
    "round",
    "going",
    "think",
    "immediately",
    "going",
    "going",
    "use",
    "one",
    "utility",
    "functions",
    "javascript",
    "functions",
    "round",
    "number",
    "let",
    "go",
    "functions",
    "already",
    "looking",
    "math",
    "methods",
    "see",
    "uh",
    "look",
    "floor",
    "method",
    "function",
    "says",
    "returns",
    "largest",
    "integer",
    "less",
    "equal",
    "number",
    "basically",
    "rounds",
    "math",
    "floor",
    "going",
    "round",
    "numbers",
    "go",
    "console",
    "let",
    "go",
    "ahead",
    "clear",
    "got",
    "much",
    "stuff",
    "going",
    "say",
    "math",
    "floor",
    "um",
    "pass",
    "number",
    "2054",
    "going",
    "give",
    "us",
    "20",
    "rounded",
    "basically",
    "round",
    "function",
    "going",
    "use",
    "practice",
    "challenge",
    "um",
    "kind",
    "useless",
    "comment",
    "marks",
    "marks",
    "right",
    "like",
    "name",
    "given",
    "going",
    "rename",
    "uh",
    "cuz",
    "name",
    "parameters",
    "anything",
    "want",
    "going",
    "say",
    "uh",
    "score",
    "array",
    "going",
    "test",
    "scores",
    "whatever",
    "scores",
    "within",
    "array",
    "um",
    "let",
    "see",
    "get",
    "average",
    "okay",
    "average",
    "average",
    "going",
    "sum",
    "numbers",
    "divided",
    "count",
    "numbers",
    "right",
    "average",
    "formula",
    "pretty",
    "simple",
    "get",
    "count",
    "easy",
    "part",
    "say",
    "score",
    "arraylength",
    "going",
    "give",
    "us",
    "many",
    "numbers",
    "array",
    "sum",
    "unfortunately",
    "something",
    "know",
    "uh",
    "writing",
    "code",
    "uh",
    "sum",
    "function",
    "array",
    "like",
    "built",
    "javascript",
    "go",
    "google",
    "um",
    "let",
    "go",
    "google",
    "search",
    "sum",
    "values",
    "array",
    "javascript",
    "let",
    "go",
    "stack",
    "overflow",
    "um",
    "use",
    "uh",
    "method",
    "called",
    "reduce",
    "actually",
    "use",
    "arrow",
    "function",
    "um",
    "rather",
    "complicated",
    "really",
    "level",
    "trying",
    "right",
    "right",
    "trying",
    "straightforward",
    "way",
    "possible",
    "kind",
    "comes",
    "later",
    "experienced",
    "writing",
    "javascript",
    "code",
    "case",
    "little",
    "bit",
    "easier",
    "loop",
    "write",
    "loop",
    "started",
    "index",
    "zero",
    "want",
    "go",
    "hit",
    "numbers",
    "array",
    "actually",
    "case",
    "already",
    "gotten",
    "length",
    "array",
    "pass",
    "variable",
    "count",
    "stored",
    "way",
    "simplify",
    "code",
    "finally",
    "let",
    "break",
    "right",
    "going",
    "loop",
    "want",
    "add",
    "together",
    "kind",
    "similar",
    "last",
    "problem",
    "case",
    "want",
    "assign",
    "um",
    "want",
    "count",
    "uh",
    "want",
    "say",
    "variable",
    "say",
    "sum",
    "equals",
    "z",
    "right",
    "iter",
    "ation",
    "going",
    "say",
    "sum",
    "equals",
    "existing",
    "sum",
    "amount",
    "starts",
    "zero",
    "time",
    "iterate",
    "array",
    "score",
    "array",
    "going",
    "grab",
    "individual",
    "number",
    "looking",
    "add",
    "existing",
    "sum",
    "get",
    "bottom",
    "count",
    "sum",
    "let",
    "go",
    "ahead",
    "return",
    "average",
    "going",
    "sum",
    "divided",
    "count",
    "let",
    "see",
    "results",
    "right",
    "passed",
    "two",
    "failed",
    "one",
    "reason",
    "forgot",
    "round",
    "forgot",
    "requirement",
    "need",
    "surround",
    "math",
    "floor",
    "function",
    "return",
    "right",
    "answer",
    "could",
    "broken",
    "onto",
    "uh",
    "another",
    "line",
    "simplicity",
    "say",
    "average",
    "sum",
    "divided",
    "count",
    "say",
    "rounded",
    "equals",
    "math",
    "floor",
    "pass",
    "average",
    "take",
    "variable",
    "assigned",
    "want",
    "return",
    "rounded",
    "variable",
    "give",
    "us",
    "answer",
    "hopefully",
    "get",
    "right",
    "time",
    "let",
    "attempt",
    "able",
    "get",
    "awesome",
    "would",
    "solve",
    "problem",
    "see",
    "take",
    "slight",
    "break",
    "review",
    "um",
    "big",
    "part",
    "solving",
    "problems",
    "um",
    "obviously",
    "getting",
    "instructions",
    "right",
    "understanding",
    "type",
    "input",
    "going",
    "receiving",
    "function",
    "second",
    "part",
    "um",
    "easier",
    "um",
    "easier",
    "challenges",
    "going",
    "lot",
    "um",
    "looping",
    "arrays",
    "stuff",
    "like",
    "actually",
    "really",
    "consistent",
    "real",
    "world",
    "um",
    "writing",
    "code",
    "building",
    "apps",
    "going",
    "know",
    "stuff",
    "like",
    "quite",
    "bit",
    "going",
    "solving",
    "useless",
    "problems",
    "like",
    "going",
    "looping",
    "arrays",
    "lot",
    "setting",
    "counter",
    "variables",
    "sum",
    "variables",
    "kind",
    "stuff",
    "actually",
    "going",
    "testing",
    "us",
    "useful",
    "skills",
    "going",
    "use",
    "future",
    "right",
    "remember",
    "stack",
    "overflow",
    "question",
    "talking",
    "reducing",
    "um",
    "get",
    "average",
    "see",
    "exactly",
    "top",
    "solution",
    "guess",
    "best",
    "practice",
    "solution",
    "um",
    "basically",
    "using",
    "marks",
    "reduce",
    "going",
    "get",
    "us",
    "average",
    "going",
    "divide",
    "length",
    "going",
    "put",
    "floor",
    "basically",
    "uh",
    "round",
    "talking",
    "stack",
    "overflow",
    "solution",
    "honestly",
    "ask",
    "kind",
    "weird",
    "array",
    "uh",
    "arrays",
    "average",
    "method",
    "seems",
    "like",
    "common",
    "one",
    "nevertheless",
    "right",
    "challenge",
    "looks",
    "like",
    "picture",
    "look",
    "let",
    "let",
    "rock",
    "paper",
    "scissors",
    "okay",
    "says",
    "let",
    "play",
    "return",
    "player",
    "case",
    "draw",
    "return",
    "draw",
    "okay",
    "reminder",
    "rock",
    "paper",
    "scissors",
    "works",
    "think",
    "people",
    "would",
    "know",
    "um",
    "immediately",
    "look",
    "huge",
    "fan",
    "naming",
    "variable",
    "storing",
    "arrow",
    "function",
    "rps",
    "rock",
    "paper",
    "scissors",
    "um",
    "going",
    "rename",
    "need",
    "meaningful",
    "variables",
    "going",
    "name",
    "rock",
    "paper",
    "scissors",
    "spelled",
    "p1",
    "p2",
    "um",
    "uh",
    "descriptive",
    "let",
    "replace",
    "parameters",
    "something",
    "makes",
    "sense",
    "uh",
    "player",
    "one",
    "player",
    "two",
    "right",
    "got",
    "written",
    "like",
    "little",
    "bit",
    "better",
    "let",
    "go",
    "different",
    "cases",
    "first",
    "thing",
    "might",
    "want",
    "write",
    "pseudo",
    "code",
    "pseudo",
    "code",
    "basically",
    "um",
    "know",
    "writing",
    "like",
    "logically",
    "work",
    "maybe",
    "even",
    "considered",
    "pseudo",
    "code",
    "let",
    "write",
    "different",
    "scenarios",
    "uh",
    "say",
    "rock",
    "paper",
    "p",
    "scissors",
    "right",
    "player",
    "one",
    "player",
    "two",
    "result",
    "let",
    "go",
    "ahead",
    "write",
    "um",
    "player",
    "one",
    "rock",
    "since",
    "three",
    "different",
    "possibilities",
    "going",
    "matrix",
    "possibilities",
    "rock",
    "rock",
    "rock",
    "paper",
    "paper",
    "paper",
    "scissors",
    "scissors",
    "scissors",
    "okay",
    "possible",
    "plays",
    "player",
    "one",
    "obviously",
    "go",
    "player",
    "two",
    "alternate",
    "go",
    "rock",
    "paper",
    "scissors",
    "go",
    "rock",
    "okay",
    "comment",
    "written",
    "different",
    "possibilities",
    "going",
    "win",
    "case",
    "see",
    "three",
    "draws",
    "um",
    "three",
    "times",
    "player",
    "two",
    "wins",
    "three",
    "times",
    "player",
    "one",
    "going",
    "win",
    "might",
    "expect",
    "convey",
    "seeing",
    "right",
    "code",
    "answer",
    "um",
    "couple",
    "methods",
    "go",
    "going",
    "try",
    "go",
    "simplest",
    "straightforward",
    "easy",
    "read",
    "method",
    "seeing",
    "written",
    "like",
    "different",
    "scenarios",
    "think",
    "say",
    "going",
    "go",
    "player",
    "one",
    "three",
    "statements",
    "player",
    "one",
    "chooses",
    "rock",
    "player",
    "one",
    "chooses",
    "paper",
    "scissors",
    "put",
    "statements",
    "real",
    "quick",
    "say",
    "player",
    "one",
    "equals",
    "rock",
    "going",
    "copy",
    "okay",
    "got",
    "rock",
    "paper",
    "scissors",
    "three",
    "scenarios",
    "player",
    "one",
    "player",
    "two",
    "um",
    "obviously",
    "alternating",
    "let",
    "say",
    "uh",
    "player",
    "one",
    "plays",
    "rock",
    "um",
    "could",
    "probably",
    "put",
    "switch",
    "statement",
    "know",
    "need",
    "say",
    "player",
    "2",
    "equals",
    "rock",
    "going",
    "draw",
    "going",
    "return",
    "draw",
    "say",
    "player",
    "2",
    "equals",
    "paper",
    "going",
    "return",
    "player",
    "2",
    "one",
    "finally",
    "player",
    "2",
    "equals",
    "scissors",
    "case",
    "return",
    "player",
    "one",
    "one",
    "okay",
    "basically",
    "copy",
    "three",
    "going",
    "work",
    "uh",
    "one",
    "complete",
    "let",
    "fill",
    "rest",
    "results",
    "player",
    "one",
    "uh",
    "chooses",
    "paper",
    "player",
    "two",
    "chooses",
    "rock",
    "going",
    "player",
    "one",
    "going",
    "paper",
    "paper",
    "going",
    "draw",
    "player",
    "two",
    "last",
    "one",
    "right",
    "scissors",
    "versus",
    "rock",
    "going",
    "say",
    "player",
    "uh",
    "two",
    "one",
    "one",
    "player",
    "one",
    "one",
    "h",
    "raw",
    "let",
    "go",
    "ahead",
    "test",
    "looks",
    "like",
    "failed",
    "um",
    "complaining",
    "rps",
    "defined",
    "changed",
    "name",
    "function",
    "beginning",
    "guess",
    "ca",
    "would",
    "prefer",
    "see",
    "like",
    "descriptive",
    "let",
    "go",
    "ahead",
    "test",
    "looks",
    "like",
    "passed",
    "fulfilled",
    "different",
    "scenarios",
    "wrote",
    "guarantee",
    "efficient",
    "solution",
    "many",
    "cases",
    "like",
    "overlapping",
    "scenarios",
    "thinking",
    "logically",
    "want",
    "easiest",
    "thing",
    "read",
    "know",
    "even",
    "beginner",
    "could",
    "go",
    "understand",
    "solution",
    "works",
    "okay",
    "let",
    "attempt",
    "passed",
    "test",
    "let",
    "see",
    "someone",
    "going",
    "optimize",
    "little",
    "bit",
    "would",
    "solved",
    "problem",
    "okay",
    "first",
    "one",
    "saying",
    "p1",
    "equal",
    "p2",
    "return",
    "draw",
    "eliminates",
    "three",
    "scenarios",
    "write",
    "separate",
    "statements",
    "already",
    "reducing",
    "amount",
    "code",
    "lot",
    "going",
    "going",
    "put",
    "rules",
    "within",
    "um",
    "object",
    "actually",
    "quite",
    "interesting",
    "basically",
    "saying",
    "one",
    "player",
    "rule",
    "rock",
    "always",
    "going",
    "beat",
    "scissors",
    "paper",
    "always",
    "going",
    "beat",
    "rock",
    "scissors",
    "always",
    "going",
    "beat",
    "paper",
    "interesting",
    "um",
    "saying",
    "p2",
    "player",
    "two",
    "equal",
    "rules",
    "grabbing",
    "whatever",
    "player",
    "one",
    "responded",
    "going",
    "grab",
    "value",
    "compare",
    "player",
    "two",
    "uh",
    "responded",
    "yeah",
    "smart",
    "solution",
    "efficient",
    "um",
    "point",
    "solving",
    "however",
    "many",
    "solved",
    "20",
    "brain",
    "little",
    "shot",
    "going",
    "simple",
    "answer",
    "something",
    "little",
    "bit",
    "closer",
    "might",
    "able",
    "could",
    "combined",
    "conditions",
    "expressions",
    "rather",
    "separating",
    "bunch",
    "statements",
    "could",
    "combined",
    "together",
    "kind",
    "started",
    "obviously",
    "lot",
    "solutions",
    "problem",
    "right",
    "next",
    "one",
    "looks",
    "relatively",
    "straightforward",
    "oh",
    "says",
    "pretty",
    "straightforward",
    "goal",
    "create",
    "function",
    "removes",
    "first",
    "last",
    "characters",
    "string",
    "given",
    "one",
    "parameter",
    "original",
    "string",
    "worry",
    "strings",
    "less",
    "two",
    "characters",
    "okay",
    "going",
    "great",
    "um",
    "time",
    "use",
    "one",
    "functions",
    "let",
    "go",
    "string",
    "methods",
    "see",
    "available",
    "us",
    "string",
    "looking",
    "um",
    "could",
    "use",
    "character",
    "um",
    "could",
    "specify",
    "end",
    "string",
    "beginning",
    "string",
    "zero",
    "know",
    "could",
    "find",
    "length",
    "string",
    "find",
    "last",
    "character",
    "um",
    "seems",
    "little",
    "bit",
    "indirect",
    "though",
    "um",
    "let",
    "see",
    "also",
    "return",
    "substring",
    "actually",
    "going",
    "direct",
    "route",
    "substring",
    "going",
    "return",
    "characters",
    "string",
    "beginning",
    "specified",
    "location",
    "specified",
    "number",
    "characters",
    "okay",
    "show",
    "going",
    "use",
    "um",
    "first",
    "let",
    "kind",
    "get",
    "idea",
    "works",
    "string",
    "string",
    "hello",
    "say",
    "string",
    "substring",
    "maybe",
    "want",
    "start",
    "beginning",
    "going",
    "index",
    "zero",
    "really",
    "talked",
    "always",
    "talked",
    "arrays",
    "indexes",
    "strings",
    "also",
    "well",
    "think",
    "individual",
    "character",
    "within",
    "string",
    "separate",
    "index",
    "h",
    "going",
    "index",
    "zero",
    "e1",
    "l2",
    "forth",
    "starting",
    "index",
    "zero",
    "means",
    "starting",
    "h",
    "next",
    "uh",
    "argument",
    "get",
    "pass",
    "according",
    "instructions",
    "um",
    "looked",
    "kind",
    "know",
    "use",
    "already",
    "could",
    "click",
    "going",
    "say",
    "going",
    "pass",
    "want",
    "start",
    "length",
    "want",
    "grab",
    "let",
    "go",
    "ahead",
    "grab",
    "two",
    "characters",
    "string",
    "start",
    "h",
    "grab",
    "two",
    "full",
    "characters",
    "starting",
    "get",
    "would",
    "omit",
    "going",
    "start",
    "zero",
    "start",
    "beginning",
    "get",
    "characters",
    "replace",
    "one",
    "going",
    "get",
    "characters",
    "except",
    "first",
    "one",
    "actually",
    "um",
    "partially",
    "solution",
    "got",
    "first",
    "character",
    "removed",
    "figure",
    "remove",
    "last",
    "character",
    "figure",
    "long",
    "string",
    "total",
    "find",
    "long",
    "string",
    "believe",
    "might",
    "think",
    "method",
    "function",
    "yeah",
    "string",
    "length",
    "let",
    "try",
    "um",
    "let",
    "get",
    "rid",
    "say",
    "string",
    "length",
    "equal",
    "5",
    "know",
    "length",
    "string",
    "know",
    "string",
    "starts",
    "index",
    "zero",
    "know",
    "substring",
    "say",
    "uh",
    "string",
    "substring",
    "want",
    "start",
    "index",
    "one",
    "one",
    "omits",
    "first",
    "character",
    "string",
    "want",
    "end",
    "end",
    "want",
    "grab",
    "many",
    "different",
    "letters",
    "well",
    "want",
    "grab",
    "let",
    "see",
    "string",
    "length",
    "minus",
    "uh",
    "would",
    "two",
    "yeah",
    "would",
    "two",
    "removed",
    "first",
    "letter",
    "want",
    "remove",
    "last",
    "letter",
    "want",
    "grab",
    "total",
    "length",
    "string",
    "minus",
    "2",
    "okay",
    "solution",
    "right",
    "let",
    "go",
    "ahead",
    "problem",
    "write",
    "pretty",
    "easy",
    "return",
    "string",
    "substring",
    "maybe",
    "break",
    "know",
    "clear",
    "day",
    "uh",
    "length",
    "string",
    "going",
    "equal",
    "string",
    "length",
    "notice",
    "added",
    "parentheses",
    "end",
    "nature",
    "function",
    "know",
    "experience",
    "figure",
    "uh",
    "probably",
    "googling",
    "point",
    "try",
    "let",
    "say",
    "try",
    "would",
    "think",
    "makes",
    "logical",
    "sense",
    "going",
    "say",
    "string",
    "length",
    "function",
    "go",
    "ahead",
    "copy",
    "copy",
    "paste",
    "google",
    "going",
    "get",
    "stack",
    "overflow",
    "answer",
    "tells",
    "says",
    "oh",
    "use",
    "length",
    "add",
    "parentheses",
    "might",
    "figure",
    "happen",
    "know",
    "write",
    "string",
    "length",
    "need",
    "get",
    "substring",
    "return",
    "straight",
    "away",
    "string",
    "substring",
    "want",
    "start",
    "first",
    "character",
    "actually",
    "second",
    "character",
    "want",
    "get",
    "length",
    "string",
    "minus",
    "two",
    "characters",
    "okay",
    "let",
    "see",
    "get",
    "pass",
    "test",
    "expected",
    "okay",
    "let",
    "submit",
    "see",
    "maybe",
    "even",
    "simpler",
    "way",
    "use",
    "slice",
    "method",
    "um",
    "go",
    "functions",
    "would",
    "looked",
    "grabb",
    "substring",
    "method",
    "slice",
    "method",
    "uh",
    "right",
    "extracts",
    "section",
    "string",
    "returns",
    "new",
    "string",
    "well",
    "case",
    "smart",
    "overlooked",
    "realize",
    "read",
    "would",
    "obviously",
    "better",
    "selection",
    "substring",
    "give",
    "us",
    "idea",
    "solve",
    "multiple",
    "different",
    "ways",
    "sure",
    "point",
    "yep",
    "someone",
    "solved",
    "way",
    "solved",
    "um",
    "case",
    "string",
    "length",
    "minus",
    "one",
    "interesting",
    "oh",
    "actually",
    "substring",
    "different",
    "one",
    "used",
    "see",
    "one",
    "used",
    "used",
    "substring",
    "two",
    "different",
    "methods",
    "work",
    "kind",
    "similar",
    "little",
    "bit",
    "different",
    "one",
    "works",
    "way",
    "see",
    "uh",
    "person",
    "used",
    "exactly",
    "multiple",
    "ways",
    "solve",
    "problem",
    "let",
    "see",
    "blow",
    "last",
    "couple",
    "let",
    "go",
    "sum",
    "positive",
    "get",
    "array",
    "numbers",
    "return",
    "sum",
    "positive",
    "ones",
    "okay",
    "going",
    "loop",
    "going",
    "grab",
    "every",
    "number",
    "array",
    "going",
    "say",
    "individual",
    "number",
    "grabbed",
    "greater",
    "um",
    "yeah",
    "say",
    "greater",
    "equal",
    "zero",
    "um",
    "guess",
    "even",
    "need",
    "say",
    "greater",
    "zero",
    "want",
    "sum",
    "need",
    "sum",
    "variable",
    "let",
    "initialize",
    "sum",
    "variable",
    "set",
    "equal",
    "zero",
    "say",
    "positive",
    "number",
    "going",
    "say",
    "sum",
    "equals",
    "sum",
    "plus",
    "number",
    "using",
    "bottom",
    "return",
    "sum",
    "variable",
    "get",
    "correct",
    "answer",
    "passed",
    "pretty",
    "similar",
    "previous",
    "question",
    "uh",
    "video",
    "submit",
    "see",
    "uh",
    "commented",
    "solution",
    "kind",
    "thing",
    "bad",
    "obviously",
    "use",
    "simpler",
    "method",
    "reduce",
    "similar",
    "find",
    "average",
    "array",
    "um",
    "pretty",
    "complex",
    "like",
    "using",
    "pretty",
    "complex",
    "um",
    "function",
    "array",
    "using",
    "turner",
    "operator",
    "within",
    "know",
    "optimized",
    "max",
    "got",
    "basic",
    "mathematical",
    "operations",
    "let",
    "go",
    "ahead",
    "go",
    "says",
    "task",
    "create",
    "function",
    "four",
    "basic",
    "math",
    "operations",
    "take",
    "three",
    "op",
    "oper",
    "arguments",
    "want",
    "operation",
    "going",
    "tell",
    "us",
    "adding",
    "subtracting",
    "mult",
    "multiplying",
    "dividing",
    "two",
    "values",
    "rather",
    "simple",
    "um",
    "person",
    "formatted",
    "function",
    "little",
    "differently",
    "used",
    "different",
    "way",
    "format",
    "going",
    "bring",
    "back",
    "used",
    "seeing",
    "really",
    "matter",
    "okay",
    "basic",
    "operations",
    "first",
    "thing",
    "want",
    "write",
    "switch",
    "statement",
    "probably",
    "getting",
    "used",
    "point",
    "switch",
    "statement",
    "want",
    "pass",
    "operation",
    "going",
    "evaluate",
    "see",
    "operation",
    "case",
    "operation",
    "plus",
    "something",
    "add",
    "break",
    "statement",
    "fill",
    "rest",
    "case",
    "statements",
    "believe",
    "fill",
    "return",
    "uh",
    "could",
    "set",
    "equal",
    "um",
    "know",
    "variable",
    "since",
    "added",
    "break",
    "statements",
    "let",
    "go",
    "ahead",
    "initialize",
    "variable",
    "call",
    "result",
    "going",
    "say",
    "result",
    "equal",
    "value",
    "1",
    "plus",
    "value",
    "two",
    "copy",
    "line",
    "end",
    "return",
    "result",
    "whatever",
    "get",
    "let",
    "indent",
    "correctly",
    "really",
    "matter",
    "readability",
    "change",
    "sign",
    "put",
    "minus",
    "sign",
    "put",
    "multiplication",
    "sign",
    "division",
    "sign",
    "right",
    "let",
    "go",
    "ahead",
    "attempt",
    "right",
    "worked",
    "feeling",
    "someone",
    "solved",
    "one",
    "line",
    "see",
    "yep",
    "right",
    "um",
    "simplified",
    "let",
    "explain",
    "type",
    "eval",
    "let",
    "look",
    "uh",
    "javascript",
    "eval",
    "going",
    "learn",
    "little",
    "bit",
    "eval",
    "function",
    "evaluates",
    "executes",
    "argument",
    "three",
    "uh",
    "arguments",
    "passed",
    "operation",
    "first",
    "number",
    "second",
    "number",
    "always",
    "going",
    "um",
    "one",
    "one",
    "substituting",
    "operation",
    "well",
    "might",
    "think",
    "oh",
    "hey",
    "let",
    "let",
    "go",
    "ahead",
    "train",
    "one",
    "show",
    "exactly",
    "talking",
    "let",
    "go",
    "case",
    "might",
    "say",
    "return",
    "value",
    "one",
    "operation",
    "value",
    "two",
    "going",
    "obviously",
    "work",
    "valid",
    "javascript",
    "right",
    "trying",
    "trying",
    "turn",
    "operation",
    "javascript",
    "operator",
    "make",
    "happen",
    "surround",
    "eval",
    "statement",
    "right",
    "basically",
    "going",
    "believe",
    "separate",
    "comma",
    "separated",
    "values",
    "put",
    "one",
    "big",
    "string",
    "let",
    "go",
    "ahead",
    "create",
    "uh",
    "string",
    "operation",
    "string",
    "going",
    "equal",
    "value",
    "one",
    "plus",
    "operation",
    "plus",
    "value",
    "two",
    "um",
    "case",
    "going",
    "numbers",
    "yep",
    "work",
    "value",
    "one",
    "string",
    "everything",
    "else",
    "going",
    "um",
    "coerced",
    "string",
    "work",
    "operation",
    "plus",
    "value",
    "one",
    "value",
    "two",
    "want",
    "console",
    "log",
    "see",
    "represents",
    "console",
    "log",
    "comment",
    "return",
    "value",
    "second",
    "let",
    "test",
    "going",
    "see",
    "console",
    "log",
    "giving",
    "us",
    "following",
    "operations",
    "know",
    "look",
    "look",
    "like",
    "know",
    "valid",
    "mth",
    "operations",
    "right",
    "string",
    "enclose",
    "uh",
    "eval",
    "function",
    "say",
    "eval",
    "pass",
    "operation",
    "string",
    "going",
    "evaluate",
    "string",
    "words",
    "going",
    "evaluate",
    "string",
    "4",
    "7",
    "return",
    "result",
    "work",
    "much",
    "longer",
    "code",
    "wrote",
    "let",
    "let",
    "go",
    "back",
    "see",
    "one",
    "person",
    "wrote",
    "know",
    "abbreviated",
    "everything",
    "exact",
    "thing",
    "another",
    "way",
    "solve",
    "efficient",
    "next",
    "string",
    "repeat",
    "write",
    "function",
    "called",
    "repeat",
    "string",
    "repeats",
    "given",
    "string",
    "source",
    "exactly",
    "count",
    "number",
    "times",
    "okay",
    "going",
    "get",
    "going",
    "pass",
    "want",
    "repeat",
    "six",
    "times",
    "five",
    "times",
    "string",
    "want",
    "repeat",
    "another",
    "classic",
    "example",
    "use",
    "um",
    "loop",
    "set",
    "loop",
    "equal",
    "um",
    "basic",
    "syntax",
    "want",
    "go",
    "less",
    "less",
    "n",
    "let",
    "replace",
    "number",
    "repeats",
    "string",
    "want",
    "repeat",
    "number",
    "repeats",
    "okay",
    "looping",
    "let",
    "go",
    "ahead",
    "make",
    "starter",
    "string",
    "set",
    "equal",
    "empty",
    "string",
    "going",
    "concatenate",
    "strings",
    "many",
    "times",
    "loop",
    "goes",
    "say",
    "starter",
    "string",
    "equals",
    "whatever",
    "exists",
    "starter",
    "string",
    "plus",
    "string",
    "value",
    "return",
    "correct",
    "answer",
    "us",
    "works",
    "pretty",
    "consistent",
    "done",
    "previous",
    "problems",
    "loop",
    "variable",
    "stores",
    "um",
    "sort",
    "value",
    "later",
    "return",
    "modified",
    "several",
    "times",
    "values",
    "loop",
    "course",
    "easier",
    "solution",
    "see",
    "use",
    "repeat",
    "function",
    "actually",
    "know",
    "function",
    "um",
    "go",
    "string",
    "methods",
    "sort",
    "repeat",
    "let",
    "see",
    "seeing",
    "right",
    "string",
    "method",
    "miss",
    "let",
    "search",
    "page",
    "see",
    "might",
    "new",
    "method",
    "okay",
    "maybe",
    "maybe",
    "use",
    "w3",
    "schools",
    "updated",
    "must",
    "recently",
    "added",
    "method",
    "sort",
    "yeah",
    "looks",
    "like",
    "came",
    "es6",
    "newest",
    "version",
    "javascript",
    "uh",
    "spec",
    "probably",
    "site",
    "interesting",
    "use",
    "repeat",
    "string",
    "uh",
    "repeat",
    "string",
    "number",
    "times",
    "interesting",
    "okay",
    "go",
    "next",
    "problem",
    "convert",
    "string",
    "array",
    "easy",
    "already",
    "done",
    "um",
    "least",
    "think",
    "done",
    "many",
    "problems",
    "point",
    "think",
    "say",
    "string",
    "uh",
    "split",
    "split",
    "empty",
    "character",
    "oh",
    "okay",
    "uh",
    "want",
    "split",
    "like",
    "let",
    "see",
    "oh",
    "oh",
    "okay",
    "want",
    "split",
    "spaces",
    "space",
    "words",
    "press",
    "space",
    "bar",
    "quotes",
    "adds",
    "space",
    "want",
    "split",
    "one",
    "pass",
    "see",
    "pretty",
    "much",
    "everyone",
    "solved",
    "exact",
    "way",
    "getting",
    "end",
    "problems",
    "congrats",
    "still",
    "around",
    "solving",
    "problems",
    "would",
    "presume",
    "uh",
    "people",
    "would",
    "remove",
    "string",
    "spaces",
    "remove",
    "spaces",
    "string",
    "return",
    "resultant",
    "string",
    "one",
    "feels",
    "like",
    "sort",
    "method",
    "use",
    "uh",
    "since",
    "find",
    "newer",
    "methods",
    "tutorials",
    "point",
    "let",
    "go",
    "uh",
    "w3",
    "schools",
    "thinking",
    "something",
    "called",
    "trim",
    "yeah",
    "like",
    "trim",
    "might",
    "says",
    "remove",
    "white",
    "space",
    "sides",
    "string",
    "think",
    "looking",
    "let",
    "go",
    "ahead",
    "return",
    "x",
    "string",
    "like",
    "know",
    "calling",
    "x",
    "call",
    "string",
    "string",
    "trim",
    "see",
    "uh",
    "going",
    "work",
    "looks",
    "like",
    "numbers",
    "uh",
    "put",
    "looks",
    "like",
    "trim",
    "method",
    "going",
    "end",
    "string",
    "let",
    "try",
    "uh",
    "dev",
    "console",
    "let",
    "test",
    "string",
    "uh",
    "string",
    "spaces",
    "oh",
    "blanking",
    "completely",
    "got",
    "name",
    "variable",
    "string",
    "equals",
    "sorry",
    "kind",
    "losing",
    "right",
    "use",
    "string",
    "trim",
    "looks",
    "like",
    "happening",
    "removing",
    "spaces",
    "end",
    "kind",
    "um",
    "tells",
    "us",
    "wonder",
    "another",
    "method",
    "know",
    "going",
    "going",
    "combine",
    "methods",
    "together",
    "first",
    "maybe",
    "put",
    "array",
    "say",
    "string",
    "dosit",
    "want",
    "split",
    "space",
    "um",
    "everything",
    "split",
    "want",
    "go",
    "array",
    "um",
    "want",
    "remove",
    "white",
    "spaces",
    "around",
    "let",
    "let",
    "go",
    "ahead",
    "write",
    "code",
    "see",
    "get",
    "turn",
    "array",
    "split",
    "spaces",
    "going",
    "loop",
    "array",
    "item",
    "array",
    "going",
    "uh",
    "remove",
    "spaces",
    "around",
    "actually",
    "going",
    "build",
    "new",
    "array",
    "going",
    "introduce",
    "push",
    "method",
    "uh",
    "say",
    "new",
    "array",
    "push",
    "going",
    "add",
    "element",
    "end",
    "array",
    "right",
    "empty",
    "array",
    "push",
    "items",
    "array",
    "want",
    "push",
    "going",
    "trimmed",
    "version",
    "string",
    "different",
    "array",
    "item",
    "happens",
    "subsets",
    "original",
    "string",
    "case",
    "say",
    "trimmed",
    "string",
    "breaking",
    "clarity",
    "going",
    "um",
    "equal",
    "uh",
    "looking",
    "array",
    "index",
    "trim",
    "know",
    "string",
    "trimmed",
    "together",
    "spaces",
    "anywhere",
    "going",
    "push",
    "array",
    "point",
    "let",
    "go",
    "ahead",
    "new",
    "array",
    "getting",
    "let",
    "test",
    "going",
    "see",
    "array",
    "every",
    "case",
    "going",
    "know",
    "characters",
    "spaces",
    "around",
    "case",
    "empty",
    "string",
    "even",
    "space",
    "anything",
    "combine",
    "going",
    "add",
    "spaces",
    "kind",
    "point",
    "use",
    "um",
    "method",
    "called",
    "join",
    "um",
    "final",
    "string",
    "going",
    "equal",
    "new",
    "array",
    "jooin",
    "want",
    "join",
    "empty",
    "character",
    "point",
    "return",
    "final",
    "string",
    "think",
    "solve",
    "problem",
    "right",
    "passed",
    "looks",
    "good",
    "okay",
    "think",
    "closing",
    "end",
    "beginner",
    "lost",
    "without",
    "map",
    "given",
    "array",
    "integers",
    "return",
    "new",
    "array",
    "value",
    "doubled",
    "okay",
    "actually",
    "um",
    "says",
    "beginner",
    "try",
    "use",
    "map",
    "method",
    "basically",
    "saying",
    "um",
    "beginner",
    "like",
    "hey",
    "could",
    "solve",
    "know",
    "easier",
    "way",
    "go",
    "ahead",
    "try",
    "use",
    "map",
    "method",
    "might",
    "well",
    "going",
    "get",
    "uh",
    "array",
    "going",
    "rename",
    "undescriptive",
    "going",
    "go",
    "look",
    "map",
    "method",
    "actually",
    "belongs",
    "arrays",
    "go",
    "javascript",
    "arrays",
    "go",
    "array",
    "methods",
    "functions",
    "going",
    "see",
    "one",
    "called",
    "map",
    "map",
    "um",
    "function",
    "going",
    "going",
    "take",
    "original",
    "value",
    "array",
    "going",
    "apply",
    "transformation",
    "transformation",
    "basically",
    "going",
    "return",
    "brand",
    "new",
    "array",
    "every",
    "unit",
    "array",
    "transformed",
    "previously",
    "going",
    "loops",
    "storing",
    "things",
    "variables",
    "creating",
    "new",
    "variables",
    "stuff",
    "like",
    "could",
    "always",
    "use",
    "map",
    "method",
    "um",
    "let",
    "go",
    "ahead",
    "try",
    "going",
    "return",
    "array",
    "map",
    "case",
    "actually",
    "pass",
    "arrow",
    "function",
    "call",
    "like",
    "call",
    "back",
    "function",
    "get",
    "uh",
    "little",
    "bit",
    "later",
    "going",
    "callback",
    "function",
    "right",
    "let",
    "break",
    "know",
    "separate",
    "space",
    "see",
    "writing",
    "anonymous",
    "function",
    "arrow",
    "function",
    "within",
    "arrow",
    "function",
    "going",
    "break",
    "new",
    "line",
    "going",
    "return",
    "value",
    "weird",
    "um",
    "setup",
    "actually",
    "going",
    "um",
    "going",
    "go",
    "ahead",
    "remove",
    "going",
    "say",
    "result",
    "array",
    "equal",
    "whatever",
    "map",
    "function",
    "returns",
    "going",
    "return",
    "result",
    "later",
    "weird",
    "syntax",
    "basically",
    "whatever",
    "return",
    "map",
    "method",
    "function",
    "actually",
    "embedded",
    "within",
    "map",
    "method",
    "um",
    "whatever",
    "return",
    "going",
    "transformation",
    "whatever",
    "pass",
    "um",
    "provide",
    "parameter",
    "uh",
    "array",
    "item",
    "going",
    "going",
    "passed",
    "argument",
    "going",
    "say",
    "array",
    "item",
    "multiplied",
    "two",
    "want",
    "us",
    "value",
    "going",
    "return",
    "us",
    "array",
    "values",
    "doubled",
    "return",
    "result",
    "passed",
    "um",
    "would",
    "suggest",
    "reading",
    "method",
    "trying",
    "little",
    "bit",
    "realized",
    "done",
    "put",
    "function",
    "within",
    "function",
    "takes",
    "function",
    "argument",
    "um",
    "summarize",
    "basically",
    "passed",
    "function",
    "argument",
    "another",
    "function",
    "function",
    "actually",
    "executes",
    "function",
    "passed",
    "bit",
    "tongue",
    "twister",
    "understand",
    "due",
    "time",
    "would",
    "definitely",
    "put",
    "radar",
    "something",
    "useful",
    "javascript",
    "point",
    "doubting",
    "picking",
    "25",
    "problems",
    "exhausting",
    "congrats",
    "still",
    "around",
    "um",
    "let",
    "keep",
    "going",
    "right",
    "going",
    "survive",
    "hero",
    "way",
    "castle",
    "complete",
    "mission",
    "however",
    "told",
    "castle",
    "surrounded",
    "couple",
    "powerful",
    "dragons",
    "dragon",
    "takes",
    "two",
    "bullets",
    "defeated",
    "hero",
    "idea",
    "many",
    "bullets",
    "carry",
    "assuming",
    "going",
    "grab",
    "specific",
    "given",
    "number",
    "bullets",
    "move",
    "forward",
    "fight",
    "another",
    "specific",
    "given",
    "number",
    "dragons",
    "survive",
    "return",
    "true",
    "yes",
    "false",
    "otherwise",
    "okay",
    "basically",
    "saying",
    "us",
    "know",
    "many",
    "bullets",
    "coming",
    "know",
    "many",
    "dragons",
    "coming",
    "either",
    "still",
    "figure",
    "hero",
    "going",
    "defeat",
    "dragon",
    "let",
    "see",
    "rule",
    "dragon",
    "takes",
    "two",
    "bullets",
    "defeated",
    "okay",
    "basically",
    "could",
    "say",
    "bullets",
    "double",
    "amount",
    "dragons",
    "return",
    "true",
    "basically",
    "say",
    "case",
    "let",
    "go",
    "ahead",
    "use",
    "turner",
    "operator",
    "know",
    "late",
    "video",
    "brain",
    "probably",
    "fried",
    "point",
    "let",
    "use",
    "ternary",
    "operator",
    "store",
    "result",
    "variable",
    "say",
    "bullets",
    "divided",
    "dragons",
    "greater",
    "equal",
    "two",
    "going",
    "return",
    "true",
    "otherwise",
    "return",
    "false",
    "return",
    "result",
    "even",
    "need",
    "return",
    "tary",
    "operator",
    "let",
    "go",
    "beginning",
    "hit",
    "return",
    "basically",
    "looking",
    "expression",
    "uh",
    "evaluating",
    "whether",
    "expression",
    "true",
    "false",
    "um",
    "true",
    "return",
    "true",
    "false",
    "return",
    "false",
    "actually",
    "duplication",
    "going",
    "even",
    "need",
    "turner",
    "operator",
    "first",
    "place",
    "return",
    "expression",
    "uh",
    "evaluates",
    "true",
    "hero",
    "defeats",
    "dragon",
    "return",
    "false",
    "able",
    "passed",
    "works",
    "would",
    "solve",
    "simple",
    "way",
    "possible",
    "honestly",
    "math",
    "problem",
    "plus",
    "uh",
    "javascript",
    "expression",
    "operators",
    "array",
    "plus",
    "array",
    "let",
    "train",
    "new",
    "coding",
    "want",
    "get",
    "sum",
    "two",
    "arrays",
    "actually",
    "sum",
    "elements",
    "appreciate",
    "help",
    "huh",
    "looks",
    "like",
    "person",
    "writing",
    "challenge",
    "asking",
    "question",
    "okay",
    "ps",
    "array",
    "includes",
    "integer",
    "numbers",
    "output",
    "number",
    "two",
    "maybe",
    "asking",
    "question",
    "weird",
    "wording",
    "okay",
    "going",
    "work",
    "let",
    "go",
    "ahead",
    "test",
    "written",
    "ca",
    "add",
    "array",
    "together",
    "um",
    "loop",
    "um",
    "value",
    "array",
    "actually",
    "perfect",
    "uh",
    "time",
    "talk",
    "embedded",
    "loops",
    "let",
    "go",
    "ahead",
    "first",
    "going",
    "write",
    "outer",
    "loop",
    "writing",
    "time",
    "going",
    "say",
    "less",
    "array1",
    "array",
    "one",
    "length",
    "go",
    "okay",
    "also",
    "want",
    "grab",
    "um",
    "values",
    "array",
    "basically",
    "trying",
    "let",
    "say",
    "array",
    "1",
    "2",
    "3",
    "array",
    "2",
    "3",
    "4",
    "resultant",
    "array",
    "3",
    "5",
    "7",
    "added",
    "uh",
    "added",
    "number",
    "index",
    "zero",
    "arrays",
    "added",
    "number",
    "index",
    "one",
    "arrays",
    "put",
    "new",
    "one",
    "going",
    "going",
    "leave",
    "second",
    "reference",
    "first",
    "loop",
    "able",
    "get",
    "um",
    "actually",
    "need",
    "embedded",
    "loop",
    "know",
    "thinking",
    "say",
    "um",
    "array",
    "one",
    "value",
    "going",
    "equal",
    "array",
    "1",
    "come",
    "say",
    "array",
    "2",
    "value",
    "array",
    "2i",
    "right",
    "want",
    "uh",
    "say",
    "added",
    "value",
    "something",
    "like",
    "say",
    "array",
    "one",
    "value",
    "plus",
    "array",
    "2",
    "value",
    "gives",
    "us",
    "sum",
    "want",
    "start",
    "building",
    "new",
    "array",
    "new",
    "array",
    "equals",
    "something",
    "empty",
    "like",
    "previous",
    "uh",
    "problem",
    "use",
    "push",
    "method",
    "push",
    "new",
    "value",
    "array",
    "say",
    "added",
    "value",
    "get",
    "done",
    "loop",
    "right",
    "new",
    "array",
    "populated",
    "new",
    "value",
    "uh",
    "resultant",
    "summed",
    "array",
    "let",
    "return",
    "new",
    "array",
    "see",
    "goes",
    "looks",
    "like",
    "failed",
    "lot",
    "cases",
    "okay",
    "let",
    "see",
    "oh",
    "misinterpreted",
    "question",
    "entirely",
    "uh",
    "want",
    "actually",
    "give",
    "single",
    "number",
    "okay",
    "new",
    "okay",
    "blah",
    "blah",
    "blah",
    "got",
    "two",
    "arrays",
    "want",
    "sum",
    "elements",
    "okay",
    "need",
    "new",
    "array",
    "need",
    "sum",
    "variable",
    "going",
    "start",
    "zero",
    "added",
    "value",
    "keep",
    "say",
    "sum",
    "equals",
    "sum",
    "plus",
    "added",
    "value",
    "return",
    "sum",
    "end",
    "time",
    "passed",
    "okay",
    "misread",
    "question",
    "honestly",
    "know",
    "best",
    "question",
    "choose",
    "think",
    "last",
    "uh",
    "easy",
    "question",
    "coming",
    "maybe",
    "right",
    "one",
    "nice",
    "clear",
    "instructions",
    "nice",
    "introduction",
    "first",
    "century",
    "spans",
    "year",
    "one",
    "including",
    "year",
    "100",
    "second",
    "year",
    "101",
    "including",
    "year",
    "200",
    "task",
    "given",
    "year",
    "return",
    "century",
    "century",
    "1705",
    "returns",
    "18th",
    "century",
    "okay",
    "mean",
    "uh",
    "pretty",
    "basic",
    "let",
    "go",
    "ahead",
    "solve",
    "looks",
    "like",
    "catch",
    "going",
    "two",
    "examples",
    "1900",
    "going",
    "19th",
    "century",
    "16001",
    "going",
    "17th",
    "like",
    "says",
    "know",
    "one",
    "greater",
    "even",
    "year",
    "go",
    "century",
    "okay",
    "believe",
    "use",
    "sort",
    "modulus",
    "operator",
    "let",
    "try",
    "um",
    "let",
    "let",
    "let",
    "say",
    "century",
    "1901",
    "um",
    "let",
    "go",
    "ahead",
    "modulus",
    "start",
    "100",
    "okay",
    "100",
    "goes",
    "1901",
    "uh",
    "well",
    "would",
    "19",
    "times",
    "remainder",
    "one",
    "1900",
    "modulus",
    "100",
    "get",
    "zero",
    "okay",
    "interesting",
    "could",
    "say",
    "sentry",
    "modulus",
    "100",
    "returns",
    "zero",
    "want",
    "grab",
    "first",
    "two",
    "letters",
    "first",
    "two",
    "digits",
    "number",
    "return",
    "case",
    "1900",
    "want",
    "return",
    "19",
    "believe",
    "right",
    "want",
    "return",
    "19",
    "let",
    "say",
    "may",
    "bad",
    "solution",
    "let",
    "try",
    "year",
    "modulus",
    "100",
    "equals",
    "0",
    "means",
    "even",
    "uh",
    "even",
    "sentury",
    "going",
    "say",
    "want",
    "return",
    "first",
    "two",
    "digits",
    "um",
    "um",
    "let",
    "go",
    "ahead",
    "look",
    "number",
    "values",
    "okay",
    "pretty",
    "much",
    "going",
    "going",
    "convert",
    "string",
    "grab",
    "first",
    "two",
    "know",
    "digits",
    "characters",
    "convert",
    "back",
    "number",
    "may",
    "indirect",
    "way",
    "try",
    "anyway",
    "say",
    "year",
    "two",
    "string",
    "going",
    "chain",
    "um",
    "chain",
    "something",
    "want",
    "grab",
    "substring",
    "case",
    "want",
    "start",
    "zero",
    "grab",
    "two",
    "characters",
    "want",
    "turn",
    "entire",
    "thing",
    "number",
    "cast",
    "number",
    "way",
    "let",
    "go",
    "ahead",
    "test",
    "see",
    "solved",
    "couple",
    "excellent",
    "solved",
    "ones",
    "even",
    "know",
    "even",
    "year",
    "always",
    "going",
    "one",
    "greater",
    "1705",
    "returns",
    "18",
    "grab",
    "substring",
    "going",
    "grab",
    "first",
    "two",
    "digits",
    "going",
    "equal",
    "year",
    "two",
    "string",
    "substring",
    "02",
    "gives",
    "us",
    "first",
    "two",
    "digits",
    "want",
    "keep",
    "number",
    "since",
    "repeating",
    "let",
    "go",
    "ahead",
    "put",
    "top",
    "code",
    "get",
    "beginning",
    "take",
    "expression",
    "replace",
    "say",
    "first",
    "two",
    "digits",
    "works",
    "turning",
    "number",
    "want",
    "first",
    "want",
    "return",
    "number",
    "course",
    "um",
    "well",
    "already",
    "okay",
    "never",
    "mind",
    "going",
    "give",
    "us",
    "string",
    "need",
    "return",
    "number",
    "um",
    "first",
    "thing",
    "need",
    "turn",
    "number",
    "saying",
    "first",
    "two",
    "digits",
    "want",
    "add",
    "since",
    "number",
    "want",
    "add",
    "one",
    "think",
    "may",
    "work",
    "actually",
    "okay",
    "problem",
    "test",
    "year",
    "89",
    "since",
    "modulus",
    "100",
    "course",
    "going",
    "work",
    "less",
    "100",
    "one",
    "edge",
    "case",
    "could",
    "put",
    "top",
    "top",
    "say",
    "year",
    "less",
    "100",
    "return",
    "one",
    "takes",
    "care",
    "case",
    "test",
    "pass",
    "see",
    "passes",
    "test",
    "okay",
    "clearly",
    "quick",
    "fix",
    "solution",
    "actually",
    "solve",
    "greater",
    "problem",
    "let",
    "dig",
    "see",
    "dealing",
    "obviously",
    "larger",
    "numbers",
    "num",
    "stake",
    "much",
    "smaller",
    "numbers",
    "stake",
    "uh",
    "attempt",
    "using",
    "modulus",
    "100",
    "going",
    "work",
    "well",
    "believe",
    "solution",
    "may",
    "close",
    "actually",
    "going",
    "go",
    "ahead",
    "see",
    "something",
    "discussion",
    "always",
    "look",
    "comments",
    "suggestions",
    "see",
    "people",
    "thinking",
    "um",
    "see",
    "okay",
    "useless",
    "okay",
    "really",
    "helping",
    "us",
    "much",
    "point",
    "brain",
    "fried",
    "going",
    "go",
    "ahead",
    "search",
    "google",
    "stack",
    "overflow",
    "uh",
    "say",
    "century",
    "year",
    "javascript",
    "stack",
    "overflow",
    "curious",
    "see",
    "people",
    "solv",
    "okay",
    "looks",
    "like",
    "using",
    "math",
    "sealing",
    "function",
    "let",
    "see",
    "okay",
    "ceiling",
    "function",
    "returns",
    "x",
    "rounded",
    "upwards",
    "nearest",
    "integer",
    "go",
    "back",
    "attempt",
    "see",
    "different",
    "uh",
    "test",
    "cases",
    "let",
    "grab",
    "one",
    "400",
    "390",
    "let",
    "see",
    "math",
    "ceiling",
    "returns",
    "oh",
    "divide",
    "100",
    "let",
    "404",
    "trying",
    "get",
    "round",
    "nearest",
    "100",
    "okay",
    "basically",
    "answer",
    "um",
    "could",
    "think",
    "today",
    "let",
    "go",
    "ahead",
    "try",
    "um",
    "instead",
    "stuff",
    "let",
    "return",
    "math",
    "sealing",
    "year",
    "100",
    "may",
    "may",
    "get",
    "cases",
    "even",
    "maybe",
    "let",
    "attempt",
    "right",
    "go",
    "clever",
    "um",
    "guess",
    "case",
    "trying",
    "solve",
    "um",
    "go",
    "scenario",
    "head",
    "years",
    "would",
    "know",
    "greater",
    "say",
    "1720",
    "1930",
    "like",
    "think",
    "like",
    "year",
    "something",
    "like",
    "case",
    "little",
    "bit",
    "instructions",
    "like",
    "know",
    "say",
    "whole",
    "lot",
    "input",
    "going",
    "say",
    "going",
    "know",
    "go",
    "huge",
    "uh",
    "input",
    "like",
    "ended",
    "partially",
    "instructions",
    "partially",
    "know",
    "thought",
    "edge",
    "cases",
    "thought",
    "fact",
    "number",
    "could",
    "greater",
    "four",
    "digits",
    "like",
    "solved",
    "problem",
    "specific",
    "set",
    "input",
    "possible",
    "input",
    "common",
    "solving",
    "coding",
    "challenges",
    "always",
    "think",
    "edge",
    "cases",
    "get",
    "first",
    "time",
    "definitely",
    "good",
    "learning",
    "opportunity",
    "um",
    "see",
    "know",
    "trying",
    "solve",
    "coding",
    "challenges",
    "right",
    "one",
    "converting",
    "cat",
    "years",
    "dog",
    "years",
    "human",
    "years",
    "going",
    "get",
    "whole",
    "numbers",
    "going",
    "get",
    "human",
    "years",
    "one",
    "greater",
    "okay",
    "15",
    "cat",
    "years",
    "first",
    "year",
    "nine",
    "cat",
    "years",
    "second",
    "year",
    "four",
    "year",
    "uh",
    "15",
    "dog",
    "years",
    "first",
    "year",
    "nine",
    "second",
    "five",
    "notice",
    "similarities",
    "first",
    "two",
    "go",
    "15",
    "n",
    "first",
    "two",
    "years",
    "okay",
    "getting",
    "input",
    "um",
    "cat",
    "dog",
    "got",
    "time",
    "kitten",
    "puppy",
    "human",
    "years",
    "ago",
    "going",
    "get",
    "number",
    "passed",
    "return",
    "respective",
    "ages",
    "okay",
    "easiest",
    "one",
    "going",
    "human",
    "years",
    "plus",
    "say",
    "human",
    "years",
    "answer",
    "first",
    "part",
    "array",
    "second",
    "two",
    "little",
    "bit",
    "harder",
    "get",
    "dogs",
    "cats",
    "right",
    "first",
    "thing",
    "want",
    "let",
    "see",
    "let",
    "say",
    "human",
    "years",
    "one",
    "well",
    "case",
    "going",
    "return",
    "15",
    "let",
    "make",
    "variable",
    "say",
    "human",
    "years",
    "equals",
    "1",
    "want",
    "return",
    "um",
    "right",
    "going",
    "say",
    "human",
    "years",
    "going",
    "say",
    "cat",
    "age",
    "going",
    "15",
    "dog",
    "age",
    "15",
    "human",
    "years",
    "equal",
    "two",
    "let",
    "see",
    "going",
    "add",
    "nine",
    "going",
    "return",
    "something",
    "similar",
    "ca",
    "uh",
    "time",
    "going",
    "return",
    "24",
    "right",
    "remainder",
    "going",
    "say",
    "uh",
    "first",
    "two",
    "years",
    "get",
    "24",
    "dog",
    "cat",
    "increment",
    "different",
    "amounts",
    "solve",
    "okay",
    "let",
    "say",
    "um",
    "cat",
    "excess",
    "years",
    "going",
    "equal",
    "human",
    "year",
    "minus",
    "2",
    "say",
    "say",
    "excess",
    "years",
    "use",
    "basically",
    "trying",
    "find",
    "know",
    "many",
    "years",
    "first",
    "two",
    "years",
    "looking",
    "probably",
    "multiply",
    "whatever",
    "multiple",
    "um",
    "say",
    "extra",
    "dog",
    "start",
    "cat",
    "extra",
    "cat",
    "years",
    "equals",
    "excess",
    "years",
    "time",
    "4",
    "dog",
    "years",
    "going",
    "five",
    "going",
    "make",
    "new",
    "variable",
    "say",
    "extra",
    "dog",
    "years",
    "return",
    "bottom",
    "hit",
    "either",
    "uh",
    "logical",
    "statements",
    "um",
    "return",
    "everything",
    "done",
    "reach",
    "code",
    "reached",
    "either",
    "code",
    "paths",
    "going",
    "reach",
    "going",
    "always",
    "return",
    "human",
    "years",
    "number",
    "years",
    "going",
    "say",
    "um",
    "know",
    "got",
    "least",
    "two",
    "years",
    "reach",
    "code",
    "say",
    "24",
    "plus",
    "extra",
    "cat",
    "years",
    "say",
    "24",
    "plus",
    "extra",
    "dog",
    "years",
    "let",
    "see",
    "gets",
    "right",
    "awesome",
    "got",
    "right",
    "would",
    "solve",
    "problem",
    "let",
    "see",
    "people",
    "would",
    "solve",
    "okay",
    "interesting",
    "similar",
    "concept",
    "asked",
    "uh",
    "year",
    "one",
    "year",
    "two",
    "basically",
    "um",
    "thing",
    "less",
    "code",
    "feel",
    "pretty",
    "good",
    "pretty",
    "good",
    "one",
    "especially",
    "able",
    "think",
    "going",
    "right",
    "think",
    "like",
    "two",
    "total",
    "going",
    "make",
    "end",
    "football",
    "team",
    "finished",
    "championship",
    "results",
    "match",
    "looks",
    "like",
    "x",
    "colon",
    "results",
    "matches",
    "recorded",
    "collection",
    "right",
    "write",
    "function",
    "takes",
    "collection",
    "counts",
    "points",
    "team",
    "championship",
    "rules",
    "counting",
    "points",
    "x",
    "greater",
    "three",
    "points",
    "x",
    "less",
    "0er",
    "points",
    "equal",
    "one",
    "point",
    "10",
    "matches",
    "total",
    "x",
    "going",
    "0",
    "4",
    "going",
    "inclusive",
    "024",
    "going",
    "024",
    "okay",
    "games",
    "let",
    "make",
    "specific",
    "going",
    "games",
    "array",
    "um",
    "initialize",
    "saying",
    "let",
    "total",
    "points",
    "equal",
    "zero",
    "going",
    "set",
    "loop",
    "right",
    "going",
    "go",
    "expect",
    "value",
    "equal",
    "something",
    "like",
    "say",
    "value",
    "going",
    "games",
    "array",
    "index",
    "starts",
    "zero",
    "reference",
    "going",
    "say",
    "sample",
    "value",
    "comment",
    "3",
    "colon",
    "one",
    "right",
    "first",
    "thing",
    "going",
    "think",
    "since",
    "three",
    "one",
    "used",
    "calculating",
    "going",
    "split",
    "going",
    "say",
    "parts",
    "going",
    "equal",
    "value",
    "split",
    "going",
    "split",
    "delimer",
    "colon",
    "let",
    "console",
    "log",
    "parts",
    "array",
    "going",
    "see",
    "looks",
    "like",
    "values",
    "getting",
    "iteration",
    "loop",
    "getting",
    "know",
    "one",
    "one",
    "two",
    "two",
    "three",
    "three",
    "forth",
    "going",
    "going",
    "say",
    "different",
    "scenarios",
    "going",
    "say",
    "parts",
    "zero",
    "first",
    "one",
    "first",
    "value",
    "x",
    "yeah",
    "x",
    "first",
    "one",
    "x",
    "parts",
    "zero",
    "going",
    "x",
    "might",
    "well",
    "break",
    "descriptive",
    "variable",
    "x",
    "first",
    "second",
    "value",
    "array",
    "going",
    "say",
    "x",
    "greater",
    "following",
    "rules",
    "basically",
    "going",
    "something",
    "x",
    "say",
    "else",
    "x",
    "equals",
    "finally",
    "else",
    "basically",
    "going",
    "last",
    "condition",
    "means",
    "x",
    "less",
    "okay",
    "let",
    "put",
    "say",
    "total",
    "points",
    "equals",
    "total",
    "points",
    "plus",
    "case",
    "going",
    "three",
    "let",
    "use",
    "shortcut",
    "cuz",
    "plus",
    "equal",
    "operator",
    "thing",
    "except",
    "shorter",
    "way",
    "plus",
    "equal",
    "case",
    "tie",
    "one",
    "point",
    "otherwise",
    "zero",
    "points",
    "case",
    "actually",
    "even",
    "need",
    "last",
    "block",
    "adding",
    "zero",
    "even",
    "matter",
    "matter",
    "let",
    "return",
    "total",
    "points",
    "right",
    "passed",
    "awesome",
    "even",
    "going",
    "explanation",
    "assume",
    "pausing",
    "video",
    "oh",
    "interesting",
    "solution",
    "right",
    "going",
    "get",
    "though",
    "okay",
    "point",
    "believe",
    "last",
    "question",
    "finished",
    "h",
    "looks",
    "like",
    "finished",
    "know",
    "think",
    "skipped",
    "last",
    "one",
    "vow",
    "count",
    "beginning",
    "anyways",
    "enjoyed",
    "video",
    "give",
    "like",
    "um",
    "subscribe",
    "channel",
    "uh",
    "please",
    "tired",
    "right",
    "going",
    "challenges",
    "together",
    "sure",
    "follow",
    "code",
    "wars",
    "follow",
    "back",
    "stick",
    "around",
    "next",
    "video",
    "lesson",
    "series",
    "see",
    "music",
    "later",
    "last",
    "couple",
    "videos",
    "talked",
    "um",
    "basics",
    "javascript",
    "essentially",
    "started",
    "variables",
    "went",
    "know",
    "functions",
    "loops",
    "operators",
    "conditionals",
    "good",
    "stuff",
    "point",
    "ready",
    "jump",
    "um",
    "functions",
    "objects",
    "within",
    "javascript",
    "going",
    "save",
    "us",
    "ton",
    "time",
    "actually",
    "writing",
    "code",
    "basically",
    "uh",
    "bunch",
    "shortcuts",
    "essentially",
    "also",
    "kind",
    "basis",
    "javascript",
    "language",
    "going",
    "cover",
    "video",
    "next",
    "couple",
    "videos",
    "encompassed",
    "within",
    "lesson",
    "six",
    "series",
    "going",
    "learn",
    "read",
    "documentation",
    "really",
    "important",
    "thing",
    "developer",
    "uh",
    "going",
    "quick",
    "start",
    "kind",
    "overview",
    "callback",
    "functions",
    "little",
    "bit",
    "confusing",
    "get",
    "talk",
    "primitive",
    "values",
    "versus",
    "um",
    "object",
    "values",
    "within",
    "javascript",
    "talk",
    "dates",
    "regular",
    "expressions",
    "string",
    "methods",
    "array",
    "methods",
    "um",
    "math",
    "library",
    "air",
    "types",
    "couple",
    "data",
    "types",
    "actually",
    "covered",
    "yet",
    "would",
    "number",
    "n",
    "also",
    "null",
    "undefined",
    "values",
    "got",
    "pretty",
    "pretty",
    "big",
    "laundry",
    "list",
    "things",
    "cover",
    "uh",
    "lesson",
    "going",
    "take",
    "little",
    "bit",
    "time",
    "promise",
    "get",
    "end",
    "going",
    "much",
    "uh",
    "bigger",
    "overview",
    "javascript",
    "language",
    "one",
    "thing",
    "say",
    "go",
    "lesson",
    "probably",
    "going",
    "last",
    "one",
    "focusing",
    "solely",
    "javascript",
    "get",
    "lot",
    "different",
    "things",
    "cover",
    "html",
    "css",
    "couple",
    "different",
    "things",
    "actually",
    "writing",
    "web",
    "apps",
    "last",
    "kind",
    "lesson",
    "talking",
    "javascript",
    "alone",
    "things",
    "javascript",
    "cover",
    "quite",
    "yet",
    "would",
    "like",
    "async",
    "awa",
    "promises",
    "classes",
    "objectoriented",
    "programming",
    "know",
    "kind",
    "goes",
    "together",
    "advanced",
    "javascript",
    "topics",
    "going",
    "pick",
    "later",
    "road",
    "actually",
    "written",
    "uh",
    "sort",
    "sub",
    "substantial",
    "web",
    "app",
    "hold",
    "tight",
    "going",
    "cover",
    "yet",
    "going",
    "get",
    "basics",
    "start",
    "getting",
    "actually",
    "building",
    "web",
    "app",
    "first",
    "thing",
    "want",
    "actually",
    "go",
    "read",
    "documentation",
    "start",
    "milla",
    "web",
    "docs",
    "called",
    "mdn",
    "short",
    "looked",
    "previously",
    "um",
    "code",
    "challenges",
    "last",
    "lesson",
    "5",
    "actually",
    "go",
    "depth",
    "read",
    "documentation",
    "think",
    "really",
    "important",
    "uh",
    "get",
    "homepage",
    "mdn",
    "web",
    "docs",
    "go",
    "technologies",
    "find",
    "javascript",
    "javascript",
    "documented",
    "variety",
    "places",
    "happens",
    "um",
    "people",
    "consider",
    "official",
    "javascript",
    "documentation",
    "javascript",
    "homepage",
    "see",
    "left",
    "got",
    "navigation",
    "bar",
    "uh",
    "tutorials",
    "need",
    "go",
    "tutorial",
    "javascript",
    "interested",
    "references",
    "talk",
    "references",
    "generally",
    "going",
    "big",
    "part",
    "sort",
    "documentation",
    "looking",
    "generally",
    "documentation",
    "going",
    "sort",
    "quick",
    "start",
    "guide",
    "get",
    "started",
    "whatever",
    "library",
    "framework",
    "uh",
    "reading",
    "documentation",
    "going",
    "sort",
    "tutorial",
    "usually",
    "finally",
    "going",
    "api",
    "reference",
    "um",
    "sometimes",
    "call",
    "reference",
    "like",
    "sometimes",
    "call",
    "api",
    "sometimes",
    "call",
    "api",
    "reference",
    "uh",
    "whatever",
    "case",
    "kind",
    "centered",
    "around",
    "okay",
    "core",
    "library",
    "language",
    "framework",
    "need",
    "go",
    "learn",
    "using",
    "interested",
    "uh",
    "javascript",
    "particular",
    "right",
    "since",
    "video",
    "objects",
    "functions",
    "uh",
    "go",
    "objects",
    "drop",
    "scroll",
    "see",
    "variety",
    "different",
    "uh",
    "types",
    "objects",
    "um",
    "objects",
    "things",
    "called",
    "instance",
    "methods",
    "uh",
    "kind",
    "gets",
    "programming",
    "want",
    "go",
    "saying",
    "objects",
    "functions",
    "um",
    "going",
    "say",
    "objects",
    "functions",
    "kind",
    "uh",
    "call",
    "method",
    "top",
    "objects",
    "call",
    "object",
    "um",
    "scroll",
    "see",
    "bunch",
    "different",
    "ones",
    "going",
    "irrelevant",
    "complete",
    "beginner",
    "quite",
    "honestly",
    "going",
    "irrelevant",
    "um",
    "even",
    "get",
    "better",
    "point",
    "video",
    "point",
    "important",
    "ones",
    "ones",
    "going",
    "um",
    "going",
    "need",
    "get",
    "familiar",
    "go",
    "uh",
    "detail",
    "wanted",
    "give",
    "overview",
    "click",
    "specific",
    "object",
    "let",
    "say",
    "go",
    "string",
    "learn",
    "little",
    "bit",
    "little",
    "bit",
    "later",
    "maybe",
    "next",
    "video",
    "something",
    "uh",
    "string",
    "actually",
    "object",
    "javascript",
    "like",
    "everything",
    "else",
    "little",
    "bit",
    "confusing",
    "get",
    "point",
    "little",
    "bit",
    "string",
    "uh",
    "documentation",
    "page",
    "reference",
    "going",
    "give",
    "overview",
    "everything",
    "kind",
    "main",
    "homepage",
    "string",
    "object",
    "javascript",
    "everything",
    "kind",
    "behaves",
    "object",
    "things",
    "called",
    "methods",
    "functions",
    "talking",
    "say",
    "method",
    "think",
    "function",
    "um",
    "know",
    "attached",
    "object",
    "scroll",
    "left",
    "going",
    "see",
    "thing",
    "says",
    "string",
    "prototype",
    "whatever",
    "method",
    "talking",
    "prototype",
    "part",
    "complexity",
    "javascript",
    "language",
    "covered",
    "cover",
    "series",
    "little",
    "bit",
    "uh",
    "pay",
    "grade",
    "need",
    "get",
    "actually",
    "start",
    "writing",
    "code",
    "said",
    "previous",
    "lessons",
    "want",
    "understand",
    "prototype",
    "chain",
    "complex",
    "things",
    "javascript",
    "um",
    "course",
    "kind",
    "mastered",
    "basics",
    "go",
    "know",
    "javascript",
    "series",
    "series",
    "um",
    "completely",
    "free",
    "know",
    "javascript",
    "actually",
    "hosted",
    "github",
    "um",
    "think",
    "name",
    "kyle",
    "simpson",
    "um",
    "would",
    "go",
    "first",
    "edition",
    "branch",
    "scroll",
    "see",
    "different",
    "books",
    "written",
    "javascript",
    "really",
    "good",
    "guide",
    "going",
    "take",
    "uh",
    "nuances",
    "language",
    "anyways",
    "coming",
    "back",
    "object",
    "beginning",
    "prototype",
    "method",
    "let",
    "click",
    "one",
    "methods",
    "see",
    "actually",
    "read",
    "spec",
    "reference",
    "method",
    "think",
    "good",
    "one",
    "start",
    "um",
    "let",
    "see",
    "one",
    "want",
    "want",
    "start",
    "pop",
    "method",
    "really",
    "easy",
    "one",
    "um",
    "get",
    "used",
    "part",
    "string",
    "spec",
    "need",
    "go",
    "arrays",
    "actually",
    "let",
    "go",
    "javascript",
    "go",
    "objects",
    "click",
    "array",
    "thing",
    "methods",
    "going",
    "go",
    "pop",
    "method",
    "get",
    "pop",
    "method",
    "reference",
    "going",
    "see",
    "little",
    "summary",
    "example",
    "case",
    "different",
    "methods",
    "usually",
    "able",
    "figure",
    "get",
    "gist",
    "use",
    "starting",
    "section",
    "really",
    "important",
    "start",
    "developing",
    "skill",
    "learning",
    "read",
    "documentation",
    "often",
    "times",
    "little",
    "bit",
    "confusing",
    "um",
    "especially",
    "since",
    "uh",
    "language",
    "site",
    "framework",
    "library",
    "depends",
    "written",
    "documentation",
    "might",
    "look",
    "little",
    "bit",
    "different",
    "anyways",
    "pop",
    "method",
    "removes",
    "last",
    "element",
    "array",
    "returns",
    "element",
    "method",
    "changes",
    "length",
    "array",
    "right",
    "know",
    "mutating",
    "changing",
    "um",
    "existing",
    "array",
    "working",
    "come",
    "syntax",
    "section",
    "want",
    "focus",
    "video",
    "experienced",
    "developer",
    "able",
    "um",
    "kind",
    "figure",
    "nuances",
    "specific",
    "method",
    "function",
    "syntax",
    "section",
    "look",
    "pop",
    "method",
    "gives",
    "us",
    "basic",
    "little",
    "syntax",
    "see",
    "nothing",
    "parentheses",
    "um",
    "nothing",
    "pass",
    "come",
    "return",
    "value",
    "says",
    "return",
    "value",
    "removed",
    "element",
    "array",
    "says",
    "undefined",
    "array",
    "empty",
    "tells",
    "normal",
    "return",
    "value",
    "chance",
    "pass",
    "empty",
    "array",
    "probably",
    "wo",
    "um",
    "unless",
    "looping",
    "something",
    "returns",
    "undefined",
    "really",
    "basic",
    "one",
    "looking",
    "see",
    "works",
    "come",
    "console",
    "create",
    "sort",
    "array",
    "put",
    "couple",
    "numbers",
    "print",
    "array",
    "one",
    "two",
    "3",
    "array",
    "pop",
    "going",
    "return",
    "length",
    "array",
    "three",
    "length",
    "array",
    "print",
    "array",
    "two",
    "elements",
    "removed",
    "last",
    "one",
    "really",
    "simple",
    "one",
    "next",
    "one",
    "want",
    "look",
    "going",
    "joint",
    "method",
    "going",
    "add",
    "little",
    "bit",
    "harder",
    "documentation",
    "us",
    "read",
    "though",
    "let",
    "go",
    "back",
    "pop",
    "method",
    "got",
    "overview",
    "section",
    "syntax",
    "description",
    "gives",
    "context",
    "around",
    "examples",
    "get",
    "specifications",
    "going",
    "actually",
    "take",
    "specific",
    "link",
    "within",
    "ecmascript",
    "um",
    "spec",
    "talked",
    "think",
    "lesson",
    "two",
    "talked",
    "javascript",
    "um",
    "spec",
    "going",
    "might",
    "well",
    "click",
    "see",
    "takes",
    "us",
    "take",
    "us",
    "pop",
    "method",
    "see",
    "spec",
    "know",
    "javascript",
    "language",
    "takes",
    "something",
    "probably",
    "clicking",
    "often",
    "finally",
    "come",
    "browser",
    "compatibility",
    "see",
    "different",
    "uh",
    "browsers",
    "also",
    "see",
    "runtime",
    "browser",
    "runtime",
    "runs",
    "javascript",
    "shows",
    "compatibility",
    "method",
    "within",
    "different",
    "browsers",
    "case",
    "uh",
    "pop",
    "method",
    "one",
    "oldest",
    "array",
    "methods",
    "javascript",
    "supported",
    "browsers",
    "see",
    "methods",
    "look",
    "supported",
    "different",
    "browsers",
    "often",
    "times",
    "internet",
    "explorer",
    "support",
    "big",
    "deal",
    "right",
    "anyways",
    "let",
    "go",
    "back",
    "let",
    "see",
    "pop",
    "method",
    "wanted",
    "join",
    "method",
    "going",
    "somewhere",
    "right",
    "looking",
    "join",
    "method",
    "going",
    "little",
    "bit",
    "complex",
    "going",
    "kind",
    "skip",
    "first",
    "section",
    "get",
    "overview",
    "says",
    "creates",
    "returns",
    "new",
    "string",
    "concatenating",
    "joining",
    "elements",
    "array",
    "right",
    "basics",
    "coming",
    "sy",
    "tax",
    "trying",
    "focus",
    "see",
    "um",
    "code",
    "block",
    "little",
    "bit",
    "complex",
    "uh",
    "syntax",
    "going",
    "says",
    "array",
    "jooin",
    "uh",
    "word",
    "called",
    "separator",
    "little",
    "brackets",
    "around",
    "brackets",
    "mean",
    "within",
    "javascript",
    "mdn",
    "documentation",
    "means",
    "optional",
    "separator",
    "description",
    "like",
    "word",
    "arbitrary",
    "says",
    "separator",
    "give",
    "idea",
    "type",
    "parameter",
    "takes",
    "guess",
    "argument",
    "remember",
    "talked",
    "parameters",
    "arguments",
    "two",
    "sides",
    "coin",
    "parameters",
    "define",
    "declare",
    "function",
    "arguments",
    "pass",
    "function",
    "actually",
    "invoke",
    "call",
    "um",
    "know",
    "whatever",
    "want",
    "say",
    "case",
    "separator",
    "read",
    "separator",
    "specifies",
    "string",
    "separate",
    "pair",
    "adjacent",
    "elements",
    "array",
    "separator",
    "converted",
    "string",
    "necessary",
    "omitted",
    "array",
    "elements",
    "separated",
    "comma",
    "separator",
    "empty",
    "string",
    "elements",
    "joined",
    "without",
    "characters",
    "following",
    "along",
    "25",
    "practice",
    "problems",
    "prior",
    "lesson",
    "use",
    "method",
    "couple",
    "times",
    "actually",
    "use",
    "empty",
    "string",
    "join",
    "elements",
    "together",
    "nothing",
    "would",
    "found",
    "course",
    "optional",
    "pass",
    "anything",
    "says",
    "omitted",
    "array",
    "elements",
    "separated",
    "comma",
    "optional",
    "come",
    "return",
    "value",
    "says",
    "string",
    "array",
    "elements",
    "joined",
    "array",
    "length",
    "zero",
    "empty",
    "string",
    "returned",
    "go",
    "ahead",
    "test",
    "let",
    "go",
    "console",
    "array",
    "um",
    "let",
    "let",
    "actually",
    "create",
    "new",
    "one",
    "let",
    "clear",
    "screen",
    "say",
    "string",
    "array",
    "say",
    "hello",
    "world",
    "right",
    "wanted",
    "combine",
    "together",
    "use",
    "join",
    "method",
    "say",
    "string",
    "array",
    "jooin",
    "see",
    "right",
    "omit",
    "arguments",
    "um",
    "joins",
    "little",
    "comma",
    "go",
    "back",
    "look",
    "else",
    "uh",
    "separator",
    "empty",
    "string",
    "joins",
    "without",
    "anything",
    "let",
    "put",
    "empty",
    "string",
    "see",
    "uh",
    "joins",
    "together",
    "one",
    "string",
    "nothing",
    "add",
    "space",
    "press",
    "enter",
    "probably",
    "closest",
    "would",
    "want",
    "would",
    "read",
    "last",
    "one",
    "going",
    "look",
    "reading",
    "documentation",
    "little",
    "bit",
    "uh",
    "trickier",
    "going",
    "kind",
    "use",
    "concepts",
    "talked",
    "get",
    "example",
    "going",
    "array",
    "includes",
    "method",
    "let",
    "click",
    "wherever",
    "includes",
    "method",
    "determines",
    "whether",
    "array",
    "includes",
    "certain",
    "value",
    "among",
    "entries",
    "returning",
    "true",
    "false",
    "appropriate",
    "going",
    "cover",
    "little",
    "bit",
    "later",
    "uh",
    "lesson",
    "going",
    "go",
    "deep",
    "let",
    "go",
    "ahead",
    "look",
    "documentation",
    "says",
    "um",
    "code",
    "block",
    "looking",
    "notice",
    "value",
    "find",
    "uh",
    "brackets",
    "index",
    "breaking",
    "understand",
    "brackets",
    "around",
    "value",
    "find",
    "tells",
    "us",
    "required",
    "parameter",
    "really",
    "ca",
    "run",
    "method",
    "effectively",
    "without",
    "required",
    "parameter",
    "comma",
    "basically",
    "means",
    "okay",
    "going",
    "next",
    "parameter",
    "function",
    "take",
    "um",
    "surrounded",
    "brackets",
    "beginning",
    "end",
    "means",
    "second",
    "parameter",
    "going",
    "optional",
    "look",
    "parameters",
    "description",
    "value",
    "find",
    "value",
    "searching",
    "says",
    "case",
    "sensitive",
    "nice",
    "know",
    "optional",
    "parameter",
    "index",
    "basically",
    "saying",
    "start",
    "looking",
    "within",
    "array",
    "certain",
    "index",
    "know",
    "value",
    "find",
    "earlier",
    "index",
    "specify",
    "going",
    "include",
    "would",
    "read",
    "syntax",
    "going",
    "go",
    "little",
    "bit",
    "later",
    "lesson",
    "going",
    "example",
    "right",
    "point",
    "talking",
    "earlier",
    "scroll",
    "includes",
    "actually",
    "little",
    "bit",
    "new",
    "method",
    "believe",
    "um",
    "could",
    "wrong",
    "thought",
    "offered",
    "latest",
    "spec",
    "javascript",
    "um",
    "scroll",
    "browser",
    "compatibility",
    "see",
    "internet",
    "explorer",
    "support",
    "method",
    "developing",
    "application",
    "run",
    "effectively",
    "internet",
    "explorer",
    "um",
    "probably",
    "case",
    "going",
    "happen",
    "work",
    "like",
    "really",
    "large",
    "company",
    "company",
    "kind",
    "legacy",
    "systems",
    "applications",
    "still",
    "run",
    "internet",
    "explorer",
    "want",
    "using",
    "includes",
    "method",
    "might",
    "screw",
    "application",
    "talking",
    "earlier",
    "next",
    "part",
    "lesson",
    "uh",
    "six",
    "going",
    "talking",
    "callback",
    "functions",
    "first",
    "started",
    "really",
    "confused",
    "honestly",
    "think",
    "never",
    "stumbled",
    "upon",
    "good",
    "explanation",
    "um",
    "something",
    "really",
    "broke",
    "pieces",
    "could",
    "understand",
    "hopefully",
    "video",
    "um",
    "prevent",
    "suffering",
    "confusion",
    "several",
    "months",
    "like",
    "reason",
    "talking",
    "functions",
    "see",
    "later",
    "lesson",
    "going",
    "use",
    "callbacks",
    "callback",
    "functions",
    "heavily",
    "understand",
    "going",
    "able",
    "use",
    "methods",
    "callback",
    "functions",
    "different",
    "functions",
    "writing",
    "previous",
    "lesson",
    "use",
    "know",
    "use",
    "syntax",
    "use",
    "regular",
    "function",
    "syntax",
    "use",
    "uh",
    "anonymous",
    "functions",
    "arrow",
    "functions",
    "different",
    "way",
    "using",
    "functions",
    "little",
    "bit",
    "different",
    "way",
    "thinking",
    "general",
    "start",
    "us",
    "going",
    "paste",
    "code",
    "going",
    "actually",
    "understand",
    "end",
    "little",
    "lesson",
    "would",
    "example",
    "using",
    "call",
    "back",
    "function",
    "go",
    "ahead",
    "pause",
    "video",
    "take",
    "look",
    "get",
    "acquainted",
    "press",
    "enter",
    "also",
    "simplify",
    "code",
    "looked",
    "um",
    "right",
    "exact",
    "thing",
    "um",
    "see",
    "answer",
    "would",
    "pause",
    "video",
    "look",
    "two",
    "code",
    "blocks",
    "seconds",
    "get",
    "mindset",
    "uh",
    "around",
    "entire",
    "reason",
    "walking",
    "callbacks",
    "often",
    "times",
    "going",
    "see",
    "code",
    "looks",
    "like",
    "second",
    "option",
    "simplified",
    "yes",
    "would",
    "write",
    "definitely",
    "display",
    "concepts",
    "supposed",
    "understanding",
    "well",
    "section",
    "going",
    "writing",
    "code",
    "normally",
    "would",
    "write",
    "um",
    "little",
    "bit",
    "longer",
    "form",
    "broken",
    "would",
    "write",
    "know",
    "developing",
    "application",
    "hopefully",
    "know",
    "longer",
    "form",
    "code",
    "going",
    "uh",
    "clear",
    "concepts",
    "really",
    "help",
    "understand",
    "callbacks",
    "let",
    "take",
    "look",
    "code",
    "blocks",
    "um",
    "let",
    "clear",
    "screen",
    "get",
    "us",
    "um",
    "main",
    "code",
    "block",
    "comments",
    "pasted",
    "let",
    "clear",
    "screen",
    "paste",
    "maybe",
    "space",
    "little",
    "bit",
    "room",
    "work",
    "right",
    "look",
    "code",
    "uh",
    "couple",
    "things",
    "going",
    "first",
    "thing",
    "two",
    "different",
    "functions",
    "um",
    "main",
    "function",
    "right",
    "callback",
    "function",
    "often",
    "times",
    "see",
    "callback",
    "function",
    "kind",
    "uh",
    "embedded",
    "within",
    "main",
    "function",
    "um",
    "case",
    "like",
    "said",
    "breaking",
    "clarity",
    "main",
    "function",
    "takes",
    "three",
    "arguments",
    "first",
    "argument",
    "going",
    "number",
    "called",
    "random",
    "number",
    "arbitrary",
    "um",
    "call",
    "going",
    "boolean",
    "value",
    "uh",
    "value",
    "basically",
    "going",
    "ask",
    "whether",
    "go",
    "call",
    "back",
    "call",
    "back",
    "walking",
    "code",
    "let",
    "first",
    "look",
    "result",
    "result",
    "variable",
    "going",
    "set",
    "equal",
    "random",
    "number",
    "random",
    "number",
    "course",
    "random",
    "number",
    "parameter",
    "function",
    "therefore",
    "whatever",
    "pass",
    "argument",
    "uh",
    "function",
    "going",
    "value",
    "random",
    "number",
    "go",
    "bottom",
    "actually",
    "invoke",
    "call",
    "main",
    "function",
    "see",
    "random",
    "number",
    "going",
    "20",
    "right",
    "case",
    "random",
    "number",
    "equals",
    "20",
    "therefore",
    "result",
    "variable",
    "also",
    "equals",
    "20",
    "assigning",
    "come",
    "next",
    "part",
    "uh",
    "comments",
    "affecting",
    "code",
    "simple",
    "statement",
    "say",
    "call",
    "remember",
    "pass",
    "boolean",
    "value",
    "alone",
    "put",
    "equal",
    "signs",
    "anything",
    "place",
    "within",
    "conditional",
    "evaluate",
    "call",
    "true",
    "going",
    "reach",
    "code",
    "within",
    "uh",
    "conditional",
    "block",
    "false",
    "skip",
    "conditional",
    "block",
    "return",
    "result",
    "basically",
    "call",
    "false",
    "going",
    "skip",
    "result",
    "currently",
    "equal",
    "20",
    "return",
    "result",
    "return",
    "main",
    "function",
    "going",
    "equal",
    "20",
    "course",
    "returns",
    "40",
    "see",
    "therefore",
    "call",
    "true",
    "see",
    "invocation",
    "function",
    "last",
    "part",
    "tricky",
    "part",
    "call",
    "back",
    "first",
    "thing",
    "want",
    "point",
    "callback",
    "name",
    "given",
    "entirely",
    "arbitrary",
    "see",
    "often",
    "might",
    "see",
    "um",
    "either",
    "call",
    "back",
    "might",
    "see",
    "uh",
    "letters",
    "c",
    "b",
    "called",
    "back",
    "probably",
    "convention",
    "going",
    "come",
    "across",
    "way",
    "call",
    "whatever",
    "want",
    "normal",
    "uh",
    "parameter",
    "case",
    "instead",
    "passing",
    "number",
    "boolean",
    "like",
    "first",
    "two",
    "uh",
    "parameters",
    "actually",
    "passing",
    "another",
    "function",
    "basically",
    "passing",
    "function",
    "another",
    "function",
    "asking",
    "know",
    "parent",
    "function",
    "execute",
    "function",
    "passed",
    "case",
    "call",
    "back",
    "passed",
    "see",
    "arguments",
    "bottom",
    "passed",
    "call",
    "back",
    "declared",
    "executed",
    "yet",
    "call",
    "back",
    "right",
    "going",
    "equal",
    "declaration",
    "function",
    "called",
    "callback",
    "know",
    "uh",
    "run",
    "wanted",
    "run",
    "call",
    "back",
    "put",
    "parentheses",
    "end",
    "pass",
    "sort",
    "number",
    "see",
    "execute",
    "get",
    "40",
    "answer",
    "course",
    "would",
    "direct",
    "way",
    "contrived",
    "example",
    "hopefully",
    "going",
    "explain",
    "callbacks",
    "right",
    "got",
    "value",
    "called",
    "callback",
    "equal",
    "function",
    "uh",
    "function",
    "data",
    "type",
    "invoked",
    "yet",
    "declaration",
    "basically",
    "call",
    "like",
    "case",
    "call",
    "back",
    "actually",
    "function",
    "want",
    "call",
    "sorry",
    "line",
    "right",
    "call",
    "true",
    "get",
    "code",
    "right",
    "taking",
    "function",
    "passed",
    "executing",
    "random",
    "number",
    "par",
    "parameter",
    "happens",
    "equal",
    "20",
    "basically",
    "within",
    "main",
    "function",
    "letting",
    "code",
    "actually",
    "execute",
    "function",
    "setting",
    "equal",
    "result",
    "returns",
    "40",
    "going",
    "return",
    "result",
    "bottom",
    "going",
    "return",
    "40",
    "gotten",
    "answer",
    "like",
    "showed",
    "um",
    "second",
    "example",
    "little",
    "bit",
    "ago",
    "um",
    "little",
    "bit",
    "abbreviated",
    "way",
    "write",
    "separ",
    "se",
    "function",
    "called",
    "callback",
    "order",
    "know",
    "basically",
    "run",
    "callback",
    "function",
    "could",
    "done",
    "first",
    "case",
    "executed",
    "main",
    "function",
    "passed",
    "20",
    "passed",
    "true",
    "passed",
    "predefined",
    "function",
    "already",
    "written",
    "could",
    "abbreviate",
    "let",
    "collapse",
    "main",
    "part",
    "say",
    "main",
    "function",
    "know",
    "pass",
    "random",
    "number",
    "case",
    "stay",
    "consistent",
    "pass",
    "uh",
    "value",
    "20",
    "want",
    "call",
    "back",
    "actually",
    "called",
    "within",
    "function",
    "need",
    "pass",
    "true",
    "call",
    "argument",
    "need",
    "pass",
    "function",
    "first",
    "case",
    "put",
    "call",
    "back",
    "worked",
    "also",
    "could",
    "like",
    "could",
    "write",
    "uh",
    "anonymous",
    "function",
    "function",
    "going",
    "take",
    "number",
    "parameter",
    "defining",
    "know",
    "go",
    "main",
    "function",
    "going",
    "pass",
    "random",
    "number",
    "argument",
    "number",
    "num",
    "going",
    "represent",
    "break",
    "return",
    "num",
    "2",
    "going",
    "ultimately",
    "return",
    "us",
    "40",
    "another",
    "way",
    "could",
    "write",
    "call",
    "back",
    "simpler",
    "ways",
    "also",
    "like",
    "let",
    "main",
    "function",
    "pass",
    "20",
    "true",
    "case",
    "let",
    "put",
    "arrow",
    "function",
    "num",
    "use",
    "arrow",
    "function",
    "syntax",
    "return",
    "num",
    "2",
    "get",
    "40",
    "another",
    "way",
    "pass",
    "even",
    "simplify",
    "little",
    "bit",
    "pass",
    "parameters",
    "actually",
    "need",
    "parentheses",
    "single",
    "argument",
    "take",
    "num",
    "uh",
    "also",
    "need",
    "break",
    "onto",
    "second",
    "line",
    "actually",
    "take",
    "num",
    "2",
    "going",
    "return",
    "way",
    "gotten",
    "answer",
    "40",
    "see",
    "get",
    "know",
    "contrived",
    "simple",
    "elaborate",
    "example",
    "code",
    "probably",
    "going",
    "seeing",
    "lot",
    "examples",
    "lot",
    "people",
    "use",
    "much",
    "simpler",
    "quicker",
    "way",
    "write",
    "callback",
    "function",
    "hopefully",
    "section",
    "um",
    "know",
    "little",
    "bit",
    "confused",
    "rewatch",
    "totally",
    "clear",
    "going",
    "going",
    "functions",
    "use",
    "callbacks",
    "heavily",
    "going",
    "important",
    "understand",
    "working",
    "might",
    "understand",
    "callbacks",
    "actually",
    "need",
    "seem",
    "overly",
    "complicated",
    "well",
    "reason",
    "need",
    "opinion",
    "um",
    "based",
    "experience",
    "observation",
    "two",
    "things",
    "enables",
    "reusability",
    "asynchronous",
    "programming",
    "talk",
    "going",
    "go",
    "much",
    "asynchronous",
    "programming",
    "video",
    "reasons",
    "explain",
    "let",
    "start",
    "reusability",
    "thing",
    "going",
    "crucial",
    "really",
    "connecting",
    "dots",
    "get",
    "advanced",
    "array",
    "methods",
    "talking",
    "later",
    "lesson",
    "really",
    "understand",
    "reusability",
    "thing",
    "going",
    "look",
    "common",
    "array",
    "method",
    "called",
    "map",
    "going",
    "look",
    "little",
    "bit",
    "later",
    "video",
    "really",
    "want",
    "show",
    "lesson",
    "need",
    "callback",
    "functions",
    "map",
    "method",
    "look",
    "documentation",
    "creates",
    "new",
    "array",
    "populated",
    "results",
    "calling",
    "provided",
    "function",
    "every",
    "element",
    "calling",
    "array",
    "basically",
    "transformation",
    "um",
    "able",
    "define",
    "function",
    "logic",
    "figure",
    "element",
    "array",
    "let",
    "take",
    "look",
    "simple",
    "example",
    "going",
    "make",
    "total",
    "sense",
    "kind",
    "connect",
    "dots",
    "uh",
    "original",
    "callback",
    "example",
    "constructing",
    "array",
    "simple",
    "one",
    "going",
    "define",
    "custom",
    "map",
    "operation",
    "say",
    "call",
    "back",
    "want",
    "specific",
    "function",
    "represents",
    "us",
    "um",
    "parameter",
    "going",
    "item",
    "array",
    "mapping",
    "actually",
    "kind",
    "iterating",
    "array",
    "get",
    "element",
    "array",
    "going",
    "passed",
    "argument",
    "uh",
    "function",
    "want",
    "return",
    "value",
    "value",
    "going",
    "transformed",
    "value",
    "kind",
    "occupy",
    "new",
    "array",
    "going",
    "take",
    "item",
    "array",
    "going",
    "multiply",
    "two",
    "basically",
    "going",
    "take",
    "entire",
    "array",
    "uh",
    "element",
    "going",
    "multiply",
    "two",
    "got",
    "function",
    "defined",
    "far",
    "really",
    "anything",
    "take",
    "array",
    "actually",
    "need",
    "set",
    "equal",
    "new",
    "array",
    "map",
    "method",
    "going",
    "actually",
    "return",
    "modified",
    "array",
    "going",
    "um",
    "modify",
    "original",
    "array",
    "going",
    "take",
    "array",
    "map",
    "calling",
    "function",
    "built",
    "array",
    "requires",
    "going",
    "callback",
    "function",
    "case",
    "already",
    "defined",
    "going",
    "pass",
    "custom",
    "map",
    "operation",
    "callback",
    "going",
    "execute",
    "look",
    "new",
    "array",
    "going",
    "see",
    "every",
    "element",
    "doubled",
    "done",
    "looped",
    "started",
    "two",
    "taken",
    "value",
    "two",
    "multiply",
    "two",
    "get",
    "four",
    "forth",
    "see",
    "um",
    "kind",
    "iterated",
    "array",
    "applied",
    "sort",
    "transformation",
    "defined",
    "callback",
    "function",
    "really",
    "understand",
    "concept",
    "reusability",
    "case",
    "sure",
    "works",
    "multiplying",
    "something",
    "two",
    "really",
    "convey",
    "us",
    "call",
    "back",
    "useful",
    "creators",
    "javascript",
    "programming",
    "language",
    "introduced",
    "map",
    "array",
    "wanted",
    "enable",
    "developer",
    "use",
    "method",
    "variety",
    "use",
    "cases",
    "array",
    "full",
    "strings",
    "let",
    "copy",
    "new",
    "array",
    "um",
    "need",
    "name",
    "something",
    "different",
    "say",
    "string",
    "array",
    "going",
    "bunch",
    "strings",
    "might",
    "say",
    "okay",
    "well",
    "need",
    "find",
    "different",
    "method",
    "map",
    "sort",
    "transformation",
    "well",
    "callback",
    "one",
    "parameters",
    "predefined",
    "function",
    "lot",
    "flexibility",
    "instead",
    "looking",
    "new",
    "method",
    "redefine",
    "custom",
    "map",
    "operation",
    "case",
    "going",
    "long",
    "hand",
    "like",
    "going",
    "show",
    "shortcut",
    "say",
    "array",
    "string",
    "array",
    "defined",
    "going",
    "call",
    "map",
    "method",
    "going",
    "pass",
    "callback",
    "function",
    "let",
    "template",
    "going",
    "arrow",
    "function",
    "right",
    "going",
    "pass",
    "going",
    "item",
    "array",
    "say",
    "item",
    "array",
    "need",
    "parentheses",
    "around",
    "single",
    "argument",
    "transformation",
    "trying",
    "one",
    "line",
    "whatever",
    "right",
    "arrow",
    "going",
    "returned",
    "function",
    "transform",
    "per",
    "different",
    "way",
    "maybe",
    "wanted",
    "construct",
    "first",
    "letter",
    "words",
    "maybe",
    "wanted",
    "new",
    "array",
    "letter",
    "h",
    "w",
    "n",
    "z",
    "maybe",
    "return",
    "um",
    "item",
    "array",
    "actually",
    "going",
    "pass",
    "um",
    "need",
    "going",
    "take",
    "item",
    "array",
    "going",
    "get",
    "give",
    "zero",
    "index",
    "access",
    "first",
    "letter",
    "string",
    "using",
    "zero",
    "index",
    "second",
    "letter",
    "one",
    "third",
    "two",
    "forth",
    "see",
    "returned",
    "first",
    "letter",
    "elements",
    "array",
    "array",
    "strings",
    "redefining",
    "callback",
    "function",
    "value",
    "callback",
    "functions",
    "enables",
    "us",
    "reuse",
    "function",
    "case",
    "map",
    "function",
    "kind",
    "modify",
    "whatever",
    "needs",
    "something",
    "way",
    "complex",
    "multiplying",
    "two",
    "conditional",
    "logic",
    "say",
    "know",
    "number",
    "prime",
    "want",
    "multiply",
    "two",
    "um",
    "prime",
    "want",
    "return",
    "number",
    "know",
    "sorts",
    "different",
    "things",
    "complex",
    "want",
    "right",
    "think",
    "probably",
    "understand",
    "uh",
    "callbacks",
    "enable",
    "reusability",
    "important",
    "know",
    "work",
    "kind",
    "stuff",
    "let",
    "move",
    "asynchronous",
    "topic",
    "told",
    "um",
    "callbacks",
    "enable",
    "asynchronous",
    "programming",
    "gets",
    "us",
    "whole",
    "another",
    "topic",
    "going",
    "briefly",
    "touch",
    "say",
    "asynchronous",
    "talking",
    "code",
    "run",
    "um",
    "immediately",
    "code",
    "run",
    "screen",
    "probably",
    "notice",
    "press",
    "enter",
    "executes",
    "immediately",
    "pretty",
    "much",
    "seems",
    "instantaneous",
    "human",
    "brain",
    "times",
    "writing",
    "code",
    "might",
    "even",
    "take",
    "two",
    "three",
    "4",
    "seconds",
    "piece",
    "code",
    "execute",
    "good",
    "example",
    "let",
    "say",
    "application",
    "database",
    "stores",
    "data",
    "know",
    "different",
    "continent",
    "user",
    "actually",
    "uh",
    "clicking",
    "maybe",
    "host",
    "database",
    "united",
    "states",
    "someone",
    "um",
    "know",
    "italy",
    "something",
    "visiting",
    "web",
    "app",
    "access",
    "uh",
    "web",
    "app",
    "browser",
    "italy",
    "going",
    "send",
    "request",
    "server",
    "database",
    "request",
    "get",
    "uh",
    "information",
    "web",
    "app",
    "perform",
    "different",
    "functions",
    "going",
    "take",
    "certain",
    "amount",
    "time",
    "instantaneous",
    "handle",
    "programming",
    "might",
    "say",
    "well",
    "okay",
    "let",
    "wait",
    "done",
    "execute",
    "next",
    "line",
    "code",
    "well",
    "case",
    "web",
    "app",
    "going",
    "multiple",
    "asynchronous",
    "operations",
    "going",
    "time",
    "going",
    "multiple",
    "calls",
    "web",
    "server",
    "going",
    "take",
    "know",
    "half",
    "second",
    "uh",
    "one",
    "half",
    "seconds",
    "maybe",
    "even",
    "little",
    "bit",
    "added",
    "together",
    "order",
    "web",
    "app",
    "going",
    "take",
    "30",
    "seconds",
    "load",
    "case",
    "nobody",
    "going",
    "use",
    "run",
    "code",
    "kind",
    "time",
    "reason",
    "asynchronous",
    "programming",
    "basically",
    "allows",
    "us",
    "um",
    "run",
    "code",
    "run",
    "code",
    "previous",
    "code",
    "still",
    "running",
    "know",
    "kind",
    "gets",
    "topic",
    "like",
    "threads",
    "uh",
    "execution",
    "threads",
    "computer",
    "really",
    "talking",
    "really",
    "want",
    "get",
    "details",
    "go",
    "series",
    "going",
    "talking",
    "uh",
    "asynchronous",
    "callbacks",
    "promises",
    "newer",
    "um",
    "es6",
    "async",
    "await",
    "different",
    "ways",
    "write",
    "asynchronous",
    "javascript",
    "code",
    "see",
    "comes",
    "play",
    "little",
    "bit",
    "later",
    "series",
    "following",
    "along",
    "series",
    "might",
    "heard",
    "say",
    "everything",
    "javascript",
    "object",
    "really",
    "exp",
    "explain",
    "one",
    "since",
    "uh",
    "talking",
    "objects",
    "within",
    "javascript",
    "lesson",
    "really",
    "want",
    "give",
    "overview",
    "concept",
    "primitives",
    "versus",
    "uh",
    "actual",
    "objects",
    "going",
    "put",
    "code",
    "screen",
    "hopefully",
    "give",
    "little",
    "bit",
    "introduction",
    "things",
    "think",
    "run",
    "code",
    "um",
    "see",
    "defined",
    "two",
    "different",
    "strings",
    "compared",
    "strings",
    "first",
    "case",
    "got",
    "weird",
    "syntax",
    "actually",
    "using",
    "thing",
    "called",
    "new",
    "uh",
    "actually",
    "new",
    "operator",
    "going",
    "talk",
    "second",
    "defining",
    "string",
    "uppercase",
    "string",
    "looks",
    "like",
    "sort",
    "object",
    "something",
    "go",
    "javascript",
    "docs",
    "documentation",
    "let",
    "go",
    "javascript",
    "objects",
    "go",
    "string",
    "right",
    "syntax",
    "string",
    "ed",
    "define",
    "um",
    "string",
    "right",
    "string",
    "one",
    "actually",
    "object",
    "string",
    "two",
    "call",
    "primitive",
    "know",
    "uh",
    "instantiate",
    "object",
    "syntax",
    "see",
    "compare",
    "equality",
    "two",
    "triple",
    "equals",
    "compares",
    "value",
    "type",
    "going",
    "return",
    "false",
    "first",
    "case",
    "looking",
    "object",
    "second",
    "case",
    "looking",
    "string",
    "primitive",
    "use",
    "double",
    "equals",
    "course",
    "true",
    "value",
    "type",
    "point",
    "probably",
    "probably",
    "lot",
    "confusion",
    "head",
    "um",
    "probably",
    "thinking",
    "couple",
    "things",
    "well",
    "telling",
    "string",
    "one",
    "actually",
    "string",
    "answer",
    "yes",
    "string",
    "actually",
    "object",
    "furthermore",
    "saying",
    "string",
    "string",
    "string",
    "would",
    "execute",
    "methods",
    "something",
    "object",
    "couple",
    "floating",
    "questions",
    "understand",
    "know",
    "little",
    "bit",
    "behind",
    "scenes",
    "stuff",
    "going",
    "javascript",
    "programming",
    "language",
    "let",
    "start",
    "asking",
    "question",
    "primitive",
    "primitive",
    "topic",
    "specific",
    "javascript",
    "talk",
    "primitive",
    "data",
    "types",
    "across",
    "varying",
    "languages",
    "know",
    "python",
    "java",
    "uh",
    "primitives",
    "javascript",
    "primitive",
    "uh",
    "six",
    "different",
    "primitives",
    "look",
    "go",
    "uh",
    "documentation",
    "um",
    "primitive",
    "maybe",
    "show",
    "us",
    "different",
    "um",
    "primitives",
    "maybe",
    "actually",
    "thought",
    "anyways",
    "six",
    "string",
    "number",
    "big",
    "int",
    "ian",
    "undefined",
    "symbol",
    "talked",
    "totally",
    "fine",
    "need",
    "talk",
    "yet",
    "think",
    "uh",
    "talking",
    "primitives",
    "simplest",
    "form",
    "something",
    "coding",
    "language",
    "periodic",
    "table",
    "elements",
    "primitives",
    "would",
    "elements",
    "periodic",
    "table",
    "kind",
    "would",
    "uh",
    "think",
    "primitives",
    "actually",
    "used",
    "build",
    "um",
    "things",
    "would",
    "expect",
    "primitive",
    "data",
    "type",
    "sort",
    "methods",
    "functions",
    "call",
    "make",
    "sense",
    "come",
    "console",
    "let",
    "define",
    "string",
    "got",
    "string",
    "going",
    "put",
    "dot",
    "end",
    "like",
    "calling",
    "function",
    "method",
    "object",
    "take",
    "sum",
    "string",
    "say",
    "uppercase",
    "actually",
    "function",
    "strings",
    "go",
    "um",
    "bottom",
    "see",
    "two",
    "uppercase",
    "um",
    "method",
    "string",
    "object",
    "saying",
    "string",
    "primitive",
    "able",
    "work",
    "right",
    "well",
    "wrong",
    "work",
    "behind",
    "scenes",
    "primitive",
    "value",
    "like",
    "define",
    "little",
    "quotes",
    "double",
    "quotes",
    "even",
    "actually",
    "wraps",
    "string",
    "object",
    "right",
    "actually",
    "happening",
    "behind",
    "scenes",
    "call",
    "specific",
    "method",
    "primitive",
    "um",
    "data",
    "type",
    "within",
    "javascript",
    "kind",
    "interesting",
    "actually",
    "well",
    "answer",
    "really",
    "anything",
    "something",
    "aware",
    "good",
    "know",
    "type",
    "information",
    "wondering",
    "head",
    "well",
    "going",
    "know",
    "talking",
    "strings",
    "go",
    "documentation",
    "sure",
    "looks",
    "like",
    "sort",
    "object",
    "clears",
    "us",
    "go",
    "string",
    "object",
    "scroll",
    "um",
    "little",
    "bit",
    "section",
    "called",
    "string",
    "primitives",
    "string",
    "objects",
    "kind",
    "explains",
    "thing",
    "talked",
    "feel",
    "free",
    "read",
    "really",
    "dig",
    "want",
    "understand",
    "little",
    "bit",
    "better",
    "takeaway",
    "using",
    "syntax",
    "string",
    "constructor",
    "um",
    "way",
    "write",
    "strings",
    "taught",
    "correct",
    "way",
    "write",
    "strings",
    "previous",
    "videos",
    "clarification",
    "go",
    "actual",
    "documentation",
    "see",
    "section",
    "string",
    "primitives",
    "objects",
    "um",
    "says",
    "reasons",
    "code",
    "may",
    "break",
    "encounters",
    "string",
    "objects",
    "expects",
    "primitive",
    "instead",
    "documentation",
    "even",
    "recommends",
    "define",
    "like",
    "cu",
    "javascript",
    "takes",
    "care",
    "anyways",
    "information",
    "around",
    "next",
    "thing",
    "want",
    "talk",
    "keyword",
    "looked",
    "also",
    "little",
    "bit",
    "confusing",
    "go",
    "next",
    "couple",
    "sections",
    "lesson",
    "going",
    "important",
    "understand",
    "new",
    "keyword",
    "actually",
    "considered",
    "operator",
    "although",
    "talk",
    "um",
    "covered",
    "operators",
    "previous",
    "lesson",
    "next",
    "section",
    "lesson",
    "going",
    "talking",
    "javascript",
    "dates",
    "actually",
    "use",
    "new",
    "operator",
    "actually",
    "create",
    "wanted",
    "create",
    "date",
    "say",
    "new",
    "pass",
    "date",
    "object",
    "parentheses",
    "end",
    "call",
    "constructing",
    "um",
    "instance",
    "date",
    "object",
    "kind",
    "think",
    "um",
    "terms",
    "like",
    "template",
    "working",
    "date",
    "object",
    "would",
    "template",
    "going",
    "actually",
    "take",
    "copy",
    "template",
    "store",
    "new",
    "variable",
    "um",
    "attributes",
    "template",
    "everything",
    "template",
    "kind",
    "predefined",
    "kind",
    "programming",
    "uh",
    "discussion",
    "want",
    "get",
    "far",
    "know",
    "new",
    "operat",
    "ator",
    "special",
    "keyword",
    "javascript",
    "actually",
    "look",
    "new",
    "keyword",
    "going",
    "couple",
    "things",
    "creates",
    "blank",
    "object",
    "links",
    "blank",
    "object",
    "parent",
    "talk",
    "template",
    "instance",
    "template",
    "kind",
    "referring",
    "additional",
    "steps",
    "get",
    "prototype",
    "chain",
    "going",
    "talk",
    "um",
    "another",
    "complexity",
    "need",
    "visit",
    "right",
    "previous",
    "parts",
    "lesson",
    "talked",
    "lot",
    "essential",
    "concepts",
    "going",
    "using",
    "talking",
    "javascript",
    "objects",
    "first",
    "one",
    "going",
    "talking",
    "javascript",
    "dates",
    "javascript",
    "dates",
    "little",
    "bit",
    "confusing",
    "honest",
    "think",
    "lot",
    "developers",
    "even",
    "experienced",
    "ones",
    "little",
    "bit",
    "trouble",
    "certain",
    "types",
    "dates",
    "javascript",
    "reason",
    "um",
    "writing",
    "javascript",
    "dates",
    "really",
    "um",
    "coding",
    "skill",
    "also",
    "understand",
    "time",
    "zones",
    "work",
    "um",
    "stuff",
    "actually",
    "getting",
    "uh",
    "implementing",
    "date",
    "objects",
    "stuff",
    "like",
    "written",
    "post",
    "um",
    "site",
    "scroll",
    "um",
    "point",
    "talked",
    "javascript",
    "dates",
    "right",
    "date",
    "post",
    "really",
    "go",
    "detail",
    "different",
    "uh",
    "time",
    "zones",
    "use",
    "dates",
    "different",
    "nuances",
    "check",
    "enough",
    "detail",
    "going",
    "actually",
    "go",
    "basics",
    "writing",
    "dates",
    "uh",
    "showed",
    "briefly",
    "last",
    "part",
    "lesson",
    "define",
    "variable",
    "assign",
    "new",
    "date",
    "object",
    "kind",
    "copy",
    "template",
    "date",
    "going",
    "assign",
    "print",
    "screen",
    "going",
    "show",
    "us",
    "date",
    "object",
    "going",
    "current",
    "time",
    "passed",
    "parameters",
    "arguments",
    "uh",
    "date",
    "constructor",
    "dates",
    "get",
    "little",
    "bit",
    "confusing",
    "defined",
    "um",
    "value",
    "stored",
    "within",
    "date",
    "object",
    "actually",
    "represents",
    "number",
    "milliseconds",
    "elapsed",
    "since",
    "midnight",
    "january",
    "1st",
    "1970",
    "utc",
    "time",
    "zone",
    "lot",
    "handle",
    "one",
    "sentence",
    "um",
    "might",
    "asking",
    "january",
    "1st",
    "1970",
    "well",
    "answer",
    "simple",
    "would",
    "read",
    "post",
    "wrote",
    "really",
    "get",
    "background",
    "basically",
    "arbitrary",
    "date",
    "time",
    "basing",
    "future",
    "dates",
    "mean",
    "say",
    "value",
    "storing",
    "within",
    "date",
    "equal",
    "number",
    "milliseconds",
    "cuz",
    "right",
    "sure",
    "look",
    "like",
    "milliseconds",
    "printing",
    "said",
    "represents",
    "date",
    "defined",
    "say",
    "value",
    "going",
    "print",
    "number",
    "milliseconds",
    "since",
    "january",
    "1st",
    "1970",
    "coordinated",
    "universal",
    "time",
    "zone",
    "converted",
    "years",
    "days",
    "would",
    "get",
    "exactly",
    "dates",
    "variety",
    "things",
    "pass",
    "constructor",
    "argument",
    "define",
    "date",
    "going",
    "paste",
    "bunch",
    "code",
    "onto",
    "screen",
    "need",
    "go",
    "writing",
    "pause",
    "video",
    "look",
    "second",
    "going",
    "walk",
    "read",
    "post",
    "want",
    "ton",
    "information",
    "dates",
    "first",
    "example",
    "passing",
    "um",
    "year",
    "month",
    "day",
    "time",
    "guess",
    "hour",
    "minute",
    "second",
    "millisecond",
    "whatever",
    "passing",
    "comma",
    "separated",
    "uh",
    "arguments",
    "date",
    "constructor",
    "um",
    "also",
    "pass",
    "string",
    "variety",
    "different",
    "formats",
    "see",
    "code",
    "uh",
    "right",
    "going",
    "um",
    "input",
    "number",
    "milliseconds",
    "give",
    "value",
    "pass",
    "iso",
    "8601",
    "format",
    "um",
    "post",
    "talks",
    "finally",
    "time",
    "zones",
    "pass",
    "time",
    "zones",
    "um",
    "last",
    "part",
    "date",
    "um",
    "kind",
    "interesting",
    "thing",
    "talk",
    "know",
    "used",
    "creating",
    "date",
    "saying",
    "new",
    "date",
    "also",
    "create",
    "date",
    "static",
    "method",
    "called",
    "say",
    "date",
    "represents",
    "thing",
    "new",
    "date",
    "obviously",
    "anymore",
    "time",
    "elapsed",
    "giving",
    "primitive",
    "value",
    "date",
    "video",
    "talk",
    "instance",
    "methods",
    "use",
    "date",
    "object",
    "method",
    "let",
    "define",
    "date",
    "equal",
    "maybe",
    "maybe",
    "instead",
    "say",
    "uh",
    "date",
    "sometimes",
    "descriptive",
    "second",
    "press",
    "enter",
    "longer",
    "little",
    "bit",
    "confusing",
    "let",
    "create",
    "date",
    "going",
    "represent",
    "pretty",
    "much",
    "know",
    "right",
    "minus",
    "seconds",
    "date",
    "use",
    "couple",
    "different",
    "methods",
    "one",
    "two",
    "string",
    "method",
    "going",
    "print",
    "used",
    "console",
    "course",
    "repple",
    "kind",
    "read",
    "evaluate",
    "print",
    "loop",
    "kind",
    "good",
    "stuff",
    "use",
    "two",
    "string",
    "method",
    "print",
    "um",
    "string",
    "date",
    "actually",
    "going",
    "print",
    "value",
    "date",
    "stor",
    "stored",
    "un",
    "uh",
    "coordinated",
    "universal",
    "tim",
    "utc",
    "going",
    "convert",
    "local",
    "time",
    "zone",
    "time",
    "zone",
    "computer",
    "stored",
    "actually",
    "stored",
    "file",
    "computer",
    "going",
    "go",
    "um",
    "anyways",
    "go",
    "next",
    "method",
    "date",
    "use",
    "two",
    "iso",
    "string",
    "iso",
    "string",
    "specific",
    "format",
    "let",
    "scroll",
    "post",
    "got",
    "anyways",
    "think",
    "little",
    "screenshot",
    "utc",
    "time",
    "utc",
    "iso",
    "8601",
    "um",
    "let",
    "expand",
    "little",
    "bit",
    "see",
    "going",
    "format",
    "using",
    "iso",
    "8601",
    "standard",
    "pause",
    "video",
    "look",
    "uh",
    "curious",
    "right",
    "let",
    "bring",
    "back",
    "well",
    "clear",
    "screen",
    "date",
    "get",
    "date",
    "going",
    "give",
    "us",
    "actual",
    "day",
    "month",
    "today",
    "16th",
    "january",
    "get",
    "16",
    "um",
    "also",
    "use",
    "date",
    "uh",
    "get",
    "month",
    "little",
    "bit",
    "unique",
    "going",
    "return",
    "zero",
    "um",
    "going",
    "return",
    "month",
    "year",
    "going",
    "use",
    "zero",
    "indexing",
    "instead",
    "january",
    "equal",
    "one",
    "january",
    "equal",
    "zero",
    "seeing",
    "since",
    "filmed",
    "uh",
    "january",
    "go",
    "dat",
    "getet",
    "full",
    "year",
    "going",
    "return",
    "2021",
    "um",
    "basic",
    "methods",
    "use",
    "javascript",
    "date",
    "honestly",
    "probably",
    "common",
    "ones",
    "wo",
    "looking",
    "anything",
    "else",
    "part",
    "go",
    "docs",
    "javascript",
    "um",
    "documentation",
    "javascript",
    "objects",
    "go",
    "date",
    "see",
    "different",
    "methods",
    "using",
    "um",
    "something",
    "point",
    "uh",
    "see",
    "couple",
    "times",
    "within",
    "documentation",
    "uh",
    "look",
    "date",
    "getyear",
    "method",
    "little",
    "thumbs",
    "icon",
    "basically",
    "means",
    "deprecated",
    "deprecated",
    "method",
    "something",
    "longer",
    "going",
    "supported",
    "want",
    "use",
    "click",
    "get",
    "year",
    "method",
    "notice",
    "exam",
    "le",
    "got",
    "used",
    "g",
    "full",
    "year",
    "method",
    "reason",
    "says",
    "gete",
    "method",
    "returns",
    "year",
    "specified",
    "date",
    "blah",
    "blah",
    "blah",
    "says",
    "longer",
    "used",
    "replaced",
    "git",
    "full",
    "year",
    "method",
    "knew",
    "go",
    "get",
    "fure",
    "method",
    "replacement",
    "previous",
    "section",
    "talked",
    "javascript",
    "dates",
    "talking",
    "object",
    "called",
    "regular",
    "expression",
    "javascript",
    "object",
    "entire",
    "topic",
    "like",
    "almost",
    "think",
    "um",
    "another",
    "language",
    "kind",
    "trying",
    "learn",
    "programming",
    "obviously",
    "turning",
    "complete",
    "anything",
    "regular",
    "expressions",
    "basically",
    "way",
    "pattern",
    "match",
    "within",
    "strings",
    "might",
    "asking",
    "well",
    "would",
    "want",
    "show",
    "let",
    "open",
    "um",
    "web",
    "application",
    "go",
    "uh",
    "need",
    "budget",
    "budgeting",
    "app",
    "use",
    "really",
    "like",
    "um",
    "go",
    "login",
    "page",
    "um",
    "login",
    "right",
    "type",
    "email",
    "address",
    "type",
    "incorrectly",
    "going",
    "say",
    "please",
    "enter",
    "valid",
    "email",
    "address",
    "might",
    "asking",
    "well",
    "know",
    "invalid",
    "email",
    "address",
    "know",
    "may",
    "go",
    "bunch",
    "different",
    "um",
    "know",
    "types",
    "emails",
    "like",
    "big",
    "long",
    "list",
    "emails",
    "probably",
    "going",
    "efficient",
    "course",
    "use",
    "regular",
    "expressions",
    "pattern",
    "match",
    "basically",
    "say",
    "okay",
    "expect",
    "see",
    "um",
    "certain",
    "characters",
    "symbol",
    "every",
    "email",
    "address",
    "symbol",
    "sort",
    "valid",
    "uh",
    "domain",
    "whatever",
    "email",
    "address",
    "pattern",
    "match",
    "regular",
    "expressions",
    "powerful",
    "validate",
    "emails",
    "also",
    "whole",
    "host",
    "things",
    "uh",
    "great",
    "validation",
    "validation",
    "going",
    "keep",
    "mind",
    "loaded",
    "topic",
    "said",
    "need",
    "fully",
    "understand",
    "write",
    "uh",
    "regular",
    "expressions",
    "really",
    "high",
    "priority",
    "thing",
    "right",
    "trying",
    "learn",
    "code",
    "get",
    "away",
    "without",
    "regular",
    "expressions",
    "um",
    "writing",
    "web",
    "apps",
    "nice",
    "really",
    "speed",
    "workflow",
    "uh",
    "road",
    "need",
    "least",
    "exposed",
    "ask",
    "video",
    "understand",
    "uh",
    "read",
    "general",
    "kind",
    "understanding",
    "symbols",
    "able",
    "piece",
    "together",
    "regular",
    "expression",
    "would",
    "worry",
    "uh",
    "learning",
    "mastering",
    "write",
    "go",
    "javascript",
    "documentation",
    "um",
    "let",
    "see",
    "go",
    "technologies",
    "javascript",
    "kind",
    "reiterating",
    "go",
    "objects",
    "go",
    "regular",
    "expression",
    "object",
    "going",
    "uh",
    "regex",
    "says",
    "object",
    "used",
    "matching",
    "text",
    "pattern",
    "said",
    "pattern",
    "matching",
    "let",
    "go",
    "ahead",
    "write",
    "basic",
    "regular",
    "expression",
    "um",
    "show",
    "say",
    "email",
    "validator",
    "regular",
    "expression",
    "uh",
    "kind",
    "similar",
    "looked",
    "validating",
    "whether",
    "email",
    "address",
    "um",
    "correct",
    "implementation",
    "write",
    "means",
    "uh",
    "exhaustive",
    "definitely",
    "going",
    "miss",
    "couple",
    "cases",
    "guarantee",
    "know",
    "ynab",
    "need",
    "budget",
    "using",
    "much",
    "complex",
    "expression",
    "one",
    "show",
    "anyways",
    "let",
    "go",
    "get",
    "idea",
    "dealing",
    "let",
    "say",
    "user",
    "input",
    "type",
    "form",
    "know",
    "go",
    "type",
    "form",
    "type",
    "something",
    "user",
    "input",
    "variable",
    "going",
    "represent",
    "might",
    "put",
    "something",
    "like",
    "invalid",
    "email",
    "g",
    "obviously",
    "valid",
    "email",
    "reject",
    "using",
    "regular",
    "expression",
    "say",
    "new",
    "variable",
    "say",
    "uh",
    "valid",
    "take",
    "email",
    "validator",
    "regular",
    "expression",
    "use",
    "one",
    "methods",
    "come",
    "left",
    "see",
    "different",
    "methods",
    "one",
    "uh",
    "go",
    "uh",
    "methods",
    "even",
    "right",
    "one",
    "okay",
    "regular",
    "expression",
    "okay",
    "missing",
    "completely",
    "methods",
    "um",
    "pretty",
    "uh",
    "confusing",
    "look",
    "two",
    "looking",
    "going",
    "exec",
    "test",
    "use",
    "test",
    "see",
    "something",
    "valid",
    "going",
    "go",
    "ahead",
    "going",
    "use",
    "test",
    "going",
    "pass",
    "user",
    "input",
    "saying",
    "take",
    "regular",
    "expression",
    "pattern",
    "defined",
    "map",
    "string",
    "defined",
    "press",
    "enter",
    "going",
    "uh",
    "show",
    "value",
    "going",
    "false",
    "invalid",
    "email",
    "expression",
    "regular",
    "expression",
    "match",
    "look",
    "regular",
    "expression",
    "characters",
    "probably",
    "look",
    "like",
    "complete",
    "gibberish",
    "um",
    "quickly",
    "walk",
    "go",
    "back",
    "basics",
    "really",
    "understand",
    "first",
    "character",
    "says",
    "want",
    "start",
    "beginning",
    "line",
    "period",
    "represents",
    "characters",
    "uh",
    "plus",
    "sign",
    "comes",
    "directly",
    "period",
    "says",
    "want",
    "match",
    "character",
    "one",
    "times",
    "symbol",
    "looking",
    "symbol",
    "period",
    "want",
    "um",
    "character",
    "one",
    "times",
    "use",
    "slash",
    "basically",
    "escape",
    "actually",
    "look",
    "period",
    "need",
    "period",
    "order",
    "special",
    "character",
    "escaped",
    "use",
    "uh",
    "backslash",
    "right",
    "use",
    "another",
    "period",
    "characters",
    "one",
    "times",
    "finally",
    "end",
    "line",
    "dollar",
    "sign",
    "know",
    "super",
    "confusing",
    "would",
    "never",
    "expect",
    "follow",
    "along",
    "said",
    "give",
    "taste",
    "dealing",
    "right",
    "let",
    "go",
    "kind",
    "basics",
    "uh",
    "regular",
    "expressions",
    "like",
    "think",
    "two",
    "pieces",
    "identifiers",
    "quantifiers",
    "identifiers",
    "one",
    "ton",
    "different",
    "things",
    "special",
    "characters",
    "characters",
    "phrases",
    "trying",
    "match",
    "identifiers",
    "actually",
    "trying",
    "pattern",
    "match",
    "within",
    "string",
    "created",
    "regular",
    "expression",
    "say",
    "new",
    "regular",
    "expression",
    "going",
    "pass",
    "letter",
    "g",
    "going",
    "pass",
    "couple",
    "strings",
    "say",
    "string",
    "one",
    "string",
    "two",
    "see",
    "trying",
    "match",
    "letter",
    "g",
    "occurs",
    "second",
    "string",
    "right",
    "say",
    "regular",
    "expression",
    "test",
    "pass",
    "string",
    "one",
    "going",
    "get",
    "false",
    "test",
    "string",
    "two",
    "going",
    "give",
    "us",
    "value",
    "true",
    "fact",
    "match",
    "g",
    "middle",
    "string",
    "case",
    "regular",
    "expression",
    "taking",
    "single",
    "character",
    "looking",
    "probably",
    "going",
    "going",
    "probably",
    "going",
    "get",
    "little",
    "bit",
    "complex",
    "maybe",
    "test",
    "entire",
    "word",
    "let",
    "type",
    "another",
    "one",
    "say",
    "reg",
    "reg",
    "x",
    "2",
    "people",
    "say",
    "reg",
    "x",
    "rex",
    "regular",
    "expressions",
    "whatever",
    "um",
    "anyways",
    "going",
    "say",
    "one",
    "going",
    "equal",
    "entire",
    "word",
    "strings",
    "word",
    "favorite",
    "test",
    "second",
    "uh",
    "regular",
    "expression",
    "strings",
    "going",
    "return",
    "true",
    "matter",
    "string",
    "put",
    "going",
    "return",
    "true",
    "um",
    "see",
    "also",
    "match",
    "full",
    "word",
    "um",
    "addition",
    "single",
    "character",
    "interesting",
    "thing",
    "regular",
    "expressions",
    "um",
    "guess",
    "maybe",
    "interesting",
    "important",
    "thing",
    "case",
    "sensitive",
    "make",
    "another",
    "regular",
    "expression",
    "let",
    "go",
    "ahead",
    "clear",
    "screen",
    "second",
    "get",
    "room",
    "um",
    "let",
    "say",
    "regular",
    "expression",
    "going",
    "equal",
    "um",
    "favorite",
    "capital",
    "letters",
    "beginning",
    "end",
    "course",
    "need",
    "bring",
    "strings",
    "refreshed",
    "page",
    "count",
    "time",
    "map",
    "regular",
    "expression",
    "test",
    "string",
    "one",
    "going",
    "get",
    "false",
    "capital",
    "uh",
    "word",
    "called",
    "favorite",
    "capital",
    "f",
    "capital",
    "e",
    "see",
    "string",
    "two",
    "also",
    "returns",
    "false",
    "case",
    "sensitive",
    "pay",
    "attention",
    "uppercase",
    "lowercase",
    "letters",
    "use",
    "single",
    "letters",
    "single",
    "words",
    "phrases",
    "use",
    "special",
    "characters",
    "really",
    "power",
    "regular",
    "expression",
    "comes",
    "multitude",
    "special",
    "characters",
    "use",
    "going",
    "put",
    "screen",
    "couple",
    "really",
    "popular",
    "common",
    "ones",
    "first",
    "one",
    "going",
    "anything",
    "put",
    "two",
    "brackets",
    "um",
    "another",
    "thing",
    "want",
    "share",
    "write",
    "regular",
    "expression",
    "like",
    "one",
    "way",
    "like",
    "saw",
    "strings",
    "uh",
    "modif",
    "create",
    "string",
    "two",
    "different",
    "ways",
    "common",
    "way",
    "going",
    "creating",
    "regular",
    "expression",
    "put",
    "two",
    "forward",
    "slashes",
    "put",
    "regular",
    "expression",
    "case",
    "could",
    "put",
    "g",
    "um",
    "going",
    "regular",
    "expression",
    "wrote",
    "first",
    "could",
    "also",
    "put",
    "favorite",
    "going",
    "regular",
    "expression",
    "saw",
    "actually",
    "execute",
    "methods",
    "know",
    "literal",
    "uh",
    "like",
    "test",
    "string",
    "one",
    "go",
    "back",
    "lowercase",
    "letters",
    "going",
    "return",
    "true",
    "good",
    "uh",
    "show",
    "syntax",
    "quickly",
    "loop",
    "bunch",
    "different",
    "patterns",
    "going",
    "change",
    "regular",
    "expression",
    "comparing",
    "string",
    "one",
    "first",
    "thing",
    "regular",
    "expression",
    "character",
    "group",
    "two",
    "brackets",
    "whatever",
    "define",
    "character",
    "group",
    "going",
    "apply",
    "regular",
    "expression",
    "could",
    "say",
    "z",
    "um",
    "uppercase",
    "matching",
    "uppercase",
    "letters",
    "string",
    "string",
    "one",
    "uppercase",
    "letters",
    "return",
    "false",
    "match",
    "also",
    "pass",
    "uh",
    "z",
    "lowercase",
    "letters",
    "obviously",
    "uh",
    "match",
    "least",
    "one",
    "letters",
    "uh",
    "moving",
    "also",
    "0",
    "9",
    "going",
    "match",
    "numbers",
    "within",
    "string",
    "numbers",
    "going",
    "match",
    "returns",
    "false",
    "combine",
    "together",
    "match",
    "uppercase",
    "letters",
    "lowercase",
    "letters",
    "numbers",
    "could",
    "even",
    "match",
    "spaces",
    "added",
    "space",
    "could",
    "match",
    "uh",
    "spaces",
    "going",
    "return",
    "true",
    "uh",
    "matching",
    "spaces",
    "lowercase",
    "letters",
    "forth",
    "using",
    "brackets",
    "lot",
    "different",
    "options",
    "uh",
    "within",
    "brackets",
    "talked",
    "earlier",
    "period",
    "used",
    "context",
    "regular",
    "expression",
    "represents",
    "character",
    "uh",
    "whatsoever",
    "going",
    "return",
    "true",
    "um",
    "represents",
    "character",
    "uh",
    "next",
    "one",
    "look",
    "back",
    "sl",
    "going",
    "match",
    "numbers",
    "equivalent",
    "saying",
    "brackets",
    "0",
    "9",
    "completely",
    "equivalent",
    "different",
    "way",
    "write",
    "case",
    "num",
    "returns",
    "false",
    "also",
    "uh",
    "back",
    "sls",
    "match",
    "wh",
    "space",
    "characters",
    "spaces",
    "uh",
    "words",
    "strings",
    "match",
    "um",
    "also",
    "uh",
    "back",
    "slw",
    "matches",
    "letters",
    "numbers",
    "alpha",
    "numeric",
    "shortcuts",
    "use",
    "said",
    "interpreting",
    "uh",
    "email",
    "validator",
    "little",
    "carrot",
    "represents",
    "beginning",
    "string",
    "put",
    "carrot",
    "put",
    "f",
    "going",
    "return",
    "false",
    "first",
    "letter",
    "string",
    "testing",
    "string",
    "one",
    "actually",
    "put",
    "going",
    "return",
    "true",
    "could",
    "put",
    "f",
    "returns",
    "false",
    "starting",
    "beginning",
    "line",
    "take",
    "returns",
    "true",
    "longer",
    "constrained",
    "beginning",
    "line",
    "could",
    "also",
    "end",
    "line",
    "dollar",
    "sign",
    "uh",
    "f",
    "last",
    "letter",
    "stre",
    "string",
    "actually",
    "k",
    "would",
    "make",
    "return",
    "true",
    "um",
    "finally",
    "uh",
    "little",
    "groups",
    "make",
    "put",
    "parentheses",
    "say",
    "um",
    "could",
    "say",
    "code",
    "uh",
    "stake",
    "something",
    "like",
    "going",
    "match",
    "either",
    "code",
    "word",
    "code",
    "word",
    "stake",
    "case",
    "looking",
    "string",
    "one",
    "uh",
    "stake",
    "going",
    "match",
    "different",
    "ways",
    "write",
    "identifiers",
    "see",
    "flexible",
    "creative",
    "get",
    "match",
    "different",
    "um",
    "patterns",
    "within",
    "string",
    "like",
    "line",
    "text",
    "next",
    "thing",
    "second",
    "piece",
    "equation",
    "going",
    "quantifiers",
    "far",
    "using",
    "test",
    "method",
    "basically",
    "show",
    "whether",
    "matched",
    "certain",
    "character",
    "string",
    "um",
    "let",
    "rewrite",
    "let",
    "say",
    "want",
    "match",
    "um",
    "lowercase",
    "letters",
    "returns",
    "true",
    "telling",
    "us",
    "string",
    "one",
    "least",
    "one",
    "lowercase",
    "character",
    "come",
    "change",
    "test",
    "method",
    "exec",
    "going",
    "little",
    "bit",
    "different",
    "operation",
    "read",
    "exec",
    "um",
    "shows",
    "kind",
    "returns",
    "different",
    "values",
    "array",
    "returns",
    "basically",
    "telling",
    "us",
    "matched",
    "wrote",
    "regular",
    "expression",
    "letter",
    "started",
    "beginning",
    "string",
    "matched",
    "one",
    "lowercase",
    "character",
    "said",
    "okay",
    "need",
    "match",
    "want",
    "match",
    "one",
    "character",
    "want",
    "match",
    "section",
    "string",
    "actually",
    "tell",
    "way",
    "quantifiers",
    "couple",
    "different",
    "quantifiers",
    "try",
    "roll",
    "um",
    "explain",
    "really",
    "quickly",
    "overview",
    "first",
    "one",
    "star",
    "way",
    "works",
    "put",
    "uh",
    "identifier",
    "um",
    "beginning",
    "follow",
    "star",
    "another",
    "quantifier",
    "trying",
    "use",
    "saying",
    "expect",
    "trying",
    "match",
    "uh",
    "lowercase",
    "letter",
    "star",
    "saying",
    "want",
    "match",
    "lowercase",
    "letter",
    "zero",
    "times",
    "case",
    "know",
    "since",
    "matching",
    "zero",
    "preceding",
    "character",
    "pretty",
    "much",
    "going",
    "return",
    "something",
    "every",
    "time",
    "change",
    "plus",
    "sign",
    "going",
    "um",
    "match",
    "one",
    "preceding",
    "character",
    "put",
    "question",
    "mark",
    "represent",
    "either",
    "zero",
    "one",
    "uh",
    "quantity",
    "previous",
    "character",
    "case",
    "see",
    "uh",
    "matched",
    "value",
    "going",
    "first",
    "letter",
    "looking",
    "zero",
    "one",
    "explicit",
    "say",
    "want",
    "match",
    "certain",
    "amount",
    "uh",
    "characters",
    "want",
    "add",
    "little",
    "space",
    "within",
    "uh",
    "uh",
    "identifier",
    "right",
    "matching",
    "first",
    "word",
    "add",
    "space",
    "going",
    "start",
    "matching",
    "entire",
    "uh",
    "sentence",
    "string",
    "put",
    "plus",
    "sign",
    "see",
    "favorite",
    "food",
    "steak",
    "matches",
    "entire",
    "string",
    "lowercase",
    "letters",
    "wanted",
    "specific",
    "wanted",
    "match",
    "certain",
    "amount",
    "little",
    "brackets",
    "quantifier",
    "pass",
    "specific",
    "number",
    "let",
    "say",
    "wanted",
    "match",
    "say",
    "five",
    "characters",
    "well",
    "going",
    "get",
    "first",
    "five",
    "characters",
    "space",
    "counts",
    "fa",
    "going",
    "match",
    "first",
    "five",
    "characters",
    "also",
    "range",
    "um",
    "say",
    "want",
    "match",
    "two",
    "six",
    "preceding",
    "character",
    "uh",
    "looking",
    "going",
    "match",
    "six",
    "upper",
    "bound",
    "match",
    "like",
    "range",
    "characters",
    "different",
    "quantifiers",
    "um",
    "use",
    "take",
    "pattern",
    "matching",
    "tell",
    "much",
    "pattern",
    "want",
    "match",
    "go",
    "kind",
    "final",
    "example",
    "tile",
    "concepts",
    "together",
    "want",
    "show",
    "one",
    "thing",
    "um",
    "going",
    "documentation",
    "thing",
    "called",
    "flag",
    "define",
    "regular",
    "expression",
    "say",
    "reg",
    "x",
    "going",
    "equal",
    "know",
    "new",
    "regular",
    "expression",
    "could",
    "also",
    "write",
    "two",
    "slashes",
    "also",
    "pass",
    "flag",
    "goes",
    "end",
    "two",
    "slashes",
    "possible",
    "flags",
    "case",
    "might",
    "want",
    "global",
    "search",
    "search",
    "pattern",
    "um",
    "even",
    "occurs",
    "multiple",
    "times",
    "wanted",
    "use",
    "would",
    "write",
    "regular",
    "expression",
    "might",
    "say",
    "want",
    "match",
    "uh",
    "lowercase",
    "letters",
    "one",
    "time",
    "end",
    "put",
    "g",
    "represents",
    "flag",
    "um",
    "slight",
    "nuance",
    "see",
    "able",
    "recognize",
    "um",
    "anyways",
    "let",
    "move",
    "basic",
    "example",
    "apply",
    "concepts",
    "identifiers",
    "quantifiers",
    "wrap",
    "uh",
    "section",
    "regular",
    "expressions",
    "going",
    "write",
    "um",
    "first",
    "string",
    "string",
    "going",
    "uh",
    "want",
    "want",
    "match",
    "say",
    "hello",
    "world",
    "um",
    "let",
    "put",
    "couple",
    "numbers",
    "2021",
    "let",
    "put",
    "couple",
    "spaces",
    "uh",
    "put",
    "know",
    "put",
    "symbol",
    "well",
    "string",
    "end",
    "goal",
    "basically",
    "write",
    "regular",
    "expression",
    "going",
    "match",
    "entire",
    "string",
    "multitude",
    "ways",
    "uh",
    "go",
    "obvious",
    "ways",
    "think",
    "write",
    "regular",
    "expression",
    "going",
    "use",
    "syntax",
    "first",
    "thing",
    "notice",
    "lowercase",
    "letters",
    "uh",
    "start",
    "uh",
    "use",
    "brackets",
    "simple",
    "way",
    "uh",
    "hit",
    "home",
    "concepts",
    "say",
    "want",
    "match",
    "lowercase",
    "letters",
    "spaces",
    "let",
    "add",
    "space",
    "right",
    "want",
    "match",
    "one",
    "times",
    "um",
    "actually",
    "going",
    "um",
    "real",
    "time",
    "see",
    "happening",
    "instead",
    "putting",
    "variable",
    "going",
    "look",
    "um",
    "lowercase",
    "letters",
    "add",
    "space",
    "going",
    "going",
    "execute",
    "string",
    "kind",
    "begin",
    "see",
    "matching",
    "looking",
    "lowercase",
    "letters",
    "one",
    "times",
    "got",
    "hello",
    "world",
    "looking",
    "comma",
    "put",
    "comma",
    "um",
    "looking",
    "spaces",
    "numbers",
    "pass",
    "0",
    "9",
    "another",
    "space",
    "want",
    "match",
    "one",
    "times",
    "want",
    "match",
    "symbol",
    "want",
    "match",
    "uh",
    "lowercase",
    "letters",
    "z",
    "need",
    "space",
    "say",
    "one",
    "times",
    "good",
    "measure",
    "necessary",
    "put",
    "little",
    "uh",
    "upwards",
    "carrot",
    "indicate",
    "beginning",
    "string",
    "dollar",
    "sign",
    "indicate",
    "end",
    "string",
    "see",
    "matched",
    "entire",
    "string",
    "course",
    "lot",
    "lot",
    "simpler",
    "need",
    "put",
    "period",
    "plus",
    "sign",
    "matches",
    "character",
    "uh",
    "one",
    "times",
    "match",
    "whole",
    "string",
    "hopefully",
    "brief",
    "overview",
    "basic",
    "explanation",
    "regular",
    "expressions",
    "um",
    "object",
    "within",
    "javascript",
    "like",
    "talked",
    "going",
    "stumble",
    "upon",
    "eventually",
    "may",
    "come",
    "handy",
    "importantly",
    "understanding",
    "read",
    "covered",
    "lot",
    "lesson",
    "finally",
    "making",
    "string",
    "object",
    "javascript",
    "um",
    "let",
    "come",
    "beginning",
    "technologies",
    "javascript",
    "objects",
    "go",
    "string",
    "right",
    "kind",
    "talked",
    "uh",
    "string",
    "object",
    "versus",
    "primitives",
    "got",
    "overview",
    "talk",
    "methods",
    "use",
    "string",
    "want",
    "lesson",
    "along",
    "basically",
    "give",
    "important",
    "methods",
    "ones",
    "used",
    "lot",
    "developers",
    "use",
    "commonly",
    "give",
    "brief",
    "overview",
    "kind",
    "memory",
    "bank",
    "recall",
    "uh",
    "later",
    "use",
    "code",
    "maybe",
    "code",
    "challenges",
    "interviews",
    "whatever",
    "looking",
    "strings",
    "see",
    "lot",
    "different",
    "string",
    "methods",
    "uh",
    "use",
    "little",
    "downwards",
    "thumb",
    "means",
    "deprecated",
    "method",
    "go",
    "trying",
    "use",
    "uh",
    "um",
    "lot",
    "want",
    "point",
    "important",
    "ones",
    "going",
    "looking",
    "um",
    "let",
    "go",
    "ahead",
    "refresh",
    "oh",
    "know",
    "done",
    "okay",
    "go",
    "clear",
    "screen",
    "going",
    "looking",
    "replace",
    "method",
    "going",
    "look",
    "two",
    "uppercase",
    "method",
    "substring",
    "method",
    "trim",
    "method",
    "match",
    "method",
    "going",
    "covering",
    "basic",
    "examples",
    "go",
    "going",
    "show",
    "documentation",
    "first",
    "really",
    "want",
    "get",
    "used",
    "um",
    "reading",
    "understanding",
    "working",
    "let",
    "go",
    "replace",
    "method",
    "says",
    "method",
    "returns",
    "new",
    "string",
    "matches",
    "pattern",
    "replaced",
    "replacement",
    "pattern",
    "string",
    "regular",
    "expression",
    "learned",
    "replacement",
    "string",
    "function",
    "called",
    "match",
    "going",
    "get",
    "function",
    "piece",
    "little",
    "bit",
    "complicated",
    "look",
    "syntax",
    "see",
    "new",
    "uh",
    "symbols",
    "little",
    "pipe",
    "means",
    "multiple",
    "types",
    "parameters",
    "pass",
    "um",
    "multiple",
    "types",
    "parameters",
    "obviously",
    "multiple",
    "parameters",
    "single",
    "parameter",
    "multiple",
    "types",
    "data",
    "pass",
    "case",
    "saying",
    "either",
    "regular",
    "expression",
    "string",
    "match",
    "second",
    "parameter",
    "comma",
    "say",
    "okay",
    "new",
    "parameter",
    "uh",
    "new",
    "substring",
    "regular",
    "string",
    "function",
    "return",
    "basically",
    "whatever",
    "want",
    "replace",
    "come",
    "parameters",
    "read",
    "little",
    "bit",
    "need",
    "going",
    "show",
    "use",
    "let",
    "go",
    "ahead",
    "define",
    "string",
    "really",
    "quickly",
    "uh",
    "say",
    "dog",
    "jumped",
    "bed",
    "dog",
    "bad",
    "dog",
    "right",
    "notice",
    "weird",
    "capitalization",
    "going",
    "replacing",
    "want",
    "say",
    "want",
    "new",
    "string",
    "string",
    "want",
    "replace",
    "different",
    "replace",
    "method",
    "um",
    "obviously",
    "replacing",
    "occurrences",
    "match",
    "rather",
    "first",
    "use",
    "one",
    "uh",
    "frequently",
    "cases",
    "want",
    "replace",
    "rather",
    "first",
    "match",
    "case",
    "could",
    "say",
    "want",
    "replace",
    "word",
    "dog",
    "cat",
    "going",
    "assign",
    "new",
    "string",
    "variable",
    "going",
    "see",
    "cat",
    "jumped",
    "bed",
    "dog",
    "bad",
    "cat",
    "obviously",
    "makes",
    "sense",
    "whatsoever",
    "missed",
    "one",
    "case",
    "sensitive",
    "write",
    "regular",
    "expression",
    "learned",
    "might",
    "well",
    "right",
    "going",
    "say",
    "correct",
    "string",
    "equals",
    "string",
    "replace",
    "case",
    "going",
    "pass",
    "regular",
    "expression",
    "going",
    "replace",
    "uh",
    "lowercase",
    "cat",
    "occurrences",
    "word",
    "dog",
    "uppercase",
    "lowercase",
    "going",
    "replaced",
    "right",
    "regular",
    "expression",
    "going",
    "put",
    "character",
    "group",
    "going",
    "say",
    "want",
    "either",
    "uppercase",
    "lowercase",
    "want",
    "match",
    "exactly",
    "going",
    "put",
    "little",
    "brackets",
    "put",
    "one",
    "going",
    "match",
    "exactly",
    "one",
    "characters",
    "either",
    "uppc",
    "lowercase",
    "going",
    "pass",
    "uh",
    "og",
    "always",
    "going",
    "end",
    "og",
    "lowercase",
    "form",
    "going",
    "finally",
    "pass",
    "let",
    "see",
    "need",
    "pass",
    "global",
    "flag",
    "want",
    "um",
    "replace",
    "find",
    "instance",
    "instances",
    "let",
    "go",
    "ahead",
    "press",
    "enter",
    "see",
    "got",
    "correct",
    "string",
    "looks",
    "like",
    "cat",
    "instances",
    "replaced",
    "correctly",
    "g",
    "end",
    "global",
    "flag",
    "um",
    "bunch",
    "different",
    "flags",
    "bring",
    "regular",
    "expression",
    "means",
    "uh",
    "match",
    "occurrences",
    "first",
    "next",
    "method",
    "looking",
    "two",
    "uppercase",
    "method",
    "pretty",
    "easy",
    "one",
    "let",
    "go",
    "documentation",
    "take",
    "look",
    "says",
    "two",
    "uppercase",
    "returns",
    "calling",
    "string",
    "value",
    "converted",
    "uppercase",
    "um",
    "um",
    "value",
    "converted",
    "string",
    "one",
    "right",
    "simple",
    "um",
    "simple",
    "function",
    "pretty",
    "much",
    "figure",
    "experimenting",
    "around",
    "say",
    "uh",
    "want",
    "string",
    "equal",
    "sust",
    "string",
    "oh",
    "saying",
    "redeclared",
    "string",
    "need",
    "refresh",
    "browser",
    "already",
    "string",
    "equals",
    "string",
    "say",
    "string",
    "2",
    "uppercase",
    "see",
    "capitalizes",
    "every",
    "single",
    "character",
    "within",
    "string",
    "straightforward",
    "um",
    "see",
    "comes",
    "handy",
    "second",
    "next",
    "one",
    "looking",
    "substring",
    "method",
    "use",
    "quite",
    "bit",
    "um",
    "go",
    "documentation",
    "going",
    "see",
    "actually",
    "two",
    "methods",
    "following",
    "along",
    "tutorial",
    "prior",
    "video",
    "25",
    "challenges",
    "actually",
    "used",
    "wrong",
    "method",
    "um",
    "see",
    "two",
    "methods",
    "substring",
    "subst",
    "substr",
    "little",
    "downwards",
    "thumb",
    "means",
    "use",
    "deprecated",
    "course",
    "used",
    "previous",
    "video",
    "um",
    "apologize",
    "going",
    "using",
    "method",
    "says",
    "returns",
    "part",
    "string",
    "start",
    "end",
    "ind",
    "uh",
    "indices",
    "go",
    "uh",
    "function",
    "signature",
    "uh",
    "see",
    "one",
    "required",
    "parameter",
    "surrounded",
    "brackets",
    "one",
    "uh",
    "optional",
    "parameter",
    "represent",
    "index",
    "first",
    "character",
    "want",
    "include",
    "return",
    "string",
    "last",
    "character",
    "uh",
    "want",
    "otherwise",
    "going",
    "take",
    "everything",
    "um",
    "first",
    "character",
    "let",
    "go",
    "ahead",
    "give",
    "try",
    "um",
    "use",
    "string",
    "say",
    "string",
    "substring",
    "let",
    "say",
    "want",
    "get",
    "um",
    "everything",
    "starting",
    "know",
    "letter",
    "think",
    "index",
    "zero",
    "index",
    "one",
    "2",
    "e3",
    "space",
    "four",
    "second",
    "five",
    "maybe",
    "start",
    "five",
    "get",
    "second",
    "word",
    "pass",
    "second",
    "parameter",
    "goes",
    "end",
    "string",
    "kind",
    "want",
    "could",
    "also",
    "pass",
    "something",
    "like",
    "seven",
    "kind",
    "cuts",
    "kind",
    "substring",
    "method",
    "works",
    "want",
    "provide",
    "common",
    "ways",
    "might",
    "use",
    "methods",
    "one",
    "common",
    "ways",
    "found",
    "use",
    "substring",
    "method",
    "um",
    "want",
    "maybe",
    "capitalize",
    "first",
    "word",
    "sentence",
    "let",
    "say",
    "wanted",
    "take",
    "take",
    "string",
    "string",
    "lowercase",
    "wanted",
    "capitalize",
    "combine",
    "full",
    "string",
    "basically",
    "looking",
    "right",
    "wanted",
    "convert",
    "would",
    "would",
    "say",
    "um",
    "let",
    "assign",
    "result",
    "variable",
    "say",
    "string",
    "want",
    "grab",
    "first",
    "letter",
    "entire",
    "string",
    "going",
    "going",
    "use",
    "two",
    "uppercase",
    "method",
    "saw",
    "previous",
    "uh",
    "method",
    "right",
    "going",
    "going",
    "grab",
    "going",
    "capitalize",
    "getting",
    "right",
    "single",
    "letter",
    "use",
    "plus",
    "sign",
    "concatenate",
    "uh",
    "two",
    "strings",
    "together",
    "get",
    "remainder",
    "string",
    "right",
    "way",
    "using",
    "substring",
    "method",
    "say",
    "string",
    "um",
    "want",
    "use",
    "substring",
    "method",
    "want",
    "start",
    "index",
    "one",
    "already",
    "got",
    "first",
    "uh",
    "zeroth",
    "index",
    "want",
    "start",
    "substring",
    "one",
    "right",
    "go",
    "end",
    "string",
    "would",
    "basically",
    "leave",
    "like",
    "done",
    "know",
    "maybe",
    "good",
    "reason",
    "could",
    "also",
    "grab",
    "string",
    "length",
    "get",
    "last",
    "character",
    "string",
    "bounds",
    "substring",
    "press",
    "enter",
    "type",
    "result",
    "see",
    "capitalized",
    "uh",
    "string",
    "sentence",
    "longer",
    "common",
    "use",
    "case",
    "substring",
    "method",
    "combined",
    "two",
    "uppercase",
    "method",
    "start",
    "see",
    "combine",
    "together",
    "makes",
    "job",
    "lot",
    "easier",
    "next",
    "method",
    "talking",
    "trim",
    "method",
    "may",
    "seem",
    "um",
    "useful",
    "first",
    "start",
    "looking",
    "show",
    "might",
    "use",
    "real",
    "world",
    "trim",
    "method",
    "removes",
    "white",
    "space",
    "ends",
    "string",
    "notice",
    "says",
    "ends",
    "remove",
    "white",
    "space",
    "middle",
    "string",
    "um",
    "whit",
    "space",
    "context",
    "whit",
    "space",
    "characters",
    "space",
    "tab",
    "break",
    "space",
    "etc",
    "um",
    "line",
    "terminator",
    "characters",
    "um",
    "carriage",
    "return",
    "need",
    "worry",
    "uh",
    "call",
    "signature",
    "function",
    "signature",
    "simple",
    "call",
    "string",
    "removes",
    "whit",
    "space",
    "might",
    "say",
    "well",
    "useful",
    "got",
    "external",
    "data",
    "looked",
    "like",
    "might",
    "data",
    "retrieved",
    "external",
    "database",
    "something",
    "control",
    "receive",
    "case",
    "spaces",
    "um",
    "strings",
    "would",
    "go",
    "remov",
    "removing",
    "returning",
    "object",
    "uh",
    "kind",
    "cleaned",
    "um",
    "piece",
    "data",
    "well",
    "using",
    "loop",
    "trim",
    "method",
    "let",
    "write",
    "loop",
    "loop",
    "lot",
    "challenges",
    "code",
    "challenges",
    "last",
    "lesson",
    "also",
    "um",
    "learned",
    "last",
    "lesson",
    "familiar",
    "going",
    "write",
    "loop",
    "um",
    "plus",
    "plus",
    "going",
    "loop",
    "piece",
    "data",
    "going",
    "actually",
    "break",
    "going",
    "say",
    "current",
    "title",
    "going",
    "equal",
    "external",
    "data",
    "going",
    "grab",
    "index",
    "tile",
    "going",
    "go",
    "going",
    "grab",
    "current",
    "author",
    "equals",
    "external",
    "data",
    "iauthor",
    "coming",
    "going",
    "uh",
    "reassign",
    "values",
    "properties",
    "trimmed",
    "version",
    "going",
    "say",
    "external",
    "data",
    "title",
    "going",
    "equal",
    "current",
    "title",
    "trim",
    "going",
    "trim",
    "whites",
    "space",
    "assign",
    "back",
    "property",
    "thing",
    "author",
    "external",
    "data",
    "author",
    "equals",
    "current",
    "author",
    "iterating",
    "trim",
    "loop",
    "print",
    "external",
    "data",
    "look",
    "array",
    "going",
    "see",
    "values",
    "trimmed",
    "white",
    "space",
    "um",
    "way",
    "used",
    "past",
    "um",
    "something",
    "come",
    "handy",
    "wanted",
    "show",
    "method",
    "reason",
    "final",
    "method",
    "going",
    "look",
    "method",
    "string",
    "object",
    "match",
    "method",
    "going",
    "familiar",
    "learned",
    "regular",
    "expressions",
    "already",
    "going",
    "actually",
    "bring",
    "something",
    "already",
    "looked",
    "let",
    "write",
    "regular",
    "expression",
    "say",
    "want",
    "match",
    "uh",
    "lowercase",
    "characters",
    "quantity",
    "one",
    "going",
    "regular",
    "expression",
    "string",
    "going",
    "bunch",
    "gibberish",
    "let",
    "write",
    "correctly",
    "bunch",
    "gibberish",
    "maybe",
    "numbers",
    "gibberish",
    "letters",
    "right",
    "string",
    "actually",
    "two",
    "ways",
    "test",
    "first",
    "way",
    "something",
    "already",
    "seen",
    "run",
    "exec",
    "method",
    "string",
    "course",
    "since",
    "matching",
    "lowercase",
    "letters",
    "quantity",
    "one",
    "going",
    "grab",
    "gets",
    "numbers",
    "longer",
    "matches",
    "one",
    "way",
    "could",
    "also",
    "reverse",
    "like",
    "exact",
    "thing",
    "except",
    "string",
    "method",
    "say",
    "string",
    "match",
    "pass",
    "regular",
    "expression",
    "going",
    "show",
    "us",
    "kind",
    "thing",
    "going",
    "exactly",
    "long",
    "using",
    "global",
    "flag",
    "put",
    "um",
    "let",
    "say",
    "know",
    "defined",
    "regular",
    "expression",
    "put",
    "z",
    "know",
    "one",
    "put",
    "global",
    "flag",
    "would",
    "two",
    "methods",
    "behave",
    "identical",
    "intents",
    "purposes",
    "use",
    "either",
    "one",
    "really",
    "matter",
    "pick",
    "one",
    "go",
    "point",
    "lesson",
    "talked",
    "dates",
    "regular",
    "expressions",
    "string",
    "methods",
    "talked",
    "arrays",
    "gets",
    "really",
    "fun",
    "say",
    "list",
    "methods",
    "going",
    "going",
    "actually",
    "see",
    "screen",
    "um",
    "different",
    "methods",
    "push",
    "pop",
    "shift",
    "unshift",
    "kind",
    "grouped",
    "together",
    "slice",
    "splice",
    "actually",
    "different",
    "find",
    "index",
    "index",
    "kind",
    "grouped",
    "together",
    "map",
    "includes",
    "filter",
    "reduce",
    "chose",
    "ones",
    "going",
    "using",
    "time",
    "represent",
    "kind",
    "bulk",
    "um",
    "know",
    "kind",
    "go",
    "whole",
    "8020",
    "rule",
    "8020",
    "rule",
    "array",
    "methods",
    "obviously",
    "exhaustive",
    "um",
    "going",
    "go",
    "every",
    "last",
    "detail",
    "method",
    "hope",
    "um",
    "basically",
    "walk",
    "basics",
    "use",
    "complete",
    "shock",
    "kind",
    "know",
    "available",
    "um",
    "kind",
    "half",
    "battle",
    "sometimes",
    "remember",
    "memorize",
    "try",
    "memorize",
    "um",
    "like",
    "method",
    "always",
    "look",
    "going",
    "video",
    "know",
    "read",
    "documentation",
    "continue",
    "array",
    "methods",
    "get",
    "better",
    "better",
    "um",
    "know",
    "acquainting",
    "different",
    "uh",
    "syntax",
    "documentation",
    "let",
    "get",
    "started",
    "start",
    "push",
    "pop",
    "shift",
    "unshift",
    "methods",
    "going",
    "really",
    "go",
    "documentation",
    "similar",
    "well",
    "let",
    "go",
    "javascript",
    "objects",
    "going",
    "array",
    "object",
    "instance",
    "methods",
    "going",
    "looking",
    "right",
    "start",
    "pop",
    "actually",
    "already",
    "looked",
    "talked",
    "reading",
    "documentation",
    "going",
    "remove",
    "last",
    "element",
    "array",
    "also",
    "uh",
    "shift",
    "right",
    "going",
    "remove",
    "first",
    "element",
    "array",
    "method",
    "going",
    "using",
    "using",
    "um",
    "push",
    "method",
    "takes",
    "element",
    "uh",
    "element",
    "one",
    "element",
    "adds",
    "end",
    "existing",
    "array",
    "finally",
    "unshift",
    "method",
    "um",
    "somewhere",
    "going",
    "add",
    "element",
    "elements",
    "beginning",
    "array",
    "think",
    "push",
    "method",
    "probably",
    "going",
    "uh",
    "widely",
    "used",
    "let",
    "go",
    "ahead",
    "see",
    "deal",
    "de",
    "make",
    "array",
    "add",
    "three",
    "elements",
    "um",
    "maybe",
    "let",
    "go",
    "ahead",
    "put",
    "gap",
    "skip",
    "four",
    "put",
    "five",
    "six",
    "something",
    "like",
    "right",
    "array",
    "wanted",
    "um",
    "basically",
    "add",
    "four",
    "basically",
    "array",
    "pop",
    "going",
    "take",
    "six",
    "returns",
    "six",
    "value",
    "six",
    "um",
    "six",
    "elements",
    "maybe",
    "maybe",
    "return",
    "element",
    "removed",
    "array",
    "sorry",
    "right",
    "anyways",
    "go",
    "need",
    "remove",
    "one",
    "array",
    "looks",
    "like",
    "1",
    "2",
    "3",
    "push",
    "four",
    "five",
    "six",
    "end",
    "back",
    "started",
    "time",
    "uh",
    "numbers",
    "order",
    "course",
    "add",
    "zero",
    "beginning",
    "say",
    "array",
    "unshift",
    "put",
    "zero",
    "array",
    "zero",
    "six",
    "kind",
    "get",
    "idea",
    "works",
    "whole",
    "lot",
    "right",
    "let",
    "move",
    "slice",
    "method",
    "one",
    "going",
    "come",
    "handy",
    "um",
    "need",
    "make",
    "copy",
    "array",
    "going",
    "apparent",
    "useful",
    "right",
    "start",
    "getting",
    "um",
    "programming",
    "uh",
    "writing",
    "code",
    "either",
    "angular",
    "react",
    "uh",
    "view",
    "js",
    "something",
    "like",
    "concept",
    "call",
    "state",
    "basically",
    "um",
    "data",
    "flows",
    "front",
    "end",
    "application",
    "user",
    "updates",
    "profile",
    "whatever",
    "data",
    "update",
    "affects",
    "another",
    "part",
    "application",
    "um",
    "state",
    "makes",
    "changes",
    "propagated",
    "across",
    "entire",
    "application",
    "dealing",
    "state",
    "often",
    "deal",
    "dealing",
    "im",
    "mutable",
    "objects",
    "things",
    "changed",
    "making",
    "copy",
    "data",
    "um",
    "putting",
    "state",
    "going",
    "extremely",
    "useful",
    "use",
    "slice",
    "method",
    "let",
    "look",
    "um",
    "documentation",
    "go",
    "slice",
    "um",
    "says",
    "returns",
    "shallow",
    "copy",
    "portion",
    "array",
    "says",
    "say",
    "shallow",
    "means",
    "like",
    "nested",
    "objects",
    "arrays",
    "going",
    "uh",
    "pick",
    "gets",
    "like",
    "first",
    "layer",
    "whatever",
    "um",
    "need",
    "advanced",
    "method",
    "like",
    "deep",
    "copy",
    "object",
    "talk",
    "little",
    "bit",
    "um",
    "later",
    "lesson",
    "basically",
    "taking",
    "two",
    "optional",
    "parameters",
    "um",
    "supply",
    "sort",
    "parameters",
    "going",
    "let",
    "see",
    "says",
    "put",
    "parameters",
    "going",
    "create",
    "copy",
    "entire",
    "thing",
    "otherwise",
    "create",
    "copy",
    "specific",
    "part",
    "array",
    "let",
    "see",
    "works",
    "array",
    "already",
    "right",
    "um",
    "let",
    "say",
    "wanted",
    "take",
    "two",
    "three",
    "four",
    "something",
    "like",
    "already",
    "got",
    "array",
    "screen",
    "let",
    "say",
    "wanted",
    "make",
    "copy",
    "entire",
    "thing",
    "say",
    "copy",
    "array",
    "going",
    "array",
    "slice",
    "need",
    "pass",
    "parameters",
    "cuz",
    "want",
    "entire",
    "thing",
    "copy",
    "array",
    "going",
    "perfect",
    "copy",
    "compare",
    "copy",
    "array",
    "versus",
    "array",
    "going",
    "equal",
    "say",
    "loosely",
    "concept",
    "talked",
    "uh",
    "looked",
    "javascript",
    "operators",
    "previous",
    "lesson",
    "right",
    "wanted",
    "grab",
    "like",
    "specific",
    "part",
    "array",
    "another",
    "copy",
    "want",
    "grab",
    "um",
    "everything",
    "starting",
    "three",
    "till",
    "end",
    "array",
    "might",
    "say",
    "slice",
    "want",
    "give",
    "index",
    "uh",
    "zero",
    "one",
    "two",
    "want",
    "start",
    "three",
    "want",
    "give",
    "index",
    "three",
    "another",
    "copy",
    "going",
    "equal",
    "3456",
    "uh",
    "quick",
    "overview",
    "slice",
    "method",
    "next",
    "meth",
    "method",
    "dealing",
    "called",
    "splice",
    "confused",
    "slice",
    "go",
    "documentation",
    "click",
    "splice",
    "say",
    "method",
    "changes",
    "contents",
    "array",
    "removing",
    "replacing",
    "existing",
    "elements",
    "adding",
    "new",
    "elements",
    "place",
    "words",
    "useful",
    "unshift",
    "push",
    "two",
    "methods",
    "learned",
    "sufficient",
    "want",
    "actually",
    "replace",
    "something",
    "middle",
    "array",
    "rather",
    "beginning",
    "end",
    "want",
    "look",
    "function",
    "signature",
    "one",
    "kind",
    "interesting",
    "lot",
    "going",
    "required",
    "parameter",
    "start",
    "index",
    "want",
    "start",
    "changing",
    "array",
    "comma",
    "says",
    "going",
    "new",
    "parameter",
    "want",
    "delete",
    "count",
    "basically",
    "saying",
    "want",
    "start",
    "specific",
    "index",
    "need",
    "specify",
    "many",
    "items",
    "array",
    "aray",
    "going",
    "delete",
    "starting",
    "index",
    "provide",
    "entirely",
    "optional",
    "says",
    "omitted",
    "value",
    "equal",
    "larger",
    "array",
    "length",
    "minus",
    "start",
    "need",
    "get",
    "elements",
    "start",
    "end",
    "array",
    "deleted",
    "let",
    "say",
    "know",
    "specified",
    "start",
    "index",
    "one",
    "going",
    "basically",
    "delete",
    "everything",
    "except",
    "first",
    "element",
    "um",
    "next",
    "part",
    "interesting",
    "brackets",
    "item",
    "one",
    "item",
    "two",
    "dot",
    "dot",
    "dot",
    "basically",
    "saying",
    "infinite",
    "number",
    "parameters",
    "um",
    "replace",
    "looks",
    "like",
    "come",
    "item",
    "one",
    "two",
    "dot",
    "dot",
    "dot",
    "says",
    "elements",
    "add",
    "array",
    "beginning",
    "start",
    "specify",
    "elements",
    "splice",
    "remove",
    "elements",
    "array",
    "kind",
    "changes",
    "behavior",
    "entire",
    "method",
    "go",
    "removing",
    "elements",
    "adding",
    "elements",
    "array",
    "see",
    "reading",
    "documentation",
    "helpful",
    "case",
    "going",
    "go",
    "basic",
    "example",
    "say",
    "array",
    "going",
    "equal",
    "1",
    "2",
    "3",
    "put",
    "string",
    "belong",
    "four",
    "five",
    "six",
    "right",
    "wanted",
    "well",
    "hold",
    "cleared",
    "screen",
    "refresh",
    "tried",
    "redec",
    "array",
    "variable",
    "let",
    "try",
    "1",
    "2",
    "three",
    "four",
    "five",
    "six",
    "wanted",
    "remove",
    "string",
    "array",
    "splice",
    "want",
    "specify",
    "want",
    "start",
    "index",
    "three",
    "0",
    "1",
    "2",
    "three",
    "want",
    "start",
    "index",
    "three",
    "want",
    "remove",
    "single",
    "element",
    "want",
    "put",
    "one",
    "right",
    "end",
    "put",
    "um",
    "let",
    "say",
    "want",
    "replace",
    "case",
    "want",
    "remove",
    "string",
    "replace",
    "something",
    "maybe",
    "something",
    "put",
    "something",
    "right",
    "returns",
    "uh",
    "item",
    "removed",
    "new",
    "array",
    "replacement",
    "value",
    "point",
    "think",
    "good",
    "time",
    "briefly",
    "mention",
    "um",
    "fact",
    "mutating",
    "array",
    "right",
    "looked",
    "string",
    "methods",
    "none",
    "methods",
    "actually",
    "uh",
    "modified",
    "existing",
    "string",
    "array",
    "primitive",
    "value",
    "string",
    "primitive",
    "value",
    "reason",
    "immutable",
    "change",
    "array",
    "mutable",
    "means",
    "uh",
    "methods",
    "using",
    "actually",
    "editing",
    "array",
    "um",
    "basically",
    "create",
    "copies",
    "could",
    "use",
    "slice",
    "method",
    "though",
    "right",
    "next",
    "one",
    "dealing",
    "going",
    "find",
    "index",
    "index",
    "method",
    "find",
    "index",
    "returns",
    "index",
    "first",
    "element",
    "one",
    "satis",
    "satisfies",
    "provided",
    "testing",
    "function",
    "right",
    "start",
    "getting",
    "callback",
    "functions",
    "talked",
    "understand",
    "callback",
    "functions",
    "sure",
    "go",
    "prior",
    "part",
    "lesson",
    "really",
    "uh",
    "wrap",
    "head",
    "around",
    "moving",
    "forward",
    "going",
    "dealing",
    "pretty",
    "much",
    "every",
    "array",
    "method",
    "anyways",
    "says",
    "match",
    "testing",
    "function",
    "match",
    "element",
    "going",
    "get",
    "value",
    "negative",
    "one",
    "know",
    "method",
    "returns",
    "us",
    "nega",
    "trying",
    "match",
    "exist",
    "array",
    "otherwise",
    "get",
    "index",
    "uh",
    "grab",
    "kind",
    "similar",
    "find",
    "index",
    "kind",
    "similar",
    "index",
    "method",
    "come",
    "grab",
    "index",
    "method",
    "going",
    "return",
    "first",
    "index",
    "given",
    "element",
    "found",
    "thing",
    "know",
    "callback",
    "function",
    "matches",
    "anything",
    "searching",
    "specific",
    "string",
    "um",
    "return",
    "ne",
    "present",
    "little",
    "bit",
    "less",
    "powerful",
    "like",
    "said",
    "uh",
    "callback",
    "functions",
    "enable",
    "reusability",
    "case",
    "search",
    "raw",
    "string",
    "find",
    "index",
    "specify",
    "entire",
    "testing",
    "function",
    "case",
    "grasp",
    "head",
    "around",
    "callback",
    "functions",
    "find",
    "index",
    "going",
    "little",
    "bit",
    "powerful",
    "let",
    "see",
    "come",
    "good",
    "example",
    "use",
    "got",
    "index",
    "method",
    "array",
    "equal",
    "right",
    "could",
    "say",
    "array",
    "index",
    "maybe",
    "want",
    "look",
    "value",
    "going",
    "give",
    "us",
    "index",
    "three",
    "could",
    "could",
    "basically",
    "say",
    "okay",
    "want",
    "get",
    "uh",
    "value",
    "say",
    "array",
    "use",
    "bracket",
    "notation",
    "obviously",
    "pass",
    "index",
    "find",
    "index",
    "kind",
    "uh",
    "circular",
    "trying",
    "show",
    "might",
    "used",
    "pass",
    "actually",
    "get",
    "value",
    "previously",
    "looked",
    "index",
    "right",
    "actually",
    "getting",
    "value",
    "returned",
    "used",
    "index",
    "grabbed",
    "array",
    "right",
    "use",
    "index",
    "let",
    "uh",
    "talk",
    "might",
    "use",
    "find",
    "index",
    "method",
    "little",
    "bit",
    "powerful",
    "search",
    "complex",
    "array",
    "um",
    "like",
    "obviously",
    "got",
    "lot",
    "got",
    "objects",
    "two",
    "properties",
    "first",
    "name",
    "last",
    "name",
    "tried",
    "use",
    "uh",
    "index",
    "method",
    "complex",
    "array",
    "used",
    "index",
    "started",
    "putting",
    "object",
    "typing",
    "first",
    "name",
    "um",
    "equals",
    "bob",
    "forth",
    "going",
    "get",
    "match",
    "never",
    "match",
    "ca",
    "kind",
    "uh",
    "equality",
    "comparison",
    "use",
    "find",
    "index",
    "going",
    "return",
    "us",
    "index",
    "first",
    "match",
    "identified",
    "within",
    "array",
    "let",
    "say",
    "want",
    "identify",
    "um",
    "want",
    "identify",
    "first",
    "item",
    "array",
    "last",
    "name",
    "uh",
    "equal",
    "smith",
    "obviously",
    "last",
    "um",
    "value",
    "would",
    "0o",
    "1",
    "2",
    "third",
    "index",
    "expect",
    "index",
    "three",
    "returned",
    "expects",
    "argument",
    "go",
    "find",
    "index",
    "see",
    "uh",
    "need",
    "return",
    "call",
    "back",
    "call",
    "back",
    "going",
    "couple",
    "uh",
    "arguments",
    "uh",
    "use",
    "let",
    "look",
    "real",
    "quick",
    "callback",
    "element",
    "current",
    "element",
    "processed",
    "array",
    "new",
    "us",
    "index",
    "array",
    "probably",
    "need",
    "original",
    "uh",
    "array",
    "looking",
    "probably",
    "need",
    "well",
    "um",
    "finally",
    "uh",
    "another",
    "argument",
    "call",
    "back",
    "says",
    "optional",
    "object",
    "use",
    "executing",
    "call",
    "back",
    "talked",
    "um",
    "keyword",
    "yet",
    "going",
    "worry",
    "right",
    "need",
    "pass",
    "call",
    "back",
    "let",
    "go",
    "ahead",
    "populate",
    "array",
    "item",
    "going",
    "use",
    "could",
    "passed",
    "index",
    "original",
    "array",
    "need",
    "case",
    "since",
    "searching",
    "anything",
    "equal",
    "smith",
    "say",
    "array",
    "item",
    "last",
    "name",
    "equal",
    "uh",
    "smith",
    "right",
    "going",
    "return",
    "us",
    "value",
    "three",
    "index",
    "first",
    "element",
    "smith",
    "happens",
    "last",
    "uh",
    "object",
    "john",
    "doe",
    "see",
    "powerful",
    "compared",
    "index",
    "method",
    "um",
    "lot",
    "things",
    "said",
    "overview",
    "method",
    "next",
    "method",
    "looking",
    "map",
    "method",
    "already",
    "looked",
    "documentation",
    "little",
    "bit",
    "earlier",
    "lesson",
    "let",
    "look",
    "um",
    "method",
    "kind",
    "used",
    "prove",
    "reusability",
    "thing",
    "um",
    "basically",
    "look",
    "parameters",
    "put",
    "says",
    "callback",
    "function",
    "similar",
    "um",
    "previous",
    "method",
    "looked",
    "arg",
    "covered",
    "anything",
    "going",
    "get",
    "basically",
    "remember",
    "transformation",
    "function",
    "going",
    "loop",
    "array",
    "per",
    "uh",
    "perform",
    "transformation",
    "according",
    "callback",
    "function",
    "element",
    "array",
    "let",
    "consider",
    "array",
    "right",
    "blog",
    "posts",
    "database",
    "case",
    "uncategorized",
    "wanted",
    "return",
    "new",
    "array",
    "new",
    "array",
    "category",
    "going",
    "set",
    "something",
    "like",
    "web",
    "development",
    "well",
    "use",
    "map",
    "method",
    "course",
    "could",
    "know",
    "type",
    "say",
    "blog",
    "post",
    "database",
    "go",
    "zero",
    "type",
    "category",
    "set",
    "equal",
    "something",
    "going",
    "get",
    "really",
    "clunky",
    "slow",
    "need",
    "say",
    "blog",
    "post",
    "database",
    "map",
    "pass",
    "map",
    "function",
    "going",
    "pass",
    "array",
    "item",
    "go",
    "item",
    "first",
    "thing",
    "need",
    "need",
    "modify",
    "actual",
    "property",
    "need",
    "return",
    "um",
    "item",
    "full",
    "say",
    "array",
    "item",
    "category",
    "equals",
    "web",
    "development",
    "right",
    "modified",
    "individual",
    "array",
    "items",
    "category",
    "property",
    "going",
    "return",
    "array",
    "item",
    "modified",
    "right",
    "press",
    "enter",
    "see",
    "map",
    "function",
    "returns",
    "following",
    "array",
    "case",
    "category",
    "updated",
    "properties",
    "would",
    "really",
    "useful",
    "function",
    "um",
    "real",
    "world",
    "actually",
    "used",
    "um",
    "something",
    "similar",
    "example",
    "uh",
    "app",
    "super",
    "realistic",
    "super",
    "helpful",
    "save",
    "lot",
    "time",
    "next",
    "lineup",
    "method",
    "point",
    "looking",
    "arrays",
    "uh",
    "looping",
    "arrays",
    "one",
    "specific",
    "way",
    "array",
    "couple",
    "values",
    "write",
    "loop",
    "initialize",
    "zero",
    "go",
    "uh",
    "less",
    "array",
    "length",
    "increment",
    "drop",
    "loop",
    "going",
    "something",
    "maybe",
    "going",
    "print",
    "uh",
    "element",
    "array",
    "go",
    "print",
    "sorts",
    "stuff",
    "within",
    "code",
    "block",
    "another",
    "way",
    "write",
    "loop",
    "talked",
    "yet",
    "four",
    "um",
    "method",
    "array",
    "would",
    "would",
    "um",
    "say",
    "array",
    "4",
    "going",
    "happen",
    "callback",
    "function",
    "gives",
    "us",
    "array",
    "item",
    "drop",
    "function",
    "array",
    "item",
    "right",
    "simple",
    "way",
    "replicate",
    "array",
    "also",
    "get",
    "index",
    "looked",
    "documentation",
    "uh",
    "method",
    "going",
    "say",
    "call",
    "back",
    "looking",
    "going",
    "pass",
    "us",
    "current",
    "value",
    "going",
    "pass",
    "us",
    "index",
    "original",
    "array",
    "signature",
    "right",
    "function",
    "signature",
    "going",
    "similar",
    "pretty",
    "much",
    "advanced",
    "array",
    "methods",
    "case",
    "wanted",
    "take",
    "uh",
    "loop",
    "let",
    "clear",
    "screen",
    "array",
    "looking",
    "wanted",
    "loop",
    "use",
    "four",
    "uh",
    "want",
    "array",
    "item",
    "grab",
    "index",
    "case",
    "two",
    "things",
    "work",
    "say",
    "array",
    "item",
    "enter",
    "index",
    "see",
    "printing",
    "uh",
    "value",
    "one",
    "zero",
    "index",
    "value",
    "two",
    "one",
    "index",
    "value",
    "three",
    "number",
    "two",
    "index",
    "really",
    "useful",
    "um",
    "little",
    "bit",
    "quicker",
    "loop",
    "couple",
    "differences",
    "nothing",
    "need",
    "talk",
    "right",
    "find",
    "start",
    "programming",
    "try",
    "point",
    "within",
    "series",
    "stumble",
    "upon",
    "next",
    "method",
    "talking",
    "includes",
    "method",
    "going",
    "help",
    "find",
    "um",
    "single",
    "element",
    "determine",
    "whether",
    "exists",
    "within",
    "array",
    "multiple",
    "ways",
    "show",
    "couple",
    "different",
    "ways",
    "uh",
    "kind",
    "prove",
    "includes",
    "method",
    "might",
    "best",
    "lot",
    "cases",
    "let",
    "say",
    "following",
    "array",
    "colors",
    "want",
    "figure",
    "whether",
    "um",
    "color",
    "orange",
    "exist",
    "within",
    "array",
    "using",
    "code",
    "couple",
    "ways",
    "one",
    "way",
    "use",
    "basically",
    "um",
    "accustomed",
    "seeing",
    "going",
    "initialize",
    "variable",
    "right",
    "say",
    "false",
    "looping",
    "array",
    "colors",
    "equals",
    "orange",
    "set",
    "variable",
    "true",
    "figure",
    "orange",
    "exists",
    "true",
    "one",
    "way",
    "simpler",
    "way",
    "method",
    "could",
    "say",
    "um",
    "something",
    "like",
    "already",
    "got",
    "orange",
    "exist",
    "um",
    "variable",
    "loop",
    "way",
    "set",
    "true",
    "say",
    "orange",
    "exist",
    "going",
    "equal",
    "true",
    "even",
    "simpler",
    "way",
    "using",
    "includes",
    "method",
    "would",
    "say",
    "colors",
    "includes",
    "type",
    "orange",
    "going",
    "tell",
    "us",
    "true",
    "exist",
    "array",
    "see",
    "lot",
    "easier",
    "use",
    "method",
    "like",
    "go",
    "loops",
    "know",
    "store",
    "value",
    "variable",
    "stuff",
    "like",
    "connect",
    "dots",
    "show",
    "variety",
    "ways",
    "solve",
    "problems",
    "within",
    "uh",
    "coding",
    "could",
    "also",
    "used",
    "index",
    "method",
    "would",
    "said",
    "colors",
    "say",
    "index",
    "type",
    "orange",
    "return",
    "going",
    "give",
    "index",
    "three",
    "basically",
    "would",
    "say",
    "statement",
    "right",
    "say",
    "equal",
    "item",
    "exist",
    "array",
    "returns",
    "ne",
    "find",
    "know",
    "exist",
    "another",
    "way",
    "solve",
    "hopefully",
    "seen",
    "case",
    "four",
    "different",
    "ways",
    "went",
    "something",
    "like",
    "checking",
    "whether",
    "something",
    "exists",
    "array",
    "next",
    "method",
    "going",
    "use",
    "filter",
    "probably",
    "um",
    "frequent",
    "method",
    "uh",
    "one",
    "use",
    "probably",
    "know",
    "sure",
    "um",
    "one",
    "map",
    "probably",
    "two",
    "would",
    "use",
    "within",
    "code",
    "filter",
    "method",
    "exactly",
    "think",
    "would",
    "filters",
    "different",
    "results",
    "let",
    "say",
    "go",
    "amazon",
    "go",
    "orders",
    "page",
    "might",
    "look",
    "something",
    "like",
    "know",
    "fictitious",
    "actually",
    "data",
    "model",
    "going",
    "look",
    "like",
    "see",
    "maybe",
    "different",
    "properties",
    "ers",
    "array",
    "going",
    "represent",
    "orders",
    "know",
    "go",
    "amazon",
    "click",
    "buttons",
    "filter",
    "orders",
    "date",
    "um",
    "whether",
    "open",
    "open",
    "whether",
    "cancelled",
    "whether",
    "digital",
    "filter",
    "method",
    "basically",
    "going",
    "return",
    "us",
    "array",
    "uh",
    "filtered",
    "based",
    "callback",
    "function",
    "provide",
    "array",
    "see",
    "digital",
    "property",
    "could",
    "find",
    "uh",
    "digital",
    "products",
    "uh",
    "could",
    "save",
    "array",
    "saying",
    "digital",
    "orders",
    "set",
    "equal",
    "orders",
    "filter",
    "pass",
    "callback",
    "function",
    "receives",
    "array",
    "item",
    "pass",
    "function",
    "return",
    "anything",
    "digital",
    "say",
    "array",
    "item",
    "digital",
    "boolean",
    "true",
    "going",
    "return",
    "return",
    "true",
    "value",
    "going",
    "included",
    "resultant",
    "array",
    "digital",
    "orders",
    "print",
    "see",
    "two",
    "says",
    "digital",
    "true",
    "know",
    "match",
    "correctly",
    "couple",
    "filters",
    "could",
    "could",
    "paste",
    "say",
    "okay",
    "want",
    "digital",
    "cancelled",
    "orders",
    "returning",
    "condition",
    "says",
    "want",
    "check",
    "digital",
    "canceled",
    "case",
    "print",
    "array",
    "digital",
    "canell",
    "orders",
    "one",
    "uh",
    "see",
    "digital",
    "true",
    "canceled",
    "also",
    "true",
    "super",
    "useful",
    "method",
    "often",
    "used",
    "front",
    "end",
    "like",
    "said",
    "orders",
    "page",
    "amazon",
    "click",
    "button",
    "might",
    "execute",
    "uh",
    "filter",
    "method",
    "show",
    "user",
    "whatever",
    "filtered",
    "really",
    "use",
    "use",
    "time",
    "um",
    "front",
    "end",
    "even",
    "use",
    "back",
    "end",
    "little",
    "bit",
    "well",
    "saved",
    "hardest",
    "last",
    "um",
    "course",
    "anticipate",
    "fact",
    "talking",
    "uh",
    "long",
    "period",
    "time",
    "going",
    "go",
    "ahead",
    "try",
    "anyways",
    "reduce",
    "method",
    "look",
    "reduce",
    "method",
    "um",
    "within",
    "documentation",
    "going",
    "give",
    "us",
    "interesting",
    "um",
    "callback",
    "function",
    "instead",
    "array",
    "item",
    "index",
    "original",
    "array",
    "get",
    "passed",
    "callback",
    "going",
    "give",
    "us",
    "interesting",
    "parameters",
    "gives",
    "us",
    "accumulator",
    "gives",
    "us",
    "current",
    "value",
    "gives",
    "us",
    "optional",
    "parameters",
    "index",
    "original",
    "array",
    "finally",
    "pass",
    "uh",
    "addition",
    "call",
    "back",
    "initial",
    "value",
    "want",
    "initialize",
    "accumulator",
    "going",
    "go",
    "going",
    "put",
    "terms",
    "think",
    "kind",
    "recognize",
    "let",
    "go",
    "ahead",
    "paste",
    "code",
    "probably",
    "used",
    "seeing",
    "wanted",
    "find",
    "sum",
    "array",
    "wanted",
    "add",
    "numbers",
    "together",
    "would",
    "25",
    "coding",
    "challenges",
    "practiced",
    "previous",
    "lesson",
    "case",
    "initialize",
    "sum",
    "variable",
    "equal",
    "zero",
    "start",
    "count",
    "zero",
    "loop",
    "array",
    "element",
    "array",
    "add",
    "sum",
    "using",
    "plus",
    "plus",
    "equals",
    "operator",
    "end",
    "conso",
    "log",
    "sum",
    "going",
    "equal",
    "99",
    "uh",
    "sum",
    "values",
    "array",
    "want",
    "point",
    "fact",
    "sum",
    "variable",
    "essentially",
    "accumulating",
    "value",
    "values",
    "basically",
    "called",
    "accumulator",
    "go",
    "back",
    "documentation",
    "shows",
    "first",
    "argument",
    "call",
    "back",
    "accumulator",
    "think",
    "sum",
    "variable",
    "wrote",
    "right",
    "going",
    "right",
    "going",
    "rewrite",
    "code",
    "using",
    "reduce",
    "method",
    "first",
    "thing",
    "write",
    "reducer",
    "callback",
    "function",
    "callback",
    "function",
    "going",
    "going",
    "accumulate",
    "value",
    "uh",
    "look",
    "documentation",
    "going",
    "first",
    "take",
    "accumulator",
    "parameter",
    "basically",
    "going",
    "act",
    "sum",
    "variable",
    "right",
    "top",
    "defined",
    "like",
    "outside",
    "loop",
    "pass",
    "parameter",
    "callback",
    "array",
    "item",
    "going",
    "another",
    "parameter",
    "others",
    "need",
    "let",
    "go",
    "ahead",
    "use",
    "going",
    "going",
    "return",
    "value",
    "always",
    "return",
    "value",
    "call",
    "back",
    "array",
    "item",
    "case",
    "sum",
    "variable",
    "going",
    "uh",
    "accumulated",
    "course",
    "looping",
    "array",
    "reduce",
    "method",
    "automatically",
    "takes",
    "care",
    "makes",
    "sure",
    "accumulates",
    "value",
    "say",
    "sum",
    "plus",
    "equal",
    "array",
    "item",
    "going",
    "exactly",
    "thing",
    "adding",
    "array",
    "item",
    "within",
    "callback",
    "function",
    "let",
    "define",
    "say",
    "want",
    "result",
    "equal",
    "array",
    "reduce",
    "uh",
    "using",
    "reduce",
    "method",
    "need",
    "pass",
    "reducer",
    "call",
    "back",
    "need",
    "pass",
    "one",
    "thing",
    "go",
    "um",
    "syntax",
    "see",
    "call",
    "back",
    "encompassed",
    "uh",
    "highlight",
    "right",
    "see",
    "highlight",
    "comma",
    "another",
    "uh",
    "parameter",
    "called",
    "initial",
    "value",
    "come",
    "read",
    "initial",
    "value",
    "basically",
    "saying",
    "represent",
    "starting",
    "value",
    "sum",
    "variable",
    "gets",
    "passed",
    "every",
    "iteration",
    "want",
    "start",
    "0o",
    "like",
    "started",
    "sum",
    "zero",
    "press",
    "enter",
    "print",
    "result",
    "going",
    "get",
    "99",
    "done",
    "thing",
    "code",
    "looks",
    "confusing",
    "um",
    "confusing",
    "kind",
    "anchor",
    "uh",
    "simplistic",
    "code",
    "already",
    "written",
    "already",
    "understand",
    "reduce",
    "method",
    "last",
    "thing",
    "want",
    "show",
    "use",
    "basically",
    "uh",
    "get",
    "average",
    "numbers",
    "array",
    "went",
    "practice",
    "problems",
    "um",
    "25",
    "practice",
    "problem",
    "video",
    "previous",
    "lesson",
    "calculate",
    "average",
    "array",
    "believe",
    "course",
    "average",
    "method",
    "array",
    "object",
    "sure",
    "make",
    "whole",
    "lot",
    "sense",
    "use",
    "reduce",
    "method",
    "actually",
    "calculate",
    "average",
    "array",
    "single",
    "line",
    "going",
    "right",
    "going",
    "say",
    "array",
    "reduce",
    "going",
    "course",
    "pass",
    "sum",
    "array",
    "item",
    "writing",
    "thing",
    "written",
    "already",
    "going",
    "one",
    "line",
    "going",
    "take",
    "sum",
    "plus",
    "equal",
    "array",
    "item",
    "right",
    "give",
    "us",
    "right",
    "going",
    "equal",
    "um",
    "course",
    "pass",
    "initial",
    "value",
    "going",
    "give",
    "us",
    "sum",
    "array",
    "divide",
    "total",
    "array",
    "length",
    "uh",
    "retrieved",
    "average",
    "array",
    "way",
    "really",
    "useful",
    "might",
    "take",
    "second",
    "look",
    "code",
    "see",
    "little",
    "bit",
    "confusing",
    "um",
    "oneliner",
    "like",
    "anyways",
    "really",
    "practical",
    "example",
    "something",
    "used",
    "uh",
    "writing",
    "actual",
    "code",
    "right",
    "end",
    "uh",
    "common",
    "array",
    "methods",
    "might",
    "wondering",
    "well",
    "happens",
    "find",
    "operation",
    "method",
    "um",
    "already",
    "built",
    "answer",
    "probably",
    "using",
    "sort",
    "external",
    "library",
    "common",
    "one",
    "uh",
    "us",
    "javascript",
    "developers",
    "going",
    "low",
    "dash",
    "library",
    "type",
    "low",
    "dash",
    "click",
    "modern",
    "javascript",
    "utility",
    "library",
    "delivering",
    "modularity",
    "performance",
    "extras",
    "go",
    "documentation",
    "see",
    "left",
    "top",
    "array",
    "data",
    "type",
    "see",
    "bunch",
    "different",
    "methods",
    "sorts",
    "really",
    "um",
    "interesting",
    "things",
    "limited",
    "set",
    "javascript",
    "objects",
    "developers",
    "low",
    "dash",
    "taken",
    "step",
    "basically",
    "um",
    "created",
    "additional",
    "methods",
    "remember",
    "something",
    "tough",
    "us",
    "comparing",
    "equality",
    "two",
    "objects",
    "go",
    "create",
    "uh",
    "two",
    "objects",
    "say",
    "object",
    "one",
    "set",
    "equal",
    "prop",
    "one",
    "value",
    "right",
    "object",
    "two",
    "want",
    "set",
    "perfectly",
    "equal",
    "right",
    "put",
    "try",
    "compare",
    "going",
    "say",
    "false",
    "going",
    "stay",
    "false",
    "even",
    "use",
    "double",
    "equals",
    "ca",
    "compare",
    "equality",
    "two",
    "objects",
    "wanted",
    "write",
    "function",
    "actually",
    "compares",
    "equality",
    "two",
    "objects",
    "going",
    "take",
    "hundreds",
    "lines",
    "code",
    "use",
    "low",
    "dash",
    "library",
    "actually",
    "look",
    "something",
    "um",
    "let",
    "go",
    "little",
    "bit",
    "method",
    "called",
    "equal",
    "equal",
    "actually",
    "take",
    "two",
    "objects",
    "see",
    "basically",
    "example",
    "came",
    "checks",
    "equal",
    "returns",
    "true",
    "behind",
    "scenes",
    "library",
    "running",
    "hundreds",
    "lines",
    "code",
    "make",
    "comparison",
    "see",
    "extend",
    "functionality",
    "using",
    "external",
    "libraries",
    "let",
    "go",
    "ahead",
    "look",
    "go",
    "documentation",
    "mdn",
    "go",
    "javascript",
    "go",
    "objects",
    "go",
    "math",
    "object",
    "going",
    "see",
    "lot",
    "math",
    "functions",
    "developer",
    "might",
    "saying",
    "well",
    "hey",
    "writing",
    "bunch",
    "finance",
    "applications",
    "probably",
    "need",
    "well",
    "show",
    "seconds",
    "might",
    "useful",
    "right",
    "go",
    "little",
    "bit",
    "different",
    "used",
    "seeing",
    "come",
    "console",
    "talk",
    "like",
    "dates",
    "something",
    "know",
    "make",
    "date",
    "saying",
    "new",
    "date",
    "right",
    "syntax",
    "used",
    "called",
    "constructor",
    "syntax",
    "constru",
    "ing",
    "uh",
    "guess",
    "copy",
    "uh",
    "date",
    "template",
    "object",
    "mean",
    "terms",
    "kind",
    "using",
    "quotations",
    "uh",
    "perfectly",
    "true",
    "kind",
    "get",
    "point",
    "right",
    "way",
    "constructing",
    "object",
    "math",
    "library",
    "see",
    "methods",
    "taking",
    "actual",
    "object",
    "saying",
    "math",
    "executing",
    "method",
    "instead",
    "saying",
    "let",
    "say",
    "date",
    "equals",
    "new",
    "date",
    "say",
    "dat",
    "getet",
    "uh",
    "date",
    "something",
    "like",
    "uh",
    "first",
    "constructing",
    "object",
    "using",
    "method",
    "done",
    "might",
    "say",
    "well",
    "say",
    "uh",
    "math",
    "equals",
    "new",
    "math",
    "press",
    "enter",
    "going",
    "say",
    "math",
    "constructor",
    "well",
    "gets",
    "us",
    "uh",
    "concept",
    "object",
    "oriented",
    "programming",
    "um",
    "math",
    "library",
    "actually",
    "rather",
    "instance",
    "methods",
    "uh",
    "previous",
    "ones",
    "date",
    "object",
    "string",
    "array",
    "first",
    "construct",
    "actual",
    "object",
    "uh",
    "call",
    "methods",
    "top",
    "object",
    "called",
    "instance",
    "instance",
    "object",
    "call",
    "methods",
    "top",
    "math",
    "library",
    "using",
    "static",
    "methods",
    "call",
    "directly",
    "object",
    "pretty",
    "simple",
    "let",
    "go",
    "couple",
    "quick",
    "ones",
    "might",
    "um",
    "know",
    "find",
    "useful",
    "uh",
    "let",
    "see",
    "list",
    "shows",
    "right",
    "let",
    "clear",
    "screen",
    "common",
    "ones",
    "math",
    "pi",
    "going",
    "give",
    "value",
    "pi",
    "um",
    "math",
    "think",
    "ul",
    "constant",
    "something",
    "like",
    "might",
    "something",
    "use",
    "um",
    "start",
    "getting",
    "methods",
    "absolute",
    "method",
    "actually",
    "um",
    "pass",
    "negative",
    "number",
    "get",
    "positive",
    "absolute",
    "value",
    "also",
    "uh",
    "math",
    "sealing",
    "method",
    "going",
    "round",
    "nearest",
    "integer",
    "let",
    "say",
    "pass",
    "math",
    "piy",
    "going",
    "round",
    "nearest",
    "integer",
    "four",
    "likewise",
    "floor",
    "method",
    "take",
    "math",
    "piy",
    "rounds",
    "three",
    "finally",
    "method",
    "put",
    "math",
    "pi",
    "going",
    "round",
    "three",
    "closer",
    "three",
    "four",
    "right",
    "quick",
    "uh",
    "methods",
    "use",
    "also",
    "use",
    "min",
    "max",
    "uh",
    "method",
    "min",
    "pass",
    "couple",
    "numbers",
    "going",
    "give",
    "smallest",
    "number",
    "course",
    "max",
    "opposite",
    "numbers",
    "get",
    "highest",
    "number",
    "right",
    "final",
    "one",
    "going",
    "give",
    "random",
    "number",
    "random",
    "decimal",
    "0o",
    "one",
    "implications",
    "probably",
    "understand",
    "actually",
    "used",
    "get",
    "random",
    "index",
    "array",
    "previous",
    "videos",
    "show",
    "exactly",
    "right",
    "let",
    "decompose",
    "steps",
    "first",
    "let",
    "get",
    "random",
    "number",
    "set",
    "equal",
    "right",
    "going",
    "equal",
    "something",
    "0",
    "one",
    "let",
    "see",
    "equals",
    "right",
    "right",
    "equals",
    "97",
    "right",
    "know",
    "multiply",
    "um",
    "something",
    "zero",
    "one",
    "another",
    "number",
    "going",
    "give",
    "us",
    "whole",
    "number",
    "zero",
    "whatever",
    "number",
    "multiplying",
    "multiply",
    "random",
    "number",
    "times",
    "5",
    "going",
    "get",
    "number",
    "0",
    "5",
    "use",
    "say",
    "want",
    "larger",
    "number",
    "call",
    "say",
    "equal",
    "random",
    "number",
    "um",
    "times",
    "know",
    "say",
    "100",
    "get",
    "0",
    "100",
    "finally",
    "going",
    "decimal",
    "look",
    "wanted",
    "bring",
    "whole",
    "number",
    "say",
    "math",
    "floor",
    "pass",
    "larger",
    "number",
    "97",
    "right",
    "combine",
    "knowledge",
    "uh",
    "length",
    "array",
    "get",
    "um",
    "range",
    "random",
    "numbers",
    "within",
    "bounds",
    "array",
    "let",
    "define",
    "array",
    "real",
    "quick",
    "say",
    "values",
    "blah",
    "blah",
    "right",
    "got",
    "four",
    "values",
    "um",
    "length",
    "array",
    "four",
    "get",
    "random",
    "index",
    "array",
    "say",
    "random",
    "index",
    "setting",
    "equal",
    "right",
    "say",
    "math",
    "floor",
    "know",
    "need",
    "whole",
    "number",
    "want",
    "pass",
    "math",
    "random",
    "number",
    "0er",
    "one",
    "want",
    "multiply",
    "array",
    "length",
    "get",
    "zero",
    "length",
    "array",
    "always",
    "going",
    "give",
    "us",
    "valid",
    "index",
    "right",
    "set",
    "equal",
    "press",
    "enter",
    "take",
    "array",
    "pass",
    "random",
    "index",
    "going",
    "give",
    "us",
    "random",
    "value",
    "array",
    "next",
    "talk",
    "air",
    "types",
    "within",
    "javascript",
    "going",
    "combine",
    "data",
    "types",
    "quite",
    "talked",
    "um",
    "point",
    "right",
    "air",
    "handling",
    "java",
    "javascript",
    "something",
    "beginner",
    "going",
    "um",
    "find",
    "value",
    "likely",
    "know",
    "first",
    "started",
    "could",
    "understand",
    "need",
    "handle",
    "errors",
    "within",
    "code",
    "really",
    "important",
    "implications",
    "external",
    "library",
    "calling",
    "maybe",
    "fetching",
    "data",
    "external",
    "database",
    "um",
    "something",
    "like",
    "know",
    "behavior",
    "external",
    "code",
    "going",
    "could",
    "give",
    "air",
    "matter",
    "let",
    "say",
    "building",
    "app",
    "similar",
    "say",
    "instagram",
    "user",
    "maybe",
    "got",
    "spotty",
    "internet",
    "time",
    "press",
    "post",
    "instagram",
    "photo",
    "pressing",
    "post",
    "internet",
    "goes",
    "right",
    "clearly",
    "code",
    "going",
    "run",
    "going",
    "fail",
    "want",
    "handle",
    "correctly",
    "try",
    "post",
    "got",
    "internet",
    "probably",
    "going",
    "see",
    "message",
    "screen",
    "says",
    "something",
    "like",
    "internet",
    "please",
    "try",
    "connected",
    "proper",
    "air",
    "handling",
    "detected",
    "something",
    "went",
    "wrong",
    "given",
    "user",
    "meaningful",
    "message",
    "um",
    "handle",
    "errors",
    "know",
    "ran",
    "code",
    "know",
    "threw",
    "caution",
    "wind",
    "said",
    "hope",
    "works",
    "well",
    "case",
    "user",
    "post",
    "post",
    "photo",
    "internet",
    "goes",
    "whole",
    "instagram",
    "app",
    "going",
    "crash",
    "obviously",
    "want",
    "happen",
    "terrible",
    "user",
    "experience",
    "value",
    "air",
    "handling",
    "javascript",
    "three",
    "main",
    "types",
    "airs",
    "actually",
    "go",
    "um",
    "documentation",
    "javascript",
    "objects",
    "go",
    "air",
    "going",
    "call",
    "b",
    "class",
    "like",
    "know",
    "parent",
    "air",
    "type",
    "within",
    "air",
    "type",
    "several",
    "um",
    "subtypes",
    "erors",
    "might",
    "see",
    "three",
    "consider",
    "common",
    "probably",
    "see",
    "often",
    "ones",
    "going",
    "talk",
    "video",
    "three",
    "going",
    "talk",
    "going",
    "reference",
    "air",
    "syntax",
    "air",
    "type",
    "air",
    "going",
    "walk",
    "couple",
    "situations",
    "might",
    "encounter",
    "explain",
    "like",
    "finally",
    "going",
    "talk",
    "actually",
    "handle",
    "error",
    "javascript",
    "first",
    "one",
    "going",
    "reference",
    "let",
    "click",
    "reference",
    "error",
    "says",
    "going",
    "represent",
    "error",
    "variable",
    "trying",
    "referenced",
    "basically",
    "right",
    "good",
    "example",
    "variable",
    "defined",
    "try",
    "maybe",
    "print",
    "screen",
    "use",
    "let",
    "define",
    "variable",
    "set",
    "equal",
    "20",
    "try",
    "reference",
    "typing",
    "repple",
    "console",
    "going",
    "give",
    "us",
    "value",
    "type",
    "um",
    "another",
    "variable",
    "press",
    "enter",
    "going",
    "say",
    "uncaught",
    "uncaught",
    "reference",
    "error",
    "another",
    "variable",
    "define",
    "think",
    "referencing",
    "basically",
    "trying",
    "find",
    "reference",
    "computer",
    "memory",
    "variable",
    "declared",
    "yet",
    "obviously",
    "exist",
    "reference",
    "lookup",
    "err",
    "basics",
    "reference",
    "error",
    "syntax",
    "error",
    "next",
    "one",
    "let",
    "look",
    "um",
    "go",
    "back",
    "main",
    "eror",
    "page",
    "go",
    "syntax",
    "error",
    "writing",
    "invalid",
    "javascript",
    "one",
    "hard",
    "replicate",
    "write",
    "invalid",
    "javascript",
    "um",
    "let",
    "say",
    "write",
    "object",
    "set",
    "equal",
    "right",
    "say",
    "prop",
    "one",
    "value",
    "put",
    "semicolon",
    "end",
    "enter",
    "another",
    "value",
    "put",
    "another",
    "semicolon",
    "semicolon",
    "end",
    "going",
    "give",
    "us",
    "syntax",
    "error",
    "semicolons",
    "right",
    "need",
    "commas",
    "semicolons",
    "wrote",
    "invalid",
    "javascript",
    "got",
    "syntax",
    "erir",
    "one",
    "pretty",
    "easy",
    "last",
    "one",
    "type",
    "er",
    "one",
    "little",
    "bit",
    "confusing",
    "let",
    "look",
    "real",
    "quick",
    "go",
    "back",
    "main",
    "documentation",
    "go",
    "type",
    "air",
    "going",
    "say",
    "type",
    "air",
    "represents",
    "air",
    "operation",
    "could",
    "performed",
    "know",
    "variable",
    "data",
    "type",
    "operation",
    "something",
    "might",
    "think",
    "going",
    "throw",
    "kind",
    "air",
    "know",
    "adding",
    "two",
    "objects",
    "together",
    "let",
    "say",
    "object",
    "one",
    "going",
    "set",
    "equal",
    "uh",
    "know",
    "say",
    "20",
    "come",
    "another",
    "object",
    "totally",
    "arbitrary",
    "making",
    "examples",
    "said",
    "object",
    "one",
    "plus",
    "object",
    "two",
    "would",
    "think",
    "instead",
    "returning",
    "string",
    "like",
    "meaningless",
    "object",
    "uh",
    "notation",
    "would",
    "actually",
    "get",
    "uh",
    "type",
    "trying",
    "something",
    "um",
    "ca",
    "done",
    "ca",
    "add",
    "two",
    "objects",
    "together",
    "like",
    "uh",
    "integers",
    "numbers",
    "going",
    "get",
    "type",
    "air",
    "trying",
    "um",
    "pretty",
    "much",
    "call",
    "method",
    "wrong",
    "data",
    "type",
    "let",
    "say",
    "number",
    "right",
    "set",
    "equal",
    "20",
    "number",
    "going",
    "say",
    "two",
    "uppercase",
    "know",
    "earlier",
    "video",
    "two",
    "uppercase",
    "method",
    "attached",
    "string",
    "object",
    "number",
    "object",
    "case",
    "get",
    "type",
    "air",
    "function",
    "might",
    "also",
    "happen",
    "um",
    "objects",
    "property",
    "object",
    "function",
    "tried",
    "call",
    "like",
    "call",
    "function",
    "going",
    "give",
    "us",
    "type",
    "eror",
    "prop",
    "one",
    "function",
    "type",
    "air",
    "last",
    "thing",
    "talk",
    "actual",
    "air",
    "handling",
    "talked",
    "important",
    "want",
    "give",
    "user",
    "um",
    "correct",
    "message",
    "know",
    "run",
    "air",
    "also",
    "want",
    "application",
    "completely",
    "crash",
    "every",
    "time",
    "air",
    "happens",
    "happens",
    "time",
    "code",
    "use",
    "something",
    "called",
    "try",
    "catch",
    "block",
    "first",
    "part",
    "put",
    "um",
    "word",
    "try",
    "put",
    "two",
    "brackets",
    "enter",
    "whatever",
    "code",
    "goes",
    "brackets",
    "going",
    "um",
    "checked",
    "errs",
    "air",
    "going",
    "throw",
    "air",
    "send",
    "um",
    "catch",
    "block",
    "let",
    "write",
    "code",
    "actually",
    "throws",
    "air",
    "let",
    "say",
    "example",
    "number",
    "try",
    "make",
    "number",
    "uppercase",
    "obviously",
    "invalid",
    "know",
    "going",
    "throw",
    "air",
    "within",
    "tri",
    "block",
    "going",
    "pass",
    "air",
    "going",
    "thrown",
    "air",
    "going",
    "um",
    "populated",
    "new",
    "air",
    "object",
    "could",
    "anything",
    "could",
    "make",
    "e",
    "could",
    "make",
    "air",
    "er",
    "r",
    "could",
    "make",
    "air",
    "matter",
    "parameter",
    "like",
    "seen",
    "let",
    "enter",
    "catch",
    "block",
    "actually",
    "check",
    "see",
    "erir",
    "going",
    "console",
    "log",
    "cu",
    "might",
    "get",
    "confused",
    "like",
    "okay",
    "happened",
    "let",
    "go",
    "ahead",
    "um",
    "actually",
    "first",
    "let",
    "let",
    "cheat",
    "real",
    "quick",
    "going",
    "put",
    "var",
    "use",
    "code",
    "block",
    "um",
    "let",
    "press",
    "enter",
    "see",
    "nothing",
    "errors",
    "thrown",
    "reason",
    "invalid",
    "code",
    "got",
    "caught",
    "run",
    "code",
    "catch",
    "block",
    "try",
    "pun",
    "intended",
    "um",
    "actually",
    "print",
    "details",
    "air",
    "let",
    "something",
    "um",
    "say",
    "air",
    "instance",
    "say",
    "type",
    "air",
    "case",
    "type",
    "er",
    "trying",
    "call",
    "method",
    "exist",
    "data",
    "type",
    "instance",
    "operator",
    "basically",
    "going",
    "look",
    "whatever",
    "left",
    "newly",
    "populated",
    "air",
    "object",
    "going",
    "say",
    "instance",
    "kind",
    "like",
    "copy",
    "template",
    "call",
    "type",
    "air",
    "going",
    "hopefully",
    "return",
    "true",
    "expected",
    "airor",
    "actually",
    "name",
    "um",
    "attached",
    "message",
    "say",
    "air",
    "message",
    "print",
    "whatever",
    "air",
    "message",
    "see",
    "looked",
    "um",
    "instance",
    "properties",
    "message",
    "knew",
    "access",
    "right",
    "press",
    "enter",
    "get",
    "value",
    "true",
    "evaluates",
    "true",
    "sentence",
    "right",
    "going",
    "air",
    "message",
    "see",
    "handled",
    "air",
    "call",
    "gracefully",
    "crashed",
    "application",
    "going",
    "come",
    "handy",
    "using",
    "external",
    "libraries",
    "know",
    "going",
    "behave",
    "finally",
    "kind",
    "going",
    "along",
    "error",
    "objects",
    "talk",
    "much",
    "also",
    "three",
    "data",
    "types",
    "touched",
    "let",
    "clear",
    "screen",
    "look",
    "talking",
    "first",
    "one",
    "going",
    "n",
    "number",
    "actually",
    "data",
    "type",
    "undefined",
    "um",
    "actually",
    "let",
    "go",
    "null",
    "talk",
    "talk",
    "null",
    "first",
    "undefined",
    "see",
    "go",
    "documentation",
    "um",
    "go",
    "main",
    "javascript",
    "documentation",
    "objects",
    "see",
    "number",
    "right",
    "see",
    "little",
    "bit",
    "also",
    "see",
    "um",
    "look",
    "objects",
    "undefined",
    "somewhere",
    "undefined",
    "finally",
    "null",
    "value",
    "right",
    "right",
    "know",
    "objects",
    "like",
    "looking",
    "null",
    "undefined",
    "believe",
    "primitives",
    "let",
    "check",
    "make",
    "sure",
    "talking",
    "correctly",
    "yes",
    "undefined",
    "null",
    "going",
    "primitives",
    "um",
    "talked",
    "little",
    "bit",
    "earlier",
    "let",
    "start",
    "least",
    "common",
    "one",
    "going",
    "number",
    "kind",
    "something",
    "really",
    "used",
    "often",
    "probably",
    "wo",
    "even",
    "see",
    "often",
    "nice",
    "know",
    "may",
    "get",
    "response",
    "um",
    "point",
    "basically",
    "number",
    "uh",
    "meaning",
    "exactly",
    "would",
    "think",
    "would",
    "mean",
    "saying",
    "something",
    "number",
    "string",
    "set",
    "equal",
    "string",
    "tried",
    "coers",
    "done",
    "surround",
    "uh",
    "number",
    "like",
    "string",
    "value",
    "let",
    "say",
    "number",
    "constructor",
    "whatever",
    "pass",
    "string",
    "string",
    "equal",
    "number",
    "value",
    "going",
    "work",
    "fine",
    "tried",
    "pass",
    "string",
    "going",
    "get",
    "number",
    "ca",
    "possibly",
    "convert",
    "string",
    "like",
    "number",
    "might",
    "get",
    "number",
    "also",
    "might",
    "get",
    "trying",
    "know",
    "add",
    "uh",
    "string",
    "number",
    "work",
    "either",
    "um",
    "also",
    "get",
    "say",
    "string",
    "multiplied",
    "two",
    "two",
    "uh",
    "minus",
    "2",
    "going",
    "get",
    "number",
    "cases",
    "going",
    "see",
    "often",
    "going",
    "move",
    "next",
    "one",
    "going",
    "null",
    "unlike",
    "number",
    "going",
    "encounter",
    "null",
    "values",
    "pretty",
    "much",
    "time",
    "represents",
    "um",
    "think",
    "going",
    "intentional",
    "absence",
    "value",
    "placeholder",
    "put",
    "variable",
    "define",
    "variable",
    "say",
    "let",
    "uh",
    "pl",
    "placeholder",
    "say",
    "let",
    "number",
    "set",
    "equal",
    "null",
    "um",
    "says",
    "redeclaring",
    "uh",
    "already",
    "defined",
    "number",
    "say",
    "num",
    "equals",
    "null",
    "redeclared",
    "typing",
    "console",
    "uh",
    "much",
    "using",
    "var",
    "variables",
    "let",
    "go",
    "ahead",
    "refresh",
    "whole",
    "page",
    "right",
    "work",
    "better",
    "say",
    "num",
    "um",
    "equal",
    "20",
    "equal",
    "null",
    "placeholder",
    "value",
    "um",
    "evaluates",
    "falsy",
    "value",
    "say",
    "um",
    "num",
    "triple",
    "equals",
    "false",
    "going",
    "say",
    "false",
    "perfectly",
    "equal",
    "boolean",
    "say",
    "num",
    "get",
    "conditional",
    "block",
    "um",
    "console",
    "log",
    "reached",
    "evaluate",
    "false",
    "block",
    "reached",
    "press",
    "enter",
    "see",
    "reached",
    "said",
    "num",
    "num",
    "equals",
    "null",
    "falsy",
    "value",
    "get",
    "reached",
    "something",
    "uh",
    "nice",
    "know",
    "using",
    "conditionals",
    "finally",
    "talking",
    "undefined",
    "similar",
    "instead",
    "intentional",
    "um",
    "assignment",
    "value",
    "kind",
    "placeholder",
    "declare",
    "variable",
    "let",
    "say",
    "um",
    "declare",
    "variable",
    "called",
    "myar",
    "assign",
    "value",
    "probably",
    "seeing",
    "undefined",
    "happen",
    "within",
    "console",
    "actually",
    "um",
    "representative",
    "talking",
    "type",
    "console",
    "log",
    "myar",
    "going",
    "get",
    "undefined",
    "going",
    "get",
    "twice",
    "always",
    "prints",
    "undefined",
    "within",
    "browser",
    "console",
    "actually",
    "equal",
    "undefined",
    "pull",
    "conditional",
    "statement",
    "put",
    "var",
    "still",
    "going",
    "print",
    "lse",
    "statement",
    "reach",
    "um",
    "evaluates",
    "falsy",
    "value",
    "right",
    "lesson",
    "number",
    "six",
    "long",
    "one",
    "um",
    "obviously",
    "split",
    "multiple",
    "videos",
    "um",
    "made",
    "congrats",
    "look",
    "forward",
    "talking",
    "complex",
    "subjects",
    "going",
    "try",
    "get",
    "little",
    "bit",
    "away",
    "javascript",
    "um",
    "meantime",
    "practice",
    "problems",
    "continue",
    "practice",
    "things",
    "learned",
    "within",
    "lesson",
    "done",
    "practice",
    "problems",
    "previous",
    "lessons",
    "um",
    "25",
    "took",
    "2",
    "hours",
    "um",
    "check",
    "video",
    "go",
    "little",
    "bit",
    "easier",
    "previous",
    "lesson",
    "lesson",
    "six",
    "um",
    "guess",
    "lesson",
    "went",
    "lot",
    "objects",
    "associated",
    "functions",
    "uh",
    "objects",
    "within",
    "javascript",
    "much",
    "broader",
    "understanding",
    "available",
    "us",
    "therefore",
    "lot",
    "better",
    "solving",
    "challenges",
    "going",
    "walk",
    "recommend",
    "try",
    "first",
    "go",
    "solution",
    "kind",
    "look",
    "community",
    "members",
    "solutions",
    "well",
    "previous",
    "uh",
    "code",
    "challenge",
    "video",
    "25",
    "zoom",
    "made",
    "sure",
    "nice",
    "big",
    "screen",
    "see",
    "um",
    "little",
    "bit",
    "annoying",
    "actually",
    "edit",
    "video",
    "hopefully",
    "work",
    "better",
    "anyways",
    "go",
    "link",
    "description",
    "get",
    "collection",
    "going",
    "working",
    "profile",
    "code",
    "wars",
    "um",
    "go",
    "profile",
    "profile",
    "go",
    "profile",
    "come",
    "see",
    "collections",
    "see",
    "lesson",
    "five",
    "25",
    "um",
    "problems",
    "lesson",
    "six",
    "challenges",
    "get",
    "click",
    "train",
    "button",
    "going",
    "take",
    "uh",
    "problems",
    "laid",
    "right",
    "10",
    "go",
    "ahead",
    "click",
    "train",
    "going",
    "basically",
    "put",
    "us",
    "list",
    "keep",
    "us",
    "press",
    "know",
    "next",
    "uh",
    "kata",
    "whatever",
    "called",
    "think",
    "something",
    "uh",
    "know",
    "previous",
    "video",
    "think",
    "learned",
    "since",
    "um",
    "leave",
    "comments",
    "know",
    "uh",
    "totally",
    "means",
    "anyways",
    "let",
    "get",
    "started",
    "first",
    "code",
    "challenge",
    "going",
    "list",
    "filtering",
    "remember",
    "previous",
    "uh",
    "couple",
    "videos",
    "went",
    "methods",
    "one",
    "filter",
    "uh",
    "method",
    "array",
    "case",
    "would",
    "guess",
    "probably",
    "going",
    "using",
    "solve",
    "problem",
    "seen",
    "um",
    "seen",
    "picked",
    "tried",
    "solve",
    "going",
    "going",
    "real",
    "time",
    "um",
    "think",
    "filter",
    "methods",
    "probably",
    "going",
    "want",
    "says",
    "kata",
    "create",
    "function",
    "takes",
    "list",
    "negative",
    "integers",
    "strings",
    "returns",
    "new",
    "list",
    "strings",
    "filtered",
    "perfect",
    "uh",
    "use",
    "filter",
    "method",
    "go",
    "always",
    "let",
    "um",
    "change",
    "parameter",
    "name",
    "descriptive",
    "call",
    "um",
    "num",
    "list",
    "even",
    "better",
    "num",
    "array",
    "basically",
    "return",
    "num",
    "array",
    "want",
    "add",
    "filter",
    "method",
    "end",
    "filter",
    "method",
    "might",
    "remember",
    "going",
    "basically",
    "take",
    "call",
    "back",
    "function",
    "whatever",
    "call",
    "back",
    "function",
    "returns",
    "um",
    "returns",
    "true",
    "individual",
    "element",
    "looping",
    "going",
    "keep",
    "array",
    "returns",
    "false",
    "going",
    "throw",
    "include",
    "resultant",
    "array",
    "sake",
    "clarity",
    "going",
    "actually",
    "break",
    "separate",
    "function",
    "refactor",
    "little",
    "bit",
    "uh",
    "concise",
    "say",
    "callback",
    "uh",
    "function",
    "going",
    "going",
    "take",
    "array",
    "item",
    "uh",
    "methods",
    "arrays",
    "work",
    "pass",
    "array",
    "item",
    "call",
    "back",
    "going",
    "return",
    "condition",
    "case",
    "want",
    "look",
    "see",
    "negative",
    "integer",
    "negative",
    "number",
    "string",
    "something",
    "need",
    "filter",
    "say",
    "um",
    "first",
    "type",
    "array",
    "item",
    "um",
    "going",
    "return",
    "us",
    "type",
    "variable",
    "equal",
    "number",
    "actually",
    "put",
    "quotes",
    "let",
    "go",
    "little",
    "uh",
    "playground",
    "number",
    "something",
    "like",
    "say",
    "type",
    "20",
    "going",
    "give",
    "us",
    "number",
    "quotes",
    "put",
    "sort",
    "string",
    "going",
    "give",
    "us",
    "string",
    "using",
    "uh",
    "knowledge",
    "saying",
    "array",
    "item",
    "equal",
    "number",
    "want",
    "filter",
    "also",
    "want",
    "want",
    "add",
    "condition",
    "um",
    "say",
    "number",
    "two",
    "pipes",
    "array",
    "item",
    "negative",
    "figure",
    "number",
    "negative",
    "well",
    "could",
    "multiply",
    "ne",
    "turns",
    "positive",
    "um",
    "case",
    "could",
    "also",
    "something",
    "else",
    "callback",
    "function",
    "need",
    "return",
    "either",
    "true",
    "false",
    "determine",
    "whether",
    "individual",
    "array",
    "item",
    "looping",
    "uh",
    "returned",
    "final",
    "array",
    "case",
    "two",
    "conditions",
    "put",
    "comment",
    "say",
    "first",
    "condition",
    "um",
    "number",
    "second",
    "condition",
    "positive",
    "say",
    "array",
    "item",
    "greater",
    "equal",
    "zero",
    "um",
    "type",
    "array",
    "item",
    "equal",
    "number",
    "want",
    "return",
    "true",
    "otherwise",
    "return",
    "false",
    "exclude",
    "little",
    "type",
    "operator",
    "looked",
    "couple",
    "times",
    "show",
    "talking",
    "um",
    "say",
    "type",
    "uh",
    "string",
    "put",
    "string",
    "going",
    "return",
    "value",
    "string",
    "put",
    "say",
    "number",
    "going",
    "give",
    "us",
    "number",
    "saying",
    "type",
    "item",
    "equal",
    "number",
    "want",
    "keep",
    "right",
    "callback",
    "function",
    "work",
    "say",
    "return",
    "num",
    "array",
    "filter",
    "pass",
    "callback",
    "function",
    "let",
    "let",
    "see",
    "works",
    "test",
    "work",
    "couple",
    "ways",
    "refactor",
    "first",
    "way",
    "need",
    "conditional",
    "really",
    "return",
    "expression",
    "right",
    "expression",
    "evaluates",
    "true",
    "want",
    "keep",
    "evaluates",
    "false",
    "want",
    "throw",
    "away",
    "return",
    "expression",
    "work",
    "another",
    "way",
    "refactor",
    "taking",
    "entire",
    "callback",
    "function",
    "simplifying",
    "instead",
    "passing",
    "declaration",
    "whatever",
    "define",
    "right",
    "say",
    "array",
    "item",
    "use",
    "arrow",
    "function",
    "actually",
    "return",
    "let",
    "break",
    "onto",
    "new",
    "line",
    "return",
    "expression",
    "right",
    "get",
    "rid",
    "second",
    "function",
    "test",
    "pass",
    "last",
    "thing",
    "even",
    "need",
    "little",
    "brackets",
    "um",
    "get",
    "rid",
    "get",
    "rid",
    "return",
    "statement",
    "put",
    "one",
    "line",
    "work",
    "fine",
    "let",
    "go",
    "ahead",
    "test",
    "um",
    "looks",
    "like",
    "got",
    "sort",
    "syntax",
    "error",
    "uh",
    "yeah",
    "little",
    "semicolon",
    "end",
    "valid",
    "let",
    "go",
    "ahead",
    "test",
    "passing",
    "might",
    "take",
    "refactor",
    "work",
    "correctly",
    "let",
    "attempt",
    "solution",
    "pass",
    "solved",
    "one",
    "uh",
    "okay",
    "submit",
    "see",
    "people",
    "used",
    "solve",
    "um",
    "solution",
    "right",
    "let",
    "go",
    "um",
    "let",
    "see",
    "one",
    "something",
    "similar",
    "us",
    "looks",
    "like",
    "saying",
    "equal",
    "number",
    "know",
    "accounted",
    "negative",
    "numbers",
    "maybe",
    "something",
    "um",
    "let",
    "see",
    "well",
    "maybe",
    "misread",
    "actually",
    "wonder",
    "instructions",
    "maybe",
    "go",
    "back",
    "see",
    "guess",
    "maybe",
    "need",
    "uh",
    "look",
    "negative",
    "numbers",
    "um",
    "know",
    "right",
    "let",
    "move",
    "uh",
    "super",
    "important",
    "go",
    "back",
    "kind",
    "look",
    "right",
    "next",
    "challenge",
    "array",
    "diff",
    "probably",
    "getting",
    "difference",
    "array",
    "sort",
    "let",
    "go",
    "instructions",
    "says",
    "goal",
    "kata",
    "implement",
    "difference",
    "function",
    "subtracts",
    "one",
    "list",
    "another",
    "returns",
    "result",
    "remove",
    "values",
    "list",
    "present",
    "list",
    "b",
    "okay",
    "looking",
    "see",
    "one",
    "arrays",
    "going",
    "remove",
    "leave",
    "us",
    "array",
    "two",
    "um",
    "one",
    "two",
    "present",
    "arrays",
    "going",
    "remove",
    "two",
    "left",
    "one",
    "three",
    "gives",
    "us",
    "us",
    "result",
    "basically",
    "working",
    "um",
    "hopefully",
    "use",
    "one",
    "methods",
    "solve",
    "fun",
    "fact",
    "go",
    "low",
    "dash",
    "library",
    "um",
    "something",
    "talked",
    "prior",
    "lesson",
    "prior",
    "lesson",
    "lesson",
    "prior",
    "video",
    "go",
    "documentation",
    "actually",
    "method",
    "um",
    "go",
    "intersection",
    "um",
    "intersection",
    "method",
    "going",
    "find",
    "alike",
    "within",
    "arrays",
    "trying",
    "find",
    "difference",
    "go",
    "difference",
    "method",
    "right",
    "ultimately",
    "challenge",
    "implement",
    "method",
    "use",
    "low",
    "dash",
    "kind",
    "interesting",
    "thing",
    "know",
    "start",
    "using",
    "low",
    "dash",
    "library",
    "like",
    "might",
    "kind",
    "later",
    "series",
    "come",
    "handy",
    "reason",
    "trying",
    "find",
    "difference",
    "um",
    "think",
    "way",
    "using",
    "array",
    "includes",
    "method",
    "let",
    "pull",
    "mdn",
    "documentation",
    "go",
    "web",
    "docs",
    "go",
    "javascript",
    "go",
    "objects",
    "click",
    "array",
    "go",
    "uh",
    "includes",
    "method",
    "talked",
    "prior",
    "video",
    "lesson",
    "basically",
    "going",
    "figure",
    "something",
    "uh",
    "included",
    "another",
    "array",
    "value",
    "included",
    "another",
    "array",
    "loop",
    "one",
    "arrays",
    "ask",
    "value",
    "included",
    "remove",
    "might",
    "help",
    "us",
    "solve",
    "problem",
    "first",
    "thing",
    "want",
    "check",
    "edge",
    "cases",
    "see",
    "test",
    "couple",
    "times",
    "first",
    "array",
    "might",
    "uh",
    "nothing",
    "second",
    "array",
    "nothing",
    "cases",
    "return",
    "whatever",
    "array",
    "let",
    "say",
    "um",
    "equal",
    "zero",
    "um",
    "want",
    "return",
    "b",
    "want",
    "return",
    "array",
    "say",
    "zero",
    "want",
    "return",
    "let",
    "go",
    "ahead",
    "test",
    "see",
    "got",
    "couple",
    "right",
    "see",
    "passed",
    "one",
    "test",
    "uh",
    "passed",
    "argument",
    "empty",
    "array",
    "actually",
    "solve",
    "question",
    "get",
    "intersection",
    "figure",
    "um",
    "actually",
    "different",
    "two",
    "arrays",
    "going",
    "open",
    "full",
    "screen",
    "maybe",
    "put",
    "example",
    "uh",
    "anchored",
    "something",
    "let",
    "put",
    "something",
    "like",
    "three",
    "five",
    "six",
    "six",
    "five",
    "two",
    "second",
    "array",
    "something",
    "like",
    "three",
    "six",
    "know",
    "want",
    "final",
    "array",
    "want",
    "five",
    "um",
    "five",
    "two",
    "let",
    "see",
    "actually",
    "solve",
    "think",
    "loop",
    "um",
    "one",
    "arrays",
    "say",
    "do4",
    "pass",
    "callback",
    "function",
    "something",
    "iteration",
    "say",
    "array",
    "item",
    "also",
    "probably",
    "want",
    "grab",
    "array",
    "index",
    "show",
    "second",
    "let",
    "dro",
    "function",
    "needs",
    "um",
    "stored",
    "result",
    "could",
    "also",
    "return",
    "store",
    "result",
    "return",
    "result",
    "end",
    "function",
    "every",
    "time",
    "iterate",
    "going",
    "actually",
    "um",
    "use",
    "item",
    "check",
    "exists",
    "array",
    "exist",
    "going",
    "remove",
    "item",
    "arrays",
    "um",
    "iteration",
    "al",
    "loop",
    "order",
    "need",
    "something",
    "removes",
    "item",
    "specific",
    "uh",
    "index",
    "array",
    "let",
    "go",
    "documentation",
    "refresh",
    "method",
    "called",
    "splice",
    "something",
    "talked",
    "prior",
    "video",
    "lesson",
    "going",
    "change",
    "contents",
    "array",
    "removing",
    "replacing",
    "existing",
    "elements",
    "remove",
    "um",
    "element",
    "start",
    "index",
    "um",
    "kind",
    "going",
    "solve",
    "say",
    "array",
    "item",
    "actually",
    "let",
    "say",
    "iterating",
    "array",
    "called",
    "b",
    "array",
    "includes",
    "array",
    "item",
    "includes",
    "array",
    "item",
    "want",
    "remove",
    "going",
    "put",
    "comments",
    "found",
    "element",
    "uh",
    "arrays",
    "know",
    "need",
    "remove",
    "well",
    "probably",
    "get",
    "new",
    "array",
    "going",
    "working",
    "uh",
    "know",
    "recent",
    "array",
    "let",
    "make",
    "variable",
    "say",
    "current",
    "array",
    "um",
    "set",
    "equal",
    "know",
    "put",
    "placeholder",
    "called",
    "null",
    "say",
    "let",
    "current",
    "array",
    "b",
    "equal",
    "null",
    "placeholder",
    "going",
    "assign",
    "mutated",
    "array",
    "want",
    "create",
    "two",
    "uh",
    "separate",
    "arrays",
    "say",
    "new",
    "come",
    "done",
    "yet",
    "say",
    "new",
    "b",
    "going",
    "grab",
    "two",
    "arrays",
    "values",
    "removed",
    "way",
    "basically",
    "saying",
    "filter",
    "going",
    "use",
    "filter",
    "method",
    "going",
    "uh",
    "pass",
    "name",
    "item",
    "item",
    "want",
    "conflict",
    "uh",
    "right",
    "used",
    "kind",
    "parent",
    "call",
    "back",
    "using",
    "let",
    "go",
    "ahead",
    "return",
    "long",
    "item",
    "looping",
    "equal",
    "array",
    "item",
    "want",
    "remove",
    "long",
    "item",
    "equal",
    "array",
    "item",
    "want",
    "put",
    "new",
    "array",
    "actually",
    "use",
    "um",
    "syntax",
    "need",
    "replace",
    "b",
    "new",
    "array",
    "um",
    "replace",
    "placeholder",
    "current",
    "array",
    "actually",
    "going",
    "call",
    "new",
    "simplicity",
    "new",
    "b",
    "change",
    "new",
    "new",
    "b",
    "time",
    "basically",
    "far",
    "looping",
    "every",
    "element",
    "within",
    "array",
    "going",
    "um",
    "basically",
    "create",
    "new",
    "array",
    "elements",
    "matched",
    "across",
    "let",
    "see",
    "returning",
    "exit",
    "let",
    "test",
    "um",
    "looks",
    "like",
    "got",
    "something",
    "going",
    "let",
    "go",
    "ahead",
    "print",
    "result",
    "actually",
    "return",
    "let",
    "print",
    "result",
    "see",
    "getting",
    "big",
    "mistake",
    "made",
    "realized",
    "actually",
    "modifying",
    "original",
    "arrays",
    "want",
    "basically",
    "saying",
    "okay",
    "looping",
    "array",
    "within",
    "loop",
    "modifying",
    "time",
    "definitely",
    "want",
    "let",
    "open",
    "code",
    "block",
    "need",
    "need",
    "get",
    "copy",
    "say",
    "copy",
    "going",
    "equal",
    "slice",
    "going",
    "create",
    "copy",
    "array",
    "b",
    "copy",
    "slice",
    "going",
    "give",
    "us",
    "two",
    "copies",
    "array",
    "going",
    "say",
    "instead",
    "filter",
    "filter",
    "going",
    "copy",
    "b",
    "copy",
    "going",
    "uh",
    "sort",
    "let",
    "go",
    "ahead",
    "test",
    "see",
    "gets",
    "uh",
    "us",
    "answer",
    "looks",
    "like",
    "getting",
    "undefined",
    "result",
    "wonder",
    "happening",
    "let",
    "see",
    "oh",
    "okay",
    "thinking",
    "going",
    "assign",
    "loop",
    "value",
    "cu",
    "return",
    "uh",
    "r",
    "loops",
    "really",
    "return",
    "anything",
    "uh",
    "returning",
    "result",
    "going",
    "work",
    "need",
    "return",
    "either",
    "one",
    "believe",
    "let",
    "see",
    "happens",
    "console",
    "log",
    "new",
    "maybe",
    "return",
    "okay",
    "passing",
    "um",
    "let",
    "see",
    "looks",
    "like",
    "sample",
    "test",
    "says",
    "empty",
    "array",
    "want",
    "return",
    "empty",
    "array",
    "think",
    "messed",
    "um",
    "okay",
    "first",
    "one",
    "empty",
    "want",
    "result",
    "empty",
    "equals",
    "z",
    "want",
    "return",
    "empty",
    "array",
    "rather",
    "br",
    "array",
    "let",
    "test",
    "looks",
    "like",
    "passed",
    "let",
    "go",
    "ahead",
    "attempt",
    "sure",
    "going",
    "pass",
    "um",
    "looks",
    "like",
    "got",
    "uh",
    "problems",
    "negative",
    "numbers",
    "maybe",
    "let",
    "see",
    "dealing",
    "okay",
    "think",
    "something",
    "wrong",
    "taking",
    "copy",
    "original",
    "array",
    "time",
    "probably",
    "want",
    "take",
    "copy",
    "um",
    "new",
    "array",
    "created",
    "time",
    "loops",
    "going",
    "remove",
    "know",
    "one",
    "elements",
    "keep",
    "uh",
    "making",
    "copy",
    "original",
    "array",
    "going",
    "keep",
    "adding",
    "back",
    "ones",
    "rem",
    "removed",
    "already",
    "let",
    "go",
    "go",
    "ahead",
    "instead",
    "making",
    "copy",
    "expand",
    "make",
    "copy",
    "new",
    "new",
    "b",
    "represent",
    "um",
    "updated",
    "array",
    "working",
    "want",
    "take",
    "second",
    "explain",
    "let",
    "say",
    "um",
    "following",
    "example",
    "1",
    "2",
    "two",
    "three",
    "maybe",
    "two",
    "three",
    "something",
    "something",
    "like",
    "going",
    "happen",
    "start",
    "array",
    "going",
    "loop",
    "loop",
    "saying",
    "okay",
    "going",
    "code",
    "uh",
    "new",
    "going",
    "equal",
    "null",
    "start",
    "going",
    "uh",
    "taking",
    "copy",
    "going",
    "give",
    "us",
    "uh",
    "null",
    "going",
    "say",
    "b",
    "includes",
    "array",
    "item",
    "case",
    "array",
    "item",
    "going",
    "one",
    "saying",
    "array",
    "b",
    "includes",
    "value",
    "one",
    "going",
    "drop",
    "code",
    "right",
    "case",
    "going",
    "take",
    "new",
    "going",
    "filter",
    "um",
    "set",
    "equal",
    "going",
    "filter",
    "copy",
    "set",
    "equal",
    "new",
    "probably",
    "need",
    "initialize",
    "um",
    "equal",
    "original",
    "array",
    "say",
    "start",
    "start",
    "b",
    "starting",
    "original",
    "array",
    "time",
    "get",
    "loop",
    "going",
    "take",
    "copy",
    "whatever",
    "updated",
    "time",
    "loop",
    "going",
    "check",
    "okay",
    "one",
    "included",
    "second",
    "array",
    "yes",
    "let",
    "set",
    "new",
    "original",
    "array",
    "beginning",
    "going",
    "filter",
    "um",
    "item",
    "found",
    "go",
    "um",
    "second",
    "time",
    "going",
    "uh",
    "removing",
    "elements",
    "first",
    "iteration",
    "loop",
    "one",
    "found",
    "anything",
    "second",
    "time",
    "come",
    "around",
    "look",
    "two",
    "see",
    "two",
    "included",
    "arrays",
    "going",
    "drop",
    "statement",
    "going",
    "reassign",
    "uh",
    "placeholder",
    "arrays",
    "um",
    "filtered",
    "array",
    "include",
    "two",
    "anymore",
    "going",
    "1",
    "three",
    "two",
    "three",
    "finally",
    "get",
    "last",
    "one",
    "couple",
    "iterations",
    "see",
    "remove",
    "assign",
    "new",
    "new",
    "b",
    "let",
    "see",
    "um",
    "works",
    "little",
    "bit",
    "better",
    "looks",
    "like",
    "passed",
    "easy",
    "ones",
    "passed",
    "tough",
    "question",
    "like",
    "look",
    "difficulty",
    "6kyu",
    "gone",
    "beforehand",
    "like",
    "know",
    "know",
    "solve",
    "problem",
    "looked",
    "um",
    "hopefully",
    "gives",
    "good",
    "idea",
    "thinking",
    "works",
    "like",
    "takes",
    "lot",
    "iterations",
    "something",
    "like",
    "right",
    "going",
    "solving",
    "know",
    "exactly",
    "try",
    "things",
    "test",
    "know",
    "realize",
    "oh",
    "account",
    "account",
    "eventually",
    "get",
    "answer",
    "really",
    "tough",
    "one",
    "would",
    "definitely",
    "call",
    "beginner",
    "uh",
    "javascript",
    "problem",
    "hopefully",
    "see",
    "big",
    "solution",
    "used",
    "um",
    "bunch",
    "different",
    "methods",
    "used",
    "slice",
    "used",
    "filter",
    "used",
    "includes",
    "used",
    "four",
    "used",
    "problem",
    "methods",
    "javascript",
    "really",
    "come",
    "handy",
    "looks",
    "like",
    "solving",
    "since",
    "tougher",
    "problem",
    "looks",
    "like",
    "leveled",
    "um",
    "started",
    "cod",
    "wars",
    "thing",
    "uh",
    "make",
    "videos",
    "little",
    "bit",
    "higher",
    "right",
    "enough",
    "notifications",
    "let",
    "go",
    "next",
    "problem",
    "looks",
    "like",
    "another",
    "tough",
    "one",
    "6kyu",
    "um",
    "let",
    "see",
    "solve",
    "little",
    "bit",
    "quicker",
    "uh",
    "first",
    "one",
    "okay",
    "let",
    "look",
    "uh",
    "potential",
    "inputs",
    "bottom",
    "says",
    "note",
    "hashes",
    "prevalidated",
    "contain",
    "uppercase",
    "lowercase",
    "letters",
    "um",
    "little",
    "uh",
    "dash",
    "looks",
    "like",
    "period",
    "would",
    "expect",
    "see",
    "um",
    "looking",
    "examples",
    "see",
    "list",
    "objects",
    "object",
    "property",
    "called",
    "name",
    "scroll",
    "okay",
    "working",
    "um",
    "case",
    "bart",
    "lisa",
    "maggie",
    "looks",
    "like",
    "put",
    "comma",
    "first",
    "one",
    "um",
    "probably",
    "comma",
    "second",
    "one",
    "three",
    "case",
    "three",
    "put",
    "instead",
    "comma",
    "okay",
    "case",
    "nothing",
    "array",
    "empty",
    "return",
    "empty",
    "string",
    "really",
    "easy",
    "one",
    "start",
    "um",
    "going",
    "actually",
    "zoom",
    "little",
    "bit",
    "zoomed",
    "wanted",
    "people",
    "able",
    "see",
    "everything",
    "um",
    "case",
    "running",
    "space",
    "let",
    "go",
    "names",
    "length",
    "equals",
    "0",
    "want",
    "return",
    "empty",
    "string",
    "test",
    "pass",
    "pass",
    "least",
    "one",
    "um",
    "empty",
    "array",
    "got",
    "uh",
    "test",
    "case",
    "covered",
    "actually",
    "go",
    "let",
    "see",
    "probably",
    "iterating",
    "array",
    "four",
    "loop",
    "um",
    "let",
    "see",
    "okay",
    "let",
    "try",
    "say",
    "names",
    "do4",
    "say",
    "name",
    "uh",
    "argument",
    "dealing",
    "let",
    "put",
    "parentheses",
    "actually",
    "going",
    "need",
    "need",
    "array",
    "index",
    "second",
    "argument",
    "callback",
    "um",
    "wanted",
    "see",
    "wanted",
    "actually",
    "figure",
    "go",
    "method",
    "go",
    "technologies",
    "javascript",
    "objects",
    "array",
    "go",
    "method",
    "read",
    "syntax",
    "says",
    "call",
    "back",
    "going",
    "parameters",
    "right",
    "first",
    "passes",
    "current",
    "value",
    "index",
    "array",
    "looping",
    "original",
    "array",
    "knew",
    "add",
    "name",
    "array",
    "index",
    "could",
    "called",
    "array",
    "item",
    "little",
    "bit",
    "clear",
    "let",
    "break",
    "onto",
    "new",
    "line",
    "right",
    "looping",
    "going",
    "return",
    "anything",
    "probably",
    "need",
    "store",
    "final",
    "string",
    "equal",
    "nothing",
    "start",
    "right",
    "loop",
    "um",
    "actually",
    "array",
    "length",
    "zero",
    "loop",
    "going",
    "anything",
    "probably",
    "could",
    "return",
    "final",
    "string",
    "instead",
    "statement",
    "let",
    "test",
    "make",
    "sure",
    "works",
    "empty",
    "array",
    "right",
    "back",
    "basically",
    "going",
    "grabbing",
    "name",
    "property",
    "say",
    "name",
    "going",
    "equal",
    "array",
    "item",
    "name",
    "know",
    "array",
    "item",
    "going",
    "object",
    "like",
    "right",
    "property",
    "called",
    "name",
    "right",
    "name",
    "um",
    "want",
    "add",
    "final",
    "string",
    "let",
    "see",
    "um",
    "need",
    "first",
    "check",
    "array",
    "index",
    "equal",
    "um",
    "total",
    "names",
    "array",
    "length",
    "bas",
    "basically",
    "saying",
    "last",
    "index",
    "array",
    "want",
    "something",
    "last",
    "uh",
    "index",
    "array",
    "want",
    "take",
    "final",
    "string",
    "want",
    "add",
    "current",
    "array",
    "item",
    "uh",
    "name",
    "stored",
    "name",
    "variable",
    "put",
    "right",
    "going",
    "add",
    "names",
    "course",
    "need",
    "comma",
    "want",
    "add",
    "name",
    "um",
    "let",
    "remove",
    "equal",
    "sign",
    "um",
    "say",
    "final",
    "string",
    "equals",
    "final",
    "string",
    "plus",
    "name",
    "plus",
    "comma",
    "space",
    "right",
    "going",
    "basically",
    "reassign",
    "final",
    "string",
    "add",
    "names",
    "commas",
    "let",
    "uh",
    "final",
    "string",
    "definitely",
    "going",
    "right",
    "see",
    "getting",
    "okay",
    "bart",
    "comma",
    "lisa",
    "comma",
    "maggie",
    "comma",
    "homer",
    "comma",
    "marge",
    "comma",
    "right",
    "kind",
    "expecting",
    "add",
    "symbol",
    "see",
    "last",
    "one",
    "right",
    "um",
    "put",
    "comma",
    "let",
    "see",
    "one",
    "actually",
    "passing",
    "test",
    "okay",
    "one",
    "mistake",
    "made",
    "array",
    "index",
    "equal",
    "names",
    "length",
    "remember",
    "uh",
    "length",
    "array",
    "going",
    "um",
    "literally",
    "many",
    "elements",
    "array",
    "array",
    "zero",
    "indexed",
    "actually",
    "never",
    "reach",
    "um",
    "index",
    "equal",
    "length",
    "array",
    "say",
    "names",
    "length",
    "minus",
    "one",
    "test",
    "see",
    "um",
    "output",
    "basically",
    "skip",
    "one",
    "see",
    "skipped",
    "marge",
    "time",
    "actually",
    "correct",
    "um",
    "put",
    "else",
    "condition",
    "otherwise",
    "kind",
    "last",
    "element",
    "array",
    "put",
    "final",
    "string",
    "equal",
    "final",
    "string",
    "plus",
    "symbol",
    "plus",
    "um",
    "name",
    "right",
    "think",
    "going",
    "work",
    "perfect",
    "perfectly",
    "let",
    "test",
    "yeah",
    "seeing",
    "marge",
    "without",
    "space",
    "need",
    "add",
    "space",
    "test",
    "right",
    "looks",
    "lot",
    "closer",
    "um",
    "expecting",
    "missing",
    "failing",
    "still",
    "comma",
    "symbol",
    "want",
    "comma",
    "end",
    "basically",
    "um",
    "condition",
    "going",
    "correct",
    "want",
    "actually",
    "identify",
    "two",
    "different",
    "situations",
    "want",
    "identify",
    "second",
    "last",
    "um",
    "last",
    "one",
    "instead",
    "saying",
    "equal",
    "let",
    "say",
    "um",
    "equal",
    "index",
    "working",
    "let",
    "go",
    "ahead",
    "expand",
    "little",
    "bit",
    "index",
    "working",
    "equal",
    "last",
    "one",
    "um",
    "going",
    "paste",
    "right",
    "want",
    "put",
    "name",
    "okay",
    "um",
    "otherwise",
    "else",
    "array",
    "index",
    "equals",
    "names",
    "length",
    "minus",
    "2",
    "guess",
    "third",
    "last",
    "want",
    "say",
    "final",
    "string",
    "equal",
    "final",
    "string",
    "uh",
    "plus",
    "name",
    "want",
    "uh",
    "commas",
    "going",
    "otherwise",
    "want",
    "return",
    "final",
    "string",
    "equal",
    "uh",
    "final",
    "string",
    "plus",
    "name",
    "plus",
    "comma",
    "space",
    "let",
    "try",
    "see",
    "getting",
    "output",
    "uh",
    "see",
    "getting",
    "lot",
    "closer",
    "everything",
    "correct",
    "except",
    "need",
    "space",
    "right",
    "symbol",
    "let",
    "add",
    "real",
    "quick",
    "let",
    "put",
    "space",
    "test",
    "see",
    "passing",
    "test",
    "cases",
    "one",
    "um",
    "says",
    "wrong",
    "output",
    "single",
    "name",
    "single",
    "name",
    "probably",
    "need",
    "return",
    "name",
    "okay",
    "cover",
    "separate",
    "test",
    "case",
    "say",
    "names",
    "uh",
    "length",
    "equal",
    "one",
    "going",
    "return",
    "names",
    "um",
    "name",
    "cover",
    "single",
    "name",
    "passed",
    "let",
    "attempt",
    "passed",
    "another",
    "really",
    "tough",
    "one",
    "um",
    "probably",
    "beginner",
    "problem",
    "necessarily",
    "hopefully",
    "see",
    "iterating",
    "trying",
    "different",
    "things",
    "get",
    "final",
    "solution",
    "right",
    "let",
    "submit",
    "one",
    "go",
    "next",
    "see",
    "someone",
    "solved",
    "reduce",
    "method",
    "learned",
    "prior",
    "uh",
    "uh",
    "video",
    "lesson",
    "um",
    "think",
    "useful",
    "one",
    "basically",
    "anytime",
    "using",
    "like",
    "accumulator",
    "case",
    "variable",
    "called",
    "final",
    "strings",
    "go",
    "back",
    "video",
    "see",
    "accumulator",
    "variable",
    "followed",
    "loop",
    "modifies",
    "always",
    "good",
    "use",
    "case",
    "reduce",
    "method",
    "think",
    "uh",
    "particular",
    "scenario",
    "always",
    "good",
    "use",
    "case",
    "um",
    "one",
    "interesting",
    "going",
    "go",
    "sure",
    "look",
    "people",
    "come",
    "clever",
    "solutions",
    "right",
    "let",
    "look",
    "one",
    "pretty",
    "tough",
    "one",
    "guess",
    "getting",
    "tough",
    "ones",
    "row",
    "going",
    "get",
    "little",
    "bit",
    "easier",
    "problem",
    "basically",
    "um",
    "name",
    "take",
    "walk",
    "saying",
    "live",
    "city",
    "blah",
    "blah",
    "blah",
    "roads",
    "laid",
    "perfect",
    "grid",
    "arrive",
    "10",
    "minutes",
    "early",
    "appointment",
    "want",
    "go",
    "take",
    "walk",
    "um",
    "got",
    "app",
    "generates",
    "little",
    "route",
    "go",
    "either",
    "north",
    "south",
    "east",
    "west",
    "unit",
    "going",
    "single",
    "block",
    "right",
    "right",
    "need",
    "figure",
    "um",
    "given",
    "array",
    "directions",
    "going",
    "put",
    "us",
    "back",
    "original",
    "destination",
    "going",
    "take",
    "exactly",
    "10",
    "minutes",
    "says",
    "um",
    "block",
    "going",
    "take",
    "one",
    "minute",
    "takes",
    "one",
    "minute",
    "traverse",
    "one",
    "city",
    "block",
    "basically",
    "returning",
    "true",
    "false",
    "otherwise",
    "says",
    "note",
    "always",
    "receive",
    "valid",
    "array",
    "containing",
    "random",
    "assortment",
    "directional",
    "letters",
    "going",
    "receive",
    "anything",
    "north",
    "south",
    "east",
    "west",
    "case",
    "think",
    "idea",
    "might",
    "solve",
    "initially",
    "let",
    "open",
    "say",
    "first",
    "condition",
    "um",
    "know",
    "exactly",
    "10",
    "elements",
    "array",
    "going",
    "take",
    "us",
    "less",
    "10",
    "minutes",
    "say",
    "walk",
    "length",
    "equal",
    "10",
    "going",
    "return",
    "false",
    "right",
    "equal",
    "10",
    "returning",
    "false",
    "going",
    "rest",
    "code",
    "equal",
    "10",
    "go",
    "rest",
    "code",
    "see",
    "gets",
    "us",
    "back",
    "10",
    "minutes",
    "original",
    "destination",
    "case",
    "think",
    "going",
    "um",
    "initiate",
    "initialize",
    "four",
    "different",
    "variables",
    "say",
    "uh",
    "north",
    "offset",
    "equals",
    "0",
    "uh",
    "west",
    "offset",
    "equals",
    "z",
    "going",
    "directions",
    "east",
    "offset",
    "south",
    "offset",
    "right",
    "going",
    "uh",
    "loop",
    "array",
    "going",
    "use",
    "method",
    "going",
    "pass",
    "instead",
    "array",
    "item",
    "let",
    "start",
    "learning",
    "actually",
    "um",
    "name",
    "parameters",
    "little",
    "bit",
    "descriptive",
    "say",
    "direction",
    "represent",
    "direction",
    "going",
    "receive",
    "go",
    "loop",
    "direction",
    "going",
    "set",
    "um",
    "variables",
    "uh",
    "offsets",
    "use",
    "switch",
    "case",
    "statement",
    "going",
    "put",
    "direction",
    "switch",
    "statement",
    "going",
    "say",
    "case",
    "equals",
    "n",
    "going",
    "north",
    "right",
    "going",
    "put",
    "break",
    "statement",
    "west",
    "right",
    "put",
    "cases",
    "ones",
    "need",
    "last",
    "break",
    "statement",
    "get",
    "matter",
    "okay",
    "going",
    "different",
    "cases",
    "one",
    "going",
    "change",
    "offset",
    "north",
    "going",
    "say",
    "north",
    "offset",
    "going",
    "plus",
    "equal",
    "10",
    "right",
    "going",
    "say",
    "um",
    "10",
    "say",
    "one",
    "gone",
    "north",
    "one",
    "block",
    "case",
    "north",
    "going",
    "different",
    "cases",
    "say",
    "uh",
    "west",
    "offset",
    "plus",
    "equal",
    "1",
    "um",
    "let",
    "see",
    "east",
    "offset",
    "plus",
    "equal",
    "1",
    "last",
    "case",
    "say",
    "south",
    "offset",
    "plus",
    "equal",
    "1",
    "reach",
    "destination",
    "like",
    "get",
    "put",
    "back",
    "destination",
    "think",
    "sum",
    "offsets",
    "net",
    "zero",
    "um",
    "sum",
    "subtract",
    "north",
    "offset",
    "offset",
    "south",
    "one",
    "west",
    "east",
    "basically",
    "north",
    "minus",
    "south",
    "equals",
    "0",
    "west",
    "minus",
    "east",
    "equals",
    "0",
    "know",
    "returned",
    "original",
    "destination",
    "go",
    "uh",
    "loop",
    "say",
    "north",
    "offset",
    "minus",
    "south",
    "offset",
    "equals",
    "z",
    "west",
    "offset",
    "minus",
    "east",
    "offset",
    "equals",
    "z",
    "return",
    "true",
    "otherwise",
    "return",
    "false",
    "cases",
    "going",
    "start",
    "catching",
    "return",
    "true",
    "conditional",
    "often",
    "times",
    "return",
    "expression",
    "let",
    "copy",
    "instead",
    "complicated",
    "block",
    "let",
    "return",
    "expression",
    "right",
    "let",
    "break",
    "test",
    "see",
    "happens",
    "passed",
    "assumption",
    "correct",
    "calculate",
    "offsets",
    "net",
    "zero",
    "subtract",
    "know",
    "left",
    "right",
    "offset",
    "zero",
    "top",
    "bottom",
    "offset",
    "zero",
    "returned",
    "office",
    "appointment",
    "let",
    "attempt",
    "see",
    "covered",
    "cases",
    "awesome",
    "let",
    "submit",
    "one",
    "think",
    "little",
    "easier",
    "last",
    "two",
    "still",
    "required",
    "little",
    "bit",
    "thinking",
    "sure",
    "someone",
    "solved",
    "much",
    "efficient",
    "way",
    "loads",
    "see",
    "right",
    "first",
    "solution",
    "um",
    "pretty",
    "much",
    "thing",
    "pretty",
    "good",
    "one",
    "right",
    "6",
    "kyu",
    "might",
    "little",
    "bit",
    "tough",
    "let",
    "uh",
    "jump",
    "see",
    "says",
    "write",
    "function",
    "called",
    "persistence",
    "right",
    "takes",
    "positive",
    "parameter",
    "num",
    "returns",
    "multiplicative",
    "persistence",
    "number",
    "times",
    "must",
    "multiply",
    "digits",
    "num",
    "reach",
    "single",
    "digit",
    "understand",
    "fully",
    "first",
    "let",
    "look",
    "examples",
    "right",
    "pass",
    "39",
    "says",
    "3",
    "9",
    "going",
    "27",
    "right",
    "2",
    "7",
    "equal",
    "14",
    "1",
    "4",
    "equal",
    "4",
    "single",
    "digit",
    "okay",
    "always",
    "positive",
    "numbers",
    "okay",
    "says",
    "positive",
    "parameter",
    "okay",
    "know",
    "going",
    "positive",
    "number",
    "know",
    "identify",
    "whether",
    "solution",
    "single",
    "digit",
    "basically",
    "say",
    "know",
    "less",
    "10",
    "single",
    "digit",
    "okay",
    "probably",
    "going",
    "go",
    "sort",
    "loop",
    "iterate",
    "new",
    "solution",
    "might",
    "actually",
    "use",
    "something",
    "called",
    "recursion",
    "sure",
    "yet",
    "see",
    "let",
    "see",
    "works",
    "say",
    "um",
    "get",
    "individual",
    "pieces",
    "number",
    "though",
    "let",
    "go",
    "um",
    "ca",
    "actually",
    "remember",
    "let",
    "take",
    "number",
    "like",
    "299",
    "see",
    "access",
    "individual",
    "pieces",
    "looks",
    "like",
    "figure",
    "get",
    "first",
    "um",
    "digit",
    "numbers",
    "case",
    "probably",
    "know",
    "real",
    "world",
    "would",
    "would",
    "open",
    "new",
    "tab",
    "say",
    "find",
    "um",
    "maybe",
    "find",
    "say",
    "get",
    "first",
    "digit",
    "number",
    "javascript",
    "work",
    "get",
    "second",
    "digit",
    "number",
    "okay",
    "looks",
    "like",
    "turning",
    "string",
    "grabbing",
    "first",
    "digit",
    "converting",
    "number",
    "okay",
    "let",
    "put",
    "num",
    "equal",
    "299",
    "say",
    "num",
    "string",
    "okay",
    "gives",
    "us",
    "299",
    "grab",
    "first",
    "uh",
    "piece",
    "convert",
    "number",
    "quick",
    "way",
    "um",
    "could",
    "put",
    "wrap",
    "around",
    "number",
    "object",
    "turn",
    "back",
    "number",
    "shortcut",
    "put",
    "plus",
    "sign",
    "beginning",
    "automatically",
    "coerces",
    "number",
    "pattern",
    "going",
    "use",
    "going",
    "grab",
    "um",
    "digits",
    "number",
    "number",
    "see",
    "know",
    "multiply",
    "together",
    "basically",
    "thing",
    "curious",
    "whether",
    "uh",
    "okay",
    "three",
    "digits",
    "multiply",
    "three",
    "okay",
    "good",
    "know",
    "could",
    "maybe",
    "know",
    "four",
    "five",
    "six",
    "digits",
    "know",
    "times",
    "times",
    "times",
    "um",
    "something",
    "take",
    "account",
    "already",
    "number",
    "says",
    "return",
    "zero",
    "let",
    "say",
    "first",
    "say",
    "num",
    "less",
    "10",
    "means",
    "digigit",
    "number",
    "going",
    "return",
    "zero",
    "test",
    "get",
    "least",
    "one",
    "correct",
    "passes",
    "digigit",
    "number",
    "got",
    "correct",
    "okay",
    "next",
    "part",
    "let",
    "see",
    "think",
    "convert",
    "number",
    "str",
    "string",
    "maybe",
    "instead",
    "showing",
    "converting",
    "back",
    "number",
    "maybe",
    "take",
    "string",
    "put",
    "array",
    "let",
    "go",
    "ahead",
    "um",
    "string",
    "version",
    "going",
    "num",
    "two",
    "string",
    "string",
    "know",
    "actually",
    "convert",
    "array",
    "say",
    "array",
    "version",
    "going",
    "equal",
    "string",
    "version",
    "um",
    "let",
    "see",
    "actually",
    "ca",
    "remember",
    "exactly",
    "used",
    "let",
    "go",
    "documentation",
    "um",
    "go",
    "string",
    "methods",
    "looking",
    "reason",
    "looking",
    "string",
    "method",
    "trying",
    "convert",
    "string",
    "array",
    "let",
    "go",
    "objects",
    "string",
    "let",
    "look",
    "methods",
    "know",
    "way",
    "turn",
    "array",
    "okay",
    "split",
    "method",
    "yep",
    "need",
    "know",
    "could",
    "think",
    "um",
    "take",
    "string",
    "let",
    "use",
    "example",
    "remember",
    "actually",
    "write",
    "string",
    "literal",
    "um",
    "string",
    "example",
    "take",
    "literal",
    "string",
    "chain",
    "method",
    "top",
    "um",
    "wraps",
    "actual",
    "string",
    "object",
    "methods",
    "automatically",
    "say",
    "split",
    "pass",
    "empty",
    "string",
    "going",
    "split",
    "uh",
    "values",
    "exactly",
    "want",
    "let",
    "go",
    "ahead",
    "see",
    "would",
    "work",
    "say",
    "num",
    "two",
    "string",
    "first",
    "convert",
    "string",
    "say",
    "split",
    "pass",
    "empty",
    "string",
    "going",
    "give",
    "us",
    "um",
    "numbers",
    "um",
    "string",
    "form",
    "right",
    "basically",
    "convert",
    "numbers",
    "multiply",
    "together",
    "good",
    "way",
    "using",
    "reduce",
    "method",
    "chain",
    "one",
    "thing",
    "say",
    "reduce",
    "say",
    "um",
    "accumulator",
    "going",
    "accumulating",
    "multiplication",
    "uh",
    "operation",
    "um",
    "pass",
    "call",
    "back",
    "function",
    "put",
    "accumulator",
    "actual",
    "array",
    "item",
    "number",
    "maybe",
    "pass",
    "num",
    "number",
    "want",
    "accumulate",
    "multiply",
    "equal",
    "going",
    "take",
    "accum",
    "like",
    "whatever",
    "equal",
    "multiply",
    "new",
    "number",
    "store",
    "variable",
    "called",
    "acc",
    "accumulator",
    "multiplied",
    "number",
    "get",
    "answer",
    "162",
    "right",
    "solution",
    "2",
    "9",
    "9",
    "get",
    "162",
    "answer",
    "basically",
    "going",
    "one",
    "step",
    "like",
    "done",
    "also",
    "see",
    "little",
    "bit",
    "clearly",
    "break",
    "steps",
    "let",
    "go",
    "ahead",
    "already",
    "converted",
    "string",
    "want",
    "array",
    "say",
    "split",
    "empty",
    "string",
    "finally",
    "want",
    "get",
    "uh",
    "multiplication",
    "value",
    "going",
    "equal",
    "array",
    "version",
    "ruce",
    "course",
    "accumulator",
    "number",
    "want",
    "return",
    "callback",
    "function",
    "accumulator",
    "multiply",
    "added",
    "sorry",
    "multiplied",
    "number",
    "okay",
    "call",
    "back",
    "function",
    "multiplication",
    "value",
    "get",
    "multiplication",
    "say",
    "multiplication",
    "value",
    "less",
    "10",
    "want",
    "return",
    "true",
    "already",
    "see",
    "one",
    "going",
    "return",
    "multiplication",
    "value",
    "less",
    "10",
    "less",
    "return",
    "true",
    "otherwise",
    "return",
    "false",
    "um",
    "problem",
    "figure",
    "many",
    "times",
    "um",
    "iterate",
    "get",
    "something",
    "less",
    "10",
    "quite",
    "done",
    "solution",
    "yet",
    "believe",
    "recursion",
    "comes",
    "recursion",
    "uh",
    "coding",
    "languages",
    "probably",
    "hardest",
    "concept",
    "could",
    "um",
    "learn",
    "one",
    "beat",
    "understand",
    "fully",
    "um",
    "something",
    "took",
    "long",
    "long",
    "couple",
    "hours",
    "uh",
    "early",
    "journey",
    "fully",
    "understand",
    "like",
    "worked",
    "beat",
    "um",
    "going",
    "show",
    "going",
    "hopefully",
    "actually",
    "work",
    "talking",
    "bunch",
    "nonsense",
    "right",
    "solution",
    "turn",
    "camera",
    "um",
    "realize",
    "dealing",
    "recursion",
    "um",
    "looked",
    "problem",
    "trick",
    "use",
    "recursion",
    "kind",
    "explain",
    "code",
    "high",
    "level",
    "need",
    "understand",
    "exactly",
    "working",
    "recursion",
    "tough",
    "subject",
    "basically",
    "know",
    "go",
    "code",
    "explained",
    "little",
    "bit",
    "earlier",
    "going",
    "give",
    "us",
    "multiplication",
    "value",
    "recursion",
    "know",
    "calling",
    "function",
    "multiple",
    "times",
    "need",
    "stop",
    "condition",
    "okay",
    "stop",
    "condition",
    "um",
    "multiplication",
    "value",
    "greater",
    "equal",
    "10",
    "basically",
    "uh",
    "else",
    "return",
    "say",
    "return",
    "one",
    "plus",
    "uh",
    "persistence",
    "trick",
    "recursion",
    "read",
    "recursive",
    "functions",
    "work",
    "javascript",
    "see",
    "notation",
    "right",
    "basically",
    "know",
    "stop",
    "condition",
    "met",
    "return",
    "value",
    "one",
    "otherwise",
    "going",
    "keep",
    "calling",
    "persistence",
    "function",
    "reach",
    "add",
    "one",
    "return",
    "value",
    "iteration",
    "recursion",
    "going",
    "accumulate",
    "total",
    "value",
    "many",
    "times",
    "went",
    "little",
    "bit",
    "confusing",
    "really",
    "confusing",
    "brush",
    "recursion",
    "little",
    "bit",
    "solve",
    "problem",
    "basically",
    "think",
    "best",
    "solution",
    "going",
    "find",
    "problem",
    "let",
    "go",
    "ahead",
    "attempt",
    "passed",
    "let",
    "see",
    "people",
    "solved",
    "maybe",
    "way",
    "without",
    "recursion",
    "um",
    "nevertheless",
    "probably",
    "efficient",
    "solution",
    "okay",
    "actually",
    "first",
    "solution",
    "might",
    "simple",
    "um",
    "used",
    "use",
    "sort",
    "recur",
    "verion",
    "simply",
    "um",
    "using",
    "reduce",
    "method",
    "kind",
    "used",
    "exact",
    "thing",
    "um",
    "looping",
    "numb",
    "numb",
    "counter",
    "greater",
    "one",
    "uses",
    "times",
    "variable",
    "kind",
    "collect",
    "number",
    "times",
    "gone",
    "um",
    "one",
    "right",
    "like",
    "concise",
    "solution",
    "could",
    "possibly",
    "get",
    "basically",
    "um",
    "little",
    "bit",
    "syntactically",
    "compressed",
    "lot",
    "little",
    "javascript",
    "tricks",
    "going",
    "see",
    "one",
    "plus",
    "persistence",
    "function",
    "recursing",
    "would",
    "clever",
    "solution",
    "see",
    "um",
    "recursion",
    "tough",
    "subject",
    "would",
    "expect",
    "um",
    "beginner",
    "watching",
    "really",
    "understand",
    "course",
    "could",
    "solved",
    "way",
    "require",
    "recursion",
    "like",
    "used",
    "okay",
    "7",
    "kyu",
    "um",
    "problem",
    "little",
    "bit",
    "easier",
    "let",
    "see",
    "case",
    "says",
    "atm",
    "machines",
    "allow",
    "four",
    "pin",
    "codes",
    "pin",
    "codes",
    "contain",
    "anything",
    "exactly",
    "four",
    "digits",
    "exactly",
    "six",
    "digits",
    "function",
    "past",
    "valid",
    "pin",
    "string",
    "return",
    "true",
    "else",
    "return",
    "false",
    "one",
    "looks",
    "pretty",
    "easy",
    "going",
    "using",
    "regular",
    "expressions",
    "um",
    "exactly",
    "four",
    "digits",
    "um",
    "four",
    "digits",
    "alpha",
    "numeric",
    "letter",
    "valid",
    "one",
    "pretty",
    "easy",
    "go",
    "actually",
    "look",
    "um",
    "uh",
    "regular",
    "expressions",
    "little",
    "bit",
    "let",
    "say",
    "string",
    "string",
    "uh",
    "four",
    "digits",
    "want",
    "match",
    "regular",
    "expression",
    "sort",
    "want",
    "looking",
    "numbers",
    "0",
    "9",
    "want",
    "either",
    "four",
    "six",
    "way",
    "basically",
    "think",
    "think",
    "wrap",
    "parentheses",
    "repeat",
    "instead",
    "four",
    "pass",
    "six",
    "let",
    "see",
    "works",
    "add",
    "one",
    "match",
    "add",
    "two",
    "um",
    "working",
    "could",
    "separate",
    "multiple",
    "regular",
    "expressions",
    "ca",
    "remember",
    "exactly",
    "um",
    "case",
    "looking",
    "number",
    "exclude",
    "letters",
    "automatically",
    "quantity",
    "exactly",
    "four",
    "could",
    "even",
    "specific",
    "saying",
    "start",
    "line",
    "end",
    "line",
    "dollar",
    "sign",
    "basically",
    "matching",
    "good",
    "come",
    "anything",
    "put",
    "uh",
    "five",
    "going",
    "get",
    "answer",
    "null",
    "know",
    "get",
    "answer",
    "null",
    "correct",
    "let",
    "go",
    "ahead",
    "write",
    "two",
    "regular",
    "expressions",
    "say",
    "four",
    "digits",
    "regular",
    "expression",
    "going",
    "equal",
    "wrote",
    "let",
    "paste",
    "come",
    "say",
    "six",
    "digits",
    "regular",
    "expression",
    "change",
    "right",
    "six",
    "either",
    "matching",
    "numbers",
    "uh",
    "quantity",
    "four",
    "numbers",
    "quantity",
    "six",
    "basically",
    "return",
    "know",
    "null",
    "means",
    "match",
    "either",
    "answer",
    "false",
    "either",
    "true",
    "know",
    "null",
    "return",
    "true",
    "let",
    "let",
    "say",
    "want",
    "return",
    "um",
    "four",
    "digits",
    "r",
    "rex",
    "um",
    "actually",
    "match",
    "pin",
    "code",
    "let",
    "real",
    "quick",
    "say",
    "result",
    "one",
    "equals",
    "remember",
    "take",
    "string",
    "pin",
    "number",
    "um",
    "sure",
    "string",
    "okay",
    "pasted",
    "string",
    "value",
    "good",
    "say",
    "uh",
    "pin",
    "match",
    "pass",
    "four",
    "digits",
    "regular",
    "expression",
    "might",
    "want",
    "look",
    "result",
    "number",
    "two",
    "pass",
    "six",
    "digits",
    "regular",
    "expression",
    "say",
    "say",
    "um",
    "return",
    "result",
    "one",
    "length",
    "greater",
    "zero",
    "null",
    "array",
    "check",
    "basically",
    "say",
    "result",
    "1",
    "equals",
    "null",
    "result",
    "2",
    "equals",
    "null",
    "want",
    "return",
    "false",
    "otherwise",
    "want",
    "return",
    "true",
    "matched",
    "one",
    "null",
    "values",
    "um",
    "default",
    "falsy",
    "values",
    "actually",
    "remove",
    "um",
    "say",
    "result",
    "result",
    "see",
    "passed",
    "uh",
    "simplify",
    "even",
    "uh",
    "say",
    "let",
    "see",
    "return",
    "expression",
    "ca",
    "spell",
    "saying",
    "equal",
    "null",
    "uh",
    "return",
    "false",
    "let",
    "see",
    "works",
    "may",
    "actually",
    "opposite",
    "yeah",
    "going",
    "opposite",
    "um",
    "let",
    "see",
    "reverse",
    "wrapping",
    "parenthesis",
    "kind",
    "reversing",
    "result",
    "time",
    "pass",
    "decent",
    "solution",
    "guarantee",
    "going",
    "solutions",
    "little",
    "simpler",
    "two",
    "different",
    "regular",
    "expressions",
    "definitely",
    "going",
    "solution",
    "single",
    "regular",
    "expression",
    "checks",
    "point",
    "get",
    "okay",
    "one",
    "would",
    "best",
    "one",
    "uh",
    "back",
    "slash",
    "represents",
    "digits",
    "thing",
    "brackets",
    "0",
    "9",
    "see",
    "thing",
    "kind",
    "trying",
    "must",
    "messed",
    "part",
    "syntax",
    "um",
    "testing",
    "regular",
    "expression",
    "um",
    "basically",
    "um",
    "best",
    "solution",
    "one",
    "recommend",
    "using",
    "time",
    "actually",
    "figure",
    "write",
    "regular",
    "expression",
    "covers",
    "cases",
    "another",
    "regular",
    "expression",
    "one",
    "even",
    "easier",
    "um",
    "8",
    "kyu",
    "says",
    "task",
    "simply",
    "count",
    "total",
    "number",
    "lowercase",
    "letters",
    "string",
    "okay",
    "let",
    "take",
    "one",
    "complicated",
    "ones",
    "take",
    "um",
    "little",
    "sandbox",
    "using",
    "paste",
    "string",
    "start",
    "regular",
    "expression",
    "case",
    "counting",
    "number",
    "results",
    "probably",
    "want",
    "pass",
    "global",
    "flag",
    "regular",
    "expression",
    "put",
    "end",
    "want",
    "look",
    "z",
    "uh",
    "lowercase",
    "letters",
    "basically",
    "going",
    "give",
    "us",
    "answer",
    "believe",
    "pass",
    "z",
    "pass",
    "global",
    "take",
    "going",
    "match",
    "first",
    "lowercase",
    "letter",
    "put",
    "back",
    "give",
    "us",
    "pretty",
    "much",
    "need",
    "count",
    "length",
    "array",
    "let",
    "say",
    "return",
    "string",
    "match",
    "pass",
    "lowercase",
    "lowercase",
    "z",
    "pass",
    "global",
    "option",
    "return",
    "length",
    "array",
    "looks",
    "like",
    "failed",
    "one",
    "um",
    "read",
    "property",
    "length",
    "null",
    "case",
    "probably",
    "array",
    "getting",
    "right",
    "nothing",
    "lowercase",
    "letters",
    "going",
    "get",
    "valid",
    "array",
    "see",
    "take",
    "lowercase",
    "letters",
    "going",
    "get",
    "value",
    "null",
    "need",
    "handle",
    "instead",
    "tacking",
    "length",
    "first",
    "check",
    "whether",
    "truthy",
    "value",
    "let",
    "see",
    "could",
    "kind",
    "simply",
    "use",
    "turner",
    "operator",
    "c",
    "um",
    "basically",
    "say",
    "valid",
    "expression",
    "long",
    "equal",
    "null",
    "going",
    "get",
    "put",
    "um",
    "part",
    "turner",
    "operator",
    "let",
    "let",
    "go",
    "ahead",
    "save",
    "result",
    "result",
    "going",
    "equal",
    "regular",
    "expression",
    "evaluation",
    "um",
    "going",
    "say",
    "result",
    "truthy",
    "value",
    "going",
    "return",
    "result",
    "length",
    "otherwise",
    "going",
    "return",
    "false",
    "something",
    "like",
    "let",
    "see",
    "says",
    "instructions",
    "okay",
    "nothing",
    "want",
    "return",
    "zero",
    "sorry",
    "false",
    "zero",
    "right",
    "passed",
    "time",
    "let",
    "clean",
    "attempt",
    "cool",
    "one",
    "rather",
    "simple",
    "little",
    "bit",
    "easier",
    "previous",
    "regular",
    "expression",
    "said",
    "lesson",
    "need",
    "necessarily",
    "know",
    "like",
    "details",
    "writing",
    "regular",
    "expressions",
    "good",
    "able",
    "read",
    "wanted",
    "go",
    "example",
    "next",
    "one",
    "going",
    "look",
    "basic",
    "dates",
    "one",
    "asking",
    "date",
    "equal",
    "today",
    "says",
    "write",
    "simple",
    "function",
    "takes",
    "parameter",
    "date",
    "object",
    "um",
    "takes",
    "parameter",
    "date",
    "object",
    "returns",
    "boolean",
    "value",
    "representing",
    "whether",
    "date",
    "today",
    "okay",
    "last",
    "part",
    "basically",
    "telling",
    "us",
    "like",
    "hey",
    "um",
    "going",
    "know",
    "10th",
    "january",
    "10th",
    "february",
    "ca",
    "look",
    "day",
    "month",
    "um",
    "look",
    "exclusively",
    "let",
    "make",
    "bunch",
    "variables",
    "um",
    "check",
    "day",
    "date",
    "passed",
    "use",
    "get",
    "date",
    "method",
    "going",
    "give",
    "us",
    "day",
    "month",
    "right",
    "check",
    "month",
    "going",
    "date",
    "month",
    "believe",
    "go",
    "date",
    "methods",
    "go",
    "um",
    "mdn",
    "document",
    "ation",
    "go",
    "objects",
    "go",
    "date",
    "see",
    "get",
    "month",
    "method",
    "um",
    "get",
    "full",
    "year",
    "method",
    "get",
    "date",
    "method",
    "might",
    "say",
    "get",
    "day",
    "um",
    "day",
    "week",
    "day",
    "month",
    "need",
    "get",
    "date",
    "instead",
    "day",
    "month",
    "year",
    "zero",
    "indexed",
    "important",
    "remember",
    "january",
    "going",
    "zero",
    "uh",
    "check",
    "year",
    "going",
    "date",
    "getet",
    "full",
    "year",
    "right",
    "uh",
    "date",
    "today",
    "going",
    "similar",
    "let",
    "copy",
    "code",
    "say",
    "today",
    "instead",
    "check",
    "replace",
    "um",
    "actual",
    "current",
    "date",
    "today",
    "going",
    "equal",
    "new",
    "date",
    "initialize",
    "pass",
    "uh",
    "place",
    "date",
    "return",
    "um",
    "check",
    "day",
    "equals",
    "today",
    "day",
    "ones",
    "match",
    "let",
    "write",
    "right",
    "little",
    "bit",
    "long",
    "expression",
    "work",
    "right",
    "passed",
    "quickest",
    "way",
    "um",
    "looks",
    "like",
    "solution",
    "creating",
    "new",
    "date",
    "converting",
    "date",
    "string",
    "checking",
    "equal",
    "date",
    "supplied",
    "date",
    "string",
    "actually",
    "know",
    "could",
    "give",
    "different",
    "times",
    "guess",
    "matches",
    "uh",
    "different",
    "times",
    "day",
    "let",
    "try",
    "real",
    "quick",
    "um",
    "console",
    "see",
    "true",
    "set",
    "date",
    "set",
    "b",
    "date",
    "see",
    "b",
    "equals",
    "false",
    "go",
    "um",
    "obviously",
    "going",
    "equal",
    "value",
    "date",
    "milliseconds",
    "since",
    "whatever",
    "january",
    "1st",
    "1970",
    "midnight",
    "um",
    "convert",
    "string",
    "two",
    "string",
    "try",
    "string",
    "going",
    "give",
    "false",
    "value",
    "sure",
    "going",
    "oh",
    "date",
    "string",
    "okay",
    "went",
    "wrong",
    "using",
    "date",
    "string",
    "work",
    "okay",
    "equals",
    "true",
    "let",
    "take",
    "look",
    "um",
    "method",
    "documentation",
    "says",
    "two",
    "date",
    "string",
    "one",
    "covered",
    "lessons",
    "use",
    "says",
    "returns",
    "date",
    "portion",
    "date",
    "object",
    "uh",
    "basically",
    "going",
    "strip",
    "time",
    "um",
    "check",
    "day",
    "good",
    "solution",
    "think",
    "lot",
    "concise",
    "checked",
    "um",
    "different",
    "methods",
    "covered",
    "lessons",
    "right",
    "let",
    "go",
    "next",
    "challenge",
    "alternate",
    "capitalization",
    "given",
    "string",
    "capitalize",
    "letter",
    "letter",
    "occupy",
    "even",
    "indexes",
    "odd",
    "indexes",
    "separately",
    "return",
    "shown",
    "index",
    "zero",
    "considered",
    "even",
    "okay",
    "going",
    "return",
    "basically",
    "two",
    "strings",
    "argument",
    "input",
    "always",
    "going",
    "lowercase",
    "spaces",
    "okay",
    "okay",
    "solve",
    "first",
    "need",
    "get",
    "array",
    "need",
    "string",
    "array",
    "uh",
    "capitalize",
    "separately",
    "combine",
    "back",
    "string",
    "assign",
    "different",
    "array",
    "values",
    "going",
    "look",
    "um",
    "let",
    "see",
    "say",
    "array",
    "equal",
    "string",
    "dosit",
    "going",
    "split",
    "empty",
    "string",
    "separate",
    "characters",
    "comma",
    "right",
    "console",
    "logged",
    "going",
    "get",
    "string",
    "right",
    "got",
    "letter",
    "uh",
    "broken",
    "know",
    "take",
    "array",
    "need",
    "capitalize",
    "two",
    "different",
    "ways",
    "say",
    "array",
    "one",
    "going",
    "string",
    "dosit",
    "also",
    "array",
    "2",
    "going",
    "loop",
    "arrays",
    "array",
    "say",
    "item",
    "also",
    "probably",
    "want",
    "index",
    "got",
    "figure",
    "even",
    "odd",
    "say",
    "array",
    "two",
    "let",
    "quite",
    "yet",
    "figure",
    "one",
    "first",
    "array",
    "one",
    "want",
    "check",
    "um",
    "index",
    "say",
    "even",
    "even",
    "capitalization",
    "ca",
    "spell",
    "right",
    "even",
    "would",
    "include",
    "zeros",
    "um",
    "find",
    "number",
    "even",
    "well",
    "could",
    "use",
    "modulus",
    "2",
    "operator",
    "came",
    "little",
    "playground",
    "console",
    "said",
    "okay",
    "0",
    "modulus",
    "2",
    "going",
    "zero",
    "one",
    "modulus",
    "2",
    "going",
    "one",
    "two",
    "modulus",
    "2",
    "zero",
    "three",
    "modulus",
    "2",
    "one",
    "basically",
    "anything",
    "modulus",
    "2",
    "returns",
    "us",
    "zero",
    "going",
    "even",
    "everything",
    "else",
    "going",
    "odd",
    "say",
    "index",
    "modulus",
    "2",
    "equals",
    "0",
    "even",
    "case",
    "say",
    "array",
    "one",
    "index",
    "looking",
    "um",
    "want",
    "set",
    "uppercase",
    "okay",
    "got",
    "array",
    "one",
    "completed",
    "let",
    "go",
    "ahead",
    "console",
    "log",
    "see",
    "correctly",
    "correctly",
    "know",
    "actually",
    "thinking",
    "already",
    "array",
    "item",
    "need",
    "take",
    "item",
    "make",
    "uppercase",
    "think",
    "okay",
    "problem",
    "trying",
    "modify",
    "actual",
    "item",
    "going",
    "modify",
    "original",
    "array",
    "um",
    "realized",
    "go",
    "array",
    "methods",
    "um",
    "go",
    "javascript",
    "objects",
    "go",
    "array",
    "going",
    "see",
    "look",
    "method",
    "right",
    "callback",
    "function",
    "takes",
    "current",
    "value",
    "index",
    "array",
    "want",
    "actually",
    "grab",
    "third",
    "parameter",
    "modify",
    "within",
    "uh",
    "problem",
    "pass",
    "item",
    "index",
    "original",
    "array",
    "case",
    "take",
    "original",
    "array",
    "pass",
    "index",
    "set",
    "equal",
    "item",
    "two",
    "upper",
    "case",
    "believe",
    "one",
    "work",
    "see",
    "see",
    "capitalize",
    "first",
    "even",
    "lower",
    "case",
    "second",
    "uppercase",
    "third",
    "um",
    "working",
    "um",
    "believe",
    "right",
    "let",
    "check",
    "one",
    "time",
    "um",
    "capital",
    "capitalize",
    "letters",
    "occupy",
    "even",
    "indexes",
    "index",
    "zero",
    "considered",
    "even",
    "okay",
    "correctly",
    "array",
    "one",
    "done",
    "basically",
    "odd",
    "capitalization",
    "change",
    "array",
    "two",
    "instead",
    "saying",
    "equal",
    "zero",
    "say",
    "equal",
    "zero",
    "need",
    "return",
    "final",
    "array",
    "pass",
    "array",
    "one",
    "array",
    "two",
    "think",
    "get",
    "us",
    "answer",
    "u",
    "maybe",
    "wrong",
    "order",
    "let",
    "see",
    "oh",
    "sorry",
    "correctly",
    "arrays",
    "um",
    "split",
    "ind",
    "individual",
    "letters",
    "convert",
    "back",
    "strings",
    "let",
    "real",
    "quick",
    "um",
    "array",
    "one",
    "string",
    "going",
    "array",
    "one",
    "um",
    "join",
    "empty",
    "string",
    "actually",
    "yeah",
    "believe",
    "empty",
    "string",
    "uh",
    "join",
    "together",
    "thing",
    "array",
    "two",
    "string",
    "pass",
    "array",
    "two",
    "return",
    "like",
    "see",
    "get",
    "right",
    "passed",
    "time",
    "let",
    "open",
    "review",
    "see",
    "going",
    "first",
    "take",
    "um",
    "strings",
    "turn",
    "array",
    "go",
    "back",
    "sort",
    "string",
    "say",
    "split",
    "use",
    "empty",
    "character",
    "going",
    "put",
    "array",
    "go",
    "loop",
    "existing",
    "array",
    "method",
    "know",
    "callback",
    "function",
    "using",
    "going",
    "pass",
    "item",
    "looking",
    "index",
    "item",
    "original",
    "array",
    "actually",
    "modify",
    "within",
    "loop",
    "knew",
    "looked",
    "documentation",
    "um",
    "otherwise",
    "uh",
    "probably",
    "would",
    "regular",
    "four",
    "loop",
    "acts",
    "little",
    "bit",
    "different",
    "4",
    "anyways",
    "going",
    "asking",
    "index",
    "uh",
    "modulus",
    "2",
    "equals",
    "z",
    "indicates",
    "even",
    "number",
    "uh",
    "equals",
    "even",
    "number",
    "take",
    "original",
    "array",
    "pass",
    "index",
    "brackets",
    "grab",
    "item",
    "set",
    "equal",
    "item",
    "uppercase",
    "form",
    "odd",
    "capitalization",
    "um",
    "basically",
    "opposite",
    "modulus",
    "2",
    "equal",
    "zero",
    "want",
    "make",
    "uppercase",
    "finally",
    "join",
    "back",
    "together",
    "um",
    "go",
    "array",
    "split",
    "array",
    "add",
    "join",
    "empty",
    "character",
    "joins",
    "back",
    "together",
    "original",
    "string",
    "obviously",
    "capitalized",
    "middle",
    "join",
    "back",
    "together",
    "place",
    "new",
    "array",
    "return",
    "array",
    "give",
    "us",
    "answer",
    "okay",
    "think",
    "getting",
    "end",
    "one",
    "last",
    "ones",
    "last",
    "one",
    "uh",
    "says",
    "given",
    "number",
    "return",
    "maximum",
    "number",
    "could",
    "formed",
    "digits",
    "number",
    "given",
    "natural",
    "numbers",
    "passed",
    "function",
    "numbers",
    "contain",
    "digits",
    "0",
    "n",
    "inclusive",
    "digit",
    "duplications",
    "could",
    "occur",
    "also",
    "consider",
    "forming",
    "largest",
    "okay",
    "good",
    "hint",
    "us",
    "remember",
    "example",
    "uh",
    "three",
    "goes",
    "first",
    "two",
    "goes",
    "second",
    "one",
    "goes",
    "third",
    "makes",
    "sense",
    "maximum",
    "number",
    "could",
    "form",
    "okay",
    "basically",
    "take",
    "number",
    "order",
    "greatest",
    "least",
    "think",
    "good",
    "way",
    "might",
    "convert",
    "array",
    "possibly",
    "basically",
    "asking",
    "us",
    "think",
    "um",
    "know",
    "numbers",
    "going",
    "uh",
    "descending",
    "order",
    "largest",
    "one",
    "first",
    "basically",
    "asking",
    "us",
    "sort",
    "array",
    "know",
    "take",
    "number",
    "convert",
    "string",
    "separate",
    "array",
    "sort",
    "array",
    "um",
    "got",
    "answer",
    "sort",
    "method",
    "correctly",
    "numbers",
    "let",
    "type",
    "google",
    "um",
    "algorithm",
    "sort",
    "array",
    "numerically",
    "javascript",
    "see",
    "answers",
    "says",
    "sort",
    "array",
    "integers",
    "correctly",
    "let",
    "see",
    "okay",
    "use",
    "sort",
    "uh",
    "function",
    "actually",
    "use",
    "pass",
    "call",
    "back",
    "um",
    "compare",
    "two",
    "numbers",
    "um",
    "let",
    "see",
    "sort",
    "method",
    "takes",
    "compare",
    "function",
    "okay",
    "reading",
    "incorrectly",
    "take",
    "call",
    "back",
    "look",
    "compare",
    "function",
    "return",
    "greatest",
    "number",
    "let",
    "go",
    "ahead",
    "uh",
    "practice",
    "real",
    "quick",
    "let",
    "say",
    "array",
    "numbers",
    "two",
    "631",
    "want",
    "sort",
    "pass",
    "single",
    "num",
    "want",
    "say",
    "let",
    "see",
    "pass",
    "call",
    "back",
    "let",
    "look",
    "first",
    "element",
    "second",
    "element",
    "going",
    "pass",
    "go",
    "little",
    "playground",
    "one",
    "number",
    "first",
    "second",
    "element",
    "second",
    "element",
    "greater",
    "first",
    "um",
    "return",
    "true",
    "believe",
    "let",
    "see",
    "stack",
    "overflow",
    "answer",
    "says",
    "return",
    "minus",
    "b",
    "actually",
    "way",
    "around",
    "greater",
    "b",
    "um",
    "return",
    "true",
    "going",
    "actually",
    "sort",
    "array",
    "us",
    "let",
    "test",
    "real",
    "quick",
    "want",
    "return",
    "first",
    "2",
    "sorted",
    "ascending",
    "order",
    "wonder",
    "take",
    "second",
    "minus",
    "first",
    "okay",
    "going",
    "descending",
    "order",
    "want",
    "second",
    "minus",
    "first",
    "problem",
    "right",
    "first",
    "thing",
    "need",
    "get",
    "string",
    "going",
    "try",
    "one",
    "line",
    "help",
    "us",
    "kind",
    "visualize",
    "chaining",
    "method",
    "together",
    "going",
    "return",
    "n",
    "uh",
    "two",
    "string",
    "okay",
    "converts",
    "string",
    "want",
    "split",
    "array",
    "got",
    "array",
    "numbers",
    "want",
    "sort",
    "pass",
    "first",
    "number",
    "first",
    "number",
    "second",
    "number",
    "want",
    "return",
    "second",
    "minus",
    "first",
    "okay",
    "going",
    "give",
    "us",
    "um",
    "sorted",
    "array",
    "numbers",
    "maybe",
    "wo",
    "um",
    "let",
    "store",
    "result",
    "result",
    "see",
    "far",
    "test",
    "see",
    "prints",
    "console",
    "descending",
    "order",
    "array",
    "know",
    "take",
    "array",
    "numbers",
    "actually",
    "um",
    "combine",
    "together",
    "join",
    "maybe",
    "need",
    "end",
    "hold",
    "one",
    "second",
    "let",
    "return",
    "let",
    "let",
    "keep",
    "result",
    "end",
    "going",
    "break",
    "um",
    "second",
    "actually",
    "uh",
    "put",
    "onto",
    "separate",
    "lines",
    "say",
    "split",
    "sort",
    "last",
    "thing",
    "want",
    "got",
    "descending",
    "um",
    "array",
    "join",
    "back",
    "together",
    "string",
    "going",
    "give",
    "us",
    "one",
    "big",
    "number",
    "need",
    "convert",
    "number",
    "add",
    "plus",
    "sign",
    "beginning",
    "let",
    "see",
    "result",
    "equals",
    "looks",
    "like",
    "getting",
    "correct",
    "number",
    "return",
    "result",
    "even",
    "need",
    "store",
    "variable",
    "return",
    "let",
    "see",
    "works",
    "looks",
    "like",
    "passed",
    "everything",
    "indentation",
    "really",
    "matter",
    "um",
    "chaining",
    "methods",
    "together",
    "could",
    "certainly",
    "broken",
    "separate",
    "steps",
    "let",
    "attempt",
    "looks",
    "like",
    "passed",
    "everything",
    "see",
    "um",
    "others",
    "use",
    "uh",
    "solve",
    "problem",
    "okay",
    "person",
    "um",
    "pass",
    "sort",
    "call",
    "back",
    "passed",
    "um",
    "function",
    "whatsoever",
    "going",
    "default",
    "ascending",
    "order",
    "saw",
    "says",
    "um",
    "default",
    "sort",
    "order",
    "ascending",
    "going",
    "split",
    "array",
    "going",
    "sort",
    "ascending",
    "going",
    "use",
    "reverse",
    "array",
    "method",
    "make",
    "descending",
    "going",
    "join",
    "together",
    "wrap",
    "number",
    "adding",
    "plus",
    "beginning",
    "entire",
    "expression",
    "see",
    "believe",
    "yeah",
    "one",
    "right",
    "exact",
    "solution",
    "used",
    "pretty",
    "good",
    "um",
    "pretty",
    "happy",
    "one",
    "think",
    "done",
    "problems",
    "um",
    "hopefully",
    "learned",
    "little",
    "bit",
    "know",
    "uh",
    "complicated",
    "challenging",
    "would",
    "expect",
    "beginner",
    "certainly",
    "talked",
    "recursion",
    "little",
    "bit",
    "getting",
    "little",
    "bit",
    "pay",
    "grade",
    "someone",
    "starting",
    "important",
    "topic",
    "explore",
    "kind",
    "understand",
    "um",
    "definitely",
    "come",
    "sort",
    "coding",
    "interview",
    "um",
    "yeah",
    "hopefully",
    "enjoyed",
    "um",
    "care",
    "drop",
    "like",
    "video",
    "really",
    "appreciate",
    "subscribe",
    "channel",
    "future",
    "lessons",
    "um",
    "hit",
    "twitter",
    "zgd",
    "uh",
    "tell",
    "thought",
    "video",
    "um",
    "challenges",
    "went",
    "right",
    "see",
    "next",
    "lesson",
    "believe",
    "lesson",
    "seven",
    "html",
    "crash",
    "course",
    "really",
    "excited",
    "walk",
    "want",
    "show",
    "exactly",
    "going",
    "build",
    "next",
    "couple",
    "videos",
    "ultimate",
    "challenge",
    "trying",
    "create",
    "got",
    "bunch",
    "buttons",
    "right",
    "click",
    "random",
    "meme",
    "going",
    "shown",
    "screen",
    "joke",
    "displayed",
    "screen",
    "quote",
    "riddle",
    "going",
    "get",
    "riddle",
    "reveal",
    "answer",
    "going",
    "really",
    "fun",
    "project",
    "get",
    "learn",
    "little",
    "bit",
    "html",
    "notice",
    "styled",
    "pretty",
    "nicely",
    "actually",
    "css",
    "going",
    "covering",
    "um",
    "lesson",
    "number",
    "seven",
    "series",
    "prior",
    "lessons",
    "series",
    "talking",
    "lot",
    "javascript",
    "basically",
    "program",
    "general",
    "going",
    "jump",
    "html",
    "next",
    "uh",
    "lesson",
    "series",
    "going",
    "jump",
    "css",
    "ultimately",
    "going",
    "complete",
    "introduction",
    "web",
    "development",
    "dive",
    "details",
    "html",
    "want",
    "start",
    "little",
    "bit",
    "analogy",
    "help",
    "us",
    "uh",
    "kind",
    "going",
    "forward",
    "crash",
    "course",
    "also",
    "css",
    "one",
    "next",
    "lesson",
    "analogy",
    "building",
    "house",
    "building",
    "house",
    "basically",
    "three",
    "steps",
    "first",
    "build",
    "structure",
    "would",
    "wood",
    "concrete",
    "brick",
    "roofing",
    "kind",
    "stuff",
    "set",
    "function",
    "house",
    "would",
    "plumbing",
    "electric",
    "water",
    "lines",
    "kind",
    "stuff",
    "go",
    "house",
    "make",
    "functional",
    "finally",
    "third",
    "step",
    "make",
    "look",
    "good",
    "obviously",
    "want",
    "build",
    "house",
    "look",
    "good",
    "want",
    "paint",
    "correctly",
    "want",
    "landscaping",
    "around",
    "put",
    "siding",
    "stuff",
    "important",
    "market",
    "value",
    "house",
    "house",
    "website",
    "structure",
    "would",
    "html",
    "function",
    "uh",
    "electric",
    "plumbing",
    "kind",
    "stuff",
    "would",
    "javascript",
    "styling",
    "paint",
    "landscaping",
    "would",
    "css",
    "could",
    "live",
    "house",
    "structure",
    "html",
    "um",
    "would",
    "function",
    "would",
    "running",
    "water",
    "would",
    "heat",
    "anything",
    "makes",
    "house",
    "livable",
    "certainly",
    "could",
    "live",
    "um",
    "house",
    "roof",
    "head",
    "add",
    "function",
    "could",
    "live",
    "know",
    "add",
    "electric",
    "plumbing",
    "got",
    "house",
    "functioning",
    "one",
    "worth",
    "much",
    "went",
    "try",
    "sell",
    "painted",
    "put",
    "landscaping",
    "around",
    "made",
    "look",
    "attractive",
    "another",
    "buyer",
    "css",
    "comes",
    "styling",
    "comes",
    "ultimately",
    "goal",
    "analogy",
    "say",
    "html",
    "true",
    "requirement",
    "web",
    "page",
    "want",
    "anything",
    "useful",
    "got",
    "add",
    "javascript",
    "want",
    "make",
    "presentable",
    "people",
    "users",
    "add",
    "css",
    "nice",
    "analogy",
    "remember",
    "everything",
    "relates",
    "html",
    "css",
    "javascript",
    "play",
    "nicely",
    "together",
    "create",
    "full",
    "user",
    "experience",
    "web",
    "work",
    "together",
    "going",
    "skipping",
    "css",
    "part",
    "lesson",
    "like",
    "said",
    "learned",
    "lot",
    "javascript",
    "prior",
    "uh",
    "couple",
    "lessons",
    "full",
    "stack",
    "road",
    "map",
    "series",
    "um",
    "going",
    "learn",
    "html",
    "basically",
    "going",
    "focusing",
    "two",
    "interact",
    "hint",
    "going",
    "big",
    "conversation",
    "something",
    "called",
    "document",
    "object",
    "model",
    "dom",
    "basically",
    "model",
    "represents",
    "html",
    "allows",
    "us",
    "plug",
    "uh",
    "javascript",
    "html",
    "make",
    "fun",
    "functional",
    "point",
    "getting",
    "detailed",
    "uh",
    "get",
    "second",
    "first",
    "need",
    "understand",
    "html",
    "work",
    "write",
    "first",
    "thing",
    "ask",
    "html",
    "stands",
    "hypertext",
    "markup",
    "language",
    "despite",
    "last",
    "word",
    "language",
    "generally",
    "considered",
    "programming",
    "language",
    "like",
    "something",
    "u",
    "like",
    "javascript",
    "working",
    "something",
    "allows",
    "structure",
    "um",
    "text",
    "different",
    "components",
    "going",
    "put",
    "web",
    "page",
    "programming",
    "language",
    "ca",
    "add",
    "whole",
    "lot",
    "logic",
    "behind",
    "scenes",
    "make",
    "things",
    "dynamic",
    "without",
    "adding",
    "javascript",
    "ton",
    "talk",
    "html",
    "similar",
    "handling",
    "concepts",
    "within",
    "series",
    "trying",
    "get",
    "absolutely",
    "everything",
    "super",
    "deep",
    "dive",
    "goal",
    "get",
    "exposed",
    "learning",
    "essential",
    "concepts",
    "html",
    "things",
    "absolutely",
    "know",
    "build",
    "web",
    "applications",
    "think",
    "great",
    "place",
    "start",
    "understand",
    "overall",
    "structure",
    "html",
    "document",
    "something",
    "understand",
    "every",
    "browser",
    "tab",
    "open",
    "going",
    "one",
    "one",
    "html",
    "document",
    "call",
    "within",
    "one",
    "document",
    "follows",
    "standard",
    "know",
    "boiler",
    "plate",
    "call",
    "structure",
    "structure",
    "going",
    "put",
    "screen",
    "right",
    "going",
    "basic",
    "way",
    "write",
    "html",
    "document",
    "everything",
    "within",
    "html",
    "tags",
    "call",
    "tags",
    "um",
    "going",
    "define",
    "whole",
    "document",
    "within",
    "document",
    "head",
    "tag",
    "site",
    "title",
    "look",
    "browser",
    "tab",
    "um",
    "know",
    "name",
    "name",
    "see",
    "within",
    "browser",
    "tab",
    "defined",
    "title",
    "within",
    "head",
    "things",
    "go",
    "head",
    "html",
    "document",
    "things",
    "like",
    "um",
    "different",
    "stylesheets",
    "uh",
    "meta",
    "tags",
    "kind",
    "stuff",
    "going",
    "get",
    "much",
    "detail",
    "lesson",
    "going",
    "focusing",
    "everything",
    "within",
    "body",
    "tag",
    "going",
    "represent",
    "bulk",
    "html",
    "document",
    "going",
    "represent",
    "stuff",
    "actually",
    "seeing",
    "web",
    "page",
    "well",
    "thing",
    "screen",
    "right",
    "going",
    "represent",
    "basic",
    "form",
    "html",
    "document",
    "standard",
    "boiler",
    "plate",
    "probably",
    "going",
    "see",
    "going",
    "put",
    "right",
    "boilerplate",
    "html",
    "document",
    "um",
    "pretty",
    "much",
    "everything",
    "need",
    "learn",
    "html",
    "css",
    "javascript",
    "going",
    "go",
    "absolutely",
    "everything",
    "seeing",
    "want",
    "cover",
    "things",
    "important",
    "um",
    "going",
    "actually",
    "get",
    "writing",
    "notice",
    "see",
    "within",
    "head",
    "see",
    "link",
    "tag",
    "see",
    "um",
    "references",
    "something",
    "called",
    "styles",
    "sheet",
    "gives",
    "file",
    "passed",
    "actually",
    "called",
    "css",
    "document",
    "going",
    "fed",
    "html",
    "actually",
    "style",
    "look",
    "uh",
    "document",
    "going",
    "see",
    "script",
    "tag",
    "represents",
    "javascript",
    "connected",
    "html",
    "gives",
    "function",
    "case",
    "going",
    "working",
    "environment",
    "called",
    "codeen",
    "got",
    "screen",
    "basic",
    "code",
    "pen",
    "document",
    "suggest",
    "create",
    "account",
    "free",
    "using",
    "throughout",
    "uh",
    "specific",
    "lesson",
    "html",
    "look",
    "left",
    "side",
    "see",
    "html",
    "css",
    "javascript",
    "going",
    "back",
    "boil",
    "plate",
    "showed",
    "screen",
    "basically",
    "beginner",
    "friendly",
    "way",
    "write",
    "code",
    "pen",
    "already",
    "taken",
    "care",
    "connecting",
    "everything",
    "css",
    "javascript",
    "automatically",
    "connected",
    "html",
    "within",
    "html",
    "area",
    "actually",
    "going",
    "filling",
    "body",
    "know",
    "talked",
    "whole",
    "html",
    "document",
    "head",
    "body",
    "well",
    "represents",
    "body",
    "assume",
    "css",
    "javascript",
    "connected",
    "ready",
    "go",
    "going",
    "using",
    "code",
    "pen",
    "uh",
    "playground",
    "going",
    "userfriendly",
    "way",
    "explain",
    "html",
    "later",
    "series",
    "talk",
    "writing",
    "html",
    "css",
    "javascript",
    "local",
    "environment",
    "javascript",
    "earlier",
    "series",
    "using",
    "browser",
    "um",
    "dev",
    "tools",
    "console",
    "kind",
    "deal",
    "going",
    "get",
    "environment",
    "easy",
    "use",
    "right",
    "bat",
    "like",
    "said",
    "html",
    "represents",
    "hypertext",
    "markup",
    "language",
    "key",
    "things",
    "understand",
    "going",
    "focusing",
    "lot",
    "uh",
    "html",
    "crash",
    "course",
    "two",
    "things",
    "number",
    "one",
    "going",
    "talking",
    "html",
    "tags",
    "number",
    "two",
    "going",
    "talking",
    "html",
    "attributes",
    "mean",
    "well",
    "let",
    "take",
    "look",
    "code",
    "pen",
    "see",
    "write",
    "basic",
    "html",
    "tag",
    "using",
    "little",
    "brackets",
    "happens",
    "paragraph",
    "tag",
    "um",
    "represented",
    "p",
    "within",
    "little",
    "brackets",
    "tag",
    "enclosed",
    "brackets",
    "put",
    "text",
    "want",
    "display",
    "browser",
    "see",
    "renders",
    "text",
    "um",
    "displaying",
    "within",
    "code",
    "uh",
    "cod",
    "pen",
    "browser",
    "right",
    "end",
    "going",
    "call",
    "closing",
    "tag",
    "notice",
    "forward",
    "slash",
    "tag",
    "going",
    "put",
    "screen",
    "basic",
    "diagram",
    "gives",
    "anatomy",
    "html",
    "element",
    "breaking",
    "basically",
    "opening",
    "tag",
    "one",
    "attributes",
    "defined",
    "specific",
    "element",
    "content",
    "put",
    "within",
    "element",
    "text",
    "html",
    "elements",
    "certain",
    "cases",
    "talk",
    "second",
    "finally",
    "close",
    "closing",
    "html",
    "tag",
    "might",
    "wondering",
    "know",
    "whole",
    "attribute",
    "thing",
    "see",
    "know",
    "diagram",
    "put",
    "got",
    "class",
    "attribute",
    "happens",
    "one",
    "many",
    "attributes",
    "um",
    "define",
    "html",
    "element",
    "case",
    "attribute",
    "talking",
    "class",
    "attribute",
    "going",
    "talk",
    "different",
    "types",
    "use",
    "case",
    "class",
    "attribute",
    "directly",
    "relates",
    "kind",
    "identifying",
    "element",
    "css",
    "going",
    "talking",
    "whole",
    "lot",
    "css",
    "lesson",
    "want",
    "show",
    "basics",
    "attribute",
    "might",
    "say",
    "class",
    "um",
    "def",
    "defined",
    "within",
    "class",
    "attribute",
    "come",
    "css",
    "define",
    "maybe",
    "give",
    "different",
    "color",
    "text",
    "going",
    "red",
    "attribute",
    "mean",
    "attributes",
    "relate",
    "css",
    "also",
    "attributes",
    "um",
    "totally",
    "unrelated",
    "css",
    "example",
    "wanted",
    "add",
    "image",
    "tag",
    "going",
    "talk",
    "little",
    "bit",
    "later",
    "worry",
    "syntax",
    "yet",
    "define",
    "something",
    "called",
    "source",
    "attribute",
    "source",
    "attribute",
    "going",
    "actually",
    "give",
    "us",
    "um",
    "image",
    "url",
    "want",
    "display",
    "within",
    "image",
    "tag",
    "let",
    "get",
    "image",
    "put",
    "real",
    "quick",
    "show",
    "mean",
    "right",
    "going",
    "put",
    "dog",
    "image",
    "normally",
    "paste",
    "see",
    "reloads",
    "large",
    "picture",
    "going",
    "use",
    "another",
    "attribute",
    "know",
    "experience",
    "put",
    "width",
    "property",
    "maybe",
    "define",
    "300",
    "pixels",
    "much",
    "smaller",
    "see",
    "image",
    "right",
    "understand",
    "know",
    "p",
    "tag",
    "image",
    "tag",
    "need",
    "understand",
    "quite",
    "yet",
    "going",
    "cover",
    "second",
    "want",
    "uh",
    "demonstrate",
    "attributes",
    "know",
    "serve",
    "lot",
    "different",
    "purpose",
    "purposes",
    "ultimately",
    "thing",
    "like",
    "think",
    "like",
    "javascript",
    "variables",
    "like",
    "defining",
    "sort",
    "know",
    "variable",
    "attribute",
    "assigning",
    "value",
    "thing",
    "javascript",
    "could",
    "define",
    "attribute",
    "give",
    "value",
    "variable",
    "javascript",
    "variable",
    "used",
    "working",
    "previous",
    "lessons",
    "kind",
    "similar",
    "concept",
    "know",
    "call",
    "variables",
    "attributes",
    "specific",
    "html",
    "elements",
    "creating",
    "right",
    "get",
    "details",
    "understanding",
    "quite",
    "yet",
    "want",
    "talk",
    "difference",
    "element",
    "html",
    "element",
    "html",
    "tag",
    "think",
    "element",
    "think",
    "complete",
    "unit",
    "html",
    "tag",
    "also",
    "might",
    "attributes",
    "maybe",
    "even",
    "event",
    "listeners",
    "going",
    "talk",
    "little",
    "bit",
    "later",
    "let",
    "write",
    "full",
    "element",
    "real",
    "quick",
    "like",
    "saw",
    "second",
    "ago",
    "um",
    "say",
    "paragraph",
    "element",
    "close",
    "closing",
    "brackets",
    "think",
    "complete",
    "unit",
    "full",
    "html",
    "element",
    "also",
    "add",
    "attributes",
    "maybe",
    "id",
    "going",
    "p1",
    "something",
    "add",
    "class",
    "attribute",
    "matter",
    "attributes",
    "putting",
    "trying",
    "demonstrate",
    "full",
    "html",
    "element",
    "talking",
    "tags",
    "like",
    "think",
    "actual",
    "um",
    "indicator",
    "type",
    "element",
    "creating",
    "case",
    "going",
    "put",
    "p",
    "tag",
    "um",
    "indicated",
    "letter",
    "p",
    "right",
    "move",
    "forward",
    "think",
    "tag",
    "function",
    "like",
    "element",
    "supposed",
    "whole",
    "element",
    "general",
    "structure",
    "html",
    "next",
    "thing",
    "want",
    "talk",
    "types",
    "html",
    "tags",
    "use",
    "far",
    "looked",
    "paragraph",
    "tag",
    "image",
    "tag",
    "obviously",
    "plenty",
    "use",
    "within",
    "html",
    "documents",
    "first",
    "type",
    "tag",
    "least",
    "categorize",
    "plenty",
    "classifications",
    "find",
    "official",
    "documentation",
    "brains",
    "understand",
    "think",
    "think",
    "terms",
    "normal",
    "html",
    "elements",
    "html",
    "uh",
    "elements",
    "maybe",
    "tags",
    "would",
    "better",
    "way",
    "say",
    "let",
    "paste",
    "know",
    "different",
    "tags",
    "use",
    "p",
    "tag",
    "h1",
    "tag",
    "div",
    "span",
    "strong",
    "consider",
    "kind",
    "normal",
    "html",
    "tags",
    "opening",
    "tag",
    "right",
    "closing",
    "tag",
    "put",
    "something",
    "middle",
    "actually",
    "create",
    "entire",
    "element",
    "consider",
    "normal",
    "html",
    "tags",
    "different",
    "behaviors",
    "actually",
    "called",
    "going",
    "paste",
    "within",
    "code",
    "pen",
    "let",
    "get",
    "rid",
    "looking",
    "tags",
    "would",
    "image",
    "input",
    "meta",
    "tags",
    "go",
    "head",
    "html",
    "document",
    "uh",
    "link",
    "tags",
    "link",
    "stylesheets",
    "html",
    "um",
    "something",
    "going",
    "behind",
    "scenes",
    "basically",
    "means",
    "everything",
    "need",
    "within",
    "single",
    "tag",
    "put",
    "forward",
    "slash",
    "end",
    "rather",
    "let",
    "give",
    "specific",
    "example",
    "rather",
    "saying",
    "image",
    "closing",
    "tag",
    "putting",
    "something",
    "valid",
    "uh",
    "create",
    "one",
    "tag",
    "right",
    "called",
    "image",
    "put",
    "forward",
    "slash",
    "end",
    "close",
    "two",
    "types",
    "tags",
    "dealing",
    "start",
    "recognize",
    "get",
    "experience",
    "writing",
    "html",
    "um",
    "sure",
    "point",
    "go",
    "reason",
    "talk",
    "difference",
    "know",
    "normal",
    "self",
    "closing",
    "tags",
    "different",
    "behaviors",
    "wanted",
    "embed",
    "content",
    "within",
    "normal",
    "element",
    "let",
    "take",
    "div",
    "uh",
    "element",
    "think",
    "kind",
    "general",
    "purpose",
    "container",
    "use",
    "html",
    "put",
    "text",
    "going",
    "work",
    "fine",
    "see",
    "screen",
    "also",
    "enter",
    "put",
    "another",
    "html",
    "element",
    "uh",
    "maybe",
    "paragraph",
    "tag",
    "embed",
    "html",
    "within",
    "div",
    "tag",
    "right",
    "normal",
    "html",
    "element",
    "opening",
    "closing",
    "tag",
    "tred",
    "something",
    "like",
    "image",
    "tag",
    "right",
    "valid",
    "way",
    "write",
    "uh",
    "image",
    "course",
    "need",
    "source",
    "attribute",
    "let",
    "see",
    "get",
    "another",
    "image",
    "okay",
    "let",
    "get",
    "actual",
    "image",
    "uh",
    "valid",
    "image",
    "tag",
    "right",
    "working",
    "right",
    "want",
    "show",
    "try",
    "put",
    "something",
    "within",
    "tag",
    "let",
    "come",
    "right",
    "try",
    "put",
    "maybe",
    "p",
    "element",
    "put",
    "text",
    "right",
    "going",
    "see",
    "going",
    "work",
    "um",
    "well",
    "see",
    "weird",
    "brackets",
    "end",
    "overall",
    "image",
    "working",
    "still",
    "see",
    "text",
    "uh",
    "printed",
    "screen",
    "valid",
    "html",
    "write",
    "um",
    "know",
    "render",
    "valid",
    "remember",
    "write",
    "html",
    "elements",
    "ca",
    "put",
    "anything",
    "within",
    "subtle",
    "difference",
    "want",
    "point",
    "know",
    "within",
    "uh",
    "elements",
    "call",
    "normal",
    "tags",
    "call",
    "normal",
    "example",
    "paragraph",
    "tag",
    "got",
    "text",
    "put",
    "also",
    "put",
    "stuff",
    "within",
    "make",
    "sense",
    "answer",
    "probably",
    "paragraph",
    "tag",
    "put",
    "text",
    "also",
    "try",
    "put",
    "maybe",
    "another",
    "paragraph",
    "uh",
    "tag",
    "put",
    "text",
    "make",
    "lot",
    "sense",
    "make",
    "sense",
    "general",
    "writing",
    "html",
    "general",
    "tag",
    "paragraph",
    "tag",
    "meant",
    "elements",
    "um",
    "embedded",
    "plain",
    "text",
    "html",
    "elements",
    "um",
    "kind",
    "container",
    "functionalities",
    "elements",
    "meant",
    "store",
    "text",
    "text",
    "want",
    "put",
    "know",
    "elements",
    "within",
    "paragraph",
    "tag",
    "change",
    "div",
    "going",
    "appropriate",
    "put",
    "know",
    "many",
    "elements",
    "within",
    "div",
    "want",
    "kind",
    "structured",
    "meant",
    "something",
    "like",
    "kind",
    "meant",
    "um",
    "con",
    "container",
    "type",
    "uh",
    "html",
    "tag",
    "right",
    "gone",
    "nuances",
    "know",
    "type",
    "html",
    "tags",
    "going",
    "looking",
    "next",
    "section",
    "want",
    "actually",
    "walk",
    "common",
    "ones",
    "see",
    "use",
    "want",
    "show",
    "actually",
    "inspect",
    "html",
    "browser",
    "also",
    "look",
    "different",
    "tags",
    "documentation",
    "know",
    "know",
    "something",
    "know",
    "supposed",
    "used",
    "go",
    "documentation",
    "figure",
    "like",
    "said",
    "ton",
    "html",
    "tags",
    "um",
    "use",
    "going",
    "covering",
    "know",
    "even",
    "half",
    "uh",
    "goal",
    "goal",
    "get",
    "essential",
    "ones",
    "help",
    "understand",
    "find",
    "um",
    "use",
    "different",
    "tags",
    "without",
    "prior",
    "knowledge",
    "talked",
    "earlier",
    "html",
    "styled",
    "structure",
    "look",
    "page",
    "got",
    "pulled",
    "screen",
    "see",
    "bunch",
    "really",
    "ugly",
    "um",
    "web",
    "elements",
    "um",
    "going",
    "walk",
    "briefly",
    "kind",
    "get",
    "gist",
    "show",
    "know",
    "couple",
    "actually",
    "look",
    "documentation",
    "see",
    "preview",
    "got",
    "content",
    "elements",
    "got",
    "headings",
    "paragraph",
    "tags",
    "come",
    "um",
    "content",
    "elements",
    "uh",
    "span",
    "elements",
    "allow",
    "kind",
    "um",
    "custom",
    "style",
    "actually",
    "css",
    "within",
    "um",
    "covering",
    "um",
    "see",
    "things",
    "paragraph",
    "tags",
    "make",
    "little",
    "bit",
    "customized",
    "using",
    "span",
    "em",
    "strong",
    "elements",
    "also",
    "use",
    "uh",
    "images",
    "links",
    "would",
    "link",
    "image",
    "buttons",
    "got",
    "buttons",
    "list",
    "finally",
    "tables",
    "like",
    "said",
    "going",
    "covering",
    "whole",
    "lot",
    "um",
    "landscape",
    "elements",
    "using",
    "daily",
    "basis",
    "web",
    "developer",
    "jump",
    "want",
    "show",
    "exactly",
    "inspect",
    "notice",
    "jumped",
    "google",
    "chrome",
    "um",
    "using",
    "specific",
    "reason",
    "kind",
    "talk",
    "little",
    "bit",
    "later",
    "lesson",
    "similar",
    "firefox",
    "right",
    "click",
    "click",
    "inspect",
    "uh",
    "rearrange",
    "see",
    "elements",
    "panel",
    "actually",
    "see",
    "html",
    "within",
    "document",
    "click",
    "body",
    "see",
    "elements",
    "every",
    "time",
    "hover",
    "actually",
    "know",
    "highlight",
    "browser",
    "uh",
    "right",
    "scroll",
    "basically",
    "see",
    "source",
    "html",
    "document",
    "um",
    "great",
    "way",
    "um",
    "understand",
    "also",
    "um",
    "exact",
    "document",
    "linked",
    "code",
    "pen",
    "pen",
    "find",
    "materials",
    "description",
    "video",
    "look",
    "time",
    "go",
    "something",
    "little",
    "bit",
    "fast",
    "right",
    "first",
    "ones",
    "going",
    "talking",
    "first",
    "html",
    "tags",
    "heading",
    "tags",
    "h1",
    "h6",
    "go",
    "documentation",
    "going",
    "go",
    "exercise",
    "get",
    "used",
    "um",
    "basically",
    "go",
    "mdn",
    "go",
    "technologies",
    "click",
    "html",
    "go",
    "references",
    "click",
    "html",
    "elements",
    "obviously",
    "go",
    "look",
    "different",
    "tags",
    "use",
    "case",
    "want",
    "headings",
    "click",
    "h1",
    "see",
    "one",
    "page",
    "h1",
    "h6",
    "similar",
    "types",
    "elements",
    "documentation",
    "page",
    "good",
    "read",
    "first",
    "sentence",
    "glance",
    "demo",
    "come",
    "usage",
    "notes",
    "going",
    "learn",
    "like",
    "tag",
    "actually",
    "know",
    "talked",
    "html",
    "structure",
    "web",
    "therefore",
    "every",
    "uh",
    "tag",
    "using",
    "specific",
    "purpose",
    "one",
    "says",
    "heading",
    "information",
    "used",
    "user",
    "agents",
    "construct",
    "table",
    "contents",
    "document",
    "automatically",
    "right",
    "basically",
    "saying",
    "us",
    "um",
    "use",
    "h1",
    "h6",
    "organize",
    "web",
    "pages",
    "let",
    "start",
    "h1",
    "uh",
    "element",
    "right",
    "give",
    "page",
    "title",
    "right",
    "kind",
    "h1",
    "used",
    "go",
    "onto",
    "web",
    "page",
    "always",
    "going",
    "title",
    "know",
    "blog",
    "post",
    "article",
    "um",
    "page",
    "general",
    "usually",
    "going",
    "h1",
    "google",
    "searches",
    "search",
    "engines",
    "lot",
    "seos",
    "um",
    "know",
    "recommend",
    "uh",
    "semantically",
    "laid",
    "h1",
    "occurs",
    "page",
    "everything",
    "else",
    "h2",
    "even",
    "smaller",
    "make",
    "h2s",
    "secondary",
    "heading",
    "like",
    "said",
    "going",
    "lay",
    "document",
    "um",
    "semantically",
    "based",
    "order",
    "importance",
    "text",
    "think",
    "probably",
    "get",
    "point",
    "know",
    "h3",
    "way",
    "h6",
    "complicated",
    "going",
    "stop",
    "right",
    "kind",
    "get",
    "point",
    "play",
    "around",
    "basically",
    "say",
    "h1",
    "h3",
    "probably",
    "furthest",
    "going",
    "go",
    "might",
    "use",
    "h4",
    "every",
    "generally",
    "first",
    "three",
    "sufficient",
    "build",
    "web",
    "page",
    "next",
    "paragraph",
    "tag",
    "already",
    "used",
    "little",
    "bit",
    "come",
    "um",
    "mdn",
    "documentation",
    "go",
    "back",
    "well",
    "let",
    "go",
    "full",
    "process",
    "get",
    "used",
    "technologies",
    "html",
    "html",
    "elements",
    "scroll",
    "look",
    "relevant",
    "tag",
    "come",
    "way",
    "p",
    "tag",
    "says",
    "html",
    "p",
    "element",
    "represents",
    "paragraph",
    "paragraphs",
    "usually",
    "represented",
    "visual",
    "media",
    "blocks",
    "text",
    "separated",
    "adjacent",
    "blocks",
    "blah",
    "blah",
    "blah",
    "bunch",
    "uh",
    "jargon",
    "really",
    "need",
    "read",
    "much",
    "basically",
    "going",
    "see",
    "everywhere",
    "web",
    "read",
    "article",
    "blog",
    "post",
    "text",
    "going",
    "paragraph",
    "element",
    "simple",
    "write",
    "saw",
    "put",
    "text",
    "opening",
    "closing",
    "tags",
    "got",
    "paragraph",
    "element",
    "want",
    "highlight",
    "something",
    "kind",
    "important",
    "html",
    "actually",
    "two",
    "things",
    "number",
    "one",
    "html",
    "case",
    "sensitive",
    "wanted",
    "capitalize",
    "one",
    "tags",
    "lowercase",
    "tags",
    "end",
    "still",
    "going",
    "work",
    "fine",
    "html",
    "care",
    "capitalization",
    "also",
    "care",
    "line",
    "breaks",
    "couple",
    "elements",
    "um",
    "let",
    "make",
    "couple",
    "paragraph",
    "tags",
    "put",
    "bunch",
    "spaces",
    "entered",
    "bunch",
    "um",
    "let",
    "make",
    "uh",
    "enter",
    "spaces",
    "see",
    "output",
    "going",
    "matter",
    "spaces",
    "tags",
    "matter",
    "whatsoever",
    "basically",
    "rendered",
    "web",
    "uh",
    "browser",
    "looking",
    "opening",
    "closing",
    "tag",
    "automatically",
    "knows",
    "lay",
    "page",
    "case",
    "sensitive",
    "line",
    "breaks",
    "spaces",
    "matter",
    "elements",
    "right",
    "said",
    "moving",
    "next",
    "elements",
    "would",
    "um",
    "content",
    "elements",
    "allow",
    "uh",
    "basically",
    "style",
    "paragraphs",
    "say",
    "talk",
    "semantic",
    "html",
    "um",
    "whole",
    "goal",
    "new",
    "html",
    "5",
    "standard",
    "latest",
    "uh",
    "spec",
    "similar",
    "talked",
    "javascript",
    "previous",
    "lessons",
    "ecmascript",
    "standard",
    "um",
    "es6",
    "kind",
    "stuff",
    "well",
    "also",
    "html",
    "spec",
    "supposed",
    "followed",
    "latest",
    "one",
    "goal",
    "basically",
    "use",
    "html",
    "structure",
    "um",
    "function",
    "instead",
    "using",
    "html",
    "actually",
    "style",
    "elements",
    "supposed",
    "use",
    "css",
    "said",
    "see",
    "tags",
    "show",
    "uh",
    "quite",
    "often",
    "old",
    "code",
    "people",
    "still",
    "use",
    "um",
    "need",
    "know",
    "let",
    "write",
    "paragraph",
    "tag",
    "right",
    "text",
    "want",
    "emphasize",
    "make",
    "bold",
    "styled",
    "right",
    "words",
    "going",
    "manipulated",
    "html",
    "elements",
    "said",
    "earlier",
    "p",
    "tag",
    "generally",
    "something",
    "want",
    "embed",
    "html",
    "elements",
    "within",
    "like",
    "said",
    "probably",
    "want",
    "put",
    "another",
    "p",
    "tag",
    "within",
    "p",
    "tag",
    "put",
    "text",
    "couple",
    "exceptions",
    "relate",
    "uh",
    "strong",
    "emphasis",
    "span",
    "elements",
    "first",
    "one",
    "going",
    "look",
    "going",
    "span",
    "let",
    "go",
    "ahead",
    "go",
    "back",
    "documentation",
    "go",
    "back",
    "uh",
    "reference",
    "look",
    "span",
    "tag",
    "okay",
    "click",
    "span",
    "says",
    "element",
    "generic",
    "inline",
    "container",
    "phrasing",
    "content",
    "inherently",
    "represent",
    "anything",
    "used",
    "group",
    "elements",
    "styling",
    "purposes",
    "share",
    "attribute",
    "values",
    "forth",
    "basically",
    "saying",
    "want",
    "something",
    "um",
    "html",
    "element",
    "going",
    "break",
    "new",
    "line",
    "going",
    "line",
    "rest",
    "text",
    "want",
    "look",
    "little",
    "bit",
    "different",
    "function",
    "little",
    "bit",
    "different",
    "rest",
    "might",
    "use",
    "span",
    "tag",
    "example",
    "wrap",
    "last",
    "word",
    "styled",
    "within",
    "span",
    "tag",
    "right",
    "right",
    "see",
    "red",
    "reason",
    "red",
    "behind",
    "scenes",
    "tell",
    "wrote",
    "css",
    "take",
    "span",
    "element",
    "turn",
    "color",
    "red",
    "using",
    "css",
    "open",
    "see",
    "uh",
    "said",
    "every",
    "span",
    "element",
    "want",
    "color",
    "red",
    "expect",
    "understand",
    "css",
    "saying",
    "yet",
    "going",
    "cover",
    "next",
    "lesson",
    "basically",
    "point",
    "span",
    "take",
    "single",
    "know",
    "piece",
    "text",
    "within",
    "paragraph",
    "tag",
    "emphasize",
    "whatever",
    "way",
    "want",
    "using",
    "css",
    "similar",
    "span",
    "also",
    "strong",
    "em",
    "emphasize",
    "uh",
    "tags",
    "let",
    "take",
    "look",
    "documentation",
    "let",
    "go",
    "em",
    "tag",
    "uh",
    "marks",
    "text",
    "emphasis",
    "basically",
    "italics",
    "saying",
    "go",
    "strong",
    "tag",
    "indicates",
    "contents",
    "strong",
    "importance",
    "seriousness",
    "urgency",
    "another",
    "way",
    "saying",
    "bold",
    "like",
    "said",
    "new",
    "html",
    "standard",
    "probably",
    "use",
    "uh",
    "tags",
    "showing",
    "see",
    "often",
    "people",
    "still",
    "use",
    "valid",
    "html",
    "wanted",
    "emphasize",
    "word",
    "words",
    "make",
    "italic",
    "surround",
    "uh",
    "em",
    "tag",
    "see",
    "one",
    "word",
    "italicized",
    "also",
    "make",
    "word",
    "bold",
    "wrapping",
    "strong",
    "tag",
    "bold",
    "word",
    "see",
    "use",
    "different",
    "html",
    "elements",
    "actually",
    "style",
    "html",
    "recommended",
    "would",
    "go",
    "ahead",
    "use",
    "best",
    "practices",
    "style",
    "css",
    "instead",
    "know",
    "probably",
    "wondering",
    "heck",
    "means",
    "basically",
    "means",
    "instead",
    "using",
    "em",
    "tag",
    "might",
    "put",
    "span",
    "emphasis",
    "right",
    "um",
    "wrapped",
    "span",
    "change",
    "css",
    "right",
    "making",
    "everything",
    "color",
    "red",
    "wanted",
    "put",
    "attribute",
    "put",
    "class",
    "say",
    "um",
    "red",
    "color",
    "span",
    "going",
    "red",
    "color",
    "um",
    "let",
    "make",
    "little",
    "bit",
    "bigger",
    "span",
    "put",
    "attribute",
    "class",
    "called",
    "italics",
    "right",
    "come",
    "css",
    "let",
    "delete",
    "css",
    "bas",
    "basically",
    "look",
    "elements",
    "specific",
    "classes",
    "sorry",
    "getting",
    "much",
    "really",
    "want",
    "show",
    "mean",
    "say",
    "style",
    "css",
    "rather",
    "uh",
    "em",
    "strong",
    "tags",
    "select",
    "class",
    "css",
    "basically",
    "say",
    "font",
    "style",
    "italic",
    "right",
    "see",
    "word",
    "emphasized",
    "italics",
    "time",
    "instead",
    "using",
    "em",
    "element",
    "using",
    "span",
    "css",
    "styles",
    "also",
    "come",
    "select",
    "red",
    "color",
    "class",
    "give",
    "color",
    "equal",
    "red",
    "see",
    "back",
    "original",
    "style",
    "covering",
    "css",
    "much",
    "lesson",
    "want",
    "show",
    "working",
    "html",
    "um",
    "unison",
    "right",
    "next",
    "elements",
    "got",
    "talk",
    "um",
    "think",
    "big",
    "one",
    "going",
    "div",
    "element",
    "going",
    "one",
    "use",
    "time",
    "important",
    "consider",
    "general",
    "container",
    "element",
    "let",
    "look",
    "documentation",
    "div",
    "tag",
    "right",
    "called",
    "html",
    "content",
    "division",
    "element",
    "generic",
    "container",
    "flow",
    "content",
    "like",
    "said",
    "like",
    "generic",
    "container",
    "basically",
    "separate",
    "pieces",
    "html",
    "know",
    "important",
    "thing",
    "take",
    "individual",
    "units",
    "within",
    "specific",
    "div",
    "style",
    "similar",
    "span",
    "element",
    "taking",
    "individual",
    "piece",
    "text",
    "making",
    "look",
    "different",
    "others",
    "also",
    "use",
    "css",
    "magic",
    "along",
    "html",
    "structure",
    "separate",
    "content",
    "let",
    "show",
    "mean",
    "let",
    "say",
    "two",
    "div",
    "contain",
    "containers",
    "right",
    "within",
    "elements",
    "container",
    "one",
    "right",
    "make",
    "bunch",
    "thing",
    "elements",
    "within",
    "container",
    "2",
    "right",
    "screen",
    "look",
    "separated",
    "know",
    "basically",
    "look",
    "say",
    "like",
    "oh",
    "one",
    "big",
    "piece",
    "together",
    "since",
    "wrapped",
    "within",
    "div",
    "elements",
    "actually",
    "put",
    "styles",
    "separate",
    "like",
    "said",
    "going",
    "understand",
    "styles",
    "working",
    "quite",
    "yet",
    "next",
    "lesson",
    "want",
    "show",
    "div",
    "able",
    "separate",
    "content",
    "first",
    "one",
    "need",
    "identify",
    "div",
    "one",
    "arbitrary",
    "class",
    "name",
    "giving",
    "div",
    "two",
    "right",
    "going",
    "going",
    "make",
    "boxes",
    "around",
    "select",
    "give",
    "border",
    "right",
    "see",
    "getting",
    "separation",
    "html",
    "elements",
    "even",
    "put",
    "margin",
    "around",
    "going",
    "apparent",
    "two",
    "separate",
    "sections",
    "html",
    "document",
    "power",
    "div",
    "using",
    "div",
    "elements",
    "section",
    "content",
    "time",
    "next",
    "next",
    "element",
    "going",
    "talk",
    "element",
    "tag",
    "going",
    "tag",
    "represents",
    "link",
    "html",
    "let",
    "take",
    "look",
    "documentation",
    "recap",
    "technologies",
    "html",
    "html",
    "elements",
    "click",
    "actually",
    "called",
    "anchor",
    "element",
    "stands",
    "says",
    "href",
    "attribute",
    "creates",
    "hyperlink",
    "web",
    "pages",
    "files",
    "email",
    "addresses",
    "locations",
    "page",
    "anything",
    "else",
    "ur",
    "l",
    "address",
    "right",
    "anchor",
    "tag",
    "link",
    "tag",
    "going",
    "require",
    "single",
    "attribute",
    "called",
    "href",
    "attribute",
    "html",
    "um",
    "tags",
    "required",
    "attributes",
    "couple",
    "required",
    "attributes",
    "happens",
    "one",
    "come",
    "html",
    "maybe",
    "wanted",
    "um",
    "make",
    "link",
    "around",
    "text",
    "going",
    "make",
    "tag",
    "surrounded",
    "first",
    "uh",
    "container",
    "one",
    "text",
    "right",
    "see",
    "nothing",
    "happening",
    "click",
    "nothing",
    "put",
    "href",
    "attribute",
    "put",
    "link",
    "say",
    "see",
    "link",
    "styling",
    "click",
    "take",
    "appropriate",
    "link",
    "one",
    "weird",
    "thing",
    "code",
    "pen",
    "um",
    "since",
    "kind",
    "like",
    "integrated",
    "uh",
    "environment",
    "write",
    "html",
    "css",
    "javascript",
    "link",
    "tags",
    "within",
    "code",
    "pen",
    "ca",
    "click",
    "actually",
    "go",
    "outside",
    "codepen",
    "actually",
    "pulled",
    "um",
    "let",
    "let",
    "actually",
    "look",
    "local",
    "file",
    "showing",
    "navigate",
    "around",
    "different",
    "elements",
    "go",
    "link",
    "example",
    "right",
    "let",
    "go",
    "ahead",
    "click",
    "um",
    "button",
    "select",
    "specific",
    "element",
    "click",
    "takes",
    "right",
    "side",
    "see",
    "anchor",
    "tag",
    "href",
    "um",
    "attribute",
    "right",
    "representing",
    "uh",
    "personal",
    "website",
    "right",
    "click",
    "going",
    "take",
    "directly",
    "website",
    "anchor",
    "element",
    "going",
    "work",
    "one",
    "additional",
    "thing",
    "add",
    "anchor",
    "element",
    "affect",
    "behavior",
    "link",
    "go",
    "actually",
    "edit",
    "html",
    "directly",
    "within",
    "dev",
    "tools",
    "put",
    "attribute",
    "called",
    "target",
    "give",
    "underscore",
    "blank",
    "value",
    "go",
    "documentation",
    "see",
    "see",
    "couple",
    "attributes",
    "available",
    "hf",
    "one",
    "go",
    "see",
    "target",
    "attribute",
    "gives",
    "possible",
    "values",
    "put",
    "says",
    "display",
    "linked",
    "url",
    "name",
    "browsing",
    "context",
    "basically",
    "saying",
    "need",
    "open",
    "link",
    "go",
    "blank",
    "says",
    "usually",
    "new",
    "tab",
    "exactly",
    "going",
    "happen",
    "put",
    "target",
    "equals",
    "blank",
    "click",
    "link",
    "opening",
    "brand",
    "new",
    "tab",
    "rather",
    "taking",
    "link",
    "within",
    "current",
    "tab",
    "like",
    "said",
    "attributes",
    "anchor",
    "element",
    "probably",
    "common",
    "two",
    "ones",
    "need",
    "href",
    "attribute",
    "actually",
    "required",
    "make",
    "function",
    "link",
    "next",
    "one",
    "covering",
    "input",
    "element",
    "one",
    "loaded",
    "functionality",
    "especially",
    "start",
    "putting",
    "within",
    "form",
    "element",
    "right",
    "going",
    "talk",
    "whole",
    "lot",
    "comes",
    "later",
    "series",
    "going",
    "talk",
    "lot",
    "context",
    "um",
    "web",
    "framework",
    "like",
    "react",
    "angular",
    "uh",
    "want",
    "introduce",
    "go",
    "input",
    "tag",
    "um",
    "got",
    "go",
    "back",
    "documentation",
    "um",
    "actually",
    "entire",
    "section",
    "input",
    "types",
    "like",
    "said",
    "lot",
    "going",
    "lot",
    "um",
    "forms",
    "within",
    "web",
    "let",
    "open",
    "normal",
    "html",
    "reference",
    "go",
    "find",
    "input",
    "right",
    "click",
    "input",
    "says",
    "used",
    "create",
    "interactive",
    "controls",
    "forms",
    "order",
    "accept",
    "data",
    "user",
    "pretty",
    "much",
    "going",
    "stop",
    "need",
    "know",
    "going",
    "show",
    "couple",
    "basic",
    "um",
    "attributes",
    "use",
    "give",
    "general",
    "concept",
    "let",
    "go",
    "um",
    "page",
    "working",
    "let",
    "clear",
    "everything",
    "put",
    "input",
    "tag",
    "going",
    "tag",
    "talked",
    "earlier",
    "like",
    "image",
    "tag",
    "within",
    "input",
    "see",
    "already",
    "something",
    "showing",
    "right",
    "type",
    "text",
    "right",
    "bat",
    "usable",
    "left",
    "like",
    "tried",
    "hook",
    "javascript",
    "difficult",
    "uh",
    "select",
    "grab",
    "data",
    "user",
    "typing",
    "um",
    "something",
    "often",
    "give",
    "input",
    "name",
    "important",
    "put",
    "within",
    "form",
    "identify",
    "input",
    "um",
    "needs",
    "grab",
    "data",
    "say",
    "input",
    "one",
    "another",
    "thing",
    "put",
    "another",
    "attribute",
    "put",
    "going",
    "placeholder",
    "placeholder",
    "going",
    "whatever",
    "shows",
    "kind",
    "grade",
    "uh",
    "text",
    "indic",
    "user",
    "need",
    "type",
    "say",
    "enter",
    "email",
    "address",
    "see",
    "placeholder",
    "gets",
    "put",
    "start",
    "typing",
    "goes",
    "away",
    "common",
    "element",
    "attribute",
    "use",
    "input",
    "tag",
    "also",
    "put",
    "predefined",
    "value",
    "instead",
    "placeholder",
    "put",
    "uh",
    "value",
    "going",
    "replace",
    "placeholder",
    "actual",
    "value",
    "see",
    "text",
    "already",
    "wanted",
    "change",
    "delete",
    "type",
    "new",
    "text",
    "common",
    "attributes",
    "use",
    "inputs",
    "going",
    "cover",
    "inputs",
    "much",
    "detail",
    "right",
    "going",
    "talk",
    "lot",
    "later",
    "series",
    "next",
    "going",
    "talking",
    "image",
    "um",
    "tags",
    "already",
    "looked",
    "little",
    "bit",
    "let",
    "go",
    "html",
    "elements",
    "reference",
    "look",
    "image",
    "tag",
    "right",
    "image",
    "element",
    "embeds",
    "image",
    "document",
    "right",
    "going",
    "couple",
    "common",
    "attributes",
    "use",
    "one",
    "required",
    "source",
    "attribute",
    "required",
    "see",
    "documentation",
    "alt",
    "attribute",
    "highly",
    "recommended",
    "talking",
    "web",
    "accessibility",
    "talking",
    "know",
    "know",
    "image",
    "represents",
    "render",
    "correctly",
    "going",
    "alt",
    "attribute",
    "show",
    "exactly",
    "talking",
    "let",
    "write",
    "image",
    "tag",
    "closing",
    "going",
    "see",
    "anything",
    "required",
    "source",
    "attribute",
    "let",
    "go",
    "back",
    "dog",
    "photo",
    "put",
    "source",
    "attribute",
    "paste",
    "link",
    "photo",
    "course",
    "going",
    "large",
    "image",
    "much",
    "larger",
    "page",
    "also",
    "add",
    "additional",
    "attribute",
    "quick",
    "tip",
    "html",
    "actually",
    "enter",
    "know",
    "one",
    "line",
    "separate",
    "different",
    "attributes",
    "tags",
    "go",
    "source",
    "first",
    "put",
    "another",
    "common",
    "one",
    "also",
    "specify",
    "within",
    "css",
    "would",
    "quick",
    "way",
    "make",
    "width",
    "image",
    "300",
    "pixels",
    "right",
    "gives",
    "us",
    "manageable",
    "image",
    "work",
    "finally",
    "alt",
    "attribute",
    "say",
    "dog",
    "image",
    "something",
    "like",
    "describe",
    "image",
    "reason",
    "use",
    "link",
    "broken",
    "break",
    "link",
    "real",
    "quick",
    "going",
    "see",
    "reloads",
    "going",
    "give",
    "little",
    "image",
    "icon",
    "whatever",
    "put",
    "alt",
    "attribute",
    "say",
    "dog",
    "image",
    "link",
    "ever",
    "breaks",
    "user",
    "know",
    "like",
    "oh",
    "supposed",
    "dog",
    "image",
    "kind",
    "know",
    "um",
    "context",
    "image",
    "finally",
    "one",
    "favorite",
    "content",
    "elements",
    "going",
    "button",
    "right",
    "get",
    "click",
    "fun",
    "things",
    "write",
    "basically",
    "write",
    "button",
    "normal",
    "know",
    "opening",
    "closing",
    "tag",
    "type",
    "element",
    "um",
    "let",
    "take",
    "look",
    "documentation",
    "real",
    "quick",
    "go",
    "html",
    "elements",
    "find",
    "button",
    "element",
    "says",
    "represents",
    "clickable",
    "button",
    "used",
    "submit",
    "forms",
    "anywhere",
    "document",
    "accessible",
    "standard",
    "button",
    "functionality",
    "right",
    "click",
    "buttons",
    "time",
    "use",
    "web",
    "apps",
    "basically",
    "brings",
    "web",
    "apps",
    "life",
    "allows",
    "user",
    "know",
    "like",
    "okay",
    "got",
    "click",
    "something",
    "within",
    "button",
    "give",
    "text",
    "might",
    "say",
    "click",
    "caps",
    "see",
    "button",
    "click",
    "going",
    "anything",
    "right",
    "bat",
    "hooked",
    "event",
    "listeners",
    "uh",
    "stuff",
    "like",
    "really",
    "common",
    "attributes",
    "see",
    "button",
    "like",
    "one",
    "common",
    "thing",
    "button",
    "really",
    "anything",
    "um",
    "event",
    "listener",
    "quite",
    "ready",
    "talk",
    "events",
    "um",
    "within",
    "html",
    "want",
    "quickly",
    "show",
    "talking",
    "talking",
    "um",
    "buttons",
    "wanted",
    "something",
    "every",
    "time",
    "someone",
    "clicked",
    "button",
    "assign",
    "onclick",
    "event",
    "actually",
    "attribute",
    "event",
    "listener",
    "expects",
    "specific",
    "function",
    "called",
    "every",
    "time",
    "click",
    "button",
    "right",
    "go",
    "javascript",
    "section",
    "code",
    "pen",
    "define",
    "basic",
    "function",
    "says",
    "alert",
    "right",
    "something",
    "like",
    "every",
    "time",
    "click",
    "button",
    "going",
    "bring",
    "alert",
    "browser",
    "going",
    "say",
    "hi",
    "right",
    "simple",
    "put",
    "button",
    "right",
    "click",
    "button",
    "going",
    "make",
    "alert",
    "pop",
    "say",
    "hi",
    "every",
    "time",
    "click",
    "right",
    "basics",
    "event",
    "handling",
    "within",
    "html",
    "going",
    "talk",
    "little",
    "bit",
    "detail",
    "get",
    "concept",
    "document",
    "object",
    "model",
    "dom",
    "next",
    "element",
    "want",
    "talk",
    "another",
    "content",
    "element",
    "list",
    "list",
    "basically",
    "bullet",
    "points",
    "numbered",
    "list",
    "right",
    "wanted",
    "bullet",
    "point",
    "list",
    "going",
    "use",
    "tag",
    "called",
    "ul",
    "right",
    "ul",
    "stands",
    "unordered",
    "list",
    "go",
    "documentation",
    "able",
    "see",
    "somewhere",
    "let",
    "go",
    "html",
    "elements",
    "find",
    "ul",
    "right",
    "ul",
    "going",
    "say",
    "represents",
    "unordered",
    "list",
    "items",
    "typically",
    "rendered",
    "bulleted",
    "list",
    "right",
    "basically",
    "stands",
    "within",
    "put",
    "um",
    "li",
    "uh",
    "tags",
    "see",
    "click",
    "lii",
    "element",
    "used",
    "represent",
    "item",
    "list",
    "right",
    "put",
    "say",
    "li",
    "say",
    "item",
    "one",
    "copy",
    "couple",
    "times",
    "give",
    "item",
    "two",
    "three",
    "see",
    "right",
    "side",
    "bulleted",
    "list",
    "um",
    "content",
    "right",
    "wanted",
    "change",
    "numbered",
    "list",
    "change",
    "ul",
    "kind",
    "container",
    "container",
    "see",
    "changed",
    "bottom",
    "automatically",
    "see",
    "numbered",
    "go",
    "documentation",
    "um",
    "able",
    "click",
    "see",
    "represents",
    "ordered",
    "list",
    "items",
    "right",
    "two",
    "types",
    "list",
    "helpful",
    "us",
    "uh",
    "laying",
    "content",
    "often",
    "times",
    "see",
    "list",
    "um",
    "corresponding",
    "loop",
    "talked",
    "javascript",
    "earlier",
    "loops",
    "work",
    "take",
    "array",
    "elements",
    "loop",
    "well",
    "makes",
    "sense",
    "could",
    "basically",
    "loop",
    "array",
    "elements",
    "display",
    "list",
    "like",
    "keep",
    "mind",
    "move",
    "forward",
    "series",
    "last",
    "thing",
    "want",
    "cover",
    "tables",
    "know",
    "said",
    "beginning",
    "going",
    "talking",
    "often",
    "want",
    "glance",
    "quickly",
    "recommend",
    "look",
    "want",
    "details",
    "go",
    "document",
    "ation",
    "go",
    "html",
    "elements",
    "table",
    "right",
    "click",
    "table",
    "says",
    "represents",
    "tab",
    "tabular",
    "data",
    "shows",
    "basic",
    "structure",
    "table",
    "see",
    "table",
    "main",
    "container",
    "head",
    "tag",
    "header",
    "tags",
    "body",
    "whatever",
    "data",
    "putting",
    "within",
    "table",
    "within",
    "body",
    "tr",
    "tags",
    "going",
    "rows",
    "within",
    "tr",
    "uh",
    "tags",
    "table",
    "data",
    "put",
    "td",
    "tags",
    "right",
    "see",
    "pretty",
    "complex",
    "structure",
    "like",
    "said",
    "recommend",
    "using",
    "table",
    "generator",
    "search",
    "google",
    "um",
    "much",
    "easier",
    "trying",
    "remember",
    "structure",
    "course",
    "could",
    "look",
    "copy",
    "example",
    "get",
    "started",
    "way",
    "anyways",
    "let",
    "move",
    "next",
    "part",
    "lesson",
    "going",
    "talking",
    "html",
    "attributes",
    "little",
    "bit",
    "detail",
    "next",
    "part",
    "html",
    "crash",
    "course",
    "going",
    "talking",
    "html",
    "attributes",
    "know",
    "probably",
    "little",
    "bit",
    "confusing",
    "far",
    "gone",
    "bunch",
    "different",
    "html",
    "tags",
    "using",
    "briefly",
    "covered",
    "attributes",
    "work",
    "really",
    "talk",
    "use",
    "know",
    "use",
    "know",
    "fair",
    "game",
    "going",
    "start",
    "talking",
    "difference",
    "global",
    "attribute",
    "element",
    "specific",
    "attribute",
    "short",
    "global",
    "attribute",
    "something",
    "available",
    "html",
    "element",
    "know",
    "matter",
    "element",
    "specific",
    "attribute",
    "attribute",
    "something",
    "elements",
    "applies",
    "good",
    "example",
    "image",
    "tag",
    "let",
    "go",
    "ahead",
    "look",
    "screen",
    "real",
    "quick",
    "make",
    "image",
    "tag",
    "give",
    "source",
    "property",
    "give",
    "class",
    "property",
    "attribute",
    "see",
    "difference",
    "global",
    "element",
    "specific",
    "one",
    "let",
    "go",
    "ahead",
    "put",
    "source",
    "let",
    "make",
    "width",
    "equal",
    "300",
    "like",
    "earlier",
    "see",
    "um",
    "image",
    "tag",
    "um",
    "total",
    "html",
    "element",
    "call",
    "image",
    "see",
    "source",
    "um",
    "attribute",
    "specific",
    "image",
    "tag",
    "also",
    "wid",
    "attribute",
    "also",
    "specific",
    "image",
    "tag",
    "class",
    "attribute",
    "global",
    "attribute",
    "means",
    "used",
    "element",
    "tag",
    "show",
    "let",
    "go",
    "ahead",
    "make",
    "paragraph",
    "tag",
    "put",
    "text",
    "give",
    "class",
    "right",
    "given",
    "class",
    "see",
    "um",
    "anything",
    "right",
    "actually",
    "style",
    "two",
    "different",
    "elements",
    "would",
    "use",
    "class",
    "values",
    "way",
    "select",
    "within",
    "css",
    "kind",
    "shown",
    "uh",
    "showed",
    "earlier",
    "actually",
    "select",
    "different",
    "classes",
    "um",
    "basically",
    "put",
    "styles",
    "wanted",
    "put",
    "border",
    "uh",
    "image",
    "like",
    "make",
    "border",
    "little",
    "bit",
    "larger",
    "um",
    "see",
    "style",
    "come",
    "select",
    "one",
    "class",
    "value",
    "give",
    "text",
    "different",
    "color",
    "maybe",
    "call",
    "green",
    "see",
    "text",
    "green",
    "css",
    "tutorial",
    "wanted",
    "show",
    "global",
    "attribute",
    "use",
    "connect",
    "html",
    "css",
    "came",
    "put",
    "something",
    "like",
    "width",
    "p",
    "element",
    "gave",
    "maybe",
    "20",
    "px",
    "something",
    "like",
    "going",
    "actually",
    "anything",
    "um",
    "applicable",
    "paragraph",
    "tag",
    "likewise",
    "put",
    "source",
    "copied",
    "um",
    "image",
    "url",
    "going",
    "anything",
    "either",
    "paragraph",
    "tag",
    "source",
    "attribute",
    "still",
    "render",
    "browser",
    "okay",
    "wo",
    "anything",
    "difference",
    "global",
    "element",
    "specific",
    "attribute",
    "wanted",
    "connect",
    "dots",
    "previous",
    "lessons",
    "gone",
    "think",
    "element",
    "specific",
    "attributes",
    "like",
    "javascript",
    "methods",
    "remember",
    "string",
    "like",
    "certain",
    "number",
    "methods",
    "available",
    "string",
    "data",
    "type",
    "certain",
    "methods",
    "example",
    "wanted",
    "um",
    "call",
    "method",
    "like",
    "string",
    "two",
    "uppercase",
    "right",
    "something",
    "like",
    "going",
    "work",
    "fine",
    "actually",
    "going",
    "come",
    "um",
    "console",
    "use",
    "show",
    "got",
    "string",
    "right",
    "right",
    "say",
    "string",
    "uppercase",
    "going",
    "work",
    "fine",
    "going",
    "make",
    "letters",
    "uppercase",
    "said",
    "string",
    "reverse",
    "going",
    "say",
    "type",
    "air",
    "reverse",
    "method",
    "available",
    "array",
    "um",
    "data",
    "type",
    "would",
    "need",
    "array",
    "like",
    "use",
    "array",
    "reverse",
    "actually",
    "use",
    "method",
    "thing",
    "applies",
    "html",
    "attributes",
    "certain",
    "attributes",
    "apply",
    "certain",
    "um",
    "tag",
    "types",
    "right",
    "point",
    "covered",
    "quite",
    "lot",
    "html",
    "want",
    "actually",
    "go",
    "practice",
    "exercise",
    "challenge",
    "reinforce",
    "concepts",
    "um",
    "talk",
    "um",
    "actually",
    "connect",
    "javascript",
    "html",
    "still",
    "trying",
    "figure",
    "like",
    "html",
    "work",
    "going",
    "give",
    "challenge",
    "go",
    "code",
    "pen",
    "let",
    "see",
    "open",
    "right",
    "see",
    "um",
    "challenge",
    "going",
    "working",
    "done",
    "put",
    "couple",
    "different",
    "html",
    "elements",
    "goal",
    "basically",
    "create",
    "put",
    "personal",
    "details",
    "course",
    "um",
    "something",
    "share",
    "maybe",
    "twitter",
    "use",
    "100",
    "days",
    "code",
    "hashtag",
    "uh",
    "maybe",
    "hit",
    "zgd",
    "anyways",
    "going",
    "building",
    "something",
    "like",
    "personalized",
    "given",
    "starter",
    "template",
    "linked",
    "description",
    "sure",
    "check",
    "open",
    "uh",
    "starter",
    "challenge",
    "see",
    "within",
    "ht",
    "ml",
    "kind",
    "laid",
    "basic",
    "template",
    "says",
    "code",
    "goes",
    "within",
    "code",
    "pen",
    "actually",
    "html",
    "part",
    "talked",
    "little",
    "bit",
    "earlier",
    "represents",
    "body",
    "part",
    "really",
    "start",
    "typing",
    "right",
    "leave",
    "start",
    "typing",
    "html",
    "um",
    "put",
    "text",
    "going",
    "see",
    "automatically",
    "shows",
    "screen",
    "furthermore",
    "going",
    "styled",
    "like",
    "one",
    "showed",
    "already",
    "written",
    "uh",
    "css",
    "styles",
    "basically",
    "apply",
    "html",
    "know",
    "matter",
    "use",
    "recommend",
    "browse",
    "styles",
    "worry",
    "work",
    "focus",
    "writing",
    "html",
    "necessary",
    "create",
    "something",
    "looks",
    "like",
    "hints",
    "go",
    "looks",
    "like",
    "sort",
    "heading",
    "got",
    "paragraphs",
    "got",
    "link",
    "got",
    "list",
    "got",
    "image",
    "basically",
    "need",
    "go",
    "ahead",
    "try",
    "challenge",
    "sure",
    "share",
    "results",
    "twitter",
    "think",
    "rather",
    "basic",
    "challenge",
    "um",
    "saying",
    "going",
    "easy",
    "easy",
    "uh",
    "starting",
    "basic",
    "enough",
    "going",
    "go",
    "video",
    "like",
    "go",
    "description",
    "also",
    "linked",
    "code",
    "pen",
    "sol",
    "see",
    "code",
    "wrote",
    "wrote",
    "um",
    "compare",
    "music",
    "solution",
    "next",
    "part",
    "video",
    "talking",
    "something",
    "called",
    "dom",
    "stands",
    "document",
    "object",
    "model",
    "closely",
    "related",
    "html",
    "talked",
    "previous",
    "part",
    "lesson",
    "say",
    "completed",
    "challenge",
    "gave",
    "um",
    "prior",
    "video",
    "go",
    "ahead",
    "complete",
    "would",
    "recommend",
    "least",
    "basic",
    "understanding",
    "html",
    "kind",
    "understand",
    "put",
    "something",
    "together",
    "within",
    "know",
    "code",
    "pen",
    "document",
    "something",
    "like",
    "least",
    "basic",
    "level",
    "understanding",
    "html",
    "stuff",
    "going",
    "make",
    "sense",
    "get",
    "want",
    "show",
    "little",
    "bit",
    "code",
    "pen",
    "environment",
    "understand",
    "like",
    "actually",
    "debug",
    "um",
    "javascript",
    "within",
    "browser",
    "know",
    "take",
    "concepts",
    "looking",
    "prior",
    "videos",
    "know",
    "pretty",
    "much",
    "right",
    "clicked",
    "um",
    "let",
    "take",
    "look",
    "screen",
    "rightclick",
    "inspect",
    "come",
    "console",
    "write",
    "know",
    "basic",
    "javascript",
    "within",
    "console",
    "working",
    "console",
    "quite",
    "bit",
    "go",
    "codeen",
    "since",
    "kind",
    "environment",
    "things",
    "make",
    "sure",
    "console",
    "working",
    "come",
    "js",
    "section",
    "code",
    "pen",
    "little",
    "bit",
    "different",
    "working",
    "console",
    "type",
    "something",
    "like",
    "know",
    "hello",
    "going",
    "printed",
    "console",
    "going",
    "every",
    "time",
    "page",
    "loads",
    "javascript",
    "working",
    "directly",
    "connected",
    "html",
    "document",
    "really",
    "like",
    "free",
    "form",
    "console",
    "use",
    "test",
    "different",
    "um",
    "javascript",
    "codepen",
    "console",
    "bottom",
    "left",
    "open",
    "see",
    "hello",
    "printed",
    "writing",
    "javascript",
    "code",
    "also",
    "something",
    "like",
    "console",
    "supposed",
    "represent",
    "type",
    "thing",
    "working",
    "um",
    "rightclick",
    "inspect",
    "go",
    "dev",
    "tools",
    "console",
    "problem",
    "really",
    "nice",
    "easy",
    "console",
    "work",
    "like",
    "started",
    "know",
    "define",
    "variable",
    "like",
    "string",
    "something",
    "type",
    "hit",
    "enter",
    "going",
    "say",
    "going",
    "like",
    "defined",
    "problem",
    "want",
    "able",
    "experiment",
    "around",
    "work",
    "um",
    "javascript",
    "building",
    "solve",
    "problem",
    "going",
    "using",
    "code",
    "pen",
    "console",
    "going",
    "rightclick",
    "inspect",
    "within",
    "code",
    "document",
    "still",
    "opens",
    "um",
    "console",
    "note",
    "google",
    "chrome",
    "firefox",
    "work",
    "um",
    "quite",
    "well",
    "firefox",
    "unfortunately",
    "switched",
    "chrome",
    "reason",
    "go",
    "console",
    "see",
    "hellos",
    "put",
    "earlier",
    "go",
    "little",
    "drop",
    "first",
    "enter",
    "document",
    "might",
    "see",
    "something",
    "like",
    "top",
    "order",
    "get",
    "right",
    "cont",
    "text",
    "work",
    "drop",
    "scroll",
    "code",
    "pen",
    "actually",
    "um",
    "select",
    "elements",
    "code",
    "pen",
    "document",
    "written",
    "um",
    "basically",
    "going",
    "responsiveness",
    "javascript",
    "quickly",
    "show",
    "going",
    "cover",
    "stuff",
    "um",
    "little",
    "bit",
    "let",
    "put",
    "basic",
    "paragraph",
    "tag",
    "code",
    "pen",
    "document",
    "see",
    "shown",
    "context",
    "javascript",
    "context",
    "set",
    "top",
    "try",
    "type",
    "document",
    "query",
    "selector",
    "grab",
    "paragraph",
    "tags",
    "going",
    "grab",
    "us",
    "right",
    "ones",
    "paragraph",
    "tag",
    "one",
    "looking",
    "go",
    "right",
    "context",
    "select",
    "code",
    "pen",
    "run",
    "give",
    "us",
    "correct",
    "element",
    "looking",
    "really",
    "important",
    "trying",
    "follow",
    "along",
    "like",
    "code",
    "along",
    "make",
    "sure",
    "google",
    "chrome",
    "rightclick",
    "inspect",
    "element",
    "make",
    "sure",
    "context",
    "right",
    "one",
    "code",
    "pen",
    "context",
    "right",
    "got",
    "covered",
    "um",
    "want",
    "make",
    "sure",
    "able",
    "follow",
    "along",
    "let",
    "jump",
    "document",
    "object",
    "model",
    "dom",
    "would",
    "describe",
    "dom",
    "bridge",
    "html",
    "javascript",
    "prior",
    "lessons",
    "going",
    "write",
    "javascript",
    "code",
    "gone",
    "basics",
    "least",
    "basic",
    "level",
    "understanding",
    "write",
    "javascript",
    "also",
    "learned",
    "basics",
    "html",
    "saw",
    "lot",
    "easier",
    "learn",
    "javascript",
    "going",
    "going",
    "take",
    "two",
    "concepts",
    "going",
    "combine",
    "together",
    "make",
    "um",
    "html",
    "come",
    "alive",
    "remember",
    "house",
    "analogy",
    "html",
    "structure",
    "css",
    "styling",
    "javascript",
    "function",
    "um",
    "words",
    "house",
    "analogy",
    "html",
    "bricks",
    "concrete",
    "wood",
    "css",
    "paint",
    "house",
    "javascript",
    "going",
    "plumbing",
    "electric",
    "kind",
    "stuff",
    "first",
    "question",
    "going",
    "ask",
    "looking",
    "dom",
    "first",
    "place",
    "know",
    "important",
    "well",
    "dom",
    "basically",
    "root",
    "frontend",
    "framework",
    "ever",
    "going",
    "work",
    "way",
    "connect",
    "javascript",
    "html",
    "may",
    "see",
    "directly",
    "may",
    "kind",
    "know",
    "bunch",
    "stuff",
    "behind",
    "scenes",
    "working",
    "framework",
    "like",
    "angular",
    "reactor",
    "still",
    "still",
    "using",
    "dom",
    "api",
    "going",
    "talk",
    "second",
    "important",
    "know",
    "exists",
    "know",
    "basics",
    "works",
    "trying",
    "accomplish",
    "dom",
    "know",
    "document",
    "object",
    "model",
    "gives",
    "us",
    "little",
    "bit",
    "clue",
    "talking",
    "little",
    "bit",
    "complex",
    "start",
    "dom",
    "programming",
    "language",
    "also",
    "natively",
    "part",
    "javascript",
    "exists",
    "within",
    "browser",
    "um",
    "different",
    "browser",
    "implementations",
    "whether",
    "firefox",
    "chrome",
    "safari",
    "slightly",
    "different",
    "implementations",
    "dom",
    "intents",
    "purposes",
    "really",
    "care",
    "differences",
    "want",
    "know",
    "know",
    "works",
    "best",
    "way",
    "think",
    "dom",
    "api",
    "html",
    "document",
    "may",
    "know",
    "api",
    "luckily",
    "done",
    "video",
    "go",
    "ahead",
    "watch",
    "unclear",
    "api",
    "know",
    "foot",
    "view",
    "consider",
    "api",
    "personal",
    "definition",
    "makes",
    "sense",
    "head",
    "software",
    "api",
    "thought",
    "user",
    "manual",
    "allows",
    "developers",
    "something",
    "useful",
    "software",
    "hardware",
    "without",
    "knowing",
    "inner",
    "workings",
    "software",
    "hardware",
    "basically",
    "api",
    "call",
    "dom",
    "going",
    "allow",
    "us",
    "manipulate",
    "html",
    "without",
    "knowing",
    "know",
    "html",
    "actually",
    "know",
    "manipulated",
    "within",
    "browser",
    "know",
    "write",
    "html",
    "use",
    "api",
    "call",
    "dom",
    "manipulate",
    "know",
    "head",
    "probably",
    "spinning",
    "point",
    "let",
    "jump",
    "simple",
    "example",
    "understand",
    "talking",
    "going",
    "paste",
    "html",
    "right",
    "going",
    "basic",
    "html",
    "document",
    "got",
    "h2",
    "tag",
    "paragraph",
    "tag",
    "button",
    "click",
    "button",
    "kind",
    "talked",
    "little",
    "bit",
    "earlier",
    "click",
    "button",
    "going",
    "anything",
    "reason",
    "javascript",
    "connected",
    "order",
    "connect",
    "first",
    "identify",
    "element",
    "wanting",
    "make",
    "interactive",
    "identify",
    "need",
    "instruct",
    "something",
    "via",
    "javascript",
    "example",
    "identify",
    "button",
    "using",
    "pure",
    "javascript",
    "type",
    "document",
    "query",
    "selector",
    "type",
    "button",
    "tag",
    "looking",
    "course",
    "need",
    "select",
    "correct",
    "context",
    "work",
    "want",
    "code",
    "pen",
    "context",
    "press",
    "enter",
    "going",
    "see",
    "button",
    "within",
    "code",
    "pen",
    "output",
    "right",
    "would",
    "select",
    "button",
    "actually",
    "store",
    "within",
    "variable",
    "rewrite",
    "command",
    "store",
    "basic",
    "variable",
    "btn",
    "variable",
    "reuse",
    "things",
    "point",
    "probably",
    "clue",
    "commands",
    "like",
    "document",
    "query",
    "selector",
    "kind",
    "stuff",
    "make",
    "sense",
    "yet",
    "talked",
    "dom",
    "better",
    "understand",
    "want",
    "bring",
    "yet",
    "another",
    "analogy",
    "us",
    "think",
    "html",
    "document",
    "static",
    "html",
    "document",
    "working",
    "far",
    "one",
    "right",
    "screen",
    "kind",
    "equivalent",
    "paper",
    "map",
    "paper",
    "map",
    "many",
    "things",
    "um",
    "write",
    "course",
    "going",
    "able",
    "know",
    "click",
    "see",
    "details",
    "something",
    "like",
    "google",
    "maps",
    "click",
    "go",
    "different",
    "places",
    "bunch",
    "uh",
    "functions",
    "analogy",
    "html",
    "alone",
    "like",
    "paper",
    "map",
    "add",
    "dom",
    "uh",
    "api",
    "html",
    "becomes",
    "something",
    "like",
    "google",
    "maps",
    "lot",
    "interactivity",
    "put",
    "really",
    "talk",
    "document",
    "object",
    "model",
    "let",
    "take",
    "look",
    "ft",
    "right",
    "know",
    "things",
    "javascript",
    "pretty",
    "familiar",
    "us",
    "example",
    "string",
    "javascript",
    "know",
    "right",
    "also",
    "know",
    "going",
    "number",
    "right",
    "right",
    "button",
    "um",
    "defined",
    "saved",
    "button",
    "variable",
    "look",
    "variable",
    "type",
    "data",
    "well",
    "actually",
    "good",
    "indication",
    "say",
    "type",
    "button",
    "going",
    "say",
    "object",
    "well",
    "clearly",
    "got",
    "something",
    "specific",
    "object",
    "start",
    "using",
    "dom",
    "document",
    "object",
    "object",
    "model",
    "terminology",
    "dom",
    "perspective",
    "element",
    "right",
    "variable",
    "right",
    "considered",
    "element",
    "come",
    "document",
    "object",
    "model",
    "um",
    "uh",
    "documentation",
    "going",
    "see",
    "sorts",
    "interfaces",
    "stuff",
    "pretty",
    "complex",
    "api",
    "going",
    "even",
    "um",
    "cover",
    "half",
    "click",
    "look",
    "element",
    "uh",
    "general",
    "base",
    "class",
    "element",
    "object",
    "object",
    "document",
    "inherit",
    "right",
    "would",
    "looking",
    "saved",
    "um",
    "selected",
    "element",
    "variable",
    "called",
    "btn",
    "know",
    "element",
    "type",
    "come",
    "documentation",
    "see",
    "sorts",
    "properties",
    "look",
    "sorts",
    "methods",
    "use",
    "specific",
    "variable",
    "lot",
    "functionality",
    "available",
    "us",
    "first",
    "understand",
    "know",
    "uh",
    "whole",
    "ft",
    "view",
    "going",
    "order",
    "us",
    "understand",
    "better",
    "show",
    "picture",
    "going",
    "represent",
    "um",
    "dom",
    "really",
    "trying",
    "highest",
    "level",
    "dom",
    "two",
    "um",
    "objects",
    "probably",
    "going",
    "used",
    "um",
    "objects",
    "look",
    "top",
    "level",
    "top",
    "level",
    "window",
    "object",
    "think",
    "literally",
    "browser",
    "window",
    "working",
    "specifically",
    "kind",
    "referring",
    "individual",
    "tab",
    "browser",
    "tab",
    "working",
    "cases",
    "cross",
    "tabs",
    "actually",
    "program",
    "using",
    "one",
    "object",
    "sorts",
    "things",
    "within",
    "browser",
    "general",
    "user",
    "web",
    "browser",
    "several",
    "things",
    "every",
    "day",
    "realize",
    "programmable",
    "one",
    "things",
    "scrolling",
    "right",
    "scrolling",
    "scrolling",
    "every",
    "time",
    "scroll",
    "actually",
    "programmatically",
    "javascript",
    "another",
    "thing",
    "resize",
    "browser",
    "window",
    "resize",
    "like",
    "actually",
    "javascript",
    "right",
    "finally",
    "refresh",
    "page",
    "also",
    "something",
    "javascript",
    "way",
    "connecting",
    "dom",
    "via",
    "top",
    "level",
    "object",
    "call",
    "window",
    "right",
    "going",
    "quickly",
    "show",
    "programmatically",
    "things",
    "using",
    "object",
    "first",
    "let",
    "take",
    "look",
    "mdn",
    "documentation",
    "search",
    "window",
    "looking",
    "says",
    "window",
    "interface",
    "represents",
    "window",
    "containing",
    "dom",
    "document",
    "document",
    "property",
    "points",
    "dom",
    "document",
    "loaded",
    "window",
    "basically",
    "saying",
    "windows",
    "browser",
    "tab",
    "html",
    "document",
    "represented",
    "document",
    "object",
    "within",
    "right",
    "picture",
    "showed",
    "kind",
    "uh",
    "shows",
    "relationship",
    "html",
    "document",
    "putting",
    "browser",
    "window",
    "window",
    "object",
    "like",
    "said",
    "sorts",
    "properties",
    "methods",
    "um",
    "use",
    "things",
    "commonly",
    "um",
    "clicking",
    "around",
    "browser",
    "normal",
    "basis",
    "see",
    "left",
    "hand",
    "side",
    "different",
    "um",
    "know",
    "things",
    "example",
    "alert",
    "method",
    "let",
    "go",
    "ahead",
    "inspect",
    "element",
    "browser",
    "console",
    "type",
    "window",
    "alert",
    "say",
    "love",
    "programming",
    "something",
    "like",
    "press",
    "enter",
    "going",
    "open",
    "alert",
    "window",
    "see",
    "already",
    "starting",
    "program",
    "browser",
    "window",
    "using",
    "object",
    "another",
    "thing",
    "open",
    "um",
    "new",
    "tabs",
    "say",
    "maybe",
    "go",
    "google",
    "right",
    "press",
    "enter",
    "going",
    "open",
    "new",
    "tab",
    "put",
    "us",
    "pretty",
    "cool",
    "um",
    "let",
    "see",
    "another",
    "thing",
    "scroll",
    "obviously",
    "page",
    "scroll",
    "bar",
    "one",
    "say",
    "window",
    "scroll",
    "give",
    "bunch",
    "options",
    "documented",
    "within",
    "method",
    "um",
    "go",
    "methods",
    "window",
    "let",
    "see",
    "find",
    "right",
    "found",
    "methods",
    "let",
    "see",
    "find",
    "scroll",
    "uh",
    "method",
    "right",
    "scroll",
    "click",
    "tells",
    "us",
    "okay",
    "pass",
    "options",
    "options",
    "passing",
    "scroll",
    "two",
    "options",
    "right",
    "top",
    "left",
    "behavior",
    "going",
    "define",
    "want",
    "scroll",
    "um",
    "top",
    "want",
    "scroll",
    "height",
    "going",
    "property",
    "window",
    "object",
    "basically",
    "says",
    "tall",
    "entire",
    "html",
    "document",
    "um",
    "right",
    "top",
    "want",
    "scroll",
    "entire",
    "length",
    "page",
    "essentially",
    "going",
    "bottom",
    "page",
    "right",
    "left",
    "want",
    "zero",
    "want",
    "scroll",
    "left",
    "right",
    "behavior",
    "want",
    "going",
    "smooth",
    "want",
    "jolt",
    "page",
    "want",
    "smoothly",
    "scroll",
    "right",
    "close",
    "method",
    "press",
    "enter",
    "got",
    "watch",
    "screen",
    "going",
    "scroll",
    "way",
    "bottom",
    "know",
    "page",
    "whatever",
    "guess",
    "go",
    "um",
    "way",
    "actually",
    "explained",
    "wrong",
    "height",
    "look",
    "inner",
    "height",
    "going",
    "define",
    "large",
    "visible",
    "window",
    "going",
    "uh",
    "define",
    "large",
    "entire",
    "document",
    "obviously",
    "much",
    "larger",
    "document",
    "going",
    "scroll",
    "one",
    "entire",
    "page",
    "finally",
    "able",
    "actually",
    "reload",
    "page",
    "tap",
    "property",
    "location",
    "property",
    "method",
    "called",
    "reload",
    "could",
    "found",
    "documentation",
    "looked",
    "hard",
    "enough",
    "want",
    "write",
    "sake",
    "time",
    "let",
    "press",
    "enter",
    "see",
    "um",
    "may",
    "seen",
    "reloaded",
    "entire",
    "page",
    "um",
    "programmatically",
    "see",
    "top",
    "level",
    "window",
    "object",
    "basically",
    "control",
    "browser",
    "way",
    "happening",
    "via",
    "dom",
    "api",
    "dom",
    "api",
    "connect",
    "browser",
    "html",
    "document",
    "another",
    "thing",
    "mention",
    "global",
    "object",
    "means",
    "actually",
    "specify",
    "every",
    "time",
    "use",
    "showed",
    "could",
    "window",
    "alert",
    "type",
    "something",
    "get",
    "alert",
    "right",
    "also",
    "dropping",
    "window",
    "like",
    "even",
    "need",
    "global",
    "go",
    "ahead",
    "get",
    "results",
    "right",
    "important",
    "keep",
    "mind",
    "window",
    "object",
    "document",
    "object",
    "global",
    "need",
    "specify",
    "calling",
    "methods",
    "properties",
    "couple",
    "common",
    "properties",
    "window",
    "going",
    "go",
    "methods",
    "properties",
    "objects",
    "high",
    "level",
    "one",
    "important",
    "one",
    "want",
    "window",
    "common",
    "properties",
    "might",
    "want",
    "tap",
    "one",
    "going",
    "inner",
    "height",
    "spelled",
    "wrong",
    "going",
    "give",
    "anything",
    "got",
    "inner",
    "height",
    "going",
    "give",
    "us",
    "height",
    "pixels",
    "space",
    "displays",
    "html",
    "visible",
    "um",
    "area",
    "displaying",
    "html",
    "said",
    "outer",
    "height",
    "going",
    "give",
    "us",
    "uh",
    "pixel",
    "height",
    "entire",
    "browser",
    "window",
    "look",
    "value",
    "1040",
    "uh",
    "make",
    "browser",
    "window",
    "smaller",
    "say",
    "outer",
    "height",
    "going",
    "give",
    "us",
    "different",
    "value",
    "894",
    "thing",
    "applies",
    "inner",
    "width",
    "outer",
    "width",
    "inner",
    "width",
    "going",
    "give",
    "width",
    "space",
    "displaying",
    "html",
    "resized",
    "going",
    "get",
    "different",
    "inner",
    "width",
    "right",
    "want",
    "spend",
    "much",
    "time",
    "properties",
    "kind",
    "get",
    "gist",
    "showing",
    "another",
    "common",
    "property",
    "might",
    "look",
    "window",
    "going",
    "local",
    "storage",
    "right",
    "right",
    "going",
    "big",
    "one",
    "come",
    "start",
    "getting",
    "um",
    "uh",
    "advanced",
    "web",
    "development",
    "concepts",
    "basically",
    "allows",
    "store",
    "data",
    "temporarily",
    "browser",
    "go",
    "application",
    "chrome",
    "called",
    "little",
    "bit",
    "different",
    "thing",
    "firefox",
    "actually",
    "talked",
    "like",
    "third",
    "lesson",
    "series",
    "click",
    "actually",
    "see",
    "key",
    "value",
    "data",
    "pairs",
    "set",
    "retrieved",
    "local",
    "storage",
    "object",
    "wanted",
    "set",
    "item",
    "um",
    "say",
    "test",
    "want",
    "set",
    "equal",
    "20",
    "come",
    "application",
    "see",
    "test",
    "um",
    "value",
    "20",
    "great",
    "way",
    "store",
    "temporary",
    "values",
    "accessed",
    "local",
    "storage",
    "um",
    "uh",
    "object",
    "sits",
    "window",
    "object",
    "right",
    "finally",
    "want",
    "talk",
    "location",
    "um",
    "going",
    "basically",
    "represent",
    "object",
    "details",
    "visiting",
    "right",
    "right",
    "mdn",
    "web",
    "docs",
    "look",
    "going",
    "get",
    "sorts",
    "details",
    "um",
    "location",
    "address",
    "bar",
    "common",
    "properties",
    "um",
    "one",
    "two",
    "want",
    "show",
    "move",
    "um",
    "window",
    "scroll",
    "x",
    "property",
    "going",
    "indicate",
    "much",
    "scrolled",
    "left",
    "side",
    "page",
    "guess",
    "right",
    "left",
    "horizontal",
    "scrolling",
    "window",
    "scroll",
    "going",
    "indicate",
    "much",
    "scrolled",
    "um",
    "see",
    "scroll",
    "bar",
    "going",
    "change",
    "value",
    "property",
    "every",
    "time",
    "scroll",
    "little",
    "bit",
    "going",
    "come",
    "handy",
    "work",
    "dom",
    "later",
    "want",
    "know",
    "programmatically",
    "things",
    "within",
    "browser",
    "window",
    "briefly",
    "mentioned",
    "things",
    "called",
    "events",
    "happening",
    "um",
    "within",
    "dom",
    "going",
    "little",
    "bit",
    "complicated",
    "want",
    "show",
    "basic",
    "example",
    "um",
    "something",
    "top",
    "level",
    "window",
    "object",
    "say",
    "window",
    "onscroll",
    "basically",
    "saying",
    "want",
    "tap",
    "onscroll",
    "event",
    "basically",
    "every",
    "time",
    "move",
    "browser",
    "scroll",
    "bar",
    "going",
    "fire",
    "event",
    "want",
    "every",
    "time",
    "scroll",
    "want",
    "execute",
    "function",
    "right",
    "using",
    "anonymous",
    "function",
    "going",
    "high",
    "right",
    "something",
    "simple",
    "set",
    "event",
    "listener",
    "entire",
    "window",
    "right",
    "touch",
    "scroll",
    "bar",
    "going",
    "get",
    "printing",
    "high",
    "con",
    "conso",
    "lot",
    "different",
    "iterations",
    "basic",
    "event",
    "want",
    "know",
    "available",
    "something",
    "going",
    "really",
    "dig",
    "super",
    "details",
    "lesson",
    "right",
    "talked",
    "window",
    "object",
    "represents",
    "entire",
    "know",
    "tab",
    "open",
    "guess",
    "um",
    "browser",
    "working",
    "let",
    "talk",
    "document",
    "object",
    "let",
    "put",
    "back",
    "screen",
    "um",
    "ft",
    "view",
    "dom",
    "api",
    "got",
    "top",
    "got",
    "window",
    "object",
    "property",
    "window",
    "object",
    "going",
    "document",
    "real",
    "fun",
    "begins",
    "document",
    "basically",
    "representation",
    "entire",
    "html",
    "document",
    "written",
    "let",
    "take",
    "look",
    "going",
    "refresh",
    "browser",
    "onscroll",
    "um",
    "event",
    "firing",
    "every",
    "time",
    "window",
    "top",
    "property",
    "called",
    "document",
    "right",
    "press",
    "enter",
    "see",
    "um",
    "big",
    "object",
    "basically",
    "html",
    "document",
    "defined",
    "within",
    "expand",
    "different",
    "things",
    "um",
    "visually",
    "within",
    "console",
    "actually",
    "lot",
    "things",
    "programmatically",
    "using",
    "document",
    "object",
    "add",
    "remove",
    "html",
    "elements",
    "existing",
    "page",
    "modify",
    "existing",
    "html",
    "elements",
    "even",
    "set",
    "events",
    "specific",
    "html",
    "elements",
    "saw",
    "set",
    "event",
    "entire",
    "window",
    "could",
    "set",
    "event",
    "um",
    "like",
    "talked",
    "earlier",
    "prior",
    "video",
    "something",
    "like",
    "button",
    "want",
    "wait",
    "click",
    "event",
    "want",
    "fire",
    "sort",
    "function",
    "something",
    "every",
    "time",
    "button",
    "clicked",
    "document",
    "object",
    "powerful",
    "lot",
    "things",
    "cover",
    "understand",
    "actually",
    "let",
    "show",
    "basic",
    "example",
    "uh",
    "go",
    "back",
    "um",
    "code",
    "pen",
    "basic",
    "html",
    "document",
    "going",
    "type",
    "document",
    "let",
    "take",
    "look",
    "um",
    "dealing",
    "right",
    "top",
    "level",
    "html",
    "wrapper",
    "talked",
    "um",
    "going",
    "happen",
    "every",
    "single",
    "html",
    "document",
    "codeen",
    "know",
    "notice",
    "written",
    "code",
    "pen",
    "automatically",
    "wrapping",
    "html",
    "within",
    "html",
    "wrapper",
    "right",
    "expand",
    "head",
    "code",
    "pen",
    "takes",
    "care",
    "body",
    "actual",
    "html",
    "javascript",
    "writing",
    "going",
    "placed",
    "see",
    "h2",
    "element",
    "paragraph",
    "element",
    "button",
    "element",
    "also",
    "see",
    "scripts",
    "bottom",
    "basically",
    "scripts",
    "represented",
    "javascript",
    "javascript",
    "type",
    "connected",
    "html",
    "document",
    "via",
    "script",
    "tags",
    "understand",
    "works",
    "get",
    "future",
    "lessons",
    "um",
    "wanted",
    "show",
    "anatomy",
    "document",
    "object",
    "following",
    "series",
    "way",
    "went",
    "javascript",
    "series",
    "know",
    "write",
    "basic",
    "javascript",
    "also",
    "know",
    "javascript",
    "object",
    "access",
    "properties",
    "let",
    "define",
    "basic",
    "object",
    "property",
    "right",
    "something",
    "like",
    "prop",
    "one",
    "prop",
    "two",
    "nothing",
    "fancy",
    "actually",
    "let",
    "make",
    "nested",
    "object",
    "well",
    "um",
    "say",
    "nested",
    "right",
    "end",
    "right",
    "object",
    "propop",
    "nested",
    "going",
    "equal",
    "value",
    "right",
    "use",
    "dot",
    "notation",
    "access",
    "different",
    "um",
    "embedded",
    "uh",
    "properties",
    "values",
    "within",
    "object",
    "would",
    "think",
    "could",
    "thing",
    "document",
    "object",
    "ca",
    "right",
    "try",
    "sort",
    "access",
    "let",
    "clear",
    "screen",
    "try",
    "document",
    "um",
    "let",
    "go",
    "ahead",
    "look",
    "one",
    "one",
    "quick",
    "second",
    "obviously",
    "document",
    "html",
    "body",
    "typed",
    "document",
    "htmlbody",
    "going",
    "say",
    "read",
    "property",
    "body",
    "undefined",
    "clearly",
    "access",
    "different",
    "html",
    "elements",
    "notation",
    "use",
    "um",
    "document",
    "object",
    "model",
    "api",
    "little",
    "bit",
    "different",
    "takes",
    "little",
    "bit",
    "getting",
    "used",
    "hopefully",
    "walk",
    "common",
    "ways",
    "use",
    "remainder",
    "video",
    "going",
    "put",
    "new",
    "html",
    "document",
    "additional",
    "uh",
    "parts",
    "really",
    "visualize",
    "dom",
    "right",
    "think",
    "document",
    "object",
    "model",
    "tree",
    "furthermore",
    "think",
    "tree",
    "um",
    "kind",
    "like",
    "think",
    "ancestry",
    "um",
    "trees",
    "whatever",
    "grandparents",
    "parents",
    "uh",
    "children",
    "stuff",
    "like",
    "seeing",
    "screen",
    "right",
    "html",
    "document",
    "created",
    "code",
    "pen",
    "um",
    "represented",
    "dom",
    "tree",
    "right",
    "see",
    "document",
    "top",
    "go",
    "html",
    "head",
    "body",
    "underneath",
    "body",
    "specifically",
    "html",
    "written",
    "within",
    "html",
    "lot",
    "siblings",
    "also",
    "children",
    "example",
    "um",
    "let",
    "look",
    "main",
    "div",
    "right",
    "main",
    "body",
    "main",
    "body",
    "div",
    "going",
    "parent",
    "h1",
    "tag",
    "two",
    "p",
    "tags",
    "ul",
    "unordered",
    "list",
    "tag",
    "right",
    "going",
    "parent",
    "uh",
    "four",
    "look",
    "list",
    "items",
    "parent",
    "going",
    "unordered",
    "list",
    "grandparent",
    "going",
    "main",
    "body",
    "div",
    "see",
    "relationships",
    "build",
    "furthermore",
    "know",
    "concept",
    "siblings",
    "list",
    "items",
    "going",
    "siblings",
    "within",
    "document",
    "object",
    "model",
    "unordered",
    "list",
    "p",
    "tags",
    "h1",
    "siblings",
    "call",
    "elements",
    "well",
    "document",
    "object",
    "model",
    "call",
    "nodes",
    "different",
    "um",
    "confuse",
    "nodejs",
    "talk",
    "later",
    "series",
    "basic",
    "basically",
    "backend",
    "server",
    "side",
    "version",
    "writing",
    "javascript",
    "totally",
    "different",
    "concept",
    "elements",
    "considered",
    "nodes",
    "within",
    "dom",
    "tree",
    "course",
    "different",
    "different",
    "types",
    "nodes",
    "going",
    "put",
    "um",
    "image",
    "back",
    "screen",
    "looked",
    "um",
    "prior",
    "part",
    "lesson",
    "talked",
    "basics",
    "html",
    "within",
    "um",
    "element",
    "defined",
    "total",
    "unit",
    "different",
    "types",
    "nodes",
    "simplest",
    "level",
    "something",
    "called",
    "element",
    "node",
    "going",
    "represented",
    "p",
    "tag",
    "right",
    "attribute",
    "uh",
    "html",
    "element",
    "call",
    "attribute",
    "node",
    "finally",
    "text",
    "node",
    "going",
    "content",
    "putting",
    "starting",
    "closing",
    "paragraph",
    "tags",
    "prove",
    "going",
    "actually",
    "take",
    "element",
    "create",
    "javascript",
    "insert",
    "page",
    "looking",
    "right",
    "right",
    "first",
    "thing",
    "define",
    "three",
    "different",
    "types",
    "nodes",
    "right",
    "first",
    "one",
    "going",
    "element",
    "node",
    "let",
    "let",
    "actually",
    "zoom",
    "little",
    "bit",
    "got",
    "element",
    "node",
    "use",
    "document",
    "object",
    "use",
    "create",
    "element",
    "keep",
    "forgetting",
    "change",
    "context",
    "code",
    "pen",
    "working",
    "document",
    "seeing",
    "rather",
    "whole",
    "document",
    "right",
    "sorry",
    "going",
    "create",
    "element",
    "node",
    "going",
    "p",
    "tag",
    "right",
    "creating",
    "element",
    "put",
    "screen",
    "let",
    "press",
    "enter",
    "created",
    "first",
    "element",
    "node",
    "look",
    "going",
    "mtyp",
    "tag",
    "nothing",
    "yet",
    "right",
    "create",
    "text",
    "node",
    "right",
    "right",
    "going",
    "type",
    "document",
    "create",
    "text",
    "node",
    "going",
    "put",
    "word",
    "content",
    "stuff",
    "p",
    "tags",
    "right",
    "press",
    "enter",
    "right",
    "element",
    "node",
    "still",
    "empty",
    "right",
    "still",
    "empty",
    "p",
    "tag",
    "reason",
    "assigned",
    "text",
    "node",
    "element",
    "yet",
    "let",
    "create",
    "last",
    "node",
    "going",
    "attribute",
    "attribute",
    "node",
    "create",
    "attribute",
    "want",
    "call",
    "class",
    "attribute",
    "type",
    "attribute",
    "uh",
    "html",
    "element",
    "right",
    "point",
    "let",
    "look",
    "element",
    "node",
    "empty",
    "p",
    "tag",
    "text",
    "node",
    "going",
    "content",
    "string",
    "specifically",
    "dom",
    "string",
    "finally",
    "attribute",
    "node",
    "going",
    "class",
    "equals",
    "empty",
    "basically",
    "assigned",
    "value",
    "attribute",
    "yet",
    "initialized",
    "first",
    "thing",
    "want",
    "want",
    "take",
    "text",
    "node",
    "want",
    "put",
    "inside",
    "um",
    "p",
    "tag",
    "element",
    "node",
    "say",
    "element",
    "node",
    "append",
    "child",
    "pass",
    "text",
    "node",
    "press",
    "enter",
    "print",
    "element",
    "node",
    "going",
    "p",
    "tag",
    "content",
    "placed",
    "starting",
    "build",
    "element",
    "next",
    "thing",
    "give",
    "value",
    "attribute",
    "saw",
    "class",
    "equal",
    "empty",
    "string",
    "say",
    "attribute",
    "node",
    "say",
    "value",
    "equals",
    "su",
    "class",
    "right",
    "attribute",
    "node",
    "print",
    "going",
    "say",
    "class",
    "equals",
    "su",
    "class",
    "getting",
    "closer",
    "thing",
    "missing",
    "attribute",
    "connected",
    "um",
    "paragraph",
    "element",
    "take",
    "element",
    "node",
    "say",
    "set",
    "attribute",
    "pass",
    "attribute",
    "node",
    "says",
    "failed",
    "execute",
    "um",
    "two",
    "oh",
    "okay",
    "messed",
    "set",
    "attribute",
    "set",
    "attribute",
    "node",
    "right",
    "press",
    "enter",
    "element",
    "node",
    "going",
    "full",
    "html",
    "element",
    "saw",
    "model",
    "last",
    "thing",
    "insert",
    "document",
    "way",
    "use",
    "document",
    "object",
    "type",
    "document",
    "use",
    "append",
    "child",
    "method",
    "talked",
    "yet",
    "want",
    "show",
    "works",
    "pass",
    "element",
    "node",
    "look",
    "bottom",
    "code",
    "pen",
    "going",
    "see",
    "element",
    "inserted",
    "document",
    "going",
    "say",
    "failed",
    "execute",
    "um",
    "messed",
    "forgot",
    "need",
    "add",
    "one",
    "piece",
    "code",
    "need",
    "say",
    "instead",
    "inserting",
    "end",
    "document",
    "represents",
    "whole",
    "html",
    "um",
    "document",
    "need",
    "specify",
    "want",
    "look",
    "body",
    "specifically",
    "go",
    "elements",
    "look",
    "entire",
    "well",
    "guess",
    "good",
    "example",
    "cuz",
    "code",
    "pen",
    "adding",
    "bunch",
    "stuff",
    "basically",
    "need",
    "put",
    "body",
    "element",
    "let",
    "press",
    "enter",
    "see",
    "content",
    "inserted",
    "existing",
    "html",
    "document",
    "may",
    "recognized",
    "actually",
    "tapping",
    "dom",
    "api",
    "everything",
    "created",
    "new",
    "html",
    "element",
    "javascript",
    "alone",
    "see",
    "use",
    "things",
    "like",
    "set",
    "uh",
    "set",
    "attribute",
    "node",
    "pen",
    "child",
    "used",
    "create",
    "attribute",
    "create",
    "text",
    "create",
    "element",
    "methods",
    "defined",
    "within",
    "document",
    "object",
    "model",
    "right",
    "actually",
    "using",
    "dom",
    "speak",
    "might",
    "ask",
    "point",
    "every",
    "time",
    "refresh",
    "page",
    "refresh",
    "page",
    "reload",
    "going",
    "elements",
    "inserted",
    "document",
    "anymore",
    "um",
    "sure",
    "okay",
    "html",
    "actually",
    "need",
    "copy",
    "stuff",
    "save",
    "actual",
    "code",
    "pen",
    "whatever",
    "case",
    "content",
    "bottom",
    "going",
    "temporary",
    "might",
    "ask",
    "well",
    "point",
    "inserting",
    "stuff",
    "javascript",
    "answer",
    "user",
    "experience",
    "user",
    "creates",
    "calendar",
    "event",
    "google",
    "calendar",
    "see",
    "calendar",
    "event",
    "pop",
    "immediately",
    "calendar",
    "done",
    "via",
    "javascript",
    "know",
    "tapping",
    "dom",
    "right",
    "another",
    "example",
    "user",
    "adds",
    "item",
    "app",
    "user",
    "creates",
    "post",
    "facebook",
    "things",
    "using",
    "javascript",
    "via",
    "dom",
    "dom",
    "api",
    "insert",
    "elements",
    "modify",
    "elements",
    "existing",
    "within",
    "html",
    "document",
    "temporary",
    "want",
    "better",
    "user",
    "experience",
    "want",
    "immediately",
    "change",
    "know",
    "web",
    "page",
    "later",
    "kind",
    "save",
    "database",
    "reload",
    "new",
    "data",
    "later",
    "right",
    "point",
    "gone",
    "lot",
    "different",
    "angles",
    "think",
    "dom",
    "actually",
    "know",
    "buckled",
    "tried",
    "understand",
    "know",
    "actually",
    "use",
    "dom",
    "methods",
    "available",
    "us",
    "um",
    "exactly",
    "dom",
    "like",
    "know",
    "working",
    "window",
    "object",
    "document",
    "object",
    "much",
    "also",
    "work",
    "individual",
    "elements",
    "element",
    "certain",
    "things",
    "like",
    "talked",
    "html",
    "javascript",
    "purpose",
    "series",
    "make",
    "expert",
    "one",
    "thing",
    "take",
    "zero",
    "launching",
    "first",
    "full",
    "stack",
    "application",
    "deploying",
    "got",
    "cover",
    "lot",
    "ground",
    "going",
    "walk",
    "example",
    "using",
    "dom",
    "going",
    "cover",
    "common",
    "uh",
    "methods",
    "um",
    "know",
    "properties",
    "use",
    "within",
    "dom",
    "going",
    "cover",
    "everything",
    "quite",
    "frankly",
    "developers",
    "know",
    "everything",
    "dom",
    "complicated",
    "lot",
    "stuff",
    "never",
    "end",
    "using",
    "within",
    "career",
    "anyways",
    "let",
    "get",
    "started",
    "let",
    "go",
    "ahead",
    "put",
    "new",
    "html",
    "code",
    "pen",
    "right",
    "one",
    "says",
    "welcome",
    "html",
    "tutorial",
    "click",
    "button",
    "begin",
    "button",
    "want",
    "want",
    "every",
    "time",
    "click",
    "want",
    "add",
    "new",
    "paragraph",
    "element",
    "bottom",
    "page",
    "well",
    "three",
    "steps",
    "number",
    "one",
    "find",
    "way",
    "identify",
    "button",
    "element",
    "start",
    "working",
    "number",
    "two",
    "register",
    "click",
    "event",
    "button",
    "part",
    "dom",
    "part",
    "dom",
    "api",
    "number",
    "three",
    "need",
    "write",
    "function",
    "insert",
    "new",
    "paragraph",
    "element",
    "web",
    "page",
    "every",
    "time",
    "click",
    "let",
    "take",
    "look",
    "button",
    "global",
    "attribute",
    "called",
    "id",
    "every",
    "html",
    "element",
    "um",
    "able",
    "id",
    "attribute",
    "also",
    "global",
    "attribute",
    "called",
    "class",
    "every",
    "html",
    "element",
    "el",
    "eligible",
    "class",
    "multiple",
    "ways",
    "identify",
    "button",
    "let",
    "take",
    "couple",
    "ways",
    "better",
    "explain",
    "methods",
    "dom",
    "first",
    "way",
    "probably",
    "generic",
    "say",
    "document",
    "query",
    "selector",
    "type",
    "button",
    "going",
    "um",
    "button",
    "going",
    "represent",
    "tag",
    "looking",
    "going",
    "um",
    "right",
    "going",
    "look",
    "button",
    "entire",
    "page",
    "including",
    "um",
    "code",
    "pen",
    "know",
    "interface",
    "reason",
    "right",
    "context",
    "text",
    "let",
    "go",
    "code",
    "pen",
    "try",
    "going",
    "select",
    "button",
    "going",
    "going",
    "look",
    "html",
    "document",
    "working",
    "going",
    "find",
    "first",
    "occurrence",
    "button",
    "tag",
    "find",
    "going",
    "return",
    "null",
    "question",
    "know",
    "use",
    "document",
    "query",
    "selector",
    "right",
    "reason",
    "knew",
    "go",
    "documentation",
    "go",
    "apisd",
    "go",
    "dom",
    "find",
    "document",
    "object",
    "document",
    "object",
    "talked",
    "represents",
    "html",
    "document",
    "certain",
    "properties",
    "certain",
    "methods",
    "available",
    "us",
    "use",
    "scroll",
    "way",
    "methods",
    "see",
    "couple",
    "different",
    "query",
    "methods",
    "um",
    "query",
    "command",
    "enabled",
    "wo",
    "use",
    "much",
    "um",
    "couple",
    "others",
    "see",
    "query",
    "selector",
    "actually",
    "listed",
    "twice",
    "sure",
    "meant",
    "meant",
    "way",
    "um",
    "think",
    "actually",
    "go",
    "query",
    "selector",
    "tell",
    "us",
    "basically",
    "use",
    "put",
    "selectors",
    "says",
    "uh",
    "dom",
    "string",
    "containing",
    "one",
    "selectors",
    "match",
    "string",
    "must",
    "valid",
    "um",
    "css",
    "selector",
    "string",
    "know",
    "whole",
    "lot",
    "css",
    "quite",
    "yet",
    "basically",
    "means",
    "pass",
    "um",
    "query",
    "selector",
    "pass",
    "something",
    "hashtag",
    "beginning",
    "represents",
    "id",
    "remember",
    "got",
    "id",
    "equal",
    "put",
    "hashtag",
    "type",
    "bt",
    "btn",
    "d1",
    "able",
    "find",
    "element",
    "course",
    "got",
    "go",
    "back",
    "code",
    "pen",
    "uh",
    "context",
    "annoying",
    "um",
    "um",
    "promise",
    "get",
    "little",
    "bit",
    "easier",
    "future",
    "go",
    "btn",
    "d1",
    "find",
    "element",
    "way",
    "also",
    "use",
    "class",
    "selector",
    "period",
    "right",
    "see",
    "class",
    "btn",
    "period",
    "btn",
    "able",
    "find",
    "button",
    "way",
    "well",
    "specific",
    "ways",
    "find",
    "single",
    "element",
    "within",
    "dom",
    "course",
    "anything",
    "programming",
    "lots",
    "ways",
    "solve",
    "problem",
    "go",
    "back",
    "documentation",
    "let",
    "go",
    "back",
    "main",
    "document",
    "object",
    "look",
    "methods",
    "got",
    "query",
    "selectors",
    "kind",
    "generic",
    "query",
    "selectors",
    "basically",
    "use",
    "find",
    "elements",
    "within",
    "html",
    "document",
    "also",
    "get",
    "element",
    "id",
    "right",
    "another",
    "way",
    "lo",
    "element",
    "replace",
    "say",
    "get",
    "element",
    "id",
    "time",
    "pass",
    "id",
    "even",
    "need",
    "hashtag",
    "end",
    "oh",
    "messed",
    "right",
    "let",
    "try",
    "get",
    "element",
    "id",
    "button",
    "one",
    "able",
    "find",
    "button",
    "using",
    "different",
    "method",
    "see",
    "many",
    "ways",
    "skin",
    "cat",
    "um",
    "document",
    "object",
    "model",
    "get",
    "creative",
    "code",
    "reason",
    "um",
    "selecting",
    "id",
    "specific",
    "way",
    "probably",
    "best",
    "way",
    "two",
    "elements",
    "id",
    "tried",
    "copy",
    "button",
    "got",
    "exact",
    "id",
    "button",
    "going",
    "conflict",
    "really",
    "valid",
    "html",
    "still",
    "render",
    "cause",
    "problems",
    "trying",
    "use",
    "sort",
    "framework",
    "even",
    "locate",
    "things",
    "dom",
    "going",
    "paste",
    "different",
    "ways",
    "identify",
    "one",
    "button",
    "let",
    "get",
    "rid",
    "uh",
    "button",
    "second",
    "one",
    "going",
    "kind",
    "refresh",
    "put",
    "back",
    "wrong",
    "context",
    "going",
    "go",
    "back",
    "paste",
    "different",
    "methods",
    "see",
    "quite",
    "lot",
    "different",
    "ways",
    "identify",
    "button",
    "valid",
    "ways",
    "executed",
    "looks",
    "like",
    "one",
    "um",
    "type",
    "individually",
    "going",
    "locate",
    "time",
    "obviously",
    "specific",
    "others",
    "always",
    "prefer",
    "specific",
    "possible",
    "identifying",
    "elements",
    "within",
    "dom",
    "right",
    "know",
    "identify",
    "element",
    "let",
    "go",
    "ahead",
    "write",
    "code",
    "far",
    "used",
    "javascript",
    "section",
    "quite",
    "yet",
    "going",
    "going",
    "say",
    "add",
    "paragraph",
    "going",
    "make",
    "function",
    "going",
    "actually",
    "called",
    "every",
    "time",
    "click",
    "button",
    "locate",
    "button",
    "assign",
    "variable",
    "going",
    "use",
    "one",
    "methods",
    "choose",
    "query",
    "selector",
    "going",
    "pass",
    "id",
    "button",
    "order",
    "identify",
    "right",
    "button",
    "variable",
    "represent",
    "button",
    "able",
    "something",
    "every",
    "time",
    "clicked",
    "actually",
    "going",
    "put",
    "within",
    "function",
    "uh",
    "global",
    "scope",
    "uh",
    "javascript",
    "document",
    "going",
    "close",
    "console",
    "room",
    "write",
    "second",
    "right",
    "button",
    "identified",
    "function",
    "going",
    "add",
    "paragraph",
    "right",
    "last",
    "thing",
    "add",
    "event",
    "listener",
    "say",
    "add",
    "event",
    "listener",
    "specify",
    "event",
    "trying",
    "listen",
    "function",
    "call",
    "back",
    "going",
    "pass",
    "execute",
    "event",
    "happening",
    "first",
    "way",
    "register",
    "event",
    "specific",
    "html",
    "element",
    "one",
    "way",
    "another",
    "way",
    "take",
    "element",
    "button",
    "say",
    "onclick",
    "set",
    "equal",
    "add",
    "paragraph",
    "going",
    "also",
    "register",
    "event",
    "button",
    "third",
    "way",
    "html",
    "looked",
    "previously",
    "tutorial",
    "come",
    "button",
    "say",
    "onclick",
    "set",
    "equal",
    "add",
    "paragraph",
    "actually",
    "execute",
    "within",
    "parentheses",
    "going",
    "register",
    "click",
    "event",
    "well",
    "three",
    "different",
    "ways",
    "register",
    "click",
    "event",
    "case",
    "want",
    "directly",
    "javascript",
    "go",
    "ahead",
    "go",
    "one",
    "pretty",
    "simple",
    "one",
    "might",
    "asking",
    "like",
    "know",
    "event",
    "valid",
    "reason",
    "know",
    "go",
    "event",
    "reference",
    "within",
    "mdn",
    "web",
    "docs",
    "um",
    "going",
    "give",
    "us",
    "different",
    "events",
    "elements",
    "web",
    "right",
    "going",
    "work",
    "like",
    "say",
    "button",
    "um",
    "lot",
    "work",
    "various",
    "components",
    "within",
    "web",
    "page",
    "mouse",
    "events",
    "see",
    "click",
    "event",
    "going",
    "um",
    "tell",
    "us",
    "event",
    "handler",
    "property",
    "onclick",
    "put",
    "right",
    "get",
    "used",
    "un",
    "know",
    "basically",
    "pick",
    "common",
    "events",
    "um",
    "due",
    "time",
    "um",
    "used",
    "frequent",
    "basis",
    "onclick",
    "method",
    "actually",
    "one",
    "common",
    "events",
    "use",
    "web",
    "programming",
    "point",
    "event",
    "wired",
    "add",
    "paragraph",
    "function",
    "going",
    "fire",
    "every",
    "time",
    "um",
    "click",
    "button",
    "let",
    "say",
    "button",
    "working",
    "right",
    "go",
    "ahead",
    "open",
    "back",
    "console",
    "rightclick",
    "inspect",
    "go",
    "console",
    "correct",
    "context",
    "looks",
    "like",
    "say",
    "click",
    "button",
    "going",
    "say",
    "button",
    "working",
    "going",
    "every",
    "time",
    "click",
    "goal",
    "insert",
    "new",
    "paragraph",
    "element",
    "every",
    "time",
    "click",
    "button",
    "right",
    "console",
    "logging",
    "string",
    "console",
    "also",
    "construct",
    "new",
    "element",
    "like",
    "time",
    "around",
    "going",
    "show",
    "shortcut",
    "cuts",
    "going",
    "make",
    "little",
    "bit",
    "easier",
    "create",
    "paragraph",
    "element",
    "want",
    "random",
    "uh",
    "data",
    "printed",
    "new",
    "paragraph",
    "element",
    "generate",
    "random",
    "number",
    "um",
    "say",
    "random",
    "num",
    "going",
    "equal",
    "math",
    "floor",
    "trick",
    "learned",
    "previous",
    "lesson",
    "zero",
    "100",
    "something",
    "like",
    "right",
    "going",
    "say",
    "p",
    "content",
    "want",
    "actually",
    "add",
    "within",
    "paragraph",
    "element",
    "going",
    "combine",
    "random",
    "number",
    "going",
    "say",
    "random",
    "number",
    "going",
    "add",
    "via",
    "string",
    "concatenation",
    "random",
    "number",
    "right",
    "p",
    "content",
    "random",
    "uh",
    "string",
    "let",
    "go",
    "ahead",
    "test",
    "real",
    "quick",
    "printing",
    "random",
    "string",
    "console",
    "every",
    "time",
    "clicked",
    "right",
    "click",
    "going",
    "say",
    "random",
    "number",
    "eight",
    "right",
    "done",
    "need",
    "actually",
    "create",
    "paragraph",
    "element",
    "way",
    "going",
    "um",
    "going",
    "define",
    "new",
    "element",
    "variable",
    "going",
    "use",
    "document",
    "create",
    "new",
    "element",
    "method",
    "right",
    "go",
    "mdn",
    "docs",
    "go",
    "technologies",
    "apis",
    "dom",
    "go",
    "document",
    "object",
    "right",
    "go",
    "methods",
    "right",
    "going",
    "methods",
    "documentation",
    "see",
    "create",
    "element",
    "right",
    "um",
    "create",
    "new",
    "element",
    "know",
    "said",
    "going",
    "create",
    "element",
    "need",
    "pass",
    "type",
    "element",
    "looking",
    "look",
    "create",
    "element",
    "documentation",
    "going",
    "say",
    "tag",
    "name",
    "required",
    "property",
    "um",
    "parameter",
    "method",
    "tag",
    "name",
    "works",
    "case",
    "going",
    "pass",
    "p",
    "tag",
    "name",
    "new",
    "element",
    "assigned",
    "variable",
    "next",
    "thing",
    "going",
    "instead",
    "creating",
    "new",
    "text",
    "node",
    "like",
    "first",
    "example",
    "going",
    "take",
    "new",
    "element",
    "going",
    "use",
    "property",
    "called",
    "text",
    "content",
    "exists",
    "going",
    "set",
    "equal",
    "p",
    "content",
    "variable",
    "created",
    "prior",
    "right",
    "go",
    "um",
    "documentation",
    "go",
    "um",
    "let",
    "see",
    "element",
    "reference",
    "going",
    "type",
    "element",
    "text",
    "content",
    "going",
    "part",
    "really",
    "fastest",
    "way",
    "type",
    "text",
    "content",
    "um",
    "going",
    "part",
    "node",
    "um",
    "interface",
    "remember",
    "dom",
    "tree",
    "constructed",
    "bunch",
    "nodes",
    "matter",
    "type",
    "node",
    "working",
    "always",
    "going",
    "properties",
    "methods",
    "node",
    "interface",
    "see",
    "properties",
    "scroll",
    "text",
    "content",
    "see",
    "actually",
    "set",
    "new",
    "content",
    "uh",
    "directly",
    "need",
    "basically",
    "add",
    "document",
    "um",
    "end",
    "way",
    "come",
    "bottom",
    "say",
    "document",
    "body",
    "append",
    "child",
    "put",
    "new",
    "element",
    "random",
    "text",
    "content",
    "get",
    "rid",
    "uh",
    "right",
    "whole",
    "um",
    "function",
    "dealing",
    "add",
    "paragraph",
    "get",
    "random",
    "number",
    "generate",
    "random",
    "content",
    "number",
    "create",
    "paragraph",
    "element",
    "assign",
    "random",
    "content",
    "text",
    "content",
    "element",
    "append",
    "end",
    "html",
    "body",
    "basically",
    "going",
    "button",
    "right",
    "let",
    "go",
    "ahead",
    "test",
    "press",
    "click",
    "going",
    "get",
    "new",
    "paragraph",
    "element",
    "random",
    "number",
    "every",
    "time",
    "click",
    "pretty",
    "cool",
    "um",
    "like",
    "programming",
    "starts",
    "get",
    "kind",
    "fun",
    "actually",
    "start",
    "building",
    "things",
    "interactive",
    "click",
    "buttons",
    "get",
    "results",
    "hopefully",
    "um",
    "brings",
    "little",
    "bit",
    "excitement",
    "obviously",
    "something",
    "useful",
    "soon",
    "get",
    "future",
    "videos",
    "see",
    "examples",
    "gone",
    "really",
    "um",
    "methods",
    "properties",
    "kind",
    "remember",
    "dom",
    "um",
    "got",
    "query",
    "selectors",
    "identify",
    "element",
    "want",
    "methods",
    "create",
    "new",
    "elements",
    "modify",
    "content",
    "attributes",
    "talked",
    "much",
    "yet",
    "um",
    "bunch",
    "stuff",
    "elements",
    "next",
    "thing",
    "talk",
    "going",
    "navigate",
    "html",
    "document",
    "talked",
    "dom",
    "tree",
    "know",
    "siblings",
    "parents",
    "grandparents",
    "child",
    "kind",
    "stuff",
    "going",
    "come",
    "play",
    "actually",
    "navigate",
    "complex",
    "html",
    "document",
    "going",
    "copy",
    "predefined",
    "html",
    "document",
    "see",
    "looked",
    "going",
    "basically",
    "figure",
    "dom",
    "um",
    "dom",
    "interfaces",
    "actually",
    "work",
    "talk",
    "know",
    "dom",
    "nodes",
    "know",
    "elements",
    "elements",
    "kind",
    "inherit",
    "dom",
    "node",
    "like",
    "mean",
    "going",
    "become",
    "apparent",
    "work",
    "navigation",
    "html",
    "document",
    "let",
    "put",
    "um",
    "diagram",
    "back",
    "screen",
    "see",
    "document",
    "right",
    "visualized",
    "tree",
    "um",
    "visual",
    "see",
    "um",
    "list",
    "items",
    "going",
    "siblings",
    "going",
    "children",
    "unordered",
    "list",
    "select",
    "unordered",
    "list",
    "get",
    "children",
    "javascript",
    "well",
    "actually",
    "simpler",
    "might",
    "think",
    "already",
    "able",
    "identify",
    "um",
    "elements",
    "dom",
    "use",
    "document",
    "query",
    "select",
    "ctor",
    "pass",
    "either",
    "tag",
    "id",
    "class",
    "name",
    "something",
    "like",
    "identify",
    "since",
    "one",
    "unordered",
    "list",
    "entire",
    "document",
    "put",
    "ul",
    "tag",
    "name",
    "going",
    "change",
    "context",
    "try",
    "going",
    "select",
    "list",
    "right",
    "let",
    "go",
    "ahead",
    "assign",
    "variable",
    "something",
    "work",
    "say",
    "list",
    "equal",
    "document",
    "query",
    "selector",
    "grabbing",
    "actual",
    "html",
    "tag",
    "press",
    "enter",
    "list",
    "going",
    "um",
    "showing",
    "us",
    "html",
    "obviously",
    "visual",
    "representation",
    "object",
    "um",
    "wanted",
    "figure",
    "know",
    "variable",
    "representing",
    "know",
    "list",
    "variable",
    "actually",
    "represent",
    "way",
    "ever",
    "confused",
    "type",
    "variable",
    "working",
    "use",
    "handy",
    "property",
    "every",
    "node",
    "dom",
    "tree",
    "right",
    "say",
    "list",
    "node",
    "type",
    "going",
    "return",
    "us",
    "number",
    "right",
    "wonder",
    "number",
    "well",
    "go",
    "documentation",
    "type",
    "uh",
    "node",
    "node",
    "type",
    "type",
    "node",
    "type",
    "find",
    "click",
    "scroll",
    "constants",
    "type",
    "constants",
    "tell",
    "type",
    "element",
    "working",
    "case",
    "got",
    "value",
    "one",
    "tells",
    "us",
    "working",
    "element",
    "node",
    "click",
    "element",
    "see",
    "okay",
    "type",
    "um",
    "node",
    "within",
    "dom",
    "working",
    "properties",
    "methods",
    "available",
    "us",
    "scroll",
    "look",
    "properties",
    "element",
    "see",
    "property",
    "called",
    "children",
    "right",
    "click",
    "going",
    "say",
    "parent",
    "node",
    "property",
    "children",
    "readon",
    "property",
    "returns",
    "live",
    "html",
    "collection",
    "contains",
    "child",
    "elements",
    "node",
    "upon",
    "called",
    "right",
    "let",
    "go",
    "back",
    "um",
    "document",
    "say",
    "list",
    "see",
    "getting",
    "returned",
    "html",
    "collection",
    "html",
    "collection",
    "course",
    "another",
    "thing",
    "understand",
    "go",
    "back",
    "documentation",
    "click",
    "html",
    "collection",
    "see",
    "dealing",
    "go",
    "methods",
    "properties",
    "one",
    "method",
    "called",
    "item",
    "html",
    "collection",
    "going",
    "return",
    "us",
    "element",
    "specific",
    "index",
    "html",
    "collection",
    "basically",
    "like",
    "array",
    "worked",
    "javascript",
    "quite",
    "array",
    "ca",
    "um",
    "come",
    "pass",
    "brackets",
    "put",
    "zero",
    "one",
    "um",
    "least",
    "think",
    "maybe",
    "um",
    "sure",
    "okay",
    "maybe",
    "actually",
    "um",
    "put",
    "list",
    "children",
    "item",
    "select",
    "one",
    "going",
    "select",
    "second",
    "item",
    "list",
    "way",
    "always",
    "um",
    "done",
    "way",
    "documentation",
    "kind",
    "presents",
    "looks",
    "like",
    "um",
    "least",
    "browser",
    "working",
    "bracket",
    "notation",
    "works",
    "well",
    "though",
    "identify",
    "specific",
    "elements",
    "within",
    "list",
    "set",
    "equal",
    "variables",
    "like",
    "list",
    "come",
    "left",
    "say",
    "um",
    "list",
    "item",
    "equal",
    "second",
    "one",
    "list",
    "press",
    "enter",
    "entire",
    "html",
    "element",
    "stored",
    "variable",
    "use",
    "um",
    "different",
    "properties",
    "modify",
    "came",
    "said",
    "list",
    "item",
    "representing",
    "second",
    "item",
    "said",
    "text",
    "content",
    "right",
    "list",
    "item",
    "number",
    "two",
    "set",
    "equal",
    "new",
    "content",
    "right",
    "already",
    "watch",
    "happens",
    "html",
    "document",
    "press",
    "enter",
    "changes",
    "content",
    "kind",
    "kind",
    "showing",
    "know",
    "look",
    "whole",
    "dom",
    "tree",
    "say",
    "okay",
    "parent",
    "get",
    "children",
    "select",
    "one",
    "child",
    "elements",
    "know",
    "set",
    "children",
    "standalone",
    "html",
    "element",
    "sorts",
    "things",
    "set",
    "event",
    "listeners",
    "change",
    "text",
    "content",
    "sorts",
    "things",
    "defined",
    "documentation",
    "working",
    "maybe",
    "know",
    "list",
    "item",
    "um",
    "represents",
    "node",
    "type",
    "well",
    "say",
    "node",
    "type",
    "get",
    "answer",
    "one",
    "means",
    "element",
    "go",
    "documentation",
    "go",
    "back",
    "search",
    "element",
    "properties",
    "methods",
    "event",
    "listeners",
    "available",
    "specific",
    "element",
    "stored",
    "variable",
    "right",
    "next",
    "thing",
    "want",
    "want",
    "dig",
    "little",
    "bit",
    "deep",
    "concept",
    "nodes",
    "beating",
    "around",
    "bush",
    "little",
    "bit",
    "um",
    "talking",
    "everything",
    "dom",
    "tree",
    "considered",
    "node",
    "also",
    "looking",
    "elements",
    "html",
    "collections",
    "stuff",
    "like",
    "get",
    "confusing",
    "like",
    "different",
    "interfaces",
    "going",
    "like",
    "different",
    "data",
    "types",
    "different",
    "properties",
    "methods",
    "know",
    "look",
    "available",
    "forth",
    "well",
    "get",
    "programming",
    "concept",
    "something",
    "covered",
    "yet",
    "um",
    "may",
    "cover",
    "future",
    "videos",
    "um",
    "gets",
    "things",
    "like",
    "classes",
    "inheritance",
    "um",
    "class",
    "methods",
    "static",
    "methods",
    "kind",
    "stuff",
    "thing",
    "want",
    "recognize",
    "right",
    "different",
    "interfaces",
    "defined",
    "dom",
    "right",
    "top",
    "thing",
    "called",
    "node",
    "let",
    "go",
    "back",
    "node",
    "want",
    "remember",
    "everything",
    "dom",
    "inherits",
    "node",
    "interface",
    "everything",
    "element",
    "um",
    "html",
    "element",
    "interface",
    "inherit",
    "node",
    "interface",
    "basically",
    "means",
    "elements",
    "properties",
    "methods",
    "also",
    "access",
    "know",
    "master",
    "node",
    "uh",
    "interface",
    "well",
    "go",
    "look",
    "things",
    "available",
    "node",
    "um",
    "see",
    "aen",
    "child",
    "method",
    "using",
    "quite",
    "frequently",
    "let",
    "see",
    "find",
    "couple",
    "ones",
    "um",
    "looks",
    "like",
    "might",
    "one",
    "um",
    "using",
    "also",
    "text",
    "content",
    "using",
    "modify",
    "um",
    "text",
    "within",
    "html",
    "element",
    "node",
    "type",
    "used",
    "one",
    "um",
    "let",
    "see",
    "else",
    "uh",
    "looks",
    "like",
    "pretty",
    "much",
    "see",
    "node",
    "bunch",
    "properties",
    "methods",
    "available",
    "anything",
    "words",
    "come",
    "back",
    "um",
    "document",
    "html",
    "document",
    "know",
    "unordered",
    "list",
    "stored",
    "variable",
    "called",
    "list",
    "right",
    "know",
    "list",
    "say",
    "list",
    "node",
    "type",
    "type",
    "element",
    "inherits",
    "know",
    "uh",
    "node",
    "interface",
    "basically",
    "defines",
    "every",
    "element",
    "say",
    "list",
    "appen",
    "child",
    "going",
    "valid",
    "method",
    "part",
    "node",
    "interface",
    "saw",
    "insert",
    "html",
    "element",
    "actually",
    "add",
    "end",
    "list",
    "first",
    "actually",
    "create",
    "element",
    "good",
    "opportunity",
    "um",
    "show",
    "another",
    "method",
    "already",
    "seen",
    "really",
    "dig",
    "yet",
    "going",
    "going",
    "take",
    "list",
    "append",
    "child",
    "going",
    "say",
    "document",
    "new",
    "um",
    "create",
    "element",
    "going",
    "make",
    "list",
    "item",
    "going",
    "completely",
    "empty",
    "content",
    "within",
    "see",
    "new",
    "list",
    "item",
    "showing",
    "end",
    "list",
    "say",
    "list",
    "select",
    "final",
    "element",
    "um",
    "say",
    "item",
    "select",
    "final",
    "element",
    "say",
    "text",
    "content",
    "put",
    "content",
    "added",
    "new",
    "item",
    "end",
    "list",
    "modified",
    "see",
    "start",
    "parsing",
    "navigating",
    "hierarchy",
    "um",
    "pretty",
    "easily",
    "get",
    "hang",
    "want",
    "introduce",
    "something",
    "little",
    "bit",
    "tricky",
    "really",
    "think",
    "um",
    "navigating",
    "dom",
    "html",
    "document",
    "see",
    "two",
    "p",
    "elements",
    "id",
    "class",
    "basically",
    "means",
    "way",
    "identifying",
    "easy",
    "specific",
    "way",
    "first",
    "way",
    "know",
    "think",
    "identifying",
    "um",
    "one",
    "elements",
    "query",
    "selector",
    "method",
    "going",
    "try",
    "basically",
    "insert",
    "another",
    "element",
    "two",
    "paragraph",
    "tags",
    "go",
    "documentation",
    "um",
    "go",
    "believe",
    "node",
    "let",
    "see",
    "yeah",
    "node",
    "interface",
    "method",
    "called",
    "insert",
    "basically",
    "inserts",
    "html",
    "node",
    "element",
    "um",
    "inherits",
    "node",
    "node",
    "um",
    "specific",
    "reference",
    "element",
    "basically",
    "case",
    "going",
    "use",
    "method",
    "going",
    "figure",
    "identify",
    "second",
    "p",
    "tag",
    "right",
    "way",
    "would",
    "think",
    "say",
    "document",
    "query",
    "selector",
    "grab",
    "anything",
    "p",
    "tag",
    "right",
    "case",
    "press",
    "enter",
    "going",
    "get",
    "wrong",
    "one",
    "query",
    "selector",
    "method",
    "gets",
    "first",
    "occurrence",
    "change",
    "query",
    "selector",
    "going",
    "return",
    "us",
    "node",
    "list",
    "unlike",
    "html",
    "collection",
    "got",
    "looked",
    "children",
    "unordered",
    "list",
    "node",
    "list",
    "slightly",
    "different",
    "data",
    "type",
    "know",
    "meant",
    "go",
    "back",
    "documentation",
    "type",
    "node",
    "list",
    "let",
    "see",
    "right",
    "node",
    "list",
    "objects",
    "collection",
    "nodes",
    "usually",
    "returned",
    "properties",
    "node",
    "child",
    "nodes",
    "methods",
    "document",
    "query",
    "selector",
    "used",
    "let",
    "look",
    "things",
    "properties",
    "length",
    "methods",
    "method",
    "called",
    "item",
    "similar",
    "html",
    "collection",
    "select",
    "something",
    "index",
    "go",
    "ahead",
    "actually",
    "chain",
    "end",
    "say",
    "item",
    "maybe",
    "pass",
    "item",
    "number",
    "one",
    "going",
    "get",
    "first",
    "index",
    "remember",
    "zero",
    "index",
    "first",
    "p",
    "element",
    "zero",
    "next",
    "one",
    "one",
    "selected",
    "second",
    "element",
    "want",
    "want",
    "assign",
    "variable",
    "say",
    "uh",
    "p",
    "element",
    "equal",
    "want",
    "use",
    "p",
    "element",
    "um",
    "let",
    "first",
    "say",
    "uh",
    "node",
    "type",
    "going",
    "get",
    "type",
    "one",
    "means",
    "element",
    "type",
    "know",
    "element",
    "kind",
    "like",
    "child",
    "um",
    "inherits",
    "node",
    "type",
    "base",
    "class",
    "getting",
    "node",
    "type",
    "know",
    "p",
    "element",
    "p",
    "lm",
    "going",
    "insert",
    "meth",
    "let",
    "go",
    "ahead",
    "learn",
    "use",
    "go",
    "back",
    "um",
    "looking",
    "previously",
    "got",
    "node",
    "insert",
    "let",
    "look",
    "syntax",
    "learned",
    "prior",
    "lessons",
    "read",
    "documentation",
    "seeing",
    "um",
    "parent",
    "node",
    "right",
    "going",
    "parent",
    "newly",
    "inserted",
    "node",
    "ask",
    "ourself",
    "parent",
    "node",
    "trying",
    "insert",
    "let",
    "go",
    "back",
    "uh",
    "html",
    "document",
    "maybe",
    "even",
    "pop",
    "diagram",
    "screen",
    "see",
    "parent",
    "element",
    "insert",
    "two",
    "paragraph",
    "tags",
    "words",
    "parent",
    "one",
    "paragraph",
    "tags",
    "well",
    "answer",
    "going",
    "mainbody",
    "div",
    "right",
    "need",
    "pass",
    "reference",
    "main",
    "body",
    "div",
    "first",
    "um",
    "parent",
    "node",
    "right",
    "know",
    "select",
    "put",
    "new",
    "node",
    "going",
    "represent",
    "new",
    "element",
    "create",
    "finally",
    "reference",
    "node",
    "reference",
    "node",
    "see",
    "going",
    "node",
    "element",
    "new",
    "one",
    "going",
    "inserted",
    "um",
    "going",
    "insert",
    "element",
    "right",
    "null",
    "new",
    "node",
    "inserted",
    "end",
    "care",
    "let",
    "go",
    "back",
    "first",
    "thing",
    "need",
    "identify",
    "parent",
    "say",
    "parent",
    "equal",
    "document",
    "query",
    "selector",
    "time",
    "since",
    "class",
    "select",
    "going",
    "select",
    "class",
    "notation",
    "parent",
    "check",
    "getting",
    "right",
    "one",
    "say",
    "parent",
    "insert",
    "right",
    "make",
    "new",
    "node",
    "new",
    "node",
    "going",
    "p",
    "element",
    "let",
    "go",
    "ahead",
    "create",
    "real",
    "quick",
    "actually",
    "yeah",
    "need",
    "create",
    "new",
    "element",
    "new",
    "p",
    "tag",
    "going",
    "document",
    "create",
    "um",
    "element",
    "type",
    "p",
    "going",
    "assign",
    "text",
    "content",
    "say",
    "programmatically",
    "added",
    "right",
    "new",
    "element",
    "finally",
    "going",
    "take",
    "parent",
    "going",
    "insert",
    "going",
    "pass",
    "um",
    "new",
    "element",
    "putting",
    "going",
    "um",
    "reference",
    "element",
    "want",
    "insert",
    "would",
    "p",
    "lm",
    "right",
    "let",
    "see",
    "works",
    "see",
    "program",
    "programmatically",
    "added",
    "paragraph",
    "tag",
    "two",
    "paragraph",
    "tags",
    "right",
    "little",
    "bit",
    "tricky",
    "example",
    "kind",
    "ventured",
    "method",
    "definitely",
    "read",
    "documentation",
    "knew",
    "use",
    "goes",
    "show",
    "kind",
    "navigate",
    "around",
    "dom",
    "visualizing",
    "tree",
    "really",
    "understanding",
    "parent",
    "child",
    "sibling",
    "know",
    "interface",
    "working",
    "within",
    "dom",
    "right",
    "still",
    "watching",
    "video",
    "um",
    "awesome",
    "um",
    "people",
    "going",
    "make",
    "kind",
    "conversation",
    "document",
    "object",
    "model",
    "say",
    "point",
    "confused",
    "totally",
    "okay",
    "purpose",
    "video",
    "crash",
    "course",
    "um",
    "especially",
    "section",
    "document",
    "object",
    "model",
    "make",
    "expert",
    "purpose",
    "expose",
    "things",
    "get",
    "um",
    "started",
    "thinking",
    "independently",
    "okay",
    "know",
    "something",
    "go",
    "figure",
    "know",
    "went",
    "bunch",
    "examples",
    "necessarily",
    "know",
    "use",
    "different",
    "methods",
    "know",
    "type",
    "data",
    "working",
    "go",
    "documentation",
    "search",
    "figure",
    "confused",
    "totally",
    "okay",
    "keep",
    "moving",
    "forward",
    "going",
    "actually",
    "using",
    "dom",
    "much",
    "throughout",
    "rest",
    "series",
    "said",
    "beginning",
    "super",
    "important",
    "understand",
    "root",
    "every",
    "frontend",
    "framework",
    "going",
    "work",
    "know",
    "start",
    "working",
    "react",
    "going",
    "hear",
    "something",
    "called",
    "virtual",
    "dom",
    "know",
    "real",
    "dom",
    "going",
    "hard",
    "understand",
    "virtual",
    "dom",
    "furthermore",
    "working",
    "like",
    "angular",
    "vew",
    "know",
    "connect",
    "dom",
    "api",
    "um",
    "basically",
    "expose",
    "api",
    "g",
    "know",
    "easier",
    "ways",
    "working",
    "html",
    "get",
    "um",
    "frontend",
    "frameworks",
    "underneath",
    "surface",
    "frameworks",
    "connecting",
    "api",
    "used",
    "video",
    "huge",
    "recap",
    "html",
    "think",
    "two",
    "different",
    "parts",
    "first",
    "going",
    "static",
    "html",
    "going",
    "html",
    "like",
    "stuff",
    "see",
    "page",
    "static",
    "html",
    "matter",
    "going",
    "change",
    "right",
    "next",
    "part",
    "dynamic",
    "html",
    "see",
    "start",
    "working",
    "dom",
    "start",
    "manipulating",
    "adding",
    "removing",
    "changing",
    "modifying",
    "kind",
    "things",
    "existing",
    "static",
    "html",
    "two",
    "different",
    "parts",
    "first",
    "one",
    "pretty",
    "simple",
    "think",
    "probably",
    "caught",
    "um",
    "know",
    "use",
    "pretty",
    "easily",
    "second",
    "one",
    "um",
    "confusing",
    "even",
    "work",
    "years",
    "still",
    "going",
    "something",
    "learning",
    "perfecting",
    "along",
    "way",
    "really",
    "want",
    "take",
    "away",
    "model",
    "html",
    "document",
    "predictable",
    "way",
    "write",
    "specification",
    "called",
    "document",
    "object",
    "model",
    "allow",
    "javascript",
    "connect",
    "api",
    "actually",
    "modify",
    "static",
    "html",
    "last",
    "thing",
    "get",
    "lesson",
    "um",
    "code",
    "challenge",
    "going",
    "semantic",
    "html",
    "going",
    "spend",
    "whole",
    "lot",
    "time",
    "first",
    "went",
    "beginning",
    "uh",
    "crash",
    "course",
    "talking",
    "simple",
    "elements",
    "possible",
    "got",
    "divs",
    "got",
    "paragraph",
    "tags",
    "images",
    "um",
    "inputs",
    "list",
    "kind",
    "things",
    "new",
    "html",
    "5",
    "spec",
    "um",
    "new",
    "thinking",
    "html",
    "know",
    "consistent",
    "concept",
    "want",
    "use",
    "structure",
    "um",
    "also",
    "want",
    "use",
    "intent",
    "intend",
    "use",
    "different",
    "elements",
    "trying",
    "section",
    "part",
    "web",
    "page",
    "trying",
    "make",
    "nav",
    "bar",
    "trying",
    "make",
    "footer",
    "know",
    "normally",
    "would",
    "put",
    "uh",
    "div",
    "um",
    "elements",
    "make",
    "header",
    "navbar",
    "know",
    "blog",
    "section",
    "sidebar",
    "footer",
    "make",
    "things",
    "divs",
    "new",
    "html",
    "5",
    "spec",
    "know",
    "basically",
    "supposed",
    "plug",
    "new",
    "tags",
    "available",
    "case",
    "instead",
    "using",
    "divs",
    "different",
    "um",
    "features",
    "web",
    "page",
    "using",
    "nav",
    "bar",
    "um",
    "nav",
    "uh",
    "tag",
    "section",
    "like",
    "blog",
    "section",
    "use",
    "section",
    "tag",
    "well",
    "um",
    "sidebar",
    "stuff",
    "like",
    "tag",
    "called",
    "main",
    "represents",
    "main",
    "content",
    "page",
    "article",
    "tag",
    "might",
    "represent",
    "single",
    "blog",
    "post",
    "finally",
    "footer",
    "tag",
    "obviously",
    "represents",
    "footer",
    "give",
    "semantic",
    "uh",
    "meaning",
    "intent",
    "trying",
    "use",
    "html",
    "super",
    "important",
    "starting",
    "wants",
    "understand",
    "um",
    "see",
    "people",
    "writing",
    "html",
    "people",
    "really",
    "paying",
    "attention",
    "best",
    "practices",
    "see",
    "different",
    "elements",
    "pop",
    "remember",
    "always",
    "look",
    "documentation",
    "ever",
    "question",
    "certain",
    "type",
    "html",
    "tag",
    "go",
    "documentation",
    "type",
    "search",
    "bar",
    "read",
    "way",
    "best",
    "way",
    "learn",
    "reading",
    "people",
    "code",
    "right",
    "pretty",
    "long",
    "um",
    "html",
    "crash",
    "course",
    "unlike",
    "like",
    "shorter",
    "crash",
    "courses",
    "really",
    "wanted",
    "um",
    "walk",
    "line",
    "thinking",
    "help",
    "independent",
    "thinking",
    "html",
    "document",
    "object",
    "model",
    "hopefully",
    "um",
    "informative",
    "challenge",
    "going",
    "really",
    "uh",
    "test",
    "tough",
    "one",
    "um",
    "go",
    "ahead",
    "solve",
    "video",
    "tried",
    "hopefully",
    "going",
    "learn",
    "lot",
    "know",
    "reason",
    "different",
    "uh",
    "concepts",
    "take",
    "static",
    "html",
    "make",
    "dynamic",
    "bring",
    "something",
    "life",
    "see",
    "screen",
    "showed",
    "going",
    "create",
    "basically",
    "random",
    "generator",
    "memes",
    "jokes",
    "random",
    "quotes",
    "riddles",
    "reveal",
    "answer",
    "really",
    "cool",
    "project",
    "think",
    "excited",
    "share",
    "network",
    "um",
    "sure",
    "tag",
    "twitter",
    "um",
    "100",
    "days",
    "code",
    "uh",
    "hashtag",
    "want",
    "use",
    "really",
    "excited",
    "dive",
    "next",
    "video",
    "going",
    "solving",
    "recommend",
    "first",
    "try",
    "see",
    "far",
    "get",
    "link",
    "code",
    "pen",
    "starter",
    "pack",
    "description",
    "going",
    "working",
    "basically",
    "uh",
    "right",
    "let",
    "go",
    "back",
    "starter",
    "portion",
    "right",
    "code",
    "already",
    "written",
    "already",
    "put",
    "buttons",
    "already",
    "linked",
    "events",
    "um",
    "going",
    "called",
    "uh",
    "made",
    "template",
    "functions",
    "going",
    "correspond",
    "click",
    "events",
    "finally",
    "random",
    "data",
    "bunch",
    "random",
    "quotes",
    "uh",
    "meme",
    "urls",
    "stuff",
    "like",
    "helper",
    "function",
    "uh",
    "called",
    "get",
    "random",
    "data",
    "methods",
    "going",
    "implement",
    "already",
    "grabbing",
    "random",
    "piece",
    "data",
    "need",
    "figure",
    "put",
    "html",
    "document",
    "display",
    "right",
    "spot",
    "leaving",
    "link",
    "description",
    "go",
    "see",
    "like",
    "user",
    "stories",
    "user",
    "stories",
    "basically",
    "like",
    "user",
    "able",
    "looking",
    "application",
    "got",
    "written",
    "also",
    "hints",
    "help",
    "um",
    "point",
    "right",
    "direction",
    "tried",
    "watch",
    "next",
    "video",
    "series",
    "solve",
    "together",
    "welcome",
    "lesson",
    "7",
    "code",
    "challenge",
    "going",
    "basically",
    "html",
    "plus",
    "javascript",
    "challenge",
    "going",
    "use",
    "dom",
    "basically",
    "loop",
    "javascript",
    "html",
    "bring",
    "live",
    "dynamic",
    "uh",
    "web",
    "page",
    "going",
    "basically",
    "generate",
    "random",
    "memes",
    "jokes",
    "quotes",
    "riddles",
    "seen",
    "click",
    "buttons",
    "right",
    "generate",
    "something",
    "random",
    "every",
    "time",
    "click",
    "jokes",
    "quotes",
    "riddles",
    "um",
    "reveal",
    "riddle",
    "answer",
    "uh",
    "clicking",
    "button",
    "right",
    "going",
    "really",
    "cool",
    "challenge",
    "obviously",
    "see",
    "styles",
    "already",
    "applied",
    "since",
    "covered",
    "css",
    "yet",
    "uh",
    "full",
    "stack",
    "road",
    "map",
    "series",
    "um",
    "going",
    "next",
    "lesson",
    "done",
    "already",
    "wired",
    "css",
    "styles",
    "write",
    "html",
    "javascript",
    "um",
    "make",
    "thing",
    "come",
    "life",
    "let",
    "go",
    "ahead",
    "take",
    "look",
    "user",
    "stories",
    "blog",
    "post",
    "uh",
    "wrote",
    "lesson",
    "recap",
    "user",
    "story",
    "something",
    "use",
    "quite",
    "often",
    "programming",
    "come",
    "requirements",
    "good",
    "example",
    "common",
    "user",
    "story",
    "every",
    "time",
    "user",
    "enters",
    "email",
    "um",
    "password",
    "clicks",
    "log",
    "user",
    "know",
    "dropped",
    "homepage",
    "within",
    "app",
    "know",
    "basic",
    "user",
    "story",
    "says",
    "okay",
    "user",
    "happens",
    "user",
    "stories",
    "defined",
    "code",
    "challenge",
    "um",
    "first",
    "one",
    "user",
    "able",
    "click",
    "buttons",
    "right",
    "side",
    "screen",
    "generate",
    "random",
    "memes",
    "jokes",
    "quotes",
    "riddles",
    "saw",
    "click",
    "buttons",
    "get",
    "something",
    "random",
    "um",
    "obviously",
    "going",
    "correct",
    "location",
    "one",
    "piece",
    "content",
    "second",
    "one",
    "one",
    "piece",
    "content",
    "show",
    "time",
    "example",
    "user",
    "clicks",
    "show",
    "meme",
    "quote",
    "already",
    "showing",
    "application",
    "remove",
    "quote",
    "show",
    "random",
    "meme",
    "see",
    "every",
    "time",
    "click",
    "new",
    "button",
    "content",
    "right",
    "going",
    "disappear",
    "going",
    "replace",
    "nothing",
    "generate",
    "different",
    "type",
    "content",
    "right",
    "riddle",
    "replace",
    "joke",
    "goes",
    "away",
    "joke",
    "shows",
    "another",
    "requirement",
    "um",
    "third",
    "one",
    "content",
    "displayed",
    "appropriate",
    "heading",
    "words",
    "click",
    "tell",
    "joke",
    "joke",
    "needs",
    "show",
    "tell",
    "something",
    "funny",
    "rather",
    "want",
    "riddle",
    "something",
    "like",
    "showing",
    "random",
    "riddle",
    "answer",
    "never",
    "revealed",
    "um",
    "user",
    "explicitly",
    "clicks",
    "reveal",
    "answer",
    "click",
    "riddle",
    "going",
    "see",
    "get",
    "riddle",
    "get",
    "answer",
    "click",
    "reveal",
    "riddle",
    "answer",
    "order",
    "get",
    "answer",
    "next",
    "one",
    "user",
    "clicks",
    "reveal",
    "riddle",
    "answer",
    "riddle",
    "alert",
    "show",
    "letting",
    "know",
    "words",
    "um",
    "riddle",
    "populated",
    "click",
    "reveal",
    "riddle",
    "answer",
    "get",
    "alert",
    "top",
    "screen",
    "saying",
    "riddle",
    "show",
    "answer",
    "likewise",
    "user",
    "clicks",
    "reveal",
    "riddle",
    "answer",
    "answer",
    "already",
    "revealed",
    "alert",
    "let",
    "know",
    "already",
    "let",
    "go",
    "riddle",
    "let",
    "reveal",
    "let",
    "click",
    "riddle",
    "um",
    "going",
    "say",
    "going",
    "say",
    "riddle",
    "answer",
    "already",
    "exposed",
    "right",
    "requirements",
    "course",
    "gave",
    "hints",
    "um",
    "div",
    "element",
    "within",
    "uh",
    "unique",
    "id",
    "class",
    "name",
    "great",
    "way",
    "establish",
    "container",
    "future",
    "content",
    "show",
    "works",
    "um",
    "also",
    "need",
    "use",
    "html",
    "element",
    "hidden",
    "property",
    "hiding",
    "showing",
    "riddle",
    "answer",
    "um",
    "says",
    "perfect",
    "solution",
    "obviously",
    "100",
    "solutions",
    "got",
    "starter",
    "code",
    "right",
    "starter",
    "code",
    "working",
    "basically",
    "take",
    "buttons",
    "anything",
    "yet",
    "turn",
    "working",
    "content",
    "generator",
    "solve",
    "going",
    "try",
    "walk",
    "thought",
    "process",
    "little",
    "bit",
    "going",
    "spend",
    "uh",
    "overly",
    "detailed",
    "amount",
    "time",
    "components",
    "like",
    "main",
    "purpose",
    "give",
    "solution",
    "um",
    "basically",
    "build",
    "entire",
    "app",
    "think",
    "every",
    "last",
    "detail",
    "let",
    "go",
    "starter",
    "keep",
    "one",
    "template",
    "look",
    "trying",
    "um",
    "starter",
    "let",
    "go",
    "ahead",
    "get",
    "acquainted",
    "already",
    "start",
    "html",
    "section",
    "see",
    "html",
    "section",
    "let",
    "zoom",
    "little",
    "bit",
    "um",
    "instructions",
    "uh",
    "notice",
    "use",
    "semantic",
    "html",
    "end",
    "previous",
    "video",
    "talked",
    "semantic",
    "html",
    "html",
    "show",
    "intent",
    "done",
    "created",
    "uh",
    "main",
    "tag",
    "going",
    "say",
    "main",
    "content",
    "area",
    "uh",
    "one",
    "section",
    "going",
    "content",
    "empty",
    "uh",
    "area",
    "right",
    "another",
    "section",
    "called",
    "sidebar",
    "actions",
    "okay",
    "mean",
    "semantic",
    "html",
    "um",
    "looks",
    "like",
    "everything",
    "implemented",
    "us",
    "actions",
    "buttons",
    "buttons",
    "connected",
    "click",
    "events",
    "um",
    "javascript",
    "section",
    "content",
    "going",
    "add",
    "right",
    "section",
    "class",
    "called",
    "content",
    "right",
    "course",
    "css",
    "styling",
    "whole",
    "web",
    "page",
    "us",
    "required",
    "since",
    "really",
    "talked",
    "use",
    "css",
    "yet",
    "automatically",
    "work",
    "us",
    "action",
    "required",
    "us",
    "uh",
    "finally",
    "javascript",
    "right",
    "one",
    "tricky",
    "part",
    "going",
    "come",
    "going",
    "working",
    "document",
    "object",
    "model",
    "see",
    "templated",
    "functions",
    "items",
    "functions",
    "need",
    "show",
    "random",
    "know",
    "piece",
    "content",
    "correct",
    "location",
    "never",
    "show",
    "one",
    "time",
    "similar",
    "um",
    "user",
    "stories",
    "reiterating",
    "show",
    "meme",
    "function",
    "going",
    "connected",
    "look",
    "html",
    "connected",
    "show",
    "meme",
    "button",
    "right",
    "um",
    "go",
    "bottom",
    "function",
    "um",
    "working",
    "right",
    "got",
    "connected",
    "click",
    "show",
    "meme",
    "open",
    "console",
    "bottom",
    "left",
    "see",
    "working",
    "know",
    "wired",
    "correctly",
    "lucky",
    "us",
    "got",
    "wired",
    "already",
    "work",
    "done",
    "right",
    "got",
    "show",
    "meme",
    "show",
    "joke",
    "um",
    "wired",
    "button",
    "thing",
    "quote",
    "riddle",
    "next",
    "two",
    "buttons",
    "finally",
    "reveal",
    "answers",
    "function",
    "going",
    "wired",
    "reveal",
    "riddle",
    "answer",
    "button",
    "right",
    "obviously",
    "styled",
    "little",
    "bit",
    "differently",
    "still",
    "button",
    "uh",
    "html",
    "tag",
    "bottom",
    "um",
    "see",
    "bunch",
    "code",
    "wrote",
    "uh",
    "already",
    "bunch",
    "content",
    "use",
    "randomly",
    "generated",
    "content",
    "couple",
    "helper",
    "methods",
    "data",
    "object",
    "gets",
    "random",
    "number",
    "uses",
    "two",
    "things",
    "um",
    "method",
    "right",
    "get",
    "random",
    "data",
    "basically",
    "pass",
    "um",
    "parameter",
    "called",
    "type",
    "pass",
    "memes",
    "get",
    "random",
    "meme",
    "pass",
    "riddles",
    "get",
    "random",
    "riddle",
    "see",
    "already",
    "hooked",
    "uh",
    "functions",
    "wired",
    "buttons",
    "see",
    "meme",
    "one",
    "already",
    "assigned",
    "variable",
    "random",
    "meme",
    "url",
    "getting",
    "press",
    "show",
    "meme",
    "um",
    "hold",
    "show",
    "meme",
    "let",
    "go",
    "console",
    "see",
    "get",
    "link",
    "image",
    "going",
    "represent",
    "meme",
    "right",
    "overview",
    "working",
    "write",
    "html",
    "finish",
    "functions",
    "already",
    "templated",
    "us",
    "think",
    "first",
    "thing",
    "probably",
    "easiest",
    "template",
    "see",
    "uh",
    "headings",
    "output",
    "looks",
    "like",
    "h2",
    "heading",
    "um",
    "ones",
    "look",
    "like",
    "maybe",
    "h3",
    "headings",
    "something",
    "like",
    "let",
    "go",
    "ahead",
    "um",
    "put",
    "says",
    "html",
    "code",
    "goes",
    "let",
    "make",
    "h2",
    "code",
    "pen",
    "pretty",
    "easy",
    "type",
    "um",
    "uh",
    "type",
    "tag",
    "want",
    "make",
    "press",
    "tab",
    "creates",
    "element",
    "go",
    "ahead",
    "type",
    "output",
    "see",
    "get",
    "looks",
    "like",
    "getting",
    "correct",
    "element",
    "go",
    "headings",
    "want",
    "next",
    "one",
    "want",
    "uh",
    "h3",
    "want",
    "programmer",
    "memes",
    "far",
    "good",
    "looking",
    "okay",
    "um",
    "tell",
    "something",
    "funny",
    "jokes",
    "another",
    "trick",
    "use",
    "code",
    "pen",
    "also",
    "visual",
    "studio",
    "code",
    "start",
    "working",
    "um",
    "go",
    "end",
    "line",
    "press",
    "contrl",
    "c",
    "press",
    "contrl",
    "v",
    "get",
    "line",
    "um",
    "copied",
    "let",
    "uh",
    "one",
    "time",
    "replace",
    "text",
    "within",
    "give",
    "wisdom",
    "want",
    "riddle",
    "actually",
    "need",
    "one",
    "uh",
    "got",
    "programmer",
    "memes",
    "oh",
    "missed",
    "tell",
    "something",
    "funny",
    "let",
    "real",
    "quick",
    "right",
    "got",
    "output",
    "sections",
    "defined",
    "remember",
    "user",
    "hints",
    "um",
    "go",
    "back",
    "look",
    "hints",
    "says",
    "div",
    "element",
    "unique",
    "id",
    "class",
    "name",
    "great",
    "way",
    "establish",
    "container",
    "future",
    "content",
    "mean",
    "go",
    "look",
    "headings",
    "obviously",
    "insert",
    "sort",
    "html",
    "element",
    "probably",
    "paragraph",
    "tag",
    "know",
    "know",
    "put",
    "like",
    "select",
    "headings",
    "container",
    "put",
    "well",
    "something",
    "think",
    "smart",
    "create",
    "div",
    "element",
    "going",
    "act",
    "container",
    "future",
    "paragraph",
    "tags",
    "paragraph",
    "image",
    "tags",
    "content",
    "let",
    "see",
    "going",
    "think",
    "want",
    "headings",
    "instead",
    "trying",
    "um",
    "dynamically",
    "figure",
    "put",
    "different",
    "pieces",
    "content",
    "let",
    "explicit",
    "let",
    "make",
    "div",
    "um",
    "type",
    "div",
    "want",
    "give",
    "class",
    "id",
    "want",
    "able",
    "identify",
    "um",
    "individual",
    "div",
    "container",
    "want",
    "put",
    "content",
    "one",
    "let",
    "give",
    "class",
    "call",
    "meme",
    "content",
    "right",
    "enter",
    "basically",
    "want",
    "accomplish",
    "javascript",
    "want",
    "identify",
    "div",
    "want",
    "insert",
    "content",
    "within",
    "container",
    "already",
    "sitting",
    "ready",
    "waiting",
    "us",
    "could",
    "programmatically",
    "generate",
    "div",
    "like",
    "would",
    "lot",
    "extra",
    "work",
    "unnecessary",
    "work",
    "would",
    "require",
    "lot",
    "code",
    "let",
    "different",
    "sections",
    "go",
    "let",
    "replace",
    "classes",
    "want",
    "unique",
    "identifiers",
    "javascript",
    "basically",
    "able",
    "query",
    "one",
    "uh",
    "jokes",
    "content",
    "joke",
    "content",
    "stay",
    "consistent",
    "quote",
    "content",
    "finally",
    "riddle",
    "content",
    "right",
    "able",
    "selected",
    "javascript",
    "easily",
    "would",
    "need",
    "um",
    "let",
    "save",
    "real",
    "quick",
    "need",
    "open",
    "console",
    "uh",
    "let",
    "see",
    "get",
    "right",
    "console",
    "looks",
    "like",
    "right",
    "javascript",
    "context",
    "need",
    "document",
    "query",
    "selector",
    "since",
    "classes",
    "attribute",
    "need",
    "use",
    "class",
    "selection",
    "syntax",
    "dot",
    "preceding",
    "name",
    "class",
    "wanted",
    "select",
    "container",
    "right",
    "called",
    "meme",
    "content",
    "type",
    "meme",
    "content",
    "get",
    "div",
    "right",
    "want",
    "insert",
    "something",
    "save",
    "variable",
    "maybe",
    "say",
    "container",
    "say",
    "container",
    "append",
    "child",
    "pass",
    "generated",
    "html",
    "element",
    "case",
    "let",
    "go",
    "ahead",
    "create",
    "something",
    "um",
    "practice",
    "understand",
    "solving",
    "problem",
    "actually",
    "anything",
    "yet",
    "say",
    "new",
    "element",
    "equal",
    "maybe",
    "want",
    "put",
    "um",
    "let",
    "let",
    "go",
    "ahead",
    "practice",
    "meme",
    "container",
    "need",
    "put",
    "image",
    "type",
    "image",
    "tag",
    "right",
    "going",
    "create",
    "element",
    "going",
    "use",
    "something",
    "called",
    "set",
    "attribute",
    "property",
    "right",
    "um",
    "order",
    "create",
    "image",
    "element",
    "know",
    "let",
    "go",
    "ahead",
    "practice",
    "say",
    "image",
    "going",
    "give",
    "us",
    "um",
    "source",
    "attribute",
    "alt",
    "attribute",
    "going",
    "ignore",
    "alt",
    "attribute",
    "cu",
    "like",
    "totally",
    "necessary",
    "pass",
    "url",
    "image",
    "display",
    "um",
    "within",
    "browser",
    "let",
    "go",
    "ahead",
    "go",
    "data",
    "got",
    "array",
    "memes",
    "let",
    "grab",
    "one",
    "urls",
    "test",
    "second",
    "paste",
    "source",
    "attribute",
    "image",
    "see",
    "image",
    "coming",
    "nicely",
    "actually",
    "written",
    "css",
    "look",
    "css",
    "portion",
    "actually",
    "selected",
    "images",
    "said",
    "max",
    "width",
    "going",
    "350",
    "pixels",
    "already",
    "going",
    "come",
    "nicely",
    "worry",
    "basically",
    "want",
    "insert",
    "um",
    "specific",
    "programmer",
    "memes",
    "area",
    "wanted",
    "already",
    "got",
    "new",
    "image",
    "element",
    "say",
    "new",
    "element",
    "set",
    "attribute",
    "right",
    "know",
    "anything",
    "figure",
    "first",
    "say",
    "new",
    "element",
    "uh",
    "node",
    "type",
    "talked",
    "prior",
    "video",
    "looks",
    "like",
    "lost",
    "context",
    "go",
    "back",
    "code",
    "pen",
    "context",
    "let",
    "see",
    "still",
    "okay",
    "got",
    "redefine",
    "real",
    "quick",
    "first",
    "let",
    "select",
    "container",
    "got",
    "redo",
    "cuz",
    "lost",
    "context",
    "working",
    "container",
    "meme",
    "content",
    "create",
    "new",
    "element",
    "right",
    "created",
    "image",
    "say",
    "new",
    "element",
    "node",
    "type",
    "going",
    "return",
    "us",
    "one",
    "mdn",
    "documentation",
    "let",
    "go",
    "mdn",
    "documentation",
    "real",
    "quick",
    "let",
    "type",
    "node",
    "type",
    "method",
    "learned",
    "prior",
    "um",
    "prior",
    "videos",
    "see",
    "node",
    "constant",
    "node",
    "type",
    "constants",
    "value",
    "one",
    "represents",
    "element",
    "let",
    "click",
    "element",
    "come",
    "see",
    "within",
    "element",
    "methods",
    "one",
    "remembering",
    "correctly",
    "set",
    "attribute",
    "click",
    "set",
    "attribute",
    "says",
    "give",
    "name",
    "attribute",
    "wanting",
    "set",
    "value",
    "want",
    "set",
    "case",
    "trying",
    "um",
    "set",
    "source",
    "attribute",
    "image",
    "say",
    "new",
    "element",
    "set",
    "attribute",
    "source",
    "name",
    "attribute",
    "setting",
    "know",
    "maybe",
    "paste",
    "link",
    "earlier",
    "value",
    "source",
    "press",
    "enter",
    "basically",
    "take",
    "new",
    "element",
    "um",
    "take",
    "container",
    "append",
    "append",
    "child",
    "use",
    "append",
    "child",
    "method",
    "pass",
    "new",
    "element",
    "boom",
    "new",
    "image",
    "showing",
    "section",
    "want",
    "show",
    "like",
    "said",
    "actually",
    "done",
    "anything",
    "practicing",
    "figuring",
    "um",
    "live",
    "console",
    "like",
    "okay",
    "actually",
    "reason",
    "methods",
    "going",
    "use",
    "kind",
    "stuff",
    "able",
    "go",
    "javascript",
    "implement",
    "functions",
    "exactly",
    "right",
    "let",
    "close",
    "need",
    "little",
    "bit",
    "um",
    "let",
    "let",
    "refresh",
    "page",
    "want",
    "clean",
    "slate",
    "um",
    "looks",
    "like",
    "actually",
    "sure",
    "still",
    "um",
    "let",
    "see",
    "oh",
    "right",
    "put",
    "already",
    "okay",
    "let",
    "get",
    "rid",
    "want",
    "anything",
    "start",
    "want",
    "empty",
    "let",
    "come",
    "templated",
    "methods",
    "case",
    "want",
    "show",
    "meme",
    "right",
    "click",
    "button",
    "open",
    "console",
    "going",
    "print",
    "random",
    "meme",
    "url",
    "know",
    "url",
    "set",
    "equal",
    "source",
    "attribute",
    "image",
    "tag",
    "image",
    "html",
    "element",
    "also",
    "know",
    "create",
    "let",
    "go",
    "ahead",
    "start",
    "writing",
    "method",
    "first",
    "thing",
    "need",
    "grab",
    "container",
    "want",
    "put",
    "say",
    "container",
    "equal",
    "document",
    "query",
    "selector",
    "need",
    "pass",
    "meme",
    "content",
    "right",
    "container",
    "selected",
    "could",
    "obviously",
    "test",
    "wanted",
    "um",
    "think",
    "pass",
    "able",
    "show",
    "meme",
    "get",
    "container",
    "good",
    "far",
    "need",
    "say",
    "new",
    "image",
    "going",
    "equal",
    "document",
    "create",
    "um",
    "create",
    "element",
    "new",
    "element",
    "ca",
    "remember",
    "okay",
    "create",
    "element",
    "want",
    "image",
    "element",
    "need",
    "set",
    "attribute",
    "want",
    "set",
    "source",
    "attribute",
    "want",
    "set",
    "equal",
    "well",
    "want",
    "set",
    "equal",
    "url",
    "happen",
    "already",
    "drop",
    "r",
    "random",
    "meme",
    "url",
    "set",
    "attribute",
    "us",
    "finally",
    "come",
    "bottom",
    "say",
    "container",
    "append",
    "child",
    "pass",
    "new",
    "image",
    "okay",
    "let",
    "go",
    "ahead",
    "save",
    "pen",
    "click",
    "show",
    "meme",
    "get",
    "image",
    "populating",
    "right",
    "section",
    "right",
    "click",
    "put",
    "another",
    "image",
    "um",
    "another",
    "one",
    "could",
    "keep",
    "going",
    "obviously",
    "instructions",
    "one",
    "user",
    "stories",
    "saying",
    "already",
    "something",
    "delete",
    "replace",
    "new",
    "one",
    "figure",
    "good",
    "way",
    "using",
    "statement",
    "come",
    "method",
    "show",
    "meme",
    "um",
    "need",
    "ask",
    "uh",
    "insert",
    "container",
    "need",
    "say",
    "um",
    "existing",
    "image",
    "one",
    "way",
    "think",
    "um",
    "take",
    "um",
    "say",
    "set",
    "variable",
    "image",
    "equal",
    "container",
    "query",
    "selector",
    "look",
    "image",
    "basically",
    "saying",
    "container",
    "represents",
    "div",
    "right",
    "grab",
    "container",
    "within",
    "look",
    "image",
    "element",
    "find",
    "something",
    "value",
    "image",
    "going",
    "represent",
    "actual",
    "html",
    "element",
    "find",
    "anything",
    "going",
    "return",
    "null",
    "going",
    "get",
    "nothing",
    "basically",
    "say",
    "image",
    "truthy",
    "value",
    "um",
    "truthy",
    "long",
    "comes",
    "back",
    "image",
    "need",
    "clear",
    "contents",
    "container",
    "way",
    "using",
    "inner",
    "html",
    "property",
    "go",
    "mdn",
    "documentation",
    "believe",
    "exists",
    "node",
    "uh",
    "interface",
    "let",
    "take",
    "look",
    "uh",
    "looks",
    "like",
    "let",
    "search",
    "inner",
    "html",
    "okay",
    "element",
    "html",
    "element",
    "property",
    "called",
    "html",
    "says",
    "element",
    "property",
    "html",
    "gets",
    "sets",
    "html",
    "markup",
    "contained",
    "within",
    "element",
    "quick",
    "trick",
    "um",
    "something",
    "learned",
    "time",
    "would",
    "necessarily",
    "know",
    "documentation",
    "pass",
    "empty",
    "string",
    "property",
    "clear",
    "html",
    "specific",
    "container",
    "image",
    "already",
    "going",
    "say",
    "containers",
    "inner",
    "html",
    "equal",
    "empty",
    "string",
    "okay",
    "basically",
    "going",
    "every",
    "time",
    "click",
    "button",
    "going",
    "generate",
    "random",
    "meme",
    "url",
    "going",
    "create",
    "new",
    "image",
    "going",
    "check",
    "existing",
    "image",
    "clear",
    "going",
    "insert",
    "new",
    "image",
    "basically",
    "another",
    "way",
    "saying",
    "let",
    "replace",
    "whatever",
    "let",
    "try",
    "got",
    "first",
    "image",
    "click",
    "replace",
    "excellent",
    "replacing",
    "correctly",
    "got",
    "right",
    "spot",
    "rest",
    "methods",
    "pretty",
    "much",
    "able",
    "implement",
    "type",
    "logic",
    "um",
    "implement",
    "rest",
    "buttons",
    "let",
    "get",
    "rid",
    "done",
    "implemented",
    "correctly",
    "um",
    "one",
    "thing",
    "want",
    "um",
    "get",
    "implement",
    "clear",
    "method",
    "reason",
    "want",
    "basically",
    "um",
    "since",
    "see",
    "buttons",
    "kind",
    "thing",
    "really",
    "need",
    "write",
    "logic",
    "right",
    "um",
    "every",
    "single",
    "time",
    "need",
    "need",
    "write",
    "one",
    "method",
    "looks",
    "containers",
    "clears",
    "containers",
    "replace",
    "new",
    "content",
    "order",
    "let",
    "go",
    "ahead",
    "take",
    "code",
    "take",
    "put",
    "clear",
    "let",
    "rename",
    "variable",
    "say",
    "meme",
    "right",
    "let",
    "go",
    "ahead",
    "grab",
    "container",
    "actually",
    "valid",
    "code",
    "need",
    "type",
    "document",
    "query",
    "selector",
    "need",
    "grab",
    "meme",
    "content",
    "container",
    "say",
    "meme",
    "container",
    "equal",
    "represent",
    "um",
    "div",
    "right",
    "thing",
    "divs",
    "joke",
    "content",
    "quote",
    "content",
    "riddle",
    "content",
    "show",
    "going",
    "like",
    "make",
    "sense",
    "second",
    "bear",
    "going",
    "copy",
    "four",
    "times",
    "going",
    "say",
    "one",
    "joke",
    "container",
    "one",
    "quote",
    "container",
    "one",
    "riddle",
    "container",
    "course",
    "replace",
    "joke",
    "quote",
    "riddle",
    "right",
    "javascript",
    "wrote",
    "basically",
    "selecting",
    "containers",
    "content",
    "putting",
    "set",
    "inner",
    "html",
    "empty",
    "string",
    "matter",
    "something",
    "nothing",
    "matter",
    "going",
    "clear",
    "matter",
    "say",
    "mem",
    "container",
    "innerhtml",
    "equals",
    "empty",
    "string",
    "four",
    "times",
    "replace",
    "variables",
    "correct",
    "one",
    "right",
    "clear",
    "method",
    "going",
    "look",
    "different",
    "sections",
    "going",
    "clear",
    "matter",
    "show",
    "meme",
    "thing",
    "append",
    "new",
    "image",
    "call",
    "clear",
    "method",
    "clear",
    "everything",
    "let",
    "try",
    "let",
    "show",
    "meme",
    "click",
    "looks",
    "like",
    "clearing",
    "putting",
    "new",
    "one",
    "going",
    "happen",
    "going",
    "pass",
    "clear",
    "method",
    "template",
    "functions",
    "okay",
    "next",
    "one",
    "show",
    "joke",
    "right",
    "already",
    "got",
    "random",
    "joke",
    "uh",
    "text",
    "let",
    "go",
    "ahead",
    "random",
    "joke",
    "text",
    "see",
    "working",
    "let",
    "click",
    "button",
    "make",
    "sure",
    "working",
    "let",
    "open",
    "console",
    "right",
    "looks",
    "like",
    "getting",
    "string",
    "represents",
    "joke",
    "case",
    "want",
    "insert",
    "paragraph",
    "element",
    "put",
    "text",
    "content",
    "right",
    "rather",
    "simple",
    "say",
    "new",
    "paragraph",
    "equal",
    "put",
    "p",
    "tag",
    "say",
    "text",
    "content",
    "equal",
    "random",
    "joke",
    "text",
    "taking",
    "variable",
    "equal",
    "random",
    "joke",
    "assigning",
    "new",
    "p",
    "element",
    "created",
    "finally",
    "need",
    "clear",
    "need",
    "clear",
    "anything",
    "already",
    "need",
    "insert",
    "container",
    "wrote",
    "uh",
    "different",
    "variable",
    "selects",
    "container",
    "two",
    "steps",
    "basically",
    "one",
    "step",
    "say",
    "query",
    "selector",
    "case",
    "want",
    "get",
    "joke",
    "content",
    "ah",
    "ca",
    "type",
    "end",
    "chain",
    "append",
    "child",
    "pass",
    "new",
    "paragraph",
    "element",
    "let",
    "see",
    "works",
    "clicking",
    "tell",
    "joke",
    "saying",
    "p",
    "defined",
    "um",
    "reason",
    "uh",
    "said",
    "p",
    "instead",
    "new",
    "p",
    "work",
    "better",
    "time",
    "right",
    "getting",
    "um",
    "content",
    "real",
    "test",
    "click",
    "show",
    "meme",
    "content",
    "get",
    "erased",
    "meme",
    "show",
    "happen",
    "let",
    "show",
    "meme",
    "see",
    "jokes",
    "uh",
    "section",
    "nothing",
    "great",
    "let",
    "tell",
    "another",
    "joke",
    "see",
    "joke",
    "meme",
    "far",
    "everything",
    "working",
    "great",
    "let",
    "go",
    "next",
    "method",
    "need",
    "implement",
    "quote",
    "right",
    "let",
    "go",
    "ahead",
    "like",
    "random",
    "quote",
    "click",
    "button",
    "see",
    "console",
    "get",
    "object",
    "two",
    "keys",
    "two",
    "properties",
    "author",
    "property",
    "quote",
    "property",
    "strings",
    "want",
    "want",
    "display",
    "p",
    "paragraph",
    "uh",
    "element",
    "another",
    "paragraph",
    "element",
    "right",
    "author",
    "let",
    "say",
    "uh",
    "quote",
    "going",
    "paragraph",
    "element",
    "say",
    "author",
    "going",
    "also",
    "p",
    "element",
    "text",
    "content",
    "quote",
    "pretty",
    "straightforward",
    "say",
    "quote",
    "text",
    "content",
    "equals",
    "random",
    "quote",
    "need",
    "actually",
    "get",
    "quote",
    "property",
    "quote",
    "author",
    "text",
    "content",
    "need",
    "grab",
    "random",
    "quote",
    "um",
    "grab",
    "author",
    "property",
    "also",
    "want",
    "put",
    "little",
    "dash",
    "uh",
    "make",
    "string",
    "dash",
    "space",
    "concatenate",
    "um",
    "author",
    "name",
    "right",
    "got",
    "text",
    "content",
    "um",
    "let",
    "let",
    "see",
    "right",
    "got",
    "quote",
    "author",
    "stored",
    "2",
    "p",
    "elements",
    "first",
    "clear",
    "clear",
    "everything",
    "come",
    "say",
    "document",
    "query",
    "selector",
    "want",
    "grab",
    "quote",
    "content",
    "container",
    "append",
    "child",
    "put",
    "first",
    "want",
    "put",
    "quote",
    "next",
    "thing",
    "want",
    "grab",
    "container",
    "put",
    "author",
    "let",
    "go",
    "ahead",
    "run",
    "looks",
    "like",
    "got",
    "random",
    "quote",
    "working",
    "fine",
    "kind",
    "messy",
    "want",
    "refactor",
    "little",
    "bit",
    "never",
    "want",
    "write",
    "thing",
    "two",
    "lines",
    "row",
    "bad",
    "practice",
    "want",
    "want",
    "store",
    "container",
    "like",
    "variable",
    "let",
    "put",
    "right",
    "container",
    "container",
    "variable",
    "uh",
    "call",
    "container",
    "appendchild",
    "work",
    "still",
    "awesome",
    "jokes",
    "quotes",
    "memes",
    "kind",
    "clear",
    "um",
    "new",
    "piece",
    "content",
    "generated",
    "last",
    "one",
    "going",
    "hardest",
    "one",
    "want",
    "show",
    "riddle",
    "want",
    "show",
    "answer",
    "reveal",
    "riddle",
    "answer",
    "clicked",
    "let",
    "mark",
    "done",
    "show",
    "quote",
    "done",
    "show",
    "joke",
    "done",
    "clear",
    "method",
    "pretty",
    "good",
    "finally",
    "show",
    "riddle",
    "think",
    "going",
    "let",
    "first",
    "see",
    "getting",
    "already",
    "shows",
    "us",
    "already",
    "wrote",
    "com",
    "says",
    "get",
    "let",
    "verify",
    "oh",
    "good",
    "practice",
    "random",
    "riddle",
    "let",
    "click",
    "button",
    "get",
    "random",
    "riddle",
    "answer",
    "prop",
    "question",
    "prop",
    "let",
    "let",
    "go",
    "ahead",
    "um",
    "explicit",
    "going",
    "show",
    "little",
    "es6",
    "latest",
    "spec",
    "javascript",
    "show",
    "trick",
    "uh",
    "destructure",
    "believe",
    "correct",
    "term",
    "going",
    "destructure",
    "properties",
    "object",
    "say",
    "const",
    "put",
    "little",
    "brackets",
    "pass",
    "properties",
    "looking",
    "want",
    "question",
    "want",
    "answer",
    "set",
    "equal",
    "random",
    "riddle",
    "getting",
    "able",
    "variable",
    "called",
    "question",
    "well",
    "variable",
    "called",
    "answer",
    "right",
    "let",
    "see",
    "true",
    "right",
    "got",
    "printing",
    "okay",
    "basically",
    "right",
    "equivalent",
    "let",
    "comment",
    "second",
    "wrote",
    "es6",
    "latest",
    "spec",
    "javascript",
    "equivalent",
    "syntax",
    "say",
    "question",
    "equal",
    "random",
    "riddle",
    "question",
    "answer",
    "equal",
    "random",
    "riddle",
    "answer",
    "two",
    "lines",
    "code",
    "simplified",
    "single",
    "line",
    "code",
    "right",
    "putting",
    "little",
    "brackets",
    "around",
    "selecting",
    "property",
    "want",
    "little",
    "trick",
    "um",
    "thought",
    "show",
    "solving",
    "right",
    "got",
    "question",
    "got",
    "answer",
    "create",
    "paragraph",
    "elements",
    "think",
    "going",
    "show",
    "question",
    "answer",
    "paragraph",
    "element",
    "um",
    "like",
    "quote",
    "obviously",
    "hide",
    "answer",
    "front",
    "say",
    "um",
    "question",
    "element",
    "equal",
    "put",
    "paragraph",
    "tag",
    "set",
    "text",
    "content",
    "equal",
    "question",
    "let",
    "go",
    "ahead",
    "take",
    "um",
    "since",
    "inserting",
    "twice",
    "let",
    "go",
    "ahead",
    "get",
    "single",
    "variable",
    "container",
    "document",
    "query",
    "selector",
    "grab",
    "uh",
    "riddle",
    "need",
    "dot",
    "beginning",
    "select",
    "class",
    "want",
    "riddle",
    "content",
    "div",
    "riddle",
    "content",
    "div",
    "work",
    "want",
    "say",
    "container",
    "append",
    "child",
    "put",
    "question",
    "element",
    "let",
    "see",
    "works",
    "okay",
    "awesome",
    "paragraph",
    "element",
    "um",
    "representing",
    "riddle",
    "insert",
    "answer",
    "make",
    "hidden",
    "right",
    "think",
    "way",
    "going",
    "um",
    "remember",
    "hints",
    "says",
    "may",
    "need",
    "use",
    "html",
    "element",
    "hidden",
    "property",
    "let",
    "take",
    "look",
    "html",
    "element",
    "property",
    "hidden",
    "boolean",
    "true",
    "elements",
    "hidden",
    "otherwise",
    "false",
    "actually",
    "set",
    "equal",
    "true",
    "false",
    "navigate",
    "something",
    "shows",
    "something",
    "hides",
    "good",
    "know",
    "uh",
    "able",
    "use",
    "element",
    "working",
    "right",
    "going",
    "going",
    "create",
    "similar",
    "question",
    "element",
    "let",
    "copy",
    "time",
    "going",
    "answer",
    "answer",
    "element",
    "set",
    "equal",
    "answer",
    "right",
    "one",
    "additional",
    "thing",
    "got",
    "button",
    "called",
    "reveal",
    "riddle",
    "answer",
    "going",
    "call",
    "function",
    "called",
    "reveal",
    "answers",
    "anticipating",
    "future",
    "um",
    "something",
    "probably",
    "figure",
    "implemented",
    "like",
    "oh",
    "shoot",
    "realized",
    "already",
    "built",
    "know",
    "works",
    "saying",
    "future",
    "going",
    "click",
    "button",
    "going",
    "figure",
    "whether",
    "riddle",
    "answer",
    "available",
    "whether",
    "riddle",
    "answer",
    "hidden",
    "hidden",
    "order",
    "order",
    "make",
    "jobs",
    "easier",
    "probably",
    "set",
    "id",
    "attribute",
    "p",
    "paragraph",
    "tag",
    "calling",
    "answer",
    "already",
    "set",
    "text",
    "content",
    "um",
    "let",
    "let",
    "go",
    "ahead",
    "append",
    "html",
    "see",
    "going",
    "um",
    "appending",
    "answer",
    "element",
    "say",
    "riddle",
    "get",
    "riddle",
    "answer",
    "obviously",
    "want",
    "say",
    "answer",
    "element",
    "set",
    "attribute",
    "rute",
    "want",
    "set",
    "id",
    "um",
    "want",
    "id",
    "set",
    "riddle",
    "answer",
    "right",
    "basically",
    "going",
    "riddle",
    "content",
    "going",
    "create",
    "p",
    "tag",
    "id",
    "equal",
    "riddle",
    "answer",
    "okay",
    "answer",
    "riddle",
    "sitting",
    "right",
    "later",
    "click",
    "reveal",
    "riddle",
    "answer",
    "button",
    "going",
    "say",
    "okay",
    "go",
    "find",
    "uh",
    "p",
    "tag",
    "id",
    "riddle",
    "answer",
    "hidden",
    "want",
    "unhide",
    "want",
    "alert",
    "user",
    "okay",
    "basically",
    "code",
    "um",
    "course",
    "need",
    "call",
    "clear",
    "method",
    "functions",
    "last",
    "thing",
    "need",
    "need",
    "hide",
    "need",
    "grab",
    "hidden",
    "property",
    "set",
    "true",
    "answer",
    "element",
    "click",
    "riddle",
    "see",
    "question",
    "answer",
    "hidden",
    "let",
    "click",
    "riddle",
    "get",
    "exactly",
    "looking",
    "good",
    "last",
    "thing",
    "completed",
    "believe",
    "let",
    "let",
    "test",
    "clicking",
    "clicking",
    "ones",
    "okay",
    "looks",
    "good",
    "far",
    "implement",
    "reveal",
    "answers",
    "let",
    "go",
    "back",
    "requirements",
    "user",
    "stories",
    "say",
    "showing",
    "random",
    "riddle",
    "answer",
    "never",
    "revealed",
    "click",
    "button",
    "got",
    "um",
    "user",
    "clicks",
    "reveal",
    "riddle",
    "alert",
    "let",
    "uh",
    "user",
    "know",
    "riddle",
    "um",
    "already",
    "already",
    "revealed",
    "another",
    "alert",
    "um",
    "popped",
    "need",
    "need",
    "first",
    "check",
    "um",
    "let",
    "see",
    "need",
    "check",
    "need",
    "check",
    "riddle",
    "answer",
    "um",
    "riddle",
    "answer",
    "riddle",
    "general",
    "way",
    "first",
    "grab",
    "riddle",
    "container",
    "equal",
    "document",
    "query",
    "selector",
    "riddle",
    "content",
    "okay",
    "give",
    "us",
    "div",
    "right",
    "say",
    "riddle",
    "going",
    "equal",
    "riddle",
    "container",
    "query",
    "selector",
    "case",
    "want",
    "search",
    "paragraph",
    "tag",
    "paragraph",
    "tag",
    "sitting",
    "within",
    "div",
    "know",
    "riddle",
    "know",
    "riddle",
    "know",
    "know",
    "either",
    "need",
    "reveal",
    "riddle",
    "answer",
    "need",
    "alert",
    "user",
    "already",
    "revealed",
    "okay",
    "going",
    "else",
    "statement",
    "say",
    "riddle",
    "riddle",
    "revealed",
    "actually",
    "one",
    "step",
    "need",
    "say",
    "answer",
    "equal",
    "um",
    "document",
    "query",
    "selector",
    "answer",
    "going",
    "named",
    "right",
    "riddle",
    "answer",
    "id",
    "looking",
    "put",
    "hashtag",
    "search",
    "id",
    "rather",
    "class",
    "type",
    "riddle",
    "answer",
    "okay",
    "answer",
    "going",
    "say",
    "riddle",
    "answer",
    "want",
    "alert",
    "user",
    "already",
    "um",
    "answer",
    "revealed",
    "actually",
    "even",
    "answer",
    "reve",
    "even",
    "answer",
    "hidden",
    "still",
    "going",
    "registered",
    "variable",
    "let",
    "go",
    "ahead",
    "test",
    "real",
    "quick",
    "let",
    "comment",
    "code",
    "right",
    "answer",
    "okay",
    "would",
    "expect",
    "already",
    "created",
    "previous",
    "method",
    "created",
    "element",
    "um",
    "id",
    "called",
    "riddle",
    "answer",
    "hidden",
    "hidden",
    "want",
    "check",
    "search",
    "id",
    "hidden",
    "value",
    "get",
    "going",
    "console",
    "log",
    "answer",
    "first",
    "going",
    "click",
    "riddle",
    "going",
    "click",
    "reveal",
    "answers",
    "going",
    "look",
    "console",
    "see",
    "even",
    "though",
    "hidden",
    "still",
    "found",
    "element",
    "within",
    "dom",
    "using",
    "query",
    "selection",
    "vector",
    "words",
    "check",
    "whether",
    "hidden",
    "got",
    "uh",
    "print",
    "answer",
    "hidden",
    "instead",
    "answer",
    "let",
    "generate",
    "riddle",
    "reveal",
    "going",
    "see",
    "hidden",
    "property",
    "set",
    "true",
    "need",
    "uncomment",
    "code",
    "going",
    "say",
    "riddle",
    "answer",
    "hidden",
    "need",
    "reveal",
    "okay",
    "need",
    "say",
    "answer",
    "hidden",
    "equals",
    "false",
    "right",
    "line",
    "code",
    "right",
    "pretty",
    "much",
    "complete",
    "um",
    "web",
    "page",
    "exception",
    "alerts",
    "let",
    "go",
    "ahead",
    "generate",
    "riddle",
    "click",
    "reveal",
    "answer",
    "see",
    "reveals",
    "answer",
    "right",
    "okay",
    "maybe",
    "even",
    "want",
    "come",
    "method",
    "instead",
    "setting",
    "text",
    "content",
    "answer",
    "put",
    "answer",
    "answer",
    "let",
    "try",
    "one",
    "says",
    "answer",
    "echo",
    "perfect",
    "last",
    "thing",
    "handled",
    "cases",
    "else",
    "riddle",
    "true",
    "riddle",
    "answer",
    "hidden",
    "going",
    "reveal",
    "riddle",
    "answer",
    "hidden",
    "right",
    "um",
    "basically",
    "redundant",
    "make",
    "else",
    "block",
    "means",
    "either",
    "riddle",
    "answer",
    "hidden",
    "get",
    "say",
    "riddle",
    "need",
    "check",
    "riddle",
    "trying",
    "um",
    "uh",
    "trying",
    "unhide",
    "going",
    "say",
    "alert",
    "answer",
    "already",
    "revealed",
    "okay",
    "let",
    "see",
    "works",
    "click",
    "riddle",
    "going",
    "reveal",
    "going",
    "click",
    "reveal",
    "button",
    "says",
    "answer",
    "already",
    "revealed",
    "right",
    "last",
    "piece",
    "lse",
    "statement",
    "basically",
    "means",
    "um",
    "riddle",
    "trying",
    "reveal",
    "answer",
    "say",
    "riddle",
    "reveal",
    "answer",
    "sorry",
    "video",
    "cut",
    "know",
    "exactly",
    "basically",
    "completing",
    "last",
    "part",
    "click",
    "riddle",
    "reveal",
    "answer",
    "reveals",
    "reveal",
    "already",
    "revealed",
    "um",
    "random",
    "quote",
    "try",
    "reveal",
    "riddle",
    "answer",
    "going",
    "say",
    "riddle",
    "reveal",
    "answer",
    "pretty",
    "much",
    "completed",
    "challenge",
    "um",
    "hopefully",
    "fun",
    "um",
    "quick",
    "quick",
    "way",
    "share",
    "click",
    "share",
    "button",
    "share",
    "twitter",
    "sure",
    "tag",
    "uh",
    "zgd",
    "put",
    "hashtag",
    "00",
    "days",
    "code",
    "um",
    "get",
    "support",
    "tech",
    "community",
    "webdev",
    "community",
    "twitter",
    "hopefully",
    "um",
    "see",
    "popping",
    "couple",
    "times",
    "think",
    "fun",
    "little",
    "web",
    "page",
    "create",
    "interactive",
    "javascript",
    "want",
    "customize",
    "little",
    "bit",
    "go",
    "js",
    "section",
    "replace",
    "quotes",
    "memes",
    "um",
    "jokes",
    "favorites",
    "video",
    "subsequent",
    "videos",
    "going",
    "going",
    "css",
    "crash",
    "course",
    "styling",
    "web",
    "pages",
    "get",
    "lot",
    "details",
    "want",
    "show",
    "exactly",
    "going",
    "able",
    "build",
    "end",
    "going",
    "use",
    "tool",
    "called",
    "mentor",
    "basically",
    "uh",
    "bunch",
    "professional",
    "look",
    "web",
    "designs",
    "implemented",
    "us",
    "coded",
    "click",
    "challenge",
    "go",
    "get",
    "design",
    "code",
    "design",
    "submit",
    "get",
    "feedback",
    "three",
    "chosen",
    "based",
    "want",
    "cover",
    "going",
    "little",
    "uh",
    "single",
    "price",
    "grid",
    "component",
    "first",
    "one",
    "right",
    "getting",
    "crash",
    "course",
    "nice",
    "little",
    "introductory",
    "challenge",
    "see",
    "make",
    "desktop",
    "version",
    "mobile",
    "version",
    "move",
    "gone",
    "couple",
    "tutorials",
    "um",
    "testimonials",
    "grid",
    "section",
    "going",
    "help",
    "us",
    "get",
    "uh",
    "skills",
    "flexbox",
    "css",
    "grid",
    "going",
    "super",
    "important",
    "developer",
    "get",
    "topics",
    "want",
    "say",
    "prerequisites",
    "basically",
    "got",
    "know",
    "write",
    "html",
    "basics",
    "html",
    "need",
    "um",
    "also",
    "going",
    "working",
    "codeen",
    "environment",
    "example",
    "right",
    "um",
    "type",
    "html",
    "css",
    "javascript",
    "get",
    "comfortable",
    "um",
    "optionally",
    "like",
    "said",
    "going",
    "combining",
    "skills",
    "code",
    "challenges",
    "watching",
    "previous",
    "uh",
    "parts",
    "full",
    "stack",
    "developer",
    "series",
    "going",
    "important",
    "lesson",
    "css",
    "want",
    "go",
    "going",
    "actually",
    "learn",
    "importantly",
    "going",
    "learn",
    "completely",
    "honest",
    "put",
    "together",
    "got",
    "little",
    "carried",
    "away",
    "thought",
    "going",
    "simple",
    "crash",
    "course",
    "css",
    "um",
    "humbly",
    "reminded",
    "um",
    "css",
    "lot",
    "things",
    "going",
    "whole",
    "lot",
    "things",
    "cover",
    "tried",
    "keep",
    "honed",
    "important",
    "concepts",
    "per",
    "trying",
    "series",
    "lot",
    "cover",
    "see",
    "left",
    "going",
    "talking",
    "css",
    "basics",
    "going",
    "walking",
    "box",
    "model",
    "basically",
    "defining",
    "much",
    "space",
    "elements",
    "going",
    "take",
    "web",
    "page",
    "um",
    "going",
    "get",
    "us",
    "discussions",
    "block",
    "versus",
    "inline",
    "elements",
    "box",
    "sizing",
    "layouts",
    "going",
    "cover",
    "bunch",
    "things",
    "pretty",
    "excited",
    "share",
    "system",
    "use",
    "create",
    "html",
    "css",
    "uh",
    "basically",
    "take",
    "design",
    "put",
    "code",
    "cuz",
    "thinking",
    "really",
    "hard",
    "first",
    "started",
    "want",
    "share",
    "main",
    "core",
    "lessons",
    "also",
    "supplementary",
    "optional",
    "lessons",
    "includes",
    "responsive",
    "design",
    "happens",
    "web",
    "page",
    "gets",
    "put",
    "opened",
    "mobile",
    "device",
    "like",
    "iphone",
    "look",
    "going",
    "pleasant",
    "experience",
    "user",
    "um",
    "today",
    "age",
    "required",
    "want",
    "make",
    "web",
    "app",
    "going",
    "talk",
    "separate",
    "video",
    "also",
    "going",
    "separate",
    "videos",
    "flexbox",
    "css",
    "grid",
    "going",
    "allow",
    "us",
    "lay",
    "elements",
    "little",
    "bit",
    "like",
    "said",
    "project",
    "right",
    "um",
    "gives",
    "us",
    "great",
    "opportunity",
    "apply",
    "concepts",
    "put",
    "nice",
    "looking",
    "grid",
    "going",
    "covering",
    "crash",
    "course",
    "going",
    "graphic",
    "design",
    "wireframing",
    "good",
    "reason",
    "using",
    "frontend",
    "menor",
    "already",
    "professional",
    "looking",
    "designs",
    "built",
    "implemented",
    "us",
    "want",
    "waste",
    "lot",
    "time",
    "going",
    "design",
    "principles",
    "really",
    "expert",
    "um",
    "going",
    "use",
    "leverage",
    "existing",
    "designs",
    "learn",
    "turn",
    "code",
    "web",
    "page",
    "get",
    "wrong",
    "super",
    "important",
    "concepts",
    "uh",
    "fullstack",
    "developer",
    "always",
    "start",
    "wireframing",
    "design",
    "requirements",
    "kind",
    "stuff",
    "kind",
    "comes",
    "later",
    "road",
    "really",
    "want",
    "focus",
    "core",
    "concepts",
    "actually",
    "turn",
    "things",
    "code",
    "also",
    "going",
    "cover",
    "css",
    "going",
    "talk",
    "much",
    "basically",
    "convenient",
    "way",
    "write",
    "css",
    "basically",
    "allows",
    "write",
    "little",
    "bit",
    "less",
    "code",
    "gets",
    "guess",
    "transpiled",
    "vanilla",
    "css",
    "bunch",
    "code",
    "um",
    "sas",
    "less",
    "popular",
    "uh",
    "often",
    "find",
    "much",
    "larger",
    "projects",
    "trying",
    "organize",
    "css",
    "really",
    "important",
    "going",
    "working",
    "huge",
    "projects",
    "going",
    "essential",
    "journey",
    "also",
    "going",
    "talking",
    "css",
    "frameworks",
    "last",
    "thing",
    "want",
    "full",
    "stack",
    "web",
    "developer",
    "series",
    "lock",
    "path",
    "um",
    "something",
    "really",
    "popular",
    "right",
    "may",
    "two",
    "years",
    "kind",
    "deal",
    "css",
    "frameworks",
    "first",
    "learning",
    "bootstrap",
    "huge",
    "um",
    "every",
    "tutorial",
    "talking",
    "bootstrap",
    "tailwind",
    "pretty",
    "popular",
    "css",
    "framework",
    "frameworks",
    "taking",
    "vanilla",
    "css",
    "going",
    "learning",
    "writing",
    "abstractions",
    "top",
    "making",
    "convenient",
    "know",
    "lay",
    "elements",
    "page",
    "style",
    "quickly",
    "efficiently",
    "think",
    "really",
    "important",
    "understand",
    "barebones",
    "basics",
    "writing",
    "vanilla",
    "css",
    "therefore",
    "going",
    "looking",
    "whole",
    "lot",
    "right",
    "point",
    "think",
    "finally",
    "ready",
    "get",
    "css",
    "crash",
    "course",
    "um",
    "always",
    "apologies",
    "long",
    "intro",
    "really",
    "want",
    "make",
    "sure",
    "clear",
    "actually",
    "going",
    "lesson",
    "first",
    "thing",
    "want",
    "dive",
    "basic",
    "synx",
    "css",
    "already",
    "learned",
    "html",
    "might",
    "actually",
    "recognize",
    "html",
    "diagram",
    "last",
    "lesson",
    "css",
    "relatively",
    "simple",
    "trying",
    "target",
    "specific",
    "html",
    "element",
    "apply",
    "sort",
    "style",
    "uh",
    "sort",
    "layout",
    "example",
    "see",
    "defined",
    "html",
    "element",
    "class",
    "called",
    "class",
    "bottom",
    "look",
    "css",
    "using",
    "something",
    "called",
    "css",
    "selector",
    "targeting",
    "class",
    "um",
    "class",
    "basically",
    "saying",
    "rule",
    "want",
    "find",
    "html",
    "element",
    "class",
    "want",
    "assign",
    "specific",
    "css",
    "property",
    "um",
    "specific",
    "html",
    "element",
    "elements",
    "multiple",
    "elements",
    "class",
    "one",
    "many",
    "examples",
    "go",
    "case",
    "targeting",
    "specific",
    "class",
    "could",
    "also",
    "target",
    "um",
    "ids",
    "html",
    "tags",
    "bunch",
    "combinations",
    "um",
    "three",
    "going",
    "walking",
    "works",
    "also",
    "going",
    "talking",
    "properties",
    "similar",
    "talked",
    "javascript",
    "looking",
    "uh",
    "javascript",
    "objects",
    "know",
    "sort",
    "property",
    "value",
    "um",
    "side",
    "property",
    "thing",
    "applies",
    "css",
    "bunch",
    "predefined",
    "properties",
    "able",
    "use",
    "um",
    "achieve",
    "different",
    "types",
    "objectives",
    "whether",
    "laying",
    "know",
    "html",
    "elements",
    "page",
    "want",
    "put",
    "something",
    "side",
    "side",
    "want",
    "style",
    "want",
    "make",
    "background",
    "green",
    "want",
    "make",
    "text",
    "red",
    "something",
    "like",
    "course",
    "going",
    "get",
    "common",
    "properties",
    "selectors",
    "kind",
    "stuff",
    "um",
    "lessons",
    "taken",
    "want",
    "basically",
    "introduce",
    "documentation",
    "mdn",
    "web",
    "docs",
    "visited",
    "many",
    "times",
    "uh",
    "prior",
    "lessons",
    "series",
    "go",
    "technologies",
    "go",
    "css",
    "go",
    "css",
    "reference",
    "scroll",
    "find",
    "section",
    "called",
    "index",
    "going",
    "list",
    "possible",
    "css",
    "properties",
    "use",
    "achieve",
    "layout",
    "style",
    "objectives",
    "html",
    "elements",
    "go",
    "ever",
    "get",
    "lost",
    "always",
    "look",
    "properties",
    "using",
    "documentation",
    "page",
    "got",
    "b",
    "basic",
    "syntax",
    "css",
    "go",
    "even",
    "little",
    "bit",
    "actual",
    "purpose",
    "like",
    "trying",
    "well",
    "two",
    "things",
    "head",
    "css",
    "really",
    "good",
    "going",
    "layout",
    "style",
    "elements",
    "html",
    "elements",
    "laid",
    "page",
    "top",
    "next",
    "grid",
    "table",
    "kind",
    "stuff",
    "furthermore",
    "actually",
    "apply",
    "styles",
    "color",
    "text",
    "color",
    "background",
    "background",
    "image",
    "kind",
    "font",
    "know",
    "working",
    "page",
    "put",
    "together",
    "really",
    "basic",
    "example",
    "um",
    "nothing",
    "fancy",
    "shows",
    "um",
    "worry",
    "css",
    "uh",
    "quite",
    "yet",
    "basically",
    "shows",
    "combine",
    "two",
    "got",
    "container",
    "left",
    "container",
    "right",
    "furthermore",
    "colored",
    "borders",
    "little",
    "bit",
    "colored",
    "text",
    "within",
    "along",
    "know",
    "head",
    "things",
    "paragraph",
    "text",
    "kind",
    "ultimate",
    "goal",
    "css",
    "know",
    "style",
    "also",
    "layouts",
    "zoom",
    "even",
    "real",
    "goal",
    "css",
    "target",
    "specific",
    "html",
    "element",
    "elements",
    "apply",
    "sort",
    "styling",
    "element",
    "elements",
    "three",
    "primary",
    "ways",
    "select",
    "style",
    "html",
    "elements",
    "css",
    "html",
    "tag",
    "class",
    "syntax",
    "example",
    "looked",
    "little",
    "bit",
    "ago",
    "also",
    "id",
    "look",
    "page",
    "let",
    "go",
    "ahead",
    "make",
    "simple",
    "paragraph",
    "tag",
    "put",
    "text",
    "first",
    "thing",
    "target",
    "specific",
    "html",
    "tag",
    "give",
    "different",
    "text",
    "color",
    "see",
    "turns",
    "red",
    "also",
    "add",
    "class",
    "say",
    "uh",
    "paragraph",
    "know",
    "element",
    "something",
    "like",
    "replace",
    "adding",
    "period",
    "indicates",
    "want",
    "target",
    "class",
    "type",
    "class",
    "trying",
    "target",
    "give",
    "sort",
    "style",
    "see",
    "red",
    "text",
    "finally",
    "also",
    "id",
    "element",
    "let",
    "call",
    "one",
    "abc",
    "something",
    "like",
    "come",
    "use",
    "hashtag",
    "front",
    "going",
    "say",
    "want",
    "try",
    "target",
    "sort",
    "id",
    "page",
    "type",
    "id",
    "give",
    "sort",
    "css",
    "property",
    "see",
    "styled",
    "red",
    "following",
    "along",
    "series",
    "look",
    "familiar",
    "talked",
    "javascript",
    "already",
    "come",
    "javascript",
    "section",
    "know",
    "go",
    "basic",
    "doc",
    "doent",
    "query",
    "selector",
    "try",
    "target",
    "specific",
    "html",
    "element",
    "page",
    "use",
    "selector",
    "syntax",
    "trying",
    "target",
    "element",
    "html",
    "tag",
    "drop",
    "letter",
    "p",
    "targets",
    "targets",
    "first",
    "paragraph",
    "element",
    "finds",
    "page",
    "also",
    "target",
    "class",
    "put",
    "dot",
    "target",
    "class",
    "trying",
    "go",
    "going",
    "find",
    "find",
    "first",
    "html",
    "element",
    "uh",
    "class",
    "finally",
    "thing",
    "ids",
    "type",
    "hashtag",
    "id",
    "selected",
    "javascript",
    "actually",
    "pretty",
    "familiar",
    "concept",
    "following",
    "along",
    "series",
    "relatively",
    "easy",
    "kind",
    "grasp",
    "hold",
    "simple",
    "understanding",
    "happens",
    "multiple",
    "css",
    "selectors",
    "single",
    "stylesheet",
    "targeting",
    "element",
    "happens",
    "css",
    "rule",
    "takes",
    "precedence",
    "example",
    "put",
    "css",
    "stylesheet",
    "um",
    "targeted",
    "id",
    "right",
    "gave",
    "color",
    "green",
    "let",
    "see",
    "write",
    "correctly",
    "also",
    "come",
    "target",
    "class",
    "give",
    "color",
    "red",
    "ask",
    "one",
    "going",
    "apply",
    "going",
    "cover",
    "detail",
    "second",
    "want",
    "go",
    "couple",
    "ways",
    "actually",
    "target",
    "html",
    "elements",
    "um",
    "complex",
    "html",
    "web",
    "page",
    "aside",
    "selecting",
    "html",
    "elements",
    "tags",
    "classes",
    "ids",
    "also",
    "something",
    "called",
    "combinators",
    "um",
    "parse",
    "html",
    "target",
    "specific",
    "elements",
    "help",
    "us",
    "bringing",
    "back",
    "diagram",
    "looked",
    "prior",
    "lesson",
    "um",
    "dom",
    "document",
    "object",
    "model",
    "dom",
    "describes",
    "structure",
    "web",
    "page",
    "html",
    "laid",
    "diagram",
    "talked",
    "grandparents",
    "parents",
    "uh",
    "children",
    "children",
    "siblings",
    "um",
    "based",
    "level",
    "html",
    "element",
    "document",
    "see",
    "coming",
    "got",
    "know",
    "h1",
    "p",
    "tag",
    "another",
    "p",
    "tag",
    "unordered",
    "list",
    "four",
    "considered",
    "siblings",
    "quick",
    "review",
    "come",
    "back",
    "playground",
    "actually",
    "select",
    "different",
    "html",
    "elements",
    "based",
    "relationships",
    "first",
    "combinator",
    "want",
    "talk",
    "selecting",
    "descendants",
    "html",
    "go",
    "back",
    "visual",
    "doet",
    "tre",
    "see",
    "div",
    "right",
    "several",
    "descendants",
    "direct",
    "children",
    "four",
    "elements",
    "grandchildren",
    "children",
    "grandchildren",
    "considered",
    "descendants",
    "specific",
    "div",
    "within",
    "css",
    "target",
    "descendants",
    "single",
    "selector",
    "going",
    "wrong",
    "way",
    "first",
    "see",
    "matters",
    "first",
    "place",
    "let",
    "say",
    "wanted",
    "style",
    "list",
    "items",
    "right",
    "one",
    "way",
    "could",
    "could",
    "target",
    "html",
    "tag",
    "li",
    "give",
    "sort",
    "style",
    "maybe",
    "want",
    "text",
    "color",
    "green",
    "sticking",
    "color",
    "property",
    "talked",
    "css",
    "properties",
    "yet",
    "pretty",
    "simple",
    "easy",
    "kind",
    "intuitively",
    "understand",
    "example",
    "tried",
    "select",
    "style",
    "list",
    "items",
    "successfully",
    "targeting",
    "like",
    "run",
    "problems",
    "change",
    "html",
    "structure",
    "future",
    "let",
    "say",
    "put",
    "sort",
    "footer",
    "going",
    "look",
    "great",
    "let",
    "go",
    "ahead",
    "make",
    "div",
    "unordered",
    "list",
    "know",
    "footer",
    "link",
    "number",
    "one",
    "put",
    "three",
    "number",
    "two",
    "number",
    "three",
    "list",
    "right",
    "imagine",
    "low",
    "footer",
    "would",
    "want",
    "want",
    "actually",
    "make",
    "align",
    "horizontally",
    "want",
    "style",
    "different",
    "text",
    "color",
    "probably",
    "want",
    "give",
    "link",
    "see",
    "happening",
    "select",
    "li",
    "elements",
    "descendants",
    "actually",
    "picking",
    "footer",
    "um",
    "links",
    "right",
    "want",
    "better",
    "way",
    "actually",
    "target",
    "specific",
    "types",
    "descendants",
    "within",
    "document",
    "um",
    "allow",
    "us",
    "specificity",
    "targeting",
    "html",
    "elements",
    "make",
    "example",
    "little",
    "clear",
    "let",
    "go",
    "ahead",
    "add",
    "class",
    "uh",
    "attributes",
    "call",
    "main",
    "container",
    "second",
    "div",
    "going",
    "called",
    "footer",
    "semantic",
    "html",
    "like",
    "talked",
    "previously",
    "job",
    "trying",
    "want",
    "style",
    "list",
    "items",
    "ones",
    "within",
    "main",
    "container",
    "div",
    "want",
    "target",
    "ones",
    "sitting",
    "footer",
    "going",
    "styled",
    "little",
    "bit",
    "differently",
    "way",
    "rather",
    "targeting",
    "li",
    "tag",
    "actually",
    "combine",
    "selectors",
    "combinators",
    "calling",
    "say",
    "want",
    "target",
    "main",
    "container",
    "class",
    "want",
    "look",
    "list",
    "item",
    "descendant",
    "main",
    "container",
    "class",
    "first",
    "div",
    "talked",
    "left",
    "um",
    "div",
    "class",
    "therefore",
    "going",
    "styling",
    "ones",
    "targeting",
    "point",
    "also",
    "add",
    "additional",
    "list",
    "items",
    "main",
    "container",
    "div",
    "going",
    "get",
    "style",
    "come",
    "right",
    "list",
    "make",
    "another",
    "div",
    "another",
    "unordered",
    "list",
    "put",
    "text",
    "going",
    "see",
    "turn",
    "green",
    "still",
    "descendant",
    "main",
    "container",
    "footer",
    "links",
    "uh",
    "know",
    "avoiding",
    "style",
    "specific",
    "selecting",
    "descendants",
    "main",
    "div",
    "want",
    "stop",
    "second",
    "look",
    "syntax",
    "working",
    "see",
    "class",
    "selector",
    "period",
    "right",
    "determines",
    "tag",
    "selector",
    "separated",
    "single",
    "space",
    "call",
    "first",
    "one",
    "going",
    "selector",
    "li",
    "actual",
    "selector",
    "css",
    "rule",
    "defined",
    "really",
    "targeting",
    "main",
    "container",
    "targeting",
    "list",
    "items",
    "one",
    "furthest",
    "right",
    "always",
    "going",
    "html",
    "element",
    "actually",
    "want",
    "style",
    "targeting",
    "main",
    "container",
    "dropped",
    "separate",
    "rule",
    "gave",
    "color",
    "blue",
    "per",
    "se",
    "going",
    "see",
    "list",
    "items",
    "everything",
    "else",
    "going",
    "get",
    "style",
    "different",
    "saying",
    "want",
    "target",
    "main",
    "container",
    "class",
    "saying",
    "want",
    "target",
    "list",
    "items",
    "descendants",
    "main",
    "container",
    "class",
    "right",
    "going",
    "clear",
    "styles",
    "going",
    "also",
    "clear",
    "html",
    "working",
    "let",
    "go",
    "ahead",
    "drop",
    "different",
    "html",
    "second",
    "one",
    "going",
    "talk",
    "second",
    "css",
    "combinator",
    "select",
    "children",
    "specific",
    "element",
    "descendants",
    "selector",
    "space",
    "separating",
    "two",
    "different",
    "selectors",
    "grabbing",
    "everything",
    "certain",
    "html",
    "element",
    "children",
    "selector",
    "grabbing",
    "first",
    "children",
    "div",
    "right",
    "calling",
    "id",
    "main",
    "three",
    "four",
    "different",
    "children",
    "first",
    "three",
    "paragraph",
    "tags",
    "div",
    "element",
    "going",
    "considered",
    "children",
    "wanted",
    "style",
    "elements",
    "use",
    "slightly",
    "different",
    "syntax",
    "remember",
    "targeting",
    "id",
    "right",
    "instead",
    "using",
    "period",
    "going",
    "use",
    "hashtag",
    "going",
    "pass",
    "id",
    "drop",
    "css",
    "rule",
    "going",
    "give",
    "color",
    "call",
    "green",
    "going",
    "target",
    "everything",
    "targeting",
    "everything",
    "div",
    "added",
    "child",
    "selector",
    "combin",
    "ator",
    "target",
    "first",
    "three",
    "paragraph",
    "elements",
    "use",
    "little",
    "carrot",
    "right",
    "type",
    "paragraph",
    "tag",
    "right",
    "saying",
    "want",
    "look",
    "div",
    "id",
    "main",
    "want",
    "grab",
    "children",
    "direct",
    "children",
    "um",
    "p",
    "tags",
    "three",
    "qualify",
    "rule",
    "first",
    "three",
    "paragraphs",
    "therefore",
    "style",
    "text",
    "color",
    "green",
    "know",
    "select",
    "descendants",
    "know",
    "select",
    "direct",
    "children",
    "also",
    "css",
    "combinator",
    "combinators",
    "use",
    "select",
    "sibling",
    "elements",
    "make",
    "disclaimer",
    "use",
    "ever",
    "know",
    "ever",
    "actually",
    "used",
    "sibling",
    "selectors",
    "reason",
    "whenever",
    "change",
    "html",
    "structure",
    "going",
    "affect",
    "css",
    "rules",
    "little",
    "bit",
    "brittle",
    "um",
    "putting",
    "together",
    "reason",
    "walking",
    "may",
    "see",
    "code",
    "somewhere",
    "good",
    "know",
    "exist",
    "work",
    "going",
    "copy",
    "little",
    "bit",
    "different",
    "html",
    "need",
    "different",
    "structure",
    "work",
    "let",
    "zoom",
    "little",
    "bit",
    "see",
    "within",
    "html",
    "see",
    "another",
    "know",
    "main",
    "container",
    "paragraph",
    "elements",
    "list",
    "items",
    "uh",
    "separated",
    "uh",
    "throughout",
    "html",
    "going",
    "get",
    "rid",
    "css",
    "rule",
    "right",
    "going",
    "select",
    "sibling",
    "elements",
    "let",
    "say",
    "odd",
    "reason",
    "want",
    "style",
    "every",
    "paragraph",
    "element",
    "directly",
    "follows",
    "list",
    "group",
    "case",
    "would",
    "first",
    "paragraph",
    "fourth",
    "paragraph",
    "directly",
    "follow",
    "list",
    "groups",
    "order",
    "use",
    "special",
    "css",
    "combinator",
    "selects",
    "first",
    "uh",
    "sibling",
    "element",
    "call",
    "adjacent",
    "sibling",
    "selector",
    "grab",
    "um",
    "let",
    "see",
    "need",
    "grab",
    "unordered",
    "list",
    "ul",
    "going",
    "target",
    "add",
    "plus",
    "sign",
    "target",
    "p",
    "elements",
    "going",
    "adjacent",
    "siblings",
    "unordered",
    "lists",
    "assign",
    "call",
    "blue",
    "time",
    "see",
    "first",
    "paragraph",
    "fourth",
    "paragraph",
    "targeted",
    "saying",
    "little",
    "bit",
    "earlier",
    "change",
    "html",
    "structure",
    "rules",
    "break",
    "come",
    "know",
    "reason",
    "actually",
    "pretty",
    "common",
    "wanted",
    "maybe",
    "wrap",
    "last",
    "unordered",
    "list",
    "div",
    "let",
    "copy",
    "another",
    "div",
    "going",
    "see",
    "rule",
    "wrote",
    "broken",
    "fourth",
    "paragraph",
    "longer",
    "styled",
    "blue",
    "text",
    "simply",
    "changed",
    "structure",
    "html",
    "huge",
    "fan",
    "selectors",
    "um",
    "pretty",
    "uh",
    "fragile",
    "sense",
    "last",
    "sibling",
    "selector",
    "looked",
    "adjacent",
    "one",
    "grabs",
    "first",
    "um",
    "sibling",
    "next",
    "element",
    "also",
    "grab",
    "siblings",
    "next",
    "element",
    "let",
    "say",
    "wanted",
    "style",
    "paragraphs",
    "um",
    "direct",
    "siblings",
    "unordered",
    "list",
    "way",
    "open",
    "css",
    "instead",
    "plus",
    "sign",
    "going",
    "use",
    "little",
    "till",
    "day",
    "um",
    "sign",
    "right",
    "going",
    "going",
    "look",
    "unordered",
    "list",
    "going",
    "look",
    "direct",
    "siblings",
    "know",
    "type",
    "paragraph",
    "give",
    "style",
    "pretty",
    "fragile",
    "um",
    "use",
    "often",
    "good",
    "know",
    "know",
    "work",
    "um",
    "might",
    "see",
    "code",
    "point",
    "hopefully",
    "would",
    "fix",
    "make",
    "little",
    "bit",
    "robust",
    "last",
    "minutes",
    "talked",
    "fragile",
    "selectors",
    "really",
    "offer",
    "better",
    "solution",
    "going",
    "right",
    "situation",
    "let",
    "go",
    "ahead",
    "remove",
    "css",
    "rules",
    "situation",
    "wanted",
    "target",
    "first",
    "paragraph",
    "fourth",
    "paragraph",
    "going",
    "give",
    "class",
    "going",
    "come",
    "html",
    "first",
    "paragraph",
    "going",
    "say",
    "blue",
    "text",
    "color",
    "going",
    "class",
    "name",
    "going",
    "copy",
    "class",
    "fourth",
    "paragraph",
    "going",
    "select",
    "class",
    "class",
    "selector",
    "going",
    "give",
    "color",
    "blue",
    "achieved",
    "exact",
    "result",
    "change",
    "html",
    "structure",
    "css",
    "rule",
    "going",
    "break",
    "would",
    "preferred",
    "method",
    "least",
    "head",
    "believe",
    "ways",
    "select",
    "html",
    "elements",
    "main",
    "three",
    "uh",
    "tag",
    "class",
    "id",
    "also",
    "combinators",
    "um",
    "ways",
    "let",
    "say",
    "specific",
    "html",
    "right",
    "p",
    "element",
    "div",
    "element",
    "class",
    "called",
    "regular",
    "text",
    "let",
    "say",
    "odd",
    "reason",
    "want",
    "style",
    "elements",
    "class",
    "regular",
    "text",
    "certain",
    "way",
    "want",
    "styles",
    "apply",
    "div",
    "element",
    "want",
    "apply",
    "p",
    "element",
    "well",
    "one",
    "way",
    "could",
    "could",
    "come",
    "css",
    "write",
    "funky",
    "syntax",
    "actually",
    "specify",
    "class",
    "want",
    "target",
    "along",
    "tag",
    "kind",
    "um",
    "grouping",
    "together",
    "saying",
    "want",
    "style",
    "elements",
    "paragraph",
    "elements",
    "also",
    "uh",
    "class",
    "kind",
    "like",
    "statement",
    "come",
    "give",
    "color",
    "blue",
    "say",
    "selected",
    "one",
    "opposed",
    "select",
    "uh",
    "class",
    "give",
    "color",
    "blue",
    "going",
    "apply",
    "kind",
    "obnoxious",
    "way",
    "solve",
    "problem",
    "right",
    "totally",
    "unnecessary",
    "want",
    "show",
    "ways",
    "um",
    "mainly",
    "would",
    "say",
    "going",
    "route",
    "would",
    "use",
    "caseby",
    "casee",
    "basis",
    "need",
    "go",
    "trying",
    "learn",
    "different",
    "ways",
    "end",
    "three",
    "main",
    "ways",
    "tag",
    "class",
    "id",
    "going",
    "totally",
    "sufficient",
    "uh",
    "writing",
    "good",
    "web",
    "applications",
    "point",
    "hopefully",
    "least",
    "somewhat",
    "comfortable",
    "writing",
    "css",
    "rule",
    "targets",
    "specific",
    "html",
    "element",
    "also",
    "kind",
    "talked",
    "might",
    "target",
    "multiple",
    "elements",
    "going",
    "write",
    "couple",
    "css",
    "properties",
    "covered",
    "yet",
    "would",
    "expect",
    "understand",
    "work",
    "try",
    "follow",
    "along",
    "um",
    "intuitively",
    "moment",
    "get",
    "later",
    "got",
    "html",
    "right",
    "div",
    "class",
    "box",
    "one",
    "another",
    "div",
    "class",
    "box",
    "two",
    "want",
    "want",
    "apply",
    "styles",
    "going",
    "shared",
    "across",
    "boxes",
    "styles",
    "going",
    "unique",
    "similar",
    "example",
    "looked",
    "little",
    "bit",
    "earlier",
    "um",
    "two",
    "boxes",
    "right",
    "styles",
    "sized",
    "boxes",
    "borders",
    "borders",
    "text",
    "going",
    "different",
    "two",
    "go",
    "know",
    "writing",
    "least",
    "amount",
    "code",
    "achieving",
    "result",
    "going",
    "inefficient",
    "way",
    "still",
    "going",
    "work",
    "okay",
    "going",
    "going",
    "target",
    "box",
    "one",
    "class",
    "also",
    "come",
    "target",
    "box",
    "number",
    "two",
    "class",
    "point",
    "use",
    "css",
    "properties",
    "learned",
    "quite",
    "yet",
    "maybe",
    "want",
    "give",
    "border",
    "want",
    "give",
    "box",
    "one",
    "green",
    "border",
    "want",
    "come",
    "give",
    "box",
    "two",
    "blue",
    "border",
    "borders",
    "around",
    "elements",
    "let",
    "also",
    "add",
    "padding",
    "give",
    "20",
    "pixels",
    "padding",
    "talk",
    "units",
    "little",
    "bit",
    "later",
    "crash",
    "course",
    "um",
    "finally",
    "let",
    "go",
    "ahead",
    "write",
    "text",
    "got",
    "uh",
    "box",
    "box",
    "one",
    "box",
    "two",
    "want",
    "give",
    "different",
    "colors",
    "box",
    "green",
    "text",
    "one",
    "going",
    "blue",
    "text",
    "far",
    "example",
    "everything",
    "little",
    "bit",
    "different",
    "let",
    "say",
    "wanted",
    "um",
    "make",
    "width",
    "height",
    "let",
    "say",
    "want",
    "box",
    "one",
    "width",
    "200",
    "pixels",
    "height",
    "200",
    "pixels",
    "come",
    "box",
    "two",
    "give",
    "width",
    "200",
    "height",
    "200",
    "case",
    "got",
    "two",
    "boxes",
    "different",
    "properties",
    "similar",
    "properties",
    "one",
    "way",
    "actually",
    "simplify",
    "code",
    "little",
    "bit",
    "um",
    "share",
    "properties",
    "special",
    "css",
    "syntax",
    "leave",
    "comma",
    "two",
    "classes",
    "trying",
    "select",
    "ids",
    "tags",
    "whatever",
    "trying",
    "select",
    "css",
    "rule",
    "um",
    "box",
    "one",
    "box",
    "two",
    "saying",
    "want",
    "select",
    "uh",
    "elements",
    "class",
    "box",
    "one",
    "elements",
    "class",
    "box",
    "two",
    "take",
    "height",
    "properties",
    "take",
    "individual",
    "styles",
    "go",
    "ahead",
    "put",
    "right",
    "basically",
    "eliminated",
    "two",
    "whole",
    "lines",
    "code",
    "followed",
    "dry",
    "principle",
    "repeat",
    "pretty",
    "important",
    "one",
    "going",
    "know",
    "come",
    "across",
    "develop",
    "know",
    "bigger",
    "bigger",
    "software",
    "everything",
    "code",
    "multiple",
    "ways",
    "could",
    "write",
    "rule",
    "right",
    "targeting",
    "two",
    "elements",
    "applying",
    "um",
    "shared",
    "styles",
    "also",
    "achieve",
    "exact",
    "result",
    "instead",
    "targeting",
    "css",
    "actually",
    "give",
    "multiple",
    "classes",
    "single",
    "element",
    "instead",
    "box",
    "one",
    "box",
    "two",
    "maybe",
    "classes",
    "also",
    "shared",
    "class",
    "called",
    "box",
    "instead",
    "coming",
    "css",
    "targeting",
    "like",
    "get",
    "rid",
    "give",
    "shared",
    "class",
    "going",
    "get",
    "exact",
    "result",
    "slightly",
    "different",
    "way",
    "honestly",
    "probably",
    "preferred",
    "way",
    "little",
    "bit",
    "straightforward",
    "simple",
    "head",
    "valid",
    "ways",
    "know",
    "provide",
    "shared",
    "styles",
    "html",
    "right",
    "part",
    "think",
    "covered",
    "lot",
    "selector",
    "stuff",
    "css",
    "talk",
    "pseudo",
    "selectors",
    "going",
    "get",
    "whole",
    "lot",
    "detail",
    "think",
    "extremely",
    "important",
    "point",
    "want",
    "mention",
    "want",
    "show",
    "probably",
    "one",
    "common",
    "ways",
    "using",
    "something",
    "called",
    "pseudo",
    "selector",
    "let",
    "get",
    "rid",
    "stuff",
    "paste",
    "simple",
    "button",
    "see",
    "button",
    "right",
    "know",
    "click",
    "anything",
    "styled",
    "nicely",
    "anything",
    "like",
    "button",
    "apply",
    "something",
    "called",
    "believe",
    "pseudo",
    "class",
    "pseudo",
    "class",
    "allow",
    "us",
    "style",
    "button",
    "differently",
    "based",
    "different",
    "states",
    "button",
    "get",
    "page",
    "documentation",
    "type",
    "uh",
    "pseudo",
    "classes",
    "mdn",
    "documentation",
    "read",
    "let",
    "go",
    "ahead",
    "get",
    "back",
    "example",
    "show",
    "exactly",
    "going",
    "first",
    "target",
    "button",
    "maybe",
    "want",
    "apply",
    "couple",
    "styles",
    "button",
    "um",
    "gone",
    "properties",
    "quite",
    "yet",
    "going",
    "get",
    "um",
    "let",
    "say",
    "want",
    "give",
    "background",
    "color",
    "navy",
    "want",
    "give",
    "um",
    "uh",
    "say",
    "text",
    "color",
    "white",
    "going",
    "see",
    "slightly",
    "better",
    "looking",
    "button",
    "really",
    "really",
    "nice",
    "looking",
    "button",
    "maybe",
    "get",
    "rid",
    "border",
    "looks",
    "little",
    "bit",
    "cleaner",
    "add",
    "padding",
    "things",
    "going",
    "learn",
    "little",
    "bit",
    "later",
    "course",
    "got",
    "button",
    "looks",
    "little",
    "bit",
    "better",
    "um",
    "great",
    "want",
    "want",
    "attach",
    "hover",
    "pseudo",
    "class",
    "basically",
    "says",
    "want",
    "target",
    "button",
    "html",
    "element",
    "hover",
    "state",
    "basically",
    "hover",
    "mouse",
    "want",
    "apply",
    "styles",
    "first",
    "thing",
    "want",
    "give",
    "different",
    "cursor",
    "hover",
    "see",
    "curs",
    "cursor",
    "stays",
    "want",
    "little",
    "clicking",
    "cursor",
    "need",
    "come",
    "give",
    "cursor",
    "property",
    "say",
    "want",
    "pointer",
    "hover",
    "see",
    "cursor",
    "changes",
    "hover",
    "pointer",
    "another",
    "thing",
    "could",
    "change",
    "opacity",
    "maybe",
    "want",
    "give",
    "background",
    "color",
    "uh",
    "80",
    "opacity",
    "going",
    "get",
    "different",
    "cursor",
    "also",
    "going",
    "change",
    "color",
    "kind",
    "indicate",
    "user",
    "click",
    "something",
    "made",
    "possible",
    "hover",
    "sud",
    "sudo",
    "class",
    "go",
    "documentation",
    "sorts",
    "different",
    "pseudo",
    "classes",
    "um",
    "use",
    "know",
    "couple",
    "um",
    "going",
    "get",
    "whole",
    "lot",
    "detail",
    "right",
    "last",
    "thing",
    "want",
    "talk",
    "topic",
    "css",
    "selectors",
    "kind",
    "differentiate",
    "two",
    "already",
    "talked",
    "already",
    "seen",
    "multiple",
    "selectors",
    "let",
    "go",
    "back",
    "um",
    "got",
    "box",
    "example",
    "let",
    "let",
    "bring",
    "back",
    "multiple",
    "selectors",
    "box",
    "one",
    "box",
    "two",
    "selected",
    "let",
    "go",
    "ahead",
    "compare",
    "something",
    "like",
    "go",
    "box",
    "one",
    "pass",
    "p",
    "tag",
    "something",
    "like",
    "look",
    "similar",
    "different",
    "case",
    "saying",
    "want",
    "target",
    "box",
    "one",
    "box",
    "two",
    "second",
    "rule",
    "saying",
    "want",
    "target",
    "p",
    "element",
    "actual",
    "selector",
    "exist",
    "descendant",
    "box",
    "one",
    "class",
    "element",
    "different",
    "try",
    "keep",
    "separate",
    "head",
    "go",
    "tutorial",
    "covered",
    "select",
    "html",
    "elements",
    "css",
    "rules",
    "let",
    "talk",
    "whole",
    "cascading",
    "concept",
    "css",
    "stands",
    "cascading",
    "style",
    "sty",
    "sheets",
    "term",
    "refers",
    "concept",
    "got",
    "multiple",
    "styles",
    "sheets",
    "possible",
    "multiple",
    "css",
    "rules",
    "within",
    "stylesheets",
    "compete",
    "style",
    "html",
    "element",
    "asking",
    "one",
    "going",
    "win",
    "one",
    "going",
    "take",
    "precedence",
    "actually",
    "style",
    "element",
    "start",
    "writing",
    "bunch",
    "things",
    "want",
    "show",
    "tool",
    "actually",
    "looked",
    "um",
    "looked",
    "yet",
    "css",
    "know",
    "working",
    "firefox",
    "previously",
    "google",
    "chrome",
    "cuz",
    "got",
    "google",
    "slides",
    "um",
    "thing",
    "inspect",
    "um",
    "elements",
    "dev",
    "tools",
    "come",
    "elements",
    "tab",
    "first",
    "one",
    "going",
    "see",
    "browsers",
    "parse",
    "html",
    "know",
    "click",
    "drill",
    "figure",
    "html",
    "element",
    "want",
    "look",
    "right",
    "hand",
    "pane",
    "styles",
    "applying",
    "element",
    "going",
    "housed",
    "many",
    "cases",
    "going",
    "see",
    "multiple",
    "styles",
    "let",
    "go",
    "ahead",
    "click",
    "one",
    "know",
    "really",
    "matter",
    "um",
    "going",
    "see",
    "right",
    "side",
    "bunch",
    "styles",
    "cases",
    "going",
    "see",
    "crossed",
    "basically",
    "means",
    "um",
    "cancelled",
    "another",
    "stylesheet",
    "uh",
    "css",
    "rule",
    "takes",
    "precedence",
    "one",
    "written",
    "going",
    "seeing",
    "time",
    "web",
    "pages",
    "want",
    "talk",
    "determine",
    "one",
    "takes",
    "precedence",
    "let",
    "throw",
    "html",
    "page",
    "one",
    "plenty",
    "things",
    "select",
    "div",
    "paragraph",
    "element",
    "within",
    "div",
    "class",
    "paragraph",
    "element",
    "class",
    "id",
    "got",
    "plenty",
    "ways",
    "select",
    "html",
    "element",
    "going",
    "first",
    "one",
    "pretty",
    "easy",
    "let",
    "go",
    "ahead",
    "use",
    "html",
    "tag",
    "selector",
    "give",
    "color",
    "red",
    "let",
    "come",
    "select",
    "class",
    "going",
    "select",
    "p",
    "element",
    "class",
    "going",
    "give",
    "color",
    "blue",
    "far",
    "changed",
    "looking",
    "time",
    "written",
    "rule",
    "let",
    "come",
    "even",
    "little",
    "bit",
    "specific",
    "let",
    "uh",
    "select",
    "id",
    "putting",
    "hashtag",
    "typing",
    "id",
    "time",
    "going",
    "style",
    "color",
    "green",
    "first",
    "case",
    "tried",
    "style",
    "red",
    "tried",
    "style",
    "blue",
    "finally",
    "green",
    "see",
    "within",
    "document",
    "last",
    "rule",
    "right",
    "currently",
    "winning",
    "precedence",
    "going",
    "find",
    "exactly",
    "case",
    "second",
    "let",
    "keep",
    "going",
    "actually",
    "multiple",
    "ways",
    "know",
    "select",
    "single",
    "element",
    "actually",
    "going",
    "paste",
    "want",
    "uh",
    "bore",
    "waste",
    "time",
    "typing",
    "let",
    "go",
    "ahead",
    "paste",
    "different",
    "ways",
    "style",
    "uh",
    "paragraph",
    "element",
    "pretty",
    "pretty",
    "wild",
    "many",
    "different",
    "ways",
    "got",
    "three",
    "wrote",
    "got",
    "different",
    "ways",
    "targeting",
    "element",
    "question",
    "look",
    "know",
    "one",
    "going",
    "end",
    "know",
    "winning",
    "one",
    "going",
    "apply",
    "sure",
    "question",
    "asking",
    "um",
    "would",
    "ever",
    "happen",
    "would",
    "ever",
    "write",
    "10",
    "different",
    "rules",
    "going",
    "style",
    "element",
    "well",
    "answer",
    "probably",
    "would",
    "could",
    "happen",
    "could",
    "external",
    "style",
    "sheets",
    "going",
    "come",
    "project",
    "going",
    "opinions",
    "know",
    "certain",
    "elements",
    "need",
    "styled",
    "got",
    "stylesheets",
    "um",
    "locally",
    "within",
    "project",
    "styles",
    "pretty",
    "common",
    "see",
    "multiple",
    "stylesheets",
    "coming",
    "single",
    "web",
    "application",
    "really",
    "important",
    "understand",
    "know",
    "one",
    "going",
    "win",
    "two",
    "ways",
    "determine",
    "two",
    "factors",
    "equation",
    "uh",
    "let",
    "go",
    "ahead",
    "write",
    "two",
    "factors",
    "determining",
    "css",
    "precedence",
    "right",
    "first",
    "way",
    "going",
    "let",
    "go",
    "ahead",
    "make",
    "ordered",
    "list",
    "practicing",
    "first",
    "way",
    "going",
    "uh",
    "location",
    "css",
    "rule",
    "file",
    "second",
    "one",
    "going",
    "specificity",
    "specificity",
    "css",
    "rule",
    "really",
    "understand",
    "either",
    "quite",
    "yet",
    "first",
    "one",
    "pretty",
    "simple",
    "second",
    "one",
    "catch",
    "talked",
    "much",
    "earlier",
    "lesson",
    "let",
    "start",
    "location",
    "piece",
    "location",
    "css",
    "rule",
    "file",
    "really",
    "referring",
    "say",
    "cascading",
    "stylesheets",
    "came",
    "css",
    "targeted",
    "list",
    "items",
    "two",
    "list",
    "items",
    "right",
    "targeting",
    "want",
    "turn",
    "different",
    "color",
    "going",
    "write",
    "rule",
    "right",
    "going",
    "take",
    "exact",
    "css",
    "rule",
    "change",
    "color",
    "blue",
    "see",
    "actually",
    "changes",
    "color",
    "blue",
    "quite",
    "apparent",
    "bottom",
    "one",
    "going",
    "take",
    "precedence",
    "top",
    "one",
    "well",
    "css",
    "works",
    "always",
    "read",
    "top",
    "bottom",
    "basically",
    "way",
    "think",
    "um",
    "css",
    "interpreter",
    "reading",
    "figuring",
    "apply",
    "going",
    "read",
    "read",
    "top",
    "going",
    "say",
    "okay",
    "want",
    "style",
    "list",
    "items",
    "uh",
    "text",
    "color",
    "green",
    "going",
    "say",
    "okay",
    "long",
    "see",
    "anything",
    "else",
    "rest",
    "stylesheet",
    "stylesheet",
    "comes",
    "going",
    "style",
    "apply",
    "see",
    "something",
    "hear",
    "going",
    "replace",
    "previous",
    "style",
    "recent",
    "one",
    "saw",
    "read",
    "top",
    "bottom",
    "talking",
    "say",
    "cascading",
    "style",
    "sheets",
    "uh",
    "one",
    "way",
    "determine",
    "precedence",
    "css",
    "selectors",
    "know",
    "seems",
    "little",
    "weird",
    "cuz",
    "worked",
    "javascript",
    "definitely",
    "declare",
    "variables",
    "stuff",
    "like",
    "seems",
    "little",
    "odd",
    "could",
    "put",
    "exact",
    "css",
    "selector",
    "one",
    "css",
    "stylesheet",
    "totally",
    "valid",
    "rule",
    "apply",
    "css",
    "like",
    "javascript",
    "totally",
    "different",
    "type",
    "know",
    "language",
    "dealing",
    "know",
    "know",
    "last",
    "uh",
    "selector",
    "fil",
    "always",
    "going",
    "win",
    "unless",
    "selector",
    "higher",
    "specificity",
    "second",
    "piece",
    "equation",
    "going",
    "break",
    "um",
    "real",
    "quick",
    "see",
    "works",
    "let",
    "say",
    "list",
    "items",
    "right",
    "let",
    "go",
    "ahead",
    "add",
    "class",
    "say",
    "list",
    "item",
    "something",
    "generic",
    "know",
    "class",
    "select",
    "two",
    "different",
    "ways",
    "question",
    "try",
    "select",
    "tag",
    "use",
    "li",
    "tag",
    "color",
    "text",
    "also",
    "added",
    "rule",
    "selected",
    "class",
    "one",
    "going",
    "win",
    "furthermore",
    "matter",
    "order",
    "put",
    "file",
    "type",
    "pause",
    "video",
    "see",
    "kind",
    "reason",
    "uh",
    "second",
    "right",
    "let",
    "try",
    "first",
    "going",
    "select",
    "tag",
    "going",
    "give",
    "color",
    "green",
    "going",
    "select",
    "class",
    "going",
    "give",
    "color",
    "blue",
    "going",
    "see",
    "changes",
    "blue",
    "quite",
    "know",
    "yet",
    "case",
    "first",
    "rule",
    "talked",
    "said",
    "okay",
    "read",
    "top",
    "bottom",
    "always",
    "going",
    "take",
    "last",
    "rule",
    "apply",
    "would",
    "make",
    "sense",
    "list",
    "items",
    "last",
    "rule",
    "file",
    "got",
    "color",
    "blue",
    "styled",
    "way",
    "well",
    "actually",
    "wrong",
    "answer",
    "um",
    "reason",
    "styled",
    "blue",
    "second",
    "rule",
    "specific",
    "first",
    "take",
    "put",
    "selector",
    "still",
    "going",
    "see",
    "blue",
    "text",
    "even",
    "though",
    "last",
    "file",
    "first",
    "one",
    "specific",
    "question",
    "know",
    "specific",
    "another",
    "figure",
    "need",
    "little",
    "visual",
    "says",
    "um",
    "continuum",
    "left",
    "right",
    "least",
    "important",
    "important",
    "words",
    "least",
    "specific",
    "specific",
    "tags",
    "classes",
    "ids",
    "might",
    "picked",
    "put",
    "id",
    "let",
    "say",
    "list",
    "item",
    "number",
    "one",
    "try",
    "style",
    "um",
    "let",
    "go",
    "ahead",
    "put",
    "top",
    "file",
    "make",
    "sure",
    "rule",
    "whole",
    "know",
    "first",
    "last",
    "uh",
    "stuff",
    "applies",
    "going",
    "select",
    "id",
    "going",
    "give",
    "color",
    "orange",
    "case",
    "going",
    "see",
    "specific",
    "one",
    "um",
    "applying",
    "ca",
    "assign",
    "id",
    "two",
    "different",
    "uh",
    "html",
    "elements",
    "looking",
    "first",
    "element",
    "selecting",
    "uh",
    "one",
    "time",
    "right",
    "another",
    "time",
    "right",
    "third",
    "time",
    "right",
    "top",
    "one",
    "despite",
    "top",
    "file",
    "going",
    "specific",
    "continuum",
    "right",
    "therefore",
    "going",
    "one",
    "wins",
    "applies",
    "style",
    "html",
    "uh",
    "element",
    "following",
    "along",
    "intently",
    "probably",
    "asking",
    "yet",
    "another",
    "question",
    "combinators",
    "talked",
    "earlier",
    "video",
    "happens",
    "get",
    "rid",
    "css",
    "rules",
    "come",
    "let",
    "say",
    "say",
    "select",
    "id",
    "give",
    "color",
    "green",
    "also",
    "come",
    "say",
    "want",
    "select",
    "um",
    "let",
    "see",
    "want",
    "go",
    "ahead",
    "look",
    "ordered",
    "list",
    "want",
    "target",
    "list",
    "items",
    "id",
    "list",
    "item",
    "number",
    "one",
    "going",
    "exact",
    "element",
    "selecting",
    "going",
    "first",
    "one",
    "right",
    "let",
    "go",
    "ahead",
    "see",
    "turn",
    "different",
    "color",
    "selector",
    "right",
    "even",
    "take",
    "put",
    "top",
    "file",
    "still",
    "going",
    "get",
    "result",
    "still",
    "going",
    "blue",
    "rule",
    "right",
    "specific",
    "one",
    "right",
    "despite",
    "fact",
    "using",
    "specific",
    "selector",
    "according",
    "little",
    "continuum",
    "see",
    "gets",
    "little",
    "bit",
    "uh",
    "tricky",
    "start",
    "using",
    "combinators",
    "two",
    "ways",
    "um",
    "identify",
    "pretty",
    "reliably",
    "one",
    "going",
    "win",
    "first",
    "one",
    "probably",
    "favorite",
    "try",
    "case",
    "really",
    "easy",
    "using",
    "code",
    "pen",
    "try",
    "see",
    "works",
    "going",
    "give",
    "really",
    "good",
    "understanding",
    "working",
    "way",
    "another",
    "method",
    "use",
    "actually",
    "calculate",
    "numbers",
    "level",
    "specificity",
    "css",
    "rule",
    "let",
    "lay",
    "steps",
    "um",
    "go",
    "ahead",
    "practice",
    "html",
    "second",
    "let",
    "go",
    "first",
    "list",
    "item",
    "um",
    "actually",
    "second",
    "list",
    "item",
    "talking",
    "specificity",
    "let",
    "make",
    "another",
    "ordered",
    "list",
    "first",
    "step",
    "going",
    "going",
    "count",
    "number",
    "id",
    "selectors",
    "css",
    "rule",
    "step",
    "number",
    "one",
    "going",
    "come",
    "going",
    "count",
    "number",
    "class",
    "selectors",
    "finally",
    "count",
    "number",
    "tag",
    "selectors",
    "right",
    "looking",
    "rules",
    "um",
    "let",
    "go",
    "ahead",
    "apply",
    "math",
    "first",
    "count",
    "number",
    "id",
    "selectors",
    "css",
    "rule",
    "um",
    "single",
    "id",
    "one",
    "id",
    "go",
    "next",
    "one",
    "count",
    "number",
    "class",
    "selectors",
    "zero",
    "finally",
    "number",
    "tag",
    "select",
    "vectors",
    "first",
    "one",
    "one",
    "second",
    "one",
    "zero",
    "way",
    "going",
    "work",
    "write",
    "uh",
    "css",
    "comments",
    "right",
    "might",
    "well",
    "go",
    "right",
    "actual",
    "rule",
    "use",
    "little",
    "comment",
    "syntax",
    "forward",
    "slash",
    "star",
    "star",
    "forward",
    "slash",
    "close",
    "count",
    "say",
    "id",
    "selectors",
    "going",
    "one",
    "say",
    "class",
    "selectors",
    "going",
    "zero",
    "tag",
    "selectors",
    "one",
    "add",
    "together",
    "get",
    "number",
    "of1",
    "exact",
    "uh",
    "little",
    "math",
    "problem",
    "let",
    "copy",
    "next",
    "rule",
    "say",
    "id",
    "selectors",
    "one",
    "zero",
    "class",
    "selectors",
    "zero",
    "tag",
    "selectors",
    "number",
    "going",
    "100",
    "case",
    "second",
    "rule",
    "specificity",
    "100",
    "first",
    "one",
    "specificity",
    "101",
    "means",
    "one",
    "point",
    "whatever",
    "want",
    "call",
    "specific",
    "therefore",
    "one",
    "applies",
    "element",
    "really",
    "nail",
    "concept",
    "going",
    "paste",
    "code",
    "type",
    "going",
    "walk",
    "uh",
    "calculations",
    "right",
    "got",
    "little",
    "bit",
    "different",
    "html",
    "paragraph",
    "tag",
    "bunch",
    "ids",
    "classes",
    "give",
    "us",
    "flexibility",
    "select",
    "css",
    "written",
    "several",
    "rules",
    "going",
    "different",
    "levels",
    "specificity",
    "let",
    "walk",
    "calculated",
    "first",
    "example",
    "two",
    "classes",
    "get",
    "0",
    "2",
    "0",
    "total",
    "20",
    "come",
    "two",
    "ids",
    "going",
    "uh",
    "actually",
    "oh",
    "wrong",
    "spot",
    "got",
    "two",
    "ids",
    "zero",
    "classes",
    "zero",
    "tag",
    "selectors",
    "specificity",
    "200",
    "come",
    "next",
    "one",
    "got",
    "tag",
    "got",
    "id",
    "1",
    "01",
    "101",
    "get",
    "point",
    "go",
    "thing",
    "rest",
    "specific",
    "one",
    "one",
    "two",
    "id",
    "selectors",
    "specificity",
    "200",
    "see",
    "color",
    "orange",
    "applies",
    "paragraph",
    "element",
    "web",
    "page",
    "hopefully",
    "point",
    "making",
    "sense",
    "know",
    "select",
    "things",
    "know",
    "determine",
    "uh",
    "order",
    "precedence",
    "little",
    "gotas",
    "need",
    "walk",
    "one",
    "going",
    "inline",
    "styles",
    "write",
    "paragraph",
    "element",
    "text",
    "come",
    "css",
    "style",
    "course",
    "also",
    "option",
    "give",
    "style",
    "attribute",
    "html",
    "attribute",
    "talked",
    "previous",
    "lesson",
    "pass",
    "css",
    "style",
    "rules",
    "little",
    "quotations",
    "give",
    "color",
    "blue",
    "maybe",
    "give",
    "padding",
    "10",
    "pixels",
    "separate",
    "semicolons",
    "write",
    "many",
    "rules",
    "want",
    "interesting",
    "thing",
    "inline",
    "styles",
    "take",
    "precedence",
    "everything",
    "else",
    "even",
    "come",
    "let",
    "say",
    "give",
    "id",
    "know",
    "paragraph",
    "something",
    "like",
    "let",
    "go",
    "ahead",
    "select",
    "id",
    "let",
    "give",
    "text",
    "color",
    "orange",
    "would",
    "think",
    "css",
    "importance",
    "diagram",
    "going",
    "important",
    "rule",
    "color",
    "going",
    "orange",
    "obviously",
    "blue",
    "inline",
    "style",
    "going",
    "take",
    "utmost",
    "precedence",
    "styles",
    "one",
    "thing",
    "even",
    "makes",
    "little",
    "bit",
    "confusing",
    "important",
    "keyword",
    "came",
    "style",
    "right",
    "put",
    "space",
    "exclamation",
    "mark",
    "typed",
    "important",
    "going",
    "going",
    "override",
    "style",
    "stylesheet",
    "basically",
    "saying",
    "like",
    "rule",
    "right",
    "important",
    "want",
    "look",
    "precedence",
    "rules",
    "defined",
    "within",
    "css",
    "language",
    "even",
    "though",
    "got",
    "inline",
    "styles",
    "still",
    "going",
    "apply",
    "even",
    "came",
    "changed",
    "id",
    "selector",
    "paragraph",
    "selector",
    "deal",
    "still",
    "going",
    "get",
    "orange",
    "color",
    "defined",
    "important",
    "css",
    "property",
    "use",
    "important",
    "keyword",
    "property",
    "want",
    "looking",
    "color",
    "property",
    "mainly",
    "stay",
    "consistent",
    "um",
    "avoid",
    "confusion",
    "actually",
    "dive",
    "different",
    "properties",
    "applied",
    "anything",
    "else",
    "wanted",
    "override",
    "padding",
    "style",
    "say",
    "50px",
    "something",
    "like",
    "put",
    "put",
    "like",
    "going",
    "change",
    "anything",
    "put",
    "important",
    "end",
    "going",
    "see",
    "text",
    "moves",
    "lot",
    "added",
    "padding",
    "whole",
    "deal",
    "important",
    "would",
    "recommend",
    "um",
    "types",
    "selectors",
    "inline",
    "selectors",
    "important",
    "selectors",
    "um",
    "use",
    "minimum",
    "reality",
    "almost",
    "never",
    "want",
    "use",
    "inline",
    "styles",
    "clutters",
    "html",
    "course",
    "used",
    "time",
    "quick",
    "great",
    "way",
    "quickly",
    "put",
    "style",
    "element",
    "um",
    "actually",
    "several",
    "css",
    "frameworks",
    "um",
    "inline",
    "css",
    "even",
    "separate",
    "style",
    "sheets",
    "write",
    "html",
    "document",
    "kind",
    "contentious",
    "topic",
    "um",
    "among",
    "different",
    "camps",
    "general",
    "probably",
    "want",
    "stay",
    "away",
    "inline",
    "styles",
    "um",
    "going",
    "clutter",
    "code",
    "likewise",
    "important",
    "style",
    "think",
    "unanimous",
    "uh",
    "viewpoint",
    "using",
    "important",
    "keyword",
    "unless",
    "absolutely",
    "um",
    "example",
    "guess",
    "experienced",
    "really",
    "good",
    "reason",
    "use",
    "important",
    "keyword",
    "got",
    "multiple",
    "stylesheets",
    "maybe",
    "using",
    "css",
    "framework",
    "ui",
    "kit",
    "library",
    "got",
    "bunch",
    "like",
    "buttons",
    "modals",
    "stuff",
    "like",
    "going",
    "predefined",
    "css",
    "styles",
    "want",
    "override",
    "often",
    "use",
    "important",
    "keyword",
    "otherwise",
    "way",
    "select",
    "enough",
    "specificity",
    "override",
    "existing",
    "styles",
    "use",
    "important",
    "keyword",
    "um",
    "pretty",
    "good",
    "rule",
    "thumb",
    "stick",
    "last",
    "hour",
    "however",
    "long",
    "talking",
    "really",
    "talked",
    "css",
    "properties",
    "yet",
    "using",
    "color",
    "property",
    "uh",
    "among",
    "couple",
    "others",
    "hundreds",
    "possibly",
    "use",
    "position",
    "elements",
    "page",
    "style",
    "remember",
    "css",
    "layout",
    "style",
    "different",
    "properties",
    "allow",
    "us",
    "two",
    "different",
    "things",
    "start",
    "us",
    "let",
    "see",
    "super",
    "basic",
    "example",
    "something",
    "might",
    "uh",
    "pretty",
    "often",
    "let",
    "go",
    "ahead",
    "take",
    "div",
    "put",
    "text",
    "style",
    "box",
    "specific",
    "dimensions",
    "maybe",
    "background",
    "color",
    "border",
    "something",
    "like",
    "approach",
    "css",
    "first",
    "make",
    "div",
    "put",
    "text",
    "text",
    "guess",
    "want",
    "first",
    "get",
    "background",
    "select",
    "div",
    "since",
    "couple",
    "elements",
    "give",
    "background",
    "color",
    "know",
    "call",
    "navy",
    "give",
    "text",
    "color",
    "white",
    "want",
    "give",
    "div",
    "width",
    "say",
    "200",
    "pixels",
    "height",
    "also",
    "200",
    "pixels",
    "got",
    "us",
    "square",
    "text",
    "maybe",
    "want",
    "put",
    "text",
    "middle",
    "square",
    "would",
    "kind",
    "layout",
    "positioning",
    "uh",
    "type",
    "property",
    "one",
    "way",
    "could",
    "pretty",
    "straightforward",
    "going",
    "add",
    "line",
    "height",
    "set",
    "equal",
    "200",
    "pixels",
    "height",
    "square",
    "maybe",
    "want",
    "set",
    "text",
    "alignment",
    "center",
    "going",
    "bring",
    "middle",
    "square",
    "furthermore",
    "put",
    "maybe",
    "box",
    "shadow",
    "something",
    "like",
    "let",
    "uh",
    "write",
    "something",
    "really",
    "quickly",
    "see",
    "happens",
    "get",
    "little",
    "shadow",
    "uh",
    "showing",
    "box",
    "maybe",
    "could",
    "even",
    "know",
    "could",
    "put",
    "border",
    "something",
    "could",
    "say",
    "border",
    "one",
    "pixel",
    "solid",
    "know",
    "something",
    "like",
    "green",
    "going",
    "look",
    "great",
    "see",
    "maybe",
    "put",
    "five",
    "pixels",
    "instead",
    "one",
    "make",
    "visible",
    "see",
    "green",
    "border",
    "super",
    "basic",
    "example",
    "see",
    "use",
    "style",
    "properties",
    "use",
    "positioning",
    "properties",
    "actually",
    "perfectly",
    "centered",
    "anymore",
    "talk",
    "exactly",
    "happening",
    "get",
    "concept",
    "box",
    "model",
    "let",
    "get",
    "rid",
    "ask",
    "question",
    "probably",
    "wondering",
    "know",
    "css",
    "properties",
    "actually",
    "use",
    "went",
    "example",
    "really",
    "quickly",
    "top",
    "head",
    "first",
    "started",
    "would",
    "idea",
    "look",
    "every",
    "single",
    "property",
    "using",
    "furthermore",
    "look",
    "like",
    "wanted",
    "something",
    "type",
    "google",
    "center",
    "paragraph",
    "element",
    "within",
    "div",
    "something",
    "like",
    "really",
    "difficult",
    "without",
    "experience",
    "know",
    "properties",
    "use",
    "really",
    "great",
    "solution",
    "practicing",
    "really",
    "um",
    "know",
    "applying",
    "concepts",
    "learning",
    "crash",
    "course",
    "opinion",
    "best",
    "way",
    "understand",
    "box",
    "model",
    "better",
    "look",
    "interactively",
    "great",
    "tool",
    "use",
    "firefox",
    "dev",
    "tools",
    "talked",
    "prior",
    "lessons",
    "um",
    "coming",
    "back",
    "see",
    "got",
    "html",
    "document",
    "browser",
    "done",
    "selected",
    "content",
    "element",
    "made",
    "single",
    "div",
    "put",
    "text",
    "div",
    "done",
    "applied",
    "five",
    "uh",
    "styles",
    "pretty",
    "directly",
    "related",
    "box",
    "model",
    "see",
    "play",
    "know",
    "actual",
    "web",
    "page",
    "see",
    "go",
    "layout",
    "section",
    "dev",
    "tools",
    "inspector",
    "go",
    "layout",
    "scroll",
    "see",
    "box",
    "model",
    "gives",
    "us",
    "incredibly",
    "interactive",
    "way",
    "see",
    "represent",
    "go",
    "want",
    "see",
    "know",
    "wide",
    "content",
    "tall",
    "come",
    "little",
    "uh",
    "properties",
    "hover",
    "see",
    "left",
    "side",
    "screen",
    "gives",
    "outline",
    "exactly",
    "applying",
    "furthermore",
    "see",
    "got",
    "padding",
    "highlighted",
    "screen",
    "gives",
    "really",
    "nice",
    "uh",
    "outline",
    "padding",
    "sits",
    "furthermore",
    "got",
    "border",
    "outlines",
    "really",
    "nicely",
    "us",
    "even",
    "margin",
    "outside",
    "tools",
    "help",
    "visualize",
    "like",
    "google",
    "chrome",
    "came",
    "back",
    "google",
    "chrome",
    "see",
    "looking",
    "know",
    "let",
    "go",
    "ahead",
    "select",
    "one",
    "elements",
    "come",
    "box",
    "model",
    "kind",
    "see",
    "going",
    "opinion",
    "quite",
    "good",
    "firefox",
    "working",
    "firefox",
    "first",
    "place",
    "tools",
    "aside",
    "actually",
    "box",
    "model",
    "well",
    "box",
    "model",
    "represents",
    "um",
    "pieces",
    "looking",
    "specifically",
    "content",
    "going",
    "know",
    "text",
    "space",
    "defined",
    "width",
    "height",
    "outside",
    "content",
    "sort",
    "padding",
    "like",
    "set",
    "could",
    "zero",
    "padding",
    "case",
    "defined",
    "20",
    "pixels",
    "padding",
    "outside",
    "border",
    "outside",
    "margin",
    "within",
    "box",
    "model",
    "uh",
    "mentioned",
    "tells",
    "us",
    "much",
    "space",
    "html",
    "element",
    "represents",
    "within",
    "web",
    "page",
    "properties",
    "um",
    "play",
    "going",
    "width",
    "height",
    "padding",
    "border",
    "margin",
    "little",
    "bit",
    "different",
    "take",
    "space",
    "actually",
    "define",
    "space",
    "taken",
    "individual",
    "element",
    "kind",
    "adds",
    "like",
    "space",
    "around",
    "element",
    "um",
    "two",
    "elements",
    "squished",
    "together",
    "kind",
    "space",
    "little",
    "bit",
    "components",
    "box",
    "model",
    "let",
    "go",
    "ahead",
    "dive",
    "um",
    "actually",
    "made",
    "code",
    "pen",
    "going",
    "allow",
    "us",
    "interactively",
    "play",
    "around",
    "box",
    "model",
    "screen",
    "got",
    "code",
    "pen",
    "got",
    "javascript",
    "written",
    "drop",
    "uh",
    "select",
    "uh",
    "elements",
    "select",
    "different",
    "css",
    "properties",
    "apply",
    "orange",
    "um",
    "paragraph",
    "tag",
    "created",
    "talking",
    "box",
    "model",
    "sure",
    "get",
    "width",
    "height",
    "padding",
    "border",
    "margin",
    "kind",
    "stuff",
    "really",
    "confusing",
    "box",
    "model",
    "css",
    "general",
    "based",
    "values",
    "passing",
    "certain",
    "properties",
    "rules",
    "game",
    "completely",
    "change",
    "highlight",
    "rules",
    "um",
    "thought",
    "would",
    "helpful",
    "put",
    "together",
    "example",
    "visually",
    "walk",
    "like",
    "switch",
    "certain",
    "css",
    "property",
    "going",
    "html",
    "element",
    "targeting",
    "first",
    "property",
    "want",
    "really",
    "touch",
    "dig",
    "display",
    "property",
    "related",
    "property",
    "box",
    "model",
    "box",
    "model",
    "one",
    "thing",
    "um",
    "highly",
    "related",
    "talking",
    "scroll",
    "um",
    "documentation",
    "gone",
    "mdn",
    "technologies",
    "css",
    "reference",
    "scroll",
    "index",
    "find",
    "display",
    "property",
    "somewhere",
    "let",
    "scroll",
    "see",
    "find",
    "uh",
    "section",
    "go",
    "ahead",
    "click",
    "display",
    "says",
    "property",
    "sets",
    "whether",
    "element",
    "treated",
    "block",
    "inline",
    "element",
    "layout",
    "used",
    "children",
    "flow",
    "layout",
    "grid",
    "flex",
    "lot",
    "packed",
    "single",
    "property",
    "honestly",
    "probably",
    "um",
    "probably",
    "complex",
    "property",
    "deal",
    "uh",
    "writing",
    "css",
    "going",
    "dig",
    "uh",
    "piece",
    "going",
    "read",
    "documentation",
    "going",
    "walk",
    "see",
    "couple",
    "lot",
    "different",
    "things",
    "pass",
    "property",
    "um",
    "main",
    "ones",
    "going",
    "block",
    "inline",
    "inline",
    "block",
    "flex",
    "grid",
    "came",
    "back",
    "box",
    "model",
    "example",
    "came",
    "display",
    "type",
    "right",
    "dropdown",
    "see",
    "different",
    "uh",
    "possible",
    "values",
    "excluding",
    "flex",
    "grid",
    "reason",
    "excluding",
    "flexbox",
    "css",
    "grid",
    "going",
    "totally",
    "separate",
    "videos",
    "um",
    "going",
    "require",
    "lot",
    "explanation",
    "forget",
    "going",
    "focus",
    "ones",
    "right",
    "default",
    "whenever",
    "dealing",
    "html",
    "elements",
    "going",
    "display",
    "property",
    "block",
    "point",
    "mean",
    "anything",
    "us",
    "like",
    "block",
    "mean",
    "inline",
    "mean",
    "since",
    "flexbox",
    "css",
    "grid",
    "kind",
    "equation",
    "focusing",
    "block",
    "inline",
    "inline",
    "block",
    "display",
    "types",
    "based",
    "set",
    "elements",
    "going",
    "interact",
    "page",
    "flow",
    "web",
    "page",
    "lot",
    "differently",
    "kind",
    "changes",
    "rules",
    "game",
    "default",
    "element",
    "going",
    "certain",
    "type",
    "display",
    "elements",
    "going",
    "display",
    "type",
    "block",
    "see",
    "example",
    "default",
    "display",
    "type",
    "p",
    "element",
    "block",
    "look",
    "another",
    "type",
    "element",
    "come",
    "html",
    "got",
    "little",
    "bit",
    "messy",
    "span",
    "element",
    "represented",
    "green",
    "text",
    "actually",
    "going",
    "default",
    "inline",
    "element",
    "question",
    "know",
    "elements",
    "going",
    "default",
    "block",
    "ones",
    "going",
    "default",
    "inline",
    "furthermore",
    "actually",
    "difference",
    "block",
    "inline",
    "element",
    "understand",
    "um",
    "got",
    "example",
    "laid",
    "watch",
    "happens",
    "switch",
    "block",
    "element",
    "inline",
    "element",
    "drop",
    "say",
    "inline",
    "see",
    "orange",
    "um",
    "div",
    "going",
    "jump",
    "line",
    "going",
    "share",
    "space",
    "span",
    "element",
    "behavior",
    "inline",
    "html",
    "element",
    "see",
    "since",
    "div",
    "element",
    "natural",
    "display",
    "type",
    "block",
    "going",
    "occupy",
    "100",
    "container",
    "space",
    "case",
    "container",
    "100",
    "body",
    "html",
    "tag",
    "occupying",
    "space",
    "furthermore",
    "height",
    "give",
    "height",
    "specify",
    "explicitly",
    "going",
    "automatically",
    "take",
    "height",
    "content",
    "within",
    "however",
    "large",
    "text",
    "big",
    "height",
    "element",
    "going",
    "occupy",
    "second",
    "thing",
    "block",
    "elements",
    "elements",
    "occupy",
    "space",
    "share",
    "lines",
    "elements",
    "see",
    "div",
    "orange",
    "orange",
    "background",
    "occupying",
    "space",
    "also",
    "different",
    "line",
    "green",
    "um",
    "span",
    "element",
    "right",
    "span",
    "element",
    "actually",
    "default",
    "value",
    "inline",
    "rather",
    "block",
    "different",
    "rules",
    "since",
    "one",
    "block",
    "element",
    "occupy",
    "space",
    "next",
    "thing",
    "block",
    "element",
    "respects",
    "width",
    "height",
    "properties",
    "make",
    "whole",
    "lot",
    "sense",
    "yet",
    "see",
    "talking",
    "second",
    "going",
    "going",
    "drop",
    "content",
    "width",
    "going",
    "apply",
    "400",
    "pixel",
    "width",
    "orange",
    "element",
    "see",
    "longer",
    "takes",
    "entire",
    "width",
    "container",
    "explicitly",
    "given",
    "width",
    "furthermore",
    "give",
    "height",
    "200",
    "px",
    "pixels",
    "occupying",
    "space",
    "400",
    "200",
    "happens",
    "thing",
    "inline",
    "element",
    "let",
    "go",
    "ahead",
    "see",
    "going",
    "reset",
    "properties",
    "going",
    "back",
    "beginning",
    "going",
    "come",
    "set",
    "set",
    "div",
    "display",
    "type",
    "inline",
    "see",
    "click",
    "comes",
    "onto",
    "previous",
    "line",
    "inline",
    "elements",
    "actually",
    "share",
    "space",
    "break",
    "new",
    "line",
    "default",
    "also",
    "notice",
    "occupy",
    "space",
    "occupy",
    "size",
    "content",
    "within",
    "occupying",
    "text",
    "within",
    "div",
    "set",
    "display",
    "type",
    "inline",
    "last",
    "interesting",
    "thing",
    "unlike",
    "block",
    "element",
    "obeys",
    "um",
    "adheres",
    "width",
    "height",
    "properties",
    "inline",
    "element",
    "going",
    "even",
    "set",
    "content",
    "400",
    "pixels",
    "going",
    "change",
    "also",
    "try",
    "height",
    "set",
    "200",
    "pixels",
    "going",
    "work",
    "words",
    "set",
    "inline",
    "height",
    "css",
    "properties",
    "going",
    "work",
    "see",
    "depending",
    "know",
    "one",
    "proper",
    "properties",
    "value",
    "different",
    "rules",
    "css",
    "get",
    "pretty",
    "confusing",
    "sometimes",
    "spending",
    "much",
    "time",
    "last",
    "one",
    "talked",
    "combination",
    "two",
    "review",
    "block",
    "element",
    "going",
    "take",
    "space",
    "container",
    "going",
    "take",
    "height",
    "content",
    "within",
    "going",
    "break",
    "new",
    "line",
    "respect",
    "width",
    "height",
    "properties",
    "inline",
    "element",
    "going",
    "width",
    "height",
    "content",
    "within",
    "going",
    "break",
    "new",
    "line",
    "um",
    "also",
    "going",
    "respect",
    "width",
    "height",
    "properties",
    "try",
    "set",
    "inline",
    "block",
    "kind",
    "adopts",
    "couple",
    "attributes",
    "main",
    "difference",
    "switch",
    "inline",
    "inline",
    "block",
    "difference",
    "going",
    "respect",
    "width",
    "height",
    "properties",
    "right",
    "guess",
    "set",
    "tried",
    "set",
    "content",
    "content",
    "height",
    "inline",
    "element",
    "right",
    "respecting",
    "dimensions",
    "second",
    "change",
    "inline",
    "block",
    "going",
    "get",
    "width",
    "height",
    "properties",
    "back",
    "like",
    "saw",
    "block",
    "case",
    "still",
    "make",
    "line",
    "although",
    "broken",
    "new",
    "line",
    "happens",
    "case",
    "large",
    "fit",
    "line",
    "inline",
    "block",
    "basically",
    "takes",
    "properties",
    "inline",
    "instead",
    "ignoring",
    "width",
    "height",
    "respects",
    "properties",
    "takes",
    "space",
    "concept",
    "may",
    "seem",
    "super",
    "important",
    "right",
    "promise",
    "go",
    "um",
    "knowing",
    "whether",
    "dealing",
    "block",
    "element",
    "inline",
    "inline",
    "block",
    "going",
    "super",
    "important",
    "road",
    "start",
    "talking",
    "flexbox",
    "css",
    "grid",
    "becomes",
    "even",
    "important",
    "understand",
    "kind",
    "stuff",
    "let",
    "go",
    "ahead",
    "reset",
    "everything",
    "next",
    "thing",
    "need",
    "talk",
    "box",
    "model",
    "variations",
    "point",
    "looked",
    "firefox",
    "dev",
    "tools",
    "visualize",
    "box",
    "model",
    "pretty",
    "well",
    "actually",
    "another",
    "way",
    "know",
    "conceptualizing",
    "box",
    "model",
    "using",
    "like",
    "display",
    "property",
    "css",
    "properties",
    "default",
    "values",
    "um",
    "box",
    "type",
    "going",
    "default",
    "value",
    "content",
    "box",
    "seeing",
    "right",
    "switch",
    "something",
    "called",
    "border",
    "box",
    "basically",
    "going",
    "change",
    "um",
    "properties",
    "width",
    "height",
    "padding",
    "border",
    "margin",
    "going",
    "change",
    "relate",
    "within",
    "box",
    "model",
    "understand",
    "let",
    "go",
    "back",
    "firefox",
    "uh",
    "dev",
    "tools",
    "let",
    "go",
    "ahead",
    "calculate",
    "total",
    "size",
    "space",
    "particular",
    "element",
    "taking",
    "way",
    "would",
    "adding",
    "things",
    "together",
    "default",
    "box",
    "type",
    "content",
    "box",
    "basically",
    "wanted",
    "find",
    "total",
    "height",
    "element",
    "could",
    "course",
    "hover",
    "see",
    "exactly",
    "know",
    "height",
    "wanted",
    "calculate",
    "come",
    "box",
    "model",
    "say",
    "okay",
    "height",
    "content",
    "well",
    "height",
    "content",
    "going",
    "100",
    "pixels",
    "say",
    "100",
    "add",
    "whatever",
    "padding",
    "sides",
    "add",
    "top",
    "padding",
    "bottom",
    "padding",
    "sides",
    "going",
    "20",
    "pixels",
    "go",
    "20",
    "20",
    "40",
    "plus",
    "content",
    "height",
    "100",
    "140",
    "top",
    "add",
    "border",
    "dimensions",
    "going",
    "five",
    "pixels",
    "top",
    "bottom",
    "total",
    "total",
    "height",
    "space",
    "height",
    "occupies",
    "web",
    "page",
    "going",
    "100",
    "20",
    "20",
    "5",
    "5",
    "equals",
    "guess",
    "140",
    "150",
    "total",
    "margin",
    "additional",
    "20",
    "20",
    "40",
    "pixels",
    "actually",
    "going",
    "play",
    "box",
    "model",
    "kind",
    "separate",
    "actually",
    "indicate",
    "total",
    "height",
    "element",
    "let",
    "go",
    "ahead",
    "see",
    "hover",
    "see",
    "hover",
    "entire",
    "element",
    "showing",
    "pretty",
    "small",
    "text",
    "height",
    "150",
    "like",
    "calculated",
    "100",
    "20",
    "25",
    "five",
    "total",
    "height",
    "likewise",
    "width",
    "grab",
    "content",
    "width",
    "400",
    "add",
    "paddings",
    "left",
    "right",
    "40",
    "got",
    "440",
    "add",
    "uh",
    "border",
    "5",
    "five",
    "got",
    "440",
    "10",
    "450",
    "hover",
    "uh",
    "width",
    "going",
    "calculation",
    "seems",
    "awfully",
    "complicated",
    "kind",
    "add",
    "different",
    "components",
    "consider",
    "okay",
    "left",
    "padding",
    "right",
    "padding",
    "left",
    "right",
    "border",
    "know",
    "would",
    "lot",
    "easier",
    "could",
    "define",
    "want",
    "element",
    "400",
    "pixels",
    "wide",
    "200",
    "high",
    "done",
    "rest",
    "padding",
    "border",
    "stuff",
    "within",
    "border",
    "box",
    "uh",
    "value",
    "box",
    "type",
    "property",
    "allows",
    "us",
    "come",
    "styles",
    "element",
    "say",
    "box",
    "type",
    "say",
    "want",
    "border",
    "box",
    "apply",
    "um",
    "going",
    "work",
    "let",
    "see",
    "um",
    "invalid",
    "property",
    "name",
    "oh",
    "must",
    "blanking",
    "actually",
    "using",
    "let",
    "let",
    "see",
    "talking",
    "box",
    "type",
    "totally",
    "blanking",
    "box",
    "type",
    "box",
    "sizing",
    "uh",
    "box",
    "type",
    "named",
    "code",
    "pen",
    "say",
    "box",
    "sizing",
    "equals",
    "border",
    "box",
    "see",
    "changes",
    "little",
    "bit",
    "let",
    "go",
    "ahead",
    "uncheck",
    "watch",
    "content",
    "left",
    "top",
    "left",
    "see",
    "something",
    "going",
    "really",
    "hard",
    "tell",
    "something",
    "one",
    "element",
    "page",
    "done",
    "put",
    "together",
    "another",
    "code",
    "pen",
    "really",
    "helps",
    "us",
    "visualize",
    "difference",
    "border",
    "box",
    "content",
    "box",
    "stick",
    "know",
    "seems",
    "little",
    "bit",
    "boring",
    "would",
    "need",
    "worry",
    "box",
    "sizing",
    "start",
    "making",
    "grids",
    "start",
    "know",
    "putting",
    "elements",
    "within",
    "elements",
    "going",
    "become",
    "really",
    "important",
    "know",
    "know",
    "much",
    "width",
    "need",
    "give",
    "children",
    "element",
    "fit",
    "within",
    "parent",
    "containers",
    "forth",
    "let",
    "go",
    "ahead",
    "dig",
    "example",
    "created",
    "see",
    "exactly",
    "mean",
    "mentioned",
    "flip",
    "box",
    "sizing",
    "uh",
    "content",
    "box",
    "border",
    "box",
    "basically",
    "takes",
    "calculation",
    "space",
    "html",
    "occupying",
    "changes",
    "instead",
    "taking",
    "content",
    "height",
    "plus",
    "padding",
    "plus",
    "border",
    "get",
    "total",
    "height",
    "look",
    "height",
    "property",
    "total",
    "height",
    "lot",
    "easier",
    "kind",
    "reconcile",
    "brains",
    "furthermore",
    "makes",
    "lot",
    "easier",
    "put",
    "elements",
    "within",
    "elements",
    "see",
    "screen",
    "um",
    "looking",
    "couple",
    "divs",
    "got",
    "child",
    "div",
    "parent",
    "div",
    "trying",
    "trying",
    "fit",
    "child",
    "div",
    "within",
    "parent",
    "break",
    "space",
    "see",
    "right",
    "right",
    "side",
    "got",
    "output",
    "see",
    "content",
    "box",
    "got",
    "parent",
    "container",
    "picture",
    "background",
    "css",
    "um",
    "space",
    "occupying",
    "see",
    "child",
    "border",
    "border",
    "know",
    "um",
    "impact",
    "total",
    "size",
    "content",
    "box",
    "see",
    "adding",
    "border",
    "breaking",
    "parent",
    "container",
    "really",
    "going",
    "problem",
    "trying",
    "arrange",
    "elements",
    "page",
    "furthermore",
    "add",
    "padding",
    "um",
    "basically",
    "button",
    "going",
    "click",
    "going",
    "take",
    "child",
    "element",
    "one",
    "border",
    "going",
    "add",
    "padding",
    "click",
    "see",
    "makes",
    "break",
    "parent",
    "container",
    "even",
    "add",
    "padding",
    "border",
    "something",
    "sizing",
    "content",
    "box",
    "going",
    "add",
    "space",
    "element",
    "always",
    "going",
    "additive",
    "come",
    "border",
    "box",
    "type",
    "element",
    "going",
    "going",
    "happen",
    "content",
    "width",
    "height",
    "going",
    "adjusted",
    "based",
    "much",
    "border",
    "padding",
    "see",
    "start",
    "already",
    "fitting",
    "child",
    "element",
    "uh",
    "got",
    "black",
    "border",
    "right",
    "top",
    "parent",
    "container",
    "add",
    "padding",
    "instead",
    "getting",
    "larger",
    "going",
    "make",
    "content",
    "within",
    "little",
    "bit",
    "smaller",
    "let",
    "toggle",
    "padding",
    "see",
    "text",
    "right",
    "going",
    "come",
    "inwards",
    "little",
    "bit",
    "going",
    "see",
    "border",
    "break",
    "parent",
    "container",
    "understand",
    "little",
    "bit",
    "confusing",
    "especially",
    "starting",
    "css",
    "really",
    "wanted",
    "introduce",
    "concept",
    "stumble",
    "road",
    "probably",
    "see",
    "like",
    "said",
    "something",
    "like",
    "css",
    "reset",
    "let",
    "let",
    "go",
    "ahead",
    "grab",
    "code",
    "talking",
    "show",
    "exactly",
    "mean",
    "often",
    "times",
    "see",
    "css",
    "uh",
    "stylesheet",
    "following",
    "thing",
    "going",
    "change",
    "stuff",
    "right",
    "little",
    "bit",
    "point",
    "see",
    "html",
    "element",
    "root",
    "element",
    "going",
    "change",
    "box",
    "sizing",
    "border",
    "box",
    "going",
    "take",
    "root",
    "style",
    "make",
    "know",
    "nice",
    "little",
    "handy",
    "border",
    "box",
    "know",
    "width",
    "width",
    "height",
    "height",
    "math",
    "going",
    "next",
    "couple",
    "rules",
    "um",
    "similar",
    "talked",
    "put",
    "comma",
    "select",
    "multiple",
    "know",
    "classes",
    "ids",
    "tags",
    "whatever",
    "wild",
    "card",
    "character",
    "basically",
    "saying",
    "want",
    "target",
    "every",
    "element",
    "entire",
    "document",
    "saying",
    "want",
    "set",
    "box",
    "sizing",
    "property",
    "inherit",
    "basically",
    "basically",
    "going",
    "look",
    "say",
    "okay",
    "root",
    "element",
    "set",
    "whatever",
    "set",
    "inherit",
    "different",
    "elements",
    "web",
    "page",
    "effect",
    "call",
    "css",
    "reset",
    "going",
    "uh",
    "change",
    "default",
    "box",
    "sizing",
    "um",
    "easy",
    "understand",
    "border",
    "box",
    "know",
    "box",
    "sizing",
    "right",
    "know",
    "covered",
    "lot",
    "come",
    "long",
    "way",
    "crash",
    "course",
    "far",
    "done",
    "yet",
    "want",
    "quick",
    "little",
    "review",
    "things",
    "learned",
    "select",
    "things",
    "um",
    "select",
    "html",
    "elements",
    "learned",
    "takes",
    "precedence",
    "multiple",
    "css",
    "rules",
    "learned",
    "box",
    "model",
    "want",
    "review",
    "box",
    "model",
    "go",
    "things",
    "keep",
    "top",
    "mind",
    "first",
    "box",
    "model",
    "describes",
    "much",
    "space",
    "html",
    "element",
    "occupies",
    "space",
    "heavily",
    "influenced",
    "box",
    "sizing",
    "property",
    "talked",
    "whether",
    "content",
    "box",
    "border",
    "box",
    "content",
    "box",
    "add",
    "content",
    "width",
    "height",
    "padding",
    "border",
    "well",
    "border",
    "box",
    "take",
    "width",
    "height",
    "total",
    "space",
    "html",
    "element",
    "occupies",
    "space",
    "also",
    "space",
    "layout",
    "also",
    "heavily",
    "influenced",
    "display",
    "property",
    "whether",
    "block",
    "element",
    "inline",
    "element",
    "inline",
    "block",
    "element",
    "going",
    "influence",
    "elements",
    "sitting",
    "page",
    "two",
    "properties",
    "box",
    "sizing",
    "display",
    "going",
    "really",
    "play",
    "together",
    "um",
    "deciding",
    "web",
    "page",
    "laid",
    "furthermore",
    "display",
    "property",
    "two",
    "additional",
    "um",
    "values",
    "talked",
    "flexbox",
    "css",
    "grid",
    "going",
    "allow",
    "us",
    "make",
    "grids",
    "going",
    "allow",
    "us",
    "space",
    "elements",
    "really",
    "well",
    "going",
    "super",
    "useful",
    "us",
    "future",
    "finally",
    "important",
    "components",
    "box",
    "model",
    "height",
    "width",
    "padding",
    "border",
    "margin",
    "margin",
    "play",
    "total",
    "space",
    "occupies",
    "control",
    "space",
    "around",
    "finally",
    "css",
    "properties",
    "going",
    "kind",
    "supplemental",
    "core",
    "concepts",
    "whether",
    "styling",
    "text",
    "color",
    "back",
    "ground",
    "image",
    "making",
    "different",
    "font",
    "going",
    "kind",
    "supplementary",
    "core",
    "concepts",
    "would",
    "recommend",
    "come",
    "uh",
    "little",
    "example",
    "put",
    "together",
    "um",
    "description",
    "click",
    "uh",
    "attributes",
    "attributes",
    "css",
    "properties",
    "see",
    "happens",
    "different",
    "combination",
    "change",
    "display",
    "type",
    "inline",
    "try",
    "set",
    "know",
    "different",
    "different",
    "margins",
    "paddings",
    "stuff",
    "like",
    "see",
    "like",
    "okay",
    "margin",
    "really",
    "anything",
    "line",
    "padding",
    "set",
    "block",
    "change",
    "margin",
    "going",
    "something",
    "aside",
    "display",
    "property",
    "box",
    "sizing",
    "couple",
    "things",
    "talked",
    "one",
    "css",
    "property",
    "use",
    "pretty",
    "often",
    "affect",
    "flow",
    "elements",
    "page",
    "going",
    "position",
    "property",
    "position",
    "property",
    "um",
    "think",
    "four",
    "five",
    "different",
    "possibilities",
    "let",
    "go",
    "ahead",
    "write",
    "um",
    "need",
    "make",
    "unordered",
    "list",
    "put",
    "list",
    "items",
    "let",
    "get",
    "notes",
    "value",
    "static",
    "value",
    "absolute",
    "value",
    "relative",
    "fixed",
    "last",
    "one",
    "going",
    "sticky",
    "talking",
    "uh",
    "position",
    "property",
    "saying",
    "came",
    "targeted",
    "unordered",
    "list",
    "gave",
    "position",
    "say",
    "want",
    "fixed",
    "actually",
    "mean",
    "well",
    "position",
    "property",
    "going",
    "really",
    "handy",
    "uh",
    "lay",
    "things",
    "page",
    "like",
    "make",
    "things",
    "like",
    "nav",
    "bars",
    "going",
    "go",
    "ahead",
    "show",
    "show",
    "example",
    "might",
    "make",
    "nav",
    "bar",
    "show",
    "stay",
    "top",
    "page",
    "rather",
    "scrolling",
    "content",
    "exceeds",
    "total",
    "height",
    "viewport",
    "web",
    "page",
    "looking",
    "notes",
    "want",
    "make",
    "um",
    "first",
    "one",
    "static",
    "going",
    "default",
    "value",
    "came",
    "defined",
    "uh",
    "position",
    "unordered",
    "list",
    "static",
    "kind",
    "redundant",
    "already",
    "going",
    "default",
    "note",
    "want",
    "make",
    "uh",
    "sticky",
    "property",
    "uh",
    "value",
    "going",
    "little",
    "bit",
    "newer",
    "unsupported",
    "browsers",
    "really",
    "going",
    "touch",
    "achieve",
    "similar",
    "things",
    "fixed",
    "property",
    "right",
    "possible",
    "values",
    "let",
    "walk",
    "see",
    "actually",
    "html",
    "first",
    "thing",
    "want",
    "create",
    "nav",
    "element",
    "talked",
    "semantic",
    "html",
    "prior",
    "lesson",
    "want",
    "use",
    "intent",
    "element",
    "want",
    "make",
    "nav",
    "bar",
    "use",
    "nav",
    "uh",
    "html",
    "tag",
    "within",
    "nav",
    "make",
    "sort",
    "list",
    "would",
    "kind",
    "list",
    "different",
    "links",
    "something",
    "keep",
    "simple",
    "going",
    "put",
    "sort",
    "heading",
    "put",
    "h2",
    "element",
    "say",
    "navbar",
    "going",
    "see",
    "pop",
    "page",
    "nothing",
    "special",
    "moment",
    "actually",
    "let",
    "go",
    "ahead",
    "let",
    "make",
    "h4",
    "little",
    "bit",
    "smaller",
    "want",
    "css",
    "want",
    "target",
    "nav",
    "element",
    "want",
    "give",
    "background",
    "color",
    "blue",
    "going",
    "talk",
    "background",
    "styling",
    "properties",
    "bear",
    "uh",
    "well",
    "know",
    "want",
    "make",
    "height",
    "equal",
    "call",
    "60",
    "pixels",
    "see",
    "sort",
    "nav",
    "bar",
    "sitting",
    "page",
    "actually",
    "like",
    "blue",
    "let",
    "go",
    "ahead",
    "navy",
    "change",
    "color",
    "text",
    "white",
    "make",
    "look",
    "little",
    "bit",
    "better",
    "see",
    "space",
    "going",
    "around",
    "would",
    "know",
    "ideally",
    "want",
    "top",
    "page",
    "know",
    "white",
    "space",
    "around",
    "happening",
    "two",
    "reasons",
    "default",
    "h4",
    "element",
    "going",
    "sort",
    "margin",
    "around",
    "browser",
    "default",
    "um",
    "set",
    "element",
    "set",
    "already",
    "likewise",
    "code",
    "pen",
    "default",
    "puts",
    "either",
    "margin",
    "padding",
    "um",
    "within",
    "body",
    "element",
    "anything",
    "write",
    "html",
    "going",
    "little",
    "bit",
    "padding",
    "know",
    "white",
    "space",
    "cancel",
    "writing",
    "css",
    "rule",
    "start",
    "h4",
    "say",
    "want",
    "zero",
    "margin",
    "see",
    "remove",
    "margin",
    "want",
    "come",
    "say",
    "body",
    "want",
    "zero",
    "margin",
    "yeah",
    "guess",
    "needed",
    "need",
    "zero",
    "margin",
    "space",
    "around",
    "looking",
    "good",
    "wanted",
    "center",
    "text",
    "within",
    "navbar",
    "use",
    "little",
    "trick",
    "um",
    "use",
    "line",
    "height",
    "property",
    "basically",
    "say",
    "okay",
    "want",
    "text",
    "know",
    "x",
    "amount",
    "pixels",
    "tall",
    "case",
    "know",
    "exactly",
    "tall",
    "navar",
    "60",
    "pixels",
    "need",
    "h4",
    "make",
    "line",
    "height",
    "equal",
    "60",
    "pixels",
    "going",
    "see",
    "go",
    "right",
    "middle",
    "last",
    "thing",
    "uh",
    "left",
    "side",
    "h4",
    "element",
    "let",
    "put",
    "padding",
    "left",
    "say",
    "10",
    "pixels",
    "going",
    "push",
    "little",
    "bit",
    "know",
    "talked",
    "lot",
    "properties",
    "second",
    "see",
    "uh",
    "nav",
    "bar",
    "coming",
    "together",
    "problem",
    "right",
    "scroll",
    "page",
    "navar",
    "going",
    "kind",
    "go",
    "away",
    "want",
    "since",
    "elements",
    "scroll",
    "going",
    "see",
    "anything",
    "let",
    "go",
    "ahead",
    "add",
    "div",
    "bunch",
    "uh",
    "boxes",
    "say",
    "want",
    "div",
    "class",
    "box",
    "let",
    "replicate",
    "several",
    "times",
    "come",
    "style",
    "uh",
    "classes",
    "box",
    "going",
    "going",
    "give",
    "width",
    "200",
    "pixels",
    "height",
    "200",
    "pixels",
    "let",
    "go",
    "ahead",
    "give",
    "background",
    "color",
    "uh",
    "know",
    "green",
    "fine",
    "going",
    "see",
    "big",
    "one",
    "big",
    "blob",
    "kind",
    "smoos",
    "together",
    "um",
    "add",
    "margin",
    "around",
    "going",
    "separated",
    "reason",
    "created",
    "give",
    "us",
    "enough",
    "content",
    "actually",
    "see",
    "scrolling",
    "action",
    "see",
    "scroll",
    "bar",
    "right",
    "got",
    "much",
    "content",
    "visible",
    "screen",
    "scroll",
    "happens",
    "going",
    "see",
    "navar",
    "anymore",
    "probably",
    "used",
    "sites",
    "navar",
    "needs",
    "stay",
    "top",
    "way",
    "using",
    "position",
    "property",
    "come",
    "uh",
    "navar",
    "right",
    "say",
    "want",
    "position",
    "fixed",
    "going",
    "lot",
    "things",
    "expect",
    "going",
    "look",
    "little",
    "bit",
    "intimidating",
    "second",
    "figure",
    "exactly",
    "going",
    "put",
    "fix",
    "actually",
    "takes",
    "element",
    "flow",
    "html",
    "document",
    "previously",
    "talked",
    "block",
    "elements",
    "inline",
    "elements",
    "change",
    "know",
    "kind",
    "breaks",
    "flow",
    "content",
    "likewise",
    "position",
    "fixed",
    "property",
    "going",
    "happen",
    "uh",
    "explicitly",
    "set",
    "width",
    "let",
    "go",
    "ahead",
    "set",
    "width",
    "100",
    "container",
    "span",
    "across",
    "entire",
    "uh",
    "web",
    "page",
    "another",
    "way",
    "could",
    "property",
    "called",
    "100",
    "viewport",
    "wi",
    "vw",
    "actually",
    "thing",
    "came",
    "let",
    "come",
    "dev",
    "tools",
    "firefox",
    "remember",
    "could",
    "say",
    "window",
    "inner",
    "height",
    "get",
    "sort",
    "value",
    "means",
    "height",
    "visible",
    "window",
    "966",
    "pixels",
    "also",
    "get",
    "inner",
    "width",
    "right",
    "773",
    "know",
    "change",
    "right",
    "run",
    "going",
    "different",
    "value",
    "visible",
    "width",
    "uh",
    "viewport",
    "changed",
    "properties",
    "know",
    "get",
    "javascript",
    "dom",
    "also",
    "get",
    "within",
    "css",
    "using",
    "either",
    "100",
    "viewport",
    "wid",
    "100",
    "viewport",
    "height",
    "vh",
    "really",
    "useful",
    "um",
    "thing",
    "know",
    "use",
    "time",
    "especially",
    "making",
    "full",
    "page",
    "layouts",
    "nav",
    "barss",
    "stuff",
    "like",
    "last",
    "thing",
    "position",
    "fixed",
    "element",
    "specify",
    "uh",
    "offset",
    "parent",
    "container",
    "case",
    "parent",
    "container",
    "nav",
    "going",
    "body",
    "element",
    "going",
    "basically",
    "visible",
    "screen",
    "right",
    "come",
    "say",
    "top",
    "want",
    "zero",
    "pixels",
    "going",
    "pull",
    "top",
    "since",
    "100",
    "100",
    "width",
    "really",
    "need",
    "define",
    "one",
    "let",
    "go",
    "ahead",
    "say",
    "want",
    "zero",
    "pixels",
    "left",
    "point",
    "see",
    "scroll",
    "navbar",
    "stays",
    "top",
    "considered",
    "fixed",
    "positioning",
    "last",
    "thing",
    "would",
    "probably",
    "want",
    "address",
    "issue",
    "right",
    "boxes",
    "main",
    "content",
    "spilled",
    "fixed",
    "navar",
    "reason",
    "fixed",
    "navar",
    "take",
    "space",
    "unlike",
    "block",
    "element",
    "even",
    "inline",
    "element",
    "takes",
    "sort",
    "space",
    "html",
    "document",
    "navbar",
    "occupies",
    "zero",
    "space",
    "whatsoever",
    "make",
    "sure",
    "main",
    "content",
    "times",
    "give",
    "margin",
    "top",
    "um",
    "box",
    "div",
    "class",
    "come",
    "css",
    "give",
    "uh",
    "target",
    "class",
    "say",
    "want",
    "give",
    "mar",
    "margin",
    "top",
    "probably",
    "um",
    "little",
    "60",
    "pixels",
    "let",
    "go",
    "ahead",
    "say",
    "80",
    "pixels",
    "bring",
    "boxes",
    "working",
    "fine",
    "fixed",
    "positioning",
    "going",
    "really",
    "useful",
    "trying",
    "make",
    "nav",
    "bar",
    "top",
    "even",
    "side",
    "right",
    "side",
    "even",
    "footer",
    "bottom",
    "page",
    "really",
    "good",
    "use",
    "case",
    "last",
    "couple",
    "position",
    "uh",
    "property",
    "values",
    "use",
    "absolute",
    "relative",
    "positioning",
    "um",
    "talking",
    "static",
    "default",
    "sticky",
    "kind",
    "scope",
    "talking",
    "um",
    "fixed",
    "positioning",
    "looked",
    "going",
    "set",
    "element",
    "going",
    "remove",
    "flow",
    "document",
    "take",
    "zero",
    "space",
    "going",
    "positioned",
    "relative",
    "viewport",
    "always",
    "going",
    "edges",
    "browser",
    "window",
    "saw",
    "said",
    "want",
    "zero",
    "pixels",
    "top",
    "top",
    "viewport",
    "zero",
    "pixels",
    "left",
    "left",
    "viewport",
    "relative",
    "absolute",
    "positioning",
    "somewhat",
    "similar",
    "still",
    "pulling",
    "things",
    "flow",
    "least",
    "absolute",
    "positioning",
    "pulling",
    "flow",
    "document",
    "positioning",
    "relative",
    "elements",
    "let",
    "play",
    "around",
    "relative",
    "positioning",
    "first",
    "let",
    "target",
    "first",
    "box",
    "right",
    "want",
    "want",
    "give",
    "another",
    "class",
    "called",
    "real",
    "position",
    "give",
    "indication",
    "within",
    "want",
    "make",
    "another",
    "div",
    "want",
    "say",
    "absolute",
    "position",
    "going",
    "anything",
    "quite",
    "yet",
    "show",
    "second",
    "let",
    "focus",
    "relatively",
    "positioned",
    "box",
    "first",
    "green",
    "box",
    "targeting",
    "come",
    "css",
    "going",
    "give",
    "relative",
    "position",
    "class",
    "relative",
    "position",
    "going",
    "see",
    "nothing",
    "happened",
    "yet",
    "happens",
    "scroll",
    "first",
    "box",
    "goes",
    "top",
    "navar",
    "first",
    "box",
    "though",
    "rest",
    "go",
    "behind",
    "direct",
    "result",
    "setting",
    "relative",
    "positioning",
    "element",
    "like",
    "said",
    "lot",
    "css",
    "properties",
    "setting",
    "one",
    "value",
    "kind",
    "change",
    "rules",
    "game",
    "different",
    "enables",
    "new",
    "property",
    "called",
    "zindex",
    "basically",
    "says",
    "okay",
    "got",
    "elements",
    "page",
    "z",
    "index",
    "know",
    "rather",
    "one",
    "sits",
    "top",
    "another",
    "put",
    "relative",
    "positioning",
    "absolute",
    "positioning",
    "element",
    "z",
    "index",
    "define",
    "um",
    "needs",
    "top",
    "another",
    "need",
    "come",
    "navar",
    "give",
    "zindex",
    "one",
    "put",
    "top",
    "uh",
    "element",
    "something",
    "really",
    "important",
    "know",
    "relative",
    "positioning",
    "relative",
    "positioning",
    "really",
    "um",
    "saw",
    "really",
    "change",
    "actual",
    "position",
    "box",
    "define",
    "find",
    "um",
    "top",
    "left",
    "right",
    "bottom",
    "properties",
    "um",
    "element",
    "change",
    "position",
    "relative",
    "kind",
    "confusing",
    "topic",
    "basically",
    "way",
    "think",
    "green",
    "box",
    "sitting",
    "right",
    "right",
    "give",
    "top",
    "value",
    "say",
    "20",
    "pixels",
    "going",
    "go",
    "20",
    "pixels",
    "confusingly",
    "enough",
    "um",
    "since",
    "believe",
    "margin",
    "20",
    "pixels",
    "exactly",
    "going",
    "blend",
    "boxes",
    "let",
    "let",
    "go",
    "ahead",
    "make",
    "10",
    "see",
    "separation",
    "still",
    "basically",
    "takes",
    "original",
    "position",
    "add",
    "top",
    "property",
    "go",
    "10",
    "pixels",
    "begin",
    "little",
    "bit",
    "confusing",
    "useful",
    "uh",
    "type",
    "positioning",
    "um",
    "especially",
    "stubborn",
    "elements",
    "html",
    "need",
    "get",
    "move",
    "little",
    "bit",
    "ca",
    "quite",
    "uh",
    "normal",
    "css",
    "properties",
    "finally",
    "set",
    "uh",
    "position",
    "relative",
    "parent",
    "element",
    "set",
    "absolute",
    "positioning",
    "element",
    "within",
    "parent",
    "element",
    "look",
    "div",
    "put",
    "within",
    "relatively",
    "positioned",
    "div",
    "take",
    "class",
    "target",
    "css",
    "target",
    "absolutely",
    "positioned",
    "element",
    "showing",
    "yet",
    "let",
    "go",
    "ahead",
    "give",
    "width",
    "20",
    "pixels",
    "height",
    "20",
    "pixels",
    "give",
    "background",
    "color",
    "say",
    "orange",
    "going",
    "sorts",
    "nasty",
    "colors",
    "screen",
    "see",
    "default",
    "going",
    "sit",
    "top",
    "left",
    "corner",
    "parent",
    "positioned",
    "yet",
    "let",
    "give",
    "absolute",
    "positioning",
    "going",
    "top",
    "uh",
    "bottom",
    "right",
    "left",
    "offsets",
    "enabled",
    "specific",
    "element",
    "instead",
    "offset",
    "based",
    "viewport",
    "fixed",
    "navar",
    "whatever",
    "pass",
    "uh",
    "properties",
    "going",
    "relation",
    "edges",
    "viewport",
    "going",
    "setting",
    "uh",
    "top",
    "right",
    "bottom",
    "left",
    "offsets",
    "based",
    "position",
    "next",
    "highest",
    "element",
    "relative",
    "absolute",
    "positioning",
    "nothing",
    "positionings",
    "going",
    "use",
    "html",
    "element",
    "root",
    "element",
    "case",
    "something",
    "relatively",
    "positioned",
    "direct",
    "parent",
    "green",
    "box",
    "come",
    "absolute",
    "position",
    "say",
    "want",
    "put",
    "20",
    "pixels",
    "top",
    "moving",
    "20",
    "pixels",
    "relative",
    "edges",
    "parent",
    "container",
    "put",
    "uh",
    "know",
    "say",
    "right",
    "want",
    "30",
    "pixels",
    "going",
    "pull",
    "right",
    "offset",
    "30",
    "pixels",
    "right",
    "edge",
    "absolute",
    "positioning",
    "used",
    "relation",
    "relative",
    "positioning",
    "ele",
    "parent",
    "element",
    "rel",
    "ativ",
    "l",
    "positioned",
    "let",
    "go",
    "ahead",
    "remove",
    "uh",
    "position",
    "relative",
    "completely",
    "disappears",
    "probably",
    "asking",
    "go",
    "answer",
    "thinking",
    "probably",
    "behind",
    "navar",
    "let",
    "go",
    "ahead",
    "give",
    "zindex",
    "two",
    "greater",
    "navar",
    "index",
    "one",
    "see",
    "pop",
    "nav",
    "bar",
    "reason",
    "since",
    "relatively",
    "positioned",
    "elements",
    "parent",
    "know",
    "grandparent",
    "positioning",
    "relative",
    "viewport",
    "like",
    "saw",
    "fixed",
    "positioning",
    "say",
    "look",
    "absolutely",
    "positioned",
    "element",
    "change",
    "top",
    "zero",
    "right",
    "also",
    "zero",
    "going",
    "perfectly",
    "top",
    "right",
    "corner",
    "see",
    "screen",
    "see",
    "position",
    "properties",
    "really",
    "help",
    "control",
    "elements",
    "sit",
    "page",
    "um",
    "really",
    "powerful",
    "layout",
    "properties",
    "obviously",
    "going",
    "master",
    "watching",
    "brief",
    "tutorial",
    "demo",
    "hopefully",
    "exposed",
    "possible",
    "stumble",
    "upon",
    "future",
    "code",
    "challenges",
    "know",
    "exactly",
    "going",
    "honest",
    "made",
    "hardest",
    "part",
    "css",
    "first",
    "part",
    "course",
    "remainder",
    "video",
    "crash",
    "course",
    "going",
    "little",
    "bit",
    "fun",
    "little",
    "bit",
    "straightforward",
    "going",
    "really",
    "start",
    "see",
    "magic",
    "css",
    "coming",
    "play",
    "remainder",
    "going",
    "talk",
    "little",
    "bit",
    "css",
    "units",
    "looked",
    "already",
    "uh",
    "pixels",
    "em",
    "rem",
    "units",
    "uh",
    "percentages",
    "maybe",
    "couple",
    "others",
    "actually",
    "probably",
    "also",
    "going",
    "look",
    "color",
    "codes",
    "um",
    "different",
    "color",
    "stylings",
    "using",
    "color",
    "property",
    "change",
    "text",
    "color",
    "throughout",
    "tutorial",
    "going",
    "get",
    "know",
    "define",
    "different",
    "colors",
    "know",
    "color",
    "themes",
    "stuff",
    "like",
    "dig",
    "font",
    "properties",
    "change",
    "font",
    "page",
    "different",
    "font",
    "families",
    "import",
    "fonts",
    "stuff",
    "like",
    "finally",
    "talk",
    "background",
    "properties",
    "make",
    "image",
    "background",
    "web",
    "page",
    "um",
    "end",
    "going",
    "talk",
    "uh",
    "writing",
    "shorthand",
    "css",
    "going",
    "bring",
    "things",
    "together",
    "um",
    "may",
    "catch",
    "write",
    "pretty",
    "interesting",
    "um",
    "cap",
    "going",
    "give",
    "kind",
    "system",
    "think",
    "um",
    "putting",
    "together",
    "html",
    "styling",
    "css",
    "effectively",
    "basically",
    "like",
    "get",
    "layout",
    "first",
    "put",
    "know",
    "styles",
    "know",
    "iterate",
    "process",
    "get",
    "remainder",
    "css",
    "properties",
    "common",
    "ones",
    "use",
    "talk",
    "measurement",
    "units",
    "within",
    "css",
    "see",
    "screen",
    "uh",
    "pixels",
    "pretty",
    "straightforward",
    "common",
    "em",
    "rem",
    "font",
    "units",
    "uh",
    "like",
    "measuring",
    "large",
    "font",
    "screen",
    "percentages",
    "going",
    "really",
    "play",
    "responsive",
    "design",
    "talk",
    "later",
    "video",
    "start",
    "pixels",
    "probably",
    "already",
    "looked",
    "seen",
    "using",
    "um",
    "relatively",
    "intuitive",
    "computer",
    "screen",
    "made",
    "pixels",
    "higher",
    "resolution",
    "computer",
    "screen",
    "pixels",
    "cram",
    "gets",
    "pretty",
    "complex",
    "discussion",
    "actually",
    "start",
    "thinking",
    "much",
    "um",
    "looking",
    "web",
    "page",
    "trying",
    "calculate",
    "many",
    "pixels",
    "exist",
    "web",
    "page",
    "look",
    "way",
    "explicit",
    "set",
    "dimensions",
    "html",
    "elements",
    "pretty",
    "simple",
    "example",
    "saw",
    "made",
    "little",
    "orange",
    "box",
    "top",
    "right",
    "corner",
    "set",
    "equal",
    "width",
    "height",
    "20",
    "pixels",
    "obviously",
    "somewhat",
    "small",
    "something",
    "wondered",
    "first",
    "starting",
    "get",
    "good",
    "grasp",
    "many",
    "pixels",
    "assign",
    "certain",
    "types",
    "elements",
    "kind",
    "like",
    "riding",
    "bike",
    "like",
    "go",
    "write",
    "css",
    "get",
    "feel",
    "kind",
    "average",
    "pixel",
    "units",
    "assigning",
    "different",
    "types",
    "things",
    "example",
    "know",
    "whenever",
    "set",
    "padding",
    "margin",
    "usually",
    "going",
    "range",
    "10",
    "20",
    "pixels",
    "um",
    "set",
    "border",
    "radius",
    "going",
    "range",
    "four",
    "7",
    "pixels",
    "forth",
    "kind",
    "get",
    "feel",
    "large",
    "um",
    "pixel",
    "written",
    "css",
    "next",
    "going",
    "skip",
    "away",
    "font",
    "uh",
    "units",
    "talking",
    "em",
    "rem",
    "going",
    "skip",
    "second",
    "talk",
    "percentages",
    "percentages",
    "kind",
    "preferred",
    "way",
    "lot",
    "cases",
    "define",
    "width",
    "height",
    "certain",
    "elements",
    "page",
    "go",
    "desktop",
    "mobile",
    "device",
    "going",
    "need",
    "relative",
    "dimensions",
    "rather",
    "saying",
    "oh",
    "want",
    "element",
    "500",
    "pixels",
    "good",
    "example",
    "let",
    "take",
    "got",
    "screen",
    "um",
    "go",
    "ahead",
    "restyle",
    "first",
    "box",
    "relatively",
    "positioned",
    "box",
    "um",
    "leave",
    "going",
    "say",
    "want",
    "width",
    "600",
    "pixels",
    "going",
    "going",
    "wider",
    "problem",
    "resize",
    "screen",
    "go",
    "mobile",
    "device",
    "going",
    "get",
    "cut",
    "make",
    "smaller",
    "smaller",
    "going",
    "see",
    "box",
    "goes",
    "screen",
    "completely",
    "problem",
    "know",
    "want",
    "responsive",
    "designs",
    "better",
    "way",
    "say",
    "want",
    "width",
    "know",
    "call",
    "80",
    "container",
    "resize",
    "going",
    "see",
    "always",
    "stays",
    "80",
    "container",
    "within",
    "great",
    "way",
    "write",
    "response",
    "responsive",
    "web",
    "pages",
    "going",
    "talking",
    "lot",
    "responsive",
    "design",
    "separate",
    "video",
    "percentages",
    "matter",
    "first",
    "place",
    "something",
    "percentages",
    "get",
    "little",
    "bit",
    "confusing",
    "relative",
    "container",
    "let",
    "go",
    "ahead",
    "apply",
    "concepts",
    "learned",
    "question",
    "get",
    "little",
    "orange",
    "box",
    "back",
    "green",
    "box",
    "play",
    "around",
    "well",
    "set",
    "position",
    "back",
    "relative",
    "orange",
    "box",
    "going",
    "relative",
    "green",
    "box",
    "uncomment",
    "property",
    "right",
    "going",
    "put",
    "orange",
    "box",
    "top",
    "right",
    "corner",
    "green",
    "box",
    "least",
    "think",
    "going",
    "happen",
    "exactly",
    "happened",
    "going",
    "go",
    "ahead",
    "reposition",
    "instead",
    "top",
    "right",
    "going",
    "put",
    "top",
    "left",
    "put",
    "top",
    "left",
    "going",
    "give",
    "width",
    "terms",
    "percentages",
    "rather",
    "pixels",
    "happens",
    "give",
    "width",
    "100",
    "well",
    "spans",
    "entire",
    "width",
    "parent",
    "element",
    "entire",
    "web",
    "page",
    "exist",
    "within",
    "parent",
    "element",
    "going",
    "occupy",
    "width",
    "parent",
    "element",
    "words",
    "set",
    "um",
    "going",
    "make",
    "math",
    "little",
    "bit",
    "simple",
    "let",
    "go",
    "ahead",
    "set",
    "green",
    "box",
    "equal",
    "say",
    "500",
    "uh",
    "pixels",
    "calculation",
    "orange",
    "element",
    "going",
    "500",
    "pixels",
    "100",
    "equal",
    "500",
    "pixels",
    "change",
    "positioning",
    "call",
    "80",
    "going",
    "80",
    "500",
    "guess",
    "4",
    "400",
    "pixels",
    "yeah",
    "400",
    "pixels",
    "see",
    "relative",
    "container",
    "relative",
    "entire",
    "web",
    "page",
    "define",
    "percentages",
    "talked",
    "pixels",
    "percentages",
    "let",
    "talk",
    "em",
    "rem",
    "units",
    "specific",
    "font",
    "sizes",
    "really",
    "talked",
    "fonts",
    "yet",
    "looked",
    "text",
    "screen",
    "go",
    "ahead",
    "put",
    "text",
    "within",
    "absolutely",
    "positioned",
    "div",
    "got",
    "text",
    "change",
    "size",
    "text",
    "using",
    "font",
    "size",
    "property",
    "talk",
    "little",
    "bit",
    "later",
    "came",
    "absolutely",
    "positioned",
    "element",
    "give",
    "font",
    "size",
    "say",
    "16",
    "pixels",
    "generally",
    "standard",
    "font",
    "size",
    "paragraph",
    "element",
    "wo",
    "see",
    "change",
    "probably",
    "default",
    "already",
    "went",
    "changed",
    "say",
    "18",
    "pixels",
    "see",
    "text",
    "gets",
    "little",
    "bit",
    "larger",
    "talking",
    "em",
    "rem",
    "units",
    "kind",
    "preferred",
    "way",
    "define",
    "text",
    "sizes",
    "within",
    "web",
    "page",
    "reason",
    "going",
    "around",
    "hunting",
    "pecking",
    "know",
    "trying",
    "find",
    "different",
    "css",
    "rules",
    "defined",
    "font",
    "sizes",
    "gets",
    "pretty",
    "difficult",
    "want",
    "define",
    "one",
    "level",
    "top",
    "level",
    "document",
    "everything",
    "else",
    "needs",
    "relative",
    "assignment",
    "generally",
    "see",
    "font",
    "sizes",
    "see",
    "um",
    "html",
    "element",
    "target",
    "root",
    "element",
    "give",
    "font",
    "size",
    "generally",
    "see",
    "set",
    "16",
    "pixels",
    "define",
    "elements",
    "root",
    "element",
    "relation",
    "uh",
    "16",
    "pixels",
    "came",
    "absolute",
    "positioned",
    "element",
    "text",
    "right",
    "said",
    "want",
    "font",
    "size",
    "one",
    "rem",
    "means",
    "going",
    "100",
    "size",
    "text",
    "root",
    "element",
    "rem",
    "case",
    "root",
    "element",
    "html",
    "font",
    "size",
    "16",
    "define",
    "one",
    "rem",
    "means",
    "100",
    "16",
    "pixels",
    "words",
    "16",
    "pixels",
    "changed",
    "say",
    "ram",
    "would",
    "120",
    "16",
    "pixels",
    "think",
    "head",
    "right",
    "um",
    "figure",
    "calculator",
    "basically",
    "makes",
    "larger",
    "default",
    "font",
    "size",
    "likewise",
    "also",
    "use",
    "em",
    "units",
    "basically",
    "means",
    "relative",
    "parent",
    "element",
    "relatively",
    "positioned",
    "element",
    "green",
    "box",
    "right",
    "set",
    "font",
    "size",
    "right",
    "16",
    "go",
    "ahead",
    "say",
    "something",
    "lot",
    "larger",
    "distinguish",
    "relatively",
    "positioned",
    "element",
    "going",
    "font",
    "size",
    "24",
    "pixels",
    "came",
    "said",
    "want",
    "1",
    "em",
    "child",
    "element",
    "going",
    "set",
    "exactly",
    "equal",
    "24",
    "pixels",
    "change",
    "back",
    "rem",
    "units",
    "going",
    "go",
    "back",
    "pixels",
    "relative",
    "html",
    "declaration",
    "top",
    "font",
    "size",
    "16",
    "pixels",
    "see",
    "benefit",
    "using",
    "em",
    "rem",
    "units",
    "define",
    "one",
    "time",
    "everything",
    "else",
    "relative",
    "let",
    "say",
    "web",
    "app",
    "originally",
    "define",
    "14",
    "pixels",
    "start",
    "using",
    "app",
    "users",
    "start",
    "complaining",
    "oh",
    "everything",
    "small",
    "instead",
    "going",
    "changing",
    "every",
    "css",
    "rule",
    "go",
    "root",
    "element",
    "change",
    "everything",
    "else",
    "relative",
    "would",
    "benefit",
    "using",
    "em",
    "rem",
    "units",
    "speaking",
    "fonts",
    "um",
    "let",
    "go",
    "ahead",
    "see",
    "set",
    "custom",
    "fonts",
    "html",
    "going",
    "get",
    "rid",
    "colors",
    "driving",
    "nuts",
    "um",
    "ugly",
    "ca",
    "ca",
    "deal",
    "anymore",
    "let",
    "get",
    "clean",
    "slate",
    "let",
    "go",
    "ahead",
    "put",
    "heading",
    "element",
    "paragraph",
    "text",
    "maybe",
    "one",
    "um",
    "call",
    "original",
    "style",
    "text",
    "original",
    "id",
    "going",
    "style",
    "put",
    "two",
    "new",
    "font",
    "style",
    "keep",
    "one",
    "original",
    "reference",
    "point",
    "dealing",
    "fonts",
    "head",
    "least",
    "four",
    "properties",
    "highly",
    "relevant",
    "know",
    "first",
    "font",
    "property",
    "dealing",
    "font",
    "family",
    "going",
    "define",
    "text",
    "web",
    "page",
    "web",
    "app",
    "going",
    "inherit",
    "especially",
    "define",
    "body",
    "even",
    "html",
    "whole",
    "docu",
    "doent",
    "define",
    "font",
    "family",
    "going",
    "apply",
    "everything",
    "within",
    "document",
    "unless",
    "something",
    "course",
    "overwritten",
    "font",
    "family",
    "know",
    "specific",
    "element",
    "let",
    "go",
    "documentation",
    "searched",
    "font",
    "family",
    "property",
    "uh",
    "could",
    "also",
    "go",
    "technology",
    "css",
    "reference",
    "come",
    "index",
    "somewhere",
    "f",
    "find",
    "font",
    "family",
    "looks",
    "like",
    "might",
    "bottom",
    "though",
    "okay",
    "font",
    "family",
    "get",
    "see",
    "giving",
    "two",
    "values",
    "cases",
    "going",
    "give",
    "two",
    "values",
    "first",
    "one",
    "going",
    "font",
    "family",
    "wanting",
    "specify",
    "bunch",
    "font",
    "families",
    "use",
    "um",
    "let",
    "see",
    "find",
    "default",
    "font",
    "families",
    "probably",
    "resource",
    "um",
    "think",
    "one",
    "clicked",
    "looks",
    "like",
    "defines",
    "lot",
    "default",
    "families",
    "available",
    "browsers",
    "first",
    "one",
    "going",
    "represent",
    "family",
    "second",
    "one",
    "second",
    "argument",
    "call",
    "property",
    "going",
    "fallback",
    "font",
    "couple",
    "valid",
    "fallback",
    "fonts",
    "literally",
    "like",
    "type",
    "font",
    "everyone",
    "knows",
    "like",
    "serif",
    "sans",
    "serif",
    "font",
    "like",
    "monospace",
    "font",
    "like",
    "typewriter",
    "type",
    "thing",
    "um",
    "fallbacks",
    "browser",
    "support",
    "first",
    "one",
    "define",
    "let",
    "go",
    "ahead",
    "looking",
    "example",
    "cases",
    "going",
    "put",
    "quotes",
    "first",
    "one",
    "two",
    "words",
    "let",
    "copy",
    "one",
    "good",
    "example",
    "um",
    "put",
    "see",
    "changes",
    "comment",
    "see",
    "change",
    "uncomment",
    "see",
    "change",
    "font",
    "question",
    "happens",
    "want",
    "something",
    "custom",
    "want",
    "like",
    "really",
    "nice",
    "looking",
    "professional",
    "font",
    "well",
    "couple",
    "ways",
    "css",
    "couple",
    "going",
    "walk",
    "easiest",
    "way",
    "go",
    "google",
    "fonts",
    "let",
    "open",
    "google",
    "fonts",
    "go",
    "page",
    "search",
    "different",
    "categories",
    "fonts",
    "let",
    "say",
    "want",
    "sarah",
    "fonts",
    "go",
    "oh",
    "guess",
    "different",
    "languages",
    "available",
    "uh",
    "different",
    "font",
    "properties",
    "let",
    "scroll",
    "pick",
    "something",
    "um",
    "see",
    "find",
    "one",
    "might",
    "little",
    "bit",
    "popular",
    "believe",
    "sort",
    "trending",
    "popular",
    "maybe",
    "look",
    "robo",
    "robotto",
    "slab",
    "right",
    "good",
    "one",
    "go",
    "different",
    "font",
    "weights",
    "styles",
    "click",
    "select",
    "style",
    "pretty",
    "much",
    "every",
    "case",
    "going",
    "select",
    "regular",
    "um",
    "click",
    "select",
    "style",
    "notice",
    "um",
    "link",
    "going",
    "use",
    "second",
    "um",
    "looks",
    "like",
    "pulling",
    "default",
    "link",
    "second",
    "add",
    "different",
    "weight",
    "let",
    "say",
    "want",
    "boldest",
    "version",
    "font",
    "click",
    "select",
    "style",
    "going",
    "see",
    "little",
    "parameter",
    "defines",
    "want",
    "weight",
    "400",
    "900",
    "additional",
    "weight",
    "add",
    "going",
    "add",
    "little",
    "bit",
    "um",
    "size",
    "import",
    "careful",
    "part",
    "grab",
    "couple",
    "good",
    "case",
    "regular",
    "font",
    "bold",
    "font",
    "take",
    "link",
    "tag",
    "valid",
    "html",
    "tag",
    "talked",
    "earlier",
    "actually",
    "import",
    "stylesheets",
    "uh",
    "html",
    "document",
    "come",
    "back",
    "code",
    "pen",
    "playground",
    "come",
    "settings",
    "um",
    "believe",
    "html",
    "uh",
    "section",
    "stuff",
    "head",
    "paste",
    "b",
    "link",
    "tags",
    "fonts",
    "imported",
    "document",
    "access",
    "css",
    "little",
    "bit",
    "different",
    "would",
    "writing",
    "outside",
    "code",
    "pen",
    "environment",
    "second",
    "going",
    "comment",
    "html",
    "show",
    "exactly",
    "would",
    "um",
    "going",
    "need",
    "html",
    "body",
    "course",
    "head",
    "basic",
    "structure",
    "html",
    "document",
    "course",
    "link",
    "um",
    "something",
    "like",
    "um",
    "rep",
    "representing",
    "stylesheet",
    "um",
    "different",
    "document",
    "would",
    "also",
    "copy",
    "link",
    "tags",
    "uh",
    "imported",
    "google",
    "fonts",
    "would",
    "basically",
    "import",
    "font",
    "custom",
    "html",
    "document",
    "outside",
    "know",
    "nicely",
    "programmed",
    "code",
    "pen",
    "environment",
    "anyways",
    "let",
    "get",
    "rid",
    "need",
    "um",
    "uncomment",
    "uncomment",
    "okay",
    "back",
    "start",
    "replace",
    "two",
    "uh",
    "lines",
    "imported",
    "font",
    "go",
    "back",
    "robotto",
    "roboto",
    "slab",
    "going",
    "see",
    "css",
    "rules",
    "specify",
    "face",
    "family",
    "right",
    "copy",
    "come",
    "back",
    "replace",
    "whole",
    "line",
    "watch",
    "text",
    "change",
    "new",
    "font",
    "would",
    "import",
    "custom",
    "font",
    "pretty",
    "much",
    "always",
    "lot",
    "web",
    "pages",
    "apps",
    "used",
    "google",
    "fonts",
    "free",
    "easy",
    "use",
    "first",
    "important",
    "css",
    "property",
    "dealing",
    "fonts",
    "go",
    "ahead",
    "give",
    "font",
    "size",
    "16",
    "pixels",
    "root",
    "html",
    "element",
    "standard",
    "value",
    "giving",
    "um",
    "entire",
    "web",
    "page",
    "gets",
    "interesting",
    "font",
    "weight",
    "property",
    "font",
    "weight",
    "determines",
    "thickness",
    "font",
    "interesting",
    "thing",
    "one",
    "use",
    "weights",
    "imported",
    "using",
    "something",
    "like",
    "google",
    "fonts",
    "remember",
    "looking",
    "imported",
    "weight",
    "400",
    "900",
    "means",
    "give",
    "um",
    "let",
    "go",
    "ahead",
    "target",
    "specific",
    "element",
    "case",
    "uh",
    "let",
    "let",
    "say",
    "thick",
    "font",
    "target",
    "id",
    "give",
    "font",
    "weight",
    "900",
    "going",
    "see",
    "goes",
    "bold",
    "specifying",
    "900",
    "since",
    "imported",
    "one",
    "weight",
    "change",
    "say",
    "say",
    "know",
    "700",
    "going",
    "change",
    "anything",
    "page",
    "reason",
    "import",
    "change",
    "back",
    "400",
    "going",
    "go",
    "back",
    "normal",
    "import",
    "400",
    "regular",
    "font",
    "size",
    "font",
    "weight",
    "property",
    "related",
    "imports",
    "last",
    "thing",
    "talk",
    "line",
    "height",
    "let",
    "put",
    "paragraph",
    "tag",
    "let",
    "go",
    "ahead",
    "copy",
    "laurum",
    "ipsum",
    "font",
    "basically",
    "generic",
    "text",
    "use",
    "see",
    "page",
    "normal",
    "looking",
    "text",
    "change",
    "line",
    "height",
    "target",
    "paragraph",
    "elements",
    "give",
    "line",
    "height",
    "call",
    "30",
    "pixels",
    "going",
    "see",
    "spaces",
    "little",
    "bit",
    "original",
    "believe",
    "default",
    "line",
    "height",
    "going",
    "font",
    "size",
    "could",
    "wrong",
    "would",
    "check",
    "basically",
    "let",
    "let",
    "see",
    "actually",
    "check",
    "go",
    "one",
    "rem",
    "looks",
    "like",
    "font",
    "size",
    "definitely",
    "got",
    "smooshed",
    "little",
    "bit",
    "um",
    "anyways",
    "line",
    "height",
    "basically",
    "going",
    "give",
    "space",
    "lines",
    "text",
    "multiple",
    "lines",
    "text",
    "getting",
    "end",
    "couple",
    "topics",
    "cover",
    "one",
    "colors",
    "whole",
    "lot",
    "know",
    "colors",
    "um",
    "want",
    "walk",
    "basics",
    "far",
    "talking",
    "basic",
    "know",
    "colors",
    "came",
    "paragraph",
    "element",
    "give",
    "color",
    "say",
    "red",
    "red",
    "pretty",
    "easy",
    "understand",
    "color",
    "red",
    "css",
    "property",
    "wondering",
    "resource",
    "potential",
    "properties",
    "go",
    "mdn",
    "documentation",
    "go",
    "color",
    "property",
    "color",
    "css",
    "property",
    "believe",
    "sort",
    "list",
    "possible",
    "colors",
    "use",
    "let",
    "see",
    "find",
    "looks",
    "like",
    "color",
    "keywords",
    "use",
    "um",
    "looks",
    "like",
    "list",
    "know",
    "exhaustive",
    "uh",
    "possible",
    "ones",
    "sure",
    "looks",
    "like",
    "go",
    "uh",
    "color",
    "value",
    "documentation",
    "looking",
    "far",
    "also",
    "ways",
    "define",
    "colors",
    "define",
    "hex",
    "hexad",
    "decimal",
    "define",
    "rgb",
    "define",
    "rgba",
    "walk",
    "show",
    "exactly",
    "help",
    "us",
    "little",
    "bit",
    "going",
    "use",
    "color",
    "picker",
    "um",
    "type",
    "rgb",
    "hex",
    "vice",
    "versa",
    "usually",
    "comes",
    "google",
    "tools",
    "use",
    "well",
    "uh",
    "let",
    "zoom",
    "really",
    "see",
    "dealing",
    "see",
    "color",
    "picker",
    "drag",
    "look",
    "different",
    "colors",
    "stop",
    "green",
    "see",
    "different",
    "codes",
    "could",
    "type",
    "css",
    "could",
    "say",
    "want",
    "green",
    "want",
    "something",
    "like",
    "light",
    "green",
    "valid",
    "values",
    "wanted",
    "specific",
    "go",
    "color",
    "theme",
    "going",
    "use",
    "something",
    "little",
    "bit",
    "complex",
    "color",
    "codes",
    "allow",
    "us",
    "get",
    "finite",
    "amount",
    "detail",
    "colors",
    "need",
    "understand",
    "color",
    "built",
    "red",
    "green",
    "blue",
    "defined",
    "rgb",
    "value",
    "first",
    "number",
    "going",
    "red",
    "green",
    "blue",
    "numbers",
    "go",
    "0",
    "255",
    "um",
    "believe",
    "one",
    "bite",
    "um",
    "much",
    "space",
    "takes",
    "memory",
    "different",
    "combination",
    "bite",
    "values",
    "going",
    "give",
    "different",
    "color",
    "based",
    "blending",
    "uh",
    "red",
    "green",
    "blue",
    "values",
    "take",
    "three",
    "values",
    "convert",
    "heximal",
    "notation",
    "numbering",
    "system",
    "get",
    "code",
    "right",
    "128",
    "would",
    "represented",
    "80",
    "hexad",
    "decimal",
    "235",
    "would",
    "represented",
    "e",
    "b",
    "heximal",
    "52",
    "uhoh",
    "drag",
    "something",
    "around",
    "52",
    "represented",
    "34",
    "heximal",
    "exact",
    "thing",
    "expressed",
    "different",
    "notation",
    "one",
    "thing",
    "add",
    "rgba",
    "value",
    "let",
    "go",
    "ahead",
    "copy",
    "hex",
    "code",
    "copy",
    "color",
    "text",
    "color",
    "see",
    "changed",
    "little",
    "bit",
    "works",
    "also",
    "come",
    "back",
    "grab",
    "rgb",
    "values",
    "css",
    "need",
    "type",
    "rgb",
    "put",
    "parentheses",
    "separate",
    "values",
    "0",
    "255",
    "commas",
    "one",
    "trick",
    "use",
    "add",
    "end",
    "rgb",
    "define",
    "one",
    "value",
    "within",
    "guess",
    "array",
    "whatever",
    "calling",
    "represents",
    "opacity",
    "going",
    "define",
    "wanted",
    "100",
    "opacity",
    "basically",
    "color",
    "give",
    "one",
    "going",
    "give",
    "us",
    "color",
    "wanted",
    "50",
    "opacity",
    "give",
    "see",
    "kind",
    "grayed",
    "actually",
    "use",
    "um",
    "new",
    "skills",
    "absolutely",
    "positioning",
    "element",
    "um",
    "let",
    "go",
    "ahead",
    "write",
    "div",
    "say",
    "uh",
    "overlay",
    "come",
    "style",
    "say",
    "overlay",
    "going",
    "width",
    "200",
    "pixels",
    "height",
    "200",
    "pixels",
    "going",
    "give",
    "exact",
    "color",
    "right",
    "maybe",
    "p",
    "color",
    "uh",
    "black",
    "default",
    "see",
    "really",
    "well",
    "um",
    "overlay",
    "showing",
    "showing",
    "hold",
    "oh",
    "set",
    "color",
    "need",
    "set",
    "background",
    "color",
    "actually",
    "get",
    "something",
    "show",
    "text",
    "yet",
    "say",
    "position",
    "absolute",
    "give",
    "zero",
    "top",
    "go",
    "got",
    "box",
    "sitting",
    "top",
    "text",
    "see",
    "actually",
    "see",
    "text",
    "given",
    "50",
    "opacity",
    "value",
    "flip",
    "one",
    "going",
    "disappear",
    "100",
    "opacity",
    "covering",
    "text",
    "rgba",
    "um",
    "css",
    "value",
    "able",
    "colors",
    "speaking",
    "colors",
    "um",
    "recommend",
    "going",
    "adobe",
    "color",
    "great",
    "place",
    "kind",
    "explore",
    "different",
    "color",
    "themes",
    "show",
    "like",
    "different",
    "complimentary",
    "colors",
    "certain",
    "codes",
    "even",
    "go",
    "explore",
    "go",
    "trends",
    "look",
    "different",
    "color",
    "themes",
    "people",
    "put",
    "together",
    "um",
    "different",
    "know",
    "niches",
    "graphic",
    "design",
    "illustration",
    "architecture",
    "game",
    "design",
    "go",
    "click",
    "pallets",
    "give",
    "hex",
    "codes",
    "need",
    "set",
    "global",
    "css",
    "values",
    "whole",
    "web",
    "page",
    "going",
    "themed",
    "uniform",
    "way",
    "right",
    "let",
    "get",
    "rid",
    "stuff",
    "ready",
    "uh",
    "think",
    "last",
    "category",
    "css",
    "properties",
    "probably",
    "need",
    "aware",
    "background",
    "properties",
    "far",
    "talked",
    "background",
    "colors",
    "um",
    "seen",
    "boxes",
    "giving",
    "background",
    "colors",
    "see",
    "screen",
    "also",
    "background",
    "images",
    "background",
    "images",
    "couple",
    "properties",
    "like",
    "talked",
    "certain",
    "properties",
    "set",
    "certain",
    "values",
    "kind",
    "change",
    "rules",
    "game",
    "rest",
    "page",
    "deal",
    "background",
    "images",
    "going",
    "walk",
    "couple",
    "use",
    "cases",
    "backgrounds",
    "might",
    "see",
    "know",
    "real",
    "life",
    "actually",
    "start",
    "putting",
    "together",
    "web",
    "pages",
    "first",
    "one",
    "simple",
    "like",
    "said",
    "already",
    "talked",
    "let",
    "go",
    "ahead",
    "make",
    "simple",
    "text",
    "page",
    "something",
    "going",
    "target",
    "body",
    "element",
    "whole",
    "web",
    "page",
    "going",
    "give",
    "body",
    "element",
    "background",
    "color",
    "green",
    "going",
    "see",
    "screen",
    "turns",
    "completely",
    "green",
    "easiest",
    "property",
    "next",
    "thing",
    "rather",
    "making",
    "solid",
    "color",
    "background",
    "put",
    "background",
    "image",
    "web",
    "page",
    "actually",
    "pretty",
    "common",
    "like",
    "homepage",
    "golf",
    "website",
    "see",
    "background",
    "image",
    "um",
    "background",
    "image",
    "actually",
    "pulled",
    "um",
    "link",
    "use",
    "within",
    "code",
    "pen",
    "environment",
    "let",
    "copy",
    "link",
    "ready",
    "going",
    "put",
    "div",
    "going",
    "call",
    "main",
    "content",
    "going",
    "put",
    "text",
    "something",
    "see",
    "grab",
    "main",
    "content",
    "going",
    "say",
    "background",
    "rather",
    "background",
    "color",
    "equal",
    "something",
    "like",
    "blue",
    "going",
    "say",
    "background",
    "image",
    "equal",
    "url",
    "um",
    "guess",
    "copied",
    "wrong",
    "thing",
    "let",
    "grab",
    "link",
    "url",
    "problem",
    "taking",
    "small",
    "amount",
    "space",
    "defined",
    "size",
    "main",
    "content",
    "need",
    "say",
    "width",
    "content",
    "going",
    "100",
    "uh",
    "viewport",
    "width",
    "whole",
    "visible",
    "screen",
    "100",
    "width",
    "see",
    "still",
    "gaps",
    "code",
    "pen",
    "environment",
    "automatically",
    "adds",
    "margin",
    "um",
    "around",
    "body",
    "need",
    "reset",
    "go",
    "body",
    "give",
    "margin",
    "zero",
    "bring",
    "line",
    "p",
    "element",
    "sort",
    "margin",
    "um",
    "adding",
    "top",
    "margin",
    "make",
    "p",
    "margin",
    "equal",
    "zero",
    "well",
    "top",
    "screen",
    "come",
    "give",
    "height",
    "100",
    "view",
    "viewport",
    "height",
    "going",
    "see",
    "image",
    "across",
    "whole",
    "page",
    "obviously",
    "image",
    "showing",
    "like",
    "knows",
    "image",
    "need",
    "position",
    "little",
    "bit",
    "differently",
    "way",
    "use",
    "property",
    "called",
    "background",
    "size",
    "go",
    "ahead",
    "set",
    "equal",
    "cover",
    "going",
    "cover",
    "whole",
    "um",
    "container",
    "background",
    "want",
    "make",
    "sure",
    "specify",
    "background",
    "repeat",
    "repeat",
    "case",
    "screen",
    "size",
    "um",
    "know",
    "big",
    "repeat",
    "finally",
    "think",
    "need",
    "add",
    "uh",
    "background",
    "position",
    "going",
    "take",
    "two",
    "values",
    "going",
    "say",
    "think",
    "say",
    "like",
    "bottom",
    "right",
    "something",
    "like",
    "let",
    "go",
    "ahead",
    "look",
    "go",
    "documentation",
    "type",
    "background",
    "position",
    "says",
    "background",
    "position",
    "sets",
    "initial",
    "position",
    "position",
    "background",
    "image",
    "relative",
    "position",
    "layer",
    "okay",
    "see",
    "multiple",
    "different",
    "values",
    "give",
    "give",
    "values",
    "relative",
    "different",
    "parts",
    "screen",
    "say",
    "position",
    "top",
    "left",
    "center",
    "um",
    "kind",
    "thing",
    "position",
    "right",
    "um",
    "bottom",
    "right",
    "works",
    "position",
    "right",
    "golfer",
    "right",
    "side",
    "need",
    "pull",
    "see",
    "uh",
    "background",
    "basic",
    "background",
    "image",
    "put",
    "text",
    "screen",
    "um",
    "went",
    "said",
    "body",
    "want",
    "color",
    "text",
    "white",
    "see",
    "instead",
    "paragraph",
    "text",
    "maybe",
    "like",
    "h1",
    "welcome",
    "site",
    "something",
    "like",
    "course",
    "need",
    "remove",
    "margin",
    "messing",
    "um",
    "come",
    "give",
    "margin",
    "top",
    "50",
    "pixels",
    "actually",
    "want",
    "want",
    "padding",
    "top",
    "bring",
    "whole",
    "image",
    "maybe",
    "say",
    "body",
    "want",
    "text",
    "alignment",
    "center",
    "centered",
    "screen",
    "welcome",
    "message",
    "says",
    "welcome",
    "site",
    "got",
    "nice",
    "background",
    "image",
    "obviously",
    "lot",
    "um",
    "even",
    "scratch",
    "surface",
    "different",
    "things",
    "think",
    "putting",
    "together",
    "background",
    "image",
    "trying",
    "actually",
    "get",
    "elements",
    "like",
    "uh",
    "piece",
    "text",
    "top",
    "gets",
    "little",
    "bit",
    "complicated",
    "hopefully",
    "nice",
    "overview",
    "background",
    "properties",
    "see",
    "possible",
    "right",
    "last",
    "thing",
    "going",
    "say",
    "css",
    "properties",
    "short",
    "shorthand",
    "way",
    "write",
    "cases",
    "point",
    "seen",
    "writing",
    "properties",
    "know",
    "really",
    "explaining",
    "okay",
    "giving",
    "margin",
    "zero",
    "right",
    "represent",
    "know",
    "zero",
    "margin",
    "going",
    "margin",
    "left",
    "right",
    "top",
    "bottom",
    "four",
    "answer",
    "going",
    "four",
    "margin",
    "property",
    "shorthand",
    "css",
    "property",
    "um",
    "let",
    "let",
    "go",
    "ahead",
    "get",
    "us",
    "better",
    "example",
    "good",
    "example",
    "um",
    "let",
    "make",
    "div",
    "target",
    "div",
    "give",
    "width",
    "200",
    "pixels",
    "height",
    "200",
    "pixels",
    "background",
    "color",
    "green",
    "something",
    "screen",
    "um",
    "actually",
    "let",
    "let",
    "make",
    "couple",
    "see",
    "two",
    "see",
    "combined",
    "together",
    "margin",
    "put",
    "margin",
    "say",
    "margin",
    "20",
    "pixels",
    "done",
    "could",
    "say",
    "margin",
    "top",
    "going",
    "20",
    "pixels",
    "space",
    "left",
    "side",
    "screen",
    "margin",
    "property",
    "defined",
    "shorthand",
    "property",
    "give",
    "one",
    "value",
    "makes",
    "margin",
    "sides",
    "equal",
    "come",
    "give",
    "four",
    "different",
    "values",
    "let",
    "make",
    "sure",
    "got",
    "right",
    "first",
    "value",
    "top",
    "margin",
    "looks",
    "like",
    "right",
    "margin",
    "bottom",
    "margin",
    "finally",
    "left",
    "margin",
    "define",
    "different",
    "values",
    "know",
    "top",
    "right",
    "bottom",
    "left",
    "instead",
    "writing",
    "like",
    "could",
    "say",
    "um",
    "line",
    "right",
    "comment",
    "going",
    "equivalent",
    "say",
    "margin",
    "top",
    "20",
    "margin",
    "right",
    "5",
    "pixels",
    "margin",
    "bottom",
    "10",
    "pixels",
    "margin",
    "left",
    "20",
    "pixels",
    "four",
    "properties",
    "combined",
    "together",
    "exact",
    "thing",
    "one",
    "shorthand",
    "property",
    "see",
    "commonly",
    "css",
    "um",
    "another",
    "great",
    "example",
    "border",
    "could",
    "say",
    "border",
    "one",
    "pixel",
    "solid",
    "black",
    "see",
    "border",
    "pop",
    "um",
    "well",
    "let",
    "make",
    "five",
    "pixels",
    "see",
    "better",
    "shorthand",
    "property",
    "could",
    "done",
    "comment",
    "say",
    "uh",
    "border",
    "size",
    "5",
    "pixels",
    "border",
    "color",
    "black",
    "border",
    "believe",
    "style",
    "solid",
    "looks",
    "like",
    "got",
    "something",
    "wrong",
    "cuz",
    "size",
    "messed",
    "let",
    "let",
    "look",
    "documentation",
    "type",
    "border",
    "says",
    "sets",
    "values",
    "border",
    "width",
    "border",
    "style",
    "border",
    "color",
    "missed",
    "border",
    "size",
    "would",
    "border",
    "width",
    "see",
    "exact",
    "result",
    "saw",
    "um",
    "let",
    "go",
    "ahead",
    "comment",
    "prove",
    "comment",
    "three",
    "properties",
    "comment",
    "one",
    "back",
    "shorthand",
    "property",
    "exact",
    "effect",
    "shorthand",
    "properties",
    "really",
    "quick",
    "easy",
    "way",
    "write",
    "css",
    "kind",
    "get",
    "used",
    "wanted",
    "let",
    "know",
    "going",
    "know",
    "kind",
    "confusing",
    "see",
    "different",
    "properties",
    "written",
    "nobody",
    "explains",
    "oh",
    "define",
    "margin",
    "right",
    "using",
    "like",
    "three",
    "different",
    "ways",
    "congratulations",
    "made",
    "far",
    "know",
    "probably",
    "couple",
    "hours",
    "point",
    "talking",
    "css",
    "properties",
    "concepts",
    "box",
    "models",
    "kind",
    "stuff",
    "um",
    "hopefully",
    "good",
    "introduction",
    "point",
    "going",
    "kind",
    "prep",
    "html",
    "css",
    "challenges",
    "uh",
    "looked",
    "beginning",
    "video",
    "walking",
    "video",
    "separate",
    "videos",
    "one",
    "get",
    "want",
    "introduce",
    "method",
    "go",
    "writing",
    "html",
    "css",
    "offered",
    "first",
    "starting",
    "find",
    "think",
    "would",
    "really",
    "helpful",
    "took",
    "figure",
    "uh",
    "really",
    "get",
    "good",
    "routine",
    "systematic",
    "way",
    "write",
    "css",
    "html",
    "first",
    "step",
    "figure",
    "want",
    "want",
    "put",
    "page",
    "often",
    "times",
    "comes",
    "form",
    "design",
    "talked",
    "going",
    "go",
    "wireframing",
    "graphic",
    "design",
    "course",
    "going",
    "use",
    "leveraging",
    "existing",
    "designs",
    "already",
    "built",
    "huge",
    "huge",
    "concept",
    "never",
    "want",
    "go",
    "idea",
    "want",
    "design",
    "visual",
    "elements",
    "page",
    "try",
    "write",
    "code",
    "design",
    "time",
    "really",
    "confusing",
    "done",
    "many",
    "times",
    "would",
    "recommend",
    "design",
    "least",
    "sort",
    "wireframe",
    "gives",
    "sense",
    "want",
    "put",
    "elements",
    "think",
    "step",
    "two",
    "want",
    "arrange",
    "page",
    "html",
    "highly",
    "intuitive",
    "step",
    "going",
    "get",
    "lot",
    "better",
    "experience",
    "much",
    "easier",
    "written",
    "couple",
    "apps",
    "understand",
    "oh",
    "need",
    "put",
    "know",
    "div",
    "container",
    "need",
    "three",
    "div",
    "containers",
    "within",
    "main",
    "div",
    "container",
    "within",
    "contain",
    "containers",
    "probably",
    "need",
    "text",
    "maybe",
    "another",
    "container",
    "get",
    "lot",
    "better",
    "realizing",
    "know",
    "use",
    "divs",
    "different",
    "semantic",
    "html",
    "elements",
    "page",
    "um",
    "go",
    "along",
    "third",
    "step",
    "use",
    "css",
    "achieve",
    "outliner",
    "layout",
    "stuff",
    "talked",
    "crash",
    "course",
    "come",
    "play",
    "know",
    "properties",
    "know",
    "work",
    "know",
    "disrupt",
    "flow",
    "elements",
    "page",
    "going",
    "able",
    "well",
    "like",
    "step",
    "number",
    "two",
    "get",
    "lot",
    "better",
    "practice",
    "one",
    "finally",
    "step",
    "four",
    "really",
    "think",
    "probably",
    "easier",
    "uh",
    "step",
    "process",
    "want",
    "style",
    "elements",
    "got",
    "laid",
    "page",
    "styling",
    "rather",
    "trivial",
    "putting",
    "different",
    "colors",
    "padding",
    "maybe",
    "margin",
    "kind",
    "stuff",
    "maybe",
    "text",
    "decoration",
    "know",
    "font",
    "sizes",
    "kind",
    "stuff",
    "pretty",
    "trivial",
    "compared",
    "getting",
    "layout",
    "correct",
    "first",
    "place",
    "go",
    "process",
    "going",
    "give",
    "short",
    "example",
    "end",
    "video",
    "make",
    "sure",
    "keep",
    "mind",
    "go",
    "challenge",
    "videos",
    "sure",
    "kind",
    "adhere",
    "process",
    "building",
    "frontend",
    "menor",
    "um",
    "code",
    "challenges",
    "going",
    "build",
    "method",
    "um",
    "think",
    "design",
    "let",
    "go",
    "ahead",
    "change",
    "view",
    "uh",
    "clear",
    "going",
    "go",
    "full",
    "page",
    "view",
    "see",
    "design",
    "trying",
    "make",
    "nothing",
    "fancy",
    "looking",
    "visual",
    "design",
    "lay",
    "html",
    "decide",
    "know",
    "looking",
    "want",
    "containers",
    "built",
    "know",
    "looks",
    "like",
    "next",
    "accomplished",
    "html",
    "let",
    "go",
    "back",
    "playground",
    "start",
    "writing",
    "going",
    "actually",
    "put",
    "side",
    "side",
    "see",
    "little",
    "bit",
    "better",
    "look",
    "design",
    "first",
    "thing",
    "see",
    "two",
    "div",
    "elements",
    "thinking",
    "definitely",
    "going",
    "two",
    "divs",
    "usually",
    "put",
    "something",
    "together",
    "html",
    "container",
    "div",
    "kind",
    "like",
    "overarching",
    "parent",
    "elements",
    "start",
    "us",
    "template",
    "say",
    "div",
    "container",
    "press",
    "tab",
    "make",
    "div",
    "class",
    "container",
    "want",
    "make",
    "div",
    "class",
    "box",
    "one",
    "want",
    "make",
    "another",
    "div",
    "class",
    "box",
    "two",
    "seen",
    "remember",
    "might",
    "able",
    "kind",
    "figure",
    "basic",
    "structure",
    "think",
    "want",
    "um",
    "lay",
    "course",
    "two",
    "pieces",
    "text",
    "divs",
    "going",
    "put",
    "sort",
    "h2",
    "call",
    "box",
    "one",
    "say",
    "want",
    "text",
    "copy",
    "box",
    "two",
    "see",
    "screen",
    "left",
    "looks",
    "nothing",
    "like",
    "one",
    "right",
    "reason",
    "knew",
    "put",
    "uh",
    "html",
    "elements",
    "fashion",
    "experien",
    "know",
    "overarching",
    "container",
    "div",
    "going",
    "represent",
    "box",
    "content",
    "within",
    "divs",
    "know",
    "center",
    "style",
    "little",
    "bit",
    "later",
    "let",
    "go",
    "back",
    "process",
    "um",
    "already",
    "asked",
    "want",
    "arrange",
    "design",
    "looking",
    "right",
    "said",
    "arrangement",
    "look",
    "form",
    "html",
    "already",
    "wrote",
    "look",
    "anything",
    "like",
    "yet",
    "say",
    "use",
    "css",
    "imagine",
    "layout",
    "see",
    "right",
    "take",
    "css",
    "get",
    "boxes",
    "um",
    "need",
    "label",
    "one",
    "correctly",
    "need",
    "get",
    "two",
    "boxes",
    "put",
    "next",
    "comfortable",
    "flex",
    "box",
    "know",
    "learned",
    "going",
    "separate",
    "video",
    "going",
    "go",
    "ahead",
    "use",
    "give",
    "example",
    "use",
    "basically",
    "take",
    "main",
    "container",
    "display",
    "flex",
    "item",
    "going",
    "going",
    "put",
    "boxes",
    "right",
    "next",
    "boxes",
    "going",
    "give",
    "width",
    "going",
    "going",
    "going",
    "give",
    "flex",
    "basis",
    "50",
    "give",
    "also",
    "box",
    "number",
    "two",
    "flex",
    "going",
    "50",
    "basically",
    "going",
    "make",
    "equal",
    "need",
    "give",
    "border",
    "see",
    "going",
    "think",
    "two",
    "pixels",
    "border",
    "looking",
    "got",
    "border",
    "box",
    "number",
    "one",
    "copy",
    "box",
    "number",
    "two",
    "want",
    "make",
    "one",
    "blue",
    "okay",
    "next",
    "thing",
    "want",
    "probably",
    "give",
    "margin",
    "around",
    "currently",
    "right",
    "next",
    "give",
    "margin",
    "say",
    "20",
    "pixels",
    "give",
    "margin",
    "20",
    "pixels",
    "well",
    "looks",
    "little",
    "bit",
    "big",
    "let",
    "reduce",
    "10",
    "okay",
    "looking",
    "little",
    "bit",
    "better",
    "box",
    "one",
    "box",
    "two",
    "probably",
    "also",
    "need",
    "text",
    "align",
    "center",
    "text",
    "centered",
    "going",
    "refactor",
    "second",
    "centered",
    "point",
    "pretty",
    "much",
    "spot",
    "layout",
    "need",
    "go",
    "last",
    "step",
    "element",
    "styled",
    "already",
    "border",
    "kind",
    "part",
    "process",
    "um",
    "thing",
    "need",
    "really",
    "give",
    "color",
    "blue",
    "text",
    "right",
    "give",
    "color",
    "green",
    "text",
    "left",
    "go",
    "um",
    "pretty",
    "similar",
    "layout",
    "think",
    "partially",
    "look",
    "exactly",
    "cuz",
    "smaller",
    "maybe",
    "gave",
    "different",
    "dimensions",
    "happy",
    "accomplish",
    "kind",
    "wanted",
    "um",
    "thing",
    "would",
    "refactor",
    "css",
    "currently",
    "see",
    "set",
    "flex",
    "equal",
    "50",
    "also",
    "set",
    "text",
    "line",
    "margin",
    "um",
    "combine",
    "one",
    "selector",
    "put",
    "comma",
    "select",
    "boxes",
    "get",
    "common",
    "properties",
    "apply",
    "grab",
    "margin",
    "flex",
    "basis",
    "go",
    "ahead",
    "delete",
    "properties",
    "selectors",
    "look",
    "would",
    "go",
    "process",
    "solve",
    "html",
    "css",
    "challenge",
    "let",
    "jump",
    "going",
    "building",
    "going",
    "nice",
    "way",
    "practice",
    "uh",
    "lot",
    "basic",
    "css",
    "html",
    "skills",
    "learned",
    "um",
    "nothing",
    "crazy",
    "going",
    "um",
    "give",
    "us",
    "good",
    "opportunity",
    "looks",
    "like",
    "got",
    "different",
    "font",
    "styles",
    "um",
    "font",
    "weights",
    "little",
    "bit",
    "color",
    "even",
    "button",
    "style",
    "maybe",
    "add",
    "pseudo",
    "class",
    "uh",
    "hover",
    "effect",
    "great",
    "comprehensive",
    "introduction",
    "writing",
    "html",
    "css",
    "code",
    "challenge",
    "comes",
    "frontend",
    "menor",
    "website",
    "great",
    "resource",
    "scroll",
    "see",
    "bunch",
    "professional",
    "uh",
    "web",
    "designs",
    "different",
    "things",
    "challenge",
    "use",
    "uh",
    "different",
    "skills",
    "html",
    "css",
    "javascript",
    "one",
    "picked",
    "rather",
    "simple",
    "kind",
    "easier",
    "side",
    "um",
    "going",
    "walk",
    "couple",
    "others",
    "see",
    "grid",
    "crowdfunding",
    "product",
    "page",
    "two",
    "coming",
    "future",
    "video",
    "challenges",
    "video",
    "purposely",
    "looked",
    "um",
    "yet",
    "figured",
    "going",
    "completely",
    "raw",
    "uncut",
    "really",
    "want",
    "show",
    "thought",
    "process",
    "talked",
    "system",
    "writing",
    "html",
    "css",
    "actual",
    "css",
    "crash",
    "course",
    "really",
    "want",
    "apply",
    "walk",
    "thought",
    "process",
    "um",
    "take",
    "design",
    "one",
    "think",
    "lay",
    "style",
    "resources",
    "using",
    "best",
    "writing",
    "html",
    "css",
    "world",
    "far",
    "plenty",
    "people",
    "could",
    "come",
    "critique",
    "uh",
    "many",
    "many",
    "ways",
    "goal",
    "show",
    "realistic",
    "look",
    "go",
    "building",
    "something",
    "like",
    "consistent",
    "uh",
    "prior",
    "videos",
    "going",
    "using",
    "code",
    "pen",
    "environment",
    "start",
    "blank",
    "code",
    "pen",
    "document",
    "follow",
    "along",
    "go",
    "challenge",
    "think",
    "first",
    "step",
    "going",
    "going",
    "frontend",
    "menor",
    "website",
    "um",
    "need",
    "page",
    "anymore",
    "go",
    "ahead",
    "click",
    "visit",
    "challenge",
    "hub",
    "single",
    "price",
    "grid",
    "component",
    "going",
    "leave",
    "link",
    "description",
    "go",
    "searching",
    "find",
    "uh",
    "starter",
    "files",
    "design",
    "file",
    "need",
    "side",
    "know",
    "using",
    "figma",
    "sketch",
    "even",
    "photoshop",
    "something",
    "like",
    "mock",
    "design",
    "might",
    "useful",
    "see",
    "components",
    "layers",
    "going",
    "like",
    "said",
    "crash",
    "course",
    "graphic",
    "design",
    "wireframing",
    "solely",
    "trying",
    "take",
    "design",
    "turn",
    "code",
    "scrolling",
    "see",
    "newbie",
    "uh",
    "difficulty",
    "level",
    "relatively",
    "straightforward",
    "forward",
    "solve",
    "um",
    "almost",
    "people",
    "tried",
    "finished",
    "fully",
    "intend",
    "uh",
    "bottom",
    "category",
    "brief",
    "given",
    "pretty",
    "simple",
    "says",
    "challenge",
    "build",
    "pricing",
    "component",
    "getting",
    "looking",
    "like",
    "design",
    "okay",
    "use",
    "tools",
    "like",
    "um",
    "going",
    "use",
    "vanilla",
    "html",
    "css",
    "bringing",
    "anything",
    "additional",
    "except",
    "maybe",
    "google",
    "font",
    "something",
    "like",
    "um",
    "says",
    "users",
    "able",
    "want",
    "call",
    "right",
    "called",
    "user",
    "story",
    "touched",
    "previously",
    "within",
    "uh",
    "crash",
    "course",
    "built",
    "html",
    "challenge",
    "user",
    "story",
    "something",
    "write",
    "requirements",
    "gathering",
    "phase",
    "building",
    "web",
    "page",
    "web",
    "app",
    "basically",
    "saying",
    "okay",
    "let",
    "come",
    "list",
    "things",
    "user",
    "able",
    "implemented",
    "correctly",
    "first",
    "requirement",
    "able",
    "view",
    "optimal",
    "layout",
    "component",
    "depending",
    "device",
    "screen",
    "size",
    "yet",
    "talked",
    "responsive",
    "design",
    "believe",
    "going",
    "next",
    "video",
    "series",
    "um",
    "may",
    "leave",
    "part",
    "quite",
    "sure",
    "yet",
    "see",
    "long",
    "takes",
    "build",
    "first",
    "part",
    "basically",
    "saying",
    "resize",
    "screen",
    "look",
    "desktop",
    "mobile",
    "device",
    "know",
    "look",
    "good",
    "user",
    "second",
    "one",
    "see",
    "hover",
    "state",
    "desktop",
    "signup",
    "call",
    "action",
    "words",
    "talking",
    "uh",
    "button",
    "hover",
    "see",
    "sort",
    "interactive",
    "thing",
    "happening",
    "whether",
    "button",
    "gets",
    "larger",
    "changes",
    "colors",
    "opacity",
    "something",
    "like",
    "get",
    "little",
    "bit",
    "creative",
    "says",
    "download",
    "starter",
    "code",
    "go",
    "file",
    "give",
    "details",
    "style",
    "guide",
    "give",
    "colors",
    "fonts",
    "need",
    "use",
    "going",
    "go",
    "ahead",
    "open",
    "see",
    "folders",
    "files",
    "open",
    "read",
    "written",
    "markdown",
    "um",
    "kind",
    "hard",
    "read",
    "going",
    "open",
    "files",
    "tool",
    "called",
    "visual",
    "studio",
    "code",
    "code",
    "editor",
    "eventually",
    "using",
    "within",
    "series",
    "like",
    "said",
    "going",
    "using",
    "code",
    "pen",
    "environment",
    "lot",
    "um",
    "interactive",
    "see",
    "changes",
    "happening",
    "real",
    "time",
    "let",
    "get",
    "opened",
    "look",
    "files",
    "got",
    "project",
    "files",
    "open",
    "visual",
    "studio",
    "code",
    "get",
    "used",
    "go",
    "throughout",
    "course",
    "um",
    "basically",
    "using",
    "see",
    "files",
    "open",
    "read",
    "see",
    "written",
    "markdown",
    "know",
    "markdown",
    "go",
    "google",
    "real",
    "quick",
    "understand",
    "basically",
    "takes",
    "um",
    "little",
    "two",
    "hashtags",
    "example",
    "would",
    "become",
    "h2",
    "element",
    "within",
    "html",
    "got",
    "open",
    "preview",
    "little",
    "bit",
    "easier",
    "read",
    "know",
    "stuff",
    "going",
    "um",
    "stuff",
    "new",
    "one",
    "thing",
    "talk",
    "uh",
    "deployment",
    "section",
    "recommend",
    "use",
    "git",
    "version",
    "control",
    "um",
    "host",
    "push",
    "reposit",
    "itory",
    "deploy",
    "um",
    "forell",
    "going",
    "put",
    "github",
    "pages",
    "going",
    "actually",
    "using",
    "git",
    "utility",
    "covered",
    "series",
    "yet",
    "um",
    "want",
    "know",
    "give",
    "way",
    "see",
    "live",
    "internet",
    "github",
    "pages",
    "really",
    "simple",
    "way",
    "show",
    "exactly",
    "works",
    "um",
    "focus",
    "tutorial",
    "style",
    "guide",
    "really",
    "need",
    "go",
    "uh",
    "much",
    "right",
    "referring",
    "back",
    "figure",
    "okay",
    "font",
    "going",
    "use",
    "large",
    "card",
    "going",
    "um",
    "colors",
    "putting",
    "good",
    "reference",
    "let",
    "close",
    "think",
    "everything",
    "else",
    "looks",
    "like",
    "design",
    "uh",
    "preview",
    "images",
    "reference",
    "images",
    "favicon",
    "going",
    "kind",
    "browser",
    "tab",
    "finally",
    "get",
    "ignore",
    "file",
    "git",
    "version",
    "control",
    "utility",
    "going",
    "talk",
    "finally",
    "predefined",
    "um",
    "html",
    "boiler",
    "plate",
    "start",
    "going",
    "using",
    "code",
    "pen",
    "instead",
    "cuz",
    "little",
    "bit",
    "interactive",
    "us",
    "right",
    "let",
    "get",
    "started",
    "uh",
    "coding",
    "thing",
    "go",
    "back",
    "system",
    "writing",
    "html",
    "css",
    "um",
    "use",
    "system",
    "component",
    "component",
    "basis",
    "case",
    "building",
    "uh",
    "simple",
    "card",
    "pretty",
    "much",
    "use",
    "one",
    "time",
    "much",
    "larger",
    "project",
    "kind",
    "iterate",
    "process",
    "multiple",
    "times",
    "first",
    "thing",
    "want",
    "arrange",
    "html",
    "elements",
    "page",
    "basically",
    "talking",
    "design",
    "right",
    "want",
    "design",
    "already",
    "done",
    "us",
    "go",
    "step",
    "two",
    "uh",
    "make",
    "arrangement",
    "look",
    "uh",
    "using",
    "html",
    "um",
    "way",
    "figure",
    "primarily",
    "experience",
    "knowing",
    "write",
    "html",
    "turned",
    "something",
    "like",
    "um",
    "going",
    "walk",
    "thought",
    "process",
    "kind",
    "start",
    "give",
    "experience",
    "taking",
    "look",
    "design",
    "first",
    "thing",
    "thinking",
    "um",
    "lay",
    "html",
    "container",
    "elements",
    "need",
    "use",
    "talked",
    "div",
    "element",
    "great",
    "know",
    "container",
    "type",
    "element",
    "thinking",
    "probably",
    "going",
    "four",
    "main",
    "containers",
    "looking",
    "high",
    "level",
    "first",
    "one",
    "going",
    "entire",
    "um",
    "design",
    "one",
    "div",
    "something",
    "white",
    "box",
    "right",
    "bottom",
    "left",
    "box",
    "bottom",
    "right",
    "box",
    "really",
    "going",
    "looking",
    "something",
    "like",
    "excuse",
    "uh",
    "poor",
    "drawing",
    "using",
    "mouse",
    "kind",
    "tough",
    "break",
    "like",
    "draw",
    "something",
    "around",
    "top",
    "one",
    "going",
    "div",
    "another",
    "div",
    "div",
    "div",
    "going",
    "four",
    "total",
    "going",
    "represent",
    "entire",
    "design",
    "move",
    "bottom",
    "left",
    "section",
    "contained",
    "div",
    "going",
    "little",
    "bit",
    "trickier",
    "top",
    "one",
    "um",
    "part",
    "right",
    "see",
    "text",
    "text",
    "styled",
    "right",
    "next",
    "horizontally",
    "know",
    "elements",
    "block",
    "elements",
    "default",
    "usually",
    "going",
    "find",
    "way",
    "lay",
    "line",
    "two",
    "different",
    "styles",
    "interesting",
    "see",
    "finally",
    "bottom",
    "got",
    "button",
    "spend",
    "little",
    "bit",
    "extra",
    "time",
    "need",
    "hover",
    "effect",
    "bottom",
    "right",
    "pretty",
    "straightforward",
    "design",
    "um",
    "heading",
    "looks",
    "like",
    "unstyled",
    "list",
    "necessarily",
    "paragraph",
    "text",
    "looks",
    "like",
    "list",
    "without",
    "bullet",
    "points",
    "show",
    "exactly",
    "finally",
    "um",
    "different",
    "colors",
    "throughout",
    "really",
    "related",
    "step",
    "gone",
    "steps",
    "one",
    "steps",
    "two",
    "going",
    "actually",
    "take",
    "step",
    "number",
    "two",
    "lay",
    "html",
    "talked",
    "got",
    "design",
    "right",
    "code",
    "pen",
    "left",
    "let",
    "go",
    "ahead",
    "start",
    "um",
    "first",
    "thing",
    "going",
    "make",
    "main",
    "div",
    "going",
    "call",
    "container",
    "descriptively",
    "call",
    "card",
    "call",
    "pricing",
    "card",
    "um",
    "card",
    "terminology",
    "something",
    "like",
    "contained",
    "within",
    "box",
    "furthermore",
    "said",
    "going",
    "three",
    "divs",
    "let",
    "lay",
    "going",
    "give",
    "know",
    "call",
    "id",
    "maybe",
    "let",
    "specific",
    "everything",
    "making",
    "one",
    "card",
    "um",
    "real",
    "css",
    "project",
    "might",
    "want",
    "make",
    "card",
    "design",
    "apply",
    "one",
    "class",
    "know",
    "use",
    "multiple",
    "elements",
    "use",
    "ids",
    "super",
    "specific",
    "card",
    "top",
    "section",
    "come",
    "make",
    "yet",
    "another",
    "div",
    "going",
    "bottom",
    "left",
    "section",
    "super",
    "descriptive",
    "furthermore",
    "going",
    "bottom",
    "right",
    "section",
    "let",
    "expand",
    "really",
    "see",
    "dealing",
    "going",
    "show",
    "anything",
    "screen",
    "yet",
    "put",
    "anything",
    "divs",
    "um",
    "one",
    "thing",
    "noticed",
    "probably",
    "bottom",
    "right",
    "section",
    "probably",
    "wrap",
    "another",
    "div",
    "horizontally",
    "next",
    "others",
    "really",
    "visualize",
    "got",
    "one",
    "section",
    "one",
    "section",
    "within",
    "two",
    "sections",
    "like",
    "html",
    "going",
    "wrap",
    "two",
    "div",
    "let",
    "take",
    "bottom",
    "two",
    "sections",
    "put",
    "div",
    "well",
    "make",
    "sure",
    "good",
    "indentation",
    "see",
    "exactly",
    "going",
    "pretty",
    "easily",
    "um",
    "let",
    "give",
    "one",
    "id",
    "say",
    "bottom",
    "section",
    "look",
    "right",
    "extremely",
    "messy",
    "design",
    "top",
    "section",
    "big",
    "box",
    "bottom",
    "bottom",
    "section",
    "big",
    "box",
    "surrounding",
    "two",
    "little",
    "boxes",
    "two",
    "boxes",
    "represented",
    "bottom",
    "left",
    "section",
    "bottom",
    "right",
    "section",
    "everything",
    "encompassed",
    "getting",
    "extremely",
    "messy",
    "card",
    "right",
    "right",
    "let",
    "go",
    "ahead",
    "disable",
    "drawing",
    "kind",
    "see",
    "layout",
    "going",
    "map",
    "design",
    "point",
    "let",
    "put",
    "something",
    "start",
    "seeing",
    "come",
    "life",
    "moment",
    "empty",
    "web",
    "page",
    "got",
    "bunch",
    "div",
    "elements",
    "containers",
    "laid",
    "nothing",
    "goes",
    "sections",
    "um",
    "let",
    "start",
    "top",
    "section",
    "right",
    "contain",
    "contained",
    "within",
    "single",
    "div",
    "going",
    "put",
    "looks",
    "like",
    "heading",
    "looks",
    "somewhat",
    "like",
    "call",
    "h2",
    "heading",
    "says",
    "join",
    "community",
    "first",
    "um",
    "heading",
    "right",
    "course",
    "going",
    "look",
    "anything",
    "like",
    "card",
    "beginning",
    "going",
    "use",
    "css",
    "styles",
    "make",
    "lot",
    "prettier",
    "second",
    "come",
    "looks",
    "like",
    "maybe",
    "h4",
    "heading",
    "says",
    "uh",
    "30day",
    "hasslefree",
    "money",
    "back",
    "guarantee",
    "right",
    "second",
    "part",
    "third",
    "part",
    "going",
    "paragraph",
    "text",
    "gain",
    "access",
    "full",
    "library",
    "going",
    "stop",
    "talking",
    "speed",
    "right",
    "got",
    "top",
    "section",
    "already",
    "created",
    "looks",
    "nothing",
    "like",
    "top",
    "section",
    "get",
    "due",
    "time",
    "come",
    "sections",
    "need",
    "finish",
    "bottom",
    "left",
    "section",
    "going",
    "put",
    "div",
    "right",
    "bottom",
    "right",
    "going",
    "div",
    "bottom",
    "left",
    "section",
    "looks",
    "like",
    "h4",
    "tag",
    "similar",
    "use",
    "30day",
    "money",
    "back",
    "guarantee",
    "um",
    "go",
    "ahead",
    "use",
    "one",
    "monthly",
    "subscription",
    "looks",
    "close",
    "always",
    "change",
    "later",
    "put",
    "monthly",
    "subscription",
    "like",
    "said",
    "get",
    "little",
    "uh",
    "area",
    "circle",
    "uh",
    "two",
    "pieces",
    "right",
    "going",
    "think",
    "another",
    "container",
    "div",
    "let",
    "go",
    "ahead",
    "make",
    "another",
    "div",
    "within",
    "div",
    "want",
    "say",
    "um",
    "guess",
    "make",
    "another",
    "div",
    "says",
    "29",
    "one",
    "div",
    "going",
    "say",
    "per",
    "month",
    "going",
    "total",
    "container",
    "going",
    "wrap",
    "pricing",
    "component",
    "going",
    "take",
    "two",
    "divs",
    "right",
    "make",
    "go",
    "horizontal",
    "see",
    "know",
    "block",
    "elements",
    "breaking",
    "new",
    "lines",
    "um",
    "see",
    "comes",
    "handy",
    "little",
    "bit",
    "let",
    "go",
    "next",
    "part",
    "um",
    "get",
    "rid",
    "lines",
    "see",
    "pricing",
    "gives",
    "us",
    "small",
    "um",
    "text",
    "put",
    "paragraph",
    "say",
    "full",
    "access",
    "less",
    "1",
    "day",
    "finally",
    "bottom",
    "space",
    "going",
    "need",
    "button",
    "says",
    "sign",
    "see",
    "button",
    "comes",
    "page",
    "finally",
    "gets",
    "little",
    "bit",
    "confusing",
    "since",
    "added",
    "css",
    "yet",
    "container",
    "far",
    "right",
    "going",
    "next",
    "container",
    "created",
    "time",
    "since",
    "everything",
    "block",
    "element",
    "default",
    "going",
    "go",
    "right",
    "let",
    "go",
    "ahead",
    "write",
    "looks",
    "like",
    "using",
    "kind",
    "header",
    "stick",
    "h4",
    "say",
    "us",
    "said",
    "could",
    "interpret",
    "paragraph",
    "text",
    "make",
    "bunch",
    "uh",
    "paragraph",
    "text",
    "breaks",
    "new",
    "lines",
    "could",
    "make",
    "list",
    "take",
    "bolt",
    "points",
    "later",
    "c",
    "css",
    "going",
    "going",
    "uh",
    "make",
    "unordered",
    "list",
    "list",
    "item",
    "going",
    "seeing",
    "line",
    "okay",
    "got",
    "written",
    "got",
    "text",
    "elements",
    "probably",
    "going",
    "need",
    "entire",
    "card",
    "see",
    "looks",
    "nothing",
    "like",
    "card",
    "right",
    "right",
    "believe",
    "going",
    "use",
    "vanilla",
    "css",
    "take",
    "ugly",
    "looking",
    "thing",
    "turn",
    "card",
    "see",
    "right",
    "reality",
    "building",
    "wanted",
    "quick",
    "possible",
    "um",
    "would",
    "probably",
    "lay",
    "like",
    "got",
    "text",
    "page",
    "would",
    "probably",
    "um",
    "pieces",
    "wanted",
    "lay",
    "show",
    "visualize",
    "design",
    "um",
    "course",
    "need",
    "little",
    "bit",
    "experience",
    "visualize",
    "design",
    "turn",
    "html",
    "elements",
    "take",
    "looks",
    "like",
    "nothing",
    "special",
    "turn",
    "card",
    "right",
    "let",
    "go",
    "ahead",
    "walk",
    "would",
    "real",
    "life",
    "basically",
    "created",
    "clone",
    "um",
    "going",
    "going",
    "delete",
    "text",
    "put",
    "get",
    "right",
    "back",
    "started",
    "see",
    "layout",
    "created",
    "earlier",
    "whole",
    "card",
    "top",
    "section",
    "bottom",
    "section",
    "subsections",
    "within",
    "realistically",
    "would",
    "first",
    "get",
    "everything",
    "laid",
    "page",
    "correctly",
    "start",
    "giving",
    "uh",
    "dimensions",
    "borders",
    "visualize",
    "would",
    "put",
    "actual",
    "uh",
    "text",
    "elements",
    "let",
    "go",
    "ahead",
    "real",
    "quick",
    "see",
    "exactly",
    "mean",
    "come",
    "back",
    "process",
    "um",
    "step",
    "number",
    "two",
    "involve",
    "css",
    "show",
    "open",
    "css",
    "uh",
    "pane",
    "want",
    "first",
    "target",
    "overall",
    "card",
    "id",
    "use",
    "hashtag",
    "supply",
    "id",
    "going",
    "give",
    "sort",
    "width",
    "height",
    "also",
    "tack",
    "border",
    "see",
    "page",
    "let",
    "go",
    "ahead",
    "give",
    "width",
    "200",
    "pixels",
    "height",
    "200",
    "pixels",
    "border",
    "one",
    "pixel",
    "solid",
    "red",
    "starting",
    "see",
    "going",
    "actually",
    "make",
    "three",
    "pixels",
    "see",
    "better",
    "see",
    "basic",
    "container",
    "page",
    "next",
    "thing",
    "want",
    "go",
    "see",
    "specifications",
    "size",
    "main",
    "card",
    "um",
    "outer",
    "container",
    "calling",
    "card",
    "total",
    "dimensions",
    "go",
    "back",
    "visual",
    "studio",
    "code",
    "see",
    "specification",
    "style",
    "guide",
    "right",
    "says",
    "designs",
    "created",
    "following",
    "widths",
    "like",
    "said",
    "going",
    "getting",
    "responsive",
    "design",
    "uh",
    "tutorial",
    "look",
    "desktop",
    "design",
    "looks",
    "like",
    "creating",
    "also",
    "mobile",
    "design",
    "see",
    "slightly",
    "different",
    "layout",
    "real",
    "life",
    "would",
    "designing",
    "desktop",
    "look",
    "like",
    "resize",
    "page",
    "know",
    "resize",
    "page",
    "cod",
    "pen",
    "environment",
    "would",
    "expect",
    "design",
    "change",
    "one",
    "staying",
    "simple",
    "since",
    "learned",
    "responsive",
    "design",
    "yet",
    "creating",
    "one",
    "right",
    "specification",
    "desktop",
    "going",
    "1440",
    "pixels",
    "came",
    "code",
    "pen",
    "gave",
    "width",
    "say",
    "1440",
    "pixels",
    "going",
    "go",
    "completely",
    "page",
    "going",
    "take",
    "little",
    "bit",
    "liberty",
    "make",
    "design",
    "based",
    "size",
    "code",
    "pen",
    "editor",
    "guessing",
    "going",
    "around",
    "call",
    "700",
    "pixels",
    "maybe",
    "um",
    "pretty",
    "good",
    "size",
    "probably",
    "going",
    "want",
    "give",
    "width",
    "work",
    "let",
    "make",
    "600",
    "pixels",
    "going",
    "give",
    "us",
    "space",
    "right",
    "height",
    "going",
    "eyeball",
    "specified",
    "exactly",
    "height",
    "let",
    "look",
    "desktop",
    "design",
    "um",
    "generally",
    "grasp",
    "aspect",
    "ratio",
    "tell",
    "little",
    "bit",
    "let",
    "maybe",
    "throw",
    "350",
    "pixels",
    "looks",
    "like",
    "generally",
    "aspect",
    "ratio",
    "dealing",
    "right",
    "nothing",
    "nothing",
    "perfect",
    "going",
    "get",
    "us",
    "close",
    "next",
    "step",
    "since",
    "main",
    "container",
    "laid",
    "see",
    "visibly",
    "going",
    "thing",
    "sections",
    "see",
    "top",
    "section",
    "come",
    "css",
    "target",
    "section",
    "going",
    "give",
    "width",
    "100",
    "want",
    "filling",
    "entire",
    "space",
    "main",
    "container",
    "going",
    "give",
    "height",
    "spell",
    "right",
    "give",
    "height",
    "50",
    "well",
    "maybe",
    "50",
    "looks",
    "like",
    "top",
    "section",
    "call",
    "40",
    "bottom",
    "section",
    "60",
    "maybe",
    "go",
    "range",
    "give",
    "height",
    "40",
    "width",
    "100",
    "course",
    "ca",
    "see",
    "anything",
    "yet",
    "cuz",
    "given",
    "background",
    "border",
    "let",
    "throw",
    "two",
    "pixel",
    "solid",
    "green",
    "border",
    "see",
    "pop",
    "top",
    "section",
    "looks",
    "pretty",
    "good",
    "far",
    "one",
    "problem",
    "seeing",
    "already",
    "want",
    "fix",
    "right",
    "bat",
    "get",
    "um",
    "box",
    "sizing",
    "see",
    "put",
    "border",
    "inner",
    "container",
    "um",
    "seeing",
    "kind",
    "breaking",
    "parent",
    "container",
    "right",
    "side",
    "reason",
    "happening",
    "box",
    "sizing",
    "set",
    "default",
    "content",
    "box",
    "going",
    "basic",
    "css",
    "reset",
    "going",
    "make",
    "every",
    "element",
    "page",
    "abide",
    "border",
    "box",
    "box",
    "sizing",
    "talked",
    "first",
    "three",
    "lessons",
    "css",
    "crash",
    "course",
    "um",
    "go",
    "back",
    "review",
    "apply",
    "border",
    "box",
    "box",
    "sizing",
    "every",
    "element",
    "html",
    "document",
    "come",
    "top",
    "css",
    "file",
    "paste",
    "predefined",
    "html",
    "css",
    "reset",
    "saying",
    "total",
    "document",
    "want",
    "box",
    "sizing",
    "border",
    "box",
    "see",
    "make",
    "box",
    "go",
    "within",
    "container",
    "second",
    "rule",
    "basically",
    "going",
    "say",
    "want",
    "grab",
    "every",
    "element",
    "apply",
    "inherit",
    "know",
    "root",
    "level",
    "box",
    "sizing",
    "adding",
    "two",
    "rules",
    "see",
    "boxes",
    "fitting",
    "nicely",
    "within",
    "comment",
    "going",
    "breaking",
    "box",
    "comment",
    "back",
    "goes",
    "update",
    "sure",
    "updating",
    "let",
    "uh",
    "refresh",
    "page",
    "go",
    "within",
    "box",
    "fixed",
    "go",
    "bottom",
    "section",
    "um",
    "let",
    "let",
    "go",
    "back",
    "design",
    "second",
    "got",
    "top",
    "section",
    "bordered",
    "overall",
    "bottom",
    "section",
    "write",
    "css",
    "rule",
    "target",
    "bottom",
    "section",
    "div",
    "right",
    "see",
    "bottom",
    "section",
    "two",
    "subsections",
    "within",
    "let",
    "come",
    "paste",
    "properties",
    "cuz",
    "need",
    "obviously",
    "going",
    "wrong",
    "uh",
    "heights",
    "widths",
    "want",
    "100",
    "width",
    "want",
    "taking",
    "height",
    "want",
    "going",
    "60",
    "rather",
    "40",
    "see",
    "40",
    "take",
    "full",
    "uh",
    "height",
    "entire",
    "container",
    "made",
    "60",
    "um",
    "turn",
    "call",
    "blue",
    "see",
    "uh",
    "outer",
    "container",
    "red",
    "top",
    "container",
    "green",
    "bottom",
    "container",
    "blue",
    "last",
    "thing",
    "get",
    "layout",
    "um",
    "perfect",
    "going",
    "adding",
    "two",
    "containers",
    "bottom",
    "section",
    "side",
    "side",
    "going",
    "add",
    "one",
    "time",
    "going",
    "require",
    "us",
    "something",
    "little",
    "bit",
    "tricky",
    "um",
    "go",
    "next",
    "let",
    "target",
    "bottom",
    "left",
    "section",
    "first",
    "copy",
    "id",
    "css",
    "put",
    "hashtag",
    "front",
    "target",
    "going",
    "copy",
    "properties",
    "get",
    "border",
    "going",
    "incorrect",
    "moment",
    "giving",
    "width",
    "100",
    "um",
    "really",
    "want",
    "width",
    "50",
    "want",
    "take",
    "uh",
    "first",
    "half",
    "height",
    "want",
    "going",
    "100",
    "using",
    "percentages",
    "already",
    "broken",
    "within",
    "containers",
    "let",
    "put",
    "different",
    "color",
    "um",
    "maybe",
    "put",
    "uh",
    "contrasting",
    "blue",
    "say",
    "orange",
    "see",
    "pretty",
    "nicely",
    "within",
    "container",
    "reason",
    "works",
    "width",
    "um",
    "width",
    "50",
    "going",
    "relative",
    "parent",
    "container",
    "look",
    "ask",
    "okay",
    "parent",
    "container",
    "bottom",
    "left",
    "section",
    "well",
    "going",
    "going",
    "bottom",
    "section",
    "bottom",
    "section",
    "outlined",
    "blue",
    "right",
    "rather",
    "saying",
    "50",
    "um",
    "width",
    "entire",
    "document",
    "saying",
    "50",
    "width",
    "bottom",
    "section",
    "already",
    "outlined",
    "us",
    "see",
    "um",
    "occupying",
    "perfectly",
    "50",
    "thing",
    "bottom",
    "right",
    "section",
    "let",
    "change",
    "id",
    "bottom",
    "right",
    "section",
    "running",
    "colors",
    "maybe",
    "give",
    "two",
    "pixel",
    "solid",
    "black",
    "border",
    "running",
    "problems",
    "bottom",
    "right",
    "section",
    "breaking",
    "onto",
    "new",
    "line",
    "divs",
    "default",
    "block",
    "elements",
    "occupy",
    "line",
    "order",
    "work",
    "actually",
    "make",
    "um",
    "know",
    "subsections",
    "inline",
    "block",
    "elements",
    "want",
    "make",
    "inline",
    "inline",
    "elements",
    "respect",
    "height",
    "width",
    "properties",
    "want",
    "respect",
    "want",
    "line",
    "going",
    "come",
    "say",
    "display",
    "inline",
    "block",
    "display",
    "inline",
    "block",
    "point",
    "probably",
    "wondering",
    "boxes",
    "lining",
    "next",
    "given",
    "one",
    "50",
    "width",
    "one",
    "50",
    "width",
    "turned",
    "inline",
    "blocks",
    "basically",
    "means",
    "sit",
    "line",
    "unlike",
    "block",
    "element",
    "reason",
    "happening",
    "probably",
    "going",
    "make",
    "pretty",
    "mad",
    "um",
    "made",
    "mad",
    "found",
    "uh",
    "first",
    "time",
    "lot",
    "people",
    "kind",
    "quirky",
    "thing",
    "css",
    "make",
    "inline",
    "block",
    "respects",
    "white",
    "space",
    "within",
    "document",
    "believe",
    "come",
    "html",
    "bottom",
    "left",
    "section",
    "bottom",
    "right",
    "section",
    "actually",
    "white",
    "space",
    "two",
    "elements",
    "uh",
    "space",
    "right",
    "considered",
    "white",
    "space",
    "inline",
    "block",
    "elements",
    "backspace",
    "bring",
    "right",
    "next",
    "going",
    "bring",
    "box",
    "within",
    "container",
    "going",
    "fit",
    "perfectly",
    "know",
    "thinking",
    "um",
    "like",
    "said",
    "kind",
    "infuriating",
    "reason",
    "kind",
    "know",
    "coding",
    "general",
    "sometimes",
    "find",
    "things",
    "completely",
    "ridiculous",
    "say",
    "um",
    "hope",
    "next",
    "couple",
    "videos",
    "going",
    "talking",
    "css",
    "grid",
    "flexbox",
    "much",
    "optimal",
    "way",
    "make",
    "layout",
    "like",
    "done",
    "wo",
    "run",
    "weird",
    "quirky",
    "problems",
    "exist",
    "um",
    "part",
    "kind",
    "older",
    "uh",
    "method",
    "writing",
    "css",
    "right",
    "keep",
    "mind",
    "taken",
    "divs",
    "nicely",
    "uh",
    "laid",
    "html",
    "like",
    "removed",
    "little",
    "white",
    "space",
    "going",
    "work",
    "fine",
    "hopefully",
    "little",
    "hack",
    "going",
    "throughout",
    "project",
    "um",
    "like",
    "said",
    "little",
    "bit",
    "frustrating",
    "uh",
    "know",
    "css",
    "grid",
    "flexbox",
    "least",
    "um",
    "would",
    "kind",
    "old",
    "way",
    "lining",
    "things",
    "last",
    "thing",
    "got",
    "layout",
    "come",
    "back",
    "visual",
    "studio",
    "code",
    "see",
    "got",
    "top",
    "section",
    "bottom",
    "left",
    "bottom",
    "right",
    "section",
    "outlined",
    "ugly",
    "colors",
    "whatnot",
    "point",
    "start",
    "putting",
    "html",
    "elements",
    "within",
    "let",
    "go",
    "ahead",
    "grab",
    "text",
    "created",
    "ugly",
    "uh",
    "space",
    "going",
    "copy",
    "exact",
    "html",
    "put",
    "sections",
    "belongs",
    "going",
    "see",
    "html",
    "go",
    "course",
    "going",
    "going",
    "fully",
    "fit",
    "beginning",
    "um",
    "fix",
    "promise",
    "let",
    "come",
    "grabb",
    "put",
    "bottom",
    "left",
    "section",
    "see",
    "uh",
    "spacing",
    "going",
    "address",
    "partially",
    "due",
    "default",
    "margin",
    "given",
    "given",
    "h2",
    "h4",
    "elements",
    "paragraph",
    "elements",
    "finally",
    "bottom",
    "right",
    "section",
    "copy",
    "paste",
    "bottom",
    "right",
    "section",
    "okay",
    "got",
    "elements",
    "fix",
    "things",
    "um",
    "one",
    "things",
    "default",
    "margin",
    "getting",
    "elements",
    "going",
    "actually",
    "inspect",
    "whole",
    "page",
    "going",
    "look",
    "weird",
    "second",
    "hover",
    "um",
    "elements",
    "see",
    "orange",
    "um",
    "margin",
    "top",
    "top",
    "bottom",
    "h4",
    "elements",
    "browser",
    "default",
    "something",
    "know",
    "happens",
    "default",
    "go",
    "page",
    "see",
    "text",
    "spaced",
    "pretty",
    "nicely",
    "browser",
    "defaults",
    "obviously",
    "want",
    "effect",
    "want",
    "uh",
    "document",
    "spacing",
    "around",
    "want",
    "add",
    "spacing",
    "come",
    "top",
    "html",
    "sorry",
    "css",
    "reset",
    "know",
    "resetting",
    "default",
    "properties",
    "going",
    "grab",
    "h2",
    "element",
    "h4",
    "element",
    "well",
    "paragraph",
    "element",
    "give",
    "margin",
    "zero",
    "hopefully",
    "fix",
    "things",
    "see",
    "spacing",
    "around",
    "right",
    "last",
    "problem",
    "dealing",
    "looks",
    "like",
    "got",
    "text",
    "without",
    "default",
    "spacing",
    "nice",
    "last",
    "thing",
    "worrying",
    "orange",
    "box",
    "oddly",
    "sitting",
    "floating",
    "space",
    "rightclick",
    "inspect",
    "start",
    "clicking",
    "around",
    "looking",
    "going",
    "know",
    "obvious",
    "reason",
    "sitting",
    "margin",
    "padding",
    "anything",
    "going",
    "kind",
    "ask",
    "going",
    "um",
    "experience",
    "know",
    "inline",
    "block",
    "element",
    "follows",
    "different",
    "rules",
    "block",
    "element",
    "different",
    "properties",
    "allow",
    "modify",
    "rules",
    "applying",
    "html",
    "kind",
    "similar",
    "css",
    "change",
    "display",
    "properties",
    "box",
    "sizing",
    "different",
    "rules",
    "game",
    "come",
    "mdn",
    "documentation",
    "type",
    "uh",
    "um",
    "vertical",
    "align",
    "going",
    "show",
    "us",
    "property",
    "says",
    "vertical",
    "align",
    "css",
    "property",
    "sets",
    "vertical",
    "alignment",
    "inline",
    "inline",
    "block",
    "table",
    "cell",
    "box",
    "apply",
    "block",
    "elements",
    "default",
    "type",
    "html",
    "element",
    "um",
    "pretty",
    "much",
    "everything",
    "basically",
    "says",
    "pretty",
    "good",
    "visual",
    "right",
    "two",
    "inline",
    "block",
    "elements",
    "sitting",
    "right",
    "next",
    "line",
    "aligned",
    "um",
    "different",
    "vertical",
    "positions",
    "default",
    "um",
    "sure",
    "exactly",
    "default",
    "um",
    "probably",
    "baseline",
    "something",
    "like",
    "um",
    "anyways",
    "want",
    "make",
    "sure",
    "uh",
    "gets",
    "top",
    "alignment",
    "come",
    "back",
    "uh",
    "challenge",
    "want",
    "two",
    "uh",
    "inline",
    "blocks",
    "basically",
    "lock",
    "top",
    "um",
    "border",
    "container",
    "go",
    "sections",
    "um",
    "bottom",
    "left",
    "section",
    "behaving",
    "oddly",
    "type",
    "vertical",
    "align",
    "say",
    "top",
    "going",
    "bring",
    "right",
    "back",
    "snap",
    "top",
    "edge",
    "container",
    "bottom",
    "right",
    "section",
    "happens",
    "snap",
    "naturally",
    "um",
    "let",
    "go",
    "ahead",
    "add",
    "vertical",
    "line",
    "top",
    "cons",
    "consistency",
    "sake",
    "also",
    "snap",
    "top",
    "point",
    "looks",
    "like",
    "nicely",
    "laid",
    "card",
    "although",
    "pretty",
    "ugly",
    "got",
    "everything",
    "need",
    "content",
    "got",
    "layout",
    "need",
    "point",
    "styling",
    "process",
    "looked",
    "number",
    "one",
    "looking",
    "design",
    "cases",
    "actually",
    "designing",
    "um",
    "step",
    "two",
    "asked",
    "lay",
    "html",
    "templated",
    "everything",
    "step",
    "three",
    "ask",
    "use",
    "css",
    "achieve",
    "layout",
    "want",
    "exactly",
    "used",
    "basic",
    "css",
    "properties",
    "put",
    "borders",
    "really",
    "visualize",
    "um",
    "card",
    "component",
    "trying",
    "create",
    "finally",
    "style",
    "element",
    "kind",
    "fun",
    "part",
    "ugly",
    "layout",
    "example",
    "going",
    "turn",
    "um",
    "see",
    "example",
    "nice",
    "styled",
    "card",
    "think",
    "first",
    "thing",
    "want",
    "um",
    "let",
    "go",
    "back",
    "example",
    "um",
    "since",
    "called",
    "layout",
    "example",
    "let",
    "let",
    "copy",
    "html",
    "original",
    "code",
    "pen",
    "course",
    "css",
    "copy",
    "get",
    "us",
    "back",
    "uh",
    "go",
    "ahead",
    "close",
    "got",
    "one",
    "example",
    "think",
    "next",
    "step",
    "going",
    "get",
    "background",
    "colors",
    "uh",
    "put",
    "going",
    "start",
    "get",
    "something",
    "look",
    "ugly",
    "looking",
    "colors",
    "um",
    "let",
    "drop",
    "google",
    "really",
    "sure",
    "saying",
    "cyan",
    "bright",
    "yellow",
    "light",
    "gray",
    "grayish",
    "blue",
    "completely",
    "honest",
    "know",
    "refers",
    "um",
    "looks",
    "like",
    "might",
    "yellow",
    "um",
    "sure",
    "gray",
    "maybe",
    "text",
    "right",
    "um",
    "let",
    "let",
    "go",
    "ahead",
    "type",
    "google",
    "real",
    "quick",
    "go",
    "rgb",
    "something",
    "r",
    "rgb",
    "hex",
    "maybe",
    "okay",
    "looking",
    "color",
    "picker",
    "google",
    "go",
    "back",
    "style",
    "guide",
    "let",
    "see",
    "cyan",
    "color",
    "paste",
    "values",
    "right",
    "sure",
    "giving",
    "us",
    "hsl",
    "values",
    "really",
    "used",
    "much",
    "web",
    "development",
    "usually",
    "stick",
    "hex",
    "rgb",
    "um",
    "let",
    "go",
    "ahead",
    "convert",
    "something",
    "little",
    "bit",
    "easier",
    "use",
    "grab",
    "hex",
    "color",
    "let",
    "replace",
    "reference",
    "let",
    "paste",
    "hsl",
    "yellow",
    "color",
    "working",
    "looks",
    "green",
    "maybe",
    "color",
    "blind",
    "knows",
    "um",
    "go",
    "hex",
    "values",
    "end",
    "reference",
    "thing",
    "remainder",
    "like",
    "working",
    "hex",
    "never",
    "really",
    "worked",
    "uh",
    "hsl",
    "go",
    "back",
    "put",
    "look",
    "um",
    "bottom",
    "bottom",
    "left",
    "bottom",
    "right",
    "boxes",
    "look",
    "like",
    "different",
    "colors",
    "one",
    "looks",
    "like",
    "lighter",
    "version",
    "left",
    "style",
    "guide",
    "sure",
    "given",
    "us",
    "uh",
    "two",
    "options",
    "came",
    "looked",
    "san",
    "um",
    "color",
    "let",
    "paste",
    "looks",
    "like",
    "would",
    "bottom",
    "left",
    "color",
    "dealing",
    "maybe",
    "even",
    "bottom",
    "right",
    "color",
    "um",
    "going",
    "drag",
    "different",
    "colors",
    "maybe",
    "missing",
    "something",
    "um",
    "let",
    "drag",
    "get",
    "little",
    "bit",
    "lighter",
    "color",
    "work",
    "going",
    "grab",
    "hex",
    "value",
    "paste",
    "style",
    "guide",
    "put",
    "put",
    "darker",
    "lighter",
    "point",
    "grab",
    "color",
    "codes",
    "start",
    "using",
    "grab",
    "darker",
    "color",
    "come",
    "back",
    "code",
    "pen",
    "put",
    "background",
    "color",
    "property",
    "bottom",
    "left",
    "section",
    "know",
    "use",
    "background",
    "color",
    "property",
    "paste",
    "getting",
    "darker",
    "cyan",
    "color",
    "right",
    "point",
    "probably",
    "remove",
    "border",
    "looks",
    "little",
    "bit",
    "nicer",
    "us",
    "um",
    "also",
    "going",
    "remove",
    "bottom",
    "section",
    "blue",
    "border",
    "okay",
    "looking",
    "little",
    "bit",
    "better",
    "want",
    "fill",
    "background",
    "color",
    "right",
    "section",
    "um",
    "got",
    "slightly",
    "lighter",
    "hex",
    "value",
    "go",
    "bottom",
    "right",
    "section",
    "get",
    "rid",
    "border",
    "replace",
    "background",
    "color",
    "paste",
    "looking",
    "like",
    "little",
    "bit",
    "lighter",
    "compared",
    "example",
    "contrast",
    "let",
    "go",
    "ahead",
    "let",
    "play",
    "little",
    "bit",
    "let",
    "make",
    "even",
    "little",
    "bit",
    "light",
    "grab",
    "hex",
    "value",
    "see",
    "looks",
    "like",
    "okay",
    "little",
    "bit",
    "better",
    "like",
    "contrast",
    "could",
    "even",
    "come",
    "adobe",
    "color",
    "go",
    "uh",
    "adobe",
    "color",
    "tool",
    "could",
    "could",
    "grab",
    "bottom",
    "left",
    "section",
    "hex",
    "code",
    "darker",
    "cyan",
    "uh",
    "throw",
    "middle",
    "want",
    "shades",
    "color",
    "uh",
    "could",
    "grab",
    "maybe",
    "shade",
    "ensures",
    "going",
    "know",
    "nicely",
    "go",
    "together",
    "let",
    "put",
    "one",
    "bottom",
    "right",
    "section",
    "get",
    "little",
    "bit",
    "compliment",
    "uh",
    "colors",
    "go",
    "back",
    "replace",
    "reference",
    "okay",
    "got",
    "two",
    "um",
    "top",
    "going",
    "white",
    "point",
    "think",
    "remove",
    "borders",
    "ugly",
    "colors",
    "going",
    "um",
    "let",
    "let",
    "go",
    "remove",
    "top",
    "section",
    "green",
    "border",
    "everything",
    "looks",
    "good",
    "red",
    "border",
    "around",
    "everything",
    "boom",
    "nicer",
    "looking",
    "layout",
    "see",
    "example",
    "uh",
    "design",
    "kind",
    "standing",
    "background",
    "also",
    "notice",
    "little",
    "corners",
    "rounded",
    "want",
    "something",
    "reference",
    "also",
    "want",
    "kind",
    "make",
    "come",
    "top",
    "left",
    "corner",
    "page",
    "add",
    "padding",
    "body",
    "go",
    "add",
    "padding",
    "20",
    "pixels",
    "body",
    "see",
    "uh",
    "comes",
    "little",
    "bit",
    "remove",
    "add",
    "back",
    "see",
    "card",
    "shifts",
    "inwards",
    "kind",
    "visualize",
    "little",
    "bit",
    "better",
    "um",
    "finally",
    "card",
    "main",
    "container",
    "around",
    "everything",
    "going",
    "add",
    "box",
    "shadow",
    "property",
    "going",
    "take",
    "believe",
    "five",
    "different",
    "arguments",
    "kind",
    "uh",
    "referencing",
    "shadow",
    "going",
    "go",
    "open",
    "tool",
    "called",
    "box",
    "shadow",
    "generator",
    "uh",
    "css",
    "couple",
    "tools",
    "know",
    "one",
    "best",
    "um",
    "work",
    "see",
    "um",
    "css",
    "box",
    "box",
    "shadow",
    "around",
    "know",
    "drag",
    "sliders",
    "get",
    "different",
    "sorts",
    "box",
    "shadows",
    "applying",
    "good",
    "visual",
    "tool",
    "use",
    "see",
    "want",
    "case",
    "probably",
    "want",
    "much",
    "smaller",
    "box",
    "shadow",
    "let",
    "let",
    "go",
    "ahead",
    "actually",
    "want",
    "stay",
    "close",
    "zero",
    "go",
    "around",
    "four",
    "pixels",
    "maybe",
    "three",
    "pixels",
    "something",
    "like",
    "make",
    "blur",
    "radius",
    "little",
    "bit",
    "smaller",
    "opacity",
    "want",
    "let",
    "make",
    "like",
    "around",
    "area",
    "maybe",
    "little",
    "bit",
    "think",
    "looks",
    "pretty",
    "good",
    "codes",
    "need",
    "showing",
    "us",
    "uh",
    "need",
    "paste",
    "webkit",
    "moz",
    "box",
    "shadows",
    "like",
    "browser",
    "support",
    "necessarily",
    "need",
    "going",
    "copy",
    "rule",
    "right",
    "paste",
    "card",
    "going",
    "see",
    "around",
    "edges",
    "starting",
    "get",
    "defined",
    "um",
    "edge",
    "card",
    "let",
    "go",
    "back",
    "um",
    "design",
    "see",
    "getting",
    "little",
    "bit",
    "closer",
    "uh",
    "want",
    "round",
    "corners",
    "say",
    "main",
    "card",
    "say",
    "want",
    "border",
    "radius",
    "call",
    "5",
    "pixels",
    "right",
    "got",
    "border",
    "radius",
    "notice",
    "bottom",
    "right",
    "corner",
    "bottom",
    "left",
    "corner",
    "border",
    "radius",
    "might",
    "ask",
    "given",
    "border",
    "radius",
    "five",
    "pixels",
    "apply",
    "around",
    "uh",
    "container",
    "element",
    "problem",
    "two",
    "inner",
    "container",
    "elements",
    "perfect",
    "know",
    "squares",
    "occupy",
    "100",
    "space",
    "within",
    "main",
    "container",
    "make",
    "border",
    "radius",
    "actually",
    "um",
    "th",
    "inner",
    "boxes",
    "actually",
    "breaking",
    "main",
    "container",
    "seeing",
    "uh",
    "child",
    "containers",
    "couple",
    "ways",
    "could",
    "fix",
    "cool",
    "little",
    "trick",
    "use",
    "know",
    "necessarily",
    "obvious",
    "enough",
    "googling",
    "would",
    "find",
    "set",
    "overflow",
    "property",
    "hd",
    "hidden",
    "main",
    "container",
    "element",
    "see",
    "uh",
    "borders",
    "go",
    "rounded",
    "basically",
    "saying",
    "want",
    "take",
    "perfect",
    "square",
    "children",
    "containers",
    "since",
    "breaking",
    "main",
    "container",
    "want",
    "say",
    "main",
    "container",
    "css",
    "style",
    "okay",
    "anything",
    "breaking",
    "borders",
    "hide",
    "allows",
    "bottom",
    "border",
    "radiuses",
    "apply",
    "cool",
    "little",
    "trick",
    "um",
    "also",
    "one",
    "frustrating",
    "things",
    "css",
    "things",
    "would",
    "expect",
    "literally",
    "name",
    "game",
    "css",
    "um",
    "figuring",
    "get",
    "around",
    "things",
    "expecting",
    "happen",
    "okay",
    "getting",
    "little",
    "bit",
    "closer",
    "um",
    "next",
    "thing",
    "add",
    "really",
    "nice",
    "touch",
    "uh",
    "make",
    "look",
    "little",
    "bit",
    "cleaner",
    "padding",
    "think",
    "let",
    "jump",
    "back",
    "design",
    "see",
    "around",
    "content",
    "around",
    "every",
    "bit",
    "content",
    "space",
    "nice",
    "padding",
    "could",
    "could",
    "come",
    "code",
    "pen",
    "could",
    "say",
    "total",
    "card",
    "want",
    "add",
    "padding",
    "say",
    "20",
    "pixels",
    "going",
    "uh",
    "mess",
    "us",
    "little",
    "bit",
    "although",
    "adds",
    "nice",
    "padding",
    "around",
    "everything",
    "um",
    "occupying",
    "100",
    "wi",
    "also",
    "want",
    "padding",
    "within",
    "suitt",
    "containers",
    "going",
    "instead",
    "adding",
    "total",
    "card",
    "um",
    "get",
    "padding",
    "like",
    "going",
    "add",
    "individual",
    "section",
    "call",
    "padding",
    "20",
    "pixels",
    "pretty",
    "standard",
    "amount",
    "padding",
    "add",
    "look",
    "little",
    "space",
    "edge",
    "text",
    "top",
    "left",
    "um",
    "get",
    "idea",
    "large",
    "padding",
    "looks",
    "pretty",
    "line",
    "design",
    "happy",
    "let",
    "copy",
    "rule",
    "uh",
    "section",
    "bottom",
    "section",
    "represents",
    "everything",
    "want",
    "bottom",
    "left",
    "section",
    "get",
    "nice",
    "padding",
    "also",
    "want",
    "bottom",
    "right",
    "section",
    "make",
    "padding",
    "uh",
    "nice",
    "point",
    "gone",
    "completely",
    "ugly",
    "layout",
    "design",
    "something",
    "actually",
    "makes",
    "sense",
    "visually",
    "obviously",
    "lot",
    "text",
    "styles",
    "colors",
    "button",
    "getting",
    "lot",
    "closer",
    "let",
    "go",
    "ahead",
    "change",
    "text",
    "color",
    "see",
    "everything",
    "bottom",
    "text",
    "color",
    "white",
    "um",
    "top",
    "varying",
    "text",
    "colors",
    "start",
    "top",
    "see",
    "heading",
    "color",
    "bottom",
    "left",
    "least",
    "appears",
    "let",
    "grab",
    "bottom",
    "left",
    "color",
    "go",
    "ahead",
    "apply",
    "join",
    "community",
    "text",
    "block",
    "let",
    "collapse",
    "js",
    "go",
    "join",
    "community",
    "could",
    "could",
    "target",
    "everything",
    "top",
    "section",
    "h2",
    "since",
    "planning",
    "changing",
    "html",
    "uh",
    "structure",
    "anytime",
    "soon",
    "pretty",
    "happy",
    "could",
    "also",
    "throw",
    "id",
    "uh",
    "know",
    "says",
    "title",
    "directly",
    "style",
    "um",
    "case",
    "let",
    "go",
    "ahead",
    "practice",
    "combinator",
    "skills",
    "css",
    "combinators",
    "style",
    "come",
    "point",
    "see",
    "css",
    "getting",
    "pretty",
    "busy",
    "might",
    "want",
    "rearrange",
    "organize",
    "section",
    "let",
    "keep",
    "going",
    "um",
    "say",
    "top",
    "section",
    "want",
    "want",
    "grab",
    "every",
    "h2",
    "element",
    "simply",
    "first",
    "title",
    "want",
    "style",
    "color",
    "bottom",
    "left",
    "going",
    "get",
    "correct",
    "color",
    "let",
    "go",
    "back",
    "um",
    "visual",
    "studio",
    "code",
    "see",
    "else",
    "kind",
    "lime",
    "green",
    "yellowish",
    "color",
    "next",
    "one",
    "going",
    "hex",
    "code",
    "bright",
    "yellow",
    "going",
    "back",
    "code",
    "pen",
    "um",
    "see",
    "h4",
    "sitting",
    "top",
    "section",
    "grab",
    "similar",
    "rule",
    "except",
    "time",
    "grabbing",
    "h4s",
    "giving",
    "color",
    "yellow",
    "yellow",
    "color",
    "finally",
    "sort",
    "gray",
    "color",
    "let",
    "get",
    "visual",
    "studio",
    "code",
    "um",
    "paragraph",
    "text",
    "gray",
    "style",
    "guide",
    "um",
    "believe",
    "light",
    "gray",
    "looking",
    "let",
    "copy",
    "hex",
    "code",
    "make",
    "paragraph",
    "elements",
    "top",
    "section",
    "equal",
    "light",
    "gray",
    "color",
    "okay",
    "light",
    "sure",
    "supposed",
    "um",
    "appears",
    "pretty",
    "pretty",
    "good",
    "pretty",
    "darn",
    "light",
    "looking",
    "going",
    "go",
    "ahead",
    "make",
    "little",
    "bit",
    "stronger",
    "gray",
    "um",
    "maybe",
    "grayish",
    "blue",
    "actually",
    "let",
    "try",
    "instead",
    "ah",
    "okay",
    "think",
    "meant",
    "style",
    "yeah",
    "think",
    "looking",
    "grayish",
    "blue",
    "looks",
    "little",
    "bit",
    "better",
    "stay",
    "add",
    "uh",
    "spacing",
    "remember",
    "top",
    "html",
    "reset",
    "said",
    "h2",
    "h4",
    "p",
    "elements",
    "want",
    "add",
    "margin",
    "zero",
    "removed",
    "default",
    "spacing",
    "custom",
    "since",
    "got",
    "three",
    "elements",
    "selected",
    "combinators",
    "drop",
    "rules",
    "let",
    "take",
    "look",
    "design",
    "looks",
    "like",
    "good",
    "amount",
    "space",
    "um",
    "experience",
    "looks",
    "15",
    "pixels",
    "top",
    "next",
    "one",
    "let",
    "go",
    "ahead",
    "try",
    "adding",
    "margin",
    "bottom",
    "15",
    "pixels",
    "see",
    "nice",
    "little",
    "spacing",
    "um",
    "starting",
    "see",
    "top",
    "section",
    "got",
    "laid",
    "little",
    "bit",
    "small",
    "height",
    "perspective",
    "think",
    "going",
    "adjust",
    "total",
    "dimensions",
    "um",
    "previously",
    "said",
    "bottom",
    "section",
    "height",
    "60",
    "top",
    "40",
    "going",
    "change",
    "45",
    "55",
    "see",
    "little",
    "bit",
    "realistic",
    "uh",
    "breakout",
    "two",
    "sections",
    "pretty",
    "happy",
    "last",
    "thing",
    "need",
    "made",
    "change",
    "add",
    "spacing",
    "two",
    "text",
    "elements",
    "uh",
    "already",
    "got",
    "padding",
    "bottom",
    "go",
    "rule",
    "h4",
    "add",
    "margin",
    "bottom",
    "10",
    "pixels",
    "seems",
    "right",
    "comparing",
    "think",
    "getting",
    "pretty",
    "close",
    "looking",
    "might",
    "actually",
    "need",
    "little",
    "bit",
    "padding",
    "around",
    "uh",
    "given",
    "let",
    "go",
    "top",
    "section",
    "wherever",
    "let",
    "increase",
    "padding",
    "say",
    "25",
    "pixels",
    "looks",
    "little",
    "bit",
    "better",
    "uh",
    "us",
    "go",
    "ahead",
    "update",
    "25",
    "pixels",
    "two",
    "spots",
    "added",
    "okay",
    "pretty",
    "good",
    "looks",
    "like",
    "total",
    "card",
    "size",
    "starting",
    "break",
    "going",
    "wait",
    "try",
    "restyle",
    "text",
    "going",
    "get",
    "little",
    "bit",
    "smaller",
    "uh",
    "set",
    "font",
    "size",
    "change",
    "font",
    "style",
    "last",
    "thing",
    "come",
    "since",
    "everything",
    "bottom",
    "looks",
    "like",
    "color",
    "white",
    "go",
    "um",
    "selector",
    "used",
    "um",
    "entire",
    "bottom",
    "section",
    "rather",
    "trying",
    "style",
    "text",
    "left",
    "uh",
    "section",
    "right",
    "section",
    "go",
    "entire",
    "bottom",
    "section",
    "give",
    "color",
    "white",
    "looks",
    "pretty",
    "good",
    "um",
    "think",
    "work",
    "see",
    "button",
    "color",
    "styled",
    "separate",
    "uh",
    "element",
    "actually",
    "target",
    "um",
    "buttons",
    "cuz",
    "one",
    "button",
    "entire",
    "page",
    "style",
    "button",
    "give",
    "color",
    "white",
    "going",
    "give",
    "text",
    "color",
    "white",
    "make",
    "show",
    "little",
    "bit",
    "better",
    "add",
    "background",
    "color",
    "looks",
    "like",
    "um",
    "lime",
    "green",
    "going",
    "wait",
    "second",
    "next",
    "major",
    "change",
    "want",
    "make",
    "getting",
    "text",
    "right",
    "font",
    "family",
    "right",
    "using",
    "browser",
    "default",
    "um",
    "whatever",
    "actually",
    "know",
    "top",
    "head",
    "want",
    "make",
    "different",
    "font",
    "completely",
    "look",
    "style",
    "guide",
    "going",
    "say",
    "font",
    "family",
    "looking",
    "carla",
    "go",
    "link",
    "see",
    "different",
    "styles",
    "need",
    "question",
    "font",
    "weights",
    "know",
    "styles",
    "need",
    "well",
    "go",
    "look",
    "spec",
    "says",
    "need",
    "weights",
    "400",
    "700",
    "let",
    "take",
    "font",
    "weight",
    "400",
    "select",
    "style",
    "font",
    "weight",
    "700",
    "select",
    "well",
    "grab",
    "link",
    "tags",
    "need",
    "go",
    "back",
    "code",
    "pen",
    "go",
    "settings",
    "html",
    "stuff",
    "head",
    "element",
    "since",
    "code",
    "pen",
    "gives",
    "us",
    "little",
    "environment",
    "actually",
    "make",
    "head",
    "uh",
    "element",
    "boiler",
    "plate",
    "paste",
    "saving",
    "closing",
    "access",
    "new",
    "font",
    "changed",
    "anything",
    "actually",
    "select",
    "within",
    "document",
    "root",
    "element",
    "want",
    "give",
    "font",
    "family",
    "carla",
    "see",
    "changed",
    "design",
    "completely",
    "says",
    "overall",
    "font",
    "size",
    "going",
    "16",
    "pixels",
    "let",
    "go",
    "ahead",
    "say",
    "font",
    "size",
    "root",
    "element",
    "going",
    "16",
    "pixels",
    "going",
    "apply",
    "uh",
    "paragraph",
    "elements",
    "flipping",
    "back",
    "forth",
    "two",
    "designs",
    "looks",
    "like",
    "still",
    "need",
    "little",
    "space",
    "let",
    "real",
    "quick",
    "get",
    "anything",
    "else",
    "add",
    "20",
    "pixels",
    "okay",
    "thinking",
    "running",
    "space",
    "vertically",
    "since",
    "came",
    "arbitrary",
    "height",
    "um",
    "beginning",
    "mind",
    "changing",
    "cu",
    "specify",
    "height",
    "let",
    "go",
    "ahead",
    "uh",
    "turn",
    "400",
    "give",
    "us",
    "space",
    "think",
    "looks",
    "lot",
    "closer",
    "card",
    "working",
    "adjusting",
    "gives",
    "us",
    "um",
    "pretty",
    "good",
    "look",
    "got",
    "font",
    "family",
    "um",
    "styled",
    "think",
    "next",
    "thing",
    "figure",
    "font",
    "family",
    "us",
    "download",
    "font",
    "weight",
    "400",
    "700",
    "means",
    "font",
    "weight",
    "700",
    "bold",
    "let",
    "look",
    "design",
    "see",
    "ones",
    "uh",
    "would",
    "apply",
    "looks",
    "like",
    "29",
    "uh",
    "call",
    "one",
    "font",
    "weight",
    "know",
    "extra",
    "bold",
    "let",
    "come",
    "um",
    "default",
    "font",
    "weight",
    "going",
    "400",
    "could",
    "also",
    "specify",
    "uh",
    "root",
    "say",
    "400",
    "going",
    "default",
    "going",
    "change",
    "came",
    "price",
    "right",
    "um",
    "going",
    "actually",
    "uh",
    "put",
    "identifiers",
    "enable",
    "us",
    "uh",
    "let",
    "us",
    "select",
    "css",
    "going",
    "say",
    "price",
    "um",
    "price",
    "container",
    "id",
    "price",
    "id",
    "um",
    "price",
    "frequency",
    "something",
    "like",
    "ids",
    "basically",
    "um",
    "select",
    "little",
    "components",
    "come",
    "css",
    "need",
    "set",
    "price",
    "font",
    "weight",
    "700",
    "come",
    "bottom",
    "set",
    "price",
    "font",
    "weight",
    "700",
    "see",
    "gets",
    "little",
    "bit",
    "bolder",
    "uncomment",
    "bold",
    "comment",
    "back",
    "going",
    "bold",
    "give",
    "us",
    "ballpark",
    "uh",
    "font",
    "size",
    "let",
    "go",
    "ahead",
    "say",
    "rem",
    "basically",
    "going",
    "140",
    "root",
    "elements",
    "font",
    "size",
    "know",
    "16",
    "pixels",
    "140",
    "time",
    "16",
    "pixels",
    "many",
    "pixels",
    "made",
    "font",
    "size",
    "right",
    "looking",
    "back",
    "getting",
    "closer",
    "far",
    "think",
    "next",
    "obvious",
    "thing",
    "going",
    "missing",
    "button",
    "cuz",
    "button",
    "looks",
    "terrible",
    "uh",
    "comparison",
    "let",
    "go",
    "ahead",
    "make",
    "button",
    "size",
    "also",
    "background",
    "color",
    "already",
    "selected",
    "button",
    "could",
    "give",
    "um",
    "white",
    "text",
    "uh",
    "go",
    "ahead",
    "grab",
    "color",
    "code",
    "used",
    "h4",
    "apply",
    "background",
    "color",
    "button",
    "give",
    "background",
    "color",
    "light",
    "green",
    "see",
    "default",
    "border",
    "looks",
    "pretty",
    "terrible",
    "set",
    "border",
    "equal",
    "none",
    "makes",
    "look",
    "little",
    "bit",
    "better",
    "spacing",
    "uh",
    "around",
    "text",
    "good",
    "use",
    "padding",
    "need",
    "come",
    "add",
    "say",
    "10",
    "pixels",
    "padding",
    "looks",
    "roughly",
    "correct",
    "finally",
    "see",
    "border",
    "radius",
    "button",
    "curves",
    "around",
    "edges",
    "equal",
    "kind",
    "size",
    "container",
    "remember",
    "put",
    "padding",
    "around",
    "edges",
    "container",
    "new",
    "um",
    "size",
    "going",
    "able",
    "say",
    "100",
    "believe",
    "let",
    "say",
    "width",
    "going",
    "100",
    "yes",
    "going",
    "get",
    "get",
    "us",
    "equal",
    "uh",
    "parent",
    "container",
    "point",
    "need",
    "add",
    "border",
    "radius",
    "call",
    "five",
    "pixels",
    "think",
    "button",
    "looking",
    "pretty",
    "good",
    "um",
    "looks",
    "like",
    "little",
    "bit",
    "wider",
    "right",
    "worried",
    "perspective",
    "uh",
    "pretty",
    "good",
    "important",
    "part",
    "100",
    "container",
    "think",
    "point",
    "colors",
    "um",
    "place",
    "let",
    "check",
    "yes",
    "colors",
    "need",
    "font",
    "family",
    "correct",
    "need",
    "two",
    "things",
    "need",
    "get",
    "font",
    "sizes",
    "font",
    "weights",
    "um",
    "little",
    "bit",
    "better",
    "also",
    "need",
    "get",
    "everything",
    "spaced",
    "uh",
    "price",
    "frequency",
    "horizontal",
    "going",
    "go",
    "ahead",
    "say",
    "top",
    "section",
    "completely",
    "done",
    "know",
    "perfectly",
    "aligned",
    "design",
    "close",
    "um",
    "part",
    "looking",
    "much",
    "larger",
    "version",
    "um",
    "never",
    "going",
    "get",
    "like",
    "exactly",
    "perfectly",
    "worth",
    "time",
    "um",
    "let",
    "go",
    "ahead",
    "start",
    "working",
    "bottom",
    "left",
    "box",
    "monthly",
    "subscription",
    "um",
    "looks",
    "okay",
    "little",
    "bit",
    "heavy",
    "font",
    "worried",
    "needs",
    "space",
    "price",
    "let",
    "target",
    "right",
    "put",
    "margin",
    "bottom",
    "way",
    "go",
    "find",
    "html",
    "uh",
    "tag",
    "want",
    "bottom",
    "left",
    "section",
    "like",
    "top",
    "section",
    "target",
    "individual",
    "elements",
    "target",
    "want",
    "use",
    "combinator",
    "say",
    "um",
    "want",
    "target",
    "h4",
    "potentially",
    "um",
    "let",
    "see",
    "monthly",
    "subscription",
    "h4",
    "h4",
    "entire",
    "section",
    "pretty",
    "safe",
    "target",
    "combinator",
    "want",
    "give",
    "margin",
    "bottom",
    "call",
    "20",
    "pixels",
    "um",
    "think",
    "pretty",
    "good",
    "maybe",
    "little",
    "much",
    "maybe",
    "go",
    "something",
    "like",
    "uh",
    "five",
    "15",
    "pixels",
    "okay",
    "like",
    "next",
    "part",
    "going",
    "take",
    "per",
    "month",
    "drag",
    "onto",
    "line",
    "29",
    "target",
    "bottom",
    "left",
    "section",
    "actually",
    "going",
    "target",
    "individual",
    "price",
    "container",
    "um",
    "work",
    "specifically",
    "uh",
    "layout",
    "want",
    "grab",
    "price",
    "frequency",
    "right",
    "target",
    "price",
    "frequency",
    "want",
    "display",
    "inline",
    "block",
    "want",
    "come",
    "line",
    "uh",
    "next",
    "29",
    "moment",
    "um",
    "29",
    "inline",
    "block",
    "target",
    "say",
    "price",
    "frequency",
    "um",
    "actual",
    "price",
    "blocks",
    "coming",
    "um",
    "onto",
    "line",
    "since",
    "elements",
    "within",
    "div",
    "container",
    "price",
    "container",
    "say",
    "entire",
    "price",
    "container",
    "want",
    "margin",
    "bottom",
    "call",
    "20",
    "10",
    "pixels",
    "see",
    "per",
    "month",
    "kind",
    "aligned",
    "bottom",
    "29",
    "quick",
    "way",
    "um",
    "know",
    "using",
    "flex",
    "x",
    "box",
    "would",
    "super",
    "easy",
    "um",
    "kind",
    "quick",
    "hack",
    "change",
    "set",
    "position",
    "element",
    "relative",
    "allows",
    "us",
    "uh",
    "basically",
    "remember",
    "first",
    "video",
    "css",
    "crash",
    "course",
    "talked",
    "relatively",
    "positioned",
    "elements",
    "um",
    "set",
    "basically",
    "relative",
    "give",
    "top",
    "property",
    "want",
    "bring",
    "upward",
    "basically",
    "want",
    "negative",
    "amount",
    "pixels",
    "say",
    "want",
    "bring",
    "maybe",
    "three",
    "pixels",
    "see",
    "per",
    "month",
    "kind",
    "goes",
    "little",
    "bit",
    "uh",
    "watch",
    "per",
    "month",
    "going",
    "uncomment",
    "going",
    "comment",
    "going",
    "go",
    "back",
    "bottom",
    "going",
    "put",
    "back",
    "goes",
    "middle",
    "kind",
    "like",
    "sitting",
    "furthermore",
    "price",
    "frequency",
    "font",
    "size",
    "little",
    "bit",
    "smaller",
    "give",
    "8",
    "r",
    "little",
    "bit",
    "closer",
    "um",
    "also",
    "see",
    "little",
    "bit",
    "space",
    "29",
    "also",
    "little",
    "bit",
    "lighter",
    "quite",
    "uh",
    "punchy",
    "white",
    "color",
    "would",
    "maybe",
    "give",
    "trans",
    "transparency",
    "could",
    "give",
    "opacity",
    "maybe",
    "point8",
    "makes",
    "little",
    "bit",
    "lighter",
    "us",
    "maybe",
    "even",
    "7",
    "okay",
    "like",
    "finally",
    "margin",
    "left",
    "maybe",
    "five",
    "pixels",
    "see",
    "spaces",
    "right",
    "pretty",
    "happy",
    "got",
    "spaced",
    "um",
    "relatively",
    "relatively",
    "close",
    "style",
    "position",
    "like",
    "size",
    "29",
    "think",
    "done",
    "little",
    "subc",
    "component",
    "top",
    "bottom",
    "left",
    "container",
    "next",
    "full",
    "access",
    "less",
    "dollar",
    "day",
    "uh",
    "little",
    "bit",
    "large",
    "opinion",
    "um",
    "looks",
    "like",
    "text",
    "even",
    "little",
    "bit",
    "smaller",
    "paragraph",
    "text",
    "probably",
    "want",
    "make",
    "little",
    "bit",
    "smaller",
    "relation",
    "paragraph",
    "text",
    "way",
    "paragraph",
    "element",
    "within",
    "bottom",
    "left",
    "section",
    "uh",
    "grab",
    "bottom",
    "left",
    "section",
    "make",
    "maybe",
    "even",
    "copy",
    "rule",
    "right",
    "target",
    "p",
    "elements",
    "single",
    "element",
    "give",
    "font",
    "size",
    "maybe",
    "rem",
    "units",
    "gives",
    "us",
    "nice",
    "size",
    "maybe",
    "make",
    "even",
    "little",
    "bit",
    "smaller",
    "80",
    "original",
    "text",
    "size",
    "16",
    "pixels",
    "finally",
    "bring",
    "button",
    "way",
    "bottom",
    "couple",
    "ways",
    "um",
    "one",
    "ways",
    "would",
    "know",
    "taking",
    "p",
    "element",
    "putting",
    "margin",
    "bottom",
    "maybe",
    "40",
    "pixels",
    "bring",
    "button",
    "flipping",
    "two",
    "seeing",
    "uh",
    "text",
    "right",
    "kind",
    "middle",
    "top",
    "button",
    "going",
    "change",
    "uh",
    "alignments",
    "think",
    "need",
    "little",
    "bit",
    "margin",
    "monthly",
    "uh",
    "subscription",
    "let",
    "add",
    "maybe",
    "25",
    "pixels",
    "instead",
    "15",
    "gives",
    "us",
    "nice",
    "little",
    "layout",
    "perfect",
    "um",
    "exactly",
    "fairly",
    "close",
    "gotten",
    "functional",
    "uh",
    "layouts",
    "pretty",
    "good",
    "point",
    "think",
    "done",
    "top",
    "done",
    "bottom",
    "left",
    "bottom",
    "right",
    "relatively",
    "simple",
    "us",
    "piece",
    "already",
    "pretty",
    "good",
    "like",
    "sitting",
    "alignment",
    "monthly",
    "subscription",
    "size",
    "uh",
    "good",
    "need",
    "take",
    "bullet",
    "points",
    "list",
    "item",
    "align",
    "two",
    "uh",
    "left",
    "let",
    "see",
    "would",
    "really",
    "show",
    "going",
    "let",
    "open",
    "chrome",
    "dev",
    "tools",
    "try",
    "rearrange",
    "see",
    "everything",
    "um",
    "little",
    "bit",
    "weird",
    "debugging",
    "html",
    "css",
    "cod",
    "pen",
    "environment",
    "got",
    "different",
    "windows",
    "open",
    "really",
    "uh",
    "right",
    "side",
    "elements",
    "uh",
    "looking",
    "html",
    "page",
    "click",
    "um",
    "selector",
    "come",
    "grab",
    "entire",
    "list",
    "looking",
    "immediately",
    "see",
    "um",
    "sort",
    "know",
    "padding",
    "margin",
    "around",
    "list",
    "default",
    "margin",
    "fine",
    "bother",
    "green",
    "little",
    "box",
    "left",
    "side",
    "text",
    "default",
    "padding",
    "added",
    "list",
    "generally",
    "want",
    "lists",
    "kind",
    "indented",
    "main",
    "text",
    "would",
    "want",
    "want",
    "go",
    "style",
    "right",
    "basically",
    "say",
    "padding",
    "equal",
    "zero",
    "going",
    "see",
    "everything",
    "goes",
    "left",
    "lines",
    "text",
    "like",
    "want",
    "last",
    "thing",
    "bullet",
    "points",
    "want",
    "actually",
    "set",
    "list",
    "style",
    "property",
    "set",
    "none",
    "bullet",
    "points",
    "go",
    "away",
    "two",
    "changes",
    "make",
    "get",
    "work",
    "let",
    "go",
    "ahead",
    "refresh",
    "page",
    "get",
    "reset",
    "changes",
    "made",
    "actually",
    "temporary",
    "come",
    "bottom",
    "since",
    "one",
    "list",
    "entire",
    "html",
    "document",
    "target",
    "tag",
    "say",
    "padding",
    "equal",
    "zero",
    "list",
    "style",
    "none",
    "removed",
    "list",
    "styling",
    "using",
    "attribute",
    "uh",
    "property",
    "remove",
    "padding",
    "left",
    "lining",
    "like",
    "design",
    "missing",
    "looks",
    "little",
    "bit",
    "smaller",
    "also",
    "um",
    "uh",
    "intense",
    "white",
    "color",
    "looks",
    "like",
    "opacity",
    "might",
    "little",
    "bit",
    "lower",
    "similar",
    "per",
    "month",
    "um",
    "piece",
    "text",
    "need",
    "say",
    "font",
    "size",
    "bring",
    "uh",
    "say",
    "one",
    "um8",
    "rem",
    "80",
    "root",
    "element",
    "size",
    "80",
    "16",
    "pixels",
    "bring",
    "opacity",
    "to8",
    "well",
    "think",
    "looks",
    "pretty",
    "pretty",
    "good",
    "exact",
    "pretty",
    "much",
    "line",
    "uh",
    "everything",
    "point",
    "think",
    "pretty",
    "much",
    "done",
    "um",
    "remaining",
    "item",
    "think",
    "button",
    "right",
    "button",
    "currently",
    "anything",
    "hover",
    "want",
    "change",
    "especially",
    "cu",
    "part",
    "requirements",
    "button",
    "styles",
    "um",
    "block",
    "right",
    "order",
    "style",
    "hover",
    "need",
    "give",
    "pseudo",
    "class",
    "hover",
    "something",
    "talked",
    "think",
    "first",
    "lesson",
    "crash",
    "course",
    "first",
    "thing",
    "always",
    "want",
    "hover",
    "change",
    "cursor",
    "pointer",
    "see",
    "cursor",
    "changes",
    "hover",
    "button",
    "indicate",
    "user",
    "hey",
    "click",
    "also",
    "probably",
    "want",
    "change",
    "color",
    "hover",
    "cursor",
    "obvious",
    "enough",
    "could",
    "take",
    "uh",
    "background",
    "color",
    "right",
    "already",
    "button",
    "make",
    "little",
    "bit",
    "lighter",
    "little",
    "bit",
    "darker",
    "let",
    "grab",
    "hex",
    "code",
    "bring",
    "color",
    "wheel",
    "adobe",
    "color",
    "let",
    "see",
    "find",
    "like",
    "shade",
    "would",
    "work",
    "think",
    "something",
    "like",
    "maybe",
    "one",
    "right",
    "would",
    "okay",
    "bring",
    "change",
    "background",
    "color",
    "hover",
    "state",
    "little",
    "bit",
    "darker",
    "color",
    "going",
    "effect",
    "showing",
    "us",
    "oh",
    "hey",
    "click",
    "going",
    "something",
    "make",
    "even",
    "pronounced",
    "property",
    "use",
    "called",
    "transform",
    "plenty",
    "uh",
    "values",
    "pass",
    "one",
    "going",
    "scale",
    "function",
    "say",
    "like",
    "something",
    "like",
    "scale",
    "110",
    "see",
    "know",
    "gets",
    "little",
    "bit",
    "larger",
    "hover",
    "even",
    "little",
    "extreme",
    "maybe",
    "102",
    "like",
    "nice",
    "little",
    "subtle",
    "indication",
    "user",
    "hover",
    "click",
    "something",
    "right",
    "button",
    "anything",
    "fun",
    "add",
    "something",
    "come",
    "use",
    "learned",
    "prior",
    "lessons",
    "uh",
    "full",
    "stack",
    "road",
    "map",
    "come",
    "button",
    "add",
    "onclick",
    "listener",
    "pass",
    "function",
    "alert",
    "user",
    "created",
    "yet",
    "come",
    "js",
    "section",
    "say",
    "alert",
    "user",
    "pass",
    "alert",
    "says",
    "hey",
    "clicked",
    "button",
    "let",
    "finish",
    "one",
    "click",
    "button",
    "going",
    "alert",
    "user",
    "clicked",
    "obviously",
    "know",
    "useful",
    "nice",
    "little",
    "addition",
    "make",
    "little",
    "bit",
    "interactive",
    "final",
    "thing",
    "could",
    "make",
    "mobile",
    "responsive",
    "mean",
    "drag",
    "right",
    "side",
    "left",
    "see",
    "disappears",
    "um",
    "right",
    "flows",
    "page",
    "terrible",
    "user",
    "experience",
    "mobile",
    "would",
    "size",
    "mobile",
    "device",
    "user",
    "know",
    "looked",
    "uh",
    "design",
    "going",
    "see",
    "completely",
    "useless",
    "would",
    "want",
    "make",
    "mobile",
    "design",
    "see",
    "frontend",
    "menor",
    "challenge",
    "tells",
    "need",
    "design",
    "something",
    "like",
    "talked",
    "mobile",
    "responsive",
    "design",
    "quite",
    "yet",
    "going",
    "cover",
    "completely",
    "separate",
    "video",
    "think",
    "might",
    "next",
    "video",
    "one",
    "going",
    "keep",
    "desktop",
    "future",
    "challenges",
    "future",
    "menor",
    "challenges",
    "make",
    "ro",
    "uh",
    "make",
    "mobile",
    "responsive",
    "one",
    "thing",
    "want",
    "quick",
    "easy",
    "give",
    "least",
    "little",
    "bit",
    "win",
    "terms",
    "uh",
    "able",
    "share",
    "show",
    "come",
    "github",
    "let",
    "open",
    "new",
    "tab",
    "go",
    "github",
    "followed",
    "along",
    "full",
    "stack",
    "road",
    "map",
    "um",
    "beginning",
    "asked",
    "create",
    "github",
    "account",
    "going",
    "need",
    "developer",
    "matter",
    "kind",
    "expected",
    "github",
    "profile",
    "already",
    "got",
    "one",
    "great",
    "go",
    "ahead",
    "create",
    "one",
    "let",
    "go",
    "ahead",
    "click",
    "create",
    "new",
    "repository",
    "right",
    "say",
    "uh",
    "pricing",
    "card",
    "frontend",
    "menor",
    "challenge",
    "going",
    "name",
    "repository",
    "going",
    "call",
    "implementation",
    "frontend",
    "menor",
    "code",
    "challenge",
    "going",
    "make",
    "public",
    "really",
    "need",
    "initialize",
    "let",
    "go",
    "ahead",
    "add",
    "read",
    "show",
    "click",
    "create",
    "repository",
    "going",
    "go",
    "uh",
    "version",
    "control",
    "actually",
    "get",
    "within",
    "terminal",
    "little",
    "bit",
    "later",
    "series",
    "right",
    "going",
    "use",
    "github",
    "uh",
    "ui",
    "user",
    "interface",
    "post",
    "code",
    "deploy",
    "github",
    "pages",
    "github",
    "pages",
    "going",
    "going",
    "allow",
    "host",
    "challenge",
    "created",
    "web",
    "share",
    "url",
    "initialized",
    "repository",
    "every",
    "repo",
    "repository",
    "going",
    "read",
    "least",
    "give",
    "introduction",
    "repository",
    "often",
    "times",
    "building",
    "web",
    "app",
    "readme",
    "give",
    "instructions",
    "run",
    "locally",
    "develop",
    "know",
    "get",
    "point",
    "within",
    "repository",
    "obviously",
    "could",
    "make",
    "files",
    "local",
    "computer",
    "use",
    "version",
    "control",
    "push",
    "files",
    "interface",
    "right",
    "going",
    "add",
    "file",
    "going",
    "click",
    "create",
    "new",
    "file",
    "one",
    "going",
    "called",
    "basically",
    "um",
    "html",
    "created",
    "default",
    "html",
    "document",
    "github",
    "pages",
    "going",
    "look",
    "trying",
    "serve",
    "know",
    "live",
    "url",
    "needs",
    "named",
    "go",
    "back",
    "html",
    "copy",
    "paste",
    "body",
    "section",
    "implemented",
    "since",
    "code",
    "pen",
    "already",
    "implements",
    "head",
    "tag",
    "um",
    "body",
    "tag",
    "going",
    "need",
    "add",
    "pieces",
    "order",
    "work",
    "first",
    "thing",
    "going",
    "actually",
    "let",
    "let",
    "come",
    "back",
    "write",
    "structure",
    "basically",
    "come",
    "top",
    "say",
    "need",
    "html",
    "tag",
    "cop",
    "one",
    "put",
    "bottom",
    "furthermore",
    "let",
    "zoom",
    "little",
    "bit",
    "see",
    "working",
    "need",
    "head",
    "tag",
    "call",
    "uh",
    "front",
    "end",
    "say",
    "pricing",
    "card",
    "title",
    "going",
    "show",
    "little",
    "tab",
    "viewing",
    "live",
    "close",
    "head",
    "tag",
    "come",
    "back",
    "second",
    "add",
    "fonts",
    "put",
    "got",
    "body",
    "tag",
    "going",
    "closed",
    "way",
    "bottom",
    "lastly",
    "let",
    "indent",
    "everything",
    "proper",
    "level",
    "see",
    "wrapped",
    "everything",
    "together",
    "html",
    "last",
    "thing",
    "going",
    "need",
    "link",
    "style",
    "sheets",
    "fonts",
    "go",
    "back",
    "pricing",
    "card",
    "go",
    "settings",
    "html",
    "going",
    "need",
    "stuff",
    "head",
    "going",
    "put",
    "right",
    "title",
    "see",
    "two",
    "link",
    "tags",
    "furthermore",
    "going",
    "link",
    "uh",
    "css",
    "stylesheet",
    "put",
    "second",
    "way",
    "another",
    "link",
    "tag",
    "believe",
    "um",
    "href",
    "going",
    "going",
    "create",
    "second",
    "stylesheet",
    "close",
    "means",
    "basically",
    "want",
    "pull",
    "uh",
    "file",
    "called",
    "directory",
    "um",
    "basically",
    "hosting",
    "file",
    "see",
    "uh",
    "means",
    "second",
    "let",
    "go",
    "ahead",
    "commit",
    "new",
    "file",
    "go",
    "add",
    "another",
    "file",
    "one",
    "going",
    "talked",
    "linked",
    "within",
    "html",
    "able",
    "paste",
    "css",
    "right",
    "created",
    "nothing",
    "nothing",
    "else",
    "go",
    "ahead",
    "commit",
    "file",
    "finally",
    "need",
    "add",
    "javascript",
    "file",
    "um",
    "added",
    "lines",
    "javascript",
    "order",
    "work",
    "need",
    "actually",
    "connect",
    "html",
    "way",
    "going",
    "go",
    "back",
    "html",
    "file",
    "click",
    "edit",
    "come",
    "bottom",
    "body",
    "need",
    "um",
    "script",
    "tag",
    "type",
    "script",
    "tag",
    "self",
    "closing",
    "actually",
    "two",
    "pieces",
    "need",
    "give",
    "source",
    "going",
    "say",
    "um",
    "uh",
    "let",
    "say",
    "going",
    "call",
    "javascript",
    "um",
    "document",
    "commit",
    "changes",
    "believe",
    "work",
    "um",
    "long",
    "go",
    "main",
    "file",
    "main",
    "directory",
    "add",
    "javascript",
    "file",
    "need",
    "name",
    "index",
    "referred",
    "html",
    "able",
    "paste",
    "function",
    "created",
    "commit",
    "file",
    "um",
    "complete",
    "repository",
    "believe",
    "unless",
    "miss",
    "something",
    "find",
    "second",
    "thing",
    "need",
    "add",
    "another",
    "branch",
    "um",
    "little",
    "bit",
    "complex",
    "getting",
    "version",
    "control",
    "branching",
    "basically",
    "rule",
    "within",
    "github",
    "make",
    "branch",
    "called",
    "pages",
    "github",
    "pages",
    "automatically",
    "going",
    "look",
    "know",
    "file",
    "different",
    "branch",
    "going",
    "deploy",
    "automatically",
    "lot",
    "heavy",
    "lifting",
    "kind",
    "think",
    "behind",
    "scenes",
    "magic",
    "later",
    "learn",
    "works",
    "going",
    "create",
    "branch",
    "called",
    "github",
    "pages",
    "going",
    "create",
    "main",
    "uh",
    "branch",
    "going",
    "copy",
    "files",
    "uh",
    "okay",
    "point",
    "got",
    "files",
    "github",
    "pages",
    "everything",
    "correctly",
    "usually",
    "happen",
    "coding",
    "um",
    "show",
    "github",
    "pages",
    "link",
    "let",
    "see",
    "click",
    "view",
    "deployment",
    "awesome",
    "looks",
    "like",
    "card",
    "actually",
    "deploy",
    "correctly",
    "styles",
    "cuz",
    "styled",
    "click",
    "sign",
    "hopefully",
    "get",
    "alert",
    "awesome",
    "um",
    "deploy",
    "link",
    "copy",
    "paste",
    "link",
    "share",
    "anyone",
    "see",
    "project",
    "worked",
    "could",
    "also",
    "submit",
    "menor",
    "wanted",
    "get",
    "feedback",
    "project",
    "um",
    "awesome",
    "got",
    "something",
    "deployed",
    "shareable",
    "music",
    "saw",
    "intro",
    "goal",
    "web",
    "developers",
    "avoid",
    "users",
    "hurting",
    "eyes",
    "look",
    "web",
    "application",
    "desktop",
    "device",
    "tablet",
    "mobile",
    "device",
    "whatever",
    "viewing",
    "let",
    "take",
    "look",
    "prerequisites",
    "basically",
    "html",
    "css",
    "covered",
    "um",
    "part",
    "prior",
    "lessons",
    "series",
    "let",
    "talk",
    "second",
    "going",
    "covering",
    "massive",
    "topic",
    "um",
    "justice",
    "defining",
    "exactly",
    "going",
    "learning",
    "going",
    "start",
    "right",
    "side",
    "screen",
    "um",
    "said",
    "best",
    "designer",
    "designer",
    "world",
    "um",
    "graphic",
    "design",
    "generally",
    "painful",
    "experience",
    "um",
    "put",
    "together",
    "decent",
    "designs",
    "years",
    "nothing",
    "know",
    "could",
    "call",
    "designer",
    "form",
    "fashion",
    "good",
    "news",
    "fullstack",
    "web",
    "developer",
    "need",
    "great",
    "graphic",
    "designer",
    "reason",
    "going",
    "teach",
    "design",
    "side",
    "things",
    "talked",
    "um",
    "previously",
    "series",
    "going",
    "going",
    "making",
    "challenges",
    "html",
    "css",
    "even",
    "javascript",
    "frontend",
    "menor",
    "one",
    "designs",
    "going",
    "create",
    "learn",
    "css",
    "grid",
    "flexbox",
    "next",
    "couple",
    "videos",
    "see",
    "uh",
    "responsive",
    "design",
    "going",
    "talk",
    "second",
    "likewise",
    "challenge",
    "right",
    "another",
    "um",
    "looks",
    "like",
    "crowdfunding",
    "page",
    "fun",
    "one",
    "notice",
    "going",
    "course",
    "leveraging",
    "existing",
    "designs",
    "trying",
    "point",
    "video",
    "teach",
    "leverage",
    "existing",
    "designs",
    "make",
    "sure",
    "um",
    "everything",
    "responsive",
    "looks",
    "good",
    "devices",
    "might",
    "see",
    "lessons",
    "going",
    "learn",
    "video",
    "first",
    "responsive",
    "design",
    "probably",
    "general",
    "idea",
    "dive",
    "little",
    "deeper",
    "next",
    "talking",
    "mobile",
    "first",
    "versus",
    "desktop",
    "first",
    "designs",
    "honestly",
    "took",
    "years",
    "figure",
    "actually",
    "meant",
    "um",
    "looking",
    "back",
    "kind",
    "silly",
    "hard",
    "uh",
    "going",
    "talk",
    "mobile",
    "first",
    "versus",
    "desktop",
    "first",
    "next",
    "talk",
    "css",
    "breakpoints",
    "relate",
    "media",
    "queries",
    "actually",
    "write",
    "media",
    "queries",
    "within",
    "web",
    "apps",
    "finally",
    "going",
    "leave",
    "responsive",
    "design",
    "checklist",
    "going",
    "super",
    "detailed",
    "highle",
    "checklist",
    "go",
    "make",
    "sure",
    "covering",
    "bases",
    "little",
    "project",
    "going",
    "take",
    "design",
    "previous",
    "video",
    "previous",
    "video",
    "link",
    "designed",
    "pricing",
    "card",
    "see",
    "pricing",
    "card",
    "resize",
    "screen",
    "gets",
    "cut",
    "going",
    "teach",
    "challenge",
    "end",
    "video",
    "take",
    "situation",
    "turn",
    "one",
    "resize",
    "gets",
    "close",
    "gets",
    "close",
    "boom",
    "breaks",
    "looks",
    "lot",
    "better",
    "mobile",
    "device",
    "something",
    "users",
    "angry",
    "let",
    "go",
    "ahead",
    "dive",
    "question",
    "responsive",
    "web",
    "design",
    "answer",
    "least",
    "head",
    "like",
    "keep",
    "simple",
    "remember",
    "users",
    "um",
    "hurt",
    "eyes",
    "looking",
    "web",
    "page",
    "desktop",
    "device",
    "mobile",
    "device",
    "tablet",
    "whatever",
    "viewing",
    "designed",
    "responsibly",
    "good",
    "little",
    "way",
    "remember",
    "responsive",
    "design",
    "thing",
    "2021",
    "lot",
    "website",
    "builders",
    "know",
    "squarespace",
    "wix",
    "wordpress",
    "um",
    "bunch",
    "website",
    "builders",
    "kind",
    "take",
    "care",
    "responsiveness",
    "reason",
    "websites",
    "nowadays",
    "responsive",
    "look",
    "pretty",
    "good",
    "hard",
    "time",
    "actually",
    "finding",
    "bad",
    "example",
    "responsive",
    "web",
    "design",
    "reason",
    "created",
    "one",
    "going",
    "anything",
    "um",
    "crazy",
    "let",
    "close",
    "tabs",
    "created",
    "know",
    "basic",
    "example",
    "bad",
    "web",
    "design",
    "things",
    "notice",
    "make",
    "larger",
    "larger",
    "pretty",
    "big",
    "screen",
    "working",
    "notice",
    "things",
    "first",
    "eyes",
    "read",
    "across",
    "text",
    "cover",
    "lot",
    "real",
    "estate",
    "screen",
    "actually",
    "get",
    "one",
    "single",
    "line",
    "text",
    "kind",
    "comes",
    "responsive",
    "web",
    "design",
    "want",
    "text",
    "know",
    "generally",
    "less",
    "call",
    "700",
    "pixels",
    "um",
    "needs",
    "know",
    "middle",
    "screen",
    "needs",
    "narrow",
    "enough",
    "eyes",
    "basically",
    "move",
    "great",
    "distances",
    "read",
    "one",
    "piece",
    "another",
    "piece",
    "see",
    "nav",
    "bar",
    "got",
    "couple",
    "links",
    "left",
    "couple",
    "right",
    "spaced",
    "point",
    "almost",
    "spaced",
    "couple",
    "issues",
    "going",
    "um",
    "wide",
    "screen",
    "make",
    "narrow",
    "going",
    "see",
    "something",
    "going",
    "hurt",
    "eyes",
    "point",
    "responsive",
    "design",
    "get",
    "smaller",
    "could",
    "mobile",
    "device",
    "sort",
    "see",
    "two",
    "columns",
    "going",
    "work",
    "mobile",
    "device",
    "want",
    "content",
    "know",
    "full",
    "width",
    "mobile",
    "uh",
    "screen",
    "also",
    "links",
    "top",
    "contact",
    "link",
    "almost",
    "getting",
    "cut",
    "point",
    "ca",
    "even",
    "click",
    "see",
    "anything",
    "big",
    "problem",
    "viewing",
    "mobile",
    "device",
    "went",
    "ahead",
    "improved",
    "little",
    "bit",
    "improved",
    "uh",
    "version",
    "design",
    "see",
    "wide",
    "screen",
    "article",
    "text",
    "certain",
    "width",
    "think",
    "made",
    "something",
    "like",
    "650",
    "pixels",
    "wide",
    "max",
    "maximum",
    "see",
    "skim",
    "text",
    "without",
    "know",
    "moving",
    "heads",
    "left",
    "right",
    "also",
    "see",
    "navar",
    "brought",
    "links",
    "know",
    "edges",
    "page",
    "resize",
    "going",
    "see",
    "um",
    "everything",
    "changes",
    "right",
    "around",
    "believe",
    "somewhere",
    "right",
    "see",
    "break",
    "point",
    "column",
    "goes",
    "main",
    "text",
    "going",
    "little",
    "bit",
    "easier",
    "see",
    "also",
    "see",
    "links",
    "top",
    "going",
    "turn",
    "navigation",
    "menu",
    "anything",
    "want",
    "spend",
    "time",
    "would",
    "like",
    "drop",
    "could",
    "see",
    "links",
    "left",
    "home",
    "link",
    "still",
    "navigate",
    "way",
    "even",
    "really",
    "small",
    "device",
    "see",
    "know",
    "looks",
    "pretty",
    "good",
    "obviously",
    "visually",
    "pleasing",
    "design",
    "world",
    "um",
    "meant",
    "meant",
    "show",
    "generally",
    "responsive",
    "design",
    "get",
    "better",
    "grasp",
    "let",
    "take",
    "look",
    "really",
    "good",
    "examples",
    "responsive",
    "design",
    "point",
    "things",
    "good",
    "two",
    "portfolio",
    "sites",
    "going",
    "looking",
    "um",
    "cassie",
    "evans",
    "really",
    "nice",
    "looking",
    "site",
    "jason",
    "langdorf",
    "think",
    "said",
    "right",
    "know",
    "either",
    "people",
    "found",
    "portfolio",
    "sites",
    "really",
    "visually",
    "pleasing",
    "done",
    "really",
    "good",
    "job",
    "responding",
    "different",
    "screen",
    "sizes",
    "look",
    "um",
    "let",
    "go",
    "ahead",
    "break",
    "window",
    "kind",
    "resize",
    "let",
    "take",
    "look",
    "websites",
    "react",
    "different",
    "screen",
    "sizes",
    "uh",
    "cassie",
    "website",
    "homepage",
    "see",
    "resize",
    "mobile",
    "device",
    "big",
    "text",
    "going",
    "get",
    "broken",
    "main",
    "portion",
    "going",
    "get",
    "rid",
    "image",
    "right",
    "little",
    "nicer",
    "see",
    "mobile",
    "device",
    "scroll",
    "see",
    "everything",
    "kind",
    "full",
    "width",
    "bring",
    "back",
    "desktop",
    "got",
    "nice",
    "little",
    "layout",
    "kind",
    "get",
    "point",
    "really",
    "nice",
    "uh",
    "example",
    "good",
    "response",
    "design",
    "right",
    "likewise",
    "uh",
    "jason",
    "site",
    "pretty",
    "good",
    "respect",
    "see",
    "picture",
    "left",
    "desktop",
    "device",
    "resize",
    "going",
    "get",
    "put",
    "top",
    "button",
    "gets",
    "little",
    "bigger",
    "easier",
    "click",
    "mobile",
    "device",
    "go",
    "smaller",
    "smaller",
    "going",
    "see",
    "really",
    "easy",
    "navigate",
    "around",
    "click",
    "blog",
    "see",
    "thing",
    "um",
    "mobile",
    "device",
    "looks",
    "really",
    "nice",
    "everything",
    "easy",
    "click",
    "um",
    "desktop",
    "also",
    "really",
    "nice",
    "see",
    "middle",
    "screen",
    "talking",
    "earlier",
    "want",
    "text",
    "full",
    "length",
    "desktop",
    "device",
    "going",
    "huge",
    "screens",
    "move",
    "head",
    "read",
    "text",
    "first",
    "place",
    "next",
    "talk",
    "mobile",
    "first",
    "versus",
    "desktop",
    "first",
    "web",
    "designs",
    "first",
    "learning",
    "honest",
    "could",
    "figure",
    "difference",
    "um",
    "everyone",
    "talking",
    "saying",
    "oh",
    "want",
    "mobile",
    "first",
    "mobile",
    "first",
    "never",
    "understood",
    "talking",
    "realized",
    "concepts",
    "mobile",
    "desktop",
    "first",
    "design",
    "nothing",
    "really",
    "design",
    "phase",
    "project",
    "everything",
    "start",
    "writing",
    "css",
    "really",
    "important",
    "know",
    "learning",
    "concepts",
    "really",
    "separate",
    "design",
    "phase",
    "coding",
    "phase",
    "project",
    "want",
    "get",
    "um",
    "situation",
    "trying",
    "design",
    "something",
    "code",
    "exact",
    "time",
    "designing",
    "something",
    "right",
    "brained",
    "coding",
    "something",
    "left",
    "brain",
    "going",
    "get",
    "point",
    "complete",
    "confusion",
    "trying",
    "time",
    "time",
    "rule",
    "least",
    "write",
    "code",
    "whatsoever",
    "need",
    "least",
    "basic",
    "visual",
    "representation",
    "trying",
    "create",
    "mediocre",
    "designer",
    "like",
    "design",
    "skills",
    "whatsoever",
    "know",
    "actually",
    "try",
    "design",
    "something",
    "hire",
    "someone",
    "question",
    "asking",
    "first",
    "started",
    "opinion",
    "really",
    "three",
    "options",
    "comes",
    "know",
    "getting",
    "first",
    "visual",
    "representation",
    "web",
    "page",
    "front",
    "number",
    "one",
    "hire",
    "designer",
    "design",
    "cases",
    "especially",
    "watching",
    "time",
    "go",
    "figure",
    "designer",
    "uh",
    "want",
    "hire",
    "furthermore",
    "know",
    "need",
    "pay",
    "anyone",
    "learn",
    "code",
    "kind",
    "equation",
    "later",
    "road",
    "trying",
    "actually",
    "build",
    "product",
    "sell",
    "need",
    "really",
    "professional",
    "design",
    "built",
    "second",
    "option",
    "browse",
    "internet",
    "free",
    "designs",
    "done",
    "frontend",
    "menor",
    "challenges",
    "great",
    "way",
    "kind",
    "outsource",
    "step",
    "free",
    "see",
    "got",
    "designs",
    "going",
    "creating",
    "already",
    "built",
    "us",
    "think",
    "scroll",
    "see",
    "desktop",
    "versions",
    "also",
    "mobile",
    "versions",
    "see",
    "want",
    "look",
    "uh",
    "sizes",
    "screen",
    "super",
    "worried",
    "know",
    "end",
    "product",
    "going",
    "look",
    "like",
    "want",
    "still",
    "make",
    "mobile",
    "responsive",
    "put",
    "together",
    "wireframe",
    "use",
    "tool",
    "figma",
    "um",
    "really",
    "popular",
    "place",
    "put",
    "together",
    "wireframe",
    "even",
    "mockup",
    "complete",
    "representation",
    "want",
    "build",
    "usually",
    "pencil",
    "paper",
    "good",
    "enough",
    "basic",
    "wireframe",
    "goal",
    "wireframe",
    "get",
    "general",
    "idea",
    "elements",
    "page",
    "arranged",
    "based",
    "size",
    "theen",
    "screen",
    "put",
    "something",
    "screen",
    "basic",
    "wireframe",
    "created",
    "call",
    "like",
    "blog",
    "sidebar",
    "regular",
    "content",
    "see",
    "desktop",
    "version",
    "mobile",
    "version",
    "entirely",
    "sufficient",
    "trying",
    "get",
    "basic",
    "understanding",
    "creating",
    "like",
    "said",
    "trying",
    "uh",
    "build",
    "product",
    "something",
    "great",
    "designer",
    "use",
    "tool",
    "like",
    "figma",
    "going",
    "allow",
    "put",
    "uh",
    "put",
    "together",
    "full",
    "mockups",
    "difference",
    "say",
    "wireframe",
    "mockup",
    "wireframe",
    "really",
    "care",
    "know",
    "colors",
    "fonts",
    "um",
    "detail",
    "cares",
    "kind",
    "layout",
    "elements",
    "page",
    "mockup",
    "representation",
    "trying",
    "build",
    "tool",
    "like",
    "figma",
    "adobe",
    "xd",
    "sketch",
    "couple",
    "different",
    "uh",
    "good",
    "tools",
    "allow",
    "create",
    "mockups",
    "like",
    "one",
    "looking",
    "frontend",
    "menor",
    "coded",
    "yet",
    "perfect",
    "visual",
    "representation",
    "want",
    "code",
    "tools",
    "coming",
    "back",
    "original",
    "question",
    "difference",
    "mobile",
    "first",
    "desktop",
    "first",
    "design",
    "see",
    "mockups",
    "version",
    "desktop",
    "mobile",
    "really",
    "matter",
    "one",
    "create",
    "first",
    "well",
    "answer",
    "asking",
    "wrong",
    "question",
    "took",
    "long",
    "time",
    "realize",
    "mobile",
    "first",
    "desktop",
    "first",
    "nothing",
    "actual",
    "design",
    "phase",
    "everything",
    "start",
    "writing",
    "css",
    "put",
    "together",
    "break",
    "points",
    "order",
    "understand",
    "better",
    "dive",
    "something",
    "called",
    "media",
    "query",
    "css",
    "along",
    "concept",
    "comes",
    "um",
    "concept",
    "breakpoints",
    "better",
    "understand",
    "mean",
    "say",
    "breakpoint",
    "let",
    "look",
    "code",
    "pen",
    "put",
    "together",
    "explain",
    "said",
    "said",
    "want",
    "breakpoint",
    "600",
    "pixels",
    "mean",
    "screen",
    "gets",
    "smaller",
    "bigger",
    "width",
    "600",
    "pixels",
    "want",
    "different",
    "css",
    "rules",
    "words",
    "mobile",
    "device",
    "desktop",
    "device",
    "want",
    "different",
    "css",
    "let",
    "quick",
    "review",
    "let",
    "come",
    "page",
    "really",
    "using",
    "let",
    "close",
    "um",
    "web",
    "docs",
    "css",
    "going",
    "right",
    "click",
    "inspect",
    "go",
    "console",
    "type",
    "going",
    "give",
    "us",
    "number",
    "number",
    "714",
    "visible",
    "width",
    "screen",
    "resize",
    "kind",
    "pulling",
    "left",
    "right",
    "resizing",
    "run",
    "going",
    "see",
    "get",
    "different",
    "number",
    "356",
    "pixels",
    "wide",
    "talk",
    "say",
    "viewport",
    "done",
    "written",
    "little",
    "bit",
    "javascript",
    "make",
    "slightly",
    "bigger",
    "us",
    "see",
    "done",
    "bottom",
    "basically",
    "said",
    "resizes",
    "screen",
    "want",
    "change",
    "content",
    "got",
    "span",
    "html",
    "span",
    "number",
    "going",
    "populated",
    "withth",
    "property",
    "every",
    "time",
    "screen",
    "resizes",
    "effect",
    "going",
    "see",
    "drag",
    "number",
    "going",
    "uh",
    "update",
    "live",
    "also",
    "done",
    "going",
    "learn",
    "written",
    "breakpoint",
    "minimum",
    "width",
    "600",
    "pixels",
    "included",
    "different",
    "styles",
    "within",
    "breakpoint",
    "one",
    "going",
    "um",
    "h1",
    "tag",
    "going",
    "color",
    "red",
    "screens",
    "bigger",
    "600",
    "pixels",
    "equal",
    "mobile",
    "device",
    "going",
    "color",
    "green",
    "see",
    "resize",
    "get",
    "closer",
    "600",
    "hit",
    "hit",
    "600",
    "turns",
    "green",
    "go",
    "back",
    "turns",
    "red",
    "back",
    "turns",
    "green",
    "basics",
    "css",
    "breakpoint",
    "course",
    "changing",
    "color",
    "text",
    "based",
    "screen",
    "really",
    "useful",
    "probably",
    "wo",
    "see",
    "often",
    "see",
    "see",
    "css",
    "affects",
    "layout",
    "html",
    "changing",
    "different",
    "screen",
    "sizes",
    "let",
    "go",
    "ahead",
    "uncomment",
    "um",
    "code",
    "created",
    "put",
    "couple",
    "pictures",
    "placeholder",
    "pictures",
    "um",
    "say",
    "mobile",
    "first",
    "rules",
    "top",
    "width",
    "75",
    "come",
    "break",
    "point",
    "600",
    "pixels",
    "going",
    "see",
    "image",
    "width",
    "going",
    "auto",
    "basically",
    "means",
    "going",
    "fill",
    "container",
    "effect",
    "break",
    "point",
    "600",
    "pixels",
    "going",
    "say",
    "okay",
    "600",
    "greater",
    "want",
    "um",
    "image",
    "images",
    "sitting",
    "next",
    "otherwise",
    "want",
    "put",
    "uh",
    "100",
    "width",
    "container",
    "stack",
    "top",
    "resize",
    "get",
    "closer",
    "closer",
    "600",
    "going",
    "change",
    "watch",
    "happens",
    "get",
    "600",
    "right",
    "see",
    "images",
    "went",
    "100",
    "width",
    "100",
    "width",
    "uh",
    "75",
    "width",
    "going",
    "stack",
    "top",
    "longer",
    "fit",
    "next",
    "screen",
    "good",
    "example",
    "basic",
    "cs",
    "breakpoint",
    "use",
    "rearrange",
    "layout",
    "page",
    "basic",
    "idea",
    "breakpoint",
    "css",
    "question",
    "becomes",
    "breakpoints",
    "actually",
    "use",
    "really",
    "simple",
    "answer",
    "let",
    "take",
    "look",
    "web",
    "page",
    "right",
    "screen",
    "sizes",
    "umes",
    "pretty",
    "clever",
    "going",
    "see",
    "lot",
    "different",
    "devices",
    "could",
    "possibly",
    "build",
    "web",
    "page",
    "way",
    "go",
    "hundreds",
    "hundreds",
    "different",
    "devices",
    "way",
    "optimize",
    "best",
    "guessing",
    "know",
    "screens",
    "want",
    "set",
    "break",
    "points",
    "design",
    "little",
    "bit",
    "differently",
    "general",
    "mobile",
    "devices",
    "going",
    "somewhere",
    "range",
    "320",
    "call",
    "480",
    "pixels",
    "wide",
    "tablets",
    "6",
    "800",
    "pixels",
    "know",
    "regularized",
    "laptops",
    "around",
    "know",
    "1440",
    "pixel",
    "range",
    "bigger",
    "desktop",
    "devices",
    "going",
    "width",
    "call",
    "2500",
    "pixels",
    "generalizations",
    "um",
    "see",
    "screen",
    "sorts",
    "different",
    "numbers",
    "want",
    "get",
    "discussion",
    "things",
    "like",
    "pixel",
    "density",
    "difference",
    "actual",
    "width",
    "device",
    "adapted",
    "pixel",
    "uh",
    "interpretation",
    "us",
    "web",
    "developers",
    "pretty",
    "complicated",
    "topic",
    "remember",
    "guidelines",
    "mentioned",
    "good",
    "deciding",
    "break",
    "points",
    "need",
    "use",
    "um",
    "web",
    "page",
    "web",
    "app",
    "ask",
    "three",
    "questions",
    "opinion",
    "first",
    "one",
    "going",
    "web",
    "page",
    "even",
    "used",
    "mobile",
    "device",
    "intention",
    "plenty",
    "apps",
    "meant",
    "used",
    "mobile",
    "device",
    "think",
    "budgeting",
    "apps",
    "know",
    "big",
    "spreadsheets",
    "things",
    "look",
    "good",
    "mobile",
    "device",
    "probably",
    "want",
    "waste",
    "time",
    "energy",
    "maybe",
    "even",
    "money",
    "create",
    "pleasing",
    "mobile",
    "experience",
    "going",
    "say",
    "users",
    "hey",
    "meant",
    "mobile",
    "device",
    "using",
    "application",
    "desktop",
    "another",
    "consideration",
    "would",
    "offering",
    "mobile",
    "application",
    "know",
    "good",
    "example",
    "might",
    "something",
    "like",
    "youtube",
    "youtube",
    "application",
    "mobile",
    "device",
    "really",
    "nice",
    "scroll",
    "use",
    "web",
    "version",
    "open",
    "browser",
    "type",
    "rather",
    "opening",
    "mobile",
    "app",
    "still",
    "semi",
    "nice",
    "experience",
    "definitely",
    "wo",
    "great",
    "experience",
    "opening",
    "mobile",
    "app",
    "creating",
    "something",
    "plan",
    "making",
    "mobile",
    "application",
    "may",
    "put",
    "quite",
    "much",
    "time",
    "thought",
    "looks",
    "different",
    "screens",
    "second",
    "question",
    "might",
    "ask",
    "actually",
    "important",
    "different",
    "design",
    "screen",
    "got",
    "basic",
    "website",
    "text",
    "lot",
    "images",
    "anything",
    "like",
    "may",
    "important",
    "bunch",
    "breakpoints",
    "may",
    "able",
    "get",
    "away",
    "one",
    "design",
    "devices",
    "work",
    "fine",
    "final",
    "question",
    "ask",
    "standards",
    "know",
    "ca",
    "use",
    "industry",
    "standard",
    "everyone",
    "using",
    "breakpoints",
    "unfortunately",
    "given",
    "fact",
    "many",
    "different",
    "screen",
    "sizes",
    "screen",
    "sizes",
    "constantly",
    "changing",
    "new",
    "physical",
    "devices",
    "released",
    "world",
    "really",
    "industry",
    "standard",
    "go",
    "industry",
    "standards",
    "per",
    "se",
    "things",
    "called",
    "css",
    "frameworks",
    "talked",
    "prior",
    "videos",
    "going",
    "covering",
    "depth",
    "one",
    "css",
    "framework",
    "given",
    "fact",
    "want",
    "lock",
    "one",
    "thing",
    "want",
    "teach",
    "fundamentals",
    "css",
    "rather",
    "trying",
    "teach",
    "framework",
    "framework",
    "um",
    "piggyback",
    "comes",
    "break",
    "points",
    "smart",
    "decision",
    "least",
    "opinion",
    "guys",
    "create",
    "frameworks",
    "thinking",
    "know",
    "break",
    "points",
    "time",
    "incorporate",
    "break",
    "points",
    "frameworks",
    "therefore",
    "good",
    "enough",
    "good",
    "enough",
    "hopefully",
    "everyone",
    "watching",
    "given",
    "fact",
    "breakpoints",
    "exact",
    "science",
    "guys",
    "think",
    "lot",
    "know",
    "someone",
    "like",
    "would",
    "one",
    "popular",
    "frameworks",
    "least",
    "longstanding",
    "css",
    "frameworks",
    "bootstrap",
    "bootstrap",
    "find",
    "several",
    "tutorials",
    "kind",
    "read",
    "basically",
    "know",
    "css",
    "framework",
    "making",
    "job",
    "writing",
    "css",
    "easier",
    "lot",
    "times",
    "css",
    "frameworks",
    "going",
    "create",
    "grid",
    "systems",
    "um",
    "layout",
    "systems",
    "predefined",
    "classes",
    "pass",
    "make",
    "sites",
    "mobile",
    "responsive",
    "stuff",
    "like",
    "standard",
    "set",
    "break",
    "points",
    "scroll",
    "um",
    "bootstraps",
    "documentation",
    "list",
    "break",
    "points",
    "see",
    "five",
    "default",
    "um",
    "bootstrap",
    "call",
    "mobile",
    "first",
    "going",
    "start",
    "catch",
    "means",
    "say",
    "mobile",
    "first",
    "means",
    "first",
    "designing",
    "css",
    "mobile",
    "device",
    "saying",
    "anything",
    "greater",
    "576",
    "pixels",
    "styles",
    "anything",
    "greater",
    "768",
    "different",
    "styles",
    "basically",
    "starting",
    "mobile",
    "device",
    "writing",
    "css",
    "writing",
    "little",
    "blocks",
    "code",
    "break",
    "points",
    "define",
    "oh",
    "happens",
    "bigger",
    "device",
    "kind",
    "mean",
    "say",
    "mobile",
    "first",
    "break",
    "points",
    "got",
    "576",
    "768",
    "992",
    "small",
    "medium",
    "large",
    "uh",
    "extra",
    "large",
    "xxl",
    "standards",
    "bootstrap",
    "going",
    "standards",
    "question",
    "use",
    "answer",
    "need",
    "use",
    "every",
    "single",
    "break",
    "point",
    "need",
    "use",
    "enough",
    "break",
    "points",
    "make",
    "designs",
    "look",
    "suitable",
    "devices",
    "based",
    "creating",
    "may",
    "one",
    "two",
    "breakpoints",
    "may",
    "break",
    "points",
    "right",
    "looking",
    "example",
    "like",
    "pricing",
    "card",
    "created",
    "sure",
    "really",
    "happened",
    "um",
    "anyways",
    "pricing",
    "card",
    "really",
    "need",
    "one",
    "break",
    "point",
    "incorporating",
    "application",
    "might",
    "couple",
    "really",
    "two",
    "states",
    "create",
    "got",
    "fullon",
    "state",
    "basically",
    "tablets",
    "mobile",
    "state",
    "everything",
    "stacked",
    "top",
    "case",
    "come",
    "write",
    "uh",
    "one",
    "single",
    "break",
    "point",
    "mwidth",
    "576",
    "got",
    "right",
    "anything",
    "greater",
    "small",
    "device",
    "mobile",
    "device",
    "going",
    "x",
    "styles",
    "right",
    "theory",
    "land",
    "whole",
    "video",
    "talking",
    "design",
    "aspects",
    "break",
    "points",
    "choose",
    "actually",
    "written",
    "code",
    "yet",
    "want",
    "want",
    "show",
    "exactly",
    "write",
    "css",
    "breakpoint",
    "relates",
    "thing",
    "called",
    "media",
    "queries",
    "going",
    "come",
    "code",
    "pen",
    "make",
    "new",
    "one",
    "playground",
    "work",
    "css",
    "going",
    "write",
    "break",
    "points",
    "first",
    "need",
    "html",
    "uh",
    "say",
    "responsive",
    "web",
    "design",
    "example",
    "let",
    "put",
    "h1",
    "welcome",
    "tutorial",
    "right",
    "html",
    "work",
    "css",
    "section",
    "write",
    "break",
    "point",
    "basic",
    "syntax",
    "css",
    "breakpoint",
    "copied",
    "actually",
    "call",
    "media",
    "query",
    "breakpoint",
    "number",
    "pass",
    "minimum",
    "width",
    "media",
    "query",
    "little",
    "bit",
    "learn",
    "syntax",
    "ask",
    "media",
    "actually",
    "mean",
    "go",
    "mdn",
    "documentation",
    "let",
    "close",
    "um",
    "using",
    "far",
    "series",
    "come",
    "technology",
    "css",
    "come",
    "css",
    "reference",
    "css",
    "reference",
    "first",
    "paragraph",
    "sorts",
    "links",
    "go",
    "says",
    "use",
    "reference",
    "browse",
    "alphabetical",
    "index",
    "properties",
    "pseudo",
    "classes",
    "pseudo",
    "elements",
    "data",
    "types",
    "functional",
    "notations",
    "rules",
    "last",
    "one",
    "rules",
    "want",
    "want",
    "click",
    "css",
    "statements",
    "instruct",
    "css",
    "behave",
    "would",
    "fitting",
    "categorization",
    "media",
    "queries",
    "uh",
    "perfectly",
    "scroll",
    "see",
    "um",
    "index",
    "different",
    "rules",
    "whatever",
    "tells",
    "css",
    "behave",
    "click",
    "media",
    "going",
    "take",
    "us",
    "media",
    "query",
    "page",
    "rule",
    "uh",
    "used",
    "apply",
    "part",
    "stylesheet",
    "based",
    "result",
    "one",
    "media",
    "queries",
    "right",
    "come",
    "syntax",
    "going",
    "see",
    "pretty",
    "complicated",
    "stuff",
    "written",
    "um",
    "basics",
    "media",
    "query",
    "come",
    "back",
    "um",
    "example",
    "see",
    "basic",
    "syntax",
    "media",
    "parentheses",
    "write",
    "whatever",
    "rule",
    "css",
    "going",
    "go",
    "wanted",
    "specify",
    "css",
    "h1",
    "going",
    "put",
    "anytime",
    "screen",
    "greater",
    "756",
    "pixels",
    "text",
    "red",
    "shrink",
    "goes",
    "back",
    "black",
    "go",
    "red",
    "basic",
    "syntax",
    "rule",
    "actually",
    "selecting",
    "every",
    "type",
    "media",
    "device",
    "go",
    "back",
    "documentation",
    "let",
    "drag",
    "getting",
    "confused",
    "tab",
    "um",
    "come",
    "media",
    "rule",
    "scroll",
    "description",
    "see",
    "concept",
    "media",
    "types",
    "print",
    "screen",
    "speech",
    "actually",
    "define",
    "within",
    "media",
    "query",
    "device",
    "types",
    "actually",
    "trying",
    "target",
    "case",
    "wrote",
    "one",
    "saying",
    "want",
    "devices",
    "also",
    "specify",
    "rule",
    "want",
    "target",
    "um",
    "certain",
    "devices",
    "going",
    "working",
    "screens",
    "uh",
    "mostly",
    "like",
    "mobile",
    "uh",
    "like",
    "iphone",
    "android",
    "tablet",
    "desktop",
    "screen",
    "kind",
    "forte",
    "web",
    "developers",
    "also",
    "print",
    "speech",
    "um",
    "specific",
    "use",
    "cases",
    "target",
    "let",
    "see",
    "could",
    "change",
    "rule",
    "target",
    "devices",
    "said",
    "media",
    "going",
    "say",
    "want",
    "talk",
    "taret",
    "uh",
    "media",
    "types",
    "equivalent",
    "thing",
    "come",
    "say",
    "media",
    "print",
    "going",
    "apply",
    "um",
    "print",
    "basically",
    "like",
    "print",
    "preview",
    "view",
    "screen",
    "see",
    "rule",
    "color",
    "red",
    "longer",
    "applies",
    "text",
    "targeting",
    "print",
    "media",
    "devices",
    "likewise",
    "could",
    "put",
    "speech",
    "also",
    "going",
    "work",
    "speech",
    "media",
    "type",
    "put",
    "word",
    "screen",
    "going",
    "apply",
    "screen",
    "um",
    "rule",
    "apply",
    "media",
    "rules",
    "add",
    "logic",
    "going",
    "get",
    "deep",
    "want",
    "least",
    "show",
    "let",
    "say",
    "wanted",
    "target",
    "screens",
    "um",
    "width",
    "400",
    "600",
    "pixels",
    "could",
    "one",
    "media",
    "rule",
    "way",
    "would",
    "writing",
    "logical",
    "operators",
    "within",
    "css",
    "remember",
    "javascript",
    "came",
    "javascript",
    "section",
    "typed",
    "basic",
    "code",
    "use",
    "conditionals",
    "say",
    "um",
    "create",
    "statement",
    "says",
    "var",
    "greater",
    "10",
    "var",
    "less",
    "100",
    "something",
    "within",
    "code",
    "see",
    "little",
    "symbol",
    "logical",
    "operator",
    "using",
    "css",
    "actually",
    "logical",
    "operators",
    "like",
    "need",
    "javascript",
    "code",
    "um",
    "anymore",
    "rearrange",
    "rule",
    "logical",
    "operators",
    "target",
    "multiple",
    "conditions",
    "let",
    "go",
    "ahead",
    "let",
    "get",
    "rid",
    "comment",
    "um",
    "first",
    "thing",
    "going",
    "logical",
    "operators",
    "put",
    "operator",
    "called",
    "screen",
    "going",
    "use",
    "rule",
    "drop",
    "onto",
    "new",
    "lines",
    "separate",
    "things",
    "um",
    "put",
    "brackets",
    "add",
    "another",
    "one",
    "say",
    "max",
    "width",
    "something",
    "like",
    "800",
    "pixels",
    "let",
    "change",
    "go",
    "say",
    "wanted",
    "wanted",
    "something",
    "400",
    "pix",
    "pixels",
    "600",
    "pixels",
    "saying",
    "rule",
    "media",
    "want",
    "rule",
    "css",
    "want",
    "target",
    "screen",
    "media",
    "types",
    "looking",
    "want",
    "target",
    "something",
    "minimum",
    "width",
    "400",
    "pixels",
    "want",
    "target",
    "one",
    "something",
    "max",
    "width",
    "600",
    "pixels",
    "basically",
    "saying",
    "screens",
    "400",
    "600",
    "pixels",
    "h1",
    "css",
    "rule",
    "apply",
    "make",
    "screen",
    "really",
    "big",
    "within",
    "bounds",
    "go",
    "right",
    "bottom",
    "see",
    "little",
    "pixel",
    "indicator",
    "scroll",
    "get",
    "400",
    "600",
    "see",
    "turn",
    "red",
    "go",
    "back",
    "black",
    "gets",
    "smaller",
    "400",
    "see",
    "use",
    "css",
    "logical",
    "operators",
    "media",
    "queries",
    "target",
    "um",
    "different",
    "types",
    "conditions",
    "also",
    "bring",
    "css",
    "rules",
    "go",
    "back",
    "documentation",
    "click",
    "back",
    "um",
    "rules",
    "page",
    "see",
    "media",
    "queries",
    "also",
    "things",
    "like",
    "import",
    "supports",
    "clicked",
    "supports",
    "basically",
    "rule",
    "lets",
    "um",
    "check",
    "see",
    "specific",
    "css",
    "property",
    "supported",
    "browser",
    "user",
    "using",
    "good",
    "example",
    "xbox",
    "css",
    "grid",
    "learn",
    "next",
    "videos",
    "yet",
    "um",
    "supported",
    "browsers",
    "things",
    "like",
    "internet",
    "explorer",
    "think",
    "maybe",
    "couple",
    "others",
    "css",
    "grid",
    "see",
    "example",
    "use",
    "basically",
    "check",
    "whether",
    "um",
    "display",
    "supports",
    "display",
    "grid",
    "property",
    "use",
    "property",
    "within",
    "css",
    "see",
    "media",
    "queries",
    "css",
    "rules",
    "give",
    "us",
    "whole",
    "lot",
    "power",
    "designing",
    "pages",
    "different",
    "devices",
    "um",
    "media",
    "types",
    "different",
    "browsers",
    "going",
    "get",
    "far",
    "point",
    "video",
    "want",
    "show",
    "basics",
    "aware",
    "point",
    "want",
    "take",
    "call",
    "8020",
    "guide",
    "media",
    "queries",
    "css",
    "breakpoints",
    "going",
    "show",
    "take",
    "standard",
    "break",
    "break",
    "points",
    "um",
    "bootstrap",
    "framework",
    "incorporate",
    "actual",
    "css",
    "document",
    "let",
    "put",
    "images",
    "page",
    "say",
    "welcome",
    "tutorial",
    "bunch",
    "placeholder",
    "images",
    "uh",
    "screen",
    "want",
    "images",
    "make",
    "responsive",
    "based",
    "screen",
    "size",
    "something",
    "think",
    "maybe",
    "mobile",
    "devices",
    "want",
    "know",
    "100",
    "like",
    "seeing",
    "vertically",
    "stacked",
    "maybe",
    "tablet",
    "devices",
    "two",
    "images",
    "per",
    "row",
    "desktop",
    "device",
    "much",
    "larger",
    "could",
    "uh",
    "call",
    "four",
    "images",
    "uh",
    "one",
    "row",
    "across",
    "page",
    "described",
    "want",
    "three",
    "different",
    "states",
    "web",
    "page",
    "want",
    "mobile",
    "display",
    "tablet",
    "display",
    "two",
    "images",
    "desktop",
    "display",
    "four",
    "images",
    "three",
    "states",
    "requires",
    "two",
    "css",
    "breakpoints",
    "achieve",
    "remember",
    "bootstrap",
    "know",
    "five",
    "need",
    "two",
    "making",
    "super",
    "complex",
    "design",
    "good",
    "demonstration",
    "look",
    "know",
    "purposes",
    "decide",
    "many",
    "break",
    "points",
    "want",
    "throw",
    "bunch",
    "break",
    "points",
    "first",
    "thing",
    "need",
    "put",
    "basic",
    "css",
    "reset",
    "talked",
    "prior",
    "videos",
    "series",
    "sure",
    "watch",
    "um",
    "changing",
    "box",
    "sizing",
    "uh",
    "fit",
    "images",
    "reliably",
    "uh",
    "next",
    "without",
    "unwanted",
    "behavior",
    "next",
    "thing",
    "add",
    "breakpoint",
    "templates",
    "go",
    "bootstrap",
    "look",
    "need",
    "think",
    "going",
    "grab",
    "one",
    "right",
    "want",
    "mention",
    "top",
    "one",
    "actually",
    "break",
    "point",
    "need",
    "kind",
    "default",
    "talked",
    "mobile",
    "first",
    "uh",
    "approach",
    "want",
    "design",
    "regular",
    "css",
    "default",
    "css",
    "apply",
    "mobile",
    "screen",
    "conditionally",
    "style",
    "screens",
    "larger",
    "mobile",
    "device",
    "break",
    "points",
    "going",
    "grab",
    "greater",
    "equal",
    "576",
    "basically",
    "saying",
    "happens",
    "anything",
    "greater",
    "mobile",
    "device",
    "also",
    "probably",
    "grab",
    "992",
    "basically",
    "saying",
    "everything",
    "greater",
    "say",
    "tablet",
    "mobile",
    "tablet",
    "desktop",
    "need",
    "cover",
    "say",
    "576",
    "992",
    "let",
    "jot",
    "576",
    "992",
    "forget",
    "write",
    "media",
    "queries",
    "like",
    "said",
    "use",
    "basic",
    "syntax",
    "put",
    "logical",
    "operators",
    "going",
    "say",
    "minwidth",
    "576",
    "pixels",
    "put",
    "brackets",
    "break",
    "copy",
    "put",
    "right",
    "change",
    "number",
    "992",
    "get",
    "rid",
    "comments",
    "set",
    "css",
    "breakpoints",
    "right",
    "pictures",
    "screen",
    "matter",
    "size",
    "screen",
    "going",
    "responsive",
    "see",
    "come",
    "next",
    "larger",
    "screen",
    "naturally",
    "image",
    "believe",
    "inline",
    "block",
    "element",
    "means",
    "line",
    "believe",
    "500",
    "pixel",
    "uh",
    "images",
    "yeah",
    "put",
    "500",
    "pixels",
    "images",
    "using",
    "placehold",
    "placeholder",
    "service",
    "therefore",
    "screen",
    "bigger",
    "say",
    "th000",
    "pixels",
    "500",
    "plus",
    "500",
    "inline",
    "blocks",
    "going",
    "wrap",
    "onto",
    "line",
    "nothing",
    "css",
    "written",
    "natural",
    "flow",
    "html",
    "mobile",
    "first",
    "approach",
    "let",
    "go",
    "mobile",
    "device",
    "going",
    "right",
    "want",
    "within",
    "css",
    "go",
    "right",
    "css",
    "reset",
    "target",
    "images",
    "page",
    "give",
    "width",
    "100",
    "going",
    "going",
    "resize",
    "images",
    "100",
    "viewport",
    "notice",
    "little",
    "bit",
    "padding",
    "natural",
    "uh",
    "default",
    "padding",
    "margin",
    "browser",
    "code",
    "pen",
    "environment",
    "100",
    "width",
    "resize",
    "going",
    "see",
    "maintains",
    "100",
    "width",
    "way",
    "larger",
    "screens",
    "course",
    "way",
    "large",
    "image",
    "screen",
    "want",
    "wrap",
    "know",
    "next",
    "lines",
    "first",
    "come",
    "media",
    "query",
    "basically",
    "going",
    "say",
    "anything",
    "greater",
    "mobile",
    "device",
    "want",
    "target",
    "images",
    "going",
    "say",
    "screen",
    "greater",
    "576",
    "pixels",
    "want",
    "override",
    "original",
    "image",
    "style",
    "put",
    "something",
    "else",
    "case",
    "give",
    "width",
    "um",
    "wanted",
    "two",
    "per",
    "screen",
    "say",
    "50",
    "see",
    "wrapping",
    "um",
    "wrapping",
    "let",
    "change",
    "49",
    "okay",
    "go",
    "reason",
    "49",
    "going",
    "problem",
    "learn",
    "flexbox",
    "css",
    "grid",
    "uh",
    "white",
    "space",
    "couple",
    "things",
    "causing",
    "um",
    "mind",
    "fact",
    "49",
    "technically",
    "50",
    "see",
    "mobile",
    "device",
    "100",
    "width",
    "stack",
    "top",
    "resize",
    "greater",
    "576",
    "break",
    "onto",
    "two",
    "two",
    "per",
    "row",
    "want",
    "make",
    "four",
    "per",
    "row",
    "get",
    "992",
    "pixels",
    "right",
    "going",
    "stay",
    "two",
    "per",
    "row",
    "matter",
    "big",
    "get",
    "come",
    "add",
    "image",
    "style",
    "give",
    "width",
    "24",
    "see",
    "getar",
    "larger",
    "going",
    "put",
    "four",
    "per",
    "row",
    "see",
    "one",
    "per",
    "row",
    "two",
    "per",
    "row",
    "tablet",
    "four",
    "per",
    "row",
    "desktop",
    "device",
    "successfully",
    "written",
    "mobile",
    "first",
    "approach",
    "css",
    "designed",
    "three",
    "different",
    "screen",
    "sizes",
    "want",
    "walk",
    "css",
    "interpreter",
    "actually",
    "working",
    "um",
    "sure",
    "write",
    "break",
    "points",
    "really",
    "understand",
    "going",
    "otherwise",
    "going",
    "make",
    "silly",
    "mistake",
    "show",
    "looking",
    "css",
    "ask",
    "actually",
    "read",
    "would",
    "browser",
    "interpreting",
    "default",
    "got",
    "images",
    "css",
    "read",
    "first",
    "read",
    "css",
    "reset",
    "make",
    "border",
    "box",
    "um",
    "different",
    "come",
    "say",
    "okay",
    "image",
    "css",
    "selector",
    "giving",
    "width",
    "100",
    "css",
    "interpreter",
    "going",
    "say",
    "okay",
    "great",
    "width",
    "images",
    "100",
    "come",
    "um",
    "see",
    "media",
    "queries",
    "browser",
    "basically",
    "say",
    "total",
    "width",
    "viewport",
    "greater",
    "576",
    "pixels",
    "um",
    "let",
    "go",
    "ahead",
    "make",
    "true",
    "biggest",
    "size",
    "browser",
    "reading",
    "says",
    "okay",
    "yeah",
    "bigger",
    "576",
    "let",
    "go",
    "ahead",
    "apply",
    "rule",
    "says",
    "right",
    "images",
    "100",
    "going",
    "replace",
    "49",
    "reads",
    "even",
    "sees",
    "next",
    "media",
    "query",
    "asked",
    "basically",
    "ask",
    "okay",
    "greater",
    "992",
    "pixels",
    "viewport",
    "width",
    "browser",
    "answer",
    "case",
    "yes",
    "going",
    "say",
    "okay",
    "images",
    "need",
    "24",
    "width",
    "going",
    "replace",
    "previous",
    "two",
    "rules",
    "walking",
    "cascading",
    "concept",
    "css",
    "read",
    "top",
    "bottom",
    "last",
    "rule",
    "long",
    "last",
    "rule",
    "specificity",
    "rules",
    "going",
    "one",
    "applies",
    "important",
    "order",
    "break",
    "points",
    "adding",
    "media",
    "queries",
    "take",
    "last",
    "media",
    "query",
    "place",
    "one",
    "things",
    "going",
    "change",
    "us",
    "css",
    "read",
    "top",
    "bottom",
    "case",
    "notice",
    "mobile",
    "device",
    "look",
    "good",
    "working",
    "fine",
    "go",
    "going",
    "get",
    "two",
    "images",
    "per",
    "row",
    "matter",
    "far",
    "wide",
    "screen",
    "gets",
    "might",
    "look",
    "css",
    "say",
    "well",
    "defined",
    "anything",
    "greater",
    "992",
    "get",
    "width",
    "24",
    "way",
    "cs",
    "red",
    "top",
    "bottom",
    "saying",
    "okay",
    "first",
    "rule",
    "sets",
    "100",
    "going",
    "ask",
    "screen",
    "bigger",
    "992",
    "answer",
    "yes",
    "going",
    "set",
    "24",
    "reads",
    "says",
    "greater",
    "576",
    "answer",
    "still",
    "yes",
    "inclusive",
    "screen",
    "sizes",
    "going",
    "replace",
    "image",
    "width",
    "49",
    "override",
    "24",
    "right",
    "lesson",
    "media",
    "queries",
    "order",
    "important",
    "going",
    "need",
    "two",
    "things",
    "first",
    "need",
    "add",
    "media",
    "queries",
    "bottom",
    "css",
    "stylesheet",
    "reason",
    "got",
    "rules",
    "default",
    "style",
    "would",
    "mobile",
    "screens",
    "need",
    "end",
    "override",
    "styles",
    "second",
    "going",
    "going",
    "mobile",
    "first",
    "approach",
    "basically",
    "using",
    "min",
    "widths",
    "rather",
    "max",
    "width",
    "need",
    "greatest",
    "wid",
    "bottom",
    "need",
    "go",
    "know",
    "smallest",
    "greatest",
    "otherwise",
    "saw",
    "going",
    "happen",
    "nothing",
    "going",
    "behave",
    "expect",
    "point",
    "want",
    "revisit",
    "topic",
    "mobile",
    "first",
    "desktop",
    "first",
    "design",
    "alluded",
    "last",
    "couple",
    "minutes",
    "actually",
    "think",
    "ready",
    "fully",
    "understand",
    "difference",
    "two",
    "like",
    "said",
    "earlier",
    "nothing",
    "design",
    "phase",
    "project",
    "getting",
    "graphic",
    "design",
    "laid",
    "wireframes",
    "mockups",
    "really",
    "matter",
    "going",
    "design",
    "multiple",
    "screen",
    "size",
    "designs",
    "matter",
    "come",
    "write",
    "css",
    "difference",
    "going",
    "whether",
    "using",
    "media",
    "queries",
    "minwidth",
    "putting",
    "media",
    "queries",
    "max",
    "width",
    "going",
    "change",
    "think",
    "css",
    "entirely",
    "case",
    "used",
    "minwidth",
    "basically",
    "equivalent",
    "mobile",
    "first",
    "design",
    "default",
    "styles",
    "going",
    "automatically",
    "apply",
    "screens",
    "since",
    "using",
    "minwidth",
    "going",
    "apply",
    "mobile",
    "devices",
    "go",
    "size",
    "going",
    "start",
    "replacing",
    "css",
    "properties",
    "according",
    "bigger",
    "screen",
    "sizes",
    "see",
    "mobile",
    "first",
    "going",
    "reverse",
    "going",
    "actually",
    "desktop",
    "first",
    "um",
    "approach",
    "recommend",
    "want",
    "show",
    "compar",
    "contrast",
    "wanted",
    "go",
    "desktop",
    "first",
    "would",
    "change",
    "two",
    "max",
    "width",
    "right",
    "let",
    "change",
    "min",
    "widths",
    "max",
    "width",
    "see",
    "everything",
    "working",
    "little",
    "bit",
    "differently",
    "basically",
    "exact",
    "opposite",
    "get",
    "bigger",
    "go",
    "100",
    "wi",
    "go",
    "smaller",
    "go",
    "grid",
    "obviously",
    "want",
    "reason",
    "thought",
    "mobile",
    "first",
    "perspective",
    "built",
    "basically",
    "desktop",
    "first",
    "default",
    "rules",
    "going",
    "apply",
    "desktop",
    "devices",
    "anything",
    "greater",
    "greatest",
    "break",
    "point",
    "assigned",
    "going",
    "get",
    "default",
    "styles",
    "basically",
    "starting",
    "widest",
    "go",
    "replacing",
    "rules",
    "wanted",
    "work",
    "going",
    "change",
    "widths",
    "rules",
    "know",
    "desktop",
    "devices",
    "want",
    "replace",
    "100",
    "24",
    "get",
    "us",
    "back",
    "point",
    "four",
    "uh",
    "four",
    "pictures",
    "per",
    "row",
    "come",
    "going",
    "change",
    "max",
    "width",
    "576",
    "basically",
    "referring",
    "mobile",
    "devices",
    "want",
    "make",
    "100",
    "mobile",
    "device",
    "see",
    "stacked",
    "top",
    "working",
    "let",
    "go",
    "ahead",
    "refresh",
    "page",
    "make",
    "sure",
    "got",
    "oh",
    "actually",
    "good",
    "lesson",
    "go",
    "desk",
    "mobile",
    "first",
    "desktop",
    "first",
    "order",
    "media",
    "queries",
    "going",
    "change",
    "min",
    "widths",
    "said",
    "want",
    "smallest",
    "largest",
    "going",
    "top",
    "bottom",
    "case",
    "going",
    "stylesheet",
    "saying",
    "okay",
    "screen",
    "less",
    "576",
    "let",
    "make",
    "mobile",
    "saying",
    "less",
    "576",
    "answer",
    "yes",
    "let",
    "apply",
    "image",
    "width",
    "100",
    "goes",
    "reads",
    "max",
    "width",
    "less",
    "992",
    "case",
    "also",
    "true",
    "replacing",
    "width",
    "24",
    "still",
    "seeing",
    "grid",
    "wanted",
    "make",
    "work",
    "need",
    "put",
    "desktop",
    "first",
    "approach",
    "need",
    "largest",
    "media",
    "queries",
    "first",
    "going",
    "smallest",
    "intended",
    "behavior",
    "100",
    "wid",
    "mobile",
    "get",
    "um",
    "let",
    "go",
    "ahead",
    "replace",
    "last",
    "one",
    "49",
    "correct",
    "design",
    "100",
    "mobile",
    "two",
    "images",
    "tablet",
    "four",
    "images",
    "desktop",
    "see",
    "mobile",
    "first",
    "versus",
    "desktop",
    "first",
    "writing",
    "media",
    "queries",
    "whether",
    "using",
    "midwidth",
    "max",
    "widths",
    "general",
    "going",
    "find",
    "consensus",
    "among",
    "development",
    "community",
    "use",
    "mobile",
    "first",
    "approach",
    "reason",
    "behind",
    "getting",
    "complex",
    "designs",
    "easier",
    "use",
    "natural",
    "flow",
    "h",
    "ml",
    "mobile",
    "device",
    "um",
    "media",
    "queries",
    "required",
    "tweak",
    "get",
    "larger",
    "many",
    "cases",
    "desktop",
    "first",
    "design",
    "probably",
    "going",
    "look",
    "good",
    "mobile",
    "device",
    "um",
    "inverse",
    "mobile",
    "first",
    "design",
    "probably",
    "look",
    "okay",
    "desktop",
    "device",
    "without",
    "modifications",
    "summary",
    "basically",
    "going",
    "write",
    "less",
    "code",
    "um",
    "cases",
    "right",
    "covered",
    "basics",
    "next",
    "question",
    "actually",
    "put",
    "within",
    "media",
    "queries",
    "answer",
    "ca",
    "possibly",
    "teach",
    "within",
    "one",
    "lesson",
    "going",
    "learn",
    "know",
    "resize",
    "things",
    "based",
    "different",
    "devices",
    "experience",
    "time",
    "show",
    "basic",
    "example",
    "first",
    "want",
    "leave",
    "responsive",
    "design",
    "checklist",
    "let",
    "jump",
    "go",
    "checklist",
    "know",
    "take",
    "screenshot",
    "write",
    "um",
    "whatever",
    "want",
    "go",
    "looking",
    "design",
    "web",
    "page",
    "testing",
    "different",
    "devices",
    "want",
    "make",
    "sure",
    "check",
    "boxes",
    "check",
    "boxes",
    "covered",
    "95",
    "need",
    "rest",
    "going",
    "know",
    "subtle",
    "little",
    "changes",
    "highly",
    "dependent",
    "many",
    "requirements",
    "project",
    "first",
    "want",
    "fluid",
    "layouts",
    "basically",
    "saying",
    "know",
    "looked",
    "know",
    "single",
    "images",
    "mobile",
    "device",
    "row",
    "two",
    "images",
    "tablet",
    "row",
    "four",
    "images",
    "desktop",
    "mean",
    "say",
    "fluid",
    "layouts",
    "want",
    "make",
    "content",
    "know",
    "look",
    "good",
    "general",
    "images",
    "want",
    "make",
    "sure",
    "right",
    "aspect",
    "ratios",
    "stretching",
    "images",
    "know",
    "wide",
    "tall",
    "big",
    "certain",
    "devices",
    "also",
    "want",
    "thing",
    "text",
    "want",
    "huge",
    "text",
    "mobile",
    "device",
    "know",
    "four",
    "five",
    "words",
    "per",
    "line",
    "really",
    "poor",
    "user",
    "experience",
    "next",
    "thing",
    "overflow",
    "basically",
    "want",
    "text",
    "images",
    "whatever",
    "cut",
    "side",
    "screen",
    "probably",
    "seen",
    "mobile",
    "design",
    "know",
    "half",
    "image",
    "screen",
    "want",
    "avoid",
    "uh",
    "similar",
    "want",
    "full",
    "width",
    "mobile",
    "content",
    "general",
    "apply",
    "everything",
    "general",
    "everything",
    "look",
    "going",
    "stacked",
    "top",
    "rather",
    "columns",
    "never",
    "really",
    "want",
    "columns",
    "mobile",
    "device",
    "finally",
    "general",
    "usability",
    "hard",
    "get",
    "friend",
    "um",
    "someone",
    "give",
    "honest",
    "feedback",
    "play",
    "around",
    "um",
    "web",
    "page",
    "multiple",
    "devices",
    "anyone",
    "going",
    "able",
    "tell",
    "okay",
    "feel",
    "right",
    "one",
    "kind",
    "clunky",
    "hard",
    "use",
    "mobile",
    "device",
    "know",
    "squinting",
    "desktop",
    "see",
    "get",
    "pretty",
    "good",
    "feedback",
    "using",
    "common",
    "sense",
    "approach",
    "usually",
    "pretty",
    "good",
    "right",
    "point",
    "going",
    "apply",
    "skills",
    "learned",
    "going",
    "take",
    "pricing",
    "card",
    "challenge",
    "see",
    "everything",
    "getting",
    "cut",
    "responsive",
    "going",
    "make",
    "responsive",
    "answer",
    "actually",
    "relatively",
    "simple",
    "one",
    "two",
    "approaches",
    "first",
    "way",
    "could",
    "desktop",
    "first",
    "approach",
    "like",
    "like",
    "said",
    "recommend",
    "default",
    "way",
    "approaching",
    "css",
    "case",
    "design",
    "desktop",
    "first",
    "u",
    "mindset",
    "really",
    "think",
    "mobile",
    "design",
    "therefore",
    "css",
    "html",
    "reflected",
    "case",
    "see",
    "width",
    "um",
    "card",
    "created",
    "uh",
    "decided",
    "creating",
    "card",
    "see",
    "right",
    "assigned",
    "width",
    "600",
    "pixels",
    "reason",
    "think",
    "assign",
    "media",
    "query",
    "break",
    "point",
    "around",
    "600",
    "pixel",
    "mark",
    "exactly",
    "600",
    "pixels",
    "going",
    "see",
    "design",
    "know",
    "635",
    "pixels",
    "looks",
    "like",
    "600",
    "right",
    "obviously",
    "something",
    "cut",
    "want",
    "put",
    "little",
    "bit",
    "little",
    "bit",
    "wiggle",
    "room",
    "might",
    "want",
    "write",
    "media",
    "query",
    "somewhere",
    "around",
    "650",
    "pixels",
    "come",
    "bottom",
    "css",
    "supposed",
    "media",
    "queries",
    "write",
    "media",
    "say",
    "max",
    "width",
    "solving",
    "desktop",
    "first",
    "approach",
    "um",
    "simplest",
    "um",
    "solution",
    "say",
    "650",
    "pixels",
    "dropping",
    "css",
    "rule",
    "really",
    "make",
    "bottom",
    "bottom",
    "left",
    "bottom",
    "right",
    "um",
    "containers",
    "created",
    "want",
    "make",
    "100",
    "width",
    "naturally",
    "stack",
    "top",
    "believe",
    "thinking",
    "correctly",
    "target",
    "two",
    "give",
    "100",
    "width",
    "screen",
    "less",
    "650",
    "pixels",
    "ids",
    "would",
    "bottom",
    "left",
    "section",
    "let",
    "grab",
    "throw",
    "media",
    "query",
    "paste",
    "want",
    "put",
    "comma",
    "want",
    "also",
    "thing",
    "bottom",
    "right",
    "section",
    "let",
    "grab",
    "put",
    "hashtag",
    "target",
    "make",
    "css",
    "rule",
    "right",
    "media",
    "query",
    "saying",
    "anything",
    "screen",
    "less",
    "650",
    "pixels",
    "want",
    "target",
    "bottom",
    "left",
    "section",
    "bottom",
    "right",
    "section",
    "ids",
    "want",
    "give",
    "width",
    "100",
    "right",
    "point",
    "screen",
    "greater",
    "650",
    "resize",
    "see",
    "done",
    "something",
    "us",
    "figure",
    "going",
    "completely",
    "lost",
    "bottom",
    "right",
    "section",
    "pretty",
    "much",
    "disappeared",
    "reason",
    "happening",
    "set",
    "explicit",
    "heights",
    "card",
    "scroll",
    "top",
    "css",
    "see",
    "gave",
    "card",
    "width",
    "600",
    "pixels",
    "height",
    "400",
    "pixels",
    "also",
    "set",
    "overflow",
    "hidden",
    "allowed",
    "us",
    "make",
    "rounded",
    "corners",
    "bottom",
    "happening",
    "resized",
    "basically",
    "losing",
    "right",
    "side",
    "entirely",
    "stack",
    "top",
    "greater",
    "height",
    "400",
    "pixels",
    "hiding",
    "overflow",
    "content",
    "shown",
    "come",
    "media",
    "query",
    "set",
    "height",
    "auto",
    "going",
    "change",
    "something",
    "us",
    "believe",
    "going",
    "change",
    "cu",
    "want",
    "assign",
    "sections",
    "want",
    "main",
    "card",
    "need",
    "target",
    "card",
    "media",
    "query",
    "going",
    "target",
    "card",
    "going",
    "set",
    "height",
    "uh",
    "auto",
    "going",
    "take",
    "explicit",
    "height",
    "give",
    "automatic",
    "height",
    "see",
    "resizing",
    "correctly",
    "last",
    "problem",
    "going",
    "see",
    "still",
    "cut",
    "card",
    "component",
    "still",
    "automatic",
    "width",
    "assigned",
    "100",
    "width",
    "bottom",
    "left",
    "bottom",
    "right",
    "section",
    "assign",
    "width",
    "auto",
    "even",
    "100",
    "see",
    "resizes",
    "appropriately",
    "think",
    "actually",
    "take",
    "um",
    "since",
    "duplicated",
    "take",
    "height",
    "auto",
    "put",
    "rule",
    "include",
    "main",
    "card",
    "within",
    "delete",
    "think",
    "work",
    "fine",
    "let",
    "resize",
    "see",
    "works",
    "fine",
    "see",
    "add",
    "little",
    "block",
    "code",
    "make",
    "mobile",
    "responsive",
    "want",
    "leave",
    "hanging",
    "one",
    "um",
    "said",
    "throughout",
    "whole",
    "video",
    "want",
    "go",
    "mobile",
    "first",
    "mobile",
    "first",
    "want",
    "stay",
    "true",
    "show",
    "make",
    "mobil",
    "responsive",
    "mobile",
    "first",
    "uh",
    "perspective",
    "strategy",
    "desktop",
    "first",
    "approach",
    "worked",
    "pretty",
    "well",
    "originally",
    "created",
    "approach",
    "ideally",
    "would",
    "created",
    "original",
    "card",
    "mobile",
    "first",
    "perspective",
    "going",
    "show",
    "convert",
    "let",
    "delete",
    "media",
    "query",
    "created",
    "see",
    "goes",
    "back",
    "cut",
    "moby",
    "responsive",
    "want",
    "create",
    "mobile",
    "first",
    "design",
    "instead",
    "max",
    "width",
    "going",
    "write",
    "media",
    "query",
    "midwidth",
    "going",
    "576",
    "pixels",
    "go",
    "anything",
    "greater",
    "mobile",
    "device",
    "going",
    "um",
    "whatever",
    "styles",
    "put",
    "cool",
    "thing",
    "know",
    "media",
    "queries",
    "breakpoints",
    "duplicate",
    "css",
    "lot",
    "styles",
    "going",
    "applied",
    "similarly",
    "across",
    "devices",
    "example",
    "color",
    "button",
    "text",
    "backgrounds",
    "going",
    "change",
    "based",
    "whether",
    "mobile",
    "desktop",
    "device",
    "need",
    "rewrite",
    "likewise",
    "text",
    "going",
    "stay",
    "going",
    "font",
    "style",
    "matter",
    "really",
    "things",
    "alter",
    "um",
    "break",
    "points",
    "going",
    "layout",
    "related",
    "properties",
    "want",
    "start",
    "overall",
    "card",
    "remember",
    "top",
    "part",
    "css",
    "rule",
    "card",
    "right",
    "giving",
    "explicit",
    "width",
    "explicit",
    "height",
    "remember",
    "mobile",
    "first",
    "perspective",
    "everything",
    "within",
    "media",
    "query",
    "going",
    "apply",
    "mobile",
    "device",
    "naturally",
    "mob",
    "device",
    "want",
    "explicit",
    "widths",
    "heights",
    "let",
    "go",
    "ahead",
    "comment",
    "second",
    "going",
    "see",
    "already",
    "done",
    "lot",
    "better",
    "overall",
    "card",
    "right",
    "width",
    "height",
    "got",
    "problems",
    "going",
    "within",
    "bottom",
    "left",
    "bottom",
    "right",
    "sections",
    "want",
    "get",
    "rid",
    "widths",
    "heights",
    "together",
    "let",
    "go",
    "ahead",
    "take",
    "main",
    "card",
    "scroll",
    "media",
    "query",
    "target",
    "card",
    "element",
    "paste",
    "rules",
    "want",
    "give",
    "width",
    "600",
    "height",
    "400",
    "device",
    "greater",
    "mobile",
    "device",
    "576",
    "pixels",
    "let",
    "go",
    "ahead",
    "resize",
    "break",
    "somewhere",
    "around",
    "right",
    "saw",
    "break",
    "point",
    "see",
    "based",
    "uh",
    "explicit",
    "width",
    "height",
    "given",
    "really",
    "fitting",
    "correctly",
    "actually",
    "change",
    "work",
    "fine",
    "maybe",
    "say",
    "something",
    "like",
    "know",
    "550",
    "pixels",
    "gets",
    "fitting",
    "screen",
    "height",
    "go",
    "ahead",
    "stay",
    "400",
    "pixels",
    "mobile",
    "device",
    "somewhat",
    "responsive",
    "go",
    "anything",
    "greater",
    "mobile",
    "device",
    "stays",
    "card",
    "next",
    "thing",
    "want",
    "look",
    "bottom",
    "left",
    "bottom",
    "right",
    "section",
    "styles",
    "see",
    "given",
    "widths",
    "50",
    "case",
    "mobile",
    "device",
    "want",
    "widths",
    "50",
    "want",
    "100",
    "let",
    "go",
    "ahead",
    "comment",
    "going",
    "default",
    "width",
    "auto",
    "going",
    "100",
    "default",
    "going",
    "100",
    "comment",
    "think",
    "start",
    "see",
    "something",
    "makes",
    "little",
    "bit",
    "sense",
    "see",
    "auto",
    "actually",
    "said",
    "wrong",
    "use",
    "auto",
    "need",
    "text",
    "span",
    "100",
    "width",
    "container",
    "styles",
    "need",
    "guess",
    "go",
    "ahead",
    "set",
    "width",
    "100",
    "fixes",
    "section",
    "come",
    "set",
    "width",
    "100",
    "pull",
    "one",
    "right",
    "right",
    "looking",
    "good",
    "think",
    "part",
    "mobile",
    "design",
    "complete",
    "think",
    "exactly",
    "want",
    "mobile",
    "design",
    "complete",
    "need",
    "make",
    "desktop",
    "design",
    "look",
    "little",
    "bit",
    "better",
    "right",
    "obviously",
    "missing",
    "entire",
    "section",
    "really",
    "let",
    "go",
    "ahead",
    "delete",
    "width",
    "50",
    "even",
    "commented",
    "section",
    "go",
    "query",
    "bottom",
    "says",
    "anything",
    "greater",
    "um",
    "mobile",
    "device",
    "going",
    "target",
    "bottom",
    "left",
    "section",
    "bottom",
    "right",
    "section",
    "going",
    "give",
    "width",
    "50",
    "like",
    "see",
    "fits",
    "perfectly",
    "resize",
    "goes",
    "um",
    "resizes",
    "perfectly",
    "mobile",
    "device",
    "difference",
    "subtle",
    "especially",
    "project",
    "simple",
    "know",
    "hundreds",
    "styles",
    "difference",
    "mobile",
    "first",
    "desktop",
    "first",
    "design",
    "really",
    "important",
    "really",
    "internalize",
    "um",
    "full",
    "stack",
    "web",
    "developer",
    "video",
    "going",
    "teach",
    "flexbox",
    "works",
    "start",
    "going",
    "available",
    "actually",
    "spend",
    "rest",
    "video",
    "majority",
    "diving",
    "really",
    "deep",
    "flexbox",
    "works",
    "calculate",
    "different",
    "things",
    "things",
    "use",
    "properties",
    "goal",
    "video",
    "flexbox",
    "tutorial",
    "youtube",
    "reason",
    "making",
    "depth",
    "important",
    "think",
    "knowing",
    "flexbox",
    "allows",
    "uh",
    "eliminate",
    "lot",
    "frustration",
    "comes",
    "layouts",
    "css",
    "also",
    "set",
    "us",
    "next",
    "lesson",
    "going",
    "css",
    "grid",
    "let",
    "get",
    "started",
    "flexbox",
    "crash",
    "course",
    "prerequisites",
    "going",
    "going",
    "basic",
    "understanding",
    "html",
    "css",
    "covered",
    "prior",
    "lessons",
    "series",
    "go",
    "check",
    "unfamiliar",
    "going",
    "covering",
    "video",
    "going",
    "learn",
    "flexbox",
    "help",
    "make",
    "life",
    "easier",
    "going",
    "go",
    "basic",
    "properties",
    "flexbox",
    "going",
    "get",
    "pretty",
    "detailed",
    "really",
    "understand",
    "going",
    "finally",
    "going",
    "look",
    "frontend",
    "menor",
    "project",
    "testimonial",
    "uh",
    "grid",
    "going",
    "creating",
    "flexbox",
    "next",
    "video",
    "things",
    "going",
    "covering",
    "shorthand",
    "flexbox",
    "properties",
    "couple",
    "properties",
    "uh",
    "within",
    "css",
    "guess",
    "module",
    "framework",
    "whatever",
    "want",
    "call",
    "allow",
    "write",
    "less",
    "css",
    "achieve",
    "thing",
    "goal",
    "trying",
    "learn",
    "flexbox",
    "apply",
    "much",
    "later",
    "road",
    "comfortable",
    "flexbox",
    "also",
    "going",
    "getting",
    "advanced",
    "written",
    "advanced",
    "flex",
    "flexbox",
    "properties",
    "pretty",
    "much",
    "covering",
    "properties",
    "um",
    "guess",
    "probably",
    "better",
    "way",
    "say",
    "going",
    "going",
    "advanced",
    "flexbox",
    "methods",
    "know",
    "different",
    "layouts",
    "kind",
    "stuff",
    "main",
    "goal",
    "get",
    "understanding",
    "system",
    "works",
    "um",
    "get",
    "comfortable",
    "using",
    "obvious",
    "starting",
    "question",
    "flexbox",
    "well",
    "following",
    "along",
    "might",
    "realized",
    "writing",
    "css",
    "really",
    "two",
    "main",
    "components",
    "layout",
    "related",
    "properties",
    "style",
    "related",
    "properties",
    "style",
    "property",
    "would",
    "like",
    "uh",
    "color",
    "font",
    "something",
    "like",
    "really",
    "affect",
    "things",
    "laid",
    "page",
    "layout",
    "properties",
    "create",
    "know",
    "grids",
    "know",
    "nav",
    "bars",
    "footers",
    "sidebars",
    "kind",
    "stuff",
    "far",
    "using",
    "flexbox",
    "job",
    "little",
    "bit",
    "difficult",
    "use",
    "uh",
    "know",
    "hacky",
    "ways",
    "getting",
    "layouts",
    "work",
    "flexbox",
    "going",
    "come",
    "really",
    "help",
    "layout",
    "side",
    "things",
    "per",
    "mdn",
    "web",
    "docs",
    "uh",
    "flexbox",
    "called",
    "css",
    "flexible",
    "box",
    "layout",
    "module",
    "model",
    "displaying",
    "items",
    "single",
    "dimension",
    "either",
    "row",
    "column",
    "future",
    "videos",
    "going",
    "get",
    "css",
    "grid",
    "layout",
    "module",
    "within",
    "css",
    "know",
    "might",
    "say",
    "css",
    "grid",
    "better",
    "flexbox",
    "bites",
    "versa",
    "really",
    "work",
    "together",
    "going",
    "cover",
    "work",
    "together",
    "within",
    "css",
    "whatever",
    "case",
    "flexbox",
    "subsequently",
    "css",
    "grid",
    "future",
    "video",
    "kind",
    "future",
    "css",
    "layouts",
    "past",
    "like",
    "talked",
    "use",
    "like",
    "floats",
    "clear",
    "fixes",
    "inline",
    "blocks",
    "specific",
    "widths",
    "watched",
    "one",
    "previous",
    "videos",
    "almost",
    "know",
    "hack",
    "way",
    "getting",
    "items",
    "fit",
    "within",
    "container",
    "removing",
    "white",
    "space",
    "html",
    "good",
    "solutions",
    "sustainable",
    "flexbox",
    "along",
    "css",
    "grid",
    "come",
    "provide",
    "better",
    "model",
    "layouts",
    "enough",
    "talk",
    "let",
    "show",
    "exactly",
    "uh",
    "dealing",
    "got",
    "basic",
    "html",
    "really",
    "want",
    "start",
    "understanding",
    "container",
    "child",
    "relationship",
    "within",
    "html",
    "look",
    "see",
    "div",
    "element",
    "class",
    "container",
    "three",
    "div",
    "elements",
    "class",
    "item",
    "relationship",
    "important",
    "container",
    "parent",
    "three",
    "know",
    "children",
    "elements",
    "show",
    "relationship",
    "important",
    "uh",
    "let",
    "put",
    "width",
    "height",
    "dimensions",
    "go",
    "100",
    "100",
    "pixels",
    "width",
    "height",
    "items",
    "within",
    "container",
    "give",
    "background",
    "color",
    "say",
    "orange",
    "maybe",
    "give",
    "margin",
    "five",
    "pixels",
    "kind",
    "separate",
    "little",
    "bit",
    "see",
    "three",
    "div",
    "elements",
    "children",
    "elements",
    "container",
    "reason",
    "parent",
    "child",
    "relationship",
    "important",
    "second",
    "enable",
    "flex",
    "box",
    "container",
    "child",
    "elements",
    "become",
    "call",
    "flex",
    "items",
    "really",
    "important",
    "first",
    "let",
    "show",
    "happen",
    "normal",
    "display",
    "property",
    "right",
    "default",
    "item",
    "container",
    "going",
    "display",
    "type",
    "block",
    "block",
    "elements",
    "see",
    "type",
    "going",
    "anything",
    "basically",
    "uh",
    "explicitly",
    "writing",
    "already",
    "default",
    "block",
    "elements",
    "talked",
    "prior",
    "css",
    "videos",
    "series",
    "going",
    "certain",
    "characteristics",
    "flex",
    "items",
    "flex",
    "containers",
    "also",
    "going",
    "certain",
    "uh",
    "display",
    "characteristics",
    "remove",
    "display",
    "block",
    "defaults",
    "uh",
    "div",
    "elements",
    "come",
    "container",
    "type",
    "display",
    "flex",
    "going",
    "notice",
    "items",
    "change",
    "reason",
    "change",
    "adding",
    "single",
    "property",
    "uh",
    "container",
    "element",
    "parent",
    "basically",
    "making",
    "flex",
    "container",
    "holds",
    "bunch",
    "flex",
    "items",
    "container",
    "items",
    "specific",
    "um",
    "characteristics",
    "know",
    "normal",
    "block",
    "inline",
    "elements",
    "minute",
    "going",
    "explain",
    "exactly",
    "flex",
    "items",
    "going",
    "horizontal",
    "direction",
    "rather",
    "vertical",
    "really",
    "want",
    "drill",
    "home",
    "point",
    "flex",
    "containers",
    "flex",
    "items",
    "might",
    "ask",
    "well",
    "set",
    "display",
    "flex",
    "container",
    "going",
    "flex",
    "items",
    "also",
    "know",
    "make",
    "flex",
    "item",
    "flex",
    "container",
    "answer",
    "yes",
    "actually",
    "element",
    "flex",
    "item",
    "flex",
    "container",
    "time",
    "important",
    "always",
    "keep",
    "relationships",
    "clear",
    "head",
    "let",
    "show",
    "mean",
    "come",
    "final",
    "uh",
    "div",
    "element",
    "currently",
    "flex",
    "item",
    "put",
    "divs",
    "let",
    "put",
    "class",
    "sub",
    "item",
    "going",
    "copy",
    "three",
    "times",
    "right",
    "dimensions",
    "copy",
    "css",
    "selector",
    "item",
    "put",
    "sub",
    "item",
    "give",
    "different",
    "dimensions",
    "give",
    "something",
    "small",
    "like",
    "maybe",
    "15",
    "pixels",
    "uh",
    "wide",
    "tall",
    "make",
    "background",
    "color",
    "blue",
    "margin",
    "one",
    "pixel",
    "something",
    "like",
    "see",
    "line",
    "within",
    "third",
    "container",
    "children",
    "third",
    "flex",
    "item",
    "moment",
    "flex",
    "items",
    "block",
    "elements",
    "default",
    "brings",
    "important",
    "point",
    "look",
    "css",
    "put",
    "display",
    "flex",
    "property",
    "main",
    "container",
    "turns",
    "container",
    "flex",
    "item",
    "direct",
    "children",
    "descendants",
    "direct",
    "children",
    "become",
    "flex",
    "items",
    "case",
    "divs",
    "going",
    "flex",
    "items",
    "sub",
    "items",
    "going",
    "flex",
    "items",
    "default",
    "block",
    "elements",
    "come",
    "turn",
    "final",
    "div",
    "flex",
    "container",
    "subsequently",
    "turn",
    "sub",
    "items",
    "flex",
    "items",
    "well",
    "unique",
    "selector",
    "let",
    "turn",
    "item",
    "three",
    "um",
    "put",
    "another",
    "class",
    "come",
    "item",
    "three",
    "write",
    "display",
    "flex",
    "see",
    "three",
    "blue",
    "boxes",
    "right",
    "going",
    "go",
    "row",
    "like",
    "orange",
    "boxes",
    "go",
    "throughout",
    "tutorial",
    "want",
    "keep",
    "clear",
    "head",
    "exact",
    "model",
    "laid",
    "let",
    "walk",
    "one",
    "time",
    "top",
    "level",
    "div",
    "called",
    "uh",
    "class",
    "container",
    "flex",
    "container",
    "reason",
    "flex",
    "container",
    "put",
    "display",
    "flex",
    "property",
    "items",
    "three",
    "items",
    "right",
    "flex",
    "items",
    "reason",
    "flex",
    "items",
    "direct",
    "parent",
    "flex",
    "container",
    "sub",
    "items",
    "right",
    "also",
    "flex",
    "items",
    "display",
    "flex",
    "main",
    "container",
    "put",
    "display",
    "flex",
    "third",
    "item",
    "right",
    "know",
    "confusing",
    "right",
    "going",
    "get",
    "lot",
    "clear",
    "go",
    "tutorial",
    "happening",
    "third",
    "div",
    "within",
    "container",
    "flex",
    "container",
    "flex",
    "item",
    "actually",
    "serve",
    "types",
    "time",
    "relation",
    "main",
    "container",
    "flex",
    "item",
    "relation",
    "sub",
    "items",
    "flex",
    "container",
    "level",
    "understanding",
    "container",
    "flex",
    "item",
    "combine",
    "flex",
    "container",
    "flex",
    "item",
    "properties",
    "use",
    "going",
    "go",
    "keep",
    "clear",
    "head",
    "going",
    "first",
    "identify",
    "dealing",
    "container",
    "item",
    "saw",
    "cases",
    "dealing",
    "actually",
    "put",
    "um",
    "combination",
    "properties",
    "single",
    "html",
    "element",
    "sometimes",
    "gets",
    "little",
    "bit",
    "confusing",
    "something",
    "done",
    "first",
    "learning",
    "flex",
    "boox",
    "cheat",
    "sheet",
    "found",
    "um",
    "really",
    "great",
    "resource",
    "sure",
    "link",
    "description",
    "keep",
    "open",
    "uh",
    "whenever",
    "working",
    "flexbox",
    "interactive",
    "know",
    "click",
    "different",
    "things",
    "see",
    "different",
    "flex",
    "properties",
    "work",
    "covers",
    "pretty",
    "much",
    "everything",
    "mentioned",
    "properties",
    "apply",
    "container",
    "items",
    "resource",
    "really",
    "separate",
    "left",
    "uh",
    "side",
    "right",
    "property",
    "come",
    "see",
    "applies",
    "one",
    "applies",
    "flex",
    "containers",
    "use",
    "resource",
    "keep",
    "open",
    "um",
    "learning",
    "flex",
    "boox",
    "really",
    "good",
    "know",
    "little",
    "cheat",
    "sheet",
    "addition",
    "um",
    "going",
    "course",
    "always",
    "look",
    "mdn",
    "web",
    "dox",
    "see",
    "flexbox",
    "property",
    "reference",
    "valid",
    "properties",
    "use",
    "click",
    "kind",
    "get",
    "overview",
    "uh",
    "available",
    "point",
    "formal",
    "definition",
    "property",
    "going",
    "tell",
    "initial",
    "value",
    "sometimes",
    "important",
    "understand",
    "default",
    "values",
    "dealing",
    "reason",
    "understanding",
    "default",
    "values",
    "important",
    "um",
    "know",
    "flex",
    "items",
    "flex",
    "containers",
    "like",
    "putting",
    "single",
    "rule",
    "container",
    "going",
    "set",
    "bunch",
    "properties",
    "um",
    "default",
    "seeing",
    "know",
    "front",
    "reality",
    "put",
    "display",
    "flex",
    "container",
    "setting",
    "properties",
    "pasted",
    "setting",
    "flex",
    "direction",
    "justify",
    "content",
    "align",
    "content",
    "items",
    "flex",
    "wrap",
    "default",
    "values",
    "see",
    "nothing",
    "changed",
    "left",
    "already",
    "applied",
    "default",
    "likewise",
    "flex",
    "items",
    "default",
    "properties",
    "come",
    "item",
    "going",
    "flex",
    "item",
    "paste",
    "properties",
    "right",
    "reason",
    "nothing",
    "changed",
    "left",
    "defaults",
    "know",
    "flexbox",
    "comes",
    "packed",
    "going",
    "tutorial",
    "learn",
    "modify",
    "default",
    "values",
    "uh",
    "properties",
    "right",
    "get",
    "intended",
    "result",
    "want",
    "last",
    "thing",
    "want",
    "point",
    "jump",
    "first",
    "property",
    "quick",
    "note",
    "shorthand",
    "flex",
    "properties",
    "came",
    "flex",
    "item",
    "targeting",
    "one",
    "flex",
    "items",
    "put",
    "something",
    "called",
    "flex",
    "gave",
    "value",
    "uh",
    "let",
    "see",
    "01",
    "auto",
    "right",
    "call",
    "shorthand",
    "flex",
    "property",
    "exact",
    "equivalent",
    "writing",
    "flex",
    "grow",
    "r",
    "0",
    "um",
    "flex",
    "shrink",
    "one",
    "flex",
    "basis",
    "auto",
    "three",
    "properties",
    "written",
    "longhand",
    "thing",
    "single",
    "property",
    "written",
    "shorthand",
    "tutorial",
    "like",
    "said",
    "going",
    "looking",
    "shorthand",
    "properties",
    "enough",
    "deal",
    "properties",
    "understanding",
    "work",
    "wanted",
    "clarify",
    "might",
    "see",
    "flex",
    "cheat",
    "sheet",
    "came",
    "um",
    "flex",
    "flow",
    "shorthand",
    "property",
    "sure",
    "flex",
    "somewhere",
    "um",
    "whatever",
    "case",
    "know",
    "exist",
    "going",
    "covering",
    "think",
    "point",
    "covered",
    "know",
    "pieces",
    "knowledge",
    "really",
    "jump",
    "flexbox",
    "let",
    "go",
    "ahead",
    "get",
    "started",
    "going",
    "use",
    "pretty",
    "ugly",
    "actually",
    "put",
    "together",
    "little",
    "demo",
    "check",
    "javascript",
    "basically",
    "toggling",
    "values",
    "um",
    "demo",
    "meant",
    "uh",
    "explain",
    "main",
    "tenant",
    "flexbox",
    "fact",
    "onedimensional",
    "um",
    "onedimensional",
    "model",
    "align",
    "items",
    "either",
    "horizontal",
    "vertical",
    "axis",
    "see",
    "html",
    "got",
    "html",
    "none",
    "really",
    "important",
    "really",
    "focused",
    "going",
    "piece",
    "right",
    "got",
    "main",
    "container",
    "going",
    "flex",
    "container",
    "uh",
    "divs",
    "going",
    "actual",
    "flex",
    "items",
    "actually",
    "styled",
    "little",
    "bit",
    "know",
    "visual",
    "purposes",
    "important",
    "tutorial",
    "looking",
    "html",
    "way",
    "create",
    "flex",
    "container",
    "div",
    "selecting",
    "css",
    "writing",
    "display",
    "flex",
    "default",
    "going",
    "create",
    "flex",
    "container",
    "direct",
    "children",
    "going",
    "flex",
    "items",
    "three",
    "divs",
    "right",
    "next",
    "property",
    "understand",
    "really",
    "important",
    "part",
    "flexbox",
    "flex",
    "direction",
    "property",
    "default",
    "going",
    "set",
    "row",
    "property",
    "defining",
    "going",
    "using",
    "main",
    "axis",
    "going",
    "using",
    "cross",
    "axis",
    "written",
    "um",
    "html",
    "css",
    "see",
    "main",
    "axis",
    "horizontally",
    "cross",
    "axis",
    "vertically",
    "happens",
    "change",
    "flex",
    "direction",
    "property",
    "going",
    "change",
    "flow",
    "items",
    "within",
    "flex",
    "container",
    "also",
    "going",
    "change",
    "main",
    "cross",
    "axis",
    "default",
    "set",
    "row",
    "means",
    "everything",
    "going",
    "go",
    "horizontal",
    "main",
    "axxis",
    "going",
    "horizontal",
    "toggle",
    "flex",
    "direction",
    "going",
    "via",
    "javascript",
    "change",
    "flex",
    "direction",
    "column",
    "happening",
    "main",
    "axis",
    "going",
    "vertical",
    "cross",
    "axis",
    "going",
    "horizontal",
    "looking",
    "vertically",
    "well",
    "previously",
    "set",
    "row",
    "looking",
    "horizontally",
    "learn",
    "new",
    "properties",
    "keep",
    "two",
    "things",
    "mind",
    "first",
    "talked",
    "got",
    "know",
    "um",
    "html",
    "element",
    "flex",
    "container",
    "flex",
    "items",
    "number",
    "two",
    "know",
    "uh",
    "direction",
    "flex",
    "items",
    "going",
    "flow",
    "got",
    "property",
    "flex",
    "flex",
    "direction",
    "set",
    "row",
    "going",
    "go",
    "horizontal",
    "main",
    "axis",
    "going",
    "horizontal",
    "set",
    "column",
    "going",
    "flow",
    "um",
    "vertically",
    "main",
    "axis",
    "going",
    "um",
    "vertical",
    "see",
    "example",
    "flex",
    "container",
    "um",
    "certain",
    "height",
    "width",
    "reason",
    "set",
    "um",
    "find",
    "container",
    "set",
    "set",
    "width",
    "height",
    "300",
    "and2",
    "200",
    "pixels",
    "comment",
    "get",
    "rid",
    "dimensions",
    "container",
    "going",
    "act",
    "similar",
    "block",
    "element",
    "kind",
    "spans",
    "width",
    "parent",
    "container",
    "height",
    "going",
    "based",
    "content",
    "items",
    "within",
    "keep",
    "things",
    "simple",
    "going",
    "keep",
    "width",
    "height",
    "set",
    "container",
    "um",
    "nice",
    "visual",
    "look",
    "explore",
    "different",
    "flex",
    "properties",
    "remainder",
    "tutorial",
    "going",
    "working",
    "workspace",
    "want",
    "kind",
    "derive",
    "got",
    "confused",
    "styles",
    "put",
    "basically",
    "four",
    "div",
    "elements",
    "um",
    "within",
    "main",
    "container",
    "right",
    "showing",
    "flex",
    "box",
    "enabled",
    "except",
    "items",
    "right",
    "trying",
    "cover",
    "basic",
    "divs",
    "right",
    "displaying",
    "block",
    "elements",
    "know",
    "dimensions",
    "containers",
    "let",
    "kind",
    "derive",
    "get",
    "workspace",
    "first",
    "going",
    "set",
    "width",
    "height",
    "main",
    "flex",
    "container",
    "going",
    "put",
    "border",
    "uncommited",
    "properties",
    "see",
    "black",
    "border",
    "4",
    "pixels",
    "dimension",
    "width",
    "going",
    "408",
    "pixels",
    "whole",
    "container",
    "reason",
    "408",
    "add",
    "left",
    "border",
    "four",
    "pixels",
    "right",
    "border",
    "four",
    "pixels",
    "gets",
    "eight",
    "pixels",
    "therefore",
    "wanted",
    "basically",
    "make",
    "total",
    "area",
    "within",
    "container",
    "uh",
    "400",
    "pixels",
    "exactly",
    "better",
    "time",
    "know",
    "basic",
    "calculations",
    "made",
    "48",
    "pixels",
    "uncomment",
    "display",
    "flex",
    "make",
    "flex",
    "items",
    "seeing",
    "sitting",
    "know",
    "horizontal",
    "axis",
    "actually",
    "flex",
    "direction",
    "row",
    "uh",
    "default",
    "uh",
    "setting",
    "get",
    "basic",
    "workspace",
    "finally",
    "uncomment",
    "two",
    "lines",
    "htm",
    "l",
    "going",
    "styled",
    "somewhere",
    "see",
    "cross",
    "main",
    "axis",
    "times",
    "go",
    "rest",
    "tutorial",
    "always",
    "going",
    "working",
    "flex",
    "direction",
    "row",
    "therefore",
    "main",
    "axis",
    "always",
    "going",
    "horizontal",
    "cross",
    "axis",
    "always",
    "going",
    "vertical",
    "want",
    "switch",
    "call",
    "flex",
    "direction",
    "column",
    "see",
    "rules",
    "go",
    "work",
    "vertical",
    "axxis",
    "perspective",
    "next",
    "properties",
    "talking",
    "alignment",
    "properties",
    "um",
    "allow",
    "align",
    "um",
    "space",
    "flex",
    "items",
    "within",
    "container",
    "first",
    "one",
    "going",
    "justify",
    "content",
    "come",
    "mdn",
    "um",
    "formal",
    "definition",
    "come",
    "formal",
    "definition",
    "see",
    "initial",
    "value",
    "normal",
    "read",
    "normal",
    "says",
    "items",
    "packed",
    "default",
    "position",
    "justified",
    "content",
    "value",
    "set",
    "kind",
    "seeing",
    "kind",
    "default",
    "start",
    "axis",
    "similarly",
    "set",
    "justify",
    "content",
    "property",
    "start",
    "going",
    "achieve",
    "thing",
    "putting",
    "start",
    "intents",
    "purposes",
    "think",
    "default",
    "property",
    "justify",
    "content",
    "start",
    "wanted",
    "flex",
    "items",
    "go",
    "end",
    "main",
    "axis",
    "rather",
    "start",
    "type",
    "property",
    "replace",
    "end",
    "see",
    "jump",
    "right",
    "side",
    "see",
    "looking",
    "main",
    "axis",
    "deciding",
    "items",
    "going",
    "go",
    "flowing",
    "horizontally",
    "start",
    "left",
    "side",
    "end",
    "right",
    "side",
    "also",
    "change",
    "um",
    "center",
    "going",
    "put",
    "right",
    "middle",
    "additional",
    "property",
    "values",
    "actually",
    "space",
    "items",
    "little",
    "bit",
    "first",
    "one",
    "going",
    "space",
    "type",
    "space",
    "going",
    "spaced",
    "equal",
    "amount",
    "white",
    "space",
    "within",
    "container",
    "also",
    "property",
    "called",
    "space",
    "around",
    "change",
    "see",
    "space",
    "surrounding",
    "items",
    "main",
    "axis",
    "notice",
    "amount",
    "space",
    "items",
    "little",
    "area",
    "going",
    "equal",
    "dimension",
    "edges",
    "right",
    "fourth",
    "element",
    "left",
    "first",
    "little",
    "bit",
    "smaller",
    "space",
    "elements",
    "kind",
    "uh",
    "distinguish",
    "space",
    "around",
    "property",
    "value",
    "space",
    "evenly",
    "property",
    "value",
    "type",
    "space",
    "evenly",
    "see",
    "changed",
    "little",
    "bit",
    "happening",
    "every",
    "piece",
    "white",
    "space",
    "elements",
    "going",
    "exactly",
    "equal",
    "justify",
    "content",
    "property",
    "tells",
    "us",
    "items",
    "spaced",
    "aligned",
    "main",
    "axis",
    "let",
    "go",
    "ahead",
    "set",
    "back",
    "start",
    "want",
    "default",
    "values",
    "talk",
    "next",
    "property",
    "line",
    "items",
    "property",
    "let",
    "go",
    "ahead",
    "look",
    "mdn",
    "type",
    "align",
    "items",
    "see",
    "property",
    "use",
    "want",
    "align",
    "flex",
    "items",
    "cross",
    "axis",
    "remember",
    "set",
    "example",
    "flex",
    "direction",
    "row",
    "default",
    "means",
    "main",
    "axis",
    "horizontal",
    "cross",
    "vertical",
    "align",
    "items",
    "always",
    "applies",
    "cross",
    "axis",
    "going",
    "decide",
    "items",
    "aligned",
    "vertically",
    "looking",
    "mdn",
    "docs",
    "see",
    "initial",
    "value",
    "normal",
    "go",
    "normal",
    "wherever",
    "um",
    "guess",
    "top",
    "says",
    "effect",
    "keyword",
    "dependent",
    "layout",
    "mode",
    "see",
    "third",
    "bullet",
    "point",
    "says",
    "flex",
    "items",
    "keyword",
    "behaves",
    "stretch",
    "come",
    "stretch",
    "says",
    "flex",
    "items",
    "stretched",
    "cross",
    "size",
    "items",
    "margin",
    "box",
    "line",
    "respecting",
    "width",
    "height",
    "constraints",
    "overly",
    "confusing",
    "way",
    "say",
    "default",
    "line",
    "items",
    "set",
    "normal",
    "going",
    "stretch",
    "height",
    "items",
    "total",
    "height",
    "flex",
    "container",
    "unless",
    "specific",
    "height",
    "set",
    "items",
    "already",
    "brings",
    "us",
    "brief",
    "discussion",
    "width",
    "height",
    "properties",
    "flex",
    "items",
    "right",
    "width",
    "height",
    "set",
    "either",
    "flex",
    "items",
    "right",
    "getting",
    "guess",
    "call",
    "defaults",
    "flexbox",
    "um",
    "flex",
    "item",
    "default",
    "going",
    "get",
    "width",
    "inner",
    "content",
    "height",
    "going",
    "stretch",
    "equal",
    "total",
    "height",
    "flex",
    "container",
    "see",
    "inner",
    "content",
    "going",
    "numbers",
    "put",
    "know",
    "little",
    "space",
    "still",
    "considered",
    "inner",
    "content",
    "height",
    "course",
    "height",
    "full",
    "flex",
    "container",
    "come",
    "flex",
    "item",
    "number",
    "one",
    "give",
    "width",
    "say",
    "100",
    "pixels",
    "longer",
    "going",
    "default",
    "width",
    "content",
    "going",
    "respect",
    "width",
    "set",
    "likewise",
    "give",
    "height",
    "say",
    "50",
    "pixels",
    "going",
    "respect",
    "height",
    "well",
    "put",
    "explicit",
    "width",
    "height",
    "properties",
    "flex",
    "items",
    "default",
    "going",
    "get",
    "long",
    "know",
    "overflow",
    "within",
    "flex",
    "container",
    "set",
    "different",
    "properties",
    "going",
    "talk",
    "bit",
    "quick",
    "review",
    "items",
    "flex",
    "items",
    "explicit",
    "width",
    "height",
    "properties",
    "therefore",
    "default",
    "height",
    "flex",
    "item",
    "going",
    "get",
    "going",
    "total",
    "size",
    "cross",
    "axis",
    "case",
    "main",
    "axis",
    "row",
    "cross",
    "column",
    "total",
    "height",
    "column",
    "going",
    "natural",
    "height",
    "longer",
    "case",
    "start",
    "putting",
    "different",
    "values",
    "align",
    "items",
    "put",
    "something",
    "like",
    "flex",
    "start",
    "going",
    "see",
    "items",
    "pull",
    "top",
    "cross",
    "axis",
    "longer",
    "total",
    "height",
    "cross",
    "axis",
    "happening",
    "width",
    "height",
    "inner",
    "content",
    "change",
    "inner",
    "content",
    "going",
    "adjust",
    "size",
    "one",
    "way",
    "could",
    "let",
    "say",
    "first",
    "um",
    "flex",
    "item",
    "come",
    "way",
    "bottom",
    "going",
    "uncomment",
    "uh",
    "little",
    "rule",
    "wrote",
    "made",
    "font",
    "size",
    "first",
    "item",
    "much",
    "larger",
    "see",
    "make",
    "content",
    "bigger",
    "smaller",
    "flex",
    "item",
    "gets",
    "bigger",
    "smaller",
    "explicit",
    "width",
    "height",
    "properties",
    "going",
    "leave",
    "going",
    "bring",
    "good",
    "point",
    "second",
    "right",
    "flex",
    "start",
    "also",
    "um",
    "bring",
    "cross",
    "axis",
    "flex",
    "end",
    "end",
    "center",
    "center",
    "actually",
    "something",
    "really",
    "hard",
    "without",
    "flexbox",
    "really",
    "cool",
    "uh",
    "part",
    "flexbox",
    "model",
    "see",
    "center",
    "like",
    "imaginary",
    "horizontal",
    "line",
    "going",
    "middle",
    "content",
    "uh",
    "flex",
    "items",
    "also",
    "property",
    "value",
    "called",
    "baseline",
    "going",
    "happen",
    "actually",
    "draw",
    "horizontal",
    "line",
    "kind",
    "bottom",
    "piece",
    "content",
    "within",
    "flex",
    "item",
    "first",
    "one",
    "much",
    "bigger",
    "inner",
    "content",
    "flex",
    "baseline",
    "going",
    "different",
    "spot",
    "going",
    "perfectly",
    "aligned",
    "flush",
    "top",
    "cross",
    "ais",
    "far",
    "learned",
    "couple",
    "properties",
    "justify",
    "content",
    "align",
    "items",
    "play",
    "around",
    "let",
    "examples",
    "kind",
    "review",
    "recap",
    "let",
    "go",
    "ahead",
    "say",
    "justify",
    "content",
    "center",
    "align",
    "items",
    "also",
    "center",
    "take",
    "content",
    "flex",
    "items",
    "put",
    "middle",
    "container",
    "difficult",
    "flexbox",
    "really",
    "cool",
    "advantage",
    "flexbox",
    "um",
    "course",
    "change",
    "put",
    "justify",
    "content",
    "end",
    "put",
    "also",
    "put",
    "align",
    "items",
    "flex",
    "know",
    "want",
    "put",
    "bottom",
    "right",
    "corner",
    "container",
    "flexible",
    "pun",
    "intended",
    "alignment",
    "properties",
    "let",
    "reset",
    "everything",
    "let",
    "put",
    "back",
    "defaults",
    "delete",
    "back",
    "defaults",
    "come",
    "comment",
    "uh",
    "last",
    "rule",
    "changes",
    "font",
    "size",
    "first",
    "item",
    "everything",
    "equal",
    "want",
    "actually",
    "make",
    "items",
    "specific",
    "width",
    "height",
    "go",
    "50",
    "pixels",
    "50",
    "pixels",
    "um",
    "one",
    "way",
    "since",
    "two",
    "classes",
    "set",
    "flex",
    "item",
    "fi",
    "class",
    "target",
    "one",
    "class",
    "give",
    "width",
    "50",
    "pixels",
    "height",
    "50",
    "pixels",
    "perfect",
    "little",
    "squares",
    "sitting",
    "flex",
    "items",
    "default",
    "change",
    "properties",
    "flex",
    "respect",
    "flexx",
    "item",
    "width",
    "height",
    "properties",
    "set",
    "50",
    "pixels",
    "50",
    "pixels",
    "getting",
    "right",
    "came",
    "flex",
    "container",
    "set",
    "align",
    "items",
    "property",
    "say",
    "stretch",
    "something",
    "like",
    "see",
    "actually",
    "going",
    "stretch",
    "total",
    "height",
    "explicit",
    "properties",
    "set",
    "already",
    "next",
    "thing",
    "want",
    "explore",
    "happens",
    "many",
    "little",
    "uh",
    "flex",
    "items",
    "within",
    "flex",
    "container",
    "example",
    "remember",
    "minutes",
    "ago",
    "talked",
    "actually",
    "top",
    "set",
    "width",
    "flex",
    "container",
    "408",
    "height",
    "200",
    "pixels",
    "main",
    "axis",
    "horizontal",
    "result",
    "flex",
    "direction",
    "equal",
    "row",
    "property",
    "um",
    "width",
    "really",
    "care",
    "right",
    "everything",
    "going",
    "width",
    "kind",
    "direction",
    "set",
    "408",
    "exactly",
    "example",
    "show",
    "got",
    "container",
    "408",
    "pixels",
    "wide",
    "container",
    "4",
    "pixel",
    "border",
    "left",
    "right",
    "total",
    "white",
    "space",
    "available",
    "flex",
    "items",
    "exactly",
    "400",
    "pixels",
    "boxes",
    "50",
    "pixels",
    "width",
    "means",
    "fit",
    "total",
    "eight",
    "flex",
    "items",
    "per",
    "perfectly",
    "within",
    "container",
    "let",
    "go",
    "ahead",
    "see",
    "talking",
    "copy",
    "forward",
    "times",
    "see",
    "bunch",
    "items",
    "pop",
    "let",
    "go",
    "ahead",
    "change",
    "labels",
    "see",
    "flex",
    "items",
    "little",
    "bit",
    "better",
    "see",
    "eight",
    "items",
    "perfectly",
    "fitting",
    "within",
    "flex",
    "container",
    "happens",
    "take",
    "flex",
    "items",
    "double",
    "let",
    "say",
    "instead",
    "eight",
    "flex",
    "items",
    "50",
    "pixels",
    "16",
    "double",
    "happens",
    "well",
    "let",
    "go",
    "ahead",
    "real",
    "quick",
    "copy",
    "items",
    "paste",
    "going",
    "see",
    "extend",
    "items",
    "overflowing",
    "outside",
    "flex",
    "container",
    "couple",
    "weird",
    "things",
    "going",
    "well",
    "notice",
    "look",
    "like",
    "items",
    "50",
    "pixels",
    "wide",
    "anymore",
    "course",
    "wondering",
    "wide",
    "elements",
    "guess",
    "rightclick",
    "inspect",
    "element",
    "dropped",
    "firefox",
    "dev",
    "tools",
    "reason",
    "firefox",
    "know",
    "switching",
    "back",
    "forth",
    "chrome",
    "firefox",
    "throughout",
    "series",
    "firefox",
    "dev",
    "tools",
    "awesome",
    "flexbox",
    "um",
    "little",
    "module",
    "inspect",
    "elements",
    "really",
    "see",
    "going",
    "come",
    "uh",
    "inspector",
    "click",
    "select",
    "items",
    "page",
    "let",
    "first",
    "start",
    "overall",
    "flex",
    "container",
    "click",
    "flex",
    "container",
    "layout",
    "tab",
    "going",
    "drop",
    "us",
    "section",
    "called",
    "flex",
    "container",
    "um",
    "uh",
    "collapse",
    "see",
    "also",
    "grid",
    "box",
    "model",
    "different",
    "know",
    "models",
    "look",
    "look",
    "flex",
    "container",
    "toggle",
    "little",
    "button",
    "see",
    "different",
    "flex",
    "items",
    "outlined",
    "well",
    "overflow",
    "space",
    "elements",
    "flex",
    "box",
    "turn",
    "also",
    "go",
    "flex",
    "items",
    "see",
    "highlighted",
    "left",
    "um",
    "hover",
    "click",
    "little",
    "inspector",
    "maybe",
    "click",
    "number",
    "eight",
    "um",
    "look",
    "within",
    "inspector",
    "everything",
    "going",
    "individual",
    "flex",
    "item",
    "going",
    "talk",
    "stuff",
    "um",
    "bit",
    "quite",
    "ready",
    "yet",
    "thing",
    "want",
    "draw",
    "attention",
    "fact",
    "go",
    "box",
    "model",
    "learned",
    "previous",
    "lessons",
    "know",
    "works",
    "um",
    "look",
    "total",
    "size",
    "single",
    "element",
    "click",
    "number",
    "four",
    "see",
    "dimensions",
    "332",
    "50",
    "set",
    "set",
    "50",
    "pixels",
    "wide",
    "50",
    "pixels",
    "tall",
    "question",
    "shrinking",
    "width",
    "like",
    "tell",
    "happening",
    "furthermore",
    "overflowing",
    "outside",
    "container",
    "obviously",
    "want",
    "show",
    "users",
    "want",
    "flex",
    "items",
    "going",
    "indefinitely",
    "page",
    "especially",
    "making",
    "say",
    "grid",
    "images",
    "hundreds",
    "images",
    "using",
    "flexbox",
    "display",
    "want",
    "going",
    "single",
    "axis",
    "know",
    "indefinitely",
    "right",
    "indefinitely",
    "situation",
    "two",
    "options",
    "first",
    "option",
    "kind",
    "st",
    "standard",
    "um",
    "default",
    "way",
    "handling",
    "overflow",
    "css",
    "specific",
    "flexbox",
    "use",
    "type",
    "css",
    "display",
    "type",
    "came",
    "flex",
    "container",
    "set",
    "overflow",
    "property",
    "set",
    "couple",
    "values",
    "usually",
    "might",
    "want",
    "set",
    "auto",
    "set",
    "auto",
    "going",
    "happen",
    "elements",
    "longer",
    "going",
    "break",
    "break",
    "outside",
    "container",
    "going",
    "scroll",
    "see",
    "scroll",
    "bar",
    "bottom",
    "flex",
    "container",
    "see",
    "items",
    "still",
    "shrunk",
    "little",
    "bit",
    "see",
    "without",
    "know",
    "breaking",
    "container",
    "like",
    "said",
    "grid",
    "images",
    "example",
    "could",
    "imagine",
    "images",
    "want",
    "users",
    "scroll",
    "left",
    "right",
    "see",
    "images",
    "want",
    "wrap",
    "next",
    "line",
    "like",
    "nice",
    "little",
    "grid",
    "images",
    "second",
    "option",
    "instead",
    "setting",
    "overflow",
    "property",
    "generic",
    "solution",
    "set",
    "flex",
    "wrap",
    "property",
    "set",
    "wrap",
    "see",
    "happens",
    "elements",
    "go",
    "back",
    "know",
    "original",
    "size",
    "50x",
    "50",
    "intended",
    "going",
    "perfectly",
    "wrap",
    "onto",
    "next",
    "line",
    "see",
    "white",
    "space",
    "middle",
    "might",
    "say",
    "okay",
    "really",
    "want",
    "want",
    "flushed",
    "naturally",
    "going",
    "come",
    "flex",
    "container",
    "going",
    "type",
    "align",
    "items",
    "like",
    "head",
    "said",
    "earlier",
    "type",
    "flex",
    "start",
    "something",
    "like",
    "wo",
    "see",
    "anything",
    "happen",
    "reason",
    "uh",
    "rules",
    "game",
    "changed",
    "put",
    "flex",
    "wrap",
    "property",
    "know",
    "probably",
    "um",
    "getting",
    "tired",
    "hearing",
    "say",
    "go",
    "css",
    "certain",
    "properties",
    "set",
    "certain",
    "values",
    "change",
    "whole",
    "game",
    "like",
    "set",
    "flex",
    "box",
    "container",
    "know",
    "changes",
    "behavior",
    "uh",
    "children",
    "elements",
    "within",
    "flex",
    "wrap",
    "property",
    "changes",
    "align",
    "items",
    "cross",
    "axis",
    "instead",
    "align",
    "items",
    "use",
    "property",
    "called",
    "align",
    "content",
    "flex",
    "wrap",
    "set",
    "anything",
    "default",
    "going",
    "wrap",
    "see",
    "overflows",
    "set",
    "anything",
    "except",
    "wrap",
    "going",
    "use",
    "instead",
    "align",
    "items",
    "going",
    "use",
    "align",
    "content",
    "going",
    "um",
    "possible",
    "values",
    "part",
    "align",
    "items",
    "going",
    "tell",
    "um",
    "flexbox",
    "arrange",
    "new",
    "like",
    "group",
    "wrapped",
    "items",
    "within",
    "flex",
    "container",
    "set",
    "flex",
    "start",
    "could",
    "wrap",
    "flex",
    "end",
    "even",
    "put",
    "right",
    "center",
    "everything",
    "wrap",
    "items",
    "next",
    "line",
    "overflowing",
    "point",
    "actually",
    "covered",
    "flex",
    "container",
    "uh",
    "properties",
    "use",
    "quick",
    "review",
    "get",
    "rid",
    "extra",
    "stuff",
    "get",
    "rid",
    "last",
    "eight",
    "um",
    "flex",
    "items",
    "get",
    "rid",
    "last",
    "two",
    "properties",
    "review",
    "course",
    "display",
    "flex",
    "going",
    "activate",
    "flexbox",
    "flex",
    "direction",
    "set",
    "either",
    "row",
    "column",
    "set",
    "column",
    "going",
    "go",
    "vertical",
    "set",
    "row",
    "going",
    "go",
    "horizontal",
    "justify",
    "content",
    "aligns",
    "uh",
    "flex",
    "items",
    "main",
    "axis",
    "case",
    "horizontal",
    "axis",
    "set",
    "center",
    "um",
    "going",
    "change",
    "anything",
    "wide",
    "container",
    "comment",
    "last",
    "flex",
    "item",
    "see",
    "works",
    "kind",
    "centers",
    "content",
    "middle",
    "align",
    "items",
    "also",
    "put",
    "center",
    "put",
    "middle",
    "next",
    "going",
    "talk",
    "influence",
    "size",
    "alignment",
    "individual",
    "flex",
    "items",
    "take",
    "look",
    "say",
    "something",
    "like",
    "line",
    "self",
    "say",
    "flex",
    "start",
    "going",
    "see",
    "first",
    "item",
    "drops",
    "flow",
    "rest",
    "flex",
    "items",
    "individual",
    "flex",
    "item",
    "lot",
    "um",
    "different",
    "combinations",
    "speaking",
    "alignment",
    "let",
    "go",
    "ahead",
    "start",
    "think",
    "easier",
    "uh",
    "part",
    "discussion",
    "let",
    "go",
    "ahead",
    "comment",
    "last",
    "four",
    "items",
    "container",
    "four",
    "within",
    "rules",
    "going",
    "remove",
    "justify",
    "content",
    "align",
    "items",
    "everything",
    "top",
    "left",
    "default",
    "um",
    "settings",
    "came",
    "individual",
    "items",
    "css",
    "selectors",
    "right",
    "use",
    "align",
    "self",
    "property",
    "essentially",
    "exact",
    "thing",
    "align",
    "items",
    "um",
    "except",
    "applies",
    "single",
    "flex",
    "item",
    "cas",
    "case",
    "set",
    "flex",
    "start",
    "default",
    "looks",
    "normal",
    "take",
    "first",
    "flex",
    "item",
    "first",
    "box",
    "set",
    "flex",
    "end",
    "see",
    "drops",
    "bottom",
    "rest",
    "stay",
    "top",
    "flex",
    "item",
    "number",
    "four",
    "align",
    "self",
    "flex",
    "end",
    "see",
    "one",
    "drop",
    "bottom",
    "maybe",
    "wanted",
    "number",
    "three",
    "middle",
    "align",
    "self",
    "center",
    "one",
    "goes",
    "middle",
    "see",
    "individually",
    "pick",
    "choose",
    "flex",
    "items",
    "going",
    "go",
    "course",
    "container",
    "level",
    "properties",
    "still",
    "apply",
    "came",
    "back",
    "container",
    "set",
    "justify",
    "content",
    "center",
    "whole",
    "group",
    "go",
    "middle",
    "work",
    "together",
    "one",
    "use",
    "tandem",
    "like",
    "said",
    "align",
    "self",
    "property",
    "pretty",
    "straightforward",
    "know",
    "align",
    "items",
    "main",
    "container",
    "last",
    "part",
    "going",
    "talk",
    "sizing",
    "flex",
    "items",
    "probably",
    "hardest",
    "part",
    "flex",
    "box",
    "opinion",
    "um",
    "understand",
    "work",
    "dealing",
    "flex",
    "grow",
    "flex",
    "shrink",
    "flex",
    "basis",
    "properties",
    "going",
    "start",
    "flex",
    "grow",
    "going",
    "apply",
    "uh",
    "flex",
    "items",
    "naturally",
    "fill",
    "entire",
    "main",
    "axis",
    "case",
    "main",
    "axis",
    "horizontal",
    "flex",
    "direction",
    "row",
    "property",
    "case",
    "50",
    "pixel",
    "wide",
    "flex",
    "items",
    "four",
    "fill",
    "half",
    "total",
    "width",
    "container",
    "earlier",
    "talked",
    "total",
    "white",
    "space",
    "total",
    "width",
    "flex",
    "items",
    "container",
    "exactly",
    "400",
    "pixels",
    "item",
    "50",
    "pixels",
    "wide",
    "50",
    "50",
    "50",
    "50",
    "going",
    "200",
    "pixels",
    "therefore",
    "occupied",
    "space",
    "going",
    "200",
    "pixels",
    "unoccupied",
    "space",
    "going",
    "200",
    "pixels",
    "unoccupied",
    "space",
    "empty",
    "space",
    "along",
    "main",
    "axis",
    "flex",
    "container",
    "flex",
    "grow",
    "property",
    "going",
    "come",
    "play",
    "default",
    "property",
    "every",
    "single",
    "item",
    "going",
    "set",
    "zero",
    "means",
    "item",
    "default",
    "going",
    "take",
    "0",
    "empty",
    "space",
    "within",
    "container",
    "looking",
    "stretching",
    "fill",
    "container",
    "right",
    "items",
    "default",
    "set",
    "take",
    "extra",
    "space",
    "come",
    "first",
    "flex",
    "item",
    "chang",
    "default",
    "property",
    "one",
    "going",
    "see",
    "first",
    "item",
    "fills",
    "remaining",
    "space",
    "going",
    "take",
    "original",
    "width",
    "50",
    "pixels",
    "also",
    "know",
    "empty",
    "space",
    "200",
    "pixels",
    "total",
    "width",
    "first",
    "um",
    "item",
    "first",
    "flex",
    "item",
    "going",
    "50",
    "200",
    "250",
    "pixels",
    "course",
    "tutorials",
    "want",
    "take",
    "word",
    "let",
    "go",
    "ahead",
    "verify",
    "said",
    "50",
    "pixels",
    "plus",
    "200",
    "250",
    "click",
    "selector",
    "select",
    "element",
    "go",
    "box",
    "model",
    "see",
    "250",
    "a2",
    "half",
    "pixels",
    "reason",
    "half",
    "pixel",
    "calculated",
    "um",
    "sure",
    "fully",
    "explain",
    "uh",
    "utmost",
    "confidence",
    "attempt",
    "set",
    "back",
    "flex",
    "grow",
    "zero",
    "refresh",
    "page",
    "stubborn",
    "inspect",
    "element",
    "go",
    "first",
    "element",
    "see",
    "box",
    "model",
    "inner",
    "content",
    "number",
    "self",
    "282",
    "pixels",
    "hover",
    "see",
    "box",
    "gets",
    "drawn",
    "around",
    "uh",
    "number",
    "pulled",
    "exact",
    "html",
    "css",
    "google",
    "chrome",
    "going",
    "pull",
    "google",
    "chrome",
    "right",
    "going",
    "select",
    "first",
    "box",
    "scroll",
    "box",
    "model",
    "see",
    "inner",
    "content",
    "28",
    "28",
    "a2",
    "browser",
    "differences",
    "course",
    "big",
    "part",
    "web",
    "development",
    "would",
    "worry",
    "extra",
    "half",
    "saw",
    "trying",
    "make",
    "calculations",
    "make",
    "sure",
    "understanding",
    "calculated",
    "programming",
    "one",
    "sometimes",
    "catastrophic",
    "error",
    "dealing",
    "uh",
    "css",
    "quite",
    "big",
    "deal",
    "stick",
    "go",
    "throughout",
    "probably",
    "going",
    "notice",
    "calculations",
    "going",
    "couple",
    "decimals",
    "bear",
    "let",
    "set",
    "back",
    "flex",
    "grow",
    "one",
    "200",
    "pixels",
    "empty",
    "space",
    "200",
    "pixels",
    "got",
    "allocated",
    "flex",
    "item",
    "number",
    "one",
    "came",
    "flex",
    "item",
    "number",
    "two",
    "default",
    "flex",
    "uh",
    "flex",
    "grow",
    "value",
    "zero",
    "set",
    "one",
    "going",
    "happen",
    "came",
    "flex",
    "item",
    "number",
    "two",
    "uh",
    "default",
    "value",
    "flex",
    "grow",
    "going",
    "zero",
    "changes",
    "see",
    "set",
    "one",
    "see",
    "number",
    "two",
    "element",
    "gets",
    "part",
    "empty",
    "space",
    "well",
    "one",
    "two",
    "going",
    "completely",
    "equal",
    "get",
    "know",
    "kind",
    "calculation",
    "happening",
    "going",
    "try",
    "draw",
    "come",
    "right",
    "flex",
    "item",
    "number",
    "one",
    "make",
    "comment",
    "going",
    "take",
    "flex",
    "items",
    "within",
    "container",
    "going",
    "add",
    "flex",
    "grow",
    "values",
    "default",
    "remember",
    "set",
    "zero",
    "flex",
    "item",
    "number",
    "one",
    "value",
    "one",
    "set",
    "right",
    "let",
    "close",
    "comment",
    "see",
    "correctly",
    "value",
    "one",
    "flex",
    "item",
    "1",
    "value",
    "one",
    "flex",
    "item",
    "2",
    "default",
    "last",
    "two",
    "set",
    "0",
    "0o",
    "total",
    "going",
    "equal",
    "two",
    "think",
    "two",
    "units",
    "empty",
    "space",
    "say",
    "two",
    "units",
    "might",
    "ask",
    "okay",
    "unit",
    "measuring",
    "well",
    "remember",
    "200",
    "pixels",
    "empty",
    "space",
    "divide",
    "two",
    "allocated",
    "units",
    "get",
    "100",
    "pixels",
    "per",
    "unit",
    "unit",
    "allocate",
    "going",
    "100",
    "pixels",
    "come",
    "flex",
    "item",
    "number",
    "three",
    "set",
    "flex",
    "grow",
    "value",
    "one",
    "changes",
    "total",
    "sum",
    "going",
    "add",
    "one",
    "total",
    "three",
    "units",
    "still",
    "200",
    "pixels",
    "empty",
    "space",
    "divide",
    "three",
    "units",
    "get",
    "us",
    "um",
    "sure",
    "math",
    "think",
    "decimal",
    "actually",
    "20",
    "3",
    "going",
    "uh",
    "66",
    "666",
    "uh",
    "pixels",
    "come",
    "flex",
    "item",
    "number",
    "three",
    "set",
    "flex",
    "grow",
    "factor",
    "one",
    "flex",
    "item",
    "number",
    "four",
    "set",
    "flex",
    "grow",
    "factor",
    "one",
    "everything",
    "changes",
    "update",
    "values",
    "sum",
    "1",
    "1",
    "1",
    "1",
    "four",
    "units",
    "still",
    "200",
    "pixels",
    "empty",
    "space",
    "allocate",
    "four",
    "items",
    "50",
    "pixels",
    "wide",
    "200",
    "pixels",
    "empty",
    "space",
    "200",
    "pixels",
    "400",
    "pixel",
    "container",
    "still",
    "200",
    "pixels",
    "empty",
    "space",
    "allocate",
    "four",
    "total",
    "units",
    "divi",
    "divide",
    "four",
    "going",
    "get",
    "us",
    "50",
    "pixels",
    "per",
    "unit",
    "happening",
    "item",
    "container",
    "original",
    "size",
    "50",
    "pixels",
    "allocate",
    "50",
    "pixels",
    "empty",
    "space",
    "going",
    "100",
    "pixels",
    "um",
    "equal",
    "across",
    "board",
    "see",
    "click",
    "33",
    "pixels",
    "um",
    "forget",
    "decimals",
    "equal",
    "works",
    "flex",
    "grow",
    "value",
    "one",
    "also",
    "give",
    "two",
    "three",
    "four",
    "dependent",
    "many",
    "units",
    "want",
    "allocate",
    "uh",
    "flex",
    "item",
    "let",
    "say",
    "gave",
    "flex",
    "item",
    "number",
    "two",
    "value",
    "uh",
    "say",
    "four",
    "uh",
    "maybe",
    "maybe",
    "four",
    "let",
    "go",
    "three",
    "even",
    "number",
    "calculation",
    "1",
    "3",
    "1",
    "1",
    "going",
    "6",
    "units",
    "200",
    "pixels",
    "empty",
    "space",
    "divided",
    "6",
    "units",
    "going",
    "need",
    "calculator",
    "one",
    "200",
    "6",
    "pixels",
    "per",
    "unit",
    "giving",
    "second",
    "flex",
    "item",
    "three",
    "units",
    "empty",
    "space",
    "unit",
    "empty",
    "space",
    "means",
    "giving",
    "extra",
    "know",
    "100",
    "pixels",
    "take",
    "original",
    "width",
    "50",
    "add",
    "100",
    "get",
    "150",
    "pixels",
    "wide",
    "second",
    "item",
    "let",
    "check",
    "see",
    "ballpark",
    "see",
    "calculation",
    "worked",
    "perfectly",
    "hopefully",
    "explanation",
    "made",
    "little",
    "bit",
    "sense",
    "think",
    "allocated",
    "space",
    "empty",
    "space",
    "calculate",
    "two",
    "pieces",
    "getting",
    "total",
    "width",
    "flex",
    "container",
    "total",
    "width",
    "items",
    "within",
    "flex",
    "container",
    "breaking",
    "units",
    "based",
    "amount",
    "empty",
    "space",
    "need",
    "allocate",
    "back",
    "items",
    "opposite",
    "applies",
    "many",
    "items",
    "flex",
    "container",
    "let",
    "get",
    "rid",
    "flex",
    "grow",
    "values",
    "get",
    "back",
    "normal",
    "let",
    "also",
    "uncomment",
    "divs",
    "right",
    "eight",
    "total",
    "items",
    "um",
    "know",
    "fits",
    "perfect",
    "ly",
    "put",
    "n",
    "instead",
    "eight",
    "n",
    "means",
    "added",
    "extra",
    "one",
    "means",
    "50",
    "pixels",
    "overflow",
    "remember",
    "one",
    "50",
    "pixels",
    "wide",
    "50",
    "pixels",
    "8",
    "going",
    "400",
    "pixels",
    "equal",
    "total",
    "available",
    "space",
    "within",
    "flex",
    "container",
    "adding",
    "n9th",
    "making",
    "total",
    "amount",
    "flex",
    "items",
    "uh",
    "450",
    "pixels",
    "wide",
    "versus",
    "400",
    "um",
    "available",
    "space",
    "50",
    "extra",
    "pixels",
    "overflow",
    "similar",
    "allocate",
    "empty",
    "space",
    "flex",
    "items",
    "also",
    "reduce",
    "size",
    "flex",
    "items",
    "amount",
    "overflow",
    "look",
    "container",
    "going",
    "see",
    "default",
    "fit",
    "within",
    "container",
    "add",
    "ninth",
    "item",
    "reason",
    "actually",
    "uh",
    "shrunk",
    "little",
    "bit",
    "put",
    "put",
    "ninth",
    "item",
    "reason",
    "shrunk",
    "default",
    "every",
    "flex",
    "item",
    "going",
    "flex",
    "shrink",
    "value",
    "one",
    "put",
    "flex",
    "item",
    "number",
    "one",
    "see",
    "change",
    "already",
    "default",
    "already",
    "shrinking",
    "one",
    "unit",
    "know",
    "calculate",
    "units",
    "basically",
    "take",
    "overflow",
    "like",
    "took",
    "empty",
    "space",
    "flex",
    "grow",
    "50",
    "pixels",
    "overflow",
    "um",
    "let",
    "let",
    "change",
    "right",
    "50",
    "pixels",
    "overflow",
    "ask",
    "oursel",
    "many",
    "units",
    "allocating",
    "across",
    "default",
    "flex",
    "item",
    "going",
    "flex",
    "shrink",
    "value",
    "one",
    "means",
    "flex",
    "item",
    "allocated",
    "equal",
    "overflow",
    "words",
    "1",
    "1",
    "1",
    "way",
    "9",
    "nine",
    "total",
    "units",
    "going",
    "get",
    "rid",
    "get",
    "point",
    "nine",
    "total",
    "units",
    "50",
    "pixels",
    "overflow",
    "divide",
    "50",
    "pixels",
    "9",
    "going",
    "give",
    "us",
    "believe",
    "pixels",
    "um",
    "per",
    "unit",
    "let",
    "check",
    "real",
    "quick",
    "50",
    "9",
    "equals",
    "pixels",
    "per",
    "unit",
    "words",
    "going",
    "take",
    "original",
    "width",
    "items",
    "50",
    "pixels",
    "going",
    "subtract",
    "pixels",
    "50",
    "theory",
    "item",
    "4445",
    "pixels",
    "wide",
    "let",
    "inspect",
    "element",
    "go",
    "going",
    "see",
    "442",
    "pixels",
    "wide",
    "pretty",
    "much",
    "exactly",
    "calculated",
    "firefox",
    "dev",
    "tools",
    "comes",
    "handy",
    "click",
    "one",
    "items",
    "going",
    "pop",
    "layout",
    "section",
    "exactly",
    "shrink",
    "operation",
    "worked",
    "see",
    "flexibility",
    "flex",
    "shrink",
    "one",
    "going",
    "say",
    "minus",
    "52",
    "pixels",
    "calculated",
    "going",
    "take",
    "28",
    "pixels",
    "inner",
    "content",
    "width",
    "uh",
    "subtract",
    "5",
    "pixels",
    "get",
    "23",
    "pixels",
    "add",
    "back",
    "natural",
    "padding",
    "border",
    "um",
    "set",
    "items",
    "get",
    "total",
    "width",
    "calculated",
    "445",
    "pixels",
    "brings",
    "good",
    "point",
    "look",
    "model",
    "right",
    "going",
    "see",
    "item",
    "minimum",
    "content",
    "try",
    "shrink",
    "something",
    "much",
    "going",
    "make",
    "kind",
    "get",
    "capped",
    "wo",
    "shrink",
    "past",
    "minimum",
    "value",
    "content",
    "show",
    "exactly",
    "works",
    "add",
    "um",
    "flex",
    "items",
    "let",
    "add",
    "one",
    "good",
    "measure",
    "see",
    "clearly",
    "breaking",
    "container",
    "like",
    "saw",
    "earlier",
    "uh",
    "looked",
    "tried",
    "wrap",
    "onto",
    "next",
    "line",
    "flex",
    "shrink",
    "perspective",
    "breaking",
    "container",
    "know",
    "calculated",
    "total",
    "overflow",
    "space",
    "allocated",
    "flex",
    "items",
    "total",
    "amount",
    "overflow",
    "going",
    "greater",
    "um",
    "basically",
    "going",
    "make",
    "shrink",
    "smaller",
    "minimum",
    "values",
    "possible",
    "let",
    "see",
    "calculate",
    "fun",
    "1",
    "9",
    "10",
    "11",
    "12",
    "13",
    "total",
    "flex",
    "items",
    "supposedly",
    "50",
    "pixels",
    "wide",
    "13",
    "50",
    "let",
    "see",
    "650",
    "pixels",
    "sub",
    "subtract",
    "400",
    "pixels",
    "container",
    "wi",
    "get",
    "250",
    "pixels",
    "overflow",
    "dealing",
    "going",
    "250",
    "pixels",
    "13",
    "units",
    "um",
    "allocate",
    "need",
    "divide",
    "13",
    "going",
    "get",
    "us",
    "let",
    "see",
    "19",
    "23",
    "pixels",
    "per",
    "unit",
    "going",
    "subtract",
    "going",
    "basically",
    "say",
    "let",
    "break",
    "onto",
    "next",
    "line",
    "clear",
    "going",
    "take",
    "original",
    "width",
    "minus",
    "pixels",
    "going",
    "equal",
    "let",
    "see",
    "3077",
    "pixels",
    "theoretically",
    "would",
    "take",
    "overflow",
    "subtract",
    "original",
    "sizes",
    "get",
    "us",
    "total",
    "width",
    "pixels",
    "inspect",
    "element",
    "click",
    "going",
    "see",
    "little",
    "min",
    "property",
    "popped",
    "says",
    "minimum",
    "size",
    "element",
    "going",
    "12",
    "pixels",
    "minimum",
    "inner",
    "content",
    "12",
    "pixels",
    "add",
    "padding",
    "border",
    "elements",
    "going",
    "break",
    "value",
    "calculated",
    "basically",
    "going",
    "uh",
    "content",
    "going",
    "big",
    "shrink",
    "much",
    "hopefully",
    "lost",
    "um",
    "try",
    "lay",
    "logical",
    "manner",
    "um",
    "know",
    "lot",
    "detail",
    "definitely",
    "totally",
    "necessary",
    "really",
    "think",
    "knowing",
    "kind",
    "stuff",
    "calculated",
    "extra",
    "step",
    "take",
    "developer",
    "really",
    "um",
    "understand",
    "able",
    "debug",
    "things",
    "understand",
    "okay",
    "breaking",
    "flex",
    "container",
    "wo",
    "shrink",
    "enough",
    "know",
    "kind",
    "questions",
    "let",
    "one",
    "um",
    "practice",
    "problem",
    "guess",
    "could",
    "call",
    "let",
    "go",
    "back",
    "nine",
    "elements",
    "going",
    "naturally",
    "fit",
    "within",
    "moment",
    "allocated",
    "uh",
    "pixels",
    "50",
    "minus",
    "get",
    "shrunk",
    "fit",
    "wanted",
    "allocate",
    "certain",
    "items",
    "change",
    "defaults",
    "um",
    "let",
    "go",
    "ahead",
    "say",
    "want",
    "first",
    "three",
    "items",
    "flex",
    "container",
    "keep",
    "50",
    "pixel",
    "width",
    "way",
    "would",
    "go",
    "item",
    "one",
    "set",
    "flex",
    "uh",
    "shrink",
    "value",
    "zero",
    "default",
    "copy",
    "2",
    "three",
    "see",
    "get",
    "wider",
    "inspect",
    "going",
    "50",
    "pixels",
    "wide",
    "remainder",
    "going",
    "absorb",
    "uh",
    "overflow",
    "space",
    "shrinking",
    "quick",
    "review",
    "total",
    "width",
    "items",
    "flex",
    "items",
    "flex",
    "container",
    "equal",
    "total",
    "flex",
    "container",
    "enough",
    "items",
    "flex",
    "grow",
    "going",
    "applies",
    "empty",
    "space",
    "going",
    "allocated",
    "based",
    "flex",
    "grow",
    "values",
    "overflow",
    "happens",
    "items",
    "fit",
    "flex",
    "container",
    "flex",
    "shrink",
    "um",
    "apply",
    "based",
    "flex",
    "shrink",
    "values",
    "item",
    "determines",
    "overflow",
    "space",
    "going",
    "allocated",
    "last",
    "property",
    "um",
    "sizing",
    "talk",
    "flex",
    "basis",
    "let",
    "get",
    "container",
    "um",
    "back",
    "spot",
    "four",
    "let",
    "comment",
    "case",
    "need",
    "later",
    "four",
    "items",
    "explicitly",
    "set",
    "50",
    "pixels",
    "wide",
    "set",
    "50",
    "pixels",
    "wide",
    "50",
    "pixels",
    "tall",
    "wanted",
    "change",
    "dimensions",
    "actually",
    "using",
    "flex",
    "item",
    "property",
    "let",
    "go",
    "first",
    "flex",
    "item",
    "set",
    "flex",
    "basis",
    "equal",
    "40",
    "see",
    "first",
    "item",
    "gets",
    "lot",
    "wider",
    "trying",
    "trying",
    "fill",
    "empty",
    "space",
    "respecting",
    "flex",
    "basis",
    "property",
    "uh",
    "width",
    "property",
    "set",
    "earlier",
    "default",
    "flex",
    "basis",
    "actually",
    "set",
    "auto",
    "set",
    "auto",
    "basically",
    "saying",
    "uh",
    "flexbox",
    "go",
    "ahead",
    "look",
    "width",
    "height",
    "properties",
    "find",
    "respect",
    "properties",
    "width",
    "height",
    "flex",
    "items",
    "find",
    "find",
    "go",
    "ahead",
    "size",
    "flex",
    "items",
    "based",
    "inner",
    "content",
    "default",
    "flex",
    "basis",
    "also",
    "assign",
    "pixel",
    "units",
    "percentage",
    "units",
    "flex",
    "basis",
    "override",
    "width",
    "height",
    "flex",
    "items",
    "unlocks",
    "lot",
    "possibilities",
    "depending",
    "use",
    "flex",
    "grow",
    "flex",
    "shrink",
    "get",
    "bunch",
    "different",
    "combinations",
    "looking",
    "flex",
    "box",
    "right",
    "four",
    "items",
    "50",
    "pixels",
    "wide",
    "let",
    "say",
    "wanted",
    "make",
    "even",
    "widths",
    "span",
    "across",
    "whole",
    "container",
    "one",
    "way",
    "could",
    "coming",
    "flex",
    "items",
    "setting",
    "flex",
    "grow",
    "equal",
    "one",
    "going",
    "equally",
    "allocate",
    "empty",
    "space",
    "talked",
    "one",
    "way",
    "could",
    "also",
    "backtrack",
    "little",
    "bit",
    "instead",
    "set",
    "flex",
    "basis",
    "25",
    "items",
    "going",
    "equally",
    "give",
    "width",
    "items",
    "give",
    "exact",
    "result",
    "come",
    "try",
    "set",
    "know",
    "flex",
    "grow",
    "property",
    "one",
    "items",
    "going",
    "change",
    "flex",
    "basis",
    "going",
    "take",
    "precedence",
    "cases",
    "maybe",
    "set",
    "flex",
    "basis",
    "uh",
    "property",
    "items",
    "equal",
    "100",
    "case",
    "given",
    "25",
    "adds",
    "100",
    "going",
    "fill",
    "whole",
    "container",
    "let",
    "say",
    "first",
    "item",
    "give",
    "10",
    "going",
    "missing",
    "15",
    "container",
    "let",
    "let",
    "delete",
    "second",
    "um",
    "flex",
    "basis",
    "properties",
    "sum",
    "85",
    "calculating",
    "correctly",
    "empty",
    "space",
    "right",
    "fully",
    "fill",
    "container",
    "put",
    "flex",
    "grow",
    "property",
    "set",
    "one",
    "first",
    "element",
    "going",
    "take",
    "remaining",
    "space",
    "back",
    "started",
    "essentially",
    "setting",
    "uh",
    "flex",
    "bases",
    "25",
    "last",
    "three",
    "10",
    "plus",
    "flex",
    "grow",
    "one",
    "flex",
    "basis",
    "25",
    "many",
    "ways",
    "get",
    "answer",
    "last",
    "thing",
    "talk",
    "order",
    "items",
    "along",
    "main",
    "axis",
    "flex",
    "container",
    "wanted",
    "change",
    "uh",
    "swap",
    "maybe",
    "wanted",
    "put",
    "number",
    "two",
    "number",
    "one",
    "place",
    "could",
    "come",
    "html",
    "put",
    "number",
    "two",
    "number",
    "one",
    "flip",
    "flex",
    "box",
    "even",
    "actually",
    "flip",
    "css",
    "came",
    "css",
    "looked",
    "flex",
    "item",
    "number",
    "one",
    "gave",
    "order",
    "two",
    "gave",
    "flex",
    "item",
    "2",
    "order",
    "one",
    "going",
    "see",
    "um",
    "flipped",
    "hold",
    "think",
    "reason",
    "working",
    "set",
    "set",
    "order",
    "three",
    "three",
    "order",
    "four",
    "four",
    "three",
    "four",
    "natural",
    "order",
    "two",
    "one",
    "going",
    "flipped",
    "set",
    "order",
    "flex",
    "items",
    "determine",
    "know",
    "order",
    "come",
    "might",
    "ask",
    "useful",
    "well",
    "many",
    "cases",
    "really",
    "useful",
    "might",
    "well",
    "change",
    "order",
    "html",
    "done",
    "designing",
    "responsively",
    "talked",
    "prior",
    "video",
    "um",
    "think",
    "previous",
    "video",
    "resizing",
    "browser",
    "may",
    "want",
    "different",
    "elements",
    "page",
    "go",
    "different",
    "orders",
    "say",
    "nav",
    "bar",
    "top",
    "got",
    "main",
    "content",
    "sidebar",
    "footer",
    "maybe",
    "want",
    "order",
    "differently",
    "um",
    "whether",
    "whether",
    "desktop",
    "mobile",
    "device",
    "would",
    "would",
    "set",
    "media",
    "query",
    "might",
    "come",
    "say",
    "media",
    "say",
    "like",
    "minwidth",
    "600",
    "px",
    "something",
    "like",
    "could",
    "probably",
    "set",
    "flex",
    "item",
    "number",
    "four",
    "order",
    "one",
    "say",
    "flex",
    "item",
    "one",
    "order",
    "four",
    "something",
    "like",
    "getting",
    "bigger",
    "600",
    "px",
    "going",
    "uh",
    "show",
    "shrink",
    "see",
    "flip",
    "resize",
    "order",
    "differently",
    "based",
    "different",
    "screens",
    "point",
    "learned",
    "pretty",
    "much",
    "main",
    "properties",
    "flexbox",
    "course",
    "shorthand",
    "properties",
    "make",
    "life",
    "easier",
    "instead",
    "know",
    "setting",
    "flex",
    "basis",
    "grow",
    "shrink",
    "val",
    "values",
    "um",
    "come",
    "say",
    "flex",
    "first",
    "value",
    "going",
    "flex",
    "grow",
    "maybe",
    "want",
    "set",
    "one",
    "second",
    "one",
    "flex",
    "shrink",
    "might",
    "set",
    "one",
    "third",
    "one",
    "going",
    "flex",
    "basis",
    "set",
    "auto",
    "shorthand",
    "way",
    "writing",
    "flex",
    "grow",
    "flex",
    "shrink",
    "flex",
    "basis",
    "one",
    "line",
    "shorthand",
    "property",
    "necessary",
    "would",
    "even",
    "recommend",
    "using",
    "comfortable",
    "flexbox",
    "well",
    "actually",
    "brand",
    "new",
    "day",
    "hat",
    "hoodie",
    "whatever",
    "um",
    "forgot",
    "add",
    "last",
    "part",
    "video",
    "actually",
    "taking",
    "previous",
    "challenge",
    "solved",
    "following",
    "along",
    "full",
    "stack",
    "road",
    "map",
    "solved",
    "pricing",
    "card",
    "challenge",
    "part",
    "um",
    "original",
    "html",
    "css",
    "tutorials",
    "also",
    "made",
    "responsive",
    "prior",
    "video",
    "responsive",
    "web",
    "design",
    "want",
    "wrap",
    "video",
    "take",
    "design",
    "make",
    "uh",
    "flex",
    "boox",
    "instead",
    "remind",
    "moment",
    "get",
    "bottom",
    "left",
    "bottom",
    "right",
    "sections",
    "sitting",
    "next",
    "50",
    "width",
    "something",
    "little",
    "bit",
    "hacky",
    "um",
    "come",
    "html",
    "um",
    "see",
    "right",
    "line",
    "look",
    "know",
    "spectacular",
    "see",
    "got",
    "closing",
    "div",
    "right",
    "corresponds",
    "bottom",
    "left",
    "section",
    "uh",
    "div",
    "starting",
    "div",
    "bottom",
    "right",
    "section",
    "sitting",
    "right",
    "next",
    "looking",
    "html",
    "generally",
    "good",
    "syntax",
    "kind",
    "hack",
    "used",
    "remove",
    "white",
    "space",
    "allow",
    "fact",
    "50",
    "wids",
    "enter",
    "one",
    "line",
    "formatting",
    "sake",
    "see",
    "bottom",
    "right",
    "uh",
    "piece",
    "card",
    "actually",
    "disappears",
    "going",
    "underneath",
    "bottom",
    "left",
    "card",
    "hiding",
    "overflow",
    "see",
    "css",
    "main",
    "card",
    "got",
    "overflow",
    "hidden",
    "take",
    "see",
    "pop",
    "going",
    "solve",
    "easily",
    "using",
    "flexbox",
    "get",
    "rid",
    "hacky",
    "solutions",
    "make",
    "little",
    "bit",
    "simpler",
    "us",
    "see",
    "exactly",
    "working",
    "let",
    "go",
    "back",
    "layout",
    "example",
    "used",
    "originally",
    "build",
    "card",
    "could",
    "see",
    "dealing",
    "confuse",
    "oursel",
    "different",
    "styling",
    "trying",
    "focus",
    "layout",
    "pretty",
    "work",
    "layout",
    "purposes",
    "least",
    "see",
    "come",
    "added",
    "media",
    "query",
    "prior",
    "video",
    "watched",
    "talk",
    "responsive",
    "design",
    "media",
    "queries",
    "basically",
    "saying",
    "block",
    "want",
    "apply",
    "certain",
    "styles",
    "uh",
    "device",
    "greater",
    "500",
    "greater",
    "equal",
    "576",
    "pixels",
    "see",
    "shrink",
    "changes",
    "layout",
    "go",
    "576",
    "two",
    "uh",
    "style",
    "selectors",
    "apply",
    "see",
    "width",
    "height",
    "card",
    "gets",
    "applied",
    "bottom",
    "left",
    "bottom",
    "right",
    "section",
    "going",
    "get",
    "50",
    "wid",
    "flex",
    "boox",
    "relatively",
    "simple",
    "looking",
    "entire",
    "card",
    "composed",
    "top",
    "section",
    "bottom",
    "section",
    "two",
    "left",
    "right",
    "subbottom",
    "sections",
    "want",
    "desktop",
    "device",
    "looking",
    "right",
    "want",
    "bottom",
    "sections",
    "one",
    "row",
    "shrink",
    "mobile",
    "want",
    "come",
    "column",
    "remember",
    "minutes",
    "ago",
    "talked",
    "flex",
    "direction",
    "take",
    "main",
    "axis",
    "change",
    "based",
    "flex",
    "direction",
    "thinking",
    "desktop",
    "device",
    "want",
    "flex",
    "direction",
    "equal",
    "row",
    "two",
    "go",
    "right",
    "next",
    "mobile",
    "device",
    "want",
    "column",
    "way",
    "since",
    "designing",
    "mobile",
    "first",
    "come",
    "main",
    "styles",
    "go",
    "bottom",
    "section",
    "want",
    "turn",
    "flex",
    "container",
    "necessarily",
    "want",
    "turn",
    "whole",
    "card",
    "flex",
    "container",
    "top",
    "top",
    "section",
    "actually",
    "fine",
    "would",
    "overkilled",
    "put",
    "flexbox",
    "container",
    "bottom",
    "section",
    "let",
    "go",
    "bottom",
    "section",
    "type",
    "display",
    "flex",
    "see",
    "believe",
    "nothing",
    "happen",
    "moment",
    "desktop",
    "view",
    "let",
    "go",
    "ahead",
    "go",
    "mobile",
    "view",
    "got",
    "things",
    "messed",
    "designing",
    "mobile",
    "first",
    "right",
    "working",
    "mobile",
    "device",
    "still",
    "sitting",
    "next",
    "change",
    "set",
    "flex",
    "direction",
    "column",
    "see",
    "jump",
    "right",
    "pretty",
    "much",
    "comes",
    "mobile",
    "design",
    "let",
    "see",
    "find",
    "anything",
    "remove",
    "um",
    "believe",
    "remove",
    "vertical",
    "line",
    "okay",
    "going",
    "get",
    "actually",
    "get",
    "let",
    "get",
    "design",
    "right",
    "first",
    "worry",
    "moment",
    "set",
    "flex",
    "direction",
    "column",
    "designing",
    "mobile",
    "first",
    "also",
    "going",
    "apply",
    "desktop",
    "design",
    "unless",
    "change",
    "media",
    "query",
    "let",
    "say",
    "bottom",
    "section",
    "give",
    "flex",
    "direction",
    "row",
    "default",
    "resize",
    "get",
    "get",
    "similar",
    "result",
    "actually",
    "pretty",
    "much",
    "done",
    "redundant",
    "styles",
    "actually",
    "remove",
    "using",
    "flexbox",
    "uh",
    "nice",
    "parts",
    "flexbox",
    "come",
    "write",
    "much",
    "css",
    "remove",
    "bottom",
    "left",
    "bottom",
    "right",
    "section",
    "wids",
    "believe",
    "may",
    "screw",
    "us",
    "bit",
    "change",
    "things",
    "hold",
    "think",
    "need",
    "change",
    "uh",
    "let",
    "remove",
    "display",
    "inline",
    "block",
    "bottom",
    "left",
    "section",
    "bottom",
    "right",
    "uh",
    "remove",
    "100",
    "width",
    "remove",
    "vertical",
    "align",
    "top",
    "need",
    "anymore",
    "notice",
    "got",
    "screwed",
    "design",
    "uh",
    "surprising",
    "let",
    "make",
    "sure",
    "mobile",
    "still",
    "working",
    "good",
    "mobile",
    "still",
    "working",
    "desk",
    "top",
    "little",
    "bit",
    "work",
    "remember",
    "bottom",
    "section",
    "flex",
    "container",
    "means",
    "based",
    "html",
    "looking",
    "bottom",
    "section",
    "two",
    "direct",
    "children",
    "bottom",
    "left",
    "section",
    "bottom",
    "right",
    "section",
    "actually",
    "enter",
    "new",
    "line",
    "using",
    "flexbox",
    "hack",
    "anyways",
    "bottom",
    "left",
    "right",
    "section",
    "children",
    "therefore",
    "two",
    "style",
    "uh",
    "selectors",
    "going",
    "flex",
    "items",
    "desktop",
    "view",
    "flex",
    "direction",
    "set",
    "row",
    "means",
    "bottom",
    "section",
    "main",
    "axis",
    "going",
    "horizontal",
    "remember",
    "minutes",
    "ago",
    "way",
    "resize",
    "flex",
    "items",
    "along",
    "main",
    "axis",
    "going",
    "one",
    "two",
    "ways",
    "use",
    "flex",
    "grow",
    "property",
    "use",
    "flex",
    "basis",
    "let",
    "come",
    "try",
    "show",
    "start",
    "flex",
    "basis",
    "may",
    "little",
    "straight",
    "forward",
    "put",
    "50",
    "bottom",
    "left",
    "section",
    "say",
    "flex",
    "bases",
    "50",
    "bottom",
    "right",
    "section",
    "completed",
    "card",
    "looks",
    "great",
    "resize",
    "still",
    "going",
    "work",
    "one",
    "solution",
    "another",
    "solution",
    "could",
    "come",
    "could",
    "say",
    "flex",
    "grow",
    "set",
    "equal",
    "one",
    "flex",
    "grow",
    "equal",
    "one",
    "bottom",
    "right",
    "section",
    "work",
    "fine",
    "going",
    "directly",
    "flex",
    "basis",
    "flex",
    "grow",
    "really",
    "illustrate",
    "point",
    "let",
    "get",
    "rid",
    "flex",
    "grows",
    "second",
    "conceptualize",
    "default",
    "two",
    "uh",
    "subcontainers",
    "natural",
    "width",
    "give",
    "given",
    "explicit",
    "width",
    "going",
    "take",
    "content",
    "content",
    "sitting",
    "within",
    "see",
    "filling",
    "entire",
    "width",
    "container",
    "fill",
    "entire",
    "section",
    "got",
    "empty",
    "space",
    "right",
    "flex",
    "grow",
    "property",
    "applies",
    "empty",
    "space",
    "basically",
    "going",
    "enable",
    "flex",
    "grow",
    "one",
    "properties",
    "like",
    "talked",
    "going",
    "split",
    "space",
    "give",
    "one",
    "unit",
    "bottom",
    "left",
    "section",
    "one",
    "unit",
    "bottom",
    "right",
    "therefore",
    "going",
    "believe",
    "perfectly",
    "equal",
    "actually",
    "may",
    "perfectly",
    "equal",
    "may",
    "coincidence",
    "content",
    "similar",
    "width",
    "let",
    "make",
    "sure",
    "correct",
    "let",
    "enable",
    "check",
    "dev",
    "tools",
    "let",
    "inspect",
    "let",
    "see",
    "dealing",
    "one",
    "263",
    "pixels",
    "uh",
    "wide",
    "276",
    "pixels",
    "wide",
    "glad",
    "looked",
    "actually",
    "thinking",
    "correctly",
    "um",
    "correct",
    "solution",
    "probably",
    "going",
    "flex",
    "basis",
    "50",
    "um",
    "looks",
    "like",
    "equal",
    "use",
    "flex",
    "grow",
    "similar",
    "widths",
    "default",
    "like",
    "naturally",
    "content",
    "similar",
    "width",
    "sections",
    "close",
    "dev",
    "tools",
    "let",
    "say",
    "came",
    "added",
    "bunch",
    "content",
    "one",
    "list",
    "items",
    "bottom",
    "right",
    "see",
    "flex",
    "grow",
    "working",
    "quite",
    "well",
    "giving",
    "equal",
    "wids",
    "growing",
    "based",
    "natural",
    "size",
    "stand",
    "corrected",
    "correct",
    "way",
    "um",
    "flex",
    "grow",
    "least",
    "think",
    "flex",
    "basis",
    "far",
    "reliable",
    "way",
    "split",
    "equal",
    "containers",
    "go",
    "call",
    "day",
    "think",
    "solved",
    "um",
    "liking",
    "basic",
    "layout",
    "shrink",
    "goes",
    "mobile",
    "come",
    "um",
    "back",
    "card",
    "let",
    "let",
    "bring",
    "guy",
    "back",
    "see",
    "everything",
    "working",
    "okay",
    "card",
    "got",
    "turn",
    "flex",
    "box",
    "um",
    "exactly",
    "layout",
    "example",
    "remember",
    "came",
    "um",
    "need",
    "need",
    "bottom",
    "section",
    "wanted",
    "flex",
    "direction",
    "row",
    "desktop",
    "device",
    "bottom",
    "section",
    "need",
    "display",
    "flex",
    "um",
    "set",
    "flex",
    "direction",
    "column",
    "let",
    "see",
    "got",
    "looks",
    "good",
    "wanted",
    "remove",
    "bottom",
    "left",
    "bottom",
    "right",
    "sections",
    "know",
    "lot",
    "styles",
    "uh",
    "need",
    "guy",
    "need",
    "vertical",
    "lines",
    "need",
    "width",
    "add",
    "flex",
    "basis",
    "50",
    "looking",
    "good",
    "believe",
    "solved",
    "think",
    "anything",
    "otherwise",
    "one",
    "thing",
    "want",
    "show",
    "could",
    "use",
    "flexbox",
    "see",
    "29",
    "per",
    "month",
    "sitting",
    "next",
    "whenever",
    "horizontal",
    "content",
    "usually",
    "decent",
    "uh",
    "use",
    "case",
    "flexbox",
    "let",
    "look",
    "html",
    "set",
    "see",
    "price",
    "container",
    "um",
    "would",
    "overall",
    "parent",
    "parent",
    "two",
    "children",
    "items",
    "turned",
    "price",
    "container",
    "flex",
    "container",
    "price",
    "price",
    "frequency",
    "would",
    "therefore",
    "become",
    "flex",
    "items",
    "let",
    "find",
    "css",
    "price",
    "container",
    "set",
    "margin",
    "probably",
    "going",
    "stay",
    "even",
    "flex",
    "container",
    "um",
    "also",
    "price",
    "price",
    "free",
    "frequency",
    "looks",
    "like",
    "styled",
    "right",
    "let",
    "let",
    "change",
    "order",
    "cuz",
    "makes",
    "little",
    "sense",
    "container",
    "top",
    "going",
    "set",
    "display",
    "flex",
    "default",
    "going",
    "set",
    "row",
    "put",
    "next",
    "um",
    "let",
    "get",
    "rid",
    "styles",
    "within",
    "think",
    "need",
    "except",
    "maybe",
    "font",
    "size",
    "opacity",
    "layout",
    "related",
    "properties",
    "starting",
    "point",
    "see",
    "default",
    "even",
    "removed",
    "styles",
    "display",
    "flex",
    "making",
    "whole",
    "container",
    "flex",
    "container",
    "going",
    "still",
    "put",
    "next",
    "let",
    "back",
    "remember",
    "exactly",
    "going",
    "html",
    "price",
    "container",
    "two",
    "items",
    "within",
    "flex",
    "container",
    "two",
    "flex",
    "items",
    "default",
    "set",
    "display",
    "flex",
    "makes",
    "main",
    "axis",
    "horizontal",
    "row",
    "therefore",
    "want",
    "align",
    "things",
    "along",
    "main",
    "axis",
    "use",
    "justify",
    "content",
    "want",
    "align",
    "cross",
    "axis",
    "use",
    "align",
    "items",
    "see",
    "per",
    "month",
    "little",
    "bit",
    "misaligned",
    "29",
    "easy",
    "way",
    "fix",
    "come",
    "price",
    "container",
    "set",
    "align",
    "items",
    "set",
    "center",
    "see",
    "perfectly",
    "centers",
    "two",
    "right",
    "next",
    "much",
    "better",
    "solution",
    "set",
    "position",
    "relative",
    "set",
    "pixels",
    "pull",
    "little",
    "bit",
    "last",
    "thing",
    "notice",
    "spacing",
    "real",
    "solution",
    "flex",
    "box",
    "mean",
    "could",
    "come",
    "justify",
    "content",
    "say",
    "something",
    "like",
    "space",
    "see",
    "going",
    "space",
    "way",
    "much",
    "really",
    "going",
    "help",
    "us",
    "really",
    "best",
    "way",
    "come",
    "uh",
    "either",
    "price",
    "frequency",
    "price",
    "item",
    "set",
    "margin",
    "even",
    "need",
    "style",
    "anymore",
    "uh",
    "since",
    "already",
    "written",
    "price",
    "frequency",
    "use",
    "say",
    "um",
    "per",
    "month",
    "piece",
    "say",
    "margin",
    "left",
    "give",
    "something",
    "like",
    "five",
    "pixels",
    "spaces",
    "nicely",
    "easy",
    "straightforward",
    "solve",
    "mobile",
    "first",
    "fully",
    "responsive",
    "solution",
    "flexbox",
    "shrinks",
    "gets",
    "bigger",
    "looks",
    "great",
    "devices",
    "video",
    "going",
    "building",
    "testimonials",
    "grid",
    "going",
    "mobile",
    "first",
    "responsive",
    "design",
    "um",
    "solution",
    "also",
    "going",
    "using",
    "flexbox",
    "goal",
    "video",
    "solve",
    "um",
    "challenge",
    "frontend",
    "menor",
    "also",
    "apply",
    "skills",
    "learned",
    "previous",
    "lessons",
    "really",
    "start",
    "use",
    "real",
    "world",
    "lastly",
    "going",
    "adding",
    "extra",
    "pieces",
    "puzzle",
    "throughout",
    "series",
    "using",
    "codeen",
    "nice",
    "environment",
    "html",
    "css",
    "javascript",
    "one",
    "place",
    "hooked",
    "ready",
    "go",
    "since",
    "challenge",
    "relatively",
    "straightforward",
    "see",
    "walk",
    "want",
    "also",
    "add",
    "concept",
    "code",
    "editor",
    "going",
    "downloading",
    "using",
    "visual",
    "studio",
    "code",
    "also",
    "going",
    "little",
    "bit",
    "version",
    "control",
    "going",
    "get",
    "super",
    "detailed",
    "uh",
    "quite",
    "yet",
    "going",
    "show",
    "commands",
    "run",
    "get",
    "design",
    "pushed",
    "github",
    "deployed",
    "github",
    "pages",
    "know",
    "share",
    "url",
    "others",
    "built",
    "worry",
    "prerequisites",
    "really",
    "need",
    "going",
    "html",
    "cs",
    "make",
    "sure",
    "watched",
    "flexbox",
    "responsive",
    "design",
    "videos",
    "let",
    "get",
    "started",
    "come",
    "frontend",
    "menor",
    "challenge",
    "going",
    "creating",
    "already",
    "started",
    "need",
    "click",
    "let",
    "go",
    "challenges",
    "um",
    "guess",
    "profile",
    "challenges",
    "testimonials",
    "grid",
    "section",
    "download",
    "starter",
    "files",
    "going",
    "pop",
    "another",
    "screen",
    "downloaded",
    "files",
    "make",
    "sure",
    "visual",
    "studio",
    "code",
    "downloaded",
    "code",
    "editor",
    "actually",
    "made",
    "whole",
    "video",
    "code",
    "editors",
    "check",
    "um",
    "ones",
    "recommend",
    "obviously",
    "visual",
    "studio",
    "code",
    "would",
    "one",
    "go",
    "ahead",
    "download",
    "downloaded",
    "open",
    "brand",
    "new",
    "window",
    "going",
    "want",
    "click",
    "click",
    "file",
    "um",
    "open",
    "folder",
    "go",
    "find",
    "testimonial",
    "challenge",
    "starter",
    "pack",
    "downloaded",
    "got",
    "selected",
    "going",
    "open",
    "workpace",
    "start",
    "looking",
    "starter",
    "files",
    "open",
    "index",
    "html",
    "going",
    "actually",
    "working",
    "um",
    "see",
    "sorts",
    "text",
    "already",
    "luckily",
    "lot",
    "testimonials",
    "need",
    "um",
    "really",
    "implemented",
    "html",
    "elements",
    "good",
    "text",
    "ready",
    "go",
    "relate",
    "back",
    "using",
    "codepen",
    "basically",
    "html",
    "box",
    "codepen",
    "um",
    "local",
    "computer",
    "local",
    "file",
    "system",
    "rather",
    "cloud",
    "first",
    "question",
    "probably",
    "well",
    "actually",
    "view",
    "html",
    "document",
    "browser",
    "remember",
    "html",
    "css",
    "displayed",
    "browser",
    "therefore",
    "need",
    "web",
    "browser",
    "look",
    "way",
    "actually",
    "couple",
    "options",
    "show",
    "barebones",
    "option",
    "first",
    "go",
    "actually",
    "going",
    "using",
    "solve",
    "challenge",
    "view",
    "html",
    "document",
    "browser",
    "go",
    "file",
    "explorer",
    "windows",
    "works",
    "mac",
    "linux",
    "go",
    "folder",
    "saved",
    "find",
    "file",
    "notice",
    "say",
    "see",
    "file",
    "type",
    "chrome",
    "html",
    "document",
    "display",
    "name",
    "rightclick",
    "go",
    "open",
    "choose",
    "browser",
    "open",
    "might",
    "say",
    "google",
    "chrome",
    "click",
    "opened",
    "go",
    "back",
    "browser",
    "open",
    "google",
    "chrome",
    "lot",
    "text",
    "actually",
    "implement",
    "design",
    "html",
    "document",
    "looking",
    "see",
    "um",
    "url",
    "bar",
    "actually",
    "looking",
    "local",
    "c",
    "drive",
    "um",
    "mac",
    "linux",
    "going",
    "look",
    "little",
    "bit",
    "different",
    "um",
    "concept",
    "local",
    "path",
    "file",
    "displayed",
    "browser",
    "going",
    "point",
    "things",
    "might",
    "interesting",
    "first",
    "thing",
    "see",
    "little",
    "icon",
    "top",
    "left",
    "portion",
    "tab",
    "little",
    "frontend",
    "menor",
    "logo",
    "favicon",
    "might",
    "wondering",
    "well",
    "get",
    "well",
    "way",
    "put",
    "come",
    "back",
    "files",
    "look",
    "link",
    "tag",
    "right",
    "um",
    "actually",
    "putting",
    "favicon",
    "title",
    "metadata",
    "sizing",
    "really",
    "important",
    "um",
    "attribute",
    "href",
    "passed",
    "relative",
    "path",
    "learn",
    "lot",
    "absolute",
    "relative",
    "paths",
    "coming",
    "start",
    "working",
    "terminal",
    "little",
    "bit",
    "saying",
    "want",
    "look",
    "relative",
    "current",
    "directory",
    "images",
    "folder",
    "drop",
    "grab",
    "favicon",
    "32x32",
    "png",
    "open",
    "see",
    "little",
    "icon",
    "matches",
    "icon",
    "see",
    "tab",
    "furthermore",
    "got",
    "uh",
    "dock",
    "type",
    "important",
    "um",
    "html",
    "oiler",
    "plate",
    "actually",
    "going",
    "indent",
    "us",
    "see",
    "little",
    "bit",
    "better",
    "head",
    "tag",
    "pretty",
    "standard",
    "html",
    "document",
    "meta",
    "tags",
    "help",
    "displaying",
    "site",
    "browser",
    "properly",
    "pretty",
    "standard",
    "defaults",
    "might",
    "put",
    "course",
    "link",
    "talked",
    "title",
    "tag",
    "actually",
    "name",
    "tab",
    "going",
    "open",
    "change",
    "say",
    "instead",
    "frontend",
    "menor",
    "say",
    "testimonial",
    "challenge",
    "click",
    "save",
    "open",
    "browser",
    "click",
    "refresh",
    "see",
    "changed",
    "testimonial",
    "challenge",
    "right",
    "styles",
    "really",
    "looking",
    "um",
    "come",
    "back",
    "browser",
    "go",
    "codepen",
    "css",
    "right",
    "couple",
    "ways",
    "link",
    "actually",
    "use",
    "use",
    "link",
    "tag",
    "link",
    "styles",
    "put",
    "style",
    "html",
    "tag",
    "right",
    "going",
    "good",
    "practice",
    "good",
    "amount",
    "css",
    "want",
    "break",
    "separate",
    "file",
    "going",
    "delete",
    "need",
    "finally",
    "text",
    "basically",
    "look",
    "challenge",
    "wish",
    "better",
    "way",
    "see",
    "oh",
    "yeah",
    "actually",
    "design",
    "go",
    "desktop",
    "design",
    "see",
    "text",
    "text",
    "right",
    "going",
    "cut",
    "want",
    "make",
    "new",
    "file",
    "right",
    "clicked",
    "file",
    "pane",
    "click",
    "new",
    "file",
    "say",
    "placeholder",
    "give",
    "txt",
    "file",
    "extension",
    "plain",
    "text",
    "document",
    "paste",
    "save",
    "clutter",
    "html",
    "last",
    "part",
    "attribution",
    "look",
    "browser",
    "little",
    "piece",
    "want",
    "go",
    "ahead",
    "fill",
    "link",
    "whatever",
    "want",
    "know",
    "twitter",
    "account",
    "linkedin",
    "account",
    "github",
    "account",
    "whatever",
    "want",
    "going",
    "delete",
    "really",
    "want",
    "clutter",
    "anything",
    "want",
    "focus",
    "challenge",
    "point",
    "basic",
    "html",
    "boiler",
    "plate",
    "actually",
    "show",
    "shortcut",
    "get",
    "pretty",
    "much",
    "exactly",
    "um",
    "key",
    "strokes",
    "let",
    "save",
    "rightclick",
    "create",
    "new",
    "file",
    "going",
    "call",
    "going",
    "testing",
    "things",
    "within",
    "document",
    "going",
    "show",
    "use",
    "emit",
    "open",
    "built",
    "visual",
    "studio",
    "code",
    "basically",
    "type",
    "shorthand",
    "know",
    "characters",
    "click",
    "tab",
    "extend",
    "code",
    "snippet",
    "want",
    "already",
    "let",
    "give",
    "brief",
    "example",
    "wanted",
    "html",
    "document",
    "see",
    "visual",
    "studio",
    "code",
    "identified",
    "bottom",
    "right",
    "html",
    "document",
    "type",
    "h2",
    "going",
    "pull",
    "box",
    "says",
    "emit",
    "abbreviation",
    "click",
    "see",
    "going",
    "abbreviate",
    "really",
    "click",
    "tab",
    "going",
    "extend",
    "element",
    "want",
    "start",
    "typing",
    "similarly",
    "actually",
    "get",
    "entire",
    "html",
    "boiler",
    "plate",
    "keystrokes",
    "type",
    "html",
    "couple",
    "options",
    "go",
    "see",
    "exactly",
    "going",
    "create",
    "basic",
    "html",
    "give",
    "main",
    "tag",
    "want",
    "something",
    "little",
    "better",
    "um",
    "oops",
    "already",
    "accident",
    "um",
    "html",
    "5",
    "let",
    "let",
    "go",
    "ahead",
    "see",
    "html",
    "5",
    "gives",
    "us",
    "going",
    "give",
    "us",
    "pretty",
    "much",
    "everything",
    "want",
    "like",
    "saw",
    "earlier",
    "finally",
    "html",
    "xml",
    "um",
    "something",
    "probably",
    "going",
    "use",
    "often",
    "click",
    "html5",
    "scroll",
    "arrow",
    "keys",
    "press",
    "tab",
    "going",
    "break",
    "us",
    "um",
    "boiler",
    "plate",
    "similar",
    "set",
    "downloaded",
    "starter",
    "files",
    "front",
    "menor",
    "challenge",
    "handy",
    "way",
    "create",
    "course",
    "change",
    "title",
    "uh",
    "think",
    "link",
    "tag",
    "favicon",
    "setup",
    "default",
    "got",
    "meta",
    "tags",
    "necessary",
    "set",
    "go",
    "challenge",
    "going",
    "using",
    "emt",
    "snippets",
    "try",
    "mention",
    "go",
    "along",
    "um",
    "know",
    "going",
    "delete",
    "test",
    "file",
    "need",
    "longer",
    "let",
    "show",
    "workflow",
    "could",
    "write",
    "html",
    "h2",
    "tab",
    "title",
    "basic",
    "html",
    "click",
    "save",
    "alt",
    "tab",
    "switch",
    "back",
    "browser",
    "open",
    "tab",
    "click",
    "refresh",
    "see",
    "new",
    "html",
    "document",
    "would",
    "cumbersome",
    "great",
    "way",
    "make",
    "everything",
    "fast",
    "going",
    "going",
    "split",
    "screens",
    "going",
    "put",
    "visual",
    "studio",
    "code",
    "left",
    "testimonial",
    "challenge",
    "right",
    "obviously",
    "lot",
    "room",
    "always",
    "click",
    "right",
    "collapse",
    "might",
    "make",
    "little",
    "bit",
    "smaller",
    "us",
    "working",
    "dev",
    "tools",
    "click",
    "inspect",
    "chrome",
    "right",
    "use",
    "firefox",
    "well",
    "want",
    "um",
    "since",
    "got",
    "side",
    "side",
    "going",
    "actually",
    "redock",
    "stuff",
    "bottom",
    "let",
    "remember",
    "um",
    "let",
    "click",
    "go",
    "click",
    "three",
    "little",
    "dots",
    "click",
    "dock",
    "bottom",
    "much",
    "wider",
    "screen",
    "work",
    "resize",
    "top",
    "right",
    "corner",
    "see",
    "screen",
    "size",
    "click",
    "toggle",
    "device",
    "toolbar",
    "see",
    "explicitly",
    "um",
    "resize",
    "screen",
    "probably",
    "going",
    "better",
    "option",
    "us",
    "change",
    "zoom",
    "let",
    "say",
    "75",
    "see",
    "little",
    "bit",
    "better",
    "let",
    "zoom",
    "tiny",
    "bit",
    "need",
    "javascript",
    "console",
    "working",
    "javascript",
    "close",
    "drawer",
    "elements",
    "left",
    "html",
    "styles",
    "right",
    "css",
    "click",
    "select",
    "element",
    "button",
    "select",
    "h2",
    "locate",
    "within",
    "html",
    "document",
    "see",
    "relevant",
    "styles",
    "going",
    "workflow",
    "go",
    "know",
    "add",
    "new",
    "elements",
    "text",
    "click",
    "save",
    "come",
    "click",
    "refresh",
    "see",
    "added",
    "document",
    "one",
    "thing",
    "want",
    "going",
    "make",
    "whole",
    "workflow",
    "little",
    "bit",
    "nicer",
    "going",
    "come",
    "extensions",
    "piece",
    "let",
    "expand",
    "us",
    "go",
    "extensions",
    "uh",
    "tab",
    "within",
    "visual",
    "studio",
    "code",
    "let",
    "type",
    "live",
    "server",
    "live",
    "server",
    "way",
    "get",
    "automatic",
    "updates",
    "every",
    "time",
    "click",
    "save",
    "html",
    "css",
    "documents",
    "let",
    "install",
    "easy",
    "install",
    "uh",
    "extensions",
    "visual",
    "studio",
    "code",
    "um",
    "see",
    "installed",
    "think",
    "need",
    "another",
    "tab",
    "opened",
    "let",
    "close",
    "need",
    "close",
    "well",
    "get",
    "live",
    "server",
    "working",
    "come",
    "bottom",
    "right",
    "screen",
    "click",
    "go",
    "live",
    "going",
    "pop",
    "security",
    "box",
    "need",
    "allow",
    "access",
    "see",
    "got",
    "different",
    "address",
    "actually",
    "um",
    "get",
    "lot",
    "later",
    "series",
    "local",
    "host",
    "5501",
    "port",
    "serving",
    "serving",
    "document",
    "put",
    "next",
    "close",
    "add",
    "another",
    "know",
    "piece",
    "text",
    "text",
    "click",
    "save",
    "see",
    "immediately",
    "gets",
    "updated",
    "browser",
    "going",
    "incredibly",
    "handy",
    "us",
    "go",
    "back",
    "forth",
    "clicking",
    "refresh",
    "every",
    "time",
    "also",
    "really",
    "nice",
    "instead",
    "know",
    "going",
    "file",
    "folder",
    "opening",
    "browser",
    "directly",
    "visual",
    "studio",
    "code",
    "know",
    "long",
    "kind",
    "introduction",
    "get",
    "us",
    "started",
    "working",
    "project",
    "um",
    "trying",
    "within",
    "full",
    "stack",
    "series",
    "take",
    "every",
    "single",
    "step",
    "leaving",
    "anything",
    "going",
    "absolutely",
    "everything",
    "wanted",
    "show",
    "extensions",
    "emt",
    "abbreviations",
    "favicons",
    "metat",
    "tags",
    "little",
    "details",
    "learning",
    "wondered",
    "oftentimes",
    "tutorials",
    "would",
    "skip",
    "right",
    "finally",
    "ready",
    "start",
    "actual",
    "challenge",
    "start",
    "building",
    "testimonials",
    "grid",
    "first",
    "thing",
    "going",
    "always",
    "link",
    "css",
    "document",
    "open",
    "file",
    "explorer",
    "see",
    "css",
    "available",
    "us",
    "yet",
    "created",
    "go",
    "ahead",
    "rightclick",
    "create",
    "new",
    "file",
    "call",
    "whatever",
    "want",
    "really",
    "matter",
    "convention",
    "um",
    "let",
    "go",
    "ahead",
    "put",
    "basic",
    "style",
    "use",
    "wild",
    "card",
    "selects",
    "elements",
    "give",
    "color",
    "red",
    "reason",
    "know",
    "verify",
    "everything",
    "working",
    "correctly",
    "click",
    "save",
    "notice",
    "nothing",
    "happens",
    "reason",
    "nothing",
    "happens",
    "live",
    "server",
    "working",
    "told",
    "document",
    "need",
    "grab",
    "stylesheet",
    "let",
    "use",
    "emit",
    "abbreviation",
    "type",
    "link",
    "see",
    "sorts",
    "different",
    "links",
    "use",
    "go",
    "css",
    "click",
    "tab",
    "see",
    "css",
    "link",
    "set",
    "us",
    "since",
    "directory",
    "directory",
    "use",
    "exactly",
    "saying",
    "stay",
    "convention",
    "actually",
    "think",
    "style",
    "styles",
    "let",
    "rename",
    "save",
    "html",
    "document",
    "see",
    "immediately",
    "text",
    "color",
    "updated",
    "red",
    "know",
    "link",
    "working",
    "put",
    "know",
    "something",
    "like",
    "click",
    "save",
    "going",
    "work",
    "anymore",
    "going",
    "link",
    "tag",
    "following",
    "along",
    "series",
    "come",
    "codeen",
    "hooked",
    "css",
    "html",
    "default",
    "codeen",
    "type",
    "html",
    "type",
    "css",
    "work",
    "together",
    "working",
    "code",
    "pen",
    "honestly",
    "time",
    "developer",
    "wo",
    "actually",
    "come",
    "link",
    "link",
    "tag",
    "right",
    "let",
    "get",
    "started",
    "layout",
    "close",
    "file",
    "pane",
    "second",
    "look",
    "desktop",
    "design",
    "see",
    "kind",
    "flip",
    "back",
    "forth",
    "split",
    "editors",
    "believe",
    "split",
    "close",
    "top",
    "one",
    "top",
    "desktop",
    "design",
    "bottom",
    "kind",
    "small",
    "least",
    "give",
    "us",
    "general",
    "feeling",
    "kind",
    "layout",
    "need",
    "like",
    "get",
    "kind",
    "annoyed",
    "text",
    "flowing",
    "screen",
    "click",
    "view",
    "toggle",
    "word",
    "wrap",
    "everything",
    "wraps",
    "view",
    "kind",
    "like",
    "go",
    "start",
    "us",
    "let",
    "see",
    "dealing",
    "grid",
    "first",
    "step",
    "solving",
    "html",
    "css",
    "challenge",
    "um",
    "building",
    "web",
    "app",
    "general",
    "get",
    "layout",
    "correct",
    "saw",
    "previous",
    "lessons",
    "challenges",
    "put",
    "border",
    "div",
    "containers",
    "layout",
    "filled",
    "content",
    "styles",
    "going",
    "exact",
    "thing",
    "see",
    "going",
    "complicated",
    "obvious",
    "place",
    "start",
    "make",
    "little",
    "bigger",
    "1",
    "2",
    "3",
    "4",
    "five",
    "containers",
    "slightly",
    "different",
    "styles",
    "um",
    "looks",
    "like",
    "two",
    "white",
    "containers",
    "uh",
    "may",
    "exact",
    "style",
    "let",
    "give",
    "unique",
    "id",
    "uh",
    "select",
    "css",
    "little",
    "bit",
    "easier",
    "um",
    "emt",
    "abbreviations",
    "actually",
    "type",
    "hashtag",
    "whatever",
    "id",
    "want",
    "give",
    "going",
    "number",
    "say",
    "testimonial",
    "d1",
    "click",
    "tab",
    "see",
    "gives",
    "id",
    "attribute",
    "div",
    "default",
    "use",
    "emit",
    "abbreviations",
    "put",
    "hashtag",
    "type",
    "something",
    "put",
    "dot",
    "type",
    "something",
    "pr",
    "press",
    "tab",
    "give",
    "class",
    "quick",
    "shortcut",
    "go",
    "thing",
    "say",
    "testimonial",
    "another",
    "useful",
    "thing",
    "visual",
    "studio",
    "code",
    "go",
    "end",
    "line",
    "click",
    "contrl",
    "c",
    "copy",
    "crl",
    "v",
    "paste",
    "five",
    "come",
    "give",
    "three",
    "four",
    "five",
    "containers",
    "need",
    "click",
    "save",
    "everything",
    "going",
    "disappear",
    "cuz",
    "empty",
    "div",
    "containers",
    "okay",
    "next",
    "thing",
    "looking",
    "um",
    "normally",
    "put",
    "border",
    "everything",
    "make",
    "layout",
    "already",
    "kind",
    "grid",
    "might",
    "well",
    "start",
    "filling",
    "colors",
    "background",
    "see",
    "dealing",
    "additionally",
    "probably",
    "need",
    "start",
    "looking",
    "mobile",
    "design",
    "cu",
    "mobile",
    "first",
    "know",
    "going",
    "clutter",
    "screen",
    "little",
    "let",
    "go",
    "ahead",
    "open",
    "mobile",
    "design",
    "bottom",
    "part",
    "close",
    "back",
    "see",
    "every",
    "card",
    "going",
    "stacked",
    "directly",
    "top",
    "going",
    "look",
    "relatively",
    "similar",
    "desktop",
    "mobile",
    "looks",
    "like",
    "mobile",
    "design",
    "cards",
    "grid",
    "items",
    "testimonials",
    "going",
    "height",
    "content",
    "items",
    "content",
    "going",
    "taller",
    "ones",
    "less",
    "probably",
    "best",
    "way",
    "lay",
    "beginning",
    "grab",
    "content",
    "put",
    "background",
    "start",
    "getting",
    "structure",
    "everything",
    "let",
    "pull",
    "know",
    "really",
    "small",
    "work",
    "testimonial",
    "number",
    "one",
    "going",
    "put",
    "small",
    "amount",
    "content",
    "cuz",
    "want",
    "html",
    "document",
    "getting",
    "super",
    "busy",
    "bunch",
    "text",
    "yet",
    "kind",
    "take",
    "away",
    "uh",
    "concepts",
    "trying",
    "learn",
    "let",
    "go",
    "placeholder",
    "text",
    "maybe",
    "grab",
    "really",
    "short",
    "line",
    "text",
    "put",
    "paragraph",
    "tag",
    "copy",
    "click",
    "save",
    "um",
    "still",
    "red",
    "text",
    "really",
    "want",
    "let",
    "replace",
    "uh",
    "selector",
    "instead",
    "color",
    "red",
    "box",
    "sizing",
    "border",
    "box",
    "um",
    "basic",
    "css",
    "reset",
    "want",
    "want",
    "set",
    "box",
    "sizing",
    "border",
    "box",
    "got",
    "right",
    "text",
    "box",
    "sizing",
    "good",
    "let",
    "resize",
    "screen",
    "actually",
    "browser",
    "right",
    "mimicking",
    "mobile",
    "device",
    "perfect",
    "know",
    "know",
    "probably",
    "exactly",
    "mobile",
    "device",
    "let",
    "make",
    "even",
    "little",
    "bit",
    "smaller",
    "gives",
    "us",
    "room",
    "type",
    "anyways",
    "um",
    "close",
    "enough",
    "going",
    "um",
    "build",
    "mobile",
    "design",
    "talked",
    "responsive",
    "design",
    "video",
    "576",
    "pixels",
    "kind",
    "standard",
    "um",
    "mobile",
    "device",
    "anything",
    "576",
    "going",
    "considered",
    "mobile",
    "roughly",
    "looking",
    "right",
    "click",
    "inspect",
    "click",
    "little",
    "icon",
    "right",
    "get",
    "full",
    "screen",
    "um",
    "able",
    "see",
    "exactly",
    "wide",
    "typed",
    "584",
    "wanted",
    "hit",
    "576",
    "number",
    "little",
    "bit",
    "lower",
    "right",
    "keep",
    "screen",
    "size",
    "right",
    "uh",
    "go",
    "desktop",
    "uh",
    "design",
    "make",
    "little",
    "bit",
    "wider",
    "going",
    "copy",
    "text",
    "something",
    "additional",
    "testimonial",
    "divs",
    "going",
    "text",
    "work",
    "let",
    "look",
    "colors",
    "know",
    "colors",
    "use",
    "well",
    "starter",
    "files",
    "go",
    "style",
    "guide",
    "md",
    "going",
    "give",
    "layouts",
    "colors",
    "right",
    "going",
    "find",
    "colors",
    "need",
    "come",
    "colors",
    "see",
    "listed",
    "hsl",
    "format",
    "use",
    "css",
    "preferred",
    "way",
    "um",
    "honestly",
    "seen",
    "whole",
    "lot",
    "developers",
    "use",
    "hsl",
    "going",
    "going",
    "convert",
    "hex",
    "codes",
    "way",
    "work",
    "comfortable",
    "probably",
    "often",
    "reminder",
    "typed",
    "rgb",
    "hex",
    "get",
    "tool",
    "google",
    "basically",
    "come",
    "grab",
    "hsl",
    "value",
    "paste",
    "box",
    "copy",
    "hex",
    "code",
    "replace",
    "right",
    "got",
    "replaced",
    "got",
    "hex",
    "values",
    "little",
    "bit",
    "comfortable",
    "people",
    "using",
    "got",
    "couple",
    "notes",
    "text",
    "colors",
    "think",
    "mostly",
    "related",
    "text",
    "get",
    "little",
    "bit",
    "later",
    "going",
    "drag",
    "style",
    "guide",
    "bottom",
    "um",
    "portion",
    "visual",
    "studio",
    "code",
    "screen",
    "reference",
    "looks",
    "like",
    "background",
    "entire",
    "screen",
    "going",
    "light",
    "gray",
    "start",
    "go",
    "um",
    "addition",
    "box",
    "sizing",
    "also",
    "want",
    "set",
    "mark",
    "margin",
    "zero",
    "padding",
    "zero",
    "everything",
    "um",
    "unintended",
    "side",
    "effects",
    "click",
    "save",
    "see",
    "everything",
    "gets",
    "smooshed",
    "together",
    "excluded",
    "margin",
    "padding",
    "default",
    "set",
    "paragraph",
    "element",
    "browser",
    "come",
    "say",
    "body",
    "want",
    "background",
    "color",
    "believe",
    "light",
    "gray",
    "light",
    "grayish",
    "blue",
    "see",
    "one",
    "looks",
    "similar",
    "light",
    "gray",
    "definitely",
    "dark",
    "light",
    "grayish",
    "blue",
    "think",
    "match",
    "eyes",
    "playing",
    "tricks",
    "think",
    "background",
    "uh",
    "matches",
    "pretty",
    "well",
    "think",
    "got",
    "right",
    "got",
    "back",
    "background",
    "covered",
    "start",
    "filling",
    "containers",
    "individual",
    "id",
    "let",
    "template",
    "testimonial",
    "one",
    "copy",
    "five",
    "times",
    "may",
    "need",
    "start",
    "actually",
    "course",
    "need",
    "different",
    "colors",
    "first",
    "one",
    "purple",
    "purple",
    "card",
    "need",
    "grab",
    "color",
    "style",
    "guide",
    "believe",
    "moderate",
    "violet",
    "looking",
    "come",
    "testimonial",
    "one",
    "give",
    "background",
    "color",
    "click",
    "save",
    "see",
    "background",
    "color",
    "next",
    "one",
    "looking",
    "looks",
    "like",
    "kind",
    "darkish",
    "gray",
    "dark",
    "grayish",
    "blue",
    "think",
    "one",
    "want",
    "come",
    "testimonial",
    "2",
    "thing",
    "rest",
    "want",
    "waste",
    "time",
    "going",
    "go",
    "kind",
    "guess",
    "check",
    "get",
    "background",
    "colors",
    "correct",
    "one",
    "uh",
    "pieces",
    "grid",
    "one",
    "thing",
    "say",
    "speed",
    "numbering",
    "got",
    "numbered",
    "one",
    "five",
    "may",
    "wondering",
    "one",
    "five",
    "um",
    "reasons",
    "find",
    "later",
    "designed",
    "flexbox",
    "um",
    "top",
    "one",
    "one",
    "two",
    "3",
    "four",
    "one",
    "right",
    "going",
    "fifth",
    "one",
    "know",
    "going",
    "styling",
    "backgrounds",
    "right",
    "got",
    "background",
    "colors",
    "filled",
    "see",
    "mobile",
    "design",
    "trying",
    "make",
    "room",
    "edge",
    "screen",
    "items",
    "within",
    "grid",
    "going",
    "create",
    "going",
    "actually",
    "wrap",
    "items",
    "one",
    "big",
    "container",
    "going",
    "set",
    "padding",
    "container",
    "bring",
    "inwards",
    "little",
    "bit",
    "bit",
    "go",
    "right",
    "divs",
    "sitting",
    "within",
    "body",
    "going",
    "say",
    "um",
    "want",
    "create",
    "id",
    "testimonial",
    "grid",
    "container",
    "specific",
    "grab",
    "closing",
    "div",
    "paste",
    "want",
    "select",
    "testimonial",
    "grid",
    "container",
    "put",
    "styles",
    "hashtag",
    "grab",
    "id",
    "want",
    "set",
    "padding",
    "um",
    "either",
    "set",
    "percentage",
    "pixels",
    "um",
    "since",
    "going",
    "making",
    "responsive",
    "going",
    "start",
    "percentage",
    "usually",
    "2",
    "works",
    "pretty",
    "well",
    "see",
    "get",
    "little",
    "bit",
    "padding",
    "um",
    "course",
    "look",
    "mobile",
    "design",
    "design",
    "make",
    "bigger",
    "little",
    "padding",
    "top",
    "sides",
    "actually",
    "use",
    "shorthand",
    "padding",
    "property",
    "say",
    "want",
    "2",
    "maybe",
    "5",
    "save",
    "actually",
    "got",
    "wrong",
    "top",
    "bottom",
    "going",
    "first",
    "argument",
    "left",
    "right",
    "second",
    "let",
    "bump",
    "three",
    "see",
    "got",
    "looks",
    "pretty",
    "good",
    "um",
    "stay",
    "fairly",
    "satisfied",
    "spacing",
    "something",
    "really",
    "bothering",
    "right",
    "text",
    "color",
    "darker",
    "backgrounds",
    "um",
    "get",
    "mad",
    "let",
    "go",
    "ahead",
    "fill",
    "first",
    "one",
    "need",
    "white",
    "um",
    "text",
    "color",
    "throw",
    "also",
    "copy",
    "testimonial",
    "2",
    "good",
    "three",
    "good",
    "five",
    "also",
    "need",
    "four",
    "see",
    "text",
    "popping",
    "little",
    "bit",
    "better",
    "um",
    "crammed",
    "together",
    "need",
    "space",
    "things",
    "little",
    "bit",
    "see",
    "mobile",
    "design",
    "little",
    "bit",
    "space",
    "around",
    "inner",
    "content",
    "um",
    "grid",
    "component",
    "also",
    "space",
    "grid",
    "component",
    "mobile",
    "device",
    "like",
    "simple",
    "way",
    "add",
    "spacing",
    "set",
    "margin",
    "bottom",
    "looks",
    "roughly",
    "around",
    "20",
    "pixels",
    "give",
    "take",
    "instead",
    "trying",
    "set",
    "let",
    "create",
    "class",
    "selector",
    "grabs",
    "could",
    "could",
    "come",
    "grab",
    "um",
    "one",
    "time",
    "separated",
    "commas",
    "going",
    "get",
    "tedious",
    "better",
    "way",
    "come",
    "html",
    "instead",
    "trying",
    "grab",
    "ids",
    "let",
    "assign",
    "class",
    "grid",
    "items",
    "say",
    "grid",
    "item",
    "going",
    "class",
    "name",
    "copy",
    "divs",
    "little",
    "shortcut",
    "within",
    "visual",
    "studio",
    "code",
    "find",
    "spot",
    "want",
    "go",
    "hold",
    "alt",
    "key",
    "different",
    "mac",
    "windows",
    "alt",
    "key",
    "click",
    "different",
    "place",
    "see",
    "two",
    "cursors",
    "click",
    "three",
    "cursors",
    "finally",
    "four",
    "type",
    "paste",
    "class",
    "um",
    "classes",
    "created",
    "go",
    "got",
    "class",
    "grid",
    "item",
    "grid",
    "items",
    "come",
    "select",
    "set",
    "margin",
    "bottom",
    "20",
    "pixels",
    "click",
    "save",
    "got",
    "nice",
    "amount",
    "spacing",
    "items",
    "furthermore",
    "another",
    "similar",
    "thing",
    "grid",
    "items",
    "look",
    "styles",
    "padding",
    "around",
    "content",
    "looks",
    "like",
    "um",
    "exactly",
    "sure",
    "might",
    "somewhere",
    "around",
    "20",
    "pixels",
    "well",
    "start",
    "tweak",
    "go",
    "set",
    "p",
    "adding",
    "20",
    "pixels",
    "click",
    "save",
    "boxes",
    "looking",
    "whole",
    "lot",
    "better",
    "minutes",
    "ago",
    "far",
    "done",
    "mobile",
    "design",
    "right",
    "around",
    "point",
    "like",
    "happy",
    "general",
    "layout",
    "obviously",
    "text",
    "right",
    "missing",
    "pieces",
    "satisfied",
    "look",
    "like",
    "completely",
    "terrible",
    "go",
    "go",
    "desktop",
    "design",
    "start",
    "making",
    "responsive",
    "want",
    "get",
    "layout",
    "correct",
    "start",
    "know",
    "adding",
    "bunch",
    "things",
    "going",
    "shrink",
    "visual",
    "studio",
    "code",
    "window",
    "little",
    "bit",
    "close",
    "editor",
    "space",
    "make",
    "browser",
    "window",
    "larger",
    "use",
    "chrome",
    "dev",
    "tools",
    "bring",
    "going",
    "click",
    "button",
    "right",
    "toggle",
    "device",
    "toolbar",
    "ability",
    "see",
    "different",
    "sizes",
    "really",
    "quickly",
    "without",
    "resizing",
    "entire",
    "screen",
    "helpful",
    "know",
    "actually",
    "see",
    "width",
    "updating",
    "live",
    "really",
    "helpful",
    "resize",
    "different",
    "devices",
    "design",
    "mobile",
    "design",
    "click",
    "bar",
    "um",
    "get",
    "small",
    "mobile",
    "device",
    "click",
    "medium",
    "large",
    "mobile",
    "device",
    "large",
    "mobile",
    "device",
    "reason",
    "shrunk",
    "40",
    "um",
    "let",
    "go",
    "maybe",
    "75",
    "see",
    "little",
    "bit",
    "better",
    "resize",
    "getting",
    "larger",
    "desktop",
    "devices",
    "know",
    "mentioned",
    "um",
    "576",
    "pixels",
    "breakpoint",
    "going",
    "use",
    "um",
    "earlier",
    "course",
    "talked",
    "responsive",
    "design",
    "said",
    "let",
    "go",
    "ahead",
    "use",
    "bootstrap",
    "uh",
    "css",
    "framework",
    "break",
    "points",
    "right",
    "go",
    "576",
    "768",
    "992",
    "case",
    "got",
    "two",
    "designs",
    "going",
    "need",
    "single",
    "break",
    "point",
    "decide",
    "point",
    "break",
    "play",
    "around",
    "design",
    "look",
    "text",
    "right",
    "around",
    "78",
    "pixels",
    "wide",
    "right",
    "getting",
    "little",
    "bit",
    "wide",
    "liking",
    "um",
    "mobile",
    "design",
    "think",
    "576",
    "right",
    "going",
    "widest",
    "go",
    "mobile",
    "design",
    "going",
    "breakpoint",
    "set",
    "breakpoint",
    "come",
    "css",
    "write",
    "media",
    "media",
    "query",
    "since",
    "mobile",
    "uh",
    "first",
    "design",
    "set",
    "minwidth",
    "576",
    "pixels",
    "open",
    "brackets",
    "styles",
    "put",
    "going",
    "apply",
    "anything",
    "bigger",
    "576",
    "right",
    "get",
    "far",
    "let",
    "go",
    "ahead",
    "test",
    "really",
    "important",
    "coding",
    "whether",
    "html",
    "css",
    "javascript",
    "anything",
    "else",
    "incrementally",
    "write",
    "bunch",
    "code",
    "test",
    "end",
    "let",
    "uh",
    "test",
    "targeting",
    "p",
    "tag",
    "giving",
    "color",
    "red",
    "something",
    "obnoxious",
    "click",
    "save",
    "right",
    "444",
    "pixels",
    "um",
    "would",
    "expect",
    "style",
    "apply",
    "go",
    "576",
    "would",
    "expect",
    "text",
    "turn",
    "red",
    "let",
    "see",
    "means",
    "media",
    "query",
    "working",
    "great",
    "remember",
    "always",
    "put",
    "media",
    "queries",
    "bottom",
    "css",
    "otherwise",
    "may",
    "get",
    "overwritten",
    "styles",
    "goal",
    "get",
    "hit",
    "576",
    "turning",
    "red",
    "reason",
    "saved",
    "yet",
    "um",
    "get",
    "would",
    "expect",
    "layout",
    "look",
    "like",
    "desktop",
    "design",
    "question",
    "way",
    "going",
    "solve",
    "flexbox",
    "going",
    "expand",
    "uh",
    "vs",
    "code",
    "really",
    "look",
    "design",
    "look",
    "experience",
    "alone",
    "um",
    "thinking",
    "using",
    "flex",
    "box",
    "probably",
    "going",
    "need",
    "split",
    "um",
    "subcontainers",
    "lot",
    "different",
    "ways",
    "always",
    "one",
    "way",
    "solve",
    "problem",
    "going",
    "choose",
    "straightforward",
    "beginner",
    "friendly",
    "way",
    "thinking",
    "probably",
    "way",
    "could",
    "take",
    "four",
    "items",
    "left",
    "side",
    "wrap",
    "container",
    "uh",
    "control",
    "overflow",
    "container",
    "flex",
    "wrap",
    "size",
    "accordingly",
    "thinking",
    "might",
    "get",
    "little",
    "bit",
    "complex",
    "try",
    "implement",
    "adding",
    "one",
    "extra",
    "container",
    "avoid",
    "thinking",
    "split",
    "overall",
    "layout",
    "two",
    "containers",
    "first",
    "container",
    "going",
    "four",
    "items",
    "right",
    "second",
    "container",
    "item",
    "right",
    "take",
    "container",
    "one",
    "left",
    "container",
    "two",
    "right",
    "display",
    "flex",
    "go",
    "side",
    "side",
    "next",
    "solve",
    "lay",
    "items",
    "left",
    "would",
    "want",
    "within",
    "containers",
    "remember",
    "one",
    "container",
    "left",
    "one",
    "right",
    "left",
    "container",
    "divide",
    "two",
    "containers",
    "top",
    "bottom",
    "container",
    "display",
    "flex",
    "sit",
    "next",
    "use",
    "flex",
    "basis",
    "make",
    "dimensions",
    "um",
    "little",
    "bit",
    "different",
    "know",
    "little",
    "abstract",
    "let",
    "show",
    "exactly",
    "mean",
    "keep",
    "happens",
    "within",
    "html",
    "take",
    "four",
    "items",
    "left",
    "wrap",
    "container",
    "need",
    "find",
    "first",
    "four",
    "go",
    "top",
    "set",
    "container",
    "decide",
    "name",
    "um",
    "target",
    "css",
    "naming",
    "things",
    "always",
    "difficult",
    "going",
    "complicate",
    "going",
    "call",
    "main",
    "left",
    "make",
    "div",
    "within",
    "main",
    "left",
    "like",
    "said",
    "going",
    "top",
    "part",
    "bottom",
    "part",
    "couple",
    "ways",
    "could",
    "go",
    "simple",
    "say",
    "top",
    "name",
    "one",
    "bottom",
    "point",
    "got",
    "everything",
    "laid",
    "correctly",
    "want",
    "grab",
    "items",
    "one",
    "two",
    "one",
    "one",
    "put",
    "uh",
    "top",
    "container",
    "right",
    "cut",
    "away",
    "put",
    "bottom",
    "take",
    "items",
    "three",
    "four",
    "put",
    "finally",
    "testimon",
    "monial",
    "5",
    "said",
    "going",
    "make",
    "separate",
    "container",
    "lucky",
    "enough",
    "already",
    "wrapped",
    "entire",
    "grid",
    "within",
    "testimonial",
    "grid",
    "container",
    "think",
    "flexbox",
    "perspective",
    "always",
    "think",
    "container",
    "direct",
    "children",
    "matter",
    "know",
    "grandchildren",
    "apply",
    "flexbox",
    "know",
    "parent",
    "direct",
    "children",
    "parent",
    "testimonial",
    "grid",
    "container",
    "exactly",
    "two",
    "direct",
    "children",
    "main",
    "left",
    "testimonial",
    "five",
    "know",
    "tall",
    "card",
    "right",
    "got",
    "laid",
    "let",
    "save",
    "bring",
    "back",
    "left",
    "side",
    "screen",
    "look",
    "see",
    "mobile",
    "device",
    "know",
    "nothing",
    "changed",
    "put",
    "containers",
    "since",
    "selected",
    "css",
    "really",
    "change",
    "overall",
    "layout",
    "quite",
    "yet",
    "real",
    "magic",
    "going",
    "happen",
    "could",
    "um",
    "since",
    "divi",
    "designing",
    "desktop",
    "mobile",
    "first",
    "styles",
    "desktop",
    "within",
    "media",
    "query",
    "remember",
    "put",
    "everything",
    "within",
    "media",
    "query",
    "shared",
    "css",
    "properties",
    "mobile",
    "desktop",
    "designs",
    "first",
    "style",
    "add",
    "going",
    "testimonial",
    "grid",
    "container",
    "want",
    "work",
    "outside",
    "go",
    "put",
    "media",
    "query",
    "thing",
    "need",
    "moment",
    "write",
    "display",
    "flex",
    "x",
    "click",
    "save",
    "see",
    "nothing",
    "happens",
    "still",
    "looking",
    "mobile",
    "device",
    "make",
    "larger",
    "see",
    "um",
    "left",
    "main",
    "left",
    "container",
    "four",
    "items",
    "go",
    "left",
    "last",
    "item",
    "testimonial",
    "5",
    "pushed",
    "right",
    "displayed",
    "main",
    "axis",
    "horizontal",
    "look",
    "design",
    "obviously",
    "testimonial",
    "five",
    "much",
    "less",
    "width",
    "rest",
    "set",
    "flex",
    "suppose",
    "probably",
    "25",
    "looks",
    "like",
    "20",
    "25",
    "total",
    "width",
    "let",
    "come",
    "item",
    "set",
    "flex",
    "basis",
    "case",
    "going",
    "want",
    "grab",
    "testimonial",
    "5",
    "target",
    "id",
    "selector",
    "say",
    "flex",
    "basis",
    "start",
    "20",
    "see",
    "looks",
    "like",
    "okay",
    "little",
    "bit",
    "small",
    "thinking",
    "need",
    "maybe",
    "25",
    "like",
    "little",
    "bit",
    "better",
    "always",
    "tweak",
    "go",
    "next",
    "thing",
    "look",
    "four",
    "items",
    "left",
    "obviously",
    "top",
    "two",
    "go",
    "next",
    "bottom",
    "two",
    "go",
    "next",
    "well",
    "therefore",
    "need",
    "make",
    "top",
    "flex",
    "container",
    "bottom",
    "flex",
    "container",
    "see",
    "id",
    "top",
    "bottom",
    "need",
    "come",
    "say",
    "top",
    "display",
    "flex",
    "bottom",
    "display",
    "flex",
    "little",
    "bit",
    "problem",
    "taking",
    "whole",
    "um",
    "height",
    "main",
    "container",
    "go",
    "main",
    "left",
    "container",
    "want",
    "right",
    "testimonial",
    "5",
    "uh",
    "equal",
    "height",
    "testimonials",
    "need",
    "also",
    "turn",
    "main",
    "left",
    "container",
    "flex",
    "container",
    "go",
    "right",
    "display",
    "flex",
    "going",
    "look",
    "right",
    "second",
    "puts",
    "everything",
    "row",
    "change",
    "flex",
    "direction",
    "main",
    "left",
    "column",
    "going",
    "go",
    "back",
    "look",
    "control",
    "using",
    "flex",
    "box",
    "distributed",
    "look",
    "main",
    "left",
    "container",
    "direct",
    "children",
    "going",
    "top",
    "bottom",
    "also",
    "flex",
    "containers",
    "um",
    "distribute",
    "using",
    "justify",
    "content",
    "since",
    "set",
    "flex",
    "direction",
    "column",
    "main",
    "axis",
    "going",
    "going",
    "vertical",
    "therefore",
    "justify",
    "content",
    "allows",
    "us",
    "align",
    "main",
    "axis",
    "also",
    "ability",
    "say",
    "large",
    "want",
    "using",
    "flex",
    "basis",
    "top",
    "bottom",
    "flex",
    "containers",
    "relation",
    "children",
    "html",
    "elements",
    "flex",
    "items",
    "relation",
    "main",
    "left",
    "container",
    "come",
    "set",
    "flex",
    "basis",
    "um",
    "start",
    "50",
    "show",
    "going",
    "work",
    "perfectly",
    "save",
    "see",
    "filling",
    "total",
    "height",
    "main",
    "left",
    "container",
    "actually",
    "wrong",
    "flex",
    "basis",
    "50",
    "works",
    "fine",
    "mobile",
    "version",
    "set",
    "padding",
    "set",
    "margin",
    "bottom",
    "20",
    "pixels",
    "already",
    "already",
    "space",
    "obviously",
    "space",
    "um",
    "horizontally",
    "bit",
    "next",
    "question",
    "ask",
    "get",
    "proportions",
    "correct",
    "uh",
    "four",
    "containers",
    "work",
    "directly",
    "top",
    "bottom",
    "use",
    "flex",
    "basis",
    "children",
    "items",
    "grab",
    "um",
    "let",
    "see",
    "exactly",
    "need",
    "looks",
    "like",
    "complete",
    "mirror",
    "first",
    "one",
    "fourth",
    "one",
    "equal",
    "proportion",
    "second",
    "third",
    "one",
    "equal",
    "proportion",
    "know",
    "percentages",
    "going",
    "work",
    "pretty",
    "much",
    "going",
    "need",
    "grab",
    "testimonial",
    "1",
    "4",
    "put",
    "media",
    "query",
    "desktop",
    "design",
    "put",
    "bottom",
    "remember",
    "desktop",
    "design",
    "considered",
    "flex",
    "items",
    "um",
    "go",
    "ahead",
    "get",
    "rid",
    "two",
    "properties",
    "already",
    "defined",
    "mobile",
    "version",
    "also",
    "applies",
    "um",
    "desktop",
    "long",
    "override",
    "get",
    "rid",
    "set",
    "flex",
    "basis",
    "first",
    "one",
    "purple",
    "one",
    "looks",
    "like",
    "got",
    "75",
    "width",
    "um",
    "go",
    "75",
    "means",
    "testimonial",
    "2",
    "going",
    "flex",
    "basis",
    "25",
    "cuz",
    "want",
    "fill",
    "whole",
    "width",
    "container",
    "testimonial",
    "3",
    "going",
    "flex",
    "basis",
    "also",
    "25",
    "flex",
    "basis",
    "75",
    "last",
    "one",
    "click",
    "save",
    "see",
    "proportions",
    "update",
    "uh",
    "pretty",
    "nicely",
    "compare",
    "design",
    "right",
    "desktop",
    "design",
    "uh",
    "picture",
    "probably",
    "notice",
    "looks",
    "little",
    "bit",
    "wider",
    "overall",
    "see",
    "room",
    "around",
    "entire",
    "container",
    "let",
    "fix",
    "thrown",
    "proportions",
    "way",
    "believe",
    "add",
    "add",
    "max",
    "width",
    "entire",
    "container",
    "let",
    "look",
    "testimonial",
    "grid",
    "container",
    "probably",
    "going",
    "want",
    "select",
    "already",
    "got",
    "select",
    "ed",
    "media",
    "query",
    "larger",
    "device",
    "maybe",
    "set",
    "max",
    "width",
    "uh",
    "let",
    "say",
    "looks",
    "like",
    "might",
    "like",
    "600",
    "pixels",
    "rough",
    "guess",
    "little",
    "bit",
    "narrow",
    "maybe",
    "set",
    "max",
    "width",
    "say",
    "700",
    "maybe",
    "looks",
    "little",
    "bit",
    "better",
    "let",
    "go",
    "750",
    "think",
    "kind",
    "kind",
    "ballpark",
    "center",
    "could",
    "use",
    "like",
    "flex",
    "box",
    "honestly",
    "easier",
    "way",
    "little",
    "trick",
    "set",
    "margin",
    "zero",
    "pixels",
    "top",
    "bottom",
    "left",
    "right",
    "give",
    "auto",
    "going",
    "automatically",
    "give",
    "margin",
    "center",
    "click",
    "save",
    "see",
    "goes",
    "middle",
    "starting",
    "see",
    "little",
    "bit",
    "proportioned",
    "grid",
    "point",
    "think",
    "little",
    "bit",
    "small",
    "proportion",
    "given",
    "right",
    "one",
    "let",
    "change",
    "flex",
    "basis",
    "testimonial",
    "five",
    "maybe",
    "something",
    "like",
    "35",
    "course",
    "need",
    "set",
    "left",
    "one",
    "need",
    "set",
    "flex",
    "basis",
    "main",
    "left",
    "four",
    "um",
    "items",
    "together",
    "set",
    "70",
    "think",
    "update",
    "testimonial",
    "5",
    "30",
    "think",
    "looks",
    "little",
    "bit",
    "better",
    "us",
    "add",
    "spacing",
    "look",
    "lot",
    "lot",
    "better",
    "finish",
    "layout",
    "um",
    "looks",
    "like",
    "spacing",
    "items",
    "know",
    "horizontally",
    "ways",
    "could",
    "actually",
    "thinking",
    "might",
    "even",
    "go",
    "like",
    "like",
    "35",
    "65",
    "ones",
    "squished",
    "little",
    "bit",
    "maybe",
    "need",
    "update",
    "container",
    "give",
    "bigger",
    "max",
    "width",
    "change",
    "75",
    "25",
    "point",
    "like",
    "adjusting",
    "things",
    "get",
    "generally",
    "right",
    "fit",
    "let",
    "try",
    "maybe",
    "like",
    "70",
    "30",
    "looks",
    "like",
    "slightly",
    "better",
    "still",
    "think",
    "go",
    "little",
    "bit",
    "6535",
    "go",
    "think",
    "looks",
    "relatively",
    "good",
    "adjusted",
    "looks",
    "little",
    "bit",
    "big",
    "claw",
    "one",
    "back",
    "70",
    "30",
    "think",
    "looking",
    "good",
    "think",
    "proportions",
    "design",
    "relatively",
    "good",
    "course",
    "bottom",
    "one",
    "need",
    "match",
    "top",
    "come",
    "real",
    "quick",
    "6535",
    "one",
    "needs",
    "updated",
    "35",
    "65",
    "grid",
    "looking",
    "really",
    "good",
    "get",
    "spacing",
    "horizontally",
    "see",
    "little",
    "gutters",
    "um",
    "right",
    "spacing",
    "horizontally",
    "could",
    "margin",
    "um",
    "kind",
    "vertically",
    "margin",
    "going",
    "try",
    "apply",
    "flexbox",
    "skills",
    "make",
    "happen",
    "totally",
    "valid",
    "way",
    "well",
    "first",
    "one",
    "take",
    "care",
    "uh",
    "main",
    "left",
    "container",
    "surrounds",
    "four",
    "testimonial",
    "five",
    "right",
    "right",
    "flex",
    "basis",
    "30",
    "far",
    "right",
    "70",
    "main",
    "left",
    "container",
    "split",
    "two",
    "reduced",
    "couple",
    "percentages",
    "aligned",
    "space",
    "could",
    "add",
    "little",
    "vertical",
    "gutter",
    "take",
    "main",
    "left",
    "container",
    "bring",
    "say",
    "68",
    "2",
    "um",
    "empty",
    "space",
    "within",
    "container",
    "let",
    "save",
    "see",
    "space",
    "cuz",
    "kind",
    "added",
    "end",
    "um",
    "kind",
    "invisible",
    "right",
    "come",
    "testimonial",
    "grid",
    "container",
    "justify",
    "content",
    "remember",
    "main",
    "left",
    "four",
    "items",
    "testimonial",
    "five",
    "right",
    "aligned",
    "main",
    "axis",
    "goes",
    "horizontal",
    "flex",
    "direction",
    "set",
    "row",
    "default",
    "justify",
    "content",
    "allows",
    "us",
    "align",
    "within",
    "say",
    "space",
    "see",
    "little",
    "space",
    "added",
    "added",
    "extra",
    "empty",
    "space",
    "spaced",
    "exact",
    "thing",
    "flex",
    "items",
    "top",
    "flex",
    "container",
    "um",
    "flex",
    "basis",
    "50",
    "actually",
    "right",
    "top",
    "bottom",
    "going",
    "flex",
    "containers",
    "let",
    "set",
    "justify",
    "content",
    "um",
    "space",
    "start",
    "right",
    "save",
    "wo",
    "see",
    "changes",
    "currently",
    "flex",
    "basis",
    "equals",
    "100",
    "space",
    "add",
    "reduce",
    "um",
    "reduce",
    "testimonial",
    "one",
    "63",
    "2",
    "left",
    "save",
    "little",
    "space",
    "2",
    "added",
    "well",
    "course",
    "2",
    "large",
    "container",
    "versus",
    "2",
    "much",
    "smaller",
    "container",
    "going",
    "equal",
    "different",
    "pixel",
    "width",
    "see",
    "design",
    "little",
    "gutter",
    "testimonial",
    "five",
    "right",
    "four",
    "left",
    "vertical",
    "gutter",
    "little",
    "bit",
    "wider",
    "vertical",
    "gutters",
    "added",
    "containers",
    "right",
    "see",
    "flexbox",
    "okay",
    "fact",
    "leave",
    "going",
    "demonstration",
    "purposes",
    "going",
    "undo",
    "everything",
    "set",
    "everything",
    "back",
    "original",
    "percentages",
    "remove",
    "justify",
    "contents",
    "save",
    "back",
    "place",
    "space",
    "really",
    "simple",
    "way",
    "could",
    "could",
    "look",
    "flex",
    "items",
    "grid",
    "items",
    "left",
    "add",
    "margin",
    "right",
    "say",
    "20",
    "pixels",
    "equal",
    "across",
    "board",
    "look",
    "individual",
    "items",
    "class",
    "grid",
    "item",
    "want",
    "add",
    "margin",
    "right",
    "last",
    "testimonial",
    "one",
    "way",
    "could",
    "could",
    "look",
    "main",
    "left",
    "container",
    "four",
    "items",
    "select",
    "descendants",
    "class",
    "grid",
    "item",
    "selects",
    "four",
    "show",
    "mean",
    "um",
    "guess",
    "put",
    "right",
    "main",
    "left",
    "say",
    "main",
    "left",
    "parent",
    "want",
    "look",
    "want",
    "grab",
    "grid",
    "item",
    "descendants",
    "let",
    "show",
    "selecting",
    "first",
    "set",
    "color",
    "red",
    "text",
    "turns",
    "red",
    "click",
    "save",
    "see",
    "left",
    "four",
    "uh",
    "grid",
    "items",
    "red",
    "text",
    "excluded",
    "right",
    "one",
    "css",
    "selector",
    "exactly",
    "want",
    "add",
    "margin",
    "right",
    "20",
    "pixels",
    "going",
    "see",
    "gets",
    "spaced",
    "really",
    "nicely",
    "automatically",
    "little",
    "little",
    "much",
    "maybe",
    "let",
    "go",
    "15",
    "pixels",
    "exactly",
    "would",
    "add",
    "spacing",
    "right",
    "naturally",
    "equal",
    "point",
    "overall",
    "structure",
    "grid",
    "looks",
    "good",
    "looking",
    "one",
    "time",
    "seems",
    "right",
    "one",
    "still",
    "little",
    "bit",
    "wide",
    "apologize",
    "going",
    "back",
    "forth",
    "trying",
    "teach",
    "uh",
    "see",
    "time",
    "little",
    "bit",
    "tough",
    "let",
    "let",
    "bring",
    "back",
    "20",
    "25",
    "testimonial",
    "5",
    "75",
    "main",
    "left",
    "container",
    "think",
    "looks",
    "good",
    "really",
    "hope",
    "change",
    "mind",
    "might",
    "right",
    "looks",
    "similar",
    "cool",
    "thing",
    "resize",
    "mobile",
    "hit",
    "576",
    "pixels",
    "break",
    "boom",
    "mobile",
    "design",
    "anything",
    "mobile",
    "side",
    "things",
    "made",
    "desktop",
    "design",
    "pretty",
    "much",
    "responsive",
    "one",
    "thing",
    "notice",
    "um",
    "shrink",
    "get",
    "shrunk",
    "little",
    "bit",
    "may",
    "look",
    "perfect",
    "say",
    "like",
    "tablet",
    "work",
    "okay",
    "could",
    "always",
    "add",
    "additional",
    "break",
    "point",
    "um",
    "wanted",
    "adjust",
    "flex",
    "basis",
    "numbers",
    "looks",
    "better",
    "tablet",
    "going",
    "worry",
    "cuz",
    "think",
    "would",
    "distracting",
    "main",
    "lesson",
    "right",
    "got",
    "layout",
    "done",
    "responsive",
    "able",
    "go",
    "look",
    "entire",
    "design",
    "start",
    "adding",
    "components",
    "styling",
    "though",
    "like",
    "clean",
    "css",
    "little",
    "bit",
    "moment",
    "duplicating",
    "lot",
    "css",
    "rules",
    "would",
    "call",
    "kind",
    "refactoring",
    "write",
    "code",
    "really",
    "worry",
    "perf",
    "perfectly",
    "first",
    "time",
    "kind",
    "edit",
    "know",
    "iterate",
    "make",
    "little",
    "bit",
    "cleaner",
    "see",
    "written",
    "uh",
    "rule",
    "display",
    "flex",
    "several",
    "different",
    "times",
    "take",
    "um",
    "ids",
    "writing",
    "display",
    "flex",
    "put",
    "one",
    "single",
    "css",
    "rule",
    "might",
    "say",
    "worth",
    "think",
    "nice",
    "nice",
    "break",
    "code",
    "little",
    "bit",
    "want",
    "select",
    "testimonial",
    "grid",
    "container",
    "display",
    "flex",
    "um",
    "let",
    "write",
    "rule",
    "first",
    "course",
    "want",
    "select",
    "testimonial",
    "grid",
    "else",
    "uses",
    "flex",
    "main",
    "left",
    "copy",
    "main",
    "left",
    "top",
    "bottom",
    "going",
    "display",
    "flex",
    "get",
    "rid",
    "individual",
    "rules",
    "click",
    "save",
    "look",
    "four",
    "uh",
    "flex",
    "items",
    "set",
    "flex",
    "basis",
    "uh",
    "percentages",
    "similar",
    "let",
    "group",
    "together",
    "let",
    "take",
    "testimonial",
    "3",
    "combine",
    "rule",
    "delete",
    "take",
    "testimonial",
    "4",
    "combine",
    "rule",
    "delete",
    "last",
    "one",
    "save",
    "get",
    "thing",
    "top",
    "bottom",
    "flex",
    "basis",
    "50",
    "rule",
    "need",
    "broken",
    "separately",
    "bring",
    "together",
    "delete",
    "rule",
    "click",
    "save",
    "going",
    "take",
    "flex",
    "rules",
    "kind",
    "group",
    "together",
    "let",
    "let",
    "put",
    "okay",
    "css",
    "grouped",
    "little",
    "bit",
    "better",
    "start",
    "working",
    "adding",
    "content",
    "going",
    "shrink",
    "screen",
    "go",
    "ahead",
    "close",
    "dev",
    "tools",
    "work",
    "first",
    "mobile",
    "design",
    "screen",
    "real",
    "estate",
    "check",
    "desktop",
    "make",
    "sure",
    "everything",
    "working",
    "open",
    "file",
    "explorer",
    "along",
    "placeholder",
    "text",
    "going",
    "actually",
    "putting",
    "um",
    "containers",
    "going",
    "look",
    "desktop",
    "design",
    "know",
    "mobile",
    "bigger",
    "see",
    "better",
    "go",
    "first",
    "one",
    "rest",
    "going",
    "pretty",
    "much",
    "exactly",
    "let",
    "speed",
    "first",
    "card",
    "right",
    "big",
    "quotation",
    "going",
    "worry",
    "totally",
    "last",
    "going",
    "worry",
    "yet",
    "um",
    "content",
    "looks",
    "like",
    "picture",
    "name",
    "uh",
    "says",
    "verified",
    "graduate",
    "status",
    "person",
    "main",
    "testimonial",
    "um",
    "secondary",
    "testimonial",
    "looking",
    "immediately",
    "need",
    "image",
    "tag",
    "need",
    "paragraph",
    "tag",
    "another",
    "paragraph",
    "tag",
    "looks",
    "like",
    "maybe",
    "h4",
    "tag",
    "another",
    "paragraph",
    "tag",
    "let",
    "get",
    "picture",
    "first",
    "first",
    "one",
    "daniel",
    "clifford",
    "going",
    "need",
    "image",
    "provided",
    "us",
    "go",
    "images",
    "folder",
    "see",
    "image",
    "daniel",
    "jpeg",
    "finally",
    "start",
    "replace",
    "testimonial",
    "one",
    "right",
    "first",
    "going",
    "put",
    "image",
    "use",
    "em",
    "abbreviation",
    "click",
    "tab",
    "source",
    "want",
    "going",
    "relative",
    "path",
    "say",
    "images",
    "want",
    "daniel",
    "alt",
    "um",
    "attribute",
    "accessibility",
    "always",
    "put",
    "um",
    "danel",
    "danel",
    "profile",
    "picture",
    "description",
    "click",
    "save",
    "see",
    "image",
    "come",
    "first",
    "uh",
    "grid",
    "item",
    "need",
    "write",
    "name",
    "verified",
    "graduate",
    "let",
    "use",
    "p",
    "tag",
    "daniel",
    "clifford",
    "verified",
    "graduate",
    "go",
    "got",
    "added",
    "go",
    "find",
    "text",
    "says",
    "received",
    "job",
    "offer",
    "midc",
    "course",
    "okay",
    "daniel",
    "first",
    "piece",
    "text",
    "put",
    "p",
    "tag",
    "right",
    "text",
    "finally",
    "want",
    "one",
    "p",
    "tag",
    "actually",
    "p",
    "tag",
    "let",
    "set",
    "h4",
    "think",
    "roughly",
    "would",
    "want",
    "looks",
    "okay",
    "okay",
    "always",
    "switch",
    "later",
    "finally",
    "last",
    "piece",
    "text",
    "longer",
    "testimonial",
    "put",
    "p",
    "tag",
    "right",
    "sorts",
    "formatting",
    "issues",
    "going",
    "get",
    "one",
    "line",
    "really",
    "matter",
    "going",
    "anyway",
    "okay",
    "got",
    "first",
    "card",
    "done",
    "like",
    "said",
    "go",
    "figure",
    "rest",
    "exact",
    "pattern",
    "different",
    "um",
    "testimonial",
    "cards",
    "going",
    "going",
    "take",
    "entire",
    "structure",
    "going",
    "come",
    "replace",
    "item",
    "click",
    "save",
    "see",
    "looking",
    "switch",
    "individual",
    "parts",
    "second",
    "testimonial",
    "open",
    "desktop",
    "design",
    "going",
    "jonathan",
    "based",
    "image",
    "names",
    "image",
    "jonathan",
    "really",
    "come",
    "find",
    "second",
    "one",
    "testimonial",
    "2",
    "replace",
    "link",
    "click",
    "save",
    "jonathan",
    "update",
    "rest",
    "text",
    "going",
    "speed",
    "see",
    "done",
    "right",
    "done",
    "see",
    "got",
    "text",
    "images",
    "matter",
    "matter",
    "styling",
    "look",
    "main",
    "design",
    "image",
    "circle",
    "left",
    "name",
    "verified",
    "graduate",
    "right",
    "actual",
    "testimonial",
    "makes",
    "sense",
    "try",
    "target",
    "individually",
    "set",
    "uh",
    "common",
    "class",
    "among",
    "style",
    "one",
    "time",
    "let",
    "start",
    "image",
    "name",
    "right",
    "image",
    "first",
    "thing",
    "need",
    "see",
    "got",
    "image",
    "left",
    "name",
    "verified",
    "graduate",
    "stacked",
    "top",
    "get",
    "next",
    "great",
    "way",
    "flex",
    "box",
    "image",
    "flex",
    "item",
    "number",
    "one",
    "make",
    "container",
    "around",
    "name",
    "verified",
    "graduate",
    "flex",
    "item",
    "number",
    "two",
    "come",
    "html",
    "go",
    "first",
    "one",
    "come",
    "right",
    "image",
    "name",
    "call",
    "class",
    "header",
    "within",
    "header",
    "going",
    "image",
    "another",
    "container",
    "text",
    "going",
    "call",
    "container",
    "header",
    "text",
    "okay",
    "drop",
    "image",
    "top",
    "two",
    "p",
    "tags",
    "container",
    "going",
    "split",
    "right",
    "visual",
    "studio",
    "code",
    "see",
    "look",
    "header",
    "header",
    "text",
    "come",
    "um",
    "since",
    "applies",
    "mobile",
    "desktop",
    "write",
    "mobile",
    "first",
    "section",
    "applies",
    "pretty",
    "much",
    "everything",
    "put",
    "bottom",
    "want",
    "target",
    "header",
    "going",
    "display",
    "flex",
    "automatically",
    "click",
    "save",
    "going",
    "see",
    "jumps",
    "correct",
    "line",
    "lined",
    "look",
    "picture",
    "text",
    "like",
    "horizontal",
    "um",
    "axis",
    "way",
    "get",
    "happen",
    "align",
    "items",
    "aligning",
    "items",
    "cross",
    "ais",
    "center",
    "going",
    "work",
    "course",
    "need",
    "grab",
    "image",
    "header",
    "container",
    "want",
    "grab",
    "images",
    "want",
    "border",
    "radius",
    "trick",
    "make",
    "circular",
    "pictures",
    "want",
    "50",
    "see",
    "circle",
    "uh",
    "picture",
    "want",
    "margin",
    "right",
    "let",
    "call",
    "5",
    "pixels",
    "um",
    "actually",
    "enough",
    "let",
    "10",
    "pixels",
    "see",
    "little",
    "space",
    "lastly",
    "need",
    "space",
    "header",
    "container",
    "come",
    "back",
    "header",
    "set",
    "margin",
    "bottom",
    "maybe",
    "20",
    "pixels",
    "space",
    "us",
    "top",
    "header",
    "container",
    "text",
    "course",
    "applied",
    "rest",
    "testimonials",
    "follow",
    "exact",
    "process",
    "long",
    "keep",
    "class",
    "css",
    "styles",
    "apply",
    "fine",
    "going",
    "speed",
    "watch",
    "um",
    "completely",
    "going",
    "go",
    "create",
    "exact",
    "structure",
    "uh",
    "probably",
    "done",
    "first",
    "time",
    "around",
    "whatever",
    "get",
    "okay",
    "got",
    "done",
    "kind",
    "good",
    "lesson",
    "usually",
    "want",
    "finish",
    "like",
    "one",
    "one",
    "iteration",
    "one",
    "card",
    "um",
    "get",
    "correct",
    "apply",
    "styles",
    "rest",
    "pay",
    "extra",
    "time",
    "next",
    "thing",
    "going",
    "space",
    "two",
    "pieces",
    "text",
    "first",
    "one",
    "h4",
    "second",
    "one",
    "paragraph",
    "tag",
    "select",
    "styles",
    "pretty",
    "easily",
    "look",
    "um",
    "grid",
    "item",
    "class",
    "select",
    "h",
    "4s",
    "add",
    "margin",
    "bottom",
    "say",
    "grid",
    "item",
    "h4",
    "set",
    "margin",
    "bottom",
    "20",
    "pixels",
    "maybe",
    "think",
    "looks",
    "okay",
    "20",
    "pixels",
    "yeah",
    "looks",
    "pretty",
    "good",
    "getting",
    "close",
    "finish",
    "line",
    "next",
    "thing",
    "notice",
    "rounded",
    "corners",
    "cards",
    "pretty",
    "easy",
    "apply",
    "let",
    "go",
    "find",
    "grid",
    "item",
    "style",
    "selects",
    "grid",
    "items",
    "set",
    "border",
    "radius",
    "around",
    "5",
    "pixels",
    "maybe",
    "make",
    "rounded",
    "corners",
    "looks",
    "good",
    "also",
    "little",
    "bit",
    "drop",
    "shadow",
    "um",
    "least",
    "white",
    "ones",
    "go",
    "ahead",
    "put",
    "simplicity",
    "grid",
    "item",
    "going",
    "get",
    "box",
    "shadow",
    "go",
    "box",
    "shadow",
    "tool",
    "online",
    "standard",
    "always",
    "put",
    "um",
    "black",
    "color",
    "20",
    "opacity",
    "kind",
    "tweak",
    "um",
    "values",
    "right",
    "get",
    "roughly",
    "want",
    "see",
    "little",
    "box",
    "shadow",
    "might",
    "spread",
    "little",
    "bit",
    "exactly",
    "looking",
    "pretty",
    "close",
    "concerned",
    "getting",
    "btim",
    "design",
    "next",
    "big",
    "piece",
    "font",
    "style",
    "guide",
    "go",
    "style",
    "guide",
    "going",
    "tell",
    "font",
    "need",
    "use",
    "typography",
    "body",
    "copy",
    "13",
    "pixels",
    "um",
    "set",
    "yet",
    "um",
    "actually",
    "let",
    "let",
    "really",
    "quick",
    "grid",
    "items",
    "could",
    "set",
    "multiple",
    "levels",
    "grid",
    "items",
    "set",
    "font",
    "size",
    "13",
    "pixels",
    "makes",
    "lot",
    "smaller",
    "us",
    "grid",
    "item",
    "h4s",
    "set",
    "font",
    "size",
    "back",
    "say",
    "maybe",
    "rm",
    "uh",
    "root",
    "element",
    "going",
    "um",
    "html",
    "believe",
    "set",
    "default",
    "16",
    "pixels",
    "make",
    "much",
    "bigger",
    "text",
    "think",
    "looks",
    "relatively",
    "good",
    "decent",
    "proportions",
    "okay",
    "actually",
    "change",
    "font",
    "style",
    "guide",
    "says",
    "need",
    "barow",
    "semic",
    "condensed",
    "font",
    "google",
    "fonts",
    "happen",
    "open",
    "already",
    "let",
    "expand",
    "screen",
    "select",
    "styles",
    "want",
    "looks",
    "like",
    "need",
    "500",
    "600",
    "font",
    "weights",
    "go",
    "grab",
    "medium",
    "500",
    "600",
    "semi",
    "bold",
    "saying",
    "need",
    "put",
    "link",
    "html",
    "document",
    "copy",
    "good",
    "let",
    "resize",
    "screen",
    "real",
    "quick",
    "need",
    "put",
    "html",
    "put",
    "head",
    "put",
    "right",
    "stylesheet",
    "link",
    "think",
    "usually",
    "supposed",
    "put",
    "stylesheet",
    "applies",
    "entirely",
    "certain",
    "matters",
    "ton",
    "let",
    "save",
    "default",
    "going",
    "using",
    "enabled",
    "come",
    "back",
    "body",
    "might",
    "put",
    "font",
    "family",
    "go",
    "rules",
    "paste",
    "css",
    "rule",
    "actually",
    "using",
    "barlo",
    "semic",
    "condensed",
    "fallback",
    "sand",
    "serif",
    "save",
    "see",
    "font",
    "looking",
    "lot",
    "closer",
    "demo",
    "notice",
    "white",
    "cards",
    "gray",
    "text",
    "rather",
    "black",
    "text",
    "giving",
    "let",
    "update",
    "believe",
    "rule",
    "already",
    "actually",
    "condense",
    "testimonial",
    "5",
    "three",
    "um",
    "one",
    "um",
    "styles",
    "font",
    "color",
    "need",
    "go",
    "style",
    "guide",
    "probably",
    "light",
    "gray",
    "thinking",
    "nope",
    "little",
    "light",
    "try",
    "dark",
    "grayish",
    "blue",
    "think",
    "little",
    "bit",
    "closer",
    "may",
    "exact",
    "thinking",
    "close",
    "enough",
    "better",
    "black",
    "smaller",
    "text",
    "little",
    "bit",
    "less",
    "opacity",
    "main",
    "text",
    "also",
    "need",
    "send",
    "set",
    "font",
    "weight",
    "let",
    "look",
    "style",
    "guide",
    "says",
    "typography",
    "note",
    "text",
    "colors",
    "verified",
    "graduate",
    "okay",
    "ready",
    "yet",
    "review",
    "pa",
    "paragraphs",
    "inside",
    "quotes",
    "color",
    "70",
    "opacity",
    "design",
    "couple",
    "different",
    "p",
    "tags",
    "name",
    "verified",
    "graduate",
    "testimonial",
    "um",
    "set",
    "font",
    "weight",
    "p",
    "tag",
    "opacity",
    "p",
    "tag",
    "um",
    "apply",
    "mostly",
    "want",
    "cuz",
    "want",
    "testimonial",
    "70",
    "opacity",
    "probably",
    "verified",
    "graduate",
    "well",
    "specifically",
    "override",
    "opacity",
    "style",
    "100",
    "name",
    "uh",
    "later",
    "let",
    "let",
    "go",
    "ahead",
    "see",
    "something",
    "already",
    "grid",
    "item",
    "set",
    "grid",
    "item",
    "p",
    "tags",
    "p",
    "tag",
    "within",
    "grid",
    "item",
    "want",
    "set",
    "opacity",
    "70",
    "name",
    "let",
    "add",
    "class",
    "use",
    "alt",
    "key",
    "come",
    "p",
    "tags",
    "name",
    "holding",
    "alt",
    "give",
    "class",
    "name",
    "come",
    "name",
    "selector",
    "give",
    "opacity",
    "100",
    "maybe",
    "effective",
    "solution",
    "works",
    "probably",
    "need",
    "select",
    "header",
    "specific",
    "um",
    "grid",
    "item",
    "p",
    "header",
    "name",
    "um",
    "two",
    "class",
    "selectors",
    "specific",
    "grid",
    "item",
    "p",
    "class",
    "tag",
    "selector",
    "one",
    "takes",
    "precedence",
    "override",
    "think",
    "need",
    "tweak",
    "things",
    "text",
    "whole",
    "lot",
    "might",
    "want",
    "make",
    "name",
    "slightly",
    "larger",
    "default",
    "13",
    "pixels",
    "come",
    "rule",
    "created",
    "name",
    "say",
    "font",
    "size",
    "going",
    "uh",
    "r",
    "actually",
    "going",
    "way",
    "large",
    "um",
    "one",
    "rm",
    "16",
    "pixels",
    "looks",
    "better",
    "open",
    "might",
    "see",
    "little",
    "border",
    "around",
    "pictures",
    "um",
    "look",
    "header",
    "image",
    "give",
    "border",
    "one",
    "pixel",
    "um",
    "solid",
    "maybe",
    "purple",
    "think",
    "different",
    "let",
    "go",
    "purple",
    "see",
    "little",
    "uh",
    "border",
    "around",
    "tweak",
    "like",
    "lastly",
    "um",
    "think",
    "font",
    "weights",
    "look",
    "okay",
    "okay",
    "tell",
    "us",
    "import",
    "weights",
    "500",
    "600",
    "probably",
    "explicitly",
    "set",
    "grid",
    "grid",
    "item",
    "h4s",
    "give",
    "font",
    "weight",
    "600",
    "looks",
    "huge",
    "change",
    "part",
    "think",
    "happy",
    "design",
    "absolutely",
    "perfect",
    "pretty",
    "close",
    "importantly",
    "gone",
    "lot",
    "concepts",
    "covered",
    "previous",
    "videos",
    "always",
    "fun",
    "apply",
    "leave",
    "comment",
    "missed",
    "anything",
    "think",
    "thing",
    "remaining",
    "big",
    "quote",
    "couple",
    "ways",
    "could",
    "approach",
    "believe",
    "assets",
    "like",
    "image",
    "actually",
    "svg",
    "could",
    "use",
    "svg",
    "um",
    "want",
    "get",
    "far",
    "um",
    "css",
    "svg",
    "like",
    "whole",
    "topic",
    "go",
    "ahead",
    "quickly",
    "put",
    "show",
    "background",
    "pattern",
    "quotation",
    "svg",
    "click",
    "bunch",
    "numbers",
    "um",
    "actually",
    "put",
    "image",
    "believe",
    "come",
    "let",
    "get",
    "css",
    "collapsed",
    "little",
    "bit",
    "obviously",
    "main",
    "card",
    "purple",
    "card",
    "number",
    "one",
    "pretty",
    "much",
    "put",
    "wherever",
    "would",
    "like",
    "within",
    "main",
    "card",
    "let",
    "make",
    "image",
    "source",
    "going",
    "images",
    "background",
    "pattern",
    "quotation",
    "see",
    "quote",
    "already",
    "nice",
    "need",
    "absolutely",
    "position",
    "weird",
    "spot",
    "like",
    "kind",
    "randomly",
    "top",
    "right",
    "corner",
    "let",
    "give",
    "id",
    "give",
    "quote",
    "id",
    "come",
    "css",
    "select",
    "quote",
    "say",
    "position",
    "absolute",
    "going",
    "position",
    "relative",
    "believe",
    "viewport",
    "default",
    "um",
    "let",
    "see",
    "works",
    "right",
    "want",
    "20",
    "pixels",
    "roughly",
    "okay",
    "yeah",
    "relative",
    "viewport",
    "want",
    "relative",
    "container",
    "need",
    "set",
    "testimonial",
    "one",
    "container",
    "position",
    "relative",
    "quote",
    "come",
    "correctly",
    "come",
    "quote",
    "probably",
    "like",
    "30",
    "pixels",
    "right",
    "top",
    "pretty",
    "much",
    "flush",
    "top",
    "zero",
    "see",
    "gets",
    "us",
    "little",
    "bit",
    "closer",
    "um",
    "resize",
    "obviously",
    "going",
    "change",
    "little",
    "bit",
    "maybe",
    "right",
    "go",
    "like",
    "3",
    "going",
    "experiment",
    "around",
    "get",
    "right",
    "maybe",
    "like",
    "7",
    "closer",
    "let",
    "ramp",
    "15",
    "okay",
    "like",
    "think",
    "15",
    "pretty",
    "good",
    "like",
    "said",
    "flush",
    "top",
    "good",
    "finally",
    "resize",
    "know",
    "look",
    "amazing",
    "kind",
    "middle",
    "state",
    "like",
    "like",
    "bigger",
    "mobile",
    "device",
    "smaller",
    "tablet",
    "really",
    "going",
    "see",
    "device",
    "part",
    "like",
    "start",
    "going",
    "start",
    "seeing",
    "looks",
    "like",
    "quote",
    "like",
    "little",
    "bit",
    "text",
    "actual",
    "design",
    "showing",
    "behind",
    "text",
    "like",
    "overlapping",
    "partially",
    "spacing",
    "given",
    "overly",
    "concerned",
    "resize",
    "kind",
    "overlap",
    "text",
    "want",
    "go",
    "behind",
    "everything",
    "need",
    "go",
    "styles",
    "need",
    "set",
    "zindex",
    "equal",
    "like",
    "negative",
    "one",
    "actually",
    "let",
    "let",
    "set",
    "z",
    "index",
    "one",
    "testimonial",
    "one",
    "set",
    "zindex",
    "uh",
    "zero",
    "testimonial",
    "card",
    "want",
    "testimonial",
    "text",
    "set",
    "zindex",
    "header",
    "three",
    "think",
    "might",
    "might",
    "get",
    "us",
    "maybe",
    "go",
    "need",
    "set",
    "position",
    "relative",
    "zindex",
    "applies",
    "going",
    "behind",
    "text",
    "stuff",
    "like",
    "good",
    "think",
    "design",
    "pretty",
    "much",
    "complete",
    "see",
    "like",
    "could",
    "spend",
    "next",
    "hour",
    "two",
    "hours",
    "trying",
    "get",
    "look",
    "exactly",
    "like",
    "example",
    "curious",
    "took",
    "second",
    "try",
    "figure",
    "fully",
    "um",
    "exactly",
    "get",
    "look",
    "like",
    "come",
    "way",
    "get",
    "somewhat",
    "close",
    "put",
    "max",
    "1440",
    "according",
    "style",
    "guide",
    "says",
    "desktop",
    "1440",
    "set",
    "testimonial",
    "5",
    "main",
    "left",
    "containers",
    "80",
    "20",
    "respectively",
    "looks",
    "okay",
    "think",
    "exact",
    "like",
    "said",
    "little",
    "bit",
    "closer",
    "let",
    "know",
    "comments",
    "missed",
    "anything",
    "resize",
    "responsive",
    "like",
    "middle",
    "state",
    "little",
    "bit",
    "weird",
    "honestly",
    "trying",
    "perfect",
    "going",
    "lot",
    "tedious",
    "tweaks",
    "kind",
    "want",
    "main",
    "goal",
    "accomplished",
    "desktop",
    "looks",
    "like",
    "mobile",
    "looks",
    "like",
    "everything",
    "stacked",
    "top",
    "point",
    "going",
    "take",
    "local",
    "host",
    "um",
    "nobody",
    "see",
    "going",
    "deploy",
    "github",
    "pages",
    "pass",
    "link",
    "show",
    "project",
    "way",
    "let",
    "close",
    "everything",
    "clean",
    "workspace",
    "open",
    "source",
    "control",
    "embedded",
    "within",
    "uh",
    "visual",
    "studio",
    "code",
    "initialize",
    "repository",
    "done",
    "command",
    "line",
    "think",
    "know",
    "since",
    "learned",
    "get",
    "yet",
    "expect",
    "understand",
    "quite",
    "yet",
    "um",
    "might",
    "well",
    "use",
    "visual",
    "interface",
    "initialized",
    "repository",
    "um",
    "says",
    "control",
    "enter",
    "commit",
    "master",
    "write",
    "message",
    "say",
    "first",
    "commit",
    "controll",
    "enter",
    "uh",
    "going",
    "stage",
    "changes",
    "commit",
    "directly",
    "yes",
    "actually",
    "set",
    "github",
    "already",
    "may",
    "ask",
    "go",
    "authorization",
    "sign",
    "github",
    "go",
    "ahead",
    "create",
    "new",
    "repository",
    "github",
    "account",
    "sign",
    "github",
    "need",
    "uh",
    "rest",
    "developer",
    "life",
    "click",
    "new",
    "repository",
    "say",
    "testimonial",
    "grid",
    "frontend",
    "menor",
    "challenge",
    "solution",
    "long",
    "uh",
    "repository",
    "name",
    "need",
    "make",
    "long",
    "create",
    "repository",
    "make",
    "public",
    "worried",
    "initializing",
    "stuff",
    "going",
    "copy",
    "https",
    "link",
    "come",
    "back",
    "visual",
    "studio",
    "code",
    "click",
    "three",
    "dots",
    "click",
    "remote",
    "add",
    "remote",
    "going",
    "put",
    "url",
    "good",
    "think",
    "want",
    "push",
    "main",
    "branch",
    "let",
    "see",
    "working",
    "need",
    "push",
    "main",
    "name",
    "giving",
    "origin",
    "linking",
    "code",
    "github",
    "repository",
    "need",
    "understand",
    "trying",
    "get",
    "deployed",
    "um",
    "going",
    "click",
    "push",
    "okay",
    "let",
    "check",
    "refresh",
    "see",
    "uh",
    "files",
    "created",
    "visual",
    "studio",
    "code",
    "repository",
    "right",
    "deployed",
    "github",
    "pages",
    "um",
    "way",
    "within",
    "visual",
    "studio",
    "code",
    "quite",
    "honestly",
    "within",
    "repository",
    "relatively",
    "straightforward",
    "since",
    "already",
    "main",
    "root",
    "directory",
    "go",
    "master",
    "find",
    "create",
    "branch",
    "type",
    "github",
    "pages",
    "says",
    "create",
    "branch",
    "github",
    "pages",
    "master",
    "exactly",
    "want",
    "master",
    "looking",
    "right",
    "create",
    "branch",
    "let",
    "go",
    "back",
    "main",
    "repository",
    "believe",
    "publish",
    "github",
    "pages",
    "next",
    "minute",
    "two",
    "happen",
    "like",
    "instantaneously",
    "actually",
    "taking",
    "code",
    "files",
    "putting",
    "github",
    "pages",
    "another",
    "server",
    "serving",
    "github",
    "url",
    "let",
    "refresh",
    "page",
    "looks",
    "like",
    "environments",
    "set",
    "click",
    "main",
    "repository",
    "click",
    "github",
    "pages",
    "view",
    "deployment",
    "see",
    "created",
    "live",
    "link",
    "copy",
    "share",
    "someone",
    "else",
    "resize",
    "course",
    "going",
    "resize",
    "mobile",
    "mobile",
    "responsive",
    "uh",
    "desktop",
    "responsive",
    "right",
    "end",
    "web",
    "development",
    "foundations",
    "course",
    "long",
    "one",
    "um",
    "applaud",
    "anyone",
    "got",
    "every",
    "minute",
    "um",
    "hope",
    "enjoyed",
    "sure",
    "give",
    "free",
    "code",
    "camp",
    "like",
    "video",
    "subscribe",
    "channel",
    "link",
    "description",
    "additional",
    "resources",
    "um",
    "topics",
    "covered",
    "want",
    "take",
    "next",
    "level",
    "well",
    "long",
    "course",
    "20",
    "plus",
    "hours",
    "beginning",
    "want",
    "good",
    "web",
    "development",
    "even",
    "extend",
    "get",
    "full",
    "stack",
    "development",
    "going",
    "need",
    "practice",
    "going",
    "lot",
    "learning",
    "come",
    "hopefully",
    "course",
    "gets",
    "right",
    "foot",
    "gets",
    "started",
    "right",
    "direction",
    "um",
    "career",
    "becoming",
    "web",
    "developer",
    "wish",
    "best",
    "luck",
    "journey",
    "um",
    "stay",
    "connected",
    "pretty",
    "active",
    "twitter",
    "zgd",
    "de",
    "feel",
    "free",
    "connect",
    "also",
    "got",
    "youtube",
    "channel",
    "really",
    "appreciate",
    "uh",
    "hop",
    "uh",
    "check",
    "got",
    "channel",
    "long",
    "happy",
    "coding"
  ],
  "keywords": [
    "course",
    "go",
    "coding",
    "experience",
    "developer",
    "learn",
    "build",
    "along",
    "way",
    "full",
    "stack",
    "name",
    "20",
    "plus",
    "going",
    "take",
    "web",
    "get",
    "actually",
    "wanted",
    "code",
    "always",
    "content",
    "um",
    "many",
    "different",
    "people",
    "find",
    "sure",
    "give",
    "big",
    "lot",
    "without",
    "let",
    "first",
    "thing",
    "start",
    "background",
    "context",
    "within",
    "obviously",
    "quite",
    "long",
    "something",
    "year",
    "together",
    "lesson",
    "videos",
    "end",
    "complete",
    "never",
    "written",
    "single",
    "line",
    "least",
    "javascript",
    "able",
    "basic",
    "pages",
    "understand",
    "uh",
    "later",
    "css",
    "flexbox",
    "stuff",
    "like",
    "could",
    "level",
    "useful",
    "look",
    "around",
    "basically",
    "structure",
    "three",
    "main",
    "would",
    "html",
    "often",
    "times",
    "see",
    "kind",
    "little",
    "bit",
    "starting",
    "section",
    "think",
    "number",
    "one",
    "know",
    "anyways",
    "also",
    "concepts",
    "learning",
    "general",
    "programming",
    "language",
    "help",
    "bring",
    "goal",
    "really",
    "trying",
    "work",
    "page",
    "talk",
    "building",
    "got",
    "framework",
    "put",
    "makes",
    "finally",
    "make",
    "good",
    "walk",
    "anything",
    "want",
    "pretty",
    "well",
    "last",
    "started",
    "video",
    "link",
    "gives",
    "need",
    "time",
    "challenges",
    "even",
    "next",
    "steps",
    "certain",
    "jump",
    "quick",
    "bunch",
    "things",
    "onto",
    "computer",
    "write",
    "lines",
    "since",
    "okay",
    "worry",
    "back",
    "everything",
    "talked",
    "couple",
    "probably",
    "series",
    "might",
    "remember",
    "talking",
    "called",
    "looking",
    "already",
    "side",
    "browser",
    "tools",
    "use",
    "every",
    "day",
    "inspect",
    "element",
    "right",
    "using",
    "used",
    "common",
    "firefox",
    "type",
    "working",
    "whether",
    "chrome",
    "great",
    "best",
    "reason",
    "allows",
    "expect",
    "click",
    "drop",
    "specific",
    "bottom",
    "styles",
    "show",
    "open",
    "another",
    "tab",
    "dog",
    "grab",
    "new",
    "say",
    "copy",
    "come",
    "button",
    "selector",
    "elements",
    "image",
    "top",
    "ca",
    "tag",
    "source",
    "attribute",
    "paste",
    "press",
    "enter",
    "close",
    "changes",
    "smaller",
    "width",
    "100",
    "styled",
    "google",
    "said",
    "allow",
    "writing",
    "saw",
    "went",
    "test",
    "real",
    "second",
    "refresh",
    "goes",
    "original",
    "seeing",
    "else",
    "made",
    "sense",
    "maybe",
    "box",
    "model",
    "document",
    "object",
    "dom",
    "console",
    "read",
    "evaluate",
    "print",
    "loop",
    "two",
    "modify",
    "us",
    "example",
    "making",
    "actual",
    "file",
    "select",
    "query",
    "earlier",
    "save",
    "variable",
    "set",
    "equal",
    "change",
    "resize",
    "style",
    "dot",
    "equals",
    "function",
    "says",
    "takes",
    "ahead",
    "pass",
    "execute",
    "guess",
    "run",
    "easy",
    "place",
    "less",
    "important",
    "looked",
    "happening",
    "front",
    "images",
    "part",
    "api",
    "arrow",
    "user",
    "play",
    "mobile",
    "mean",
    "whole",
    "sorts",
    "app",
    "blog",
    "comes",
    "enough",
    "cover",
    "years",
    "covered",
    "hopefully",
    "clear",
    "parentheses",
    "color",
    "random",
    "future",
    "body",
    "represents",
    "container",
    "entire",
    "hex",
    "white",
    "green",
    "screen",
    "order",
    "space",
    "create",
    "getting",
    "confusing",
    "point",
    "assign",
    "array",
    "colors",
    "comma",
    "separate",
    "add",
    "valid",
    "value",
    "red",
    "blue",
    "orange",
    "index",
    "values",
    "third",
    "math",
    "zero",
    "1",
    "2",
    "3",
    "4",
    "5",
    "items",
    "arrays",
    "length",
    "insert",
    "string",
    "done",
    "works",
    "looks",
    "event",
    "saying",
    "keep",
    "wrote",
    "words",
    "world",
    "completely",
    "simple",
    "case",
    "version",
    "four",
    "answer",
    "question",
    "overflow",
    "pieces",
    "application",
    "desktop",
    "visual",
    "studio",
    "data",
    "ask",
    "ones",
    "matter",
    "created",
    "therefore",
    "easier",
    "showing",
    "similar",
    "search",
    "word",
    "nothing",
    "better",
    "cases",
    "types",
    "asking",
    "much",
    "notice",
    "required",
    "difference",
    "left",
    "points",
    "yet",
    "border",
    "pixel",
    "padding",
    "font",
    "size",
    "hover",
    "text",
    "added",
    "adding",
    "p",
    "rather",
    "previous",
    "taking",
    "either",
    "result",
    "problem",
    "return",
    "x",
    "five",
    "head",
    "tell",
    "ways",
    "date",
    "standard",
    "applies",
    "mdn",
    "grid",
    "whatever",
    "totally",
    "call",
    "expressions",
    "generally",
    "gets",
    "complex",
    "target",
    "dealing",
    "recommend",
    "came",
    "learned",
    "possible",
    "final",
    "believe",
    "method",
    "convert",
    "interesting",
    "tried",
    "node",
    "reference",
    "error",
    "defined",
    "per",
    "variables",
    "functions",
    "practice",
    "apply",
    "syntax",
    "numbers",
    "methods",
    "50",
    "reverse",
    "try",
    "github",
    "understanding",
    "amount",
    "still",
    "statement",
    "dev",
    "hello",
    "concept",
    "sort",
    "comment",
    "means",
    "containers",
    "item",
    "exactly",
    "declare",
    "10",
    "property",
    "keyword",
    "const",
    "sign",
    "define",
    "correctly",
    "fine",
    "air",
    "break",
    "individual",
    "beginning",
    "step",
    "multiple",
    "0",
    "letter",
    "lowercase",
    "letters",
    "map",
    "normal",
    "guide",
    "class",
    "objects",
    "identify",
    "represent",
    "super",
    "middle",
    "expression",
    "putting",
    "six",
    "sitting",
    "specify",
    "given",
    "strings",
    "combine",
    "correct",
    "double",
    "rules",
    "larger",
    "true",
    "false",
    "brackets",
    "list",
    "oh",
    "count",
    "40",
    "notation",
    "properties",
    "access",
    "usually",
    "instead",
    "far",
    "may",
    "operators",
    "solve",
    "b",
    "bar",
    "operator",
    "compare",
    "minus",
    "prior",
    "modulus",
    "operation",
    "turn",
    "characters",
    "greater",
    "figure",
    "bigger",
    "thinking",
    "triple",
    "match",
    "yeah",
    "furthermore",
    "happen",
    "wrap",
    "exact",
    "remove",
    "otherwise",
    "wrong",
    "check",
    "scroll",
    "total",
    "returns",
    "solved",
    "pop",
    "challenge",
    "solution",
    "block",
    "replace",
    "price",
    "nice",
    "attributes",
    "z",
    "lessons",
    "problems",
    "25",
    "condition",
    "switch",
    "happens",
    "rest",
    "default",
    "looping",
    "post",
    "tutorial",
    "iteration",
    "parameters",
    "arguments",
    "parameter",
    "undefined",
    "available",
    "global",
    "callback",
    "documentation",
    "uppercase",
    "split",
    "argument",
    "passed",
    "basics",
    "based",
    "attempt",
    "input",
    "id",
    "join",
    "character",
    "empty",
    "spaces",
    "null",
    "regular",
    "digits",
    "negative",
    "smallest",
    "classes",
    "cuz",
    "sum",
    "num",
    "player",
    "rule",
    "relatively",
    "substring",
    "rid",
    "200",
    "400",
    "basis",
    "display",
    "parent",
    "piece",
    "filter",
    "perfectly",
    "crash",
    "row",
    "direction",
    "meme",
    "quote",
    "riddle",
    "reveal",
    "tags",
    "pen",
    "paragraph",
    "pixels",
    "div",
    "span",
    "h4",
    "media",
    "inline",
    "units",
    "boxes",
    "margin",
    "inner",
    "window",
    "height",
    "horizontal",
    "children",
    "child",
    "selectors",
    "divs",
    "hidden",
    "design",
    "sizing",
    "responsive",
    "device",
    "layout",
    "align",
    "position",
    "positioning",
    "wide",
    "flex",
    "card",
    "relative",
    "600",
    "devices",
    "queries",
    "576",
    "shrink",
    "testimonial",
    "grow",
    "axis"
  ]
}