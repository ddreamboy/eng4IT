{
  "text": "In this course, I'm going to teach you everything you need to know to get started programming\nin Python. Now, Python is one of the most popular programming languages out there. And it's by far\none of the most sought after for jobs. And so if you're trying to get a job or you're trying to,\nyou know, automate your life, or you're trying to write awesome scripts to do a bunch of different\nthings, then Python's for you. Honestly, more and more developers every day are moving their\nprojects over to Python because it's such a powerful and it's such an easy to use language. A lot\nof programming languages out there just aren't very beginner friendly. There's a lot of syntax.\nThere's a lot of like little things that if you get wrong, the program will yell at you. Python\nis the complete opposite of that. You basically just type out what you want to do and Python does\nit. It's that simple. There's not a whole lot of syntax to learn. The learning curve is literally\nzero. You jump in, you can start writing your first program in seconds. In this course, I'm\ngoing to teach you guys everything you need to know to get started in Python. I designed this\ncourse, especially for Python. And each lesson has been specially designed with examples that\nwill help you along the way with so many people starting to learn Python. The question isn't,\nwhy should you learn Python? The question is, why shouldn't you? And I think for a lot of people,\nthe reason they might not want to learn Python is because they're intimidated or they're afraid\nthat it's going to be too hard. Trust me, I am going to hold your hand through this entire course.\nWe're going to talk about all the core concepts in Python. We're going to look at everything you\nneed to know to start programming in Python and start being confident and start writing scripts\nand start writing programs that are awesome and doing cool things in your life. Anyway,\nI'm super pumped to be teaching you guys Python. I can't wait to get started in this course. And\nI hope you guys stick around and follow along with the course and learn this amazing programming\nlanguage. In this tutorial, I'm going to show you guys how to install Python onto your computer.\nAnd we're also going to install a text editor that we can use to write our Python programs in.\nSo the first order of business is to actually install Python on your computer. So what we want\nto do is head over to our web browser. And you want to go over here to this page, it's just\nwww.python.org forward slash downloads. And on this page, there's going to be two buttons down here.\nAnd it's just going to say download Python 3.6.3. And at least that's the version that I have right\nnow or download Python 2.7.1.4. So here's the thing about Python, there's actually two major versions\nof Python that are in use currently. There's Python two, and there's Python three. So you can see over\nhere, this is like 2.7.1.4. Basically, any Python two version we would just refer to as like Python\ntwo. And here's like the latest Python three version. And so there's these two versions that you can\ndownload. And the first thing we have to decide is which version do we want to download. And here's\nthe basic difference, Python two is a legacy version of Python, which basically means that\nit's like an old version, and it's not being like actively maintained or supported like officially\nby Python anymore. Python three is like the future of Python. It's like the newest version. It's the\none that's getting actively maintained and supported. And so there's pros and cons to picking either\none. A lot of people will say like Python two has been around longer. And so there's more like\nlibraries, there's basically just more Python code written in Python two. So therefore, like\nthere's a few more things that you can do in Python two, then you can do in Python three. But\nthen again, Python two is not supported. And you know, five or 10 years from now, probably no one's\ngoing to be using it. Python three, like I said, is like the future of Python. It's the newest\nversion. It's the one that, you know, is sort of being maintained going forward. So for the\npurposes of this tutorial, I'm going to be teaching you guys Python three. So we're going to want\nto download Python three. Now here's the thing, like, if you learn Python three, or you learn Python\ntwo, the differences aren't very big. There are a few differences in like some syntax and just some,\nyou know, little things here and there. But if you learn Python three, you'll be able to jump right\nin and code in Python two as well. Don't let anyone, you know, tell you that you have to learn one\nor the other, we're going to learn Python three just because it's I think probably the best for a\nbeginner to learn. And so that's the one that we want to download. So I'm just going to click\ndownload Python three. And we're going to go ahead and download this version. And when that's done\ndownloading, I'm just going to head down to my downloads folder. And you'll see here, we just\nhave this file, I'm just going to double click. And we get this like Python installer. So I'm just\ngoing to click through here. And we'll be able to install Python three on our computer. All right,\nwhen that's done installing, we can just close out of this and we should be good to go. So now we\nhave Python three installed on our computer. The next step is we need to choose a text editor. So\nwe're going to be writing a bunch of code. So we're going to need some, you know,\nenvironment or some program that we can write all that code in. And really, you can write Python\nin any text editor, you could write it in like notepad or text edit, it doesn't really matter.\nBut there are special text editors that are designed just for writing Python code. And these are called\nIDEs. And that stands for integrated development environment. It's basically just a special\nenvironment where we can, you know, run and execute our Python code. And it'll, you know,\nbasically, like tell us how we're doing. So if we're, you know, if we write something that's wrong,\nor we have errors, it'll kind of point us in the right direction of what we need to do to fix that\nstuff. So in this course, we're going to be using an IDE. And one of my favorites, and one of the\nmost popular IDEs for Python is called pie charm. So I'm over here on this website, it's called\njetbrains.com forward slash pie charm. And this is the IDE that we're going to be using in this\ncourse. So I'm just going to come over here and click this big download now button. And we'll go\nahead and download this pie charm program. Alright, so I'm getting this page over here. You can see\nthere's two versions of pie charm. One is a professional version, and that one's like paid,\nso you have to pay for it. But then there's this community version down here, and that's\nfree and open source. So I'm just going to download this one. And this should have everything we need\nto get started using Python. Alright, when that finishes downloading, I'm just going to pull that\nup in my downloads folder. And again, we can just sort of run this guy. And I'm on a Mac. So I'm\ngoing to have to drag it over to my applications folder. Alright, so we now have pie charm. And we\nhave Python three installed on our computer. So we're ready to start programming in Python.\nAnd this tutorial, we're going to create our first Python program. And we're going to be able to run\nit and see how everything works. The first thing I want to do is open up pie charm. So pie charm was\nthe IDE, the integrated development environment that we downloaded in the last tutorial. So I'm\njust going to go ahead and search for it on my computer. And I can just open it up. And when we\nfirst open up pie charm, we should basically just get a window prompting us to create a project. So\nyou can see that down here. Actually, the first thing I want to do though is come over here to\nconfigure. And I'm just going to click on preferences. And I actually want to change the appearance. So\nI'm going to go ahead and give this a theme. So I just went over here to appearance and behavior,\nappearance. And I'm going to change the theme to dark. Just because I think it's a little bit\neasier to use and look at. But you don't have to do that if you don't want to. And so down here,\nI'm just going to click create new project. And it's going to give us this little window right here.\nSo I can just name my project. And I'm just going to name this draft. And then there's this other\noption down here where it says interpreter. Now, what we want to select is Python version three.\nSo if I click down here, you'll notice that there's a couple different options. So I'm on a Mac\ncomputer. And by default, Mac has Python version two installed on it. If you're on a Windows machine,\nI'm not sure if it does. But in this tutorial, we're going to be using Python three. So you want\nto make sure that you have Python three selected as the interpreter. Otherwise, you might not be\nable to fully follow along with what we're doing in this video. So now I'm just going to come down\nhere and click create. And this is going to go ahead and create our project for us. All right,\nso now we have our Python project up and running. And I want to show you guys how we can create our\nfirst Python program. So over here in this draft folder, and this is just that project that we\ncreated, I'm just going to right click and I'm going to say new. And I'm going to come down and\nclick Python file. So we want to create a new Python file, this will be our first Python program.\nAnd I can just give this a name. So why don't we just call this app? And I'm just going to click\nokay. All right, so now we have our first Python file open. And we can just start typing in some\nPython. So I want to show you guys just a very basic Python program. And this is just going to be\na hello world program. So we're just going to print something out onto the screen. So what I\nwant to do is I want to type out PRINT print. And I want to type in open and closed parentheses.\nNow inside of this parentheses, we can make some quotation marks. And inside of the quotation\nmarks, I'm just going to type out hello world. So this is like a very basic Python program. And\nwhat this is going to do is it's just going to print out hello world onto the screen. And so now\nwhat I can do is I can actually run this file and we're actually getting a little error here.\nIt wants us to create a new line at the end of the file. And so now in order to run our Python\nprogram, I'm just going to come up here to the top. And I'm just going to click run. And we'll\nclick this run button right here. And now we'll see what happens. So it's asking me what I want\nto run. I can just click app. And down here at the bottom, you'll notice that we have this text\nthat just got printed out hello world. And so whatever I print, or whatever I put inside of\nthis print statement is going to get printed out down below in the console. So as long as you're\ngetting that print statement to work, then you've actually written your first Python program. And\nas we go through forward in the course, we're going to be writing all sorts of awesome Python\nprograms. And we're going to be doing all sorts of cool stuff.\nIn this tutorial, I want to talk to you about writing a basic Python program. So we're going to\nwrite just a very simple Python program. We're going to look at how we can go ahead and write\nour programs, we're going to talk about how our programs are getting executed by Python.\nAnd we're also going to draw out a little shape onto the screen. So this is going to be pretty\ncool. I'm excited to talk to you guys about just the bare basics of Python, and really just sort of\ngive you an introduction. So over here, we have our basic text editor. And so any of the Python code\nthat I write inside of this file is actually going to get executed by Python. So this Python file\nhas a bunch of Python code inside of it. And basically what we're doing when we're programming\nin Python is we're just giving the computer a set of instructions. Right, that's really what\nprogramming is, it's just like we're specifying a set of instructions. And the computer is going\nto go off and execute those instructions that we give it. And so the more complex the instructions\nwe give to the computer, the more complex the tasks the computer can carry out. So I want to\nshow you guys how we can use some Python instructions or some Python code in order to draw out a shape\nonto the screen. So I'm actually going to draw out a little triangle. So over here, we can actually\nprint something out onto the screen and Python using something called print statements. So I can\njust type out print. And inside of these parentheses, I can just type some quotation marks and inside\nthe quotation marks, we can put whatever we want to print out onto the screen. So I'm going to\ncopy this and I'm actually going to make a few of these little print statements. And we're going\nto actually draw a shape. So we're going to draw like a triangle type shape. So down here, I'm just\ngoing to draw a forward slash. And then up here, I'll make a space and we'll do another forward slash.\nHere, we'll make two spaces, we'll do another forward slash. And over here, we're going to make\nthree spaces and a forward slash. And now I'm going to draw like vertical bars going all the way down.\nAnd actually, we can do some underscores here as well. That'd be kind of cool.\nAll right, so now we have our triangle looking shape and you can see it looks kind of like a\nright triangle. So I can save my file. And I can either come up here to run and click run app.\nOr if you're using PyCharm, you can also just come over here and click this play button.\nAnd when I click the play button, I want you to notice what happens down here. So down here,\nwe have this little window and this is called the console. And basically, the console is just a\nplace where Python is going to output some information. So when we use this print statement,\nwe're basically telling Python like, Hey, can you print something out onto the console? So there's a\nlot of situations where we're going to want to see what's going on in our code. And we can use\nthat print statement and print things out to the console. And we can basically like have a little\nwindow into what our program is doing. In our case, we're just going to be printing out this\ntriangle onto the console. So I'm going to come over here and click this play button. And you'll\nsee down here, we're actually printing out that triangle. So mission accomplished, we were able to\nprint out our shape. So I could really draw any shape I wanted as long as I was able to specify\nit inside of these print statements. So essentially, what Python's doing when I click that play button,\nis it's going into this file and it's looking at all of these instructions in order. So the first\nthing it does is it goes to this instruction, and it says, okay, they want me to draw out these\nlike little forward slash in this vertical bar onto the screen. Once it does that, it goes down\nto this instruction, it says, okay, they want me to print something out again. When it prints that\nout, it goes down to this instruction, etc. So Python is actually going to execute the lines of\ncode that we write in order. So the order in which I write the instructions matters a lot. So for\nexample, if I was to take this last line here, and put it up here at the top. Now when I save the file,\ninstead of just drawing out that triangle, it's going to draw out this little upside down bottom\nthing at the top, and then the rest of the triangle down here. So the order of the instructions\nactually matters a lot. So this is basically how your Python programs are going to go. As we go\nthrough this course, we're going to learn more and more of these little lines. So here, we're\njust using this little print function, basically, it just prints something out onto the screen. There's\na bunch of little things like this that we can learn as we go through, we'll learn more and more\ninstructions that we can give to the computer. But in this lesson, I just want to kind of show you\nguys the basics, right? We can essentially just define these little instructions for the computer,\nand the computer will execute them in order. In this tutorial, I want to talk to you guys about\nusing variables in Python. Now in Python, you're going to be dealing with a lot of data. So a lot\nof times in our program, we're going to be working with all types of information and data and values.\nAnd sometimes that data can be difficult to manage. So in Python, we have this thing called a variable.\nAnd it's basically just a container, where we can store certain data values. And when we use a\nvariable, when we put those data values inside containers, it makes it a lot easier for us to\nwork with and manage all of the different data inside of our programs. So variables are extremely\nhelpful. And it's sort of like a core topic in Python that you're really going to want to know\nin master. So in this tutorial, I'm going to teach you guys everything you need to know to get started\nwith variables, we're going to look at what they are, why they're useful, and we'll look at the\ndifferent types of variables and the different types of data that we can store inside of variables.\nBut over here in my Python file, I just have a very simple program. And it's basically just\nprinting some text out onto the screen. And so this is actually a little story that I wrote. It\nsays there once was a man named George, he was 70 years old. He really liked the name George,\nbut didn't like being 70. So this is a valid Python program. I could go ahead and run this program.\nAnd you'll see down here in the console, everything prints out and it looks great. So\nwe have an awesome little Python program here. But let's say that inside of our story, I wanted\nto change the character's name. So instead of naming the character George, let's say I wanted\nto name the character John. Well, I'm going to have to go through and I'm going to have to manually\nchange the name George to the name John at every place inside of this story where it's mentioned.\nSo I'm going to have to go over here and I'll say, okay, John, I'm going to have to manually\nchange that. And then, okay, down here, we're gonna have to again, manually type in John and\nchange it to John. So in order to change the character's name, I had to manually go in and\nchange it in both places. And now let's say, okay, maybe we want to change the character's name age\nalso. So in addition to changing the name, we also want to change the age, let's make\nthem a little bit younger. So why don't we say John is going to be 35. And so you'll see here,\nI had to come here and manually change the age and then come down here and manually change it\nagain. Right. And now that we changed it, like it's going to work, it's going to be updated in\nour program. But you'll notice that in order to make that change, like I had to look through the\nentire program, find it where that value was and change it. And this was only with four lines of\nthe story. Imagine if I had a story that was like, thousands of lines long. And we mentioned the\ncharacter's name and age, like hundreds of times. I mean, I'd have to look through each one of those\nlines and manually change the character's name. And that is not a very good way for us to do this.\nAnd it's really not a good way for us to manage the data in our program, right, the character's\nname and the age. And so we can actually use a variable in order to store the character's name\nand the character's age. And when we use that variable, it'll make it a lot easier for us to\nput the character's name and age inside of our little program here. So I'm going to show you guys\nhow we can create a variable for the character's name and age. And I'm just going to go up here\nabove this print statement. And up here, I want to create a variable. So when we create a variable\nin Python, we actually need to give Python a couple pieces of information. The first piece of\ninformation we need to give Python is the name of the variable. So I need to actually assign a name\nto this container where we're going to be storing information. And so all I have to do is just type\nout the name of the variable that I want to create. So I'm going to create a variable called\ncharacter name. So I'm just going to say character. And I'm going to say underscore name. And so\ngenerally, when you're creating a name for a variable in Python, you want to separate different\nwords with an underscore. So I have two words here, and I'm separating them with an underscore.\nAnd now what I need to do is I need to put a value inside of this variable. So basically,\nwhat I can do is I can just say equals, and over here, I can type a value. So I'm just going to type\nout the character's name inside of quotation marks. So we're just going to type out john.\nSo now we have a variable for the character's name. And below this character name variable,\nI want to create another variable called character age. So we're just going to type out character\nunderscore age. And I'm going to set this equal to the character's age, which is 35.\nSo we now have two variables, one representing the character's name and one representing the\ncharacter's age. So what I can do now is I can replace the character's name inside of the story\nwith this variable. And I'm going to show you guys how to do that. So if we want to put a variable\ninside of this print statement, I'm actually going to have to do a couple of things. The first thing\nI'm going to have to do is end off this text in here. So I'm going to have to put a quotation marks\nhere at the end. And you can see I'm basically wrapping this whole thing into a single like quoted\nline. And now I also have this text over here at the end. So I'm going to have to put a quotation\nmark here. So now I have a bunch of text here in quotation marks. And then I also have text over\nhere in quotation marks. Now inside of here, instead of saying the character's name, I want to refer\nto that character name variable. So I'm just going to say plus character underscore name.\nAnd I want to say another plus sign. So I basically am saying I want to print out all of this text,\nplus the value that's stored inside of character name, plus all of this text. And what this will\ndo is actually print out the character's name. We print this. So I'm going to go ahead and run\nthis program. And you'll see down here, and actually let me put a space over here. And we'll run it\nagain. So you can see down here, we still are printing out there once was a man named John.\nAnd so what Python is doing is when it executes this line of code, it's coming over here and it's\nseeing, okay, they want to print out the value inside of character name. So it Python is going\nto go up here, it's going to get the value. And it's going to insert it inside of there. So I can\nbasically do this for every instance of the character name in my file. So I can, you know,\nI'll just copy this guy right here. And I can just paste it down here where the character's name is.\nSo I'll paste this. And you can see now we're doing exactly the same thing that we did up there.\nI can also do this for the character's age. So I'm going to come down here and I'll paste in what\nwe just paste it in. And I'm going to change this instead of character name, we'll change it to character\nage. And I'm going to do this in one more spot. So we're going to do this over here where we're\nmentioning the age. And again, I'll just change this to character age. And so now when I run this\nprogram, it's going to print out the same story that we were printing out before. But now I don't\nactually have to type in the character's name and the character's age. I can just refer to this\nvariable. And the cool thing about variables is if I wanted to change the character's name,\nnow all I have to do is change it up here. So I could change the character's name to like Tom\nor something. And we could also change their age. So I could change the age to be like 50.\nAnd now that's going to automatically update throughout our entire story. So when I click this\nplay button, you'll see now we're using the name Tom. And he's 50 years old. So that's where variables\ncan come in handy. And this can be a really awesome way to control and manage the data that's inside\nof our programs. With variables, you can also modify their values. So for example, let's say that\nhalfway through the story, I wanted to change the character's name. Well, I can just make some new\nlines over here. And down here, I can actually assign a new value to one of these variables.\nSo I could say like character underscore name. And in order to give it a different value,\nall I have to do is just say equals, and we'll give it a different value. So let's say halfway\nthrough the story, we want to change the character's name to Mike. Well, now when I run on my program,\nyou'll see here in the first part of the story, it says there once was a man named Tom. And in\nthe second part of the story, it's referring to the name as Mike. So I actually updated the\nvariable inside of my program over here. And that's a really awesome way. You know, a lot of times\nin these programs, you're going to want to be modifying the values of variables. So you can do\nit just like that. So finally, I want to talk to you guys about the different types of data that we\ncan store inside of these variables. So over here, I have the character name and the character age.\nAnd I'm actually storing what are called strings. So a string is basically just plain text,\nright? So the name Tom, that's just plain text. Down here, these guys are strings as well. So\nthere's a data type in Python called a string, and it's just basically going to store plain text. So,\nyou know, any text that you would have like in a story, or you know, someone's name, you can store\ninside of a string. There's also another type of data that we can store inside of Python,\nwhich is numbers. So in addition to storing text, we can also store numbers. So if I wanted to store\na number, for example, let's say we want to store the character age instead of inside of a string,\nwe could store it inside of a number. So I could just type out 50. And when we're storing a number,\nwe don't need these quotation marks, you only need that quotation mark when you're storing a\nstring. So if I want to store a number, I can just write it out like this. And in addition to\nusing whole numbers, I could also use decimal numbers. So I could say like 50.5678213. And\nPython's going to be able to store that number as well. So you can store all different types of\nnumbers. And we can also store what's called a Boolean value. And a Boolean value is essentially\na true or a false value. And there's a lot of instances in programming where we're going to\nwant to represent true or false data. For example, I could have a variable called like is mail. And\nthis would tell me whether or not someone was a male. And in my case, it would be true because\nI'm a guy, right? So I can actually this needs to be capital. So I could sort of value of either\ntrue or false. And actually, if we were naming this in Python, we want to use an underscore. So I\nwould say is underscore mail. And this can be either true or false. So true or false values is\nmaybe not something that you're used to dealing with like in the real world. But in programming,\nwe're going to be using true or false values all the time. They're super important. So like I\nsaid, there's three basic types of data that we can work with in Python. There's strings,\nwhich is just like plain text numbers, which would be like either decimal numbers or whole\nnumbers like this. And there's true or false values. And these are the basic types of data. I mean,\nthere's a bunch of other types of data that we can use. But I would say 99% of the time as a new\nuser and a new programmer to Python, you're just going to be dealing with these three types of data.\nSo those are the basics of the data and also with variables. And you're going to be using\nvariables all the time in Python. So you definitely want to practice up and get comfortable using them.\nIn this tutorial, I want to talk to you guys about working with strings in Python. Now one of\nthe most common types of data that we're going to be working with in Python is going to be strings.\nAnd strings are basically just plain text. So any text that we want to have inside of our program,\nwe can store inside of a string. So I want to talk to you guys about all the cool things we can do\nwith strings. And we're basically just going to get a full introduction into why strings are\nawesome. So over here, I'm just going to actually print out a string. So I'm just going to say print\nand inside of these parentheses, I can type out a string. In order to create a string, I need to\nuse quotation marks. So I can make an open and close quotation marks just like that. Now inside\nof the quotation mark, I can put whatever text I want the string to have. So we could say like,\ndraft Academy. And so now we have a string with the text draft Academy inside of it. So if I run\nmy program, now down here, we're going to print out draft Academy, as you can see. And when we have\nthese strings, there's actually a bunch of cool things that we can do with them. So one thing I\ncould do would be to create a new line inside of the string. So if I want it, I can come over here,\nand I could say backslash n. And you can see it got highlighted in a different color. And what this\nis going to do is it's actually going to insert a new line into the string. So now it's going to say\ndraft on one line and Academy on another line. So I'm going to click play. And you'll see down\nhere, we just get draft Academy. In addition to the backslash n, I could also use a backslash\nquotation mark. So if I wanted to put a quotation mark inside of my string, I can't just put a\nquotation mark like that, because Python is going to think that I'm trying to end this string. So if\nI want to include a quotation mark, I can just use this special backslash character. And that's\ncalled the escape character. And it basically just tells Python that whatever character comes\nafter it, we want to render literally. So when I say backslash quotation mark, it basically means\nlike, Hey, Python, I want to print out a quotation mark. And so now we'll be able to print out a\nquotation mark right there. I can also use this to print out a backslash. So if I needed to print\nout a backslash, I could say backslash. And it'll just print out a normal backslash now. So you can\nsee just like that. So if you want, you can use that backslash to make new lines or print out\nquotation marks, or you can just use it as a normal backslash. In addition to just typing out a string\nhere, I could also create a string variable. So I could come down here up here, and we can create\na variable and we'll just call it phrase. And I'm going to set it equal to draft academy. So I can\nstore this string value inside of a variable called phrase. And then when I want to print out that\nvariable, or I want to access that string variable, I can just type the name of the variable. And\nyou'll see that it's going to print out the value that was stored inside of it. I can also use\nsomething called concatenation. And concatenation is basically the process of taking a string and\nappending another string onto it. So I could come over here and I could say phrase, and I can say\nplus. And now I can add in another string. So I could say like, is cool. And now this is going to say\ndraft academy is cool. So I'm basically appending another string onto another one, they call that\nconcatenation. And so in addition to doing all that stuff, we can also use special things called\nfunctions. And a function is basically just a little block of code that we can run. And it will\nperform a specific operation for us. So we can use functions to modify our strings. And we can\nalso use functions to get information about our strings. So I'm going to show you guys a couple\ncommon functions we can use with these strings. And they're actually going to do awesome stuff. So\nin order to access one of these functions, I can just say phrase, and then I can say dot. And I'm\ngoing to show you guys a function that we can use to convert this string entirely into lower case.\nSo I could just say phrase dot lower. And I'm going to want to type an open and close parentheses.\nAnd this will take this phrase, it'll take my string and it'll convert it to lowercase. So you\ncan see now we just have draft academy down here, but it's entirely in lowercase. I could also do\nthe same thing for uppercase. So I could say phrase dot upper. And this will convert the entire string\ninto uppercase. You can see now it's entirely uppercase. So in addition to converting the string\ninto uppercase and lowercase, I could also check to see if a string is entirely uppercase or\nentirely lowercase. So for example, I could say phrase dot is upper. And this is going to give me\nback a true or a false value. So it's going to be true. If the string is entirely uppercase,\nor false, if it's not. And you can see here, we're getting a false value because this is an\nuppercase. I can also use these functions in combination with each other. So for example,\nI could say phrase dot upper, and then parentheses. And then after this, I could say dot is upper.\nAnd now what it's going to do is it's going to run this upper function, it's going to convert it\ninto uppercase. And then it's going to run this is upper function right after that. And you'll see\nnow we're going to get a true value back because it will have converted the whole thing into uppercase.\nSo you can see now we're getting a true value. So you can use these functions one after another,\nit can be really useful. And there's a few other ones that I want to show you. So we can also\nfigure out the length of this string. So if I wanted to figure out how many characters were\ninside of this string, I could just say LEN. And I'm actually going to make an open parentheses.\nAnd I'm going to make a closed parentheses. So I'm essentially saying LEN. And this is another\nfunction, it's the length function. And inside of this LEN function, I'm actually passing this\nphrase variable, I'm basically giving the length function this, and it's going to spit out a number.\nSo it'll tell me how many characters are inside of this string. And so you can see here we get 15\nbecause there's 15 characters inside of draft academy. So that's how we can get the length of\na string. And that's going to be really useful as we go forward and Python, we can also get\nindividual characters inside of a string. So imagine if I wanted to just grab one of these\ncharacters, like imagine if I wanted to figure out what the first character in this string is,\nwe can actually use an open and closed square bracket, just like that. And in here, I can\nspecify the index of the character that I want to grab. So if I wanted to grab the first character\nin this string, I can put in a zero. So if I say phrase square bracket zero, this is going to give\nme that capital G. And you can see down here, that's what gets printed out. Now I want to point\nsomething out in Python, when we're working with strings, a string gets indexed starting with zero.\nSo you'll notice that in order to access this G, I had to put a zero in here. And that's because\nin Python, when we use indexes on a string, we start with zero. So if Python is counting the\ncharacters, or it's indexing the characters in a string, it's going to start with zero. So it's\ngoing to say G is zero, i is one, r is two, a is three. So we would say that G is at position zero\nin the string, i is at position one, r is at position two, a is at position three, etc. So we start\ncounting at zero. So if I wanted to access the first character in the string, this G, I have to say\nphrase zero, and that's just a special thing in Python, and actually most programming languages\ndo that. So they'll start with zero. So for example, if I wanted to access this a, I'm going to have\nto put zero 123. So if I put three inside of here, now we'll be able to access that first a,\nas you can see, we get an a right here. So this is actually really useful being able to grab a\nspecific character inside of a string, and you're going to be using that a lot as we go forward\nin Python, there's also another really awesome function that we can use and it's called the index\nfunction. And basically what the index function will do is it'll tell us where a specific character\nor string is located inside of our string. So I could say phrase dot index. And I can actually\ngive this a value. So sometimes when we use these functions in Python, we can actually give them\ninformation. So I can give this a value. And we would call this passing a parameter. So I would\ncall a value that I would give to a function a parameter, and you'll hear that word a lot. So for\nexample, I could say inside of here capital G. And now this is going to return the index of the\ncapital G inside of our string. So it should give us back a zero because G is at the zero of index.\nAnd you'll see down here that we get a zero because that's where G is. So for example, if I put an a\ninside of here, like a lowercase a, it should give me 0123, because that's where the first a is inside\nof this string. So I can click the play button. And you'll see it's giving us a three, you can also\nput actual words in here. So for example, I could put like Academy in here, or I could even just put\nlike a C A D. And this is going to tell me where this starts inside of my string. So when I click\nplay, it's going to give me an eight because that's where Academy starts right 012345678.\nIf I put something in here that wasn't in the string, so for example, if I put a Z in here,\nthat's not in here, it's actually going to throw an error. So when I play this, you'll see that we\nget this error down here because Z is not found inside of our program. So that index function,\nagain, can be really useful. And we'll be using that a lot. There's also one more that I want to\nshow you, which is called replace. So we can say phrase dot replace. And in here, I can actually\ngive this to parameters. So I can give this replace function to values that it can use. And the first\nthing I want to you to give it is what I want to replace. So for example, I could say draft.\nAnd then I'm going to put a comma in here. And I want to put in here what I want to replace\ndraft with. So I could just say like elephant. And now instead of saying draft Academy, this is\ngoing to print out elephant Academy. So you can see down here, it just says elephant Academy. So\nthis replace function can be really awesome because we can replace certain words or even certain\nletters inside of our strings with other ones. So those are just some basic ways that we can work\nwith strings inside of Python. And there's a lot of these different functions that we can use with\nstrings. These are some of the most common the ones that I just showed you right now. But if you\njust do a Google search, you can find all sorts of Python functions that you can try out and use and\nyou know, see what they do. But you definitely want to get comfortable working with strings in Python,\nbecause you're going to be working with them a lot. In this tutorial, I want to talk to you about\nworking with numbers in Python. Numbers are one of the most common data types in Python. And any\nPython program you write is most likely going to be dealing with numbers at some point. So I want\nto talk to you guys about just the basics of using numbers, we're going to talk about the\ndifferent types of numbers that we can represent in Python. And I also want to show you guys some\nawesome functions that we can use with numbers. So we can do certain like mathematical operations,\nwe can do some awesome things with numbers. I'm going to show you guys all of that in this video,\nit's going to be awesome. So first thing we can do is we can actually just like print out a number.\nSo if I want to write a number in Python, it's really easy. I basically just write the number.\nSo I could say like print two. And this is just going to print the number two out onto the screen.\nSo I can use a whole number like this. I could also use a decimal number. So I could say like\n2.0987. And Python is going to be just fine with that. We'll be able to print that out under the\nscreen as well. I can also make numbers negative. So I could make this 2.0987 a negative number. And\nPython will be able to handle that just fine too. And Python, we can also use basic arithmetic. So\nI could do things like addition subtraction multiplication. So I could say like three plus\nfour. And now this is going to print this out. Or why don't we say like three plus 4.5. And this\nwill be able to print out the answer. So we get 7.5. And we can do addition, we can do subtraction,\nwe can do division, or we could do like multiplication as well. So you can pretty much do whatever you\nwant inside of Python. And if you want to make more complex mathematical equations, we can also\nuse things to specify order of operations. So I could use parentheses. So for example, if I said\nthree times four plus five, what Python's going to do is it's going to multiply three and four\ntogether. So it's going to be 12. And then we'll add five to that. So we should get 17. But let's\nsay that we wanted to change up the order, right? I could actually put a parentheses around four\nand five. And now it's going to add them first. So it'll add four and five. So we'll get nine,\nand we'll multiply that times three. So we should end up with 27. So you can see we can use those\nparentheses to specify order of operations. So I could make like a very complex, a little\nequation here just by using numbers and parentheses. We can also use one other operation, which is\ncalled the modulus operator. So I could say like 10, and use this percent sign, three. And this is\nactually read 10 mod three. And basically what this is going to do is it's going to take the first\nnumber divided by the second number, and it's going to spit out the remainder. So it's basically\ngoing to say, okay, 10 divided by three, that's going to be three with a remainder of one. And so\nthis is going to give us the remainder. And you'll see down here, we get one, because that's the\nremainder of 10 divided by three. And that modulus operator can come in handy quite a bit. We can\nalso store these numbers inside of variables. So we can store them inside of these variable\ncontainers. So I could come over here, and I could create a variable called like my underscore num.\nAnd we'll just store a value of let's say like five in here. And so I could come down here,\nand I can just print out my underscore num. And we'll be able to print that number out to the\nscreen just fine. So in addition to doing things like a basic arithmetic, we can also do some other\nstuff. So one thing I could do is I could actually convert this number into a string. So if I wanted\nto convert this number into a string, I can just say str, and I can put the number that I want to\nconvert inside of these parentheses. And so what's going to happen now is this number is going to\nbe converted into a string. So when I click the run button, you'll see it's just printing out five,\nbut now instead of being a number, this is actually a string. And this is going to come in handy when\nyou want to print out numbers alongside strings. So I can come over here and I can say like, my\nfavorite number, and we'll be able to print this number along with this string. So I can\nclick play. And it says five my favorite number. If I was to get rid of this string right here,\nand I wasn't converting the number into a string, now Python is going to have a problem with this.\nIt's not going to allow us to do that. You can see we get an error. So anytime you want to print\nout a number next to a string, you got to make sure that you use that little string function.\nSo there's a bunch of other stuff that we can do with numbers. And a lot of times in Python,\nyou're going to want to be using specific, like more advanced math operators. So there's a bunch\nof different math functions that we can use on our numbers. And a function is basically just like\na little collection of code that does something. So a function could perform an operation like\na mathematical operation on our number. It could also give us information about our number. So\nI'm going to show you guys some of the most common functions that you'll be using in Python\nrelated to numbers. The first one is called ABS, and it stands for absolute value. So we can get\nthe absolute value of a number. And so over here, I'm just going to make this variable negative five.\nAnd basically, I can just say ABS, and I can make an open and closed parentheses over here.\nAnd this is going to give me the absolute value of this number up here. So when I click the play\nbutton, you'll see it's just giving us five, because five is the absolute value of negative five.\nI can use a few other functions. There's another one which is called pow. It's so it's just POW.\nAnd I'm actually not going to use this variable. We just use a normal number. And this function is\ngoing to allow us to pass it two pieces of information. So I can give this function two pieces of\ninformation. The first is going to be like a number. And the second is going to be the power\nthat I want to take that number to. So I could say like three comma two. And this is basically\njust going to be three raised to the power of two. So it's just going to be three squared. So we\nshould get nine down here. You can see that we do. So I could pass in like, you know, some crazy\nnumber, like we could pass in a four and we could raise it to the power of six. And so we should\nget like a pretty big number here. And you can see we get 4096. So this pow function is really\nuseful for taking numbers to specific powers. So in addition to using this pow function, we can\nalso use another function which is called max. So I can say max. And what this is going to do is\nit's basically going to return the larger of the two numbers that we pass into it. So right now I'm\ngiving this a four and a six. And this should tell us which number is higher. So over here,\nit's just printing out six because that's the bigger number. I can also use another function\ncalled min. And this is going to do the opposite. So now instead of printing out the max number,\nit's going to print out the smallest number. And it's going to print out four down here, as you can\nsee, another cool function is called the round function. And this is going to allow us to round\na number. So it's just going to follow like standard rounding rules. So if I said like 3.2\ninside of here, now it's going to round it down to just normal three. But if I said like 3.7,\nit's going to round it up to four. So that'll allow you to round a number.\nSo there's a few other functions that I want to show you guys, but in order to get access to them,\nI'm actually going to have to do something called importing. And in Python, we can actually import\nexternal code into our files. And so if I want to access these specific math functions,\nI have to import something called Python math. So I can just say from up here, math, import,\nand this star. And basically, what this is going to do is it's going to go out and it's going to\ngrab a bunch of different math functions that we can use. So I already showed you guys a few of\nthese different math functions, but there's actually a bunch more. And in order to access them,\nwe're going to need to include this line of code inside of our file. So once we have that,\nnow I can access a few others. So there's another function which is called the floor method. And\nit's just FLOR. And what this will do is it'll basically just grab the lowest number. So it's\nessentially just going to chop off this decimal point. And you can see over here, now we get a\nthree, because we're using that floor function, there's also another one called seal. And that's\njust going to do the exact opposite. So that's just going to round the number up no matter what. So\nno matter what, we'll always get four with we have a three point whatever here. And there's\nanother one which is called square root. So it's just SQRT. And essentially, this is just going to\nreturn the square root of a number. So I could say like 36. And now we should get six back. So\nthose are awesome, very interesting functions. And inside of this math module, so we would call\nthis a module. And you don't have to worry too much about what that is right now. Just know that\nwhen we put this line of code into our program, it gives us access to a lot more math function.\nSo it basically allows us to do a lot more things with math inside of our program. And there's a\nbunch of different math functions in Python. And if you want, you can basically just go online and\nsearch for different math functions. I showed you guys a few here. And I would say the ones that we\nlooked at here are probably the most commonly used, but there's a bunch more. And like I said,\nyou know, there's tons of documentation on all this stuff. So you can just look up, you know,\nmath functions in Python. And there's going to be tons and tons like lists of these things\nthat you can use inside of your programs to perform different math operations. But for now,\nthat's just been a little bit about using numbers a little bit about doing, you know,\ncertain math operations and using functions with those numbers.\nIn this tutorial, I'm going to show you how to get input from a user. So we're basically going to\nallow a user to input information into our program. And I'm actually going to take the\ninformation that the user inputs, I'm going to store it inside of a variable. And then we're\ngoing to be able to do something with that variable. So I want to show you guys how we can actually\ngo about getting input from someone. And down here in my Python file, all I have to do to get\ninput from someone is I just have to type out input, and then an open and closed parentheses.\nAnd what this is basically going to do is it's going to tell Python like, hey, we want to get\ninput from a user and Python will allow the user to type in some information. And inside of these\nparentheses, we can actually type a prompt. And so generally, when we want the user to enter in\nsome information, we want to tell them what we want them to enter. And that's what we can put\ninside of here. So I'm just going to say, enter your name. So we're actually going to create a\nlittle Python app, which is going to allow the user to enter in their name. And then we'll store\nthe name inside of a variable, and then we'll basically just say hi to the user. So we'll say\nlike, hi, and then whatever the name they entered was. So what I want to do is I actually want to\nstore whatever the user inputted into our program inside of a variable. So I can actually go over\nhere, and I can create a variable, I could just call it name. And I could set this variable\nequal to input. So what I'm doing now is I'm taking the value that the user inputs,\nand I'm storing it inside of this variable container called name. And so now I have access to whatever\nthey entered in. So what we can do is we can say print. And inside of the parentheses, I can just\nprint out hello. And then I'm just going to add on to this name. And actually, why don't we put\nan exclamation point? So essentially, we're getting a name from the user, we're storing it inside of\nthe name variable. And I'm printing it out onto the screen. So I'm going to go ahead and play this.\nAnd when we run the program, you'll notice down here, Python is giving us this little prompt. So\nit's saying enter your name. Now in here, I can actually type in a value. So I can type in Mike.\nAnd then I can just hit enter. And Python's going to go ahead store this value inside of that variable.\nAnd then it's going to print out hello, Mike. And so this is kind of cool. And actually, what we\ncould do is we could prompt the user to enter in more than one piece of information. So I could\nactually copy this line of code. And I'm going to paste it below here. And why don't we have the\nuser enter in another variable? So we could have them enter in, for example, their age. And over\nhere, we just want to say enter your age. And so now we're able to get two pieces of information\nfrom the user. And I could say hello, name. And then I can say, you are, and I'll print out their\nage. So I'm just going to print age. So now I'm basically able to get both of these pieces of\ninformation from the user, I can get their name. And I can get their age. So when we run this program,\nI can type in both of those pieces of information. So to say, answer your name. So we could just\nmake up a name like john, and then enter the age, let's say john is 25. And now it's going to say,\nHello, john, you are 25. So the program is able to get input from the user. And then it's able to\nuse that information in order to say hi to the user and tell them how old they are. And so\ngetting input from the user is a great way to make your programs more interactive. And here,\nwe're just scratching the surface, right? We're just basically getting to, you know, a piece of\ninformation from the user, but you can use these inputs to do awesome things in Python. And as we\ngo through this course, you're going to see some really cool things that we can do with these inputs.\nIn this tutorial, I'm going to show you how to build a very basic calculator in Python,\nwe're basically going to build a calculator where we'll get two numbers from a user,\nand then we'll add those numbers together and print the answer out onto the screen. So let's\nlook at some practice in getting input from users. And we'll also talk about getting numbers from\nusers as opposed to just strings. So I'm really excited to get started on this calculator. The\nfirst thing we want to do is create two variables and inside of those variables, we want to store\nthe two numbers that the user wants to add together. So down here, I'm just going to say,\nnum one. And that's what we'll call our first variable is equal to. And now I need to get\ninput from the user. So I'm going to say input. And inside these parentheses, I'm going to say,\nenter a number. And now I basically want to do the same exact thing, but for the second number.\nSo we'll paste this guy down here. And I'm just going to say num two. And then we'll just say,\nenter another number. So now we're able to store the user's input inside of these two variables.\nSo now all I want to do is just print out the result. So I'm actually going to create a variable\ncalled result. So I'm just going to say result is equal to, and basically, we just want to add\nthese two numbers together. So I'm going to say num one plus num two. And now all we have to do\nis just print out the result. So I'm just going to print result. So we basically have our entire\nprogram written out here. And this will allow us to enter in two numbers, and then we'll add them\ntogether and print out the answer. So I'm going to click play. And down here, we can enter our number.\nSo I'm going to enter the first number, we'll say five. And I'm going to enter my second number.\nSo let's say 8.0, or let's say 8.3. So now we should print out the answer. But if you look over here,\nthat's not quite the answer we were looking for, right, five plus 8.3 is definitely not 58.3. And\nhere's what happened. When we get input from a user by default, Python is just going to convert\nit into a string. So it doesn't matter what we put down there when we're entering the numbers,\nPython's always just going to be like, okay, this is a string, that's it. Sounds good, right? It's just\ngoing to make it a string. In order for us to make these num one and num two variables numbers,\nwe're actually going to have to convert the strings that we get from the user into numbers. And so\nthe way that we can do that is by basically just coming over here. And when we add the two numbers\ntogether, I can use a special Python function in order to convert those strings into numbers.\nAnd there's actually two Python functions that we could use for this. The first is called int.\nSo I could say int, I can make an open parentheses and I can make a closed parentheses. And basically\nwhat this is going to do is it's going to convert whatever is inside of these open and closed parentheses\ninto an integer number. And an integer number is basically a whole number. So it's like one,\ntwo, three, four, five. So it's a, it's a whole number. In other words, it can't have a decimal\npoint. And so what I could do is I could say, int, and I could put these inside of parentheses.\nAnd now what this is going to do is it's going to convert both of these numbers into\nintegers. In other words, into whole numbers that don't have decimals. And it's going to add\nthem together and we'll print out the results. So why don't we do that? And we'll just see if\nthis works. So I'm going to click the play button. And down here, we'll enter our first number. So\nI'm just going to enter in a four. And then I'll enter in a five. And now you can see it's\nprinting out the correct answer four plus five. And so that's essentially our basic calculator.\nBut we do have one problem with this calculator. So I'm going to run it again. And I'll show you\nguys with that problem is if I wanted to add in a decimal number, so we'll add 4.3 and 5.5.\nYou'll see that we're getting this error. And that's because I'm using this int function\nup here. And this int function is looking for a whole number. So if I put decimal numbers\ninside of there, it's going to break the program. There's another function we can use\ninstead of an int, we can say float. And a float is basically just a number that has\ndecimal. So it's a decimal number. So I can convert both of these guys into floats.\nAnd now I'll be able to use decimal numbers. So I can click play. And I can just enter in some\nnumbers. So I could say like four. And I could also say like 5.5. And now it's going to be able\nto add both of those numbers, even if one of them is a decimal. And that's the beauty of using that\nlittle float function. So in certain circumstances, you might want the user to only be able to enter\nin an integer to a whole number. But in a lot of cases, like in this calculator, we want them to\nwe want them to be able to enter any number that they want. So we're going to use this float\nfunction. So I'm just going to recap what we did one more time, we created two variables,\nnum one and num two. And we basically stored the two numbers that the users input into those\nvariables. And then we converted them into numbers. And we added them together and we printed out\nthe results. So this is a pretty cool calculator. I'm happy with it. Hopefully you guys learned\nsomething. And as we go forward in this Python course, you're going to learn all sorts of ways\nthat we can make this calculator more complex. In this tutorial, I want to show you guys how to\nbuild a madlibs game in Python. So a madlibs game is basically just a game where you can\nenter in a bunch of random words. So like, you know, verbs, nouns, names, colors. And you basically\ntake all of those words and put them into a story randomly. So over here, my web browser,\nI just have an example of a madlibs. So, you know, down here, we're basically just taking random\nwords, like an adjective or a noun or a plural noun, and entering them in side of a story. So\nlike you read through the story and then like some random word pops up and madlibs can be pretty\nfun. And I'm sure you guys have, you know, at least heard of madlibs before. But if not,\nthat was just a little introduction. So I want to create a madlibs in Python. And this is going\nto be really cool. So down here, I have this like little poem, which just says, roses are red,\nviolets are blue, I love you. And so, you know, this is kind of like a classic poem. But I think\nwe should mix it up a little bit and create a madlib for this poem. And so instead of having this red\ncolor over here, I want to have the user enter in their own color. Instead of having violets,\nwhy don't we have them enter in a plural noun? And instead of saying I love you, why don't we have\nthem say I love and then some celebrity? So celebrity. So this is the basic structure for our little\nmadlib, right? I want to basically have the user enter in a color, enter in a plural noun,\nand enter in a celebrity. And then I'll take all of those words and put them inside of our\nmadlib. And hopefully we end up with something that's pretty funny. So how can we actually go\nabout building this in Python? Well, the first thing we're going to have to do is we're going to have\nto be able to get these words from the user, right? That's pretty obvious. So I think what we should\ndo is we should create three variables called color plural noun and celebrity. And we'll store the\nuser's inputs inside of those variables. So up here, let's create those variables. The first\nvariable I want to create is going to be called color. So say color. And I want to set this equal\nto the input. So I'm going to say input. And inside of here, I'm just going to give them a prompt. So\nI'll say enter a color. And we can basically just copy this line of code. And I'm going to paste\nit down below. And we'll paste one more time. So now we're going to create our plural noun\nvariable. So I'll say PL, URL, plural noun. And we'll just say enter a plural noun. And actually,\nover here, I want to make a colon as well. So then finally, we'll create our celebrity variable\nand we'll say enter a celebrity. And so now basically, we're creating three variables called\ncolor plural noun and celebrity. And inside of them, we're storing the color that the user enters,\nthe plural noun, the user enters and the celebrity, the user enters. So last thing we have to do is\nreplace these guys with those variables. So I'm basically just going to add in the color over here.\nAnd we're going to add in the plural noun. So I can just go like this.\nAnd finally, we'll just add in that celebrity. So now we have a pretty cool mad lib. And it should\nbe functional. Everything should work. It looks like it's good to go. So let's come over here and\nwe'll run our program. And then down here in the console, we can play our little mad libs game.\nSo let's say enter a color, I'm just going to say magenta, enter a plural noun. Why don't we say\nmicrowaves and enter a celebrity, let's say Tom Hanks. So when I click enter, what should happen\nis we should get our mad libs printed out. So I'm going to click enter. And now we have our mad\nlibs. So it says roses or magenta, microwaves are blue. I love Tom Hanks. So it's a pretty good mad\nlib. And obviously, you know, the more the more print statements we put over here, you know,\nthe better the mad lib could could be. And we could store as many, you know, variables up here as we\nwanted. This was just a very simple mad lib. We only took in three inputs, but you know, you can\nsee how you could take something like this and create a little mad libs game. So your homework\nfor this lesson is to go off and make your own mad libs game. Hopefully one that's a little bit\nfunnier than mine. But that's the basics of creating a mad libs game in Python.\nIn this tutorial, I want to talk to you guys about working with lists in Python. A lot of\ntimes when you're programming in Python, you're going to be dealing with large amounts of data.\nAnd when you're dealing with large amounts of data, you want to make sure that you can\nmanage it and organize it properly. And the list is essentially just a structure that we can use\ninside of Python to store lists of information. So we can take a bunch of different data values,\nwe can put them inside a list, and it allows us to organize them and keep track of them a lot\neasier. So generally, you would create a Python list, and you would put a bunch of related values\ninside of that list, and then you can use it throughout your program. So I'm going to show you\nguys just the basics of using lists, we're going to look at some of the common use cases and\nreally just get you up to speed with what lists are and why they're useful. So over here in my\nprogram, I'm actually going to create a list. And we create a list a lot like we create a\nPython, just like a normal Python variable. So the first thing we want to do when we're making a\nlist is give it a name. So we want to give it a descriptive name, something that's going to\nbasically describe what's inside the list. In my case, for this example, let's make a list of\nlike friends. So we could say like here's a list of all my friends. So I can say friends.\nAnd I'm going to set this equal to the list of values that represent my friends. And we want\nto create a list, we can use these open and closed square brackets. So whenever you use these open\nand closed square brackets, Python basically knows, okay, they want to store a bunch of values inside\nof this list. So why don't we go ahead and start adding some values? So we can say like my friends\nare like Kevin, Karen, and let's say Jim. So here I have three values inside of my friends array.\nSo when we're creating a normal variable in Python, generally, we just give it one value,\nright? So I would create a variable, I would give it one value, maybe a string or a number or a\nboolean. But when we make lists, we're able to store multiple values inside of the same like little\nitem inside of the same object, right? And then what I can do is I can access these individual items\ninside of my program. So inside of this friends list, we're basically storing all of these different\nvalues, and that can be really useful. So now that we've stored some values, let's talk about what\nyou can put inside of a list. So you can really put any piece of information in Python, we could\nput things like strings, numbers, or booleans. So if I wanted, instead of just putting strings\nhere, I could change like one of these to a number, and I could change one of these to a boolean,\nand it wouldn't matter, Python is going to be fine with that. But let's change these back to\nstrings just for the sake of the example. So now that we've created our list, how can we access\nindividual elements inside of this list? It's a good question. I'm gonna go ahead and print\nsomething out to the screen. The first thing we can do is we can just print out the actual list.\nSo I can just say print friends. And then when I run this program, if we look down here in the\nconsole, you can see it's just printing out the actual list of friends, right? But let's say that\nI wanted to print out a specific element inside of this list. Well, I can actually refer to elements\nby their index. So each one of the elements inside of this list has a particular index. And the index\nis actually start at zero. So we would say that this first element in the list, Kevin has an index\nof zero. We would say that this other element Karen has an index of one. And this third element\nJim would have an index of two. So even though Jim is technically the third element inside of the\nlist, it has an index of two. And that's because we start indexing index position one. And so that's\njust kind of how lists work. And that's how list indexes work. So if I wanted to access a specific\nelement inside of my friends list, I can just refer to it by its index. So over here after we\ntype out friends, I'm just gonna type an open and closed square bracket. And inside of this open\nand closed square bracket, I want to put the index of the element inside the list that I want to\naccess. So if I wanted to access this guy right here, this element, I can just put a zero. So I can\nsay friends zero. And now when I run my program, it's just gonna print out that value, it's just\ngonna print out Kevin. If I wanted to access this Jim value over here, I can put a two. And that\nwill give us that Jim value, you can see right there. So we can access elements based off of\ntheir index, we can also access elements based off of their index from the back of the list. So\nfor example, if I said negative one inside of here, this is gonna give me access to this value\nright here for Jim. And you can see that sort of does so when we use negatives, it starts indexing\nfrom the back of the list. So if I said negative two, this is gonna give us Karen. And so you can\nuse the negatives to access items at the back of the list. Just keep in mind though, and this is kind\nof interesting. We would say this first element here is index position zero, right? But we would\nsay the first element at the back of the list is index position negative one. So just keep that\nin mind. So there's actually other ways that we can access like just portions of this list. So for\nexample, let's say I just wanted to select the last two elements in this list. And I didn't want\nto select the first one. Well, in here, I can just say one with a colon. And this will grab the\nelement at index position one and all of the elements after that. So now we should just grab\nJim and Karen or Karen and Jim in that order. I could also specify a range. So actually,\nlet me add in a couple other elements just so we can illustrate this better. So I'll add in two\nmore names. So if I wanted to, I could select like the element at index position one up to the\nelement at index position three. So it's going to grab this one. So that's one, two. And it's actually\nnot going to grab the third one. So it's it's going to grab all the elements up to but not\nincluding three. So it'll grab Karen and Jim. So let's go ahead and run this. And you can see\nit grabs Karen and Jim. So you can either just put like one with a colon after it, and then it'll\ngrab that index position and everything after it, or you can specify like a range that you want to\ngrab from. So that's how we can access elements inside of this list. But we can also modify elements.\nSo for example, I could come down here, let's say I want to modify this value right here, Karen.\nWell, all I have to do is just access that element. So I could say friends and Karen is at index\nposition one. And I can change this to whatever I want. So I could say friends index position one\nis equal to Mike. And now when we print out friends index position one, that value is going to be\nupdated. So it's just going to say Mike instead of saying Karen. So it can be really useful to\nmodify values inside of arrays. So it can be really useful to modify values inside of Python lists.\nSo those are kind of the basics of working with lists in Python. And actually in the next tutorial,\nI'm going to show you guys even more ways that we can use these lists, we're going to learn how\nto like add elements to a list, delete elements from a list, copy lists, and a bunch of cool stuff\nwith these lists. But for now, this has just been sort of like the basics of working with lists.\nIn this tutorial, I want to talk to you guys about using functions with lists in Python.\nAnd Python, a list is one of the most important structures where we can store our information.\nA list basically allows you to take a bunch of different values and organize them and store them\ninside of their own little list structure. So down here in my program, you can see I have two lists.\nI have a list of lucky numbers. And this is just a bunch of different numbers. And then I have a\nlist of friends. So this could be like a list of somebody's friends. And it's basically just a\nbunch of strings with names in them. So these two lists are storing a bunch of different values.\nAnd what makes lists awesome is not only could I store like this many values, I mean, I could store\nhundreds or thousands or millions of values. And when you're working with a lot of data and a lot\nof information in Python, these lists are invaluable. So because lists are so important, there's actually\na bunch of different functions that we can use with lists. And those functions allow us to do\nthings like modify the lists and get information about the list. So in this tutorial, I just want\nto show you a bunch of those functions, we're going to talk about some of the most common and\nthe most popular functions that you would use on lists to make them more powerful and make them\nmore easy to use. So the first thing we can do is obviously just print out a list. So down here,\nI'm printing out this friends list. And when I want to run my program, you see down here,\nwe're just printing out all the elements in the list. So it's always good to be able to print out\nall the elements inside of a list. But there's a lot of other functions that we can use. So\none function is called the extend function. And the extend function will basically allow\nyou to take a list and append another list onto the end of it. So I could say like friends dot\nextend. And inside of these parentheses, I can pass in the list that I want to add on to the\nfriends list. So I could say like lucky numbers. And now when I print out this friends list,\nnot only is it going to have all the elements in the friends list, it's also going to have all\nthe elements inside the lucky numbers list. You can see down here, we have all of our friends.\nAnd then we also have the numbers over here. So that's a really easy way to essentially just like,\nadd two lists together. We can also just add individual elements onto a list. So I could come\ndown here and I could say friends dot append. And this will actually allow me to append another item\nonto the end of this list. So over here, I could just add another name. So we could say creed, for\nexample, and now I'm like adding another friend onto the end of this list. So when I run the program,\nin addition to having the original items that were in the list up here, we also have this\nadditional item at the end, and that append function is always going to add the item onto the end of\nthe list. But let's say that you wanted to add an item into the middle of the list. So like right\nhere or right here, there's another list function called insert. And insert is going to take two\nparameters. The first parameter is going to be the index where you want to insert the item. So\nwhy don't we insert it here at index position one? I'm just going to say one. And then I'm going to\ntype in the name of the element that I want to add. So we can just say like Kelly. And now at index\nposition one, we're going to have the value Kelly, and all of these other values are going to get\npushed up, they're going to get pushed to the right one index position. So now I run the program,\nyou can see we have Kevin, this new element Kelly, and then all the other elements have been pushed\noff to the right, we can also remove elements. So for example, let's say I wanted to remove this\ngym value, all I have to do is just say friends dot remove. And I can just type in whatever element\nI want to remove. So I want to remove this gym element. And so now when we run the program,\nJim is going to be gone from the list, and we just have these four guys left, you can also remove\nall of the elements from the list. So if I just wanted to completely like reset the list and get\nrid of everything, I could just say friends dot clear. And this is going to give us an empty list.\nSo it'll get rid of every single element inside the list. There's also another really cool method,\nwhich is called pop. And you can just type out pop like that. And basically what pops going to do\nis it's going to pop an item off of this list. So when I click the play button, you'll see here\nthat we're left with Kevin, Karen, Jim, and Oscar. So we basically got rid of the last element inside\nthe list. And that's what pop does, it pops an element off of the list. So it basically removes\nthe last element in the list. So we have our list, but let's say that we wanted to figure out if a\ncertain element was in this list, right, if a certain value is in here, so let's say I wanted\nto check to see if my friend Kevin was in this list, well, I could say friends dot index. And in\nhere, I can just pass a value. So I could say like, Kevin, and this is going to tell me the index\nof Kevin. So it'll tell me if Kevin's in the list. So now when I click play, you can see down here,\nit says zero. If I was to say like Oscar in here, for example, now it'll give me the index of Oscar.\nSo that's it three. But if I put a name that wasn't in here, so like, if I put Mike, that's not in the\nlist. And so now we're going to get back in air, because it says Mike is not in the list. So that's\nan easy way to figure out if a specific element is inside of the list. And if it is, then you know\nwhat index it's at, you can also count the number of similar elements in the list. So I'm actually\ngoing to come down here, copy this gym element, and we'll add another gym element into here. So I\ncould come down here and I could say friends dot count. And we'll pass in gym. And this will tell\nme how many times the value gym shows up inside of this list. So it should say two, which it does\ndown there, because we have two values with the text gym. And so we have all these values, we could\nalso sort this list. So I could come over here and I could say friends dot sort. And what this\nwill do is it'll sort the list in ascending order. So we have a bunch of text here, and you'll see\nwhat it does. Basically, what it's going to do is it's going to put it in alphabetical order. So\nyou can see we have J K O and T. So the list went from being just random order, like whatever we\nhad up here to now it's in alphabetical order. And that's also going to work for lucky numbers. So I\ncould say like lucky numbers dot sort, and then we'll print out lucky numbers. And these should\nnow be in ascending order, which I'm realizing they already are up here. But if I was to take this\n42 and put it down here, now it will figure everything out and put it in ascending order. Anyway, we\ncan also reverse a list. So if I wanted, I could reverse this lucky numbers list, I could say\nlucky numbers dot reverse. And now when we print it out, instead of being 4815 1623,\nit's going to be 2316 15 842. So it's basically just reverse the order of the list. And finally,\nthere's one more list function I want to show you guys which is copy. So I could actually create\nanother list, and I could make it as a copy. So I could say like, friends to, and we could set this\nequal to friends dot copy. And now friends to is going to have all the same attributes as friends.\nBecause it's basically just like copied it basically took a copy of that friends list. So\nyou can see it's the same exact thing and copying lists can come in handy in a lot of\ndifferent situations. So those are just some basic list functions and just to kind of like,\nyou know, get your feet wet and working with lists. Obviously, like the more you work with them,\nthe more you practice using these different functions, the more comfortable you're going to get.\nBut that's just kind of like a basic overview of what you can do.\nIn this tutorial, I want to talk to you guys about tuples in Python. Now a tuple is a type of data\nstructure, which basically means it's a container where we can store different values. Now if you're\nfamiliar with lists in Python, a tuple is actually very similar to a list. It's basically a structure\nwhere we can store multiple pieces of information. But a tuple has a few key differences from lists\nthat we're going to talk about in this tutorial. First thing I want to do is I want to show you\nthe how to create a tuple. So I can come down here and I can create a tuple. And one of the most\ncommon examples of tuples is coordinates. So let's say I had a series of like XY coordinates, I\ncould create a variable called coordinates. And I'm just going to set this equal to an open and\nclosed parentheses. And whenever we want to create a tuple inside of Python, we're going to use\nthese open and closed parentheses. And inside of here inside of these parentheses, we're going to\nput the values that we want to store. So I could, for example, put a list of numbers. So this could\nbe like my coordinates, I could have like four and five. So this would be my tuple with coordinates\ninside of it. And one of the things about tuples that makes them unique is a tuple is immutable.\nAnd you'll hear that word a lot when we're talking about tuples immutable, it basically means that\nthe tuple can't be changed or modified. Once we create our tuple up here, you cannot modify it,\nyou cannot change it, you can't add elements to it, you can't erase elements from it, you can't\nchange any of the elements inside the tuple. What you see is what you get, once you create the\ntuple, it's, it's as it is, it can't change. So I could come down here and I can print out\nsome of the attributes inside the tuple. And the way I can access them is just by using an open\nenclosed square bracket. And in here, I can pass in a index. So tuples are indexed starting at zero.\nSo technically, we would say that four is at index position one and sorry, four is at index\nposition zero and five is at index position one. So if I said coordinate zero, now it should print\nout four. And down here, we're printing out four. So if I wanted to print out that five,\nwe can just put a one inside of those square brackets. And now we'll print out that five. So I can\naccess the elements inside of a tuple, I can easily access each, each entry. But if I was to come\nover here and try to change one of the elements, so if I said coordinates, and coordinates one,\nand I tried to set it equal to something else like 10, Python's actually going to give us an\nerror when we run this program. So I'm going to run the program, you see we get this error, it says,\ntype error tuple object does not support item assignment, because it's immutable, because we can't\nchange it. So that's basically what tuples are how we can create them. And you know, a tuple,\nlike I said, it's very simple, you just create it, and then you have it. And now I want to talk to\nyou guys about a common topic in Python, which is the difference between tuples and lists. So\nremember, a list is basically doing the same thing a list. If we wanted to create a list, we would\njust use square brackets instead of those parentheses. And if I was using a list, I could assign\ndifferent values to it, I could I could basically mutate any of the elements I could add delete,\nmodify change, whatever I wanted with the list. But with a tuple, we can't do that. And that's\nsort of the basic difference. And really, Python doesn't say anything more than that. It basically\njust says like one of them's immutable, one of them's not. But in practical use cases, generally,\npeople will use tuples for data that's never going to change. So you'll you'll store data inside of\na tuple, when that data doesn't need to be mutated. That's why something like coordinates\nis such a good candidate for a tuple, because once you have coordinates, like, we're probably\nnot going to modify them, right, we might add other coordinates. So for example, if I wanted,\nI could create a list of tuples. So I can say like 4567, maybe we have some other coordinates,\nlike 8034. So here I have, you know, I have a list and inside of it, we have these tuples.\nBut remember, these tuples can't be modified, the values can't be changed. So really, it's just a\ncase by case basis, I would say by a huge majority, you're going to be using lists most of the time.\nTuples are more of a niche, you know, they're using more special situations. But there are\nplenty situations where you want to use tuples. So if you're in a situation where you want to store\ndata that can't be changed or mutated, then tuples are the way to go. So yeah, that's just some basics\nabout tuples, some basics about the difference between lists and tuples. And so a tuple is a\ngreat thing to add into your Python repertoire. In this tutorial, I want to talk to you guys about\nusing functions in Python. Now a function is basically just a collection of code,\nwhich performs a specific task. So I can take a bunch of lines of code that are basically doing\none thing, I can put them inside of a function. And then when I wanted to do that task or do that\none thing that the function was doing, I can just call the function. And so functions really\nhelp you to organize your code a lot better, they allow you to kind of break up your code into\ndifferent, you know, little chunks that are doing different things. And they're really just awesome.\nSo functions are like a very core concept when we're talking about programming in Python. So I'm\ngoing to show you guys how to create an awesome function today. Let's say for the purposes of\nthis tutorial, we want to create a function that says hi to the user. So the one task that our\nfunction performs is basically just saying hi to whoever is writing the program. So over here,\nif I want to write a function, the first thing I have to use is a keyword in Python,\nit's called death. So D E F. And basically, when Python sees this keyword, it's going to say,\nokay, this person wants to use a function. So after we type out death, we need to give this\nfunction a name. So just like when we are creating variables, we give them descriptive names,\nwe also want to do the same thing with functions. So if I'm creating a function, I can just give\nit a specific name, which basically says like what it's doing. So we're going to create a function\nthat says hi. So I'm just going to call this function, say hi, just like that. And once we type\nout the name of the function, and so also I could type out say hi with no underscore or I can type\nout say hi with an underscore, both are considered like good practices in Python. A lot of times,\nif you just have a simple like two word function like this, you don't need to put an underscore,\nbut we could put an underscore there. If we wanted, after we type out the name of the function,\nI'm just going to type an open and close parentheses. And then I'm going to type a colon. And basically,\nwhat this is doing is it's saying to Python, like, all right, all the code that comes after this line\nis going to be inside of our function. And in order to write code that's going to end up being\ninside the function, we actually have to indent it. So over here, you'll notice that when I clicked\nenter, my text editor automatically indented the text. So it's automatically like, using this indent\nhere. And that's kind of like one of the rules in Python is like, the code that goes inside of\nthis function needs to be indented. So if I was to write some code, like out here, this is no longer\ngoing to be considered inside the function. So you can see, as I type out code, and obviously,\nthis isn't real code, but as I type text over here, that's indented, this little like marker over\nhere is basically saying like, Oh yeah, that's inside the function. But then when I write code\nover here, that is like not at the same indentation level as this stuff, it's no longer considering\nit inside the function. So that's just a little thing. Any code inside this function needs to be\nindented. Alright, so our function is just going to say hi to the user. So I'm just going to have it\nprint out some text, it's going to say hello, user. So this is a very simple function. Obviously,\nwe just have one line of code and inside of a function, you could have, you know, as many lines\nof code as you want. But for our purposes, we only need one line in order to perform our function.\nSo now all we have to do is call this function. So if I want to execute the code inside of this\nfunction, I have to do something called calling it. So if I was to just run my program as it is\nright now, I'm just going to run it, you'll see that nothing happens over here, right? Even though\nthis function is printing out hello user, when I run the program, it's not doing it. And that's\nbecause the code inside of a function isn't going to get executed by default. The code inside of\na function is only going to get executed when we specify that we want to execute it. And in order\nto do that, we're going to have to do something called calling the function. So in order to call\nthe function, you basically just type out the functions name and those open and close parentheses.\nSo I'm just going to type out say hi, and open and close parentheses. And now when we run this\nprogram again, you'll see that it prints out hello user. So we're executing the code inside of the\nfunction. And I want to show you guys just one more thing here, just talking to you guys about\nhow these functions actually work. So up here, I'm going to print top. And then down here, I'm\ngoing to print bottom. So I want to show you guys the flow of these functions inside the program. So\nwhen I run this program, you'll see we print out top hello user, and then bottom. So essentially,\nwhat's happening is when Python goes through and executes this program, it goes over here to\nthis first line, it says, okay, we want to print out the word top. And then it goes down here and\nit says, okay, we want to execute the say hi function. So Python actually jumps up, and it goes\nover to this say hi function, and it's going to execute all of the code inside of this function.\nSo it's going to go through execute all this code. And then once it's done executing all the code\nin the function, it's going to jump back down here, and it's going to move on to the next line,\nwhich is bottom. So that's kind of like the flow of functions. Again, with functions generally,\nwhen we're naming these functions, you want them to be named in all lowercase. And usually,\nwhen we're naming stuff in Python, if there's two or more words, we're going to use an underspace\nor an underscore in between them. So I could write this out as say underscore high. But in a lot\nof situations, though, if I have a function like this where the name is really short, I might just\nbe easier to leave it without an underscore, but why don't we just put an underscore in there just\nto be a super Python official. All right, so now we can actually make these functions a little bit\nmore powerful. And what we can do is we can give them information. So a lot of times when we write\na function, we're going to want to have additional information that gets passed in. And these are\ncalled parameters. So a parameter is a piece of information that we give to the function. So over\nhere, I can actually specify that this function needs to receive some parameters. So I can basically\nsay like, Hey, if you're going to call this function, you need to give us some information,\nyou need to give us some parameters. And all I have to do to do that is just type out the name\nof the parameter that I want to receive. So why don't we allow the code calling this function to\ntell it what name to say hi to up here, I can just say name. And basically, what this means is it\nmeans whenever I call this say hi function, we have to give it a name. So down here, if I was to call\nthis, I have to include a name in here. So I can say like, Mike, and what we can do now is we can\nactually access this parameter or this variable inside of our function. So I could come over here\nand instead of saying hello user, I could say hello name. And basically, what this is going to do is\nit's just going to say hello to whatever name got passed in here. So I'm actually going to copy this\nand we will do this twice. So I'll say hello, Mike hello, Steve. And now when I run this program,\nyou'll see that instead of just saying hello user, it's saying hello to whichever name I passed\ninto the function. So that's why this can be really useful, right? We can give the function\ninformation, and depending on the information we give it, it'll perform its task a little bit\ndifferently. I could also include more than one parameter. So you can, I mean, technically, you\ncould have like as many parameters as you want. So I can put another one in here, we can say age.\nAnd now I'm going to have to pass in an age along with these. So I'm just going to pass in age and\npass in an age for down here. And I'm just going to pass in strings. So we can say hello name.\nYou are age. So I'm passing in two pieces of information. And now when we run this program,\nit's going to call the function. And it's going to use both of those pieces of information. So I\nsay hello, Mike, you are 35. Hello, Steve, you are 70. So essentially, we're writing out this one line\nof code, which just prints out like hello to someone. And we're allowing this function to receive\ntwo parameters. So the name and the age, and depending on the name and the age, the function's\ngoing to print out hello a little bit differently. And that's kind of the beauty of using function.\nSo you could pass anything you want into a function. So for example, I could pass in a integer instead\nof a string for the age. So like I could pass in the number, the only difference is over here,\nwe're going to have to convert this into a string. But it's going to work just the same. So you\ncould pass in strings, numbers, bullions, arrays, you can really pass any type of data into a\nfunction. And it's going to work. So you can see here, we get the same result. So that's the basics\nof functions. And as you go through with Python, you're going to be using functions more and more.\nAnd generally, it's a good idea to break your code up into different functions. So whenever you\nhave like a grouping of code that's designed to perform a specific task, that's usually a good\ncandidate to be put inside of a function. In this tutorial, I want to talk to you guys about\nusing the return statement in Python functions. Now Python function is basically just a collection\nof Python code that performs a specific task. And when we want to perform that task in our Python\nprograms, we can call a Python function. And a lot of times when we're calling a Python function,\nwe just kind of call it and it does its thing. And then we move on with the program. But sometimes\nwhen we call a function, we're actually going to want to get information back from that function.\nSo when I call the function, I want it to basically execute its task, I want it to execute all the\ncode. And then I want it to like give me some information back. So that could be like a particular\nvalue, it could be something like telling me how the task went. Basically, the function can just\ncommunicate back to us like, Hey, here's some information. And that's what the return keyword\ncan allow us to do the return keyword can basically allow Python to return information\nfrom a function. So I'm going to show you guys how we can do this, I want to create a very simple\nfunction. And it's just going to cube a number. So when we cube a number, we take it to the power\nof three. So if I was going to cube like two, it'd be like two raised to the power of three.\nRight, it's just pretty basic math. So we're going to make a function that will cube a number.\nAnd I'll show you guys how we can use that return statement. So first thing we want to do is make\na function, I'm just going to say death cube, we'll call the function cube. And over here,\nwe can specify any parameters that this function will take. So basically, any values that we want\nto give this function. So we're going to give it one function, which is just going to be a number.\nSo I'm just going to call it num. And then over here, I'm going to type out a colon.\nAnd then down here, we can put any of the code that we want to be included in this function.\nSo basically, this function is just going to cube this number. So we could just type out num,\ntimes num, times num. Right, that's going to give us num cubed. So that's all well and good. And\nif I come down here, I can execute this function. So I can basically just call it, I'll say cube.\nAnd why don't we pass it a three? So I'm going to go ahead and pass it to three. And I'm going\nto save this. And now let's go ahead and run this code. So we're on the code. And you'll see down\nhere, nothing happened, right? So nothing got printed out in our program. In fact, when we call\nthis cube function, it didn't really do anything. So let me try to print this out. So maybe if we\nprint this function out, it'll give us back the information that we want. So type out print,\nand we'll print out the value of the function, I'm just going to click play. You look down here,\nit says none. So when I printed out the value of this function, it told me none. But really,\nthis function is supposed to be cubing the number. And here's how we can use the return statement\nin Python. I can come over here and I can just say return. And now Python is going to return\nwhatever value we put over here to the right. So when I call this cube function, and I give it a\nthree, Python is going to go off, it's going to execute this function. When it sees this return\nstatement, it's going to say, okay, I want to give a value back to whatever call of this function.\nAnd it's going to return this value. Now, when I print out cube three, it should print out the\nanswer because we get an answer back. So when I play this, you'll see down here, it says 27. So\nwe got the correct answer. So I could do this with anything, why don't we cube like four or\nsomething? So now we're on this. And you can see we're constantly getting the correct answer back.\nSo that's the basics of using this return statement, it allows us to return a value back to the\ncaller. In other words, back to whatever's calling the function. So I just want to illustrate this\npoint a little bit further, I'm going to come up here, I'm actually going to create a variable.\nSo I'm going to create a variable called result. And I'm just going to set it equal to cube four.\nThis variable result is going to store the value that gets returned from the cube function. So it's\nnot going to store like cube four, it's going to store the value that gets returned from executing\nthat function. So now if I came down here and printed out result, it's actually just going to\nprint out 64 again, because that's the value that it's storing. So this return statement can be\nreally useful for like getting information back from a function, we can use something like a\nparameter, like this four as a parameter, and we can give information to a function. And then we\ncan use the return statement to get information back from a function. And I do just want to point\nout one more thing, I'm actually not able to put any code after this return statement. So if I\ncame down here and tried to put like a print statement, this actually isn't going to work. So this is\nnever going to get printed out. So if I just typed out like code right here, when we run this program,\nit's not going to type out code. That's because when I use this return keyword, it breaks us out\nof the function. So Python's going to go through, it's going to execute the code in the function,\nwhenever it sees this return keyword, it's just going to break back out and we're going to be\ndone. So we'll never be able to reach this line of code. So that's the basics of using return\nstatements. And you can return any data type you want, we could easily return like a string or a\nBoolean or an array, it doesn't really matter, you can return whatever you want. And a lot of times\nin a lot of situations, you're going to want to get a value back from a function.\nIn this tutorial, I want to talk to you guys about using if statements in Python. Now if statements\nare a special structure in Python, where we can actually help our programs to make decisions. So\nby using an if statement, I could execute certain code when certain conditions are true. And I can\nexecute other code when other conditions are true. So basically if statements allow our programs to\nrespond to the input that they're given. So depending on the data that we're using in the program,\nour programs will be able to respond. So when certain data is certain values, we can do certain\nthings. And when other data is other values, we can do other things. So you know, your programs\nare essentially becoming a lot smarter. And actually, if statements are things that we as human beings\ndeal with every day. So you know, as you go throughout your day, generally, you're dealing with if\nstatements all the time. So I want to kind of give you guys a brief introduction into if statements,\nand we'll talk about some of the common if statements that you'd see in everyday life.\nAnd then we'll go ahead and do a really awesome example to kind of like show you guys what if\nstatements can do for us. So over here in my text editor, I just have this little text file.\nAnd in here, I wrote out a bunch of if statements that a lot of people will encounter on a daily\nbasis. So here's the first one, it says I wake up, if I'm hungry, I eat breakfast. So let's break\nthis down a little bit up here, it says if I'm hungry. And this is a condition, right? This is\neither going to be true, or it's going to be false, right? If it's true, I'm going to go ahead and\neat breakfast, right? If it's false, I'm just going to skip whatever was in here and move on,\nright? So that's the basics of an if statement, right? We have a condition, in this case, if I'm\nhungry, if the condition is true, then we do the action. So we eat breakfast. Otherwise,\nwe just skip it. So down here, we have another one, it says I leave my house. If it's cloudy,\nI bring an umbrella. Otherwise, I bring sunglasses. And so this one is a little bit more complex than\nthe one we just looked at. You'll see we have our condition, right? It says if it's cloudy,\nif that condition's true, we're going to bring the umbrella. But in this case, if the condition's\nfalse, there's something else that we want to do. So in the case up here, if this condition was\nfalse, we just moved on. But now if this condition's false, then we're going to go ahead and bring\nsunglasses. So that's another example of an if statement, it's a little bit more complex.\nFinally, I have one more down here, and this one's even more complex, it says I'm at a restaurant.\nIf I want meat, I order a steak. So if this condition's true, we order the steak. But if this\ncondition is false, then we're going to move on, and we're actually going to check another condition.\nSo I'm going to say otherwise, if I want pasta, I order spaghetti and meatballs. This is another\ncondition. If this condition's true, we get the spaghetti. If it's not true, then finally,\nwe're going to move on down here, and we'll just default to ordering the salad. So all three of\nthese if statements are valid if statements, it's just they get more and more complex as we go down\nthe list. So hopefully that's, you know, it can kind of wrap your head around what if statements\nare we're basically specifying conditions. If those conditions are true, we're going to do certain\nthings. And if those conditions are false, we can do other things, or we can check other conditions.\nAll right, so let's head over to our Python file, and we'll start writing some actual Python.\nSo in here in my app dot Python file, I want to create an if statement. And I'm going to show\nyou guys a very basic if statement in this tutorial. And then in the next tutorial, we're going to\nlook at some more advanced if statements. And so what I want to do is create a Boolean variable.\nSo I'm going to create a Boolean variable that's going to store whether or not the user is a mail.\nSo it's just going to be called is underscore mail. And I'm going to set this equal to true,\nbecause I'm a male. So we have this Boolean variable, right? And right now we have it set\nequal to true. I can actually use an if statement to check to see what the value of this variable\nis. And if it's true, I can do something. So if I want to use an if statement, all I have to do\nis just type out if, and then I just need to type out a condition. So basically, I would have to type\nout like something that's going to be true or false. Like, for example, in the other page, we\nwere specifying like, if I'm hungry, or if it's cloudy, here, we're just going to check to see if\nis mail. So in other words, if the person is male. And so remember, this has to be a, like, it has to\nbe able to be reducible to a true or a false value. So in our case, we're just using a Boolean,\nbecause that's like the easiest thing we can do. So I said if I specified my true or false condition,\nand now I want to just type a colon. And what I want to do now is make a new line. And so\nanything that I put below this with an indentation is actually going to be executed when that\nconditions true. So I could put print. And down here, I could just put you are a male.\nAnd now you'll see what happens when I run this program, it's going to go down here,\nand it's going to say you are a male. But if I changed is mail to false. So instead of this\nbeing true, I just change it to false. Now all of a sudden it's not going to print anything. So\nit's just going to be blank down here. That's because this condition wasn't true. So anything\nthat I put below this if declaration and that has an indentation like that is going to be executed\nwhen the if statement is true. We can also use another keyword in Python, which is called else.\nAnd else is basically going to be like otherwise. So you remember before we said, if it's cloudy,\nI'll bring an umbrella. Otherwise, I'll bring sunglasses. Well, this is going to be like our\notherwise. So I can say down here else. And now anything that I put below else is going to get\nprinted out when that condition isn't true. So why don't we just put you are not a male.\nSo now we're able to cover both of the situations for this variable. If it's false,\nwe can cover that situation. So it says you are not a male. If it's true,\nwe can cover that situation as well. So it'll say you are a male. So that's pretty cool.\nBut we can also make these more complex. And actually before I talk about that,\nyou can put as much code as you want inside of an if statement. So I could have like,\nyou know, dozens of lines of code if I wanted. I'm just giving you guys a very simple example.\nSo why don't we make this more complex? And I'm going to add another variable into the mix. So\nI'm going to add another, you know, Boolean attribute into this mix. I'm going to make another variable\ncalled is tall. And we're going to set this equal to true as well. So now I have two variables in\nthe mix. Let's say I wanted to write an if statement that will check both of those variables. So I\ncould write an if statement that's like, if they're male and they're tall, or if they're male and\nthey're not tall, or if they're not male and they're tall, like I could write out a bunch of if\nstatements to check the combination of these variables. And so the way I can do that is by using\none of two keywords. So the first keyword I want to show you guys is the or keyword. So I can come\nover here and I can say if is male, or is underscore tall. And what this is basically going to do is\nit's going to say if the person is either male, or if they're tall, then we want to do something. So\nthis is only going to be true when one of these values is true, when one or both of those values\nis true. So down here, we could actually put instead of you are a male, we could put you are a male\nor tall or both, that's going to be more appropriate. And then down here, we would say you are\nneither male nor tall. And that's because if we execute the code inside of this else,\nthat means that both of these guys are false. Right, so I'm saying if they're male or they're tall,\nwe're going to execute whatever is in here. Otherwise, that means they're neither male nor tall. We're\njust going to execute this down here. So let me show you guys how this works. I'll click play. And\nthese are both true. So it's going to say you are a male or tall or both. If I was to set one of\nthese to false. So let's set is male equal to false. Now, it's still going to say you are a male\nor tall or both. But if I set them both equal to false, now it's going to say you're neither\nmale nor tall. So that's kind of the basics of using the or operator. And there's another operator\nwe can use which is called and, and basically it's similar to or except both of these conditions\nhave to be true. So this is basically saying if the person is male and they're also tall,\nthen we're going to execute whatever is in here. So we could actually change this text to say you\nare a tall male, because we know for a fact that if this is getting executed, they're both male\nand tall. We can also change this print statement down here. This could say you are either not male\nor not tall or both. So you can see it's basically just saying that you're either not one of them\nor you're not both of them. So we click the play button and you'll see because they're both false,\nit's going to say you are either not male or not tall or both. But if I make them both true,\nnow it's going to say you are a tall male. If I was going to make one of these false,\nthough, so let's make is tall false. Now it's not going to execute this first print statement.\nIt's going to execute the one inside of the else. So to say you are either not male or not tall\nor both. So that's the basics of and an or and you'll be using those a lot as you use your if\nstatements. But there's actually one more thing we can do. We can add in some more conditions.\nSo up here I'm checking if they're male and they're tall. But what if I wanted to check if they're\nand they're not tall? So if they're like a short male, I can use another keyword in Python called\nelse if or really it's just typed out E L I F and it stands for else if and after this we can put\nanother condition. So over here I want to check to see if they're male and they're not tall.\nSo I'm going to say else if male is male and now I can type in not tall and the way I can do that\nis by saying not an open and close parentheses and saying is tall. And basically when I use this\nnot function it's going to negate whatever is inside of here. So if this was true it's going to make\nit false and if this was false it's going to make it true. So basically that'll tell us whether or\nnot they're tall. And then I'm going to use a colon and now down here inside of here we're basically\njust going to type out any of the code that we want to happen when this condition's true. So down\nhere we can just print out you are a short male and there's actually one more condition that we want\nto check for which would be if they're not male and they're tall. So we can make one more else if\nand I'm actually just going to copy this guy and we'll paste it down here. And so I want to say if\nnot is male and is tall. So now we're checking to see if they're male and or if they're not male\nand they're tall. So here we could say you are a you are not a male but are tall. So essentially\nhere we have an if statement that's going to cover every single condition for these two variables. So\nin every single situation of the two values of these variables we're going to be able to print\nsomething out for it. So if I made both of these true it's basically going to tell us you are a\ntall male. If I make is male false it's going to tell us you are not a male but are tall. If I made is\nmale true and is tall false then it's going to tell us you are a short male. And if I made both of\nthese false it's going to tell us you are either not male or not tall or both. And actually we need to\nchange this. So this should say you are not a male and not tall. So that would be a better print out\nfor that situation. So you can basically see how we can use if else ifs and else in order to help our\nprogram to make decisions and really to respond to the different data in our programs. So I'm able\nto respond to every combination of the values for these two variables. And that's really cool. So in\nthis example we were just using simple Boolean variables but in the next tutorial I'm going to show you\nguys how you can actually use something called comparison operators. So we could compare like two\nnumbers or two strings and we could use those as our conditions. But for now I think this is a good\nintroduction into if statements. So I'll see you guys in the next tutorial. In this tutorial I want\nto talk to you some more about if statements in Python. More specifically we're going to be looking\nat using comparisons inside of our if statements. So if you're following along with the course in\nthe last tutorial I talked to you guys about just the basics of if statements and we used a couple\ndifferent Boolean variables. And depending on the values of those bullions we were able to do certain\nthings. In this tutorial we're going to look at another way to use if statements which is with\ncomparisons. So instead of just using Boolean values we can actually compare different values. So I\ncould compare a couple numbers or I could compare a couple strings. And depending on the results of\nthose comparisons we can do certain things. So this is going to be pretty cool. And this is really\ngoing to give you guys a full understanding of what you can do with if statements. So for this\ntutorial I actually want to create a Python function. And this function is going to give us the\nmaximum number that we pass into it. So this function is going to take three parameters as input and\nit's going to print out the biggest number that we give it. So let's create this function. I'm\njust going to say death. And I'm just going to call it max num. And inside of these parentheses I'm\ngoing to specify that I want three parameters as input. So I'm going to say num one, num two and\nnum three. So basically we're passing it three numbers and this function will return the largest\nof the three. So in order to figure out which of these numbers is the largest we're going to have to\nuse an if statement. So I can say if and over here I need to specify a condition right so I need to\nput like a true or a false value. And so what we can actually do is we can compare these different\nnumbers. So I could say if num one is greater than or equal to num two. And num one is greater\nthan or equal to num three. So basically what I'm doing here is I'm comparing these different\nnumbers. So I'm saying if the first number is greater than or equal to the second number. And\nthis is a comparison. So when you think about it, when we compare these two numbers, we're going to\nend up with a true or a false value. Right, num one is either greater than or equal to num two or\nit's not. It's actually a Boolean value right it's either true or it's false. Same thing over here.\nThe result of this comparison is either true or it's false. So technically I'm putting a true or\nfalse value in there. I'm just getting that true or false value by using a comparison. And you'll\nnotice over here we're using something called a comparison operator. And basically this is just\nlike how we want to compare them. So we're saying like greater than or equal to in this case.\nSo down here, if this whole condition is true, in other words, if the results of these two\ncomparisons end up being true, then we know that num one is the biggest. So I can just return\nnum one, I can say return num one. But we also want to check some other conditions. So I can\nsay L if, and now I want to do some other comparison. So I'm going to say else if num two is greater\nthan or equal to num one. And num two is greater than or equal to num three. So I'm doing\nessentially what I did up here, except for num two. So again, I'm comparing these different\nnumbers. And this is going to end up being a true or a false value, depending on the result of\nthe comparison. So down here, again, we can just return num two, because if all of this is true,\nthat means we're going to end up returning num two. And then finally, we can just say else.\nSo if num one isn't the biggest and num two isn't the biggest, then we can pretty much\nassume that num three is the biggest. So now we have our function. So down here, I'm actually\njust going to call this function. So I'm just going to say, actually, I'll print out the\nresult. So I'll say max num, and we'll pass in like three, four, five. So we're basically\ncalling that new function that we just made. And I'm going to go ahead and run this program.\nSo you can see down here in the output, we print it out five, because that was the biggest.\nIf I was to change this middle one to the biggest, so we make the middle 140, now it'll be able\nto take on that situation. And finally, I can make this like 300. And it'll be able to handle\nthat. So no matter which number num one num two or num three ends up being the biggest,\nit's able to tell us without a problem. So these comparisons are a really, really, really\ncommon way to make if statements. And a lot of times, you're going to want to be comparing\ndifferent values inside of Python. So over here, we're comparing numbers, but we could also\ncompare strings. So I could easily make these both like, you know, I could make this like\ndog, and I can make this dog. And I could say a different operator. So I could say like\nthis double equal sign would mean equal. So I could basically say like, if this string\nis equal to that string, so you can basically like compare all different data types, you\nknow, I could compare numbers, strings, you could also compare bullions. So once again,\nthese are comparison operators. And this one is greater than or equal to, but there's a\nbunch of other comparison operators we can use. So the most basic is just going to be\na double equal sign. And that basically checks to see if the two values are equal. So it'll\nsay like, if number one is equal to number two, we can also say not equals. And this\nand this exclamation point will basically mean not equal. So it's if num one is not equal\nto num two, we also have greater than less than greater than or equal to less than or equal\nto. And those are kind of all of the operators are all the, you know, the basic comparison\noperators that you're going to be using in Python. So using comparisons is really awesome.\nAnd there's going to be tons and tons of situations inside of Python where you're going\nto want to compare different values. So these can be extremely useful. In this tutorial,\nI'm going to talk to you guys about building a calculator in Python. Now, if you've been\nfollowing along with this course, you'll know that in the beginning of the course, we actually\ncreated a very basic calculator. Basically, the user could just enter in two numbers and\nour calculator would add the numbers together and spit out the answer. In this tutorial,\nI want to show you guys how to build a more advanced calculator. So this calculator is\ngoing to be able to perform all of the basic arithmetic operations. So we can add, subtract,\nmultiply and divide. And we'll actually allow the user to specify which one of those they\nwant to do. So the user will enter in a number, they'll enter in whatever operator they want\nto use. So plus minus divide, multiply. And then they'll enter in the second number and\nwe'll perform the operation for them. So this can be pretty cool. And it's going to show\nyou how we can use if statements in like a practical application. So let's get started.\nThe first thing we want to do is get input from the user. So I'm going to create three\nvariables, one for the first number, one for the second number, and one for the operator.\nAnd we'll basically store the values that the user inputs into those variables. So the first\none will just be num one. And I'm going to set this equal to input. And we're going to\ngive this a prompt. So I'll say enter first number. And here's actually the thing is\nwhatever the user enters, we're going to want to convert it into a number. So generally in\nPython, when we get input from the user, no matter what they put in, it just gets converted\ninto a string. But we don't want a string, because we're going to have to be adding or\nsubtracting or multiplying these numbers together. So whenever they enter in the number,\nI just want to immediately convert it to an actual like number data type instead of a\nstring. So what I can do is I can actually say float, and I can surround this entire\ninput tag with parentheses. And now what this is going to do is it's going to immediately\nconvert whatever the user inputs into a float. Now that's going to mean that they're going\nto have to insert a number, otherwise we'll get an error. But for the most part, this should\nwork out for us. So I'm actually just going to copy this guy. And we'll go ahead and paste\nit over here. And we'll paste it one more time. So we're basically just trying to get three\npieces of input from the user. So the second thing we want to get is the operator. So I'm\njust going to say op for operator. And I'll actually get rid of this float, because we\nwant to keep this as a string. And I'll just say enter operator. So that's going to be\nlike plus minus multiplication, whatever. And then finally down here, we'll get num two.\nAnd again, we're going to want to convert this to a float. So I'll say enter second number.\nSo now basically what we're doing is we're getting the first number, we're getting the\noperator and we're getting the second number from the user. So what we need to do now is\nwe need to figure out what is inside of this op. In other words, we need to figure out\nwhat operator the user was trying to do. So are they trying to do addition or they trying\nto do subtraction like we want to figure that out. So we can use an if statement in order\nto figure that out. So I'm going to come down here and I'm basically just going to create\nan if statement. So I'm going to say if, and we want to check a condition. So I'm basically\ngoing to check to see if this operator is equal to a plus sign. So I can say if op equals\nplus sign. And now if the operator is equal to plus sign, I'm just going to print out\nnum one plus num two. But let's say that instead of a plus sign they entered in something\nelse. So we can say out if op is equal to, and now we'll check if it's a minus sign.\nAnd so here we'll just print num one minus num two. And actually forgot to put a colon\nhere. So we can just do these for everything. So now we can say L if op is equal to division\nand here we'll just divide the two numbers so I can print out num one divided by num two.\nAnd finally, we'll do the same thing for multiplication. So I'll say l if op is equal\nto asterisk. And we'll just print out num one times num two. Alright, so basically over\nhere we have every, you know, condition. But I also want to put in an else statement. So\nin the case that the user enters in an operation, that's not like one of the four that we\nspecified up here, I just want to throw an error. So I'm just going to say op or actually\nwe just say else. And here we'll just print out like invalid operator. Alright, so this\nif statement should give us everything we want. Basically, I'm just checking to see if it's\nequal to a plus sign a minus sign a division sign or a multiplication sign. Depending on\nwhich one it's equal to, we'll do a different operation. So let's go ahead and run this\nprogram and see how we do. So I'm going to run this program and it says enter first number.\nLet's enter five, enter an operator. So why don't we just do addition and enter a second\nnumber. Let's do 23. So now it prints out the answer 28. So a calculator actually works.\nLet's try another operator just to make sure. So we'll do six and why don't we multiply\nit by, I don't know, 5.23. So now we go off and we do the multiplication and looks like\nwe got our answer. So our calculator seems to be working. And so basically all we did was\nwe got the input from the user and then we used if statements to figure out what they\nwanted to do. So we can check to see if they wanted addition. We can check to see if they\nwanted subtraction or division or multiplication. And we can also check to see if they entered\nin an invalid operator. So actually why don't we try that too. So I'll enter in like five\nand now we'll just enter in like an open and close parentheses and a four. So you can\nsee here it's able to tell like the program's smart enough to know that that's not a\nvalid operator. So these if statements can be really powerful and we can use them in\ncombination with getting the user input to create a little calculator. In this tutorial\nI want to talk to you guys about using dictionaries in Python. Now a dictionary is a special\nstructure in Python which allows us to store information in what are called key value\npairs. So essentially I can just create a bunch of these different key value pairs and\nthen when I want to access a specific piece of information inside of the dictionary I\ncan just refer to it by its key. So the word dictionary is actually pretty appropriate\nhere. If you guys are familiar with a normal dictionary you know in a normal dictionary\nyou'd have a word and then you'd have a definition associated to that word. So in this\nsituation the word would be the key. In other words the word is what like uniquely\nidentifies it inside of the dictionary and then the value would be the actual definition.\nSo this is going to make more sense once we start working with this but I just wanted\nto give you guys a quick introduction. So in this tutorial I want to create a little\nprogram that will allow us to convert a three digit month name into the full month name.\nSo I could convert for example like JAN to January or I could convert M A R into\nMarch. Like I want to be able to have a program that can do that for us and that's actually\na pretty good use case for a dictionary. So we're actually going to create a\ndictionary and I'm going to show you guys how we can do that. So the first thing we\nneed to do in creating a dictionary is just give it a name. So I want to give this a\nspecific name. So I'm just going to call this month conversions. And now I just want to\nset this equal to an open and closed curly bracket. So whenever we create a dictionary\nin Python we're always going to want to create it inside of these open and closed curly brackets.\nSo inside of the dictionary now we can start defining what are called key value\npairs. So I can define a key and then I can give it a corresponding value. And the\nway that we can do that is just by typing out the key and then typing out the value.\nSo in our case we're converting three digit month names into the full month\nnames. So I would want to type out for example JAN and then I can type a colon\nand I want to type out the value I want to associate with it so we could say January.\nI can basically do this for every combination. So I could say like FEB and this would be\nFebruary. And actually after each one of these we're going to need to put a comma.\nSo I could do the same for March, say M.A.R.\nSo essentially what I can do is I can specify an entry inside of this dictionary for each\none of these. So this over here would be the key and this over here would be the\nvalue. And here's one thing is all of these keys have to be unique. So if I was to\ncome down here and change this to JAN, this is actually going to give us a little\nwarning. So you can see down here it says dictionary contains duplicate keys.\nThat's a no no when we're creating dictionaries. So you always want to make sure\nthat the keys are unique. All right. So I'm going to go ahead and create one of\nthese for each one of the months and then we'll come back and we'll talk about it.\nAll right. So I've gone ahead and created an entry for all 12 of the months. So now\nwe have a bunch of unique keys and each one of those keys is associated with a\ndifferent value. So this is the basics of creating a dictionary is we have a bunch\nof these different key value pairs. And now what we can actually do is we can\naccess them from inside of this dictionary. So if I wanted to access a\nspecific key or a specific value, all I have to do is come over here and I'm\nactually just going to print it out onto the screen so we can see it. All I have\nto do is refer to the dictionary by name. So it's just called month conversions.\nAnd there's actually a bunch of different ways that I can access these month names.\nSo I could access different entries inside of this dictionary. The first way is just\nby making a open and close square bracket and inside here, I can just type in one\nof the keys. So for example, inside here, I could type in NOV. And what this should\ndo is it should give us back the full name for November. So when I print this\nout, you'll see that we get back down here November. So I could do the same thing\nfor, you know, any of these, we could say like M A R. And now we should get\nMarch back. So I'm able to refer to the key. And it's going to go into the\ndictionary and it's going to give me the value that's associated to that key.\nThere's actually another way we could do this too. So I could say month conversions\ndot get an inside of here. I could also pass in the name of a key. So I could pass\nin like D E C. And now we'll be printing out December. And what's cool about using\nthis get function is I can actually specify a default value that I want to\nuse if this key is not found. So there's going to be certain cases when we're\ndealing with dictionaries where you're going to put in a key that might not\nnecessarily map to a value inside of the dictionary. So you put in an invalid key.\nSo let's just try to do that. So I'll just put like L U V. That's not a month\nabbreviation. So when I try to run this, you'll see we get this none down here.\nAnd in a lot of cases, you're going to want to create some sort of a default\nvalue. So if I'm in this situation where I have a key that's not mapable to any\nvalues inside of this dictionary, I can actually pass it a default value. So\ninside this dot get function, I can make a comma. And now I can pass in like a\ndefault value to get printed out. So I can say like not a valid key. And now when I\nput in the invalid key, instead of saying none, it's going to go ahead and say not\na valid key. So this is going to give us like a default value that we can fall\nback on. So these dictionaries are really awesome. And the keys over here don't\nhave to be string. So you could also use numbers. So for example, I could say\nlike zero, one, 10, like I can put any numbers I want over here as keys as long\nas they're unique. And then I could access those keys, just like I normally\nwould down here with this get function or with those open and close square brackets.\nSo that's sort of the basics of using dictionaries. It can be really useful to\nstore key value pairs. And honestly, you're going to be using them a lot in Python to\nstore different types of data. In this tutorial, I want to talk to you guys about\nwhile loops in Python. Now a while loop is basically a structure in Python, which\nallows us to loop through and execute a block of code multiple times. So I can\nspecify like a few different lines of code, and then I can put that code inside of a\nwhile loop. And it would basically loop through that code, executing it repeatedly\nuntil a certain condition was false. So while loops can be awesome. And there's\na lot of situations in Python where we're going to want to loop through specific\nlines of code. So in this tutorial, I just want to show you guys the like bare\nbasics of how while loops work. And then in future tutorials, we're going to use\nwhile loops to create little games and stuff like that. So let's talk about\nwhile loops. When I create my while loop, the first thing I want to do actually is\ncreate an integer. I'm basically creating a variable that's a number and you don't\nhave to do this for a while loop, but just for our demonstration I'm going to. So\nI'm just going to call this I and I'm going to set it equal to one. And now what I\nwant to do is I want to create a while loop. So I'm basically just going to say\nwhile. And over here I want to specify a condition. And this is what's called our\nloop condition or you can also refer to it as a loop guard. And basically we are\ngoing to keep looping through the code inside of the while loop as long as this\ncondition is true. So whatever condition I put in here, as long as it's true, we're\ngoing to keep looping through the code inside the while loop. So I'm just going to say\nwhile I is less than or equal to 10. And now I'm going to put a colon and I'm going\nto make a new line. And so anything that's below this while loop declaration and\nthat's indented like this is going to be considered code that's inside the while\nloop. And so that code is going to get repeatedly executed while this condition\nup here is true. So I'm just going to put a very simple line of code here. We're\njust going to print out the value of I. And then down here I'm going to actually\nincrement I so I'm going to add one to I'm going to say I is equal to I plus one.\nSo basically I'm taking this I value and I'm adding one to it. There's actually a\nshorthand that we can use in Python to do something like this though I could just say\nI plus equals one and that's automatically going to add one to I. So this is like\na little shorthand and you'll see people in Python using that a lot. So over here\nwe basically have our while loop. So I have the outline for a while loop. So we're\ndefining this variable up here and we're going to keep looping through the code\ninside the while loop as long as this condition up here is true. So if this\ncondition is false for example if I is equal to eleven then we're not going to\nloop through this code anymore and we're just going to move on. So down here I'm\nactually just going to print. Done with loop. So this will kind of illustrate\nthis for us. Alright so let's go ahead and run this program. I'm just going to run\nit. And you'll see down here we get some output. So we're actually going to get\nnumbers printed out one all the way down through ten and then we're printing out\ndone with loop. So basically what's happening is we're printing out every\ntime we go through this loop. So initially I is equal to one right. The first thing\nthat Python is going to do when it gets to this while loop is it's going to check\nthis condition. So before it does anything else it's going to check this\ncondition and it's going to say okay is one less than or equal to ten and that's\ntrue. So as long as this guy is true we're going to go through and loop through\nall the code inside of here. So we're going to print out i which has the\nvalue of one and then we're going to add one to i. So now i is going to go from\none to two. Now what we're going to do is we're going to go all the way back up\nhere to this while loop declaration and we're going to check the condition again.\nSo remember I checked the condition the first time and then I loop through all\nthe code then I go back up to the top and I check it again. So I'm going to say\nokay is i less than or equal to ten. At this point i is equal to two. So i is\nless than or equal to ten. So now we're going to go through and we'll execute\nall this code again. So I'm going to print out i so it's going to be two and I'm\ngoing to add one to i so now we have three. Then Python is going to go all the way\nback up to the top and it's going to check the condition again. So on every\niteration through the loop before Python does what's inside of this loop it's\ngoing to check that condition. And as long as the condition remains true we're\ngoing to keep executing the code inside the loop. Eventually though in this\nprogram i is going to end up being eleven. So on the last iteration it's going to\nend up being eleven. We're going to come back up here and we're going to say hmm\nis eleven less than or equal to ten? Nope. And so since it's nope we're going\nto come down here and we'll print out this done with loop line. So that's the\nbasics of how these while loops work. We're specifying a loop condition as long\nas that condition is true we'll keep executing the code inside of the loop.\nAnd after every execution of the loop we're going to come back up and check the\ncondition again. So that's how we end up with this printing out down here. So\nthat's the basics of a while loop. And we can use these while loops to do all\nsorts of things. Like while loops are very very powerful. In this tutorial I'm\ngoing to show you guys how to build a basic guessing game in Python. And in this\nguessing game we're actually going to be using all sorts of cool programming\nstructures that we've learned up to this point in the course. So we're going to\nbe using things like if statements and while loops and variables and all these\ncool things in order to build this game. So the basic idea is we will specify\nlike a secret word. So we'll have a secret word that we store inside of our program.\nAnd then the user can interact with the program and try to guess the secret word.\nAnd so what we want to be able to happen is we want the user to be able to keep\nguessing what the secret word is and keep typing in different responses until they\nget the secret word right. So that's the basics of what this game is going to be.\nAnd now let's go ahead and create it. So the first thing we want to do is create a\nvariable to store our secret word. So I could say secret word and we're just\ngoing to set this equal to a secret word. So why don't we make it draft. That's\na pretty good secret word. And now what we want to do is we want to create a\nvariable that will store the user's response. So I want a variable that will\nstore like all the guesses that the user makes. So I'm just going to call this\nguess. And I'm just going to set it equal to an empty string right now. So now we\nhave the secret word and we have a variable to store the user's guess. And\nwhat we need to do is we need to be able to prompt the user to input the secret\nword. But here's the catch. What we want to happen is we want them to enter the\nsecret word. And if they don't guess it correctly, we want to prompt them to\nenter it again. So we can't just use a single input statement. We actually have\nto use something called a while loop. And we can use a while loop in order to\ncontinually ask the person to guess the word until they guess it correctly. So\nlet's go ahead and create our while loop. So I'm going to say while. And after I\nsay while, I need to specify a looping condition or a looping guard. Basically,\nthis is something that as long as it's true, we're going to keep looping through\nthis loop. So basically, I want to say I want to keep looping as long as the\nuser's guess is not equal to the secret word. So as long as they haven't guessed\nthe secret word, I'm going to keep going through this loop. And inside of this\nloop, what we're going to do is we're going to ask them to input the secret word. So\nI can take this guess variable and I can set it equal to input. And I'm just going\nto say enter guess. And so over here, we're basically telling the user to enter in\ntheir guess. I'm storing whatever they enter inside of this guess variable. And\nthen what's going to happen is we're going to come back up here. We're going to check\nto see if the guess is equal to the secret word. If the guess isn't equal to the\nsecret word, then we're going to do it again. But if the guess is equal to the\nsecret word, then we're just going to break out of this loop. And so we can come down\nhere. And we can just print out a success message. So I could say you win because\nthey got the secret word. So this is a very, very simple program. But this is\nessentially all of the code that we need to be able to build a game like this. So\nlet's go ahead and play our game. We can run it and see how we did. So I'm going to\nclick play. And down here, you can see it's prompting us to enter a guess. So I'm\njust going to type in some, you know, random text, we can type in whatever we\nwant. And as long as we're not entering that secret word, it's going to keep\nprompting us to enter different information. But if I enter in the secret word, so if\nI enter in draft, now all of a sudden the program is going to terminate and it's\ngoing to say, Hey, you win, because we were able to guess the secret word. So that's\nlike a really cool way for us to be able to do this. And we actually have a fully\nfunctional guessing game. But I think this guessing game could actually be\nimproved quite a bit. A lot of times when we're making a guessing game, we want to\nset a limit. So in other words, I want to set a limit for the number of times that\nthe user can try to guess the word. So let's say that the user has three tries,\nright, they have three guesses in order to guess the word. And if they can't guess\nthe word after three tries, then they're going to lose the game. But if they can\nguess the word inside of three tries, then they'll win the game, right? I think\nthat would be a little bit more of a fun game. So why don't we try to program\nthat game? Basically, we're going to set a limit on the number of guesses that the\nuser can have. In order to do this, we're going to have to create a couple more\nvariables down here. In other words, we're going to have to store a couple more\npieces of information. The first piece of information I want to keep track of is\nhow many times the user has guessed, right? So we can just make a variable called\nguess count. And we'll just set this equal to zero because initially, the user won't\nhave guessed down in this while loop. Every time we go through the loop, I want to\nincrement that guess count, right? So every time we've gone through this while loop,\nI want to increment that count because that means the user will have guessed.\nSo down here, I'm going to say guess count plus equals one. And this is just going\nto add one to the guess count, actually whoops. Alright, so after each\niteration of this loop, we're going to go ahead and add one to the guess count.\nAlright, so that's the first variable that we're going to need. We're also going to\nwant to store another variable. And this is going to be called guess limit. And\nbasically, this is going to tell us how many times the user can guess the word.\nSo I'm going to it's going to be guess limit. And we'll basically just say three.\nSo let's say that the user has three tries to guess the word three strikes and\nyou're out. So the user, if they can't get it in three tries, then we're going to\nbasically say that they lose the game. And I'm also going to need one more\nvariable here, which we're going to call out of guesses. And I'm just going to set\nthis equal to false initially. So this out of guesses variable is going to be a\nBoolean. And it's going to tell us whether or not the user is out of guesses. So if\nout of guesses is true, that means they have no more guesses, right? They basically\nlost the game. And if out of guesses is false, that means that they still have\nsome guesses left so they can keep playing. All right, so let's use these\ndifferent variables in order to make our program more functional. So the first\nthing I want to do is when I go through this loop, I want to check to make sure\nthat the user has more guesses, right? In other words, before I let the user\nenter a guess, I want to check to see that they haven't already used up all\ntheir guesses. So down here, I can make an if statement. I can say if and inside\nof the condition, I want to check to see that guess count is less than guess limit.\nIf guess count is less than guess limit, that means that they haven't guessed the\ntotal number of guesses that they have. So they have some guesses left. And if that's\nthe case and if that's true, then I'm going to go ahead and give them a guess and\nthen we'll increment the guess count. If this isn't true, in other words, if they\nhave reached their guess limit, then I'm going to want to set out of guesses\nequal to true, because they're out of guesses, right? They have no more guesses\nbecause the guess count wasn't less than the guess limit. And so that means that\nthey're out of guesses. So they have no more guesses. So there's actually one more\nthing we need to do inside of this while loop, we need to add another condition\non to this loop guard. So right now, we're going to keep looping as long as the\nguess is not equal to the secret word. But remember, if the user's out of guesses,\nin other words, if they've reached their guess limit, we don't want them to guess\nanymore, right? So if they ran out of guesses, then we want to basically break out of\nthis loop and not give them any more guesses. So I'm going to go ahead and add\nanother condition onto here. And I'm going to say, while they haven't guessed the\nsecret word, and they're not out of guesses. So it's going to be not out of\nguesses. Then we're going to keep looping. So as long as they haven't guess the word,\nand as long as they still have some guesses left, we're going to keep looping. But\notherwise, we're going to break out of the loop. And so down here, we're printing out\nyou win. But actually, when we break out of this loop, there's going to be two\npossible scenarios. So again, there's two possible ways that this loop could end,\nright? Either the guesses equal to the secret word. So either the user guessed\nthe word correctly, or the user ran out of guesses. And so there's two situations\ndown here that we need to account for. And so I'm going to use an if statement to\nfigure out which is which. So I'm going to say if, and we're just going to type out\nof guesses. And if the user is out of guesses, then I want to print out of\nyou lose. So we're basically going to be like, you lost the game. Otherwise, though,\nif they're not out of guesses, that means that they guess the word correctly. So\nwe're just going to print out you win. Alright, so now we have all the logic for\nthis little guessing game setup. And let's see if we can run it and play through\nit. So I'm just going to run this program. And now it's going to tell us to\nenter a guess. So why don't we enter more guesses than we have? So we're going to\ntry to lose the game. So I'm just going to enter one guess, two guesses. And now I'm\non my final guess. So if I don't get it here, we should actually lose the game. And\nyou can see it says out of guesses, you lose. So we weren't able to guess it in the\nnumber of tries that we had. Let's run the program again, and we'll try to win the\ngame. So we'll get a couple wrong. Let's say we're on our last guess. And I'm like,\nOkay, I can do this. So I type in the word and bam, we won the game. So that's how we\ncan basically create a game where we have a guess limit. So this is a lot of code.\nLet me walk you guys through this one more time so you can just get a full\nunderstanding of what we're doing. Up here, I created a few different variables. We\ncreated this secret word variable, and we created this guess variable. And then we\nalso created some more variables. So we created this guess count variable. And this\njust keeps track of how many times the user has guessed the word. And you can see\ndown here, every time we give them a guess, we're incrementing the guess count. We also\nhave guess limit. And guess limit is telling the program how many times the user can\nguess. So before I go through this while loop, the first thing I'm doing is I'm\nchecking to see that the guess count is less than the guess limit. In other words,\ndo they still have some guesses left? If they do, then we're going to get the\ninput from the user. Otherwise, we have this other variable up here called out of\nguesses. And out of guesses is going to tell us whether or not they have some guesses\nleft. So if this is equal to false, that means they have some guesses. If it's\nequal to true, however, it means no more dice, no more guesses, they are done. So\nthey lost the game. The last thing we needed to do was specify an additional\ncondition up here. So we are going to keep looping through the code inside of this\nloop, as long as the conditions up here are true. So as long as they haven't\nguessed the word, and as long as they're not out of guesses, we are going to keep\nlooping through. And so when eventually the user does break out of this loop,\nthere's going to be two possible situations. The first situation is that they ran\nout of guesses. And so we want to check to see if that's the situation. I want to\ncheck to see if they're out of guesses. If they are, we'll print out a lose\nmessage. If they're not, then they must have guessed it correctly. So they win. And so\nthat is how we can use while loops and if statements and also variables in\ncombination with each other to build a pretty awesome guessing game.\nIn this tutorial, I want to talk to you guys about using for loops in Python. Now\na for loop is a special type of loop in Python, which allows us to loop over\ndifferent collections of items. So a lot of times we'll use for loops in Python to\nlike loop through different arrays, or we can loop over like the letters inside\nof a string, or we could just loop through like a series of numbers. So for loops\nprovide a very specific purpose. And the easiest way to kind of wrap your head\naround why for loops are useful is just for me to show you guys a bunch of\ndifferent examples. So that's exactly what I'm going to do. We're going to look at\nwhy for loops are awesome. So down here in my text file and my Python file, I'm\ngoing to write out a couple of different for loops. So the way that we create a\nfor loop is just by saying for. And now what I want to do is specify a variable.\nAnd this variable is going to essentially represent a different value every time we\ngo through this for loop. And you guys will see how that works in a second. But\njust know that this variable is going to be used on every iteration of our for\nloop. And each time it will most likely have a different value. So in our case,\nI'm just going to call this letter. And I'm going to say for letter in. And now\nwhat I want to do is I want to specify a collection that I want to loop over.\nOne example of this would be like a string. So I could put a string in here.\nI could just put like draft Academy. And now I can just put a colon. And so\nbasically what this is going to say is it's going to say for every letter inside\nof draft Academy, I want to do something. And so down here inside of this for loop\nand again, we need to indent this. We can put what we want to do with each letter.\nSo let me just show you guys like basically what this is going to do. So I can print\nout a letter so I can print out this letter variable. And it's actually going to\nprint out a different letter inside of this draft Academy string on every\nsingle iteration of this loop. So I'm going to run this program. And down here\ninside of my console, you'll see that I'm basically printing out draft Academy.\nSo on the first iteration of the loop, I printed out the first letter in draft\nAcademy, which was G. On the second iteration of the loop, I printed out I\nsaid, third was R, fourth was A. So I'm essentially just looping through all of\nthe letters inside of draft Academy. So I'm saying for each letter in draft\nAcademy, I want to print out that letter. And so this is kind of like how four\nloops can be used. We can define a variable. And that variable will change on each\niteration of the loop, right? So on the first iteration of the loop, this letter\nvariable represented a G. On the second iteration of the loop, the letter\nvariable stored at the value I, etc. Right. So we went through this entire string,\nand we were able to print out each letter. So in addition to using this with\nstrings, we can also use this with other collections, for example, like an\narray. So if I created an array up here, let's just call it friends, I'm going to\nset this equal to a bunch of different values. So we can put like a list of our\nfriends in here, we can say like Jim, Karen, and Kevin, instead of saying the\nletter, why don't we call this friend? And I can say for friend in friends. And now\nwe'll print out the friend. So over here, I'm saying for each friend inside of\nthis friends array, I want to print out the friend. So now we'll actually be able\nto print out each element inside of that array. So down here, you'll see we're\nprinting out Jim, and then on the second iteration, we're printing out Karen,\nand on the third, we're printing out Kevin. So I'm able to loop through all of the\nvalues inside of the array. And just so you guys know, like, you can name this\nvariable, whatever you want. So I could name, I could give this like any random\nname. And if I want to access it, though, I have to access it using that same name.\nSo we can loop through something like an array, we could also just loop through\na series of numbers. So I could say index over here. And again, this can be anything.\nI'm just going to call it index. So we could say for index in range, and then in\nhere, I can pass in a number. So I could pass in like 10, for example. And down here,\nI'm just going to print out the index. When I run this program, you guys will see that\nit's basically going to print out every number in the range from zero to 10,\nnot including 10. So starting with zero, it's going to print out zero, one, two,\nthree, four, five, six, seven, eight, nine. But notice that it didn't print out 10.\nSo it's essentially just printing out all the numbers between zero and 10,\nnot including 10. You can also specify a range of numbers. So I could say, for\nexample, like three and 10. And now this will print out all the numbers between\nthree and 10, not including 10. So we're on this program. And you can see we print\nout three, four, five, six, seven, eight, nine, and not 10. So whatever value that\nyou put here in this second position is not going to get included in the range.\nAnd ranges can be really useful. So for example, I could use a range to loop\nthrough an array, just like we did before. So if I wanted, I could say something\nlike four index in range. And now inside of this range, I can pass in the length\nof the array. So just so you guys know, if I wanted to get the length of this\narray, in other words, if I wanted to figure out how many elements were inside\nof it, I could just type out LEN and then inside parentheses, the name of the\narray. And so this is going to spit out three, because there's three elements\ninside of here, right? Kind of makes sense. So what I can do is I can say down here\ninside of this range function, I can just type in LEN and then friends. And so what\nthis is going to do is it's going to essentially give me a range between zero\nand the number of friends inside of this list. So down here, I could actually type\nout friends index. And this will allow me to access each individual friend inside\nof this list, just like we did before. But now I'm doing it with a range. So you\ncan see I'm typing out Jim, Karen and Kevin. So actually, for each iteration\nthrough this loop, it's basically going to be printing out friends zero, friends one,\nand then friends two, because in here, we're passing in a three. And remember,\nwhenever I pass in there, it's going to range from zero all the way up to that\nnumber, but not including that number. So that's another way that we could print\nout all the elements in the array. And looping through something like an array\nis actually a very, very common use case for for loops. But like I said, we can\nuse for loops to loop through essentially any collection that we have. So we could\nloop through like a string, we could also loop through, you know, something like an\narray. So this can be really useful. And that's one of the basics of for loops in\nPython. And I also want to show you guys one more example, just while we're here.\nSo why don't we go ahead and print out a range up to five, right? So this will just\nbe a simple program. You can use all sorts of logic inside of these for loops. So\nlet's say that I wanted to do something special on the first iteration of the\nloop. So I could say, if index is equal to zero. And if the index is zero, then we\nknow it's the first iteration of the loop. So I could do something special, I could\nlike print out first iteration. And then otherwise, we could just print like not\nfirst. So this would be an example of like, maybe you want to do something on the\nfirst iteration of the loop and do something else on subsequent iteration. So if I play\nthis, you'll see only on the first iteration is it printing this out. And\notherwise, it's printing out other stuff. So, you know, don't be afraid to put some\ncomplex logic inside of these for loops, because it can really make your program\nis more powerful. In this tutorial, I'm going to show you guys how to build an\nexponent function. Now an exponent function is basically going to allow us to take a\ncertain number and raise it to a specific power. So in Python, there's actually a\nreally easy way to do this. I can come down here and I can print, we can say like\ntwo, and we can just do two multiplication signs. And I can say three. And this is\nbasically just going to be two raised to the third power. So you can see here, I can\njust print this out and we get eight, because that's too cute. So it's really\neasy to do exponents in Python. But I want to show you guys how we can use\nsomething like a for loop in order to create a function like this of our own.\nSo we'll actually create an exponent function that will basically do this and\nwe'll use for loops to do it. So let's create a function. So I'm just going to say\ndef. And now we need to give this function a name. So why don't we call it\nraise to power. And inside of here, I'm going to accept two parameters. The first\nparameter is going to be the base number. And then the second parameter is going to\nbe the power number. So we're going to take the base number and raise it to the\npower number. So over here, we can just make a colon. Now, inside of this function,\nwe need to start writing some code. Here's the thing. Inside the function, we don't\nnecessarily know the value of this pound. Right. For example, if we knew that we\nwere just trying to like square this number or cube this number, I could just\nreturn like base num times base num, right? That would square the number or I could\ncube the number base num. So right. So this would be like the number cubed. The\nproblem is though, we don't know like right off the bat what this value is going to\nbe. Right. This could change like the user can decide that. So in order to write this\nfunction, we're actually going to need to use a for loop. And I'm going to show you\nguys how we can use a for loop to basically figure this out. So the first thing I\nwant to do is create a variable. And I'm just going to call it result. And we're\njust going to set result equal to one. So we're going to start this off at one. Now\nI want to create a for loop. So I'm basically just going to say four. And over here,\nI basically want to specify like a index. So I'm going to say index in, and now I\nwant to specify a range and a range will basically range us through a collection\nof numbers. So basically, I want to multiply the base num by itself as many\ntimes as the power num specifies. Right. So over here, I can just make this a range\nof power num. Right. And so we'll basically loop through this for loop as many times\nas pound them. So if pound them is two, we'll loop through it twice. If pound them\nis four, we'll loop through it four times. And every time through the loop will\nmultiply base num by itself. Or actually, you'll see we're going to multiply it by\nthis result. So down here inside of this for loop, I can basically say result is\nequal to result times base num. This should actually give us everything we need to\ntake this number to the specific power. So the actual like result, you know, of\ndoing the math is going to get stored inside of this result variable. So the\nfirst time through the loop, we're just multiplying base num by one. Right. And\nso now result is going to become the same value as base num. The second time\nthrough the loop. So this would be if we were squaring the number, we're basically\nmultiplying result by base num again. So it's essentially just base num times\nbase num. The third time through the loop, we're multiplying result times base num.\nSo we're essentially just like cubing the number. So that's essentially what this\nfor loop is doing for us. So the last thing I want to do is right here below\nthis for loop, I'm just going to return the result. So we'll be able to return\nwhatever the result of raising the number to the power was. All right. So let's\ncome down after this function. And we're just going to call it. So I'm just going\nto say, actually, we'll print out the answer. So I'm going to say raise to power.\nAnd inside of these parentheses, remember, we can pass two numbers. So let's\nraise three to the second power. So we're just going to square three. And we'll see\nhow this works. So throw on the program. And you can see down here in the console\nwe're getting nine. Let's try something a little bit crazier. Let's try three to\nthe fourth power. And we'll run this and get 81. So that's three to the fourth\npower. Let's try two to the third power. And we're getting eight. Yeah, so that makes\nsense. So our raise the power function is working just as expected. And I'll just\nwalk you guys through it one more time. So inside of this function, we're taking\nin two pieces of input, we're taking in a base number, and we're taking in a\npower number. So that's like, the base number is going to be taken to the power\nnumber. I'm defining a variable here called result. And result is where we're going\nto store the actual result of doing the math. Now we specify this for loop. And\nI'm basically saying that I want to loop through this range of numbers. When I put\npound on here, it's basically going to range from zero all the way up to but not\nincluding the power number. So we'll basically loop through power number of\ntimes, if that makes sense. And then every time through the loop, we're just\nmultiplying result by base num. And then we're just returning results. So that's\nthe basics of building a power function. And obviously, like if you're just trying\nto take a number to a power and Python, it's really easy. But this kind of shows you\nlike the internal workings, right? For a function like that to work, we would have\nto actually type something out just like this. And this tutorial, I want to talk\nto you guys about two different concepts in Python. It's going to be a pretty cool\nlesson. First thing I want to show you guys though, are two dimensional lists. So\ndown here in our Python file, I just want to create a basic list. So I'm just going\nto call this number grid. And I'm just going to set this equal to a normal list\nright just like this. Now normally if we were creating a list, I could just put in a\nbunch of attributes and bunch of elements, right? And now all of these elements are\ninside of this number grid list. Everybody's happy. But another thing I can do is I\ncan make all of the elements inside of this number grid list lists. So the first item\nin the number grid list is going to be a list. The second item in the number grid\nlist is going to be a list, etc. So I'm going to show you guys how to do that. I\ncan basically just come down here and where I would normally put the first element\nin the list, I can just create another array. So I'm just going to make an open\nand closed square bracket. And now I'm just going to say 123. And I can create the\nnext item in my list. I can say 456. And let's make another item in this list. I\ncan say 789. And finally, we're going to put one more list inside of the number\ngrid list. And it's just going to have zero in it. So inside of this number\ngrid list, right, this high level overall list, we have four elements. And all of\nthose elements are themselves lists. So essentially what we're doing is we're\ncreating a grid, right? This grid has 1234 rows, and 123 columns, right, four\nrows, three columns. And that's kind of like why these can be useful is we can\ncreate a grid like structure inside of Python using two dimensional lists. So\nthis is a pretty cool list structure. And I want to show you guys how we can\naccess individual elements inside of this list structure. So, for example,\nlet's say I wanted to print out one of these values. Let's say I wanted to print\nout this one right here. The way I can access it is by saying number grid. And\nthe first thing I want to do is make an open and close square brackets. And in\nhere, I want to put the index of the row that I want to access. So this would be\nlike row zero, because that's the zero element in the array. This would be row one.\nIt's at index position one. This would be row two, row three, etc. So I could put\nrow zero. And now right next to this, I'm going to make another square bracket.\nAnd I want to put the index of the column. So this would be like column one, column\ntwo, column three. So I'm going to put another zero, because this is at the\nzero index of this first array. So I just put zero zero here. Now we can\nprint this guy out to the screen. And you'll see down here that we get that one. So I\ncould also do this for like for this eight, for example. So this is going to be zero\none two. It's going to be row two and column one. And now we should be able to\nprint out that eight. So that's basically how we can access elements inside of this\n2D list. The next thing I want to show you guys is a nested for loop. And a nested\nfor loop is a situation, like I said, where we have a for loop inside of a for loop.\nAnd I'll show you how we can use this nested for loop in order to print out all\nthe elements inside of this array. So I basically show you guys how to parse\nthrough a two dimensional list or a two dimensional array. Alright, so basically\nwe're just going to create a normal for loop. So I'm going to say four, and I'm just\ngoing to say row in number grid. And I'm using the word row here because I'm kind\nof seeing these guys as rows, right? These are sort of horizontal rows in our little\ngrid. So for each of those rows, for each of the elements inside of number grid, I\nwant to loop through. So I could actually just print out each row right now. And it's\njust going to print out all the rows inside of this list. You can see down here,\nwe basically just get exactly what we have up there. But I want to be able to\naccess each of these individual attributes inside of each of these array elements.\nSo we can actually create another for loop. And I'm going to put that for loop inside\nof here. So now I'm going to say for column in row. And basically what this is going\nto give us is each individual column or each individual element inside of these\narrays. So for example, inside of the arrays that are the elements of the number grid.\nHopefully that makes sense. So down here, now I can just print out column, and this\nshould actually print out every single value inside of this two dimensional array.\nSo let's go ahead and run this program. And down here, you'll see that we're\nbasically printing out one all the way down to zero. So we're printing out all\nof the elements inside of all of the arrays inside of the number grid. So that's\nhow we can use two dimensional lists and nested four loops together. And both of\nthose things are actually pretty handy in Python. In this tutorial, I'm going to show\nyou how to build a basic translator in Python. So essentially, we can take in a\nstring so we can take in like a phrase or a word, and we'll be able to translate it\ninto a different language. So over here, I have this little file, and it basically\nspecifies this language that I made up. So I'm calling it the draft language.\nAnd in the draft language, all vowels become G. So if I was going to translate an\nEnglish word into a draft word, for example, the word dog, I would look through the\nword dog in any instances where there was a vowel. So in our case, let's just say\nA E I O U, I would convert that vowel into a G. So dog would map to D G G, cat would\nget mapped into C G T. So those are the basic translation rules. Obviously, this is\na pretty simple language, but you get the point any vowel is going to become a G,\nand then we'll get the draft language. So we're going to build a draft translator.\nOver here in our Python file, let's start making this translator. The first thing\nI'm going to do is just define a translate function. So I'm going to make a function\nhere, and I'm just going to call it translate. And inside of these parentheses,\nwe want this to take one piece of information, which is going to be the phrase\nthat we want to translate. So I'm just going to say phrase. And now inside of this\nfunction, we need to figure out like, okay, how can we translate English into our\ndraft language? Well, remember, the rules is basically just any vowels become G's.\nSo the first thing I want to do is create a variable. And this variable is going to\nbe the translation. So this will be like the final result that we're going to return\nto the user. So I can say translation. For now, I'm just going to set it equal to\nthe empty string. So this is just going to be like a completely empty string. It's not\ngoing to be doing anything. And now what we want to do is we basically want to\nloop through every letter inside of this phrase. And if it's a vowel, we want to\nchange it to G. And if it's not a vowel, we want to leave it alone. And we're\nessentially going to be looping through phrase. And we're going to be adding the\nletters onto this translation one by one. So let me show you guys how we can do this.\nI'm going to make a for loop. So I'm going to say four. And I'm just going to say\nletter in phrase. And so now, when I loop through here, I can access each\nindividual letter inside of the phrase that they passed in. So what I want to\ndo is I want to check to see if the letter is a vowel or not, right? If it's a\nvowel, then we can add a G onto translation. If it's not a vowel, then we can just add\non whatever letter it was onto translation anyway. So I'm going to use this if\nstatement. I'm going to say if. And there's actually this special thing we can do in\nPython, we can check to see if something is in something else. So I can say if\nletter in, and over here, I'm just going to type out all the vowels. So we'll say\nA E I O U and A E I O U. So I'm basically checking to see if the letter is inside\nof this string. And if the letter is inside of here, then we know that it's a vowel.\nSo down here, we can handle that case. So I can say, translation is equal to\ntranslation plus G. Because if this letter is a vowel, we just want to convert it\ninto a G. Otherwise, though, I can basically just say, translation is equal to\ntranslation plus letter. So in the case where we have a vowel, I'm adding a G onto\ntranslation. In the case where we don't have a vowel, I'm just adding on whatever\nletter it was onto translation. So finally, down below this for loop, we just want\nto return the translation. So I'm just going to say return translation. And now we\nhave a awesome translate function, and it should probably work. So let's come down\nhere and we'll test it out. So why don't we allow a user to input some\ninformation. So I'm basically going to call this function. Actually, we're going to\nprint it out. So we'll print this out. And I'm going to call this function\ntranslate. And inside of here, I'm actually just going to pass whatever the user\ninputs. So I can just say input. And inside of these parentheses, I can say the\nprompt. So enter a phrase. And so now I'm basically combining all these statements\ntogether. I'm saying I want to print out the translation of whatever the user\nenters in. So let's go ahead and run this program, and we'll see how we do. So I'm\ngoing to run the program. It says enter a phrase. Actually, let me format this a\nlittle bit better. Okay. All right. So it says enter a\nphrase. So let's go ahead and do that. So let's just type in the example we used\nbefore. I'm going to say dog. And so now out pops the answer, which is d g g. So\nthat's kind of cool. And we can just keep running this as many times as we want.\nSo I could type in like to be or not to be. So this is like a little bit longer of\na string. And you can see it translates it into our draft language. So that's\nbasically how we can create our little translator app. And that's pretty cool.\nAnd so you can see we're using a for loop in combination with an if loop. And\nthat's a really powerful structure. And actually, there's one place over here\nwhere we can make this a little bit more efficient. So instead of saying if letter\nin this string, you'll notice here, I'm checking to see if it's in all the lower\ncase and the uppercase. I could actually just say if letter dot lower in. And now\nI only have to type out the lower case letters. And it's still going to do the\nsame exact thing. So that's a little like hack or whatever that we could use. And\nthere's also one more problem with this program. So you'll notice down here,\nwe're setting the translation equal to the translation plus g. But the problem is\nif I was to start my word inside of the phrase with a capital vowel. So in other\nwords, if I said like on, you'll notice that when this gets printed out, it gets\nprinted out as lowercase g and so it's not keeping our uppercase syntax. And that's\nkind of a problem. So we can actually use another if statement in here. And we\ncan check to see if letter dot is upper. And if the letter is uppercase, then we\ncan just set the translation equal to the translation plus a capital G. Otherwise,\nwe can just set it equal to the lowercase g. And so now we're able to control both\nof those situations. So let's just test this and see if it works. Enter a phrase,\nsay on. And now we're keeping that capital letter. So those are just a couple\ndifferent ways that we could make this program a little bit better. But the\nbasic concept is we have a for loop and then we have some if loops inside of it.\nAnd we're calling this awesome function that can translate a word for us.\nIn this tutorial, I want to talk to you guys about comments in Python. This is\ngoing to be a pretty short tutorial. I just want to give you guys an overview of\nwhat comments are and how we can use them in our Python programs. So over here in\nmy Python program, I just have this line here. It says print comments are fun. So\nif I run my program down here inside of the console, it's going to print out\nthat comments are fun, right? So any code that I put over here is going to get\nexecuted by Python. But there's actually a special line of code that we can write\nand it's called a comment. And a comment is basically a line inside of our Python\nfile that's just not going to get rendered by Python. So when Python sees it,\nit's just going to ignore it. It's not going to execute it. It's not going to\nprint anything out. It's just going to kind of ignore it. And comments are\ngoing to be just used for us humans. So a comment is used for like me or another\ndeveloper to write a little comment, a little like plain text, you know, comment\ninside of a file. In order to create a comment, I could use this hashtag symbol.\nSo I can click hashtag and now I am writing a comment. So I can write whatever I\nwanted in here. I could say like this program is cool. And you'll notice when I\nput on the program, that doesn't show up anywhere, right? It doesn't matter what\nI put after this hashtag. This is just like ignored by Python. It's just for me\nor another developer to come in here and use. So a lot of times if you want to\nwrite like a little note inside of your Python files, or maybe you can write\nyourself a little reminder, or if you want to write a line to like explain a line of\ncode. So for example, I could write a comment that would explain this print\nstatement. So I could say like this prints out a string, right? Now anybody looking\nat my file would be able to read this and they'd be like, Oh, that's what this\ndoes. Okay, cool. So comments are useful for leaving little comments in a Python\nfile. If you want to make comments on multiple lines, you can just create a new\nline and use another hashtag. And so then I could type out whatever my next comment\nwas. And generally, if you're going to put comments on multiple lines, you want to\njust use multiple hashtags. But there's actually another way that you can write\nout comments. So you can use a triple quotation mark. So I'm typing out the\nsingle quote. And I'm typing it out three times. So you can see here up here, we\nhave this three times, we have this three times. So in here, I can, you know,\nwrite any comment that I wanted. So I could put, you know, as much text up here as I\nwould want. And same thing, when I run this program, it's just not going to get\nrendered. So this is another way to make multiple line comments. But the, like,\nofficial Python, like style guides or whatever, just recommends that if you're\ngoing to put comments on multiple lines, you use these hashtags. So, you know,\nyou can really do whatever you want. But if you want to be like super Python\nofficial, then use these hashtags. Comments can also be useful for doing something\ncalled commenting out a line of code. A lot of times when you're writing a\nprogram, you might have a line of code in there that is maybe like potentially\nmessing stuff up. And so what you can do is you can actually comment out that\nline of code. So I could put a comment in front of this line of code. And now when\nI run my program, the program is going to run, but it's not going to use this line.\nSo sometimes if you're trying to see if like a line of code is causing you trouble\nor if you want to see what your program would be like without a line of code, or\neven like a block of code, you can just comment it out. And that way you're not\nactually deleting the code from your file. You're just commenting it out. So Python\nis going to ignore it. And those are really the two uses for comments is to write\nlittle notes, write little comments about different things or to comment out code.\nAnd as you go forward in Python, I'm sure you'll find uses for comments.\nIn this tutorial, I want to talk to you guys about catching errors in Python.\nNow, a lot of times when we're running Python programs, you'll encounter different\nerrors. So different situations could come up and your program might throw an error\nor it might throw an exception. And a lot of times when these situations happen,\nthey'll completely stop your program from running. And what we can actually do is\nwe can watch out for, you know, certain specific errors that are going to pop up\nin our program and we can actually handle them. So instead of our program just\nbreaking and stop executing, we can actually handle those errors and do things\nwhen they occur. So I want to show you guys an example of using this down here.\nI'm saying number is equal to int input enter a number. Basically what's happening\nis I'm prompting the user to enter in a number using this input command. And then\nI'm converting whatever they entered into an integer. So as long as they enter in\nlike a valid integer, I can convert it into an integer. So I can convert it into\nlike a whole number and I can store it inside of this number variable that I'm\njust printing it out. So let's try to execute this program. I'm going to run\nthe program and you'll see down here it says enter a number. So we can enter in\nlike four, for example. And when I enter in four, everything's going to work and\nit's just going to print out four and everything is right in the world. And\nactually, I'm going to modify this up here. So it's a little easier to see. But\nlet's say we run the program again. So it says, okay, enter your number. Let's say\nthat I break the rules and I don't enter a number. So I just ignore what the\nprompt says and I put, you know, some random text in here. Now when I enter this,\nthe program is going to throw an error. You can see down here, it says value error\ninvalid literal for int base with base 10. Basically, hey, you didn't enter in an\ninteger like you said you would, right? We told them to enter in a number. They\nentered in text. So it broke the program. And this is a situation that happens a\nlot. So there's a lot of different situations where something can just go\nwrong in our program. And I'm until now we've just kind of accepted it as a\nreality. But if you're writing a real live Python program, you don't want something\nlike this to trip up your program. You don't want the entire program to break when\nsomebody just forgets to enter in a number, right? You want to be able to handle\nall these different situations. And in order to handle them, we can use something\ncalled a try except block. And a try except block will basically allow your\nprogram to try out a piece of code. And if everything goes well, then we're great.\nLike we could try out entering in the number. And if the user enters in the\ncorrect number, great. But if they don't enter in the correct number, then we can\nbasically like account for that. So they entered in something like a string when\nthey're supposed to enter in a number, we could tell them like, Hey, you entered\nin the wrong thing. So I'm going to show you guys how we can use these try except\nblocks. I'm going to come up here, and I'm just going to say try. I'm going to make\nit colon. And I want to indent both of these things. So both of these things are\ngoing to be inside of this try block. Now I'm going to make a new line. I'm going\nto come down here and I'm just going to type out. Except, and I'm also going to\nput a colon here. And down here, I'm just going to print something out. So I'll just\nsay like invalid input. So now, since I put this code inside of this try block,\nif the user enters in something wrong, it's going to be able to catch it. So it'll\nbe able to catch what the user does wrong and print out invalid input onto the\nscreen. So let's go ahead and run our program. And it's just going to say enter\na number. So we're going to ignore that. We'll enter this in. And now instead of\nyelling at us and breaking the program, it just says, Hey, invalid input. So it was\nable to handle the error they got called. It was able to handle the invalid input\nerror. Basically just told us, Hey, no more input. So this is a really powerful\nthing that we can do in our Python programs. Basically just to protect our\nprograms, right? If I want to have my program running for long period of time,\nI can't have something as simple as an invalid input, trip it up. So I can\ncatch that invalid input using these try accept blocks. But here's the thing.\nYou'll notice that this little guy down here is getting highlighted. And let's\njust see what it has to say. So it's basically saying to broad exception clause.\nAnd this is a message that we're getting because when I just say accept, this\nwill catch any error under the sun. So anything that can go wrong on my program\nfor the most part, this is going to accept it. So let me give you guys an\nexample. Let's say I had in my program, I was creating a variable, right? So I\nwanted to create a variable called value. And I set it equal to 10 divided by\nzero. Now, if you know anything about math, you'll know that you can't divide a\nnumber by zero. It's not possible. So the program isn't going to be able to\nhandle this. And you'll see that this is going to throw an error for us. So when I\nrun the program, it basically says zero division error division by zero. We're\nnot allowed to do that, right? If I took this and I put this down inside of this\ndry block, and I just pasted it in here, it's going to get caught by this\nexception that we wrote down here. So it's going to get caught by that\naccept. So when I run the program, you'll see it says invalid input. But the\nproblem is that we didn't input something that was invalid, right? We just divided\nby zero, but it wasn't able to handle that. Right. So it could not divide by zero\nit through an error. So even though we didn't get an invalid input, even though\nit was because we divided by zero, it's still printed this out. And this brings\nme up to another point is we can actually catch, or we can accept specific\ntypes of errors. So for example, in this case, we got a division by zero error. In\nthis case, we got an invalid input error, right? We put something in that was wrong.\nYou couldn't convert the value. So I can create two different accept blocks to\ncatch two different types of errors. So down here, I can just make a space and I\ncan specify the type of error that I want to catch. So when we divided by zero, it\nwas zero division error. So if I just put zero division error in here, now it's\ngoing to catch that zero division error. So I can say divided by zero. I could\nalso make another accept. So I could say accept. And we can catch the other\nexception that we got. So I think it was a value error, right? It was, we put in\nthe type of value inside of that input. So now we can print out invalid input. So\nwith these two accept blocks, we're basically able to handle both of these\nsituations. So for example, if this ends up breaking the program, this division by\nzero, then it'll be able to catch that. So down here, it'll tell us, Hey, you\ndivided by zero. But if I was to get rid of this line of code, and I just entered\nin the number wrong. So I came down here and I entered in a string instead of a\nnumber. Now it's going to tell us invalid input. So we're going to be able to\nspecify what happens when certain things break. So when we get a valid, when we\nget a value error, we can say invalid input, when we get a zero division error, we\ncan say divided by zero. So depending on what breaks, depending on what happens,\nwe can actually do different things. And I want to show you guys one more thing\nwe can do, which is we can actually store this error as a variable. So I can say\naccept, I can say as, and I can type in a name here. So a lot of times people will\njust say like, e r r. And down here, I can print out the actual error. So I can just\nprint e r r. And so if we end up dividing by zero. So if I say answers equal to\n10 divided by zero, we're going to throw this error, and it's going to print out\nwhat went wrong. So now I can run this program. And it just says division by zero.\nSo it just printed out the error that we got. So that's another useful thing you\ncan do is you can actually like print out the specific error that got thrown. Now,\na best practice in Python is to use these specific errors. So you always want to\naccept and accept for a specific error. What you don't want to do is just say\naccept, and then just accept anything under the sun. It's just too broad. And it's\nnot a good practice in Python. So you always want to be catching specific errors like\nthis. In this tutorial, I want to talk to you guys about reading from external\nfiles in Python. Now a lot of times in Python, you're going to want to read from\nfiles that are outside of your Python file. So you might want to read information\nfrom like a text file or a CSV file or like an HTML file. And you can actually use\nsomething called the Python read command. And it will allow you to read a file that\nis stored outside of your Python file. So you can use these files to get information\nor you can parse through different files and do different things. So I'm going to\nshow you guys the basics of reading files, opening files, closing files, doing all\nthat stuff. Over here, I have this file called employees dot text. And it basically\njust lists out a bunch of different employees, like these could be employees in\nan office or whatever. So it's just listing out all of this information. So let's say\nthat inside of my app dot Python file, I wanted to read the employees inside of\nthat file. The first thing I have to do is actually open that file from inside\nof Python. So I can use a special command called open. So I can say open. And then\nin here, I can type in the name of the file that I want to open. So this is either\ngoing to be a relative path to the file, an absolute path to the file, or just the\nfiles name if both files are in the same directory. So in my case, app dot Python\nand employees dot text are in the same folder, like they're in the same directory.\nSo I can just type out the name of the file. I can just say employees dot text.\nAnd then I want to put one more thing inside of this open function. And it's\ngoing to be the mode that I want to open the file in. So you can actually open\nfiles in a couple of different modes. And the first mode is called read. So I can\njust put an R here and that's going to stand for read. And this basically means\nthat I only want to read the information inside the file. I don't want to modify\nit. I don't want to change it. I just want to read it. I just want to see what's in\nthe file and do some stuff with that information. Another mode is called\nwrite. So I can type in this w and writing basically means that you can change the\nfile, right? You can write new information. You can change existing information.\nThere's another one called a and a stands for append. And this basically means\nthat you can append information onto the end of the file. So you can't modify\nany of the information in the file. You can't change any of the information, but\nyou can add new information. And there's one more, which is R plus. And this\nbasically means read and write. So this will give you all the power of reading\nand writing. So in our case, we're just going to be working with regular R. So\nwe're going to be reading from the file. Now this open function will essentially\njust open the file. So it's going to like go over to that file inside of our file\nsystem, open it up, and it'll allow us to read through it. But generally, we're\ngoing to want to store this opened file inside of a variable. So I can create a\nvariable and we can just call it employee file. And I'm just going to set it equal\nto this open function. So now the open employees dot text file and all the\ncontent inside of it is stored inside of this employee file variable. Now, whenever\nyou open a file, you always want to make sure that you close the file as well. So\njust like we have this open command, we also have an close function. So I can come\ndown here and say employee file dot closed. And this is essentially just going to\nclose the file. So we're no longer going to be able to access it. And generally,\nit's a good idea whenever you're opening up a file, you want to also make sure that\nyou're closing the file at some point. So generally, once you're done reading it,\nyou can just close it. So that's kind of like how we can open and close a file.\nNow, let's talk about how we can get information from the file, right? There's no\npoint in having the file that we can't figure out what's in it. So there's actually\na few different functions that we can use on this employee file to figure out what's\ninside of it. And I'm going to show you guys some of those. So I'm just going to\nmake a print statement. And inside this print statement will basically just print out\nsome information about the employee file. So the most basic thing we can print out\nis just the entire contents of the file. But before I do that, I want to show you\nguys how you can check to make sure that a file is readable. So before we do anything\nelse, generally, it's a good idea to make sure that it's possible to read this file.\nAnd there's a function inside of Python, we can use called readable. So I'm just\ngoing to type out employee file dot readable. And this is going to return a\nBoolean value. And it's going to tell us whether or not we can read from this file.\nSo I'm going to run my program. And you'll see down here, we get a value of true. And\nthat's because we set the file with a read mode. So it's in read mode, we can read\nfrom it. If I was to put a double you here. So if I put like, right, now readable is\ngoing to be false, because we can no longer read the file, we can only write to the\nfile. So I'm going to change this back to our so we can just read it. So once you\nfigure out whether or not the file can be read from, let's actually read it. So\nthere's another function called employee file dot read. And this is basically just\ngoing to spit out all the information in the files. So when I run the program, it's\njust going to spit out all of this information, right, all the information that\nwas in that file. I can also come down here and we can read an individual line\ninside this file. So I can say employee file dot read line. And what this is going\nto do is it's going to read an individual line inside of this file. So now when I\nrun this program, you'll see it's just reading that first line in the file. And\nthis read line function is actually just reading the first line. And then it's\nbasically like moving a little cursor onto the next line. So if I was to copy this\ncode and then print it again down here, I'm saying employee file dot read line. So\nit's going to read the first line. And then when I say it again, it's going to read\nthe line after that. So this is actually going to end up printing out the first\ntwo lines in the file. So when I run this program, you'll see we print out Jim\nsalesman and Dwight salesman. So if I was to do this multiple times, like I could\ntechnically print out every line inside of this file. And you can see we can do\nthat. And so that can be pretty useful for reading multiple lines in a file. But\nthere's actually another function that is better at doing that. And we can say\ninstead of employee file dot read line, we can say dot read lines. And what this is\ngoing to do is it's going to take all of the lines inside of our file and put them\ninside of an array. And so now when I print this out, you'll see we have this\narray down here. It says Jim salesman, that's the first item in the array, Dwight\nsalesman, the second item in the array, it's basically taking each line and putting\nit inside of an array. So if I wanted to access a specific line, I can just\nrefer to it by its index in the array. So if I said one, now this is going to give\nus that Dwight salesman line, because that is at index position one inside of the\narray. You can also use this read lines function with a for loop. So I can come up\nhere and create a for loop. I'm just going to say for, and we'll say employee in\nemployee file. And then for each employee, we just want to print them out. So and\nactually started, we have to put employee file dot read lines up here. And so now this\nwill loop through all of the employees in this employee file that read lines array.\nSo we can actually just print out the individual employee. And now this will print\nout all the employees inside of that file. So it's basically printing out each\nline in the file. And that can be pretty useful. So you can use all of these\ndifferent functions like read, read line, read lines, readable, you know, there's a\nbunch of these different things that we can do to get information from a file. And\nso there's a lot of cases where you're going to want to be able to parse through\ninformation in a file. And this is a awesome way to do it. So just to recap,\nwhenever you want to open a file and read from it, you can just use this open\nfunction, type in the name of the file and then the mode, which in our case is going\nto be our, then you can do all sorts of stuff with it. And you always want to make\nsure that you close it when you're done. That's just good practice. So that's the\nbasics of reading from files. And hopefully you guys can use this in some way, shape\nor form in the future. In this tutorial, I want to talk to you about writing and\nappending to files in Python. So one of the cool things about Python is it allows you\nto work with external files. So I could have like an external text file and I could\nactually like completely read all of the information in it. I could parse through\nit, use that information to do certain things. But in addition to reading a file, I could\nalso write a file. And that's what I want to talk to you guys about today is writing\nnew files and appending onto existing files. Over here, I basically just have some\nwritten out and this essentially just reads information from this employees.text file.\nSo you can see over here, I'm specifying the mode, which is R and that stands for\nread. And then down here, I'm just reading all of the contents of the file and\nspitting it out on the screen. So I'm going to click the play button over here and\nyou'll see that this executes. So it's printing out all of the lines of code in\nour text file. So over here, I'm in this employees.text file and it just has all\nthis information, like employees in an office. But let's say that I wanted to\nadd another employee onto here, right? Let's say that a new employee joined our\ncompany. So we wanted to add them onto this list. Well, I can come over here to\nmy app.python file. And instead of reading from the file, I want to append to the\nfile. So I want to say a and appending to the file basically means that you're\nadding some text at the end of the file. So wherever the file ends, you're just\ngoing to add some text onto there. So what we can do is we can actually add\nanother employee into the file. So instead of printing something out, I'm\nactually just going to say employee file dot right. And when I say employee file\ndot right, I'm going to be able to write something to the end of the file. So I\ncan basically just write whatever I want. So why don't we add in another employee\ninto our employees dot text file. So we can add in another employee. Why don't we\nsay like Toby, and he's going to be in human resources. So now, when I run this\nprogram, it's going to add Toby human resources onto the end of the file. So I'm\ngoing to run my program. And you'll see that nothing shows up down here in the\nconsole. But if I go over to my employees dot text file, all of a sudden we have a\nnew entry over here, it's Toby from human resources, right? So I was able to\nappend a line onto the end of this file. But here's the thing, you need to be\ncareful when you're writing to files, because you can actually mess up a file\nvery easily. For example, I already added Toby here into my file. But if I was to\nrun this program again, you'll see that over here in this employees dot text\nfile, it went ahead and added Toby again, right? So it added this employee here\nagain. And also, you'll notice that in this case, this employee didn't go on to\nthe next line. I accidentally ran my file again, and all of a sudden it messed up\nthis file over here. And so appending, you really need to be careful because if you\nactually run your file again, or if you, you know, append something on something\nwrong to the file, it's permanent, like it's getting saved inside of the file. So\nI want to talk to you guys a little bit more about, you know, appending. Another\nthing we could do, let's say we wanted to add another employee. And you'll notice\nover here in this employees dot text file. When I appended it on again, it got\nappended to the end of the existing line, right? So the first time I had a new\nline there, but if you don't have a new line at the end of your file, and you all\nand you want to add a new line, you're going to have to add some special\ncharacters. So let's add another employee, and we'll call her Kelly, and let's just\nsay Kelly is in customer service. So Kelly is going to be in customer service.\nAnd if I want to add this employee onto the end of the file in a new line, I'm\ngoing to have to put a new line character in front of it. So I can say backslash n,\nand this will append this entry into the file with a new line. So on a new line.\nSo now when I run this, you'll see we get Kelly from customer service on her own\nline. So you want to make sure that you're aware of like these special\ncharacters that you can use, they call them escape characters. And you know,\nanytime you're adding onto a file, you want to make sure that you're adding on\nexactly where you want to add on. So in addition to appending to a file, I could\nalso just like overwrite a file or I could write an entirely new file. So since we\nalready have this open, instead of appending to the file, why don't we just\nwrite a file? So I'm going to use this W. And now if I say employee file dot right,\nbecause I'm using W and I'm not using a, it's actually going to override the\nentire file. And it's only going to put this inside the file. So when I run this,\nand we go over to this employees dot text file, you'll see we only have one line\ninside of this file. Now it's just Kelly customer service. That's because I was\nusing W not a when you use W, it's just overriding everything that's in that\nexisting file. You can also use W to create a new file. So over here, I could say\nemployee file is equal to employees one dot text. And now what's going to happen\nis when I run this, it's going to create another file for me. So I'm going to run\nthis. And you'll see over here in my file browser, we have this new file\nemployees one dot text. So if I open this up, it has exactly the same stuff as in\nthis employees file. But it basically created a new file for us. And so a lot of\ntimes you're going to want to create a new file. And you can use different\nextensions too. So if I wanted to create like a web page, I could say index dot\nHTML. And I could also add in some HTML code in here. So if you don't understand\nHTML, don't worry about it. But if you do, I could put like a paragraph in here,\nanother paragraph, like this is HTML, basically HTML is like a web page. And\nthe point I'm trying to make is that you could write out a web page inside of Python\nby doing something like this. So now when I play this, we get this index dot HTML\nfile. And it has some HTML inside of it. So that's one way that writing to files\ncan be really useful. You can overwrite an existing file, you can write a new\nfile and create it, or you can append onto the end of a file. And there's tons of\napplications for writing to files and Python's a great language for working with\nreading, writing, and doing all that stuff with files. In this tutorial, I want to\ntalk to you guys about using modules in Python. Now, a module is essentially just\na Python file that we can import into our current Python file. So for example, if I\nwrote a Python file that had a bunch of like useful functions or useful variables\nor, you know, other things like that, I could take that file, I could import it\ninto the file I'm currently working on, and I could actually access all of those\nfunctions, all of those variables, all the stuff from that external file inside the\nfile that I'm currently working on. So I'm going to show you guys how we can use\nmodules, and then we'll talk about like, you know, where you can find awesome\nmodules and really why modules make Python an awesome language. So over here in my\ntext editor, I actually created this file and it's called useful tools dot Python.\nAnd basically this file just has a bunch of sort of like useful tools that I might\nwant to use in one of my programs. So you'll see over here, I have some\nvariables. This one is telling me how many feet are in a mile. This one's telling me\nhow many meters are in a kilometer. And then we have this list here, which lists\nout all of the members of the Beatles. I also have a couple different functions\ndown here. So I have this get file extension function. And this basically just will,\nyou know, you give it a file name, it'll tell you what the extension is. And then we\nhave this other function down here, which simulates rolling a dice. So you pass\nit a number. If I pass it like a six, it would roll a six sided dice. If I pass\nit a nine, it roll a nine sided dice, etc. So this is like a Python file that I\nwrote. And it has some useful stuff in it. And honestly, there's a lot of stuff\nin here that I might want to use in the other Python files that I work with. So\nlet's say I'm over here at this app dot Python file. And I'm thinking to myself,\nhuh, I think I could use one of those functions that was inside of that useful\ntools file. Actually, yeah, I need to simulate rolling a dice in my program.\nWell, instead of having to go over here, copy this function and then paste it\nover here into my program, I can actually just import this useful tools file. And\nI'll be able to import all of these functions and all of these variables\nand attributes. So the way I can do that is just by coming up here. And I'm just\ngoing to go right at the top of my file. And I'm just going to say import. And\nthen I want to type in the name of the file that I want to import. So I'm just\ngoing to say useful underscore tools. And Python is going to be smart enough to\nknow that it should go off and grab all the stuff from this useful tools dot\npi file. So once I've used that import statement, I can actually use all of\nthe functions inside of that useful tools file. So for example, I could simulate\nrolling a dice, I could say useful tools dot. And now I'm actually able to access\nall of the attributes from inside that file. So when I say useful tools dot,\nyou'll see down here in my little suggestions menu, it's telling me like\nBeatles feet and miles, get file extension meters and kilometers roll dice. So it's\ngiving the access to all of the stuff that was in that file. So over here, I could\njust say like roll dice and we can pass this like a 10 will roll a 10 sided\ndice. And now this should actually be able to run that function. So we'll simulate\nrolling a 10 sided dice. You can see we got four. And this is a really core\nconcept in Python, which is importing functionality from external Python files.\nAnd this is like huge in Python. And this is seriously going to change the way that\nyou create your Python files. So you'll notice like I didn't have to copy any\nfunctions or any variables or anything over into this file. And yet I was able to\nuse all the stuff that was inside this useful tools file. So that is huge. And\nhonestly, it's going to save you a lot of time because you can write something\nonce and then you can import it into your other files. So that's really the\nbasics of using modules. I mean, modules are very simple. A module is just any\nexternal Python file that you want to use some stuff inside of it. I want to\nshow you guys a place where you can go to find a huge list of modules. So I'm\ngoing to go over here to my web browser. And I'm on this website. It's actually\nlike the official Python docs. And basically all I did to get here was just type in\nlist of Python modules and Google. And depending on the version of Python you're\nusing, you're going to want to make sure that you click the right one. I clicked\non the version 31. And over here on this page, you can see there's just a huge\nlist of Python modules. And these are basically modules inside of Python that\nyou can just access. So essentially, there's like all of this awesome code\nthat's already been written for you. And so there's some sort of functionality\nthat you want to have inside of your Python program. Chances are there's a\nmodule in here that has that functionality. So there's all sorts of stuff you can do.\nI mean, if you just look through this list, like, you'll see a huge collection of\nbasically just, you know, a bunch of either Python variables or Python\nfunctions, just, you know, things that you can use to make your programs better.\nSo here's what I would recommend, like, head over to this page and just sort of\nlook through a lot of these different modules, you know, see what you can see.\nAnd honestly, like, if you click on one of them, it'll bring you to a page that\ntalks about like how to use it. It'll tell you like how to import it and just,\nyou know, some basics about it. And this is sort of like the list that's on the\nofficial Python docs. But here's the other thing. The Python community is huge.\nThere's tons of developers who use Python. And you can actually find a lot of third\nparty modules. So if you just go online and, you know, look up, like, Python\nmodule for doing X or Python module for doing Y, chances are somebody out there\nhas already written a Python module to do what you're trying to do. So if you get\ngood at using modules and you get good at, you know, looking for them and finding\nthem, you can actually save yourself a bunch of time because chances are that\nsomebody's already written a module to do, you know, what you're trying to do or\nlike part of what you're trying to do. So now that we've taken a look at all these\ndifferent Python modules, I want to just kind of dive in a little bit deeper into\nhow we can actually use these things. So you'll notice here, there's a lot of\nfiles, right? There's a lot of different modules that we apparently have access to\nPython. But the question is, where are all these files stored, right? When I was\nover here in my program, for example, I was using this useful tools.py file.\nLike, I knew where that was. I created that file. I was directly involved in\nmaking it. And I just imported over here. It was pretty easy, right? But what about\nall of these files, right? What about all these modules over here? Like, where are\nall of these stored? And there's basically two types of modules here. There's built-in\nmodules, which means they're just built into the Python language. So we kind of\njust automatically have access to them. And there's external modules. And a lot\nof these external modules are just stored in basically the same folder that we\ninstalled Python on our computer. So for example, let's look at a couple of these,\nright? We have, like, base 64, BDB, bin ASCII, like, if I come over here and\nyou'll see, I'm over here in my little file explorer. I have my Python project,\nwhich is draft. There's also this other folder over here called external\nlibraries. If I was to click down on this and I come down here, you can see it's\njust the version of Python that I'm using. There's a folder here called lib.\nAnd this is a very important folder. This is basically storing all of those\nexternal modules. So you can see if I scroll down here, we have all of these\ndifferent, like, modules, right? So here's that base 64. Here's BDB, right? A lot\nof these external modules are stored inside of this lib folder. And like I\nsaid, there's external modules. There's also a few modules that are just like built\nin modules. They're not going to be stored inside of here. And you can actually\ntell. So for example, if I was to come over here and click on base 64, it tells\nme where the source code is. So the source codes in lib forward slash base 64.\nWe were able to see that, right? I was, I saw that inside of my lib folder.\nThis bin ASCII, though, for example, if I click on this, you'll notice that this\nisn't giving me a folder because this is basically just like built into Python.\nSo we don't have to worry about, you know, locating that file. It's just kind of\nlike, it just kind of works. So some of these are external. Some of them are\nbuilt in. And I want to show you guys, in addition to using these modules,\nright? So there's a lot of good stuff here. And honestly, you could spend, you\nknow, years and years just learning about all these different modules. But a lot\nof times you're going to want to use modules that other people have written.\nAnd you know, there's a lot of developers who work on Python and who write different\nmodules. So there's a lot of useful modules out there that aren't included in this\nlist, right? They're not going to be inside of this lib folder by default.\nAnd what we can actually do is we can install those external modules, those\nthird party modules, that don't just come pre installed with Python. And I'm\ngoing to show you guys how to do that really quick. So the first thing you need\nto do, obviously, is find a Python module that you want to install that you want\nto download. And I have actually used one of the past Python docs. It's an\nexternal module that you can use to basically use Python to create Word\ndocuments, which is pretty cool. So you can like format Word documents inside\nof it. So I'm just going to look that up here in Google. I'm just going to type\nin Python docs. And look, here's the thing, there's tons of these external modules.\nYou don't have to use Python docs. I'm just giving you guys an example. But really,\nif you just look up like useful third party Python modules, there's going to be lists\nof these things online. In my case, though, Python docs has a website, and it\nbasically just has like some installation instructions. I'm going to come over here.\nAnd it tells me that I can install Python docs using the command pip install Python\ndocs. So this brings us to something I want to talk to you guys about, which is\npip. And pip is essentially a program. And actually, if you have a newer version\nof Python three, it comes pre installed with Python three. And you can use pip\nto install Python modules. It's referred to as a package manager. And a package\nmanager basically just allows you to like install, manage, update, and uninstall\nlike different Python modules. So pip is extremely useful. And in order for us to\ninstall Python docs, we're going to have to use pip. So I'm going to show you guys\nhow we can do that. What I want to do is open up the command prompt or the\nterminal on my computer. If you're on a Mac, you want to open up your terminal.\nIf you're on a Windows computer, you want to open up your command prompts. I'm\nusing a Windows right now. So I'm just going to come down to the search bar and\ntype in CMD. And this command prompt should come up. So I'm going to click this\ninside of the command prompt, we can actually use pip. The first thing we want to do\nis just check to make sure that pip's installed. And like I said, if you have a\nversion of Python three, pip should come just pre installed. And it should just work\nin here. If you don't have a new version of Python three, though, you might have to\ninstall pip separately. And there's tons of instructions online on how to install\npip. So I'm just going to check to make sure that I have it, I'm going to type in\npip hyphen hyphen version. And this should spit out the version of pip that I\ncurrently have. So as long as we have pip, then we're ready to install an external\nor third party Python module. All I have to do is just say pick install. And now I\njust want to type in the name of the Python module. So in the case of Python\ndocs, it was just Python docs like that. Now again, you don't have to install Python\ndocs. I'm just doing this for this tutorial. Just kind of show you guys how this is\ngoing to work. But you know, what you want to do is go online and look up some third\nparty external Python modules. And generally, like I'd say 90 to 95% of the\ntime, you're going to be able to just install them using pip. In the off case\nthat you can't install them using pip, chances are there'll be like some detailed\ninstallation instructions. But I would say for the most part, any like legitimate\nPython module is going to be able to install using pip. So over here, I'm just\ngoing to say pip install and then the module name. So Python hyphen docs. And\nwhen I click enter, this is going to go off and install Python docs for us. So I'm\njust going to enter. And it's going to go off and install everything we need for\nPython docs. So you can see we successfully installed Python docs 0.8.6. So I'm going\nto show you guys where exactly this got placed. So normally, when we install a\nexternal third party module, it's going to get put inside of this lib folder. But\nit's going to get put inside of a special folder in here called site packages. So\nsite packages is a special folder. And if I open this folder, you'll see now we have\nthis docs folder and we also have this Python docs 0.8.6 pi 3.6.ag info folder.\nSo these two folders are basically included in that module installation. So you can\nsee this docs folder has a bunch of different Python files and has a bunch of\nstuff in here that we can use. So if I wanted to use this inside of one of my\nprograms, I'm just going to refer to the name of the module. So in our case,\nit's just going to be docs. So I used Python docs in order to install it. But we're\ngoing to use docs if we want to import it. So I could come up here and I could say\nimport DOCX. And now I can actually use it. So I can just say like docs,\ndoc, whatever. And you can see there's a bunch of different stuff down here. There's\nlike a document document part image part. There's a bunch of stuff that we can use\nwith this. And obviously, depending on the Python module you install, there's going\nto be different instructions. But you can see it got stored down here in this\nsite packages folder. If I wanted to remove this, I could use PIP to do it. So I could\njust say PIP uninstall. And we could just again say the module name. So Python docs.\nAnd PIP will now uninstall this on our computer. So how is to go back over to\nthis folder? You'll see that those two, that docs folder and then that other\nfolder disappeared. So they're no longer here. And I'm actually not going to be able\nto use this anymore. So that's sort of the ins and outs of using modules. Now again,\nthere's tons of these modules and I can make dozens and dozens of Python courses\ncovering each one of these modules. The built-in modules, the modules that are\nincluded by default and external modules, there's tons of these things out there.\nAnd really, as a Python programmer now, what you can do is you can go out and play\naround with these different modules. I showed you the ins and outs of installing\nthem and you can use PIP to install all these different modules. And you can make\nsure that you have them by checking the site packages folder or the libs folder.\nBut really now it's on you to just kind of go out and use these modules and don't\nshy away from this because modules are a huge part of Python and you're definitely\ngoing to want to include them in your Python stack.\nIn this tutorial, I want to talk to you guys about classes and objects in Python.\nNow classes and objects are extremely useful in Python programming and they can\nhelp you to make your programs more organized and more powerful.\nSo when we're in Python, we're dealing with all types of data, right?\nAnd a lot of times when we're writing programs, we're going to have to work with\ndifferent types of data. And there's essentially like a few basic types of data\nwe can do with usually things like strings, so like plain text, numbers, and\nBoolean values. Those three are kind of like the main types of data that you're\ngoing to be working with in Python. And we have all sorts of structures we can\nuse to store that data, you know, things like lists or dictionaries.\nBut here's the problem is that not all information, not all data and not all\nthings can be represented using strings, numbers, or Booleans, right?\nThere's a lot of things in the real world that we can't represent in something like\na string or just a number, right? In other words, something like think of like\nsomething like a phone or a computer or a person, right? You can't really\nrepresent those things in like a string or a number. You know, in other words,\nlike the data types that we have available to us in Python can't cover that.\nAnd so what we can do with classes and objects is we can essentially create our\nown data types. So I can create my own data type for anything I want in Python.\nSo I could create like a phone data type and it could represent a phone.\nSo I could store all the information I would ever want to know about my phone\ninside of that data type. And in Python, we could create a class for it.\nAnd essentially what a class is is it's just saying, hey, here's another data type\nthat we want to use in Python. So with a class, you can essentially define your\nown data type. And it's super awesome. And classes are extremely useful.\nClasses are used in almost every single major programming language out there.\nSo in this tutorial, I just want to give you guys a basic introduction of classes\nand using them inside of Python. So let's say that I'm writing a program\nand I want to represent a student inside of this program.\nSo maybe I'm writing a program for like a college or a university.\nLet's say that in this program, I want to model a student.\nLike I want to model a real world object and I want it to be a student.\nRight, we don't have a student data type and I can't really represent a student\nin just a single string or a number.\nSo what I can actually do is I can create a class for a student.\nAnd I'm basically creating like a student data type.\nSo I'm going to show you guys how we can do that and create our student class.\nSo over here, I'm just going to make a new file.\nWe'll just make it a new Python file. So I'm just going to call it student.py.\nAnd inside of this student.py file, I want to create a student class.\nSo the way that I can do that is just by typing class.\nAnd now I want to type the name of the class that I want to create.\nSo in our case, we're going to create a class called student.\nSo I'm just going to say student and now we're going to make a colon.\nNow everything that goes inside of here is going to be inside of our student class.\nSo everything that's indented like this will be considered a part of our student class.\nAnd basically what we can do inside of this student class is we can define a bunch of attributes\nabout a student.\nSo essentially what I'm doing is I'm like modeling a student.\nI'm creating our student data type. And I can use things like strings,\nintegers, and booleans in order to map out what a student should be and what a student should have.\nSo I want to create something called an initialize function.\nAnd the way I do that is just by typing out def.\nAnd I'm just going to type two underscores.\nAnd then the word I N I T and then two more underscores.\nAnd you also want to type out open and close parentheses.\nAnd inside of those parentheses, we want to type out self.\nAnd then we want to colon after that.\nWhat I can do inside of this initialize function is I can basically map out what attributes a student should have.\nSo we can essentially define like, hey, here's the student data type in Python.\nSo what I want to do is add in certain attributes after this self.\nSo I'm just going to say self a comma.\nAnd now we can start thinking about, you know, what values will represent a student inside of our Python program.\nSo if I'm thinking like, I'm thinking something like name, right?\nSo every student in our program should have a name.\nThey also might want to have a major because they're in college.\nThey probably also will have a GPA. So they're a grade point average, like how they're doing in school.\nAnd let's define one more thing.\nLet me think. Why don't we make a Boolean?\nAnd it's going to be called is on probation.\nAnd this will basically tell whether or not the student is on probation.\nSo essentially what I'm doing inside of this initialize method inside of this init function is I'm defining what\na student is in our program. And so in this program, a student has a name, it has a major, it has a GPA,\nand it has a value that determines whether or not it's on probation.\nThis right here is the student data type.\nSo if I'm representing a student inside of my program now, it has all of these attributes associated to it.\nAnd that's basically what I'm doing up here.\nNow inside of this initialize function, we actually have to do something. And basically what I want to do is assign some values.\nSo I'm going to be writing out some stuff and this might not make total sense right now.\nBut this is going to make sense in a second after we create our first student object.\nSo just stick with me right now and just basically know that we have to do what I'm doing over here.\nSo I'm just going to say self dot name is equal to name. And then I'm going to say self dot major is equal to major.\nSelf dot GPA is equal to GPA. And I'm going to say self dot is on probation is equal to is on probation.\nSo again, this might not make a whole lot of sense right now, but in a little bit, this is going to make total sense.\nSo now that I have this student class defined, I can actually use this class inside of my other file.\nSo I'm going to come over here into this app dot Python file. And this is just my main file.\nSo I actually want to create a student right so in that student class, we defined the student data type.\nAnd we basically said like hey, a student has a name, a major GPA and it says whether or not they're on probation.\nThat's like the template for what a student is. But we can actually create a student.\nSo we can create an actual student and give it some information. And that's called an object.\nSo this student class over here is basically defining what a student is.\nSo a class is just like an overview of what the student data type is.\nAn object is an actual student. So it's an actual student with a name, a major and a GPA.\nIt's not just this template anymore. It's actually like a student that we're representing inside of our program.\nSo in order to use that student class and create a student object, I actually need to import that.\nSo all I have to do over here is just say from student, and this is referring to this student file.\nI can say import student.\nAnd basically what this is saying is from the student file, I want to import the student class.\nSo even though these are both student, they're referring to different things.\nSo this is referring to the file and this is referring to the actual student class.\nSo now that we did this, we can create a student. So you can create an object of a class a lot like you would a normal variable.\nSo I can just give it a name. I'm going to call this student one.\nAnd I'm just going to set it equal to student.\nAnd I'm going to make an open and close parentheses.\nAnd now inside of this parentheses, I want to give this student a name, a major, a GPA, and an is on probation value.\nSo I'm going to say, we'll just create a fake student. So I'll just say his name's Jim.\nAnd he's studying business.\nAnd we want to give him a GPA. So maybe he has like a 3.1.\nAnd finally, we want to say whether or not this student is on probation. So why don't we say false?\nSo basically what I'm doing is I'm saying that I want to create a student.\nSo I want to actually create a student object. And remember, an object is just an instance of a class.\nSo the class is like an overall template. It defines what a student is.\nBut an object is an actual student with actual information.\nSo we could call student one now. This is a student object.\nSo I just want to show you guys what this student object actually is and what we can do with it.\nAnd then I'm going to talk some more about that in it function from before.\nSo over here, I'm just going to make a print statement.\nAnd inside of here, I just want to print out student.\nAnd what's cool about this student one object is I can actually access each of the attributes from inside of this object.\nSo if I wanted to get the name of the student, I could say student one dot name.\nAnd now this is actually going to print out the student's name.\nSo over here, you'll see it prints out Jim.\nIf I wanted, I could print out the student's GPA. And it's going to print out the student's GPA 3.1.\nSo now that I created this student object, I can actually access the information about the student.\nSo essentially, I've just created a student data type.\nSo I could create as many of these students as I wanted. If I wanted, I could create another student we could call it student two.\nAnd essentially, we do the same thing. We just give it different information.\nSo we could say like Pam and her major is art. And she has like a 2.5. And let's say that she is on probation.\nSo now I have another student, student two. So if I wanted, I could access information about that student.\nWe could say like student two dot GPA. And now this is giving me the GPA of student two.\nSo basically, what I did was I created a student data type and I created student objects.\nAnd now I'm able to represent a student inside of my program.\nSo let's talk real quick about all this stuff over here because I didn't really explain it.\nBasically, what's happening is when I come over here and I say student and I'm passing in all of these different values,\nthose are getting passed into this init function.\nRemember, I passed in a name, I passed in a major, I passed in a GPA.\nWhen we create that student, we're actually calling this function.\nAnd when I pass in the name, the major and the GPA, those values are actually getting stored over here in this name,\nthis major, this GPA, et cetera. So I'm giving this student object all of that information.\nAnd down here, what I'm doing is I'm saying self dot name is equal to name.\nAnd basically what this means is the actual object's name is going to be equal to the name that they passed in.\nSo self dot name is an attribute of student.\nSo the student is storing a name, the student is storing a major, the student is storing a GPA.\nBut that's different from this name, this major, and this GPA.\nRemember, these are all just values that I passed in, they're just parameters.\nAnd so I need to take the values that I passed in and I need to assign them to the actual attributes of the object.\nSo I need to say, okay, the name of the student is going to be equal to the name that we passed in.\nOne more time, the name of the student object is going to be equal to the name that we passed in.\nThe name of the student's major is going to be equal to the major that we passed in.\nThe student's GPA is going to be equal to the GPA that we passed in.\nThat's basically what's happening here. So when I say self, it's referring to the actual object.\nSo over here, when I'm creating this student object, I'm giving it all of this information.\nIt's taking that information and storing it as attributes for the object.\nSo hopefully that makes sense. I think that's about as clear as I can make it.\nBut the point is that now we have a student data type.\nSo now I can represent a student inside of my Python program.\nAnd that's like super powerful. And what's cool about classes and objects is you can do this with anything.\nSo in this example, we created a student class and then we created student objects off of that.\nBut I can model any real world entity into this program.\nI can model something like a phone or I can model like a water bottle or I can model, you know, a keyboard, right?\nI can model anything that I wanted inside of my program.\nI could just give it certain attributes, right?\nAnd so that's what's cool about classes is we can model real world objects and we can create our own data types.\nIn this tutorial, I'm going to show you guys how to build a multiple choice quiz in Python.\nSo basically, we're going to set up a little multiple choice quiz and we'll have the user take the quiz.\nAnd as they take the quiz, we'll keep track of their score and then at the end we'll tell them how they did.\nSo this is going to be a pretty cool video. I'm excited to show you guys how to do this.\nAnd we'll get to use things like classes and if statements and loops in order to build this program.\nSo we're going to use a lot of cool stuff in Python.\nThe first thing I want to show you guys, I actually did this before I started the video. It's this little array. It's called question prompts.\nAnd I basically just wrote out all the questions that are going to be or I shouldn't say the questions.\nI wrote out all the question prompts that are going to be inside of my multiple choice quiz.\nSo the first one just says what color are apples and the answers are red, purple or orange.\nThe next one is what color bananas the options are teal, magenta and yellow.\nAnd the third question is what color are strawberries and the options are yellow, red and blue.\nSo this is obviously a very, very easy multiple choice quiz.\nBut I just kind of wrote out the questions beforehand so I didn't have to spend time doing that.\nSo let's talk about how we can build a multiple choice test.\nWell, the first thing I want to think about is how can I represent the questions in the test.\nOver here, we have the question prompts, but there's actually two parts to a question when you think about it.\nThere's the prompts. In other words, the actual question itself.\nAnd then there's the answer to the question and both of those attributes need to be kept track of.\nI need to keep track of what we want to ask and I need to keep track of what the answer is.\nSo what I'm actually going to do is create a question class.\nSo I'm going to create a little data type for questions and inside of that question class,\nwe'll be able to store the question prompts and we'll also be able to store the questions answer.\nSo I'm just going to come over here to my folder and I'm going to make a new Python file and we're just going to call this question.py.\nSo we'll call it question.py and inside of this question.py file, I'm going to make a class.\nSo I'm just going to say class question and I'm going to put a colon here.\nSo inside of this question class, we want to define it in initialize function.\nSo I'm going to say def two underscores in it, two underscores, and then we're going to type out an open and close parentheses self and then a colon.\nSo after this self, we want to define the different attributes that will describe or that will be included in a question.\nSo we're going to include a prompt and we're going to include an answer.\nSo every question will have a question prompt and a question answer.\nNow down here, I want to take those values and assign them to the actual class object.\nSo I'm going to say self dot prompt is equal to prompt and I'm going to say self dot answer is equal to answer.\nNow we have a question class set up and we can store all the information we need about a question.\nSo what I want to do now is go back over to my app dot Python file.\nAnd we're actually going to create an array of questions.\nSo I have over here these three prompts and I'm actually just going to create another array.\nSo we'll just call it questions and I'm just going to set it equal to to open and close square brackets and we're going to start creating question objects.\nLet's say the first element in this questions array will be a question and we want to pass question prompts zero and the answer to the first question was a red green.\nThat's the color of Apple.\nSo I'm going to pass that first question and I'm also going to pass the answer, which is a and you'll see down here, I'm getting an error.\nSo saying unresolved reference question. So actually what we need to do before we can create these questions is we need to import this question class.\nSo I'm going to come up in here, come up here and say from question import question.\nSo now down here in this questions array, we're not getting that error anymore.\nSo we created one question object and I'm just going to create a couple more for these other ones.\nSo I'm just going to copy this one and we will paste this down here.\nAlright, so now we're creating two other questions and these ones are going to be one and two and the answer to the second question is C and the answer to the third question.\nI think it's B. Let me look.\nYeah, so it's C and B. Alright, so essentially what we're doing is we're creating three questions. Each one is getting a different question prompt and they're each getting different answers.\nSo now we have an array of questions that we want to ask on our test.\nSo the next step is to actually write a function that will run the test, right?\nIt has to ask the user the questions and it has to check to see if they got the answer right.\nDown here, lower in the file, let's create a function. So I'm just going to say death and we'll call this run test.\nAnd inside of this parentheses, we're going to take one parameter into this function.\nWe're going to take a list of questions. So I'm just going to say questions.\nSo this is basically going to be a list of question objects that we want to ask the user.\nSo once I'm in here, all I want to do is loop through all the questions.\nSo I want to loop through each question. I want to ask it to the user.\nI want to get the user's answer and I want to check to see if it's right.\nAnd we need to be able to keep track of how the user does through the test.\nSo I want to create a variable called score and I'm just going to set it equal to zero.\nSo every time the user answers a question right, we'll increment this score variable.\nAlright, so what I want to do is, like I said, loop through all the questions in that questions array.\nSo I'm going to create a for loop. I'm going to say for question in questions.\nSo in other words, for each question object inside of this questions array, I want to do something.\nAnd basically, the first thing I want to do is ask the user the question.\nAnd I want to store their response inside of a variable.\nSo I'm going to say, I'm going to make a variable down here called answer.\nAnd this is going to represent the user's answer to the question.\nAnd I'm going to set it equal to input and I need to give this a prompt.\nSo I'm actually going to give this the prompt for the question.\nSo I can just say question dot prompt.\nSo now I have the answer that the user entered in, which is stored inside this variable.\nSo we want to check to see if they got the question right.\nAnd I can do that using an if statement.\nLet's say if answer, and this refers to the student's answer, is equal to question dot answer.\nSo I'm checking to see if the answer that the student gave is equal to the answer of the current question that we're asking.\nAnd if this is true, then I just want to increment score.\nSo I'm going to say score plus equals one.\nAnd this basically just means we're adding one to the score.\nSo the last thing I want to do inside of this function is just print out the result.\nSo I want to print out how the user did.\nSo down here, I'm just going to say print and I'm basically just going to print out like,\nHey, you got like two out of three questions or you got five out of six questions, right?\nOr you got zero out of 10 questions, right?\nWe'll just print out how they did.\nSo I'll just say you got.\nAnd now I want to print out how many questions they got right.\nSo this is just going to be the score.\nAnd in order to print a number alongside of a string like this, I'm going to have to say STR and then type in the number.\nSo we'll say STR score.\nSo we'll basically say you got however many they got right out of.\nSo we'll use this little forward slash.\nAnd now we'll just say how many questions there were.\nSo we can say, and again, we're going to have to convert this to a string because it's going to be a number.\nSo we can say, string, and then we want to figure out how many questions were in that questions array. So I can say LEN.\nAnd inside of here, we can just say questions.\nSo this is kind of like this long statement just to print out how many questions there were.\nSo then over here, I'll just say, correct.\nAll right.\nSo now we have this print statement.\nAnd it's just going to be printing out how many questions they got right.\nSo let's see if this works.\nThe last thing I need to do is just call this run test function.\nSo I'll say run test, and I'm just going to pass it that questions array that we created before.\nSo we created this questions array with all of these question objects inside of it.\nI'm basically just going to pass that into this run test function.\nSo now let's run our program and see how we did.\nHopefully we don't get any errors.\nThere's a lot of code there, so it's possible that we might.\nOkay, so it says what color are apples?\nHuh, this is a tough one.\nAll right, let's put A. So we'll get the first question right.\nWhat color are bananas?\nLet's get the second question wrong.\nSo I'm going to say B, bananas are magenta.\nAnd we'll get the third question right.\nSo it says what color are strawberries?\nI'll just put B because that's the right answer.\nSo now you'll see that our program prints out.\nYou got two out of three correct.\nSo not only did it ask us all the questions and get our input for each question,\nbut it also kept track of our score and it printed it out.\nSo why don't we run through the test one more time and we'll just like get too wrong this time.\nSo we'll get this one wrong.\nI'll get this one wrong and I'll get this one right.\nSo now it says you got one out of three correct.\nSo it's able to actually grade our test.\nAnd what's cool about the program we just wrote is if I wanted,\nI could add another question into here and it would automatically be able to ask it.\nSo it doesn't matter how many questions we put in here.\nIt's just able to ask it.\nSo really the point I was trying to make with this whole video was just how we can use something like a class\nin order to model a real world entity.\nSo for example, we created this question class and we were able to store all the information about a question that we could ever need.\nSo we were able to sort of like the prompts and the answer.\nSo we created our own question data type and then we were able to create a bunch of different questions,\npass it into this run test method and it was able to grade the test and just run the test really easily.\nSo that's kind of the point.\nSo hopefully this makes sense.\nYou know, this was a lot of code.\nSo if you don't fully understand what I did, go back, watch the video, you know,\ntry it a couple of times on your own and see if you can create your own multiple choice test.\nIn this tutorial, I want to talk to you guys about class functions in Python.\nSo a class function is essentially a function that we can use inside of a class and it can either modify the objects of that class\nor it can give us specific information about those objects.\nOver here, I have this student.py file and inside of here, I created a student class.\nSo I just had a class student and I gave this student a couple of different attributes.\nI gave it a name, a major and a GPA.\nSo I can give this student all of this information.\nSo when I create a student object, it'll have all of that information in it.\nNow over here on this app.py file, it actually created two students.\nSo student one is Oscar who is studying accounting and he has a GPA of 3.1.\nStudent two is Phyllis who's studying business and she has a 3.8.\nSo what we can actually do is we can use functions inside of these class files.\nSo I could actually define a function inside of this student class and then all of my student objects could access it.\nSo for example, I can come down here and create a function and let's say we wanted to create a function that told us whether or not this particular student had honors.\nSo whether or not they were on the honor roll, right?\nBasically like, are they like a really good student?\nSo I could define a function called on honor roll.\nAnd basically what it's going to do, it's going to tell me whether or not this particular student is on the honor roll.\nAnd let's basically just say the rules for being on honor roll is you have to have a GPA of 3.5 or above.\nSo here GPA is 3.5 or above, that means you're on the honor roll.\nWell, over here I could actually write the code for that.\nSo I could say if self.gpa, and when I say self over here, this is referring to like the actual student's GPA.\nAnd you'll notice over here I have to pass that in as a parameter and that always has to be the first parameter.\nSo I could say if self.gpa is greater than or equal to 3.5, then we can return true because this student is on the honor roll.\nOtherwise else we can just return false because if their GPA isn't above a 3.5 then they're not on the honor roll.\nSo that's essentially our little on honor roll function. And you can see it's a very small function, but it provides a service to the objects of this class.\nIt allows the objects of this class to figure out whether or not that current student is on the honor roll.\nSo over in this app.pa file I could just print out that value.\nSo I could say print and I'm going to see if student one is on the honor roll.\nSo now when I run this you'll see it should print out false.\nAnd it's putting out false down here because student one only has a GPA of 3.1.\nIf I was to do the same thing on student two, student two has a GPA of 3.8 so we should return true.\nAnd that's exactly what happened.\nSo essentially a class function is just a little function that can be used by the objects of the class.\nAnd I would say this is a pretty good example of what a class function should be doing.\nIt should be like giving us information about the class or it can also be like modifying information about the class.\nSo that's the basics of using functions in classes.\nI mean this is a pretty simple tutorial, but I really just wanted to introduce you guys to the concept of putting functions inside of classes.\nThis is going to be really useful.\nAnd if you're making a class you always want to think about what functions can I put inside of here that will essentially help the user to either figure out information about the object or modify different values in the object.\nIn this tutorial I want to talk to you guys about inheritance in Python.\nNow inheritance is basically where we can define a bunch of attributes and functions and things inside of a class.\nAnd then we can create another class and we can inherit all of those attributes.\nSo I can basically have one class that has all the functionality of another class without having to physically write out any of the same methods or attributes.\nSo if that's confusing don't worry I'm going to show you guys exactly what this is in this video.\nSo let me show you about some stuff I have set up over here.\nI created this class called chef. And over here we just have this class chef.\nAnd inside of this chef class we have three functions.\nSo this chef can do three things.\nThe chef can make chicken.\nThe chef can make salad and the chef can make a special dish.\nAnd whenever the chef makes a dish he basically just says the chef makes a chicken or the chef makes a salad or the chef makes barbecue ribs for this special dish.\nIt's basically just saying whatever the chef is doing.\nSo if I was to come over here to my app.python file you'll notice that I'm importing the chef.\nSo I'm basically allowed to use this chef class now.\nAnd I can say my chef is equal to chef.\nSo I'm creating a new chef.\nSo now if I came down here and I said my chef dot make chicken.\nWhen I run my program now it's going to say the chef makes a chicken.\nIf I said make special dish and I run the program now it's going to say the chef makes barbecue ribs because that's the chef's special dish.\nSo I have this really awesome chef class and it works really well.\nBut let's say that I wanted to create another class to model another type of chef.\nSo this chef class is just modeling like some generic chef.\nWe're representing some generic chef in our program.\nBut let's say that I wanted to create a class that modeled a different type of chef.\nFor example let's say we wanted to create a class that modeled a Chinese chef.\nSo instead of just a normal chef this is a Chinese chef.\nWell I actually created a file over here called Chinese chef dot python.\nSo we could actually use this Chinese chef dot python file to create our Chinese chef class.\nSo I'm just going to say class and over here I'm just going to say Chinese chef.\nAnd basically I just can define everything that the Chinese chef can do.\nBut let's say that our Chinese chef can do everything that our generic chef can do.\nSo the Chinese chef is like a special chef right it's a very specific type of chef.\nBut let's say that this Chinese chef can do everything that the normal chef can do.\nSo the Chinese chef can make chicken, can make salad and can also make a special dish.\nWell if I wanted to give this Chinese chef all of that functionality I could just come over here and I could copy all of these functions and I could paste them in here.\nSo now the Chinese chef can do everything that the other chef can do.\nBut let's say that in addition to all of these things the Chinese chef can also make a special dish called fried rice.\nSo I could say deaf and we could say make fried rice.\nSo the Chinese chef has this extra function which allows it to make fried rice and over here we can just say the chef makes fried rice.\nAnd let's also say that the Chinese chef has a different special dish.\nSo instead of making barbecue ribs the Chinese chef makes orange chicken.\nAlright so now we have our Chinese chef class set up and you'll notice that it can do everything that the normal chef can do.\nSo let's go back over to our app.python file and I want to create a Chinese chef object.\nSo instead of importing from chef we're going to just import it from Chinese chef so I'll say Chinese chef and we're going to import Chinese chef.\nSo let's go ahead and make a Chinese chef object.\nSo down here I'm going to make one and I'll just say my and then my Chinese chef we can print out this special dish.\nSo remember the Chinese chef can do everything that the normal chef could do.\nSo if I say my Chinese chef make special dish when I run this program you'll see the regular chef is making barbecue ribs and the Chinese chef is making orange chicken.\nSo everything works out and this Chinese chef also has an extra method called make fried rice and you can also make fried rice.\nBut here's the problem right when I go over here to this Chinese chef dot pie when I wanted to use all of the functionality that was inside this chef class.\nI actually had to copy and physically paste all of these functions down into this file right and that's kind of a drag.\nI mean especially like imagine if this chef had like 20 or 30 of these different functions in it.\nWell I have to copy and I have to paste all of those inside of this Chinese chef and this is where we can use something called inheritance.\nSo instead of having to copy and paste all of these functions I could just inherit these functions from that chef class.\nAnd in order to do that I can actually just get rid of all of these and I can come over here and right next to where I'm saying class Chinese chef.\nInside of parentheses I can say the name of the class that I want to inherit from so I can just say chef.\nAnd I'm also going to have to import this so I'm going to come over here and we'll say from chef import chef.\nSo basically what this is saying is inside of this Chinese chef I want to be able to use all of the functions that are contained inside of the chef class.\nSo I'll say that one more time. Inside of this Chinese chef class I want to be able to use all of the functions that are inside of this chef class.\nSo by using inheritance here I'm actually able to come over here to this app.py file and now I'm still able to execute for example like the make chicken function.\nEven though I didn't specify the make chicken function in here I didn't write it out. I can still run this program and the Chinese chef will still be able to make chicken.\nSo when I run this program you'll see down here it says the chef makes chicken.\nAnd that's because I inherited the make chicken method from the chef class.\nBut here's one thing that got messed up. If I come over here and I say make special dish.\nRemember the Chinese chef special dish was supposed to be orange chicken.\nBut now the Chinese chef is going to be making barbecue ribs because I inherited this make special dish function from this chef class.\nAnd so what I can actually do is I could come in here and I could override that make special dish class. So I could say death make special dish.\nAnd down here I can just override it. So I could say the chef makes orange chicken.\nAnd now when I go over here and I run this make special dish function.\nNow the chef's going to be back to making orange chicken. So the Chinese chef will make his special dish.\nSo that's basically what inheritance does. It allows me to inherit functionality from an existing class into the new class.\nAnd I can actually just inherit all of it without having to write it out.\nSo I didn't have to write out make chicken and make salad inside the Chinese class.\nBut the Chinese chef can still make chicken and salad because it inherited that functionality from the chef class.\nIn this tutorial I want to talk to you guys about the Python interpreter.\nThe Python interpreter is basically a little environment that we can use to execute Python commands.\nSo it's kind of like this little sandbox environment where we can test out and try out different Python commands or different Python functions in a very safe and neutral environment.\nSo it's kind of like a quick and dirty way to write Python and try different things out.\nAnd the way we use the Python interpreter is by opening up our command prompt.\nNow if you're on Windows there's a program called command prompt.\nIf you're on Mac there's a program called terminal. And basically you need to open that program in order to use the Python interpreter.\nSo I'm here on a Mac but if you're on a Windows you can essentially do exactly what I'm doing just inside of the command prompt.\nSo on Mac here I'm just going to search for my terminal.\nIf you're on Windows you can just search for like CMD or command prompt and it should pop up.\nSo the terminal is basically an environment on our computer where we can interact with the computer and do different things without a graphical user interface.\nSo normally when we interact with the computer we're using things like buttons or windows or we can move stuff around.\nWe can basically just like interact with the computer with graphics but the terminal or the command prompt is a place where we can interact with the computer using text commands.\nSo you know I'm not going to get too much into what the terminal and the command prompt are but that's essentially what it is.\nSo inside of here we can use the Python interpreter.\nAnd the Python interpreter is basically just a little program that like I said we can write you know sort of Python in.\nSo generally all you have to do is go over to your terminal or your command prompt and type in Python 3.\nAnd since we're using Python 3 I'm going to type Python 3 but you can also just type normal Python and I'm pretty sure that gives you Python 2.\nNow here's a quick disclaimer on Windows you may run into a problem where you can't use this Python 3 command and it's possible that if you're running into that problem Python.\nLike Python 3 hasn't been added to your windows path variable.\nAnd basically what that means is your computer doesn't recognize the command Python 3.\nIf that's the case all you have to do is just go and Google how to add Python 3 to your windows path variable.\nIt's really easy I'm not going to get into it in this video just because it's kind of outside the scope but if you're running into that problem that's probably it's not on your windows path variable.\nSo just Google around for that and you should be able to find an answer.\nBut I'm going to type Python 3 and click enter and it's going to open up this cool little thing down here.\nSo you can see it basically just has like here's the version of Python.\nNow I'm just going to enter so we can have some like new lines here.\nBut down here this is the Python interpreter so we can write Python code in here and it's going to work.\nSo I can for example I could write like print and inside of here I could print like hello world.\nAnd when I click enter you'll see that it prints out hello world.\nI could create a variable so for example I could say like num one is equal to ten.\nI could say num two is equal to ninety and then I could print out num one plus num two and it's going to be able to do that for me.\nI could also use some like a function so I could define a function in here.\nWe could make a function that's called say hi and it'll take a name parameter.\nAnd you'll see here when it saw I wanted to create a function it put these three little dots and I can indent and we can write the code for our function.\nSo I can say like print hello plus name.\nAnd now I have a function called say hi so I can break out of this by just entering again and I can call the function so I could say say hi and we'll say hi to me.\nHi Mike so now it's going to say hello Mike so I can use a function I could use something like an if statement you know I could say I could use something like a for loop we could use while loops.\nI mean we can basically use all of the basic like Python commands and you know inside of this Python interpreter and like I said before it's essentially just an environment where you can test out Python code.\nNow this is not a place where you want to write like any serious Python scripts.\nSo if you're like designing and writing a Python program I would not recommend doing it inside of this interpreter.\nIt is it's not a very intuitive environment it's pretty much just set up for some quick and dirty tests like we need to test something out great this is a perfect place for it because you don't have to set up a file.\nYou don't have to use like some ID you don't have to execute a file you just go in here it's quick it's dirty you get it done.\nBut if you're writing like an actual program you definitely definitely definitely want to use a text editor.\nThe text editor it's just going to be way more organized everything is going to be a lot cleaner and you're not going to get confused with like where stuff is and what you have so that's the basics of the Python interpreter.\nYou know in the course I haven't really been using it at all just because I think it's a lot easier to teach when we're inside of a file than inside of here but you know don't count this guy out the Python interpreter is awesome a lot of people use it and it's great if you just\nneed to test you know little bits of code out without having to set up some huge environment so Python interpreter definitely awesome I would play around with it you know have some fun and take advantage of it.\nHey thanks for watching if you enjoyed the video please leave a like and subscribe to draft Academy to be the first to know when we release new content.\nAlso we're always looking to improve so if you have any constructive criticism or questions or anything leave a comment below.\nFinally if you're enjoying draft Academy and you want to help us grow head over to draft Academy.com forward slash contribute and invest in our future.\n",
  "words": [
    "course",
    "going",
    "teach",
    "everything",
    "need",
    "know",
    "get",
    "started",
    "programming",
    "python",
    "python",
    "one",
    "popular",
    "programming",
    "languages",
    "far",
    "one",
    "sought",
    "jobs",
    "trying",
    "get",
    "job",
    "trying",
    "know",
    "automate",
    "life",
    "trying",
    "write",
    "awesome",
    "scripts",
    "bunch",
    "different",
    "things",
    "python",
    "honestly",
    "developers",
    "every",
    "day",
    "moving",
    "projects",
    "python",
    "powerful",
    "easy",
    "use",
    "language",
    "lot",
    "programming",
    "languages",
    "beginner",
    "friendly",
    "lot",
    "syntax",
    "lot",
    "like",
    "little",
    "things",
    "get",
    "wrong",
    "program",
    "yell",
    "python",
    "complete",
    "opposite",
    "basically",
    "type",
    "want",
    "python",
    "simple",
    "whole",
    "lot",
    "syntax",
    "learn",
    "learning",
    "curve",
    "literally",
    "zero",
    "jump",
    "start",
    "writing",
    "first",
    "program",
    "seconds",
    "course",
    "going",
    "teach",
    "guys",
    "everything",
    "need",
    "know",
    "get",
    "started",
    "python",
    "designed",
    "course",
    "especially",
    "python",
    "lesson",
    "specially",
    "designed",
    "examples",
    "help",
    "along",
    "way",
    "many",
    "people",
    "starting",
    "learn",
    "python",
    "question",
    "learn",
    "python",
    "question",
    "think",
    "lot",
    "people",
    "reason",
    "might",
    "want",
    "learn",
    "python",
    "intimidated",
    "afraid",
    "going",
    "hard",
    "trust",
    "going",
    "hold",
    "hand",
    "entire",
    "course",
    "going",
    "talk",
    "core",
    "concepts",
    "python",
    "going",
    "look",
    "everything",
    "need",
    "know",
    "start",
    "programming",
    "python",
    "start",
    "confident",
    "start",
    "writing",
    "scripts",
    "start",
    "writing",
    "programs",
    "awesome",
    "cool",
    "things",
    "life",
    "anyway",
    "super",
    "pumped",
    "teaching",
    "guys",
    "python",
    "ca",
    "wait",
    "get",
    "started",
    "course",
    "hope",
    "guys",
    "stick",
    "around",
    "follow",
    "along",
    "course",
    "learn",
    "amazing",
    "programming",
    "language",
    "tutorial",
    "going",
    "show",
    "guys",
    "install",
    "python",
    "onto",
    "computer",
    "also",
    "going",
    "install",
    "text",
    "editor",
    "use",
    "write",
    "python",
    "programs",
    "first",
    "order",
    "business",
    "actually",
    "install",
    "python",
    "computer",
    "want",
    "head",
    "web",
    "browser",
    "want",
    "go",
    "page",
    "forward",
    "slash",
    "downloads",
    "page",
    "going",
    "two",
    "buttons",
    "going",
    "say",
    "download",
    "python",
    "least",
    "version",
    "right",
    "download",
    "python",
    "thing",
    "python",
    "actually",
    "two",
    "major",
    "versions",
    "python",
    "use",
    "currently",
    "python",
    "two",
    "python",
    "three",
    "see",
    "like",
    "basically",
    "python",
    "two",
    "version",
    "would",
    "refer",
    "like",
    "python",
    "two",
    "like",
    "latest",
    "python",
    "three",
    "version",
    "two",
    "versions",
    "download",
    "first",
    "thing",
    "decide",
    "version",
    "want",
    "download",
    "basic",
    "difference",
    "python",
    "two",
    "legacy",
    "version",
    "python",
    "basically",
    "means",
    "like",
    "old",
    "version",
    "like",
    "actively",
    "maintained",
    "supported",
    "like",
    "officially",
    "python",
    "anymore",
    "python",
    "three",
    "like",
    "future",
    "python",
    "like",
    "newest",
    "version",
    "one",
    "getting",
    "actively",
    "maintained",
    "supported",
    "pros",
    "cons",
    "picking",
    "either",
    "one",
    "lot",
    "people",
    "say",
    "like",
    "python",
    "two",
    "around",
    "longer",
    "like",
    "libraries",
    "basically",
    "python",
    "code",
    "written",
    "python",
    "two",
    "therefore",
    "like",
    "things",
    "python",
    "two",
    "python",
    "three",
    "python",
    "two",
    "supported",
    "know",
    "five",
    "10",
    "years",
    "probably",
    "one",
    "going",
    "using",
    "python",
    "three",
    "like",
    "said",
    "like",
    "future",
    "python",
    "newest",
    "version",
    "one",
    "know",
    "sort",
    "maintained",
    "going",
    "forward",
    "purposes",
    "tutorial",
    "going",
    "teaching",
    "guys",
    "python",
    "three",
    "going",
    "want",
    "download",
    "python",
    "three",
    "thing",
    "like",
    "learn",
    "python",
    "three",
    "learn",
    "python",
    "two",
    "differences",
    "big",
    "differences",
    "like",
    "syntax",
    "know",
    "little",
    "things",
    "learn",
    "python",
    "three",
    "able",
    "jump",
    "right",
    "code",
    "python",
    "two",
    "well",
    "let",
    "anyone",
    "know",
    "tell",
    "learn",
    "one",
    "going",
    "learn",
    "python",
    "three",
    "think",
    "probably",
    "best",
    "beginner",
    "learn",
    "one",
    "want",
    "download",
    "going",
    "click",
    "download",
    "python",
    "three",
    "going",
    "go",
    "ahead",
    "download",
    "version",
    "done",
    "downloading",
    "going",
    "head",
    "downloads",
    "folder",
    "see",
    "file",
    "going",
    "double",
    "click",
    "get",
    "like",
    "python",
    "installer",
    "going",
    "click",
    "able",
    "install",
    "python",
    "three",
    "computer",
    "right",
    "done",
    "installing",
    "close",
    "good",
    "go",
    "python",
    "three",
    "installed",
    "computer",
    "next",
    "step",
    "need",
    "choose",
    "text",
    "editor",
    "going",
    "writing",
    "bunch",
    "code",
    "going",
    "need",
    "know",
    "environment",
    "program",
    "write",
    "code",
    "really",
    "write",
    "python",
    "text",
    "editor",
    "could",
    "write",
    "like",
    "notepad",
    "text",
    "edit",
    "really",
    "matter",
    "special",
    "text",
    "editors",
    "designed",
    "writing",
    "python",
    "code",
    "called",
    "ides",
    "stands",
    "integrated",
    "development",
    "environment",
    "basically",
    "special",
    "environment",
    "know",
    "run",
    "execute",
    "python",
    "code",
    "know",
    "basically",
    "like",
    "tell",
    "us",
    "know",
    "write",
    "something",
    "wrong",
    "errors",
    "kind",
    "point",
    "us",
    "right",
    "direction",
    "need",
    "fix",
    "stuff",
    "course",
    "going",
    "using",
    "ide",
    "one",
    "favorites",
    "one",
    "popular",
    "ides",
    "python",
    "called",
    "pie",
    "charm",
    "website",
    "called",
    "forward",
    "slash",
    "pie",
    "charm",
    "ide",
    "going",
    "using",
    "course",
    "going",
    "come",
    "click",
    "big",
    "download",
    "button",
    "go",
    "ahead",
    "download",
    "pie",
    "charm",
    "program",
    "alright",
    "getting",
    "page",
    "see",
    "two",
    "versions",
    "pie",
    "charm",
    "one",
    "professional",
    "version",
    "one",
    "like",
    "paid",
    "pay",
    "community",
    "version",
    "free",
    "open",
    "source",
    "going",
    "download",
    "one",
    "everything",
    "need",
    "get",
    "started",
    "using",
    "python",
    "alright",
    "finishes",
    "downloading",
    "going",
    "pull",
    "downloads",
    "folder",
    "sort",
    "run",
    "guy",
    "mac",
    "going",
    "drag",
    "applications",
    "folder",
    "alright",
    "pie",
    "charm",
    "python",
    "three",
    "installed",
    "computer",
    "ready",
    "start",
    "programming",
    "python",
    "tutorial",
    "going",
    "create",
    "first",
    "python",
    "program",
    "going",
    "able",
    "run",
    "see",
    "everything",
    "works",
    "first",
    "thing",
    "want",
    "open",
    "pie",
    "charm",
    "pie",
    "charm",
    "ide",
    "integrated",
    "development",
    "environment",
    "downloaded",
    "last",
    "tutorial",
    "going",
    "go",
    "ahead",
    "search",
    "computer",
    "open",
    "first",
    "open",
    "pie",
    "charm",
    "basically",
    "get",
    "window",
    "prompting",
    "us",
    "create",
    "project",
    "see",
    "actually",
    "first",
    "thing",
    "want",
    "though",
    "come",
    "configure",
    "going",
    "click",
    "preferences",
    "actually",
    "want",
    "change",
    "appearance",
    "going",
    "go",
    "ahead",
    "give",
    "theme",
    "went",
    "appearance",
    "behavior",
    "appearance",
    "going",
    "change",
    "theme",
    "dark",
    "think",
    "little",
    "bit",
    "easier",
    "use",
    "look",
    "want",
    "going",
    "click",
    "create",
    "new",
    "project",
    "going",
    "give",
    "us",
    "little",
    "window",
    "right",
    "name",
    "project",
    "going",
    "name",
    "draft",
    "option",
    "says",
    "interpreter",
    "want",
    "select",
    "python",
    "version",
    "three",
    "click",
    "notice",
    "couple",
    "different",
    "options",
    "mac",
    "computer",
    "default",
    "mac",
    "python",
    "version",
    "two",
    "installed",
    "windows",
    "machine",
    "sure",
    "tutorial",
    "going",
    "using",
    "python",
    "three",
    "want",
    "make",
    "sure",
    "python",
    "three",
    "selected",
    "interpreter",
    "otherwise",
    "might",
    "able",
    "fully",
    "follow",
    "along",
    "video",
    "going",
    "come",
    "click",
    "create",
    "going",
    "go",
    "ahead",
    "create",
    "project",
    "us",
    "right",
    "python",
    "project",
    "running",
    "want",
    "show",
    "guys",
    "create",
    "first",
    "python",
    "program",
    "draft",
    "folder",
    "project",
    "created",
    "going",
    "right",
    "click",
    "going",
    "say",
    "new",
    "going",
    "come",
    "click",
    "python",
    "file",
    "want",
    "create",
    "new",
    "python",
    "file",
    "first",
    "python",
    "program",
    "give",
    "name",
    "call",
    "app",
    "going",
    "click",
    "okay",
    "right",
    "first",
    "python",
    "file",
    "open",
    "start",
    "typing",
    "python",
    "want",
    "show",
    "guys",
    "basic",
    "python",
    "program",
    "going",
    "hello",
    "world",
    "program",
    "going",
    "print",
    "something",
    "onto",
    "screen",
    "want",
    "want",
    "type",
    "print",
    "print",
    "want",
    "type",
    "open",
    "closed",
    "parentheses",
    "inside",
    "parentheses",
    "make",
    "quotation",
    "marks",
    "inside",
    "quotation",
    "marks",
    "going",
    "type",
    "hello",
    "world",
    "like",
    "basic",
    "python",
    "program",
    "going",
    "going",
    "print",
    "hello",
    "world",
    "onto",
    "screen",
    "actually",
    "run",
    "file",
    "actually",
    "getting",
    "little",
    "error",
    "wants",
    "us",
    "create",
    "new",
    "line",
    "end",
    "file",
    "order",
    "run",
    "python",
    "program",
    "going",
    "come",
    "top",
    "going",
    "click",
    "run",
    "click",
    "run",
    "button",
    "right",
    "see",
    "happens",
    "asking",
    "want",
    "run",
    "click",
    "app",
    "bottom",
    "notice",
    "text",
    "got",
    "printed",
    "hello",
    "world",
    "whatever",
    "print",
    "whatever",
    "put",
    "inside",
    "print",
    "statement",
    "going",
    "get",
    "printed",
    "console",
    "long",
    "getting",
    "print",
    "statement",
    "work",
    "actually",
    "written",
    "first",
    "python",
    "program",
    "go",
    "forward",
    "course",
    "going",
    "writing",
    "sorts",
    "awesome",
    "python",
    "programs",
    "going",
    "sorts",
    "cool",
    "stuff",
    "tutorial",
    "want",
    "talk",
    "writing",
    "basic",
    "python",
    "program",
    "going",
    "write",
    "simple",
    "python",
    "program",
    "going",
    "look",
    "go",
    "ahead",
    "write",
    "programs",
    "going",
    "talk",
    "programs",
    "getting",
    "executed",
    "python",
    "also",
    "going",
    "draw",
    "little",
    "shape",
    "onto",
    "screen",
    "going",
    "pretty",
    "cool",
    "excited",
    "talk",
    "guys",
    "bare",
    "basics",
    "python",
    "really",
    "sort",
    "give",
    "introduction",
    "basic",
    "text",
    "editor",
    "python",
    "code",
    "write",
    "inside",
    "file",
    "actually",
    "going",
    "get",
    "executed",
    "python",
    "python",
    "file",
    "bunch",
    "python",
    "code",
    "inside",
    "basically",
    "programming",
    "python",
    "giving",
    "computer",
    "set",
    "instructions",
    "right",
    "really",
    "programming",
    "like",
    "specifying",
    "set",
    "instructions",
    "computer",
    "going",
    "go",
    "execute",
    "instructions",
    "give",
    "complex",
    "instructions",
    "give",
    "computer",
    "complex",
    "tasks",
    "computer",
    "carry",
    "want",
    "show",
    "guys",
    "use",
    "python",
    "instructions",
    "python",
    "code",
    "order",
    "draw",
    "shape",
    "onto",
    "screen",
    "actually",
    "going",
    "draw",
    "little",
    "triangle",
    "actually",
    "print",
    "something",
    "onto",
    "screen",
    "python",
    "using",
    "something",
    "called",
    "print",
    "statements",
    "type",
    "print",
    "inside",
    "parentheses",
    "type",
    "quotation",
    "marks",
    "inside",
    "quotation",
    "marks",
    "put",
    "whatever",
    "want",
    "print",
    "onto",
    "screen",
    "going",
    "copy",
    "actually",
    "going",
    "make",
    "little",
    "print",
    "statements",
    "going",
    "actually",
    "draw",
    "shape",
    "going",
    "draw",
    "like",
    "triangle",
    "type",
    "shape",
    "going",
    "draw",
    "forward",
    "slash",
    "make",
    "space",
    "another",
    "forward",
    "slash",
    "make",
    "two",
    "spaces",
    "another",
    "forward",
    "slash",
    "going",
    "make",
    "three",
    "spaces",
    "forward",
    "slash",
    "going",
    "draw",
    "like",
    "vertical",
    "bars",
    "going",
    "way",
    "actually",
    "underscores",
    "well",
    "kind",
    "cool",
    "right",
    "triangle",
    "looking",
    "shape",
    "see",
    "looks",
    "kind",
    "like",
    "right",
    "triangle",
    "save",
    "file",
    "either",
    "come",
    "run",
    "click",
    "run",
    "app",
    "using",
    "pycharm",
    "also",
    "come",
    "click",
    "play",
    "button",
    "click",
    "play",
    "button",
    "want",
    "notice",
    "happens",
    "little",
    "window",
    "called",
    "console",
    "basically",
    "console",
    "place",
    "python",
    "going",
    "output",
    "information",
    "use",
    "print",
    "statement",
    "basically",
    "telling",
    "python",
    "like",
    "hey",
    "print",
    "something",
    "onto",
    "console",
    "lot",
    "situations",
    "going",
    "want",
    "see",
    "going",
    "code",
    "use",
    "print",
    "statement",
    "print",
    "things",
    "console",
    "basically",
    "like",
    "little",
    "window",
    "program",
    "case",
    "going",
    "printing",
    "triangle",
    "onto",
    "console",
    "going",
    "come",
    "click",
    "play",
    "button",
    "see",
    "actually",
    "printing",
    "triangle",
    "mission",
    "accomplished",
    "able",
    "print",
    "shape",
    "could",
    "really",
    "draw",
    "shape",
    "wanted",
    "long",
    "able",
    "specify",
    "inside",
    "print",
    "statements",
    "essentially",
    "python",
    "click",
    "play",
    "button",
    "going",
    "file",
    "looking",
    "instructions",
    "order",
    "first",
    "thing",
    "goes",
    "instruction",
    "says",
    "okay",
    "want",
    "draw",
    "like",
    "little",
    "forward",
    "slash",
    "vertical",
    "bar",
    "onto",
    "screen",
    "goes",
    "instruction",
    "says",
    "okay",
    "want",
    "print",
    "something",
    "prints",
    "goes",
    "instruction",
    "etc",
    "python",
    "actually",
    "going",
    "execute",
    "lines",
    "code",
    "write",
    "order",
    "order",
    "write",
    "instructions",
    "matters",
    "lot",
    "example",
    "take",
    "last",
    "line",
    "put",
    "top",
    "save",
    "file",
    "instead",
    "drawing",
    "triangle",
    "going",
    "draw",
    "little",
    "upside",
    "bottom",
    "thing",
    "top",
    "rest",
    "triangle",
    "order",
    "instructions",
    "actually",
    "matters",
    "lot",
    "basically",
    "python",
    "programs",
    "going",
    "go",
    "go",
    "course",
    "going",
    "learn",
    "little",
    "lines",
    "using",
    "little",
    "print",
    "function",
    "basically",
    "prints",
    "something",
    "onto",
    "screen",
    "bunch",
    "little",
    "things",
    "like",
    "learn",
    "go",
    "learn",
    "instructions",
    "give",
    "computer",
    "lesson",
    "want",
    "kind",
    "show",
    "guys",
    "basics",
    "right",
    "essentially",
    "define",
    "little",
    "instructions",
    "computer",
    "computer",
    "execute",
    "order",
    "tutorial",
    "want",
    "talk",
    "guys",
    "using",
    "variables",
    "python",
    "python",
    "going",
    "dealing",
    "lot",
    "data",
    "lot",
    "times",
    "program",
    "going",
    "working",
    "types",
    "information",
    "data",
    "values",
    "sometimes",
    "data",
    "difficult",
    "manage",
    "python",
    "thing",
    "called",
    "variable",
    "basically",
    "container",
    "store",
    "certain",
    "data",
    "values",
    "use",
    "variable",
    "put",
    "data",
    "values",
    "inside",
    "containers",
    "makes",
    "lot",
    "easier",
    "us",
    "work",
    "manage",
    "different",
    "data",
    "inside",
    "programs",
    "variables",
    "extremely",
    "helpful",
    "sort",
    "like",
    "core",
    "topic",
    "python",
    "really",
    "going",
    "want",
    "know",
    "master",
    "tutorial",
    "going",
    "teach",
    "guys",
    "everything",
    "need",
    "know",
    "get",
    "started",
    "variables",
    "going",
    "look",
    "useful",
    "look",
    "different",
    "types",
    "variables",
    "different",
    "types",
    "data",
    "store",
    "inside",
    "variables",
    "python",
    "file",
    "simple",
    "program",
    "basically",
    "printing",
    "text",
    "onto",
    "screen",
    "actually",
    "little",
    "story",
    "wrote",
    "says",
    "man",
    "named",
    "george",
    "70",
    "years",
    "old",
    "really",
    "liked",
    "name",
    "george",
    "like",
    "valid",
    "python",
    "program",
    "could",
    "go",
    "ahead",
    "run",
    "program",
    "see",
    "console",
    "everything",
    "prints",
    "looks",
    "great",
    "awesome",
    "little",
    "python",
    "program",
    "let",
    "say",
    "inside",
    "story",
    "wanted",
    "change",
    "character",
    "name",
    "instead",
    "naming",
    "character",
    "george",
    "let",
    "say",
    "wanted",
    "name",
    "character",
    "john",
    "well",
    "going",
    "go",
    "going",
    "manually",
    "change",
    "name",
    "george",
    "name",
    "john",
    "every",
    "place",
    "inside",
    "story",
    "mentioned",
    "going",
    "go",
    "say",
    "okay",
    "john",
    "going",
    "manually",
    "change",
    "okay",
    "gon",
    "na",
    "manually",
    "type",
    "john",
    "change",
    "john",
    "order",
    "change",
    "character",
    "name",
    "manually",
    "go",
    "change",
    "places",
    "let",
    "say",
    "okay",
    "maybe",
    "want",
    "change",
    "character",
    "name",
    "age",
    "also",
    "addition",
    "changing",
    "name",
    "also",
    "want",
    "change",
    "age",
    "let",
    "make",
    "little",
    "bit",
    "younger",
    "say",
    "john",
    "going",
    "see",
    "come",
    "manually",
    "change",
    "age",
    "come",
    "manually",
    "change",
    "right",
    "changed",
    "like",
    "going",
    "work",
    "going",
    "updated",
    "program",
    "notice",
    "order",
    "make",
    "change",
    "like",
    "look",
    "entire",
    "program",
    "find",
    "value",
    "change",
    "four",
    "lines",
    "story",
    "imagine",
    "story",
    "like",
    "thousands",
    "lines",
    "long",
    "mentioned",
    "character",
    "name",
    "age",
    "like",
    "hundreds",
    "times",
    "mean",
    "look",
    "one",
    "lines",
    "manually",
    "change",
    "character",
    "name",
    "good",
    "way",
    "us",
    "really",
    "good",
    "way",
    "us",
    "manage",
    "data",
    "program",
    "right",
    "character",
    "name",
    "age",
    "actually",
    "use",
    "variable",
    "order",
    "store",
    "character",
    "name",
    "character",
    "age",
    "use",
    "variable",
    "make",
    "lot",
    "easier",
    "us",
    "put",
    "character",
    "name",
    "age",
    "inside",
    "little",
    "program",
    "going",
    "show",
    "guys",
    "create",
    "variable",
    "character",
    "name",
    "age",
    "going",
    "go",
    "print",
    "statement",
    "want",
    "create",
    "variable",
    "create",
    "variable",
    "python",
    "actually",
    "need",
    "give",
    "python",
    "couple",
    "pieces",
    "information",
    "first",
    "piece",
    "information",
    "need",
    "give",
    "python",
    "name",
    "variable",
    "need",
    "actually",
    "assign",
    "name",
    "container",
    "going",
    "storing",
    "information",
    "type",
    "name",
    "variable",
    "want",
    "create",
    "going",
    "create",
    "variable",
    "called",
    "character",
    "name",
    "going",
    "say",
    "character",
    "going",
    "say",
    "underscore",
    "name",
    "generally",
    "creating",
    "name",
    "variable",
    "python",
    "want",
    "separate",
    "different",
    "words",
    "underscore",
    "two",
    "words",
    "separating",
    "underscore",
    "need",
    "need",
    "put",
    "value",
    "inside",
    "variable",
    "basically",
    "say",
    "equals",
    "type",
    "value",
    "going",
    "type",
    "character",
    "name",
    "inside",
    "quotation",
    "marks",
    "going",
    "type",
    "john",
    "variable",
    "character",
    "name",
    "character",
    "name",
    "variable",
    "want",
    "create",
    "another",
    "variable",
    "called",
    "character",
    "age",
    "going",
    "type",
    "character",
    "underscore",
    "age",
    "going",
    "set",
    "equal",
    "character",
    "age",
    "two",
    "variables",
    "one",
    "representing",
    "character",
    "name",
    "one",
    "representing",
    "character",
    "age",
    "replace",
    "character",
    "name",
    "inside",
    "story",
    "variable",
    "going",
    "show",
    "guys",
    "want",
    "put",
    "variable",
    "inside",
    "print",
    "statement",
    "actually",
    "going",
    "couple",
    "things",
    "first",
    "thing",
    "going",
    "end",
    "text",
    "going",
    "put",
    "quotation",
    "marks",
    "end",
    "see",
    "basically",
    "wrapping",
    "whole",
    "thing",
    "single",
    "like",
    "quoted",
    "line",
    "also",
    "text",
    "end",
    "going",
    "put",
    "quotation",
    "mark",
    "bunch",
    "text",
    "quotation",
    "marks",
    "also",
    "text",
    "quotation",
    "marks",
    "inside",
    "instead",
    "saying",
    "character",
    "name",
    "want",
    "refer",
    "character",
    "name",
    "variable",
    "going",
    "say",
    "plus",
    "character",
    "underscore",
    "name",
    "want",
    "say",
    "another",
    "plus",
    "sign",
    "basically",
    "saying",
    "want",
    "print",
    "text",
    "plus",
    "value",
    "stored",
    "inside",
    "character",
    "name",
    "plus",
    "text",
    "actually",
    "print",
    "character",
    "name",
    "print",
    "going",
    "go",
    "ahead",
    "run",
    "program",
    "see",
    "actually",
    "let",
    "put",
    "space",
    "run",
    "see",
    "still",
    "printing",
    "man",
    "named",
    "john",
    "python",
    "executes",
    "line",
    "code",
    "coming",
    "seeing",
    "okay",
    "want",
    "print",
    "value",
    "inside",
    "character",
    "name",
    "python",
    "going",
    "go",
    "going",
    "get",
    "value",
    "going",
    "insert",
    "inside",
    "basically",
    "every",
    "instance",
    "character",
    "name",
    "file",
    "know",
    "copy",
    "guy",
    "right",
    "paste",
    "character",
    "name",
    "paste",
    "see",
    "exactly",
    "thing",
    "also",
    "character",
    "age",
    "going",
    "come",
    "paste",
    "paste",
    "going",
    "change",
    "instead",
    "character",
    "name",
    "change",
    "character",
    "age",
    "going",
    "one",
    "spot",
    "going",
    "mentioning",
    "age",
    "change",
    "character",
    "age",
    "run",
    "program",
    "going",
    "print",
    "story",
    "printing",
    "actually",
    "type",
    "character",
    "name",
    "character",
    "age",
    "refer",
    "variable",
    "cool",
    "thing",
    "variables",
    "wanted",
    "change",
    "character",
    "name",
    "change",
    "could",
    "change",
    "character",
    "name",
    "like",
    "tom",
    "something",
    "could",
    "also",
    "change",
    "age",
    "could",
    "change",
    "age",
    "like",
    "going",
    "automatically",
    "update",
    "throughout",
    "entire",
    "story",
    "click",
    "play",
    "button",
    "see",
    "using",
    "name",
    "tom",
    "50",
    "years",
    "old",
    "variables",
    "come",
    "handy",
    "really",
    "awesome",
    "way",
    "control",
    "manage",
    "data",
    "inside",
    "programs",
    "variables",
    "also",
    "modify",
    "values",
    "example",
    "let",
    "say",
    "halfway",
    "story",
    "wanted",
    "change",
    "character",
    "name",
    "well",
    "make",
    "new",
    "lines",
    "actually",
    "assign",
    "new",
    "value",
    "one",
    "variables",
    "could",
    "say",
    "like",
    "character",
    "underscore",
    "name",
    "order",
    "give",
    "different",
    "value",
    "say",
    "equals",
    "give",
    "different",
    "value",
    "let",
    "say",
    "halfway",
    "story",
    "want",
    "change",
    "character",
    "name",
    "mike",
    "well",
    "run",
    "program",
    "see",
    "first",
    "part",
    "story",
    "says",
    "man",
    "named",
    "tom",
    "second",
    "part",
    "story",
    "referring",
    "name",
    "mike",
    "actually",
    "updated",
    "variable",
    "inside",
    "program",
    "really",
    "awesome",
    "way",
    "know",
    "lot",
    "times",
    "programs",
    "going",
    "want",
    "modifying",
    "values",
    "variables",
    "like",
    "finally",
    "want",
    "talk",
    "guys",
    "different",
    "types",
    "data",
    "store",
    "inside",
    "variables",
    "character",
    "name",
    "character",
    "age",
    "actually",
    "storing",
    "called",
    "strings",
    "string",
    "basically",
    "plain",
    "text",
    "right",
    "name",
    "tom",
    "plain",
    "text",
    "guys",
    "strings",
    "well",
    "data",
    "type",
    "python",
    "called",
    "string",
    "basically",
    "going",
    "store",
    "plain",
    "text",
    "know",
    "text",
    "would",
    "like",
    "story",
    "know",
    "someone",
    "name",
    "store",
    "inside",
    "string",
    "also",
    "another",
    "type",
    "data",
    "store",
    "inside",
    "python",
    "numbers",
    "addition",
    "storing",
    "text",
    "also",
    "store",
    "numbers",
    "wanted",
    "store",
    "number",
    "example",
    "let",
    "say",
    "want",
    "store",
    "character",
    "age",
    "instead",
    "inside",
    "string",
    "could",
    "store",
    "inside",
    "number",
    "could",
    "type",
    "storing",
    "number",
    "need",
    "quotation",
    "marks",
    "need",
    "quotation",
    "mark",
    "storing",
    "string",
    "want",
    "store",
    "number",
    "write",
    "like",
    "addition",
    "using",
    "whole",
    "numbers",
    "could",
    "also",
    "use",
    "decimal",
    "numbers",
    "could",
    "say",
    "like",
    "python",
    "going",
    "able",
    "store",
    "number",
    "well",
    "store",
    "different",
    "types",
    "numbers",
    "also",
    "store",
    "called",
    "boolean",
    "value",
    "boolean",
    "value",
    "essentially",
    "true",
    "false",
    "value",
    "lot",
    "instances",
    "programming",
    "going",
    "want",
    "represent",
    "true",
    "false",
    "data",
    "example",
    "could",
    "variable",
    "called",
    "like",
    "mail",
    "would",
    "tell",
    "whether",
    "someone",
    "male",
    "case",
    "would",
    "true",
    "guy",
    "right",
    "actually",
    "needs",
    "capital",
    "could",
    "sort",
    "value",
    "either",
    "true",
    "false",
    "actually",
    "naming",
    "python",
    "want",
    "use",
    "underscore",
    "would",
    "say",
    "underscore",
    "mail",
    "either",
    "true",
    "false",
    "true",
    "false",
    "values",
    "maybe",
    "something",
    "used",
    "dealing",
    "like",
    "real",
    "world",
    "programming",
    "going",
    "using",
    "true",
    "false",
    "values",
    "time",
    "super",
    "important",
    "like",
    "said",
    "three",
    "basic",
    "types",
    "data",
    "work",
    "python",
    "strings",
    "like",
    "plain",
    "text",
    "numbers",
    "would",
    "like",
    "either",
    "decimal",
    "numbers",
    "whole",
    "numbers",
    "like",
    "true",
    "false",
    "values",
    "basic",
    "types",
    "data",
    "mean",
    "bunch",
    "types",
    "data",
    "use",
    "would",
    "say",
    "99",
    "time",
    "new",
    "user",
    "new",
    "programmer",
    "python",
    "going",
    "dealing",
    "three",
    "types",
    "data",
    "basics",
    "data",
    "also",
    "variables",
    "going",
    "using",
    "variables",
    "time",
    "python",
    "definitely",
    "want",
    "practice",
    "get",
    "comfortable",
    "using",
    "tutorial",
    "want",
    "talk",
    "guys",
    "working",
    "strings",
    "python",
    "one",
    "common",
    "types",
    "data",
    "going",
    "working",
    "python",
    "going",
    "strings",
    "strings",
    "basically",
    "plain",
    "text",
    "text",
    "want",
    "inside",
    "program",
    "store",
    "inside",
    "string",
    "want",
    "talk",
    "guys",
    "cool",
    "things",
    "strings",
    "basically",
    "going",
    "get",
    "full",
    "introduction",
    "strings",
    "awesome",
    "going",
    "actually",
    "print",
    "string",
    "going",
    "say",
    "print",
    "inside",
    "parentheses",
    "type",
    "string",
    "order",
    "create",
    "string",
    "need",
    "use",
    "quotation",
    "marks",
    "make",
    "open",
    "close",
    "quotation",
    "marks",
    "like",
    "inside",
    "quotation",
    "mark",
    "put",
    "whatever",
    "text",
    "want",
    "string",
    "could",
    "say",
    "like",
    "draft",
    "academy",
    "string",
    "text",
    "draft",
    "academy",
    "inside",
    "run",
    "program",
    "going",
    "print",
    "draft",
    "academy",
    "see",
    "strings",
    "actually",
    "bunch",
    "cool",
    "things",
    "one",
    "thing",
    "could",
    "would",
    "create",
    "new",
    "line",
    "inside",
    "string",
    "want",
    "come",
    "could",
    "say",
    "backslash",
    "see",
    "got",
    "highlighted",
    "different",
    "color",
    "going",
    "actually",
    "going",
    "insert",
    "new",
    "line",
    "string",
    "going",
    "say",
    "draft",
    "one",
    "line",
    "academy",
    "another",
    "line",
    "going",
    "click",
    "play",
    "see",
    "get",
    "draft",
    "academy",
    "addition",
    "backslash",
    "n",
    "could",
    "also",
    "use",
    "backslash",
    "quotation",
    "mark",
    "wanted",
    "put",
    "quotation",
    "mark",
    "inside",
    "string",
    "ca",
    "put",
    "quotation",
    "mark",
    "like",
    "python",
    "going",
    "think",
    "trying",
    "end",
    "string",
    "want",
    "include",
    "quotation",
    "mark",
    "use",
    "special",
    "backslash",
    "character",
    "called",
    "escape",
    "character",
    "basically",
    "tells",
    "python",
    "whatever",
    "character",
    "comes",
    "want",
    "render",
    "literally",
    "say",
    "backslash",
    "quotation",
    "mark",
    "basically",
    "means",
    "like",
    "hey",
    "python",
    "want",
    "print",
    "quotation",
    "mark",
    "able",
    "print",
    "quotation",
    "mark",
    "right",
    "also",
    "use",
    "print",
    "backslash",
    "needed",
    "print",
    "backslash",
    "could",
    "say",
    "backslash",
    "print",
    "normal",
    "backslash",
    "see",
    "like",
    "want",
    "use",
    "backslash",
    "make",
    "new",
    "lines",
    "print",
    "quotation",
    "marks",
    "use",
    "normal",
    "backslash",
    "addition",
    "typing",
    "string",
    "could",
    "also",
    "create",
    "string",
    "variable",
    "could",
    "come",
    "create",
    "variable",
    "call",
    "phrase",
    "going",
    "set",
    "equal",
    "draft",
    "academy",
    "store",
    "string",
    "value",
    "inside",
    "variable",
    "called",
    "phrase",
    "want",
    "print",
    "variable",
    "want",
    "access",
    "string",
    "variable",
    "type",
    "name",
    "variable",
    "see",
    "going",
    "print",
    "value",
    "stored",
    "inside",
    "also",
    "use",
    "something",
    "called",
    "concatenation",
    "concatenation",
    "basically",
    "process",
    "taking",
    "string",
    "appending",
    "another",
    "string",
    "onto",
    "could",
    "come",
    "could",
    "say",
    "phrase",
    "say",
    "plus",
    "add",
    "another",
    "string",
    "could",
    "say",
    "like",
    "cool",
    "going",
    "say",
    "draft",
    "academy",
    "cool",
    "basically",
    "appending",
    "another",
    "string",
    "onto",
    "another",
    "one",
    "call",
    "concatenation",
    "addition",
    "stuff",
    "also",
    "use",
    "special",
    "things",
    "called",
    "functions",
    "function",
    "basically",
    "little",
    "block",
    "code",
    "run",
    "perform",
    "specific",
    "operation",
    "us",
    "use",
    "functions",
    "modify",
    "strings",
    "also",
    "use",
    "functions",
    "get",
    "information",
    "strings",
    "going",
    "show",
    "guys",
    "couple",
    "common",
    "functions",
    "use",
    "strings",
    "actually",
    "going",
    "awesome",
    "stuff",
    "order",
    "access",
    "one",
    "functions",
    "say",
    "phrase",
    "say",
    "dot",
    "going",
    "show",
    "guys",
    "function",
    "use",
    "convert",
    "string",
    "entirely",
    "lower",
    "case",
    "could",
    "say",
    "phrase",
    "dot",
    "lower",
    "going",
    "want",
    "type",
    "open",
    "close",
    "parentheses",
    "take",
    "phrase",
    "take",
    "string",
    "convert",
    "lowercase",
    "see",
    "draft",
    "academy",
    "entirely",
    "lowercase",
    "could",
    "also",
    "thing",
    "uppercase",
    "could",
    "say",
    "phrase",
    "dot",
    "upper",
    "convert",
    "entire",
    "string",
    "uppercase",
    "see",
    "entirely",
    "uppercase",
    "addition",
    "converting",
    "string",
    "uppercase",
    "lowercase",
    "could",
    "also",
    "check",
    "see",
    "string",
    "entirely",
    "uppercase",
    "entirely",
    "lowercase",
    "example",
    "could",
    "say",
    "phrase",
    "dot",
    "upper",
    "going",
    "give",
    "back",
    "true",
    "false",
    "value",
    "going",
    "true",
    "string",
    "entirely",
    "uppercase",
    "false",
    "see",
    "getting",
    "false",
    "value",
    "uppercase",
    "also",
    "use",
    "functions",
    "combination",
    "example",
    "could",
    "say",
    "phrase",
    "dot",
    "upper",
    "parentheses",
    "could",
    "say",
    "dot",
    "upper",
    "going",
    "going",
    "run",
    "upper",
    "function",
    "going",
    "convert",
    "uppercase",
    "going",
    "run",
    "upper",
    "function",
    "right",
    "see",
    "going",
    "get",
    "true",
    "value",
    "back",
    "converted",
    "whole",
    "thing",
    "uppercase",
    "see",
    "getting",
    "true",
    "value",
    "use",
    "functions",
    "one",
    "another",
    "really",
    "useful",
    "ones",
    "want",
    "show",
    "also",
    "figure",
    "length",
    "string",
    "wanted",
    "figure",
    "many",
    "characters",
    "inside",
    "string",
    "could",
    "say",
    "len",
    "actually",
    "going",
    "make",
    "open",
    "parentheses",
    "going",
    "make",
    "closed",
    "parentheses",
    "essentially",
    "saying",
    "len",
    "another",
    "function",
    "length",
    "function",
    "inside",
    "len",
    "function",
    "actually",
    "passing",
    "phrase",
    "variable",
    "basically",
    "giving",
    "length",
    "function",
    "going",
    "spit",
    "number",
    "tell",
    "many",
    "characters",
    "inside",
    "string",
    "see",
    "get",
    "15",
    "15",
    "characters",
    "inside",
    "draft",
    "academy",
    "get",
    "length",
    "string",
    "going",
    "really",
    "useful",
    "go",
    "forward",
    "python",
    "also",
    "get",
    "individual",
    "characters",
    "inside",
    "string",
    "imagine",
    "wanted",
    "grab",
    "one",
    "characters",
    "like",
    "imagine",
    "wanted",
    "figure",
    "first",
    "character",
    "string",
    "actually",
    "use",
    "open",
    "closed",
    "square",
    "bracket",
    "like",
    "specify",
    "index",
    "character",
    "want",
    "grab",
    "wanted",
    "grab",
    "first",
    "character",
    "string",
    "put",
    "zero",
    "say",
    "phrase",
    "square",
    "bracket",
    "zero",
    "going",
    "give",
    "capital",
    "see",
    "gets",
    "printed",
    "want",
    "point",
    "something",
    "python",
    "working",
    "strings",
    "string",
    "gets",
    "indexed",
    "starting",
    "zero",
    "notice",
    "order",
    "access",
    "g",
    "put",
    "zero",
    "python",
    "use",
    "indexes",
    "string",
    "start",
    "zero",
    "python",
    "counting",
    "characters",
    "indexing",
    "characters",
    "string",
    "going",
    "start",
    "zero",
    "going",
    "say",
    "g",
    "zero",
    "one",
    "r",
    "two",
    "three",
    "would",
    "say",
    "g",
    "position",
    "zero",
    "string",
    "position",
    "one",
    "r",
    "position",
    "two",
    "position",
    "three",
    "etc",
    "start",
    "counting",
    "zero",
    "wanted",
    "access",
    "first",
    "character",
    "string",
    "g",
    "say",
    "phrase",
    "zero",
    "special",
    "thing",
    "python",
    "actually",
    "programming",
    "languages",
    "start",
    "zero",
    "example",
    "wanted",
    "access",
    "going",
    "put",
    "zero",
    "put",
    "three",
    "inside",
    "able",
    "access",
    "first",
    "see",
    "get",
    "right",
    "actually",
    "really",
    "useful",
    "able",
    "grab",
    "specific",
    "character",
    "inside",
    "string",
    "going",
    "using",
    "lot",
    "go",
    "forward",
    "python",
    "also",
    "another",
    "really",
    "awesome",
    "function",
    "use",
    "called",
    "index",
    "function",
    "basically",
    "index",
    "function",
    "tell",
    "us",
    "specific",
    "character",
    "string",
    "located",
    "inside",
    "string",
    "could",
    "say",
    "phrase",
    "dot",
    "index",
    "actually",
    "give",
    "value",
    "sometimes",
    "use",
    "functions",
    "python",
    "actually",
    "give",
    "information",
    "give",
    "value",
    "would",
    "call",
    "passing",
    "parameter",
    "would",
    "call",
    "value",
    "would",
    "give",
    "function",
    "parameter",
    "hear",
    "word",
    "lot",
    "example",
    "could",
    "say",
    "inside",
    "capital",
    "going",
    "return",
    "index",
    "capital",
    "g",
    "inside",
    "string",
    "give",
    "us",
    "back",
    "zero",
    "g",
    "zero",
    "index",
    "see",
    "get",
    "zero",
    "g",
    "example",
    "put",
    "inside",
    "like",
    "lowercase",
    "give",
    "0123",
    "first",
    "inside",
    "string",
    "click",
    "play",
    "button",
    "see",
    "giving",
    "us",
    "three",
    "also",
    "put",
    "actual",
    "words",
    "example",
    "could",
    "put",
    "like",
    "academy",
    "could",
    "even",
    "put",
    "like",
    "c",
    "going",
    "tell",
    "starts",
    "inside",
    "string",
    "click",
    "play",
    "going",
    "give",
    "eight",
    "academy",
    "starts",
    "right",
    "put",
    "something",
    "string",
    "example",
    "put",
    "z",
    "actually",
    "going",
    "throw",
    "error",
    "play",
    "see",
    "get",
    "error",
    "z",
    "found",
    "inside",
    "program",
    "index",
    "function",
    "really",
    "useful",
    "using",
    "lot",
    "also",
    "one",
    "want",
    "show",
    "called",
    "replace",
    "say",
    "phrase",
    "dot",
    "replace",
    "actually",
    "give",
    "parameters",
    "give",
    "replace",
    "function",
    "values",
    "use",
    "first",
    "thing",
    "want",
    "give",
    "want",
    "replace",
    "example",
    "could",
    "say",
    "draft",
    "going",
    "put",
    "comma",
    "want",
    "put",
    "want",
    "replace",
    "draft",
    "could",
    "say",
    "like",
    "elephant",
    "instead",
    "saying",
    "draft",
    "academy",
    "going",
    "print",
    "elephant",
    "academy",
    "see",
    "says",
    "elephant",
    "academy",
    "replace",
    "function",
    "really",
    "awesome",
    "replace",
    "certain",
    "words",
    "even",
    "certain",
    "letters",
    "inside",
    "strings",
    "ones",
    "basic",
    "ways",
    "work",
    "strings",
    "inside",
    "python",
    "lot",
    "different",
    "functions",
    "use",
    "strings",
    "common",
    "ones",
    "showed",
    "right",
    "google",
    "search",
    "find",
    "sorts",
    "python",
    "functions",
    "try",
    "use",
    "know",
    "see",
    "definitely",
    "want",
    "get",
    "comfortable",
    "working",
    "strings",
    "python",
    "going",
    "working",
    "lot",
    "tutorial",
    "want",
    "talk",
    "working",
    "numbers",
    "python",
    "numbers",
    "one",
    "common",
    "data",
    "types",
    "python",
    "python",
    "program",
    "write",
    "likely",
    "going",
    "dealing",
    "numbers",
    "point",
    "want",
    "talk",
    "guys",
    "basics",
    "using",
    "numbers",
    "going",
    "talk",
    "different",
    "types",
    "numbers",
    "represent",
    "python",
    "also",
    "want",
    "show",
    "guys",
    "awesome",
    "functions",
    "use",
    "numbers",
    "certain",
    "like",
    "mathematical",
    "operations",
    "awesome",
    "things",
    "numbers",
    "going",
    "show",
    "guys",
    "video",
    "going",
    "awesome",
    "first",
    "thing",
    "actually",
    "like",
    "print",
    "number",
    "want",
    "write",
    "number",
    "python",
    "really",
    "easy",
    "basically",
    "write",
    "number",
    "could",
    "say",
    "like",
    "print",
    "two",
    "going",
    "print",
    "number",
    "two",
    "onto",
    "screen",
    "use",
    "whole",
    "number",
    "like",
    "could",
    "also",
    "use",
    "decimal",
    "number",
    "could",
    "say",
    "like",
    "python",
    "going",
    "fine",
    "able",
    "print",
    "screen",
    "well",
    "also",
    "make",
    "numbers",
    "negative",
    "could",
    "make",
    "negative",
    "number",
    "python",
    "able",
    "handle",
    "fine",
    "python",
    "also",
    "use",
    "basic",
    "arithmetic",
    "could",
    "things",
    "like",
    "addition",
    "subtraction",
    "multiplication",
    "could",
    "say",
    "like",
    "three",
    "plus",
    "four",
    "going",
    "print",
    "say",
    "like",
    "three",
    "plus",
    "able",
    "print",
    "answer",
    "get",
    "addition",
    "subtraction",
    "division",
    "could",
    "like",
    "multiplication",
    "well",
    "pretty",
    "much",
    "whatever",
    "want",
    "inside",
    "python",
    "want",
    "make",
    "complex",
    "mathematical",
    "equations",
    "also",
    "use",
    "things",
    "specify",
    "order",
    "operations",
    "could",
    "use",
    "parentheses",
    "example",
    "said",
    "three",
    "times",
    "four",
    "plus",
    "five",
    "python",
    "going",
    "going",
    "multiply",
    "three",
    "four",
    "together",
    "going",
    "add",
    "five",
    "get",
    "let",
    "say",
    "wanted",
    "change",
    "order",
    "right",
    "could",
    "actually",
    "put",
    "parentheses",
    "around",
    "four",
    "five",
    "going",
    "add",
    "first",
    "add",
    "four",
    "five",
    "get",
    "nine",
    "multiply",
    "times",
    "three",
    "end",
    "see",
    "use",
    "parentheses",
    "specify",
    "order",
    "operations",
    "could",
    "make",
    "like",
    "complex",
    "little",
    "equation",
    "using",
    "numbers",
    "parentheses",
    "also",
    "use",
    "one",
    "operation",
    "called",
    "modulus",
    "operator",
    "could",
    "say",
    "like",
    "10",
    "use",
    "percent",
    "sign",
    "three",
    "actually",
    "read",
    "10",
    "mod",
    "three",
    "basically",
    "going",
    "going",
    "take",
    "first",
    "number",
    "divided",
    "second",
    "number",
    "going",
    "spit",
    "remainder",
    "basically",
    "going",
    "say",
    "okay",
    "10",
    "divided",
    "three",
    "going",
    "three",
    "remainder",
    "one",
    "going",
    "give",
    "us",
    "remainder",
    "see",
    "get",
    "one",
    "remainder",
    "10",
    "divided",
    "three",
    "modulus",
    "operator",
    "come",
    "handy",
    "quite",
    "bit",
    "also",
    "store",
    "numbers",
    "inside",
    "variables",
    "store",
    "inside",
    "variable",
    "containers",
    "could",
    "come",
    "could",
    "create",
    "variable",
    "called",
    "like",
    "underscore",
    "num",
    "store",
    "value",
    "let",
    "say",
    "like",
    "five",
    "could",
    "come",
    "print",
    "underscore",
    "num",
    "able",
    "print",
    "number",
    "screen",
    "fine",
    "addition",
    "things",
    "like",
    "basic",
    "arithmetic",
    "also",
    "stuff",
    "one",
    "thing",
    "could",
    "could",
    "actually",
    "convert",
    "number",
    "string",
    "wanted",
    "convert",
    "number",
    "string",
    "say",
    "str",
    "put",
    "number",
    "want",
    "convert",
    "inside",
    "parentheses",
    "going",
    "happen",
    "number",
    "going",
    "converted",
    "string",
    "click",
    "run",
    "button",
    "see",
    "printing",
    "five",
    "instead",
    "number",
    "actually",
    "string",
    "going",
    "come",
    "handy",
    "want",
    "print",
    "numbers",
    "alongside",
    "strings",
    "come",
    "say",
    "like",
    "favorite",
    "number",
    "able",
    "print",
    "number",
    "along",
    "string",
    "click",
    "play",
    "says",
    "five",
    "favorite",
    "number",
    "get",
    "rid",
    "string",
    "right",
    "converting",
    "number",
    "string",
    "python",
    "going",
    "problem",
    "going",
    "allow",
    "us",
    "see",
    "get",
    "error",
    "anytime",
    "want",
    "print",
    "number",
    "next",
    "string",
    "got",
    "make",
    "sure",
    "use",
    "little",
    "string",
    "function",
    "bunch",
    "stuff",
    "numbers",
    "lot",
    "times",
    "python",
    "going",
    "want",
    "using",
    "specific",
    "like",
    "advanced",
    "math",
    "operators",
    "bunch",
    "different",
    "math",
    "functions",
    "use",
    "numbers",
    "function",
    "basically",
    "like",
    "little",
    "collection",
    "code",
    "something",
    "function",
    "could",
    "perform",
    "operation",
    "like",
    "mathematical",
    "operation",
    "number",
    "could",
    "also",
    "give",
    "us",
    "information",
    "number",
    "going",
    "show",
    "guys",
    "common",
    "functions",
    "using",
    "python",
    "related",
    "numbers",
    "first",
    "one",
    "called",
    "abs",
    "stands",
    "absolute",
    "value",
    "get",
    "absolute",
    "value",
    "number",
    "going",
    "make",
    "variable",
    "negative",
    "five",
    "basically",
    "say",
    "abs",
    "make",
    "open",
    "closed",
    "parentheses",
    "going",
    "give",
    "absolute",
    "value",
    "number",
    "click",
    "play",
    "button",
    "see",
    "giving",
    "us",
    "five",
    "five",
    "absolute",
    "value",
    "negative",
    "five",
    "use",
    "functions",
    "another",
    "one",
    "called",
    "pow",
    "pow",
    "actually",
    "going",
    "use",
    "variable",
    "use",
    "normal",
    "number",
    "function",
    "going",
    "allow",
    "us",
    "pass",
    "two",
    "pieces",
    "information",
    "give",
    "function",
    "two",
    "pieces",
    "information",
    "first",
    "going",
    "like",
    "number",
    "second",
    "going",
    "power",
    "want",
    "take",
    "number",
    "could",
    "say",
    "like",
    "three",
    "comma",
    "two",
    "basically",
    "going",
    "three",
    "raised",
    "power",
    "two",
    "going",
    "three",
    "squared",
    "get",
    "nine",
    "see",
    "could",
    "pass",
    "like",
    "know",
    "crazy",
    "number",
    "like",
    "could",
    "pass",
    "four",
    "could",
    "raise",
    "power",
    "six",
    "get",
    "like",
    "pretty",
    "big",
    "number",
    "see",
    "get",
    "pow",
    "function",
    "really",
    "useful",
    "taking",
    "numbers",
    "specific",
    "powers",
    "addition",
    "using",
    "pow",
    "function",
    "also",
    "use",
    "another",
    "function",
    "called",
    "max",
    "say",
    "max",
    "going",
    "basically",
    "going",
    "return",
    "larger",
    "two",
    "numbers",
    "pass",
    "right",
    "giving",
    "four",
    "six",
    "tell",
    "us",
    "number",
    "higher",
    "printing",
    "six",
    "bigger",
    "number",
    "also",
    "use",
    "another",
    "function",
    "called",
    "min",
    "going",
    "opposite",
    "instead",
    "printing",
    "max",
    "number",
    "going",
    "print",
    "smallest",
    "number",
    "going",
    "print",
    "four",
    "see",
    "another",
    "cool",
    "function",
    "called",
    "round",
    "function",
    "going",
    "allow",
    "us",
    "round",
    "number",
    "going",
    "follow",
    "like",
    "standard",
    "rounding",
    "rules",
    "said",
    "like",
    "inside",
    "going",
    "round",
    "normal",
    "three",
    "said",
    "like",
    "going",
    "round",
    "four",
    "allow",
    "round",
    "number",
    "functions",
    "want",
    "show",
    "guys",
    "order",
    "get",
    "access",
    "actually",
    "going",
    "something",
    "called",
    "importing",
    "python",
    "actually",
    "import",
    "external",
    "code",
    "files",
    "want",
    "access",
    "specific",
    "math",
    "functions",
    "import",
    "something",
    "called",
    "python",
    "math",
    "say",
    "math",
    "import",
    "star",
    "basically",
    "going",
    "going",
    "go",
    "going",
    "grab",
    "bunch",
    "different",
    "math",
    "functions",
    "use",
    "already",
    "showed",
    "guys",
    "different",
    "math",
    "functions",
    "actually",
    "bunch",
    "order",
    "access",
    "going",
    "need",
    "include",
    "line",
    "code",
    "inside",
    "file",
    "access",
    "others",
    "another",
    "function",
    "called",
    "floor",
    "method",
    "flor",
    "basically",
    "grab",
    "lowest",
    "number",
    "essentially",
    "going",
    "chop",
    "decimal",
    "point",
    "see",
    "get",
    "three",
    "using",
    "floor",
    "function",
    "also",
    "another",
    "one",
    "called",
    "seal",
    "going",
    "exact",
    "opposite",
    "going",
    "round",
    "number",
    "matter",
    "matter",
    "always",
    "get",
    "four",
    "three",
    "point",
    "whatever",
    "another",
    "one",
    "called",
    "square",
    "root",
    "sqrt",
    "essentially",
    "going",
    "return",
    "square",
    "root",
    "number",
    "could",
    "say",
    "like",
    "get",
    "six",
    "back",
    "awesome",
    "interesting",
    "functions",
    "inside",
    "math",
    "module",
    "would",
    "call",
    "module",
    "worry",
    "much",
    "right",
    "know",
    "put",
    "line",
    "code",
    "program",
    "gives",
    "us",
    "access",
    "lot",
    "math",
    "function",
    "basically",
    "allows",
    "us",
    "lot",
    "things",
    "math",
    "inside",
    "program",
    "bunch",
    "different",
    "math",
    "functions",
    "python",
    "want",
    "basically",
    "go",
    "online",
    "search",
    "different",
    "math",
    "functions",
    "showed",
    "guys",
    "would",
    "say",
    "ones",
    "looked",
    "probably",
    "commonly",
    "used",
    "bunch",
    "like",
    "said",
    "know",
    "tons",
    "documentation",
    "stuff",
    "look",
    "know",
    "math",
    "functions",
    "python",
    "going",
    "tons",
    "tons",
    "like",
    "lists",
    "things",
    "use",
    "inside",
    "programs",
    "perform",
    "different",
    "math",
    "operations",
    "little",
    "bit",
    "using",
    "numbers",
    "little",
    "bit",
    "know",
    "certain",
    "math",
    "operations",
    "using",
    "functions",
    "numbers",
    "tutorial",
    "going",
    "show",
    "get",
    "input",
    "user",
    "basically",
    "going",
    "allow",
    "user",
    "input",
    "information",
    "program",
    "actually",
    "going",
    "take",
    "information",
    "user",
    "inputs",
    "going",
    "store",
    "inside",
    "variable",
    "going",
    "able",
    "something",
    "variable",
    "want",
    "show",
    "guys",
    "actually",
    "go",
    "getting",
    "input",
    "someone",
    "python",
    "file",
    "get",
    "input",
    "someone",
    "type",
    "input",
    "open",
    "closed",
    "parentheses",
    "basically",
    "going",
    "going",
    "tell",
    "python",
    "like",
    "hey",
    "want",
    "get",
    "input",
    "user",
    "python",
    "allow",
    "user",
    "type",
    "information",
    "inside",
    "parentheses",
    "actually",
    "type",
    "prompt",
    "generally",
    "want",
    "user",
    "enter",
    "information",
    "want",
    "tell",
    "want",
    "enter",
    "put",
    "inside",
    "going",
    "say",
    "enter",
    "name",
    "actually",
    "going",
    "create",
    "little",
    "python",
    "app",
    "going",
    "allow",
    "user",
    "enter",
    "name",
    "store",
    "name",
    "inside",
    "variable",
    "basically",
    "say",
    "hi",
    "user",
    "say",
    "like",
    "hi",
    "whatever",
    "name",
    "entered",
    "want",
    "actually",
    "want",
    "store",
    "whatever",
    "user",
    "inputted",
    "program",
    "inside",
    "variable",
    "actually",
    "go",
    "create",
    "variable",
    "could",
    "call",
    "name",
    "could",
    "set",
    "variable",
    "equal",
    "input",
    "taking",
    "value",
    "user",
    "inputs",
    "storing",
    "inside",
    "variable",
    "container",
    "called",
    "name",
    "access",
    "whatever",
    "entered",
    "say",
    "print",
    "inside",
    "parentheses",
    "print",
    "hello",
    "going",
    "add",
    "name",
    "actually",
    "put",
    "exclamation",
    "point",
    "essentially",
    "getting",
    "name",
    "user",
    "storing",
    "inside",
    "name",
    "variable",
    "printing",
    "onto",
    "screen",
    "going",
    "go",
    "ahead",
    "play",
    "run",
    "program",
    "notice",
    "python",
    "giving",
    "us",
    "little",
    "prompt",
    "saying",
    "enter",
    "name",
    "actually",
    "type",
    "value",
    "type",
    "mike",
    "hit",
    "enter",
    "python",
    "going",
    "go",
    "ahead",
    "store",
    "value",
    "inside",
    "variable",
    "going",
    "print",
    "hello",
    "mike",
    "kind",
    "cool",
    "actually",
    "could",
    "could",
    "prompt",
    "user",
    "enter",
    "one",
    "piece",
    "information",
    "could",
    "actually",
    "copy",
    "line",
    "code",
    "going",
    "paste",
    "user",
    "enter",
    "another",
    "variable",
    "could",
    "enter",
    "example",
    "age",
    "want",
    "say",
    "enter",
    "age",
    "able",
    "get",
    "two",
    "pieces",
    "information",
    "user",
    "could",
    "say",
    "hello",
    "name",
    "say",
    "print",
    "age",
    "going",
    "print",
    "age",
    "basically",
    "able",
    "get",
    "pieces",
    "information",
    "user",
    "get",
    "name",
    "get",
    "age",
    "run",
    "program",
    "type",
    "pieces",
    "information",
    "say",
    "answer",
    "name",
    "could",
    "make",
    "name",
    "like",
    "john",
    "enter",
    "age",
    "let",
    "say",
    "john",
    "going",
    "say",
    "hello",
    "john",
    "program",
    "able",
    "get",
    "input",
    "user",
    "able",
    "use",
    "information",
    "order",
    "say",
    "hi",
    "user",
    "tell",
    "old",
    "getting",
    "input",
    "user",
    "great",
    "way",
    "make",
    "programs",
    "interactive",
    "scratching",
    "surface",
    "right",
    "basically",
    "getting",
    "know",
    "piece",
    "information",
    "user",
    "use",
    "inputs",
    "awesome",
    "things",
    "python",
    "go",
    "course",
    "going",
    "see",
    "really",
    "cool",
    "things",
    "inputs",
    "tutorial",
    "going",
    "show",
    "build",
    "basic",
    "calculator",
    "python",
    "basically",
    "going",
    "build",
    "calculator",
    "get",
    "two",
    "numbers",
    "user",
    "add",
    "numbers",
    "together",
    "print",
    "answer",
    "onto",
    "screen",
    "let",
    "look",
    "practice",
    "getting",
    "input",
    "users",
    "also",
    "talk",
    "getting",
    "numbers",
    "users",
    "opposed",
    "strings",
    "really",
    "excited",
    "get",
    "started",
    "calculator",
    "first",
    "thing",
    "want",
    "create",
    "two",
    "variables",
    "inside",
    "variables",
    "want",
    "store",
    "two",
    "numbers",
    "user",
    "wants",
    "add",
    "together",
    "going",
    "say",
    "num",
    "one",
    "call",
    "first",
    "variable",
    "equal",
    "need",
    "get",
    "input",
    "user",
    "going",
    "say",
    "input",
    "inside",
    "parentheses",
    "going",
    "say",
    "enter",
    "number",
    "basically",
    "want",
    "exact",
    "thing",
    "second",
    "number",
    "paste",
    "guy",
    "going",
    "say",
    "num",
    "two",
    "say",
    "enter",
    "another",
    "number",
    "able",
    "store",
    "user",
    "input",
    "inside",
    "two",
    "variables",
    "want",
    "print",
    "result",
    "actually",
    "going",
    "create",
    "variable",
    "called",
    "result",
    "going",
    "say",
    "result",
    "equal",
    "basically",
    "want",
    "add",
    "two",
    "numbers",
    "together",
    "going",
    "say",
    "num",
    "one",
    "plus",
    "num",
    "two",
    "print",
    "result",
    "going",
    "print",
    "result",
    "basically",
    "entire",
    "program",
    "written",
    "allow",
    "us",
    "enter",
    "two",
    "numbers",
    "add",
    "together",
    "print",
    "answer",
    "going",
    "click",
    "play",
    "enter",
    "number",
    "going",
    "enter",
    "first",
    "number",
    "say",
    "five",
    "going",
    "enter",
    "second",
    "number",
    "let",
    "say",
    "let",
    "say",
    "print",
    "answer",
    "look",
    "quite",
    "answer",
    "looking",
    "right",
    "five",
    "plus",
    "definitely",
    "happened",
    "get",
    "input",
    "user",
    "default",
    "python",
    "going",
    "convert",
    "string",
    "matter",
    "put",
    "entering",
    "numbers",
    "python",
    "always",
    "going",
    "like",
    "okay",
    "string",
    "sounds",
    "good",
    "right",
    "going",
    "make",
    "string",
    "order",
    "us",
    "make",
    "num",
    "one",
    "num",
    "two",
    "variables",
    "numbers",
    "actually",
    "going",
    "convert",
    "strings",
    "get",
    "user",
    "numbers",
    "way",
    "basically",
    "coming",
    "add",
    "two",
    "numbers",
    "together",
    "use",
    "special",
    "python",
    "function",
    "order",
    "convert",
    "strings",
    "numbers",
    "actually",
    "two",
    "python",
    "functions",
    "could",
    "use",
    "first",
    "called",
    "int",
    "could",
    "say",
    "int",
    "make",
    "open",
    "parentheses",
    "make",
    "closed",
    "parentheses",
    "basically",
    "going",
    "going",
    "convert",
    "whatever",
    "inside",
    "open",
    "closed",
    "parentheses",
    "integer",
    "number",
    "integer",
    "number",
    "basically",
    "whole",
    "number",
    "like",
    "one",
    "two",
    "three",
    "four",
    "five",
    "whole",
    "number",
    "words",
    "ca",
    "decimal",
    "point",
    "could",
    "could",
    "say",
    "int",
    "could",
    "put",
    "inside",
    "parentheses",
    "going",
    "going",
    "convert",
    "numbers",
    "integers",
    "words",
    "whole",
    "numbers",
    "decimals",
    "going",
    "add",
    "together",
    "print",
    "results",
    "see",
    "works",
    "going",
    "click",
    "play",
    "button",
    "enter",
    "first",
    "number",
    "going",
    "enter",
    "four",
    "enter",
    "five",
    "see",
    "printing",
    "correct",
    "answer",
    "four",
    "plus",
    "five",
    "essentially",
    "basic",
    "calculator",
    "one",
    "problem",
    "calculator",
    "going",
    "run",
    "show",
    "guys",
    "problem",
    "wanted",
    "add",
    "decimal",
    "number",
    "add",
    "see",
    "getting",
    "error",
    "using",
    "int",
    "function",
    "int",
    "function",
    "looking",
    "whole",
    "number",
    "put",
    "decimal",
    "numbers",
    "inside",
    "going",
    "break",
    "program",
    "another",
    "function",
    "use",
    "instead",
    "int",
    "say",
    "float",
    "float",
    "basically",
    "number",
    "decimal",
    "decimal",
    "number",
    "convert",
    "guys",
    "floats",
    "able",
    "use",
    "decimal",
    "numbers",
    "click",
    "play",
    "enter",
    "numbers",
    "could",
    "say",
    "like",
    "four",
    "could",
    "also",
    "say",
    "like",
    "going",
    "able",
    "add",
    "numbers",
    "even",
    "one",
    "decimal",
    "beauty",
    "using",
    "little",
    "float",
    "function",
    "certain",
    "circumstances",
    "might",
    "want",
    "user",
    "able",
    "enter",
    "integer",
    "whole",
    "number",
    "lot",
    "cases",
    "like",
    "calculator",
    "want",
    "want",
    "able",
    "enter",
    "number",
    "want",
    "going",
    "use",
    "float",
    "function",
    "going",
    "recap",
    "one",
    "time",
    "created",
    "two",
    "variables",
    "num",
    "one",
    "num",
    "two",
    "basically",
    "stored",
    "two",
    "numbers",
    "users",
    "input",
    "variables",
    "converted",
    "numbers",
    "added",
    "together",
    "printed",
    "results",
    "pretty",
    "cool",
    "calculator",
    "happy",
    "hopefully",
    "guys",
    "learned",
    "something",
    "go",
    "forward",
    "python",
    "course",
    "going",
    "learn",
    "sorts",
    "ways",
    "make",
    "calculator",
    "complex",
    "tutorial",
    "want",
    "show",
    "guys",
    "build",
    "madlibs",
    "game",
    "python",
    "madlibs",
    "game",
    "basically",
    "game",
    "enter",
    "bunch",
    "random",
    "words",
    "like",
    "know",
    "verbs",
    "nouns",
    "names",
    "colors",
    "basically",
    "take",
    "words",
    "put",
    "story",
    "randomly",
    "web",
    "browser",
    "example",
    "madlibs",
    "know",
    "basically",
    "taking",
    "random",
    "words",
    "like",
    "adjective",
    "noun",
    "plural",
    "noun",
    "entering",
    "side",
    "story",
    "like",
    "read",
    "story",
    "like",
    "random",
    "word",
    "pops",
    "madlibs",
    "pretty",
    "fun",
    "sure",
    "guys",
    "know",
    "least",
    "heard",
    "madlibs",
    "little",
    "introduction",
    "want",
    "create",
    "madlibs",
    "python",
    "going",
    "really",
    "cool",
    "like",
    "little",
    "poem",
    "says",
    "roses",
    "red",
    "violets",
    "blue",
    "love",
    "know",
    "kind",
    "like",
    "classic",
    "poem",
    "think",
    "mix",
    "little",
    "bit",
    "create",
    "madlib",
    "poem",
    "instead",
    "red",
    "color",
    "want",
    "user",
    "enter",
    "color",
    "instead",
    "violets",
    "enter",
    "plural",
    "noun",
    "instead",
    "saying",
    "love",
    "say",
    "love",
    "celebrity",
    "celebrity",
    "basic",
    "structure",
    "little",
    "madlib",
    "right",
    "want",
    "basically",
    "user",
    "enter",
    "color",
    "enter",
    "plural",
    "noun",
    "enter",
    "celebrity",
    "take",
    "words",
    "put",
    "inside",
    "madlib",
    "hopefully",
    "end",
    "something",
    "pretty",
    "funny",
    "actually",
    "go",
    "building",
    "python",
    "well",
    "first",
    "thing",
    "going",
    "going",
    "able",
    "get",
    "words",
    "user",
    "right",
    "pretty",
    "obvious",
    "think",
    "create",
    "three",
    "variables",
    "called",
    "color",
    "plural",
    "noun",
    "celebrity",
    "store",
    "user",
    "inputs",
    "inside",
    "variables",
    "let",
    "create",
    "variables",
    "first",
    "variable",
    "want",
    "create",
    "going",
    "called",
    "color",
    "say",
    "color",
    "want",
    "set",
    "equal",
    "input",
    "going",
    "say",
    "input",
    "inside",
    "going",
    "give",
    "prompt",
    "say",
    "enter",
    "color",
    "basically",
    "copy",
    "line",
    "code",
    "going",
    "paste",
    "paste",
    "one",
    "time",
    "going",
    "create",
    "plural",
    "noun",
    "variable",
    "say",
    "pl",
    "url",
    "plural",
    "noun",
    "say",
    "enter",
    "plural",
    "noun",
    "actually",
    "want",
    "make",
    "colon",
    "well",
    "finally",
    "create",
    "celebrity",
    "variable",
    "say",
    "enter",
    "celebrity",
    "basically",
    "creating",
    "three",
    "variables",
    "called",
    "color",
    "plural",
    "noun",
    "celebrity",
    "inside",
    "storing",
    "color",
    "user",
    "enters",
    "plural",
    "noun",
    "user",
    "enters",
    "celebrity",
    "user",
    "enters",
    "last",
    "thing",
    "replace",
    "guys",
    "variables",
    "basically",
    "going",
    "add",
    "color",
    "going",
    "add",
    "plural",
    "noun",
    "go",
    "like",
    "finally",
    "add",
    "celebrity",
    "pretty",
    "cool",
    "mad",
    "lib",
    "functional",
    "everything",
    "work",
    "looks",
    "like",
    "good",
    "go",
    "let",
    "come",
    "run",
    "program",
    "console",
    "play",
    "little",
    "mad",
    "libs",
    "game",
    "let",
    "say",
    "enter",
    "color",
    "going",
    "say",
    "magenta",
    "enter",
    "plural",
    "noun",
    "say",
    "microwaves",
    "enter",
    "celebrity",
    "let",
    "say",
    "tom",
    "hanks",
    "click",
    "enter",
    "happen",
    "get",
    "mad",
    "libs",
    "printed",
    "going",
    "click",
    "enter",
    "mad",
    "libs",
    "says",
    "roses",
    "magenta",
    "microwaves",
    "blue",
    "love",
    "tom",
    "hanks",
    "pretty",
    "good",
    "mad",
    "lib",
    "obviously",
    "know",
    "print",
    "statements",
    "put",
    "know",
    "better",
    "mad",
    "lib",
    "could",
    "could",
    "could",
    "store",
    "many",
    "know",
    "variables",
    "wanted",
    "simple",
    "mad",
    "lib",
    "took",
    "three",
    "inputs",
    "know",
    "see",
    "could",
    "take",
    "something",
    "like",
    "create",
    "little",
    "mad",
    "libs",
    "game",
    "homework",
    "lesson",
    "go",
    "make",
    "mad",
    "libs",
    "game",
    "hopefully",
    "one",
    "little",
    "bit",
    "funnier",
    "mine",
    "basics",
    "creating",
    "mad",
    "libs",
    "game",
    "python",
    "tutorial",
    "want",
    "talk",
    "guys",
    "working",
    "lists",
    "python",
    "lot",
    "times",
    "programming",
    "python",
    "going",
    "dealing",
    "large",
    "amounts",
    "data",
    "dealing",
    "large",
    "amounts",
    "data",
    "want",
    "make",
    "sure",
    "manage",
    "organize",
    "properly",
    "list",
    "essentially",
    "structure",
    "use",
    "inside",
    "python",
    "store",
    "lists",
    "information",
    "take",
    "bunch",
    "different",
    "data",
    "values",
    "put",
    "inside",
    "list",
    "allows",
    "us",
    "organize",
    "keep",
    "track",
    "lot",
    "easier",
    "generally",
    "would",
    "create",
    "python",
    "list",
    "would",
    "put",
    "bunch",
    "related",
    "values",
    "inside",
    "list",
    "use",
    "throughout",
    "program",
    "going",
    "show",
    "guys",
    "basics",
    "using",
    "lists",
    "going",
    "look",
    "common",
    "use",
    "cases",
    "really",
    "get",
    "speed",
    "lists",
    "useful",
    "program",
    "actually",
    "going",
    "create",
    "list",
    "create",
    "list",
    "lot",
    "like",
    "create",
    "python",
    "like",
    "normal",
    "python",
    "variable",
    "first",
    "thing",
    "want",
    "making",
    "list",
    "give",
    "name",
    "want",
    "give",
    "descriptive",
    "name",
    "something",
    "going",
    "basically",
    "describe",
    "inside",
    "list",
    "case",
    "example",
    "let",
    "make",
    "list",
    "like",
    "friends",
    "could",
    "say",
    "like",
    "list",
    "friends",
    "say",
    "friends",
    "going",
    "set",
    "equal",
    "list",
    "values",
    "represent",
    "friends",
    "want",
    "create",
    "list",
    "use",
    "open",
    "closed",
    "square",
    "brackets",
    "whenever",
    "use",
    "open",
    "closed",
    "square",
    "brackets",
    "python",
    "basically",
    "knows",
    "okay",
    "want",
    "store",
    "bunch",
    "values",
    "inside",
    "list",
    "go",
    "ahead",
    "start",
    "adding",
    "values",
    "say",
    "like",
    "friends",
    "like",
    "kevin",
    "karen",
    "let",
    "say",
    "jim",
    "three",
    "values",
    "inside",
    "friends",
    "array",
    "creating",
    "normal",
    "variable",
    "python",
    "generally",
    "give",
    "one",
    "value",
    "right",
    "would",
    "create",
    "variable",
    "would",
    "give",
    "one",
    "value",
    "maybe",
    "string",
    "number",
    "boolean",
    "make",
    "lists",
    "able",
    "store",
    "multiple",
    "values",
    "inside",
    "like",
    "little",
    "item",
    "inside",
    "object",
    "right",
    "access",
    "individual",
    "items",
    "inside",
    "program",
    "inside",
    "friends",
    "list",
    "basically",
    "storing",
    "different",
    "values",
    "really",
    "useful",
    "stored",
    "values",
    "let",
    "talk",
    "put",
    "inside",
    "list",
    "really",
    "put",
    "piece",
    "information",
    "python",
    "could",
    "put",
    "things",
    "like",
    "strings",
    "numbers",
    "booleans",
    "wanted",
    "instead",
    "putting",
    "strings",
    "could",
    "change",
    "like",
    "one",
    "number",
    "could",
    "change",
    "one",
    "boolean",
    "would",
    "matter",
    "python",
    "going",
    "fine",
    "let",
    "change",
    "back",
    "strings",
    "sake",
    "example",
    "created",
    "list",
    "access",
    "individual",
    "elements",
    "inside",
    "list",
    "good",
    "question",
    "gon",
    "na",
    "go",
    "ahead",
    "print",
    "something",
    "screen",
    "first",
    "thing",
    "print",
    "actual",
    "list",
    "say",
    "print",
    "friends",
    "run",
    "program",
    "look",
    "console",
    "see",
    "printing",
    "actual",
    "list",
    "friends",
    "right",
    "let",
    "say",
    "wanted",
    "print",
    "specific",
    "element",
    "inside",
    "list",
    "well",
    "actually",
    "refer",
    "elements",
    "index",
    "one",
    "elements",
    "inside",
    "list",
    "particular",
    "index",
    "index",
    "actually",
    "start",
    "zero",
    "would",
    "say",
    "first",
    "element",
    "list",
    "kevin",
    "index",
    "zero",
    "would",
    "say",
    "element",
    "karen",
    "index",
    "one",
    "third",
    "element",
    "jim",
    "would",
    "index",
    "two",
    "even",
    "though",
    "jim",
    "technically",
    "third",
    "element",
    "inside",
    "list",
    "index",
    "two",
    "start",
    "indexing",
    "index",
    "position",
    "one",
    "kind",
    "lists",
    "work",
    "list",
    "indexes",
    "work",
    "wanted",
    "access",
    "specific",
    "element",
    "inside",
    "friends",
    "list",
    "refer",
    "index",
    "type",
    "friends",
    "gon",
    "na",
    "type",
    "open",
    "closed",
    "square",
    "bracket",
    "inside",
    "open",
    "closed",
    "square",
    "bracket",
    "want",
    "put",
    "index",
    "element",
    "inside",
    "list",
    "want",
    "access",
    "wanted",
    "access",
    "guy",
    "right",
    "element",
    "put",
    "zero",
    "say",
    "friends",
    "zero",
    "run",
    "program",
    "gon",
    "na",
    "print",
    "value",
    "gon",
    "na",
    "print",
    "kevin",
    "wanted",
    "access",
    "jim",
    "value",
    "put",
    "two",
    "give",
    "us",
    "jim",
    "value",
    "see",
    "right",
    "access",
    "elements",
    "based",
    "index",
    "also",
    "access",
    "elements",
    "based",
    "index",
    "back",
    "list",
    "example",
    "said",
    "negative",
    "one",
    "inside",
    "gon",
    "na",
    "give",
    "access",
    "value",
    "right",
    "jim",
    "see",
    "sort",
    "use",
    "negatives",
    "starts",
    "indexing",
    "back",
    "list",
    "said",
    "negative",
    "two",
    "gon",
    "na",
    "give",
    "us",
    "karen",
    "use",
    "negatives",
    "access",
    "items",
    "back",
    "list",
    "keep",
    "mind",
    "though",
    "kind",
    "interesting",
    "would",
    "say",
    "first",
    "element",
    "index",
    "position",
    "zero",
    "right",
    "would",
    "say",
    "first",
    "element",
    "back",
    "list",
    "index",
    "position",
    "negative",
    "one",
    "keep",
    "mind",
    "actually",
    "ways",
    "access",
    "like",
    "portions",
    "list",
    "example",
    "let",
    "say",
    "wanted",
    "select",
    "last",
    "two",
    "elements",
    "list",
    "want",
    "select",
    "first",
    "one",
    "well",
    "say",
    "one",
    "colon",
    "grab",
    "element",
    "index",
    "position",
    "one",
    "elements",
    "grab",
    "jim",
    "karen",
    "karen",
    "jim",
    "order",
    "could",
    "also",
    "specify",
    "range",
    "actually",
    "let",
    "add",
    "couple",
    "elements",
    "illustrate",
    "better",
    "add",
    "two",
    "names",
    "wanted",
    "could",
    "select",
    "like",
    "element",
    "index",
    "position",
    "one",
    "element",
    "index",
    "position",
    "three",
    "going",
    "grab",
    "one",
    "one",
    "two",
    "actually",
    "going",
    "grab",
    "third",
    "one",
    "going",
    "grab",
    "elements",
    "including",
    "three",
    "grab",
    "karen",
    "jim",
    "let",
    "go",
    "ahead",
    "run",
    "see",
    "grabs",
    "karen",
    "jim",
    "either",
    "put",
    "like",
    "one",
    "colon",
    "grab",
    "index",
    "position",
    "everything",
    "specify",
    "like",
    "range",
    "want",
    "grab",
    "access",
    "elements",
    "inside",
    "list",
    "also",
    "modify",
    "elements",
    "example",
    "could",
    "come",
    "let",
    "say",
    "want",
    "modify",
    "value",
    "right",
    "karen",
    "well",
    "access",
    "element",
    "could",
    "say",
    "friends",
    "karen",
    "index",
    "position",
    "one",
    "change",
    "whatever",
    "want",
    "could",
    "say",
    "friends",
    "index",
    "position",
    "one",
    "equal",
    "mike",
    "print",
    "friends",
    "index",
    "position",
    "one",
    "value",
    "going",
    "updated",
    "going",
    "say",
    "mike",
    "instead",
    "saying",
    "karen",
    "really",
    "useful",
    "modify",
    "values",
    "inside",
    "arrays",
    "really",
    "useful",
    "modify",
    "values",
    "inside",
    "python",
    "lists",
    "kind",
    "basics",
    "working",
    "lists",
    "python",
    "actually",
    "next",
    "tutorial",
    "going",
    "show",
    "guys",
    "even",
    "ways",
    "use",
    "lists",
    "going",
    "learn",
    "like",
    "add",
    "elements",
    "list",
    "delete",
    "elements",
    "list",
    "copy",
    "lists",
    "bunch",
    "cool",
    "stuff",
    "lists",
    "sort",
    "like",
    "basics",
    "working",
    "lists",
    "tutorial",
    "want",
    "talk",
    "guys",
    "using",
    "functions",
    "lists",
    "python",
    "python",
    "list",
    "one",
    "important",
    "structures",
    "store",
    "information",
    "list",
    "basically",
    "allows",
    "take",
    "bunch",
    "different",
    "values",
    "organize",
    "store",
    "inside",
    "little",
    "list",
    "structure",
    "program",
    "see",
    "two",
    "lists",
    "list",
    "lucky",
    "numbers",
    "bunch",
    "different",
    "numbers",
    "list",
    "friends",
    "could",
    "like",
    "list",
    "somebody",
    "friends",
    "basically",
    "bunch",
    "strings",
    "names",
    "two",
    "lists",
    "storing",
    "bunch",
    "different",
    "values",
    "makes",
    "lists",
    "awesome",
    "could",
    "store",
    "like",
    "many",
    "values",
    "mean",
    "could",
    "store",
    "hundreds",
    "thousands",
    "millions",
    "values",
    "working",
    "lot",
    "data",
    "lot",
    "information",
    "python",
    "lists",
    "invaluable",
    "lists",
    "important",
    "actually",
    "bunch",
    "different",
    "functions",
    "use",
    "lists",
    "functions",
    "allow",
    "us",
    "things",
    "like",
    "modify",
    "lists",
    "get",
    "information",
    "list",
    "tutorial",
    "want",
    "show",
    "bunch",
    "functions",
    "going",
    "talk",
    "common",
    "popular",
    "functions",
    "would",
    "use",
    "lists",
    "make",
    "powerful",
    "make",
    "easy",
    "use",
    "first",
    "thing",
    "obviously",
    "print",
    "list",
    "printing",
    "friends",
    "list",
    "want",
    "run",
    "program",
    "see",
    "printing",
    "elements",
    "list",
    "always",
    "good",
    "able",
    "print",
    "elements",
    "inside",
    "list",
    "lot",
    "functions",
    "use",
    "one",
    "function",
    "called",
    "extend",
    "function",
    "extend",
    "function",
    "basically",
    "allow",
    "take",
    "list",
    "append",
    "another",
    "list",
    "onto",
    "end",
    "could",
    "say",
    "like",
    "friends",
    "dot",
    "extend",
    "inside",
    "parentheses",
    "pass",
    "list",
    "want",
    "add",
    "friends",
    "list",
    "could",
    "say",
    "like",
    "lucky",
    "numbers",
    "print",
    "friends",
    "list",
    "going",
    "elements",
    "friends",
    "list",
    "also",
    "going",
    "elements",
    "inside",
    "lucky",
    "numbers",
    "list",
    "see",
    "friends",
    "also",
    "numbers",
    "really",
    "easy",
    "way",
    "essentially",
    "like",
    "add",
    "two",
    "lists",
    "together",
    "also",
    "add",
    "individual",
    "elements",
    "onto",
    "list",
    "could",
    "come",
    "could",
    "say",
    "friends",
    "dot",
    "append",
    "actually",
    "allow",
    "append",
    "another",
    "item",
    "onto",
    "end",
    "list",
    "could",
    "add",
    "another",
    "name",
    "could",
    "say",
    "creed",
    "example",
    "like",
    "adding",
    "another",
    "friend",
    "onto",
    "end",
    "list",
    "run",
    "program",
    "addition",
    "original",
    "items",
    "list",
    "also",
    "additional",
    "item",
    "end",
    "append",
    "function",
    "always",
    "going",
    "add",
    "item",
    "onto",
    "end",
    "list",
    "let",
    "say",
    "wanted",
    "add",
    "item",
    "middle",
    "list",
    "like",
    "right",
    "right",
    "another",
    "list",
    "function",
    "called",
    "insert",
    "insert",
    "going",
    "take",
    "two",
    "parameters",
    "first",
    "parameter",
    "going",
    "index",
    "want",
    "insert",
    "item",
    "insert",
    "index",
    "position",
    "one",
    "going",
    "say",
    "one",
    "going",
    "type",
    "name",
    "element",
    "want",
    "add",
    "say",
    "like",
    "kelly",
    "index",
    "position",
    "one",
    "going",
    "value",
    "kelly",
    "values",
    "going",
    "get",
    "pushed",
    "going",
    "get",
    "pushed",
    "right",
    "one",
    "index",
    "position",
    "run",
    "program",
    "see",
    "kevin",
    "new",
    "element",
    "kelly",
    "elements",
    "pushed",
    "right",
    "also",
    "remove",
    "elements",
    "example",
    "let",
    "say",
    "wanted",
    "remove",
    "gym",
    "value",
    "say",
    "friends",
    "dot",
    "remove",
    "type",
    "whatever",
    "element",
    "want",
    "remove",
    "want",
    "remove",
    "gym",
    "element",
    "run",
    "program",
    "jim",
    "going",
    "gone",
    "list",
    "four",
    "guys",
    "left",
    "also",
    "remove",
    "elements",
    "list",
    "wanted",
    "completely",
    "like",
    "reset",
    "list",
    "get",
    "rid",
    "everything",
    "could",
    "say",
    "friends",
    "dot",
    "clear",
    "going",
    "give",
    "us",
    "empty",
    "list",
    "get",
    "rid",
    "every",
    "single",
    "element",
    "inside",
    "list",
    "also",
    "another",
    "really",
    "cool",
    "method",
    "called",
    "pop",
    "type",
    "pop",
    "like",
    "basically",
    "pops",
    "going",
    "going",
    "pop",
    "item",
    "list",
    "click",
    "play",
    "button",
    "see",
    "left",
    "kevin",
    "karen",
    "jim",
    "oscar",
    "basically",
    "got",
    "rid",
    "last",
    "element",
    "inside",
    "list",
    "pop",
    "pops",
    "element",
    "list",
    "basically",
    "removes",
    "last",
    "element",
    "list",
    "list",
    "let",
    "say",
    "wanted",
    "figure",
    "certain",
    "element",
    "list",
    "right",
    "certain",
    "value",
    "let",
    "say",
    "wanted",
    "check",
    "see",
    "friend",
    "kevin",
    "list",
    "well",
    "could",
    "say",
    "friends",
    "dot",
    "index",
    "pass",
    "value",
    "could",
    "say",
    "like",
    "kevin",
    "going",
    "tell",
    "index",
    "kevin",
    "tell",
    "kevin",
    "list",
    "click",
    "play",
    "see",
    "says",
    "zero",
    "say",
    "like",
    "oscar",
    "example",
    "give",
    "index",
    "oscar",
    "three",
    "put",
    "name",
    "like",
    "put",
    "mike",
    "list",
    "going",
    "get",
    "back",
    "air",
    "says",
    "mike",
    "list",
    "easy",
    "way",
    "figure",
    "specific",
    "element",
    "inside",
    "list",
    "know",
    "index",
    "also",
    "count",
    "number",
    "similar",
    "elements",
    "list",
    "actually",
    "going",
    "come",
    "copy",
    "gym",
    "element",
    "add",
    "another",
    "gym",
    "element",
    "could",
    "come",
    "could",
    "say",
    "friends",
    "dot",
    "count",
    "pass",
    "gym",
    "tell",
    "many",
    "times",
    "value",
    "gym",
    "shows",
    "inside",
    "list",
    "say",
    "two",
    "two",
    "values",
    "text",
    "gym",
    "values",
    "could",
    "also",
    "sort",
    "list",
    "could",
    "come",
    "could",
    "say",
    "friends",
    "dot",
    "sort",
    "sort",
    "list",
    "ascending",
    "order",
    "bunch",
    "text",
    "see",
    "basically",
    "going",
    "going",
    "put",
    "alphabetical",
    "order",
    "see",
    "j",
    "k",
    "list",
    "went",
    "random",
    "order",
    "like",
    "whatever",
    "alphabetical",
    "order",
    "also",
    "going",
    "work",
    "lucky",
    "numbers",
    "could",
    "say",
    "like",
    "lucky",
    "numbers",
    "dot",
    "sort",
    "print",
    "lucky",
    "numbers",
    "ascending",
    "order",
    "realizing",
    "already",
    "take",
    "42",
    "put",
    "figure",
    "everything",
    "put",
    "ascending",
    "order",
    "anyway",
    "also",
    "reverse",
    "list",
    "wanted",
    "could",
    "reverse",
    "lucky",
    "numbers",
    "list",
    "could",
    "say",
    "lucky",
    "numbers",
    "dot",
    "reverse",
    "print",
    "instead",
    "4815",
    "1623",
    "going",
    "2316",
    "15",
    "basically",
    "reverse",
    "order",
    "list",
    "finally",
    "one",
    "list",
    "function",
    "want",
    "show",
    "guys",
    "copy",
    "could",
    "actually",
    "create",
    "another",
    "list",
    "could",
    "make",
    "copy",
    "could",
    "say",
    "like",
    "friends",
    "could",
    "set",
    "equal",
    "friends",
    "dot",
    "copy",
    "friends",
    "going",
    "attributes",
    "friends",
    "basically",
    "like",
    "copied",
    "basically",
    "took",
    "copy",
    "friends",
    "list",
    "see",
    "exact",
    "thing",
    "copying",
    "lists",
    "come",
    "handy",
    "lot",
    "different",
    "situations",
    "basic",
    "list",
    "functions",
    "kind",
    "like",
    "know",
    "get",
    "feet",
    "wet",
    "working",
    "lists",
    "obviously",
    "like",
    "work",
    "practice",
    "using",
    "different",
    "functions",
    "comfortable",
    "going",
    "get",
    "kind",
    "like",
    "basic",
    "overview",
    "tutorial",
    "want",
    "talk",
    "guys",
    "tuples",
    "python",
    "tuple",
    "type",
    "data",
    "structure",
    "basically",
    "means",
    "container",
    "store",
    "different",
    "values",
    "familiar",
    "lists",
    "python",
    "tuple",
    "actually",
    "similar",
    "list",
    "basically",
    "structure",
    "store",
    "multiple",
    "pieces",
    "information",
    "tuple",
    "key",
    "differences",
    "lists",
    "going",
    "talk",
    "tutorial",
    "first",
    "thing",
    "want",
    "want",
    "show",
    "create",
    "tuple",
    "come",
    "create",
    "tuple",
    "one",
    "common",
    "examples",
    "tuples",
    "coordinates",
    "let",
    "say",
    "series",
    "like",
    "xy",
    "coordinates",
    "could",
    "create",
    "variable",
    "called",
    "coordinates",
    "going",
    "set",
    "equal",
    "open",
    "closed",
    "parentheses",
    "whenever",
    "want",
    "create",
    "tuple",
    "inside",
    "python",
    "going",
    "use",
    "open",
    "closed",
    "parentheses",
    "inside",
    "inside",
    "parentheses",
    "going",
    "put",
    "values",
    "want",
    "store",
    "could",
    "example",
    "put",
    "list",
    "numbers",
    "could",
    "like",
    "coordinates",
    "could",
    "like",
    "four",
    "five",
    "would",
    "tuple",
    "coordinates",
    "inside",
    "one",
    "things",
    "tuples",
    "makes",
    "unique",
    "tuple",
    "immutable",
    "hear",
    "word",
    "lot",
    "talking",
    "tuples",
    "immutable",
    "basically",
    "means",
    "tuple",
    "ca",
    "changed",
    "modified",
    "create",
    "tuple",
    "modify",
    "change",
    "ca",
    "add",
    "elements",
    "ca",
    "erase",
    "elements",
    "ca",
    "change",
    "elements",
    "inside",
    "tuple",
    "see",
    "get",
    "create",
    "tuple",
    "ca",
    "change",
    "could",
    "come",
    "print",
    "attributes",
    "inside",
    "tuple",
    "way",
    "access",
    "using",
    "open",
    "enclosed",
    "square",
    "bracket",
    "pass",
    "index",
    "tuples",
    "indexed",
    "starting",
    "zero",
    "technically",
    "would",
    "say",
    "four",
    "index",
    "position",
    "one",
    "sorry",
    "four",
    "index",
    "position",
    "zero",
    "five",
    "index",
    "position",
    "one",
    "said",
    "coordinate",
    "zero",
    "print",
    "four",
    "printing",
    "four",
    "wanted",
    "print",
    "five",
    "put",
    "one",
    "inside",
    "square",
    "brackets",
    "print",
    "five",
    "access",
    "elements",
    "inside",
    "tuple",
    "easily",
    "access",
    "entry",
    "come",
    "try",
    "change",
    "one",
    "elements",
    "said",
    "coordinates",
    "coordinates",
    "one",
    "tried",
    "set",
    "equal",
    "something",
    "else",
    "like",
    "10",
    "python",
    "actually",
    "going",
    "give",
    "us",
    "error",
    "run",
    "program",
    "going",
    "run",
    "program",
    "see",
    "get",
    "error",
    "says",
    "type",
    "error",
    "tuple",
    "object",
    "support",
    "item",
    "assignment",
    "immutable",
    "ca",
    "change",
    "basically",
    "tuples",
    "create",
    "know",
    "tuple",
    "like",
    "said",
    "simple",
    "create",
    "want",
    "talk",
    "guys",
    "common",
    "topic",
    "python",
    "difference",
    "tuples",
    "lists",
    "remember",
    "list",
    "basically",
    "thing",
    "list",
    "wanted",
    "create",
    "list",
    "would",
    "use",
    "square",
    "brackets",
    "instead",
    "parentheses",
    "using",
    "list",
    "could",
    "assign",
    "different",
    "values",
    "could",
    "could",
    "basically",
    "mutate",
    "elements",
    "could",
    "add",
    "delete",
    "modify",
    "change",
    "whatever",
    "wanted",
    "list",
    "tuple",
    "ca",
    "sort",
    "basic",
    "difference",
    "really",
    "python",
    "say",
    "anything",
    "basically",
    "says",
    "like",
    "one",
    "immutable",
    "one",
    "practical",
    "use",
    "cases",
    "generally",
    "people",
    "use",
    "tuples",
    "data",
    "never",
    "going",
    "change",
    "store",
    "data",
    "inside",
    "tuple",
    "data",
    "need",
    "mutated",
    "something",
    "like",
    "coordinates",
    "good",
    "candidate",
    "tuple",
    "coordinates",
    "like",
    "probably",
    "going",
    "modify",
    "right",
    "might",
    "add",
    "coordinates",
    "example",
    "wanted",
    "could",
    "create",
    "list",
    "tuples",
    "say",
    "like",
    "4567",
    "maybe",
    "coordinates",
    "like",
    "know",
    "list",
    "inside",
    "tuples",
    "remember",
    "tuples",
    "ca",
    "modified",
    "values",
    "ca",
    "changed",
    "really",
    "case",
    "case",
    "basis",
    "would",
    "say",
    "huge",
    "majority",
    "going",
    "using",
    "lists",
    "time",
    "tuples",
    "niche",
    "know",
    "using",
    "special",
    "situations",
    "plenty",
    "situations",
    "want",
    "use",
    "tuples",
    "situation",
    "want",
    "store",
    "data",
    "ca",
    "changed",
    "mutated",
    "tuples",
    "way",
    "go",
    "yeah",
    "basics",
    "tuples",
    "basics",
    "difference",
    "lists",
    "tuples",
    "tuple",
    "great",
    "thing",
    "add",
    "python",
    "repertoire",
    "tutorial",
    "want",
    "talk",
    "guys",
    "using",
    "functions",
    "python",
    "function",
    "basically",
    "collection",
    "code",
    "performs",
    "specific",
    "task",
    "take",
    "bunch",
    "lines",
    "code",
    "basically",
    "one",
    "thing",
    "put",
    "inside",
    "function",
    "wanted",
    "task",
    "one",
    "thing",
    "function",
    "call",
    "function",
    "functions",
    "really",
    "help",
    "organize",
    "code",
    "lot",
    "better",
    "allow",
    "kind",
    "break",
    "code",
    "different",
    "know",
    "little",
    "chunks",
    "different",
    "things",
    "really",
    "awesome",
    "functions",
    "like",
    "core",
    "concept",
    "talking",
    "programming",
    "python",
    "going",
    "show",
    "guys",
    "create",
    "awesome",
    "function",
    "today",
    "let",
    "say",
    "purposes",
    "tutorial",
    "want",
    "create",
    "function",
    "says",
    "hi",
    "user",
    "one",
    "task",
    "function",
    "performs",
    "basically",
    "saying",
    "hi",
    "whoever",
    "writing",
    "program",
    "want",
    "write",
    "function",
    "first",
    "thing",
    "use",
    "keyword",
    "python",
    "called",
    "death",
    "e",
    "basically",
    "python",
    "sees",
    "keyword",
    "going",
    "say",
    "okay",
    "person",
    "wants",
    "use",
    "function",
    "type",
    "death",
    "need",
    "give",
    "function",
    "name",
    "like",
    "creating",
    "variables",
    "give",
    "descriptive",
    "names",
    "also",
    "want",
    "thing",
    "functions",
    "creating",
    "function",
    "give",
    "specific",
    "name",
    "basically",
    "says",
    "like",
    "going",
    "create",
    "function",
    "says",
    "hi",
    "going",
    "call",
    "function",
    "say",
    "hi",
    "like",
    "type",
    "name",
    "function",
    "also",
    "could",
    "type",
    "say",
    "hi",
    "underscore",
    "type",
    "say",
    "hi",
    "underscore",
    "considered",
    "like",
    "good",
    "practices",
    "python",
    "lot",
    "times",
    "simple",
    "like",
    "two",
    "word",
    "function",
    "like",
    "need",
    "put",
    "underscore",
    "could",
    "put",
    "underscore",
    "wanted",
    "type",
    "name",
    "function",
    "going",
    "type",
    "open",
    "close",
    "parentheses",
    "going",
    "type",
    "colon",
    "basically",
    "saying",
    "python",
    "like",
    "right",
    "code",
    "comes",
    "line",
    "going",
    "inside",
    "function",
    "order",
    "write",
    "code",
    "going",
    "end",
    "inside",
    "function",
    "actually",
    "indent",
    "notice",
    "clicked",
    "enter",
    "text",
    "editor",
    "automatically",
    "indented",
    "text",
    "automatically",
    "like",
    "using",
    "indent",
    "kind",
    "like",
    "one",
    "rules",
    "python",
    "like",
    "code",
    "goes",
    "inside",
    "function",
    "needs",
    "indented",
    "write",
    "code",
    "like",
    "longer",
    "going",
    "considered",
    "inside",
    "function",
    "see",
    "type",
    "code",
    "obviously",
    "real",
    "code",
    "type",
    "text",
    "indented",
    "little",
    "like",
    "marker",
    "basically",
    "saying",
    "like",
    "oh",
    "yeah",
    "inside",
    "function",
    "write",
    "code",
    "like",
    "indentation",
    "level",
    "stuff",
    "longer",
    "considering",
    "inside",
    "function",
    "little",
    "thing",
    "code",
    "inside",
    "function",
    "needs",
    "indented",
    "alright",
    "function",
    "going",
    "say",
    "hi",
    "user",
    "going",
    "print",
    "text",
    "going",
    "say",
    "hello",
    "user",
    "simple",
    "function",
    "obviously",
    "one",
    "line",
    "code",
    "inside",
    "function",
    "could",
    "know",
    "many",
    "lines",
    "code",
    "want",
    "purposes",
    "need",
    "one",
    "line",
    "order",
    "perform",
    "function",
    "call",
    "function",
    "want",
    "execute",
    "code",
    "inside",
    "function",
    "something",
    "called",
    "calling",
    "run",
    "program",
    "right",
    "going",
    "run",
    "see",
    "nothing",
    "happens",
    "right",
    "even",
    "though",
    "function",
    "printing",
    "hello",
    "user",
    "run",
    "program",
    "code",
    "inside",
    "function",
    "going",
    "get",
    "executed",
    "default",
    "code",
    "inside",
    "function",
    "going",
    "get",
    "executed",
    "specify",
    "want",
    "execute",
    "order",
    "going",
    "something",
    "called",
    "calling",
    "function",
    "order",
    "call",
    "function",
    "basically",
    "type",
    "functions",
    "name",
    "open",
    "close",
    "parentheses",
    "going",
    "type",
    "say",
    "hi",
    "open",
    "close",
    "parentheses",
    "run",
    "program",
    "see",
    "prints",
    "hello",
    "user",
    "executing",
    "code",
    "inside",
    "function",
    "want",
    "show",
    "guys",
    "one",
    "thing",
    "talking",
    "guys",
    "functions",
    "actually",
    "work",
    "going",
    "print",
    "top",
    "going",
    "print",
    "bottom",
    "want",
    "show",
    "guys",
    "flow",
    "functions",
    "inside",
    "program",
    "run",
    "program",
    "see",
    "print",
    "top",
    "hello",
    "user",
    "bottom",
    "essentially",
    "happening",
    "python",
    "goes",
    "executes",
    "program",
    "goes",
    "first",
    "line",
    "says",
    "okay",
    "want",
    "print",
    "word",
    "top",
    "goes",
    "says",
    "okay",
    "want",
    "execute",
    "say",
    "hi",
    "function",
    "python",
    "actually",
    "jumps",
    "goes",
    "say",
    "hi",
    "function",
    "going",
    "execute",
    "code",
    "inside",
    "function",
    "going",
    "go",
    "execute",
    "code",
    "done",
    "executing",
    "code",
    "function",
    "going",
    "jump",
    "back",
    "going",
    "move",
    "next",
    "line",
    "bottom",
    "kind",
    "like",
    "flow",
    "functions",
    "functions",
    "generally",
    "naming",
    "functions",
    "want",
    "named",
    "lowercase",
    "usually",
    "naming",
    "stuff",
    "python",
    "two",
    "words",
    "going",
    "use",
    "underspace",
    "underscore",
    "could",
    "write",
    "say",
    "underscore",
    "high",
    "lot",
    "situations",
    "though",
    "function",
    "like",
    "name",
    "really",
    "short",
    "might",
    "easier",
    "leave",
    "without",
    "underscore",
    "put",
    "underscore",
    "super",
    "python",
    "official",
    "right",
    "actually",
    "make",
    "functions",
    "little",
    "bit",
    "powerful",
    "give",
    "information",
    "lot",
    "times",
    "write",
    "function",
    "going",
    "want",
    "additional",
    "information",
    "gets",
    "passed",
    "called",
    "parameters",
    "parameter",
    "piece",
    "information",
    "give",
    "function",
    "actually",
    "specify",
    "function",
    "needs",
    "receive",
    "parameters",
    "basically",
    "say",
    "like",
    "hey",
    "going",
    "call",
    "function",
    "need",
    "give",
    "us",
    "information",
    "need",
    "give",
    "us",
    "parameters",
    "type",
    "name",
    "parameter",
    "want",
    "receive",
    "allow",
    "code",
    "calling",
    "function",
    "tell",
    "name",
    "say",
    "hi",
    "say",
    "name",
    "basically",
    "means",
    "means",
    "whenever",
    "call",
    "say",
    "hi",
    "function",
    "give",
    "name",
    "call",
    "include",
    "name",
    "say",
    "like",
    "mike",
    "actually",
    "access",
    "parameter",
    "variable",
    "inside",
    "function",
    "could",
    "come",
    "instead",
    "saying",
    "hello",
    "user",
    "could",
    "say",
    "hello",
    "name",
    "basically",
    "going",
    "going",
    "say",
    "hello",
    "whatever",
    "name",
    "got",
    "passed",
    "actually",
    "going",
    "copy",
    "twice",
    "say",
    "hello",
    "mike",
    "hello",
    "steve",
    "run",
    "program",
    "see",
    "instead",
    "saying",
    "hello",
    "user",
    "saying",
    "hello",
    "whichever",
    "name",
    "passed",
    "function",
    "really",
    "useful",
    "right",
    "give",
    "function",
    "information",
    "depending",
    "information",
    "give",
    "perform",
    "task",
    "little",
    "bit",
    "differently",
    "could",
    "also",
    "include",
    "one",
    "parameter",
    "mean",
    "technically",
    "could",
    "like",
    "many",
    "parameters",
    "want",
    "put",
    "another",
    "one",
    "say",
    "age",
    "going",
    "pass",
    "age",
    "along",
    "going",
    "pass",
    "age",
    "pass",
    "age",
    "going",
    "pass",
    "strings",
    "say",
    "hello",
    "name",
    "age",
    "passing",
    "two",
    "pieces",
    "information",
    "run",
    "program",
    "going",
    "call",
    "function",
    "going",
    "use",
    "pieces",
    "information",
    "say",
    "hello",
    "mike",
    "hello",
    "steve",
    "essentially",
    "writing",
    "one",
    "line",
    "code",
    "prints",
    "like",
    "hello",
    "someone",
    "allowing",
    "function",
    "receive",
    "two",
    "parameters",
    "name",
    "age",
    "depending",
    "name",
    "age",
    "function",
    "going",
    "print",
    "hello",
    "little",
    "bit",
    "differently",
    "kind",
    "beauty",
    "using",
    "function",
    "could",
    "pass",
    "anything",
    "want",
    "function",
    "example",
    "could",
    "pass",
    "integer",
    "instead",
    "string",
    "age",
    "like",
    "could",
    "pass",
    "number",
    "difference",
    "going",
    "convert",
    "string",
    "going",
    "work",
    "could",
    "pass",
    "strings",
    "numbers",
    "bullions",
    "arrays",
    "really",
    "pass",
    "type",
    "data",
    "function",
    "going",
    "work",
    "see",
    "get",
    "result",
    "basics",
    "functions",
    "go",
    "python",
    "going",
    "using",
    "functions",
    "generally",
    "good",
    "idea",
    "break",
    "code",
    "different",
    "functions",
    "whenever",
    "like",
    "grouping",
    "code",
    "designed",
    "perform",
    "specific",
    "task",
    "usually",
    "good",
    "candidate",
    "put",
    "inside",
    "function",
    "tutorial",
    "want",
    "talk",
    "guys",
    "using",
    "return",
    "statement",
    "python",
    "functions",
    "python",
    "function",
    "basically",
    "collection",
    "python",
    "code",
    "performs",
    "specific",
    "task",
    "want",
    "perform",
    "task",
    "python",
    "programs",
    "call",
    "python",
    "function",
    "lot",
    "times",
    "calling",
    "python",
    "function",
    "kind",
    "call",
    "thing",
    "move",
    "program",
    "sometimes",
    "call",
    "function",
    "actually",
    "going",
    "want",
    "get",
    "information",
    "back",
    "function",
    "call",
    "function",
    "want",
    "basically",
    "execute",
    "task",
    "want",
    "execute",
    "code",
    "want",
    "like",
    "give",
    "information",
    "back",
    "could",
    "like",
    "particular",
    "value",
    "could",
    "something",
    "like",
    "telling",
    "task",
    "went",
    "basically",
    "function",
    "communicate",
    "back",
    "us",
    "like",
    "hey",
    "information",
    "return",
    "keyword",
    "allow",
    "us",
    "return",
    "keyword",
    "basically",
    "allow",
    "python",
    "return",
    "information",
    "function",
    "going",
    "show",
    "guys",
    "want",
    "create",
    "simple",
    "function",
    "going",
    "cube",
    "number",
    "cube",
    "number",
    "take",
    "power",
    "three",
    "going",
    "cube",
    "like",
    "two",
    "like",
    "two",
    "raised",
    "power",
    "three",
    "right",
    "pretty",
    "basic",
    "math",
    "going",
    "make",
    "function",
    "cube",
    "number",
    "show",
    "guys",
    "use",
    "return",
    "statement",
    "first",
    "thing",
    "want",
    "make",
    "function",
    "going",
    "say",
    "death",
    "cube",
    "call",
    "function",
    "cube",
    "specify",
    "parameters",
    "function",
    "take",
    "basically",
    "values",
    "want",
    "give",
    "function",
    "going",
    "give",
    "one",
    "function",
    "going",
    "number",
    "going",
    "call",
    "num",
    "going",
    "type",
    "colon",
    "put",
    "code",
    "want",
    "included",
    "function",
    "basically",
    "function",
    "going",
    "cube",
    "number",
    "could",
    "type",
    "num",
    "times",
    "num",
    "times",
    "num",
    "right",
    "going",
    "give",
    "us",
    "num",
    "cubed",
    "well",
    "good",
    "come",
    "execute",
    "function",
    "basically",
    "call",
    "say",
    "cube",
    "pass",
    "three",
    "going",
    "go",
    "ahead",
    "pass",
    "three",
    "going",
    "save",
    "let",
    "go",
    "ahead",
    "run",
    "code",
    "code",
    "see",
    "nothing",
    "happened",
    "right",
    "nothing",
    "got",
    "printed",
    "program",
    "fact",
    "call",
    "cube",
    "function",
    "really",
    "anything",
    "let",
    "try",
    "print",
    "maybe",
    "print",
    "function",
    "give",
    "us",
    "back",
    "information",
    "want",
    "type",
    "print",
    "print",
    "value",
    "function",
    "going",
    "click",
    "play",
    "look",
    "says",
    "none",
    "printed",
    "value",
    "function",
    "told",
    "none",
    "really",
    "function",
    "supposed",
    "cubing",
    "number",
    "use",
    "return",
    "statement",
    "python",
    "come",
    "say",
    "return",
    "python",
    "going",
    "return",
    "whatever",
    "value",
    "put",
    "right",
    "call",
    "cube",
    "function",
    "give",
    "three",
    "python",
    "going",
    "go",
    "going",
    "execute",
    "function",
    "sees",
    "return",
    "statement",
    "going",
    "say",
    "okay",
    "want",
    "give",
    "value",
    "back",
    "whatever",
    "call",
    "function",
    "going",
    "return",
    "value",
    "print",
    "cube",
    "three",
    "print",
    "answer",
    "get",
    "answer",
    "back",
    "play",
    "see",
    "says",
    "got",
    "correct",
    "answer",
    "could",
    "anything",
    "cube",
    "like",
    "four",
    "something",
    "see",
    "constantly",
    "getting",
    "correct",
    "answer",
    "back",
    "basics",
    "using",
    "return",
    "statement",
    "allows",
    "us",
    "return",
    "value",
    "back",
    "caller",
    "words",
    "back",
    "whatever",
    "calling",
    "function",
    "want",
    "illustrate",
    "point",
    "little",
    "bit",
    "going",
    "come",
    "actually",
    "going",
    "create",
    "variable",
    "going",
    "create",
    "variable",
    "called",
    "result",
    "going",
    "set",
    "equal",
    "cube",
    "four",
    "variable",
    "result",
    "going",
    "store",
    "value",
    "gets",
    "returned",
    "cube",
    "function",
    "going",
    "store",
    "like",
    "cube",
    "four",
    "going",
    "store",
    "value",
    "gets",
    "returned",
    "executing",
    "function",
    "came",
    "printed",
    "result",
    "actually",
    "going",
    "print",
    "64",
    "value",
    "storing",
    "return",
    "statement",
    "really",
    "useful",
    "like",
    "getting",
    "information",
    "back",
    "function",
    "use",
    "something",
    "like",
    "parameter",
    "like",
    "four",
    "parameter",
    "give",
    "information",
    "function",
    "use",
    "return",
    "statement",
    "get",
    "information",
    "back",
    "function",
    "want",
    "point",
    "one",
    "thing",
    "actually",
    "able",
    "put",
    "code",
    "return",
    "statement",
    "came",
    "tried",
    "put",
    "like",
    "print",
    "statement",
    "actually",
    "going",
    "work",
    "never",
    "going",
    "get",
    "printed",
    "typed",
    "like",
    "code",
    "right",
    "run",
    "program",
    "going",
    "type",
    "code",
    "use",
    "return",
    "keyword",
    "breaks",
    "us",
    "function",
    "python",
    "going",
    "go",
    "going",
    "execute",
    "code",
    "function",
    "whenever",
    "sees",
    "return",
    "keyword",
    "going",
    "break",
    "back",
    "going",
    "done",
    "never",
    "able",
    "reach",
    "line",
    "code",
    "basics",
    "using",
    "return",
    "statements",
    "return",
    "data",
    "type",
    "want",
    "could",
    "easily",
    "return",
    "like",
    "string",
    "boolean",
    "array",
    "really",
    "matter",
    "return",
    "whatever",
    "want",
    "lot",
    "times",
    "lot",
    "situations",
    "going",
    "want",
    "get",
    "value",
    "back",
    "function",
    "tutorial",
    "want",
    "talk",
    "guys",
    "using",
    "statements",
    "python",
    "statements",
    "special",
    "structure",
    "python",
    "actually",
    "help",
    "programs",
    "make",
    "decisions",
    "using",
    "statement",
    "could",
    "execute",
    "certain",
    "code",
    "certain",
    "conditions",
    "true",
    "execute",
    "code",
    "conditions",
    "true",
    "basically",
    "statements",
    "allow",
    "programs",
    "respond",
    "input",
    "given",
    "depending",
    "data",
    "using",
    "program",
    "programs",
    "able",
    "respond",
    "certain",
    "data",
    "certain",
    "values",
    "certain",
    "things",
    "data",
    "values",
    "things",
    "know",
    "programs",
    "essentially",
    "becoming",
    "lot",
    "smarter",
    "actually",
    "statements",
    "things",
    "human",
    "beings",
    "deal",
    "every",
    "day",
    "know",
    "go",
    "throughout",
    "day",
    "generally",
    "dealing",
    "statements",
    "time",
    "want",
    "kind",
    "give",
    "guys",
    "brief",
    "introduction",
    "statements",
    "talk",
    "common",
    "statements",
    "see",
    "everyday",
    "life",
    "go",
    "ahead",
    "really",
    "awesome",
    "example",
    "kind",
    "like",
    "show",
    "guys",
    "statements",
    "us",
    "text",
    "editor",
    "little",
    "text",
    "file",
    "wrote",
    "bunch",
    "statements",
    "lot",
    "people",
    "encounter",
    "daily",
    "basis",
    "first",
    "one",
    "says",
    "wake",
    "hungry",
    "eat",
    "breakfast",
    "let",
    "break",
    "little",
    "bit",
    "says",
    "hungry",
    "condition",
    "right",
    "either",
    "going",
    "true",
    "going",
    "false",
    "right",
    "true",
    "going",
    "go",
    "ahead",
    "eat",
    "breakfast",
    "right",
    "false",
    "going",
    "skip",
    "whatever",
    "move",
    "right",
    "basics",
    "statement",
    "right",
    "condition",
    "case",
    "hungry",
    "condition",
    "true",
    "action",
    "eat",
    "breakfast",
    "otherwise",
    "skip",
    "another",
    "one",
    "says",
    "leave",
    "house",
    "cloudy",
    "bring",
    "umbrella",
    "otherwise",
    "bring",
    "sunglasses",
    "one",
    "little",
    "bit",
    "complex",
    "one",
    "looked",
    "see",
    "condition",
    "right",
    "says",
    "cloudy",
    "condition",
    "true",
    "going",
    "bring",
    "umbrella",
    "case",
    "condition",
    "false",
    "something",
    "else",
    "want",
    "case",
    "condition",
    "false",
    "moved",
    "condition",
    "false",
    "going",
    "go",
    "ahead",
    "bring",
    "sunglasses",
    "another",
    "example",
    "statement",
    "little",
    "bit",
    "complex",
    "finally",
    "one",
    "one",
    "even",
    "complex",
    "says",
    "restaurant",
    "want",
    "meat",
    "order",
    "steak",
    "condition",
    "true",
    "order",
    "steak",
    "condition",
    "false",
    "going",
    "move",
    "actually",
    "going",
    "check",
    "another",
    "condition",
    "going",
    "say",
    "otherwise",
    "want",
    "pasta",
    "order",
    "spaghetti",
    "meatballs",
    "another",
    "condition",
    "condition",
    "true",
    "get",
    "spaghetti",
    "true",
    "finally",
    "going",
    "move",
    "default",
    "ordering",
    "salad",
    "three",
    "statements",
    "valid",
    "statements",
    "get",
    "complex",
    "go",
    "list",
    "hopefully",
    "know",
    "kind",
    "wrap",
    "head",
    "around",
    "statements",
    "basically",
    "specifying",
    "conditions",
    "conditions",
    "true",
    "going",
    "certain",
    "things",
    "conditions",
    "false",
    "things",
    "check",
    "conditions",
    "right",
    "let",
    "head",
    "python",
    "file",
    "start",
    "writing",
    "actual",
    "python",
    "app",
    "dot",
    "python",
    "file",
    "want",
    "create",
    "statement",
    "going",
    "show",
    "guys",
    "basic",
    "statement",
    "tutorial",
    "next",
    "tutorial",
    "going",
    "look",
    "advanced",
    "statements",
    "want",
    "create",
    "boolean",
    "variable",
    "going",
    "create",
    "boolean",
    "variable",
    "going",
    "store",
    "whether",
    "user",
    "mail",
    "going",
    "called",
    "underscore",
    "mail",
    "going",
    "set",
    "equal",
    "true",
    "male",
    "boolean",
    "variable",
    "right",
    "right",
    "set",
    "equal",
    "true",
    "actually",
    "use",
    "statement",
    "check",
    "see",
    "value",
    "variable",
    "true",
    "something",
    "want",
    "use",
    "statement",
    "type",
    "need",
    "type",
    "condition",
    "basically",
    "would",
    "type",
    "like",
    "something",
    "going",
    "true",
    "false",
    "like",
    "example",
    "page",
    "specifying",
    "like",
    "hungry",
    "cloudy",
    "going",
    "check",
    "see",
    "mail",
    "words",
    "person",
    "male",
    "remember",
    "like",
    "able",
    "reducible",
    "true",
    "false",
    "value",
    "case",
    "using",
    "boolean",
    "like",
    "easiest",
    "thing",
    "said",
    "specified",
    "true",
    "false",
    "condition",
    "want",
    "type",
    "colon",
    "want",
    "make",
    "new",
    "line",
    "anything",
    "put",
    "indentation",
    "actually",
    "going",
    "executed",
    "conditions",
    "true",
    "could",
    "put",
    "print",
    "could",
    "put",
    "male",
    "see",
    "happens",
    "run",
    "program",
    "going",
    "go",
    "going",
    "say",
    "male",
    "changed",
    "mail",
    "false",
    "instead",
    "true",
    "change",
    "false",
    "sudden",
    "going",
    "print",
    "anything",
    "going",
    "blank",
    "condition",
    "true",
    "anything",
    "put",
    "declaration",
    "indentation",
    "like",
    "going",
    "executed",
    "statement",
    "true",
    "also",
    "use",
    "another",
    "keyword",
    "python",
    "called",
    "else",
    "else",
    "basically",
    "going",
    "like",
    "otherwise",
    "remember",
    "said",
    "cloudy",
    "bring",
    "umbrella",
    "otherwise",
    "bring",
    "sunglasses",
    "well",
    "going",
    "like",
    "otherwise",
    "say",
    "else",
    "anything",
    "put",
    "else",
    "going",
    "get",
    "printed",
    "condition",
    "true",
    "put",
    "male",
    "able",
    "cover",
    "situations",
    "variable",
    "false",
    "cover",
    "situation",
    "says",
    "male",
    "true",
    "cover",
    "situation",
    "well",
    "say",
    "male",
    "pretty",
    "cool",
    "also",
    "make",
    "complex",
    "actually",
    "talk",
    "put",
    "much",
    "code",
    "want",
    "inside",
    "statement",
    "could",
    "like",
    "know",
    "dozens",
    "lines",
    "code",
    "wanted",
    "giving",
    "guys",
    "simple",
    "example",
    "make",
    "complex",
    "going",
    "add",
    "another",
    "variable",
    "mix",
    "going",
    "add",
    "another",
    "know",
    "boolean",
    "attribute",
    "mix",
    "going",
    "make",
    "another",
    "variable",
    "called",
    "tall",
    "going",
    "set",
    "equal",
    "true",
    "well",
    "two",
    "variables",
    "mix",
    "let",
    "say",
    "wanted",
    "write",
    "statement",
    "check",
    "variables",
    "could",
    "write",
    "statement",
    "like",
    "male",
    "tall",
    "male",
    "tall",
    "male",
    "tall",
    "like",
    "could",
    "write",
    "bunch",
    "statements",
    "check",
    "combination",
    "variables",
    "way",
    "using",
    "one",
    "two",
    "keywords",
    "first",
    "keyword",
    "want",
    "show",
    "guys",
    "keyword",
    "come",
    "say",
    "male",
    "underscore",
    "tall",
    "basically",
    "going",
    "going",
    "say",
    "person",
    "either",
    "male",
    "tall",
    "want",
    "something",
    "going",
    "true",
    "one",
    "values",
    "true",
    "one",
    "values",
    "true",
    "could",
    "actually",
    "put",
    "instead",
    "male",
    "could",
    "put",
    "male",
    "tall",
    "going",
    "appropriate",
    "would",
    "say",
    "neither",
    "male",
    "tall",
    "execute",
    "code",
    "inside",
    "else",
    "means",
    "guys",
    "false",
    "right",
    "saying",
    "male",
    "tall",
    "going",
    "execute",
    "whatever",
    "otherwise",
    "means",
    "neither",
    "male",
    "tall",
    "going",
    "execute",
    "let",
    "show",
    "guys",
    "works",
    "click",
    "play",
    "true",
    "going",
    "say",
    "male",
    "tall",
    "set",
    "one",
    "false",
    "let",
    "set",
    "male",
    "equal",
    "false",
    "still",
    "going",
    "say",
    "male",
    "tall",
    "set",
    "equal",
    "false",
    "going",
    "say",
    "neither",
    "male",
    "tall",
    "kind",
    "basics",
    "using",
    "operator",
    "another",
    "operator",
    "use",
    "called",
    "basically",
    "similar",
    "except",
    "conditions",
    "true",
    "basically",
    "saying",
    "person",
    "male",
    "also",
    "tall",
    "going",
    "execute",
    "whatever",
    "could",
    "actually",
    "change",
    "text",
    "say",
    "tall",
    "male",
    "know",
    "fact",
    "getting",
    "executed",
    "male",
    "tall",
    "also",
    "change",
    "print",
    "statement",
    "could",
    "say",
    "either",
    "male",
    "tall",
    "see",
    "basically",
    "saying",
    "either",
    "one",
    "click",
    "play",
    "button",
    "see",
    "false",
    "going",
    "say",
    "either",
    "male",
    "tall",
    "make",
    "true",
    "going",
    "say",
    "tall",
    "male",
    "going",
    "make",
    "one",
    "false",
    "though",
    "let",
    "make",
    "tall",
    "false",
    "going",
    "execute",
    "first",
    "print",
    "statement",
    "going",
    "execute",
    "one",
    "inside",
    "else",
    "say",
    "either",
    "male",
    "tall",
    "basics",
    "using",
    "lot",
    "use",
    "statements",
    "actually",
    "one",
    "thing",
    "add",
    "conditions",
    "checking",
    "male",
    "tall",
    "wanted",
    "check",
    "tall",
    "like",
    "short",
    "male",
    "use",
    "another",
    "keyword",
    "python",
    "called",
    "else",
    "really",
    "typed",
    "e",
    "l",
    "f",
    "stands",
    "else",
    "put",
    "another",
    "condition",
    "want",
    "check",
    "see",
    "male",
    "tall",
    "going",
    "say",
    "else",
    "male",
    "male",
    "type",
    "tall",
    "way",
    "saying",
    "open",
    "close",
    "parentheses",
    "saying",
    "tall",
    "basically",
    "use",
    "function",
    "going",
    "negate",
    "whatever",
    "inside",
    "true",
    "going",
    "make",
    "false",
    "false",
    "going",
    "make",
    "true",
    "basically",
    "tell",
    "us",
    "whether",
    "tall",
    "going",
    "use",
    "colon",
    "inside",
    "basically",
    "going",
    "type",
    "code",
    "want",
    "happen",
    "condition",
    "true",
    "print",
    "short",
    "male",
    "actually",
    "one",
    "condition",
    "want",
    "check",
    "would",
    "male",
    "tall",
    "make",
    "one",
    "else",
    "actually",
    "going",
    "copy",
    "guy",
    "paste",
    "want",
    "say",
    "male",
    "tall",
    "checking",
    "see",
    "male",
    "male",
    "tall",
    "could",
    "say",
    "male",
    "tall",
    "essentially",
    "statement",
    "going",
    "cover",
    "every",
    "single",
    "condition",
    "two",
    "variables",
    "every",
    "single",
    "situation",
    "two",
    "values",
    "variables",
    "going",
    "able",
    "print",
    "something",
    "made",
    "true",
    "basically",
    "going",
    "tell",
    "us",
    "tall",
    "male",
    "make",
    "male",
    "false",
    "going",
    "tell",
    "us",
    "male",
    "tall",
    "made",
    "male",
    "true",
    "tall",
    "false",
    "going",
    "tell",
    "us",
    "short",
    "male",
    "made",
    "false",
    "going",
    "tell",
    "us",
    "either",
    "male",
    "tall",
    "actually",
    "need",
    "change",
    "say",
    "male",
    "tall",
    "would",
    "better",
    "print",
    "situation",
    "basically",
    "see",
    "use",
    "else",
    "ifs",
    "else",
    "order",
    "help",
    "program",
    "make",
    "decisions",
    "really",
    "respond",
    "different",
    "data",
    "programs",
    "able",
    "respond",
    "every",
    "combination",
    "values",
    "two",
    "variables",
    "really",
    "cool",
    "example",
    "using",
    "simple",
    "boolean",
    "variables",
    "next",
    "tutorial",
    "going",
    "show",
    "guys",
    "actually",
    "use",
    "something",
    "called",
    "comparison",
    "operators",
    "could",
    "compare",
    "like",
    "two",
    "numbers",
    "two",
    "strings",
    "could",
    "use",
    "conditions",
    "think",
    "good",
    "introduction",
    "statements",
    "see",
    "guys",
    "next",
    "tutorial",
    "tutorial",
    "want",
    "talk",
    "statements",
    "python",
    "specifically",
    "going",
    "looking",
    "using",
    "comparisons",
    "inside",
    "statements",
    "following",
    "along",
    "course",
    "last",
    "tutorial",
    "talked",
    "guys",
    "basics",
    "statements",
    "used",
    "couple",
    "different",
    "boolean",
    "variables",
    "depending",
    "values",
    "bullions",
    "able",
    "certain",
    "things",
    "tutorial",
    "going",
    "look",
    "another",
    "way",
    "use",
    "statements",
    "comparisons",
    "instead",
    "using",
    "boolean",
    "values",
    "actually",
    "compare",
    "different",
    "values",
    "could",
    "compare",
    "couple",
    "numbers",
    "could",
    "compare",
    "couple",
    "strings",
    "depending",
    "results",
    "comparisons",
    "certain",
    "things",
    "going",
    "pretty",
    "cool",
    "really",
    "going",
    "give",
    "guys",
    "full",
    "understanding",
    "statements",
    "tutorial",
    "actually",
    "want",
    "create",
    "python",
    "function",
    "function",
    "going",
    "give",
    "us",
    "maximum",
    "number",
    "pass",
    "function",
    "going",
    "take",
    "three",
    "parameters",
    "input",
    "going",
    "print",
    "biggest",
    "number",
    "give",
    "let",
    "create",
    "function",
    "going",
    "say",
    "death",
    "going",
    "call",
    "max",
    "num",
    "inside",
    "parentheses",
    "going",
    "specify",
    "want",
    "three",
    "parameters",
    "input",
    "going",
    "say",
    "num",
    "one",
    "num",
    "two",
    "num",
    "three",
    "basically",
    "passing",
    "three",
    "numbers",
    "function",
    "return",
    "largest",
    "three",
    "order",
    "figure",
    "numbers",
    "largest",
    "going",
    "use",
    "statement",
    "say",
    "need",
    "specify",
    "condition",
    "right",
    "need",
    "put",
    "like",
    "true",
    "false",
    "value",
    "actually",
    "compare",
    "different",
    "numbers",
    "could",
    "say",
    "num",
    "one",
    "greater",
    "equal",
    "num",
    "two",
    "num",
    "one",
    "greater",
    "equal",
    "num",
    "three",
    "basically",
    "comparing",
    "different",
    "numbers",
    "saying",
    "first",
    "number",
    "greater",
    "equal",
    "second",
    "number",
    "comparison",
    "think",
    "compare",
    "two",
    "numbers",
    "going",
    "end",
    "true",
    "false",
    "value",
    "right",
    "num",
    "one",
    "either",
    "greater",
    "equal",
    "num",
    "two",
    "actually",
    "boolean",
    "value",
    "right",
    "either",
    "true",
    "false",
    "thing",
    "result",
    "comparison",
    "either",
    "true",
    "false",
    "technically",
    "putting",
    "true",
    "false",
    "value",
    "getting",
    "true",
    "false",
    "value",
    "using",
    "comparison",
    "notice",
    "using",
    "something",
    "called",
    "comparison",
    "operator",
    "basically",
    "like",
    "want",
    "compare",
    "saying",
    "like",
    "greater",
    "equal",
    "case",
    "whole",
    "condition",
    "true",
    "words",
    "results",
    "two",
    "comparisons",
    "end",
    "true",
    "know",
    "num",
    "one",
    "biggest",
    "return",
    "num",
    "one",
    "say",
    "return",
    "num",
    "one",
    "also",
    "want",
    "check",
    "conditions",
    "say",
    "l",
    "want",
    "comparison",
    "going",
    "say",
    "else",
    "num",
    "two",
    "greater",
    "equal",
    "num",
    "one",
    "num",
    "two",
    "greater",
    "equal",
    "num",
    "three",
    "essentially",
    "except",
    "num",
    "two",
    "comparing",
    "different",
    "numbers",
    "going",
    "end",
    "true",
    "false",
    "value",
    "depending",
    "result",
    "comparison",
    "return",
    "num",
    "two",
    "true",
    "means",
    "going",
    "end",
    "returning",
    "num",
    "two",
    "finally",
    "say",
    "else",
    "num",
    "one",
    "biggest",
    "num",
    "two",
    "biggest",
    "pretty",
    "much",
    "assume",
    "num",
    "three",
    "biggest",
    "function",
    "actually",
    "going",
    "call",
    "function",
    "going",
    "say",
    "actually",
    "print",
    "result",
    "say",
    "max",
    "num",
    "pass",
    "like",
    "three",
    "four",
    "five",
    "basically",
    "calling",
    "new",
    "function",
    "made",
    "going",
    "go",
    "ahead",
    "run",
    "program",
    "see",
    "output",
    "print",
    "five",
    "biggest",
    "change",
    "middle",
    "one",
    "biggest",
    "make",
    "middle",
    "140",
    "able",
    "take",
    "situation",
    "finally",
    "make",
    "like",
    "able",
    "handle",
    "matter",
    "number",
    "num",
    "one",
    "num",
    "two",
    "num",
    "three",
    "ends",
    "biggest",
    "able",
    "tell",
    "us",
    "without",
    "problem",
    "comparisons",
    "really",
    "really",
    "really",
    "common",
    "way",
    "make",
    "statements",
    "lot",
    "times",
    "going",
    "want",
    "comparing",
    "different",
    "values",
    "inside",
    "python",
    "comparing",
    "numbers",
    "could",
    "also",
    "compare",
    "strings",
    "could",
    "easily",
    "make",
    "like",
    "know",
    "could",
    "make",
    "like",
    "dog",
    "make",
    "dog",
    "could",
    "say",
    "different",
    "operator",
    "could",
    "say",
    "like",
    "double",
    "equal",
    "sign",
    "would",
    "mean",
    "equal",
    "could",
    "basically",
    "say",
    "like",
    "string",
    "equal",
    "string",
    "basically",
    "like",
    "compare",
    "different",
    "data",
    "types",
    "know",
    "could",
    "compare",
    "numbers",
    "strings",
    "could",
    "also",
    "compare",
    "bullions",
    "comparison",
    "operators",
    "one",
    "greater",
    "equal",
    "bunch",
    "comparison",
    "operators",
    "use",
    "basic",
    "going",
    "double",
    "equal",
    "sign",
    "basically",
    "checks",
    "see",
    "two",
    "values",
    "equal",
    "say",
    "like",
    "number",
    "one",
    "equal",
    "number",
    "two",
    "also",
    "say",
    "equals",
    "exclamation",
    "point",
    "basically",
    "mean",
    "equal",
    "num",
    "one",
    "equal",
    "num",
    "two",
    "also",
    "greater",
    "less",
    "greater",
    "equal",
    "less",
    "equal",
    "kind",
    "operators",
    "know",
    "basic",
    "comparison",
    "operators",
    "going",
    "using",
    "python",
    "using",
    "comparisons",
    "really",
    "awesome",
    "going",
    "tons",
    "tons",
    "situations",
    "inside",
    "python",
    "going",
    "want",
    "compare",
    "different",
    "values",
    "extremely",
    "useful",
    "tutorial",
    "going",
    "talk",
    "guys",
    "building",
    "calculator",
    "python",
    "following",
    "along",
    "course",
    "know",
    "beginning",
    "course",
    "actually",
    "created",
    "basic",
    "calculator",
    "basically",
    "user",
    "could",
    "enter",
    "two",
    "numbers",
    "calculator",
    "would",
    "add",
    "numbers",
    "together",
    "spit",
    "answer",
    "tutorial",
    "want",
    "show",
    "guys",
    "build",
    "advanced",
    "calculator",
    "calculator",
    "going",
    "able",
    "perform",
    "basic",
    "arithmetic",
    "operations",
    "add",
    "subtract",
    "multiply",
    "divide",
    "actually",
    "allow",
    "user",
    "specify",
    "one",
    "want",
    "user",
    "enter",
    "number",
    "enter",
    "whatever",
    "operator",
    "want",
    "use",
    "plus",
    "minus",
    "divide",
    "multiply",
    "enter",
    "second",
    "number",
    "perform",
    "operation",
    "pretty",
    "cool",
    "going",
    "show",
    "use",
    "statements",
    "like",
    "practical",
    "application",
    "let",
    "get",
    "started",
    "first",
    "thing",
    "want",
    "get",
    "input",
    "user",
    "going",
    "create",
    "three",
    "variables",
    "one",
    "first",
    "number",
    "one",
    "second",
    "number",
    "one",
    "operator",
    "basically",
    "store",
    "values",
    "user",
    "inputs",
    "variables",
    "first",
    "one",
    "num",
    "one",
    "going",
    "set",
    "equal",
    "input",
    "going",
    "give",
    "prompt",
    "say",
    "enter",
    "first",
    "number",
    "actually",
    "thing",
    "whatever",
    "user",
    "enters",
    "going",
    "want",
    "convert",
    "number",
    "generally",
    "python",
    "get",
    "input",
    "user",
    "matter",
    "put",
    "gets",
    "converted",
    "string",
    "want",
    "string",
    "going",
    "adding",
    "subtracting",
    "multiplying",
    "numbers",
    "together",
    "whenever",
    "enter",
    "number",
    "want",
    "immediately",
    "convert",
    "actual",
    "like",
    "number",
    "data",
    "type",
    "instead",
    "string",
    "actually",
    "say",
    "float",
    "surround",
    "entire",
    "input",
    "tag",
    "parentheses",
    "going",
    "going",
    "immediately",
    "convert",
    "whatever",
    "user",
    "inputs",
    "float",
    "going",
    "mean",
    "going",
    "insert",
    "number",
    "otherwise",
    "get",
    "error",
    "part",
    "work",
    "us",
    "actually",
    "going",
    "copy",
    "guy",
    "go",
    "ahead",
    "paste",
    "paste",
    "one",
    "time",
    "basically",
    "trying",
    "get",
    "three",
    "pieces",
    "input",
    "user",
    "second",
    "thing",
    "want",
    "get",
    "operator",
    "going",
    "say",
    "op",
    "operator",
    "actually",
    "get",
    "rid",
    "float",
    "want",
    "keep",
    "string",
    "say",
    "enter",
    "operator",
    "going",
    "like",
    "plus",
    "minus",
    "multiplication",
    "whatever",
    "finally",
    "get",
    "num",
    "two",
    "going",
    "want",
    "convert",
    "float",
    "say",
    "enter",
    "second",
    "number",
    "basically",
    "getting",
    "first",
    "number",
    "getting",
    "operator",
    "getting",
    "second",
    "number",
    "user",
    "need",
    "need",
    "figure",
    "inside",
    "op",
    "words",
    "need",
    "figure",
    "operator",
    "user",
    "trying",
    "trying",
    "addition",
    "trying",
    "subtraction",
    "like",
    "want",
    "figure",
    "use",
    "statement",
    "order",
    "figure",
    "going",
    "come",
    "basically",
    "going",
    "create",
    "statement",
    "going",
    "say",
    "want",
    "check",
    "condition",
    "basically",
    "going",
    "check",
    "see",
    "operator",
    "equal",
    "plus",
    "sign",
    "say",
    "op",
    "equals",
    "plus",
    "sign",
    "operator",
    "equal",
    "plus",
    "sign",
    "going",
    "print",
    "num",
    "one",
    "plus",
    "num",
    "two",
    "let",
    "say",
    "instead",
    "plus",
    "sign",
    "entered",
    "something",
    "else",
    "say",
    "op",
    "equal",
    "check",
    "minus",
    "sign",
    "print",
    "num",
    "one",
    "minus",
    "num",
    "two",
    "actually",
    "forgot",
    "put",
    "colon",
    "everything",
    "say",
    "l",
    "op",
    "equal",
    "division",
    "divide",
    "two",
    "numbers",
    "print",
    "num",
    "one",
    "divided",
    "num",
    "two",
    "finally",
    "thing",
    "multiplication",
    "say",
    "l",
    "op",
    "equal",
    "asterisk",
    "print",
    "num",
    "one",
    "times",
    "num",
    "two",
    "alright",
    "basically",
    "every",
    "know",
    "condition",
    "also",
    "want",
    "put",
    "else",
    "statement",
    "case",
    "user",
    "enters",
    "operation",
    "like",
    "one",
    "four",
    "specified",
    "want",
    "throw",
    "error",
    "going",
    "say",
    "op",
    "actually",
    "say",
    "else",
    "print",
    "like",
    "invalid",
    "operator",
    "alright",
    "statement",
    "give",
    "us",
    "everything",
    "want",
    "basically",
    "checking",
    "see",
    "equal",
    "plus",
    "sign",
    "minus",
    "sign",
    "division",
    "sign",
    "multiplication",
    "sign",
    "depending",
    "one",
    "equal",
    "different",
    "operation",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "see",
    "going",
    "run",
    "program",
    "says",
    "enter",
    "first",
    "number",
    "let",
    "enter",
    "five",
    "enter",
    "operator",
    "addition",
    "enter",
    "second",
    "number",
    "let",
    "prints",
    "answer",
    "calculator",
    "actually",
    "works",
    "let",
    "try",
    "another",
    "operator",
    "make",
    "sure",
    "six",
    "multiply",
    "know",
    "go",
    "multiplication",
    "looks",
    "like",
    "got",
    "answer",
    "calculator",
    "seems",
    "working",
    "basically",
    "got",
    "input",
    "user",
    "used",
    "statements",
    "figure",
    "wanted",
    "check",
    "see",
    "wanted",
    "addition",
    "check",
    "see",
    "wanted",
    "subtraction",
    "division",
    "multiplication",
    "also",
    "check",
    "see",
    "entered",
    "invalid",
    "operator",
    "actually",
    "try",
    "enter",
    "like",
    "five",
    "enter",
    "like",
    "open",
    "close",
    "parentheses",
    "four",
    "see",
    "able",
    "tell",
    "like",
    "program",
    "smart",
    "enough",
    "know",
    "valid",
    "operator",
    "statements",
    "really",
    "powerful",
    "use",
    "combination",
    "getting",
    "user",
    "input",
    "create",
    "little",
    "calculator",
    "tutorial",
    "want",
    "talk",
    "guys",
    "using",
    "dictionaries",
    "python",
    "dictionary",
    "special",
    "structure",
    "python",
    "allows",
    "us",
    "store",
    "information",
    "called",
    "key",
    "value",
    "pairs",
    "essentially",
    "create",
    "bunch",
    "different",
    "key",
    "value",
    "pairs",
    "want",
    "access",
    "specific",
    "piece",
    "information",
    "inside",
    "dictionary",
    "refer",
    "key",
    "word",
    "dictionary",
    "actually",
    "pretty",
    "appropriate",
    "guys",
    "familiar",
    "normal",
    "dictionary",
    "know",
    "normal",
    "dictionary",
    "word",
    "definition",
    "associated",
    "word",
    "situation",
    "word",
    "would",
    "key",
    "words",
    "word",
    "like",
    "uniquely",
    "identifies",
    "inside",
    "dictionary",
    "value",
    "would",
    "actual",
    "definition",
    "going",
    "make",
    "sense",
    "start",
    "working",
    "wanted",
    "give",
    "guys",
    "quick",
    "introduction",
    "tutorial",
    "want",
    "create",
    "little",
    "program",
    "allow",
    "us",
    "convert",
    "three",
    "digit",
    "month",
    "name",
    "full",
    "month",
    "name",
    "could",
    "convert",
    "example",
    "like",
    "jan",
    "january",
    "could",
    "convert",
    "r",
    "march",
    "like",
    "want",
    "able",
    "program",
    "us",
    "actually",
    "pretty",
    "good",
    "use",
    "case",
    "dictionary",
    "actually",
    "going",
    "create",
    "dictionary",
    "going",
    "show",
    "guys",
    "first",
    "thing",
    "need",
    "creating",
    "dictionary",
    "give",
    "name",
    "want",
    "give",
    "specific",
    "name",
    "going",
    "call",
    "month",
    "conversions",
    "want",
    "set",
    "equal",
    "open",
    "closed",
    "curly",
    "bracket",
    "whenever",
    "create",
    "dictionary",
    "python",
    "always",
    "going",
    "want",
    "create",
    "inside",
    "open",
    "closed",
    "curly",
    "brackets",
    "inside",
    "dictionary",
    "start",
    "defining",
    "called",
    "key",
    "value",
    "pairs",
    "define",
    "key",
    "give",
    "corresponding",
    "value",
    "way",
    "typing",
    "key",
    "typing",
    "value",
    "case",
    "converting",
    "three",
    "digit",
    "month",
    "names",
    "full",
    "month",
    "names",
    "would",
    "want",
    "type",
    "example",
    "jan",
    "type",
    "colon",
    "want",
    "type",
    "value",
    "want",
    "associate",
    "could",
    "say",
    "january",
    "basically",
    "every",
    "combination",
    "could",
    "say",
    "like",
    "feb",
    "would",
    "february",
    "actually",
    "one",
    "going",
    "need",
    "put",
    "comma",
    "could",
    "march",
    "say",
    "essentially",
    "specify",
    "entry",
    "inside",
    "dictionary",
    "one",
    "would",
    "key",
    "would",
    "value",
    "one",
    "thing",
    "keys",
    "unique",
    "come",
    "change",
    "jan",
    "actually",
    "going",
    "give",
    "us",
    "little",
    "warning",
    "see",
    "says",
    "dictionary",
    "contains",
    "duplicate",
    "keys",
    "creating",
    "dictionaries",
    "always",
    "want",
    "make",
    "sure",
    "keys",
    "unique",
    "right",
    "going",
    "go",
    "ahead",
    "create",
    "one",
    "one",
    "months",
    "come",
    "back",
    "talk",
    "right",
    "gone",
    "ahead",
    "created",
    "entry",
    "12",
    "months",
    "bunch",
    "unique",
    "keys",
    "one",
    "keys",
    "associated",
    "different",
    "value",
    "basics",
    "creating",
    "dictionary",
    "bunch",
    "different",
    "key",
    "value",
    "pairs",
    "actually",
    "access",
    "inside",
    "dictionary",
    "wanted",
    "access",
    "specific",
    "key",
    "specific",
    "value",
    "come",
    "actually",
    "going",
    "print",
    "onto",
    "screen",
    "see",
    "refer",
    "dictionary",
    "name",
    "called",
    "month",
    "conversions",
    "actually",
    "bunch",
    "different",
    "ways",
    "access",
    "month",
    "names",
    "could",
    "access",
    "different",
    "entries",
    "inside",
    "dictionary",
    "first",
    "way",
    "making",
    "open",
    "close",
    "square",
    "bracket",
    "inside",
    "type",
    "one",
    "keys",
    "example",
    "inside",
    "could",
    "type",
    "give",
    "us",
    "back",
    "full",
    "name",
    "november",
    "print",
    "see",
    "get",
    "back",
    "november",
    "could",
    "thing",
    "know",
    "could",
    "say",
    "like",
    "get",
    "march",
    "back",
    "able",
    "refer",
    "key",
    "going",
    "go",
    "dictionary",
    "going",
    "give",
    "value",
    "associated",
    "key",
    "actually",
    "another",
    "way",
    "could",
    "could",
    "say",
    "month",
    "conversions",
    "dot",
    "get",
    "inside",
    "could",
    "also",
    "pass",
    "name",
    "key",
    "could",
    "pass",
    "like",
    "e",
    "printing",
    "december",
    "cool",
    "using",
    "get",
    "function",
    "actually",
    "specify",
    "default",
    "value",
    "want",
    "use",
    "key",
    "found",
    "going",
    "certain",
    "cases",
    "dealing",
    "dictionaries",
    "going",
    "put",
    "key",
    "might",
    "necessarily",
    "map",
    "value",
    "inside",
    "dictionary",
    "put",
    "invalid",
    "key",
    "let",
    "try",
    "put",
    "like",
    "l",
    "u",
    "month",
    "abbreviation",
    "try",
    "run",
    "see",
    "get",
    "none",
    "lot",
    "cases",
    "going",
    "want",
    "create",
    "sort",
    "default",
    "value",
    "situation",
    "key",
    "mapable",
    "values",
    "inside",
    "dictionary",
    "actually",
    "pass",
    "default",
    "value",
    "inside",
    "dot",
    "get",
    "function",
    "make",
    "comma",
    "pass",
    "like",
    "default",
    "value",
    "get",
    "printed",
    "say",
    "like",
    "valid",
    "key",
    "put",
    "invalid",
    "key",
    "instead",
    "saying",
    "none",
    "going",
    "go",
    "ahead",
    "say",
    "valid",
    "key",
    "going",
    "give",
    "us",
    "like",
    "default",
    "value",
    "fall",
    "back",
    "dictionaries",
    "really",
    "awesome",
    "keys",
    "string",
    "could",
    "also",
    "use",
    "numbers",
    "example",
    "could",
    "say",
    "like",
    "zero",
    "one",
    "10",
    "like",
    "put",
    "numbers",
    "want",
    "keys",
    "long",
    "unique",
    "could",
    "access",
    "keys",
    "like",
    "normally",
    "would",
    "get",
    "function",
    "open",
    "close",
    "square",
    "brackets",
    "sort",
    "basics",
    "using",
    "dictionaries",
    "really",
    "useful",
    "store",
    "key",
    "value",
    "pairs",
    "honestly",
    "going",
    "using",
    "lot",
    "python",
    "store",
    "different",
    "types",
    "data",
    "tutorial",
    "want",
    "talk",
    "guys",
    "loops",
    "python",
    "loop",
    "basically",
    "structure",
    "python",
    "allows",
    "us",
    "loop",
    "execute",
    "block",
    "code",
    "multiple",
    "times",
    "specify",
    "like",
    "different",
    "lines",
    "code",
    "put",
    "code",
    "inside",
    "loop",
    "would",
    "basically",
    "loop",
    "code",
    "executing",
    "repeatedly",
    "certain",
    "condition",
    "false",
    "loops",
    "awesome",
    "lot",
    "situations",
    "python",
    "going",
    "want",
    "loop",
    "specific",
    "lines",
    "code",
    "tutorial",
    "want",
    "show",
    "guys",
    "like",
    "bare",
    "basics",
    "loops",
    "work",
    "future",
    "tutorials",
    "going",
    "use",
    "loops",
    "create",
    "little",
    "games",
    "stuff",
    "like",
    "let",
    "talk",
    "loops",
    "create",
    "loop",
    "first",
    "thing",
    "want",
    "actually",
    "create",
    "integer",
    "basically",
    "creating",
    "variable",
    "number",
    "loop",
    "demonstration",
    "going",
    "going",
    "call",
    "going",
    "set",
    "equal",
    "one",
    "want",
    "want",
    "create",
    "loop",
    "basically",
    "going",
    "say",
    "want",
    "specify",
    "condition",
    "called",
    "loop",
    "condition",
    "also",
    "refer",
    "loop",
    "guard",
    "basically",
    "going",
    "keep",
    "looping",
    "code",
    "inside",
    "loop",
    "long",
    "condition",
    "true",
    "whatever",
    "condition",
    "put",
    "long",
    "true",
    "going",
    "keep",
    "looping",
    "code",
    "inside",
    "loop",
    "going",
    "say",
    "less",
    "equal",
    "going",
    "put",
    "colon",
    "going",
    "make",
    "new",
    "line",
    "anything",
    "loop",
    "declaration",
    "indented",
    "like",
    "going",
    "considered",
    "code",
    "inside",
    "loop",
    "code",
    "going",
    "get",
    "repeatedly",
    "executed",
    "condition",
    "true",
    "going",
    "put",
    "simple",
    "line",
    "code",
    "going",
    "print",
    "value",
    "going",
    "actually",
    "increment",
    "going",
    "add",
    "one",
    "going",
    "say",
    "equal",
    "plus",
    "one",
    "basically",
    "taking",
    "value",
    "adding",
    "one",
    "actually",
    "shorthand",
    "use",
    "python",
    "something",
    "like",
    "though",
    "could",
    "say",
    "plus",
    "equals",
    "one",
    "automatically",
    "going",
    "add",
    "one",
    "like",
    "little",
    "shorthand",
    "see",
    "people",
    "python",
    "using",
    "lot",
    "basically",
    "loop",
    "outline",
    "loop",
    "defining",
    "variable",
    "going",
    "keep",
    "looping",
    "code",
    "inside",
    "loop",
    "long",
    "condition",
    "true",
    "condition",
    "false",
    "example",
    "equal",
    "eleven",
    "going",
    "loop",
    "code",
    "anymore",
    "going",
    "move",
    "actually",
    "going",
    "print",
    "done",
    "loop",
    "kind",
    "illustrate",
    "us",
    "alright",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "going",
    "run",
    "see",
    "get",
    "output",
    "actually",
    "going",
    "get",
    "numbers",
    "printed",
    "one",
    "way",
    "ten",
    "printing",
    "done",
    "loop",
    "basically",
    "happening",
    "printing",
    "every",
    "time",
    "go",
    "loop",
    "initially",
    "equal",
    "one",
    "right",
    "first",
    "thing",
    "python",
    "going",
    "gets",
    "loop",
    "going",
    "check",
    "condition",
    "anything",
    "else",
    "going",
    "check",
    "condition",
    "going",
    "say",
    "okay",
    "one",
    "less",
    "equal",
    "ten",
    "true",
    "long",
    "guy",
    "true",
    "going",
    "go",
    "loop",
    "code",
    "inside",
    "going",
    "print",
    "value",
    "one",
    "going",
    "add",
    "one",
    "going",
    "go",
    "one",
    "two",
    "going",
    "going",
    "go",
    "way",
    "back",
    "loop",
    "declaration",
    "going",
    "check",
    "condition",
    "remember",
    "checked",
    "condition",
    "first",
    "time",
    "loop",
    "code",
    "go",
    "back",
    "top",
    "check",
    "going",
    "say",
    "okay",
    "less",
    "equal",
    "ten",
    "point",
    "equal",
    "two",
    "less",
    "equal",
    "ten",
    "going",
    "go",
    "execute",
    "code",
    "going",
    "print",
    "going",
    "two",
    "going",
    "add",
    "one",
    "three",
    "python",
    "going",
    "go",
    "way",
    "back",
    "top",
    "going",
    "check",
    "condition",
    "every",
    "iteration",
    "loop",
    "python",
    "inside",
    "loop",
    "going",
    "check",
    "condition",
    "long",
    "condition",
    "remains",
    "true",
    "going",
    "keep",
    "executing",
    "code",
    "inside",
    "loop",
    "eventually",
    "though",
    "program",
    "going",
    "end",
    "eleven",
    "last",
    "iteration",
    "going",
    "end",
    "eleven",
    "going",
    "come",
    "back",
    "going",
    "say",
    "hmm",
    "eleven",
    "less",
    "equal",
    "ten",
    "nope",
    "since",
    "nope",
    "going",
    "come",
    "print",
    "done",
    "loop",
    "line",
    "basics",
    "loops",
    "work",
    "specifying",
    "loop",
    "condition",
    "long",
    "condition",
    "true",
    "keep",
    "executing",
    "code",
    "inside",
    "loop",
    "every",
    "execution",
    "loop",
    "going",
    "come",
    "back",
    "check",
    "condition",
    "end",
    "printing",
    "basics",
    "loop",
    "use",
    "loops",
    "sorts",
    "things",
    "like",
    "loops",
    "powerful",
    "tutorial",
    "going",
    "show",
    "guys",
    "build",
    "basic",
    "guessing",
    "game",
    "python",
    "guessing",
    "game",
    "actually",
    "going",
    "using",
    "sorts",
    "cool",
    "programming",
    "structures",
    "learned",
    "point",
    "course",
    "going",
    "using",
    "things",
    "like",
    "statements",
    "loops",
    "variables",
    "cool",
    "things",
    "order",
    "build",
    "game",
    "basic",
    "idea",
    "specify",
    "like",
    "secret",
    "word",
    "secret",
    "word",
    "store",
    "inside",
    "program",
    "user",
    "interact",
    "program",
    "try",
    "guess",
    "secret",
    "word",
    "want",
    "able",
    "happen",
    "want",
    "user",
    "able",
    "keep",
    "guessing",
    "secret",
    "word",
    "keep",
    "typing",
    "different",
    "responses",
    "get",
    "secret",
    "word",
    "right",
    "basics",
    "game",
    "going",
    "let",
    "go",
    "ahead",
    "create",
    "first",
    "thing",
    "want",
    "create",
    "variable",
    "store",
    "secret",
    "word",
    "could",
    "say",
    "secret",
    "word",
    "going",
    "set",
    "equal",
    "secret",
    "word",
    "make",
    "draft",
    "pretty",
    "good",
    "secret",
    "word",
    "want",
    "want",
    "create",
    "variable",
    "store",
    "user",
    "response",
    "want",
    "variable",
    "store",
    "like",
    "guesses",
    "user",
    "makes",
    "going",
    "call",
    "guess",
    "going",
    "set",
    "equal",
    "empty",
    "string",
    "right",
    "secret",
    "word",
    "variable",
    "store",
    "user",
    "guess",
    "need",
    "need",
    "able",
    "prompt",
    "user",
    "input",
    "secret",
    "word",
    "catch",
    "want",
    "happen",
    "want",
    "enter",
    "secret",
    "word",
    "guess",
    "correctly",
    "want",
    "prompt",
    "enter",
    "ca",
    "use",
    "single",
    "input",
    "statement",
    "actually",
    "use",
    "something",
    "called",
    "loop",
    "use",
    "loop",
    "order",
    "continually",
    "ask",
    "person",
    "guess",
    "word",
    "guess",
    "correctly",
    "let",
    "go",
    "ahead",
    "create",
    "loop",
    "going",
    "say",
    "say",
    "need",
    "specify",
    "looping",
    "condition",
    "looping",
    "guard",
    "basically",
    "something",
    "long",
    "true",
    "going",
    "keep",
    "looping",
    "loop",
    "basically",
    "want",
    "say",
    "want",
    "keep",
    "looping",
    "long",
    "user",
    "guess",
    "equal",
    "secret",
    "word",
    "long",
    "guessed",
    "secret",
    "word",
    "going",
    "keep",
    "going",
    "loop",
    "inside",
    "loop",
    "going",
    "going",
    "ask",
    "input",
    "secret",
    "word",
    "take",
    "guess",
    "variable",
    "set",
    "equal",
    "input",
    "going",
    "say",
    "enter",
    "guess",
    "basically",
    "telling",
    "user",
    "enter",
    "guess",
    "storing",
    "whatever",
    "enter",
    "inside",
    "guess",
    "variable",
    "going",
    "happen",
    "going",
    "come",
    "back",
    "going",
    "check",
    "see",
    "guess",
    "equal",
    "secret",
    "word",
    "guess",
    "equal",
    "secret",
    "word",
    "going",
    "guess",
    "equal",
    "secret",
    "word",
    "going",
    "break",
    "loop",
    "come",
    "print",
    "success",
    "message",
    "could",
    "say",
    "win",
    "got",
    "secret",
    "word",
    "simple",
    "program",
    "essentially",
    "code",
    "need",
    "able",
    "build",
    "game",
    "like",
    "let",
    "go",
    "ahead",
    "play",
    "game",
    "run",
    "see",
    "going",
    "click",
    "play",
    "see",
    "prompting",
    "us",
    "enter",
    "guess",
    "going",
    "type",
    "know",
    "random",
    "text",
    "type",
    "whatever",
    "want",
    "long",
    "entering",
    "secret",
    "word",
    "going",
    "keep",
    "prompting",
    "us",
    "enter",
    "different",
    "information",
    "enter",
    "secret",
    "word",
    "enter",
    "draft",
    "sudden",
    "program",
    "going",
    "terminate",
    "going",
    "say",
    "hey",
    "win",
    "able",
    "guess",
    "secret",
    "word",
    "like",
    "really",
    "cool",
    "way",
    "us",
    "able",
    "actually",
    "fully",
    "functional",
    "guessing",
    "game",
    "think",
    "guessing",
    "game",
    "could",
    "actually",
    "improved",
    "quite",
    "bit",
    "lot",
    "times",
    "making",
    "guessing",
    "game",
    "want",
    "set",
    "limit",
    "words",
    "want",
    "set",
    "limit",
    "number",
    "times",
    "user",
    "try",
    "guess",
    "word",
    "let",
    "say",
    "user",
    "three",
    "tries",
    "right",
    "three",
    "guesses",
    "order",
    "guess",
    "word",
    "ca",
    "guess",
    "word",
    "three",
    "tries",
    "going",
    "lose",
    "game",
    "guess",
    "word",
    "inside",
    "three",
    "tries",
    "win",
    "game",
    "right",
    "think",
    "would",
    "little",
    "bit",
    "fun",
    "game",
    "try",
    "program",
    "game",
    "basically",
    "going",
    "set",
    "limit",
    "number",
    "guesses",
    "user",
    "order",
    "going",
    "create",
    "couple",
    "variables",
    "words",
    "going",
    "store",
    "couple",
    "pieces",
    "information",
    "first",
    "piece",
    "information",
    "want",
    "keep",
    "track",
    "many",
    "times",
    "user",
    "guessed",
    "right",
    "make",
    "variable",
    "called",
    "guess",
    "count",
    "set",
    "equal",
    "zero",
    "initially",
    "user",
    "wo",
    "guessed",
    "loop",
    "every",
    "time",
    "go",
    "loop",
    "want",
    "increment",
    "guess",
    "count",
    "right",
    "every",
    "time",
    "gone",
    "loop",
    "want",
    "increment",
    "count",
    "means",
    "user",
    "guessed",
    "going",
    "say",
    "guess",
    "count",
    "plus",
    "equals",
    "one",
    "going",
    "add",
    "one",
    "guess",
    "count",
    "actually",
    "whoops",
    "alright",
    "iteration",
    "loop",
    "going",
    "go",
    "ahead",
    "add",
    "one",
    "guess",
    "count",
    "alright",
    "first",
    "variable",
    "going",
    "need",
    "also",
    "going",
    "want",
    "store",
    "another",
    "variable",
    "going",
    "called",
    "guess",
    "limit",
    "basically",
    "going",
    "tell",
    "us",
    "many",
    "times",
    "user",
    "guess",
    "word",
    "going",
    "going",
    "guess",
    "limit",
    "basically",
    "say",
    "three",
    "let",
    "say",
    "user",
    "three",
    "tries",
    "guess",
    "word",
    "three",
    "strikes",
    "user",
    "ca",
    "get",
    "three",
    "tries",
    "going",
    "basically",
    "say",
    "lose",
    "game",
    "also",
    "going",
    "need",
    "one",
    "variable",
    "going",
    "call",
    "guesses",
    "going",
    "set",
    "equal",
    "false",
    "initially",
    "guesses",
    "variable",
    "going",
    "boolean",
    "going",
    "tell",
    "us",
    "whether",
    "user",
    "guesses",
    "guesses",
    "true",
    "means",
    "guesses",
    "right",
    "basically",
    "lost",
    "game",
    "guesses",
    "false",
    "means",
    "still",
    "guesses",
    "left",
    "keep",
    "playing",
    "right",
    "let",
    "use",
    "different",
    "variables",
    "order",
    "make",
    "program",
    "functional",
    "first",
    "thing",
    "want",
    "go",
    "loop",
    "want",
    "check",
    "make",
    "sure",
    "user",
    "guesses",
    "right",
    "words",
    "let",
    "user",
    "enter",
    "guess",
    "want",
    "check",
    "see",
    "already",
    "used",
    "guesses",
    "make",
    "statement",
    "say",
    "inside",
    "condition",
    "want",
    "check",
    "see",
    "guess",
    "count",
    "less",
    "guess",
    "limit",
    "guess",
    "count",
    "less",
    "guess",
    "limit",
    "means",
    "guessed",
    "total",
    "number",
    "guesses",
    "guesses",
    "left",
    "case",
    "true",
    "going",
    "go",
    "ahead",
    "give",
    "guess",
    "increment",
    "guess",
    "count",
    "true",
    "words",
    "reached",
    "guess",
    "limit",
    "going",
    "want",
    "set",
    "guesses",
    "equal",
    "true",
    "guesses",
    "right",
    "guesses",
    "guess",
    "count",
    "less",
    "guess",
    "limit",
    "means",
    "guesses",
    "guesses",
    "actually",
    "one",
    "thing",
    "need",
    "inside",
    "loop",
    "need",
    "add",
    "another",
    "condition",
    "loop",
    "guard",
    "right",
    "going",
    "keep",
    "looping",
    "long",
    "guess",
    "equal",
    "secret",
    "word",
    "remember",
    "user",
    "guesses",
    "words",
    "reached",
    "guess",
    "limit",
    "want",
    "guess",
    "anymore",
    "right",
    "ran",
    "guesses",
    "want",
    "basically",
    "break",
    "loop",
    "give",
    "guesses",
    "going",
    "go",
    "ahead",
    "add",
    "another",
    "condition",
    "onto",
    "going",
    "say",
    "guessed",
    "secret",
    "word",
    "guesses",
    "going",
    "guesses",
    "going",
    "keep",
    "looping",
    "long",
    "guess",
    "word",
    "long",
    "still",
    "guesses",
    "left",
    "going",
    "keep",
    "looping",
    "otherwise",
    "going",
    "break",
    "loop",
    "printing",
    "win",
    "actually",
    "break",
    "loop",
    "going",
    "two",
    "possible",
    "scenarios",
    "two",
    "possible",
    "ways",
    "loop",
    "could",
    "end",
    "right",
    "either",
    "guesses",
    "equal",
    "secret",
    "word",
    "either",
    "user",
    "guessed",
    "word",
    "correctly",
    "user",
    "ran",
    "guesses",
    "two",
    "situations",
    "need",
    "account",
    "going",
    "use",
    "statement",
    "figure",
    "going",
    "say",
    "going",
    "type",
    "guesses",
    "user",
    "guesses",
    "want",
    "print",
    "lose",
    "basically",
    "going",
    "like",
    "lost",
    "game",
    "otherwise",
    "though",
    "guesses",
    "means",
    "guess",
    "word",
    "correctly",
    "going",
    "print",
    "win",
    "alright",
    "logic",
    "little",
    "guessing",
    "game",
    "setup",
    "let",
    "see",
    "run",
    "play",
    "going",
    "run",
    "program",
    "going",
    "tell",
    "us",
    "enter",
    "guess",
    "enter",
    "guesses",
    "going",
    "try",
    "lose",
    "game",
    "going",
    "enter",
    "one",
    "guess",
    "two",
    "guesses",
    "final",
    "guess",
    "get",
    "actually",
    "lose",
    "game",
    "see",
    "says",
    "guesses",
    "lose",
    "able",
    "guess",
    "number",
    "tries",
    "let",
    "run",
    "program",
    "try",
    "win",
    "game",
    "get",
    "couple",
    "wrong",
    "let",
    "say",
    "last",
    "guess",
    "like",
    "okay",
    "type",
    "word",
    "bam",
    "game",
    "basically",
    "create",
    "game",
    "guess",
    "limit",
    "lot",
    "code",
    "let",
    "walk",
    "guys",
    "one",
    "time",
    "get",
    "full",
    "understanding",
    "created",
    "different",
    "variables",
    "created",
    "secret",
    "word",
    "variable",
    "created",
    "guess",
    "variable",
    "also",
    "created",
    "variables",
    "created",
    "guess",
    "count",
    "variable",
    "keeps",
    "track",
    "many",
    "times",
    "user",
    "guessed",
    "word",
    "see",
    "every",
    "time",
    "give",
    "guess",
    "incrementing",
    "guess",
    "count",
    "also",
    "guess",
    "limit",
    "guess",
    "limit",
    "telling",
    "program",
    "many",
    "times",
    "user",
    "guess",
    "go",
    "loop",
    "first",
    "thing",
    "checking",
    "see",
    "guess",
    "count",
    "less",
    "guess",
    "limit",
    "words",
    "still",
    "guesses",
    "left",
    "going",
    "get",
    "input",
    "user",
    "otherwise",
    "variable",
    "called",
    "guesses",
    "guesses",
    "going",
    "tell",
    "us",
    "whether",
    "guesses",
    "left",
    "equal",
    "false",
    "means",
    "guesses",
    "equal",
    "true",
    "however",
    "means",
    "dice",
    "guesses",
    "done",
    "lost",
    "game",
    "last",
    "thing",
    "needed",
    "specify",
    "additional",
    "condition",
    "going",
    "keep",
    "looping",
    "code",
    "inside",
    "loop",
    "long",
    "conditions",
    "true",
    "long",
    "guessed",
    "word",
    "long",
    "guesses",
    "going",
    "keep",
    "looping",
    "eventually",
    "user",
    "break",
    "loop",
    "going",
    "two",
    "possible",
    "situations",
    "first",
    "situation",
    "ran",
    "guesses",
    "want",
    "check",
    "see",
    "situation",
    "want",
    "check",
    "see",
    "guesses",
    "print",
    "lose",
    "message",
    "must",
    "guessed",
    "correctly",
    "win",
    "use",
    "loops",
    "statements",
    "also",
    "variables",
    "combination",
    "build",
    "pretty",
    "awesome",
    "guessing",
    "game",
    "tutorial",
    "want",
    "talk",
    "guys",
    "using",
    "loops",
    "python",
    "loop",
    "special",
    "type",
    "loop",
    "python",
    "allows",
    "us",
    "loop",
    "different",
    "collections",
    "items",
    "lot",
    "times",
    "use",
    "loops",
    "python",
    "like",
    "loop",
    "different",
    "arrays",
    "loop",
    "like",
    "letters",
    "inside",
    "string",
    "could",
    "loop",
    "like",
    "series",
    "numbers",
    "loops",
    "provide",
    "specific",
    "purpose",
    "easiest",
    "way",
    "kind",
    "wrap",
    "head",
    "around",
    "loops",
    "useful",
    "show",
    "guys",
    "bunch",
    "different",
    "examples",
    "exactly",
    "going",
    "going",
    "look",
    "loops",
    "awesome",
    "text",
    "file",
    "python",
    "file",
    "going",
    "write",
    "couple",
    "different",
    "loops",
    "way",
    "create",
    "loop",
    "saying",
    "want",
    "specify",
    "variable",
    "variable",
    "going",
    "essentially",
    "represent",
    "different",
    "value",
    "every",
    "time",
    "go",
    "loop",
    "guys",
    "see",
    "works",
    "second",
    "know",
    "variable",
    "going",
    "used",
    "every",
    "iteration",
    "loop",
    "time",
    "likely",
    "different",
    "value",
    "case",
    "going",
    "call",
    "letter",
    "going",
    "say",
    "letter",
    "want",
    "want",
    "specify",
    "collection",
    "want",
    "loop",
    "one",
    "example",
    "would",
    "like",
    "string",
    "could",
    "put",
    "string",
    "could",
    "put",
    "like",
    "draft",
    "academy",
    "put",
    "colon",
    "basically",
    "going",
    "say",
    "going",
    "say",
    "every",
    "letter",
    "inside",
    "draft",
    "academy",
    "want",
    "something",
    "inside",
    "loop",
    "need",
    "indent",
    "put",
    "want",
    "letter",
    "let",
    "show",
    "guys",
    "like",
    "basically",
    "going",
    "print",
    "letter",
    "print",
    "letter",
    "variable",
    "actually",
    "going",
    "print",
    "different",
    "letter",
    "inside",
    "draft",
    "academy",
    "string",
    "every",
    "single",
    "iteration",
    "loop",
    "going",
    "run",
    "program",
    "inside",
    "console",
    "see",
    "basically",
    "printing",
    "draft",
    "academy",
    "first",
    "iteration",
    "loop",
    "printed",
    "first",
    "letter",
    "draft",
    "academy",
    "second",
    "iteration",
    "loop",
    "printed",
    "said",
    "third",
    "r",
    "fourth",
    "essentially",
    "looping",
    "letters",
    "inside",
    "draft",
    "academy",
    "saying",
    "letter",
    "draft",
    "academy",
    "want",
    "print",
    "letter",
    "kind",
    "like",
    "four",
    "loops",
    "used",
    "define",
    "variable",
    "variable",
    "change",
    "iteration",
    "loop",
    "right",
    "first",
    "iteration",
    "loop",
    "letter",
    "variable",
    "represented",
    "second",
    "iteration",
    "loop",
    "letter",
    "variable",
    "stored",
    "value",
    "etc",
    "right",
    "went",
    "entire",
    "string",
    "able",
    "print",
    "letter",
    "addition",
    "using",
    "strings",
    "also",
    "use",
    "collections",
    "example",
    "like",
    "array",
    "created",
    "array",
    "let",
    "call",
    "friends",
    "going",
    "set",
    "equal",
    "bunch",
    "different",
    "values",
    "put",
    "like",
    "list",
    "friends",
    "say",
    "like",
    "jim",
    "karen",
    "kevin",
    "instead",
    "saying",
    "letter",
    "call",
    "friend",
    "say",
    "friend",
    "friends",
    "print",
    "friend",
    "saying",
    "friend",
    "inside",
    "friends",
    "array",
    "want",
    "print",
    "friend",
    "actually",
    "able",
    "print",
    "element",
    "inside",
    "array",
    "see",
    "printing",
    "jim",
    "second",
    "iteration",
    "printing",
    "karen",
    "third",
    "printing",
    "kevin",
    "able",
    "loop",
    "values",
    "inside",
    "array",
    "guys",
    "know",
    "like",
    "name",
    "variable",
    "whatever",
    "want",
    "could",
    "name",
    "could",
    "give",
    "like",
    "random",
    "name",
    "want",
    "access",
    "though",
    "access",
    "using",
    "name",
    "loop",
    "something",
    "like",
    "array",
    "could",
    "also",
    "loop",
    "series",
    "numbers",
    "could",
    "say",
    "index",
    "anything",
    "going",
    "call",
    "index",
    "could",
    "say",
    "index",
    "range",
    "pass",
    "number",
    "could",
    "pass",
    "like",
    "10",
    "example",
    "going",
    "print",
    "index",
    "run",
    "program",
    "guys",
    "see",
    "basically",
    "going",
    "print",
    "every",
    "number",
    "range",
    "zero",
    "10",
    "including",
    "starting",
    "zero",
    "going",
    "print",
    "zero",
    "one",
    "two",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "notice",
    "print",
    "essentially",
    "printing",
    "numbers",
    "zero",
    "10",
    "including",
    "also",
    "specify",
    "range",
    "numbers",
    "could",
    "say",
    "example",
    "like",
    "three",
    "print",
    "numbers",
    "three",
    "10",
    "including",
    "program",
    "see",
    "print",
    "three",
    "four",
    "five",
    "six",
    "seven",
    "eight",
    "nine",
    "whatever",
    "value",
    "put",
    "second",
    "position",
    "going",
    "get",
    "included",
    "range",
    "ranges",
    "really",
    "useful",
    "example",
    "could",
    "use",
    "range",
    "loop",
    "array",
    "like",
    "wanted",
    "could",
    "say",
    "something",
    "like",
    "four",
    "index",
    "range",
    "inside",
    "range",
    "pass",
    "length",
    "array",
    "guys",
    "know",
    "wanted",
    "get",
    "length",
    "array",
    "words",
    "wanted",
    "figure",
    "many",
    "elements",
    "inside",
    "could",
    "type",
    "len",
    "inside",
    "parentheses",
    "name",
    "array",
    "going",
    "spit",
    "three",
    "three",
    "elements",
    "inside",
    "right",
    "kind",
    "makes",
    "sense",
    "say",
    "inside",
    "range",
    "function",
    "type",
    "len",
    "friends",
    "going",
    "going",
    "essentially",
    "give",
    "range",
    "zero",
    "number",
    "friends",
    "inside",
    "list",
    "could",
    "actually",
    "type",
    "friends",
    "index",
    "allow",
    "access",
    "individual",
    "friend",
    "inside",
    "list",
    "like",
    "range",
    "see",
    "typing",
    "jim",
    "karen",
    "kevin",
    "actually",
    "iteration",
    "loop",
    "basically",
    "going",
    "printing",
    "friends",
    "zero",
    "friends",
    "one",
    "friends",
    "two",
    "passing",
    "three",
    "remember",
    "whenever",
    "pass",
    "going",
    "range",
    "zero",
    "way",
    "number",
    "including",
    "number",
    "another",
    "way",
    "could",
    "print",
    "elements",
    "array",
    "looping",
    "something",
    "like",
    "array",
    "actually",
    "common",
    "use",
    "case",
    "loops",
    "like",
    "said",
    "use",
    "loops",
    "loop",
    "essentially",
    "collection",
    "could",
    "loop",
    "like",
    "string",
    "could",
    "also",
    "loop",
    "know",
    "something",
    "like",
    "array",
    "really",
    "useful",
    "one",
    "basics",
    "loops",
    "python",
    "also",
    "want",
    "show",
    "guys",
    "one",
    "example",
    "go",
    "ahead",
    "print",
    "range",
    "five",
    "right",
    "simple",
    "program",
    "use",
    "sorts",
    "logic",
    "inside",
    "loops",
    "let",
    "say",
    "wanted",
    "something",
    "special",
    "first",
    "iteration",
    "loop",
    "could",
    "say",
    "index",
    "equal",
    "zero",
    "index",
    "zero",
    "know",
    "first",
    "iteration",
    "loop",
    "could",
    "something",
    "special",
    "could",
    "like",
    "print",
    "first",
    "iteration",
    "otherwise",
    "could",
    "print",
    "like",
    "first",
    "would",
    "example",
    "like",
    "maybe",
    "want",
    "something",
    "first",
    "iteration",
    "loop",
    "something",
    "else",
    "subsequent",
    "iteration",
    "play",
    "see",
    "first",
    "iteration",
    "printing",
    "otherwise",
    "printing",
    "stuff",
    "know",
    "afraid",
    "put",
    "complex",
    "logic",
    "inside",
    "loops",
    "really",
    "make",
    "program",
    "powerful",
    "tutorial",
    "going",
    "show",
    "guys",
    "build",
    "exponent",
    "function",
    "exponent",
    "function",
    "basically",
    "going",
    "allow",
    "us",
    "take",
    "certain",
    "number",
    "raise",
    "specific",
    "power",
    "python",
    "actually",
    "really",
    "easy",
    "way",
    "come",
    "print",
    "say",
    "like",
    "two",
    "two",
    "multiplication",
    "signs",
    "say",
    "three",
    "basically",
    "going",
    "two",
    "raised",
    "third",
    "power",
    "see",
    "print",
    "get",
    "eight",
    "cute",
    "really",
    "easy",
    "exponents",
    "python",
    "want",
    "show",
    "guys",
    "use",
    "something",
    "like",
    "loop",
    "order",
    "create",
    "function",
    "like",
    "actually",
    "create",
    "exponent",
    "function",
    "basically",
    "use",
    "loops",
    "let",
    "create",
    "function",
    "going",
    "say",
    "def",
    "need",
    "give",
    "function",
    "name",
    "call",
    "raise",
    "power",
    "inside",
    "going",
    "accept",
    "two",
    "parameters",
    "first",
    "parameter",
    "going",
    "base",
    "number",
    "second",
    "parameter",
    "going",
    "power",
    "number",
    "going",
    "take",
    "base",
    "number",
    "raise",
    "power",
    "number",
    "make",
    "colon",
    "inside",
    "function",
    "need",
    "start",
    "writing",
    "code",
    "thing",
    "inside",
    "function",
    "necessarily",
    "know",
    "value",
    "pound",
    "right",
    "example",
    "knew",
    "trying",
    "like",
    "square",
    "number",
    "cube",
    "number",
    "could",
    "return",
    "like",
    "base",
    "num",
    "times",
    "base",
    "num",
    "right",
    "would",
    "square",
    "number",
    "could",
    "cube",
    "number",
    "base",
    "num",
    "right",
    "would",
    "like",
    "number",
    "cubed",
    "problem",
    "though",
    "know",
    "like",
    "right",
    "bat",
    "value",
    "going",
    "right",
    "could",
    "change",
    "like",
    "user",
    "decide",
    "order",
    "write",
    "function",
    "actually",
    "going",
    "need",
    "use",
    "loop",
    "going",
    "show",
    "guys",
    "use",
    "loop",
    "basically",
    "figure",
    "first",
    "thing",
    "want",
    "create",
    "variable",
    "going",
    "call",
    "result",
    "going",
    "set",
    "result",
    "equal",
    "one",
    "going",
    "start",
    "one",
    "want",
    "create",
    "loop",
    "basically",
    "going",
    "say",
    "four",
    "basically",
    "want",
    "specify",
    "like",
    "index",
    "going",
    "say",
    "index",
    "want",
    "specify",
    "range",
    "range",
    "basically",
    "range",
    "us",
    "collection",
    "numbers",
    "basically",
    "want",
    "multiply",
    "base",
    "num",
    "many",
    "times",
    "power",
    "num",
    "specifies",
    "right",
    "make",
    "range",
    "power",
    "num",
    "right",
    "basically",
    "loop",
    "loop",
    "many",
    "times",
    "pound",
    "pound",
    "two",
    "loop",
    "twice",
    "pound",
    "four",
    "loop",
    "four",
    "times",
    "every",
    "time",
    "loop",
    "multiply",
    "base",
    "num",
    "actually",
    "see",
    "going",
    "multiply",
    "result",
    "inside",
    "loop",
    "basically",
    "say",
    "result",
    "equal",
    "result",
    "times",
    "base",
    "num",
    "actually",
    "give",
    "us",
    "everything",
    "need",
    "take",
    "number",
    "specific",
    "power",
    "actual",
    "like",
    "result",
    "know",
    "math",
    "going",
    "get",
    "stored",
    "inside",
    "result",
    "variable",
    "first",
    "time",
    "loop",
    "multiplying",
    "base",
    "num",
    "one",
    "right",
    "result",
    "going",
    "become",
    "value",
    "base",
    "num",
    "second",
    "time",
    "loop",
    "would",
    "squaring",
    "number",
    "basically",
    "multiplying",
    "result",
    "base",
    "num",
    "essentially",
    "base",
    "num",
    "times",
    "base",
    "num",
    "third",
    "time",
    "loop",
    "multiplying",
    "result",
    "times",
    "base",
    "num",
    "essentially",
    "like",
    "cubing",
    "number",
    "essentially",
    "loop",
    "us",
    "last",
    "thing",
    "want",
    "right",
    "loop",
    "going",
    "return",
    "result",
    "able",
    "return",
    "whatever",
    "result",
    "raising",
    "number",
    "power",
    "right",
    "let",
    "come",
    "function",
    "going",
    "call",
    "going",
    "say",
    "actually",
    "print",
    "answer",
    "going",
    "say",
    "raise",
    "power",
    "inside",
    "parentheses",
    "remember",
    "pass",
    "two",
    "numbers",
    "let",
    "raise",
    "three",
    "second",
    "power",
    "going",
    "square",
    "three",
    "see",
    "works",
    "throw",
    "program",
    "see",
    "console",
    "getting",
    "nine",
    "let",
    "try",
    "something",
    "little",
    "bit",
    "crazier",
    "let",
    "try",
    "three",
    "fourth",
    "power",
    "run",
    "get",
    "three",
    "fourth",
    "power",
    "let",
    "try",
    "two",
    "third",
    "power",
    "getting",
    "eight",
    "yeah",
    "makes",
    "sense",
    "raise",
    "power",
    "function",
    "working",
    "expected",
    "walk",
    "guys",
    "one",
    "time",
    "inside",
    "function",
    "taking",
    "two",
    "pieces",
    "input",
    "taking",
    "base",
    "number",
    "taking",
    "power",
    "number",
    "like",
    "base",
    "number",
    "going",
    "taken",
    "power",
    "number",
    "defining",
    "variable",
    "called",
    "result",
    "result",
    "going",
    "store",
    "actual",
    "result",
    "math",
    "specify",
    "loop",
    "basically",
    "saying",
    "want",
    "loop",
    "range",
    "numbers",
    "put",
    "pound",
    "basically",
    "going",
    "range",
    "zero",
    "way",
    "including",
    "power",
    "number",
    "basically",
    "loop",
    "power",
    "number",
    "times",
    "makes",
    "sense",
    "every",
    "time",
    "loop",
    "multiplying",
    "result",
    "base",
    "num",
    "returning",
    "results",
    "basics",
    "building",
    "power",
    "function",
    "obviously",
    "like",
    "trying",
    "take",
    "number",
    "power",
    "python",
    "really",
    "easy",
    "kind",
    "shows",
    "like",
    "internal",
    "workings",
    "right",
    "function",
    "like",
    "work",
    "would",
    "actually",
    "type",
    "something",
    "like",
    "tutorial",
    "want",
    "talk",
    "guys",
    "two",
    "different",
    "concepts",
    "python",
    "going",
    "pretty",
    "cool",
    "lesson",
    "first",
    "thing",
    "want",
    "show",
    "guys",
    "though",
    "two",
    "dimensional",
    "lists",
    "python",
    "file",
    "want",
    "create",
    "basic",
    "list",
    "going",
    "call",
    "number",
    "grid",
    "going",
    "set",
    "equal",
    "normal",
    "list",
    "right",
    "like",
    "normally",
    "creating",
    "list",
    "could",
    "put",
    "bunch",
    "attributes",
    "bunch",
    "elements",
    "right",
    "elements",
    "inside",
    "number",
    "grid",
    "list",
    "everybody",
    "happy",
    "another",
    "thing",
    "make",
    "elements",
    "inside",
    "number",
    "grid",
    "list",
    "lists",
    "first",
    "item",
    "number",
    "grid",
    "list",
    "going",
    "list",
    "second",
    "item",
    "number",
    "grid",
    "list",
    "going",
    "list",
    "etc",
    "going",
    "show",
    "guys",
    "basically",
    "come",
    "would",
    "normally",
    "put",
    "first",
    "element",
    "list",
    "create",
    "another",
    "array",
    "going",
    "make",
    "open",
    "closed",
    "square",
    "bracket",
    "going",
    "say",
    "create",
    "next",
    "item",
    "list",
    "say",
    "let",
    "make",
    "another",
    "item",
    "list",
    "say",
    "finally",
    "going",
    "put",
    "one",
    "list",
    "inside",
    "number",
    "grid",
    "list",
    "going",
    "zero",
    "inside",
    "number",
    "grid",
    "list",
    "right",
    "high",
    "level",
    "overall",
    "list",
    "four",
    "elements",
    "elements",
    "lists",
    "essentially",
    "creating",
    "grid",
    "right",
    "grid",
    "1234",
    "rows",
    "123",
    "columns",
    "right",
    "four",
    "rows",
    "three",
    "columns",
    "kind",
    "like",
    "useful",
    "create",
    "grid",
    "like",
    "structure",
    "inside",
    "python",
    "using",
    "two",
    "dimensional",
    "lists",
    "pretty",
    "cool",
    "list",
    "structure",
    "want",
    "show",
    "guys",
    "access",
    "individual",
    "elements",
    "inside",
    "list",
    "structure",
    "example",
    "let",
    "say",
    "wanted",
    "print",
    "one",
    "values",
    "let",
    "say",
    "wanted",
    "print",
    "one",
    "right",
    "way",
    "access",
    "saying",
    "number",
    "grid",
    "first",
    "thing",
    "want",
    "make",
    "open",
    "close",
    "square",
    "brackets",
    "want",
    "put",
    "index",
    "row",
    "want",
    "access",
    "would",
    "like",
    "row",
    "zero",
    "zero",
    "element",
    "array",
    "would",
    "row",
    "one",
    "index",
    "position",
    "one",
    "would",
    "row",
    "two",
    "row",
    "three",
    "etc",
    "could",
    "put",
    "row",
    "zero",
    "right",
    "next",
    "going",
    "make",
    "another",
    "square",
    "bracket",
    "want",
    "put",
    "index",
    "column",
    "would",
    "like",
    "column",
    "one",
    "column",
    "two",
    "column",
    "three",
    "going",
    "put",
    "another",
    "zero",
    "zero",
    "index",
    "first",
    "array",
    "put",
    "zero",
    "zero",
    "print",
    "guy",
    "screen",
    "see",
    "get",
    "one",
    "could",
    "also",
    "like",
    "eight",
    "example",
    "going",
    "zero",
    "one",
    "two",
    "going",
    "row",
    "two",
    "column",
    "one",
    "able",
    "print",
    "eight",
    "basically",
    "access",
    "elements",
    "inside",
    "2d",
    "list",
    "next",
    "thing",
    "want",
    "show",
    "guys",
    "nested",
    "loop",
    "nested",
    "loop",
    "situation",
    "like",
    "said",
    "loop",
    "inside",
    "loop",
    "show",
    "use",
    "nested",
    "loop",
    "order",
    "print",
    "elements",
    "inside",
    "array",
    "basically",
    "show",
    "guys",
    "parse",
    "two",
    "dimensional",
    "list",
    "two",
    "dimensional",
    "array",
    "alright",
    "basically",
    "going",
    "create",
    "normal",
    "loop",
    "going",
    "say",
    "four",
    "going",
    "say",
    "row",
    "number",
    "grid",
    "using",
    "word",
    "row",
    "kind",
    "seeing",
    "guys",
    "rows",
    "right",
    "sort",
    "horizontal",
    "rows",
    "little",
    "grid",
    "rows",
    "elements",
    "inside",
    "number",
    "grid",
    "want",
    "loop",
    "could",
    "actually",
    "print",
    "row",
    "right",
    "going",
    "print",
    "rows",
    "inside",
    "list",
    "see",
    "basically",
    "get",
    "exactly",
    "want",
    "able",
    "access",
    "individual",
    "attributes",
    "inside",
    "array",
    "elements",
    "actually",
    "create",
    "another",
    "loop",
    "going",
    "put",
    "loop",
    "inside",
    "going",
    "say",
    "column",
    "row",
    "basically",
    "going",
    "give",
    "us",
    "individual",
    "column",
    "individual",
    "element",
    "inside",
    "arrays",
    "example",
    "inside",
    "arrays",
    "elements",
    "number",
    "grid",
    "hopefully",
    "makes",
    "sense",
    "print",
    "column",
    "actually",
    "print",
    "every",
    "single",
    "value",
    "inside",
    "two",
    "dimensional",
    "array",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "see",
    "basically",
    "printing",
    "one",
    "way",
    "zero",
    "printing",
    "elements",
    "inside",
    "arrays",
    "inside",
    "number",
    "grid",
    "use",
    "two",
    "dimensional",
    "lists",
    "nested",
    "four",
    "loops",
    "together",
    "things",
    "actually",
    "pretty",
    "handy",
    "python",
    "tutorial",
    "going",
    "show",
    "build",
    "basic",
    "translator",
    "python",
    "essentially",
    "take",
    "string",
    "take",
    "like",
    "phrase",
    "word",
    "able",
    "translate",
    "different",
    "language",
    "little",
    "file",
    "basically",
    "specifies",
    "language",
    "made",
    "calling",
    "draft",
    "language",
    "draft",
    "language",
    "vowels",
    "become",
    "going",
    "translate",
    "english",
    "word",
    "draft",
    "word",
    "example",
    "word",
    "dog",
    "would",
    "look",
    "word",
    "dog",
    "instances",
    "vowel",
    "case",
    "let",
    "say",
    "e",
    "u",
    "would",
    "convert",
    "vowel",
    "dog",
    "would",
    "map",
    "g",
    "g",
    "cat",
    "would",
    "get",
    "mapped",
    "c",
    "g",
    "basic",
    "translation",
    "rules",
    "obviously",
    "pretty",
    "simple",
    "language",
    "get",
    "point",
    "vowel",
    "going",
    "become",
    "g",
    "get",
    "draft",
    "language",
    "going",
    "build",
    "draft",
    "translator",
    "python",
    "file",
    "let",
    "start",
    "making",
    "translator",
    "first",
    "thing",
    "going",
    "define",
    "translate",
    "function",
    "going",
    "make",
    "function",
    "going",
    "call",
    "translate",
    "inside",
    "parentheses",
    "want",
    "take",
    "one",
    "piece",
    "information",
    "going",
    "phrase",
    "want",
    "translate",
    "going",
    "say",
    "phrase",
    "inside",
    "function",
    "need",
    "figure",
    "like",
    "okay",
    "translate",
    "english",
    "draft",
    "language",
    "well",
    "remember",
    "rules",
    "basically",
    "vowels",
    "become",
    "g",
    "first",
    "thing",
    "want",
    "create",
    "variable",
    "variable",
    "going",
    "translation",
    "like",
    "final",
    "result",
    "going",
    "return",
    "user",
    "say",
    "translation",
    "going",
    "set",
    "equal",
    "empty",
    "string",
    "going",
    "like",
    "completely",
    "empty",
    "string",
    "going",
    "anything",
    "want",
    "basically",
    "want",
    "loop",
    "every",
    "letter",
    "inside",
    "phrase",
    "vowel",
    "want",
    "change",
    "vowel",
    "want",
    "leave",
    "alone",
    "essentially",
    "going",
    "looping",
    "phrase",
    "going",
    "adding",
    "letters",
    "onto",
    "translation",
    "one",
    "one",
    "let",
    "show",
    "guys",
    "going",
    "make",
    "loop",
    "going",
    "say",
    "four",
    "going",
    "say",
    "letter",
    "phrase",
    "loop",
    "access",
    "individual",
    "letter",
    "inside",
    "phrase",
    "passed",
    "want",
    "want",
    "check",
    "see",
    "letter",
    "vowel",
    "right",
    "vowel",
    "add",
    "g",
    "onto",
    "translation",
    "vowel",
    "add",
    "whatever",
    "letter",
    "onto",
    "translation",
    "anyway",
    "going",
    "use",
    "statement",
    "going",
    "say",
    "actually",
    "special",
    "thing",
    "python",
    "check",
    "see",
    "something",
    "something",
    "else",
    "say",
    "letter",
    "going",
    "type",
    "vowels",
    "say",
    "e",
    "u",
    "e",
    "basically",
    "checking",
    "see",
    "letter",
    "inside",
    "string",
    "letter",
    "inside",
    "know",
    "vowel",
    "handle",
    "case",
    "say",
    "translation",
    "equal",
    "translation",
    "plus",
    "letter",
    "vowel",
    "want",
    "convert",
    "otherwise",
    "though",
    "basically",
    "say",
    "translation",
    "equal",
    "translation",
    "plus",
    "letter",
    "case",
    "vowel",
    "adding",
    "g",
    "onto",
    "translation",
    "case",
    "vowel",
    "adding",
    "whatever",
    "letter",
    "onto",
    "translation",
    "finally",
    "loop",
    "want",
    "return",
    "translation",
    "going",
    "say",
    "return",
    "translation",
    "awesome",
    "translate",
    "function",
    "probably",
    "work",
    "let",
    "come",
    "test",
    "allow",
    "user",
    "input",
    "information",
    "basically",
    "going",
    "call",
    "function",
    "actually",
    "going",
    "print",
    "print",
    "going",
    "call",
    "function",
    "translate",
    "inside",
    "actually",
    "going",
    "pass",
    "whatever",
    "user",
    "inputs",
    "say",
    "input",
    "inside",
    "parentheses",
    "say",
    "prompt",
    "enter",
    "phrase",
    "basically",
    "combining",
    "statements",
    "together",
    "saying",
    "want",
    "print",
    "translation",
    "whatever",
    "user",
    "enters",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "see",
    "going",
    "run",
    "program",
    "says",
    "enter",
    "phrase",
    "actually",
    "let",
    "format",
    "little",
    "bit",
    "better",
    "okay",
    "right",
    "says",
    "enter",
    "phrase",
    "let",
    "go",
    "ahead",
    "let",
    "type",
    "example",
    "used",
    "going",
    "say",
    "dog",
    "pops",
    "answer",
    "g",
    "kind",
    "cool",
    "keep",
    "running",
    "many",
    "times",
    "want",
    "could",
    "type",
    "like",
    "like",
    "little",
    "bit",
    "longer",
    "string",
    "see",
    "translates",
    "draft",
    "language",
    "basically",
    "create",
    "little",
    "translator",
    "app",
    "pretty",
    "cool",
    "see",
    "using",
    "loop",
    "combination",
    "loop",
    "really",
    "powerful",
    "structure",
    "actually",
    "one",
    "place",
    "make",
    "little",
    "bit",
    "efficient",
    "instead",
    "saying",
    "letter",
    "string",
    "notice",
    "checking",
    "see",
    "lower",
    "case",
    "uppercase",
    "could",
    "actually",
    "say",
    "letter",
    "dot",
    "lower",
    "type",
    "lower",
    "case",
    "letters",
    "still",
    "going",
    "exact",
    "thing",
    "little",
    "like",
    "hack",
    "whatever",
    "could",
    "use",
    "also",
    "one",
    "problem",
    "program",
    "notice",
    "setting",
    "translation",
    "equal",
    "translation",
    "plus",
    "problem",
    "start",
    "word",
    "inside",
    "phrase",
    "capital",
    "vowel",
    "words",
    "said",
    "like",
    "notice",
    "gets",
    "printed",
    "gets",
    "printed",
    "lowercase",
    "g",
    "keeping",
    "uppercase",
    "syntax",
    "kind",
    "problem",
    "actually",
    "use",
    "another",
    "statement",
    "check",
    "see",
    "letter",
    "dot",
    "upper",
    "letter",
    "uppercase",
    "set",
    "translation",
    "equal",
    "translation",
    "plus",
    "capital",
    "otherwise",
    "set",
    "equal",
    "lowercase",
    "able",
    "control",
    "situations",
    "let",
    "test",
    "see",
    "works",
    "enter",
    "phrase",
    "say",
    "keeping",
    "capital",
    "letter",
    "couple",
    "different",
    "ways",
    "could",
    "make",
    "program",
    "little",
    "bit",
    "better",
    "basic",
    "concept",
    "loop",
    "loops",
    "inside",
    "calling",
    "awesome",
    "function",
    "translate",
    "word",
    "us",
    "tutorial",
    "want",
    "talk",
    "guys",
    "comments",
    "python",
    "going",
    "pretty",
    "short",
    "tutorial",
    "want",
    "give",
    "guys",
    "overview",
    "comments",
    "use",
    "python",
    "programs",
    "python",
    "program",
    "line",
    "says",
    "print",
    "comments",
    "fun",
    "run",
    "program",
    "inside",
    "console",
    "going",
    "print",
    "comments",
    "fun",
    "right",
    "code",
    "put",
    "going",
    "get",
    "executed",
    "python",
    "actually",
    "special",
    "line",
    "code",
    "write",
    "called",
    "comment",
    "comment",
    "basically",
    "line",
    "inside",
    "python",
    "file",
    "going",
    "get",
    "rendered",
    "python",
    "python",
    "sees",
    "going",
    "ignore",
    "going",
    "execute",
    "going",
    "print",
    "anything",
    "going",
    "kind",
    "ignore",
    "comments",
    "going",
    "used",
    "us",
    "humans",
    "comment",
    "used",
    "like",
    "another",
    "developer",
    "write",
    "little",
    "comment",
    "little",
    "like",
    "plain",
    "text",
    "know",
    "comment",
    "inside",
    "file",
    "order",
    "create",
    "comment",
    "could",
    "use",
    "hashtag",
    "symbol",
    "click",
    "hashtag",
    "writing",
    "comment",
    "write",
    "whatever",
    "wanted",
    "could",
    "say",
    "like",
    "program",
    "cool",
    "notice",
    "put",
    "program",
    "show",
    "anywhere",
    "right",
    "matter",
    "put",
    "hashtag",
    "like",
    "ignored",
    "python",
    "another",
    "developer",
    "come",
    "use",
    "lot",
    "times",
    "want",
    "write",
    "like",
    "little",
    "note",
    "inside",
    "python",
    "files",
    "maybe",
    "write",
    "little",
    "reminder",
    "want",
    "write",
    "line",
    "like",
    "explain",
    "line",
    "code",
    "example",
    "could",
    "write",
    "comment",
    "would",
    "explain",
    "print",
    "statement",
    "could",
    "say",
    "like",
    "prints",
    "string",
    "right",
    "anybody",
    "looking",
    "file",
    "would",
    "able",
    "read",
    "like",
    "oh",
    "okay",
    "cool",
    "comments",
    "useful",
    "leaving",
    "little",
    "comments",
    "python",
    "file",
    "want",
    "make",
    "comments",
    "multiple",
    "lines",
    "create",
    "new",
    "line",
    "use",
    "another",
    "hashtag",
    "could",
    "type",
    "whatever",
    "next",
    "comment",
    "generally",
    "going",
    "put",
    "comments",
    "multiple",
    "lines",
    "want",
    "use",
    "multiple",
    "hashtags",
    "actually",
    "another",
    "way",
    "write",
    "comments",
    "use",
    "triple",
    "quotation",
    "mark",
    "typing",
    "single",
    "quote",
    "typing",
    "three",
    "times",
    "see",
    "three",
    "times",
    "three",
    "times",
    "know",
    "write",
    "comment",
    "wanted",
    "could",
    "put",
    "know",
    "much",
    "text",
    "would",
    "want",
    "thing",
    "run",
    "program",
    "going",
    "get",
    "rendered",
    "another",
    "way",
    "make",
    "multiple",
    "line",
    "comments",
    "like",
    "official",
    "python",
    "like",
    "style",
    "guides",
    "whatever",
    "recommends",
    "going",
    "put",
    "comments",
    "multiple",
    "lines",
    "use",
    "hashtags",
    "know",
    "really",
    "whatever",
    "want",
    "want",
    "like",
    "super",
    "python",
    "official",
    "use",
    "hashtags",
    "comments",
    "also",
    "useful",
    "something",
    "called",
    "commenting",
    "line",
    "code",
    "lot",
    "times",
    "writing",
    "program",
    "might",
    "line",
    "code",
    "maybe",
    "like",
    "potentially",
    "messing",
    "stuff",
    "actually",
    "comment",
    "line",
    "code",
    "could",
    "put",
    "comment",
    "front",
    "line",
    "code",
    "run",
    "program",
    "program",
    "going",
    "run",
    "going",
    "use",
    "line",
    "sometimes",
    "trying",
    "see",
    "like",
    "line",
    "code",
    "causing",
    "trouble",
    "want",
    "see",
    "program",
    "would",
    "like",
    "without",
    "line",
    "code",
    "even",
    "like",
    "block",
    "code",
    "comment",
    "way",
    "actually",
    "deleting",
    "code",
    "file",
    "commenting",
    "python",
    "going",
    "ignore",
    "really",
    "two",
    "uses",
    "comments",
    "write",
    "little",
    "notes",
    "write",
    "little",
    "comments",
    "different",
    "things",
    "comment",
    "code",
    "go",
    "forward",
    "python",
    "sure",
    "find",
    "uses",
    "comments",
    "tutorial",
    "want",
    "talk",
    "guys",
    "catching",
    "errors",
    "python",
    "lot",
    "times",
    "running",
    "python",
    "programs",
    "encounter",
    "different",
    "errors",
    "different",
    "situations",
    "could",
    "come",
    "program",
    "might",
    "throw",
    "error",
    "might",
    "throw",
    "exception",
    "lot",
    "times",
    "situations",
    "happen",
    "completely",
    "stop",
    "program",
    "running",
    "actually",
    "watch",
    "know",
    "certain",
    "specific",
    "errors",
    "going",
    "pop",
    "program",
    "actually",
    "handle",
    "instead",
    "program",
    "breaking",
    "stop",
    "executing",
    "actually",
    "handle",
    "errors",
    "things",
    "occur",
    "want",
    "show",
    "guys",
    "example",
    "using",
    "saying",
    "number",
    "equal",
    "int",
    "input",
    "enter",
    "number",
    "basically",
    "happening",
    "prompting",
    "user",
    "enter",
    "number",
    "using",
    "input",
    "command",
    "converting",
    "whatever",
    "entered",
    "integer",
    "long",
    "enter",
    "like",
    "valid",
    "integer",
    "convert",
    "integer",
    "convert",
    "like",
    "whole",
    "number",
    "store",
    "inside",
    "number",
    "variable",
    "printing",
    "let",
    "try",
    "execute",
    "program",
    "going",
    "run",
    "program",
    "see",
    "says",
    "enter",
    "number",
    "enter",
    "like",
    "four",
    "example",
    "enter",
    "four",
    "everything",
    "going",
    "work",
    "going",
    "print",
    "four",
    "everything",
    "right",
    "world",
    "actually",
    "going",
    "modify",
    "little",
    "easier",
    "see",
    "let",
    "say",
    "run",
    "program",
    "says",
    "okay",
    "enter",
    "number",
    "let",
    "say",
    "break",
    "rules",
    "enter",
    "number",
    "ignore",
    "prompt",
    "says",
    "put",
    "know",
    "random",
    "text",
    "enter",
    "program",
    "going",
    "throw",
    "error",
    "see",
    "says",
    "value",
    "error",
    "invalid",
    "literal",
    "int",
    "base",
    "base",
    "basically",
    "hey",
    "enter",
    "integer",
    "like",
    "said",
    "would",
    "right",
    "told",
    "enter",
    "number",
    "entered",
    "text",
    "broke",
    "program",
    "situation",
    "happens",
    "lot",
    "lot",
    "different",
    "situations",
    "something",
    "go",
    "wrong",
    "program",
    "kind",
    "accepted",
    "reality",
    "writing",
    "real",
    "live",
    "python",
    "program",
    "want",
    "something",
    "like",
    "trip",
    "program",
    "want",
    "entire",
    "program",
    "break",
    "somebody",
    "forgets",
    "enter",
    "number",
    "right",
    "want",
    "able",
    "handle",
    "different",
    "situations",
    "order",
    "handle",
    "use",
    "something",
    "called",
    "try",
    "except",
    "block",
    "try",
    "except",
    "block",
    "basically",
    "allow",
    "program",
    "try",
    "piece",
    "code",
    "everything",
    "goes",
    "well",
    "great",
    "like",
    "could",
    "try",
    "entering",
    "number",
    "user",
    "enters",
    "correct",
    "number",
    "great",
    "enter",
    "correct",
    "number",
    "basically",
    "like",
    "account",
    "entered",
    "something",
    "like",
    "string",
    "supposed",
    "enter",
    "number",
    "could",
    "tell",
    "like",
    "hey",
    "entered",
    "wrong",
    "thing",
    "going",
    "show",
    "guys",
    "use",
    "try",
    "except",
    "blocks",
    "going",
    "come",
    "going",
    "say",
    "try",
    "going",
    "make",
    "colon",
    "want",
    "indent",
    "things",
    "things",
    "going",
    "inside",
    "try",
    "block",
    "going",
    "make",
    "new",
    "line",
    "going",
    "come",
    "going",
    "type",
    "except",
    "also",
    "going",
    "put",
    "colon",
    "going",
    "print",
    "something",
    "say",
    "like",
    "invalid",
    "input",
    "since",
    "put",
    "code",
    "inside",
    "try",
    "block",
    "user",
    "enters",
    "something",
    "wrong",
    "going",
    "able",
    "catch",
    "able",
    "catch",
    "user",
    "wrong",
    "print",
    "invalid",
    "input",
    "onto",
    "screen",
    "let",
    "go",
    "ahead",
    "run",
    "program",
    "going",
    "say",
    "enter",
    "number",
    "going",
    "ignore",
    "enter",
    "instead",
    "yelling",
    "us",
    "breaking",
    "program",
    "says",
    "hey",
    "invalid",
    "input",
    "able",
    "handle",
    "error",
    "got",
    "called",
    "able",
    "handle",
    "invalid",
    "input",
    "error",
    "basically",
    "told",
    "us",
    "hey",
    "input",
    "really",
    "powerful",
    "thing",
    "python",
    "programs",
    "basically",
    "protect",
    "programs",
    "right",
    "want",
    "program",
    "running",
    "long",
    "period",
    "time",
    "ca",
    "something",
    "simple",
    "invalid",
    "input",
    "trip",
    "catch",
    "invalid",
    "input",
    "using",
    "try",
    "accept",
    "blocks",
    "thing",
    "notice",
    "little",
    "guy",
    "getting",
    "highlighted",
    "let",
    "see",
    "say",
    "basically",
    "saying",
    "broad",
    "exception",
    "clause",
    "message",
    "getting",
    "say",
    "accept",
    "catch",
    "error",
    "sun",
    "anything",
    "go",
    "wrong",
    "program",
    "part",
    "going",
    "accept",
    "let",
    "give",
    "guys",
    "example",
    "let",
    "say",
    "program",
    "creating",
    "variable",
    "right",
    "wanted",
    "create",
    "variable",
    "called",
    "value",
    "set",
    "equal",
    "10",
    "divided",
    "zero",
    "know",
    "anything",
    "math",
    "know",
    "ca",
    "divide",
    "number",
    "zero",
    "possible",
    "program",
    "going",
    "able",
    "handle",
    "see",
    "going",
    "throw",
    "error",
    "us",
    "run",
    "program",
    "basically",
    "says",
    "zero",
    "division",
    "error",
    "division",
    "zero",
    "allowed",
    "right",
    "took",
    "put",
    "inside",
    "dry",
    "block",
    "pasted",
    "going",
    "get",
    "caught",
    "exception",
    "wrote",
    "going",
    "get",
    "caught",
    "accept",
    "run",
    "program",
    "see",
    "says",
    "invalid",
    "input",
    "problem",
    "input",
    "something",
    "invalid",
    "right",
    "divided",
    "zero",
    "able",
    "handle",
    "right",
    "could",
    "divide",
    "zero",
    "error",
    "even",
    "though",
    "get",
    "invalid",
    "input",
    "even",
    "though",
    "divided",
    "zero",
    "still",
    "printed",
    "brings",
    "another",
    "point",
    "actually",
    "catch",
    "accept",
    "specific",
    "types",
    "errors",
    "example",
    "case",
    "got",
    "division",
    "zero",
    "error",
    "case",
    "got",
    "invalid",
    "input",
    "error",
    "right",
    "put",
    "something",
    "wrong",
    "could",
    "convert",
    "value",
    "create",
    "two",
    "different",
    "accept",
    "blocks",
    "catch",
    "two",
    "different",
    "types",
    "errors",
    "make",
    "space",
    "specify",
    "type",
    "error",
    "want",
    "catch",
    "divided",
    "zero",
    "zero",
    "division",
    "error",
    "put",
    "zero",
    "division",
    "error",
    "going",
    "catch",
    "zero",
    "division",
    "error",
    "say",
    "divided",
    "zero",
    "could",
    "also",
    "make",
    "another",
    "accept",
    "could",
    "say",
    "accept",
    "catch",
    "exception",
    "got",
    "think",
    "value",
    "error",
    "right",
    "put",
    "type",
    "value",
    "inside",
    "input",
    "print",
    "invalid",
    "input",
    "two",
    "accept",
    "blocks",
    "basically",
    "able",
    "handle",
    "situations",
    "example",
    "ends",
    "breaking",
    "program",
    "division",
    "zero",
    "able",
    "catch",
    "tell",
    "us",
    "hey",
    "divided",
    "zero",
    "get",
    "rid",
    "line",
    "code",
    "entered",
    "number",
    "wrong",
    "came",
    "entered",
    "string",
    "instead",
    "number",
    "going",
    "tell",
    "us",
    "invalid",
    "input",
    "going",
    "able",
    "specify",
    "happens",
    "certain",
    "things",
    "break",
    "get",
    "valid",
    "get",
    "value",
    "error",
    "say",
    "invalid",
    "input",
    "get",
    "zero",
    "division",
    "error",
    "say",
    "divided",
    "zero",
    "depending",
    "breaks",
    "depending",
    "happens",
    "actually",
    "different",
    "things",
    "want",
    "show",
    "guys",
    "one",
    "thing",
    "actually",
    "store",
    "error",
    "variable",
    "say",
    "accept",
    "say",
    "type",
    "name",
    "lot",
    "times",
    "people",
    "say",
    "like",
    "e",
    "r",
    "print",
    "actual",
    "error",
    "print",
    "e",
    "r",
    "end",
    "dividing",
    "zero",
    "say",
    "answers",
    "equal",
    "10",
    "divided",
    "zero",
    "going",
    "throw",
    "error",
    "going",
    "print",
    "went",
    "wrong",
    "run",
    "program",
    "says",
    "division",
    "zero",
    "printed",
    "error",
    "got",
    "another",
    "useful",
    "thing",
    "actually",
    "like",
    "print",
    "specific",
    "error",
    "got",
    "thrown",
    "best",
    "practice",
    "python",
    "use",
    "specific",
    "errors",
    "always",
    "want",
    "accept",
    "accept",
    "specific",
    "error",
    "want",
    "say",
    "accept",
    "accept",
    "anything",
    "sun",
    "broad",
    "good",
    "practice",
    "python",
    "always",
    "want",
    "catching",
    "specific",
    "errors",
    "like",
    "tutorial",
    "want",
    "talk",
    "guys",
    "reading",
    "external",
    "files",
    "python",
    "lot",
    "times",
    "python",
    "going",
    "want",
    "read",
    "files",
    "outside",
    "python",
    "file",
    "might",
    "want",
    "read",
    "information",
    "like",
    "text",
    "file",
    "csv",
    "file",
    "like",
    "html",
    "file",
    "actually",
    "use",
    "something",
    "called",
    "python",
    "read",
    "command",
    "allow",
    "read",
    "file",
    "stored",
    "outside",
    "python",
    "file",
    "use",
    "files",
    "get",
    "information",
    "parse",
    "different",
    "files",
    "different",
    "things",
    "going",
    "show",
    "guys",
    "basics",
    "reading",
    "files",
    "opening",
    "files",
    "closing",
    "files",
    "stuff",
    "file",
    "called",
    "employees",
    "dot",
    "text",
    "basically",
    "lists",
    "bunch",
    "different",
    "employees",
    "like",
    "could",
    "employees",
    "office",
    "whatever",
    "listing",
    "information",
    "let",
    "say",
    "inside",
    "app",
    "dot",
    "python",
    "file",
    "wanted",
    "read",
    "employees",
    "inside",
    "file",
    "first",
    "thing",
    "actually",
    "open",
    "file",
    "inside",
    "python",
    "use",
    "special",
    "command",
    "called",
    "open",
    "say",
    "open",
    "type",
    "name",
    "file",
    "want",
    "open",
    "either",
    "going",
    "relative",
    "path",
    "file",
    "absolute",
    "path",
    "file",
    "files",
    "name",
    "files",
    "directory",
    "case",
    "app",
    "dot",
    "python",
    "employees",
    "dot",
    "text",
    "folder",
    "like",
    "directory",
    "type",
    "name",
    "file",
    "say",
    "employees",
    "dot",
    "text",
    "want",
    "put",
    "one",
    "thing",
    "inside",
    "open",
    "function",
    "going",
    "mode",
    "want",
    "open",
    "file",
    "actually",
    "open",
    "files",
    "couple",
    "different",
    "modes",
    "first",
    "mode",
    "called",
    "read",
    "put",
    "r",
    "going",
    "stand",
    "read",
    "basically",
    "means",
    "want",
    "read",
    "information",
    "inside",
    "file",
    "want",
    "modify",
    "want",
    "change",
    "want",
    "read",
    "want",
    "see",
    "file",
    "stuff",
    "information",
    "another",
    "mode",
    "called",
    "write",
    "type",
    "w",
    "writing",
    "basically",
    "means",
    "change",
    "file",
    "right",
    "write",
    "new",
    "information",
    "change",
    "existing",
    "information",
    "another",
    "one",
    "called",
    "stands",
    "append",
    "basically",
    "means",
    "append",
    "information",
    "onto",
    "end",
    "file",
    "ca",
    "modify",
    "information",
    "file",
    "ca",
    "change",
    "information",
    "add",
    "new",
    "information",
    "one",
    "r",
    "plus",
    "basically",
    "means",
    "read",
    "write",
    "give",
    "power",
    "reading",
    "writing",
    "case",
    "going",
    "working",
    "regular",
    "going",
    "reading",
    "file",
    "open",
    "function",
    "essentially",
    "open",
    "file",
    "going",
    "like",
    "go",
    "file",
    "inside",
    "file",
    "system",
    "open",
    "allow",
    "us",
    "read",
    "generally",
    "going",
    "want",
    "store",
    "opened",
    "file",
    "inside",
    "variable",
    "create",
    "variable",
    "call",
    "employee",
    "file",
    "going",
    "set",
    "equal",
    "open",
    "function",
    "open",
    "employees",
    "dot",
    "text",
    "file",
    "content",
    "inside",
    "stored",
    "inside",
    "employee",
    "file",
    "variable",
    "whenever",
    "open",
    "file",
    "always",
    "want",
    "make",
    "sure",
    "close",
    "file",
    "well",
    "like",
    "open",
    "command",
    "also",
    "close",
    "function",
    "come",
    "say",
    "employee",
    "file",
    "dot",
    "closed",
    "essentially",
    "going",
    "close",
    "file",
    "longer",
    "going",
    "able",
    "access",
    "generally",
    "good",
    "idea",
    "whenever",
    "opening",
    "file",
    "want",
    "also",
    "make",
    "sure",
    "closing",
    "file",
    "point",
    "generally",
    "done",
    "reading",
    "close",
    "kind",
    "like",
    "open",
    "close",
    "file",
    "let",
    "talk",
    "get",
    "information",
    "file",
    "right",
    "point",
    "file",
    "ca",
    "figure",
    "actually",
    "different",
    "functions",
    "use",
    "employee",
    "file",
    "figure",
    "inside",
    "going",
    "show",
    "guys",
    "going",
    "make",
    "print",
    "statement",
    "inside",
    "print",
    "statement",
    "basically",
    "print",
    "information",
    "employee",
    "file",
    "basic",
    "thing",
    "print",
    "entire",
    "contents",
    "file",
    "want",
    "show",
    "guys",
    "check",
    "make",
    "sure",
    "file",
    "readable",
    "anything",
    "else",
    "generally",
    "good",
    "idea",
    "make",
    "sure",
    "possible",
    "read",
    "file",
    "function",
    "inside",
    "python",
    "use",
    "called",
    "readable",
    "going",
    "type",
    "employee",
    "file",
    "dot",
    "readable",
    "going",
    "return",
    "boolean",
    "value",
    "going",
    "tell",
    "us",
    "whether",
    "read",
    "file",
    "going",
    "run",
    "program",
    "see",
    "get",
    "value",
    "true",
    "set",
    "file",
    "read",
    "mode",
    "read",
    "mode",
    "read",
    "put",
    "double",
    "put",
    "like",
    "right",
    "readable",
    "going",
    "false",
    "longer",
    "read",
    "file",
    "write",
    "file",
    "going",
    "change",
    "back",
    "read",
    "figure",
    "whether",
    "file",
    "read",
    "let",
    "actually",
    "read",
    "another",
    "function",
    "called",
    "employee",
    "file",
    "dot",
    "read",
    "basically",
    "going",
    "spit",
    "information",
    "files",
    "run",
    "program",
    "going",
    "spit",
    "information",
    "right",
    "information",
    "file",
    "also",
    "come",
    "read",
    "individual",
    "line",
    "inside",
    "file",
    "say",
    "employee",
    "file",
    "dot",
    "read",
    "line",
    "going",
    "going",
    "read",
    "individual",
    "line",
    "inside",
    "file",
    "run",
    "program",
    "see",
    "reading",
    "first",
    "line",
    "file",
    "read",
    "line",
    "function",
    "actually",
    "reading",
    "first",
    "line",
    "basically",
    "like",
    "moving",
    "little",
    "cursor",
    "onto",
    "next",
    "line",
    "copy",
    "code",
    "print",
    "saying",
    "employee",
    "file",
    "dot",
    "read",
    "line",
    "going",
    "read",
    "first",
    "line",
    "say",
    "going",
    "read",
    "line",
    "actually",
    "going",
    "end",
    "printing",
    "first",
    "two",
    "lines",
    "file",
    "run",
    "program",
    "see",
    "print",
    "jim",
    "salesman",
    "dwight",
    "salesman",
    "multiple",
    "times",
    "like",
    "could",
    "technically",
    "print",
    "every",
    "line",
    "inside",
    "file",
    "see",
    "pretty",
    "useful",
    "reading",
    "multiple",
    "lines",
    "file",
    "actually",
    "another",
    "function",
    "better",
    "say",
    "instead",
    "employee",
    "file",
    "dot",
    "read",
    "line",
    "say",
    "dot",
    "read",
    "lines",
    "going",
    "going",
    "take",
    "lines",
    "inside",
    "file",
    "put",
    "inside",
    "array",
    "print",
    "see",
    "array",
    "says",
    "jim",
    "salesman",
    "first",
    "item",
    "array",
    "dwight",
    "salesman",
    "second",
    "item",
    "array",
    "basically",
    "taking",
    "line",
    "putting",
    "inside",
    "array",
    "wanted",
    "access",
    "specific",
    "line",
    "refer",
    "index",
    "array",
    "said",
    "one",
    "going",
    "give",
    "us",
    "dwight",
    "salesman",
    "line",
    "index",
    "position",
    "one",
    "inside",
    "array",
    "also",
    "use",
    "read",
    "lines",
    "function",
    "loop",
    "come",
    "create",
    "loop",
    "going",
    "say",
    "say",
    "employee",
    "employee",
    "file",
    "employee",
    "want",
    "print",
    "actually",
    "started",
    "put",
    "employee",
    "file",
    "dot",
    "read",
    "lines",
    "loop",
    "employees",
    "employee",
    "file",
    "read",
    "lines",
    "array",
    "actually",
    "print",
    "individual",
    "employee",
    "print",
    "employees",
    "inside",
    "file",
    "basically",
    "printing",
    "line",
    "file",
    "pretty",
    "useful",
    "use",
    "different",
    "functions",
    "like",
    "read",
    "read",
    "line",
    "read",
    "lines",
    "readable",
    "know",
    "bunch",
    "different",
    "things",
    "get",
    "information",
    "file",
    "lot",
    "cases",
    "going",
    "want",
    "able",
    "parse",
    "information",
    "file",
    "awesome",
    "way",
    "recap",
    "whenever",
    "want",
    "open",
    "file",
    "read",
    "use",
    "open",
    "function",
    "type",
    "name",
    "file",
    "mode",
    "case",
    "going",
    "sorts",
    "stuff",
    "always",
    "want",
    "make",
    "sure",
    "close",
    "done",
    "good",
    "practice",
    "basics",
    "reading",
    "files",
    "hopefully",
    "guys",
    "use",
    "way",
    "shape",
    "form",
    "future",
    "tutorial",
    "want",
    "talk",
    "writing",
    "appending",
    "files",
    "python",
    "one",
    "cool",
    "things",
    "python",
    "allows",
    "work",
    "external",
    "files",
    "could",
    "like",
    "external",
    "text",
    "file",
    "could",
    "actually",
    "like",
    "completely",
    "read",
    "information",
    "could",
    "parse",
    "use",
    "information",
    "certain",
    "things",
    "addition",
    "reading",
    "file",
    "could",
    "also",
    "write",
    "file",
    "want",
    "talk",
    "guys",
    "today",
    "writing",
    "new",
    "files",
    "appending",
    "onto",
    "existing",
    "files",
    "basically",
    "written",
    "essentially",
    "reads",
    "information",
    "file",
    "see",
    "specifying",
    "mode",
    "r",
    "stands",
    "read",
    "reading",
    "contents",
    "file",
    "spitting",
    "screen",
    "going",
    "click",
    "play",
    "button",
    "see",
    "executes",
    "printing",
    "lines",
    "code",
    "text",
    "file",
    "file",
    "information",
    "like",
    "employees",
    "office",
    "let",
    "say",
    "wanted",
    "add",
    "another",
    "employee",
    "onto",
    "right",
    "let",
    "say",
    "new",
    "employee",
    "joined",
    "company",
    "wanted",
    "add",
    "onto",
    "list",
    "well",
    "come",
    "file",
    "instead",
    "reading",
    "file",
    "want",
    "append",
    "file",
    "want",
    "say",
    "appending",
    "file",
    "basically",
    "means",
    "adding",
    "text",
    "end",
    "file",
    "wherever",
    "file",
    "ends",
    "going",
    "add",
    "text",
    "onto",
    "actually",
    "add",
    "another",
    "employee",
    "file",
    "instead",
    "printing",
    "something",
    "actually",
    "going",
    "say",
    "employee",
    "file",
    "dot",
    "right",
    "say",
    "employee",
    "file",
    "dot",
    "right",
    "going",
    "able",
    "write",
    "something",
    "end",
    "file",
    "basically",
    "write",
    "whatever",
    "want",
    "add",
    "another",
    "employee",
    "employees",
    "dot",
    "text",
    "file",
    "add",
    "another",
    "employee",
    "say",
    "like",
    "toby",
    "going",
    "human",
    "resources",
    "run",
    "program",
    "going",
    "add",
    "toby",
    "human",
    "resources",
    "onto",
    "end",
    "file",
    "going",
    "run",
    "program",
    "see",
    "nothing",
    "shows",
    "console",
    "go",
    "employees",
    "dot",
    "text",
    "file",
    "sudden",
    "new",
    "entry",
    "toby",
    "human",
    "resources",
    "right",
    "able",
    "append",
    "line",
    "onto",
    "end",
    "file",
    "thing",
    "need",
    "careful",
    "writing",
    "files",
    "actually",
    "mess",
    "file",
    "easily",
    "example",
    "already",
    "added",
    "toby",
    "file",
    "run",
    "program",
    "see",
    "employees",
    "dot",
    "text",
    "file",
    "went",
    "ahead",
    "added",
    "toby",
    "right",
    "added",
    "employee",
    "also",
    "notice",
    "case",
    "employee",
    "go",
    "next",
    "line",
    "accidentally",
    "ran",
    "file",
    "sudden",
    "messed",
    "file",
    "appending",
    "really",
    "need",
    "careful",
    "actually",
    "run",
    "file",
    "know",
    "append",
    "something",
    "something",
    "wrong",
    "file",
    "permanent",
    "like",
    "getting",
    "saved",
    "inside",
    "file",
    "want",
    "talk",
    "guys",
    "little",
    "bit",
    "know",
    "appending",
    "another",
    "thing",
    "could",
    "let",
    "say",
    "wanted",
    "add",
    "another",
    "employee",
    "notice",
    "employees",
    "dot",
    "text",
    "file",
    "appended",
    "got",
    "appended",
    "end",
    "existing",
    "line",
    "right",
    "first",
    "time",
    "new",
    "line",
    "new",
    "line",
    "end",
    "file",
    "want",
    "add",
    "new",
    "line",
    "going",
    "add",
    "special",
    "characters",
    "let",
    "add",
    "another",
    "employee",
    "call",
    "kelly",
    "let",
    "say",
    "kelly",
    "customer",
    "service",
    "kelly",
    "going",
    "customer",
    "service",
    "want",
    "add",
    "employee",
    "onto",
    "end",
    "file",
    "new",
    "line",
    "going",
    "put",
    "new",
    "line",
    "character",
    "front",
    "say",
    "backslash",
    "n",
    "append",
    "entry",
    "file",
    "new",
    "line",
    "new",
    "line",
    "run",
    "see",
    "get",
    "kelly",
    "customer",
    "service",
    "line",
    "want",
    "make",
    "sure",
    "aware",
    "like",
    "special",
    "characters",
    "use",
    "call",
    "escape",
    "characters",
    "know",
    "anytime",
    "adding",
    "onto",
    "file",
    "want",
    "make",
    "sure",
    "adding",
    "exactly",
    "want",
    "add",
    "addition",
    "appending",
    "file",
    "could",
    "also",
    "like",
    "overwrite",
    "file",
    "could",
    "write",
    "entirely",
    "new",
    "file",
    "since",
    "already",
    "open",
    "instead",
    "appending",
    "file",
    "write",
    "file",
    "going",
    "use",
    "say",
    "employee",
    "file",
    "dot",
    "right",
    "using",
    "w",
    "using",
    "actually",
    "going",
    "override",
    "entire",
    "file",
    "going",
    "put",
    "inside",
    "file",
    "run",
    "go",
    "employees",
    "dot",
    "text",
    "file",
    "see",
    "one",
    "line",
    "inside",
    "file",
    "kelly",
    "customer",
    "service",
    "using",
    "w",
    "use",
    "w",
    "overriding",
    "everything",
    "existing",
    "file",
    "also",
    "use",
    "w",
    "create",
    "new",
    "file",
    "could",
    "say",
    "employee",
    "file",
    "equal",
    "employees",
    "one",
    "dot",
    "text",
    "going",
    "happen",
    "run",
    "going",
    "create",
    "another",
    "file",
    "going",
    "run",
    "see",
    "file",
    "browser",
    "new",
    "file",
    "employees",
    "one",
    "dot",
    "text",
    "open",
    "exactly",
    "stuff",
    "employees",
    "file",
    "basically",
    "created",
    "new",
    "file",
    "us",
    "lot",
    "times",
    "going",
    "want",
    "create",
    "new",
    "file",
    "use",
    "different",
    "extensions",
    "wanted",
    "create",
    "like",
    "web",
    "page",
    "could",
    "say",
    "index",
    "dot",
    "html",
    "could",
    "also",
    "add",
    "html",
    "code",
    "understand",
    "html",
    "worry",
    "could",
    "put",
    "like",
    "paragraph",
    "another",
    "paragraph",
    "like",
    "html",
    "basically",
    "html",
    "like",
    "web",
    "page",
    "point",
    "trying",
    "make",
    "could",
    "write",
    "web",
    "page",
    "inside",
    "python",
    "something",
    "like",
    "play",
    "get",
    "index",
    "dot",
    "html",
    "file",
    "html",
    "inside",
    "one",
    "way",
    "writing",
    "files",
    "really",
    "useful",
    "overwrite",
    "existing",
    "file",
    "write",
    "new",
    "file",
    "create",
    "append",
    "onto",
    "end",
    "file",
    "tons",
    "applications",
    "writing",
    "files",
    "python",
    "great",
    "language",
    "working",
    "reading",
    "writing",
    "stuff",
    "files",
    "tutorial",
    "want",
    "talk",
    "guys",
    "using",
    "modules",
    "python",
    "module",
    "essentially",
    "python",
    "file",
    "import",
    "current",
    "python",
    "file",
    "example",
    "wrote",
    "python",
    "file",
    "bunch",
    "like",
    "useful",
    "functions",
    "useful",
    "variables",
    "know",
    "things",
    "like",
    "could",
    "take",
    "file",
    "could",
    "import",
    "file",
    "currently",
    "working",
    "could",
    "actually",
    "access",
    "functions",
    "variables",
    "stuff",
    "external",
    "file",
    "inside",
    "file",
    "currently",
    "working",
    "going",
    "show",
    "guys",
    "use",
    "modules",
    "talk",
    "like",
    "know",
    "find",
    "awesome",
    "modules",
    "really",
    "modules",
    "make",
    "python",
    "awesome",
    "language",
    "text",
    "editor",
    "actually",
    "created",
    "file",
    "called",
    "useful",
    "tools",
    "dot",
    "python",
    "basically",
    "file",
    "bunch",
    "sort",
    "like",
    "useful",
    "tools",
    "might",
    "want",
    "use",
    "one",
    "programs",
    "see",
    "variables",
    "one",
    "telling",
    "many",
    "feet",
    "mile",
    "one",
    "telling",
    "many",
    "meters",
    "kilometer",
    "list",
    "lists",
    "members",
    "beatles",
    "also",
    "couple",
    "different",
    "functions",
    "get",
    "file",
    "extension",
    "function",
    "basically",
    "know",
    "give",
    "file",
    "name",
    "tell",
    "extension",
    "function",
    "simulates",
    "rolling",
    "dice",
    "pass",
    "number",
    "pass",
    "like",
    "six",
    "would",
    "roll",
    "six",
    "sided",
    "dice",
    "pass",
    "nine",
    "roll",
    "nine",
    "sided",
    "dice",
    "etc",
    "like",
    "python",
    "file",
    "wrote",
    "useful",
    "stuff",
    "honestly",
    "lot",
    "stuff",
    "might",
    "want",
    "use",
    "python",
    "files",
    "work",
    "let",
    "say",
    "app",
    "dot",
    "python",
    "file",
    "thinking",
    "huh",
    "think",
    "could",
    "use",
    "one",
    "functions",
    "inside",
    "useful",
    "tools",
    "file",
    "actually",
    "yeah",
    "need",
    "simulate",
    "rolling",
    "dice",
    "program",
    "well",
    "instead",
    "go",
    "copy",
    "function",
    "paste",
    "program",
    "actually",
    "import",
    "useful",
    "tools",
    "file",
    "able",
    "import",
    "functions",
    "variables",
    "attributes",
    "way",
    "coming",
    "going",
    "go",
    "right",
    "top",
    "file",
    "going",
    "say",
    "import",
    "want",
    "type",
    "name",
    "file",
    "want",
    "import",
    "going",
    "say",
    "useful",
    "underscore",
    "tools",
    "python",
    "going",
    "smart",
    "enough",
    "know",
    "go",
    "grab",
    "stuff",
    "useful",
    "tools",
    "dot",
    "pi",
    "file",
    "used",
    "import",
    "statement",
    "actually",
    "use",
    "functions",
    "inside",
    "useful",
    "tools",
    "file",
    "example",
    "could",
    "simulate",
    "rolling",
    "dice",
    "could",
    "say",
    "useful",
    "tools",
    "dot",
    "actually",
    "able",
    "access",
    "attributes",
    "inside",
    "file",
    "say",
    "useful",
    "tools",
    "dot",
    "see",
    "little",
    "suggestions",
    "menu",
    "telling",
    "like",
    "beatles",
    "feet",
    "miles",
    "get",
    "file",
    "extension",
    "meters",
    "kilometers",
    "roll",
    "dice",
    "giving",
    "access",
    "stuff",
    "file",
    "could",
    "say",
    "like",
    "roll",
    "dice",
    "pass",
    "like",
    "10",
    "roll",
    "10",
    "sided",
    "dice",
    "actually",
    "able",
    "run",
    "function",
    "simulate",
    "rolling",
    "10",
    "sided",
    "dice",
    "see",
    "got",
    "four",
    "really",
    "core",
    "concept",
    "python",
    "importing",
    "functionality",
    "external",
    "python",
    "files",
    "like",
    "huge",
    "python",
    "seriously",
    "going",
    "change",
    "way",
    "create",
    "python",
    "files",
    "notice",
    "like",
    "copy",
    "functions",
    "variables",
    "anything",
    "file",
    "yet",
    "able",
    "use",
    "stuff",
    "inside",
    "useful",
    "tools",
    "file",
    "huge",
    "honestly",
    "going",
    "save",
    "lot",
    "time",
    "write",
    "something",
    "import",
    "files",
    "really",
    "basics",
    "using",
    "modules",
    "mean",
    "modules",
    "simple",
    "module",
    "external",
    "python",
    "file",
    "want",
    "use",
    "stuff",
    "inside",
    "want",
    "show",
    "guys",
    "place",
    "go",
    "find",
    "huge",
    "list",
    "modules",
    "going",
    "go",
    "web",
    "browser",
    "website",
    "actually",
    "like",
    "official",
    "python",
    "docs",
    "basically",
    "get",
    "type",
    "list",
    "python",
    "modules",
    "google",
    "depending",
    "version",
    "python",
    "using",
    "going",
    "want",
    "make",
    "sure",
    "click",
    "right",
    "one",
    "clicked",
    "version",
    "page",
    "see",
    "huge",
    "list",
    "python",
    "modules",
    "basically",
    "modules",
    "inside",
    "python",
    "access",
    "essentially",
    "like",
    "awesome",
    "code",
    "already",
    "written",
    "sort",
    "functionality",
    "want",
    "inside",
    "python",
    "program",
    "chances",
    "module",
    "functionality",
    "sorts",
    "stuff",
    "mean",
    "look",
    "list",
    "like",
    "see",
    "huge",
    "collection",
    "basically",
    "know",
    "bunch",
    "either",
    "python",
    "variables",
    "python",
    "functions",
    "know",
    "things",
    "use",
    "make",
    "programs",
    "better",
    "would",
    "recommend",
    "like",
    "head",
    "page",
    "sort",
    "look",
    "lot",
    "different",
    "modules",
    "know",
    "see",
    "see",
    "honestly",
    "like",
    "click",
    "one",
    "bring",
    "page",
    "talks",
    "like",
    "use",
    "tell",
    "like",
    "import",
    "know",
    "basics",
    "sort",
    "like",
    "list",
    "official",
    "python",
    "docs",
    "thing",
    "python",
    "community",
    "huge",
    "tons",
    "developers",
    "use",
    "python",
    "actually",
    "find",
    "lot",
    "third",
    "party",
    "modules",
    "go",
    "online",
    "know",
    "look",
    "like",
    "python",
    "module",
    "x",
    "python",
    "module",
    "chances",
    "somebody",
    "already",
    "written",
    "python",
    "module",
    "trying",
    "get",
    "good",
    "using",
    "modules",
    "get",
    "good",
    "know",
    "looking",
    "finding",
    "actually",
    "save",
    "bunch",
    "time",
    "chances",
    "somebody",
    "already",
    "written",
    "module",
    "know",
    "trying",
    "like",
    "part",
    "trying",
    "taken",
    "look",
    "different",
    "python",
    "modules",
    "want",
    "kind",
    "dive",
    "little",
    "bit",
    "deeper",
    "actually",
    "use",
    "things",
    "notice",
    "lot",
    "files",
    "right",
    "lot",
    "different",
    "modules",
    "apparently",
    "access",
    "python",
    "question",
    "files",
    "stored",
    "right",
    "program",
    "example",
    "using",
    "useful",
    "file",
    "like",
    "knew",
    "created",
    "file",
    "directly",
    "involved",
    "making",
    "imported",
    "pretty",
    "easy",
    "right",
    "files",
    "right",
    "modules",
    "like",
    "stored",
    "basically",
    "two",
    "types",
    "modules",
    "modules",
    "means",
    "built",
    "python",
    "language",
    "kind",
    "automatically",
    "access",
    "external",
    "modules",
    "lot",
    "external",
    "modules",
    "stored",
    "basically",
    "folder",
    "installed",
    "python",
    "computer",
    "example",
    "let",
    "look",
    "couple",
    "right",
    "like",
    "base",
    "64",
    "bdb",
    "bin",
    "ascii",
    "like",
    "come",
    "see",
    "little",
    "file",
    "explorer",
    "python",
    "project",
    "draft",
    "also",
    "folder",
    "called",
    "external",
    "libraries",
    "click",
    "come",
    "see",
    "version",
    "python",
    "using",
    "folder",
    "called",
    "lib",
    "important",
    "folder",
    "basically",
    "storing",
    "external",
    "modules",
    "see",
    "scroll",
    "different",
    "like",
    "modules",
    "right",
    "base",
    "bdb",
    "right",
    "lot",
    "external",
    "modules",
    "stored",
    "inside",
    "lib",
    "folder",
    "like",
    "said",
    "external",
    "modules",
    "also",
    "modules",
    "like",
    "built",
    "modules",
    "going",
    "stored",
    "inside",
    "actually",
    "tell",
    "example",
    "come",
    "click",
    "base",
    "64",
    "tells",
    "source",
    "code",
    "source",
    "codes",
    "lib",
    "forward",
    "slash",
    "base",
    "able",
    "see",
    "right",
    "saw",
    "inside",
    "lib",
    "folder",
    "bin",
    "ascii",
    "though",
    "example",
    "click",
    "notice",
    "giving",
    "folder",
    "basically",
    "like",
    "built",
    "python",
    "worry",
    "know",
    "locating",
    "file",
    "kind",
    "like",
    "kind",
    "works",
    "external",
    "built",
    "want",
    "show",
    "guys",
    "addition",
    "using",
    "modules",
    "right",
    "lot",
    "good",
    "stuff",
    "honestly",
    "could",
    "spend",
    "know",
    "years",
    "years",
    "learning",
    "different",
    "modules",
    "lot",
    "times",
    "going",
    "want",
    "use",
    "modules",
    "people",
    "written",
    "know",
    "lot",
    "developers",
    "work",
    "python",
    "write",
    "different",
    "modules",
    "lot",
    "useful",
    "modules",
    "included",
    "list",
    "right",
    "going",
    "inside",
    "lib",
    "folder",
    "default",
    "actually",
    "install",
    "external",
    "modules",
    "third",
    "party",
    "modules",
    "come",
    "pre",
    "installed",
    "python",
    "going",
    "show",
    "guys",
    "really",
    "quick",
    "first",
    "thing",
    "need",
    "obviously",
    "find",
    "python",
    "module",
    "want",
    "install",
    "want",
    "download",
    "actually",
    "used",
    "one",
    "past",
    "python",
    "docs",
    "external",
    "module",
    "use",
    "basically",
    "use",
    "python",
    "create",
    "word",
    "documents",
    "pretty",
    "cool",
    "like",
    "format",
    "word",
    "documents",
    "inside",
    "going",
    "look",
    "google",
    "going",
    "type",
    "python",
    "docs",
    "look",
    "thing",
    "tons",
    "external",
    "modules",
    "use",
    "python",
    "docs",
    "giving",
    "guys",
    "example",
    "really",
    "look",
    "like",
    "useful",
    "third",
    "party",
    "python",
    "modules",
    "going",
    "lists",
    "things",
    "online",
    "case",
    "though",
    "python",
    "docs",
    "website",
    "basically",
    "like",
    "installation",
    "instructions",
    "going",
    "come",
    "tells",
    "install",
    "python",
    "docs",
    "using",
    "command",
    "pip",
    "install",
    "python",
    "docs",
    "brings",
    "us",
    "something",
    "want",
    "talk",
    "guys",
    "pip",
    "pip",
    "essentially",
    "program",
    "actually",
    "newer",
    "version",
    "python",
    "three",
    "comes",
    "pre",
    "installed",
    "python",
    "three",
    "use",
    "pip",
    "install",
    "python",
    "modules",
    "referred",
    "package",
    "manager",
    "package",
    "manager",
    "basically",
    "allows",
    "like",
    "install",
    "manage",
    "update",
    "uninstall",
    "like",
    "different",
    "python",
    "modules",
    "pip",
    "extremely",
    "useful",
    "order",
    "us",
    "install",
    "python",
    "docs",
    "going",
    "use",
    "pip",
    "going",
    "show",
    "guys",
    "want",
    "open",
    "command",
    "prompt",
    "terminal",
    "computer",
    "mac",
    "want",
    "open",
    "terminal",
    "windows",
    "computer",
    "want",
    "open",
    "command",
    "prompts",
    "using",
    "windows",
    "right",
    "going",
    "come",
    "search",
    "bar",
    "type",
    "cmd",
    "command",
    "prompt",
    "come",
    "going",
    "click",
    "inside",
    "command",
    "prompt",
    "actually",
    "use",
    "pip",
    "first",
    "thing",
    "want",
    "check",
    "make",
    "sure",
    "pip",
    "installed",
    "like",
    "said",
    "version",
    "python",
    "three",
    "pip",
    "come",
    "pre",
    "installed",
    "work",
    "new",
    "version",
    "python",
    "three",
    "though",
    "might",
    "install",
    "pip",
    "separately",
    "tons",
    "instructions",
    "online",
    "install",
    "pip",
    "going",
    "check",
    "make",
    "sure",
    "going",
    "type",
    "pip",
    "hyphen",
    "hyphen",
    "version",
    "spit",
    "version",
    "pip",
    "currently",
    "long",
    "pip",
    "ready",
    "install",
    "external",
    "third",
    "party",
    "python",
    "module",
    "say",
    "pick",
    "install",
    "want",
    "type",
    "name",
    "python",
    "module",
    "case",
    "python",
    "docs",
    "python",
    "docs",
    "like",
    "install",
    "python",
    "docs",
    "tutorial",
    "kind",
    "show",
    "guys",
    "going",
    "work",
    "know",
    "want",
    "go",
    "online",
    "look",
    "third",
    "party",
    "external",
    "python",
    "modules",
    "generally",
    "like",
    "say",
    "90",
    "95",
    "time",
    "going",
    "able",
    "install",
    "using",
    "pip",
    "case",
    "ca",
    "install",
    "using",
    "pip",
    "chances",
    "like",
    "detailed",
    "installation",
    "instructions",
    "would",
    "say",
    "part",
    "like",
    "legitimate",
    "python",
    "module",
    "going",
    "able",
    "install",
    "using",
    "pip",
    "going",
    "say",
    "pip",
    "install",
    "module",
    "name",
    "python",
    "hyphen",
    "docs",
    "click",
    "enter",
    "going",
    "go",
    "install",
    "python",
    "docs",
    "us",
    "going",
    "enter",
    "going",
    "go",
    "install",
    "everything",
    "need",
    "python",
    "docs",
    "see",
    "successfully",
    "installed",
    "python",
    "docs",
    "going",
    "show",
    "guys",
    "exactly",
    "got",
    "placed",
    "normally",
    "install",
    "external",
    "third",
    "party",
    "module",
    "going",
    "get",
    "put",
    "inside",
    "lib",
    "folder",
    "going",
    "get",
    "put",
    "inside",
    "special",
    "folder",
    "called",
    "site",
    "packages",
    "site",
    "packages",
    "special",
    "folder",
    "open",
    "folder",
    "see",
    "docs",
    "folder",
    "also",
    "python",
    "docs",
    "pi",
    "info",
    "folder",
    "two",
    "folders",
    "basically",
    "included",
    "module",
    "installation",
    "see",
    "docs",
    "folder",
    "bunch",
    "different",
    "python",
    "files",
    "bunch",
    "stuff",
    "use",
    "wanted",
    "use",
    "inside",
    "one",
    "programs",
    "going",
    "refer",
    "name",
    "module",
    "case",
    "going",
    "docs",
    "used",
    "python",
    "docs",
    "order",
    "install",
    "going",
    "use",
    "docs",
    "want",
    "import",
    "could",
    "come",
    "could",
    "say",
    "import",
    "docx",
    "actually",
    "use",
    "say",
    "like",
    "docs",
    "doc",
    "whatever",
    "see",
    "bunch",
    "different",
    "stuff",
    "like",
    "document",
    "document",
    "part",
    "image",
    "part",
    "bunch",
    "stuff",
    "use",
    "obviously",
    "depending",
    "python",
    "module",
    "install",
    "going",
    "different",
    "instructions",
    "see",
    "got",
    "stored",
    "site",
    "packages",
    "folder",
    "wanted",
    "remove",
    "could",
    "use",
    "pip",
    "could",
    "say",
    "pip",
    "uninstall",
    "could",
    "say",
    "module",
    "name",
    "python",
    "docs",
    "pip",
    "uninstall",
    "computer",
    "go",
    "back",
    "folder",
    "see",
    "two",
    "docs",
    "folder",
    "folder",
    "disappeared",
    "longer",
    "actually",
    "going",
    "able",
    "use",
    "anymore",
    "sort",
    "ins",
    "outs",
    "using",
    "modules",
    "tons",
    "modules",
    "make",
    "dozens",
    "dozens",
    "python",
    "courses",
    "covering",
    "one",
    "modules",
    "modules",
    "modules",
    "included",
    "default",
    "external",
    "modules",
    "tons",
    "things",
    "really",
    "python",
    "programmer",
    "go",
    "play",
    "around",
    "different",
    "modules",
    "showed",
    "ins",
    "outs",
    "installing",
    "use",
    "pip",
    "install",
    "different",
    "modules",
    "make",
    "sure",
    "checking",
    "site",
    "packages",
    "folder",
    "libs",
    "folder",
    "really",
    "kind",
    "go",
    "use",
    "modules",
    "shy",
    "away",
    "modules",
    "huge",
    "part",
    "python",
    "definitely",
    "going",
    "want",
    "include",
    "python",
    "stack",
    "tutorial",
    "want",
    "talk",
    "guys",
    "classes",
    "objects",
    "python",
    "classes",
    "objects",
    "extremely",
    "useful",
    "python",
    "programming",
    "help",
    "make",
    "programs",
    "organized",
    "powerful",
    "python",
    "dealing",
    "types",
    "data",
    "right",
    "lot",
    "times",
    "writing",
    "programs",
    "going",
    "work",
    "different",
    "types",
    "data",
    "essentially",
    "like",
    "basic",
    "types",
    "data",
    "usually",
    "things",
    "like",
    "strings",
    "like",
    "plain",
    "text",
    "numbers",
    "boolean",
    "values",
    "three",
    "kind",
    "like",
    "main",
    "types",
    "data",
    "going",
    "working",
    "python",
    "sorts",
    "structures",
    "use",
    "store",
    "data",
    "know",
    "things",
    "like",
    "lists",
    "dictionaries",
    "problem",
    "information",
    "data",
    "things",
    "represented",
    "using",
    "strings",
    "numbers",
    "booleans",
    "right",
    "lot",
    "things",
    "real",
    "world",
    "ca",
    "represent",
    "something",
    "like",
    "string",
    "number",
    "right",
    "words",
    "something",
    "like",
    "think",
    "like",
    "something",
    "like",
    "phone",
    "computer",
    "person",
    "right",
    "ca",
    "really",
    "represent",
    "things",
    "like",
    "string",
    "number",
    "know",
    "words",
    "like",
    "data",
    "types",
    "available",
    "us",
    "python",
    "ca",
    "cover",
    "classes",
    "objects",
    "essentially",
    "create",
    "data",
    "types",
    "create",
    "data",
    "type",
    "anything",
    "want",
    "python",
    "could",
    "create",
    "like",
    "phone",
    "data",
    "type",
    "could",
    "represent",
    "phone",
    "could",
    "store",
    "information",
    "would",
    "ever",
    "want",
    "know",
    "phone",
    "inside",
    "data",
    "type",
    "python",
    "could",
    "create",
    "class",
    "essentially",
    "class",
    "saying",
    "hey",
    "another",
    "data",
    "type",
    "want",
    "use",
    "python",
    "class",
    "essentially",
    "define",
    "data",
    "type",
    "super",
    "awesome",
    "classes",
    "extremely",
    "useful",
    "classes",
    "used",
    "almost",
    "every",
    "single",
    "major",
    "programming",
    "language",
    "tutorial",
    "want",
    "give",
    "guys",
    "basic",
    "introduction",
    "classes",
    "using",
    "inside",
    "python",
    "let",
    "say",
    "writing",
    "program",
    "want",
    "represent",
    "student",
    "inside",
    "program",
    "maybe",
    "writing",
    "program",
    "like",
    "college",
    "university",
    "let",
    "say",
    "program",
    "want",
    "model",
    "student",
    "like",
    "want",
    "model",
    "real",
    "world",
    "object",
    "want",
    "student",
    "right",
    "student",
    "data",
    "type",
    "ca",
    "really",
    "represent",
    "student",
    "single",
    "string",
    "number",
    "actually",
    "create",
    "class",
    "student",
    "basically",
    "creating",
    "like",
    "student",
    "data",
    "type",
    "going",
    "show",
    "guys",
    "create",
    "student",
    "class",
    "going",
    "make",
    "new",
    "file",
    "make",
    "new",
    "python",
    "file",
    "going",
    "call",
    "inside",
    "file",
    "want",
    "create",
    "student",
    "class",
    "way",
    "typing",
    "class",
    "want",
    "type",
    "name",
    "class",
    "want",
    "create",
    "case",
    "going",
    "create",
    "class",
    "called",
    "student",
    "going",
    "say",
    "student",
    "going",
    "make",
    "colon",
    "everything",
    "goes",
    "inside",
    "going",
    "inside",
    "student",
    "class",
    "everything",
    "indented",
    "like",
    "considered",
    "part",
    "student",
    "class",
    "basically",
    "inside",
    "student",
    "class",
    "define",
    "bunch",
    "attributes",
    "student",
    "essentially",
    "like",
    "modeling",
    "student",
    "creating",
    "student",
    "data",
    "type",
    "use",
    "things",
    "like",
    "strings",
    "integers",
    "booleans",
    "order",
    "map",
    "student",
    "student",
    "want",
    "create",
    "something",
    "called",
    "initialize",
    "function",
    "way",
    "typing",
    "def",
    "going",
    "type",
    "two",
    "underscores",
    "word",
    "n",
    "two",
    "underscores",
    "also",
    "want",
    "type",
    "open",
    "close",
    "parentheses",
    "inside",
    "parentheses",
    "want",
    "type",
    "self",
    "want",
    "colon",
    "inside",
    "initialize",
    "function",
    "basically",
    "map",
    "attributes",
    "student",
    "essentially",
    "define",
    "like",
    "hey",
    "student",
    "data",
    "type",
    "python",
    "want",
    "add",
    "certain",
    "attributes",
    "self",
    "going",
    "say",
    "self",
    "comma",
    "start",
    "thinking",
    "know",
    "values",
    "represent",
    "student",
    "inside",
    "python",
    "program",
    "thinking",
    "like",
    "thinking",
    "something",
    "like",
    "name",
    "right",
    "every",
    "student",
    "program",
    "name",
    "also",
    "might",
    "want",
    "major",
    "college",
    "probably",
    "also",
    "gpa",
    "grade",
    "point",
    "average",
    "like",
    "school",
    "let",
    "define",
    "one",
    "thing",
    "let",
    "think",
    "make",
    "boolean",
    "going",
    "called",
    "probation",
    "basically",
    "tell",
    "whether",
    "student",
    "probation",
    "essentially",
    "inside",
    "initialize",
    "method",
    "inside",
    "init",
    "function",
    "defining",
    "student",
    "program",
    "program",
    "student",
    "name",
    "major",
    "gpa",
    "value",
    "determines",
    "whether",
    "probation",
    "right",
    "student",
    "data",
    "type",
    "representing",
    "student",
    "inside",
    "program",
    "attributes",
    "associated",
    "basically",
    "inside",
    "initialize",
    "function",
    "actually",
    "something",
    "basically",
    "want",
    "assign",
    "values",
    "going",
    "writing",
    "stuff",
    "might",
    "make",
    "total",
    "sense",
    "right",
    "going",
    "make",
    "sense",
    "second",
    "create",
    "first",
    "student",
    "object",
    "stick",
    "right",
    "basically",
    "know",
    "going",
    "say",
    "self",
    "dot",
    "name",
    "equal",
    "name",
    "going",
    "say",
    "self",
    "dot",
    "major",
    "equal",
    "major",
    "self",
    "dot",
    "gpa",
    "equal",
    "gpa",
    "going",
    "say",
    "self",
    "dot",
    "probation",
    "equal",
    "probation",
    "might",
    "make",
    "whole",
    "lot",
    "sense",
    "right",
    "little",
    "bit",
    "going",
    "make",
    "total",
    "sense",
    "student",
    "class",
    "defined",
    "actually",
    "use",
    "class",
    "inside",
    "file",
    "going",
    "come",
    "app",
    "dot",
    "python",
    "file",
    "main",
    "file",
    "actually",
    "want",
    "create",
    "student",
    "right",
    "student",
    "class",
    "defined",
    "student",
    "data",
    "type",
    "basically",
    "said",
    "like",
    "hey",
    "student",
    "name",
    "major",
    "gpa",
    "says",
    "whether",
    "probation",
    "like",
    "template",
    "student",
    "actually",
    "create",
    "student",
    "create",
    "actual",
    "student",
    "give",
    "information",
    "called",
    "object",
    "student",
    "class",
    "basically",
    "defining",
    "student",
    "class",
    "like",
    "overview",
    "student",
    "data",
    "type",
    "object",
    "actual",
    "student",
    "actual",
    "student",
    "name",
    "major",
    "gpa",
    "template",
    "anymore",
    "actually",
    "like",
    "student",
    "representing",
    "inside",
    "program",
    "order",
    "use",
    "student",
    "class",
    "create",
    "student",
    "object",
    "actually",
    "need",
    "import",
    "say",
    "student",
    "referring",
    "student",
    "file",
    "say",
    "import",
    "student",
    "basically",
    "saying",
    "student",
    "file",
    "want",
    "import",
    "student",
    "class",
    "even",
    "though",
    "student",
    "referring",
    "different",
    "things",
    "referring",
    "file",
    "referring",
    "actual",
    "student",
    "class",
    "create",
    "student",
    "create",
    "object",
    "class",
    "lot",
    "like",
    "would",
    "normal",
    "variable",
    "give",
    "name",
    "going",
    "call",
    "student",
    "one",
    "going",
    "set",
    "equal",
    "student",
    "going",
    "make",
    "open",
    "close",
    "parentheses",
    "inside",
    "parentheses",
    "want",
    "give",
    "student",
    "name",
    "major",
    "gpa",
    "probation",
    "value",
    "going",
    "say",
    "create",
    "fake",
    "student",
    "say",
    "name",
    "jim",
    "studying",
    "business",
    "want",
    "give",
    "gpa",
    "maybe",
    "like",
    "finally",
    "want",
    "say",
    "whether",
    "student",
    "probation",
    "say",
    "false",
    "basically",
    "saying",
    "want",
    "create",
    "student",
    "want",
    "actually",
    "create",
    "student",
    "object",
    "remember",
    "object",
    "instance",
    "class",
    "class",
    "like",
    "overall",
    "template",
    "defines",
    "student",
    "object",
    "actual",
    "student",
    "actual",
    "information",
    "could",
    "call",
    "student",
    "one",
    "student",
    "object",
    "want",
    "show",
    "guys",
    "student",
    "object",
    "actually",
    "going",
    "talk",
    "function",
    "going",
    "make",
    "print",
    "statement",
    "inside",
    "want",
    "print",
    "student",
    "cool",
    "student",
    "one",
    "object",
    "actually",
    "access",
    "attributes",
    "inside",
    "object",
    "wanted",
    "get",
    "name",
    "student",
    "could",
    "say",
    "student",
    "one",
    "dot",
    "name",
    "actually",
    "going",
    "print",
    "student",
    "name",
    "see",
    "prints",
    "jim",
    "wanted",
    "could",
    "print",
    "student",
    "gpa",
    "going",
    "print",
    "student",
    "gpa",
    "created",
    "student",
    "object",
    "actually",
    "access",
    "information",
    "student",
    "essentially",
    "created",
    "student",
    "data",
    "type",
    "could",
    "create",
    "many",
    "students",
    "wanted",
    "wanted",
    "could",
    "create",
    "another",
    "student",
    "could",
    "call",
    "student",
    "two",
    "essentially",
    "thing",
    "give",
    "different",
    "information",
    "could",
    "say",
    "like",
    "pam",
    "major",
    "art",
    "like",
    "let",
    "say",
    "probation",
    "another",
    "student",
    "student",
    "two",
    "wanted",
    "could",
    "access",
    "information",
    "student",
    "could",
    "say",
    "like",
    "student",
    "two",
    "dot",
    "gpa",
    "giving",
    "gpa",
    "student",
    "two",
    "basically",
    "created",
    "student",
    "data",
    "type",
    "created",
    "student",
    "objects",
    "able",
    "represent",
    "student",
    "inside",
    "program",
    "let",
    "talk",
    "real",
    "quick",
    "stuff",
    "really",
    "explain",
    "basically",
    "happening",
    "come",
    "say",
    "student",
    "passing",
    "different",
    "values",
    "getting",
    "passed",
    "init",
    "function",
    "remember",
    "passed",
    "name",
    "passed",
    "major",
    "passed",
    "gpa",
    "create",
    "student",
    "actually",
    "calling",
    "function",
    "pass",
    "name",
    "major",
    "gpa",
    "values",
    "actually",
    "getting",
    "stored",
    "name",
    "major",
    "gpa",
    "et",
    "cetera",
    "giving",
    "student",
    "object",
    "information",
    "saying",
    "self",
    "dot",
    "name",
    "equal",
    "name",
    "basically",
    "means",
    "actual",
    "object",
    "name",
    "going",
    "equal",
    "name",
    "passed",
    "self",
    "dot",
    "name",
    "attribute",
    "student",
    "student",
    "storing",
    "name",
    "student",
    "storing",
    "major",
    "student",
    "storing",
    "gpa",
    "different",
    "name",
    "major",
    "gpa",
    "remember",
    "values",
    "passed",
    "parameters",
    "need",
    "take",
    "values",
    "passed",
    "need",
    "assign",
    "actual",
    "attributes",
    "object",
    "need",
    "say",
    "okay",
    "name",
    "student",
    "going",
    "equal",
    "name",
    "passed",
    "one",
    "time",
    "name",
    "student",
    "object",
    "going",
    "equal",
    "name",
    "passed",
    "name",
    "student",
    "major",
    "going",
    "equal",
    "major",
    "passed",
    "student",
    "gpa",
    "going",
    "equal",
    "gpa",
    "passed",
    "basically",
    "happening",
    "say",
    "self",
    "referring",
    "actual",
    "object",
    "creating",
    "student",
    "object",
    "giving",
    "information",
    "taking",
    "information",
    "storing",
    "attributes",
    "object",
    "hopefully",
    "makes",
    "sense",
    "think",
    "clear",
    "make",
    "point",
    "student",
    "data",
    "type",
    "represent",
    "student",
    "inside",
    "python",
    "program",
    "like",
    "super",
    "powerful",
    "cool",
    "classes",
    "objects",
    "anything",
    "example",
    "created",
    "student",
    "class",
    "created",
    "student",
    "objects",
    "model",
    "real",
    "world",
    "entity",
    "program",
    "model",
    "something",
    "like",
    "phone",
    "model",
    "like",
    "water",
    "bottle",
    "model",
    "know",
    "keyboard",
    "right",
    "model",
    "anything",
    "wanted",
    "inside",
    "program",
    "could",
    "give",
    "certain",
    "attributes",
    "right",
    "cool",
    "classes",
    "model",
    "real",
    "world",
    "objects",
    "create",
    "data",
    "types",
    "tutorial",
    "going",
    "show",
    "guys",
    "build",
    "multiple",
    "choice",
    "quiz",
    "python",
    "basically",
    "going",
    "set",
    "little",
    "multiple",
    "choice",
    "quiz",
    "user",
    "take",
    "quiz",
    "take",
    "quiz",
    "keep",
    "track",
    "score",
    "end",
    "tell",
    "going",
    "pretty",
    "cool",
    "video",
    "excited",
    "show",
    "guys",
    "get",
    "use",
    "things",
    "like",
    "classes",
    "statements",
    "loops",
    "order",
    "build",
    "program",
    "going",
    "use",
    "lot",
    "cool",
    "stuff",
    "python",
    "first",
    "thing",
    "want",
    "show",
    "guys",
    "actually",
    "started",
    "video",
    "little",
    "array",
    "called",
    "question",
    "prompts",
    "basically",
    "wrote",
    "questions",
    "going",
    "say",
    "questions",
    "wrote",
    "question",
    "prompts",
    "going",
    "inside",
    "multiple",
    "choice",
    "quiz",
    "first",
    "one",
    "says",
    "color",
    "apples",
    "answers",
    "red",
    "purple",
    "orange",
    "next",
    "one",
    "color",
    "bananas",
    "options",
    "teal",
    "magenta",
    "yellow",
    "third",
    "question",
    "color",
    "strawberries",
    "options",
    "yellow",
    "red",
    "blue",
    "obviously",
    "easy",
    "multiple",
    "choice",
    "quiz",
    "kind",
    "wrote",
    "questions",
    "beforehand",
    "spend",
    "time",
    "let",
    "talk",
    "build",
    "multiple",
    "choice",
    "test",
    "well",
    "first",
    "thing",
    "want",
    "think",
    "represent",
    "questions",
    "test",
    "question",
    "prompts",
    "actually",
    "two",
    "parts",
    "question",
    "think",
    "prompts",
    "words",
    "actual",
    "question",
    "answer",
    "question",
    "attributes",
    "need",
    "kept",
    "track",
    "need",
    "keep",
    "track",
    "want",
    "ask",
    "need",
    "keep",
    "track",
    "answer",
    "actually",
    "going",
    "create",
    "question",
    "class",
    "going",
    "create",
    "little",
    "data",
    "type",
    "questions",
    "inside",
    "question",
    "class",
    "able",
    "store",
    "question",
    "prompts",
    "also",
    "able",
    "store",
    "questions",
    "answer",
    "going",
    "come",
    "folder",
    "going",
    "make",
    "new",
    "python",
    "file",
    "going",
    "call",
    "call",
    "inside",
    "file",
    "going",
    "make",
    "class",
    "going",
    "say",
    "class",
    "question",
    "going",
    "put",
    "colon",
    "inside",
    "question",
    "class",
    "want",
    "define",
    "initialize",
    "function",
    "going",
    "say",
    "def",
    "two",
    "underscores",
    "two",
    "underscores",
    "going",
    "type",
    "open",
    "close",
    "parentheses",
    "self",
    "colon",
    "self",
    "want",
    "define",
    "different",
    "attributes",
    "describe",
    "included",
    "question",
    "going",
    "include",
    "prompt",
    "going",
    "include",
    "answer",
    "every",
    "question",
    "question",
    "prompt",
    "question",
    "answer",
    "want",
    "take",
    "values",
    "assign",
    "actual",
    "class",
    "object",
    "going",
    "say",
    "self",
    "dot",
    "prompt",
    "equal",
    "prompt",
    "going",
    "say",
    "self",
    "dot",
    "answer",
    "equal",
    "answer",
    "question",
    "class",
    "set",
    "store",
    "information",
    "need",
    "question",
    "want",
    "go",
    "back",
    "app",
    "dot",
    "python",
    "file",
    "actually",
    "going",
    "create",
    "array",
    "questions",
    "three",
    "prompts",
    "actually",
    "going",
    "create",
    "another",
    "array",
    "call",
    "questions",
    "going",
    "set",
    "equal",
    "open",
    "close",
    "square",
    "brackets",
    "going",
    "start",
    "creating",
    "question",
    "objects",
    "let",
    "say",
    "first",
    "element",
    "questions",
    "array",
    "question",
    "want",
    "pass",
    "question",
    "prompts",
    "zero",
    "answer",
    "first",
    "question",
    "red",
    "green",
    "color",
    "apple",
    "going",
    "pass",
    "first",
    "question",
    "also",
    "going",
    "pass",
    "answer",
    "see",
    "getting",
    "error",
    "saying",
    "unresolved",
    "reference",
    "question",
    "actually",
    "need",
    "create",
    "questions",
    "need",
    "import",
    "question",
    "class",
    "going",
    "come",
    "come",
    "say",
    "question",
    "import",
    "question",
    "questions",
    "array",
    "getting",
    "error",
    "anymore",
    "created",
    "one",
    "question",
    "object",
    "going",
    "create",
    "couple",
    "ones",
    "going",
    "copy",
    "one",
    "paste",
    "alright",
    "creating",
    "two",
    "questions",
    "ones",
    "going",
    "one",
    "two",
    "answer",
    "second",
    "question",
    "c",
    "answer",
    "third",
    "question",
    "think",
    "let",
    "look",
    "yeah",
    "c",
    "alright",
    "essentially",
    "creating",
    "three",
    "questions",
    "one",
    "getting",
    "different",
    "question",
    "prompt",
    "getting",
    "different",
    "answers",
    "array",
    "questions",
    "want",
    "ask",
    "test",
    "next",
    "step",
    "actually",
    "write",
    "function",
    "run",
    "test",
    "right",
    "ask",
    "user",
    "questions",
    "check",
    "see",
    "got",
    "answer",
    "right",
    "lower",
    "file",
    "let",
    "create",
    "function",
    "going",
    "say",
    "death",
    "call",
    "run",
    "test",
    "inside",
    "parentheses",
    "going",
    "take",
    "one",
    "parameter",
    "function",
    "going",
    "take",
    "list",
    "questions",
    "going",
    "say",
    "questions",
    "basically",
    "going",
    "list",
    "question",
    "objects",
    "want",
    "ask",
    "user",
    "want",
    "loop",
    "questions",
    "want",
    "loop",
    "question",
    "want",
    "ask",
    "user",
    "want",
    "get",
    "user",
    "answer",
    "want",
    "check",
    "see",
    "right",
    "need",
    "able",
    "keep",
    "track",
    "user",
    "test",
    "want",
    "create",
    "variable",
    "called",
    "score",
    "going",
    "set",
    "equal",
    "zero",
    "every",
    "time",
    "user",
    "answers",
    "question",
    "right",
    "increment",
    "score",
    "variable",
    "alright",
    "want",
    "like",
    "said",
    "loop",
    "questions",
    "questions",
    "array",
    "going",
    "create",
    "loop",
    "going",
    "say",
    "question",
    "questions",
    "words",
    "question",
    "object",
    "inside",
    "questions",
    "array",
    "want",
    "something",
    "basically",
    "first",
    "thing",
    "want",
    "ask",
    "user",
    "question",
    "want",
    "store",
    "response",
    "inside",
    "variable",
    "going",
    "say",
    "going",
    "make",
    "variable",
    "called",
    "answer",
    "going",
    "represent",
    "user",
    "answer",
    "question",
    "going",
    "set",
    "equal",
    "input",
    "need",
    "give",
    "prompt",
    "actually",
    "going",
    "give",
    "prompt",
    "question",
    "say",
    "question",
    "dot",
    "prompt",
    "answer",
    "user",
    "entered",
    "stored",
    "inside",
    "variable",
    "want",
    "check",
    "see",
    "got",
    "question",
    "right",
    "using",
    "statement",
    "let",
    "say",
    "answer",
    "refers",
    "student",
    "answer",
    "equal",
    "question",
    "dot",
    "answer",
    "checking",
    "see",
    "answer",
    "student",
    "gave",
    "equal",
    "answer",
    "current",
    "question",
    "asking",
    "true",
    "want",
    "increment",
    "score",
    "going",
    "say",
    "score",
    "plus",
    "equals",
    "one",
    "basically",
    "means",
    "adding",
    "one",
    "score",
    "last",
    "thing",
    "want",
    "inside",
    "function",
    "print",
    "result",
    "want",
    "print",
    "user",
    "going",
    "say",
    "print",
    "basically",
    "going",
    "print",
    "like",
    "hey",
    "got",
    "like",
    "two",
    "three",
    "questions",
    "got",
    "five",
    "six",
    "questions",
    "right",
    "got",
    "zero",
    "10",
    "questions",
    "right",
    "print",
    "say",
    "got",
    "want",
    "print",
    "many",
    "questions",
    "got",
    "right",
    "going",
    "score",
    "order",
    "print",
    "number",
    "alongside",
    "string",
    "like",
    "going",
    "say",
    "str",
    "type",
    "number",
    "say",
    "str",
    "score",
    "basically",
    "say",
    "got",
    "however",
    "many",
    "got",
    "right",
    "use",
    "little",
    "forward",
    "slash",
    "say",
    "many",
    "questions",
    "say",
    "going",
    "convert",
    "string",
    "going",
    "number",
    "say",
    "string",
    "want",
    "figure",
    "many",
    "questions",
    "questions",
    "array",
    "say",
    "len",
    "inside",
    "say",
    "questions",
    "kind",
    "like",
    "long",
    "statement",
    "print",
    "many",
    "questions",
    "say",
    "correct",
    "right",
    "print",
    "statement",
    "going",
    "printing",
    "many",
    "questions",
    "got",
    "right",
    "let",
    "see",
    "works",
    "last",
    "thing",
    "need",
    "call",
    "run",
    "test",
    "function",
    "say",
    "run",
    "test",
    "going",
    "pass",
    "questions",
    "array",
    "created",
    "created",
    "questions",
    "array",
    "question",
    "objects",
    "inside",
    "basically",
    "going",
    "pass",
    "run",
    "test",
    "function",
    "let",
    "run",
    "program",
    "see",
    "hopefully",
    "get",
    "errors",
    "lot",
    "code",
    "possible",
    "might",
    "okay",
    "says",
    "color",
    "apples",
    "huh",
    "tough",
    "one",
    "right",
    "let",
    "put",
    "get",
    "first",
    "question",
    "right",
    "color",
    "bananas",
    "let",
    "get",
    "second",
    "question",
    "wrong",
    "going",
    "say",
    "b",
    "bananas",
    "magenta",
    "get",
    "third",
    "question",
    "right",
    "says",
    "color",
    "strawberries",
    "put",
    "b",
    "right",
    "answer",
    "see",
    "program",
    "prints",
    "got",
    "two",
    "three",
    "correct",
    "ask",
    "us",
    "questions",
    "get",
    "input",
    "question",
    "also",
    "kept",
    "track",
    "score",
    "printed",
    "run",
    "test",
    "one",
    "time",
    "like",
    "get",
    "wrong",
    "time",
    "get",
    "one",
    "wrong",
    "get",
    "one",
    "wrong",
    "get",
    "one",
    "right",
    "says",
    "got",
    "one",
    "three",
    "correct",
    "able",
    "actually",
    "grade",
    "test",
    "cool",
    "program",
    "wrote",
    "wanted",
    "could",
    "add",
    "another",
    "question",
    "would",
    "automatically",
    "able",
    "ask",
    "matter",
    "many",
    "questions",
    "put",
    "able",
    "ask",
    "really",
    "point",
    "trying",
    "make",
    "whole",
    "video",
    "use",
    "something",
    "like",
    "class",
    "order",
    "model",
    "real",
    "world",
    "entity",
    "example",
    "created",
    "question",
    "class",
    "able",
    "store",
    "information",
    "question",
    "could",
    "ever",
    "need",
    "able",
    "sort",
    "like",
    "prompts",
    "answer",
    "created",
    "question",
    "data",
    "type",
    "able",
    "create",
    "bunch",
    "different",
    "questions",
    "pass",
    "run",
    "test",
    "method",
    "able",
    "grade",
    "test",
    "run",
    "test",
    "really",
    "easily",
    "kind",
    "point",
    "hopefully",
    "makes",
    "sense",
    "know",
    "lot",
    "code",
    "fully",
    "understand",
    "go",
    "back",
    "watch",
    "video",
    "know",
    "try",
    "couple",
    "times",
    "see",
    "create",
    "multiple",
    "choice",
    "test",
    "tutorial",
    "want",
    "talk",
    "guys",
    "class",
    "functions",
    "python",
    "class",
    "function",
    "essentially",
    "function",
    "use",
    "inside",
    "class",
    "either",
    "modify",
    "objects",
    "class",
    "give",
    "us",
    "specific",
    "information",
    "objects",
    "file",
    "inside",
    "created",
    "student",
    "class",
    "class",
    "student",
    "gave",
    "student",
    "couple",
    "different",
    "attributes",
    "gave",
    "name",
    "major",
    "gpa",
    "give",
    "student",
    "information",
    "create",
    "student",
    "object",
    "information",
    "file",
    "actually",
    "created",
    "two",
    "students",
    "student",
    "one",
    "oscar",
    "studying",
    "accounting",
    "gpa",
    "student",
    "two",
    "phyllis",
    "studying",
    "business",
    "actually",
    "use",
    "functions",
    "inside",
    "class",
    "files",
    "could",
    "actually",
    "define",
    "function",
    "inside",
    "student",
    "class",
    "student",
    "objects",
    "could",
    "access",
    "example",
    "come",
    "create",
    "function",
    "let",
    "say",
    "wanted",
    "create",
    "function",
    "told",
    "us",
    "whether",
    "particular",
    "student",
    "honors",
    "whether",
    "honor",
    "roll",
    "right",
    "basically",
    "like",
    "like",
    "really",
    "good",
    "student",
    "could",
    "define",
    "function",
    "called",
    "honor",
    "roll",
    "basically",
    "going",
    "going",
    "tell",
    "whether",
    "particular",
    "student",
    "honor",
    "roll",
    "let",
    "basically",
    "say",
    "rules",
    "honor",
    "roll",
    "gpa",
    "gpa",
    "means",
    "honor",
    "roll",
    "well",
    "could",
    "actually",
    "write",
    "code",
    "could",
    "say",
    "say",
    "self",
    "referring",
    "like",
    "actual",
    "student",
    "gpa",
    "notice",
    "pass",
    "parameter",
    "always",
    "first",
    "parameter",
    "could",
    "say",
    "greater",
    "equal",
    "return",
    "true",
    "student",
    "honor",
    "roll",
    "otherwise",
    "else",
    "return",
    "false",
    "gpa",
    "honor",
    "roll",
    "essentially",
    "little",
    "honor",
    "roll",
    "function",
    "see",
    "small",
    "function",
    "provides",
    "service",
    "objects",
    "class",
    "allows",
    "objects",
    "class",
    "figure",
    "whether",
    "current",
    "student",
    "honor",
    "roll",
    "file",
    "could",
    "print",
    "value",
    "could",
    "say",
    "print",
    "going",
    "see",
    "student",
    "one",
    "honor",
    "roll",
    "run",
    "see",
    "print",
    "false",
    "putting",
    "false",
    "student",
    "one",
    "gpa",
    "thing",
    "student",
    "two",
    "student",
    "two",
    "gpa",
    "return",
    "true",
    "exactly",
    "happened",
    "essentially",
    "class",
    "function",
    "little",
    "function",
    "used",
    "objects",
    "class",
    "would",
    "say",
    "pretty",
    "good",
    "example",
    "class",
    "function",
    "like",
    "giving",
    "us",
    "information",
    "class",
    "also",
    "like",
    "modifying",
    "information",
    "class",
    "basics",
    "using",
    "functions",
    "classes",
    "mean",
    "pretty",
    "simple",
    "tutorial",
    "really",
    "wanted",
    "introduce",
    "guys",
    "concept",
    "putting",
    "functions",
    "inside",
    "classes",
    "going",
    "really",
    "useful",
    "making",
    "class",
    "always",
    "want",
    "think",
    "functions",
    "put",
    "inside",
    "essentially",
    "help",
    "user",
    "either",
    "figure",
    "information",
    "object",
    "modify",
    "different",
    "values",
    "object",
    "tutorial",
    "want",
    "talk",
    "guys",
    "inheritance",
    "python",
    "inheritance",
    "basically",
    "define",
    "bunch",
    "attributes",
    "functions",
    "things",
    "inside",
    "class",
    "create",
    "another",
    "class",
    "inherit",
    "attributes",
    "basically",
    "one",
    "class",
    "functionality",
    "another",
    "class",
    "without",
    "physically",
    "write",
    "methods",
    "attributes",
    "confusing",
    "worry",
    "going",
    "show",
    "guys",
    "exactly",
    "video",
    "let",
    "show",
    "stuff",
    "set",
    "created",
    "class",
    "called",
    "chef",
    "class",
    "chef",
    "inside",
    "chef",
    "class",
    "three",
    "functions",
    "chef",
    "three",
    "things",
    "chef",
    "make",
    "chicken",
    "chef",
    "make",
    "salad",
    "chef",
    "make",
    "special",
    "dish",
    "whenever",
    "chef",
    "makes",
    "dish",
    "basically",
    "says",
    "chef",
    "makes",
    "chicken",
    "chef",
    "makes",
    "salad",
    "chef",
    "makes",
    "barbecue",
    "ribs",
    "special",
    "dish",
    "basically",
    "saying",
    "whatever",
    "chef",
    "come",
    "file",
    "notice",
    "importing",
    "chef",
    "basically",
    "allowed",
    "use",
    "chef",
    "class",
    "say",
    "chef",
    "equal",
    "chef",
    "creating",
    "new",
    "chef",
    "came",
    "said",
    "chef",
    "dot",
    "make",
    "chicken",
    "run",
    "program",
    "going",
    "say",
    "chef",
    "makes",
    "chicken",
    "said",
    "make",
    "special",
    "dish",
    "run",
    "program",
    "going",
    "say",
    "chef",
    "makes",
    "barbecue",
    "ribs",
    "chef",
    "special",
    "dish",
    "really",
    "awesome",
    "chef",
    "class",
    "works",
    "really",
    "well",
    "let",
    "say",
    "wanted",
    "create",
    "another",
    "class",
    "model",
    "another",
    "type",
    "chef",
    "chef",
    "class",
    "modeling",
    "like",
    "generic",
    "chef",
    "representing",
    "generic",
    "chef",
    "program",
    "let",
    "say",
    "wanted",
    "create",
    "class",
    "modeled",
    "different",
    "type",
    "chef",
    "example",
    "let",
    "say",
    "wanted",
    "create",
    "class",
    "modeled",
    "chinese",
    "chef",
    "instead",
    "normal",
    "chef",
    "chinese",
    "chef",
    "well",
    "actually",
    "created",
    "file",
    "called",
    "chinese",
    "chef",
    "dot",
    "python",
    "could",
    "actually",
    "use",
    "chinese",
    "chef",
    "dot",
    "python",
    "file",
    "create",
    "chinese",
    "chef",
    "class",
    "going",
    "say",
    "class",
    "going",
    "say",
    "chinese",
    "chef",
    "basically",
    "define",
    "everything",
    "chinese",
    "chef",
    "let",
    "say",
    "chinese",
    "chef",
    "everything",
    "generic",
    "chef",
    "chinese",
    "chef",
    "like",
    "special",
    "chef",
    "right",
    "specific",
    "type",
    "chef",
    "let",
    "say",
    "chinese",
    "chef",
    "everything",
    "normal",
    "chef",
    "chinese",
    "chef",
    "make",
    "chicken",
    "make",
    "salad",
    "also",
    "make",
    "special",
    "dish",
    "well",
    "wanted",
    "give",
    "chinese",
    "chef",
    "functionality",
    "could",
    "come",
    "could",
    "copy",
    "functions",
    "could",
    "paste",
    "chinese",
    "chef",
    "everything",
    "chef",
    "let",
    "say",
    "addition",
    "things",
    "chinese",
    "chef",
    "also",
    "make",
    "special",
    "dish",
    "called",
    "fried",
    "rice",
    "could",
    "say",
    "deaf",
    "could",
    "say",
    "make",
    "fried",
    "rice",
    "chinese",
    "chef",
    "extra",
    "function",
    "allows",
    "make",
    "fried",
    "rice",
    "say",
    "chef",
    "makes",
    "fried",
    "rice",
    "let",
    "also",
    "say",
    "chinese",
    "chef",
    "different",
    "special",
    "dish",
    "instead",
    "making",
    "barbecue",
    "ribs",
    "chinese",
    "chef",
    "makes",
    "orange",
    "chicken",
    "alright",
    "chinese",
    "chef",
    "class",
    "set",
    "notice",
    "everything",
    "normal",
    "chef",
    "let",
    "go",
    "back",
    "file",
    "want",
    "create",
    "chinese",
    "chef",
    "object",
    "instead",
    "importing",
    "chef",
    "going",
    "import",
    "chinese",
    "chef",
    "say",
    "chinese",
    "chef",
    "going",
    "import",
    "chinese",
    "chef",
    "let",
    "go",
    "ahead",
    "make",
    "chinese",
    "chef",
    "object",
    "going",
    "make",
    "one",
    "say",
    "chinese",
    "chef",
    "print",
    "special",
    "dish",
    "remember",
    "chinese",
    "chef",
    "everything",
    "normal",
    "chef",
    "could",
    "say",
    "chinese",
    "chef",
    "make",
    "special",
    "dish",
    "run",
    "program",
    "see",
    "regular",
    "chef",
    "making",
    "barbecue",
    "ribs",
    "chinese",
    "chef",
    "making",
    "orange",
    "chicken",
    "everything",
    "works",
    "chinese",
    "chef",
    "also",
    "extra",
    "method",
    "called",
    "make",
    "fried",
    "rice",
    "also",
    "make",
    "fried",
    "rice",
    "problem",
    "right",
    "go",
    "chinese",
    "chef",
    "dot",
    "pie",
    "wanted",
    "use",
    "functionality",
    "inside",
    "chef",
    "class",
    "actually",
    "copy",
    "physically",
    "paste",
    "functions",
    "file",
    "right",
    "kind",
    "drag",
    "mean",
    "especially",
    "like",
    "imagine",
    "chef",
    "like",
    "20",
    "30",
    "different",
    "functions",
    "well",
    "copy",
    "paste",
    "inside",
    "chinese",
    "chef",
    "use",
    "something",
    "called",
    "inheritance",
    "instead",
    "copy",
    "paste",
    "functions",
    "could",
    "inherit",
    "functions",
    "chef",
    "class",
    "order",
    "actually",
    "get",
    "rid",
    "come",
    "right",
    "next",
    "saying",
    "class",
    "chinese",
    "chef",
    "inside",
    "parentheses",
    "say",
    "name",
    "class",
    "want",
    "inherit",
    "say",
    "chef",
    "also",
    "going",
    "import",
    "going",
    "come",
    "say",
    "chef",
    "import",
    "chef",
    "basically",
    "saying",
    "inside",
    "chinese",
    "chef",
    "want",
    "able",
    "use",
    "functions",
    "contained",
    "inside",
    "chef",
    "class",
    "say",
    "one",
    "time",
    "inside",
    "chinese",
    "chef",
    "class",
    "want",
    "able",
    "use",
    "functions",
    "inside",
    "chef",
    "class",
    "using",
    "inheritance",
    "actually",
    "able",
    "come",
    "file",
    "still",
    "able",
    "execute",
    "example",
    "like",
    "make",
    "chicken",
    "function",
    "even",
    "though",
    "specify",
    "make",
    "chicken",
    "function",
    "write",
    "still",
    "run",
    "program",
    "chinese",
    "chef",
    "still",
    "able",
    "make",
    "chicken",
    "run",
    "program",
    "see",
    "says",
    "chef",
    "makes",
    "chicken",
    "inherited",
    "make",
    "chicken",
    "method",
    "chef",
    "class",
    "one",
    "thing",
    "got",
    "messed",
    "come",
    "say",
    "make",
    "special",
    "dish",
    "remember",
    "chinese",
    "chef",
    "special",
    "dish",
    "supposed",
    "orange",
    "chicken",
    "chinese",
    "chef",
    "going",
    "making",
    "barbecue",
    "ribs",
    "inherited",
    "make",
    "special",
    "dish",
    "function",
    "chef",
    "class",
    "actually",
    "could",
    "come",
    "could",
    "override",
    "make",
    "special",
    "dish",
    "class",
    "could",
    "say",
    "death",
    "make",
    "special",
    "dish",
    "override",
    "could",
    "say",
    "chef",
    "makes",
    "orange",
    "chicken",
    "go",
    "run",
    "make",
    "special",
    "dish",
    "function",
    "chef",
    "going",
    "back",
    "making",
    "orange",
    "chicken",
    "chinese",
    "chef",
    "make",
    "special",
    "dish",
    "basically",
    "inheritance",
    "allows",
    "inherit",
    "functionality",
    "existing",
    "class",
    "new",
    "class",
    "actually",
    "inherit",
    "without",
    "write",
    "write",
    "make",
    "chicken",
    "make",
    "salad",
    "inside",
    "chinese",
    "class",
    "chinese",
    "chef",
    "still",
    "make",
    "chicken",
    "salad",
    "inherited",
    "functionality",
    "chef",
    "class",
    "tutorial",
    "want",
    "talk",
    "guys",
    "python",
    "interpreter",
    "python",
    "interpreter",
    "basically",
    "little",
    "environment",
    "use",
    "execute",
    "python",
    "commands",
    "kind",
    "like",
    "little",
    "sandbox",
    "environment",
    "test",
    "try",
    "different",
    "python",
    "commands",
    "different",
    "python",
    "functions",
    "safe",
    "neutral",
    "environment",
    "kind",
    "like",
    "quick",
    "dirty",
    "way",
    "write",
    "python",
    "try",
    "different",
    "things",
    "way",
    "use",
    "python",
    "interpreter",
    "opening",
    "command",
    "prompt",
    "windows",
    "program",
    "called",
    "command",
    "prompt",
    "mac",
    "program",
    "called",
    "terminal",
    "basically",
    "need",
    "open",
    "program",
    "order",
    "use",
    "python",
    "interpreter",
    "mac",
    "windows",
    "essentially",
    "exactly",
    "inside",
    "command",
    "prompt",
    "mac",
    "going",
    "search",
    "terminal",
    "windows",
    "search",
    "like",
    "cmd",
    "command",
    "prompt",
    "pop",
    "terminal",
    "basically",
    "environment",
    "computer",
    "interact",
    "computer",
    "different",
    "things",
    "without",
    "graphical",
    "user",
    "interface",
    "normally",
    "interact",
    "computer",
    "using",
    "things",
    "like",
    "buttons",
    "windows",
    "move",
    "stuff",
    "around",
    "basically",
    "like",
    "interact",
    "computer",
    "graphics",
    "terminal",
    "command",
    "prompt",
    "place",
    "interact",
    "computer",
    "using",
    "text",
    "commands",
    "know",
    "going",
    "get",
    "much",
    "terminal",
    "command",
    "prompt",
    "essentially",
    "inside",
    "use",
    "python",
    "interpreter",
    "python",
    "interpreter",
    "basically",
    "little",
    "program",
    "like",
    "said",
    "write",
    "know",
    "sort",
    "python",
    "generally",
    "go",
    "terminal",
    "command",
    "prompt",
    "type",
    "python",
    "since",
    "using",
    "python",
    "3",
    "going",
    "type",
    "python",
    "3",
    "also",
    "type",
    "normal",
    "python",
    "pretty",
    "sure",
    "gives",
    "python",
    "quick",
    "disclaimer",
    "windows",
    "may",
    "run",
    "problem",
    "ca",
    "use",
    "python",
    "3",
    "command",
    "possible",
    "running",
    "problem",
    "python",
    "like",
    "python",
    "3",
    "added",
    "windows",
    "path",
    "variable",
    "basically",
    "means",
    "computer",
    "recognize",
    "command",
    "python",
    "case",
    "go",
    "google",
    "add",
    "python",
    "3",
    "windows",
    "path",
    "variable",
    "really",
    "easy",
    "going",
    "get",
    "video",
    "kind",
    "outside",
    "scope",
    "running",
    "problem",
    "probably",
    "windows",
    "path",
    "variable",
    "google",
    "around",
    "able",
    "find",
    "answer",
    "going",
    "type",
    "python",
    "3",
    "click",
    "enter",
    "going",
    "open",
    "cool",
    "little",
    "thing",
    "see",
    "basically",
    "like",
    "version",
    "python",
    "going",
    "enter",
    "like",
    "new",
    "lines",
    "python",
    "interpreter",
    "write",
    "python",
    "code",
    "going",
    "work",
    "example",
    "could",
    "write",
    "like",
    "print",
    "inside",
    "could",
    "print",
    "like",
    "hello",
    "world",
    "click",
    "enter",
    "see",
    "prints",
    "hello",
    "world",
    "could",
    "create",
    "variable",
    "example",
    "could",
    "say",
    "like",
    "num",
    "one",
    "equal",
    "ten",
    "could",
    "say",
    "num",
    "two",
    "equal",
    "ninety",
    "could",
    "print",
    "num",
    "one",
    "plus",
    "num",
    "two",
    "going",
    "able",
    "could",
    "also",
    "use",
    "like",
    "function",
    "could",
    "define",
    "function",
    "could",
    "make",
    "function",
    "called",
    "say",
    "hi",
    "take",
    "name",
    "parameter",
    "see",
    "saw",
    "wanted",
    "create",
    "function",
    "put",
    "three",
    "little",
    "dots",
    "indent",
    "write",
    "code",
    "function",
    "say",
    "like",
    "print",
    "hello",
    "plus",
    "name",
    "function",
    "called",
    "say",
    "hi",
    "break",
    "entering",
    "call",
    "function",
    "could",
    "say",
    "say",
    "hi",
    "say",
    "hi",
    "hi",
    "mike",
    "going",
    "say",
    "hello",
    "mike",
    "use",
    "function",
    "could",
    "use",
    "something",
    "like",
    "statement",
    "know",
    "could",
    "say",
    "could",
    "use",
    "something",
    "like",
    "loop",
    "could",
    "use",
    "loops",
    "mean",
    "basically",
    "use",
    "basic",
    "like",
    "python",
    "commands",
    "know",
    "inside",
    "python",
    "interpreter",
    "like",
    "said",
    "essentially",
    "environment",
    "test",
    "python",
    "code",
    "place",
    "want",
    "write",
    "like",
    "serious",
    "python",
    "scripts",
    "like",
    "designing",
    "writing",
    "python",
    "program",
    "would",
    "recommend",
    "inside",
    "interpreter",
    "intuitive",
    "environment",
    "pretty",
    "much",
    "set",
    "quick",
    "dirty",
    "tests",
    "like",
    "need",
    "test",
    "something",
    "great",
    "perfect",
    "place",
    "set",
    "file",
    "use",
    "like",
    "id",
    "execute",
    "file",
    "go",
    "quick",
    "dirty",
    "get",
    "done",
    "writing",
    "like",
    "actual",
    "program",
    "definitely",
    "definitely",
    "definitely",
    "want",
    "use",
    "text",
    "editor",
    "text",
    "editor",
    "going",
    "way",
    "organized",
    "everything",
    "going",
    "lot",
    "cleaner",
    "going",
    "get",
    "confused",
    "like",
    "stuff",
    "basics",
    "python",
    "interpreter",
    "know",
    "course",
    "really",
    "using",
    "think",
    "lot",
    "easier",
    "teach",
    "inside",
    "file",
    "inside",
    "know",
    "count",
    "guy",
    "python",
    "interpreter",
    "awesome",
    "lot",
    "people",
    "use",
    "great",
    "need",
    "test",
    "know",
    "little",
    "bits",
    "code",
    "without",
    "set",
    "huge",
    "environment",
    "python",
    "interpreter",
    "definitely",
    "awesome",
    "would",
    "play",
    "around",
    "know",
    "fun",
    "take",
    "advantage",
    "hey",
    "thanks",
    "watching",
    "enjoyed",
    "video",
    "please",
    "leave",
    "like",
    "subscribe",
    "draft",
    "academy",
    "first",
    "know",
    "release",
    "new",
    "content",
    "also",
    "always",
    "looking",
    "improve",
    "constructive",
    "criticism",
    "questions",
    "anything",
    "leave",
    "comment",
    "finally",
    "enjoying",
    "draft",
    "academy",
    "want",
    "help",
    "us",
    "grow",
    "head",
    "draft",
    "forward",
    "slash",
    "contribute",
    "invest",
    "future"
  ],
  "keywords": [
    "course",
    "going",
    "everything",
    "need",
    "know",
    "get",
    "programming",
    "python",
    "one",
    "trying",
    "write",
    "awesome",
    "bunch",
    "different",
    "things",
    "every",
    "use",
    "lot",
    "like",
    "little",
    "wrong",
    "program",
    "basically",
    "type",
    "want",
    "simple",
    "whole",
    "learn",
    "zero",
    "start",
    "writing",
    "first",
    "guys",
    "way",
    "many",
    "question",
    "think",
    "might",
    "talk",
    "look",
    "programs",
    "cool",
    "ca",
    "tutorial",
    "show",
    "install",
    "onto",
    "computer",
    "also",
    "text",
    "order",
    "actually",
    "go",
    "forward",
    "two",
    "say",
    "version",
    "right",
    "thing",
    "major",
    "three",
    "see",
    "would",
    "basic",
    "means",
    "getting",
    "either",
    "code",
    "five",
    "10",
    "using",
    "said",
    "sort",
    "able",
    "well",
    "let",
    "tell",
    "click",
    "ahead",
    "folder",
    "file",
    "close",
    "good",
    "next",
    "really",
    "could",
    "special",
    "called",
    "run",
    "execute",
    "us",
    "something",
    "kind",
    "point",
    "stuff",
    "come",
    "alright",
    "open",
    "create",
    "though",
    "change",
    "give",
    "bit",
    "new",
    "name",
    "draft",
    "says",
    "notice",
    "couple",
    "sure",
    "make",
    "otherwise",
    "created",
    "call",
    "okay",
    "hello",
    "print",
    "screen",
    "closed",
    "parentheses",
    "inside",
    "quotation",
    "error",
    "line",
    "end",
    "got",
    "printed",
    "whatever",
    "put",
    "statement",
    "long",
    "work",
    "pretty",
    "basics",
    "set",
    "statements",
    "copy",
    "another",
    "play",
    "information",
    "hey",
    "situations",
    "case",
    "printing",
    "wanted",
    "specify",
    "essentially",
    "lines",
    "example",
    "take",
    "instead",
    "function",
    "define",
    "variables",
    "data",
    "times",
    "working",
    "types",
    "values",
    "variable",
    "store",
    "certain",
    "makes",
    "useful",
    "story",
    "character",
    "age",
    "addition",
    "value",
    "four",
    "storing",
    "underscore",
    "generally",
    "creating",
    "words",
    "equal",
    "saying",
    "plus",
    "stored",
    "paste",
    "modify",
    "second",
    "strings",
    "string",
    "numbers",
    "number",
    "boolean",
    "true",
    "false",
    "whether",
    "male",
    "used",
    "time",
    "user",
    "academy",
    "color",
    "normal",
    "phrase",
    "access",
    "add",
    "functions",
    "specific",
    "dot",
    "convert",
    "check",
    "back",
    "figure",
    "grab",
    "square",
    "index",
    "g",
    "position",
    "parameter",
    "word",
    "return",
    "actual",
    "try",
    "answer",
    "operator",
    "read",
    "num",
    "allow",
    "math",
    "pass",
    "power",
    "import",
    "external",
    "files",
    "module",
    "lists",
    "input",
    "prompt",
    "enter",
    "hi",
    "calculator",
    "result",
    "game",
    "colon",
    "list",
    "keep",
    "friends",
    "jim",
    "array",
    "multiple",
    "object",
    "elements",
    "element",
    "third",
    "range",
    "count",
    "attributes",
    "tuples",
    "tuple",
    "key",
    "else",
    "anything",
    "passed",
    "cube",
    "condition",
    "tall",
    "invalid",
    "dictionary",
    "loops",
    "loop",
    "looping",
    "iteration",
    "secret",
    "guess",
    "guesses",
    "letter",
    "accept",
    "base",
    "grid",
    "translation",
    "test",
    "comments",
    "comment",
    "command",
    "employees",
    "employee",
    "modules",
    "roll",
    "docs",
    "pip",
    "objects",
    "class",
    "student",
    "self",
    "gpa",
    "questions",
    "chef",
    "chicken",
    "dish",
    "chinese"
  ]
}