{
  "text": "hey everybody today I decided I'm going\nto teach you everything you need to know\nto get started working with JavaScript\nthroughout this course we'll be working\non a few projects you could add to your\nportfolio which include but are not\nlimited to a digital clock a\nstopwatch a functioning calculator a\ngame of rock paper scissors an image\nslider and our final project will be a\nweather app that fetches data from an\nAPI if that sounds good to you I\nencourage you to sit back relax and\nenjoy the show hey if you don't mind\nplease give this video a like post a\nrandom comment down below and subscribe\nif you'd like to be a fellow bro it\ndoesn't cost you anything thank\nyou JavaScript is a programming language\nused to create Dynamic and interactive\nweb pages JavaScript runs on a web\nbrowser such as Google Chrome Safari\nEdge whatever you use to browse the\ninternet basically by using JavaScript\nwe can respond to user actions and\ntransform user input whenever somebody\ninteracts with our site in this example\nI have a calculator written with HTML\nit's not very pretty and it doesn't\nfunction we have the framework that we\nneed at least though by applying CSS we\ncan add color and style to this\ncalculator but unfortunately it still\ndoesn't function by including JavaScript\ncode this calculator can perform actions\nand is well useful so in this video I'm\ngoing to show you everything you need to\nknow to get started working with\nJavaScript I would recommend knowing\nHTML and CSS before starting the series\nI do have a full free course on my\nchannel if you're interested in learning\nthose or if you need a refresher if you\ndon't know either you could probably\nstill get by watching this video I'll\nwalk you through both as we go along\nthroughout the series now before we do\nbegin you will need a text editor one\ntext editor that I recommend is VSS code\nwhich you can download from code. visual\nstudio.com for a step-by-step\ninstruction of how to install it feel\nfree to check out the HTML and CSS\nseries with that out of the way let's\nDive Right In\nso what we'll need to do is create a new\nproject folder in vs code you can go to\nthe left toolbar go to explore we will\nopen a folder I'll place this folder on\nmy desktop just for convenience I will\ncreate a new folder which I will name\nwebsite to contain my website files\nlet's select this\nfolder and we are now within our website\nfolder we'll need three files an HTML\nfile CSS file and JavaScript file we'll\nbegin with the HTML file we can close\nout of this welcome window I will name\nmy HTML file\nindex.html in a website the index.html\nfile is typically used as the\nhomepage we have our HTML file next\ncomes the CSS file mine will be named\nstyle.css the CSS stylesheet is in\ncharge of the overall appearance of the\nweb page this can include fonts colors\npositioning stuff like that then lastly\nwe have the JavaScript file which I will\nname\nindex.js the Javascript file is in\ncharge of the interactivity of a web\npage so alt together we have structure\nstyle and actions so rearrange these\ntabs however you like I switch back and\nforth between the JavaScript and HTML\nfile quite often so I tend to put them\nright next to each other but do whatever\nis most convenient for you so to\ngenerate the necessary text to create a\nweb page in your HTML file in vs code\nyou can type exclamation point then hit\ntab so here you can change the title of\nyour web page if you want I'll change my\ntitle to be\nmy\nwebsite and that's all we'll need for\nnow now we'll need to link the\nstylesheet to the HTML file now we are\ngoing to create a link tag we can link\nan external stylesheet to our HTML file\nwithin the link tag there is a\nrelationship attribute shortened to re\nthe relationship ship will be stylesheet\nwe are linking a stylesheet then the\nnext attribute we need is the hre\nattribute where is the CSS file located\nwell it's right next to each other we\nonly need the file name so we are\nlinking the CSS Styles sheet now our CSS\nstylesheet is linked to our HTML file\nnow we need to link the Javascript file\nto our HTML file we can do that by\nadding a pair of script\ntags we will set The Source attribute to\nbe the name of the JavaScript file\nindex.js all right everything should now\nbe linked together the last thing we'll\nneed is the live server extension in VSS\ncode go to\nextensions we will search for live\nserver it should be this one we are\ngoing to install this\nextension so whenever we save any\nchanges to our files the web page should\nrefresh\nautomatically so now let's test this you\ncan go to file save or use the\nshortcut I'm just going to save\neverything I'm going to rightclick on\nour HTML file then open with live\nserver and here is our web page but it\ncurrently doesn't have anything uh let\nme just minimize this I will readjust\nthis window throughout this course I'll\nhave VSS code alongside a web browser\nwith our HTML file we can add elements\nsuch as an H1 element these are\ntypically used as headers I'm going to\nsay hello then save and that should\nupdate automatically or you can press\nthe refresh button but since we have\nlive server installed we shouldn't need\nto then paragraphs are typically used\nfor a paragraph a text in vs code to\ngenerate a random paragraph of text you\ncan type lauram then hit tab now we\nshould have a random paragraph I believe\nit's Latin at least it looks like it to\nchange the style of our web page we can\ngo to our stylesheet to change the style\nof the body of our document we will\nselect body I'll change the font family\nto something else font family how about\nverdana there we now have a different\nfont to increase the font size you can\nset the font size property to be either\nin pixels or em personally I'm a fan of\nusing em 2 em means\n200% where 3 em is 300% but that's a\nlittle too big let's stick with 2 em all\nright and that is everything we need to\nget started oh important note you do\nwant your script element at the bottom\nof the body of your document just in\ncase there's an error with your\nJavascript file you do want all of the\nHTML elements to at least render first\nbefore running any JavaScript code all\nright so let's delete our H1 elements\nand our paragraph element we no longer\nneed them for\nnow be sure to save everything we'll\nwork with some basic output I'm going to\nzoom in a little bit to Output some text\nyou can type\nconsole.log add a set of parenthesis\nthen a semicolon at the end within the\nset of parentheses to Output some text\nyou can either use double quotes single\nquotes or back ticks personally I'm a\nfan of using these back ticks this is\nknown as a template literal they're\nhelpful with inserting variables which\nwe will discuss in the next lesson using\neither double quotes or single quotes or\nback ticks we can output some text let's\nsay the word hello be sure to save I'm\nholding contrl s on Windows there's no\napparent output we have to go to Dev\ntools so right click on your web page go\nto\ninspect then console and here's our\nbasic output hello for an additional\nline of output we can console.log again\nlet's print print a different message I\nlike\npizza let's save and here's my second\nline of text I like\npizza and I'm just going to move these\nwindows a little bit that's better\nthroughout much of the series we will be\nworking with this window again you have\nto right click on your web page go to\ninspect then go to\nconsole now within our web page to\ncreate an alert box you can type window.\nalert at a set of parentheses semicolon\nto the end we'll use a template literal\nwe'll need a set of back\nticks this is an alert this should\ncreate a pop-up\nwindow this is an\nalert let's create\nanother let's copy what we have paste\nit I like\npizza let's\nsave this is an alert okay I like pizza\nnot sure why we need to tell a user that\nbut we can now we have comments to\ncreate a comment you type two forward\nslashes comments aren't used for output\nthey're used as notes for yourself or\nfor other\ndevelopers this is a comment so when I\nrun this program then if we were to go\nto our Dev tools we don't see this\ncomment at all they're not displayed as\noutput they're either used for notes for\nyourself or for other people for a\nmulti-line comment you can type a slash\nasterisk anything that comes after will\nbe a\ncomment this is a comment you can see\nthat the text is green that means it's a\ncomment again we should not be able to\nsee these comments they're hidden I'm\ngoing to turn this JavaScript code into\ncomments just for the next part because\nthese window alerts are kind of annoying\nto be\nhonest all right now what we're going to\ndo is populate our web page page with\nsome text within our HTML file I will\ncreate an H1\nelement H1s are usually used for headers\nor titles there will be no text content\nyet but I will set an\nID I will give this H1 element a unique\nID of my H1 feel free to pick a\ndifferent ID something you'll\nremember I will also create a paragraph\nelement I will set the ID to equal my P\nmeaning my paragraph so remember there\nis no text content currently using\nJavaScript we will add some text content\nfirst we need to select these elements\nby their ID my H1 and my\np uh let's do that here we will type\ndocument meaning the document of our web\npage do get element by ID do pay\nattention to the\ncapitalization what id are we getting\nlet's start with my H1 so copy the ID\npaste it within the set of parentheses\nbe sure you're including quotes as well\nfollow this with DOT text content we\nwill set this equal to how about the\nword\nhello let me zoom out a little again\nthis can be back ticks single quotes or\ndouble quotes all right let's type the\nword hello now when I save and and\nrefresh the page that H1 element should\ndisplay the word hello now this time\nlet's get our paragraph element with the\nID of my P my\nparagraph document. getet element by ID\nthe ID that we're getting is my P will\nchange the text content equal to uh what\ncan we say I like\npizza\nthere we go hello I like pizza all right\neverybody so that's the basics of\nJavaScript when working with basic\noutput you can use console.log which we\nwill be using a lot to create an alert\nyou can use window. alert to change the\ntext content of an HTML element you\nfirst have to select that element then\nchange the text content then set it\nequal to some text of you're choosing\nall right everybody so that is the very\nbasics of JavaScript and in the next\ntopic we will cover\nvariables all right well it's time that\nwe discuss variables do you remember\nfrom middle school or elementary school\nwhen you learned algebra you had to\nsolve for what the value of x was X was\nsome representation of a value well\nthat's kind of what a variable is in\nprogramming it's a container that stores\na value the variable behaves as if it\nwere the value it contains there's two\nsteps to creating a variable declaration\nand assignment to use a variable we have\nto first declare it it we'll use the let\nkeyword then a unique variable name like\nX then a semicolon so what we've done is\ndeclaration each variable name needs to\nbe unique if I were to declare another\nvariable named X we would run into an\nerror a syntax error identifier X has\nalready been declared so your variable\nnames need to be unique I can declare\ntwo variables X and Y and they both have\ndifferent names that is fine but they\ncan't have the same name the next step\nto create a variable is to assign it a\nvalue once you declare your variable you\ndon't need to declare it again so I'm\ngoing to assign X to equal some number\nlike 100 we can use this variable X and\nit will behave as if it was the value\n100 let me demonstrate so if I was to\nconsole.log\nX well then it's going to display 100 if\nI were to change this value to 123 well\nX is now\n123 you you can do both declaration and\nassignment together that would look\nsomething like\nthis let x equal\n123 this is both declaration and\nassignment if you're creating a program\nand you know what your value should be\nyou can assign them a value right away\nsometimes you may want to accept some\nuser input so then you might do\nassignment later in two steps it's\nreally up to how you write your program\nthere's a few different data types in\nJavaScript the first is number like 123\nlet's create a descriptive name for our\nvariable like age we will store a user's\nage according to my analytics in YouTube\nthe average age of my viewers is 25 so\nlet's say that my age is\n25 then if I was to\nconsole.log my age variable it would\nbehave as if it were the number 25 let's\ncreate a few more variables another\nexample of a number could be price let\nprice equal 10 .99 maybe it's\n$110.99 or some other unit of currency\nof you're choosing then we will\nconsole.log price\n$10.99 what about a GPA a grade point\naverage my grade point average is a\nsolid 2.1 it's not great but C's get\ndegrees console.log GPA\n2.1 using a template literal we can\ninsert a variable using a placeholder\nwithin console.log I will use back ticks\nlet's write a sentence you are then to\ninsert a variable use dollar sign curly\nbraces place your variable name within\nthe curly braces then we can continue\nour sentence you are variable age years\nold let's create another sentence using\nconsole.log the price is dollar sign\ncurly\nbraces\nprice the price is\n$10.99 I'm going to insert a dollar sign\nbefore our\nprice and that looks better feel free to\nchoose some other unit of currency okay\nlet's add a sentence to display our GPA\nconsole.log your GPA is colon space\nwe're inserting a variable we need\ndollar sign curly braces we're\ndisplaying our\nGPA your GPA is 2.1 now if you need to\ndisplay the data type of a variable you\ncan use\nconsole.log then preedee the variable\nwith the type of keyword what is the\ntype of age age is a number\ntype price is also a number type same\nthing with GPA they're all numbers let's\ngo over a different data\ntype let's go over strings a string is a\nseries of characters let's say we have a\nuser's first\nname to create a string you can either\nuse double quotes or single quotes\npersonally I like double quotes then you\ncan type in some characters like a first\nname let's say my first name is bro feel\nfree to pick your own first name I will\ndisplay the type\nof my first name variable and it says\nit's a string a series of\ncharacters then I will display my name\nconsole.log first\nname and it is bro or whatever your\nfirst name is whatever you put here\nlet's include our variable within a\ntemplate\nliteral your name is add a placeholder\nfirst name your name is bro what are\nsome other examples of string maybe\nsomebody's favorite food\nfavorite food my favorite food is\npizza type in your favorite\nfood\nconsole.log you like at our\nplaceholder favorite\nfood you like pizza maybe if I like\nsomething else like sushi well you like\nsushi okay another example of a string\ncould be an email let email equals then\ntype in your\nemail I'm just going to make one\nup bro\ngmail.com\nconsole.log your email\nis email\nyour email is bro gmail.com let me make\nthe G lowercase now an important thing\nwith strings is that strings can contain\nnumbers after bro I'll add 1 two 3 so a\nstring is a series of characters they\ncan include numbers but we can't use\nthese numbers for any sort of math\nstrings have a different behavior from\nnumbers numbers we can use in arithmetic\nExpressions strings not so much all\nright let's turn these lines into\ncomment\nthen I will discuss\nbooleans okay booleans are either true\nor false typically they're used as Flags\nin your\nprogram let online equal true booleans\nare either true or false is somebody\nonline or are they offline this is\neither true or\nfalse I will display the type of my\nvariable online console.log type of\nonline so online is a Boolean\nvariable let's display our variable\nwithin a template\nliteral type in whatever your first name\nis bro is\nonline then I will insert a\nplaceholder add my Boolean variable of\nonline bro is online that is true if I\nwere to change this to false bro is\nonline is false booleans are typically\nused as a sort of flag so another\nexample could be\nfor sale is something for sale or not\nlet's say that we are\nselling I don't know\ncars is this car for sale I could set\nthis to be true or\nfalse let's\nconsole.log is this car for\nsale then I will add my Boolean variable\nfor\nsale is this car for sale that is true\nanother example let's say that somebody\nis enrolled in school like in college\ncourses we could say let is student is\nsomebody a student are they enrolled\nthis can be true or\nfalse\nconsole.log\nenrolled colon\nspace is\nstudent is the student enrolled in\nclasses that is true\nso those are booleans they're either\ntrue or false typically we don't use\nthem as direct output like you see here\nwe usually use them with if statements\nto check something like if somebody's\nonline do this if not do something else\nis a car for sale if that's true then\ndisplay the car if it's not then hide it\nwe'll have more practice with booleans\nwhen we reach if statements all right\nnow what we're going to do is we will\nclose out a Dev tools we'll display some\nvariables within our web page so let's\ndelete everything we\nhave I'll create three variables let\nfull name equals type in your full\nname feel free to add a space between\nyour first name and last name let age\ntype in your\nage and\nlet\nstudent equals if you're a student type\ntrue if you're not in school type false\nI am not in school anymore so I will\ntype false we will go to our HTML\nfile then add some HTML\nelements I will add three paragraph\nelements so that's one 2 3 I will give\nmy first paragraph an ID of\nP1 then let's do the same with the other\ntwo paragraphs let's rename the second\nas P2 and the third as\nP3 so to change the text content of an\nHTML element we're going to type\ndocument meaning the document of our web\npage then we will get our element by its\nID get element by ID then within a set\nof parentheses within a set of quotes we\nwill select the ID that we need let's\nstart with P1 then add do text content\nto change the text content\nthen we will set this equal to a\nvariable or a template literal let's\nbegin with a variable so full\nname our P1 element should display your\nfull name let's do this with\nP2 I'm going to zoom out a little\nbit P2 textcontent equals age it says\nthat I'm\n25 and then P3 let's display student or\nbetter yet is student let's change that\nis\nstudent false I am not a student but you\nmight be though that might be true then\nlet's display our variables along with\nsome text using a template\nliteral let's copy our full\nname your name is add a placeholder\nplace our variable name your name is Bro\nCode or whatever your name is\nlet's cut our age\nvariable you\nare variable age years old you are 25\nyears\nold and then let's cut is\nstudent add a template\nliteral let's say enrolled are you\nenrolled in\nschool add a placeholder paste our\nvariable enrolled that is false I am not\nin school anymore more all right\neverybody so those are variables it's a\ncontainer that stores a value the\nvariable behaves as if it were the value\nit contains there's a couple different\nbasic data types you have strings which\nis a series of text numbers and booleans\nthere's more advanced data types but\nwe'll cover that later and well those\nare variables in\nJavaScript yeah what's going on\neverybody so today I need to explain\narithmetic operators because well\nprogramming can sometimes involve a lot\nof M operand are values variables Etc in\nthis equation 11 x and 5 are all operand\noperators they can include but are not\nlimited to addition subtraction\nmultiplication and division in this\nequation the addition sign would be the\noperator so there's a few things you\nshould know regarding arithmetic\noperators in JavaScript so let's begin\nlet's pretend that in the scenario we\nare a teacher we have a group of\nstudents let students equals what's a\ngood class size maybe 30 students then I\nwill\nconsole.log my students\nvariable and it should be 30 let's say\nthat a new student joins the class and I\nneed to change this variable to increase\nstudents by one I can say students\nequals this will reassign my variable\nequals the current value of students + 1\nnow we have 31 students now for\nsubtraction that is the minus sign to\nsubtract a student we can reassign our\nvariable students equals students minus\none now we have\n29 then we have multiplication which is\nrepresented by an\nasterisk we will double the number of\nstudents we have students equals\nstudents as Risk 2 to multiply by two we\nhave 6\nstudents division is a forward slash we\nwill split our class of students into\ntwo students divided two we now have\n15 all right then we have\nexponents exponents is represented by\ndouble\nasterisks what is students to the power\nof\ntwo 900 students that is a very large\nclass maybe it's a lecture or something\nin a college so students to the power of\nthree that would be students to the\npower of three would be\n27,000 double asterisks is the exponent\noperator here's another helpful one it\nis the modulus operator it gives you the\nremainder of any division so let's say\nwe are going to divide our class into\ntwo so modulus which is represented as a\npercent sign two\nwell 30 divides by two evenly so the\nremainder is zero if we had a class of\n31 students well there's one remainder\none\nstudent students modulus 3 would divide\nmy class of 31 students into three we\nwould still have one student remaining\nsince we're reassigning students we\nwould be replacing 31 students with the\nvalue of one if you're using the modulus\noperator I would recommend creating a\nseparate variable entit ly let extra\nstudents equal our students modulus 3 we\nhave one extra student just one okay\nthat is the modulus\noperator there is a shortcut for writing\nthese Expressions because it can be kind\nof tedious to write the variable name\ntwice so let's set students back to 30 I\nwill console.log students we'll use what\nis known as augmented assignment\noperators to increase students by a\nnumber if we're reassigning it we can\nsay students plus equals 1 or some other\nnumber students is now 31 if I were to\nchange one to be2 it's now 32 and\n33 let's do the same thing with\nsubtraction students minus equals\n1 we now have 29\nstudents multiplication\nstudents times equals 2 that would give\nus 60\nstudents students divided by equals 2 we\nhave 15\nstudents all right then\nexponents students to the power of\nequals 2 900\nstudents then\nmodulus students modulus equals\n2 we have no remaining students 30\ndivides by 2 evenly so another place\nwhere modulus could be helpful is if\nyou're determining if a number is even\nor odd 30 is an even number divided by\ntwo the remainder is zero 31 is odd the\nremainder is one there's also the\nincrement and decrement operator there's\na couple different ways to add one to a\nvariable but you should be aware of all\nof them to increase a variable by only\none you can take the name of the\nvariable then add Plus+ Plus+ is the\nincrement operator 30 incremented by 1\nis 31 then there is the decrement\noperator which is minus\nminus 30 decremented by 1 is 29 all\nright then lastly we're going to cover\noperator\nprecedence this is pretty important\ngiven a very complex equation such as\nthis example in which order do you solve\neach part of this equation so with\noperator precedence beginning with the\nleft working our way to the right you\nwould solve anything with parentheses\nthen exponents multiplication and\ndivision and modulo otherwise known as\nmodulus then lastly addition and\nsubtraction let's go through the step by\nstep let's see what the result variable\nis I will\nconsole.log result so the result is\n23 so if we were to walk through this\nstep by step let's solve anything with\nparentheses es starting from the left\nand then working our way to the right\nthere are no parentheses we can skip\nthis step next is exponents there is one\nexponent here so we would solve 4 to ^\nof 2 which is\n16 then we will solve multiplication and\ndivision and modulus that's addition we\nskip that we have multiplication 2 * 3\nis\n6 there is no more multiplication\ndivision or\nmodulus then lastly addition and\nsubtraction 1 + 6 is 7 7 + 16 is our\nresult of 23 all right I'll give you a\nfew more\nexercises how about this\nequation the result is going to be six\nso there's no parenthesis no\nexponents we do have a modulus operator\nhere so we solve that first 12 modulus 5\ngives us a remainder of\ntwo we have some division we would solve\nthat next 8 divid 2 is four then\naddition and subtraction the result is\nsix all right here's a challenge\nround the result is going to be\n0468 we solve anything with parenthesis\nfirst 2 + 5 that is\n7 then exponents 2 the^ of 7 I might\nneed a calculator 2 * 2 3 4 5 6 7 that's\n128\nthen we have 6 / 128 then we have 6 /\n128 which is 046\n875 and that is our result all right\neverybody so that is everything you need\nto know about arithmetic operators you\nhave operand which are values and\nvariables and arithmetic expression and\noperators there's also augmented\nassignment operators which is a shortcut\nto writing these equations if you're\nyou're going to reassign a variable then\nyou have increment and decrement\noperators to increase a variable by one\nor decrease it by one then with operator\nprecedence if you're solving a complex\nequation you solve each part of the\nequation following this order and well\nthat is everything you need to know\nregarding arithmetic operators and\nJavaScript yeah what's going on people\nso uh today I'm going to show you how we\ncan accept some user input in JavaScript\ngenerally there's two good ways of doing\nthis the easy way is to create a window\nprompt the professional way is to create\nan html text box of some sort and you'll\nlikely need a button to submit the user\ninput let's begin with the easy way\nwe'll create a window prompt the first\nthing we should do is declare all of the\nvariables we're going to use let's\ncreate a variable named username we'll\ndeclare it but not yet assign it then\nwhen we assign it we can set username\nequal to then to create a window prompt\nwe can type\nwindow.\nprompt\nparentheses then within the parentheses\nour window prompt can contain some text\nlet's ask what's your\nusername okay let's run this and see\nwhat\nhappens what's your username I will type\nin my username press\nokay we have this variable username it\nwill have a value but we should do\nsomething with it let's\nconsole.log\nour\nusername let's try that\nagain what's your username I'll type in\nmy username feel free to type in\nyours let's check our Dev\ntools and here is my\nusername so that's the easy way to\naccept user input with this window\nprompt you could assign declaration and\nassignment together if you want to you\nknow that would also work now we will\naccept user input the Prof profal Way by\ncreating an html text box we will\nnavigate to our HTML\nfile okay let's create an H1 element\nthat says\nwelcome we'll need a text box we'll use\na self-closing input\ntag I will set the ID of this text box\nto be my\ntext I'll create a label for this text\nbox too because if we're a user we don't\nknow what we're supposed to to type in\nhere I will create a\nlabel the text within the label will be\nusername then a submit\nbutton\nbutton the text will be\nsubmit I'll put this on a new line I'll\nadd a Break\nTag maybe two to make it look nice for\nthe ID of the button I'll set the ID to\nbe my submit let's see if this\nworks this is a little Advanced when we\nclick on this button we're going to\nexecute a function but we need to select\nthis button we will access the document\nof our web\npage get element by\nID the ID that we're getting is the ID\nof the button my\nsubmit So within quotes type the name of\nthe ID follow this with DOT\nonclick\nequals here we'll write everything we're\ngoing to do after clicking the button we\nneed a function function parenthesis\ncurly braces everything between this set\nof curly braces is everything we'll do\nwhen we click on the button so first we\nneed a username variable outside of the\nfunction when we click on the button get\nthe text from this text box we will\nreassign our username then set this\nequal to the text from the text\nbox we'll use document. getet element by\nID the ID that we're getting this time\nis my\ntext we need the value of the text box\nso follow this with DOT\nvalue all right then to test this let's\nconsole\nlog the\nusername all right let's type in our\nusername press submit then check Dev\ntools yeah there it\nis okay let's replace\nconsole.log we'll change the text\ncontent of our H1\nelement I will give this H1 element a\nunique ID let's say my\nH1 we need to select my H1 ele El\ndocument. getet element by ID the ID was\nmy\nH1 we are changing the\ntext content equal to let's use a\ntemplate literal\nhello\nusername all right let's try this again\ntype in your username press submit and\nthat should change the H1 element hello\nwhatever your name is all right\neverybody so those are two different\nways to accept user input you can use a\nwindow prompt or you can use an html\ntext boox and that is how to accept user\ninput in\nJavaScript all right so uh yeah type\nconversion type conversion is the\nprocess of changing the data type of a\nvalue to another data type for example\nwe can convert strings to numbers\nnumbers to booleans booleans to Strings\nnumbers to strings booleans to numbers I\nthink you get the idea why might we want\nto do this well when we accept user\ninput the data type of that input is a\nstring if we need to use it for any sort\nof math we need to convert it to a\nnumber here's an example let's say we\nhave variable age I will create a window\nprompt window.\nprompt we will ask a user how old are\nyou I'm going to add one to our age age\nplus equals 1 then\nconsole.log age\nhow old are you let's say I'm 25 press\nokay let's inspect our page go to\nconsole it shows that age is\n251 when we accept user input it's a\nstring data type a series of characters\nby adding one we appended one to the end\nof our string we're not increasing our\nage by one we're doing string conation\nwe are going to convert our user input\ninto a number and this is how so after\naccepting our user input and before\nmaking any changes to it let's reassign\nage equal to and this is a function the\nnumber function it will convert another\ndata type such as a string or Boolean\ninto a number then we'll place our age\nvariable within that\nfunction so now this should work how old\nare you let's say I'm 25 press okay\n26 so that's the reason you may want to\ntype convert because different data\ntypes behave differently along with my\nage variable I'm going to display the\ntype of age what's the data type how old\nare you 25 press okay 26 and it shows\nthat the data type of age is number if\nwe removed this type conversion and then\nrun this\nagain it shows that our age is\n251 and it's a string which is not\nexactly what we would like that's a\nreason why type conversion is important\nlet me give you another example let's\ncreate three variables\nlet X let Y and let Z I'll show you what\nhappens when we convert different values\ninto different data types let's say x is\nthe word\nPizza same thing with Y and\nZ I will typ Cast X as a\nnumber then we need to place X within\nthe number function I kind of want to\nsee what happens when we try and convert\npizza into a number it's probably not\ngoing to go well let's convert Y into a\nstring then Z will be a\nBoolean let's\nconsole.log X as well as the type of\nX let's do the same thing with y and\nz\nall right what's going to\nhappen if you attempt to convert\nalphabetical characters into a number\nthat variable will be Nan which means\nnot a number the data type is still\nnumber though as you can see the word\nPizza is already a string so converting\nit into a string really doesn't do\nanything that's why for this line the\nvalue is still pizza and the data type\nis still a string if you convert a\nstring into a Boolean booleans again are\neither true or false converting the word\npizza into a Boolean returns true and\nthe data type is Boolean so basically as\nlong as there's some value here and you\nconvert it into a Boolean it will always\nbe true let's replace pizza with\nzero what will\nhappen we can convert zero into a number\nit doesn't contain any alphabetical\ncharacters X contains zero it's a\nnumber Y is zero but it's treated as a\nstring Z contains true and it's a\nBoolean what about empty strings just a\nset of quotes typ casting an empty\nstring as a number is still zero we have\nan empty string for y then with our\nBoolean it's false why might you want to\ntyp cast a string as a Boolean that's\none way in which you can check to see if\nuser input is empty like did somebody\ntype something in if a user skipped user\ninput it's it's most likely going to be\nan empty string then you can check to\nsee like if this is false then the user\ndidn't type in anything and you can let\nthem know what about a variable that's\ndeclared but not assigned a\nvalue converting an undefined variable\nto a number results in not a number our\nstring is\nundefined and our Boolean variable\nreturns false so that's the basics of\ntype conversion it's the process of\nchanging the data type of a value to\nanother it's pretty important when you\naccept user input because when you\naccept user input it's a string data\ntype at times you may want to convert it\nto a number if you need to include that\nnumber with any sort of arithmetic\nexpressions or a Boolean if you're\nchecking to see if that user input was\ncompleted we'll have more practice with\nthis in the future and well that is type\nconversion in\nJavaScript why hello so today I need to\nexplain const const short for constants\nare variables that can't be changed\nchanged once you assign them in this\nexample we're going to create a program\nto calculate the circumference of a\ncircle given a radius let's define our\nvariables first we have Pi we'll begin\nwith using let then I'll show you the\nbenefit of using const so let pi equals\nI'll use the first few digits of pi\n3.14159 then we have let radius which we\nwill assign later we'll ask for user\ninput then let\ncircumference I think I spelled that\nright I can never spell\ncircumference all right now we need to\nask the user what the radius is I will\njust use a window prompt radius equals\nwindow.\nprompt enter the radius of a\ncircle then once we have our radius when\nwe accept user input it's a string data\ntype we need to convert our radius into\na number by using the number\nfunction then once we have our radius we\ncan calculate the circumference by\nsetting circumference equal to and\nhere's the Formula 2 * pi * our radius\nthat the user enters in then once we\nhave our circumference let's\nconsole.log our\ncircumference let's see if this works\nenter the radius of a circle I'll enter\n10 press okay their circumference is\n62.8 so why might you want to use a\nconst in this program you may\naccidentally or somebody else may\nmaliciously change the value of a\nvariable so that the program doesn't\nbehave as intended for example somewhere\nwithin my program I will set pi to be a\nnew number pi equal 420.69\nlet's run this program again enter the\nradius of a circle I'll enter 10 press\nokay and my circumference is\n8,413 I may not realize that this is the\nincorrect answer just for an extra\nsecurity measure I can turn any\nvariables that shouldn't change to be a\nconst a constant replace let with const\nand it is a good practice if you have\nany constants to make all of the letters\nin the variable name uppercase so Pi is\nnow Capital Pi hey this is bro from the\nfuture there's one thing I needed to\nclarify that I forgot to mention\ncapitalizing your constants is usually\nonly done with primitive data types such\nas numbers in booleans reference data\ntypes such as strings don't normally\nfollowed this convention you'll see this\nin the next few upcoming videos Pi is a\nconstant and we're assigning a number\nthat's why I'm making it all uppercase\nbut if this was a string normally we\nwouldn't that is all let's try and\nchange that variable again Pi = 420.69\nso we have an uncaught type error\nassignment to constant variable so\nJavaScript won't let us reassign\nconstants once they are assigned once we\ncan't make any changes to it once you\ndeclare a constant you can't change the\nvalue and that's pretty helpful in a lot\nof circumstances it's an extra security\nmeasure what we'll do this time is\nwithin our web page we will accept some\nuser input via a text box we'll rewrite\nthe same\nprogram let's create an H1\nelement I will set the ID of the H1\nelement to be my\nH1 and the text will be enter the radius\nof a\ncircle I'll create a text box\ninput I'll set the type equal to text\nthe ID equal to my\ntext I'll create a label for this input\ntext\nbox let's say\nradius I'll add a\nbutton the button will say\nsubmit the ID will be my\nsubmit then I'll add to break\nright after the text box to make it look\nnice let's get rid of\nconsole.log when we click on the submit\nbutton we will execute a function we\nneed to select the\nbutton let's take our\ndocument get element by\nID the ID is my\nsubmit follow this with DOT onclick\nequals a function parentheses curly\nbraces when we click on the button we'll\nexecute any code within the curly braces\nwe can eliminate our window\nprompt we need to get the value from the\ntext box again we can use document.\ngetet element by ID but the ID is going\nto be my text the text from the text\nbox dot value get the value from the\ntext box box and we will assign that to\nradius then we will typ cast our input\nas a\nnumber then we will calculate the\ncircumference but since Pi is a constant\nmake sure that the letters are uppercase\nuppercase\nPi once we have our circumference let's\nchange an H3 element so let's add that\nas\nwell\nH3 the ID will be my H3 there will be no\ntext\ncontent then again we will get element\nby\nID the ID will be my\nH3 change the text content of this\nelement to equal our\ncircumference okay let's try this the\nradius is 10 press submit and here is\nour circumference maybe this will be in\ncentimet so let me change that I'll use\nstring concatenation and just add plus\nCM so 10 submit 62.83 CM if I attempt to\nchange the value of\npi maybe I'll do that here pi equal\n420.69\nrerun the program 10\nsubmit there doesn't appear to be a\nresult so if we go to Dev tools go to\nconsole we have that uncaught type error\nassignment to constant variable so again\nwe can't change the value of a constant\nthere are more graceful ways of handling\nthis we'll learn about that when we get\nto exception handling however this is\nwhat we wanted we do not want to be able\nto change the value of a constant all\nright everybody so those are constants\nit's just a variable that can't be\nchanged once you assign it a value and\nwell those are constants in\nJavaScript hey what's going on everybody\nso in today's video we're going to\ncreate a counter program using\nJavaScript HTML and CSS so sit back\nrelax and enjoy the show all right let's\nbegin everybody so what we're going to\ndo is start with our index.html file\nWe'll add any necessary elements then we\nwill style those elements with our CSS\nfile then lastly we will add\nfunctionality via JavaScript so let's\nbegin with our HTML file within the body\nof our document I will create a label to\nstore the count so I will create a\nlabel with an\nID of count label the text will be zero\nit's a little small but that's okay\nwe'll increase the font size with\nCSS I'll add a break afterward\nwith the Break Tag we'll need three\nbuttons decrease reset and\nincrease so we have button one let's\ncopy this button paste it two additional\ntimes the ID for the first button will\nbe\ndecrease btn4\nbutton the text will be\ndecrease\nthen for the second button the ID will\nbe reset button the text will be\nreset then increase\nID\nincrease\nbutton the text will be\nincrease what I'm also going to do is\nplace our buttons within a div\nsection let's let's cut our\nbuttons then place the buttons within\nthe\ndiv I will give the div a unique\nID of button\ncontainer we'll Center align our button\ncontainer so it's in the middle of the\nwindow okay that is everything we need\nwith our HTML file let's move to our CSS\nfile let's style the count label it's a\nlittle small right now I will select the\nID count\nlabel I will display the\nlabel as a block level\nelement I will text align Center so it's\nin the center of our\nscreen let's increase the font\nsize I tend to like to use the EM unit\nof\nmeasurement the text will be 10 times\nthe size\nthen let's change the font\nfamily pick a font of your choosing for\nthis example I'll use\nhelvetica let's Center the button\ncontainer that should surround all three\nbuttons as you can see\nhere the ID was Button\ncontainer text align\nCenter okay the buttons should be in the\nmiddle one thing I forgot to do uh let's\nactually add a class to our buttons\ntoo class\nequals\nbuttons\nthere all right we will select the\nbuttons\nclass I'll add some\npadding padding\n10 pixels and 20\npixels let's increase the font size font\nsize 1.5 em that translates to\n150% let's pick a font color I'll just\npick\nwhite then a background color for the\nbuttons background-\ncolor I'll use hsl\nvalues\nhow's\nthat not feeling\nit that's pretty\ngood let's round the corners with border\nradius five\npixels I'll change the cursor into a\npointer when we hover over a\nbutton\ncursor\npointer then we'll add a transition\nanimation\ntransition\nbackground-color after 0.25\nseconds then we'll apply the hover sudo\nclass when we hover over one of the\nbuttons take our buttons\nclass use the hover PSE sudo\nclass we will change the back ground\ncolor after a quarter of a second then\nchange the background color to something\nslightly\ndarker yeah that looks good there should\nbe a delay when you hover over one of\nthe\nbuttons our HTML file is done same with\nour CSS now we need to add functionality\nbecause well these buttons don't do\nanything I will individually assign all\nof these buttons so that each is stored\nwithin a\nconstant so\nconst\ndecrease button equals then we need to\nselect each button by accessing our\ndocument. getet element by\nID what's the id we're selecting we will\nbegin with our decrease\nbutton all right then we need our reset\nbutton\nreset button the ID is reset\nbutton then increase\nbutton increase button the ID is\nincrease\nbutton we need our count\nlabel okay then we will set\nconst count label equals then we need to\nget the of our count\nlabel so document. getet element by ID\ncount\nlabel then we will use let\ncount equal\nzero we'll be reassigning count we'll be\nincrementing and decrementing count with\nour HTML elements we do not plan on\nreassigning them so we can set them as\nconstants now we need a few functions\nthree\nfunctions one for each of these buttons\ndecrease reset increase let's begin with\nincrease so we are taking our increase\nbutton that we\nassigned with the onclick attribute of\nthis button set this equal to a\nfunction what's it going to do when we\nwant to increase this value of our count\nlabel let's increment count by one count\nPlus+ then we will set the text content\nof our\nlabel count\nlabel. text content equals whatever the\ncount currently is let's see if this\nworks it looks like I misspelled on\nclick all right let's see if this\nworks yep every time we press the button\nour counter label increases by\none okay let's work on\ndecrease really we can just copy this\nfunction\npaste it let's change increase to\ndecrease count minus\nminus save\neverything and we should be able to\nincrease and\ndecrease then the reset\nbutton let's copy one of these\nfunctions change decrease button to\nreset button when we want to reset we\nwill set count back to zero\nthen update our count label with the\ncurrent count which should be zero we\ncan\nincrease we can decrease and we can\nreset then increase and decrease again\nall right everybody so that is a counter\nprogram with JavaScript HTML and\nCSS hey what's going on everybody so\ntoday I'm going to explain math math is\na built-in JavaScript object that\nprovides a collection of math related\nproperties and methods for example if\nyou ever need the value of pi you would\ntype math with a capital\nm.p then let's console.log this\nconsole.log\nmath.pi Pi is 3.14 and the rest of the\ndigits if you need e e is known as ul's\nnumber it's used for the base of natural\nlogarithms we won't really using e in\nthe series but if you ever need it it's\nthere math does give you access to a lot\nof useful math related methods let's\ncreate a few variables let X =\n3.21 let y equal to and let Z will be\nundefined if you need to round a number\nlet's say Z equals you can type\nmath.round method Place whatever value\nor Vari variable you would like to round\nwithin the round method let's round X\nstore the result within Z then display z\nconsole.log z so 3.21 rounded is three\neven there's also floor floor will\nalways round\ndown let's change 3.21 to\n3.99 let's copy this\nline paste it change round to floor\nfloor always rounds down so 3.99 rounded\ndown is again three to always round up\nyou can use seal as in sealing the\nopposite of\nfloor c\nl let's change 3.99 to 3.21 3.21 rounded\nup is four then there's\ntruncate trunk short for truncate will\neliminate any decimal portion 3.21\ntruncated is three another way to raise\na base to a given power is to use the\npow method\nP let's raise 3 to the power of 2 so x\nto the power of Y which would be\n9 y to the power of X would be\n8 there's a square root function\nsqrt let's find the square root of how\nabout 81 the square root of 81 is 9 if\nyou ever need to find the natural\nlogarithm of a number you can use the\nlog function math.log let's set X to be\n10 the natural logarithm of 10 is\n2.3 if you need to do anything with\ntrigonometry there's s cosine and\ntangent functions\nlet's begin with sign s n within this\nfunction you will place radians I'll set\nX to be\n45 so Z is going to be\n0.85 so that's\ns let's do cosine which is\ncosos\n0.52 then\ntangent\nT and that is\n1.61 let's change X to\nbe 3.21\nagain to find the absolute value of a\nnumber you can use the absolute value\nfunction\nmath.abs\nit's basically going to give you the\nsame number but it's going to be\npositive the absolute value of - 3.21 is\n3.21 basically we're eliminating the\nnegative\nsign to find the sign of a number you\ncan use the sign function\ns i g\nn so the sign of -\n3.21 is1 If This Were a positive number\nit would be one if it's\nzero then the sign is zero here's a\npretty helpful method we can find the\nmaximum or minimum value from a set of\nvalues or variables let's set Z to be\none y will stay as two and X will be\nthree I will create a new variable named\nMax it will store the maximum value from\nthese three\nvariables math.\nMax comma separate each of the variables\nx y z then display the maximum within\nour console.log method the maximum value\nfrom these three variables is three then\nthere's Min for the\nminimum let\nMin do min so the minimum of these three\nvariables is one all right everybody so\nthat's math it's a built-in JavaScript\nobject that provides a collection of\nproperties which was pi and d and\nmethods such as round truncate power\nmethods related to trigonometry and Max\nand Min methods they're pretty helpful\nif you ever need them and well that is\nwhat math is in\nJavaScript hey hey what's going on\neverybody so in today's video we're\ngoing to create a random number\ngenerator but first I need to explain\nhow to create a random number in\nJavaScript let's store our random number\nwithin a variable which we will name\nrandom num to create a random number in\nJavaScript we can use the random method\nof math math. random method this will\ngenerate a random number between zero\nand one uh but it looks like we forgot\nto Output our random number so let's do\ndo that with\nconsole.log console.log random num this\nwill generate a random number between\nzero and one it will give us a number\nwith a long decimal portion most likely\nlet's say we would like to roll a\nsix-sided dice I need a random number\nbetween 1 and six not including the\ndecimal portion so the first step is\nthat we will multiply math. random *\n6 what this will do is give us a random\nnumber between 0 and 6 exclusive now I\ndon't want the decimal portion I would\nlike a whole integer we'll enclose this\nequation with the floor method of math\nmath. floor then we will enclose our\nequation so now we have oops it looks\nlike I misspelled math it should be\nCapital there so far a random number is\ngoing to be between zero and five so\nthere's\nzero and there's\nfive but I need one through six well we\ncan increase the minimum by adding plus\none or whatever you want the minimum to\nbe so now that should give us a random\nnumber between one and\nsix there's\nsix and there's one for a random number\nbetween 1 and 100 I can set the maximum\nto be 100 math. random * 100 + 1 so now\nthe number is going to be between 1 and\n100 if you're looking for a random\nnumber between a certain range let's say\n50 and 100 well we're going to change\nour\nequation just to make this easier to\nread I'm going to set two constants\nconst Min what's the minimum let's say\n50 and the max const max will be 100\nlet's replace 100 with our maximum and\none with our minimum there's one\nadditional change we need to make for\nexample our random number is\n139 we're multiplying math. random times\n100 our maximum then adding an\nadditional 50 to it so one change we're\ngoing to make is that we will subtract\nour minimum from our maximum then I will\nsurround this portion of our equation\nwith the set of parentheses just to\nforce operator precedence now the random\nnumber should be between 50 and 100 so\ndepending on the range of numbers you're\nlooking for you can change the minimum\nand the maximum all right now with that\nout of the way let's create our random\nnumber generator let's go to our HTML\nfile I will create a\nbutton the ID will be my button the text\non the button will be roll we will roll\na six-sided dice within our CSS\nstylesheet I will set the text of the\nbody of our document the font family I\nwill set to be verdana cuz I like that\nfont two to Center align everything to\nmake this easy I will set text align\nCenter all right we're getting somewhere\nlet's work on the button I will select\nthe ID of my button I will change the\nfont size of the button to be three em\nmeaning\n300% I'll add a little bit of padding\nwithin our button 5 pixels by 25\npixels and I will set the Border radius\nto be 5 pixels\njust to smooth the\ncorners we're also going to need a label\nso let's go back to our HTML file I will\nadd a\nlabel with an ID of my\nlabel within our CSS stylesheet I will\nselect the ID of my label then change\nthe font size to be 3 em so be sure to\nsave your CSS file save your HTML file\nthen within our JavaScript file we will\nneed to get our button and the label\nwe'll store those within some\nconstants const my button equals\ndocument. getet element by ID the ID of\nthe element we're getting is my\nbutton then we will need to get my label\nmy label\nthe ID is my\nlabel let's set a minimum const Min\nequals I'll set that to be one as if\nwe're rolling a six-sided dice const Max\nequals\n6 then let random num we'll declare a\nrandom number variable but not assign it\nquite yet okay when we click on the\nbutton we'll execute a function we will\ntake my button\nwith the unclick attribute I will set\nthis equal to a function what's the\nfunction going to do it's going to roll\na random number random num equals math.\nrandom times our\nmaximum we'll enclose this equation with\nmath. floor to round it math.\nfloor then add our\nminimum then we will change the text\ncontent of my label to display it my\nlabel. text content equals our random\nnum when we click on the button it\nshould roll a random number uh what are\nwe missing not a\nnumber oh okay it looks like I made a\nmistake I forgot to add a set of print\nthis is after\nrandom there we go I'm going to put the\nnumber on a new line so within our HTML\nfile I'm just going to add a Break Tag\nthere we go let's save everything roll\nagain so I roll a 6 3 1 2 5 3 let's say\nwe would like to roll three dice not\njust one we'll make a few\nchanges I will replace my label with\nlabel one for the\nID then I'm going to add a break after\nokay let's copy our label paste it two\ntimes we'll need labels two and\nthree I'll also give the labels a class\nof my\nlabels we can apply CSS styling to an\nentire class to make it easy all right\nwithin our CSS stylesheet let's replace\nthe ID of my label with the class of my\nlabels be sure to save all of your files\nthen within our Javascript file let's\nreplace my label with label one the ID\nis label one\ncopy this line of code then we need\nlabels two and three label two label\nthree let's rename random num as random\nnum\none copy it paste it two times then we\nneed random number two random number\nthree within our function for our button\nchange random num to be random num one\ncopy this line paste it two times then\nwe need random number two random number\nthree we'll change the text content of\nmy label to be label\none equals random num one copy this line\npaste it two times change one to\nB2 then for the third line change one to\nbe three what we'll do now is generate\nthree random numbers between 1 and six\nas if we're rolling three dice 232 361\n225 all right everybody that's how to\ncreate a random number generator in\nJavaScript Hey so uh what's going on\neverybody today I got to explain if\nstatements so in JavaScript if a\ncondition of our choosing is true we can\nexecute some code if it's not true we\ncan do something else that's how to put\nit simply for example let's say we have\na user's age let age equals\n25 to write an if statement we can type\nif a set of parentheses then a set of\ncurly braces within the set of\nparenthesis we can check a condition\nlet's check to see if our age variable\nis greater than or equal to 18 if this\ncondition is true we can execute\nwhatever code is within the set of curly\nbraces if this condition is true let's\nconsole.log a\nmessage you are old enough to enter\nenter this site my age is 25 this\ncondition is true we will execute this\ncode within the curly braces you are old\nenough to enter this site what if my age\nwas\n13 well if this condition is true we\ndon't do this we don't execute it we\nskip over it if you would rather take a\ndifferent course of action if you would\nrather do something else you can write\nan else\nclause\nif this is not true we will do whatever\nis within the else Clause let's display\na different\nmessage\nyou must be 18 plus to enter this site\nmy age is\n13 we will end up displaying you must be\n18 plus to enter this site basically\nspeaking if this condition is true do\nthis else if not do this instead\nit's kind of like a fork in the road\nwhich path are we going to take here's\nanother example let's say we have\nvariable time time will be in hours in\nmilitary time if our time is 9 as in 9\na.m. let's write an if\nstatement if\ntime is less than 12 as in noon then\nconsole.log\ngood\nmorning else if it's after 12 that means\nit's at least the\nafternoon\nconsole.log good\nafternoon the time is 9: as in 9:00 a.m.\ngood morning what if our time was 14\nlike 1400 in military time well then we\nwill display good afternoon\nconditions also work very well with\nBoolean variables let's create a Boolean\nvariable is\nstudent if you're a student say true if\nnot then\nfalse now with a Boolean variable if you\nneed to check the value with an if\nstatement you can just place the Boolean\nvariable within the condition\nitself the condition either evaluates to\nbe true or false\nif is student is true then\nconsole.log you are a\nstudent\nelse\nconsole.log you are not a\nstudent is student equals false we will\nexecute the else Clause you are not a\nstudent If This Were true will execute\nthe if Clause you are a\nstudent you can even create nested if\nstatements this time we will have two\nvariables let age equals some age and\nlet has license as in a driver's\nlicense uh that's how to spell\nlicense has license will either be true\nor false so in the United States you\nneed to be at least 16 years old to have\nyour Li\nwe'll check that\nfirst if age is greater than or equal to\n16 let's\nconsole.log you are old enough to\ndrive\nelse\nconsole.log you must be 6 plus to have a\nlicense if I changed my age to\n15 well I'm not old enough to have a\nlicense at least in the United States it\nmight vary depending on your country let\nme know in the comments section how old\nyou have to be to get a driver's license\nI'm kind of curious you can use another\nif statement within an if statement\nafter we check to see if somebody is old\nenough to have a license let's check to\nsee if they do have a license or\nnot so I will add another if statement\nwithin our if statement pay attention to\nthe\nindentation\nif has\nlicense since we're checking a Boolean\nvariable that is going to be the\ncondition itself it evaluates to be true\nor false if has license\nconsole.log you have your\nlicense else again pay attention to the\nindentation\nconsole.log you do not have your license\nyet my age is 15 I don't have a license\nthis is the\nresult you must be 16 plus to have your\nlicense since this condition is false we\nskip over everything within curly Braes\nentirely if I set my age to be\n18 you are old enough to drive but I\ndon't have a license that's set to false\nyou do not have your license yet so we\nexecute this condition so we enter\nanything within this set of curly braces\nwe display this message then check this\nif statement my condition is false then\nwe will execute the else\nClause if I set has license to be true\nwell then you are old enough to drive\nyou have your\nlicense all right now I need to discuss\nelse if\nstatements we will keep our age variable\nwe have our if\nstatement if age is greater than or\nequal to 18 then we will\nconsole.log you are old enough to enter\nthis\nsite else\nconsole.log you must be 18 plus to\nenter this site my age is 18 I can enter\nthis site if my age was 12 I can't enter\nthe site if there's any other conditions\nyou want to check before reaching your\nelse statement you can add an else if\nClause then you can check another\ncondition let's check to see if\nsomebody's age is less than zero your\nage can't be below zero let's let the\nuser know\nconsole.log your age can't\nbe below\nzero I will set my age to\nbe1 that's not\npossible your age can't be below zero\nsince this condition is false we skip\nover this Clause then move on to the\nnext condition else if this condition is\ntrue execute this clause which it was\nthen it's not necessary to go to the\nelse statement because we already\nexecuted one of these Clauses you can\nadd as many else if statements as you\nwould like let's add another else if\nlet's check to see if somebody is over\n100 years\nold age is greater than or equal to\n100\nconsole.log you are too old to enter\nthis\nsite okay now pay attention to this it's\nreally important my age will be\n101 you are old enough to enter this\nsite so why didn't we execute this\nClause our age is greater than or equal\nto 100 the order of our Clauses does\nmatter we start at the top and work our\nway down and check all the conditions on\nthe way down so with our first statement\nthis if state\nage is greater than or equal to 18 101\nis greater than or equal to 18 we will\nexecute this clause and skip over\neverything else that comes after even\nthough this response is more appropriate\nfor what we're looking for we still skip\nover it even though this is true because\nwe executed this one first so I would\nrecommend that we move this Clause to\nthe beginning and change it to an if\nstatement first let's check to see if\nage is greater than or equal to\n100 else if age is greater than or equal\nto 18 so this should work as intended\nour age is 101 you are too old to enter\nthe site let's add another lsif Clause\nso to check to see if two values are\nequal you got to use the comparison\noperator which is two equal signs let me\ngive you a\ndemonstration else\nif let's check to see if somebody's age\nis directly equal to zero so be sure\nyou're using two equal signs for a\ncomparison not one one equal sign is the\nassignment operator you want two equal\nsigns to see if two values are\nequal if somebody's age is exactly zero\nwill display a custom\nmessage you can't enter you were just\nborn if somebody's age is zero they're a\nbaby or an infant so let's set our our\nage to be\nzero you can't enter you were just born\nthis condition is false we skip this\nClause this condition was true we\nexecute this clause and Skip everything\nelse that comes after using all this\ncode let's work on an exercise we're\ngoing to create a text box and a button\nso somebody can submit their age then\ndepending on what they enter we will\ndisplay a message so within our HTML\nfile we'll create a few things let's\ncreate a label the text on the label\nwill be enter your\nage let's add a break after then a text\nbox the label will be input the type\nwill be\ntext the ID will be my\ntext I'll add a\nbreak we'll create a submit\nbutton button type equals\nsubmit\nthe ID will be my\nsubmit the text on the button will be\nsubmit I will also create a paragraph\nelement the ID let's say is\nresult element to display a result all\nright that is everything we'll need so\nwe can't see the paragraph element quite\nyet the text content of the result\nelement will be one of these lines of\ntext so let's go back to our index file\nwe'll create our elements I will set\nthem to be\nconstants\nconst my\ntext equals document. getet element by\nID the ID is going to be my\ntext and\nconst my submit that's the submit button\ndocument. getet element by ID the ID is\ngoing to be my\nsubmit then\nlastly result\nelement\nconst result element equals document.\ngetet element by ID the ID is result\nelement let's scoot these if statements\ndown when I click on the button we will\nexecute a function the button is named\nmy\nsubmit my submit onclick attribute\nequals a function when we click on the\nbutton what are we going to do let's\ntake all of our if else if and else\nClauses cut them then paste them within\nthe function for the button when we\nclick on the button then we will check\nour age let's set this variable to be\nundefined then we will get our age from\nthe text box age\nequals my\ntext. value get the value from the text\nbox and assign it to age but remember\nwhen we get text from a text box it's a\nstring data type we need to typ cast it\nto a number so we will set age to\nequal then use the number function to\nconvert it to a number then we can check\nour age we'll replace console.log with\nthe text content of the result element\nresult element. text\ncontent equals our message I'll use a\ntemplate literal so I'll use back\nticks let's copy our text paste it\nwithin the template literal then I will\ndelete the console.log message so we'll\njust follow this pattern result element.\ntextcontent\nequals our\nmessage\nall right let's see if this works so we\nwill type in our age let's say I'm 25\npress\nsubmit and we have one problem let's see\nwhat's going\non oops okay so I forgot to add a set of\nparentheses after the function let's add\nthat let's say I'm 25 press submit you\nare old enough to enter the site let's\nsay I'm 12 you must be 18 plus to enter\nthe site what if I'm\n101 you are too old to enter the site\nwhat if I'm zero you can't enter you\nwere just\nborn I'm negative 1 your age can't be\nbelow zero all right everybody so that\nis everything you need to know to to get\nstarted working with if statements in\nJavaScript hey uh so today I'm going to\nexplain the checked property in\nJavaScript the checked property\ndetermines the checked state of an HTML\ncheckbox or a radio button element by\nexamining this property we can determine\nif a check boox is checked or a radio\nbutton is selected in this program if I\nwere to not select any of these buttons\nwe have a different result within our\nHTML file we will create an input\nelement the type is going to equal\ncheckbox then for the ID I will set this\nequal to my\ncheckbox and here is our checkbox we\nshould probably add a label so that\npeople know what this is\nfor so the\nlabel I will set the four attribute to\nbe my\ncheckbox\nwhat's the label going to say let's say\nsubscribe like a subscribe button\nutilizing the four attribute if the four\nattribute is the same as the ID when we\nclick on the label it should still\nselect the\ncheckbox all right let's add a break\nthen we will create some radio\nbuttons we will again need an input\nelement the type this time will not be a\ncheckbox it will be radio for the ID\nthis will be a Visa button I'm going to\nabbreviate button to BTN so pay\nattention to\nthat then I will create a label for this\nradio\nbutton we will set the four attribute to\nbe the same as the\nID then the text will be\nVisa I'm going to add a\nbreak okay let's copy this radio button\npaste it two\ntimes we'll change the second visa to be\nMasterCard let's change the ID first\nMaster\nCard let's copy the ID paste it within\nthe four attribute of the second\nlabel then change the text Master\nCard then the third ID will be PayPal\nbutton\nthen change the four\nattribute and the text\nPayPal so with radio buttons they should\nall be within the same group currently\nthey're not so I can select all of them\nif I would like we should only be able\nto select one from any group we will\ngroup these radio buttons by their name\nattribute they should all have the same\nname the name let's say is card so let's\ncopy this attribute and paste it within\nthe other input elements now we should\nonly be able to select one and that\nappears to work lastly let's create a\nsubmit\nbutton we are creating a button the text\nwill be\nsubmit the type is\nsubmit and for the ID the ID will be my\nsubmit I will create a paragraph element\nwill populate it with some text\ndepending if subscribe is checked or not\nsame thing goes with our r\nbuttons I will create two paragraphs\nafter our\nbutton the ID on the first\nparagraph let's name sub result there\nwill be no text content to begin with\nwe'll change the text content of our sub\nresult paragraph with some text that\nstates if the user is subscribed or not\nwe'll create another paragraph for the\nradio buttons again there's going to be\nno text content I'll set the idea this\nparagraph to be payment\nresult now before we move to our\nJavaScript file I'm just going to edit\nthe CSS on the button to make it a\nlittle bit bigger so you guys can read\nit so the ID of that button was my\nsubmit we are selecting an ID my submit\nI will set the font size to be 1\nem and that's probably good enough uh\nmaybe I'll add one more break after the\nSubscribe button and the PayPal radio\nbutton\njust so that it's not as\ncramped that's decent enough okay so be\nsure to save your CSS file your HTML\nfile then we are now within our\nJavascript file what we're going to do\nnow is get these elements by their ID\nand store them within constants so\nthey're easier to work with okay let's\nstart with our checkbox so the checkbox\nhad an ID of my\ncheckbox const my check checkbox be sure\nto pay attention to the capitalization\nfeel free to change that if you would\nlike just be sure it's consistent with\nwhat you have currently with your HTML\nelements we are accessing the document\nof our web page get element by\nID the ID is going to be my\ncheckbox and that's it so let's get the\nother elements we have my\ncheckbox then we have our Visa button\nconst Visa button get element by ID Visa\nbutton then let's repeat this with our\nMasterCard button again pay attention to\nthe capitalization it's pretty\nimportant then we have our PayPal\nbutton we need our submit button\nnext my\nsubmit then our paragraph\nelements sub\nresult then payment\nresult all right here are all the\nconstants that we'll need so when we\nclick on the submit button we will\nexecute a function so we are taking my\nsubmit that's the name of the button dot\non click I keep on spelling on lick on\nclick equ equal a function parentheses\ncurly braces when we click on the button\nwhat are we going to do we recently\nlearned about if statements we will\nfirst check the checked property of the\nSubscribe button we'll place it within\nan if\nstatement so to create an if statement\nit's if parenthesis krly braces we are\nexamining my checkbox that's the\nSubscribe button dot checked property\nthis will evaluate to be true or false\nif this is true we will execute this\ncode if not we do something else if\nsomebody is subscribed let's change the\ntext content of our sub resultes\nparagraph So sub result we are accessing\nthe\ntext content to equal maybe I'll use a\ntemplate\nliteral you are\nsubscribed\nelse the user is not\nsubscribed let's copy this line paste\nit you are not subscribed Let's test\nthis if I click on the check boox then\npress the submit button it states that I\nam subscribed you are subscribed if I\nwere to refresh the page I don't click\nthe Subscribe button press submit you\nare not subscribed all right we know\nthat that works let's move on to the\nradio button\nfirst we will check to see if somebody\nselected\nVisa we are accessing the Visa radio\nbutton if Visa\nbutton. checked if this is\ntrue we are changing the text of the\npayment result paragraph payment result.\ntext content\nequals you are paying with\nVisa\nlet's see if that works I'll select Visa\npress submit you are paying with\nVisa all right let's\nadd else\nif the next radio button is Mastercard\nbutton if this is checked MasterCard\nbutton.\nchecked then we will change the text\ncontent of the payment result to be you\nare paying with\nMasterCard you are paying with\nMasterCard let's add another else if\nstatement else\nif this time we are examining the PayPal\nbutton PayPal button. checked if this is\ntrue change the text content of the\npayment result to be you are paying with\nPayPal you are paying with PayPal\nelse if none of these radio buttons are\nchecked we will change the text content\nof the payment result to\nbe you must select a payment\ntype I will press submit without\nselecting a payment type you must select\na payment\ntype all right everybody so that is the\nchecked property by examining the\nchecked property of of an HTML checkbox\nor a radio button element we can\ndetermine if those elements are checked\nor not and well that is the checked\nproperty in\nJavaScript hey y welcome back so today\nI'm going to explain the trary operator\nin JavaScript you write a condition then\nadd a little question mark kind of like\nyou're asking a question how is this\nuseful well it's a shortcut to if and\nelse statements it helps to assign a\nvariable based on a condition you write\na condition then use the tary operator\nas if you're asking a question you can\nwrite some code if that condition is\ntrue what would you like to do then add\na colon then some code if that condition\nis false here's an example let's say we\nhave a user's age age equals\n21 I would like to check to see if\nsomebody's age is greater than or equal\nto 18 age greater than equal to 18 then\nI will use the tary operator kind of\nlike I'm asking a question is age\ngreater than or equal to 18 if this\ncondition is true we can write some code\nI'll create a string your and\nadult then what if the condition is\nfalse I'll add a\ncolon then I will execute this code if\nthe condition is false you're a\nminor\nthis is helpful if you need to assign a\nvariable based on a\ncondition so I'll create a new variable\nlet message\nequals then we write our condition so if\nage is greater than or equal to\n18 if that's true we will assign this\nstring to this variable this message if\nit's false instead we will assign this\none it's an alternative to writing\nsomething like this\nso with programming we try not to repeat\nourselves if we don't have to here we're\nassigning message to be either this\nstring or this one our trary operator is\nmore condensed and I feel like it's\neasier to read than that if else\nstatement it's a shortcut if you choose\nto use it I tend use it a lot then just\nto test it let's console.log our message\njust to be sure that it works fine\nconsole.log our\nmessage our age is 21 you're an adult if\nmy age was 12 you're a minor let's go\nover a few more\nexercises this time we will have let\ntime time will be between 1 and 24 like\na 24-hour clock I will set time to be 6\n16 16 I think would be 400\np.m. we will assign a\ngreeting equals then we'll write a\ncondition is time less than\n12 then tary operator like we're asking\na question if the time is less than 12\nit's the morning good\nmorning we'll use a colon then write\nsome code if it's\nfalse if it's not the morning it's at\nleast the afternoon\ngood\nafternoon then let's\nconsole.log our\ngreeting good afternoon because it's 400\np.m. what if it was 99 good morning all\nright I have a few more\nexamples what if somebody's a student\nlet is student this will be true or\nfalse if you're a\nstudent let message message equals now\nwith the Boolean variable you can just\nwrite the Boolean variable\nitself is student question mark are you\na student if so you are a student if not\nyou are not a\nstudent then let's\nconsole.log our\nmessage\nwe are a student you are a student let's\nset this to be false you are not a\nstudent it's very easy to read with\nBoolean variables you write the Boolean\nvariable then add a question\nmark here's a challenge round we will\nhave a purchase amount as if somebody's\nbuying something if somebody's purchase\namount is over\n$100 they get a 10% discount so\nlet purchase amount equal let's say\n$125 or some other unit of currency of\nyou're\nchoosing\nlet\ndiscount equals then the condition is\nwe're checking if purchase amount is\ngreater than or equal to $100\n$100 question\nmark is somebody's purchase amount\ngreater than\n$100 if so they will get a 10%\ndiscount\ncolon if that's false they get no\ndiscount\nzero so then let's display the total\nconsole.log I'll use a template\nliteral your total is I need a dollar\nsign for our unit of currency then I\nneed a placeholder so I need another\ndollar\nsign the purchase\namount minus\nus the purchase\namount multiplied by let me scoot over a\nlittle the\ndiscount divided by\n100 so the total since we get a\ndiscount is\n$112.50 if our purchase amount was\n$99 well we don't get that discount your\ntotal is 99\nall right everybody so that's the trary\noperator it's a shortcut to an if else\nstatement it helps to assign a variable\nbased on a condition you write a\ncondition add a question mark as if\nyou're asking a question do this code if\nthat condition is true else do this code\nif that condition is false I'll be using\nthe tary operator a lot just because I\nfeel like it's helpful and well that is\nthe tary operator in\nJavaScript hey what's going on everybody\nso today I'm going to explain switches a\nswitch can be an efficient replacement\nto using many else if statements here's\nan example of a program I wrote without\nusing a switch we have a day day will\nnormally be the number 1 through 7 if\nday equals 1 will console.log it is\nMonday which you can see here if day was\ntwo well then it's Tuesday all the way\nup to 7 which is Sunday I do have an lse\nstatement that states our day variable\nis not a day for for example if I set\nday to be I don't know like a string of\npizza well then Pizza is not a day but\nit really should be if you find yourself\nusing a lot of else if statements I\nwould instead recommend creating a\nswitch here's how to create one we'll\nkeep our day variable I'll set that to\nbe one to create a switch we will type\nswitch parentheses curly braces within\nthe parenthesis of the switch we will\nplace a variable or a value what are we\nexamining let's examine our day\nvariable we examine a value against\nmatching cases to create a case type\ncase then a value or a condition we will\nsee if day equals 1 so day case one are\nthese two values equal if they are then\nwe can do something we can execute some\ncode so add a colon then any code\nunderneath this case will be executed if\nthere's a match between our value or\nvariable day and this value so let's\nconsole.log it is\nMonday then be sure to add a break I'll\ndemonstrate why you need break later so\nday is\none it is Monday let's add another case\nfor case two in case day equals 2 so\nlet's copy and paste what we\nhave case 2 it is\nTuesday let's change day to B2 it is\nTuesday all right let's do this all the\nway up to case\nseven\nall right we have cases 1 through 7 if I\nchange day to be seven well then it is\nSunday you can also add a default case\nin case there are no\nmatches now what if we set day to be\nPizza which doesn't make sense well\nthere are no matching cases once we\nreview all of the cases and there's no\nmatches we exit the switch you also have\nthe capability to add a default case in\ncase there are no\nmatches what's the default behavior of\nthe switch if there's no matching cases\nlet's\nconsole.log I should probably use a\ntemplate literal for this if we're\ninserting a\nvariable our day\nvariable is not a day so now we should\nexecute this default case Pizza is not a\nday all right now the reason that that\nwe have these break statements is to\nbreak out of the switch once we have a\nmatching case I'll demonstrate what\nhappens if we remove\nthese all right let's set day to be two\nas in Tuesday it is Tuesday it is\nWednesday it is Thursday it is Friday it\nis Saturday it is Sunday two is not a\nday so the reason that we have these\nbreaks is to break out of the switch if\nwe don't have them once we have a\nmatching case we will execute the code\nfound within that space then Cascade\ndown and execute any code that follows\nafter including code within different\ncases so that's why you want these break\nstatements after each case to break out\nof the switch let's go over a more\ncomplex\nexample let's say we have a test score\nvariable between 0 and 100 my score will\nbe 92\n92% I will also create a letter grade\nvariable\nwhich we will declare but not aign I'm\ngoing to examine our test score so\nanother way in which you can write a\nswitch is something like\nthis I'm going to examine the value of\ntrue against matching cases which\ncontain a condition so case then I'll\nwrite a\ncondition is test score greater than or\nequal to 90 as in\n90% this condition will eval valuate to\nbe true or false if true is equal to\ntrue we will do some code if this is\nfalse we skip over it if our test score\nis greater than or equal to 90 let's\nassign our letter grade variable to\nequal an a then be sure to\nbreak then I'm going to test this with\nconsole.log we will display our letter\ngrade we have an A let's do this for\nanything greater than 80 the user will\nreceive a\nB test score greater than or equal to 80\nletter grade will equal\nB let's change our test score to be 85\nthe user receives a\nb let's follow this pattern 70 will be a\nc yep\nC 60 will be a\nd\n60 is D then for the default\ncase I will set letter grade to be\nF letter grade equals\nF if I set my test score to be 33% so\nwith the test score of 33 the letter\ngrade is f all right everybody so that's\na switch if you find you're using a a\nlot of lse if statements I would\nrecommend using a switch instead it's\nnot bad if you have a few but if you\nhave many I would use a switch instead\nand well everybody those are switches in\nJavaScript hey it's me again so today\nI'm going to explain string Methods in\nJavaScript string Methods allow you to\nmanipulate and work with text also known\nas strings in this example I have a\nusername username equals a string of\ntext why don't don't you go ahead and\ncreate a username variable and set it\nequal to either your username if you\nhave one or your full name strings have\ndifferent built-in methods where we can\nmanipulate this text one way or another\nhere's a few examples suppose I would\nlike to get the first character of the\nstring I can use the Char at method type\na string or a variable containing a\nstring then follow this with DOT by\nadding a DOT we are accessing any\nProperties or methods that the string\nhas follow this with Char at then list\nan index the first character is zero the\nsecond character would be one so get the\ncharacter at index zero that should be a\nb however if I were to run this let's go\nto our Dev\ntools uh nothing appears to happen\nbecause it's going to return a single\ncharacter let's place that within\nconsole.log just so that we can see\nit cut this code and and paste it within\nconsole.log so the first character in my\nstring is B but depending on what you\nwrote it might be different for you the\ncharacter at index one would be R then\ntwo is O so that is the Char at\nmethod the index of method will return\nthe index of the first occurrence of a\ncharacter let's find the first\noccurrence of n o it will return an\nindex and then again I have to\nconsole.log whatever is\nreturned so let's place this method\nwithin\nconsole.log what is the index of the\nfirst occurrence of an o that would be\ntwo 0 1 2 otherwise for the last index\nlet's change the method to be last index\nof which would be four 0 1 2 3\n4 so the length property this isn't a\nmethod to get the length of a string\ntype the string or a variable containing\nthe\nstring dot length this isn't a method\nbut it's very similar so the length of\nmy username is seven characters 1 2 3 4\n5 6 7 so that's how to get the length of\na\nstring now we are going to trim the\nstring maybe there's a bunch of white\nspaces after or\nbefore I will reassign username equal to\nlet's take our username variable Dot and\nuse the trim method to trim any Whit\nspace then I will\nconsole.log my\nusername there's my name and there's no\nwh space\nafter let's add some wh space before our\nname yep and there's no white\nspace to make my name I'll uppercase\nI can use the two uppercase\nmethod now my string is all\nuppercase then there's two lowercase to\nmake all of the characters\nlowercase there's repeat to repeat a\nstring within the parenthesis of the\nmethod how many times do you want to\nrepeat the string if I were to type\nthree we'll repeat the string three\ntimes to determine if a string starts\nwith a given character we can use the\nstarts with method this will return a\nBoolean I will store that within a\nresult\nvariable username\ndot starts with\nmethod we will check to see if the\nstring starts with an empty\nspace then let's\nconsole.log the\nresult that is false my username does\nnot begin with the space but what if it\ndid I'll add one then that returns true\nthis could be useful within an if\nstatement if\nresult if the string starts with a whit\nspace let's\nconsole.log your\nusername can't begin\nwith an empty\nspace else let's\nconsole.log the\nusername my username has a whit space in\nthe beginning your username can't begin\nwith Whit\nspace if that were false then we will\ndisplay my username so that is the\nstarts with method there's also ends\nwithth does my username end with the\nWhit\nspace it does not but what if it\ndid your username can't end with an\nempty\nspace next is the includes method does\nthe string contain an empty\nspace I'll split my username into two\nyour first and last name would work as\nwell your username\ncan't include an empty space currently\nit does your username can't include an\nempty space if it didn't then we pass\nthe test we will display the\nusername all right now this time we will\ncreate a phone number let phone number\nequals make up some phone number\nincluding dashes 2 3 4 5 6\n7890 so this phone number is a string\neven though it contains numbers because\nstrings can contain numbers but we treat\nthem as\ncharacters let's eliminate all the\ndashes in our phone number here's one\nway in which we can do that let's\nreassign our phone number equals our\nphone number we will use the replace all\nmethod which character are we replacing\nlet's replace any dashes comma then the\ncharacter to replace the dashes with or\nwhatever you put for the first\ncharacter we will replace all dashes\nwith no\ncharacters then let's\nconsole.log our phone number and that\nshould eliminate all of the\ndashes or otherwise you could replace it\nwith a different character let's do a\nforward slash so 1 2\n3456 SL\n7890 there's also the pad start method.\npad\nstart the first value within the pad\nstart method is a specified length how\nmany characters should the string be I\nwould like the string to be 15\ncharacters long then for the second\nvalue make sure to comma separate it we\ncan pad the start of the string with a\ngiven character let's say\nzero so the result is a couple zeros\nthan our phone\nnumber pad this string with zeros until\nit's 15 characters long if I were to set\nthis to 20 then we would have more zeros\nthere's more\npadding then there's pad\nend pad the end of the string with this\ncharacter until the string is 15\ncharacters long\nall right everybody so those are string\nMethods they allow you to manipulate and\nwork with text also known as strings\nwe'll have more practice with these in\nthe future and well those are a few\nuseful string Methods in\nJavaScript hey everybody so today I'm\ngoing to explain string slicing in\nJavaScript string slicing is the process\nof creating a substring from a portion\nof another string this won't alter the\noriginal string just just to demonstrate\nlet's create a constant for our full\nname go ahead and type in your full name\nor you can copy me I'm going to extract\nthe first name from my full name and\ncreate a new string out of it so I'll\ndeclare this let first name equals Now\nto create a substring we can follow this\nformula we take our string in this case\nour full name dot then use the built-in\nslice method\nslice then we can list a starting and\nending index where would we like to\nbegin so the first character has an\nindex of zero we'll start at the\nbeginning index0 comma where are we\ngoing to end 0 1 2 this isn't\nnecessarily going to work and let me\ndemonstrate so let's\nconsole.log our first name so my first\nname is BR so the ending index index is\nactually exclusive in my full name we're\nending at o but we don't include it\nwithin our substring because the ending\nindex is exclusive I'll increase the\nending index to three that should\ninclude one more character which it does\nnow let's get the last name let last\nname equals again following this formula\ntake our original string use the\nbuilt-in slice method State the\nbeginning index 0 1 2 3 4 mine will be\nfour yours may be different depending on\nwhat your name is and the ending index\nfour 5 6 7 and remember that the last\nindex is exclusive so I'm going to\nincrease that to be eight then we'll\ndisplay our last name\nconsole.log last\nname and there's my last name so the\nreason that I set the beginning index to\nbe four and not three is because we'll\ninclude that space within the result as\nyou can see here if you're going to be\ncreating a substring from some position\nall the way to the end you don't\nnecessarily need an ending index I'm\ngoing to remove the ending index and\nthis should work the\nsame all right what if I need the first\ncharacter in the\nstring let first Char meaning character\nequals take our string we will use the\nslice method for the first character you\ncan use 0 comma 1\nthen let's display our first\ncharacter and in my example mine is B\nfor the last character let last\ncharacter full name do\nslice we can use a negative index even\nif you're using a negative index you'll\nbegin at the end then by decreasing the\nnumber you'll work your way towards the\nbeginning so the last character in my\nname is is\ne -2 would be\nde 3 is o four is c for code negative\nindices work as well with these specific\nnumbers that I've listed they're only\ngoing to work if my name is exactly this\nwhat if I were to change my first name\nto be instead of bro broseph like\nJoseph then let's display our first name\nthen our last\nname\nfirst name bro last name f which is not\ncorrect to make this program more\nDynamic we can combine string slicing\nwith the index of method we'll search\nthe string for the first instance of a\nspace then depending on where that space\nis we'll take the first part of our full\nname and create a substring for the\nfirst name anything after the space will\nbe our last name so let's turn these\nlines into comments we don't need them\nanymore\nlet first name equals again take our\nfull\nname do\nslice we'll begin at the beginning index\nzero now where do we end we're not going\nto count the number of characters this\ntime we're going to calculate it the\nending index will be take our full\nname dot then use the index of\nmethod where's the first index of a\nspace so that is the ending position\nwherever there's a space then we'll\ndisplay our first\nname uh let me get rid of our last name\nthere\nbrosive now for the last\nname let last name\nequals let's copy this line of code\npaste\nit the beginning index will be f full\nname. index of\nspace you can list an ending index but\nwe don't need to we would like to\nextract every character that comes after\nthis position so we don't need an ending\nindex all right let's see if this\nworks brosi space code we're including\nthat space so to remedy this I can add\nplus one find the first index of a space\nthen start in the position after that's\nwhy we're adding plus one then give me\nevery letter that comes after and that\nworks just fine broi code all right\nlet's go over an\nexercise this time we will list an\nemail const email equals why don't you\ngo ahead and type in your email I'll\nmake one up for me bro 1@gmail.com\nI'll extract the first part of my email\nto be stored as a\nusername let username\nequals again we're going to take our\nstring email do use the slice method\nwhere are we going to begin we'll begin\nat index zero that's the beginning of a\nstring where will we end we'll end\nwherever the at symbol is but we need to\nsearch for it we'll use the built-in\nindex of method of a string email. index\nof what are we searching for we are\nsearching for the at\nsymbol\nand let's see if this works\nconsole.log our\nusername yep bro\none then let's get the\nextension let extension equals we can\ncopy this line of code paste it make a\nfew\nchanges this substring will begin where\nthe last one\nended then again\nconsole.log the\nextension at\ngmail.com again like I said before I\nwould like to begin after this\nindex I will add plus\none my username is br1 my extension is\ngmail.com all right everybody so that's\nstring slicing it's the process of\ncreating a substring from a portion of\nanother string when you create a\nsubstring you won't alter the original\nand I've proven that by setting this\nstring to be a constant you can't change\na constant to create a substring you\ntake the string use the built-in slice\nmethod then you can list starting or\nending indices and well everybody that\nis string slicing in\nJavaScript what's up everybody so in\ntoday's video I got explained the\nconcept of method chaining in JavaScript\nmethod chaining is a programming\ntechnique it's where you call one method\nafter another in one continuous line of\ncode I'll give you two examples of the\nsame program one that uses no method\nchaining and another that does then\nwe'll be able to see some of the\nbenefits of method chaining what we'll\ndo in the first version of this program\nis create a variable for a username and\nI will ask the user for some input using\nwindow.\nprompt the text will be enter your\nusername after typing in some\nusername I would like to to trim any\nwhite space around the username take the\nfirst character make it uppercase take\nall of the other characters make them\nall lowercase and then display the\noutput so this program will have a few\nsteps let's reassign our username equal\nto\nusername use the trim method to remove\nany wh space before or after the name\nthen I will get the first character of\nmy username to capitalize it we'll\ncreate a variable of let letter\nequals our username follow this with the\nChar at method the character at index\nzero letter is going to be a variable it\nwill hold the first letter of my\nusername to make my letter uppercase I\nwill reassign it letter equals letter\nuse the two uppercase method to make\nthat letter uppercase now with the rest\nof the characters I would like to make\nthem lowercase anything besides the\nfirst character\nI will create a separate variable for\nextra characters let's say extra chars\nshort for characters equals take our\noriginal\nusername use the slice method we will\nslice our username everything after the\nfirst character if my name was bro code\nand I created a slice of everything but\nthe first character extra characters\nwould be R code without the B so then\nlet's take our extra characters make\nthem all lowercase extra characters\nequals extra characters followed with\nthe two lowercase\nmethod then we will combine the first\nletter which is uppercase and the extra\ncharacters which are lowercase then\nstore them within our username username\nequals our\nletter plus the extra\ncharacters then we will display our\nusername\nconsole.log our\nusername so this program does have a lot\nof steps we will run this program\nenter your\nusername I will enter a few whites\nspaces type in my name but I'll mix up\nthe\ncapitalization press okay and there's my\nusername the first letter is uppercase\nthe rest of the letters are lowercase so\nthis program does work but it is a lot\nto write now with method chaining we can\ncombine some of these steps together and\navoid creating variables that we don't\nneed such as letter and extra\ncharacters so with method training what\nwe'll\ndo is start to combine some of these\nsteps after getting our username we will\ntake our username equals take our\nusername again use the trim method we're\nnot going to end this method with a\nsemicolon we're going to end it with a\nDOT to write another method after\ntrimming the username get the character\nat index zero and then why sto there\nlet's method chain again make that\nletter uppercase following the two\nuppercase method so this will work it's\nkind of like in a video game how you can\nhave a combo well this is a three hit\ncombo boom boom boom take our username\ntrim it get the first character and then\nmake an uppercase all in one line of\ncode not only that let's use some string\nconcatenation we need to take the rest\nof the characters of my username make\nthem all lowercase then combine them\ntogether again let's take our username\nuse the trim method method chain the\nslice method slice the string after the\nfirst character then method chain again\nuse the two lowercase\nmethod and that should\nwork\nconsole.log my\nusername we're using a lot less lines of\ncode and I'll zoom out just so you can\nsee\neverything Ander your username I'll\nthrow in some white spaces then mix up\nthe\ncapitalization\nand that has appeared to work so that's\nmethod chaining it's a programming\ntechnique where you can call one method\nright after another in one continuous\nline of code it's like a video game\ncombo so to say so in this case trim our\nusername give me the first character and\nthen make it uppercase we did method\nchaining here here and then we combined\nthe results using string catenation\nwhich is something separate entirely by\nusing method chaining this help helps\nyou avoid creating named variables but\nif your method chain is too long it can\nbecome difficult to read like here I am\nkind of pushing the limits and well\neverybody that is Method chaining in\nJavaScript hey yeah it's a me so today\nI'm going to explain logical operators\nthere's three of them and or not they're\nused to combine or manipulate Boolean\nvalues Boolean values if you remember\nare true true or false let's create a\nprogram const temp meaning temperature\nwhat I would like to do is see if my\ntemperature Falls within a certain range\nthis will be in Celsius let's say the\ntemperature is 20°\nC without using any logical operators\nlet's write this if our temp is greater\nthan\nzero then we will\nconsole.log\nthe weather is\ngood else\nif the temperature is less than or equal\nto 30 30° C we will also output the\nweather is\ngood\nelse the weather is bad currently my\ntemperature is 20° C the weather is good\nwhat if I were to change this to\nsomething ridiculous like 200° C well\nthe weather is obviously not good Earth\nprobably got hit by an asteroid or\nsomething or if I were to change my\ntemperature to like 100° C well the\nweather isn't good either I don't know\nmaybe the sun disappeared so what I want\nto do is output the weather is good only\nif my temperature Falls between the\nrange of zero and 30 so we're going to\nchange this program if our temperature\nis greater than\nzero and we'll check another condition\nand our temperature is greater than or\nequal to 30 then we can eliminate this\nelif\nClause now let's check the temperature\nour temperature is -100° C well the\nweather is bad if our temperature was\n200° C the weather is also bad in order\nfor us to execute this if statement both\nthese conditions need to be true this\none and this one to join two conditions\nyou use double and per and meaning and\nif our temperature was 25 well that\nfalls within our range the weather is\ngood this is true and this is true so we\nwill execute this code if one of these\nwas false we don't execute it at all\nwe'll skip over it so that that is the\nand logical operator you can check more\nthan one condition you can check one\nthing and something else now there's or\nwhich is double straight\nbars with the or logical operator at\nleast one of these conditions needs to\nbe true this has to be true or that has\nto be true if I were to run the same\nprogram well then the weather is good\nlet's change the temperature to\n250 the weather is good but it's not it\nshouldn't be so let's rewrite this\nprogram if our temp is less than or\nequal to zero or the\ntemperature is greater than 30 then the\nweather is bad else the weather is good\nour temperature is 250 the weather is\nbad netive -250 the weather is also bad\nso with the orological operator we're\nchecking more than one condition is this\ntrue yes it is -250 is less than zero or\nis this condition true this one is false\nbut since at least one of these is true\nwe will execute this code then we will\ncover the not logical operator let's\ncreate a new\nprogram const is sunny is it sunny\noutside this will be true or\nfalse we will create an if\nstatement our condition will be is sunny\nis this true if it is we will\nconsole.log it is\nsunny else we will\nconsole.log it\nis\ncloudy is sunny is set to true it is\nsunny If This Were false then it is\ncloudy using the not logical operator we\ncan flip a Boolean from True to false or\nfalse to\ntrue I will precede this Boolean with\nthe not logical operator which is an\nexclamation point now we're checking if\nit's not\nSunny then we will console. log it is\ncloudy else it is sunny is it not sunny\noutside it is cloudy let's change this\nto be true it is sunny so basic basally\nthe not logical operator it'll change\ntrue to be false and false to be true\nall right everybody so that's a short\ntopic today logical operators they're\nused to combine or manipulate Boolean\nvalues use and to check to see if at\nleast two conditions are true with or at\nleast one condition needs to be true and\nwith not not we'll do the opposite and\nwell that is an introduction to logical\noperators and\nJavaScript so uh yeah it's me again so\ntoday I'm going to explain the strict\nequality operator which is represented\nby three equal signs before we dive in\nlet me make a few important distinctions\na single equal sign is the assignment\noperator you usually see it when you\nassign a value to a variable the\ncomparison operator two equal signs is\nused to compare two values to see if\nthey're equal now the strict equality\noperator has a whopping three equal\nsigns it not only Compares if two values\nare equal but if they have the same data\ntype as well let me give you a\ndemonstration suppose we have a constant\nnamed Pi Pi equal\n3.14 pi in my example has a data type of\nnumber I'll create an if statement we\nwill check if\nPi is equal to the string\n3.14 if it is let's\nconsole.log that is pi\nelse we will\nconsole.log that is not Pi is the number\n3.14 equal to the string\n3.14 well according to JavaScript that\nis pi that's because we're using the\ncomparison operator we don't care about\nthe data type we only care about the\nvalue are the values equal now if I was\nusing the strict equality operator which\nis three equal\nsigns well then JavaScript tells me that\nthis is not Pi because with the strict\nequality operator not only do we compare\nthe values but we also compare the data\ntypes as well these values are both\n3.14 but this one is a number data type\nand we're comparing it to a string so\nthey don't match technically if we were\nstrictly comparing the number 3.14 to\nthe number 3.14 well then we have a\nmatch that is pi one case where this is\npretty helpful is when you accept user\ninput because user input tends to be a\nstring data type and then just as an\nextra measure you can use the strict\nequality operator and then be sure that\nthe value is a number data type there's\nalso the inequality operator it will\nreturn true if two values are not equal\nso let's\ntake shut up this time we will examine\nif Pi does not equal the string\n3.14 if these are not equal this\ncondition will evaluate to be true so\nthis is not Pi else this is pi is the\nnumber\n3.14 not equal to the string\n3.14 well that is Pi still using the\ninequality operator these values are\nstill the same the inequality operator\nwill return false then there's the\nstrict inequality operator an\nexclamation point and two equal signs\nare the values or the data type\ndifferent so in this example that is not\nPi they have the same values but the\ndata type is different if I turned my\nvariable Pi into a\nstring well that is pi now the string\n3.14 stored within Pi does equal the\nstring 3.14 so this condition turns out\nto be false so we execute the L state\nit might take you a little bit of time\nto get used to this and that's okay it\nis a little odd but just in case you see\nthese in the future you'll at least be\nfamiliar with them from now on we will\ntry and use the strict equality operator\nif we can and well everybody that is the\nstrict equality operator and I guess\nwell the inequality operator and strict\ninequality operator in\nJavaScript hey what's going on everybody\nso today I'm going to explain while\nLoops in JavaScript a while loop Loop\nwill repeat some code while some\ncondition is true take this program for\nexample we have a variable username if\nour username is equal to an empty string\nthen we will console.log you didn't\nenter your name else console.log hello\nusername if I run this program then\ncheck within our console well we didn't\nenter our username now if I were to\nchange this program to a while loop\nwhile our usern name is equal to an\nempty string repeat this line of code\nForever Until this condition is no\nlonger true then when we escape the\nwhile loop we can print the message\nhello username this is what happens when\nI run the\nprogram we just print this line of code\nforever and my computer is probably\ngoing to\ncrash I can't seem to\nstop help okay I think it broke a while\nloop will continue some code infinitely\nwhile this condition is true if it no\nlonger is true then we can escape the\nwhile loop if I were to set my username\nto be something other than an empty\nstring well we never actually enter the\nwhile loop we skip over it entirely and\ngo straight to console.log at the end so\nwhat we do first is check the condition\nif it's true then we get sucked into the\nwild Loop and execute this forever you\nusually want some sort of way to exit\nthe while loop while you're in it\notherwise you get what is known as an\ninfinite Loop so let's rewrite this\nprogram let username equal an empty\nstring while our username is strictly\nequal to an empty\nstring let's ask the user to enter in\ntheir name username equals I'll use a\nwindow\nprompt enter your name\nname okay let's try this again enter\nyour name I'll press okay we can't seem\nto close this window until we type in\nsomething you can see I'm clicking on\nokay nothing's happening I will type in\nmy name press okay then our console\ndisplays hello whatever your name is so\nthat's a benefit of a wild Loop repeat\nsome code until this condition is no\nlonger true since we populated our\nusername our username was not not equal\nto an empty string we filled username\nwith some\ncharacters what if I instead press\ncancel hello null null means no value\nusername will equal null if I press the\ncancel button let's append to this\ncondition or username is strictly equal\nto\nnull now I shouldn't be able to continue\nuntil I type in\nsomething and I can escape if I hit canc\ncancel while one of these conditions is\ntrue execute this code forever let's\ntype in our name\nagain and now we can escape the while\nloop there's also another variation of a\nwhile loop it's known as a do while loop\nhow that works is that you can move\nwhile and the condition to the\nend so we'll place it here then preedee\nthe set of curly braces with do so we\nwill always execute this code at least\nonce then check the condition at the end\nusing a do while loop I don't\nnecessarily need to set the username I\ncan set it to be\nundefined if I set my username to be\nundefined then use a standard while\nloop we never execute the while loop our\nusername equals undefined it doesn't\nequal an empty string or the value null\nso we skip over the while loop entirely\nso a do while loop is another variation\nof a while loop do the code first then\ncheck the condition at the end so\nthere's a few different ways you can\nwrite the same\nprogram all right let's go over another\nexample we'll create three variables let\nlogged in logged in will be false to\nbegin\nwith to log in we have to type in a\nmatching\nusername I will declare a username but\nnot a sign it and a\npassword so let's create a while loop\nhow do we escape the while loop let's\nsay while not I'll use the not logical\noperator while not loged in once we're\nlogged in once this is true we escape\nthe while loop we will ask a user for\ntheir username username equals\nwindow.\nprompt\nenter your\nusername let's ask for a password as\nwell password equals enter your\npassword I'll add an if statement within\nthe wild Loop we'll check to see if our\nusername is strictly equal to then make\nup some\nusername my\nuser\nname and if our\npassword is strictly equal to some\npassword like my\npassword if our username and password\nboth match these values then we can log\nin so logged in will equal\ntrue then I'll console.log a\nconfirmation\nmessage you are logged\nin else let's console.log another\nmessage invalid\ncredentials please try again all right\nlet's see if this\nworks enter your\nusername I am just going to press okay\nenter your password I'll type in\nsomething legitimate so I'll type in my\npassword uh invalid credentials please\ntry again that's because I didn't type\nin a\nusername I'll type in my username be\nsure it matches my\nusername my\npassword and we are now logged\nin so since we set logged in to be true\nwhen we go back to the beginning of our\nwhile loop this condition is no longer\ntrue while not logged in but since we're\nlogged in we escape the while loop now\nanother variation of this is the do\nwhile loop let's cut the condition along\nwith while add it to the end then add do\nto the\nbeginning so we'll check to see if we're\nlogged in at the end it pretty much does\nthe same thing but with one exception in\nthis program how this is different is\nthat I can set logged in to be true to\nbegin with we still receive that prompt\nI'll type in my username type in my\npassword we are currently logged in so\nwe do not continue the wild Loop if we\nused a standard while\nloop and We Begin by being logged in\nwell we never ask for any of this we\nnever enter the while loop while not\nlogged in do all of this but since we\nare logged in we don't do any of it all\nright everybody so that's while Loops\nrepeat some code while some condition is\ntrue while some condition remains true\nexecute this code forever and until it's\nno longer true and well everybody that's\nwhile Loops in\nJavaScript all right what's going on\npeople so today I'm going to discuss for\nLoops a for Loop will repeat some code a\nlimited amount of times with the while\nloop a y Loop can repeat some code\ninfinitely with the for Loop we can do\nsomething a certain or limited amount of\ntimes here's an example let's say we\nwould like to display the word hello\nthree times with the for Loop we can\nwrite something like this now to create\na for Loop type four parenthesis curly\nbraces within the set of parenthesis we\nhave up to three statements the first is\nthat we can create a temporary counter\nmuch like we're assigning a variable\nlet's create a counter named I let I I\nis a common naming convention for\ncounters within a loop I meaning index\nso let I equal what number would we like\nto start at let's start at zero then\nsemicolon this is the first statement\nwe'll create a counter to keep track of\nthe number of iterations the next\nstatement is the condition in which we\ncontinue the for Loop we will continue\nthis for loop as long as I is less than\nor equal to two that's if we're going to\nexecute this for loop three times 0 1 2\nthat would be a total of three then the\nthird statement we can increment or\ndecrement our counter I so let's\nincrement our counter by one during each\niteration by typing\ni++ and that's a for Loop I is set to\nzero will continue as long as I is less\nthan or equal to two then during each\niteration we will increment I by 1 that\nmeans we will execute this for loop\nthree times what are we going to do when\nwe execute each\niteration let's\nconsole.log\nhello so this should display the word\nhello three times yep hello three now if\nI were to instead console.log I we can\nsee what I is\nso during the first iteration I our\ncounter is zero then one then two if I\nwanted to count up to 10 I could change\nmy condition to be this I is less than\n10 so we begin at zero then we count up\nto 9 so if I need 1 through 10 I'll set\nI in the beginning to be 1 then continue\nas long as I is less than or equal to 10\nthere so we have numbers 1 through 10\nusing a for Loop we can even increment\nby a different number instead of\nincrementing our counter by one let's\nincrement by two so I + = 2 so then we\nshould count up by twos 1 3 5 7 9 if I\nwant to start at two I can change our\ncounter to start at two count from 2 to\n10 but increment by two 2 4 6 8 10 if we\nwould like to count down let's start at\n10 then count down to\nzero let I equal 10 will continue as\nlong as I is greater than\nzero then iusus to\ndecrement hey for fun after we escape\nthe for Loop let's console.log happy New\nYear it's as if we're counting down to\nmidnight on New Year's\nEve 10 9 8 7 6 5 4 3 2 1 Happy New Year\nor we could count down by two i - =\n2 10\n8642 or three or whatever number 10741\nhappy New Year or whatever number you\nwant now I'm going to cover continue and\nbreak this time we will count to\n20 we need a for Loop we'll create a\ncounter let I equal I'll set I to be\n1 that's our first statement our\ncondition is is we'll continue as long\nas I is less than or equal to 20 then\nincrement I by One during each\niteration so to test this let's\nconsole.log\nI so we have the numbers 1 through\n20 so with continue we can skip an\niteration I'm going to write an if\nstatement if I is equal to now there is\na Superstition that 13 is an unlucky\nnumber let's say if I is equal to 13 we\nwill skip that iteration I know it's a\nweird example so if I is equal to\n13 let's continue continue will skip\nthis iteration of the\nloop else we will\nconsole.log whatever I\nis so now when I run this program when I\nrun this program we skip over 13 we jump\nfrom from 12 to 14 so if you ever need\nto skip an iteration you can use the\ncontinue\nkeyword now there's break break will\nbreak out of the loop entirely we've\nseen this keyword in switches to break\nout of the switch if I equals 13 then\njust exit the for Loop entirely so in\nthis example we count up to 12 but since\nI now equals 13 we break out of the loop\nentirely we don't continue the rest of\nthe iterations all right everybody so\nthose are four Loops you can repeat some\ncode a limited amount of times there's\nup to three statements we can write we\ncan create a temporary variable that\nserves as a counter a condition in which\nwe should continue then we can increment\nor decrement our counter and those are\nfour Loops in\nJavaScript hey what's going on everybody\nin this video we're going to create a\nnumber guessing game using JavaScript so\nwhy don't you go ahead and sit back\nrelax and and enjoy the show all right\nlet's get started everybody so the first\nthing that we're going to need is to set\nthe minimum and the maximum numbers in\nour number guessing game so we'll create\ntwo constants const minum for the\nminimum I will set my minimum to be one\nbut feel free to pick a different number\nif you would like then a maximum const\nMax num I will set my maximum to be 100\nso what we got to do is generate a\nrandom number between our minimum and\nour maximum\ninclusively so let's create another\nconstant const answer then we'll\ngenerate a random number between 1 and\n100 our minimum and our maximum to do\nthat we can type math.\nrandom the random method of math will\ngenerate a random number between zero\nand 1 we will multiply this by within a\nset of parentheses the range between our\nmaximum minus our\nminimum then add plus one\nlet's see what we have so far just to\ntest everything I'm going to\nconsole.log our\nanswer okay let's inspect go to console\nhere's my answer currently 56 point and\nthen a bunch of decimal places after I\nwill round our answer by enclosing this\nequation with math. floor to round\ndown okay let's see what we get again 39\n89 20 7 71 27 177 46 okay that seems\nlike it's working what if we have a\nhigher minimum let's say between 50 and\n100 well I have 7 22 43 numbers that are\nbelow our minimum so if we have a\nminimum besides one I will add to the\nend of this equation our minimum\nagain okay let's see if that works so if\nI need a random number between 50 and\n100 this equation should work 97 80 79\n52 all right that seems like it's\nworking so this is the equation you'll\nneed to generate a random number between\nyour minimum that you set and your\nmaximum but let's change our minimum\nback to one and make sure our maximum is\n100 all right let's move on to step two\nwe'll create a variable named attempts\nto keep track of the attempts it takes a\nuser I will set attempts to be zero and\nlet guess\nI will declare this variable but not\nassign it quite yet we'll take care of\nthat later I will also create a Boolean\nvariable named running and I will set\nthis to be\ntrue the reason that we have the Boolean\nvariable running is so that we can exit\nthe game when it's over we'll set\nrunning to equal false so to keep the\ngame running we'll use a while loop\nwhile running equals true now if this is\na Boolean variable you don't necessarily\nneed this portion equals true you can\njust set this to be while\nrunning while this Boolean is true keep\nthe game going then when we want to exit\nthe game we will set running to equal\nfalse so that will be at the\nend now we need to accept some user\ninput I'll do this with the window\nprompt we will set our guest to equal\nwindow.\nprompt I'll use a template\nliteral guess a\nnumber\nbetween I'll add a\nplaceholder our\nminimum through add another placeholder\nour\nmaximum all right to test this I'm going\nto\nconsole.log the type of\nguess as well as what guess is there's\nsomething I need to show you guess a\nnumber between one and 100 I'll guess\nsomething right in the middle 50 let's\ninspect go to console so my user input\nof 50 is a string data type we'll need\nto convert it to a number for\ncomparisons so after we get our guess\nlet's reassign it and typ cast it as a\nnumber\ntype let's try that again guess a number\nbetween 1 and 100 I'll type 50 okay\ninspect console we have our guess of 50\nand it's a number data type what if you\nwere to type in something that wasn't a\nnumber like a string of characters such\nas\nPizza here's the\nresult if you type cast some characters\nthat are non-numeric you know the number\nZ through n you'll end up with not a\nnumber Pizza can't be converted to a\nnumber\nunfortunately I will delete this line of\ncode we no longer need it I'll add an if\nstatement there's a function to check to\nsee if something is not a number\nis not a number\nfunction if our guess is not a number if\nthis evaluates to be true let's add an\nalert window.\nalert please enter a valid\nnumber guess a number between 1 and 100\nwhat if I type\npizza please enter a valid number now\nwhat if somebody types in a guess that's\nbelow our minimum or above our maximum\nI'll add an else if\nstatement else if our guess is below our\nminimum or our guess is above our\nmaximum will window. alert please enter\na valid number again guess a number\nbetween 1 and 100 what if I type in 150\nthat's above our maximum please enter a\nvalid number please enter a number\nbetween 1 in 100 netive -1 please enter\na valid number if the user's guess is a\nnumber and it's between our range\nbetween the minimum and the\nmaximum we'll execute an L statement if\nthey reach the L statement that means\nthey have a valid number we'll increase\nour attempts variable by one attempts\nPlus+ to increment\nit if the\nguess if the yes is less than the answer\nthen will window.\nalert too low try\nagain else if the guess is greater than\nthe\nanswer will window.\nalert to high try again if the guess\nisn't lower than the answer and the\nguess isn't higher than the answer that\nmeans the guess must equal the answer\nwithin an else\nstatement we'll congratulate the user\nthey have the right answer\nwindow.\nalert\ncorrect the\nanswer was and I should probably use a\ntemplate literal for this if we're\ninserting\nvariables the answer\nwe'll let the user know how many\nattempts it took it took\nyou the variable\nattempts then the word\nattempts at the end of our lse statement\nwe'll move running equals false to\nwithin the lse statement at the end to\nexit the game we no longer want to play\nonce we have the correct answer all\nright and this should work let's try it\nguess or not number between 1 and 100\nI'll guess something right in the middle\n50 too low try again okay so the answer\nis between 50 and 100 75 too high so\nit's between 50 and\n75\n62 two\nlow\n68 two high so it's between 62 and\n68\n65 too\nhigh 6 three to\nlow\n64 yeah correct the answer was 64 it\ntook you seven attempts and we can exit\nall right everybody so that is a number\nguessing game in\nJavaScript hey welcome back so today I\ngot to explain functions in JavaScript a\nfunction is a section of reusable code\nyou declare that code once and you can\nuse it whenever you want all you have to\ndo is call the function to execute that\ncode here's an example we'll create a\nfunction to sing Happy Birthday whenever\nwe call this function it's going to sing\nHappy Birthday so to declare a function\nyou type function a unique function name\nlet's name our function happy birthday\nbecause it's well the happy birthday\nfunction then you add a set of\nparentheses then you add a set of curly\nbraces any code we write between this\nset of curly braces we can reuse\nwhenever we want so what do we want to\ndo exactly with this function I'll\ncreate the lyrics to my own happy\nbirthday\nsong\nconsole.log\nhappy birthday to you let's repeat that\nagain happy birthday dear\nyou happy birthday to\nyou trust me I'm going somewhere with\nthis so we have a function when we run\nthe program it currently doesn't do\nanything to execute this code within the\nfunction function we have to call the\nfunction by its name happy birthday then\nadd a set of parenthesis so now we\nshould execute this code yep happy\nbirthday to you happy birthday to you\nhappy birthday dear you happy birthday\nto you so to call a function you type\nthe function name then you add a set of\nparentheses I like to think of the\nparentheses as two telephones talking to\neach other that's how I remember it so\nif I were to call this function again\nwhat do you think's going to happen well\nwe're going to execute this function\ntwice three times we'll execute it three\ntimes as many times as I want in fact\nthat's what a function is it's a section\nof reusable code reuse it whenever you\nwant you just have to call it you can\nsend a function some values or variables\nlet's change our happy birthday function\nI will turn this line into a template\nliteral let's replace you with the\nplaceholder then we'll add a\nusername I'll add one one more\nline we'll use a template\nliteral you are insert a\nplaceholder age years\nold so when I run this program we have\nan uncaught reference error username is\nnot defined at happy birthday so our\nhappy birthday function doesn't know\nwhat our username is or the age so we\ncan send some information to the\nfunction when we call it so within the\nset of parentheses what would we like to\nsend this function let's send our\nname so whatever values you place within\nthe function be sure to comma separate\nthem so why don't you go ahead and send\nthe happy birthday function a name and\nan age but there's one step missing\nthese are known as arguments they're\ndata that you send a function but you\nneed a matching set of parameters within\nthe parentheses of the Declaration in a\nway we can Define some temporary\nvariables and they're all comma\nseparated we will Define a username\nparameter as well as age now this\nfunction should work properly happy\nbirthday dear bro code you are 25 years\nold so these are parameters and what you\nsend to the function are arguments let's\ncall the function but send different\ninformation happy\nbirthday uh how about\nSpongeBob SpongeBob will be I don't know\nhow old he is according to SpongeBob\nlore but let's say he's 30 years old\nhappy birthday dear SpongeBob you are 30\nyears\nold how about Patrick this time it's his\nbirthday everybody gets a\nbirthday Patrick will be\n37 happy birthday dear Patrick you are\n37 years old so that's a benefit of\npassing arguments to a function when the\nfunction receives this data it can do\nsomething with it now the order of the\nparameters does matter if I were to\nswitch age and username here's what\nhappens happy birthday dear 37 you are\nPatrick years old with the arguments\nthat you're passing to your function\nyou'll want to be sure that the\nparameters match up all right now I'm\ngoing to cover the return keyword we'll\ncreate a few other function examples\nwe'll create a function to add two\nnumbers function\nadd then we'll need two arguments which\nwe will name X and Y so when we invoke\nthis function I would like to add X and\nY together I'll create a temporary\nvariable named result just to store the\nresult result = x +\ny so I'm going to add two numbers\ntogether\nlet's add two and three together and\nlet's see what\nhappens well nothing appears to happen\nwell we can send some data back to the\nplace in which we call a function but we\nneed to use this return keyword let's\nreturn the result so 2 + 3 should be 5\nafter this function resolves think of\nthis function becoming the value five so\nwe'll probably want to do something with\nthat value I'll store that with within a\nvariable let answer equal add 2 and\nthree then let's\nconsole.log the\nanswer which should be five when you\nreturn something from a function after\nyou resolve the function think of it as\nbecoming whatever is returned in this\ncase it's our\nresult or otherwise I can place this\nfunction within\nconsole.log if we don't plan to to store\nit at\nall so add two and three then display\nthe result which is five there is a\nshortcut too you don't necessarily need\nto declare a variable within this\nfunction we could shorten this\nto return x + y that is also valid so\nthat should return five okay let's\ncreate a subtract\nfunction function\nsubtract\nwill return x -\ny but we need a matching set of\nparameters because I forgot that okay\nlet's see what happens when we subtract\n3 from 2 that'll give us 1 Let's\nmultiply\nfunction\nmultiply we'll multiply X and Y\ntogether return x * y we will multiply 2\n* 3 which is 6\ndivide we need parameters X and\nY then return x /\ny then we will invoke the divide\nfunction pass into two and three and the\nresult is 0.666 repeating let's go over\na more complex example we'll create a\nfunction to determine if a number is\neven or\nodd here's the function\nfunction is\neven we have one parameter a number so\nwhen we invoke the function we'll have\nto pass in a number so when we receive a\nnumber how do we check to see if this\nnumber is even here's one solution we'll\nuse an if\nstatement if our\nnumber modulus 2 modulus gives you the\nremainder of any Division if this number\ndivides by by two evenly if this is\nequal to zero and yes I'm using the\nstrict equality operator I'm trying to\nuse that more often if our number is\ndivisible by two then let's\nreturn the Boolean value\ntrue else will return false\nokay let's\nconsole.log let's check to see if a\nnumber is even let's start with 10 is 10\neven that is true how about 11 that is\nfalse 12 12 is even so that's kind of\ncool if you would like a shortcut for\nthis you can use the trary operator that\nwould look something like this we are\ngoing to return then a condition what\nare we checking is our\nnumber modulus\n2 strictly equal to zero question mark\nso that is the tary operator the\nquestion mark\nif it is true then we will return a\nBoolean value of true colon false if\nit's false is 12 even that is true is 13\nEven no it's not it's odd how about 14\nthat is true all right last example I\nthink we're probably getting the hang of\nthis now we'll create a function to see\nif an email is\nvalid function is valid email\nwhat kind of information are we going to\nsend we'll set that up as a parameter we\nwill need an email we'll invoke the is\nvalid email function and pass in an\nemail why don't you type in your email\nI'll just make one up bro\nfake.com so when we invoke this function\nthis string of text will become our\nemail we'll check to see if our email\ncontains the at\ncharacter we'll use an if\nstatement if email and there's a\nbuilt-in method for this the includes\nmethod if our email\nincludes the at\ncharacter then we will return true that\nis a valid email they have the ad\ncharacter else we will return\nfalse is my email valid that is true\nlet's remove the at character brof\nfake.com maybe it's a website or\nsomething that is false let's try\nanother\nemail again we're going to invoke the\nfunction is valid\nemail\nelonmusk.com don't actually go there I\ndon't know what's going to pop up uh\nthat is not a valid\nemail all right how\nabout Zucker\nBorg\nata.com\nthat is a valid email it contains an at\ncharacter and for something like this if\nwe're returning either true or false we\ncan use the tary\noperator\nreturn then our condition is we're going\nto check if our email includes the at\ncharacter then add the tary operator if\nthis is true return true else we will\nreturn false so these should be the same\nwhich they are all right everybody so\nthat's an introduction to functions it's\na section of reusable code you declare\nsome code once and use it whenever you\nwant you call the function to execute\nthat code if you need to send your\nfunction some data you'll need a\nmatching set of arguments and parameters\nand you can return something too with\nthe return keyword we'll have more\npractice with this in the future don't\nworry and that is an introduction to\nfunctions in\nJavaScript\nhey what's going on everybody so today\nI'm going to explain variable scope in\nJavaScript variable scope is where a\nvariable is recognized and accessible in\nthis beginner's tutorial we'll be\ndiscussing the differences between a\nlocal scope and a global scope suppose\nwe have a variable let X = 1 each\nvariable name needs to be unique within\nthat scope I couldn't declare another\nvariable named X where I set X to equal\n2 if I were to run this we have a syntax\nerror\nidentifier X has already been declared\nyou can reuse the same variable names in\nyour program as long as they're within\ndifferent Scopes to demonstrate let's\ncreate two functions function Function\nOne within function one we will declare\na variable x x = 1 then we will\nconsole.log whatever X\nis then let's create function two by\ncopying function one and then paste it\nfunction 2 x will equal 2 console.log\nx if I were to invoke Function\nOne X = 1 if I were to invoke function 2\nwell x =\n2 so we have two variables with the same\nname in our program that's legal as long\nas they have different Scopes any\nvariable declared inside of a function\nhas a local scope or anytime you declare\na variable within a set of curly braces\nthere's no naming conflicts because\nthey're within different Scopes that way\nyou can declare variables with the same\nname which we've done with X now\nfunctions can't see inside of other\nfunctions within function two we will\ndeclare variable y equal 2 then\nconsole.log X within function one we\nwill console.log\ny if I were to invoke function one we\nhave an uncaught reference error why is\nnot defined at Function One\none functions can't see inside of other\nfunctions function one has no idea what\nY is we've declared that within another\nfunction it's kind of like functions are\nneighboring houses you can't necessarily\nsee inside of your neighbor's house\nfunction one has no idea what variable Y\nis likewise function two if I were to\ninvoke it function two has no idea what\nX's each of these variables are declared\ninside of a function so they have a\nlocal scope\na global scope for a variable is any\nvariable declared outside of a function\nwith Function One let's get rid of\nX and we will console.log X function two\nwe will get rid of y console.log\nx if I were to declare a variable\noutside of these functions let x equal 3\nI'll invoke function one we'll display x\nx is three let's invoke function two x\nis three any variable declared outside\nof a function has a global scope it's\navailable through the whole program a\nglobal variable is recognized and\naccessible from anywhere hey this is bro\nfrom the future I was editing this video\nand I thought of a really good analogy\nfor Global variables let's say that a\nfunction is a house we live in function\none and our neighbor lives in function\ntwo we can see inside of function one\nbut we can't see inside of our\nneighbor's house at function two any\nanything that's declared in the global\nscope isn't found within any houses it's\noutside everybody can plainly see it\nit's kind of like a creepy stalker\nthat's under a street light at 3:00 in\nthe morning everybody while inside of\ntheir house can still see everything\noutside that's an analogy I thought was\nkind of accurate to describe a global\nscope however it's not recommended to\ndeclare Global variables in a large\nprogram just because you can have naming\nconflicts in a large program I might\naccidentally reuse the variable X or\nchange it somewhere X is a very common\nname for a variable so in a large\nprogram I would stick with local\nvariables but in a small program like\nthis it's fine when inside of a function\nwe'll use any local instance of a\nvariable first if it's not found we'll\nlook at the global scope So within\nFunction One let's declare X to be\none within function two we'll declare X\nto be\n2 and then within the global scope we\nhave xal 3 if I were to declare function\none do you think X will equal 1 or 3\nwell it's one if we have two variables\nwith the same name and they're in\ndifferent Scopes we'll use the local\nversion first that's why X is one and\nnot three if I were to invoke function 2\nwell xal 2 if these local variables\nweren't\navailable we would use the global\nversion instead where x equals 3 all\nright everybody so that is variable\nscope it's where a variable is\nrecognized and accessible you have a\nlocal scope that's anytime a variable is\ndeclared within a set of krly braces\nthat variable is then only accessible to\nanything within that set of krly braces\nand a global scope is where a variable\nis declared outside of any functions\nit's available throughout the whole\nprogram and well everybody that is\nvariable scope in\nJavaScript hey what's going on everybody\nin today's video we're going to create a\ntemperature conversion program using\nHTML CSS and JavaScript so sit back\nrelax and enjoy the show all right let's\nbegin everybody we will begin within our\nHTML file make sure you've linked a\nscript to your Javascript file which\nwe'll fill in later so within the body\nof our document we will create a form\nelement within our form we will create\nan H1 heading for the title of this\nprogram which we will name\ntemperature\nconversion is\ngood after our H1 element we'll create\nan input\nelement this is a self-closing tag it's\na text box since we're going to be\nconverting temperatures I will set the\ntype to be number so that should give us\nsome arrows to increase or decrease the\nnumber or type one in if we need to I'm\ngoing to give this text box an ID of\ntextbox we'll be referring to this text\nbox by its ID later I'm also going to go\nahead and set an initial value of zero\nthen we can increase or decrease the\nnumber like I said before it is a little\nsmall but with CSS we will increase the\nsize what I'm going to do now is create\ntwo radio buttons along with\nlabels so we have input input is a\nself-closing tag the type will be\nradio and for the\nID this will will be a radio button to\nconvert to\nFahrenheit I can never spell Fahrenheit\nwe'll want the radio buttons in the same\ngroup I will set the name of the group\nto be\nunit oh looks like I misspelled type\nthere we go so I'm going to place our\nradio button on a new line so within our\nfirst input element I will add a line\nbreak all right so after our first radio\nbutton I'll create a label for\nit label this lab will be\n4 2\nfah and the text will be Celsius to\nFahrenheit or if you prefer you could\ncreate like an\narrow I don't really like the look of\nthat let me use an emoji instead so on\nWindows to create an emoji you can hold\nwindows and\nsemicolon is there an\narrow that'll work so when you click on\nthe label you should also be able to\nselect the radio button that's because\nthe four attribute is the same as the ID\nattribute of the radio button okay let's\ncopy both the first radio button and the\nlabel then paste it but change\nFahrenheit to\nCelsius let's switch these\naround Fahrenheit to\nCelsius to Celsius I'm also going to add\na line break after our first\nlabel so right\nhere as well as here Google wants to\ntranslate my web page from German to\nEnglish it's probably because of the\nword fahrenheit I'm guessing now I'll\ncreate a\nbutton the type will be button the text\nwill be submit there is an onclick\nattribute for\nbuttons\nonclick\nwhen we click on this button we can\nexecute a JavaScript\nfunction eventually we'll be creating a\nfunction named convert actually let's\ntake care of that now before we forget\nSo within our Javascript file function\nconvert we'll fill this in\nlater so when we click on the button we\nwill execute the convert\nfunction then lastly we're going to\ndisplay a result whatever the new\ntemperature is we'll use a paragraph\nelement the ID will be result and just\nas a placeholder for now I'm going to\ntype select a\nunit all right so far so good let's\nstyle this program with CSS now be sure\nto save your HTML file we'll move on to\nCSS we will first change the body of our\ndocument let's change the font family of\nthe body of our document I'll pick aiel\nwith a backup of son serif\nI'll change the background color too\nbackground- color I like using hsl\nvalues let's type a color such as black\nwe will change the color to be hsl I'll\ngo with a very light gray color like\n95% so the background is going to be\nslightly light gray we'll fill in the\nform section to be Pure White we will\nselect our one element that's going to\nbe the header I'll pick a color again\nI'll be using hsl\nvalues let's go with I don't know blue\nfeel free to pick a different color if\nyou would like that's not\nbad then we'll fill in the form our form\ncontains pretty much all of these\nelements so let's select our\nform I will change the background color\nI'll just copy this line and paste\nit but I'll I'll make this Pure\nWhite I'll text align Center everything\nwithin this\nform so everything should be\ncentered I'll set a Max width of the\nform because right now it's taking up\n100% of the width of the web browser so\nmax width will be how about 350\npixels we would like this form to be\nwithin the middle aligned horizontally\nwe can set margin to be\nAuto to automatically Center that I'll\nadd a little bit of padding around the\nelements within our\nform\npadding let's do 25\npixels I'll smooth the corners of the\nform using border\nradius border\nradius 10\npixels then I'll add a box\nshadow box Shadow the first value is the\nhorizontal off offset let's set that to\nbe 5\npixels then the vertical offset I will\nset that to be 5 pixels the third value\nis the blur radius because right now\nit's fairly concentrated let's stick\nwith 15 pixels not bad you can also\nselect a color again I'm going to use\nhsl\nvalues you can also change the\ntransparency I'll set mine to be\n30% or approximately 30%\n0.3 not bad so that's my box Shadow now\nwe're going to change the text box so\nthis text box does have an ID text box\nlet's select this element by its\nID I'll set the width to be\n50% it's going to take up 50% of the\nwidth\navailable let's text align\nCenter the number is going to be right\nin the middle let's change the font\nsize let's do 2 em for\n200% I'll add a\nborder to pixel\nsolid then I'll pick some hsl values for\nthe\ncolor I'll make it a little\ntransparent maybe like\n80% let's select a border\nradius for pixels to smooth the\ncorners I'll add a little bit of margin\nbelow the text\nbox\nmargin-bottom 15 pixels is\ngood that's going to push the radio\nbuttons down further just to give this\ntext box more space let's work on the\nradio buttons next so we are selecting\nthe\nlabels so let's take every\nlabel I'll change the font size so it's\na little a little bigger 1.5 em for\n150% I'll make the font weight to bold\njust to bold\nit there let's select our\nbutton we are selecting our button I'll\nadd a little bit of margin above the\nbutton margin-top 15\npixels let's change the background color\nof the button pick a color I'll pick red\nand again I'm going to use hsl values\nbecause I like\nthem Ah that's\ndecent I'll change the font size of the\nbutton 1.5 em for\n150% I'll remove the border border\nnone I'll add some\npadding 10 pixels for the top and bottom\nof the button 15 for the\nsides I'll round the corners with border\nradius border radius 5\npixels I'm going to change the font\ncolor color\nwhite then when I hover my cursor over\nthe button I will change the cursor to\nbe a\npointer and that appears to work\nnow so when I hover over the button I'll\nuse the hover PSE sudo class to change\nthe background color of the button we\nare selecting our button then select the\nhover sudo class we'll make the\nbackground color just a little bit\ndarker we'll change the lightness of our\nhsl value to be like 10% darker so I\nhave 60% I'll change that to be 50 so\nnow the background should change when I\nhover over the button lastly let's\nchange the CSS properties of the\nresult so this should have an ID of\nresult\nresult I'll make the font size a little\nbit bigger font size 1.75 em is\ngood and I'll make the font weight bold\nfont weight bold all right and that is\nall the CSS we need be sure to save\neverything and then we will move on to\nour Javascript file all right so what I\nlike to do is at the top of my\nJavaScript program I will declare all of\nthe constants and variables that I'll\nneed so let's get our text box I'll set\nthis to be a constant const text box\nequals\ndocument. getet element by\nID the ID that we're selecting is our\ntext\nbox we'll need the two Fahrenheit radio\nbutton let's copy this line paste it get\nthe ID of two\nFahrenheit const 2 Fahrenheit get\nelement by ID 2\nFahrenheit then 2\nCelsius\n2\nCelsius const 2 Celsius the ID is 2\nCelsius so that will be this radio\nbutton copy this line paste it then we\nneed the result to display the\nresult result get element by ID\nresult within our HTML file we don't\nnecessarily need to select a unit\nanymore We'll add that later if somebody\npresses submit without selecting a radio\nbutton\nthen we need let temp for the\ntemperature when we click on the submit\nbutton we will execute this function\nconvert so what are we going to do\nwithin this function we'll begin with an\nif statement we'll check to see if our\ntwo Fahrenheit radio button is selected\nso take two\nFahrenheit we'll use the checked\nproperty if this radio button is checked\nit's going to return true if it's not\nit's going to be\nfalse else if 2 Celsius is\nchecked to celsius. checked we'll\nperform some different\nactions else let's change the content of\nour\nresult so here result. text content\nequals select a unit let's see if this\nworks be sure to save everything\nI am not going to select a radio button\nI'm just going to submit and that's\ncorrect select a unit we didn't select\none let's be sure that these two radio\nbuttons are working just temporarily I'm\ngoing to change the result within the if\nand else if\nstatement you\nselected two\nFahrenheit and you selected 2\nCelsius I just want to be sure that\nthese radio buttons are working so let's\nconvert 2 Fahrenheit submit you selected\n2\nFahrenheit we'll select to the second\nradio button you selected 2 Celsius okay\nwe know that this program is reading\nthese radio buttons successfully so we\nno longer need these two lines of\ncode we're going to get the number from\nour text box we'll store that within\ntemp temp for temperature temp equals\ntake our text box\naccess the value\nwithin so when we accept user input it's\nof the string data type I'm going to typ\ncast the value as a number so we can use\nit with\nmath okay then we're going to take our\ntemperature and convert it to Fahrenheit\nhere's the formula temp equals\ntemp * 9 / 5 +\n32 then we're going to update the text\ncontent of the\nresult result. text content equals our\ntemperature then I'm going to add plus\nFahrenheit so to add the degree symbol\non Windows you can hold alt then type\n0176 on the\nnumpad so this will be\nFahrenheit let's type 100 De Celsius to\nFahrenheit that gives us 212° fah 10\nwould be 50 1° c would be\n33.8 0 is 32° F if you would like to add\nsome Precision following our temperature\nthere's a built-in method to\nfixed We'll add one point of precision\nthis will give us one digit past the\ndecimal place 0° cus converted to\nFahrenheit is 32.0 De\nF 10° C is 50° F let's copy these three\nlines then paste them within the else if\nstatement we'll keep this line the same\nbut we'll change the\nformula temp equals within parentheses\ntemp -\n32 * 5 / 9 then change fit to\nCelsius so what is 32° fah converted to\nCelsius\nthat is\nzero 100 is\n37.8 all right everybody so that is a\nsimple temperature conversion program\nusing JavaScript HTML and\nCSS hey what's going on everybody so\ntoday I'm going to explain arrays in\nJavaScript think of an array as a\nvariable like structure that can hold\nmore than one value for example let's\nsay we had a variable named fruit go\nahead and pick pick a fruit I'll pick an\napple our variable can store one value\nbut we can turn a variable into an array\nand it can store more than one value and\nwe can do so by enclosing all values\nwith a set of straight brackets now my\nvariable of fruit is now an array it can\nstore more than one value just be sure\nthat each value is comma separated this\ntime I'll add an\norange and a banana just to make it more\nobvious that this is an array I'm going\nto add an s so that my variable name is\nplural it's not mandatory but it helps\nwith readability I now have an array of\nfruits but let me show you something if\nI were to\nconsole.log my array of\nfruits well JavaScript is going to print\nout all of the elements in this array\neach item each value is known as an\nelement we have three elements if you\nneed to access an individual element\nfollowing the array you have to add an\nindex number enclosed in straight\nbrackets if I would like the element at\nthe first position that would have an\nindex of zero that would give me an\nApple fruits at index of one would be\norange fruits at index of\ntwo is banana if I were to attempt to\naccess the element at index 3 well it's\nundefined we only have three elements\nwithin our array 0 1 2 arrays always\nbegin with zero you can even change one\nof these elements by accessing that\narray at a given\nelement let's access our array fruits at\nindex zero I will set the equal to be a\ncoconut so now we have coconut orange\nbanana let's change fruits at index one\nto be a coconut Apple coconut banana\nindex 2 will be a coconut Apple orange\ncoconut if I set fruits at index 3 to be\na coconut let me console that log that\ntoo fruits at index 3\nwe can add a new element to that array\notherwise to add an element there's a\nbuilt-in method of arrays fruits do push\nto push an element to the end I will add\na coconut to the end of my array Apple\norange banana\ncoconut then we have\npop pop is going to remove the last\nelement Apple orange undefined the\nunshift method will add an El m to the\nbeginning take our array use the unshift\nmethod\nunshift I will add a mango to the\nbeginning of my array mango Apple orange\nbanana then we have shift to remove an\nelement from the beginning fruits.\nshift now we have an orange banana and\nmy last two elements are undefined to\nget the length of an array there's a\nlength property let's create a new\nvariable let num of fruits to store the\nnumber of fruits that we\nhave type the array name do\nlength then let's\nconsole.log the number of fruits we have\nwe have three fruits I'll add another\nI'll add a coconut to the\nend and we have four so that's how to\nget the length of an array there's a\nlength property type the array name do\nlength we can find the index of an\nelement if there's a match let index\nequals let's search for an apple fruits.\nindex of method what are we searching\nfor let's search for an apple then I\nwill display the index so our apple is\nlocated at index zero let's search for\nan orange that's index one banana that's\ntwo coconut three what if we search for\nan element that doesn't exist like a\nMaino well this method will return ne1\nthat could be helpful within an if\nstatement you can check to see if this\nmethod returns negative 1 then if it\ndoes that means the element wasn't found\nand you can let the user know if index\nequals -1 display that element wasn't\nfound now if you would like to Loop\nthrough the elements and display them\nthere's an easier way to do that you can\nuse a for\nLoop so four there's up to three\nstatements we'll need a counter or some\nsort of index let I equal Z that's the\nfirst\nstatement we'll continue this as long as\nI is less than our fruits array do\nlength property then we will increment I\nby One if we have four elements we\nshould execute this Loop four times\nduring each iteration I will\nconsole.log our fruits array but the\nindex instead of being like Z 0 1 2 3 a\nhard number we'll use our counter our\nindex of\nI and let's get rid of that line now we\nshould Loop through all of the elements\nof this array and print them out\nindividually using a for Loop we can\neven increment by different number like\ntwo i+ equals 2 so here we're only\ndisplaying the apple and the banana if I\nset index to be one then increment by\ntwo will display orange then coconut so\nusing a for Loop there's a few different\nways in which you can display the\nelements of an array if you need to\ndisplay the order of this array in\nReverse we can change this around we\nwill set our counter I to be the length\nof our array then we'll continue as long\nas I is greater than or equal to zero\nthen\niusus there's one change I'm going to\nmake we have undefined coconut banana\norange Apple so the length of my array\nis four but if I were to access our\narray fruits at index 4 where would that\nbe 0 1 2 3 that's out of bounds I'm\ngoing to set our index to be fruits.\nlength minus one 0 1 2 3 our length is 4\nminus 1 is a total of three now we're\nprinting our array in Reverse coconut\nbanana orange Apple there's also an\nenhanced for loop it's a shortcut to\ndisplaying the elements of an array you\ncan write something like\nthis let fruit\nof array\nfruits really this variable can be\nanything but I like to write a singular\nversion of my array name then during\neach iteration I will display each fruit\napple orange banana coconut this is an\nenhanced for loop it's kind of like a\nshortcut to displaying the elements of\nan array if this array name were I don't\nknow like meets you could say let meat\nof\nmeats and then display each meat\nbut of course they're still fruit that's\na shortcut you can use now to sort an\narray you can use the sort method\nfruits.\nsort and that should sort the elements\nin alphabetical order apple banana\ncoconut orange to sort them in reverse\norder you can tack on the reverse method\nto the end fruits. sort method. reverse\nmethod now they're all backwards in\nReverse alphabetical order orange\ncoconut banana apple all right everybody\nso that's an introduction to arrays\nwe'll have a lot of practice with this\nin the future so if you don't remember\neverything that's okay an array is a\nvariable like structure that can hold\nmore than one value a variable can hold\none value an array can hold many and\nwell everybody those are arrays in\nJavaScript hey everybody today I'm going\nto explain the spread operator in\nJavaScript the spread operator is\nrepresented by three dots the spread\noperator allows an iterable such as an\narray or string to be expanded in two\nseparate elements what this does is\nunpack the elements here's an example\nlet's create an array of\nnumbers pick some numbers I'll just pick\n1 through five one 2 3 4 5 then just to\ntest this let's\nconsole.log my array\nnumbers in this array what if I would\nlike to find the greatest value well one\nway which I could do that is let's\ndeclare a maximum let maximum this is\ngoing to be a variable equals I will use\nthe max method of math what would happen\nif I place our array within this\nmethod then I will display our\nmaximum so we have not a number using\nthe max method we can't place an array\ndirectly within this method however by\nutilizing the spread operator we can\nspread this array into different\nelements so we will preedee this array\nwith the spread operator we are going to\nunpack the elements now if I run this\nprogram again we have our result of five\nwhen you use the spread operator imagine\nthat you're opening a box and taking out\nall the contents inside like you're\nunpacking something let's find the\nminimum this time let minimum equals\nmath.min we will pass our array of\nnumbers then use the operator to spread\nour array into different elements what\nis the minimum value from this array\nthat would be one you can also do this\nwith strings too you can separate a\nstring into different\ncharacters let let's create a username\nequals type your name first name and\nlast name I will create an array named\nletters letters\nequals we'll create a new array let's\ntake our username it's a string and use\nthe spread\noperator then I will display our letters\nconsole.log\nletters and here's my name divided into\ndifferent characters what we have is an\narray of characters with my array of\ncharacters I can join them back together\nand insert characters between each\nelement I will method chain the join\nmethod after our\narray We'll add a dash between each\ncharacter\nso now my username is all one string but\nthere's a dash between each character\nokay now this time we're going to create\nan array of fruits we'll make a shallow\ncopy of an array using the spread\noperator add some fruits I'll add an\napple an\norange and a\nbanana then I will\nconsole.log my\nfruits I can create a shallow copy of\nthis array using the spread operator a\nshallow copy means it's a different data\nstructure but it contains identical\nvalues I'll create a copy of fruits\nnamed new fruits\nequals an\narray let's take our fruits array then\nuse the spread\noperator let's display new fruits and it\nshould be an identical copy yep there's\nno apparent change we have two different\narrays but they contain identical\nelements we can combine two or more\narrays using the spread\noperator let's create an array of\nvegetables let's add some\ncarrots\ncelery\npotatoes I'll rename new fruits as\nFoods let's add our array of fruits\nwe're spreading\nit comma then we will spread sprad our\nvegetables\narray then we will display our array\nFoods this array contains all of the\nelements from these two arrays fruits\nand vegetables we can use the spread\noperator to combine arrays we even have\nthe capability to append separate\nelements along with unpacking these\narrays I will also add eggs and\nmilk we have all of the elements from\nour two arrays plus a few extras egg and\nmilk all right everybody so that's the\nspread operator it's three dots it\nallows an iterable such as an array or\nstring to be expanded into separate\nelements and well everybody that is the\nspread operator in\nJavaScript hey hey hey what's going on\neverybody today I'm going to explain\nrest parameters in JavaScript rest\nparameters is a parameter prefixed with\nthree dots they allow a function to work\nwith a variable number of arguments by\nbundling them into an array it's very\nsimilar to the spread operator which we\ntalked about in the last video the\nspread operator expands an array into\nseparate elements rest parameters do the\nopposite they bundle separate elements\ninto an array spread will spread an\narray into separate elements rest\nparameters will bundle separate elements\ninto an array it effectively does the\nopposite how could rest parameters be\nuseful let me give you an example say we\nhave a bunch of different\nfood const food one food one equals\nPizza we'll create a few different food\nvariables let's start with four food one\nfood two food three food four we have\npizza\nhamburger hot dog and sushi I'm going to\ncreate a function that uses rest\nparameters it's going to Output all food\nthat I send\nit we'll pretend that we're opening a\nfridge imagine that all of this food is\nin a fridge oh open fridge fridge short\nfor\nrefrigerator to use rest parameters I\nneed three dots we're going to stick all\nof this food into an array but what\nshould the array name be let's say Foods\nthat's descriptive then I'm going to\nconsole.log my array of\nfoods now I'm going to call this\nfunction open fridge I will send this\nfunction a variable number of arguments\nthis method is going to display an\narray we have food one\npizza food 2 hamburger hamburger is also\nwithin our array food three hot dog food\nfour Sushi let me add one more food\nlet's add Ramen food five will be\nRamen then I will add food\nfive you can see that I can send this\nfunction any number of arguments that I\nwould like this function is is designed\nto accept any number of arguments I\ncould combine this function with the\nspread operator when I'm displaying my\nFoods array all of these elements are in\nan array but I could separate them back\ninto separate Elements by using the\nspread operator which is the same three\ndots as the rest parameters rest\nparameters are used as parameters the\nspread operator is used whenever you\nhave an array or any sort of collection\nof something so now when I combine the\nrest parameters and the spread\noperator I can display all of my\nseparate\nelements you can even use rest\nparameters to stick all elements within\nan array so this time I'm going to\ncreate a separate\nfunction to get\nfood we will use rest\nparameters our array name will be Foods\nall we're going to do is return\nFoods take all of these separate\nelements stick them within an array then\nreturn that\narray so I'm going to create a new array\nconst\nFoods\nequals call our get food method pass in\na variable amount of arguments let's\npass in food\none food two food three food four and\nfood\nfive and then we got to display\nit\nconsole.log my array Foods\nso that's how the rest parameters can be\nused to combine elements and bundle them\ninto an array then if you want you can\nreturn the array or do whatever you want\nwith it let's go over a second example\nwe'll create a method to sum a bunch of\nnumbers together function\nsum we will use rest parameter so we can\naccept any number of arguments our array\nname will be numbers what we'll do\nwithin this method is have a result\nresult equals equal 0 we'll keep track\nof the current sum within our result\nI'll create a for Loop to iterate over\nour\narray for every let number of\nnumbers take our\nresult plus equals the current\nnumber and then we are going to return\nour\nresult now we'll have const total equals\nin our some function pass in as many\nnumbers as we would\nlike let's start with one oh then I\nshould probably display the total\nconsole.log I'll use a template literal\nyour total is I'll add a\nplaceholder\ntotal your total is $1 let's add a few\nmore\narguments two the total is now $3 three\n$6\n4 is 10 5 is\n15 let's create a function to calculate\nan\naverage let's copy our sum\nfunction let's name this function get\naverage all we have to do when returning\nour result to get the average is divide\nour result by the length of our numbers\narray divided by numbers. length\nproperty that will give you the average\nso now const total equals get the\naverage maybe these are test scores one\nstudent got a 75 another got a 100\nanother student has\n85 90 and a 50 let's\nconsole.log the\ntotal the average is\n80 let's go over example three you can\nuse the rest parameters to combine\nstrings together we will create a\nfunction to combine\nstrings we'll send in a title like\nMister a first name such as\nSpongeBob a last\nname Square\nPants he's the\nthird we still need to make this\nfunction though but const full name\nequals whatever string is returned\nall right let's work on this\nfunction function combine string let's\nmake this plural\nstrings we need to use rest\nparameters let's name our array\nstrings an easy way to do this is to\nreturn our array of strings and use the\nbuilt-in join method to join all of the\nstrings together but but we'll add a\nspace between each string all right we\nshould now have a full name variable\nthat's all of the strings combined so\nlet's\nconsole.log our full\nname Mr SpongeBob SquarePants the third\nthat's one way in which you could use\nthe rest parameters to combine a bunch\nof strings into one such as if you're\ncreating a full name all right everybody\nso those are rest parameters they allow\na function to work with a variable\nnumber of arguments by bundling them\ninto an array it's the opposite of the\nspread operator the spread operator\nexpands an array into separate elements\nthe rest parameters bundle separate\nelements into an array and well\neverybody those are rest parameters in\nJavaScript hey everybody so in today's\nvideo we're going to use JavaScript HTML\nand CSS to create a dice roller program\nthis is an optional project you will\nneed some images of dice to work with if\nyou're able to find some images of dice\nI would save them somewhere maybe on\nyour desktop once you have images of\nyour dice we're going to create a new\nfolder new folder I'll name my folder\ndiore\nimages then take all of your dice images\nmove them to that\nfolder and now we are ready to begin\nwe'll create all of the HTML elements\nthat we'll need I will create a div\nsection this div will have an ID of\ncontainer to contain our\nprogram I'll include an H1\nheading with text of dice\nroller after this H1 element I'll create\na\nlabel the label will have text of number\nof\ndice afterwards I'll use an input\nelement I'm going to zoom in a little\nbit\ntemporarily with this input element I'll\ntype in a number of dice I would like\nsuch as 1 2 3 however I can type in\ncharacters which I would like to avoid I\nwill set the type attribute of the input\nelement to be number we're indicating to\nthe user to select a number and not type\nin anything although there are ways to\ncircumvent this this will be good enough\nfor now for the input element we can set\na default value I will set the value\nattribute to equal one for the\ndefault we can go below zero I'll set a\nminimum with the Min attribute Min\nequals\n1 we can't go below one but we can\nselect any number one or\nabove now we'll create a\nbutton the button will have text of roll\ndice\nthe button will have its onclick\nattribute I keep on spelling on lick\nonclick attribute set to a JavaScript\nfunction let's say roll dice we'll still\nneed to Define this function in\nJavaScript after our button I'll create\ntwo div\nsections the first will have an ID of\ndice result this will display some text\nthe numbers of the dice we roll the\nsecond development will be for the\nimages ID dice\nimages and that is all the HTML that\nwe'll need let's head to our CSS file\nand I'll Zoom back to\n100% let's select our ID of container #\ncontainer I will change the font family\nto a sance s font such as Arial with a\nbackup of s\nserif I will text Al line\nCenter increase the font\nsize in this project I'm going to use RM\ninstead of em because we'll be working\nwith a lot of different font sizes em is\nthe font size relative to the parent RM\nis for the root for this specific\nproject I'll stick with\nRM and I will set the font weight to be\nbold let's style our button\nnext we are SEL cting our button I'll\nincrease the font size of the button to\nbe 1.5\nRM I'll add a little bit of padding 10\npixels by 15\npixels I will set the Border radius to\nround the\ncorners 10\npixels remove the Border because it's\nugly border\nnone pick background color for the\nbutton\nI'll pick something blue but I like\nusing hsl\nvalues something like that looks good I\nwill change the font color to be\nwhite and I will set the font weight to\nbe\nbold not bad when I hover my cursor over\nthe button I will change the cursor to\nbe a\npointer\nlet's change the background color of the\nbutton when we hover over it we are\nselecting the hover suda class of the\nbutton let's take our background color\nI'll increase the lightness by\n10% so that should change when we hover\nover the button now when I click on the\nbutton I'll increase the lightness even\nmore to show that it's active with our\nbutton we will select the active pseudo\nclass I'll set the lightness to be 70\n% so when we click on the button it\nshould flash momentarily which it is\nlet's style the input element cuz I can\nbarely see\nit with our input element I need to\nscroll\ndown let's increase the font size to two\nRM I'll set a width of50\npixels text align\nCenter\nand font\nweight\nbold with our HTML file we do have two\nempty div elements currently we'll style\nthese at the end once we get our images\nto populate we'll style that last with\nthe onclick attribute of the button we\nset a function of r dice now we need to\nDefine it within our Javascript file we\nwill Define a function to roll dice we\nhave a lot of constants to declare\nI'll create a constant for the number of\ndice we would like what's the value of\nthis input element I will\nDefine const num of dice what is the\nnumber of dice we need to roll\nequals document. getet element by ID the\nID of this input element is I actually\nforgot what was it oh we didn't set an\nID okay let's do that okay so for input\nelement the ID will\nbe num of\ndice num of\ndice but I would just like the value I\nwill access the value of whatever this\ninput element is for the next constant\nwe're going to get the dice result this\nempty div\nsection const dice result equals let's\ncopy this line of\ncode but we don't need the\nvalue we just need that ID dice\nresult then let's do this with dice\nimages so we can copy this paste it\nconst dice\nimages the ID was dice\nimages I'll create two empty arrays\nconst values this will be an empty array\nwe'll store all of the dice rolls the\nnumbers then we'll need an array of\nimages const images this will be for the\nimages of the dice at this point in time\nwe're going to create a for Loop that\nwill Loop once for every dice that we\nroll we have to generate a random number\nbetween one and six for each dice we're\nrolling if I'm rolling three dice I need\na for Loop to iterate three times let's\ncreate a for\nLoop let I equal 0 continue this as long\nas I is less than the number of dice\nthen increment I by One during each\niteration I need to generate a random\nnumber between 1 and six I'll store that\nwithin a constant const value that will\nbe the random number\nequals math. random method this\ngenerates a random number between 0 and\n1 but I'm going to multiply it by six to\ngive us a random number between 0 and 5\nit's not going to be a whole number\nthough so I'm going to round it using\nmath.\nfloor then enclose this part of our\nequation now we should get a random\nnumber between zero and five but I need\na random number between 1 and six so\nI'll add one to the End plus one so now\nwe'll get a random number between 1 and\nsix just to be sure that this all works\ntemporarily I'm going to con console.\nlog our value if I roll one dice we\nshould get one random\nnumber one let's try three\ndice\n546\n324 all right we don't need this\nconsole. log statement anymore we know\nthat it's\nworking with these values I'm going to\npush them into our array of values take\nour array of values use the push method\nadd our value that we randomly generate\nduring each iteration and let's see if\nthis\nworks I'm going to\nconsole.log my array of values just to\nbe sure that there's some numbers in\nthere let's roll for dice\ninspect\nconsole I have an array of four elements\nthe number\n6326 so that does\nwork all right here's the tricky part I\nneed to take my array of images use the\npush method I will create a string\nrepresentation of an HTML element I need\nto get one of the images found within\nthe SCE images\nfolder using angle brackets I will\ncreate an image\nelement I will set the source equal to\nthat folder name so my folder name was\ndice uncore\nimages dice uncore Images slash\nso with my images it might be different\nfor you mine are labeled appropriately\nyou know for one two for two three for\nthree so on and so forth I will use a\nplaceholder add our value this number\nthen follow this with the file extension\nof the images my images are PNG images\ndo pay attention to that after we exit\nthis for Loop we should have an array of\nHTML images then we're going to take our\ndice result\nconstant change the text content to\nequal all of the values all use a\ntemplate string I will display the word\ndice at a placeholder I'm going to join\nall of the elements together all of the\nvalues to do that you can take your\narray of values use the built-in join\nmethod and I will join them all by a\ncertain character or characters I will\njoin all of these numbers by a common\nand a space let's see if this works I'm\ngoing to roll one dice yep dice I rolled\na\none I rolled a four I rolled a three\nlet's roll two dice I have 2 comma 5\nfour comma 6 2 comma 2 comma 3 6 comma 3\ncomma 2 then we have to get the images\nlet's take our dice images constant\naccess the inner HTML set this equal to\ntake our array of images use the\nbuilt-in join\nmethod I'm not going to join them by any\ncharacter I'll join them by an empty\nstring and let's see if this works I\nwould like one dice yeah there it is two\nand three now for some reason if your\ndice isn't displaying with our image\nelement I will set the alt attribute to\nequal a string of dice space add a\nplaceholder\nvalue let's say I get the folder name\nwrong I will rename this as dice image\nI'll attempt to display one dice dice\nthree dice four dice three so in case\nour image can't display for some reason\nwill at least display the alternative\ntext this is good for troubleshooting\nand for screen readers for accessibility\nlet me correct the name of the folder\nagain so with our dice images at least\nfor me they kind of big and I'd like to\nspace them out a little bit our last\nstep is we're going to go back to our\nCSS\nstylesheet I will select the ID of dice\nresult that's going to be for this title\nright here I'll add some margin around\nthis text right now it's kind of\ncompressed I will set margin of 25\npixels then with our dice images ID dice\nimages with my ID of dice images is take\neach child\nimage set a width of 150 pixels should\nbe\ngood yeah they're a lot smaller now I'll\nadd a little bit of margin\ntoo margin 5\npixels yeah that's not a bad looking\nprogram all right everybody so that was\na dice roller program you can make using\nJavaScript HTML and CSS impress your\nfriends\nand that's pretty much\nit hey what's going on everybody so in\ntoday's lesson we're going to create a\nproject where we Generate random\npasswords this will help us solidify our\nunderstanding of functions and random\nnumbers this will be an exercise for\nbeginners by setting different options\nwe can change the format of the password\nand well let's begin everybody all right\nlet's begin we'll need to let our\nprogram know what the length of our\npassword is going to be let's create a\nconstant to store that const password\nlength set this equal to maybe 12 but we\ncan adjust that accordingly we'll create\na Boolean to specify if our generated\npassword is going to contain lowercase\ncharacters we'll create a\nconstant include\nlowercase do we want to include\nlowercase characters we can set this to\nbe true or false we will set this to be\ntrue do we want to include uppercase\ncharacters\ninclude\nuppercase I will again set this to be\ntrue do we want to include numbers const\ninclude\nnumbers I will set that to be true do we\nwant to include\nsymbols const include\nsymbols we'll Define a function at the\ntop of our\nprogram function to generate\npassword we have a lot of parameters to\nset up we're going to pass in all of\nthese constants as arguments so we have\na\nlength include\nlowercase include\nuppercase include\nnumbers and include\nsymbols when we call this function we\nhave to pass in all of these arguments\nso we will call our generate password\nfunction pass in our password\nlength include\nlowercase include\nuppercase include\nnumbers and include\nsymbols at the bottom of our function we\nwill be returning a password but for now\nI'm just going to write an empty string\nbecause we still need to determine what\nthat password is going to be after\nfinishing the generate password function\nthis will return a string a string\npassword we will store that within const\npassword equals whatever is returned\nfrom the generate password function and\njust so that this is more readable\nalthough not necessary I'm going to\nplace each of these arguments on a new\nline because I'm OCD about things being\nan\nalignment and then at the very end of\nthis program I will display a template\nstring of generated\npassword I'll add a a placeholder then\nwe'll display our password that we\ngenerate so right now it's not going to\ndisplay anything we're returning an\nempty string but that is everything we\nneed outside of this function to\ngenerate our password basically we're\npassing in options when we generate our\npassword do we want to include lowercase\ncharacters uppercase characters numbers\nand or symbols we have a\nnumber and a bunch of Boolean values\nwithin our password we're going to\ncreate a few constants within this\ngenerate password function we will\ncreate one long string of all of the\nlowercase characters\nchars equals I'm going to go through the\nalphabet we will have one long string of\nalphabetical\ncharacters and I think I got all of them\nso there should be 26 now we're going to\ndo this with uppercase characters\nconst\nuppercase chars\nequals I'm going to turn on caps\nlock go through the\nalphabet we'll create a constant of\nnumber characters number chars\nequals 0 through\n9 and\nsymbols const symbol\nchars which symbols would you like to\ninclude I'll just add a\nbunch that's probably good enough for\nnow feel free to add more or\nless we will create a variable for\nallowed chars meaning\ncharacters and an empty pth\npassword let password equal an empty\nstring if some of these constants are\ntrue we would like to take that\ncorresponding set of characters and\nconcatenate it to the allowed Char\nstring so what we'll do is take our\nallowed characters variable use string\nconcatenation by using plus equals we'll\ncheck to see if include lowercase is\ntrue or false\nwe can use theary operator for that if\nwe would like to include lowercase\ncharacters we will string concatenate\nour lowercase chars our lowercase\ncharacters otherwise we'll concatenate\nan empty\nstring let's do this with uppercase\ncharacters with our allowed characters\nlet's string concatenate and check if\nwe're including uppercase characters\nquestion mark if this is true we will\nconcatenate all of the uppercase\ncharacters we've declared otherwise\nwe'll concatenate an empty string so we\ndon't include them let's do this with\nnumber\nchars include numbers are we including\nnumbers within our password if so we\nwill return our number Char\nstring and then\nsymbols are we including symbols within\nour password if so concatenate our\nstring of symbol character\nall right just to test everything\nafterwards I'm going to\nconsole.log our allowed\ncharacters so right now I'm going to\nswitch all of these constants to be\nfalse so right now we're not including\nany characters if I were to set include\nlowercase to be true we would include\nall of the lowercase characters that's\none long string Let's test uppercase yep\nwe are including all of the uppercase\ncharacters include numbers yes that\nworks and include symbols that also\nworks at this point in the program we're\ngoing to have one gigantic string of all\nof the possible characters before we\nmove on with the program I do want to\nrun some checks using some if statements\nfirst let's check to see if the password\nlength is zero or less than zero right\nnow it's set to\n12 using an if statement\nif the length the length of the password\nis less than or equal to zero we need to\nlet the user know that the password\nlength must be at least one we will\nreturn a\nstring password length must be at least\none right now we're not generating a\npassword we're returning an empty string\nif I set the password length to be zero\nwe will generate this message pass\npassword length must be at least one or\neven a negative number\nlike1 password length must be at least\none let's set that back to be 12 what if\nwe don't select any options what if all\nof these character options were\nfalse we can check the length of our\nloud characters variable so\nif our loud characters length property\nis strictly equal to zero this will only\nbe possible if all of these options are\nset to false we will return a template\nstring at least one set of\ncharacters needs to be\nselected and let's see if this works yes\nit does at least one set of characters\nneeds to be selected I can select any\noptions that I would like like I will\nset these all to be\ntrue now here's the hard part for as\nmany iterations as our password is we\nwill select a random character from all\nof the different\npossibilities we will use a for\nLoop we will let I be our index our\ncounter we will continue this for loop\nas long as I is less than the length the\npassword length then increment I by One\nduring each iteration if our password\nlength is 12 we will execute this for\nLoop a total of 12 times now we will\ngenerate a random index const random\nindex equals we will use the random\nmethod of\nmath this generates a random number\nbetween 0o and one I can multiply this\nnumber that's randomly generated by the\nlength of our allowed\ncharacters let's say we're including\nonly lowercase characters well this is a\ntotal of 26 characters in the\nalphabet if I'm taking math.random * 26\nI'll be given a random number between 0\nand 25 but I will need to round it down\nlet's enclose this equation with the\nfloor method of math to round down math.\nfloor we'll use string concatenation\nwith our password Cur our password is an\nempty string but we will use string\nconcatenation we will string concatenate\na randomly chosen character from our\nstring of allowed characters password\nplus equals our allowed characters at\nthe index of random\nindex then at the end of this program we\nwill return our\npassword and let's see if this works\nlet's close out of this function we\ndon't need it anymore\nand let's see if this works yeah there's\nour password so every time I run the\nprogram I get a new random password and\nI can turn these options on and off\nlet's set all of these options to be\nfalse to begin\nwith and I will set the length to be\nzero let's see what happens password\nlength must be at least one all right\nhow about a password of 10 10 characters\nlong at least one set of characters\nneeds to be selected let's select only\nlowercase\ncharacters yep we only have lowercase\ncharacters let's allow uppercase\ncharacters\nnow let's allow\nnumbers I didn't get any of that time\nlet's do it\nagain okay there's a number I guess\nnumbers don't come up very frequently\nand let's include\nsymbols and there's a few symbols in\nthere all right everybody so that was an\nexercise to Generate random passwords it\nshould give you some practice with\nfunctions and working with random\nnumbers and well everybody that was a\nrandom password generator in\nJavaScript hey welcome back everybody so\ntoday I got to explain callbacks in\nJavaScript a callback is a function that\nis passed as an argument to another\nfunction they are used to handle\nasynchronous operations such as reading\na file Network requests or interacting\nwith databases these activities take\nsome time to complete now with\nJavaScript we don't necessarily wait for\na process to finish before continuing\nwith the rest of the program for example\nif we were to read a file if it takes a\nlong time to read that file JavaScript\nmight continue on with the rest of the\nprogram we might attempt to display the\ncontents of that file before we're\nfinished reading it that's where\ncallbacks come in we're telling\nJavaScript hey when you're done call\nthis next when you're done reading the\nfile then display the contents only\nafter that process is complete I'll I'll\ngive you a few examples of the syntax of\na call back we'll start with something\nreally simple we'll create a function to\ndisplay the word hello this will be the\nhello\nfunction then I will\nconsole.log the\nword\nhello so I can invoke this function\nhello to execute\nit hello what if we were to create a\nfunction for goodbye function\ngoodbye we will\nconsole.log\ngoodbye okay after hello let's invoke\ngoodbye we have hello then goodbye what\nif my hello function takes a lot of time\nto process well JavaScript isn't\nnecessarily going to wait around before\nexecuting the goodbye function I'm going\nto add a few lines of code you don't\nneed to copy this these few lines of\ncode are going to make us wait for 3\nseconds you don't need to write this\nthis down but do pay attention we will\nexecute the hello function followed by\nthe goodbye function but we're going to\npretend that our hello function takes a\nlittle bit of time to\nprocess so now we have goodbye already\nexecuted followed by hello but it should\nbe the other way around I would like to\nguarantee that the goodbye function\nfollows after the hello function well I\ncan do that by adding a call back to the\ngoodbye function after the hello\nfunction is complete we'll get rid of\nthe this goodbye function\ninvocation to use a call back you pass a\nfunction as an argument to another\nfunction we will pass the goodbye\nfunction as an argument to the hello\nfunction So within the set of\nparentheses type the name of the\nfunction goodbye now be sure you don't\nadd a set of parentheses after the\nfunction name you'll call it right away\nwe are passing the name of the function\nas an argument but we need a matching\nparameter I will name this parameter\ncallback and after everything within\nthis function is\ncomplete let's take our call back then\ninvoke it by adding a set of parentheses\ninvoke meaning call all right now let's\nsee what\nhappens we have our hello function\nfollowed by the goodbye function in that\norder let's create another\nfunction what about a leave function\nwe'll tell somebody to\nleave\nconsole.log leave I will pass pass the\nname of this function as an argument to\nthe hello function leave is now our call\nback after executing the hello function\nwe will execute our call back and in\nthis case it's the leave function let's\ncreate another function for wait\nfunction\nwaight\nconsole.log wait we'll pass the name of\nthe function as an argument to the hello\nfunction wait is now our call back we\nwill execute the hello function followed\nby the weight function so by using\ncallbacks we are guaranteeing that the\nfunction passed in will execute next you\ncan pass callbacks as well as other\narguments to a function let's go over a\nsecond\nexample I will create a function to sum\ntwo numbers\ntogether X comma y I'll also add a call\nback call back X comma y we have three\nparameters total within the sum function\nwe will create a local variable of\nresult add x +\ny and then I will call my callback then\nI'll pass the result as an argument to\nthe Callback function then I will create\na function to display the result to my\nconsole display console there is one\nparameter we have a result argument\nwe're\nreceiving then\nconsole.log my result\nall right now we will invoke the sum\nfunction but we have three arguments\nthat we need to pass in a call back a\nvalue for x and a value for y let's\ninvoke the display console function as a\ncall back again be sure to not add a set\na parentheses after the name because\nthen you'll invoke it right\naway X will be 1 y will be two and let's\nsee the\nresult the result is three So within our\nsum function calculate the result first\nthen after that process is finished then\ndisplay the result to the console let's\ncreate a separate function to display\nthe result to our document object window\nour web page basically uh let's pretend\nthat this wasn't\nhere I'll create an H1 element with an\nID of my\nH1 I will create a separate\nfunction\ndisplay page\nto display on the web page I think\ndisplay Dom would be more appropriate\nbut I haven't explained what the\ndocument object model is yet so let's\njust work with display\npage we will accept a result I will\nchange the text content of the my H1\nelement document. getet element by ID\nthe ID was my H1 we will change the text\ncontent\nto equal our result that we receive as a\ncallback we will use the display page\nfunction display\npage there and the result is three after\nthis calculation processes execute the\ncall back and this time we are passing\nit to the display page function that we\ncreated all right everybody so that's a\ncall back it's a function that is passed\nas an argument to another function\nthey're used to handle asynchronous\noperations operations that may take a\nvariable amount of time such as reading\na file Network requests or interacting\nwith databases we're not exactly sure\nwhen these processes are going to\ncomplete by using a callback we can\nensure that a function executes after\nthese processes are complete and not\nbefore accidentally all we're doing is\nsaying hey when you're done call this\nnext we'll have more practice with\ncallbacks especially in the upcoming\ntopics and while everybody those are\ncallbacks in\nJavaScript hey it's me again today I'm\ngoing to explain the for each method in\nJavaScript the for each method is used\nto iterate meaning Loop through the\nelements of an array and apply a\nspecified function to each element you\nhave an array we can use the built-in\nfor each method of arrays and send each\nelement through a call back to a\nfunction here's an example I'll create\nan array of numbers let numbers equals\n1-\n5 then I'm going to create a function to\ndisplay each\nelement function\ndisplay there will be one\nparameter an element we will\nindividually display each element within\nthis array\nconsole.log each\nelement I can display each element of\nthis array by using the for each\nmethod we will take our\narray dot use the built-in for each\nmethod then pass a call back as an\nargument we will pass our display\nfunction as an argument so this should\ndisplay all of the elements in my array\nto the console 1 2 3 4 5 believe it or\nnot the element argument is provided for\nus with the for each method behind the\nscenes the for each method will provide\nto a callback an element index and array\nargument an element for the current\nelement that we're on when looping\nthrough this array an index that keeps\ntrack of the current index number and\nthe location of the array itself in this\ncase it would be numbers that's why when\nwe pass the display function as a call\nback we're already provided with an\nelement argument behind the scenes so\nwe're using the for each method to\ndisplay all of the elements of this\narray let's use the for each method\nagain to double each element before\ndisplaying it I will create a new\nfunction function double to double the\nvalue of each\nelement element index and array are\nprovided for us\nautomatically for each element what are\nwe going to do let's take our array at\nindex of index index keeps track of the\ncurrent index number so during each\niteration it's going to increment by one\nstarting with zero we will take our\nelement multiply it by\ntwo all right so let's take our numbers\narray use the for each method then pass\na call back to our double\nfunction so now all of these elements\nshould be doubled let's triple them now\nwe'll create a function for triple\nfunction triple we will set the\nparameters to be the same but we will\nmultiply each element by three then\npassing a call back for\ntriple so now we have 3 6 9 12 15\nthey're all tripled let's Square each\nelement function\nSquare again the element index and array\narguments are provided for us take our\narray that we receive at index of the\ncurrent index number set this equal to\nto square a number we can use the power\nmethod of math then raise a base to a\ngiven power we are raising our base of\nelement to the power of two if I pass\nour Square function as a call back to\nfor each we will now Square each number\nbefore displaying it 1\n49625 then this time let's create a cube\nfunction function\nCube raise our element to the power of\nthree pass our Cube function as a call\nback to the for each\nmethod and now each number is cubed 1 8\n27 64\n125 let's create a more practical\nexample I will create an array of fruits\nlet fruits equals some fruit we have an\napple we have an\norange a\nbanana and a coconut we'll create a\nfunction to display each\nelement function display it's kind of\nlike what we did\nbefore an element argument is going to\nbe provided to us during each\niteration let's console.log each element\nand then we will use the built-in for\neach method of our array fruits fruits.\nfor each we will pass our function as a\ncall back to display each element of\nthis array Apple orange banana coconut\nlet's create a function to make all of\nthese strings\nuppercase\nfunction\nuppercase we'll need an element index\nand\narray element index array during each\niteration let's take our array that we\nreceive at the index of our index equals\ntake the element that we receive use the\ntwo uppercase method so we have an\nuppercase function that utilizes the two\nuppercase method remember that a method\nusually belongs to something this method\nbelongs to the element that we receive\nfunctions are Standalone before\ndisplaying each element within my array\nof fruits let's take our fruits array\nuse the for each method then apply a\ncall back to uppercase to make all of\nthe elements uppercase before displaying\nthem what I'm going to do is copy all of\nthese elements so they will begin\nuppercase I'll create a lowercase\nfunction function lowercase\nwe have our element index and array with\nthis line of code we will use the two\nlowercase method within the for each\nmethod we will pass our lowercase\nfunction as a callback to make all of\nthe elements\nlowercase let's set the elements of our\narray to be all lowercase\nagain this will be a challenge\nround we will capitalize the first\nletter in each element of this\narray we will create a function\nfunction\ncapitalize the element index and array\narguments are going to be provided to us\ntake our array that we receive at the\ncurrent index set this equal to we're\ngoing to get the first character in each\nelement we will take our\nelement get the first character Char at\nindex of zero method\nto\nuppercase to make this letter\nuppercase then we will strink\ncatenate our\nelement use the slice\nmethod we'll create a substring begin at\nindex one this portion is going to\ncreate a substring of every character\nbesides the first the first character\nwe're going to make\nuppercase so now this should work so\nlet's take our capitalize function pass\nit to the for each method and now the\nfirst character in each element is all\nuppercase all right everybody so that is\nthe for each method it's used to iterate\nover the elements of an array and apply\na specified function as a callback to\neach element you take your array use the\nfor each method then pass a call back as\nan argument it's really useful if you\nneed to apply a function to each element\nof this array and well everybody that is\nthe for each method in\nJavaScript\nhey it's me again today I got to explain\nthe map method in JavaScript the map\nmethod accepts a callback and applies\nthat function to each element of an\narray it's very similar to the for each\nmethod however it returns a new array\nthat's a key difference for example\nlet's create an array of constants I'm\npicking constants just to demonstrate\nthat we're not changing any elements in\nthis array we have const numbers I'll\nselect the numbers 1 through 5 to keep\nit simple\nI will create a function to square each\nnumber function\nSquare we have one parameter we have an\nelement all I'm going to do is return\nmath.pow this will raise a base to a\ngiven power we are raising our element\nto the power of two then returning it\nwe're going to take our array of numbers\nuse the built-in map method then pass in\nour function as a call back the map\nmethod will return a new array we will\ncreate a new array to store the values\nthat are returned so I will create\nconst\nsquares equals numbers. map and then\nlet's display our squares I'll use\nconsole.log for now\nconsole.log our squares here are all the\nnumbers squared 1 4 9 16 25 let's create\na function to cube these these numbers\nnow we'll copy and paste our Square\nfunction but change it to cube we'll\nraise our element to the power of\nthree const cubes equals take our\noriginal array numbers dot use the map\nmethod pass in a call back to the\nfunction we would like to use\nCube then we will console.log R array of\ncubes and we have some new numbers 1 8\n27 64 125 the map method is very similar\nto four each but after completion the\nmap method returns a new array we still\nhave our original numbers whereas in\nfour each we'll change them that's a key\ndifference let's go over a new example\nwe'll create an array of\nstudents const students\nequals for my first student I will pick\nSpongeBob then\nPatrick\nSquidward Sandy that's good enough I\nwill create a function to make all of\nthese strings\nuppercase\nfunction\nuppercase there is a single element\nremember the element is going to be\nprovided for us with the map method\nelement index and array but we only need\nelement in this case I will return our\nelement dot to uppercase method and\nthat's it we'll create a new\narray students what can we name this uh\nstudents upper I suppose we will take\nour array of students use the map method\npass in the function we would like to\napply as a\ncallback then I will\nconsole.log students\nupper within my array all of the\nstudents names are all uppercase let's\ncreate a function for\nlowercase function\nlowercase to lowercase I will create a\nnew array const\nstudents lower equals the name of the\narray\nstudents map pass in our function as a\ncall back then display the array of\nstudents lower now all of the names are\nnow lowercase all right third example\nthis one is more practical we'll create\nan array of dates const dates\nequals certain regions will order their\ndates differently for example you might\nhave the year followed by a month then a\nday we're going to rearrange the order\nof these dates using the map method so\ncome up with a few dates I picked 2024\nJanuary 10th 2025\nFebruary\n20th\n2026 March 30th feel free to rearrange\nthese however you want I will create a\nfunction to\nformat\ndates we have one parameter a single\nelement within this function I will\ncreate a temporary array named Parts\nwe're going to split each date into\nparts and it within an array within this\nfunction const Parts equals\nelement. split we are going to split\neach element but where we are going to\nsplit at each dash for example with my\nfirst element we'll split this date into\n2024 that will be the first element 1\nand 10 then we'll reformat these parts I\nwill return a template string so I'm\ngoing to need some placeholders\nERS so dollar sign curly braces let's\ntake our array of parts at index of one\nthat will be the month I live in the\nUnited States we arrange our dates with\nmonth then day then year I will place my\nmonth first forward slash let's include\nanother\nplaceholder Parts at index of two that\nwill be the day of the month slash\nParts at\nindex0 that will be the year we will\ncreate a new\narray\nconst\nformatted dates equals take our original\narray dates use the map\nmethod then pass the function name as a\ncall back then after I will\nconsole.log our formatted\ndates and and here they are for me the\ndates are now January 10th 2024 February\n2nd 2025 March 30th 2026 feel free to\narrange these however you like all right\neverybody that is the map method it's\nvery similar to the for each method the\nmath method accepts a call back and\napplies that function to each element of\nan array however it returns a new array\nwhen it's finished that's nice if you\nneed to preserve the original array that\nthe elements came from and well\neverybody that is the map method in\nJavas\nscript hey again everybody it's me big\nsurprise there today I'm going to\nexplain the filter method in JavaScript\nthe filter method creates a new array by\nfiltering out elements in this example\nwe'll create an array of\nnumbers we will filter out any numbers\nthat are odd let's add the numbers 1\nthrough\n7 now we need a\nfunction\nfunction is even we have one parameter\nwe have an element that's going to be\nprovided to us by the filter method we\nare going to return then write a\ncondition we will take our element\nmodulus 2 the modulus operator gives you\nthe remainder of any division you can\nuse modulus 2 to check to see if a\nnumber is even if this condition is zero\nstrictly equal to zero then we will\nreturn true we will be returning a\nBoolean true or false the filter method\nwill take any values that return true\nand stick them within a new array which\nwill effectively filter out any elements\nwe don't need that don't return true\nlet's see if this works I will create a\nnew array even nums equals take our\noriginal array use the filter method\npass in a call back is even we will\ndisplay\nconsole.log our new new array even\nnumbers and there we are 2 4 6 let's do\nthis with odd\nnumbers function is\nodd take our element modulus 2 is this\nstrictly not equal to zero that means\nthe number is\nodd let's create a new array let odd\nnums equals our original array numbers\ndo use the filter method passing a call\nback is odd let's check out our new\narray odd\nnums there we are we have the numbers 1\n3 5 7 any numbers that are odd let's go\nover another\nexample I will create an array of Ages\nI'll use const this time instead of let\nconst ages Pretend We're teaching a\ncollege class we might have some\nstudents still in high school let's say\na student is 16 another is 17 two or\n18 19 20 and then we have somebody\nthat's just a little bit older they're\num 60 we'll use the filter method to\nfilter out anybody that is under 18 we\nwill find all of the adults we will need\na function function is adult we have one\nelement as a parameter that's going to\nbe provided to us we will return a\ncondition return\ncheck our element is it greater than or\nequal to\n18 so that's our function let's create a\nnew array of adults equals take our\noriginal array dot use the filter method\npass in a call back is adult then\ndisplay our new array\nconsole.log\nadults we have five elements the age of\nthe students is 18 18 19 20 and 60 let's\ndo this with is children to find anybody\nthat's under\n18 is child\nfunction return element less than 18\nwe'll create a new array const children\nequals take our original array use the\nfilter method passing a call back is\nchild then display the new array we have\ntwo students that are children one is 16\nthe other is 17 last example we'll\ncreate an array of words const\nwords add some words I think I'll add\nsome fruit I'll add an\napple\norange\nbanana\nkiwi\npomegranate and a coconut\nI will filter out any words where the\nlength of that word is above six so we\nwill create a function\nfunction get short\nwords we have an element as a\nparameter we will return a condition we\nwill check if our element access the\nlength property of that element they're\nstrings so they all have a length\nproperty how many characters are they\nlong that's the length check to see if\nthe length of this element is less than\nor equal to\nsix if it is return true if not return\nfalse we will create a new array let's\ncall this array short words equals take\nour array use the built-in filter method\npass in a call back get short words then\nwe will console. log the new array short\nwords in our array there are four\nelements with the length of the\ncharacters of each string is six or\nunder Apple orange banana kiwi then to\nfinish this off let's get any long words\nwe'll create a new\nfunction get long words check the length\nof the element to see if it's above six\nthen we will create a new array const\nlong words equals take our original\narray use the filter method pass in a\ncall back get long words\nthen we will display our new array long\nwords within our original array there's\ntwo words that are considered long\npomegranate and coconut these words each\nhave more than six characters coconut is\nseven pomegranate is 11 all right\neverybody that is the filter method it\ncreates a new array by filtering out\nelements your callback is likely going\nto checking condition does each element\npass this condition and well everybody\nthat is the filter method in Javas\nscript what's going on everybody so in\ntoday's video I got to explain the\nreduced method in JavaScript the reduce\nmethod reduces the elements of an array\nto a single value in this example we'll\ncreate an array of prices as if it was a\nshopping cart we'll sum all of the\nprices within our shopping cart and\nreturn a total we'll need an array to\nwork with const prices equals an array\nthink of some prices type in anything as\nas long as it's a number I'll keep this\nsimple and use whole numbers I'll add\nsomething that is $5 another that is 30\n10\n25 15 and 20 we will create a variable\nfor a total const total equals take our\narray of prices we will use the built-in\nreduce method of arrays but we do need\nto pass in a call back to a\nfunction we need to create a function\nthat will sum all of these\nvalues let's create a function to\nsum our sum function will have two\nparameters the first will be an\naccumulator the second will be the next\nelement all we're going to do is return\nour\naccumulator plus our element I'll\nexplain how this works momentarily I\njust want to be sure that everything\nruns fine first within the reduce method\nwe'll pass in a call back to the sum\nfunction that will return a single value\na total in this case let's see what our\ntotal is\nconsole.log I'll use a template string\npick a unit of currency I'll pick\nAmerican dollars add a placeholder let's\ndisplay our total so my total is\n$15 if you would like to add cents to\nthe end of that you can follow this with\nthe two fixed method then add two\ndecimal places for sense all right so\nhow does this work exactly we have two\nparameters accumulator and element it\nmight be easier if I were to rename\nthese parameters you can rename\nparameters let's say accumulator is the\nprevious\nelement element is the next element\nwe're returning the previous element\nplus the next element during the first\niteration we'll have 0 and five well 0 +\n5 would give us 5 five is returned to\nthe accumulator whatever value is\nreturned becomes the accumulator during\nthe next iteration so now our\naccumulator is five the next element is\n30 then we are going to return the\naccumulator + 30 which is 35 we'll\nreturn this to the accumulator during\nthe next iteration the accumulator is\nnow 35 the next El element is\n10 35 + 10 would give us\n45 return that to the accumulator and\nadd the next element\n25 so you just follow that\npattern all right let's go over another\nexample we'll create an array of grades\nconst grades equals these will be some\nnumber grades 75 50 90 80 65 and 95\nwe'll find the maximum value from this\narray we'll create a constant to hold\nthe maximum value what is the maximum\nscore const maximum equals take our\ngrades array use the built-in reduce\nmethod then we need to pass in a call\nback to the reduce method we need a\nfunction to get\nMax there's two parameters an\naccumulator\nand the next element like I said feel\nfree to rename them we will return the\nmax method of math math. Max pass in\nthese two parameters accumulator and the\nnext\nelement within the reduce method we'll\npass in a call back to get\nMax the value returned will be the\nmaximum grid from this array so let's\nconsole.log whatever the maximum is the\nmaximum score from this array is\n95 let's do this with the\nminimum let's copy this function change\nany instance of Max to\nMin get Min math.\nMin let's create a new constant const\nminimum equals our array of grades use\nthe reduce method to return a single\nvalue then passing a call back to get\nmin let's\nconsole.log the\nminimum the minimum score from this\narray is\n50 all right everybody that is the\nreduce method it's a built-in method of\narrays to reduce the elements of an\narray to a single value you can use it\nto sum the elements of an array another\npossibility is to find the minimum or\nmaximum value from an array and well\neverybody that is the reduced method in\nJavaScript hey everyone so today I'm\ngoing to explain function expressions in\nJavaScript a function expression is a\nway to define functions as a value or a\nvariable not to be confused with\nfunction declarations where you define a\nblock of reusable code that performs a\nspecific task we're already familiar\nwith function declarations such as this\nfunction then you create a function name\nsuch as hello in this example let's\nconsole.log the\nword hello with the function expression\nwe can assign a function to a variable\nor pass it as a value to another\nfunction so this time we're going to\nwrite a function expression I will\ncreate a constant named\nhello equals a function parentheses\ncurly braces we'll do the same thing we\nwill console.log hello and if I were to\nrun this the identifier hello has\nalready been declared so for now I'm\njust going to remove this function\ndeclaration all we're doing is assigning\na function to a variable to use the\nfunction that's stored within we have to\ntake our variable name and add a set of\nparentheses to invoke it kind of like\nit's a pair of telephones talking to\neach other hello using JavaScript we\nalso have the capability of passing a\nfunction as a value I will introduce the\nset timeout\nfunction there's going to be two\nparameters\na call back to a function and an amount\nof time we're going to wait then execute\nthis function this will be in Mills\n3,000 milliseconds translates to 3\nseconds let me put this function back\nafter 3,000 milliseconds I will execute\nthe hello\nfunction 1 2 3 hello instead of using a\nfunction declaration we are going to\npass a function expression as an\nargument to the set timeout function\ninstead of a call back we will create a\nfunction we will pass an entire function\nas an argument what are we going to do\nwe will after 3 seconds\nconsole.log thee word hello and let's\nsee if this works just to prove that I'm\nnot a\nliar 1 2 3 hello in JavaScript it is\nlegal to pass an entire function as an\nargument or treat it as a value\nwe'll use previous examples of the map\nfilter and reduce methods of arrays I\nwill create an array const\nnumbers equals the numbers 1 through six\n1 2 3 4 5\n6 I would like to square each of these\nnumbers what we've done in a previous\nlesson is declare a function function\nSquare we had one parameter in that\nexample we had an\nelement what we did is we\nreturned\nmath.pow to raise a base to a given\npower we're raising our element to the\npower of two the map method will return\na new\narray const squares\nequals\nnumbers. map we're passing in a call\nback to\nsquare then\nconsole.log squares\nthis works we are using a function\ndeclaration but this time we will now\nuse a function\nexpression we will treat this function\nas a value let's cut this\nfunction replace the call\nback then paste it within the map method\nthen we just need to remove the name we\ndon't need a name and this is still\ngoing to\nwork yeah it still does we don't\nnecessarily need to think of a function\nname one of the benefits of doing this\nis that we're not polluting the global\nNam space with function names we're only\ngoing to be using this function once\nthere's no need to declare a function\nlet's create a function expression to\ncube these numbers now as a beginner it\nmight be helpful to write out your\nfunctions as a declaration first then\ntransform it into a function\nexpression function\nCube we have our element as a\nparameter I'm going to copy this return\nmath.pow element to the power of three\nwe will create a new array const cubes\nequals\nnumbers. map we don't need to pass in a\ncall back we will cut this entire\nfunction paste it within the map method\nthen we don't need the\nname then console.log cubes there are\nall the original numbers cubed all right\nI think we're starting to get the hang\nof this let's quickly use the filter\nmethod to filter out any even or odd\nnumbers I will create const even nums\nequals take our array numbers we will\nuse the filter\nmethod then we will pass a function\nexpression as an\nargument there's one parameter an\nelement we are going to\nreturn element modulus 2 to see if it's\ndivisible by zero is is the result\nstrictly equal to zero let's see if this\nworks console.log even nums there they\nare we have 2\n46 let's do this with odd\nnumbers odd nums use the filter method\nagain all we're going to change is\nstrictly not equal to\nzero return any odd\nnumbers\n135 then lastly reduce we will sum all\nof the elements of the\narray const total equals our\nnumbers do\nreduce pass in a function\nexpression we have two parameters an\naccumulator and an\nelement we will\nreturn\naccumulator plus our\nelement return the total which is\n21 we already do have some practice with\nmap filter and reduce instead of using\nfunction declarations than passing a\ncall back we can pass an entire function\nexpression as an argument to these\nmethods in the next topic I'll discuss\nArrow functions which shortens the\nsyntax even further you'll like Arrow\nfunctions all right everybody so those\nare function Expressions they are a way\nto define functions as a value or a\nvariable we've both defined a function\nexpression as a variable we stored that\nwithin this hello variable we've also\npassed entire functions as an argument\nwhich you can do with JavaScript there's\na few benefits of function Expressions\none of which is you don't need to keep\non thinking of function names you can\nperform a function once then just forget\nabout it they're also used in callbacks\nand asynchronous operations higher order\nfunctions closures and event listeners\nthese are topics we still need to\ndiscuss but we will be using function\nExpressions a lot don't worry we will\nhave more practice and well everybody\nthose are function expressions in\nJavaScript hey hello there so today I'm\ngoing to explain Arrow functions in\nJavaScript an arrow function is a\nconcise way to write a function\nexpression it's good for simple\nfunctions that you only use once here's\nthe formula you have your parameters\nArrow then some code you would like to\nperform here's an example suppose I have\na function declaration I have the hello\nfunction I'll work going to do is\nconsole.log the word hello to use this\nfunction I need to call it by its name\nadd a set of parenthesis this will\ndisplay the word hello a concise way to\nwrite the same function is to use an\narrow function we'll begin with a\nfunction expression then convert it to\nan arrow function just so we understand\nthe differences this time I will create\na constant hello hello is going to be a\nconstant that stores our function\nexpression if I were using a a function\nexpression we would say function\nparenthesis curly braces then the code\nwe want to perform console.log the\nword hello this would do the same thing\nhello a more concise way to write this\nfunction expression would be to use an\narrow\nfunction following this formula we list\nour parameters we don't have any we need\na set of parenthesis Arrow then some\ncode we would like to perform I'm going\nto console.log the word\nhello and that\nworks we're sticking an arrow function\nwithin a variable or named constant to\ninvoke the arrow function within we just\nfollow that constant or variable with\nthe set of parentheses like we're\ncalling it as if it's a pair of\ntelephones talking to each other you can\nsend some arguments to an arrow function\nwe'll need to set up the parameters I\nwill have a name parameter within our\ncode let's console.log\nI'll use a template string hello add a\nplaceholder add my name\nparameter now I need to pass in an\nargument because right now it's hello\nundefined pass in your first name as an\nargument hello bro within your code if\nyou need to include more than one\nstatement you'll need to enclose all of\nthat code within a set of cly\nbraces let's add a new\nline console\nlog you are\nold hello bro you are\nold okay let's set up another parameter\nthis time we will accept an age\nargument let's transform our second\nconsole.log to be you are at a\nplaceholder our parameter\nage years\nold now we'll pass in a second argument\nfor age\nhello bro you are 25 years old so that's\nthe basics of an arrow function you have\nyour parameters Arrow then some code you\nwould like to perform there's no need to\ncreate a function\ndeclaration let's go over another\nexample we have the set timeout\nfunction this function accepts a call\nback then a given amount of time we are\nthen going to execute this code this\ncallback after 3 seconds 3,000\nmilliseconds I will execute whatever\nthis call back is let's create a\nfunction to say hello again function\nhello we will\nconsole.log the word hello I will pass\nin a call back after 3 seconds we\nsay hello in place of a callback I could\nuse a function expression let's cut our\nfunction remove this argument then paste\nour function expression remember we\ndon't need the name for a function\nexpression this works as\nwell hello or otherwise we can use a\nmore concise Arrow function we will pass\nthat as an argument we have our\nparameters we don't have any Arrow then\nsome code\nconsole.log the word hello after 3\nseconds we display the\nword hello\nnow we'll use Arrow functions with map\nfilter and\nreduce we have an array of numbers const\nnumbers equals the numbers 1 through\nsix let's start with using the map\nfilter to square each of these numbers\nbut we will use Arrow\nfunctions const\nsquares equals our original array number\nnumbers. map normally we would pass in a\ncallback as an argument but we're not\ngoing to do that we'll use an arrow\nfunction we have one\nparameter an\nelement\narrow take each element use\nmath.pow to raise our element to a given\npower then let's console.log our\nsquares console.log squares\nthere they are here are all the original\nnum squared 1 4 9 16 25\n36 let's Cube each\nnumber const\ncubes raise our element to the power of\nthree console.log are\ncubes there are all the numbers\ncubed we'll use the filter method to\nfilter out any numbers that are odd\nconst even nums equals rray\nnumbers we will use the filter method we\ncan pass in a call back but we don't\nneed to we will pass in an arrow\nfunction we have our element as a\nparameter\nArrow we don't necessarily need a return\nstatement if we have only one line of\ncode take our element modulus 2 is it\ndivisible by two and does the strictly\nequal Z if it does it's an even number\nlet's console.log our even numbers 2 46\nlet's do this with odd\nnumbers odd\nnums take our element modulus 2 is it\nstrictly not equal to\nzero display our odd nums 1\n35 and lastly let's do reduce we will\nget a total by summing all all the\nelements of this array const total\nequals our original array reduce pass in\na call back or an arrow function this\ntime we have two arguments an\naccumulator and an\nelement we have an\nArrow return our accumulator plus our\nelement then display the\ntotal our our total is\n21 all right everybody so those are\nArrow functions they're a concise way to\nwrite a function expression they're good\nfor simple functions that you only use\nonce you list your parameters within a\nset of parentheses an arrow then some\ncode you would like to perform in this\nexample we've written a more concise way\nto use the map filter and reduce methods\nnormally we can pass in a call back as\nan argument a function expression or an\narrow function and well everybody those\nare Arrow functions in\nJavaScript hey what's going on everybody\nin today's video I'm going to discuss\nobjects in JavaScript an object is a\ncollection of related properties and or\nmethods properties are things that an\nobject has such as a first name or an\nage a method is a function that belongs\nto an object for example I have a person\nobject our person can say hello and they\ncan say by methods are just functions\nthat belong to an object what can this\nobject do objects can represent Real\nWorld objects such as people products or\nplaces in this example we'll be creating\nsome people objects people from the show\nSpongeBob we'll start from scratch\nthough we'll create a person object I'll\nuse a constant although it's not\nnecessary const person equals then add a\nset of curly\nbraces we'll start with any property\nproperties you can add as many\nproperties as you would like they're in\nkey value pairs this person will have a\nfirst name key colon then some value\nthis person's first name will be\nSpongeBob separate each key value pair\nwith a comma let's include a last name\nproperty last name colon space will be\nSquare Pants add a comma when you're\ndone with this key value pair We'll add\nan age property of 30 age has a\ndifferent data type it's a number the\nfirst two in my example were both\nstrings SpongeBob and Square Pants let's\nadd a Boolean is\nemployed col in space I will set that to\nbe true he has a job at the Crusty Crab\nokay that's good enough for now I would\nlike to access these properties let's\nconsole.log if I need one of these\nproperties take the object you're\nreferring to in this case person dot the\nname of the property let's do first name\nperson. first name property that would\ngive me SpongeBob let's do this with\nlast name take the object name dot the\nname of the property person. last name\nis\nSquarePants let's do this with age\nperson. AG is\n30 person. is\nemployed is set to true all right let's\ncreate another object we'll create an\nobject for\nPatrick const person now objects can't\nhave the same name objects need\ndifferent names for example I can't have\ntwo person objects they can't have the\nsame name syntax error identifier person\nhas already been declared I will rename\nour first person as person one our\nsecond person will be person two then\nany place in which I'm referencing\nperson will now need to be person\none\nlet's reuse these same key value pairs\nperson two's first name will be\nPatrick his last name will be star\nPatrick will be I don't know how old he\nis according to the TV series let's say\nhe's\n42 is Patrick employed no he just\nwatches TV all day now I would like to\naccess person 2's\nproperties okay well\nconsole.log person 2's first name person\n2's last name Person 2's age person two\nis\nemployed okay for person two we have\nPatrick Star 42\nfalse so those are properties of an\nobject they're key value pairs add as\nmany as you would like in this example\nthese properties mimic real world\nattributes that a person might have like\na first name last name age whatever you\ncan think of but not only that objects\ncan have dedicated functions that we\nrefer to as methods what sorts of\nactions can these objects perform for\nexample a person could eat they could\ndrink they could sleep what sorts of\nthings do people do so just to keep this\nsimple I am going to create a function\nto say hello we'll start with person\none say\nhello col in space this will be a\nfunction\nexpression what are we going to do when\nwe invoke this function let's\nconsole.log\nwhat would SpongeBob say if he's\ngreeting somebody hi I'm\nSpongeBob be sure you're not including a\nsemicolon at the end that should work\nlet's test\nit I'm going to have person one invoke\ntheir say hello\nmethod hi I'm SpongeBob let's add a say\nhello method to Patrick person\ntwo\nwe'll change the output if say hello\nwhat would Patrick\nsay\nhey I'm Patrick dot dot dot now we'll\nhave person two use their say hello\nmethod hey I'm Patrick you can add as\nmany methods as you would like so with\nthese functions we're using a function\nexpression if you prefer you could even\nuse an arrow\nfunction list your\narguments Arrow then the code you would\nlike to perform this would work\ntoo let's add an eat method eat\nfunction we'll use a function expression\nfor\nSpongeBob let's console.\nlog what is SpongeBob eating I am eating\na crabby\npatty we'll include an eat function for\nPatrick as\nwell what's Patrick going to eat Patrick\nis\neating I'm\neating roast\nbeef chicken and\npizza and if you would like you can use\nan arrow function for this\nexample list your parameters Arrow then\nthe code you would like to\nperform it's not necessary but I do like\nArrow functions person one SpongeBob\nwill use his eat method same thing goes\nwith Patrick person two\nso SpongeBob is eating a crabby patty\nPatrick is eating roast beef chicken and\nPizza all right everybody so JavaScript\nobjects are a collection of related\nproperties and or methods properties are\nwhat an object has methods are functions\nthat an object can perform they can\nrepresent Real World objects such as\npeople products or places properties are\nkey value pairs methods are functions\nthat belong to another object and well\neverybody that is an introduction to\nobject-oriented programming in\nJavaScript hey so we got to talk about\nthis this is a keyword it's a reference\nto the object where this is used the\nobject depends on the immediate context\nif we had a person object and we're\naccessing their name property we could\nreplace person with this as long as\nwe're within the context of that person\nobject we'll create an object\nconst person\none let's add a property for name the\nname will be\nSpongeBob and a favorite food property\nfave food SpongeBob likes hamburgers\nmore specifically Krabby\nPatties I will give SpongeBob a say\nhello method this will be a\nfunction all we're going to do is\nconsole.log I'll use a template\nstring hi I am I'll use a placeholder\nlet's attempt to use person one's name\nlet's see what\nhappens let's take our object of person\none I will invoke their say hello method\nlet's see what happens hello I am and\nthere's nothing here for the name inside\nof this object of person one if I would\nlike to access one of these properties\nI'm going toe received the property with\nthis this do the name of the property\nand that should work hi I'm\nSpongeBob we're using this within the\ncontext of person one it would be like\nus saying person one. name there would\nbe no difference this is a reference to\nthe object we're within if I said this\ndo favorite food well favorite food for\nshort hi I am hamburgers it would be\nlike like us saying person one. fave\nfood let's add another method I will add\nan eat\nmethod let's\nconsole.log I'll use another template\nstring add a\nplaceholder\nthis.name is eating add another\nplaceholder this. fave food\nlet's have person one use their eat\nmethod SpongeBob is eating hamburgers\nthe cool thing about the this keyword is\nthat if we create a new object with\nthese same methods we'll use the second\nobject's properties let's copy person\none paste change person one to person\ntwo the name for person two will be\nPatrick favorite food will be\nPizza let's have person two use their\neat\nmethod SpongeBob is eating hamburgers\nPatrick is eating pizza since we're in\nthe context of person two now imagine\nwe're replacing this with person\ntwo person 2.n name Person 2. fave\nfood if you were to use this outside of\nany objects I'm going to console.log\nthis what we're returned with is a\nwindow object basically we're returning\nthe window to see our website\ntechnically we're inside of an object\nalready our window object and we have\nall of these\nproperties but since we're using the\nthis keyword inside the context of\nperson one and person two we'll instead\nmake a reference to those objects hey\none thing I forgot to mention the this\nkeyword doesn't work with arrow\nfunctions for example with person two\nlet's convert this to an arrow\nfunction\nblank is eating undefined when you use\nthis within an arrow function it's\nmaking a reference to that window object\nstill our window object does have a name\nthat's why it's appearing empty but fave\nfood is undefined because our window\nobject doesn't have a favorite food\nproperty all right everybody so that is\nthe this keyword we will be using this\nkeyword a lot all it is is a reference a\nreference to the object where this is\nused and that is the this keyword in\nJavaScript what's up people so today I\ngot to explain Constructors in\nJavaScript a Constructor is a special\nmethod for defining the properties and\nmethods of objects in Prior videos we've\nconstructed objects like this we would\ndeclare an object assign it some\nproperties and some methods you know\nthis works but what if we have to create\na lot of objects here I'm manually\ncreating three different car objects\nthat can be a lot lot of work what we\ncould do instead is use a Constructor to\nconstruct these objects automatically\nall we have to do to construct these\nobjects is passing some unique data to\nthe Constructor to construct these\nobjects here's an example we are going\nto create a function\ncar do pay attention to the\ncapitalization we'll need to set up some\nparameters what sorts of properties will\nwe accept when we construct a car object\nhow about a make model\nyear and\ncolor these are arguments we'll receive\nwhen we construct a car object to assign\nthese properties we're going to use the\nthis keyword doake equals the make that\nwe\nreceive let's do this with model this\ndood model equals the model we\nreceive this doe equals year this do\ncolor equals color\nthat's good enough for now our car\nConstructor is a reusable method where\nwe can define the properties and methods\nof objects we create to use this\nConstructor I will create an instance of\nan\nobject I will use const car1 will be our\nfirst object equals we'll need to use\nthe new keyword type the name of the\nConstructor car car is a special method\nwe'll need to pass in some arguments\nwe'll need a make model year and color\nin that order my first car feel free to\nsend some different data to the\nConstructor but for me my first car will\nbe a\nFord make sure each value is comma\nseparated Mustang the year will be\n2024 and the color will be\nred we should now have a car object with\nthe name of car one and I'm going to\nconsole. log car 1's properties car 1.\nmake Ford let's do this with the other\nproperties we have\nmodel\nMustang\nyear\n2024 and color red now this method is\nreusable we can reuse it to create other\ncar\nobjects let's create const Car 2 equals\nnew car we'll pass in different data\nthis time the make will be Chevrolet\nI will pick a\nCamaro the year\n2025 and the color will be blue now I\ncan display car 2's\nproperties let's select car 2make car 2.\nmodel car 2. year car 2.c color we have\na Chevy Camaro year 2025 the color is\nblue let's create one more car same\nprocess as before const car 3 equals new\ncar I'll go with a\nDodge\nCharger the year\n2026 and the color will be\nsilver let's access K 3's properties car\n3. make car 3. model car 3. year car\n3.ol Dodge Charger 2026 the color is\nsilver another thing with these\nparameters too you can name these\nparameters anything when we assign these\nproperties it can be kind of confusing\nlike this. make equals make really we\nwrite our Constructors this way just for\nreadability technically this would work\nif we renamed our parameters for example\nmake will be parameter a model will be B\nyear is C color is D then be sure to\nchange these when we assign them A B C D\nthis would still work however this\nConstructor isn't as readable like what\nthe heck is a b c and d it would be good\npractice to clear clearly Define our\nparameters for readability purposes all\nright now let's add a\nmethod we'll take this.\nDrive equals a\nfunction we\nconsole.log I'll use a template string\nyou drive the I'll add a\nplaceholder this do\nmodel\nWith Cars 1 through three let's use the\ndrive method car 1.\ndrive you drive the\nMustang car 2. drive you drive the\nCamaro and car 3.\ndrive you drive the charger all right\neverybody so that's a Constructor it's a\nspecial method for defining the\nproperties and methods of objects it\nhelps with code reusability we can reuse\nit to create many objects instead of\nhaving to type them all out manually and\nwell everybody those are Constructors in\nJavaScript all right let's do this thing\nso I got to talk about classes and\nJavaScript classes are an es6 feature\nthat provides a more structured and\ncleaner way to work with objects\ncompared to the traditional Constructor\nfunctions that we're normally used to\nclasses are going to be really helpful\nwhen we reach future topics such as the\nstatic keyword encapsulation and\ninheritance in this example I have a\nConstructor for a product our product\nneeds a name and a price for example we\nhave a shirt and the price is 1999\ninstead of using a Constructor method\nwe're instead going to use a class our\nclass will include a\nConstructor so let's start from the\nbeginning to create a class you type\nclass then the name of the object so our\nclass is going to serve as a blueprint\nour objects will be products then add a\nset of curly BRAC\nto use a Constructor we can use the\nConstructor keyword within our\nclass list any parameters we will have a\nname and a price for each product we\nwill assign the properties of this.name\nequals the name parameter that we\nreceive this. price equals\nprice I will also create a\nfunction our function will be display\nproduct now in inside of a class you\ndon't need to use the function\nkeyword when we would like to display\nthis product we will\nconsole.log product colon space I'll\ninclude a\nplaceholder\nthis.name let's also output the\nprice price pick a unit of currency I'll\nuse American\ndollars this do price let's create some\nproduct object\nobjects const product one equals to\ncreate a new object we have to use that\nnew keyword the name of the class\nproduct The Constructor is going to be\ncalled automatically but we do need to\npass in a name and a price as\narguments we will pass in a shirt the\nprice will be\n$19.99 just to be sure that everything\nworks let's invoke the display product\nmethod product one do display product\nmethod here are the details of our\nproduct object product shirt priced\n$19.99 let's create a few more so this\nclass is\nreusable product\ntwo will be\npants I'll pick 2250 for the\nprice let's display product two product\ntwo and we will use use the display\nproduct method of our\nclass product pants the price is\n$22.50 uh looks like I only have one\ndecimal point I'm going to make one\nchange after the price I will use the\ntwo fixed method and set this to be two\ndecimals there\n2250 all right product three const\nproduct 3 equals new\nproduct our third product is going to be\nunderwear\nthis underwear is really expensive it's\n$100 it's really good underwear guys\nproduct 3. display product product\nunderwear price\n$100 here's a challenge round I'm going\nto add another method this method will\nhave one parameter sales tax we'll\ncreate a method to calculate a total\nincluding tax so let's create a new\nmethod inside of a class we don't need\nthe function keyword calculate total\nthere will be one parameter sales\ntax all we're going to do is return\nthis. Price Plus to calculate the sales\ntax we'll take this. price times the\nsales tax assuming it's a\npercentage okay let's display product\none product one. display product I'm\nalso going to create a constant for the\nsales tax that's not going to change\nconst sales tax let's say the sales tax\nis 5%\n0.05 I will create a variable const\ntotal equals let's take product one use\nthe calculate total method but we have\nto pass in sales tax we can either pass\nin this number or this\nvariable once we have our total let's\ndisplay it console.log\nI'll use a template\nstring total price in parentheses with\ntax I'll add a\nplaceholder display the total pick a\nunit of currency I'll use American\ndollars then I'll add two fixed two to\nset it to two decimal\nplaces all right our product is a shirt\nprice is $1 199.99 total price with tax\nis $20.99 9 let's do this with product\ntwo product two. display product product\ntwo. calulate\ntotal pants 2250 total price\n2363 let's check out our really\nexpensive underwear product 3. display\nproduct product 3. calculate total our\nunderwear is $100 including sales tax\nit's\n$115 all right everybody so those are\nclasses they're an es6 feature that\nprovide a more structured and cleaner\nway to work with objects compared to the\ntraditional Constructor functions that\nwe learned about in the last video\nclasses are going to be really helpful\nwith a few upcoming topics and well\neverybody those are classes in\nJavaScript hey people let's do this\nthing so the static keyword static is a\nkeyword that defines Properties or\nmethods that belong to a class itself\nrather than the objects created from\nthat class in summary a class own own\nanything static not the objects so what\nwe're going to do is create a class for\nmath\nutilities class math util for\nshort we'll create our own version of Pi\nwe'll use the static keyword the name\nwill be Pi Pi will equal\n3.14159 just the first few digits I'm\ngoing to zoom in a little if I would\nlike the static property I have to\naccess it by its class so let's\nconsole\nllog the name of the class math util dot\nthe name of the property Pi our static\nproperty is\n3.14159 I don't need to create an object\nin order to use this property I don't\nhave to type const math UIL one equals\nnew math\nyoutil I would have to type math util\none that's the name of this object in\norder to access Pi all I have to do is\ntype the name of the\nclass and that's pretty convenient\nanything declared as static belongs to\nthe class itself and not any object\ncreated from that class so now we're\ngoing to create a static\nmethod we'll use the static keyword\nwe'll get a diameter once we pass in a\nradius as an argument get\ndiameter we have one parameter a radius\nall we're going to do is return\nradius time\n2 okay let's\nconsole do log again we have to type the\nname of the class Matthew till dot the\nname of the method get\ndiameter we have to pass in a radius\nthough let's pass in\n10 our diameter is 20 let's create a new\nstatic method for get\ncircumference get\ncircumference the formula is going to be\nwe will be returning 2\ntimes this meaning Matthew\ntill.\npi times the radius we\nreceive let's\nconsole.log let me make the C Capital\nthe name of the class Matthew till dot\nget\ncircumference pass in a\nradius the circumference is\n62.83 let's create one more for get\narea static get area we need a\nradius we will\nreturn this\nPi time\nradius time radius so that's Rus\nsquared\nconsole.log Matthew till the name of the\nclass get area pass in 10 and the area\nis\n31415 in the next example we'll have a\nmix of regular properties and methods\nand static properties and methods this\nwill be example\ntwo we'll create a class of users class\nuser\nwe'll create a static variable to keep\ntrack of the amount of users we\ncreate user count I will set that equal\nto\nzero I'll include a\nConstructor let me just space this out a\nlittle our Constructor is going to be\nautomatically called when we instantiate\na new object we need one argument though\nwhen we create a new user we need a\nusername once we have our username we\nwill assign this do username equals\nusername not only that but when we\ncreate a new user I'm going to increase\nour user count by one just so we can\nkeep track of how many users we create\nso inside of the Constructor you can\nwrite additional code it's not only for\nassigning\nproperties let's take\nuser do user\ncount Plus+ to increment\nit let's create some user\nobjects const user one equals new user\npass in a username I'll pass in\nSpongeBob then let's\nconsole.log user one's\nusername which is\nSpongeBob let's attempt to access user\none's user\ncount with user one's user count we get\nundefined that's because our user\ndoesn't have user count as a property\nit's static that means it belongs to the\nclass not any objects created from the\nclass to access user count we have to\ntype the name of the\nclass user in this case we have one\nuser let's see what happens when I\ncreate a new user\nobject user 2 will\nequal\nPatrick our user count is now two\nlet's display user 2's\nname yep we have SpongeBob and Patrick\nthe total user count is\ntwo let's create a third\nuser user three will be\nSandy\nconsole.log user 3.\nusername our user count is now\nthree we have a static property that's\nkeeping track of the amount of users we\ncreate let's create a method the first\none will not be static say\nhello all we're going to do is\nconsole.log I'll use a template\nstring hello my\nusername is I'll add a\nplaceholder this do\nusername let's have user one use there\nsay hello\nmethod\nsame thing with user two and user\nthree hello my username is\nSpongeBob Patrick and Sandy now we'll\ncreate a static method we'll get the\nuser\ncount get user\ncount\nconsole.log I'll use a template\nstring there are\nI'll add a\nplaceholder\nuser. user\ncount users\nonline now in order to access this\nmethod I have to type the name of the\nclass user. getet user\ncount oops and I can't conso that log\nthat user. getet user\ncount there are three users online all\nright everybody so that is the static\nkeyword it defines properties and\nmethods that belong to a class itself\nrather than any objects created from\nthat class in summary the class owns\nanything static not the objects and well\nthat is the static keyword in\nJavaScript hey what's up everybody so in\ntoday's video I got to explain\ninheritance inheritance allows a new\nclass to inherit properties and methods\nfrom an existing class these two classes\nhave a parent child relationship a child\nwill inherit properties and methods from\na parent it's kind of like a family tree\na child will inherit genes from a parent\ninheritance helps with code reusability\nbecause we don't need to keep on\nrepeating the same properties and\nmethods if all the children share them\nhere's an example we'll create an animal\nclass class\nanimal will have a property of alive if\nyou're an animal you start off being\nalive all animals should be able to eat\nand sleep we'll create methods for\nthose we'll have an eat method all we're\ngoing to do is\nconsole.log I'll use a template\nstring this now I'll add a\nplaceholder this do\nname is\neating and a Sleep\nMethod\nsleep this this.net name is\nsleeping animal will be the parent class\nwe'll create children classes that\ninherit these properties and methods\nlet's create a few children classes\nclass rabbit our rabbit class will\ninherit all the properties and methods\nof the animal class to declare a parent\nchild relationship the child will\nextends the parent\nanimal for the rabbit I'm going to give\nthis class A Name\nname equals rabbit this will be a\nproperty if you're familiar with the\nstatic keyword you can make the static\nnow we'll create a fish class that also\nextends animal class fish\nextends\nanimal fish will have one property name\nequals\nfish and a hawk class class Hawk\nextends animal\nwill have one name\nproperty\nHawk all right let's see if this works\nif we create a rabbit fish and Hawk\nobject they should have access to these\nproperties and\nmethods let's create const rabbit equals\nnew\nrabbit\nconst fish equals new\nfish\nconst Hawk equals New\nHawk all right let's see if our rabbit\nhas an A Life\nProperty\nconsole.log take the name of the object\nrabbit do access a property or method\nalive that's our property the rabbit is\nalive but what if the hawk swoops in and\nkills the rabbit let's change the alive\nproperty of the rabbit\nrabbit. alive equals false the rabbit is\nno longer\nalive now let's see if our rabbit has\naccess to a eat and Sleep\nMethod rabbit.\neat this rabbit is eating and sleep\nrabbit.\nsleep the rabbit is sleeping Let's test\nthis with\nfish fish. alive fish. eat method fish.\nSLE\nmethod the fish is alive the fish is\neating the fish is\nsleeping and Hawk hawk. alive hawk. eat\nmethod hawk. SLE method the hawk Is\nAlive the hawk is eating the hawk is\nsleeping our children classes of rabbit\nfish and Hawk all inherited the\nproperties and methods of the parent\nanimal class this helps with code\nreusability because I don't need to\ndeclare all of these properties and\nmethods within each of the children\nclasses like\nthis we're saving a lot of lines of code\nit's not that apparent with just a few\nchild classes but imagine if you had\nhundreds of different child classes well\nby using inheritance you would be saving\na lot of time but not only that the\nchildren can have their own unique\nproperties and methods too for example\nrabbits will be able to run but fish and\nHawks can't run that's a method that\nonly belongs to rabbits within our\nrabbit class let's create a new method a\nrun\nmethod we'll\nconsole.log I'll use a template\nstring\nthis add a\nplaceholder\nthis.name is\nrunning within our fish class let's\ncreate a swim\nmethod\nswim this this.n name is swimming\nand Hawks will be able to\nfly we'll create a fly method this this\ndo name is\nflying let's minimize these\nclasses let's take our rabbit object\ndisplay the alive property the eat\nmethod the Sleep Method and the run\nmethod rabbit. run method the rabbit is\neating the rabbit is sleeping the rabbit\nis running\nnow let's do this with fish fish. alive\nfish. eat method fish. SLE method now\ndoes the fish have a run method it does\nnot fish. run is not a function run is a\nmethod that belongs to the rabbit class\nfish can't run because well they don't\nhave legs we did not give our fish class\na run method they can swim though but\nthey can't run fish. swim\nmethod the fish is swimming let's do\nthis with Hawk\nour Hawk cannot swim but it can fly\nwe'll use the fly\nmethod the hawk is eating the hawk is\nsleeping the hawk is flying and of\ncourse our rabbit can't fly or\nSwim does our rabbit have a fly method\nit does not rabbit. fly is not a\nfunction all right everybody so that's\ninheritance it allows a new class to\ninherit properties and methods from an\nexisting Class A Child inherits\nproperties and methods from a parent it\nhelps with code reusability I don't need\nto declare all of these properties and\nmethods for each of these classes I can\nsimply reuse it that helps us follow the\ndry principle don't repeat\nyourself and well everybody that is an\nintroduction to inheritance in\nJavaScript yo what's going on everybody\nso in today's video I'm going to explain\nthe super keyword in JavaScript super is\na keyword that's used in classes to call\nthe Constructor or access the properties\nand methods of a parent the parent is\nalso known as the super class it's very\nsimilar to the this keyword this refers\nto this object super refers to the\nparent of that object here's an example\nwe'll use inheritance to create a parent\nclass of animal class animal our animal\nclass will have three children also\nknown as sub\nclasses class rabbit extends\nanimal class fish extends animal class\nHawk extends\nanimal we'll add an empty Constructor\nfor now for the animal\nclass then we need a Constructor for the\nrabbit\nclass so rabbits they'll have a name\nproperty a\nand a run speed we'll assign these\nproperties within the Constructor\nthis.name equals the name that we\nreceive this. AG equals age this. runp\nspeed equals run\nspeed let's copy this Constructor now\nwith fish fish don't have a run speed\nbut they'll have a swim\nspeed let's replace run speed with swim\nspeed copy The Constructor again paste\nit Hawks in this example won't have a\nswim speed they'll have a fly speed\nthough replace swim speed with fly speed\nnow let's attempt to create some of\nthese objects const rabbit equals new\nrabbit we need a name for this rabbit\nyou could just say rabbit or if you want\nto be creative you could say something\nlike Bugs\nBunny uh but let's just stick with\nrabbit to keep it simple our rabbit will\nbe Oney old and has a run speed of 25\nmph if you use kilm feel free to use\nkilom let's do this with\nfish const fish equals new\nfish the name of our fish will be fish\nour fish is 2 years old and has a swim\nspeed of 12 mil\nhour then with Hawk const Hawk equals\nNew Hawk our Hawk will have a name of\nHawk our Hawk will be 3 years years old\nand has a fly speed of 50\nmph so when I run this program we have\nan uncaught reference error must call\nSuper Constructor in derived class\nbefore accessing the this keyword so\nwhat JavaScript is telling us is that\nbefore we can use the this keyword we\nhave to call the Constructor of the\nparent the super class within each of\nthese respective Constructors we will\ninvoke the Constructor of the parent the\nsuper class with the super keyword so\nlet's do that for for each of these\nConstructors now our program actually\nruns now so one of the benefits of using\nConstructors is that if there's any\nproperties that the children all share\nin common we can send them to the\nConstructor of the parent as you can see\nwe're repeating ourselves a lot each of\nthese children classes has a name and\nage property that we're assigning to\neach we would like to follow the dry\nprinciple don't repeat yourself so why\ndon't we write this code once and reuse\nit so within the Constructor of the\nparent will accept a name and age\nproperty we'll assign this.name equals\nname and this. AG equals age now we can\nremove that within each of the child\nclasses so we don't repeat\nourselves there's less code to right now\nbut we do need to pass in these\narguments to the parent Constructor name\nand age for\neach\nand that's all there is to it in this\nexample when we construct an object\neither a rabbit a fish or a hawk we'll\naccept three arguments a name age and\neither a run speed a swim speed or a fly\nspeed depending on the animal that we're\ncreating any properties they share in\ncommon we can send to the parent\nConstructor it helps with code\nreusability and there's a lot less to\nwrite it's not that evident with three\nchildren classes but imagine if you had\nhundreds of different classes like what\nif this was Pokémon there's like what a,\nPokémon now we would have to copy and\npaste those properties like a thousand\ntimes for each if we're constructing\nindividual Pokémon but since all of them\nshare those same properties we can write\nit in one place and make any changes\nonly in one place so let's test this to\nsee if it works let's\nconsole.log our rabbit's\nname which is named rabbit let's\nconsole.log the rabbit's age the rabbit\nis Oney old\nand let's see if the rabbit has a run\nspeed 25 as in 25 mph let's do this with\nfish fish. name fish. AG let's see if\nthe fish has a run\nspeed name is fish Age Two run speed is\nundefined because fish can't run because\nthey don't have legs but they do have a\nswim speed though swim speed 12\nmilph then Hawk hawk. name hawk. AG\nhawk. flyp speed name is Hawk age 3 the\nhawk has a fly speed of 50\nmph so that's how you can use the super\nkeyword in a class to call the\nConstructor of the parent it helps with\ncode reusability any properties that the\nchildren share in common in this case a\nname and Age The Constructor of the\nparent can take care of that we don't\nhave to repeat the set of code every\nsingle time for each child we write it\nin one place and reuse it another thing\nyou can do too with the super keyword is\nextend a method from the parent so what\nwe're going to do within the animal par\nclass is create a move\nmethod within this method we will\nconsole.log the following\nmessage the at a placeholder\nthis.name moves at a speed of add a\nplaceholder speed mph for miles per hour\nor if you prefer you can use kilometers\nour move method will have one parameter\na speed that we need to pass in to use\nSo within each of these children classes\nwe'll write a method that also extends\nthe move method of the\nparent rabbits will have a run\nmethod we'll output the following\nmessage\nconsole.log I'll use a template\nstring this add a\nplaceholder\nthis.name can\nrun let's copy our run me method paste\nit for fish but change swim to run\nbecause fish can't run this this.name\ncan\nswim then with Hawks they'll have a fly\nmethod fly this this. name can\nfly with our rabbit object let's invoke\nthe run\nmethod this rabbit can run let's do this\nwith fish fish. swim this fish can swim\nand hawkfly Method this Hawk can fly\nwithin each of these children classes\nwe're going to extend the move method of\nthe parent animal within the run method\nof our rabbit class not only are we\ngoing to Output this\nmessage we'll also extend the move\nmethod of the parent and display that\nmessage as well to refer to the parent\nclass we use the super keyword it's very\nsimilar to this but it means the parent\nuse the parents move method but we do\nhave to send a speed argument let's send\nthe Run speed of the rabbit this.\nrunspeed let's do this with our fish\nclass we'll extend the move method\nsuper. move send in this. swim speed and\nHawk super. move this. flype\nspeed now let's take our rabbit use the\nrun method and we should extend the move\nmethod this rabbit can run the rabbit\nmoves at a speed of 25\nmph let's do this with fish fish. swim\nthe fish can swim the fish moves at a\nspeed of 12 mph and hawk hawk. fly\nmethod this Hawk can fly the hawk moves\nat a speed of 50\nmph so that's how you can use the super\nkeyword to extend a method of apparent\nall right everybody so that's the Super\nKey word it's a reference to a parent it\ncan be used to call the Constructor of a\nparent and or access the properties and\nmethods of a parent and well everybody\nthat is the super keyword in\nJavaScript hey hello so uh today I'm\ngoing to explain Getters and Setters in\nJavaScript Getters are special methods\nthat make a property readable Setters\nare special methods that make a property\nwritable we can use use Getters and\nSetters to validate and modify a value\nwhen reading or writing a property it\nhelps with validation when creating an\nobject or updating one of its properties\nhere's an example we will create a class\nof\nrectangle we need a\nConstructor we will have two parameters\na width and a\nheight we will assign this. width equals\nwidth\nthis.\nheight equals\nheight now let's create a rectangle\nobject const rectangle equals a new\nrectangle for the width let's say -1\nmillion something\nridiculous and for the height I want the\nheight to be Pizza the word\npizza then let's\nconsole.log\nour\nrectangles width and the rectangle\nheight we have created a rectangle\nobject with the width of 1 million and a\nheight of pizza which doesn't make any\nsense we could use some validation when\ncreating an object we don't want people\nto enter in garbage values like negative\na million or string when we're expecting\na positive number for the width or\nheight that's where Getters and Setters\ncome in we'll begin with set letters\nwhen setting one of these properties\neither initially through a Constructor\nor updating one of them later such as\nsetting the width or height equal to\nsome value we can go through a Setter\nfirst outside of our Constructor we will\nset a property we'll begin with\nwidth this will be a special type of\nmethod the parameter will be new width\nwhat do we want to check before\nassigning this property using an if\nstatement let's check to see if the new\nwidth that the user sends us is greater\nthan zero if it is we will assign this\ndoore\nwidth using an underscore prefix it\ntells other developers that this is a\nprivate property you shouldn't touch it\nat all you could say that this private\nproperty of width is different than our\nstandard width property we will assign\nthe private property of width equal to\nthe new width we\nreceive else let's\nconsole. error not log we'll use error\nthis\ntime width must be a positive\nnumber all right let's see what\nhappens width must be a positive number\nand our width is currently undefined\nwhich is good okay let's do this with\nheight let's copy our Setter for width\npaste it but change every instance of\nwidth to be height set height New\nHeight be sure to use that Camel case\nnaming\nconvention if new height is greater than\nzero assign the private property of\nheight equal to the new height else\nconsole.\nerror height must be a positive\nnumber and there we go that worked width\nmust be a positive number and height\nmust be a positive number our width and\nheight are currently\nundefined in order to set the width and\nheight we have to pass in a positive\nnumber for the width I will say three\nfor the width four now when we access\nwidth and height those numbers still\naren't showing up that's because these\nproperties are writable via Setters but\nthey're not readable that's where\nGetters come\nin we'll create two Getters one for\nwidth we'll need to use the get keyword\nget\nwidth this will be another type of\nmethod all we're going to do is return\nthis private\nwidth and that appeared to work we have\nthree for the\nwidth let's do so with the\nheight we will return this private\nheight we have three and\nfour Now by using Setters we can even\nupdate those values later let's take our\nrectangles width set that equal to be\nfive take the\nheight set it equal to be six and that\nalso appears to work but again if I try\nand update those values to some garbage\nvalues like negative a million and the\nword\nPizza we get those errors again and our\nour object retains its initial values\nthat we previously assigned it three and\nfour with Getters we can even use the\nproperty accessor that dot to access a\nproperty that doesn't necessarily exist\nfor example we will get\narea we'll perform a\ncalculation we will return this private\nwidth times this private\nheight\nso now we can access area as if it was a\nproperty we have three for the width\nheight four our width times our height\ngives us an area of 12 our area isn't a\nproperty technically it's not found\nwithin our\nConstructor but we can access it as if\nit was a property with a getter with\nGetters you can even add additional\nlogic I would like to preserve the\ninitial values of our width and height\nwhen I return their value I will use the\ntwo fixed method to give each of these a\nPrecision of\none let's do that with the width the\nheight and the area but that's going to\nbe a little more complex we'll enclose\nwidth time height then add to fixed\none and why stop there I'll add\ncentimeters to the end of each I'll use\na template\nstring add a\nplaceholder then add CM for\nM 3.0\ncm and the\narea 12.0 CM let's make that centimet\nsquared because it's area Technically\nwhen you're assigning values even when\nyou're initially creating an object you\ncan go through the Setters for input\nvalidation when you retrieve values and\ntry and read them you can add additional\nlogic too let's go over a second example\nwe will create a class of person we need\na\nConstructor we will accept a first\nname last\nname and an\nage this. first\nname equals first\nname this. last name equals last\nname this. AG equals\nage let's construct a person\nconst person equals new\nperson let's enter in some values that\ndon't make sense the person's first name\nwill be the number 420 their last name\nis the number 69 their age is the word\nPizza let's\nconsole.log our person objects first\nname which is the number\n420 their last name 69 and their\nage the word Pizza we need to validate\nthis input before assigning the\nproperties that's why we need Setters we\nwill set the first name property this is\na special type of method the parameter\nis going to be a new first name\nwe need to be sure that this value\npassed in is a string and the length is\ngreater than zero we could write\nsomething like this we need an if\nstatement let's check the type of our\nnew first name is it strictly equal to a\nstring and is our new first nam's length\nproperty greater than\nzero if all of that checks out we will\nassign this this private first name\nequal to the new first name we\nreceive else let's console.\nerror first name must be a\nnonempty string let's see if this worked\nI'm going to save first name must be a\nnon-empty string and currently our first\nname is undefined okay that worked let's\ncopy our Setter for our first name paste\nit change every instance of first name\nto last\nname new last\nname check if the type of our last name\nis equal to a string and if our new last\nname the length of it is greater than\nzero if it is assign the private last\nname property equal to the new last name\nelse last name must be a non-empty\nstring that also worked our first name\nand last name are undefined let's do\nthis with\nage set our\nage the parameter is going to be new\nage using an if statement is the type of\nnew age strictly equal to a data type of\nnumber and is our new age greater than\nor equal to zero if it is take this\nprivate age equals our new\nage else we're going to console.\nerror age must be a non negative number\nwe can no longer assign pizza for our\nage unfortunately\nall right we have our setter set up now\nlet's work on the Getters let's assign\nsome legitimate values for the first\nname SpongeBob last name\nSquarePants age 30 we don't have those\nerrors anymore that means they're set\nbut those properties aren't readable\nthat's why we need Getters let's get the\nfirst name get first\nname return this private first\nname there's SpongeBob his first\nname get last\nname return this private last name\nthere's his last name let's create a\ngetter for a full name\ntoo let's\nconsole.log a full name even though we\nhave no property for that that's\nundefined we'll use a getter to mimic a\nfull name property by just combining the\nfirst name and the last name properties\nget full\nname return I'm going to use some string\ncination this private first name\nplus a space\ncharacter this private last\nname and there's his full name SpongeBob\nSquarePants and the age get age return\nthis\nprivate\nage and SpongeBob is\n30 all right everybody those are Getters\nand Setters Getters are special methods\nthat make a property readable Setters\nare special methods that make a property\nwritable by using a combination of both\nwe can validate and modify a value when\nreading or writing a property and well\neverybody those are Getters and Setters\nin\nJavaScript\nhey what's good everybody so in today's\nvideo I'm going to give you a lesson in\ndestructuring in JavaScript\ndestructuring allows us to extract\nvalues from arrays and objects then\nassign them to variables in a convenient\nway we can use straight brackets to\nperform array destructuring or curly\nbraces to perform object destructuring\nI'll give you five different examples\nexample one swap the value of two\nvariables we'll have let a equal 1 let B\nequal to to use array D structuring we\nneed a set of straight\nbrackets add the variables a comma B\nthis will equal we're creating a new\narray on the right hand side B comma a\non the Le hand side of our equals we're\nusing destructuring on the right hand\nside we're creating an array let's see\nwhat's within variables A and B\nconsole.log variable a then variable B\nso if these values are swapped we should\nhave two then one not one and two that's\nexample one we can use destructuring to\nswap the value of two\nvariables example two we can swap two\nelements in an array let's create an\narray of\ncolors const colors equals an array pick\nsome colors I'll go with RGB so that\nwould be red\ngreen\nblue let's add black and\nwhite suppose I would like to swap the\nposition of the first element and the\nlast element this first element has an\nindex of zero this particular last\nelement has an index of four again we're\ngoing to use array to structuring we\nneed a set of straight brackets we'll\ntake our array colors at index of\nzero comma rray at index of four we want\nto swap red with white 0 1 2 3 4 that's\nthe fourth index equals we're creating a\nnew array by using Straight brackets\ncolors at index\n4 comma colors at index zero then let's\nprint our\narray\nconsole.log R array of\ncolors there we go we have white green\nblue black red\nthat's how we can use destructuring to\nswap two elements in an\narray example three we can assign array\nelements to variables we'll declare a\nbunch of variables const we'll use\ndestructuring we're destructuring an\narray we need a set of straight brackets\nwe'll create some variable names first\ncolor Second\nColor third\ncolor I will assign this equal to our\narray\nColors Let's print these\nvariables\nconsole.log our first color we have\nred second\ncolor\ngreen third color blue you could combine\narray D structuring with rest parameters\nwe have two colors left let's assign\nthat to a new array we'll use rest\nparameters I will name this array extra\ncolors then we will\nconsole.log extra colors and that should\nbe a new array that has the remaining\ncolors black and white that's how to\nassign array elements to variables using\ndestructuring example for extract values\nfrom objects we'll create two people\nobjects const person\none person one will have a few few\nproperties first name will be\nSpongeBob last name will be\nSquarePants age will be 30 and a job\nmeaning\noccupation not John\njob his job is that he is a fry\ncook all right let's copy person one\nlooks like that n should be capital in\nlast name all right let's copy person\none paste it change person one to person\ntwo the first name of person two will be\nPatrick last name star age will be\n34 person two is not going to have a job\nproperty he's\nunemployed using destructuring I can\nextract values from these\nobjects we'll create a few variables\nconst we'll use object destructuring we\nneed a set of curly braces this time\nwe'll create these VAR variables first\nname last name age and\njob now this equals let's start with\nperson\none let's display these variables\nconsole.log first name is\nSpongeBob last name\nSquarePants age 30\njob fry cook let's do this with person\ntwo Patrick Star his age is 34 person\ntwo does not have a job property person\none does though our job variable is\nundefined as you can see here you can\nset default values when using\ndestructuring if somebody doesn't have a\njob property we'll set job to equal\nunemployed let's see if that works yep\nPatrick Star age 34 his job is he's\nunemployed that's how you can extract\nvalues from objects values extracted can\neven have default\nvalues all right last example we can\ndestructure in function parameters we\ncan pass an object to a function and\ndestructure it when it's passed in let's\ncreate a function we will create a\nfunction to display a person\nwith the parameters we'll use\ndestructuring we're destructuring an\nobject we need a set of curly braces\nwe'll receive an object such as this I'm\ngoing to invoke display person we'll\npass in person one as an argument when\nwe receive person one as an argument\nwe'll destructure that object right away\nwe will create a first name parameter\nlast\nname age and job\nall we'll do is print a few lines using\nconsole.log I'll use a template string\nlet's say Name colon space I'll add a\nplaceholder first\nname and last\nname let's add a new\nline age call in space add a placeholder\nage then lastly job\njob colon space add a placeholder\njob we're passing in person one and D\nstructuring it we should display name\nSpongeBob SquarePants age 30 job fry\ncook let's pass in person two as an\nargument name Patrick Star age 34 job is\nundefined again we can set a default\nvalue when destructuring if an object\ndoesn't have a job property we will set\nthat equal to be\nunemployed Patrick Star age 34 job\nunemployed then if we pass in person one\nagain his job should not be unemployed\nhe's a fry cook there is a job property\nso we do not use the default value all\nright everybody so those are a few\nexamples of destructuring there's a lot\nyou can do with destructuring you use a\nset of straight brackets to perform\narray destructuring or curly braces for\nobject destructuring they allow you to\nextract values from aray and objects\nthen assign them to variables in a\nconvenient way and well that is\ndestructuring in\nJavaScript so uh yeah we're doing a\nthing today today I got to explain\nnested objects in JavaScript nested\nobjects are objects inside of other\nobjects they allow you to represent more\ncomplex data structures a child object\nis enclosed by a parent object by using\nnested objects we have the cap\ncapability of creating some very complex\ndata structures for example a person\nobject could contain an address object\nas well as a contact info object or a\nshopping cart object each item in your\nshopping cart is an individual object\nsuch as a keyboard a mouse or a monitor\neach of these child objects would have\ntheir own properties and methods for\nexample a price a name specifications on\nthe item a shipping method nested\nobjects are just objects inside of other\nobjects let me give you a basic example\nwe'll create a person object const\nperson equals an object we need to set a\ncurly BRAC a person might have a full\nname\nproperty I will set that to be SpongeBob\nin this example SpongeBob\nSquarePants an age of\n30 is SpongeBob a student is student\nhe's in boting school so let's say\nthat's true objects can also contain\narray\nwe'll create an array of\nhobbies to declare an array you need a\nset of straight brackets what sorts of\nhobbies does SpongeBob have he knows\nkarate he does\njellyfishing I need one more uh let's\nsay that he enjoys\ncooking now we're going to create a\nnested object this person object will\nhave an address\nobject so we need a set of curly braces\na few of the properties of the inner\naddress object could be a street\nSpongeBob has an address of 124 con\nStreet his City will be bikini\nbottom and a country we won't do a full\naddress but I think this is good enough\nfor this example so SpongeBob lives in\nthe ocean let's say that his country is\ninternational waters I'll just\nabbreviate International our person\nobject has a nested address object\ninside of it to access some of these\nproperties of our person\nobject we would type the name of the\nobject use the property accessor which\nis dot then the name of the property\nfull name SpongeBob\nSquarePants let's print his\nage\n30 is SpongeBob a student that is true\nI'm going to display the array of hob\nperson. Hobbies this will give you an\narray but if you need individual\nelements you have to list an index\nnumber so Hobbies at index zero would be\nkarate one is\njellyfishing index two is cooking let's\nconsole.log our person\nobject dot the address\nobject this would return an entire\nobject if you need one of the properties\nwithin this object that's within the\nperson object you would have to follow\nthe inner object with the property\naccessor again that dot person. address.\nStreet which would give you 124 con\nStreet the city person. address. city\nBikini\nBottom person. address. country\ninternational waters so when accessing a\nproperty within a nested object you have\nto use the property accessor t\nthat dot if you would like to Loop\nthrough the properties of a nested\nobject you can write a for Loop like\nthis for const\nproperty in person.\naddress\nconsole.log take our person object\naccess the nested object address then\nuse the index of operator the straight\nbrackets give me the current\nproperty and there we are all right\nlet's make something a little more\ncomplicated we're going to create a\nclass that utilizes nested objects so we\nwill begin with\nclass\naddress our class will have a\nConstructor for an address we need these\nthree things feel free to add more if\nyou would like a street City and\nCountry then we'll assign these\nproperties this. Street equals\nStreet this. City equals\nCity this. Country equals\ncountry now we'll create a person\nclass class\nperson our person class will also have a\nConstructor\nwe'll need a name age and an address for\nthe address I'm going to use rest\nparameters we can pass in different\nparts of an address and store it within\nan array when we create a person object\nwe will assign this.name equals name\nthis. AG equals age now for the address\nwe're going to construct an address\nobject this. address equals a new\naddress we're going to call the\nConstructor of our address class and\npass in our\naddress I'm going to utilize the spread\noperator to spread our\naddress we'll send our address object a\nstreet City and Country all right let's\nconstruct some of these person\nobjects const person one equals a new\nperson this will call the Constructor\nbut we have to pass in arguments to\nmatch the parameter\na name we'll just do a first name to\nkeep it short an age SpongeBob will be\n30 we also need an address a street City\nand\nCountry\n124 con\nStreet City will be Bikini\nBottom his country will be international\nwaters and just for readability I'm\ngoing to put the address on a new line\nlet's create person\ntwo person two will be\nPatrick age\n37 Patrick will live on 128 con Street\nhe'll have the same city and the same\ncountry then let's make person\nthree person three will be\nSquidward age\n45 Squidward will live on 126\nconstr all right let's see if this all\nworked\nconsole.log let's start with person one\nperson one. name which is\nSpongeBob age 30 let's get his\naddress address and this returns an\nobject which is good that's what we\nwanted we have a nested object an\naddress object for some of the\nproperties within that address object we\nhave a street City and Country we use\nthe property accessor again of dot give\nme the street 124 con Street the city\nbikini bottom and the\ncountry international waters all right\nlet's confirm this with person 3 just to\nbe sure it all works person 3 give me\nthe name\nSquidward age\n45 address gives me an object we'll use\nthe property accessor again give me the\nstreet 126 con Street the city beini\nbottom and the country international\nwaters this will also all work for\nperson two if it worked with person one\nand three all right everybody so those\nare nested objects they're objects\ninside of other objects\nthey allow you to represent more complex\ndata structures a child object is\nenclosed by a parent object in this\nexample our address is the child object\nof the person object we're creating a\nnew object within our person object and\nwell everybody those are nested objects\nin\nJavaScript hey what's up everybody so in\ntoday's video I'm going to show you how\nwe can work with an array of objects in\nJavaScript what we'll do is create an\narray of fruit objects we'll create five\nfruit objects to create an object you\nneed a set of krly braces each object\nwill be comma\nseparated just for my own readability\nI'm going to place each object on a new\nline objects can have their own unique\nproperties and methods our first fruit\nobject will have a name of\nApple a color\nof\nred and calories meaning calories per\nserving of\n95 this is our first object let's copy\nthese properties paste them for object\ntwo change name to be orange color will\nalso be\norange calories\n45 object three name will be banana\ncolor yellow calories 105\nobject\n4 coconut color white calories\n159 then our last object will be\npineapple color yellow calories\n37 all right and here is our array of\nobjects there's a lot we can do with\nthis if you ever need a property within\none of these objects of your array you\nwould take the array in this cas\nfruits add an index number dot the name\nof the property for example name I need\nthe name property of the first object\nwhich would be Apple so let's test that\nconsole.log what is the name property of\nour aray fruits at index zero that would\nbe apple one is orange two is\nbanana three is coconut four pineapple\nlet's select a different property\nlet's go with the\ncalories\n95\n45 105 159 37 that's how to access a\nproperty within an array of objects to\nadd a new object you can use the push\nmethod let's take our array of fruits\nuse the push method we will push a new\nobject into our\narray the name will be\ngrapes\nColor\nPurple\ncalories\n62 then let's console.log R\narray console.log fruits so we have six\nApple orange banana coconut pineapple\nand grapes uh which I misspelled\ngrap you can use the pop method to\nremove an\nelement fruits\npop this should remove\npineapple Apple orange banana coconut no\npineapple or splice splice will remove\nelements at certain indices fruits.\nsplice let's select indices 1 through\ntwo all we're left with is Apple coconut\npineapple you can use the for each\nmethod to Loop through the elements of\nyour array let's display each object's\nname\nfruits. for each we need a call back a\nfunction expression or an arrow function\nlet's use an arrow function for every\nfruit do this\nconsole.log each fruit this will return\nentire\nobjects for one of the properties we'll\nselect dot the property name we have all\nthe fruit\nnames let's go with the colors and the\ncalories there we\nare there's also the map method the map\nmethod will run each element through a\nfunction and return a new array let's\ncreate an array of fruit names const\nfruit names equals take our array of\nfruits use the built-in map method we'll\nuse an arrow function for every\nfruit\nArrow return the fruits\nname then we will\nconsole.log our array of fruit\nnames and here's our array of fruit\nnames let's do this with\ncolors fruit\ncolors return every color property of\neach\nfruit then console.log our fruit\ncolors red orange yellow white yellow\nlet's do this with\ncalories\nfruit\ncalories return each calories\nproperty console. log our fruit calories\narray so the map method we'll return a\nnew array let's cover filter filter will\nreturn a new array after using each\nelement and checking a condition let's\nreturn a new array where the color of\neach fruit is yellow there's two const\nyellow fruits\nequals take our array of\nfruits use the filter method we have one\nparameter a fruit Arrow then a condition\nwe'll return this fruit if the fruit's\ncolor property is strictly equal to\nYellow then\nconsole.log our array of yellow fruits\nand there's two bananas and pineapples\nthey color are both yellow let's create\na new array of any fruits that are low\nin calories where the calories are below\n100 const low cal fruits take AR array\nof fruits use the built-in filter method\nfor every\nfruit Arrow check the calories of each\nfruit is it less than 100 if it is put\nit within this new\narray and here we are we have three\nfruits that are low in\ncalories Apple orange pineapple the\ncalories are 95 45 37 they're all less\nthan\n100 let's find any high calorie\nfruits change our rate to be high Cal\nfruits where the calories of each fruit\nis greater than or equal to 100\nconsole.log AR array of high Cal fruits\nthere are\ntwo banana and coconuts the calories are\n105 and\n159 let's use the reduce method now I'll\nadmit this is going to be a little\ntricky but I'll try my best to walk you\nthrough it the reduce method will return\na single value in this case an object\none of these objects let's return the\nobject with the greatest amount of\ncalories we'll store that within a\nconstant const Max\nfruit equals take array of fruits\nuse the reduce method there's going to\nbe two\nparameters an\naccumulator which keeps track of the\ngreatest value during each iteration and\nthe next element but I think we should\nrename these let's rename our\naccumulator as Max it's going to be the\ncurrent record holder of the object with\nthe greatest amount of calories element\nwill be fruit meaning the next fruit\nhere are the two parameters\nArrow what are we going to check is our\nfruit the next fruit in line are the\ncalories\ngreater than our current record holders\ncalories max.\ncalories just for readability I'm going\nto put this on a new\nline we're going to use the trary\noperator is this true does the next\nfruit have more calories than our record\nholder if it does will return our fruit\nmeaning the next fruit colon meaning\notherwise return the max again let's see\nif this works let's\nconsole.log our fruit with the maximum\namount of calories which is our coconut\nwith 159 calories if you just need the\ncalories you would type dot calories\nthat will just give you the calories but\nin this case we're returning an entire\nobject object let's find the fruit with\nthe least amount of calories let's copy\nour code paste\nit and make a few\nchanges Min\nfruit change Max to be\nMin the condition will be is the\ncalories of the next fruit less than the\ncalories of the minimum record\nholder then console.log our Min fruit\nwhich is our pineapple with 37\ncalories all right everybody so those\nare a few ways in which you can work\nwith an array of objects there's a lot\nyou can do with them you can map you can\nfilter you can reduce you can splice you\ncan pop you can push all sorts of things\nand well that is an example of an array\nof objects in\nJavaScript yo so uh what's up today I'm\ngoing to be talking about about the sort\nmethod in JavaScript the sort method is\nused to sort elements of an array in\nplace however with the sort method we\nsort elements as strings in\nlexicographic order not alphabetical if\nI could summarize what lexicographic\nmeans it means alphabet Plus numbers\nplus symbols as strings let me give you\nan example with just alphabetical\ncharacters I have an array of fruits to\nsort this array I can take the array\nname fruits use the built-in sort method\nthen\nconsole.log my array of fruits let me\nexpand this and here's my array all\nsorted when sorting we treat any\nelements as strings what if my array\nwere numbers I'll add the numbers 1\nthrough 10 in a somewhat random\norder let's change our array to be\nnumbers numbers. sort con cons. log\nnumbers here's the result we have one\nthen 10 then the rest seem to be in\norder we're not sorting this array\nnumerically we're sorting this array\nlexicographically we're treating each of\nthese numbers as strings that's why we\nhave one then 10 10 isn't at the end\nwhere we expect it would be there's a\ncouple extra steps we need to do\ninvolving sorting\nnumbers inside of the sort method we\nhave to write a custom comparison\nfunction this is normally a call back\nbut you can write a function expression\nor even better yet an arrow function\nwe'll write an arrow function in this\ncase let me zoom in with an arrow\nfunction we first need\nparameters we'll have parameters A and B\nwe'll examine two contiguous elements 1\nthen 10 10 then two 2 then 9 9 and three\nso on and so forth then we need an\narrow then we'll write a minus B\nour function a minus B will return\neither a negative zero or positive value\ndepending on what values we're examining\nthe sort method will sort those values\ninto place depending on what the value\nreturned is our array should be sorted\nyou can see that 10 is at the end\ninstead of right after one for reverse\norder you could say B minus\na now we're starting with 10 and ending\nwith one\nyou can even sort objects by a given\nproperty let's go over that\nexample we will create an array of\npeople const people equals this will be\nan array will include four objects all\ncomma\nseparated the first will have a name\nproperty of\nSpongeBob age 30 and a GPA\nGPA\n3.0 I'm going to zoom out for the next\nobject just going to put that on a new\nline let's copy all these properties\nchange name to be Patrick age will be\n37 GPA\n1.5 again for the next\nobject we will have\nSquidward age\n51\nGPA\n2.5 then lastly we'll have Sandy name\nSandy let's make Sandy\n27 GPA of course it's going to be a\n4.0 I would like to sort this array of\nobjects by each person's age we'll take\nour array of objects that's stored\nwithin\npeople use the built-in sort method use\nour Arrow\nfunction a comma B\nArrow we'll take parameter a that's\nperson one do access their age property\nminus parameter B access their age\nproperty and that's all you got to do\nnow let's\nconsole.log R\npeople\nthere we are we have Sandy who's the\nyoungest then SpongeBob Patrick\nSquidward for reverse order you'll just\nchange a to be B and B to be\na Squidward Patrick SpongeBob Sandy or\nwe can sort by a different property\nlet's do GPA this\ntime a. GPA b.\nGPA\nwe have Patrick with the lowest GPA\nfollowed by Squidward SpongeBob Sandy\nthen reverse order would be b. GPA minus\na.\nGPA Sandy SpongeBob Squidward Patrick\nlet's try sorting by the name property\nand see what happens\na.name minus b.n\nname we have SpongeBob Patrick Squidward\nSandy but that doesn't seem to make\nsense these aren't in alphabetical order\nif you need to sort by a property that\ncontains a string within an object\nthere's a different\nformula we will take\na.name do use the buil-in\nlocal compare\nmethod compare to b.\nname this method will examine two\nstrings for lexicographic\norder now these are all arranged\nlexicographically\nstarting with Patrick then Sandy\nSpongeBob Squidward for reverse\nlexicographic order we would take b.n\nname. local compare then examine\na.name I've just now realized that\nthere's a lot of SpongeBob characters\nwhose first name starts with an S like\nwe have three right here Squidward\nSpongeBob Sandy Patrick all right\neverybody so that is the sort method\nit's used to sort elements of an array\nin place it sorts elements as strings in\nlexicographic order not alphabetical and\nwell everybody that is the sort method\nin\nJavaScript hey everybody in today's\nvideo I'm going to show you how we can\nShuffle the elements of an array using\nJavaScript this is an optional video you\nmight find this topic helpful if you're\ninterested in making a game using\nJavaScript or any sort of application\nwhere you need some Randomness in this\nexample we'll create a deck of cards our\ndeck of cards will be an array we have\nan a for Ace the numbers 2 through 10\nlet me finish typing those\nin J for\nJack Q for Queen k for King I'm not\ngoing to include any suits for these\ncards such as Ace of Hearts Ace of clubs\nthat might be overkill for this example\none method you might see floating around\nonline to shuffle the elements of an\narray is to use the sort method then\npass in an arrow function where you take\nmath. randomus 0.5 I would not recommend\nusing this method just because the\nresults of this method aren't perfectly\nuniform let me console.log cards this\narray appears shuffled but it's not that\nuniform but not only that the larger the\narray becomes this method becomes\nincreasingly more inefficient I would\nnot recommend using the sort method to\nshuffle an array instead I would\nrecommend using the fer Yates algorithm\nwe'll create a dedicated function for\nthis so we will Define a function to\nshuffle there will be one parameter and\na\narray then to invoke this function we'll\ntype the function name pass in our array\nof\ncards so what do we want to do exactly\nwe're first going to Loop through the\nelements of this array we'll start at\nthe end and work our way towards the\nbeginning we'll use a for Loop to\ndecrement So within our Shuffle function\nwe'll create a for Loop we will declare\nindex of I let I equal R array do length\nthen minus one that's the first\nstatement our array has 13 elements but\nthe last index is 12 because array start\nwith zero if the array's length is 13 we\nneed to subtract 1 to get 12 which would\ngive us the ending index of 12 we'll\ncontinue this loop as long as I is\ngreater than\nzero then iusus to decrement now we have\nto generate a random number between the\nend and the beginning somewhere within\nthis range\nwe'll create const random random will\nstore a random number take math. random\nmethod\ntimes I our index + one we'll need to\nround this number we're now going to\nenclose this equation with math. floor\nto round down math. floor and enclose\nthis equation all right during the first\niteration of this Loop we should\ngenerate a random number between the end\nand the beginning we'll swap our king\nwith a random element within this array\nso to swap two elements of this array we\ncan use destructuring in this context to\nuse destructuring we'll take our\noriginal position array at index of I\nduring our first iteration that will be\nthe king we'll swap our King with our\narray at a random index the one that\nwill be randomly\ngenerated equals our array at index IND\nof random comma array at index of\nI then to finish using destructuring we\nneed to enclose both sides of this\nequation with an\narray there and that will swap two\nelements of your\narray now if I run this program this\nwill Shuffle the elements of my array I\nwould recommend using a dedicated\nShuffle function because in a game it's\nlikely you're going to shuffle something\nmore than once throughout that game like\nI said this isn't a necessary topic to\ncontinue on with the series but if\nyou're ever interested in making a game\nusing JavaScript or need some element of\nRandomness well then this function would\nwork great and that is how to shuffle\nthe elements of an array using\nJavaScript what's up everybody so in\ntoday's video I'm going to explain date\nobjects in JavaScript date objects are\nobjects that contain values that\nrepresent dates and times these date\nobjects can be changed and formatted to\nsuit our needs here's an example\nwe will create a date object that\ncontains the current date and time to do\nso let's create a constant named date\ndate will be an object we will call the\ndate Constructor with the new keyword\ndate then pass in no arguments for the\ncurrent date and time so I'm going to\nconsole.log my date object which gives\nme my current date and time as of right\nnow I'm filming this video on a Thursday\nNovember 9th the year 2020 23 at about\n7: in the morning so depending on when\nyou're watching this video the date and\ntime is going to be different if you\nwould like to create your own custom\ndate and time object you'll have to pass\nin some arguments you can follow this\norder for the date Constructor the first\nargument corresponds to a year then\nmonth day hour minute second and\nmilliseconds even so for the year let's\nsay\n2024 the month zero corresponds to\nJanuary one is February then that means\na month of 11 is December let's say\nJanuary so that will be zero for the day\none for the 1 for the hour uh 2 2 in the\nmorning this is in Military Time by the\nway for the minute 3 minutes after the\nhour for the seconds 4 seconds after the\nminute we can even add milliseconds if\nwe would like so for the milliseconds\nlet's say five and here's my new date\nobject Monday January 1st 2024 about 2\nin the morning passing in a string\nrepresentation of time to the date\nConstructor is also valid let's say the\nyear is\n2024 January 2nd for the time you're\ngoing to type t for\ntime 12 noon then add Z for UTC time and\nthere's my new date again Tuesday\nJanuary 2nd 2024 6: in the morning\nanother format you can use is within the\ndate Constructor pass in a given amount\nof time in milliseconds since epic if I\ncould describe epic I would describe it\nas when the date your computer thinks\ntime began if you were to pass in zero\nto the date Constructor you'll be given\na date and time around December 31st\n1969 So within the date Constructor you\ncan pass in a given amount of\nmilliseconds since this date so if I was\nto pass in 1.7 billion\nmilliseconds\nwhat I'm telling the day Constructor is\ngive me the date and time that's 1.7\nbillion milliseconds since that epic\ndate when I pass in 1.7 billion\nmilliseconds the date that I'm given is\nTuesday November 14th 2023 about 400\np.m. passing in milliseconds would be\ngood for some sort of timer now let's\nuse the current date and time I will\npass in no arguments you can extract\nindividual values from a date object I\nwould like the year const year equals\ntake our date object I will use the get\nfull year method to get the year then I\nwill\nconsole.log the year and this will be a\nnumber\n2023 let's get the\nmonth const month equals our date object\nuse the built-in get month method then I\nwill console without log the\nmonth currently for me it's November not\nOctober so remember January is zero\nDecember is 11 let's get the day const\nday equals date get date not day if you\nget the day that will give you the day\nof the week like Sunday Monday Tuesday\nthat sort of thing let's\nconsole.log the\nday so for me it's the the 9th let's get\nthe hour const hour equals date get\nhours\nplural\nconsole.log the hour for me it's 7 in\nthe\nmorning let's get\nminutes const minutes equals get\nminutes console.log the\nminutes it is 7:45 in the\nmorning get\nseconds get\nseconds console.log the\nseconds so\n745 21 seconds after the minute now if\nyou need the day of the week here's what\nyou can do const day of week equal\nequals date get day that will give you\nthe day of the\nweek\nconsole.log day of week for me that is\nfor Sunday is zero Monday is one so that\nmeans it is Thursday now with the date\nobject you can even set the date with a\nmethod let's\nconsole.log the\ndate I'm GNA set the Year date set full\nyear I will set the year to be\n2024 yep Saturday November 9th\n2024 let's set the\nmonth set\nmonth I will set the month to be January\nso I will pass in zero Tuesday January\n9th let's set the\nday that would be with set date not day\nI will set it to be the first January\njary\n1st the hours with set\nhours let's go with two for two in the\nmorning set\nminutes 3 minutes past the\nhour set\nseconds 4 seconds past the minute you\ncan even compare dates as well let's\ncreate two date objects const date one\nequals a new date I'll pass in a string\nrepresentation of a date we won't\ninclude the time though for the year\nlet's say\n2023 December that would be 12 31st New\nYear's Eve\nbasically and for date\ntwo let's say date two is New Year's Day\n2024 January\n1st using an if statement let's compare\nto see if\ndate 2 is greater than date\n1 if it is then let's\nconsole.log happy New\nYear so date two is greater than date\none we'll print happy New Year let's\nchange date two to be\n2023 December\n30th well nothing happens then but\nthat's to be\nexpected all right everybody so those\nare date objects they're objects that\ncontain values that represent dates and\ntimes these date objects can be changed\nand formatted to suit our needs and well\neverybody those are date objects in\nJavaScript hey what's going on everybody\nso in today's video I got to explain\nclosures in JavaScript a closure is a\nfunction defined inside of another\nfunction the inner function has access\nto the variables and scope of the outer\nfunction by using closures they allow\nfor private variables and state\nmaintenance JS libraries and Frameworks\nsuch as react View and angular use\nclosures all of the time you'll see\nclosures fairly often with\nfunction-based components you have\nfunctions inside of other functions let\nme give you a very basic example we'll\nhave an outer function named\nouter within the outer function we'll\nhave a function named inner\nthe inner function has access to\neverything within the outer function\nthis scope if I was to create a variable\nlet message equal the word\nhello within my inner function I can use\nthis message\nvariable\nconsole.log my message now if I invoke\nthe outer function nothing appears to\nhappen when we call the outer function\nwe're now within the scope but then what\nthere's one of a few things we could do\nif I would like to call the inner\nfunction from within the outer function\nI would need to call it somewhere here\nlet's call the inner function at the end\nthere we go we have displayed the word\nhello everything within the outer\nfunction is part of a closure we have a\nfunction defined inside of a function\nthis inner function has access to\neverything within that scope includ\ncluding this message variable one\nbenefit of using closures is that any\nvariables are considered private outside\nof the outer function I will attempt to\nupdate our message message equals\ngoodbye now this doesn't work as you can\nsee this message variable is in a\ndifferent scope it's kind of like it's\nin another dimension what we've done\nhere is we have created a different\nmessage variable in a different scope\noutside of the outer scope I have no way\nof accessing the message M variable so\nthat's one of the benefits of closures\nyou can encapsulate variables and make\nthem private let me give you another\nexample a closure can maintain the state\nof a variable we'll create a counter\nprogram so I'm going to create a\nfunction to\nincrement within the increment function\nI will set a count variable equal to 0o\nI will increment our count by one then\nconsole.log\nI'll use a template\nstring count increased to I'll add a\nplaceholder we'll display our count\nvariable now anytime I attempt to call\nthe increment function it'll increase\nour count by one but if I was to execute\nthis function again well we're\nredeclaring this variable of count we're\nresetting it every time we call this\nfunction I can't get the count to go\npast one because we we keep on resetting\nit but by using a closure we can have\nstate maintenance we can maintain the\nstate of this variable and remember\nwhere this variable was previously I\nmean I could take this variable and\ndeclare it outside of the function but\nthen we don't have any security for that\nvariable I will set the count equal to a\nmillion we're maintaining the state of\nthat variable but it's not private\nanybody and anything can access and\nchange that variable a closure maintains\nthe state of a variable and makes it\nprivate what we'll do is enclose all of\nthis code within another\nfunction we'll create a function to\ncreate a\ncounter how do we access the scope\nwithin the create counter function\nhere's another\npossibility we will return an object we\nwill need a set of curly\nbraces our object will have a property\nof increment and its Associated value\nwill be a reference to increment there\nis a shorthand version of this you can\njust use the function name as a property\nwe're returning an object with the\nmethod of\nincrement so now I'm going to create an\nobject named counter counter equals\ninvoke the create counter\nfunction this will return an object that\nhas an increment\nmethod so I'm going to take our counter\nobject use the increment\nmethod count increase to one not only do\nwe have an increment method we have a\ncount variable as well you could say\nthat what we've done with this outer\nfunction it's very similar to creating a\nclass we can use classes to instantiate\nobjects in this case we used a function\nto return an object so if I was to take\nmy counter and increment it again our\nclosure should maintain the state of\nthat variable count count increase to\ntwo it's not resetting every time we\ncall the method count increase to\nthree let's attempt to access our count\nvariable counter. count equals\nz then I will\nconsole.log our\ncount reference ER count is not\ndefined let's attempt to display our\ncount\nvariable\nconsole.log take our counter object\naccess the account\nvariable it is undefined we don't know\nwhat it is it's hidden your closure can\nhave more than one\nfunction so what we'll do is create a\nget count function we'll use the get\ncount function to return our count if we\nneed access to it\nfunction get\ncount we will return our count\nvariable within the return statement\nwe're returning an object we will add\nanother property of a reference to the\nget count\nfunction so now within our counter we\nhave a method to get the count variable\nlet's\nconsole.log I'll use a template string\nthe Curve current count is I'll add a\nplaceholder take our counter object use\nthe get count method the current count\nis three if I was to increment our\ncounter again well that increased to\nfour all right last\nexample we're going to create a closure\nfor a game where we keep track of points\nwe have a score let score equal Z we'll\nDefine the function\nfunction increase\nscore we'll have one parameter points in\norder to score some points we have to\npass in some points as an\nargument take our score plus equals R\nPoints then let's\nconsole.log I'll use a template string\nplus add a placeholder R\nPoints then I'll add pts meaning points\nit's\nshortened let's create a function for\ndecrease\nscore change increase to\ndecrease score minus equals\npoints minus points and then let's get\nour\nscore function get\nscore\nreturn the\nscore if I need to increase the score I\nwill invoke The increased score function\nbut I have to pass in points we scored\nfive points let's do this\nagain we scored six points let's\ndecrease the\nscore I will subtract three\npoints minus three points let's get the\ncurrent\nscore\nconsole.\nlog I'll use a template string the final\nscore is add a\nplaceholder get\nscore the final score is eight I'm going\nto add points after that eight points\nall right problem with this is that we\ncan take our score and set it to\nanything you scored like a kajillion\npoints so for some security let's\nenclose all of this code within a\nclosure I'll create an outer\nfunction function create game this will\nreturn an\nobject let's cut all of this\ncode paste it within the outer function\nof create\ngame and then at the end we will return\nan object that has references to these\nfunctions return an object we need curly\nbraces for that a reference to increase\nscore\ndecrease\nscore and get\nscore so\nnow I will use the create game function\nto return an\nobject const game game will be our\nobject we will invoke the create game\nfunction and return an\nobject so now if I want to increase the\nscore decrease it or get the score I\nhave to use the methods of this object\ngame. increase\nscore game. decrease score and game.get\nscore we have five points six points\nminus three points and then we have the\nfinal score of eight points well\neverybody those are closures think of\nthem as a function defined inside of\nanother function the inner function has\naccess to the variables and scope of the\nouter function these are used frequently\nwith JS libraries and Frameworks such as\nreact View and angular especially when\nyou work with function based components\nand well everybody those are closures in\nJavaScript hey what's going on people so\nin today's video I'm going to explain\nthe set timeout function in JavaScript\nthe set timeout function allows you to\nschedule the execution of a function\nafter an amount of time in milliseconds\nthe times are approximate they vary\nbased on the workload of your JavaScript\nruntime environment I wouldn't recommend\nusing set timeout for anything precise\nlike a stopwatch it's an approximation\nto use the set timeout function you pass\nin a call back to a function and a delay\nin milliseconds here's an example I will\ncreate a function to say\nhello all we're going to do is window.\nalert the word\nhello I will use the set timeout\nfunction pass in a call\nback we'll pass in a call back to say\nhello then execute it after 3,000\nmilliseconds so 3 seconds let's see if\nthis\nworks 1 2 3 hello an anonymous function\nworks too so instead of a call back\nwe'll use an anonymous\nfunction function parenthesis curly\nbraces\nwindow.\nalert the word\nhello 1 1000 2 1000 3 1000 hello or even\nan arrow function we have parameters\nArrow what are we going to do window.\nalert the word\nhello 1 1,000 2 1,000 3 1,000 hello you\ncan use the clear timeout function to\ncancel a timeout before it triggers but\nwe have to pass in a time out ID so what\nwe'll do with this set timeout function\nis assign it to an ID stored within a\nvariable or constant\nconst time out\nID equals our set timeout function\nthat'll display the word hello I can\nclear this time out with the clear time\nout function but I have to pass in that\nID as an\nargument immediately after calling the\nset timeout function we will cancel it\nlet's try it 1 1000 2 1000 3\n1000 yeah nothing's happening we\ncanceled it all right what we'll do this\ntime is create a button using HTML when\nwe click on the button we'll set a\ntimeout to display the word\nhello\nso let's clear all of this go to our\nHTML file we'll create a\nbutton the button will have text of\nstart and I'm going to zoom\nin I will set the onclick attribute to\nequal a function we will start a timer\nthen add a set of\nparentheses when we click on the button\ndo this function So within our\nJavascript file we will create a start\ntimer\nfunction function start\ntimer we will set time\nout I'll use an arrow\nfunction let's\nwindow. alert the word we will display\nthe word hello after 3,000\nmilliseconds all right so nothing's\ngoing to happen until I click the button\nI'm going to click it now 1 1,000 2\n1,000 3 1000\nhello let's create a second button to\nclear the timeout if we need to stop it\nlet's copy our first button paste\nit change the text of the button to be\nclear we will clear the timeout but\nwe'll need another\nfunction clear\ntimer so there's our second button\nwe'll need a timeout ID so outside of\nthis function I will declare a variable\nof let\ntimeout\nID when we start our timer we will\nassign the set timeout function an ID of\ntimeout ID then we can stop it using\nthis\nID we will create a function to clear\nthe\ntimer we're going to use the clear\ntimeout function clear time\nout we need to pass out a timeout ID as\nan argument which we will do and then\njust to be sure that everything works\nwithin both these functions let's\nconsole.log something let's say the word\nstarted within our start timer and\nwithin our clear timer let's display the\nword cleared just so we know that these\nfunctions were called so I'm going to\nsave everything\nI'm going to start the timer but not\nclear it let's start now 1 1,00 21000 3\n1,000 hello let's go to our\nconsole and it says that we started well\nstarter I clearly can't spell today\nstarted we're going to start then\ncancel start 1 1,000 to 1,000\nclear and nothing happened let's go to\nour console and expect console we\nstarted set timeout and then we cleared\nit all right everybody that is the set\ntimeout function it's a function in\nJavaScript that allows you to schedule\nthe execution of a function after an\namount of time in milliseconds execution\ntime may vary based on the workload of\nthe JavaScript runtime environment and\nwell everybody that is the set timeout\nfunction in\nJavaScript hey what's going on people so\nin today's video we're going to create a\ndigital clock using JavaScript HTML and\nCSS so let's get started the HTML for\nthis project is going to be very minimal\nI will create a develop the ID of the\ndevelopment will be clock Dash container\nwithin this development we'll have a\nnested development with an ID of clock\nwe have a clock within a clock container\nas a placeholder temporarily the text on\nthe clock will be 0 0 colon 0 0 colon 0\n0\n000000000000 0 and I'm just going to\nzoom in\ntemporarily and that is all the HTML\nthat we need let's head to our CSS\nstylesheet let's begin with the\nbody I will set all margin to be zero\noriginally let's select our clock\ncontainer ID clock container\nI'll use flex box for the clock\ncontainer display\nFlex I will justify content in the\ncenter justify content\nCenter if you would also like to\nvertically align you'll need to add the\nfollowing two lines of code I will\nalign items\nCenter this CSS property will vertically\nalign any elements but the clock\ncontainer itself is kind of small for\nexample I'll add a border of two pixel\nsolid the elements within the clock\ncontainer are aligned both horizontally\nand vertically but the container itself\nis kind of small to vertically align\nthis element within the window itself\nwe'll have to increase the height of the\nclock container I will add height of 100\nVH for the viewport height and we can\nremove the\nBorder yep the clock is now within the\nmiddle of the container both\nhorizontally and vertically but if you\nprefer it to be at the top you can\neliminate these last two lines it's up\nto you let's style the clock itself we\nare selecting the ID of\nclock I will change the font family to\nbe\nmonospace this is the normal size when\nI'm zoomed in to 100% I will set the\nfont size to be\n6.5\nRM then set the font weight to be\nbold and text align\nCenter if you would like a background\nimage for the body of your document I\njust so happen to have one right here\nit's a picture of Central Park in New\nYork this is optional but if you would\nlike to include a background image of\nthis project within your CSS stylesheet\nyou'll add the following CSS properties\nI will set the background image property\nto be a\nURL so what is the name of that image\nI'm going to copy the name of it and\npaste it within this URL\nfunction I'll set the background\nposition to be the center right now\nwe're seeing the top left of the image\ninstead of the\ncenter\nbackground Position will be Center\nif you're using a small image your image\nmight be repeating itself to take up all\nthe available space to prevent that you\ncan set the\nbackground repeat\nproperty to be no\nrepeat mine already wasn't repeating\nthough but yours might be then we'll set\nthe\nbackground size to cover\nby adding this property this image will\ncover the entire window and maintain its\naspect ratio if you do have additional\ncontent besides this clock you can keep\nthe background in place when you scroll\ndown by adding this\nproperty\nbackground\nattachment to be\nfixed this property isn't going to be\napparent because we don't have a scroll\nbar but if you did have a scroll bar the\nbackground will stay in place at least\nlet's head back to our clock element I\nwill change the color the font color to\nbe\nwhite if you would like a background\nblur effect you'll add this property\nwe'll set the backdrop filter property\nto be a blur\nfunction the greater the number the more\nblur effect you're going to have so this\nis five pixels if I were to increase\nthis to\n50 well there's a lot of blur then I'll\nset my blur to be five I would just like\na little bit as if we're looking through\nglass I'll increase the width to be 100%\nto take up 100% of the width of the web\nbrowser width\n100% to give this glass look a foggy\nappearance we can add a background color\nthat's slightly\ngray background-\ncolor let's select gray but I like using\nhsl values\nso for the lightness I'll set it to be\n100% but I'm going to lower the alpha\ndown to like\n10% now the background has a foggy glass\nappearance if you were to increase the\namount of\nalpha that'll increase the\nlightness I'll keep mine as 10% 0.1 for\nthe\nalpha all right now we just need to get\nthis clock to run so let's save\neverything go to our JavaScript\nfile we will create a function to update\nour\nclock immediately when we begin this\nprogram we will update our clock once\nimmediately now we need to get the\ncurrent time let's declare a constant of\nnow what is the time right now this will\nbe a new date\nobject to get the hour we will say const\nhours equals use the\nbuiltin get hours method then let's do\nthis with minutes con minutes equals\nnow. get minutes\nmethod and seconds const seconds equals\nnow. get\nseconds I'm going to change the text\ncontent of the clock to be a time string\nit will be a template string how do we\nwant to arrange our\nnumbers const time string equals a\ntemplate\nstring first We'll add a placeholder for\nour hours\ncolon\nminutes\ncolon\nseconds then we will select the ID of\nclock document. getet element by ID the\nID that we're getting is our\nclock change the text content to equal\nour time string when we save the time on\nthe clock should update currently for me\nit's 8:00 for each of these placeholders\nfor hours minutes and seconds I would\nlike each to take up two digits We'll\nadd some zeros for padding for example\nthis time will be\n08006 there's a built-in string method\nfor that so with hours minutes and\nseconds we will convert these to\nStrings we'll use method chaining then\nadd to string do this for hours minutes\nand\nseconds with strings there's a pad start\nmethod for the first two\ncharacters pad them with a\nzero let's copy this method and paste it\nfor minutes and seconds now when I save\nan up the time we have zero padding 08\n01 54 in this case to get this clock to\nupdate every second will follow update\nclock with the set interval function set\ninterval works like set timeout except\nit will call a function repeatedly not\njust once but we need a call back the\ncall back will be update clock call this\nfunction after every 1,000 milliseconds\nand now our our clock should\nrun currently this clock is in military\ntime although I'm recording this at 8 in\nthe morning if you would like this clock\nto be a 12-hour clock then add am or p.m\nhere's the following changes we're going\nto make we'll declare hours with let\ninstead of const so we can change it and\nreassign it we'll create a new constant\nof\nmeridium 400 a.m. or\np.m. this will equal hours is ours\ngreater than or equal to 12 we'll use\nthe erary operator to check this if ours\nis greater than or equal to 12 meridium\nwill be PM otherwise it will be\nam then after our\nmeridium we'll reassign hours hours\nequals\nhours modulus modulus gives you the\nremainder of any division ours modulus\n12 if this is zero we'll use the or\nlogical operator or 12 after seconds\nWe'll add a placeholder for our\nmeridium currently we lost our padding\nfor the hours so we're going to cut this\npart of our code to convert ours to a\nstring and Pad\nit we'll take ours equals hours to\nreassign it follow hours with converting\nit to a string using the two string\nmethod and Pad it before displaying\nit all right and that has appeared to\nwork all right everybody so that is a\ndigital clock program you can make using\nHTML CSS and\nJavaScript hey what's going on everybody\nin today's video I'm going to show you\nhow we can create a stopwatch program\nusing JavaScript HTML and CSS so sit\nback relax and enjoy the show all right\nlet's get started everybody we will\ncreate an H1 heading with textt of\nstopwatch and I will give this H1\nelement a unique ID of my\nH1 then we'll create a container for our\nstopwatch this will be a div\nelement this div element will have an ID\nof container to contain everything our\ncontainer is going to have two sections\ntwo\ndevelopments the First Development is\ngoing to be for our display ID\ndisplay I'll give this development some\ninitial text as a placeholder we'll have\nzeros for hours minutes seconds and\nmilliseconds then our next development\nwill have an ID of controls for all the\ncontrol buttons within this development\nof controls we'll create three\nbuttons the first button will be start\nthe ID of this button will will be start\nbutton BTN short for button then I will\nset the onclick event handler equal to a\nJavaScript function we will eventually\ncreate a start function we still need to\nDefine it let's copy this button paste\nit\ntwice the second button will be for stop\nthe ID will be stop button the onclick\nattribute will be for a stop function\nthe text on the button will be stop and\nthen we have a reset\nbutton the ID is reset\nbutton the onclick attribute will be for\na reset function the text on the button\nwill be\nreset all right and that is all the HTML\nthat we need let's go to our CSS\nstylesheet I will first select the body\nof our document we'll use flexbox to\ndisplay everything because I like\nflexbox display Flex the flex Direction\nwill be a\ncolumn then I will align items\nCenter I'll set the background color of\nthis\napplication\nbackground-color pick a color again I\nlike using hsl\nvalues I'll set the lightness to\n90% our container is going to be a\nlighter color we will select the ID of\nmy H1 that's going to be the heading I\nwill set the font\nsize to be 4\nRM the font\nfamily I will pick\nAriel with a backup of s's\nserif for the font color I will set the\ncolor property to be pick a\ncolor I'll pick black but set the\nlightness to\n25% all right now we are going to select\nthe container that contains everything\nbesides the\nheading this\narea we will select the ID of\ncontainer I will use flex box within the\ncontainer display\nFlex the flex direction will be a\ncolumn and aligned item\nCenter let's add a border a border\naround the container 5 pixel\nsolid and I will round the corners\nborder\nradius let's do 50\npixels and I'll add a little bit of\npadding padding 30\npixels and I will set the background\ncolor to be white background\ncolor\nwhite we'll work on the time display\nnext select the ID of\ndisplay I will set the font\nsize to be 5\nRM for the font\nfamily I'm going to set it to be\nmonospace and the font weight I will set\nto be\nbold I'll change the\ncolor I'll set the lightness to\n30% I'll give a text Shadow to the\ndisplay so it looks like it's somewhat\n3D like it's popping out so text\nShadow two pixels and two pixels for the\nvertical and horizontal offset and a\nblur of two\npixels now for the color I'm going to\nlower the\nalpha to 75% or\nso that's not bad bad then I'll add a\nlittle bit of margin to the bottom\nmargin bottom 25\npixels now we have to style the buttons\nwe will select the ID of controls but I\nwould like the button elements within\nthe controls after selecting the ID of\ncontrols select any buttons within that\nelement we'll increase the font size of\nthe buttons font size 1.5 RM I will set\nthe font weight of the buttons to be\nbold I'll add a little bit of padding 10\npixels by 20\npixels I'll add some margin around the\nbuttons 5\npixels I'll set a minimum width of the\nbuttons to be 125\npixels let me scroll\ndown I'll remove the border border\nnone set the Border radius of the\nbuttons to be 10\npixels change our cursor to be a pointer\nwhen we hover over the buttons let's see\nif that works yes it\ndoes then set the font color of the\nbuttons to be\nwhite now let's color the start button\nwe will select the ID of start\nbutton set the background\ncolor pick a color I'll start with\nsomething green\npick whichever color you would\nlike I'll pick this shade of green here\nare the values when we hover over the\nstart button we will access the hover\nsudo class of our start\nbutton I'll decrease the lightness by\n10% let's copy the markup that we have\nfor the start button paste it\ntwice we'll add color to the stop\nbutton and the reset\nbutton I'll set the stop button to be\nred here are the hsl values that I\npicked when I hover over this button\nI'll set the lightness to be 10%\ndarker for the reset button I'll set\nthat to be\nblue when we hover our cursor over the\nreset button I will set the lightness to\nbe 10%\ndarker not bad for all of the buttons\nI'm going to add a transition\neffect\ntransition select the background color\nwe will create an ease\ntransition after 0.5 seconds we will\nease so when you hover your cursor over\nthe buttons there's going to be a slow\ntransition when we\nhover okay and that is all the CSS that\nwe need we will now go to the Javascript\nfile to add some functionality let's\ndeclare all the variables we'll need\nwe'll get the ID of the display and\nstore a reference to it const display\nequals document. getet element by ID the\nID that I'm selecting is\ndisplay this\nID we will create a timer let timer\nequals\nnull timer is going to hold the ID of\nset interval so we can keep track of it\nand stop it if we need to then we need a\nstart time let start time equal zero let\nelapsed\ntime equal\nzero let is running this will be a\nBoolean which I will set to be\nfalse if the stopwatch is currently\nrunning we will flip this to be true and\nflip it to be false to stop it what are\nthe functions that we need we have a\nstart stop and reset\nfunction function\nstart function\nstop function\nreset We'll add one more function of\nupdate to update the\ndisplay function\nupdate we'll begin with the start method\nwe'll enclose everything within our\nfunction within an if statement we need\nto check to see if our stopwatch isn't\nrunning if our stopwatch isn't currently\nrunning if not running then start the\nstopwatch we need to set the start time\nthe start time equals we will get the\ncurrent date date do now minus the\nelapse time which will be zero\ninitially so just to demonstrate what\nthe start time is I'm going to\nconsole.log my start\ntime so the start time is going to be in\nmilliseconds since epic epic basically\nspeaking is when your computer thinks\ntime\nbegan\nwe will set our timer equal to the set\ninterval\nfunction we will call the update\nfunction every 10\nmilliseconds so if I was to display my\ntimer console.log\ntimer this is what it\nis our timer stores a unique ID to work\nwith this function if we ever need to\nstop\nit\nwe'll take the Boolean variable of is\nrunning set it to be true because our\nstopwatch is not running now we need to\ngo to the update function to actually\nget it\nworking we need to get the current\ntime\nconst current time equals access our\ndate use the now method what is the date\nright now we will calculate the elapse\ntime\nequals the current time minus our start\ntime whatever that was when we initially\npressed the start\nbutton so the current time minus our\noriginal start time gives us the elapse\ntime and this is going to be in\nmilliseconds we need to convert the\nelapse time into a readable format using\nhours minutes seconds and milliseconds\nwe'll begin with\nhours let hours\nequals take our lapse time divided by to\nconvert milliseconds to hours we can\nfollow this formula elapse time divided\nby 1,000 milliseconds * 60 seconds times\n60\nminutes we don't want any decimal\nportions with our hours we will enclose\nall of this with the floor method of\nmath now we're going to do something\nsimilar with minutes let minutes equals\ntake our lapse\ntime we need to convert milliseconds to\nminutes divided by 1,000 milliseconds in\na\nsecond times 60 seconds in a minute then\nmodulus\n60 modulus gives you the remainder of\nany division we don't want our minutes\ndisplay to hit 60 or go above 60 once we\nhit 60 it'll reset back to zero enclose\nthis formula with math. floor to round\nit math.\nfloor okay then we have to take care of\nseconds let seconds equals take our\nlapse\ntime divided 1,000 to convert\nmilliseconds to\nseconds modulus\n60 and close all of this with math.\nfloor to round\nit\nnow for milliseconds let\nmilliseconds equals take the elapse time\nwhich is already in\nmilliseconds modulus 1000 milliseconds\nis normally four digits we're going to\ndivide it by 10 we only want the first\ntwo\ndigits divided by 10 en close all of\nthis with math.\nfloor math.\nfloor\nthen let's change the\ndisplay we'll access our\ndisplay access the text content of the\ndisplay set it equal to a template\nstring if you would like to display the\nhours it's optional we will add a\nplaceholder for hours colon placeholder\nminutes colon placeholder seconds if you\nwould like to display the milliseconds\nwe can add a placeholder for that colon\nplaceholder\nmilliseconds let's see what we have so\nfar I'm going to hit the start button\nand here's what we\ngot so the stopwatch is running but we\nshould add some zeros for padding so I'm\ngoing to refresh to stop\nit we'll convert hours minutes seconds\nand milliseconds into a string then add\nsome padding of zeros to it if the\nnumber is only one digit not two we will\nconvert our hours minutes seconds and\nmilliseconds into a string before\ndisplaying it so let's take hours equals\nhours I will typ cast it as a\nstring follow this with the pad start\nmethod for the first two\ndigits at a zero let's do this for\nminutes seconds and\nmilliseconds\nminutes seconds\nand\nmilliseconds we should have some zeros\nfor padding to make each display two\ndigits and that does appear to work\nnice now we just need to get the\nstopwatch to actually stop right now\nthere's no\nfunctionality going to our stop function\nwe need to check to see if our program\nis running is this variable is running\ntrue if is running if that that's true\nthen stop the\nstopwatch we will use the clear interval\nfunction we need to pass in that unique\nID for the\ntimer this will stop the stopwatch from\nrunning then we will calculate the\nelapse time elapsed time equals the date\nright now date. now method minus the\noriginal start\ntime then set is running\nequal to false because the stopwatch is\nstopped it's not running\nanymore now we can start the\nstopwatch and we can stop it we can\nstart it and we can stop it the last\nthing we need to do is reset the\nstopwatch we can really just copy\neverything that we have when we\ninitially assign these\nvariables we need to clear the timer\nclear interval p pass in our variable\ntimer that contains the ID of the set\ninterval\nfunction the start time will be zero the\nelapse time will be\nzero is running will be\nfalse change the text content equal to\nall\nzeros this is for the hours minutes\nseconds and\nmilliseconds all right let's see if\neverything works just fine we can\nstart we can\nstop we can start we can stop we can\nreset we can start and we can stop all\nright everybody so that is how you can\ncreate a stopwatch program using\nJavaScript HTML and\nCSS hey what's going on everybody so\ntoday I'm going to explain es6 modules\nin JavaScript a module is an external\nfile that contains reusable code that\ncan be imported into other JavaScript\nfiles let's say you write a really\ndifficult program well any part of that\nprogram you can import into a different\napplication if you don't feel like\nrewriting it modules can contain\nvariables classes functions and more es6\nmodules were introduced as part of the\necmascript 2015 update using modules we\ncan create some reusable code that can\nbe used in different programs different\nJavaScript files\nso what we'll do in this example we will\ncreate a new\nfile I'll create a module for some math\nutility functions this file will be math\nu.j it's a separate Javascript\nfile from our index file we will import\nthis module mathu till. JS but in order\nto do so within our HTML file we have to\nset the type\nattribute equal to\nmodule we'll now treat our index file as\na module we can Import and Export other\nmodules freely but we have to be sure to\ninclude this attribute and set it equal\nto\nmodule So within our math util module we\ncan write some reusable code for other\nprograms so let's define what Pi is Pi\nequal\n3.14159 we'll create a function to get\ncircumference you have to pass in a\nradius though that's going to be the\nparameter function get\ncircumference we need a\nradius we will\nreturn 2 * pi time\nradius then we'll create a function to\nget\narea get area we still need a\nradius we will turn Pi * radius *\nradius then get volume to get the volume\nof a\nsphere function get\nvolume again we need a\nradius we will\nreturn 4 * < * radius *\nradius I can reuse these variables and\nfunctions for any JavaScript program\nthat I have I can import them in order\nto do so though we need to be sure that\nwe prefix each variable function or\nclass or anything else with the export\nkeyword so that we can import it\nelsewhere so let's be sure we do\nthat all right be sure to save\neverything we can close out of this\nmodule then from our index CSS file I\nwill\nimport then we're going to use object\ndestructuring we need a set of curly\nbraces\nfrom the location of that module so\nthese files are right next to each other\nrelatively speaking the right next to\neach other I would need slash the name\nof that file math util and this is a\nJavascript\nfile now anything I would like to import\nI'll place within the set of curly\nbraces we're going to be using object\ndestructuring from this JavaScript\nmodule I would like Pi comma separate\neach entity then I would like get\ncircumference get area get\nvolume I can now use these variables and\nfunctions as if they were already part\nof my Javascript file for example I'm\ngoing to\nconsole.log Pi and Pi does have a value\nbecause we imported it let's get the\ncircumference but we do need to pass in\na radius\nthis is a function that we have imported\nfrom that mathutils module I will store\nthe result within a\nvariable const circumference equals\nwe'll invoke the get circumference\nfunction from that module I'll pass in\n10 then we're going to display the\ncircumference I'll use console.\nlog I'll use a template string include a\nplaceholder display the circumference\nplus a unit of measurement like\ncenm 62.83 one8 CM this isn't necessary\nbut I'm going to round this number to\ntwo decimal places using the two fixed\nmethod of numbers let's round to two\ndecimal places let's create an area\nvariable const area equals get area I'll\npass in 10 for the\nradius let's copy this line and paste it\nbecause I'm lazy let's display our area\nvariable with cm\ncubed\n31416 cenm cubed then we'll create a\nvolume variable const volume equals get\nvolume I will pass in\n10 and then we will display the\nvolume volume cm cubed and our volume if\nwe pass in a radius of 10 would be\n1,256 64 cm cubed all right everybody so\nthose are modules they external files\nthat contain reusable code that can be\nimported into other JavaScript files you\ncan write variables classes functions\nand more that can be reused in other\nprograms you just have to be sure to\nimport them and well everybody those are\nes6 modules in\nJavaScript yo what's going on on people\nso in today's video I got to explain\nwhat asynchronous code is in JavaScript\nsynchronous is code that executes line\nby line consecutively in a sequential\nmanner synchronous code waits for an\noperation to complete for example if I\nwere to use\nconsole.log Let's Pretend We're\nperforming some task it doesn't matter\nwhat the task is we will pretend that\ntask one is complete then we'll move on\nto task two then task three all this\ncode is synchronous\nwe're executing this code line by line\nwe can't move on to task two until we\ncomplete task one there is an order of\nevents that we need to follow it's code\nthat waits for an operation to complete\nnow on the other hand asynchronous code\nallows multiple operations to be\nperformed concurrently without waiting\nasynchronous code doesn't block the\nexecution flow and allows the program to\ncontinue imagine that asynchronous code\nis kind of like a time traveler a time\ntraveler can move out of the flow of\ntime but the rest of the world continues\ntime resumes normally asynchronous code\ndoesn't block the execution flow time\nmoves on with or without it asynchronous\ncode is typically found with input\noutput operations Network requests and\nfetching data anything that could take\nan indeterminate amount of time so for\nexample I will use the set timeout\nfunction after after 3 seconds I will\nexecute a\nfunction let's\nconsole.log let's say task one we'll\nchange these three lines to be task 2\ntask three task 4 I will finish Task 1\nafter 3,000 milliseconds now check this\nout we've already completed task 2 3 and\nfour but task one finished last that's\nbecause set timeout is one of many\nasynchronous functions s the rest of the\nprogram isn't going to wait around for\nit to complete it runs concurrently with\nthe rest of my code that's why task one\nwas completed at the end and not at the\nbeginning there's different ways to\nhandle a synchronous code we're already\nfamiliar with callbacks but there's also\npromises as well as a sync and a wait we\nstill need to discuss these topics in\nthe future but we're already familiar\nwith callbacks if it's crucial that task\n2 through 4 finishes after task one\nwe can use a callback we don't\nnecessarily know how long this\nasynchronous function is going to take\nwhat we could do in this example is\ncreate a function function Funk one\nmeaning function\none I will execute this code within\nfunction\none then we will accept a callback as an\nargument then we'll have function Funk 2\nto do some synchronous code\nfunction two will have tasks 2 through\n4 after task one is complete I will\ninvoke my call back to function two so\nwith an arrow function I have more than\none line of code I need to add a set of\ncurly\nbraces after task\none I will invoke that call\nback so then if I call function\none I have to pass a call back to\nfunction\ntwo so Now function one is\nasynchronous but I need this synchronous\ncode to execute after task one is\ncomplete and now that should\nwork one 2 3 there it is we have task\none which is asynchronous followed by\ntask two task three and task four so by\nusing callbacks that's one way in which\nwe can handle asynchronous code\nbut we still need to discuss promises a\nsync and a wait which are future topics\nall right everybody so that is what a\nsynchronous code is synchronous code\nexecutes line by line consecutively in a\nsequential manner asynchronous code\nallows multiple operations to be\nperformed concurrently without waiting\nasynchronous code doesn't block the\nexecution flow and allows the rest of\nthe program to continue asynchronous\ncode is commonly found with input output\noperations Network requests and fetching\ndata usually anything that takes an\nindeterminate amount of time and well\neverybody that's what asynchronous code\nis in\nJavaScript hey people so in today's\nvideo I'm going to explain error objects\nin JavaScript and how to handle them an\nerror is an object that is created to\nrepresent a problem that occurs errors\noccur often usually when we accept user\ninput or establish a connection it's an\nobject that's created to represent a\nproblem so for example I am going to\nconsole.log the word hello and then\nafterwards I'm going to display a\nmessage to indicate that we have reached\nthe end of the program you have reached\nthe end this runs as it should right\nlet's say I misspell log as leg well we\nencounter an uncaught type error there's\nmany different types of Errors console.\nleg is not a function type errors tend\nto happen when we try and access\nsomething within an object that doesn't\nexist one big issue that we run into is\nthat we prematurely exit the program it\nnever finishes executing we have not\nreached the end errors when they're\nuncaught interrupt the normal flow of\nour program another example of an error\nwould be a reference error I will\nconsole.log X but X isn't defined we\nhave an uncaught reference error X is\nnot defined and again it interrupts our\nprogram we never reach the end errors\ncan be generated for all sorts of issues\nsuch as network issues promise rejection\nwhich we still need to talk about and\nsecurity errors when we encounter a\nproblem when doing one of these things\nan error object will be generated and it\ninterrupts our program there's a\nsolution though and that is to handle\nthese errors when they occur we can do\nthat with try catch and find blocks with\nthe tri block we can enclose any code\nthat might potentially cause an error\nsuch as if we're trying to establish a\nconnection to something if that\nconnection fails an error can occur if\nwe don't handle it it's going to\ninterrupt our program so all of this\ncode I will place within a tri block we\nwill try all of this\ncode but we need a catch block\ntoo the catch block has one parameter it\nwill catch an error\nobject then let's\nconsole.log the error object to see what\nit is so let's run this we have a\nreference error a is not defined see now\nwe are reaching the end of the program\nthe program is not being interrupted we\nhave gracefully handled this error\nbefore it was uncaught but now it's\ncaught for catching errors I wouldn't\nrecommend using\nconsole.log rather I would use console .\nerror this will highlight any errors\nthat occur and still handle them it's\ngood for debugging we can clearly see\nthe error reference error X is not\ndefined and again it doesn't interrupt\nour program we still reach the end now\noptionally you can add a finally block\nthe finally block always executes\nregardless if an error comes up the\nfinally block is usually used for\nclosing files closing connections or\nreleasing resources usually when you\nopen something or establish a connection\nyou need to close it afterwards you\ndon't want to leave it open that's where\nthe finally block comes in do any\ncleanup at the end whether or not an\nerror occurs so just to test this I'm\ngoing to\nconsole.log this always\nexecutes I'm going to console.log X we\nhave a reference error it is caught so\nit doesn't interrupt anything we're\nstill executing the finally block and we\nreach the end of our program if we don't\nrun into any errors I'm going to\nconsole.log\nhello there are no errors that occur we\ndon't end up catching anything this\nalways executes the finally block and we\nreach the end of our program so any code\nthat is considered dangerous where it\ncould cause an error you'll want to\nsurround with a tri block and then catch\nthem in the future if you ever open any\nfiles or establish a connection you'll\nwant to finally block two close those\nconnections but we haven't discussed\nthat yet errors can also occur when\naccepting user input because we don't\nknow what the user is going to type in\nin a worst case scenario a user could\ntype in a malicious script in this next\nexample I'm going to create a constant\nfor a dividend and a advisor const\ndividend equals window.\nprompt enter a\ndividend with division a dividend is the\nnumber that is being divided and we need\na\ndiviser a divisor is the number we're\ndividing by enter a\ndivisor then I'm going to create a\nconstant result result equals our\ndividend divided by our\ndiviser\nconsole.log the\nresult\nwhat is 1 / 2\n0.5 now mathematically speaking we can't\ndivide a number by 0 if you attempt to\ndo this in JavaScript I will divide 1 by\nzero you end up with infinity we can\nintentionally cause errors then handle\nthem with try catch and optionally\nfinally blocks so this code is\nconsidered dangerous I'll place it\nwithin a tri\nblock\nwe need to catch any\nerrors catch an error object if it\noccurs then console.\nerror the error\nobject so just to test this instead of\nconsole. log I'll misspell log as\nleg I should probably add a message just\nto confirm that we have reached the\nend you have reached the\nend 1 / 0\ntype error console. leg is not a\nfunction but we still reach the end our\nprogram isn't interrupted within a tri\nBlock in certain situations we can\nintentionally cause an error I'm going\nto use an if\nstatement if our\ndivisor is equal to\nzero then I will throw a new error\nobject we're calling the error\nConstructor to constru conu a new error\nobject within the Constructor we have\none argument we can pass in a message\nwhat is the error going to say you can't\ndivide by\nzero okay let's try this enter a\ndividend one enter divisor I'll type in\nzero then press\nokay we have a caught error you can't\ndivide by zero our program isn't\ninterrupted we still reach the end let's\nchange console. Le back to log cuz I\nforgot to do that what if somebody\nattempts to type in something that's not\na number enter a dividend one enter a\ndivisor I'll type in the word\nPizza not a number you have reached the\nend I would like to throw a new error\nwhen somebody doesn't type in a number\nwhat I can do is that with our prompt I\nwill typ cast it as a\nnumber if somebody enters in some\nnon-numeric characters for either the\ndividend or the diviser we will store\nwithin there not a number so let's check\nthat with an if statement if is not a\nnumber if our dividend is not a number\nor our divisor is not a\nnumber let's throw a new error throw new\nerror values must be a number\nI will divide one by the word\nPizza error values must be a number we\nstill reach the end of our program with\nerror objects you can even create your\nown in certain situations and then you\ncan handle them however you want all\nright everybody so those are error\nobjects and how to handle them an error\nis an object that is created to\nrepresent a problem that occurs they\noccur often with user input or\nestablishing some sort of connection to\nhandle them you can use try catch and\noptionally finally blocks which are\nmostly used for cleanup if there's any\ncode that can cause an error place it\nwithin a tri block and catch any errors\nthat happen and well everybody that is\nhow to handle errors in\nJavaScript hey what's going on everybody\nin today's video we're going to create a\ncalculator program using HTML CSS and\nJavaScript so let's get started all\nright let's do this thing everybody we\nhave a lot of buttons to create but\nwe'll need a container I will create a\ndiv element the div element will have an\nID of\ncalculator within the div element we'll\ncreate an input\nelement the input element will have an\nID of\ndisplay to display the numbers that we\ntype in I don't want somebody to enter\nin some text for the\ndisplay I would like this display to be\nreadon I will add the read only property\nso we can't type in anything even though\nI'm trying I will create a nested div\nelement that has an ID of keys for all\nof the keys we need to add a lot of\nbuttons we'll begin with the first I\nwill create a button element the text on\nthe button will be plus I will set the\non click attribute of this button to be\na JavaScript function we still need to\nDefine this fun function eventually\nwe'll create a append to display\nfunction we have one argument to pass\ninto this JavaScript function a\ncharacter of\nplus that's our first button let's copy\nthis button and paste it 13 additional\ntimes if I counted\nright okay the second button will be\nseven the character we're passing in is\nseven followed by\n8\n9\nminus\n4\n5\nsix asterisk for\nmultiplication\n1\n2\n3\nforward slash for\ndivision then\nzero and here are the new buttons I\nmiscounted we need to add one\nmore a DOT for a\ndecimal now we need an equals button\nwe're going to arrange that a little\ndifferent let's create a\nbutton with the text of\nequals the onclick attribute of this\nspecific button is going to be\ncalculate then we need a button to clear\nour\nscreen the text on this button will be\ncapital c for clear the onclick\nattribute of this button is going to be\nclear\ndisplay and that is all the buttons\nwe'll\nneed so let's save everything and let's\ngo to our CSS\nstylesheet I'm going to zoom back to 100\n% first let's style all these buttons I\nwill select all\nbuttons for each button I will set the\nwidth to be 100\npixels the height to be 100 pixels so\nthey're\neven I would like rounded buttons I will\nset the Border radius property to be 50\npixels so they're\ncircles let's remove the\nborder border\nnone I'll change the background color of\nthe buttons background-\ncolor I'll use hsl values I'll set the\nlightness to be 30% so they're darker\nfor the text of the button I will set\nthe color to be\nwhite for the font\nsize I will set that to be 3\nRM set the font weight to be\nbold then when I hover my cursor over\none of the buttons I would like my\ncursor to be a\npointer\ncursor\npointer now we have to arrange these\nbuttons\nproperly let's select the ID of keys\nkeys is a development that's containing\nall of the\nbuttons this\nelement all of the buttons are\nwithin\nto arrange these buttons in a grid we\ncan set the display\nproperty to be a\ngrid for this calculator I would like\nfour columns to do that I will set the\ngrid template columns property to be\nwe'll use the repeat function of\nCSS I would like four columns then to\narrange these buttons evenly you can use\none f r f FR stands for fractional unit\none F FR indicates that each column\nshould take up an even amount of space\nso now we have Columns of four if I were\nto set this to three we would have\nColumns of three but I'm going to use\nColumns of four because I would like all\nof the operators on the left hand side\nI'll set the Gap to be 10\npixels that is the gap between each of\nthe\nrows then I'll add some padding of 25\npixels that's padding around the\nkeys let's select the ID of\ncalculator I'll add that to the top to\nkeep everything\norganized with our calculator I will\nselect a font family of aiel with a\nbackup of s\nserif let's pick a background color for\nthe\ncalculator I will select something\ndarker I'll set the lightness to be\n15% I'll round the corners of the\ncalculator border radius 15\npixels the corners of the calculator are\nsmooth\nnow then I will set a Max width of the\ncalculator to be 500\npixels if any elements overflow I will\nset that to be\nhidden this is mostly for our display if\nwe have a very long equation all right\nnext let's select the display right now\nit's kind of\nsmall we are selecting our ID of\ndisplay let's set the width to be\n100% I'll add some padding of 20\npixels for the text of the display I\nwill set the font size to be\n5\nRM let's text a line\nleft I'll remove the border border\nnone and I'll change the background\ncolor I'll just copy this property\nbecause I'm lazy let's increase the\nlightness to\n20% then we'll select the body of our\ndocument\nI will remove all margin margin\nzero I would like the calculator to be\nin the middle of my window right now\nit's in the top left corner if you would\nprefer it up here you can leave it as\nis I will set the display to be Flex for\nFlex\nbox\njustify\ncontent in the center for a horizontal\nalignment M for vertical alignment we\ncan set\nalign items to be Center but we do need\nto increase the height of the body of\nthe document so it's\n100% I will set the height to be 100 VH\nfor 100% of the viewport height that\nshould place the calculator in the\nmiddle of the body of our document both\nhorizontally and vertically for the\nbackground color I'm going to decrease\nthe lightness slightly\nfor the background color I will set the\nlightness to be like\n95% okay let's go to the bottom of our\nCSS\nstylesheet when I hover over one of\nthese buttons I would like to increase\nthe lightness so with all\nbuttons with the hover sudo\nclass change the background color so the\nlightness is 40% instead of\n30 now these buttons light up when we\nhover our cursor over one of the\nbuttons now when I click on one of the\nbuttons I'll increase the lightness\nfurther so it\nflashes we are selecting the active\npseudo class\nnow let's take our background color\nproperty increase the lightness to\n50% when we hover over a button it\nlights up when we click on it it flashes\nmomentarily so with all of these\noperators I would like all of these op\nbuttons to be a different color I'll\npick orange we're going to give each of\nthese buttons a new class let's head\nback to our HTML file beginning with the\nplus button I will set the class equal\nto operator Das BTN for\nbutton so let's copy this class paste it\nfor our minus\nbutton multiply\nbutton divide button and the clear\nbutton now we will select the class of\noperator BTN for\nbutton let's change the background\ncolor I'm going to set the background\ncolor to be\norange I've already pre-picked a\ncolor when I hover my cursor over one of\nthe operator buttons I would like the\ncolor to be a lighter orangee instead of\ngray let's take our operator button\naccess the hover sudo class I'll\nincrease the lightness to\n65% then when I click on one of these\nbuttons I would like the lightness to\nincrease further with the operator\nbutton\nclass with the active pseudo class\nincrease the lightness to\n75% so when I click on one of the\noperator but buttons it's going to flash\nmomentarily all right and that is all\nthe HTML and CSS that we need now we\njust need to add functionality let's go\nto our Javascript\nfile for our Javascript file there's not\na lot we have to write first we need to\nget the display element so what was that\nID\ndisplay const display equals document.\ngetet element by ID get the ID of\ndisplay we have three functions to\ncreate a function for append to display\ncalculate and clear display these three\nfunctions function append\nto\ndisplay there is one parameter\ninput because we were passing in a\ncharacter when we call this\nfunction then we have a function\nto clear\ndisplay then a function to\ncalculate we'll begin with a pen to\ndisplay all we're going to do is take\nour display this element access its\nvalue append it with plus equals our\ninput and let's see if this works seven\nI forgot to change the font color of the\ndisplay so let's do that within our\ndisplay element let's set the color to\nbe white okay that's much\nbetter\n7.13 + 5 equals okay we know that that\nworks when I click on the clear button I\nwould like to clear this\ndisplay let's access our display element\nat access the value property set it\nequal to an empty string\n3.14159 when I hit clear it should clear\nthe\ndisplay lastly we have\ncalculate let's take our display\nelements value property set it equal to\nnow we're going to use the eval\nfunction the eval function takes an\nexpression such as 1 + 2 + 3 and\nevaluates it and gives a result it's\nkind of like it's its own built-in\ncalculator so to say evaluate the value\nwithin our\ndisplay display.\nvalue so if I add\n3.14 plus\n1.01 I'm given a result of\n4.15 now for some reason if we get an\nerror for example 7 + equal\nwell we have a problem let's go to our\nconsole we've encountered an uncaught\nsyntax error because we never finished\nour equation in the last lesson we\nlearned about error handling this is\ndangerous code it can cause an error\nlet's surround this code with a try\nblock we will try this code and catch\nany errors that\nhappen so we need a catch block now\ncatch any errors\nwe will change the value of the display\nto equal some text of\nerror all right and that should work\n3.14 times equals that results in an\nerror we can clear it and then start\nover what's 1 + 2 + 3 + 4 that would be\n10 all right everybody so that is is a\ncalculator program you can make using\nJavaScript HTML and CSS impress your\nfriends all right what's going on people\nso today I got to explain what the Dom\nis in JavaScript the Dom is the document\nobject model it's a JavaScript object\nthat represents the page you see in the\nweb browser and it provides you with an\nAPI to interact with it the web browser\nconstructs the Dom when it loads an HTML\ndocument and structures all of the\nelements in a tree like representation\nwithin my HTML document we have our HTML\nelement as the root element the HTML\nelement contains a head element and a\nbody element and many various elements\ncan be found within each of these\nthey're arranged in a tree likee data\nstructure but we access this tree like\ndata structure from the document object\nin past lessons in order to select an\nelement by its ID we would type document\ndot then follow it with a method like\nget l element by ID and then we would\nselect an element by its ID our document\nis an object it contains properties and\nmethods and other nested objects if I\nwas to\nconsole.log the\ndocument well then it's going to display\nmy HTML\ndocument now you can also use dur\nmeaning directory this will list all of\nthe properties of this\nobject so here's my document object and\nall of the different properties it\ncontains it's one gigantic object for\nexample we have a title the title of the\nweb\npage that would be found right here near\nthe bottom document but you can change\nit I will access our document as if it\nwas an object because it is access the\ntitle property change it to something\nelse like my\nwebsite now if I display the title\nthat property has changed it's now my\nwebsite dynamically after the page loads\nI would like to change the background\ncolor of my document later on in the\nseries we're going to create a toggle\nbutton to toggle between light and dark\nmode just to give you an example if I\nneed to change my theme to be dark mode\nI could access the document object\naccess the\nbody access the style then change the\nbackground color property to some\ncolor let's stick with black for\nnow I'll use\nhsl the Hue will be zero saturation will\nbe 0% and the lightness will be\n15% even though we have no CSS we're\nstill able to dynamically change the\nbackground color let me give you another\nexample we'll create an H1\nelement this H1 element will say welcome\nI will give this element an ID\nID\nwelcome- MSG meaning\nmessage and I'm just going to zoom in a\nlittle I will create a constant of\nusername type in your username or your\nfull\nname I'm going to conditionally change\nthe content of this HTML document I will\nget this element by its ID our welcome\nmessage const welcome message I'm using\ncamel case naming convention for this so\nI will access my document use the get\nelement by ID method that ID was\nwelcome- message MSG for short I would\nlike to update the text content of this\nelement I'll take my welcome\nmessage access the text content of it\nthen appen some text using stringy\ncatnation I'll use the tary operator to\nsee if my username is strictly equal to\nan empty string is our username empty\ndid somebody not type it\nin question mark If username is empty I\nwill append our welcome message with\nguest otherwise our\nusername my username has a name it's not\nempty it will display my name welcome\nThro code if it was empty if somebody\ndidn't type it in it will display\nwelcome guest so that's an introduction\nto the document object model the\ndocument object model is a JavaScript\nobject that represents the page you see\nin the web browser and it provides you\nwith an API to interact with it the web\nbrowser constructs the Dom when it loads\nan HTML document and structures all of\nthe elements in a tree likee\nrepresentation by using JavaScript we\ncan access the Dom dynamically after the\npage loads and change the content\nstructure and style of a web page and\nwell everybody that is an introduction\nto the document object model in\nJavaScript hey it's me again so today I\ngot to explain element selectors in\nJavaScript element selectors are methods\nused to Target and manipulate HTML\nElements by using these methods they\nallow you to select one or more multiple\nHTML elements from the Dom the document\nobject model these methods are built-in\nmethods of document the Dom we can\nselect Elements by an ID a Class A tag\nname and then there's query selector and\nquery selector all these methods return\nsomething different either an element an\nHTML collection or a node list one\nmethod you're probably already familiar\nwith is get element by ID so in this\nexample within our HTML document we will\ncreate an H1 element I will create a\nheading for my sample web page I'm\nhungry so I'm going to talk about food\nmy heading is going to be food are us\nit's like Toys R Us but it's with food\nI'm going to give this H1 element an ID\nof my Dash\nheading so going back to our Javascript\nfile I can select this element by its ID\nI'll store a reference to it const my\nheading equals we're accessing the Dom\nwith\ndocument. get element by ID that ID was\nmy heading I can access this element\nthis H1 element using this reference so\nlet's take my\nheading access its\nstyle access its background\ncolor so with CSS properties in\nJavaScript if you're accessing them\nthrough the Dom they have a camel case\nnameing convention if you're selecting\nthese properties with\nCSS they have a hyphenated naming\nconvention so do pay attention to that\nso with the background color I will set\nit to be yellow as if we're highlighting\nit you could also apply different CSS\nproperties let's take my heading access\nits style access the text align property\nand set it to be\nCenter and it's now centered now if I\nwas to\nconsole.log this element of my heading\nthis is what we would\nsee it displays my HTML element\nincluding its style if it has style for\nsome reason if this ID doesn't exist for\nexample I'll misspell heading as heading\nwith an extra G well this returns null\nif I were to eliminate these two lines\nof code you can see that null get\nelement by ID returns a single element\nif it finds it or null if it doesn't the\nnext method is get Elements by class\nname this returns an HTML collection\nit's similar to an array but it's\nlimited in the built-in methods that it\nhas So within our HTML document I will\ncreate three separate div\nsections this first development will\nhave a class of\nfruits my first fruit will be apple\nso let's copy this development paste it\ntwo times I'll change the second to be\norange then\nbanana all right going back to our\nJavascript file I will use this method\nof get Elements by class name this will\nreturn an HTML collection it's similar\nto an array but it's not technically the\nsame so const fruits this will be the\nname of my HTML collection equals docu\ndoent we're accessing the Dom get\nElements by class\nname what is the class name that we're\ngetting\nfruits let's console. log fruits just to\nsee what it is what are we working\nwith so fruits is an HTML collection my\ncollection contains these three elements\nwe have three objects within this HTML\ncollection if I was to take a look at\nsome of these properties we should have\ntext content so for the first element we\nhave text content of Apple for the next\ndiv element which has an index of one\nthe text content is orange we can assume\nthat the next element has text content\nof banana to change something about one\nof these elements let's begin with the\nfirst element we have an HTML collection\nof fruits to select one of these\nelements you'll use an index so let's\ntake our HTML collection of fruits at\nindex zero that's going to return the\nfirst element our div element of Apple I\nwill access its style access its\nbackground\ncolor set it equal to be yellow as if\nwe're highlighting\nit there we are Apple it's highlighted\nfor the next element I will increase the\nindex to one that will select our orange\nand then two would be banana if I would\nlike to iterate over all of these\nelements I can use an enhanced for\nLoop we'll say let fruit of\nfruits HTML collections are iterable we\ncan iterate them with an enhanced for\nLoop let's take each fruit access its\nstyle access its background\ncolor then set it to be\nyellow and that should highlight all of\nthem now HTML collections don't have a\nbuilt-in for each method HTML\ncollections do allow for live updates\nbut unfortunately they have a limited\namount of utility\nmethods if I attempt to use our HTML\ncollection of fruits then attempt to use\na for each\nmethod here's what\nhappens we have a type error fruits. 4\neach is not a function HTML collections\ndon't have a for each method we're not\nable to use that what we could do is typ\ncast our HTML collection as an array\nlet's access the class of array then use\nthe from\nmethod this will return a new array of\nfruits we'll typ cast our HTML\ncollection as an array then you could\nfollow this with the for each method if\nyou so choose for each element within\nour array after type casting it let's\ntake each fruit I'll use an arrow\nfunction what would we like to do let's\ntake each fruit access its\nstyle access its background\ncolor then set it to be yellow as if\nwe're highlighting\nit and that does work get Elements by\nclass name will return an HTML\ncollection of all matching elements that\nshare this class if you would like to\nuse array method me with this HTML\ncollection you would want to typ cast it\nto an array all right now we have get\nElements by tag name within our HTML\ndocument we'll create two unordered\nlists I will create an H4 heading of\nroot\nvegetables let me scroll\ndown I will create an unordered\nlist with a few list items three should\nbe good for my first list item that will\nbe beets beets are a root\nvegetable\ncarrots and\npotatoes let's copy our unordered list\nand our H4 heading paste it change the\nsecond H4 heading to be nonroot\nvegetables my first list item within\nthis other list will be\nbroccoli celer\nand onions I just picked three\nvegetables kind of at\nrandom with our next method of get\nElements by tag name I can select one of\nthese elements by their tag name H4\nunordered list list items take all\nmatches within our HTML document stick\nthem all within an HTML collection I\nwill create const const H4 elements\nequal alss we're accessing the Dom use\nthe get Elements by tag name\nmethod let's select all H4\nelements then I will\nconsole.log my HTML collection of H4\nelements let's see what it\nis so it looks like this HTML collection\nhas two\nelements two H4 elements the text\ncontent of the first element is root\nvegetables then we can assume that the\nother element is non-root vegetables yes\nit is non-root\nvegetables we can access individual\nelements of this HTML collection by an\nindex let's take this reference of H4\nelements access the first\nindex access the style access the\nbackground\ncolor set it to be yellow as if we're\nhighlighting it and that should\nhighlight root vegetables the next index\nof one would be non-root vegetables to\napply CSS properties to all of the\nelements I can use an enhanced for\nLoop for let H4 element singular of H4\nelements plural take each H4 element\naccess its style access its background\ncolor set it to be\nyellow and that will highlight all of\nthe H4\nelements let's create another HTML\ncollection of all the list item elements\nwe'll create another reference to all\nlist item elements so that'll be beets\ncarrots potatoes broccoli celery and\nonions const Li elements equals\ndocument. getet Elements by tag\nname the tag that we're selecting is all\nlist item elements\nso using a for Loop let's iterate\nthrough\nthem let Li element singular of Li\nelements plural for each list item\nelement access the style access the\nbackground color then set it to be a\ndifferent color let's say light\ngreen and now all list item elements\nwill be a light green color and again\nsince the these are HTML collections not\narrays they don't have any array methods\nbut we can typ cast them so that they do\nif I wanted to change the background\ncolor of these with the for each method\nof\narrays I'm going to typ cast our HTML\ncollection of H4 elements as an\narray I will access the class of array\nuse the from\nmethod pass our HTML collection of H4\nelements as an argument if I wanted to\nuse the for each loop I can method\nchange\nfollow this with for each what do we\nwant to do for each of these elements\ntake each H4 element use an arrow\nfunction do this take each H4 element\naccess its style access its background\ncolor set it to be\nyellow and that does work so let's do\nthis with our list item elements I'll\njust copy this because I'm lazy we'll\ntype cast our list item elements HTML\ncollection for each list item element\ntake each list item element access its\nstyle access its background color set it\nto be light green and that does work to\nthat is the get Elements by tag name\nselector it will select all elements\nwith a matching tag name throughout your\ndocument it returns an HTML\ncollection now we're going to talk about\nquery selector query selector will\nreturn the first matching element or\nnull if it doesn't find any matches I\nwill create a const of element equals\ndocument. query\nselector query selector will return the\nfirst match to select an element by a\nclass name we'll use dot the name of the\nclass these three elements have a class\nof fruits let's select that dot fruits\nif I was to take this element access its\nstyle access its background color set it\nto be yellow which element do you think\nis going to be selected the first Apple\nit's the first matching element Cory\nselector only returns a single element\nthe first match if I selected a tag name\nof H4 that would select root vegetables\neven though we have two H4 elements the\nfirst matches selected if I selected the\nfirst list item element that would\nselect beats that is the first list item\nelement on my web page if I changed this\nto UL meaning unordered list it would\nselect the first unordered list if I\nattempt to select something that doesn't\nexist like any ordered\nlists well they don't exist there's no\nmatches if I was to\nconsole.log my element\nit would return n there's no matches so\nquery selector selects the first\nmatching element or null you can select\na class or a tag\nname then the last method we'll discuss\nis query selector all this returns a\nnode list a node list is similar to an\nHTML collection except it has built-in\nmethods similar to arrays however no\nlists are static HTML collections are\nlive since node lists are static they do\nnot update automatically in the Dom HTML\ncollections are live they will I'm going\nto select all elements that have a class\nof fruits I'll create a reference to\nthis const fruits equals\ndocument. query selector\nall we are getting a class of fruits\nI can access this node list by an index\nnumber let's select the first element\naccess the style access the background\ncolor set it to be\nyellow and that will select Apple let's\nselect the next element that's orange\nthe next would be\nbanana let's select all list item\nelements I'm going to rename this though\nlet's rename fruits as\nFoods let's select the first element\nthat would be\nbeets the next element would be carrots\nthen\npotatoes broccoli\ncelery\nonions so if I was to\nconsole.log\nFoods this would give me a node list\nwith six\nelements node lists do have a built-in\nfor each method let's use that we don't\nneed to typ cast it as an\narray take our node list of foods use\nthe built-in for each method what do we\nwant to do take each food use an arrow\nfunction do this take each food access\nits style access its background color\nset it to be\nyellow this will take all list item\nelements change the background color to\nYellow as if we're highlighting them all\nright everybody so those are different\nelement selectors get element by ID get\nElements by class name get Elements by\ntag name query selector and query\nselector all there is a lot of overlap\nwhere you could select any number of\nthese to select something but they each\nreturn something different personally I\nlike using a combination of get element\nby ID and query select all but that's\njust my personal preference in\nconclusion element selectors are methods\nused to Target and manipulate HTML\nelements they allow you to select one or\nmore multiple HTML elements from the Dom\nonce you select your element or elements\nyou can make any sort of changes that\nyou would like and well everybody those\nare element selectors in\nJavaScript yo what's going on people so\ntoday I got to explain Dom navigation in\nJavaScript Dom navigation is the process\nof navigating through the structure of\nan H HTML document using JavaScript HTML\nelements include but are not limited to\nthe following properties for D\nnavigation we can get the first child\nthe last child the next sibling the\nprevious sibling a parent or all the\nchildren of an element so for this\nexercise within our HTML document we're\ngoing to create a few unordered lists of\ncourse these unordered lists are going\nto be for food because I like food the\nfirst unorder list will have an ID of\nfruits let's create a few list item\nelements an\napple an\norange and a\nbanana we'll need a few unordered lists\nto work with let's copy this unordered\nlist and paste it twice the second list\nwill be for\nvegetables pick some vegetables I'll\npick\ncarrots\nonions potatoes\nthe third unordered list will be for\ndesserts I'll pick\ncake\npie ice\ncream that is good enough for now\nheading back to our Javascript file I\nwill now discuss the property of first\nelement child our unordered lists are\nelements they each have their own\nchildren a child element is any element\nfound within this element our unordered\nlist of fruits has three children Apple\norange banana vegetables has three\nchildren carrots onions potatoes\ndesserts has three children as well cake\npie and ice cream let's say that our\nunordered list of fruits is a parent\nwell Apple would be the firstborn orange\nwould be the middle child and banana\nwould be the last born if these were\nactual children so think of it that way\nso so I'm going to create a constant of\nelement I'll be using this as a\nreference document. getet element by ID\nI will get that unordered list of\nfruits I'm storing this unordered list\nwithin this\nelement I will create a reference for\nthe first child equals take our element\naccess the first element\nchild if I was to take this element\nchange its style access its background\ncolor set it to be\nyellow which element is going to be\nhighlighted Apple if I selected a\ndifferent element like my Ida vegetables\nthe first child would be carrots then\ndesserts the first element child of\ndesserts is cake they are the firstborn\nchildren they're at the top Within These\nun ordered lists if you used query\nselector all I'll give you a\ndemonstration I will select all\nunordered lists const UL\nelements equals\ndocument dot query selector all select\nall unordered\nlists this will return a node list node\nlists do have their own built-in for\neach method take all UL elements use the\nbuilt-in for each method what do we want\nto do iterate over every unordered list\nelement do this let's create a reference\nto the first\nchild\nequals take our unordered list\nelement access its first element child\nthen store it as a reference\nlet's take our first\nchild access its style access its\nbackground color\nproperty set it to be\nyellow that will highlight all of the\nfirst element children of all the\nunordered lists so that's how you can\nuse Query selector all to select all of\nthe first children of all matching\nelements now we're going to access last\nelement child with our unordered lists\nif we're select ing our elements of\nfruits vegetables and desserts this\nwould return the last child banana\npotatoes or ice cream depending on what\nwe're selecting if these were actual\nchildren these three elements are the\nlast born they're the youngest I'm going\nto create a reference to an element\nequals access the Dom get element by ID\nI will get my ID of\nfruits I will create a reference refence\nto the last child\nequals take our\nelement get the last element\nchild take our last child\nelement access its style access its\nbackground color set it to be\nyellow so that will highlight banano if\nI change the selected element to\nvegetables that would select potato es\nif I selected desserts that would select\nice cream they are the last element\nchildren found within each of these\nelements if I were to use Query selector\nall to select all unordered lists let's\ncreate const UL\nelements equals\ndocument. query selector all select all\nunordered\nelements this returns a node list\nthey have their own built-in for each\nmethod take our node list of unordered\nelements use the built-in for each\nmethod take each unordered list\nelement use an arrow function to do this\nI will create a reference to the last\nchild\nequals take each unordered list\nelement access the last element\nchild take the last child during each\niteration access its style access its\nbackground color set it to be yellow and\nthat will select banana potatoes and ice\ncream select all unordered lists take\neach of their last children change the\nbackground color to be yellow so that is\nthe last element child property in this\nnext example I'll demonstrate next\nelement sibling but we're going to make\na few changes going back to our h HTML\nfile we will give each of these list\nitems a unique ID so let's start with\nthe first the ID will be Apple for the\nfirst list item element I'll copy this\nID for each of these elements and then\nchange them in a\nmoment so we have apple followed by\norange banana carrots onions potatoes\ncake pie then ice cream\nif I'm selecting my unordered list of\nfruits Apple orange banana or the\nchildren they are all siblings to each\nother if I were to select Apple then get\nthe next sibling that would be orange if\nI select carrots the next sibling would\nbe onions if I selected cake the next\nsibling would be pie so let's create a\nconstant of element equals document.\ngetet element by ID the ID that I'm\ngoing to select is\nApple I will create a reference to the\nnext sibling equals take our element\naccess its next element\nsibling take our next\nsibling access its style access its\nbackground\ncolor set it to be\nyellow if I'm selecting Apple the next\nsibling to that would be orange\nif I were to select orange the next\nsibling would be banana if I were to\nselect banana well banana doesn't have a\nnext sibling it's the last in line we\nwouldn't be selecting anything there is\nno next sibling for banana if I were to\nselect carrots the next sibling is\nonions if I selected onions the next\nsibling is potatoes if I selected cake\nthe next sibling is pie if I selected\npie the next sibling is ice cream what\nif I SEL selected fruits vegetables or\ndesserts what would be highlighted I\nwill select the ID of fruits that would\nhighlight my unordered list of\nfruits these three unordered lists of\nfruits vegetables and desserts they're\nall children of the body they're all\nsiblings to one\nanother it's kind of like if the list\nitem elements of Apple through ice cream\nare all children the unordered lists of\nfruits vegetables and desserts are the\nparents\nand the body is the grandparent if I\nselect the unordered list of fruits the\nnext sibling would be\nvegetables by accessing the next element\nsibling of my unordered list of fruits\nthat selects my unordered list of\nvegetables if I selected vegetables then\nget its next sibling that would give me\nthis unordered list of\ndesserts all right then we have previous\nelement sibling if I select an element\nwe'll get the the previous element\nsibling so if I were to select orange\nthat would give me Apple if I selected\nbanana that would give me orange if I\nselected onions that would give me\ncarrots I will create a constant for\nelement equals document. getet element\nby ID I will select\norange const prev meaning previous\nsibling equals take our element access\nthe the previous element sibling if I\nwere to take my previous sibling access\nit style access its background color set\nit to be\nyellow the previous sibling of orange is\nApple the previous sibling of\nbanana is\norange if I selected onions the previous\nsibling is\ncarrots the previous sibling of\npotatoes\nis\nonions the previous sibling of pie is\ncake the previous sibling of ice\ncream is pi if I selected the first\nsibling then attempt to get the previous\nsibling well we don't select anything\nthe previous sibling of a first child\ndoesn't exist if I selected the previous\nsibling of my unordered list of\nvegetables that would select my\nunordered list of fruits if I selected\nthe unordered list of desserts that\nwould give me\nvegetables now we have the parent\nelement property whichever element I\nselect will get the parent the parent is\nthe element that contains\nit const element equals document. getet\nelement by ID I will select\nApple const\nparent equals access our\nelement access the parent element let's\ntake our parent access its style access\nits background color set it to be yellow\nthat will highlight my unordered list of\nfruits if I selected orange well that\nwouldn't change the parent is still\nfruits same thing goes with banana\nif I selected carrots well the parent is\nvegetables that unordered list if I\nselected ice cream while the parent is\ndesserts so that's how to get the parent\nof an element you can access the parent\nelement\nproperty the last property we'll discuss\nis children we can return all of the\nchildren of a selected element I will\ncreate a const element equals\ndocument. getet El element by ID I will\nselect my ID of\nfruits I would like all children of this\nelement I'll create a reference to\nChildren equals take our element access\nthe children property if I was to\nconsole.log\nChildren this is what we're working\nwith by accessing the children of an\nelement that returns an HTML\ncollection this HTML collection has\nthree list item\nelements HTML collections don't have a\nbuilt-in for each method I would need to\ntyp cast it as an array using the from\nmethod of arrays let's take all of our\nchildren convert it to an array then\nmethod chain the for each\nmethod let's take each child from\nchildren then do this take each child\nduring each iteration access its Style\naccess its background color set it to be\nyellow so this will highlight all\nchildren of a selected element Apple\norange then banana if I selected\nvegetables that would highlight carrots\nonions\npotatoes if I selected desserts that\nwould highlight cake pie then ice cream\nyou can even access these children by an\nindex\nnumber\nlet's say you would like to highlight a\nmiddle sibling orange onions or pie\nlet's take our children it's an HTML\ncollection access it by an index number\nso let's access children at index one of\ndesserts that would highlight\npie let's select vegetables that would\nhighlight onions then fruits would\nhighlight\norange all right everybody so that is an\nintroduction to Dom navigation it's the\nprocess of navigating through the\nstructure of an HTML document using\nJavaScript there are several different\nproperties that you can use to navigate\nthrough HTML elements and well everybody\nthat is an introduction to Dom\nnavigation in\nJavaScript hey everybody in today's\nvideo I'm going to show you how we can\nadd and change HTML elements using\nJavaScript so sit back relax and enjoy\nthe show I'll break down creating an\nappending element El to the Dom in three\nsimple steps we'll create the element\nadd any necessary attributes or\nproperties and then append the element\nto the Dom will be the final step but\nbefore we do begin within our HTML file\nwe'll create a few boxes for this\nexercise these will be\ndevelopments with an inner paragraph the\nfirst will have text of box one with\nthis development I will give it an ID of\nbox one and a class of\nbox\nlet's copy the div element paste it\nthree times for a total of four boxes\nwe'll create box\ntwo box\nthree and box\nfour I'll apply the following CSS\nproperties we're selecting the Box class\nadd a border 3 pixel solid set a width\nto be 100% and a height of 125\npixels and we are ready to begin step\none we need to create the element in\norder to work with it right I will\ncreate a constant of new H1 H1 equals we\nwill select our document use the create\nelement method then as a string pass in\nthe type of the element we would like to\ncreate we'll create an H1 element we now\nhave an H1 element to work with which\nwe're referencing as new H1 let's add\nsome attributes and CSS properties let's\ndo one for now now I will take my new H1\nelement access its text content set it\nequal to I like\npizza and then we just have to append\nthis element to the\nDom to do that we will access our Dom\nwith\ndocument what element would we like to\nselect let's select the body element of\nour\ndocument and then we will use the append\nmethod pass in our HTML element as an\nargument and there we go there's our H1\nelement when you append an element to a\nparent this new element is the last\nchild you could prepend if you would\nlike it to be the first child so let's\nuse the prepend method change aend to\nprepend and it's now at the\nbeginning let's add an additional\nattribute we will take our new H1\nelement set the ID attribute equal to my\nH1 and let's see if that worked I will\nrightclick on this element inspect\nit here's our H1 element it's the first\nchild because we're prepending it this\nH1 element has an ID attribute set to my\nH1 let's change the CSS properties of\nthis element I will access new H1 access\nits style access its color the f\ncolor let's set it to be\nred but better yet let's set the color\nto be tomato because I like tomatoes I\nthink that's a better looking shade of\nred let's also Center the text new H1\naccess its style access the text align\nproperty set it to be\nCenter and the text is now centered when\nI append this element I would like to\nappend it to within box one I will\nselect box one as the parent rather than\nthe\nbody we will access our document we need\nto select an element we will select box\none we could use document. getet element\nby ID the ID that I'm going to select is\nbox\none I will then follow this with append\nappend our new H1\nelement so our H1 element is now within\nbox one and not outside of it like it\nwas previously I could append this H1\nelement to box two but I would have to\nselect it we will get element by ID\nselect box two to put it within box two\nbox 3 and box\nfour when I'm appending this element to\nbox one it is the last child of box one\nif there are any child elements within\nthis box which there is we have a\nparagraph element\nthat H1 element will come after and not\nbefore so if you would like this H1\nelement to be the first child we can\nprepend it I'm going to copy this\nbecause I don't want to rewrite\nit we will\nprepend prepend my new H1 element take\nbox one prepend the new H1 element so my\nH1 element is now at the top it's the\nfirst child the paragraph element comes\nafter let's do this with box two box 3\nand box four what if we would like to\ntake our H1 element and sandwich it\nbetween box one and box two I could\nselect box two and insert that new H1\nelement before it here's how I will\ncreate a reference to box\n2\nequals\ndocument. get element by\nID we will select the ID of box two\naccess our document access the body\nbecause box two is a child element of\nthe body use the insert before method\nthere's two arguments the new\nelement and the current\nelement the new element is going to be\nnew H1 that's what we're trying to add\nthe current element is the target we're\nselecting box two in insert the new H1\nelement before box two and this is what\nthat looks like this H1 element is now\nbetween box one and box two take the new\nH1 element insert it before box two if\nwe were to do this with box one well\nthen it's going to be before box one\nlet's try this with box\nthree our H1 element is before box three\nand box\nfour what if these elements don't have\nIDs how do we select them then here's\nhow we will use Query selector all to\nselect everything that has the Box class\nI will create a constant of boxes this\nwill be a node list access our document\nuse Query selector all select everything\nthat has a box class we will use the the\ninsert before method access our document\naccess the\nbody insert\nbefore we have the new element to add\nand the current element the new element\nis new H1 the current element is our\nnode list of boxes we can access a\nspecific element from this node list\nwith an index if I accessed boxes at\nindex zero that would give me box one\nboxes at index one that's referring to\nbox\ntwo box three and box four so you could\nuse Query selector to select many\nelements store it within a node list\nthen select those specific elements with\nan index\nnumber this is optional but at any time\nif you need to remove an HTML element\nhere's how let's append our new H1\nelement we need to select the location\nin which we can find that element it's\nwithin the body of our\ndocument\ndocument.body use the remove child\nmethod we will remove our new H1 element\nand it's gone what if this H1 element\nwas within box one all right I will\nappend our new H1 element to box one and\nwe need to add the IDS back to these\nboxes because I forgot to do that we're\npending our new h one element to box one\nwhen I try and remove it it doesn't work\nit's still there we need to select box\none and not the body of our document\nbecause box one is the direct parent of\nour H1 element not the body the body in\nthis case could be like the\ngrandparent instead of selecting our\nbody we will get the ID of box one or\nsome other element selector to get box\none I'll use get element by ID because\nit's\neasy get element by ID the ID that I'm\nselecting is box one remove the new H1\nelement that's found within it and it's\ngone if at any time you need to remove\nan element select the parent of that\nelement then follow it with the remove\nchild method pass in the element you're\ntrying to remove as an\nargument in this last example we're\ngoing to work with ordered lists so\ngoing to our HTML file we will create an\nordered list with a pair of of O tags I\nwill give this ordered list an ID of\nfruits we'll add a few list items the\nfirst list item will be for an\napple the ID will be\napple we'll create a list item element\nfor an orange ID will be\norange and a\nbanana ID\nbanana I'll add a little bit of CSS\nstyling going to the CSS stylesheet I\nwill select the ID of fruits I'll add a\nborder of three pixel solid for this\ndemonstration and increase the font\nsize to 2\nRM all right and that's what we need to\nwork\nwith we'll now be creating a list item\nelement I will create a constant of new\nlist item equals\ndocument. create\nelement what is the type of element\nwe're trying to create a list item\nelement let's set any attributes or\nproperties that's step two let's take\nour new list item set the text content\nto equal\ncoconut we'll append this element if I\nwere to append this new list item to the\nbody of my document\nit's the last child of the body we're\nnot adding it to this ordered list now\nthat we can see it I'm going to add a\nfew more attributes and properties let's\ntake our new list item access its ID\nattribute set it to be\ncoconut let's change the font\nweight new list item access the\nstyle access the font\nweight set it to be\nbold\nand the background color access the\nstyle access the background\ncolor I'll set the background color to\nbe light\ngreen we have our list item element if I\nappend it to the body it's now the last\nchild of the body of my document not\nthis ordered list found within the body\nif I were to prepend it this is what\nwould happen prepend the new list\nitem it's now the first\nchild now we'll select our ordered list\nof\nfruits get element by ID fruits append\nthe new list item and it's now at the\nend at number\nfour let's prepend to the ordered\nlist get element by ID fruits prepend\nour new list item our coconut is now at\nnumber one\nhow can we insert our coconut between\nApple and Orange here's how since these\nlist item elements have an ID I could\nuse\nthat let's get the ID of orange const\norange get element by ID\norange instead of selecting the body\nwe're going to select the ordered list\nthat has an ID of fruits document. getet\nelement by ID the ID that I'm selecting\nis fruits select the ordered list of\nfruits insert the new list item before\nthe orange our coconut is now at number\ntwo let's insert the coconut before the\nbanana the ID was\nbanana const banana insert the new list\nitem before the\nbanana our coconut is now at number\nthree you could insert before Apple too\nI will get the ID of apple const\napple insert the new list item before\nthe\napple and it's back at the\nbeginning what if these list items don't\nhave IDs let's eliminate\nthose we would need to use Query\nselector to select all list items from\nthe ordered list of\nfruits\nso I'm going to use Query selector all\nselect the ID of fruits then select any\nlist item descendants within this ID\nthis will return a node list that stores\nall of the current list items within\nthis ordered list we need to select our\nordered list of fruits not the body\ndocument. getet element by\nID I will\nselect our order ordered list of\nfruits insert the new list item before\nlist items at index\nzero now will'll insert the coconut\nbefore the Apple let's increment our\nindex to one our coconut is now before\nthe\norange now it's before the banana and\nnow it's after the banana if I need to\nremove this list item I would need to\nselect it first so let's append the new\nlist item to fruit\nI will get the ID of the ordered list of\nfruits remove the child of new list item\nand it's now\ngone all right everybody so that is how\nwe can add change and remove HTML\nelements using\nJavaScript hey everybody in today's\nvideo I got to explain Mouse events in\nJavaScript so sit back relax and enjoy\nthe show the first thing I need to\ndiscuss is event listeners an event\nlistener listens for specific events to\ncreate interactive web pages a few types\nof events we'll discuss are click events\nwhen we click on something Mouse over is\nwhen we hover over something and mouse\nout is when we're hovering over\nsomething and then leave that element to\nadd an event listener you'll use the add\nevent listener method pass in an event\ntype including but not limited to this\ncould be clicking on something hovering\nover something or leaving the confines\nof an element and then a call back to a\nfunction what do you want to do when you\ninteract with something for example I\ncould use the click event and then\nchange the color of something when I\nclick on it going to our HTML file I\nwill create a development for a box the\nID of this development will be my box\nthe text on the box will be click me\nthen for fun I'll add an emoji because I\nlike emojis let's apply some CSS styling\nbecause it's kind of small\nlet's select the ID of my box change the\nbackground\ncolor to light green or some other color\nof you're choosing set a width of 300\npixels a height of 300\npixels I'll increase the font size to\nsomething large like 4.5\nRM I'll set the font weight to be\nbold I'll use flex box\ndisplay\nFlex align items in the\ncenter and text align\ncenter that is good enough for now be\nsure to save everything we're going to\nselect the ID of my box we'll store that\nas a constant const my box equals we'll\nneed to select it by accessing the Dom\ndocument. getet element by ID I will\nselect select the ID of my box and then\nwe can work with it easily we'll take my\nbox add an event listener that's a\nbuilt-in method my box.\naddevent\nlistener we need to pass in an event\ntype and a call back to a function I\nwant to do something when I click on\nthis box the event type is going to be\nclick and now we need to call back to a\nfunction we'll Define a function to\nchange the background\ncolor function change color there's\ngoing to be one parameter an event then\nwe will pass in a call back to change\ncolor now the event parameter event is\nan object it's provided to us\nautomatically by the web browser when\nsomething happens when an event occurs\nlike when I click on something event is\nan object that contains information\nabout something that happens that event\nfor this demonstration temporarily I'm\ngoing to to console.log my event so\nlet's click on the box then go to\ninspect console and here's my event when\nwe clicked on that box the web browser\nprovided us with an event object it's a\npointer event this object contains\ndetails about what happened\nexactly for example we have the target\nwhat did we click on WE clicked on the\ndiv element with an ID of my box and\nhere are all the properties and methods\nof that box that's the target we have a\ntime stamp of when the click occurred\nthe type of the event click which\nmatches up with the event type and\ncoordinates of where we clicked on the\nscreen event is an object that's going\nto be provided to us through the web\nbrowser automatically we don't need to\nexplicitly pass in an event object with\nthis call back it's provided to us\nbehind the\nscenes I'm going to change the\nbackground color of our box when we\nclick on it we will access our event op\nobject that's provided to us access the\ntarget the target is what we clicked on\nthere's information about our Target\nwithin the event object then I will take\nthe style of the target set the\nbackground color property to be a\ndifferent color I will set it to be red\nbut I prefer the shade of tomato because\nI like that color now when I click on\nthe box the background color\nchanges but why stop there let's also\nchange the text content I'll add one\nmore statement to the change color\nfunction again we will access our event\naccess its Target access the text\ncontent of the target to be\nouch and then I'll add an\nemoji that's a good\none when I click on this box not only\ndoes the color change but the text too\nnow you don't necessarily need to pass\nin a call back you can also pass in an\nanonymous function or even an arrow\nfunction so let's copy these two lines\nof code we'll reuse it later we no\nlonger need to define a\nfunction within the event listener\ninstead of passing in a call back we'll\npass in an anonymous\nfunction we have one parameter and event\nthat's going to be provided to us when\nwe click on my box do this change the\nbackground color and the text now we\ncould even use an eror function I have a\npreference for Arrow functions because\nthey're concise with their syntax with\nan arrow function we have one parameter\nan event if you have a single parameter\nyou don't need to enclose it within a\nset of\nparentheses we have one parameter of\nevent then do this do all this code and\nthat should still work when I click on\nthe box the color changes as well as the\ntext so when you add an event listener\nyou can pass in a call back or an\nanonymous function\nor an arrow function it depends on what\nyour preferences are personally I like\nArrow functions we have a few other\nMouse events to discuss Mouse over and\nmouse out Mouse over is when you hover\nyour cursor over something so let's take\nmy\nbox add a new event listener an element\ncan have more than one event\nlistener add event\nlistener we have an event and a call\nback as arguments the event is going to\nbe Mouse over for the call back I'll use\nan arrow\nfunction we have one parameter of event\nArrow do this let's copy these two lines\nof code I'll change the background color\nto be yellow like it's a warning and the\ntext content to be don't do\nit that's a good face when I hover my\ncursor over this element the background\ncolor and the text is going to change\nthe event that occurred is mouse over\nit's when you hover your cursor over\nsomething Mouse out is when you leave a\nspecified element so when I leave the\nbox I would like to change back the\nbackground color and the text content\nWe'll add an additional event listener\nmy box add event\nlistener the event type is going to be\nMouse out\nthen I'll write an arrow function we're\nprovided with an event Arrow do this\nlet's change the background color and\nthe text content I will revert the\nbackground color to be light\ngreen and the text to be click\nme whatever the text content originally\nwas when I hover my cursor over this\nelement we get that Mouse over event but\nwhen I leave we get the mouse out\nevent when I click on the this box we\nget the click event when I leave the Box\nwe get the mouse out event again to\nreset it essentially for the last part\nof this demonstration we're going to\ncreate a button when we click or\ninteract with the button then we'll\nchange a separate element this box so\nwithin our HTML file let's create a\nbutton with text of Click\nme I will give this button a unique ID\nof my\nbutton and I'll increase the font size\nwith CSS we will select my\nbutton I will increase the font size to\nbe 3\nRM just so it's not so\nsmall let's select the ID of my\nbutton const my button equals document.\ngetet element by ID my button I'll add\nthe event listener to my button not my\nbox\nif I was to interact with this button\nwith the way it is now when I hover over\nthe button we've created a mouseover\nevent and the button changes when I\nclick on the button we're changing the\nHTML and CSS of the button because the\nbutton is what has the event listener\nwe're selecting the target of the event\nto change which is the button that is\nwhat we interacted with when we interact\nwith our box it doesn't do anything it\ndoesn't have any event listeners the\nbutton does though we're going to\nreplace the event Target with my box\nwhen we interact with the button change\nthe background color and the text\ncontent of my\nbox so then when I hover over the button\nthe Box changes when I leave it reverts\nback to normal when I click on the\nbutton then we've created a click event\nall right everybody so that is an\nintroduction to Mouse related events\nyou'll need to add an event listener an\nevent listener listens for specific\nevents to create interactive web pages a\nfew events we've covered include click\nMouse over and mouse out to add an event\nlistener take an element use the\nbuilt-in add event listener method pass\nin an event type and a call back\nAnonymous function or an arrow function\nto do something and well everybody those\nare Mouse related events in\nJavaScript hey what's going on everybody\nin today's video I'm going to give you\nan introduction to key events in\nJavaScript so sit back relax and enjoy\nthe show so what we've discussed in the\nprevious topic is event listeners an\nevent listener can be added to an HTML\nelement they will listen for specific\nevents to create interactive web pages\nwe'll be discussing key down and key up\nthere is a third type of key event\ncalled key press however according to\nthe official documentation this event\nisn't compatible with all web browsers\nso you should avoid using key press a\nkey down event occurs when you press\ndown on a key a key event occurs when\nyou release a key by adding an event\nlistener to the Dom document we can\ndetect when we press down or release a\nkey here's how we will access our Dom\nthen add an event listener add event\nlistener we have two arguments the event\ntype and a call back when we press down\non a key let's do something doesn't\nmatter what key it is any key for this\nnext argument I can either pass in a\ncall back an anonymous function or an\narrow function I like Arrow functions so\nI'm going to use an arrow function we're\nprovided with an event parameter when\nsomething happens within our web browser\nan event object is created we can access\nit so I'm going to\nconsole.log this event object and we'll\nsee the details of it be sure to select\nyour web browser I'm going to press the\nq\nkey then let's go to\ninspect\nconsole and here's that event\nthe web browser provided us with a\nkeyboard\nevent the key pressed was Q there's a\nrelevant key code of 81 and there's\nother properties too like was the ALT\nkey being held down at the time it\nwasn't same thing with the shift key and\nthe target which is the body of our\ndocument I'm going to Output the key\nproperty of the event we'll press a\ndifferent\nkey I'm going to hold down the F\nkey I'm not releasing it I'm holding it\ndown we're going to consistently fire\nkey down\nevents I would like to detect when I\nrelease a key I will use the key up\nevent so let's copy this paste it the\nevent is going to be key up I'll display\nsomething else I'm going to use a\ntemplate\nstring I will display key down equals\nthen I will display this events key\nlet's do this with key key up too I'll\njust copy\nthis key up equals event.\nkey let's go back to our\nconsole I'm going to hold down the S\nkey then when I release it we'll have a\nkey up event key up equals\ns oh one more important thing the arrow\nkeys we have Arrow up arrow down arrow\nleft and arrow right if you ever would\nlike to make some sort of game the arrow\nkeys are also accessible now what we'll\ndo on key down and key up is change an\nHTML element so to make this simple\nwithin our HTML document I'm going to\ncreate a div element this div element\nwill have an ID of my box I'll add some\ntext an\nemoji all right let's add a little bit\nof\nCSS we will select my\nbox I will set the background\ncolor to be light blue we haven't picked\nlight blue\nyet I will set a width of 200\npixels a height of 200\npixels a font\nsize of 7.5\nRM I'll use flex box display\nFlex justify content\nCenter\naine item\nCenter this part is important for the\nnext exercise we are going to set the\nposition to\nrelative for relative positioning I'll\nset the body of my document to have no\nmargin margin zero all right we are\nready we are going to select the ID of\nmy\nbox const my box equals document . getet\nelement by ID the ID that I'm going to\nselect is my\nbox when I press a key down I'm going to\nchange the text content of my box mybox\ndo textcontent\nequals I'll pick a different\nEmoji let's do that\none and I'll change the\nCSS mybox\ndostyle do background color equals\ntomato or some other color of you're\nchoosing so when I press down on any key\nthe HTML and CSS is going to change I'm\ngoing to release that key but we don't\nrevert back to normal our HTML element\nstays that way what we'll do is that\nwhen we release a key we'll revert these\nchanges by going back to the original so\nlet's take my box change the text\ncontent to equal an emoji because I like\nemojis we'll use the original\none then I will set the background color\nto be light\nblue now if I were to hold down a button\nthe HTML and CSS is going to change\nuntil I release that button which I am\nabout to now in 3 2 1 go I'm going to\ntry and press the space bar as fast as I\ncan seizure\nwarning let's\ngo okay it's about time we move on what\nwe're going to do now is using the arrow\nkeys move this element we're going to\ncreate a const of move amount when\npressing an arrow key how far do we want\nto move this element let's say 10 for 10\npixels I will create a variable for X\nthink of these as coordinates I will set\nthat to be zero and y y will also be\nzero X for any horizontal movement and Y\nfor any vertical movement\ndocument.\naddevent\nlistener when we have a key down event I\nwould like to do something I'll write an\narrow function we're provided with an\nevent do all this code I only want to do\nsomething if a user uses an arrow key so\nif I was to console.log my\nevent then access the key property let's\ngo to inspect console select your\ndocument I would like to do something\nonly if the key pressed is Arrow up\narrow down arrow left or Arrow right I\ndon't want any of the other keys I can\nwrite the if\nstatement if access our event access its\nkey follow this with the starts with\nmethod does this key start with arrow\nwill only enter the SI statement if the\nkey of the event is Arrow up Arrow down\narrow left or Arrow right then we'll\nwrite a switch we haven't written any\nswitches for a while we will examine the\nkey of our event with switches we\nexamine a value against matching cases\nif we have a case of Arrow\nup if the key of our event matches the\ncase of Arrow up then do this we'll take\nour\ny-coordinate subtract our movement\namount which is\n10 Yus equals the movement amount and\nthen be sure to break to break out of\nthe switch then we need a case for arrow\ndown arrow\ndown y+ equals our movement amount Arrow\nleft Arrow\nleft X for the horizontal axis minus\nequals the movement\namount and then Arrow\nright arrow right X plus equals the\nmovement\namount then outside of the switch but\nwithin our if statement we're going to\naccess my\nbox access the\nstyle access the top property set it\nequal to a template\nstring we're going to take our variable\nof Y for the y-coordinate then add\npixels take the top property of my box\nset it equal to the y coordinate we're\ngoing to copy this and do this with the\nleft\nproperty set it equal to X in pixels be\nsure to select the body of your document\nwe can move right with the right arrow\nkey\ndown\nleft and\nup or diagonal if I hit two keys at\nonce the arrow keys have a default\nBehavior to scroll you can see that if\nwe go down too far we have a scroll bar\non the right hand\nside we can prevent the default behavior\nof a key we just have to add this line\nof code take our event then follow it\nwith the prevent default\nmethod so when my element Scrolls off\nscreen it'll disappear we're not going\nto scroll with it\nto increase the distance in which this\nelement moves we can increase the move\namount let's set it to be 100 now we're\nmoving a lot further with each key\npress hey this is bro from the future\nthere's one more thing I would like to\nadd to this project when pressing down\non a key let's change the text content\nand the background color much like what\nwe did with the first exercise then when\nwe release a key we'll revert the HTML\nand the CSS back to normal we're\ncombining the first exercise and the\nsecond one and this is the result when I\nmove the arrow keys this guy's going to\nfreak out until I Let\nGo pretty exciting all right everybody\nso that is an introduction to key events\nin JavaScript you're going to add an\nevent listener to the document when you\nselect your document and press a key\nwhen the key is pressed down that will\ncreate a key down event when you release\na key that creates key up event and well\neverybody that is an introduction to key\nevents in\nJavaScript hey everybody in today's\nvideo I'm going to show you how we can\nshow and hide an HTML element using\nJavaScript in this video you'll need an\nimage to work with once you find your\nimage add it to your website folder then\nwe are ready to begin we're going to\ncreate a button and an image element\nlet's start with the button the text on\nthe button will be initially hide to\nhide an element I will give this button\na unique\nID of my\nbutton I'll add a break then we'll\ncreate an image\nelement this is a self-closing tag with\nthis image I will set the source equal\nto either the relative file path or the\nfile\nname so my file is car.jpg\nit's a little too big I'll set the width\nattribute to be like 400 pixels that's a\ndecent size I will give this image a\nunique ID of my image my IMG and just so\nwe can see this button I'm going to\napply a little bit of CSS to the button\nlet's select the ID of my button take\nthe font size I will set it to be 2\nRM that's decent enough all right let's\ngo to our J Javascript file I'm going to\ncreate a reference to my button and my\nimage let's start with the button const\nmy button equals document. getet element\nby ID the ID that I'm selecting is my\nbutton let's create a reference to my\nimage as well my IMG the ID was my\nIMG when I click on this button I would\nlike to do something we will take my\nbutton and add an event\nlistener add event\nlistener there are two arguments an\nevent type and a call back to a\nfunction the event type is going to be\nclick when we click on the button we're\ngoing to do something for the call back\nwe'll write an arrow function we are\nprovided with an event parameter by the\nweb browser Arrow do this when when we\nclick on the button what code do we want\nto perform we're going to take my image\naccess its style access its display\nproperty set it to be a string of none\nso when you click on the button it's\ngoing to hide the image the display\nproperty is set to none not only that\nlet's change the text on the button\nafter we hide the element let's take my\nbutton change the text content equal to\nbe show because now I want to show the\nelement so hide become\nshow when we click on the button a\nsecond time nothing\nhappens we would like to toggle between\nhiding and displaying this element we'll\nwrite an if statement let's check to see\nif the display of my image is strictly\nequal to\nnone is the display of my image\ncurrently none if so we're going to set\nthe display to Black block because it's\na block level element take my image\naccess its style access its display\nproperty set it to be\nblock then within an lse\nstatement place these two lines of\ncode and we will change the text content\nof my button to be\nhide now when clicking the button we can\ntoggle between hiding and showing this\nelement the\nimage now let me demonstrate something\nif we were to take my button then add it\nafter the\nimage here's what would\nhappen let me add a break\ntoo so by setting the display To None we\ndon't Reserve any space for that image\nmy button moves up near the top of the\nwindow until I show it again another\noption if we would like to reserve some\nspace for the image is to toggle the\nvisibility not the display property\nreplace display with\nvisibility we're going to check if the\nvisibility is\nhidden set the visibility equal to be\nhidden if we would like to show the\nimage the visibility is going to be set\nto\nvisible when we toggle the VIS ility of\nthis image we at least reserve the space\nfor it the elements that come after\naren't going to shift near the top of\nthe window you can use visibility or\ndisplay depending on the project you're\ncreating all right everybody so that is\nhow to show and hide HTML elements using\nJavaScript so uh yeah I should probably\ntalk about nod lists today a no list in\nJavaScript is a static collection of\nHTML elements they can be created by\nusing query selector all we can select\nElements by an ID a class or an element\ntype nod lists are similar to an array\nbut they don't have a built-in map\nfilter or reduce method they do have a\nfor each method at least though an\nimportant thing to note with node lists\nis that they won't update automatically\nto reflect changes to the Dom for\nexample if you were to remove an element\nfrom the Dom and it's within a node list\nyou would also have to separately remove\nthat element from the node list so what\nwe'll do in this example is create four\nbuttons they'll all have the same\nclass we'll have button\none with a class of I don't know what's\na good name my buttons the class all\nright let's copy this button paste it\nthree additional times we'll have button\ntwo button three button four and I'm\ngoing to add a little bit of CSS to\nthese buttons let's select the class of\nmy buttons I'll increase the font size\nso you can see it font size for\nRM add a little bit of margin 10\npixels remove the border border\nnone smooth the corners with border\nradius 5\npixels add some padding 10 pixels by 15\npixels I'll change the background color\nto something\nblue background color blue but I'll\nselect hsl\nvalues I'll turn the lightness to like\n60 okay that's decent and the font color\nwill be\nwhite okay that's good enough for now\none way in which we can create a node\nlist is by using query selector all\nwe've talked about this in a previous\nvideo but I'll show you a few more\nadvanced things we can do with node\nlists we can select Elements by an ID a\nclass or an element type we will create\na node list of let\nbuttons equals\ndocument. query selector\nall let's select all elements by a class\nwe need to use dot then the class name\nmy\nbuttons we could select Elements by an\nelement type if I would like to select\nall buttons I would just type in button\nthe element type but I would like to\nselect only elements by this class now\nthat we have our node list I am going to\nconsole.log my node list of buttons and\nwe'll take a look at\nit here's my node list it contains four\nelements button one button two button\nthree button four we do have a length\nproperty a few methods entries for each\nitem Keys these are all different\nmethods for each is what we're going to\nbe using a lot here's how we can change\nthe HTML and CSS properties of all\nelements within a node list we can use\nthe for each method of a node list and\niterate through all of the elements so\nwe will take our node list of buttons\nuse the built-in for each method then\nwrite an arrow function we are provided\nwith an element Arrow do something but\nI'm going to rename element as button\njust so it's more easily understandable\nduring each iteration we're provided\nwith a current button what would we like\nto do to that button well let's change\nthe background color button. style do\nbackground\ncolor I'll set it to be\ngreen that should update the color of\nall the buttons not just one of them\nwe're iterating through all of the\nbuttons within this no list change all\nof their background colors to be green\nlet's change the text content too take\neach button access the text content I\nwill set it equal to be I don't know an\nemoji or\nsomething let's do that the text content\nand all the buttons is is going to\nchange maybe let's append an emoji not\nreplace the text\ncontent that's better that is how you\ncan add and change HTML and CSS\nproperties with a node list use the for\neach method then write an arrow function\nto do something in a similar way we're\ngoing to add an event listener to each\nbutton that will listen for a click so\nagain we're going to take our node list\nof buttons use the buil-in for each\nmethod for each button Arrow do\nthis we need to add an event listener to\neach button we will take the parameter\nof button add an event\nlistener within our event listener we\nhave an event\ntype and a call back to do\nsomething the event type is going to be\nclick instead of a call back we'll write\nan arrow function we are provided with\nan event Arrow do this event is proved\nprovided to us through the web browser\nwhen something happens we will access\nthe event objects Target meaning the\nbutton that we click on that's going to\nbe our\nTarget access the\nstyle access the background color\nproperty let's set it to be red or\nbetter yet tomato because I like\ntomatoes each button has an event\nlistener it will listen for click events\nwhen we click on a button the background\ncolor is going to change\nwe're going to add an event listener for\nMouse over and mouse out let's begin\nwith mouse over again take our node list\nof buttons use the for each\nmethod for each button Arrow do this\ntake that button add an event\nlistener with event listeners we have an\nevent type and a call back the event\ntype Tye is going to be Mouse\nover when we hover our cursor over\nsomething what would we like to do we\nwill write an arrow function event Arrow\ndo this let's access the events Target\nthat should equal our button that we\nclick on access the style access the\nbackground\ncolor so with the current color I'm\ngoing to go back to my CSS I will copy\nthis color paste it but make the\nlightness 10% darker now when we hover\nover one of the buttons the background\ncolor is going to\nchange I'll set the lightness to like\n40% to make it much more apparent there\nthat's better now when I leave one of\nthese buttons I need to revert that\ncolor back to the original really we can\njust copy all this\ncode replace Mouse over with mouse\nout and set the background color back to\nthe\noriginal\neach button now has a mouse over and\nmouse out event\nlistener here's how you can add an\nelement to a node list I will create a\nnew button const new button equals\ndocument. create element what element\nare we creating a\nbutton so with creating an appending\nHTML elements there's three steps this\nis step one we need to create that\nelement\nfirst step two is to add any necessary\nattributes or css properties so let's\ntake our new button change the text\ncontent of the button equal to be button\n5 I would like to give my new button a\nclass of my buttons we're going to\naccess the class list\nproperty new button. class list when\nworking with an element's class we work\nwith class list not\nclass so the class list equals the class\nof my\nbuttons then we have step three now we\nhave to append this element to the Dom\nwhat is the parent element of this new\nbutton going to be well in this case\nit's going to be the body of my\ndocument we're going to be adding a new\nbutton right here the parent the\nenclosing element is the body in this\ncase access our document select the body\nappend Child new\nbutton and there's button five since we\nadded our class of my buttons that's why\nit has all these CSS properties if I\nwere to remove this line of code we get\nthe default appearance for a\nbutton I'll talk more about class lists\nin the next video there's a lot you can\ndo with them now if I was to\nconsole.log my node list of buttons\nhere's what we have we have five buttons\nwithin our Dom but within our node list\nwe have four\nbuttons button one 2 3 four button five\nisn't within this no\nlist no lists are a static collection\nthey won't update automatically to\nreflect changes to the Dom even though\nbutton five is within the Dom we would\nneed to manually add it to our no list\nif we want to work with it so to do that\nwe can just use Query selector again and\nselect all elements by the class so\nlet's reassign buttons since we're\nreassigning buttons that's why I\ndeclared buttons with let instead of\nconst so we're able to reassign it\nbecause if this was a constant we\ncouldn't change the elements within it\nso buttons equals\ndocument. query selector all select All\nElements by a class class my\nbuttons and then again let's\nconsole.log my node list of\nbuttons inspect console and there we go\nour node list has five elements button 1\n2 3 4\n5 even if you were to add an element to\nthe Dom that same element isn't going to\nbe automatically added to your node list\nI would recommend using query selector\nall again just to update it here's how\nto remove an element from a node list\nwhen you click on it we'll have to give\nall of these buttons an event listener\nthey will listen for a click event when\nwe click on one of these elements remove\nit from the Dom and the node list here's\nhow again we will take our node list of\nbuttons use the built-in for each method\nfor each button within our node list do\nthis take each button add an event\nlistener\nwe are provided with an event type and a\ncall back to a\nfunction the event type that we're\nlistening for is\nclick the call back is going to be an\narrow function we're provided with an\nevent Arrow do this to remove an element\nfrom the Dom when you click on it we\nwill access our event object access the\ntarget use the built-in remove method to\nremove it so let's see if this works\ncurrently let's remove button 2 1 4 3 so\nthose buttons are gone but let me show\nyou something I'm going to\nconsole.log my node list of buttons\nafter each\nclick even if I were to remove these\nbuttons from the\nDom they're still within the node list\neven after all the buttons are gone our\nnode list still has four buttons so we\ndo have to update that manually here's\nan easy way how to do\nthat we're going to use Query selector\nall again we'll reassign\nbuttons equals\ndocument. query selector\nall select all elements from the Dom\nthat have a class of my\nbuttons then just to see if this works\nlet's\nconsole.log my node list of\nbuttons\nnow when we click on a button it should\nbe removed from the Dom and the node\nlist when I remove all the buttons our\nno list is then\nempty all right everybody so that is an\nintroduction to node lists they're a\nstatic collection of HTML elements they\ncan be created by using query selector\nall we can select Elements by an ID a\nclass or an element type they're similar\nto an array but there's no map filter or\nreduce method\nand do remember that nod list won't\nupdate automatically to reflect changes\nto the Dom and well everybody that is an\nintroduction to node lists in\nJavaScript hey everybody so in today's\nvideo I got to explain class lists in\nJavaScript class list is an element\nproperty it's used to interact with an\nelements list of classes meaning CSS\nclasses by accessing the class list\nproperty of an element we can make\nreusable classes for many elements\nacross your web page if I have a CSS\nclass I can dynamically add remove\ntoggle replace or check to see if an\nelement contains a certain class so what\nwe'll do in this example in our HTML\ndocument is create a button the button\nwill have text of my button the ID of\nthis button will be my button we'll\napply a little bit of CSS\ninitially let's select the ID of my\nbutton\nwe'll be applying just a few properties\nlet's increase the font\nsize to for\nRM oh not 43 four go back go back go\nback I'll add a little bit of margin of\n10 pixels remove the border with border\nnone border radius to smooth the corners\n5\npixels and add a little bit of\npadding 10 pixels by 15 pixels\nthat's good enough for now we're going\nto create a CSS class of\nenabled we won't apply it right away\nthough we'll apply this class to this\nbutton using JavaScript if an element is\nenabled let's change the background\ncolor to be something\nblue I'm going to use hsl values\nthough and I will set the font color to\nbe\nwhite so this button doesn't doesn't\nhave this class yet we'll add that in\ndynamically using JavaScript we'll\ncreate a reference to this button const\nmy button will be the name then we need\nto select it document. getet element by\nID the ID that I'm selecting is my\nbutton to add a class to an element take\nthat element my button access the class\nlist property follow this with the add\nmethod we will add the name name of the\nclass enabled and now my button is\nenabled we have appended the CSS\nproperties\ndynamically so if I were to inspect this\nelement I'll rightclick\ninspect we have added that class of\nenabled to the element so my button has\nan ID and a class of enabled to remove a\nclass again take that element of my\nbutton access the class list we will use\nthe remove method method we will remove\nthe class of\nenabled and it's gone let's right click\non the element\ninspect so our class list is empty we\nhave added and then removed that class\nof enabled we're going to create a new\nclass now of hover when we hover over an\nelement apply these CSS properties it's\nkind of like we're using the hover sudo\nclass but we're using it a little bit\ndifferent we can add or remove this\nclass dynamically at will if we apply\nthis class let's set a box Shadow to\ngive the element a 3D pop effect for a\nhorizontal and vertical offset let's set\nthose to be zero each let's add 10\npixels for the blur effect and I will\nset the color to be I don't know let's\nset it to be black but set the alpha\ndown to like\n20% and then when I hover I would also\nlike to set the font weight of that\nelement to be\nbold\nlet's add the hover\nclass so the appearance of this button\nchanged I would like to apply this class\nof hover only when I hover my cursor\nover the element We'll add a mouse over\nevent\nlistener we will take my\nbutton add event\nlistener we have an event type and a\ncall back to a function the event type\nwill be Mouse over when we Mouse over\nthis element\nwe are provided with an element object\nevent Arrow do this we will access our\nevent objects Target meaning the button\ntake our class\nlist and add the class of\nhover and let's see if this works if I\nhover my cursor over the button we apply\nthe hover class now when I leave the\nbutton I would like to remove it really\nwe can just copy the code for the event\nlistener paste it replace Mouse over\nwith mouse out then we will remove that\nclass so now we can apply that class and\nthen remove it with mouse over and mouse\nout there's also toggle if we toggle a\nclass we'll remove it if that class is\npresent add that class if it's not so\nlet's replace add with\ntoggle do this for both Mouse over and\nmouse out and that should work the same\nwhen we hover our cursor over the button\nwe will toggle the class of hover if we\nhave a mouse out event we will toggle it\nagain to remove\nit now we're going to use the replace\nmethod to replace one class with another\nwe'll create a new class of\ndisabled we'll be replacing the enabled\nclass with the disabled class when we\nclick on the button so with the\nbackground color of the disabled class\nlet's set the background color to be\nGray\nagain I like using hsl for the colors\nI'll set the lightness to be like\n60% I'm trying to get a faded appearance\nand for the\ncolor let's pick a light shade of gray\nusing hsl\nvalues I'll set the lightness to be\n80% going back to our Javascript file\nlet's add the class of\nenabled my button access the class list\nuse the add method we will add the class\nof\nenabled then we'll add an event listener\nto the button we will take my button add\nan event\nlistener we have an event and a call\nback the event is going to be click I\nwould like to do something when we click\non the button we will receive an event\nArrow do this take our events\nTarget access the class list we will\nwill use the replace method replace the\nold class with the new class replace the\nenabled class with the disabled class\nthere's two\narguments the old class and the new\nclass replace the old class with the new\nclass then when we click on this button\nwe'll replace the enabled class with the\ndisabled class then we have the contains\nmethod if an element contains a class\nthis will return true and if it doesn't\nit returns false So within our event\nlistener let's add an if\nstatement and an else\nstatement we'll check to see if our\nevents Target access the class list we\nwill use the contains\nmethod if we click on the button and the\nclass contains disabled what do we want\nto\ndo does the class list contain disabled\nlet's change the text content take our\nvents Target access the text content\nI'll append an\nemoji what's a good one that\none else replace enabled with\ndisabled let's click on the button we'll\nreplace the enabled class with the\ndisabled class our button is now\ndisabled if I were to inspect this\nelement the class is now\ndisabled if I were to click on this\nbutton again well our class contains\ndisabled that was true so we end up\ndoing this code where we append to the\ntext content of the button now the nice\nthing about using class lists HTML\nelements have a class list property we\ncan reuse CSS classes amongst many HTML\nelements we'll create an H1 element\nnow the text of this element will be\nhello I will give this element a unique\nID of my H1 I'll increase the font size\nso we can see\nit select the ID of my H1 I'll increase\nthe font size let's try five\nRM let's create a reference to my\nH1 const myh1 equals document. getet\nelement by\nID the ID that I'm selecting is my H1\nwe'll add the enabled class to myh1 myh1\ndo\nclasslist do add not ass\nadd\nenabled and there we go we have added\nthese CSS properties to this\nelement and because I'm lazy I'm going\nto copy all this code where we add an\nevent listener to my\nH1 so let's replace my button with my\nH1\nnow when we click on this H1 element we\ncan disable it we'll replace the enabled\nclass with the disabled class and if you\ndon't believe me let's take a look the\nclass of my H1 is now\ndisabled if I were to click on this\nelement again while the class list\ncontains disabled so we execute this if\nstatement where we change the text\ncontent of that\nTarget now here's a challenge round\nwe're going to create four buttons and\nstore all of those buttons with then a\nnode list so let's create a button with\nthe text of the first button being\nbutton one I will give this button a\nclass of my\nbuttons let's copy this button paste it\nthree\ntimes button one button two button three\nbutton\nfour let's remove the CSS from my H1\nselect the class of my\nbuttons keep these three classes of\nenable hover and\ndisabled okay let's eliminate all this\ncode we'll create a node list to contain\nall these buttons we can use const if we\ndon't plan on adding or removing buttons\nor let if we do let buttons equals\ndocument. query selector\nall select all elements that have a\nclass of my buttons we'll apply our\nenabled class to all the\nbuttons so we will take our node list of\nbuttons use the for each method for each\nbutton within our node list do\nthis take each button access each\nbutton's class list property I will add\na\nclass of\nenabled and we have applied that class\nto all the buttons If you need to remove\na class you can do the same but replace\nadd with remove\nmove now when we hover a cursor over one\nof these buttons we will toggle the\nhover class we need to iterate through\nour node list of buttons take buttons\nuse the built-in for each\nmethod for each button within our node\nlist do\nthis take each button add an event\nlistener the event listener has an event\ntype and a call back to a function\nthe event type will be Mouse over when\nwe hover a cursor over\nit we will be provided with an event\nargument Arrow do this access the event\nobject access the target meaning the\nbutton that we hover over access the\nclass list property we will\ntoggle the hover class so when we hover\nour cursor over one of these elements we\nwill apply the hover class\nnow when our cursor leaves one of these\nelements we would like to toggle that\nclass again let's copy everything we\nhave here paste it replace Mouse over\nwith mouse\nout when we leave one of these elements\ntoggle the hover class again to remove\nthat\nclass now when we click on one of the\nbuttons we're going to replace the\nenabled class with the disabled\nclass\ntake our node list of buttons use the\nfor each\nmethod with each button Arrow do this\ntake each button add an event\nlistener we need to select the event\ntype and a call back to a function the\nevent type is going to be\nclick the parameter is event Arrow do\nthis when we click on one of these\nbuttons\nwe'll replace the enabled class with the\ndisabled class take our event object\naccess its Target access the class list\nproperty we will\nreplace replace the old class with the\nnew class replace the enabled\nclass with the disabled\nclass and let's see if this works when I\nclick on a button we'll replace the\nenabled class with the disabled class\nthe last thing we'll do is that when we\nclick on a button that's disabled we'll\nchange the text content we'll have to\nuse the contains method So within our\nevent listener I'll add an if\nstatement if access our event access its\nTarget access the class list property\nuse the contains\nmethod does the class list contain the\nclass of disabled if it does we'll\naccess our event access the target of\nthat event change the text content of\nthat element I'll append an\nemoji that one I like that emoji if the\nclass list of that element isn't\ndisabled it doesn't contain the class of\ndisabled we'll execute an L statement\nwhere we disable it by replacing the\nenabled class with the disabled class we\nhave three event listeners Mouse over\nMouse out and click we're utilizing all\nthree of these custom classes enabled\nhover and\ndisabled we can hover over these\nelements then we'll have Mouse over and\nmouse out events then when I click on\none of these buttons we can apply that\ndisabled class within our click event\nlistener we have an if statement if we\nclick on an element that's already\ndisabled append the text\ncontent all right everybody so that is\nthe class list property it's used to\ninteract with an elements list of\nclasses\ntheir CSS classes they allow you to make\nreusable classes for many elements\nacross your web page and well everybody\nthat is the class list property in\nJavaScript hey what's going on everybody\nin today's video we're going to create a\ngame of rock paper scissors using\nJavaScript so sit back relax and enjoy\nthe show all right let's do this thing\nwe're going to create an H1 heading with\ntext of rock paper\nscissors for a\ntitle we'll create three buttons the\nfirst one will be for rock you can add\nsome text of rock but you know what I\nlike using emojis I'm going to use an\nemoji instead I would like an emoji of a\nfist and I'm going to zoom in until we\nadd some CSS let's create a button for\npaper that'll\nwork and scissors\nmaybe a p\nsign with each of these buttons I will\nset the onclick event handler equal to a\nJavaScript function we'll name the\nfunction play game now with these\nfunctions we're going to pass in an\nargument the first will be a string of\nrock now if you use double quotes HTML\nis going to be confused where this event\nhandler ends our argument is going to be\na string but it's going to be within\nsingle quotes because we're already\nusing double quotes\nlet's copy this attribute cuz I don't\nfeel like typing it again the second\nargument will be for a string of\npaper and then\nscissors let's enclose our buttons\nwithin a div\nelement this div element will have an ID\nof\nchoices let's cut our buttons and paste\nthem within the div element outside of\nthe div element we'll create create\nanother div element we will display the\nPlayer's\nChoice player colon\nspace the ID of this development will be\nplayer display this will display the\nword rock paper or scissors depending on\nwhich button we\npick let's do this for\ncomputer text will be\ncomputer ID computer\ndisplay we should display a result who\nwon\nthe ID will be result\ndisplay just for some temporary text I'm\ngoing to add it's a tie when we style\nthis with CSS I would like to be able to\nsee the updates we'll get rid of this\npretty soon eventually we'll add in a\nscore tracker but we'll do that after\nour game is at least working okay let's\nhead to our CSS\nstylesheet I'm going to zoom back to\n100%\nlet's select the body of our document I\nwill set the font family to be aial with\nthe backup of s\nserif let's set the font weight to be\nbold throughout this\napplication I will set any margin to be\nzero around the\nbody use flex box to display the\nelements display\nFlex the flex direction will be a\ncolumn\nand align items\nCenter let's select our H1 element I\nneed to increase the font\nsize font size 3.5\nRM for a color pick a\ncolor for me I'll set the lightness to\n20%\nnow we're going to select our\ndevelopment of choices actually let's\nmake this a class class\nchoices select the class of\nchoices add\nmargin\nbottom of 30\npixels within this development we need\nto select all the\nbuttons we will select the class of\nchoices select all buttons within this\nclass we increase the font\nsize to 7.5 RM these buttons need to be\nbig I will set a minimum\nwidth of 160\npixels at a little bit of margin between\neach\nbutton zero pixels on the top and bottom\n10 pixels on the sides for the buttons I\nwould like rounded Corners I would like\nthese buttons to be a\ncircle I can set the Border radius to\nsomething massive like 250 pixels that\nwill give us some rounded buttons and\npick a background color background\ncolor I want something\nblue I've already pre-picked a color so\nI'm going to use\nthis now when I hover my cursor over one\nof the buttons I would like my cursor to\nchange into a pointer and that does work\nlet's also add a transition\neffect let's change the background color\nto e after half a\nsecond let's access the hover sudo class\nof all the buttons of\nchoices take the background color I'll\nset the lightness to be 20%\nlighter each button is going to light up\nwhen you hover your cursor over the\nbutton then we'll work on the display\ndisplays next we're going to select the\nplayer display and the computer display\nthese are\nideas player\ndisplay and computer\ndisplay let's set the font size to be a\n2.5\nRM and for the result display where it\nsays it's a\ntie that's the ID of result\ndisplay set the font size\nto be 5\nR and I'll add some margin to the top\nand bottom 30 pixels to the top and\nbottom zero on the\nsides okay that is good enough for\nnow so we no longer need this\nplaceholder for the result display let's\nadd some\nfunctionality we have a lot of constants\nto declare const choices choices will be\nan array of strings we'll have\nRock\npaper and\nscissors we need to get the player\ndisplay and the computer display so we\ncan update them const\nplayer display equals document. getet\nelement by ID the ID that I'm selecting\nis player\ndisplay then we have computer\ndisplay computer display\nand a result display this one it's empty\ncurrently const result display equals\ndocument. getet element by ID result\ndisplay we'll factor in scoring later we\nneed a function of play game that\naccepts one argument the Player's\nChoice\nfunction play game we have one\nparameter player\nchoice when we play a new game we have\nto pick a choice for the computer\nbetween rock paper or scissors what we\ncould do is generate a random number\nbetween zero and two rock is index zero\npaper is index one scissors is index 2\nwe'll create a constant within play game\nof computer Choice I'm declaring it\nwithin the function so we can update it\nevery time we play a new game equals\ntake our array of\nchoices at index for the index we'll\ngenerate that random number using the\nrandom method of math math. random\nmethod * 3 then we need to round it\nbecause it's not going to be a whole\nnumber math. floor to round it\ndown so the computer's choice will be a\nrandom index between 0 through two which\nwill give us randomly either rock paper\nor scissors hey this is bro from the\nfuture one thing that would be good for\nus to do is along the way use\nconsole.log just to be sure that what\nwe've been writing has been working so\nwithin our computer's Choice let's\nconsole.log whatever that\nis so if this does work after clicking\none of these buttons the computer is\neither going to pick rock paper or\nscissors the computer picked scissors\njust now scissors scissors it really\nlike scissors apparently so yeah the\nPlayer's Choice is being populated with\nthe string of rock paper or scissors I\njust wanted to confirm\nthat and we need a result what are we\ngoing to display to the\nscreen result will be an empty string\nfor now first let's check to see if the\nPlayer's Choice is equal to the\ncomputer's choice that means it's a\ntie if Player's\nChoice is strictly equal to the\ncomputer's Choice maybe we both pick\nrock well well then we'll take our\nresult to be displayed and set it equal\nto\nbe it's a\ntie else somebody is going to\nwin let's add an else\nstatement we can use a\nswitch we can examine a value against\nmatching cases we'll examine the\nPlayer's\nChoice does the Player's Choice match\nthe case of\nrock do these two Val use match if so\nwe'll use the tary\noperator we'll check the condition of if\nour computer's\nchoice is strictly equal to\nscissors if so question mark That's the\ntary operator if we pick Rock and the\ncomputer picks scissors we will return U\nwin otherwise if this condition is false\nwell that means the computer picked\npaper if our choices already don't match\nand we picked rock that means they\neither picked scissors or paper if they\ndidn't pick scissors that means they\npicked paper so they win that means we\nlose you\nlose whatever string is returned we're\ngoing to assign it to result result\nequals whatever is returned either you\nwin or you lose then we should add a\nbreak after this case\nall right let's copy this case and\neverything within\nit let's paste it if the Player's Choice\nmatches the case of paper and the\ncomputer's choice is strictly equal to\nrock that means if that's true you win\nelse you lose let's copy this case and\neverything within\nit case scissors\nif the computer's Choice equals\npaper then you win otherwise you lose\nafter we move beyond the IFL statements\nwe need to update the text on the screen\nso we will take the players\ndisplay set the text content to equal a\ntemplate string of player col in space\nadd a placeholder\nthe Player's Choice did we pick rock\npaper or scissors then let's do this\nwith the computer's\nChoice select the text content of the\ncomputer\ndisplay the text will be\ncomputer we will display the variable of\ncomputer Choice the one that was picked\nrandomly and take our result\ndisplay which has no text content\ncurrently\nset it equal to be\nresult okay let's see what we have\ncurrently let's pick Rock it's a tie\npaper you win scissors you lose what\nwe'll work on next depending on the\nresult that's displayed if we win I\nwould like the text to be green if we\nlose I want the text to be red going to\nour CSS stylesheet we're going to add\nthree\nclasses green text\nred\ntext pick a font\ncolor pick something\ngreen and for the red text pick a red\nfont\ncolor if we win or lose we're going to\nadd one of these classes to the class\nlist of our result display so going back\nto to our Javascript file after we\ndisplay the result now we're going to\nadd a\nswitch we're going to examine our\nresult we will add a case of you\nwin if our value matches this case let's\ntake our result display access the class\nlist use the add method add the class of\ngreen text\nthen\nbreak let's copy this\ncase paste\nit we will add a case for you\nlose add the class of red text if we\nlose let's see what we have\ncurrently if we win you get green text\nif you lose you get red text but now if\nit's a tie we have red text with each\nnew game we should reset the color back\nto the\noriginal so before updating the color\nand displaying it let's take our result\ndisplay access the class list use the\nremove method remove any class of green\ntext and red\ntext let's see if this works you lose\nit's a tie that's black you lose you win\nthe colors seem to be working all right\nnow let's add scoring mechanism we'll\nhave to head back to our HTML\nfile after our result\ndisplay we're going to create a div\nelement the first div El will have a\nclass of score\ndisplay the text for the score display\nwill be player\nscore colon\nspace then we'll add a span element\nwithin with text of zero row I will give\nthe span element a unique ID of player\nscore\ndisplay the reason I'm putting this\nnumber within a span element I'm going\nto style this number different from the\nrest of the div element the player\nscore okay let's copy this div element\nand paste it we need another for\ncomputer computer\nscore the ID of the span element will be\ncomputer score\ndisplay going back to our c a stylesheet\nwe'll add the following after our result\ndisplay we will select the class of\nscore\ndisplay increase the font\nsize font size will be 2\nR for the actual numbers I'm going to\nchange the color with the CSS property\nwhere the font color is green I'll add\nan additional selector let's select the\nID of player score display I would also\nlike that to be that shade of green and\nfor the red text let's select the ID of\ncomputer score\ndisplay so the computer score that\nnumber will be red okay now we just need\nto add functionality to the scoring\nmechanism so back to the\ntop we're going to select the ID of\nplayer score\ndisplay const player score display\nequals doc min. getet element by\nID player score\ndisplay and we need the same thing for\nthe\ncomputer computer score\ndisplay and we need a score value a\nnumber so we can work with it let player\nscore equals zero let computer score\nequals\nz going to the bottom of this function\nwithin our switch within our case of you\nwin we're going to increment our player\nscore player score\nPlus+ then take our player score\ndisplay and update\nit access the text\ncontent set it equal to whatever the\nplayer score\nis then let's do this with our computer\ncomputer score\nPlus+ that's if we\nlose and computer score\ndisplay equals the computer\nscore and that should be everything\nlet's see if this program\nworks you lose you win you win it's a\ntie you win you win you lose the player\nscore is four the computer score is two\nall right everybody so that is a game of\nrock paper scissors you can make using\nJavaScript hey what's going on everybody\nso in today's video I'm going to show\nyou how we can create an image slider\nprogram using JavaScript you will need\nsome images to work with I would\nrecommend finding three or more somewhat\nrelated images to whatever you would\nlike to create an image slider for once\nyou find your images put them within\nyour website folder and we are ready to\nbegin okay let's do this thing everybody\nso we will create a development to\ncontain everything this development will\nhave a class of\nslider within this development we will\ncreate another\ndevelopment this development will have a\nclass of slides to contain our images\nwithin this inner div element we will\ncreate three image elements the first\nimage will have a class of\nslide with this image element I will set\nthe source attribute to be a relative or\nabsolute file path let's begin with\nimage one whatever you currently have\nI'll copy the name of this image\nincluding the\nextension so my image has a name of\nimage 1.jpg and for some reason if this\nimage can't display I'll add some\nalternative text with the alt attribute\nlet's say image number\none and there is my image I will copy\nthis image element paste it twice or\nonce for every image that you have then\nI have image two and image three let me\nchange those we have image two and image\nthree so you should have three or more\nimages depending on what pictures you're\nusing and how many then we're going to\nadd some Arrow buttons for the time\nbeing that will be down at the\nbottom so we will create a button\nelement now you could use a left angle\nbracket let me zoom\nin but I think there's a better option\nthere's a unic code character for a left\npointing angle bracket which looks like\nthis we will use the Unicode character\nof Ampersand #\n100094 I think that looks better but you\ndo you all right then let's create a\nright angle bracket with another button\nthe number is 1\n95 so that will create a button with an\narrow that points to the right for the\nprevious button the left one I will\nassign a class\nof prev meaning\nprevious and the next button will have a\nclass of\nnext when we click on these buttons\nwe'll call a JavaScript function we need\nto set the onclick vent Handler equal to\na JavaScript function for the previous\nbutton we'll call a function of prev\nslide meaning\nprevious and for the next button we will\ncall a function of next slide to go to\nthe next slide\nokay and that is all the HTML that we\nneed for now let's go to our CSS\nstylesheet we will select our class of\nslider that contains everything class\nslider we're going to use relative\npositioning these elements will move\nrelative to their normal position using\nrelative so we have position relative I\nwill set a width of\n100% as well as margin Auto to to Center\neverything\nhorizontally now just in case if our\nimages are really big I will set the\nOverflow property to be hidden so take\nour class of slider select all the\nimages with these images I will set\ntheir width to be\n100% and for now I will set the display\nproperty to be none we don't want to\ndisplay all the images right away so\nthey should\ndisappear let's add a little bit of\nfunctionality before continuing let's go\nto our Javascript file\nI'm going to create a node list of all\nthe images within our class of slides so\nI will create a constant of slides which\nwill be a node list equals\ndocument. query selector all we will\nselect all elements within the class of\nslides that are images image elements we\nwill also declare an index of the\ncurrent slide let slide index so this\nwill be zero initially to start at the\nfirst slide we'll be using the set\ninterval function set interval will\nreturn an ID that we can work with so we\nwill declare a variable to hold to that\nlet\ninterval ID for now I'll set it to be\nnull meaning no\nvalue okay let's declare our functions\nwe will have a function to\ninitialize our\nslider this will populate our web\nbrowser with the first image when we\ncall this function then we need a\nfunction for show Slide there will be\none parameter an\nindex an index of the next slide we\nwould like to go\nto a function for the previous slide\nprev slide and a function for next slide\nfunction next\nslide within our function of initialized\nslider we will take our node list of\nslides at index of our current slide\nindex which will be zero initially I\nwill access the class list and add a\nclass of display slide which we still\nneed to work with and then we will call\nthis function right\naway okay we need to build this class\nstill display\nslide we will select all image elements\nthat have a class within their class\nlist of display\nslide if an image has this class we will\nset their display property to display as\na block we should get our first\nimage if you would like although it's\nnot necessary we could display this\nimage after all of the Dom content loads\nby using an event listener here's how if\nyou would prefer to wait for all the Dom\ncontent to load we can take our document\nadd an event\nlistener we will wait for the event of\nDom content\nloaded once all of the Dom content loads\npass in a call back to initialize slider\nso this would work too and I would say\nit's the preferred way rather than just\ncalling this function initially wait for\nall the Dom content to load then display\nour first image by calling this function\nwithin the initialized slider function\nwe will use the set interval\nfunction we will call the next slide\nfunction after a given amount of seconds\nlet's say after 5 seconds I would like\nto go to the next slide and display the\nnext image whatever is next within our\nnode list in order for us to work with\nthis interval this function is going to\nreturn an interval ID so we can clear it\nlater if we need to we will take our\ninterval ID set it equal to the set\ninterval\nfunction so I am going to\nconsole.log my interval ID just to see\nwhat it is so let's save and run\neverything go to console so this\ninterval has an ID of one if I need to\nclear this set interval function I can\naccess it by its ID which is currently\none and we can get rid of this\nline to avoid displaying an image if we\ndon't have one we can wrap these two\nlines of code within an if\nstatement we will check if our node list\nof slides its length property is greater\nthan zero if we do have slides then\ndisplay it and use the set interval\nfunction if there's no slides no images\nthen don't do\nthis okay then we're going to go to the\nnext slide\nfunction we're going to increment slide\nindex by one slide index\nPlus+ and then we will will call the\nshow slide function pass in our slide\nindex after incrementing it and that is\nall we need for next slide then we have\nthe show slide function within our show\nslide function we will access our node\nlist of\nslides use the for each method to\niterate through all of them I would like\nto take each slide Arrow do this take\neach slide access its class\nlist then remove a class from the class\nlist we will remove the class of display\nslide if it's time to move to the next\nslide we don't want to display the\ncurrent slide anymore we'll remove\ndisplay slide so that it's no longer\ndisplaying as a block remove these\nproperties then outside of this for each\nmethod we will add display slide to the\nnext slide then we will take our slides\nat index of slide\nindex access the class list of the next\nslide then we will add a new class add\nthe class of display\nslide so that it displays as a\nblock and let's see if this works after\n5 Seconds we should move to the next\nslide and that does in fact work let's\nwait again for the next\nslide and that has worked\ntoo we need to reset our slide index\nbecause right now we're going out of\nbounds we only have three slides in this\nexample within our show slide function\nWe'll add an if\nstatement and an lse if\nstatement if we reach the end of our\nslides we need to reset the slide index\nand set it back to be zero if our index\nthat's passed\nin is greater than or equal to our node\nlist of slides length property if we\nreach the end we need to take our slide\nindex and reset it to be\nzero now if we go backwards with the\nprevious button if our index is less\nthan\nzero we will take the slide\nindex set it equal to our slides length\nproperty minus one to set it to the end\nif we're on the first slide and we hit\nthe previous button that will bring us\nto the last slide these images should\nLoop let's see see if that does\nwork so we're on our green car and we\nshould go to our blue car next and that\ndoes work our initialized slider\nfunction is done if we click on the next\nbutton we should be able to go to the\nnext slide right\naway now we have to work on the previous\nbutton and add some functionality to\nthat within the previous slide function\nwe will take our slide index and\ndecrement it with minus minus then call\nthe show slide function pass in the\ncurrent index now we should be able to\nmove forward and\nback now if we hit the previous button\nCU we want to look at an image the timer\nis still going we'll still go to the\nnext slide if we would like to take some\ntime to admire one of these images we\ncan clear the set interval function by\nusing its interval ID so if somebody\nwere to hit the previous button let's\nclear the timer we will use the clear\ninterval function we will pass in that\ninterval\nID our set interval function is still\ngoing to move the slides forward but if\nI were to hit the previous\nbutton that interval is going to\nstop we are done with all of our\nJavaScript functionality we're going to\napply some CSS styling to the buttons\nand even add a transition animation to\nthe next\nimage we will style our buttons next\nwithin our class of slider select all\nbuttons I will set the position property\nto be\nabsolute positions an element relative\nto its parent meaning the slider\nelement with absolute positioning I will\nset the top property to be\n50% these buttons will then be\npositioned on the Y AIS at 50% meaning\nthe middle then I will use the transform\nproperty I will translate them on the Y\nAIS by minus\n%. Translate Y is a function we're\nmoving these buttons up by 50% of the\nelement's height that will put this\nbutton right in the middle take 50% of\nthe height of the button Move It Up by\nthat amount I'll increase the font size\nfont size 25 pixels or better yet let's\ndo like 2 RM\nokay now for the background\ncolor I'll set it to be black but I'm\ngoing to lower the alpha on it so it's\ntransparent I'll set the alpha to be\n50% and for the font color color I'll\nset that to be\nwhite okay you can see our two buttons\nare overlapping currently I'm going to\nremove the border around the buttons\norder\nnone and change our cursor to be a a\npointer if we hover over one of the\nbuttons so these buttons each have a\nclass previous and next let's select the\nprevious\nclass I will set the left property to be\nzero to left align it and with the next\nclass that's the next button I will set\nthe right property to be zero to align\nit to the\nright I'm also going to add a little bit\nof padding too around the buttons let's\nadd some padding\nhere\npadding 10 pixels by 15\npixels that looks pretty good we are\ngoing to add an animation at Key frames\nwe need an animation name we will name\nthis animation fade for a fade\neffect from this property of\nopacity I can't spell today 0.5 meaning\n50% two this property\nopacity one for 100% when a new image is\ndisplayed the opacity is going to be 50%\nso it's transparent then after the\nanimation is complete set it to be one\nfor 100% now we just have to utilize\nthis animation of fade all images that\nhave the display slide class we will set\ntheir animation name when that image is\ndisplayed to be fade how long do we want\nthis animation to take\nwe will set the animation duration to be\nabout 1.5\nseconds okay let's see if this works we\nshould get a fade animation when each\nnew slide\nappears we can move\nforward and we can move\nback all right everybody so that is an\nimage slider that you can create using\nJavaScript HTML and\nCSS hey everybody in today's video I got\nto introduce to you the wonderful world\nof callback hell callback hell is a\nsituation in JavaScript where callbacks\nare nested within other callbacks to the\ndegree where the code is difficult to\nread if you Nest too many callbacks\nwithin other callbacks your code starts\nto form a pyramid and it's really\ndifficult to work with callback hell is\nan old pattern to handle asynchronous\nfunctions in Java Script nowadays we\nhave promises as well as a sync and a\nwait to avoid callback hell which we'll\ndiscuss pretty soon to help us avoid\ncallback hell we should be familiar with\nwhat it is I'm going to create four\ntasks these will be functions function\ntask\none these will be synchronous functions\nwe don't need to use callbacks for\nsynchronous functions then we'll change\nthese to be asyrus functions within task\none we will\nconsole.log task one\ncomplete okay let's copy task one paste\nit three times for a total of four\ntasks\nwe'll have task\ntwo task three and task\nfour in order from the top down we will\nexecute task one followed by task\ntwo task\nthree and task four when all four tasks\nare complete we will\nconsole.log all tasks\ncomplete these functions work\nsynchronously they're all in order task\none is complete then two 3 then four\nthen we get the final message of all\ntasks complete but what if these were\nasynchronous functions they're not going\nto follow this order from the top down\nso to make these functions asynchronous\none thing we could do we can enclose\nthis code within the set timeout\nfunction set\ntimeout set timeout takes two arguments\na call back and a time in milliseconds\nin which to complete this code for the\ncall back this could be a call back an\nanonymous function or an arrow function\nI'll write an arrow function parameters\nArrow do\nthis say the task is complete after\n2,000 milliseconds let's do this with\nthe other tasks\ntoo so task two will be complete after 1\nsecond 1,000\nmilliseconds task three will be complete\nafter 3,000\nmilliseconds now task 4 task 4 will be\ncomplete after\n1,500 milliseconds okay let's try this\nagain I need these tasks to be completed\nin order starting from one all the way\nto\nfour it says that the tasks are already\ncomplete then the tasks are completed in\nthis order task 2 task 4 Task 1 and task\nthree so that's the problem with\nasynchronous code asynchronous functions\ncan complete at any time the rest of our\nprogram doesn't wait around for them to\nfinish if I absolutely need these tasks\nto complete an order starting with 1\nthen 2 3 4 each of these functions can\naccept a call back so we need to set up\nthat\nparameter after we say that that task is\ncomplete we will execute the call back\nto the next function so let's do this\nwith the rest of the\ntasks\nif we need these tasks to complete an\norder starting with one we would take\none and there's one parameter a call\nback we'll pass in a call back to task\ntwo we can pass in a call back and\nAnonymous function or an arrow function\nI like Arrow functions though parameters\nArrow do this what are we going to do\nwhen task one is complete we'll call\ntask two task two also accepts a call\nback again this can be a call back an\nanonymous function or an arrow function\nthis will be an arrow function\nparameters Arrow do this what do we want\nto do when task two is complete call\ntask three task three also accepts a\ncall back we'll use an arrow function\nparameters Arrow do this now when task\nthree is complete guess what we're going\nto do call task\nfour task four task 4 accepts a call\nback we'll do this parameters Arrow then\nwould like to\nconsole.log all tasks complete all tasks\ncomplete this should work\nnow task one complete task two\ncomplete task three complete task 4\ncomplete all tasks complete so what\nwe've done is use callback hell it's\nwhere you're nesting callbacks inside of\nother callbacks if you have a lot of\ntasks to complete an order it can become\nvery unman manageable hey this is bro\nfrom the future one thing that I wanted\nto mention is that four levels of\ncallbacks isn't too unreasonable but\nwhen you add additional levels on top of\nthat that's when you're starting to\napproach the levels of callback hell\nwhere the code can become unmanageable\nand really difficult to read what I've\nwritten in this video isn't too\nunreasonable but hopefully you can see\nhow we've come to start that pyramid\npattern that is all all right everybody\nso that is callback hell it's a\nsituation in JavaScript where callbacks\nare nested with other callback where the\ncode is difficult to read it's an old\npattern to handle asynchronous functions\nin some upcoming videos we'll be\ndiscussing promises as well as a sync\nand a wait to avoid callback hell and\nwell everybody that is callback hell and\nwhy you should avoid it in\nJavaScript what's going on everybody so\nin today's video I got to talk about\npromises in JavaScript A promise is an\nobject an object that manages\nasynchronous operations such as querying\na database space fetching a file\nGathering resources those you could\nconsider asynchronous operations they\ncan take an indeterminate amount of time\nyou can wrap a promise object around\nsome asynchronous code the promise\nobject promises to return a value that\npromise object will be pending then\neither that promise will be resolved if\nthe task completed successfully or\nrejected if it failed for some reason\nmaybe the promise couldn't fetch that\nfile resolved if it did A promise is an\nobject will create a new promise object\nwith new prom\nthen pass into a function usually you\nsee this is an arrow function there's\ntwo parameters resolve and reject Arrow\nthen do some asynchronous code so in\nthis demonstration we're going to be\ndoing some chores if you live with your\nparents maybe your mom asked you to do\nthese chores or with the roommate these\nare the tasks you need to do or your\nsignificant other wants you to do these\ntasks anyways we have some chores to do\nwe have to walk the dog clean the\nkitchen and take out the trash I'll\ncreate functions for each of these\nchores first we'll start by using\ncallbacks then I'll demonstrate the use\nof promises and how they're helpful so\nlet's create a function to walk dog to\nmake this asynchronous I'm going to add\na set timeout\nfunction this takes a call back and an\namount of time in milliseconds to\ncomplete this code let's say walking the\ndog takes 1,500 milliseconds what code\nwould we'd like to perform let's write\nan arrow function to keep it\nsimple parameters Arrow do this let's\nconsole.log after completing this chore\nyou walk the\ndog okay that'll be the first function\nlet's create a function to clean the\nkitchen function clean kitchen this will\ntake a long time 2,500 milliseconds\nlet's say when we complete this task we\nwill print you clean the kitchen\nand a third\nfunction take out\ntrash you take out the\ntrash taking out the trash it's really\nquick it takes half a second 500\nmilliseconds if I need to do these\nchores in order I would need to use some\ncallbacks after walking the dog we will\ncall a call back to clean kitchen after\nwe clean the kitchen we will take out\nthe trash we need to modify these\nfunctions so that they accept some call\nbacks after our code is complete we will\ninvoke the call back call the Callback\nso let's add that parameter to each of\nthese\nfunctions now if we want to call all\nthese functions in order we would have\nto start using call back hell which we\nlearned about out in the last video so\nfirst I would like to walk the dog I\nwill call that function pass and a call\nback but we'll use an arrow\nfunction then we will clean the kitchen\npass in a call back I'll use an arrow\nfunction take out\ntrash and we'll pass in a call back to\ndo this when we complete all the\nchores\nconsole.log you finished all the chores\nokay let's see if this\nworks you walk the\ndog you clean the kitchen you take out\nthe trash you finished all the\nchores if we have a lot of callbacks to\nwork with we'll end up going to call\nback hell you don't want to go to call\nback hell so what we'll use instead are\npromises with all of this asynchronous\ncode we'll wrap it within a promise by\nusing a promise we don't need callbacks\ninstead of using callbacks we'll use\nmethod chaining we'll method chain our\nPro promises here's how how we'll modify\nthese functions is that at the end of\neach function we will return an object\nreturn a new promise return a new\npromise object and follow this formula\nwe have two parameters resolve and\nreject resolve\nreject Arrow do this asynchronous code\nwithin an arrow function take all of the\nasynchronous code cut it place it within\nthe promise our promise promises to\nreturn a value it's either going to be\nresolved or rejected we're going to\nmodify this function we don't need to\nwork with call backs anymore we can get\nrid of those get rid of the parameter\nand the portion of the code where we\ncall the call back if we would like to\ndisplay a message when the promise\nresolves when it finishes successfully\nwe will instead call the resolve\nparameter it's a function this message\nis the value the argument that we're\npassing in after you finish walking the\ndog here's your completion message when\nthe promise resolves let's modify the\nrest of the functions so that they use\npromises we will return a new\npromise two parameters\nresolve\nreject Arrow do this asynchronous code\nlet's cut our current asynchronous\ncode paste it remove the call back\nparameter we don't need it anymore and\nwe don't need to call the call back\nwhen this promise\nresolves pass along this message you\nclean the\nkitchen let's do this with take out\ntrash we will return a new\npromise two parameters resolve reject\nArrow do this cut the asynchronous code\npaste it within the promise remove the\ncall back and where we call the call\nback when we resolve this promise pass\nalong this message we no longer need to\nuse callback hell instead we're going to\nuse method chaining first we're going to\nwalk the dog clean the kitchen and then\ntake out the trash in that order we will\ncall the walk dog\nfunction and then we're going to Method\nchain follow this with the then\nmethod walk the dog then what is what\nwe're saying the walk dog function does\nprovide a value parameter this message\nwe can use that message for something\nthat's going to be stored within value\nthat's going to be the parameter that's\nprovided to us take the value let's\nprint it console.log my value so when I\nrun this program we should only be\nwalking the\ndog you walk the dog and nothing else\nlooks like I misspelled resolve as\nresolves there after walking the dog I\nwould like to clean the kitchen so I\nneed to call that function next within\nour Arrow function we'll write more than\none statement we need to enclose this\nwithin a set of curly braces print our\nvalue and then do this function\nreturn clean kitchen and then call\nit we'll add another then\nmethod then take the value provided by\nclean\nkitchen that will be this\none take that value\narrow\nconsole.log that value\nyou walk the\ndog you clean the kitchen then we'll\ntake out the trash at the\nend we'll add another statement to this\nthen\nmethod we will return take out\ntrash invoke this\nmethod then we will take the value\nprovided to us when it resolves this\nvalue\ndo this\ncode\nconsole.log that\nvalue you walk the\ndog you clean the kitchen you take out\nthe trash so after taking out the trash\nthat's our last chore let's add another\nline of\ncode after displaying you take out the\ntrash let's\nconsole.log you finish\nall the\nchores you walk the dog you clean the\nkitchen you take out the trash you\nfinished all the\nchores by Method chaining then methods\nit's a lot easier to write than nesting\ncall backs now sometimes with\nasynchronous functions depending on the\ntask the task May Fail let's say we're\ntrying to locate a resource a file if we\ncan't locate that file and we're using\npromises we don't want to resolve that\npromise\nbecause we couldn't locate that file\ninstead we want to reject that's what\nhappens when an asynchronous function\nfails to do something when inside a\npromise so let's change our functions\naround within set timeout let's create a\nvariable const dog walked did we\naccomplish this this will be true or\nfalse we'll use an if statement if dog\nwalked then we will resolve it if we\nwalked the dog\nelse we will\nreject we'll pass in a different\nvalue you didn't walk the\ndog okay let's do this with the other\nfunctions let's create a constant of\nkitchen cleaned equals\ntrue if our kitchen is cleaned if that\nis true we will resolve this promise\nyou clean the\nkitchen else let's reject pass along\nthis\nmessage you\ndidn't clean the\nkitchen and lastly take out\ntrash const trash taken out let's set\nthat to be\ntrue if the trash is taken out\nresolve the\npromise else we will\nreject you\ndidn't take out the\ntrash if a promise might reject there's\none more method we need to add to the\nend of this chain we need to add a catch\nmethod to catch any\nerrors this will catch any Rejects this\nis similar to error handling we'll be\nprovided with one value an error Arrow\ndo this let's\nconsole.log or even console.\nerror the message provided to us with\nreject that's what the error is going to\nbe we'll successfully walk the dog that\nwill be true and cleaning the kitchen\nwill be true but taking the trash out\nwill be false we weren't able to\ncomplete this chore these are the\nresults\nyou walk the\ndog you clean the kitchen you didn't\ntake out the trash how dare you we'll\nkeep on completing these tasks until we\nfail at one of\nthem so if walking the dog was false\nthat was our first\ntask this first promise was rejected we\ndon't even attempt to resolve these\nother promises all right everybody so\nthose are promises they're an object\nthat manages asynchronous operations you\ncan wrap a promise object around some\nasynchronous code these promise objects\npromise to return a value they will be\npending until they complete then they'll\neither be resolved if that task\ncompleted successfully or rejected if it\nfailed for some reason and well\neverybody those are promises in\nJavaScript hey everybody so today I got\nto talk about a sync and a weight in\nJavaScript a sync and a waight are two\nkeywords by using these two keywords\ntogether they allow you to write\nasynchronous code in a synchronous\nmanner a sync makes a function return a\npromise a wait makes an async function\nwait for a promise we'll discuss async\nfirst in this sample program from the\nlast topic we have some chores to do we\nhave to walk the dog clean the kitchen\nand take out the trash each of these\nfunctions returns a promise a promise\nthat can either resolve or reject based\non the code that's written if the dog is\nwalked if if that's true resolve if it's\nfalse reject a function can be declared\nwith a sync a function declared with a\nsync will return a promise however that\npromise that's returned doesn't resolve\nor reject in a way you could say it's an\nempty promise if I were to run this code\nthis is what\nhappens uncaught reference error resolve\nis not defined if an asynchronous\nfunction returns a promise that either\nneeds to resolve or reject adding a sync\nto it really doesn't benefit us a sync\nworks together with a weight by using\nthese two keywords together when calling\nall of these asynchronous functions in\norder we don't need to Method chain then\nstatements there's a more synchronous\nmanner in which we can write the same\ncode but we'll need to contain it all\nwithin an async function async function\nwe'll create a function to do\nchores then we will need to call this\nfunction somewhere let's do so right\nhere\nfirst we need to walk the dog walk the\ndog returns a\npromise that's where the await keyword\ncomes in a wait makes an async function\nwait for a promise before continuing\nwe're going to create a constant of walk\ndog result equals use the await\nkeyword await walk\ndog then we will\nconsole.log the walk dog\nresult you walk the dog now let's do\nthis with clean kitchen we're going to\nbe writing this code in a synchronous\nmanner line by line\nlinearly we will create a constant for\nclean kitchen result equals await the\nnext promise await clean\nkitchen then\nconsole.log clean kitchen result let me\nclose\nthis you walk the dog\nyou clean the\nkitchen and last we have take out\ntrash const takeout trash result equals\na wait take out the\ntrash then\nconsole.log the\nresult you walk the\ndog you clean the kitchen you take out\nthe trash let's add one more line when\nwe finish everything one more line of\ncode you you finished all the chores you\nwalk the dog you clean the kitchen you\ntake out the trash you finished all the\nchores let me show you what happens if\nwe attempt to use a weight within a\nfunction not declared with a\nsync uncaught syntax error a weight is\nonly valid in async functions that's why\na weight depends on async a weight makes\nan async function wait for a promise\nbefore continuing now if your promises\ncan reject let's say that dog walked is\nfalse uncaught in promise you didn't\nwalk the dog we'll surround all of this\ncode within a tri block then catch any\nerrors catch one parameter of\nerror we can\nconsole.log or console .\nerror the\nerror you didn't walk the\ndog all right everybody so that is a\nsync and a wait a sync makes a function\nreturn a promise a wait makes an async\nfunction wait for a promise by using\nthese two keywords together we can write\nasynchronous code in a synchronous\nManner and well everybody that is a sync\nand a wait in\nJavaScript what's up everybody so today\nI got to talk about Json files using\nJavaScript Json means JavaScript object\nnotation it's a data interchange format\nmost of the time it's used for\nexchanging data between a server and a\nweb application they can have a few\ndifferent formats usually you'll see a\nJson file as an object an object made up\nof key value pairs or you may see them\nas an array an array of values or some\ncombination of both you can have an\nobject where one of the values is an\narray and or you could have an array of\nobjects like this just to understand the\nformat we'll create a new Json file\nlet's go to our website folder create a\nnew file we'll create an array of names\nthe file extension is\nJson we'll Begin by writing an array\nwith a set of straight brackets let's\nadd a few names just some first names\nSpongeBob\nPatrick Squidward\nSandy this is a valid Json format let's\ncreate a new Json file just for a single\nperson this will be an object new file\nperson.\nJson this time we will create a single\nobject this object will have key value\npairs we will have a name key and a\nvalue of\nSpongeBob each key value pair is going\nto be comma separated SpongeBob will\nhave an age\nkey of\n30 and a Boolean of is employed is\nSpongeBob currently employed that will\nbe\ntrue this is also a valid format our\nJson file contains one object an object\nmade up of key value pairs objects can\neven have arrays as one of their values\nwe will create an array of\nhobbies what what does SpongeBob like to\ndo this will be an\narray\njellyfishing\nkarate and\ncooking let's create one more Json\nfile we will create a Json file for\npeople this will be an array of objects\npeople.\nJson we're going to create an array of\nobjects within this array we'll create\none\nobject what key value pairs should this\nobject have we'll just reuse what we\nhave for SpongeBob excluding the array\nto keep it\nsimple okay that will be the first\nobject let's create another object we\nneed another set of curly\nbraces the second object will have a\nname property of Patrick age 34 is\nemployed will be\nfalse the next object this will be for\nSquidward age\n50 is a employed true he works at the\nCrusty\nCrab one last object name Sandy age\n27 is employed false Sandy is\nself-employed all right we have an array\nof objects each object can have its own\nunique key value pairs so let's close\nout of these Json files but we'll hold\non to\nthem so Json formats they're one long\nstring to represent that object or array\nusing the stringify method of Json we\ncan convert a JavaScript object or an\narray into a Json string so let's copy\nwhat we have for\nnames I will create a constant of names\nequals that array we'll convert it to a\nJson\nstring const Json string equals access\nJson Json is a built-in object that's\nprovided to us to work with Json files\nwe will use the stringify method then\npass in our array or our\nobject currently if I were to\nconsole.log my names before stringifying\nit here's the\nresult we have an array of strings to\nwork with after using the stringify\nmethod on names we'll be given one long\nstring to represent this array if I was\nto use this on an object let's copy what\nwe have for person\nI will create a const of person this\nwill be an object I'll just paste what I\nhave for SpongeBob first let's\nconsole.log person here's my person\nobject then let's stringify it and\ndisplay the Json\nstring Json files work with one long\nstring that represents an object or an\narray let's stringify our people it's an\narray of objects\nconst people equals paste what we have\nlet me show you what happens when I\nconsole.log people before stringifying\nit we have an array of\nobjects each object has its own key\nvalue\npairs then if I was to stringify it\nhere's the\nresult one extremely long\nstring now we'll use parse parse\nconverts a Json string to a JavaScript\nobject so let me reformat\nthese to convert these objects or arrays\ninto a string we can surround them with\na pair of back\nticks so let's rename these let's say\nJson\nnames Json\nperson then Json\npeople these objects and arrays are all\nin a Json format to convert them to\ntheir original form we can use the parse\nmethod of Json I will create a constant\nof par data equals Json\nparse pass in our data of Json\nnames and then let's\nconsole.log let me show you Json names\nfirst before parsing it we have a string\nrepresentation of an array but after\nparsing it it becomes a JavaScript array\nlet's do this with our string\nrepresentation of an object Json person\nnormally it looks like this and then\nafter parsing it we have a JavaScript\nobject\nand then Json people it's an array of\nobjects then we'll parse\nit and here's the result an array of\nobjects now I'm going to show you how we\ncan fetch a Json file we'll talk about\nfetch more in the next topic fetch is a\nfunction as an argument we can pass in a\nrelative or absolute file path or a URL\nwe'll discuss that in the next\ntopic I would like to get my Json file\nof let's go with\nperson so I will list the relative file\npath these files are right next to each\nother I just need to type person. Json\nfetch returns a promise we will follow\nthis with the then method then do this\nwe'll be provided with a response\nobject take our response Arrow do this\nwe will take our response object convert\nit to a Json format using the Json\nmethod then let's display what we have\ncurrently then take the value arrow\nconsole.log that\nvalue let's see what we have yep there's\nSpongeBob we have successfully fetched a\nJson file let's do this with our array\nof\nnames we have an array of strings of\nfirst names and people people.\nJson we have an array of objects\none object for each\nperson if you would like to iterate\nthrough all the objects let's rename\nvalue as values we'll use the built-in\nfor each method of arrays values. for\neach take each value Arrow do this\nconsole.log each\nvalue now we're iterating through and\nprinting each object if you would like\nsome of the specific properties like\nmake name follow the value with name\nSpongeBob Patrick Squidward Sandy or\nage or is\nemployed oh and another thing that I'm\nforgetting be sure to add a catch method\nto catch any errors just in case we\ncan't fetch this Json file for some\nreason console.log or console. error the\nerror\nmessage we'll talk about fetch more in\nthe next topic all right everybody so\nthose are Json files Json means\nJavaScript object notation it's a data\ninterchange format it's mostly used for\nexchanging data between a server and a\nweb application Json files are usually\nobjects or an array or some combination\nof both to convert a Json object to a\nstring you can use the stringify method\nto convert a Json string to an object\nyou can use the parse method to fetch a\nJson file you can use the fetch function\nwhich we'll talk about next and get more\nin depth with and well everybody those\nare Json files using\nJavaScript well it's going on everybody\nso in today's video I'm going to show\nyou how we can fetch data from an API\nusing JavaScript and at the end of this\nvideo we're going to create a project\nwhere we can fetch some images of\nPokémon depending on what Pokemon you\ntype in so sit back relax and enjoy the\nshow all right people so we got to talk\nabout fetch fetch in JavaScript is a\nfunction it's used for making HTTP\nrequests to fetch resources including\nbut not limited to Json styled data\nimages files resources of that nature\nthe fetch function simplifies\nasynchronous data fetching it's used for\ninteracting with apis to retrieve and\nsend data asynchronously over the web\nfetch has two arguments a URL of the\nresource and an object an object of\noptions I won't be talking about options\nin this video that's more advanced\nJavaScript one of what you may see is a\nmethod property the default is get to\nget a resource you can use post to send\nsome data put to replace some data and\ndelete to delete some data so the\ndefault is get but we don't need to\nexplicitly state that we'll just be\nfocusing on getting data with only a URL\nto fetch something we have to use the\nfetch function and pass in a URL what I\nthought we could do for this video is\nfetch some Pokemon data from the Pokémon\nAPI if you want to follow along you can\ngo to this URL I would like to fetch\nsome data on\nPikachu because everybody knows about\nPikachu and here's some of the data on\nPikachu this resource is one gigantic\nobject Pikachu has a name an ID number a\ntype Pikachu's an electric type there's\nstats such as his attack power HP\nthere's even image Sprite which we'll\nwork with later we will copy this\nURL and paste it within the fetch\nfunction we will pass in a string\nrepresentation of this URL the fetch\nfunction is promise-based it's either\ngoing to resolve or reject so we should\nadd a\nthen and a catch method to catch any\nerrors error Arrow do this let's console\nthe error if there's an error once the\npromise resolves will be provided with\nan object a response object take our\nresponse object Arrow do this for the\ntime being let's\nconsole.log our response just to see\nwhat it is\nexactly so here's our response\nobject the body contains the data we're\nlooking for for Pikachu this response\nobject has a status code of 200 that\nmeans it's okay here's where you may see\nthat status code of 404 if you can't\nlocate a resource it has an okay\nproperty if fetching this resource was\nokay this is going to be true if not\nit's false there's also a URL here too\nnow our next step is to convert it to a\nreadable format there's a few different\nmethods there's array buffer blob text\nand Json these are all methods we're\ninterested in the Json method in this\nexample so our next step is to take our\nresponse object convert it to Json using\nthe Json\nmethod this is also promise based once\nthis promise resolves let's follow this\nwith a then method then take the data\nour Json data that's going to be\nreturned to\nus Arrow do this let's console.log my\ndata just to see what it is so after\nfetching data on Pikachu convert the\nresponse object to a Json\nformat and here's my data for Pikachu we\nhave a name an ID Pikachu stats such as\nhis HP and attack and wait and many more\nthings with this Json data you can\naccess one of the properties I would\nlike just Pikachu's name data. name\nPikachu data dot weight how much does\nPikachu way 60 60 units of something\nwhatever unit of measurement they use in\nAnto what is Pikachu's ID 25 near the\nend of this video we're going to fetch\nthe Sprites of the Pokémon now for some\nreason if we try and access a Pokemon\nthat doesn't exist as of the filming of\nthis video SpongeBob is still not a\nPokemon we get a status code of 404\nmeaning we could not find this resource\nSpongeBob is not a Pokemon unfortunately\nso even if we can't locate a resource\nour promise is still going to resolve\nit's not going to reject we need to\ncheck to see if our response is not okay\nlet me demonstrate I will console.log my\nresponse\nobject here's my response object it is\nnot okay your response will be okay if\nthe status is within the 200 range since\nwe have a status of 404 we couldn't\nlocate this resource okay is false we're\ngoing to throw an error if our property\nof okay is false within our first then\nmethod we'll write a few statements we\nneed a set of angle brackets before\ncontinuing let's check to see if our\nresponse access the okay property then\nuse the not logical operator if our\nresponse is not okay if it's false we're\ngoing to throw a new\nerror and then catch it using the catch\nmethod we can write a custom message\nlet's say something like could not fetch\nresource if our resource is okay we\nwon't execute this code otherwise we\nwill return our response object in a\nJson\nformat let's try and retrieve Pokemon\ndata on\nSpongeBob okay we have an error but we\nhave caught this error using the catch\nmethod error could not fetch resource\nthen let's get data on Pikachu\nagain and there Pikachu and his ID\nnumber if you would prefer to use a sync\nand a weight here's how let's delete all\nthis we will create an async function so\nthat we can use a weight within it I\nwill declare a function to fetch data no\nparameters do all\nthis we will create a try and catch\nblock try and catch\ncatch has one parameter an error if we\nreceive an error let's console. error\nthe\nerror within our Tri block we will\ncreate a constant of\nresponse the fetch function is going to\nreturn an object a response object we\nwill\nawait our promise that's returned by\nfetch then we need to get that URL\nagain let's get data on a different\nPokémon another Pokemon that I like is\ntyion honestly I think tyion is my\nfavorite\nPokemon all right here's the stats for\ntyion I'm going to copy this\nURL pass it to the fetch function as a\nstring once the promise for fetch\nresolves we have to see if the response\nis okay we'll use an if\nstatement if our response\nobject is the okay property not okay if\nour response is not okay if we can't\nlocate this\nresource then we will throw a new\nerror let's say could not fetch\nresource if our response is okay we will\ncreate a constant for our\ndata equals await take our response and\nconvert it to\nJson this also returns a promise that's\nwhy we're using a wait then we will\nconsole.log our\ndata and then we have to call the fetch\ndata function because I forgot to do\nthat call fetch\ndata and here's the stats for tyion Name\ntyion ID 157 tyion is a fire\ntype that's how to use a sync and a\nweight to fetch a\nresource now that we know what we're\ndoing we're going to create a text box\nand a button to search a Pokemon and\npull up a Sprite of that Pokemon and\ndisplay it so going to our HTML file we\nwill create an input\nelement with the type attribute of text\nbecause it's a text\nbox I will set the ID of this input\nelement to be Pokemon name\nit's a little small right now we haven't\napplied any\nCSS I will add a\nplaceholder of enter Pokemon\nname then we need a button I will create\na button\nelement with text of\nfetch\nPokemon I will set the onclick event\nhandler equal to a JavaScript function\nlet's call that function a fetch data\nthen I will add a\nbreak after fetching some Pokemon data\nwe have an image to work with I will set\nthe source currently to be an empty\nstring I will display some alternative\ntext if we can't display the image of\nPokemon\nSprite and I will give this element an\nID of Pokemon\nSprite to not display the image\ncurrently we can access the style access\nthe display property and set it to be\nnone then if we do want to display it we\ncan set display to be a block let's go\nto our Javascript\nfile within our Tri block we will create\na constant of Pokemon name\nequals\ndocument. getet element by ID the ID\nthat I'm selecting\nis Pokemon\nname access the value of this input\nelement now if somebody types an\nuppercase\ncharacters I'll take the value make all\nthe letters lowercase I will method\nchain the two lowercase method two\nlowercase\nmethod with our fetch function we're\ngoing to use a template string with a\npair of back ticks for the Pokémon's\nname we will use a placeholder and pass\nin our Pokemon name\nvariable so now when I type in a\nPokemon's name like\nBulbasaur we should get data on that\nPokemon if it exists so let's go to\ninspect console and here's data on\nBulbasaur Bulbasaur's ID is\none Bulbasaur is a grass type\nand I think he's a poison type too if\nI'm not\nmistaken this Json data also has Sprites\nimages of each Pokemon we're going to\nfetch the front\ndefault so we don't need console.log\nanymore we'll create a\nconstant of Pokemon Sprite to get that\nimage equals take our\ndata access the Sprites\nproperty get the front default\nSprite then we will get our image\nelement this one that has an ID of\nPokemon\nSprite const image\nelement equals document. getet element\nby ID the ID that I'm getting is Pokemon\nSprite we will change the CSS of this\nelement take our image element\naccess its source attribute right now\nit's currently empty our source is an\nempty\nstring set the source equal to our\nPokemon Sprite this is a\nconstant then we will take our image\nelement access the style attribute\naccess the display\nproperty and set it equal to be a block\nbecause right now it's\nnone now when I type in a Pokémon's name\nlike Charizard and fetch that Pokémon we\nget the image of that Pokémon it is a\nlittle small however it is a\nSprite Sprites tend to be very\nsmall or we can get\nmeww or whatever other Pokemon you can\nthink of I think there's like over a\nthousand Now where's\ntyion there's tyion all right everybody\nso that is how to fetch data from an API\nyou got to use the fetch function it's\nis used for making HTTP requests to\nfetch resources you can fetch Json style\ndata images files the fetch function\nsimplifies asynchronous data fetching\nit's used for interacting with apis to\nretrieve and send data asynchronously\nover the web and well everybody that is\nhow to fetch data from an API using\nJavaScript hey everybody so in today's\nvideo we're going to create a weather\napp that fetches data from an API you\ncan look up any didn't get the weather\nif that sounds good to you then sit back\nrelax and enjoy the show if you would\nlike to follow along you will need your\nown API key the API that we'll be using\nis openweathermap.org you do need to\nsign up for an account though it is free\nto sign up for an account you can go to\nsign in if you're currently not\nregistered you can create an account for\nfree once you're signed in you'll need\nan API key go to my API Keys it may take\nyou some time to get an API key\ngenerated for you mine took about 15\nminutes and once you get it make sure\nit's active we will need that API key\nabout 20 minutes into this topic\nhopefully for you by then it'll be\ngenerated okay let's do this everybody\nwe will Begin by creating a form element\nthe form element will have a\nclass of weather form our form element\nis going to have an input element and a\nbutton within this input element we'll\ntype in the name of the city we would\nlike to retrieve the weather data\n4 so the type of this input element is\ngoing to be text for some\ntext the class will be City input so a\nuser can type in the city and we'll add\na placeholder let me zoom in a little so\nyou can see\nit the placeholder will\nequal enter\nCity then we'll need a button let's\ncreate a button element with text of get\nweather the type of this button will be\nsubmit it's the submit button for our\nform after retrieving the weather data\nwe'll display the weather data in a card\nformat like a Pokemon or Yu-Gi-Oh card\nso we will create a div\nelopement with a class of\ncard but before applying some CSS we\nshould at least add some placeholder\nelements so we can style them and see\nthe changes for the time being let's\ncreate an H1 element we will be deleting\nthese elements later so don't get too\nattached I will set the class of this\nelement to be City\ndisplay We'll add a sample City let's\nsay Miami or pick a city if you're\nchoosing then I will create a paragraph\nelement the class will be temp display\nmeaning temperature let's say the\ntemperature is 90° fah or pick something\nin celsius if you're on Windows to add a\ndegree symbol you can hold alt then type\n0176 Miami is going to be 90°\nF then we'll create a paragraph element\nfor the\nhumidity class\nequals\nhumidity\ndisplay for the text let's say humidity\ncolon space then a percentage\n75%\nthen we need a description of the\nweather this will be another paragraph\nelement the class will equal description\ndisplay desk meaning description for the\ndescription let's say clear\nskies I'll also display an emoji\ndepending on what the weather\nis the class will be weather\nEmoji I'll use a\nsun\nfor some reason if we can't display the\nweather data such as if we can't locate\na city let's add the following\nparagraph the class of this element will\nbe error\ndisplay We'll add the text of please\nenter a\ncity that is all the HTML that we need\nfor now we're going to apply some CSS\nstyling next so now let's head to our\nCSS stylesheet we are going to select\nthe body of\ndocument select a font family I will\npick Ariel with a backup of s\nserif I'll change the background color\nof the body background color pick a\ncolor I'm going to use hsl\nvalues I will set the lightness to be\n95% so it's a light gray color I will\nset all margin around the body to be\nzero then I'll use flexbox to display\nthe element elements display\nFlex the flex direction will be a column\nto arrange all the elements in a\ncolumn then align item Center to\nhorizontally align all the elements\nalign item center now we'll select the\nclass of weather form that'll be this\nform that has an input element and a\nbutton all we'll do is add a little bit\nof margin around the entire form 20\npixels\nthen we'll select our city input that's\ngoing to be the text\nbox class of City\ninput I will add some\npadding of 10\npixels let me zoom out to\n100% increase the font\nsize to 2\nRM set the font weight to be\nbold I'll add a border\ntwo pixel\nsolid and pick a\ncolor but all lower the alpha so it's\ntransparent to\n30% there's our border\ncurrently border radius around the\ncorners let's do 10\npixels add some margin of 10 pixels\nthat'll separate this element from the\nbutton and set a width of 300\npixels okay let's style the button next\nokay we are going to select all buttons\nthat have an attribute where the type\nequals\nsubmit so that's going to be for our\nsubmit button that says get weather let\nme scroll down okay I'm going to add\nsome padding around the\nbutton 10 pixels by 20\npixels I'll set the font weight to be\nbold I'll increase the font\nsize to be to\nR pick a background color for the button\nI'll pick something\ngreen but I'll use hsl\nvalues I've already pre-picked a color\nlet's go with\n122 the\n39% and\n50% that's a good shade of\ngreen I will set the color to be white\nfor the font\ncolor remove the border border\nnone and Border radius 5 pixels to round\nthe\ncorners then when we hover our cursor\nover the button I would like it to be a\npointer and that does work when we hover\na cursor over the button we'll use the\nhover Pudo class to change the\nbackground color so let's take our\nbutton for the type attribute is\nsubmit access the hover sudo class take\nour background color make it a little\nbit darker I'll bring down the lightness\nby 10% so it's at 40% so that does in\nfact\nwork okay then we're going to select our\ncard class that contains all the weather\ndata so we will select the class of\ncard for the background we're going to\ndo something a little bit different\nwe're going to use a linear gradient\ninstead of selecting the background\ncolor we will select the\nbackground I will use the linear\ngradient\nfunction there's three arguments think\nof a linear gradient as a slow\ntransition between two colors we need an\nangle in degrees we'll say 180° for now\nthen a color let's pick something\nblue and\norange I'm going to pick some colors\nthat look a little bit\nbetter so for blue let's set the Hue to\nbe\n210 100% for the saturation and the\nlightness will be\n75% that's a good shade of blue and for\norange we'll use another hsl\nvalue for the Hue I'll say\n40% the saturation will be\n100% And The lightness will be\n75% so I'm hoping with this linear\ngradient the background color looks kind\nof like a sunrise or a sunset once we\nhave our background I will add some\npadding of 50\npixels I'll add a box Shadow to this\ncard we'll add a vertical and horizontal\noffset of two pixels each and a blur\neffect where the radius is 5\npixels then we'll pick a color\nI'm just going to lower the alpha to\n50% not\nbad this gives our card a 3D pop\neffect I will set a minimum width of\nthis card to be 300\npixels then we have to align everything\nwithin it I'll use flex box because I\nlike Flex box display\nFlex Flex direction will be a\ncolumn\nand align items Center to horizontally\nalign the\nitems there we go then we'll select all\nH1 elements that's going to be our city\nname select all H1\nelements increase the font\nsize to be 3.5\nRM I'll remove any margin from the top\nmargin top will be\nzero and add margin to the\nbottom of 25\npixels then we'll select all\nparagraphs that's going to be everything\nunderneath our\ncity select all\nparagraphs increase the font size to 1.5\nRM there's a lot of natural margin\nbetween the\nparagraphs let's set all margin to be\nzero to see what it looks like okay\nlet's add a little bit of margin five\npixels on the top and bottom zero margin\non the sides that's a lot better we'll\nselect the city display and the\ntemperature display we're going to be\nselecting two classes City\ndisplay comma our temp\ndisplay take these two classes apply the\nfollowing properties you know what for\nour font size let's set that to be 3.5\nRM we can honestly remove that from\nH1 for the font weight I will set that\nto be bold for the color I'll make the\ncolor a little\ntransparent I'll set the alpha down to\n75% so that our city and our temperature\nthey're both going to be\ntransparent then I'll add some margin to\nthe bottom margin\nbottom 25\npixels okay let's select our humidity\ndisplay class\nhumidity display set the font weight to\nbe bold and add some margin to the\nbottom of 25 pixels then we'll select\nour description\ndisplay which we shortened to desk\ndisplay for the font style I will set it\nto be\nitalic and the font weight will be\nbold I'll increase the font\nsize to 2\nRM then we'll select our weather Emoji\nso class weather Emoji remove all margin\naround the Emoji margin zero then we'll\nincrease the font size of the\nEmoji the size will be 7.5 RM so it's\nkind of\nbig then if for some reason we display\nan error we'll display this text so this\nclass is error\ndisplay I'll set the font size to be 2.5\nRM the font weight will be\nbold I'll set the color to be something\ntransparent I'll lower the alpha to\n75% okay that is all the CSS that we\nneed let's go back to our HTML file we\ncan delete everything within the card\nclass\nwe just wanted to see what it would look\nlike with the elements populated with\nour card element I will set the style\nattribute to be take the display\nproperty set it to be none we don't want\nto display the card at all until we get\nthe weather data until it's returned to\nus our HTML is done our CSS is done then\nwe're ready to add some JavaScript\nfunctionality we'll declare our\nconstants that we need const weather\nform equals\ndocument dot now since we're not working\nwith IDs we can't get element by ID\nwe're working with classes we can use\nQuery selector or query selector all so\nI'm going to use Query selector this\nwill return the first element in this\nclass we only have one element with this\nclass class weather form we'll store a\nreference to\nit const City in\ninput equals\ndocument. query\nselector we are selecting the class of\nCity input that's going to be this text\nbox const card our card is what contains\nall the weather\ndata\ndocument. query\nselector select the class of card and\ngive me the first\nelement now we'll need that API key\nconst API key\nequals now here's my API key please\ndon't try and use this one specifically\nI will be deactivating it at the end of\nthis video hopefully by now you should\nhave that API key given to you first\nwe'll take our weather\nform We'll add an event\nlistener this is our form\nthe text element and the submit button\nwhen we click on this button the event\ntype is going to be submit after we\nattempt to submit this form we'll do the\nfollowing code we'll have one parameter\nan event that's going to be provided to\nus Arrow do this we'll fill this in\nlater we'll declare our functions that\nwe\nneed we will need an async\nfunction to get weather data there will\nbe one parameter a city that's going to\nbe passed\nin then we'll need a function to\ndisplay weather info there will be one\nparameter data the data will be in a\nJson like\nformat we'll create a function to get\nweather\nEmoji based on what the weather is there\nwill be one parameter a a weather\nID then we'll create a function to\ndisplay to the screen any errors if\nthere are any function display\nerror there will be one parameter a\nmessage a message to be displayed to the\nwindow within our event\nlistener once we have a submit event\nonce we click the button forms do have a\ndefault Behavior where they'll refresh\nthe page we would like to prevent that\nso let's take our event use the prevent\ndefault method to prevent the default\nbehavior for a form we don't want to\nrefresh the page then we'll have to get\nthe city the value within this text box\nconst City equals take the city input\naccess the value store it within this\nvariable it should be a\nstring we'll use an if statement if\nCity if there's a value within here this\nthis will be true we can use it within\nan if\nstatement if there is a city do\nthis else we'll call the display error\nfunction else we will display an\nerror we will pass along the message to\nplease enter a\ncity let's fill in the display error\nfunction we want to be sure that it\nworks before continuing the display\nerror function is at the bottom\nwill be provided with a message to\ndisplay we will create a constant of\nerror\ndisplay equals document now we'll create\nan element create element we will create\na\nparagraph then we'll need to change the\ntext content of this element error\ndisplay access the text\ncontent set it equal to be our\nmessage then we're going to add the\nclass of error display we would like\nthese CSS\nproperties take our error display\nelement access the class list then we\nwill add a class we will add the CSS\nclass of error\ndisplay then we will take our card\nelement which normally displays the\nweather data take our card reset the\ntext content if there is something there\nwe'll set it to be an empty string so\nnormally with our card the display is\nset to none we'll set the display to be\na block or even\nFlex access our card access the style\naccess the display and I will set the\ndisplay to be Flex to display\nit we will take our card we will append\na child element append child we will\nappend this par paragraph of error\ndisplay to the card now if I were to not\ntype in anything and just press get\nweather we get this error message please\nenter a\ncity to our card I'm just going to round\nthe corners to make it look better\nborder radius let's do 10\npixels that's better okay moving on if\nwe do have a city if there's text within\nhere we will try some code because it\nmight cause some errors we will catch\nany errors that happen we have one\nparameter of error if there's an error\nwe can console.log or console. error the\nerror then let's call our display error\nfunction we'll pass along the error and\ndisplay\nit now we need to get the weather data\nwithin our Tri block we will create a\nconstant of weather data equals now we\nneed to\nawait get weather data function and pass\nin our city so with the weight we can\nonly use a weight within an async\nfunction since we're within an arrow\nfunction we could declare this Arrow\nfunction as an a sync function so let's\npreedee our event parameter with a sync\nso that we can use a\nweight we're going to wait for this\nfunction to return the weather data once\nwe receive our weather data we will call\nthe display weather info function and\npass along that data the weather\ndata okay this function is complete once\nyou've typed everything in I'm going to\nclose this\nfunction and we can close our display\nerror function\ntoo now once we want to get our weather\ndata after we have a\ncity now we actually need to fetch the\nweather data we'll have to create a URL\nwe'll create a constant of API\nURL this is what we'll pass to the fetch\nfunction we will use a template string\nbe sure to use a pair of back\nticks we'll need to get the following\nURL at this web\npage we need to find the API call where\nwe can pass in a city name we can copy\nthis within our template string we'll\npaste it\nwe'll replace the city name with the\nplaceholder and use our city\nvariable for the API key we'll use a\nplaceholder pass in the API\nkey this is what we'll pass to the fetch\nfunction we will create a response const\nresponse equals a weight we can use a\nweight because we're with within an\nasync function we will\nfetch our API URL once we have a\nresponse let's check our\nresponse let's console.log our response\njust to see what it\nis okay I will type in the city of Miami\nget weather our data should be within\nconsole.log here's our\nresponse it has a status of 200 and it's\nokay we need to check to see if our\nresponse is not okay what if we couldn't\nretrieve the data I'll make up some\ngibberish\nCity let's go to inspect\nconsole we have a response status 404\nthe response is not okay we'll write an\nif\nstatement if our\nresponse is not\nokay we will throw a new error and pass\nalong the this\nmessage could not fetch weather\ndata else if our response is okay we\nwill return the\nresponse and we will\nawait our response convert it to a Json\nformat using the Json\nmethod so at the end of this function\nreturn an object that's in a Json like\nformat this data is going to be returned\nto our event\nlistener after we get our weather data\nwe need to display it we'll work on the\ndisplay weather info function next this\none let's console.log the data we\nreceive I will type in\nMiami so it looks like that\nworked we have a name of Miami for the\ncity we have the weather which is an\narray it's an an array of objects we\nhave coordinates clouds pretty much\nanything you can think of regarding the\nweather let's get the name within main\nthere is temperature the temperature\nwill be in kelvin we need to convert it\nI'll get the humidity within weather\nit's an array of objects we will get the\ndescription overcast clouds and this ID\neventually we'll use the ID to return an\nemoji there's different weather codes\nI'll explain that later\nso we're going to use some object\ndestructuring const use object\ndestructuring with a set AC krly\nbrackets we will access the name\nproperty and create a variable of city\ncity will be Miami in this case then we\nwill access main main is a property that\ncontains an\narray take main use object destructuring\nagain now we're within a nested object I\nwould like the temp and the\nhumidity then let's select our\nweather so whether it's an array of\nobjects we'll have to use array\ndestructuring followed by object\ndestructuring give me the\ndescription and the\nID we have to set this all equal to data\nto use\ndestructuring and let me organize this\nto make it look\nnice our data is one gigantic object\nthat has nested objects and nested\narrays so after destructuring we'll have\nthese variables the city the temperature\nthe humidity a description of the\nweather and an ID for the weather code\nnow we can use these like\nvariables so with our card currently\nwe're not displaying it now I would like\nto to display\nit we are going to take our card set the\ntext content to be an empty string if\nthere's already some text here we would\nlike to reset it such as if there was an\nerror\nmessage take our card access its style\nset the display property to be Flex for\nFlex\nbox just to be sure that this is working\nI'm going to get the weather without\nentering a city after we do type in a\ncity it should\nreset that's good that's what we wanted\nor if we make up some gibberish we have\nthat error could not fetch weather data\nbut then if we type in something\nlegitimate and get the weather it'll\nreset that's what we would\nlike okay now we have to create the\nelements the elements that we previously\ndeleted from the div element we need to\nrecreate those we will create a constant\nfor City display\nto display the\ncity document. create element our city\ndisplay was an H1 element let's copy\nthis line of code and paste it a few\ntimes four additional\ntimes we have City display temp display\nfor the temperature that was a paragraph\nelement humidity\ndisplay humidity display that was also a\nparagraph element\na description display which we shortened\nto desk desk\ndisplay that was also a\nparagraph and a weather Emoji weather\nemoji and that was also a\nparagraph okay now we need to change the\ntext content of each of these elements\nbut they're empty so to say let's take\nthe text content of our city\ndisplay. text content\nproperty equals our city variable that\nwe\ndestructured okay let's see if that\nworks I'll type in a city get weather oh\nand then we need to append\nit take our\ncard append child we will append the\ncity display element let's try that\nagain type in Miami get the weather that\nshould display\nMiami let's try Dallas\nTexas\nDallas Oh and before displaying it we\nneed to add the class list the CSS class\nfor the city display after adding the\ntext content we will take our city\ndisplay access its class list add the\nclass the CSS class of City display so\nthen when we type in a city we should\nhave that CSS styling all right now we\nhave to add the temperature following\nthe same\nformat we will take our temp display\naccess the text content\nequals I'll use a template string with a\npair of back ticks I'll add a\nplaceholder pass in our temperature add\na degree symbol you can hold alt then\ntype 0176 for a degree symbol now this\nis normally in kelvin actually I don't\nthink Kelvin uses the degree symbol but\nwe'll be changing that\nmomentarily take our temperature\ndisplay access its class list add the\nfollowing class add the CSS class class\nof temp\ndisplay then we have to append the\nelement to the card element take our\ncard we will append a child element of\ntemperature\ndisplay so now we should see the\ntemperature but it's going to be in\nkelvin we have the city and the\ntemperature for the temperature if you\nwould like Celsius let's use deg\nCI you have to subtract from the\ntemperature 200\n17315 okay but now we should probably\nround it so let's enclose this equation\nwith a set of parentheses follow this\nwith the two fixed method of numbers to\nround it to one decimal\nplace 15.6 de C if you would like a\nFahrenheit temperature this is the\nformula take our temp in Kelvin minus\n273.15 we will multiply this by 9 / 5\nplus\n32 so let's enclose this all within a\nset of\nparentheses so now we should get that\ntemperature but in Fahrenheit oh and\nthen add F to the\nend 60° F then we'll get the humidity so\ntake our humidity display element that\nwe created access the text content set\nit equal to be a template string using a\npair of back ticks let's add the word\nhumidity coin space add a placeholder\ndisplay our humidity\nvariable We'll add the class list of\nhumidity\ndisplay humidity display access its\nclass list add the following class of\nhumidity\ndisplay then we have to append the\nelement to the card element card. append\nchild append our humidity\ndisplay so we should get the\nhumidity Miami 60° fhe humidity 81 let's\nadd\npercent\n81% yep that does work then we'll add\nthe description a description of the\nweather take the element of description\ndisplay access the text content\nequals the\ndescription then add the CSS class to\nthe class list for this element\ndescription display access the class\nlist add the following\nclass of description\ndisplay then add the element card.\nappend child we will append our\ndescription\ndisplay let's type in Miami get the\nweather currently in Miami there's\novercast clouds now we have to get an\nemoji based on the weather with our\nelement of weather Emoji we will access\nthe text content equals we will call the\nget weather Emoji function but we have\nto pass in a weather\nID so we will pass in the ID\nvariable that we receive from\ndata once we get our weather\nEmoji we'll work on that momentarily\nwe'll take our element of weather Emoji\naccess the class list add the following\nCSS\nclass of weather\nEmoji then append it to the card card.\nappend child we will append our weather\nEmoji all right now before we canest it\nwe need to fill in the get weather emoi\nfunction so with this open Weather AI\nthere are different group codes so our\nweather ID is going to be either within\nthe 200 range meaning a thunderstorm the\n300 range means drizzle 500 is rain 600\nis snow 700 is atmosphere such as Mist\nsmoke or even a tornado 800 exactly is a\nclear sky anything greater than 800\nmeans\nclouds so our weather ID is going to be\none of these codes so we're going to use\na\nswitch we will examine the Boolean value\nof true does the value of true match one\nof these cases we'll have a case for\ngroup 200 if our weather ID that we pass\nin is greater than or equal to 200\n00 and the weather\nID is less than\n300 that means there's a\nthunderstorm we will return an\nemoji a thunderstorm\nEmoji\nthunderstorm I don't like the look at\nthat\none that's\nbetter okay group 300 is a drizzle\nso let's copy this case because I don't\nfeel like retyping\nit if our weather ID is greater than or\nequal to 300 and less than 400 that\nmeans we have a\ndrizzle we'll just add an emoji of a\nraining\nCloud so group 500 is also rain but it's\na heavier\nrain so let's copy this case paste\nit if our weather is greater than or\nequal to\n500 and less than 600 will return rain\nas well group 600 is\nsnow if our weather ID is greater than\nor equal to 600 and less than\n700 we will return a snowflake meaning\nsnow then we have group\n700\nif our weather ID is greater than or\nequal to\n700 and less than\n800 we'll return some fog\nEmoji 800 exactly means a clear sky we\ncan display the\nsun if our weather ID is strictly equal\nto 800\nexactly\nwe'll return a sun emoji anything within\nthe 800 range means\nclouds so if our weather\nID is greater than or equal to 801 800\nmeans clear\nsky so with this group code it only goes\nup to\n809 if our weather ID is less than 810\nreturn a\ncloud then let's add a default in case\nwe get a weird weather\ncode\ndefault\nreturn I don't know a question\nmark we get some unknown weather\nphenomena UFOs or something I don't know\nokay and I think that should be\neverything let's close out of this close\nout of these\nfunctions and now if I were to type in\nMiami and get the weather in Miami it is\n60.3 De F humidity 81% there's overcast\nclouds and we get a cloud Emoji because\nit's cloudy let's try\nDallas we have a clear sky 45° fah\nhumidity\n63% clear sky and we get a sun emoji all\nright everybody so that is a weather app\nthat you can make using Java JavaScript\nHTML and\nCSS\n",
  "words": [
    "hey",
    "everybody",
    "today",
    "decided",
    "going",
    "teach",
    "everything",
    "need",
    "know",
    "get",
    "started",
    "working",
    "javascript",
    "throughout",
    "course",
    "working",
    "projects",
    "could",
    "add",
    "portfolio",
    "include",
    "limited",
    "digital",
    "clock",
    "stopwatch",
    "functioning",
    "calculator",
    "game",
    "rock",
    "paper",
    "scissors",
    "image",
    "slider",
    "final",
    "project",
    "weather",
    "app",
    "fetches",
    "data",
    "api",
    "sounds",
    "good",
    "encourage",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "hey",
    "mind",
    "please",
    "give",
    "video",
    "like",
    "post",
    "random",
    "comment",
    "subscribe",
    "like",
    "fellow",
    "bro",
    "cost",
    "anything",
    "thank",
    "javascript",
    "programming",
    "language",
    "used",
    "create",
    "dynamic",
    "interactive",
    "web",
    "pages",
    "javascript",
    "runs",
    "web",
    "browser",
    "google",
    "chrome",
    "safari",
    "edge",
    "whatever",
    "use",
    "browse",
    "internet",
    "basically",
    "using",
    "javascript",
    "respond",
    "user",
    "actions",
    "transform",
    "user",
    "input",
    "whenever",
    "somebody",
    "interacts",
    "site",
    "example",
    "calculator",
    "written",
    "html",
    "pretty",
    "function",
    "framework",
    "need",
    "least",
    "though",
    "applying",
    "css",
    "add",
    "color",
    "style",
    "calculator",
    "unfortunately",
    "still",
    "function",
    "including",
    "javascript",
    "code",
    "calculator",
    "perform",
    "actions",
    "well",
    "useful",
    "video",
    "going",
    "show",
    "everything",
    "need",
    "know",
    "get",
    "started",
    "working",
    "javascript",
    "would",
    "recommend",
    "knowing",
    "html",
    "css",
    "starting",
    "series",
    "full",
    "free",
    "course",
    "channel",
    "interested",
    "learning",
    "need",
    "refresher",
    "know",
    "either",
    "could",
    "probably",
    "still",
    "get",
    "watching",
    "video",
    "walk",
    "go",
    "along",
    "throughout",
    "series",
    "begin",
    "need",
    "text",
    "editor",
    "one",
    "text",
    "editor",
    "recommend",
    "vss",
    "code",
    "download",
    "code",
    "visual",
    "instruction",
    "install",
    "feel",
    "free",
    "check",
    "html",
    "css",
    "series",
    "way",
    "let",
    "dive",
    "right",
    "need",
    "create",
    "new",
    "project",
    "folder",
    "vs",
    "code",
    "go",
    "left",
    "toolbar",
    "go",
    "explore",
    "open",
    "folder",
    "place",
    "folder",
    "desktop",
    "convenience",
    "create",
    "new",
    "folder",
    "name",
    "website",
    "contain",
    "website",
    "files",
    "let",
    "select",
    "folder",
    "within",
    "website",
    "folder",
    "need",
    "three",
    "files",
    "html",
    "file",
    "css",
    "file",
    "javascript",
    "file",
    "begin",
    "html",
    "file",
    "close",
    "welcome",
    "window",
    "name",
    "html",
    "file",
    "website",
    "file",
    "typically",
    "used",
    "homepage",
    "html",
    "file",
    "next",
    "comes",
    "css",
    "file",
    "mine",
    "named",
    "css",
    "stylesheet",
    "charge",
    "overall",
    "appearance",
    "web",
    "page",
    "include",
    "fonts",
    "colors",
    "positioning",
    "stuff",
    "like",
    "lastly",
    "javascript",
    "file",
    "name",
    "javascript",
    "file",
    "charge",
    "interactivity",
    "web",
    "page",
    "alt",
    "together",
    "structure",
    "style",
    "actions",
    "rearrange",
    "tabs",
    "however",
    "like",
    "switch",
    "back",
    "forth",
    "javascript",
    "html",
    "file",
    "quite",
    "often",
    "tend",
    "put",
    "right",
    "next",
    "whatever",
    "convenient",
    "generate",
    "necessary",
    "text",
    "create",
    "web",
    "page",
    "html",
    "file",
    "vs",
    "code",
    "type",
    "exclamation",
    "point",
    "hit",
    "tab",
    "change",
    "title",
    "web",
    "page",
    "want",
    "change",
    "title",
    "website",
    "need",
    "need",
    "link",
    "stylesheet",
    "html",
    "file",
    "going",
    "create",
    "link",
    "tag",
    "link",
    "external",
    "stylesheet",
    "html",
    "file",
    "within",
    "link",
    "tag",
    "relationship",
    "attribute",
    "shortened",
    "relationship",
    "ship",
    "stylesheet",
    "linking",
    "stylesheet",
    "next",
    "attribute",
    "need",
    "hre",
    "attribute",
    "css",
    "file",
    "located",
    "well",
    "right",
    "next",
    "need",
    "file",
    "name",
    "linking",
    "css",
    "styles",
    "sheet",
    "css",
    "stylesheet",
    "linked",
    "html",
    "file",
    "need",
    "link",
    "javascript",
    "file",
    "html",
    "file",
    "adding",
    "pair",
    "script",
    "tags",
    "set",
    "source",
    "attribute",
    "name",
    "javascript",
    "file",
    "right",
    "everything",
    "linked",
    "together",
    "last",
    "thing",
    "need",
    "live",
    "server",
    "extension",
    "vss",
    "code",
    "go",
    "extensions",
    "search",
    "live",
    "server",
    "one",
    "going",
    "install",
    "extension",
    "whenever",
    "save",
    "changes",
    "files",
    "web",
    "page",
    "refresh",
    "automatically",
    "let",
    "test",
    "go",
    "file",
    "save",
    "use",
    "shortcut",
    "going",
    "save",
    "everything",
    "going",
    "rightclick",
    "html",
    "file",
    "open",
    "live",
    "server",
    "web",
    "page",
    "currently",
    "anything",
    "uh",
    "let",
    "minimize",
    "readjust",
    "window",
    "throughout",
    "course",
    "vss",
    "code",
    "alongside",
    "web",
    "browser",
    "html",
    "file",
    "add",
    "elements",
    "h1",
    "element",
    "typically",
    "used",
    "headers",
    "going",
    "say",
    "hello",
    "save",
    "update",
    "automatically",
    "press",
    "refresh",
    "button",
    "since",
    "live",
    "server",
    "installed",
    "need",
    "paragraphs",
    "typically",
    "used",
    "paragraph",
    "text",
    "vs",
    "code",
    "generate",
    "random",
    "paragraph",
    "text",
    "type",
    "lauram",
    "hit",
    "tab",
    "random",
    "paragraph",
    "believe",
    "latin",
    "least",
    "looks",
    "like",
    "change",
    "style",
    "web",
    "page",
    "go",
    "stylesheet",
    "change",
    "style",
    "body",
    "document",
    "select",
    "body",
    "change",
    "font",
    "family",
    "something",
    "else",
    "font",
    "family",
    "verdana",
    "different",
    "font",
    "increase",
    "font",
    "size",
    "set",
    "font",
    "size",
    "property",
    "either",
    "pixels",
    "em",
    "personally",
    "fan",
    "using",
    "em",
    "2",
    "em",
    "means",
    "200",
    "3",
    "em",
    "300",
    "little",
    "big",
    "let",
    "stick",
    "2",
    "em",
    "right",
    "everything",
    "need",
    "get",
    "started",
    "oh",
    "important",
    "note",
    "want",
    "script",
    "element",
    "bottom",
    "body",
    "document",
    "case",
    "error",
    "javascript",
    "file",
    "want",
    "html",
    "elements",
    "least",
    "render",
    "first",
    "running",
    "javascript",
    "code",
    "right",
    "let",
    "delete",
    "h1",
    "elements",
    "paragraph",
    "element",
    "longer",
    "need",
    "sure",
    "save",
    "everything",
    "work",
    "basic",
    "output",
    "going",
    "zoom",
    "little",
    "bit",
    "output",
    "text",
    "type",
    "add",
    "set",
    "parenthesis",
    "semicolon",
    "end",
    "within",
    "set",
    "parentheses",
    "output",
    "text",
    "either",
    "use",
    "double",
    "quotes",
    "single",
    "quotes",
    "back",
    "ticks",
    "personally",
    "fan",
    "using",
    "back",
    "ticks",
    "known",
    "template",
    "literal",
    "helpful",
    "inserting",
    "variables",
    "discuss",
    "next",
    "lesson",
    "using",
    "either",
    "double",
    "quotes",
    "single",
    "quotes",
    "back",
    "ticks",
    "output",
    "text",
    "let",
    "say",
    "word",
    "hello",
    "sure",
    "save",
    "holding",
    "contrl",
    "windows",
    "apparent",
    "output",
    "go",
    "dev",
    "tools",
    "right",
    "click",
    "web",
    "page",
    "go",
    "inspect",
    "console",
    "basic",
    "output",
    "hello",
    "additional",
    "line",
    "output",
    "let",
    "print",
    "print",
    "different",
    "message",
    "like",
    "pizza",
    "let",
    "save",
    "second",
    "line",
    "text",
    "like",
    "pizza",
    "going",
    "move",
    "windows",
    "little",
    "bit",
    "better",
    "throughout",
    "much",
    "series",
    "working",
    "window",
    "right",
    "click",
    "web",
    "page",
    "go",
    "inspect",
    "go",
    "console",
    "within",
    "web",
    "page",
    "create",
    "alert",
    "box",
    "type",
    "window",
    "alert",
    "set",
    "parentheses",
    "semicolon",
    "end",
    "use",
    "template",
    "literal",
    "need",
    "set",
    "back",
    "ticks",
    "alert",
    "create",
    "window",
    "alert",
    "let",
    "create",
    "another",
    "let",
    "copy",
    "paste",
    "like",
    "pizza",
    "let",
    "save",
    "alert",
    "okay",
    "like",
    "pizza",
    "sure",
    "need",
    "tell",
    "user",
    "comments",
    "create",
    "comment",
    "type",
    "two",
    "forward",
    "slashes",
    "comments",
    "used",
    "output",
    "used",
    "notes",
    "developers",
    "comment",
    "run",
    "program",
    "go",
    "dev",
    "tools",
    "see",
    "comment",
    "displayed",
    "output",
    "either",
    "used",
    "notes",
    "people",
    "comment",
    "type",
    "slash",
    "asterisk",
    "anything",
    "comes",
    "comment",
    "comment",
    "see",
    "text",
    "green",
    "means",
    "comment",
    "able",
    "see",
    "comments",
    "hidden",
    "going",
    "turn",
    "javascript",
    "code",
    "comments",
    "next",
    "part",
    "window",
    "alerts",
    "kind",
    "annoying",
    "honest",
    "right",
    "going",
    "populate",
    "web",
    "page",
    "page",
    "text",
    "within",
    "html",
    "file",
    "create",
    "h1",
    "element",
    "h1s",
    "usually",
    "used",
    "headers",
    "titles",
    "text",
    "content",
    "yet",
    "set",
    "id",
    "give",
    "h1",
    "element",
    "unique",
    "id",
    "h1",
    "feel",
    "free",
    "pick",
    "different",
    "id",
    "something",
    "remember",
    "also",
    "create",
    "paragraph",
    "element",
    "set",
    "id",
    "equal",
    "p",
    "meaning",
    "paragraph",
    "remember",
    "text",
    "content",
    "currently",
    "using",
    "javascript",
    "add",
    "text",
    "content",
    "first",
    "need",
    "select",
    "elements",
    "id",
    "h1",
    "p",
    "uh",
    "let",
    "type",
    "document",
    "meaning",
    "document",
    "web",
    "page",
    "get",
    "element",
    "id",
    "pay",
    "attention",
    "capitalization",
    "id",
    "getting",
    "let",
    "start",
    "h1",
    "copy",
    "id",
    "paste",
    "within",
    "set",
    "parentheses",
    "sure",
    "including",
    "quotes",
    "well",
    "follow",
    "dot",
    "text",
    "content",
    "set",
    "equal",
    "word",
    "hello",
    "let",
    "zoom",
    "little",
    "back",
    "ticks",
    "single",
    "quotes",
    "double",
    "quotes",
    "right",
    "let",
    "type",
    "word",
    "hello",
    "save",
    "refresh",
    "page",
    "h1",
    "element",
    "display",
    "word",
    "hello",
    "time",
    "let",
    "get",
    "paragraph",
    "element",
    "id",
    "p",
    "paragraph",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "getting",
    "p",
    "change",
    "text",
    "content",
    "equal",
    "uh",
    "say",
    "like",
    "pizza",
    "go",
    "hello",
    "like",
    "pizza",
    "right",
    "everybody",
    "basics",
    "javascript",
    "working",
    "basic",
    "output",
    "use",
    "using",
    "lot",
    "create",
    "alert",
    "use",
    "window",
    "alert",
    "change",
    "text",
    "content",
    "html",
    "element",
    "first",
    "select",
    "element",
    "change",
    "text",
    "content",
    "set",
    "equal",
    "text",
    "choosing",
    "right",
    "everybody",
    "basics",
    "javascript",
    "next",
    "topic",
    "cover",
    "variables",
    "right",
    "well",
    "time",
    "discuss",
    "variables",
    "remember",
    "middle",
    "school",
    "elementary",
    "school",
    "learned",
    "algebra",
    "solve",
    "value",
    "x",
    "x",
    "representation",
    "value",
    "well",
    "kind",
    "variable",
    "programming",
    "container",
    "stores",
    "value",
    "variable",
    "behaves",
    "value",
    "contains",
    "two",
    "steps",
    "creating",
    "variable",
    "declaration",
    "assignment",
    "use",
    "variable",
    "first",
    "declare",
    "use",
    "let",
    "keyword",
    "unique",
    "variable",
    "name",
    "like",
    "x",
    "semicolon",
    "done",
    "declaration",
    "variable",
    "name",
    "needs",
    "unique",
    "declare",
    "another",
    "variable",
    "named",
    "x",
    "would",
    "run",
    "error",
    "syntax",
    "error",
    "identifier",
    "x",
    "already",
    "declared",
    "variable",
    "names",
    "need",
    "unique",
    "declare",
    "two",
    "variables",
    "x",
    "different",
    "names",
    "fine",
    "ca",
    "name",
    "next",
    "step",
    "create",
    "variable",
    "assign",
    "value",
    "declare",
    "variable",
    "need",
    "declare",
    "going",
    "assign",
    "x",
    "equal",
    "number",
    "like",
    "100",
    "use",
    "variable",
    "x",
    "behave",
    "value",
    "100",
    "let",
    "demonstrate",
    "x",
    "well",
    "going",
    "display",
    "100",
    "change",
    "value",
    "123",
    "well",
    "x",
    "123",
    "declaration",
    "assignment",
    "together",
    "would",
    "look",
    "something",
    "like",
    "let",
    "x",
    "equal",
    "123",
    "declaration",
    "assignment",
    "creating",
    "program",
    "know",
    "value",
    "assign",
    "value",
    "right",
    "away",
    "sometimes",
    "may",
    "want",
    "accept",
    "user",
    "input",
    "might",
    "assignment",
    "later",
    "two",
    "steps",
    "really",
    "write",
    "program",
    "different",
    "data",
    "types",
    "javascript",
    "first",
    "number",
    "like",
    "123",
    "let",
    "create",
    "descriptive",
    "name",
    "variable",
    "like",
    "age",
    "store",
    "user",
    "age",
    "according",
    "analytics",
    "youtube",
    "average",
    "age",
    "viewers",
    "25",
    "let",
    "say",
    "age",
    "25",
    "age",
    "variable",
    "would",
    "behave",
    "number",
    "25",
    "let",
    "create",
    "variables",
    "another",
    "example",
    "number",
    "could",
    "price",
    "let",
    "price",
    "equal",
    "10",
    "maybe",
    "unit",
    "currency",
    "choosing",
    "price",
    "gpa",
    "grade",
    "point",
    "average",
    "grade",
    "point",
    "average",
    "solid",
    "great",
    "c",
    "get",
    "degrees",
    "gpa",
    "using",
    "template",
    "literal",
    "insert",
    "variable",
    "using",
    "placeholder",
    "within",
    "use",
    "back",
    "ticks",
    "let",
    "write",
    "sentence",
    "insert",
    "variable",
    "use",
    "dollar",
    "sign",
    "curly",
    "braces",
    "place",
    "variable",
    "name",
    "within",
    "curly",
    "braces",
    "continue",
    "sentence",
    "variable",
    "age",
    "years",
    "old",
    "let",
    "create",
    "another",
    "sentence",
    "using",
    "price",
    "dollar",
    "sign",
    "curly",
    "braces",
    "price",
    "price",
    "going",
    "insert",
    "dollar",
    "sign",
    "price",
    "looks",
    "better",
    "feel",
    "free",
    "choose",
    "unit",
    "currency",
    "okay",
    "let",
    "add",
    "sentence",
    "display",
    "gpa",
    "gpa",
    "colon",
    "space",
    "inserting",
    "variable",
    "need",
    "dollar",
    "sign",
    "curly",
    "braces",
    "displaying",
    "gpa",
    "gpa",
    "need",
    "display",
    "data",
    "type",
    "variable",
    "use",
    "preedee",
    "variable",
    "type",
    "keyword",
    "type",
    "age",
    "age",
    "number",
    "type",
    "price",
    "also",
    "number",
    "type",
    "thing",
    "gpa",
    "numbers",
    "let",
    "go",
    "different",
    "data",
    "type",
    "let",
    "go",
    "strings",
    "string",
    "series",
    "characters",
    "let",
    "say",
    "user",
    "first",
    "name",
    "create",
    "string",
    "either",
    "use",
    "double",
    "quotes",
    "single",
    "quotes",
    "personally",
    "like",
    "double",
    "quotes",
    "type",
    "characters",
    "like",
    "first",
    "name",
    "let",
    "say",
    "first",
    "name",
    "bro",
    "feel",
    "free",
    "pick",
    "first",
    "name",
    "display",
    "type",
    "first",
    "name",
    "variable",
    "says",
    "string",
    "series",
    "characters",
    "display",
    "name",
    "first",
    "name",
    "bro",
    "whatever",
    "first",
    "name",
    "whatever",
    "put",
    "let",
    "include",
    "variable",
    "within",
    "template",
    "literal",
    "name",
    "add",
    "placeholder",
    "first",
    "name",
    "name",
    "bro",
    "examples",
    "string",
    "maybe",
    "somebody",
    "favorite",
    "food",
    "favorite",
    "food",
    "favorite",
    "food",
    "pizza",
    "type",
    "favorite",
    "food",
    "like",
    "placeholder",
    "favorite",
    "food",
    "like",
    "pizza",
    "maybe",
    "like",
    "something",
    "else",
    "like",
    "sushi",
    "well",
    "like",
    "sushi",
    "okay",
    "another",
    "example",
    "string",
    "could",
    "email",
    "let",
    "email",
    "equals",
    "type",
    "email",
    "going",
    "make",
    "one",
    "bro",
    "email",
    "email",
    "email",
    "bro",
    "let",
    "make",
    "g",
    "lowercase",
    "important",
    "thing",
    "strings",
    "strings",
    "contain",
    "numbers",
    "bro",
    "add",
    "1",
    "two",
    "3",
    "string",
    "series",
    "characters",
    "include",
    "numbers",
    "ca",
    "use",
    "numbers",
    "sort",
    "math",
    "strings",
    "different",
    "behavior",
    "numbers",
    "numbers",
    "use",
    "arithmetic",
    "expressions",
    "strings",
    "much",
    "right",
    "let",
    "turn",
    "lines",
    "comment",
    "discuss",
    "booleans",
    "okay",
    "booleans",
    "either",
    "true",
    "false",
    "typically",
    "used",
    "flags",
    "program",
    "let",
    "online",
    "equal",
    "true",
    "booleans",
    "either",
    "true",
    "false",
    "somebody",
    "online",
    "offline",
    "either",
    "true",
    "false",
    "display",
    "type",
    "variable",
    "online",
    "type",
    "online",
    "online",
    "boolean",
    "variable",
    "let",
    "display",
    "variable",
    "within",
    "template",
    "literal",
    "type",
    "whatever",
    "first",
    "name",
    "bro",
    "online",
    "insert",
    "placeholder",
    "add",
    "boolean",
    "variable",
    "online",
    "bro",
    "online",
    "true",
    "change",
    "false",
    "bro",
    "online",
    "false",
    "booleans",
    "typically",
    "used",
    "sort",
    "flag",
    "another",
    "example",
    "could",
    "sale",
    "something",
    "sale",
    "let",
    "say",
    "selling",
    "know",
    "cars",
    "car",
    "sale",
    "could",
    "set",
    "true",
    "false",
    "let",
    "car",
    "sale",
    "add",
    "boolean",
    "variable",
    "sale",
    "car",
    "sale",
    "true",
    "another",
    "example",
    "let",
    "say",
    "somebody",
    "enrolled",
    "school",
    "like",
    "college",
    "courses",
    "could",
    "say",
    "let",
    "student",
    "somebody",
    "student",
    "enrolled",
    "true",
    "false",
    "enrolled",
    "colon",
    "space",
    "student",
    "student",
    "enrolled",
    "classes",
    "true",
    "booleans",
    "either",
    "true",
    "false",
    "typically",
    "use",
    "direct",
    "output",
    "like",
    "see",
    "usually",
    "use",
    "statements",
    "check",
    "something",
    "like",
    "somebody",
    "online",
    "something",
    "else",
    "car",
    "sale",
    "true",
    "display",
    "car",
    "hide",
    "practice",
    "booleans",
    "reach",
    "statements",
    "right",
    "going",
    "close",
    "dev",
    "tools",
    "display",
    "variables",
    "within",
    "web",
    "page",
    "let",
    "delete",
    "everything",
    "create",
    "three",
    "variables",
    "let",
    "full",
    "name",
    "equals",
    "type",
    "full",
    "name",
    "feel",
    "free",
    "add",
    "space",
    "first",
    "name",
    "last",
    "name",
    "let",
    "age",
    "type",
    "age",
    "let",
    "student",
    "equals",
    "student",
    "type",
    "true",
    "school",
    "type",
    "false",
    "school",
    "anymore",
    "type",
    "false",
    "go",
    "html",
    "file",
    "add",
    "html",
    "elements",
    "add",
    "three",
    "paragraph",
    "elements",
    "one",
    "2",
    "3",
    "give",
    "first",
    "paragraph",
    "id",
    "p1",
    "let",
    "two",
    "paragraphs",
    "let",
    "rename",
    "second",
    "p2",
    "third",
    "p3",
    "change",
    "text",
    "content",
    "html",
    "element",
    "going",
    "type",
    "document",
    "meaning",
    "document",
    "web",
    "page",
    "get",
    "element",
    "id",
    "get",
    "element",
    "id",
    "within",
    "set",
    "parentheses",
    "within",
    "set",
    "quotes",
    "select",
    "id",
    "need",
    "let",
    "start",
    "p1",
    "add",
    "text",
    "content",
    "change",
    "text",
    "content",
    "set",
    "equal",
    "variable",
    "template",
    "literal",
    "let",
    "begin",
    "variable",
    "full",
    "name",
    "p1",
    "element",
    "display",
    "full",
    "name",
    "let",
    "p2",
    "going",
    "zoom",
    "little",
    "bit",
    "p2",
    "textcontent",
    "equals",
    "age",
    "says",
    "25",
    "p3",
    "let",
    "display",
    "student",
    "better",
    "yet",
    "student",
    "let",
    "change",
    "student",
    "false",
    "student",
    "might",
    "though",
    "might",
    "true",
    "let",
    "display",
    "variables",
    "along",
    "text",
    "using",
    "template",
    "literal",
    "let",
    "copy",
    "full",
    "name",
    "name",
    "add",
    "placeholder",
    "place",
    "variable",
    "name",
    "name",
    "bro",
    "code",
    "whatever",
    "name",
    "let",
    "cut",
    "age",
    "variable",
    "variable",
    "age",
    "years",
    "old",
    "25",
    "years",
    "old",
    "let",
    "cut",
    "student",
    "add",
    "template",
    "literal",
    "let",
    "say",
    "enrolled",
    "enrolled",
    "school",
    "add",
    "placeholder",
    "paste",
    "variable",
    "enrolled",
    "false",
    "school",
    "anymore",
    "right",
    "everybody",
    "variables",
    "container",
    "stores",
    "value",
    "variable",
    "behaves",
    "value",
    "contains",
    "couple",
    "different",
    "basic",
    "data",
    "types",
    "strings",
    "series",
    "text",
    "numbers",
    "booleans",
    "advanced",
    "data",
    "types",
    "cover",
    "later",
    "well",
    "variables",
    "javascript",
    "yeah",
    "going",
    "everybody",
    "today",
    "need",
    "explain",
    "arithmetic",
    "operators",
    "well",
    "programming",
    "sometimes",
    "involve",
    "lot",
    "operand",
    "values",
    "variables",
    "etc",
    "equation",
    "11",
    "x",
    "5",
    "operand",
    "operators",
    "include",
    "limited",
    "addition",
    "subtraction",
    "multiplication",
    "division",
    "equation",
    "addition",
    "sign",
    "would",
    "operator",
    "things",
    "know",
    "regarding",
    "arithmetic",
    "operators",
    "javascript",
    "let",
    "begin",
    "let",
    "pretend",
    "scenario",
    "teacher",
    "group",
    "students",
    "let",
    "students",
    "equals",
    "good",
    "class",
    "size",
    "maybe",
    "30",
    "students",
    "students",
    "variable",
    "30",
    "let",
    "say",
    "new",
    "student",
    "joins",
    "class",
    "need",
    "change",
    "variable",
    "increase",
    "students",
    "one",
    "say",
    "students",
    "equals",
    "reassign",
    "variable",
    "equals",
    "current",
    "value",
    "students",
    "1",
    "31",
    "students",
    "subtraction",
    "minus",
    "sign",
    "subtract",
    "student",
    "reassign",
    "variable",
    "students",
    "equals",
    "students",
    "minus",
    "one",
    "29",
    "multiplication",
    "represented",
    "asterisk",
    "double",
    "number",
    "students",
    "students",
    "equals",
    "students",
    "risk",
    "2",
    "multiply",
    "two",
    "6",
    "students",
    "division",
    "forward",
    "slash",
    "split",
    "class",
    "students",
    "two",
    "students",
    "divided",
    "two",
    "15",
    "right",
    "exponents",
    "exponents",
    "represented",
    "double",
    "asterisks",
    "students",
    "power",
    "two",
    "900",
    "students",
    "large",
    "class",
    "maybe",
    "lecture",
    "something",
    "college",
    "students",
    "power",
    "three",
    "would",
    "students",
    "power",
    "three",
    "would",
    "double",
    "asterisks",
    "exponent",
    "operator",
    "another",
    "helpful",
    "one",
    "modulus",
    "operator",
    "gives",
    "remainder",
    "division",
    "let",
    "say",
    "going",
    "divide",
    "class",
    "two",
    "modulus",
    "represented",
    "percent",
    "sign",
    "two",
    "well",
    "30",
    "divides",
    "two",
    "evenly",
    "remainder",
    "zero",
    "class",
    "31",
    "students",
    "well",
    "one",
    "remainder",
    "one",
    "student",
    "students",
    "modulus",
    "3",
    "would",
    "divide",
    "class",
    "31",
    "students",
    "three",
    "would",
    "still",
    "one",
    "student",
    "remaining",
    "since",
    "reassigning",
    "students",
    "would",
    "replacing",
    "31",
    "students",
    "value",
    "one",
    "using",
    "modulus",
    "operator",
    "would",
    "recommend",
    "creating",
    "separate",
    "variable",
    "entit",
    "ly",
    "let",
    "extra",
    "students",
    "equal",
    "students",
    "modulus",
    "3",
    "one",
    "extra",
    "student",
    "one",
    "okay",
    "modulus",
    "operator",
    "shortcut",
    "writing",
    "expressions",
    "kind",
    "tedious",
    "write",
    "variable",
    "name",
    "twice",
    "let",
    "set",
    "students",
    "back",
    "30",
    "students",
    "use",
    "known",
    "augmented",
    "assignment",
    "operators",
    "increase",
    "students",
    "number",
    "reassigning",
    "say",
    "students",
    "plus",
    "equals",
    "1",
    "number",
    "students",
    "31",
    "change",
    "one",
    "be2",
    "32",
    "33",
    "let",
    "thing",
    "subtraction",
    "students",
    "minus",
    "equals",
    "1",
    "29",
    "students",
    "multiplication",
    "students",
    "times",
    "equals",
    "2",
    "would",
    "give",
    "us",
    "60",
    "students",
    "students",
    "divided",
    "equals",
    "2",
    "15",
    "students",
    "right",
    "exponents",
    "students",
    "power",
    "equals",
    "2",
    "900",
    "students",
    "modulus",
    "students",
    "modulus",
    "equals",
    "2",
    "remaining",
    "students",
    "30",
    "divides",
    "2",
    "evenly",
    "another",
    "place",
    "modulus",
    "could",
    "helpful",
    "determining",
    "number",
    "even",
    "odd",
    "30",
    "even",
    "number",
    "divided",
    "two",
    "remainder",
    "zero",
    "31",
    "odd",
    "remainder",
    "one",
    "also",
    "increment",
    "decrement",
    "operator",
    "couple",
    "different",
    "ways",
    "add",
    "one",
    "variable",
    "aware",
    "increase",
    "variable",
    "one",
    "take",
    "name",
    "variable",
    "add",
    "increment",
    "operator",
    "30",
    "incremented",
    "1",
    "31",
    "decrement",
    "operator",
    "minus",
    "minus",
    "30",
    "decremented",
    "1",
    "29",
    "right",
    "lastly",
    "going",
    "cover",
    "operator",
    "precedence",
    "pretty",
    "important",
    "given",
    "complex",
    "equation",
    "example",
    "order",
    "solve",
    "part",
    "equation",
    "operator",
    "precedence",
    "beginning",
    "left",
    "working",
    "way",
    "right",
    "would",
    "solve",
    "anything",
    "parentheses",
    "exponents",
    "multiplication",
    "division",
    "modulo",
    "otherwise",
    "known",
    "modulus",
    "lastly",
    "addition",
    "subtraction",
    "let",
    "go",
    "step",
    "step",
    "let",
    "see",
    "result",
    "variable",
    "result",
    "result",
    "23",
    "walk",
    "step",
    "step",
    "let",
    "solve",
    "anything",
    "parentheses",
    "es",
    "starting",
    "left",
    "working",
    "way",
    "right",
    "parentheses",
    "skip",
    "step",
    "next",
    "exponents",
    "one",
    "exponent",
    "would",
    "solve",
    "4",
    "2",
    "16",
    "solve",
    "multiplication",
    "division",
    "modulus",
    "addition",
    "skip",
    "multiplication",
    "2",
    "3",
    "6",
    "multiplication",
    "division",
    "modulus",
    "lastly",
    "addition",
    "subtraction",
    "1",
    "6",
    "7",
    "7",
    "16",
    "result",
    "23",
    "right",
    "give",
    "exercises",
    "equation",
    "result",
    "going",
    "six",
    "parenthesis",
    "exponents",
    "modulus",
    "operator",
    "solve",
    "first",
    "12",
    "modulus",
    "5",
    "gives",
    "us",
    "remainder",
    "two",
    "division",
    "would",
    "solve",
    "next",
    "8",
    "divid",
    "2",
    "four",
    "addition",
    "subtraction",
    "result",
    "six",
    "right",
    "challenge",
    "round",
    "result",
    "going",
    "0468",
    "solve",
    "anything",
    "parenthesis",
    "first",
    "2",
    "5",
    "7",
    "exponents",
    "2",
    "7",
    "might",
    "need",
    "calculator",
    "2",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "128",
    "6",
    "128",
    "6",
    "128",
    "046",
    "875",
    "result",
    "right",
    "everybody",
    "everything",
    "need",
    "know",
    "arithmetic",
    "operators",
    "operand",
    "values",
    "variables",
    "arithmetic",
    "expression",
    "operators",
    "also",
    "augmented",
    "assignment",
    "operators",
    "shortcut",
    "writing",
    "equations",
    "going",
    "reassign",
    "variable",
    "increment",
    "decrement",
    "operators",
    "increase",
    "variable",
    "one",
    "decrease",
    "one",
    "operator",
    "precedence",
    "solving",
    "complex",
    "equation",
    "solve",
    "part",
    "equation",
    "following",
    "order",
    "well",
    "everything",
    "need",
    "know",
    "regarding",
    "arithmetic",
    "operators",
    "javascript",
    "yeah",
    "going",
    "people",
    "uh",
    "today",
    "going",
    "show",
    "accept",
    "user",
    "input",
    "javascript",
    "generally",
    "two",
    "good",
    "ways",
    "easy",
    "way",
    "create",
    "window",
    "prompt",
    "professional",
    "way",
    "create",
    "html",
    "text",
    "box",
    "sort",
    "likely",
    "need",
    "button",
    "submit",
    "user",
    "input",
    "let",
    "begin",
    "easy",
    "way",
    "create",
    "window",
    "prompt",
    "first",
    "thing",
    "declare",
    "variables",
    "going",
    "use",
    "let",
    "create",
    "variable",
    "named",
    "username",
    "declare",
    "yet",
    "assign",
    "assign",
    "set",
    "username",
    "equal",
    "create",
    "window",
    "prompt",
    "type",
    "window",
    "prompt",
    "parentheses",
    "within",
    "parentheses",
    "window",
    "prompt",
    "contain",
    "text",
    "let",
    "ask",
    "username",
    "okay",
    "let",
    "run",
    "see",
    "happens",
    "username",
    "type",
    "username",
    "press",
    "okay",
    "variable",
    "username",
    "value",
    "something",
    "let",
    "username",
    "let",
    "try",
    "username",
    "type",
    "username",
    "feel",
    "free",
    "type",
    "let",
    "check",
    "dev",
    "tools",
    "username",
    "easy",
    "way",
    "accept",
    "user",
    "input",
    "window",
    "prompt",
    "could",
    "assign",
    "declaration",
    "assignment",
    "together",
    "want",
    "know",
    "would",
    "also",
    "work",
    "accept",
    "user",
    "input",
    "prof",
    "profal",
    "way",
    "creating",
    "html",
    "text",
    "box",
    "navigate",
    "html",
    "file",
    "okay",
    "let",
    "create",
    "h1",
    "element",
    "says",
    "welcome",
    "need",
    "text",
    "box",
    "use",
    "input",
    "tag",
    "set",
    "id",
    "text",
    "box",
    "text",
    "create",
    "label",
    "text",
    "box",
    "user",
    "know",
    "supposed",
    "type",
    "create",
    "label",
    "text",
    "within",
    "label",
    "username",
    "submit",
    "button",
    "button",
    "text",
    "submit",
    "put",
    "new",
    "line",
    "add",
    "break",
    "tag",
    "maybe",
    "two",
    "make",
    "look",
    "nice",
    "id",
    "button",
    "set",
    "id",
    "submit",
    "let",
    "see",
    "works",
    "little",
    "advanced",
    "click",
    "button",
    "going",
    "execute",
    "function",
    "need",
    "select",
    "button",
    "access",
    "document",
    "web",
    "page",
    "get",
    "element",
    "id",
    "id",
    "getting",
    "id",
    "button",
    "submit",
    "within",
    "quotes",
    "type",
    "name",
    "id",
    "follow",
    "dot",
    "onclick",
    "equals",
    "write",
    "everything",
    "going",
    "clicking",
    "button",
    "need",
    "function",
    "function",
    "parenthesis",
    "curly",
    "braces",
    "everything",
    "set",
    "curly",
    "braces",
    "everything",
    "click",
    "button",
    "first",
    "need",
    "username",
    "variable",
    "outside",
    "function",
    "click",
    "button",
    "get",
    "text",
    "text",
    "box",
    "reassign",
    "username",
    "set",
    "equal",
    "text",
    "text",
    "box",
    "use",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "getting",
    "time",
    "text",
    "need",
    "value",
    "text",
    "box",
    "follow",
    "dot",
    "value",
    "right",
    "test",
    "let",
    "console",
    "log",
    "username",
    "right",
    "let",
    "type",
    "username",
    "press",
    "submit",
    "check",
    "dev",
    "tools",
    "yeah",
    "okay",
    "let",
    "replace",
    "change",
    "text",
    "content",
    "h1",
    "element",
    "give",
    "h1",
    "element",
    "unique",
    "id",
    "let",
    "say",
    "h1",
    "need",
    "select",
    "h1",
    "ele",
    "el",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "h1",
    "changing",
    "text",
    "content",
    "equal",
    "let",
    "use",
    "template",
    "literal",
    "hello",
    "username",
    "right",
    "let",
    "try",
    "type",
    "username",
    "press",
    "submit",
    "change",
    "h1",
    "element",
    "hello",
    "whatever",
    "name",
    "right",
    "everybody",
    "two",
    "different",
    "ways",
    "accept",
    "user",
    "input",
    "use",
    "window",
    "prompt",
    "use",
    "html",
    "text",
    "boox",
    "accept",
    "user",
    "input",
    "javascript",
    "right",
    "uh",
    "yeah",
    "type",
    "conversion",
    "type",
    "conversion",
    "process",
    "changing",
    "data",
    "type",
    "value",
    "another",
    "data",
    "type",
    "example",
    "convert",
    "strings",
    "numbers",
    "numbers",
    "booleans",
    "booleans",
    "strings",
    "numbers",
    "strings",
    "booleans",
    "numbers",
    "think",
    "get",
    "idea",
    "might",
    "want",
    "well",
    "accept",
    "user",
    "input",
    "data",
    "type",
    "input",
    "string",
    "need",
    "use",
    "sort",
    "math",
    "need",
    "convert",
    "number",
    "example",
    "let",
    "say",
    "variable",
    "age",
    "create",
    "window",
    "prompt",
    "window",
    "prompt",
    "ask",
    "user",
    "old",
    "going",
    "add",
    "one",
    "age",
    "age",
    "plus",
    "equals",
    "1",
    "age",
    "old",
    "let",
    "say",
    "25",
    "press",
    "okay",
    "let",
    "inspect",
    "page",
    "go",
    "console",
    "shows",
    "age",
    "251",
    "accept",
    "user",
    "input",
    "string",
    "data",
    "type",
    "series",
    "characters",
    "adding",
    "one",
    "appended",
    "one",
    "end",
    "string",
    "increasing",
    "age",
    "one",
    "string",
    "conation",
    "going",
    "convert",
    "user",
    "input",
    "number",
    "accepting",
    "user",
    "input",
    "making",
    "changes",
    "let",
    "reassign",
    "age",
    "equal",
    "function",
    "number",
    "function",
    "convert",
    "another",
    "data",
    "type",
    "string",
    "boolean",
    "number",
    "place",
    "age",
    "variable",
    "within",
    "function",
    "work",
    "old",
    "let",
    "say",
    "25",
    "press",
    "okay",
    "26",
    "reason",
    "may",
    "want",
    "type",
    "convert",
    "different",
    "data",
    "types",
    "behave",
    "differently",
    "along",
    "age",
    "variable",
    "going",
    "display",
    "type",
    "age",
    "data",
    "type",
    "old",
    "25",
    "press",
    "okay",
    "26",
    "shows",
    "data",
    "type",
    "age",
    "number",
    "removed",
    "type",
    "conversion",
    "run",
    "shows",
    "age",
    "251",
    "string",
    "exactly",
    "would",
    "like",
    "reason",
    "type",
    "conversion",
    "important",
    "let",
    "give",
    "another",
    "example",
    "let",
    "create",
    "three",
    "variables",
    "let",
    "x",
    "let",
    "let",
    "z",
    "show",
    "happens",
    "convert",
    "different",
    "values",
    "different",
    "data",
    "types",
    "let",
    "say",
    "x",
    "word",
    "pizza",
    "thing",
    "z",
    "typ",
    "cast",
    "x",
    "number",
    "need",
    "place",
    "x",
    "within",
    "number",
    "function",
    "kind",
    "want",
    "see",
    "happens",
    "try",
    "convert",
    "pizza",
    "number",
    "probably",
    "going",
    "go",
    "well",
    "let",
    "convert",
    "string",
    "z",
    "boolean",
    "let",
    "x",
    "well",
    "type",
    "x",
    "let",
    "thing",
    "z",
    "right",
    "going",
    "happen",
    "attempt",
    "convert",
    "alphabetical",
    "characters",
    "number",
    "variable",
    "nan",
    "means",
    "number",
    "data",
    "type",
    "still",
    "number",
    "though",
    "see",
    "word",
    "pizza",
    "already",
    "string",
    "converting",
    "string",
    "really",
    "anything",
    "line",
    "value",
    "still",
    "pizza",
    "data",
    "type",
    "still",
    "string",
    "convert",
    "string",
    "boolean",
    "booleans",
    "either",
    "true",
    "false",
    "converting",
    "word",
    "pizza",
    "boolean",
    "returns",
    "true",
    "data",
    "type",
    "boolean",
    "basically",
    "long",
    "value",
    "convert",
    "boolean",
    "always",
    "true",
    "let",
    "replace",
    "pizza",
    "zero",
    "happen",
    "convert",
    "zero",
    "number",
    "contain",
    "alphabetical",
    "characters",
    "x",
    "contains",
    "zero",
    "number",
    "zero",
    "treated",
    "string",
    "z",
    "contains",
    "true",
    "boolean",
    "empty",
    "strings",
    "set",
    "quotes",
    "typ",
    "casting",
    "empty",
    "string",
    "number",
    "still",
    "zero",
    "empty",
    "string",
    "boolean",
    "false",
    "might",
    "want",
    "typ",
    "cast",
    "string",
    "boolean",
    "one",
    "way",
    "check",
    "see",
    "user",
    "input",
    "empty",
    "like",
    "somebody",
    "type",
    "something",
    "user",
    "skipped",
    "user",
    "input",
    "likely",
    "going",
    "empty",
    "string",
    "check",
    "see",
    "like",
    "false",
    "user",
    "type",
    "anything",
    "let",
    "know",
    "variable",
    "declared",
    "assigned",
    "value",
    "converting",
    "undefined",
    "variable",
    "number",
    "results",
    "number",
    "string",
    "undefined",
    "boolean",
    "variable",
    "returns",
    "false",
    "basics",
    "type",
    "conversion",
    "process",
    "changing",
    "data",
    "type",
    "value",
    "another",
    "pretty",
    "important",
    "accept",
    "user",
    "input",
    "accept",
    "user",
    "input",
    "string",
    "data",
    "type",
    "times",
    "may",
    "want",
    "convert",
    "number",
    "need",
    "include",
    "number",
    "sort",
    "arithmetic",
    "expressions",
    "boolean",
    "checking",
    "see",
    "user",
    "input",
    "completed",
    "practice",
    "future",
    "well",
    "type",
    "conversion",
    "javascript",
    "hello",
    "today",
    "need",
    "explain",
    "const",
    "const",
    "short",
    "constants",
    "variables",
    "ca",
    "changed",
    "changed",
    "assign",
    "example",
    "going",
    "create",
    "program",
    "calculate",
    "circumference",
    "circle",
    "given",
    "radius",
    "let",
    "define",
    "variables",
    "first",
    "pi",
    "begin",
    "using",
    "let",
    "show",
    "benefit",
    "using",
    "const",
    "let",
    "pi",
    "equals",
    "use",
    "first",
    "digits",
    "pi",
    "let",
    "radius",
    "assign",
    "later",
    "ask",
    "user",
    "input",
    "let",
    "circumference",
    "think",
    "spelled",
    "right",
    "never",
    "spell",
    "circumference",
    "right",
    "need",
    "ask",
    "user",
    "radius",
    "use",
    "window",
    "prompt",
    "radius",
    "equals",
    "window",
    "prompt",
    "enter",
    "radius",
    "circle",
    "radius",
    "accept",
    "user",
    "input",
    "string",
    "data",
    "type",
    "need",
    "convert",
    "radius",
    "number",
    "using",
    "number",
    "function",
    "radius",
    "calculate",
    "circumference",
    "setting",
    "circumference",
    "equal",
    "formula",
    "2",
    "pi",
    "radius",
    "user",
    "enters",
    "circumference",
    "let",
    "circumference",
    "let",
    "see",
    "works",
    "enter",
    "radius",
    "circle",
    "enter",
    "10",
    "press",
    "okay",
    "circumference",
    "might",
    "want",
    "use",
    "const",
    "program",
    "may",
    "accidentally",
    "somebody",
    "else",
    "may",
    "maliciously",
    "change",
    "value",
    "variable",
    "program",
    "behave",
    "intended",
    "example",
    "somewhere",
    "within",
    "program",
    "set",
    "pi",
    "new",
    "number",
    "pi",
    "equal",
    "let",
    "run",
    "program",
    "enter",
    "radius",
    "circle",
    "enter",
    "10",
    "press",
    "okay",
    "circumference",
    "may",
    "realize",
    "incorrect",
    "answer",
    "extra",
    "security",
    "measure",
    "turn",
    "variables",
    "change",
    "const",
    "constant",
    "replace",
    "let",
    "const",
    "good",
    "practice",
    "constants",
    "make",
    "letters",
    "variable",
    "name",
    "uppercase",
    "pi",
    "capital",
    "pi",
    "hey",
    "bro",
    "future",
    "one",
    "thing",
    "needed",
    "clarify",
    "forgot",
    "mention",
    "capitalizing",
    "constants",
    "usually",
    "done",
    "primitive",
    "data",
    "types",
    "numbers",
    "booleans",
    "reference",
    "data",
    "types",
    "strings",
    "normally",
    "followed",
    "convention",
    "see",
    "next",
    "upcoming",
    "videos",
    "pi",
    "constant",
    "assigning",
    "number",
    "making",
    "uppercase",
    "string",
    "normally",
    "would",
    "let",
    "try",
    "change",
    "variable",
    "pi",
    "uncaught",
    "type",
    "error",
    "assignment",
    "constant",
    "variable",
    "javascript",
    "wo",
    "let",
    "us",
    "reassign",
    "constants",
    "assigned",
    "ca",
    "make",
    "changes",
    "declare",
    "constant",
    "ca",
    "change",
    "value",
    "pretty",
    "helpful",
    "lot",
    "circumstances",
    "extra",
    "security",
    "measure",
    "time",
    "within",
    "web",
    "page",
    "accept",
    "user",
    "input",
    "via",
    "text",
    "box",
    "rewrite",
    "program",
    "let",
    "create",
    "h1",
    "element",
    "set",
    "id",
    "h1",
    "element",
    "h1",
    "text",
    "enter",
    "radius",
    "circle",
    "create",
    "text",
    "box",
    "input",
    "set",
    "type",
    "equal",
    "text",
    "id",
    "equal",
    "text",
    "create",
    "label",
    "input",
    "text",
    "box",
    "let",
    "say",
    "radius",
    "add",
    "button",
    "button",
    "say",
    "submit",
    "id",
    "submit",
    "add",
    "break",
    "right",
    "text",
    "box",
    "make",
    "look",
    "nice",
    "let",
    "get",
    "rid",
    "click",
    "submit",
    "button",
    "execute",
    "function",
    "need",
    "select",
    "button",
    "let",
    "take",
    "document",
    "get",
    "element",
    "id",
    "id",
    "submit",
    "follow",
    "dot",
    "onclick",
    "equals",
    "function",
    "parentheses",
    "curly",
    "braces",
    "click",
    "button",
    "execute",
    "code",
    "within",
    "curly",
    "braces",
    "eliminate",
    "window",
    "prompt",
    "need",
    "get",
    "value",
    "text",
    "box",
    "use",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "going",
    "text",
    "text",
    "text",
    "box",
    "dot",
    "value",
    "get",
    "value",
    "text",
    "box",
    "box",
    "assign",
    "radius",
    "typ",
    "cast",
    "input",
    "number",
    "calculate",
    "circumference",
    "since",
    "pi",
    "constant",
    "make",
    "sure",
    "letters",
    "uppercase",
    "uppercase",
    "pi",
    "circumference",
    "let",
    "change",
    "h3",
    "element",
    "let",
    "add",
    "well",
    "h3",
    "id",
    "h3",
    "text",
    "content",
    "get",
    "element",
    "id",
    "id",
    "h3",
    "change",
    "text",
    "content",
    "element",
    "equal",
    "circumference",
    "okay",
    "let",
    "try",
    "radius",
    "10",
    "press",
    "submit",
    "circumference",
    "maybe",
    "centimet",
    "let",
    "change",
    "use",
    "string",
    "concatenation",
    "add",
    "plus",
    "cm",
    "10",
    "submit",
    "cm",
    "attempt",
    "change",
    "value",
    "pi",
    "maybe",
    "pi",
    "equal",
    "rerun",
    "program",
    "10",
    "submit",
    "appear",
    "result",
    "go",
    "dev",
    "tools",
    "go",
    "console",
    "uncaught",
    "type",
    "error",
    "assignment",
    "constant",
    "variable",
    "ca",
    "change",
    "value",
    "constant",
    "graceful",
    "ways",
    "handling",
    "learn",
    "get",
    "exception",
    "handling",
    "however",
    "wanted",
    "want",
    "able",
    "change",
    "value",
    "constant",
    "right",
    "everybody",
    "constants",
    "variable",
    "ca",
    "changed",
    "assign",
    "value",
    "well",
    "constants",
    "javascript",
    "hey",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "create",
    "counter",
    "program",
    "using",
    "javascript",
    "html",
    "css",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "let",
    "begin",
    "everybody",
    "going",
    "start",
    "file",
    "add",
    "necessary",
    "elements",
    "style",
    "elements",
    "css",
    "file",
    "lastly",
    "add",
    "functionality",
    "via",
    "javascript",
    "let",
    "begin",
    "html",
    "file",
    "within",
    "body",
    "document",
    "create",
    "label",
    "store",
    "count",
    "create",
    "label",
    "id",
    "count",
    "label",
    "text",
    "zero",
    "little",
    "small",
    "okay",
    "increase",
    "font",
    "size",
    "css",
    "add",
    "break",
    "afterward",
    "break",
    "tag",
    "need",
    "three",
    "buttons",
    "decrease",
    "reset",
    "increase",
    "button",
    "one",
    "let",
    "copy",
    "button",
    "paste",
    "two",
    "additional",
    "times",
    "id",
    "first",
    "button",
    "decrease",
    "btn4",
    "button",
    "text",
    "decrease",
    "second",
    "button",
    "id",
    "reset",
    "button",
    "text",
    "reset",
    "increase",
    "id",
    "increase",
    "button",
    "text",
    "increase",
    "also",
    "going",
    "place",
    "buttons",
    "within",
    "div",
    "section",
    "let",
    "let",
    "cut",
    "buttons",
    "place",
    "buttons",
    "within",
    "div",
    "give",
    "div",
    "unique",
    "id",
    "button",
    "container",
    "center",
    "align",
    "button",
    "container",
    "middle",
    "window",
    "okay",
    "everything",
    "need",
    "html",
    "file",
    "let",
    "move",
    "css",
    "file",
    "let",
    "style",
    "count",
    "label",
    "little",
    "small",
    "right",
    "select",
    "id",
    "count",
    "label",
    "display",
    "label",
    "block",
    "level",
    "element",
    "text",
    "align",
    "center",
    "center",
    "screen",
    "let",
    "increase",
    "font",
    "size",
    "tend",
    "like",
    "use",
    "em",
    "unit",
    "measurement",
    "text",
    "10",
    "times",
    "size",
    "let",
    "change",
    "font",
    "family",
    "pick",
    "font",
    "choosing",
    "example",
    "use",
    "helvetica",
    "let",
    "center",
    "button",
    "container",
    "surround",
    "three",
    "buttons",
    "see",
    "id",
    "button",
    "container",
    "text",
    "align",
    "center",
    "okay",
    "buttons",
    "middle",
    "one",
    "thing",
    "forgot",
    "uh",
    "let",
    "actually",
    "add",
    "class",
    "buttons",
    "class",
    "equals",
    "buttons",
    "right",
    "select",
    "buttons",
    "class",
    "add",
    "padding",
    "padding",
    "10",
    "pixels",
    "20",
    "pixels",
    "let",
    "increase",
    "font",
    "size",
    "font",
    "size",
    "em",
    "translates",
    "150",
    "let",
    "pick",
    "font",
    "color",
    "pick",
    "white",
    "background",
    "color",
    "buttons",
    "color",
    "use",
    "hsl",
    "values",
    "feeling",
    "pretty",
    "good",
    "let",
    "round",
    "corners",
    "border",
    "radius",
    "five",
    "pixels",
    "change",
    "cursor",
    "pointer",
    "hover",
    "button",
    "cursor",
    "pointer",
    "add",
    "transition",
    "animation",
    "transition",
    "seconds",
    "apply",
    "hover",
    "sudo",
    "class",
    "hover",
    "one",
    "buttons",
    "take",
    "buttons",
    "class",
    "use",
    "hover",
    "pse",
    "sudo",
    "class",
    "change",
    "back",
    "ground",
    "color",
    "quarter",
    "second",
    "change",
    "background",
    "color",
    "something",
    "slightly",
    "darker",
    "yeah",
    "looks",
    "good",
    "delay",
    "hover",
    "one",
    "buttons",
    "html",
    "file",
    "done",
    "css",
    "need",
    "add",
    "functionality",
    "well",
    "buttons",
    "anything",
    "individually",
    "assign",
    "buttons",
    "stored",
    "within",
    "constant",
    "const",
    "decrease",
    "button",
    "equals",
    "need",
    "select",
    "button",
    "accessing",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "selecting",
    "begin",
    "decrease",
    "button",
    "right",
    "need",
    "reset",
    "button",
    "reset",
    "button",
    "id",
    "reset",
    "button",
    "increase",
    "button",
    "increase",
    "button",
    "id",
    "increase",
    "button",
    "need",
    "count",
    "label",
    "okay",
    "set",
    "const",
    "count",
    "label",
    "equals",
    "need",
    "get",
    "count",
    "label",
    "document",
    "getet",
    "element",
    "id",
    "count",
    "label",
    "use",
    "let",
    "count",
    "equal",
    "zero",
    "reassigning",
    "count",
    "incrementing",
    "decrementing",
    "count",
    "html",
    "elements",
    "plan",
    "reassigning",
    "set",
    "constants",
    "need",
    "functions",
    "three",
    "functions",
    "one",
    "buttons",
    "decrease",
    "reset",
    "increase",
    "let",
    "begin",
    "increase",
    "taking",
    "increase",
    "button",
    "assigned",
    "onclick",
    "attribute",
    "button",
    "set",
    "equal",
    "function",
    "going",
    "want",
    "increase",
    "value",
    "count",
    "label",
    "let",
    "increment",
    "count",
    "one",
    "count",
    "set",
    "text",
    "content",
    "label",
    "count",
    "label",
    "text",
    "content",
    "equals",
    "whatever",
    "count",
    "currently",
    "let",
    "see",
    "works",
    "looks",
    "like",
    "misspelled",
    "click",
    "right",
    "let",
    "see",
    "works",
    "yep",
    "every",
    "time",
    "press",
    "button",
    "counter",
    "label",
    "increases",
    "one",
    "okay",
    "let",
    "work",
    "decrease",
    "really",
    "copy",
    "function",
    "paste",
    "let",
    "change",
    "increase",
    "decrease",
    "count",
    "minus",
    "minus",
    "save",
    "everything",
    "able",
    "increase",
    "decrease",
    "reset",
    "button",
    "let",
    "copy",
    "one",
    "functions",
    "change",
    "decrease",
    "button",
    "reset",
    "button",
    "want",
    "reset",
    "set",
    "count",
    "back",
    "zero",
    "update",
    "count",
    "label",
    "current",
    "count",
    "zero",
    "increase",
    "decrease",
    "reset",
    "increase",
    "decrease",
    "right",
    "everybody",
    "counter",
    "program",
    "javascript",
    "html",
    "css",
    "hey",
    "going",
    "everybody",
    "today",
    "going",
    "explain",
    "math",
    "math",
    "javascript",
    "object",
    "provides",
    "collection",
    "math",
    "related",
    "properties",
    "methods",
    "example",
    "ever",
    "need",
    "value",
    "pi",
    "would",
    "type",
    "math",
    "capital",
    "let",
    "pi",
    "rest",
    "digits",
    "need",
    "e",
    "e",
    "known",
    "ul",
    "number",
    "used",
    "base",
    "natural",
    "logarithms",
    "wo",
    "really",
    "using",
    "e",
    "series",
    "ever",
    "need",
    "math",
    "give",
    "access",
    "lot",
    "useful",
    "math",
    "related",
    "methods",
    "let",
    "create",
    "variables",
    "let",
    "x",
    "let",
    "equal",
    "let",
    "z",
    "undefined",
    "need",
    "round",
    "number",
    "let",
    "say",
    "z",
    "equals",
    "type",
    "method",
    "place",
    "whatever",
    "value",
    "vari",
    "variable",
    "would",
    "like",
    "round",
    "within",
    "round",
    "method",
    "let",
    "round",
    "x",
    "store",
    "result",
    "within",
    "z",
    "display",
    "z",
    "z",
    "rounded",
    "three",
    "even",
    "also",
    "floor",
    "floor",
    "always",
    "round",
    "let",
    "change",
    "let",
    "copy",
    "line",
    "paste",
    "change",
    "round",
    "floor",
    "floor",
    "always",
    "rounds",
    "rounded",
    "three",
    "always",
    "round",
    "use",
    "seal",
    "sealing",
    "opposite",
    "floor",
    "c",
    "l",
    "let",
    "change",
    "rounded",
    "four",
    "truncate",
    "trunk",
    "short",
    "truncate",
    "eliminate",
    "decimal",
    "portion",
    "truncated",
    "three",
    "another",
    "way",
    "raise",
    "base",
    "given",
    "power",
    "use",
    "pow",
    "method",
    "p",
    "let",
    "raise",
    "3",
    "power",
    "2",
    "x",
    "power",
    "would",
    "9",
    "power",
    "x",
    "would",
    "8",
    "square",
    "root",
    "function",
    "sqrt",
    "let",
    "find",
    "square",
    "root",
    "81",
    "square",
    "root",
    "81",
    "9",
    "ever",
    "need",
    "find",
    "natural",
    "logarithm",
    "number",
    "use",
    "log",
    "function",
    "let",
    "set",
    "x",
    "10",
    "natural",
    "logarithm",
    "10",
    "need",
    "anything",
    "trigonometry",
    "cosine",
    "tangent",
    "functions",
    "let",
    "begin",
    "sign",
    "n",
    "within",
    "function",
    "place",
    "radians",
    "set",
    "x",
    "45",
    "z",
    "going",
    "let",
    "cosine",
    "cosos",
    "tangent",
    "let",
    "change",
    "x",
    "find",
    "absolute",
    "value",
    "number",
    "use",
    "absolute",
    "value",
    "function",
    "basically",
    "going",
    "give",
    "number",
    "going",
    "positive",
    "absolute",
    "value",
    "basically",
    "eliminating",
    "negative",
    "sign",
    "find",
    "sign",
    "number",
    "use",
    "sign",
    "function",
    "g",
    "n",
    "sign",
    "is1",
    "positive",
    "number",
    "would",
    "one",
    "zero",
    "sign",
    "zero",
    "pretty",
    "helpful",
    "method",
    "find",
    "maximum",
    "minimum",
    "value",
    "set",
    "values",
    "variables",
    "let",
    "set",
    "z",
    "one",
    "stay",
    "two",
    "x",
    "three",
    "create",
    "new",
    "variable",
    "named",
    "max",
    "store",
    "maximum",
    "value",
    "three",
    "variables",
    "math",
    "max",
    "comma",
    "separate",
    "variables",
    "x",
    "z",
    "display",
    "maximum",
    "within",
    "method",
    "maximum",
    "value",
    "three",
    "variables",
    "three",
    "min",
    "minimum",
    "let",
    "min",
    "min",
    "minimum",
    "three",
    "variables",
    "one",
    "right",
    "everybody",
    "math",
    "javascript",
    "object",
    "provides",
    "collection",
    "properties",
    "pi",
    "methods",
    "round",
    "truncate",
    "power",
    "methods",
    "related",
    "trigonometry",
    "max",
    "min",
    "methods",
    "pretty",
    "helpful",
    "ever",
    "need",
    "well",
    "math",
    "javascript",
    "hey",
    "hey",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "create",
    "random",
    "number",
    "generator",
    "first",
    "need",
    "explain",
    "create",
    "random",
    "number",
    "javascript",
    "let",
    "store",
    "random",
    "number",
    "within",
    "variable",
    "name",
    "random",
    "num",
    "create",
    "random",
    "number",
    "javascript",
    "use",
    "random",
    "method",
    "math",
    "math",
    "random",
    "method",
    "generate",
    "random",
    "number",
    "zero",
    "one",
    "uh",
    "looks",
    "like",
    "forgot",
    "output",
    "random",
    "number",
    "let",
    "random",
    "num",
    "generate",
    "random",
    "number",
    "zero",
    "one",
    "give",
    "us",
    "number",
    "long",
    "decimal",
    "portion",
    "likely",
    "let",
    "say",
    "would",
    "like",
    "roll",
    "dice",
    "need",
    "random",
    "number",
    "1",
    "six",
    "including",
    "decimal",
    "portion",
    "first",
    "step",
    "multiply",
    "math",
    "random",
    "6",
    "give",
    "us",
    "random",
    "number",
    "0",
    "6",
    "exclusive",
    "want",
    "decimal",
    "portion",
    "would",
    "like",
    "whole",
    "integer",
    "enclose",
    "equation",
    "floor",
    "method",
    "math",
    "math",
    "floor",
    "enclose",
    "equation",
    "oops",
    "looks",
    "like",
    "misspelled",
    "math",
    "capital",
    "far",
    "random",
    "number",
    "going",
    "zero",
    "five",
    "zero",
    "five",
    "need",
    "one",
    "six",
    "well",
    "increase",
    "minimum",
    "adding",
    "plus",
    "one",
    "whatever",
    "want",
    "minimum",
    "give",
    "us",
    "random",
    "number",
    "one",
    "six",
    "six",
    "one",
    "random",
    "number",
    "1",
    "100",
    "set",
    "maximum",
    "100",
    "math",
    "random",
    "100",
    "1",
    "number",
    "going",
    "1",
    "100",
    "looking",
    "random",
    "number",
    "certain",
    "range",
    "let",
    "say",
    "50",
    "100",
    "well",
    "going",
    "change",
    "equation",
    "make",
    "easier",
    "read",
    "going",
    "set",
    "two",
    "constants",
    "const",
    "min",
    "minimum",
    "let",
    "say",
    "50",
    "max",
    "const",
    "max",
    "100",
    "let",
    "replace",
    "100",
    "maximum",
    "one",
    "minimum",
    "one",
    "additional",
    "change",
    "need",
    "make",
    "example",
    "random",
    "number",
    "139",
    "multiplying",
    "math",
    "random",
    "times",
    "100",
    "maximum",
    "adding",
    "additional",
    "50",
    "one",
    "change",
    "going",
    "make",
    "subtract",
    "minimum",
    "maximum",
    "surround",
    "portion",
    "equation",
    "set",
    "parentheses",
    "force",
    "operator",
    "precedence",
    "random",
    "number",
    "50",
    "100",
    "depending",
    "range",
    "numbers",
    "looking",
    "change",
    "minimum",
    "maximum",
    "right",
    "way",
    "let",
    "create",
    "random",
    "number",
    "generator",
    "let",
    "go",
    "html",
    "file",
    "create",
    "button",
    "id",
    "button",
    "text",
    "button",
    "roll",
    "roll",
    "dice",
    "within",
    "css",
    "stylesheet",
    "set",
    "text",
    "body",
    "document",
    "font",
    "family",
    "set",
    "verdana",
    "cuz",
    "like",
    "font",
    "two",
    "center",
    "align",
    "everything",
    "make",
    "easy",
    "set",
    "text",
    "align",
    "center",
    "right",
    "getting",
    "somewhere",
    "let",
    "work",
    "button",
    "select",
    "id",
    "button",
    "change",
    "font",
    "size",
    "button",
    "three",
    "em",
    "meaning",
    "300",
    "add",
    "little",
    "bit",
    "padding",
    "within",
    "button",
    "5",
    "pixels",
    "25",
    "pixels",
    "set",
    "border",
    "radius",
    "5",
    "pixels",
    "smooth",
    "corners",
    "also",
    "going",
    "need",
    "label",
    "let",
    "go",
    "back",
    "html",
    "file",
    "add",
    "label",
    "id",
    "label",
    "within",
    "css",
    "stylesheet",
    "select",
    "id",
    "label",
    "change",
    "font",
    "size",
    "3",
    "em",
    "sure",
    "save",
    "css",
    "file",
    "save",
    "html",
    "file",
    "within",
    "javascript",
    "file",
    "need",
    "get",
    "button",
    "label",
    "store",
    "within",
    "constants",
    "const",
    "button",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "element",
    "getting",
    "button",
    "need",
    "get",
    "label",
    "label",
    "id",
    "label",
    "let",
    "set",
    "minimum",
    "const",
    "min",
    "equals",
    "set",
    "one",
    "rolling",
    "dice",
    "const",
    "max",
    "equals",
    "6",
    "let",
    "random",
    "num",
    "declare",
    "random",
    "number",
    "variable",
    "assign",
    "quite",
    "yet",
    "okay",
    "click",
    "button",
    "execute",
    "function",
    "take",
    "button",
    "unclick",
    "attribute",
    "set",
    "equal",
    "function",
    "function",
    "going",
    "going",
    "roll",
    "random",
    "number",
    "random",
    "num",
    "equals",
    "math",
    "random",
    "times",
    "maximum",
    "enclose",
    "equation",
    "math",
    "floor",
    "round",
    "math",
    "floor",
    "add",
    "minimum",
    "change",
    "text",
    "content",
    "label",
    "display",
    "label",
    "text",
    "content",
    "equals",
    "random",
    "num",
    "click",
    "button",
    "roll",
    "random",
    "number",
    "uh",
    "missing",
    "number",
    "oh",
    "okay",
    "looks",
    "like",
    "made",
    "mistake",
    "forgot",
    "add",
    "set",
    "print",
    "random",
    "go",
    "going",
    "put",
    "number",
    "new",
    "line",
    "within",
    "html",
    "file",
    "going",
    "add",
    "break",
    "tag",
    "go",
    "let",
    "save",
    "everything",
    "roll",
    "roll",
    "6",
    "3",
    "1",
    "2",
    "5",
    "3",
    "let",
    "say",
    "would",
    "like",
    "roll",
    "three",
    "dice",
    "one",
    "make",
    "changes",
    "replace",
    "label",
    "label",
    "one",
    "id",
    "going",
    "add",
    "break",
    "okay",
    "let",
    "copy",
    "label",
    "paste",
    "two",
    "times",
    "need",
    "labels",
    "two",
    "three",
    "also",
    "give",
    "labels",
    "class",
    "labels",
    "apply",
    "css",
    "styling",
    "entire",
    "class",
    "make",
    "easy",
    "right",
    "within",
    "css",
    "stylesheet",
    "let",
    "replace",
    "id",
    "label",
    "class",
    "labels",
    "sure",
    "save",
    "files",
    "within",
    "javascript",
    "file",
    "let",
    "replace",
    "label",
    "label",
    "one",
    "id",
    "label",
    "one",
    "copy",
    "line",
    "code",
    "need",
    "labels",
    "two",
    "three",
    "label",
    "two",
    "label",
    "three",
    "let",
    "rename",
    "random",
    "num",
    "random",
    "num",
    "one",
    "copy",
    "paste",
    "two",
    "times",
    "need",
    "random",
    "number",
    "two",
    "random",
    "number",
    "three",
    "within",
    "function",
    "button",
    "change",
    "random",
    "num",
    "random",
    "num",
    "one",
    "copy",
    "line",
    "paste",
    "two",
    "times",
    "need",
    "random",
    "number",
    "two",
    "random",
    "number",
    "three",
    "change",
    "text",
    "content",
    "label",
    "label",
    "one",
    "equals",
    "random",
    "num",
    "one",
    "copy",
    "line",
    "paste",
    "two",
    "times",
    "change",
    "one",
    "b2",
    "third",
    "line",
    "change",
    "one",
    "three",
    "generate",
    "three",
    "random",
    "numbers",
    "1",
    "six",
    "rolling",
    "three",
    "dice",
    "232",
    "361",
    "225",
    "right",
    "everybody",
    "create",
    "random",
    "number",
    "generator",
    "javascript",
    "hey",
    "uh",
    "going",
    "everybody",
    "today",
    "got",
    "explain",
    "statements",
    "javascript",
    "condition",
    "choosing",
    "true",
    "execute",
    "code",
    "true",
    "something",
    "else",
    "put",
    "simply",
    "example",
    "let",
    "say",
    "user",
    "age",
    "let",
    "age",
    "equals",
    "25",
    "write",
    "statement",
    "type",
    "set",
    "parentheses",
    "set",
    "curly",
    "braces",
    "within",
    "set",
    "parenthesis",
    "check",
    "condition",
    "let",
    "check",
    "see",
    "age",
    "variable",
    "greater",
    "equal",
    "18",
    "condition",
    "true",
    "execute",
    "whatever",
    "code",
    "within",
    "set",
    "curly",
    "braces",
    "condition",
    "true",
    "let",
    "message",
    "old",
    "enough",
    "enter",
    "enter",
    "site",
    "age",
    "25",
    "condition",
    "true",
    "execute",
    "code",
    "within",
    "curly",
    "braces",
    "old",
    "enough",
    "enter",
    "site",
    "age",
    "13",
    "well",
    "condition",
    "true",
    "execute",
    "skip",
    "would",
    "rather",
    "take",
    "different",
    "course",
    "action",
    "would",
    "rather",
    "something",
    "else",
    "write",
    "else",
    "clause",
    "true",
    "whatever",
    "within",
    "else",
    "clause",
    "let",
    "display",
    "different",
    "message",
    "must",
    "18",
    "plus",
    "enter",
    "site",
    "age",
    "13",
    "end",
    "displaying",
    "must",
    "18",
    "plus",
    "enter",
    "site",
    "basically",
    "speaking",
    "condition",
    "true",
    "else",
    "instead",
    "kind",
    "like",
    "fork",
    "road",
    "path",
    "going",
    "take",
    "another",
    "example",
    "let",
    "say",
    "variable",
    "time",
    "time",
    "hours",
    "military",
    "time",
    "time",
    "9",
    "9",
    "let",
    "write",
    "statement",
    "time",
    "less",
    "12",
    "noon",
    "good",
    "morning",
    "else",
    "12",
    "means",
    "least",
    "afternoon",
    "good",
    "afternoon",
    "time",
    "9",
    "good",
    "morning",
    "time",
    "14",
    "like",
    "1400",
    "military",
    "time",
    "well",
    "display",
    "good",
    "afternoon",
    "conditions",
    "also",
    "work",
    "well",
    "boolean",
    "variables",
    "let",
    "create",
    "boolean",
    "variable",
    "student",
    "student",
    "say",
    "true",
    "false",
    "boolean",
    "variable",
    "need",
    "check",
    "value",
    "statement",
    "place",
    "boolean",
    "variable",
    "within",
    "condition",
    "condition",
    "either",
    "evaluates",
    "true",
    "false",
    "student",
    "true",
    "student",
    "else",
    "student",
    "student",
    "equals",
    "false",
    "execute",
    "else",
    "clause",
    "student",
    "true",
    "execute",
    "clause",
    "student",
    "even",
    "create",
    "nested",
    "statements",
    "time",
    "two",
    "variables",
    "let",
    "age",
    "equals",
    "age",
    "let",
    "license",
    "driver",
    "license",
    "uh",
    "spell",
    "license",
    "license",
    "either",
    "true",
    "false",
    "united",
    "states",
    "need",
    "least",
    "16",
    "years",
    "old",
    "li",
    "check",
    "first",
    "age",
    "greater",
    "equal",
    "16",
    "let",
    "old",
    "enough",
    "drive",
    "else",
    "must",
    "6",
    "plus",
    "license",
    "changed",
    "age",
    "15",
    "well",
    "old",
    "enough",
    "license",
    "least",
    "united",
    "states",
    "might",
    "vary",
    "depending",
    "country",
    "let",
    "know",
    "comments",
    "section",
    "old",
    "get",
    "driver",
    "license",
    "kind",
    "curious",
    "use",
    "another",
    "statement",
    "within",
    "statement",
    "check",
    "see",
    "somebody",
    "old",
    "enough",
    "license",
    "let",
    "check",
    "see",
    "license",
    "add",
    "another",
    "statement",
    "within",
    "statement",
    "pay",
    "attention",
    "indentation",
    "license",
    "since",
    "checking",
    "boolean",
    "variable",
    "going",
    "condition",
    "evaluates",
    "true",
    "false",
    "license",
    "license",
    "else",
    "pay",
    "attention",
    "indentation",
    "license",
    "yet",
    "age",
    "15",
    "license",
    "result",
    "must",
    "16",
    "plus",
    "license",
    "since",
    "condition",
    "false",
    "skip",
    "everything",
    "within",
    "curly",
    "braes",
    "entirely",
    "set",
    "age",
    "18",
    "old",
    "enough",
    "drive",
    "license",
    "set",
    "false",
    "license",
    "yet",
    "execute",
    "condition",
    "enter",
    "anything",
    "within",
    "set",
    "curly",
    "braces",
    "display",
    "message",
    "check",
    "statement",
    "condition",
    "false",
    "execute",
    "else",
    "clause",
    "set",
    "license",
    "true",
    "well",
    "old",
    "enough",
    "drive",
    "license",
    "right",
    "need",
    "discuss",
    "else",
    "statements",
    "keep",
    "age",
    "variable",
    "statement",
    "age",
    "greater",
    "equal",
    "18",
    "old",
    "enough",
    "enter",
    "site",
    "else",
    "must",
    "18",
    "plus",
    "enter",
    "site",
    "age",
    "18",
    "enter",
    "site",
    "age",
    "12",
    "ca",
    "enter",
    "site",
    "conditions",
    "want",
    "check",
    "reaching",
    "else",
    "statement",
    "add",
    "else",
    "clause",
    "check",
    "another",
    "condition",
    "let",
    "check",
    "see",
    "somebody",
    "age",
    "less",
    "zero",
    "age",
    "ca",
    "zero",
    "let",
    "let",
    "user",
    "know",
    "age",
    "ca",
    "zero",
    "set",
    "age",
    "be1",
    "possible",
    "age",
    "ca",
    "zero",
    "since",
    "condition",
    "false",
    "skip",
    "clause",
    "move",
    "next",
    "condition",
    "else",
    "condition",
    "true",
    "execute",
    "clause",
    "necessary",
    "go",
    "else",
    "statement",
    "already",
    "executed",
    "one",
    "clauses",
    "add",
    "many",
    "else",
    "statements",
    "would",
    "like",
    "let",
    "add",
    "another",
    "else",
    "let",
    "check",
    "see",
    "somebody",
    "100",
    "years",
    "old",
    "age",
    "greater",
    "equal",
    "100",
    "old",
    "enter",
    "site",
    "okay",
    "pay",
    "attention",
    "really",
    "important",
    "age",
    "101",
    "old",
    "enough",
    "enter",
    "site",
    "execute",
    "clause",
    "age",
    "greater",
    "equal",
    "100",
    "order",
    "clauses",
    "matter",
    "start",
    "top",
    "work",
    "way",
    "check",
    "conditions",
    "way",
    "first",
    "statement",
    "state",
    "age",
    "greater",
    "equal",
    "18",
    "101",
    "greater",
    "equal",
    "18",
    "execute",
    "clause",
    "skip",
    "everything",
    "else",
    "comes",
    "even",
    "though",
    "response",
    "appropriate",
    "looking",
    "still",
    "skip",
    "even",
    "though",
    "true",
    "executed",
    "one",
    "first",
    "would",
    "recommend",
    "move",
    "clause",
    "beginning",
    "change",
    "statement",
    "first",
    "let",
    "check",
    "see",
    "age",
    "greater",
    "equal",
    "100",
    "else",
    "age",
    "greater",
    "equal",
    "18",
    "work",
    "intended",
    "age",
    "101",
    "old",
    "enter",
    "site",
    "let",
    "add",
    "another",
    "lsif",
    "clause",
    "check",
    "see",
    "two",
    "values",
    "equal",
    "got",
    "use",
    "comparison",
    "operator",
    "two",
    "equal",
    "signs",
    "let",
    "give",
    "demonstration",
    "else",
    "let",
    "check",
    "see",
    "somebody",
    "age",
    "directly",
    "equal",
    "zero",
    "sure",
    "using",
    "two",
    "equal",
    "signs",
    "comparison",
    "one",
    "one",
    "equal",
    "sign",
    "assignment",
    "operator",
    "want",
    "two",
    "equal",
    "signs",
    "see",
    "two",
    "values",
    "equal",
    "somebody",
    "age",
    "exactly",
    "zero",
    "display",
    "custom",
    "message",
    "ca",
    "enter",
    "born",
    "somebody",
    "age",
    "zero",
    "baby",
    "infant",
    "let",
    "set",
    "age",
    "zero",
    "ca",
    "enter",
    "born",
    "condition",
    "false",
    "skip",
    "clause",
    "condition",
    "true",
    "execute",
    "clause",
    "skip",
    "everything",
    "else",
    "comes",
    "using",
    "code",
    "let",
    "work",
    "exercise",
    "going",
    "create",
    "text",
    "box",
    "button",
    "somebody",
    "submit",
    "age",
    "depending",
    "enter",
    "display",
    "message",
    "within",
    "html",
    "file",
    "create",
    "things",
    "let",
    "create",
    "label",
    "text",
    "label",
    "enter",
    "age",
    "let",
    "add",
    "break",
    "text",
    "box",
    "label",
    "input",
    "type",
    "text",
    "id",
    "text",
    "add",
    "break",
    "create",
    "submit",
    "button",
    "button",
    "type",
    "equals",
    "submit",
    "id",
    "submit",
    "text",
    "button",
    "submit",
    "also",
    "create",
    "paragraph",
    "element",
    "id",
    "let",
    "say",
    "result",
    "element",
    "display",
    "result",
    "right",
    "everything",
    "need",
    "ca",
    "see",
    "paragraph",
    "element",
    "quite",
    "yet",
    "text",
    "content",
    "result",
    "element",
    "one",
    "lines",
    "text",
    "let",
    "go",
    "back",
    "index",
    "file",
    "create",
    "elements",
    "set",
    "constants",
    "const",
    "text",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "going",
    "text",
    "const",
    "submit",
    "submit",
    "button",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "going",
    "submit",
    "lastly",
    "result",
    "element",
    "const",
    "result",
    "element",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "result",
    "element",
    "let",
    "scoot",
    "statements",
    "click",
    "button",
    "execute",
    "function",
    "button",
    "named",
    "submit",
    "submit",
    "onclick",
    "attribute",
    "equals",
    "function",
    "click",
    "button",
    "going",
    "let",
    "take",
    "else",
    "else",
    "clauses",
    "cut",
    "paste",
    "within",
    "function",
    "button",
    "click",
    "button",
    "check",
    "age",
    "let",
    "set",
    "variable",
    "undefined",
    "get",
    "age",
    "text",
    "box",
    "age",
    "equals",
    "text",
    "value",
    "get",
    "value",
    "text",
    "box",
    "assign",
    "age",
    "remember",
    "get",
    "text",
    "text",
    "box",
    "string",
    "data",
    "type",
    "need",
    "typ",
    "cast",
    "number",
    "set",
    "age",
    "equal",
    "use",
    "number",
    "function",
    "convert",
    "number",
    "check",
    "age",
    "replace",
    "text",
    "content",
    "result",
    "element",
    "result",
    "element",
    "text",
    "content",
    "equals",
    "message",
    "use",
    "template",
    "literal",
    "use",
    "back",
    "ticks",
    "let",
    "copy",
    "text",
    "paste",
    "within",
    "template",
    "literal",
    "delete",
    "message",
    "follow",
    "pattern",
    "result",
    "element",
    "textcontent",
    "equals",
    "message",
    "right",
    "let",
    "see",
    "works",
    "type",
    "age",
    "let",
    "say",
    "25",
    "press",
    "submit",
    "one",
    "problem",
    "let",
    "see",
    "going",
    "oops",
    "okay",
    "forgot",
    "add",
    "set",
    "parentheses",
    "function",
    "let",
    "add",
    "let",
    "say",
    "25",
    "press",
    "submit",
    "old",
    "enough",
    "enter",
    "site",
    "let",
    "say",
    "12",
    "must",
    "18",
    "plus",
    "enter",
    "site",
    "101",
    "old",
    "enter",
    "site",
    "zero",
    "ca",
    "enter",
    "born",
    "negative",
    "1",
    "age",
    "ca",
    "zero",
    "right",
    "everybody",
    "everything",
    "need",
    "know",
    "get",
    "started",
    "working",
    "statements",
    "javascript",
    "hey",
    "uh",
    "today",
    "going",
    "explain",
    "checked",
    "property",
    "javascript",
    "checked",
    "property",
    "determines",
    "checked",
    "state",
    "html",
    "checkbox",
    "radio",
    "button",
    "element",
    "examining",
    "property",
    "determine",
    "check",
    "boox",
    "checked",
    "radio",
    "button",
    "selected",
    "program",
    "select",
    "buttons",
    "different",
    "result",
    "within",
    "html",
    "file",
    "create",
    "input",
    "element",
    "type",
    "going",
    "equal",
    "checkbox",
    "id",
    "set",
    "equal",
    "checkbox",
    "checkbox",
    "probably",
    "add",
    "label",
    "people",
    "know",
    "label",
    "set",
    "four",
    "attribute",
    "checkbox",
    "label",
    "going",
    "say",
    "let",
    "say",
    "subscribe",
    "like",
    "subscribe",
    "button",
    "utilizing",
    "four",
    "attribute",
    "four",
    "attribute",
    "id",
    "click",
    "label",
    "still",
    "select",
    "checkbox",
    "right",
    "let",
    "add",
    "break",
    "create",
    "radio",
    "buttons",
    "need",
    "input",
    "element",
    "type",
    "time",
    "checkbox",
    "radio",
    "id",
    "visa",
    "button",
    "going",
    "abbreviate",
    "button",
    "btn",
    "pay",
    "attention",
    "create",
    "label",
    "radio",
    "button",
    "set",
    "four",
    "attribute",
    "id",
    "text",
    "visa",
    "going",
    "add",
    "break",
    "okay",
    "let",
    "copy",
    "radio",
    "button",
    "paste",
    "two",
    "times",
    "change",
    "second",
    "visa",
    "mastercard",
    "let",
    "change",
    "id",
    "first",
    "master",
    "card",
    "let",
    "copy",
    "id",
    "paste",
    "within",
    "four",
    "attribute",
    "second",
    "label",
    "change",
    "text",
    "master",
    "card",
    "third",
    "id",
    "paypal",
    "button",
    "change",
    "four",
    "attribute",
    "text",
    "paypal",
    "radio",
    "buttons",
    "within",
    "group",
    "currently",
    "select",
    "would",
    "like",
    "able",
    "select",
    "one",
    "group",
    "group",
    "radio",
    "buttons",
    "name",
    "attribute",
    "name",
    "name",
    "let",
    "say",
    "card",
    "let",
    "copy",
    "attribute",
    "paste",
    "within",
    "input",
    "elements",
    "able",
    "select",
    "one",
    "appears",
    "work",
    "lastly",
    "let",
    "create",
    "submit",
    "button",
    "creating",
    "button",
    "text",
    "submit",
    "type",
    "submit",
    "id",
    "id",
    "submit",
    "create",
    "paragraph",
    "element",
    "populate",
    "text",
    "depending",
    "subscribe",
    "checked",
    "thing",
    "goes",
    "r",
    "buttons",
    "create",
    "two",
    "paragraphs",
    "button",
    "id",
    "first",
    "paragraph",
    "let",
    "name",
    "sub",
    "result",
    "text",
    "content",
    "begin",
    "change",
    "text",
    "content",
    "sub",
    "result",
    "paragraph",
    "text",
    "states",
    "user",
    "subscribed",
    "create",
    "another",
    "paragraph",
    "radio",
    "buttons",
    "going",
    "text",
    "content",
    "set",
    "idea",
    "paragraph",
    "payment",
    "result",
    "move",
    "javascript",
    "file",
    "going",
    "edit",
    "css",
    "button",
    "make",
    "little",
    "bit",
    "bigger",
    "guys",
    "read",
    "id",
    "button",
    "submit",
    "selecting",
    "id",
    "submit",
    "set",
    "font",
    "size",
    "1",
    "em",
    "probably",
    "good",
    "enough",
    "uh",
    "maybe",
    "add",
    "one",
    "break",
    "subscribe",
    "button",
    "paypal",
    "radio",
    "button",
    "cramped",
    "decent",
    "enough",
    "okay",
    "sure",
    "save",
    "css",
    "file",
    "html",
    "file",
    "within",
    "javascript",
    "file",
    "going",
    "get",
    "elements",
    "id",
    "store",
    "within",
    "constants",
    "easier",
    "work",
    "okay",
    "let",
    "start",
    "checkbox",
    "checkbox",
    "id",
    "checkbox",
    "const",
    "check",
    "checkbox",
    "sure",
    "pay",
    "attention",
    "capitalization",
    "feel",
    "free",
    "change",
    "would",
    "like",
    "sure",
    "consistent",
    "currently",
    "html",
    "elements",
    "accessing",
    "document",
    "web",
    "page",
    "get",
    "element",
    "id",
    "id",
    "going",
    "checkbox",
    "let",
    "get",
    "elements",
    "checkbox",
    "visa",
    "button",
    "const",
    "visa",
    "button",
    "get",
    "element",
    "id",
    "visa",
    "button",
    "let",
    "repeat",
    "mastercard",
    "button",
    "pay",
    "attention",
    "capitalization",
    "pretty",
    "important",
    "paypal",
    "button",
    "need",
    "submit",
    "button",
    "next",
    "submit",
    "paragraph",
    "elements",
    "sub",
    "result",
    "payment",
    "result",
    "right",
    "constants",
    "need",
    "click",
    "submit",
    "button",
    "execute",
    "function",
    "taking",
    "submit",
    "name",
    "button",
    "dot",
    "click",
    "keep",
    "spelling",
    "lick",
    "click",
    "equ",
    "equal",
    "function",
    "parentheses",
    "curly",
    "braces",
    "click",
    "button",
    "going",
    "recently",
    "learned",
    "statements",
    "first",
    "check",
    "checked",
    "property",
    "subscribe",
    "button",
    "place",
    "within",
    "statement",
    "create",
    "statement",
    "parenthesis",
    "krly",
    "braces",
    "examining",
    "checkbox",
    "subscribe",
    "button",
    "dot",
    "checked",
    "property",
    "evaluate",
    "true",
    "false",
    "true",
    "execute",
    "code",
    "something",
    "else",
    "somebody",
    "subscribed",
    "let",
    "change",
    "text",
    "content",
    "sub",
    "resultes",
    "paragraph",
    "sub",
    "result",
    "accessing",
    "text",
    "content",
    "equal",
    "maybe",
    "use",
    "template",
    "literal",
    "subscribed",
    "else",
    "user",
    "subscribed",
    "let",
    "copy",
    "line",
    "paste",
    "subscribed",
    "let",
    "test",
    "click",
    "check",
    "boox",
    "press",
    "submit",
    "button",
    "states",
    "subscribed",
    "subscribed",
    "refresh",
    "page",
    "click",
    "subscribe",
    "button",
    "press",
    "submit",
    "subscribed",
    "right",
    "know",
    "works",
    "let",
    "move",
    "radio",
    "button",
    "first",
    "check",
    "see",
    "somebody",
    "selected",
    "visa",
    "accessing",
    "visa",
    "radio",
    "button",
    "visa",
    "button",
    "checked",
    "true",
    "changing",
    "text",
    "payment",
    "result",
    "paragraph",
    "payment",
    "result",
    "text",
    "content",
    "equals",
    "paying",
    "visa",
    "let",
    "see",
    "works",
    "select",
    "visa",
    "press",
    "submit",
    "paying",
    "visa",
    "right",
    "let",
    "add",
    "else",
    "next",
    "radio",
    "button",
    "mastercard",
    "button",
    "checked",
    "mastercard",
    "button",
    "checked",
    "change",
    "text",
    "content",
    "payment",
    "result",
    "paying",
    "mastercard",
    "paying",
    "mastercard",
    "let",
    "add",
    "another",
    "else",
    "statement",
    "else",
    "time",
    "examining",
    "paypal",
    "button",
    "paypal",
    "button",
    "checked",
    "true",
    "change",
    "text",
    "content",
    "payment",
    "result",
    "paying",
    "paypal",
    "paying",
    "paypal",
    "else",
    "none",
    "radio",
    "buttons",
    "checked",
    "change",
    "text",
    "content",
    "payment",
    "result",
    "must",
    "select",
    "payment",
    "type",
    "press",
    "submit",
    "without",
    "selecting",
    "payment",
    "type",
    "must",
    "select",
    "payment",
    "type",
    "right",
    "everybody",
    "checked",
    "property",
    "examining",
    "checked",
    "property",
    "html",
    "checkbox",
    "radio",
    "button",
    "element",
    "determine",
    "elements",
    "checked",
    "well",
    "checked",
    "property",
    "javascript",
    "hey",
    "welcome",
    "back",
    "today",
    "going",
    "explain",
    "trary",
    "operator",
    "javascript",
    "write",
    "condition",
    "add",
    "little",
    "question",
    "mark",
    "kind",
    "like",
    "asking",
    "question",
    "useful",
    "well",
    "shortcut",
    "else",
    "statements",
    "helps",
    "assign",
    "variable",
    "based",
    "condition",
    "write",
    "condition",
    "use",
    "tary",
    "operator",
    "asking",
    "question",
    "write",
    "code",
    "condition",
    "true",
    "would",
    "like",
    "add",
    "colon",
    "code",
    "condition",
    "false",
    "example",
    "let",
    "say",
    "user",
    "age",
    "age",
    "equals",
    "21",
    "would",
    "like",
    "check",
    "see",
    "somebody",
    "age",
    "greater",
    "equal",
    "18",
    "age",
    "greater",
    "equal",
    "18",
    "use",
    "tary",
    "operator",
    "kind",
    "like",
    "asking",
    "question",
    "age",
    "greater",
    "equal",
    "18",
    "condition",
    "true",
    "write",
    "code",
    "create",
    "string",
    "adult",
    "condition",
    "false",
    "add",
    "colon",
    "execute",
    "code",
    "condition",
    "false",
    "minor",
    "helpful",
    "need",
    "assign",
    "variable",
    "based",
    "condition",
    "create",
    "new",
    "variable",
    "let",
    "message",
    "equals",
    "write",
    "condition",
    "age",
    "greater",
    "equal",
    "18",
    "true",
    "assign",
    "string",
    "variable",
    "message",
    "false",
    "instead",
    "assign",
    "one",
    "alternative",
    "writing",
    "something",
    "like",
    "programming",
    "try",
    "repeat",
    "assigning",
    "message",
    "either",
    "string",
    "one",
    "trary",
    "operator",
    "condensed",
    "feel",
    "like",
    "easier",
    "read",
    "else",
    "statement",
    "shortcut",
    "choose",
    "use",
    "tend",
    "use",
    "lot",
    "test",
    "let",
    "message",
    "sure",
    "works",
    "fine",
    "message",
    "age",
    "21",
    "adult",
    "age",
    "12",
    "minor",
    "let",
    "go",
    "exercises",
    "time",
    "let",
    "time",
    "time",
    "1",
    "24",
    "like",
    "clock",
    "set",
    "time",
    "6",
    "16",
    "16",
    "think",
    "would",
    "400",
    "assign",
    "greeting",
    "equals",
    "write",
    "condition",
    "time",
    "less",
    "12",
    "tary",
    "operator",
    "like",
    "asking",
    "question",
    "time",
    "less",
    "12",
    "morning",
    "good",
    "morning",
    "use",
    "colon",
    "write",
    "code",
    "false",
    "morning",
    "least",
    "afternoon",
    "good",
    "afternoon",
    "let",
    "greeting",
    "good",
    "afternoon",
    "400",
    "99",
    "good",
    "morning",
    "right",
    "examples",
    "somebody",
    "student",
    "let",
    "student",
    "true",
    "false",
    "student",
    "let",
    "message",
    "message",
    "equals",
    "boolean",
    "variable",
    "write",
    "boolean",
    "variable",
    "student",
    "question",
    "mark",
    "student",
    "student",
    "student",
    "let",
    "message",
    "student",
    "student",
    "let",
    "set",
    "false",
    "student",
    "easy",
    "read",
    "boolean",
    "variables",
    "write",
    "boolean",
    "variable",
    "add",
    "question",
    "mark",
    "challenge",
    "round",
    "purchase",
    "amount",
    "somebody",
    "buying",
    "something",
    "somebody",
    "purchase",
    "amount",
    "100",
    "get",
    "10",
    "discount",
    "let",
    "purchase",
    "amount",
    "equal",
    "let",
    "say",
    "125",
    "unit",
    "currency",
    "choosing",
    "let",
    "discount",
    "equals",
    "condition",
    "checking",
    "purchase",
    "amount",
    "greater",
    "equal",
    "100",
    "100",
    "question",
    "mark",
    "somebody",
    "purchase",
    "amount",
    "greater",
    "100",
    "get",
    "10",
    "discount",
    "colon",
    "false",
    "get",
    "discount",
    "zero",
    "let",
    "display",
    "total",
    "use",
    "template",
    "literal",
    "total",
    "need",
    "dollar",
    "sign",
    "unit",
    "currency",
    "need",
    "placeholder",
    "need",
    "another",
    "dollar",
    "sign",
    "purchase",
    "amount",
    "minus",
    "us",
    "purchase",
    "amount",
    "multiplied",
    "let",
    "scoot",
    "little",
    "discount",
    "divided",
    "100",
    "total",
    "since",
    "get",
    "discount",
    "purchase",
    "amount",
    "99",
    "well",
    "get",
    "discount",
    "total",
    "99",
    "right",
    "everybody",
    "trary",
    "operator",
    "shortcut",
    "else",
    "statement",
    "helps",
    "assign",
    "variable",
    "based",
    "condition",
    "write",
    "condition",
    "add",
    "question",
    "mark",
    "asking",
    "question",
    "code",
    "condition",
    "true",
    "else",
    "code",
    "condition",
    "false",
    "using",
    "tary",
    "operator",
    "lot",
    "feel",
    "like",
    "helpful",
    "well",
    "tary",
    "operator",
    "javascript",
    "hey",
    "going",
    "everybody",
    "today",
    "going",
    "explain",
    "switches",
    "switch",
    "efficient",
    "replacement",
    "using",
    "many",
    "else",
    "statements",
    "example",
    "program",
    "wrote",
    "without",
    "using",
    "switch",
    "day",
    "day",
    "normally",
    "number",
    "1",
    "7",
    "day",
    "equals",
    "1",
    "monday",
    "see",
    "day",
    "two",
    "well",
    "tuesday",
    "way",
    "7",
    "sunday",
    "lse",
    "statement",
    "states",
    "day",
    "variable",
    "day",
    "example",
    "set",
    "day",
    "know",
    "like",
    "string",
    "pizza",
    "well",
    "pizza",
    "day",
    "really",
    "find",
    "using",
    "lot",
    "else",
    "statements",
    "would",
    "instead",
    "recommend",
    "creating",
    "switch",
    "create",
    "one",
    "keep",
    "day",
    "variable",
    "set",
    "one",
    "create",
    "switch",
    "type",
    "switch",
    "parentheses",
    "curly",
    "braces",
    "within",
    "parenthesis",
    "switch",
    "place",
    "variable",
    "value",
    "examining",
    "let",
    "examine",
    "day",
    "variable",
    "examine",
    "value",
    "matching",
    "cases",
    "create",
    "case",
    "type",
    "case",
    "value",
    "condition",
    "see",
    "day",
    "equals",
    "1",
    "day",
    "case",
    "one",
    "two",
    "values",
    "equal",
    "something",
    "execute",
    "code",
    "add",
    "colon",
    "code",
    "underneath",
    "case",
    "executed",
    "match",
    "value",
    "variable",
    "day",
    "value",
    "let",
    "monday",
    "sure",
    "add",
    "break",
    "demonstrate",
    "need",
    "break",
    "later",
    "day",
    "one",
    "monday",
    "let",
    "add",
    "another",
    "case",
    "case",
    "two",
    "case",
    "day",
    "equals",
    "2",
    "let",
    "copy",
    "paste",
    "case",
    "2",
    "tuesday",
    "let",
    "change",
    "day",
    "b2",
    "tuesday",
    "right",
    "let",
    "way",
    "case",
    "seven",
    "right",
    "cases",
    "1",
    "7",
    "change",
    "day",
    "seven",
    "well",
    "sunday",
    "also",
    "add",
    "default",
    "case",
    "case",
    "matches",
    "set",
    "day",
    "pizza",
    "make",
    "sense",
    "well",
    "matching",
    "cases",
    "review",
    "cases",
    "matches",
    "exit",
    "switch",
    "also",
    "capability",
    "add",
    "default",
    "case",
    "case",
    "matches",
    "default",
    "behavior",
    "switch",
    "matching",
    "cases",
    "let",
    "probably",
    "use",
    "template",
    "literal",
    "inserting",
    "variable",
    "day",
    "variable",
    "day",
    "execute",
    "default",
    "case",
    "pizza",
    "day",
    "right",
    "reason",
    "break",
    "statements",
    "break",
    "switch",
    "matching",
    "case",
    "demonstrate",
    "happens",
    "remove",
    "right",
    "let",
    "set",
    "day",
    "two",
    "tuesday",
    "tuesday",
    "wednesday",
    "thursday",
    "friday",
    "saturday",
    "sunday",
    "two",
    "day",
    "reason",
    "breaks",
    "break",
    "switch",
    "matching",
    "case",
    "execute",
    "code",
    "found",
    "within",
    "space",
    "cascade",
    "execute",
    "code",
    "follows",
    "including",
    "code",
    "within",
    "different",
    "cases",
    "want",
    "break",
    "statements",
    "case",
    "break",
    "switch",
    "let",
    "go",
    "complex",
    "example",
    "let",
    "say",
    "test",
    "score",
    "variable",
    "0",
    "100",
    "score",
    "92",
    "92",
    "also",
    "create",
    "letter",
    "grade",
    "variable",
    "declare",
    "aign",
    "going",
    "examine",
    "test",
    "score",
    "another",
    "way",
    "write",
    "switch",
    "something",
    "like",
    "going",
    "examine",
    "value",
    "true",
    "matching",
    "cases",
    "contain",
    "condition",
    "case",
    "write",
    "condition",
    "test",
    "score",
    "greater",
    "equal",
    "90",
    "90",
    "condition",
    "eval",
    "valuate",
    "true",
    "false",
    "true",
    "equal",
    "true",
    "code",
    "false",
    "skip",
    "test",
    "score",
    "greater",
    "equal",
    "90",
    "let",
    "assign",
    "letter",
    "grade",
    "variable",
    "equal",
    "sure",
    "break",
    "going",
    "test",
    "display",
    "letter",
    "grade",
    "let",
    "anything",
    "greater",
    "80",
    "user",
    "receive",
    "b",
    "test",
    "score",
    "greater",
    "equal",
    "80",
    "letter",
    "grade",
    "equal",
    "b",
    "let",
    "change",
    "test",
    "score",
    "85",
    "user",
    "receives",
    "b",
    "let",
    "follow",
    "pattern",
    "70",
    "c",
    "yep",
    "c",
    "60",
    "60",
    "default",
    "case",
    "set",
    "letter",
    "grade",
    "f",
    "letter",
    "grade",
    "equals",
    "f",
    "set",
    "test",
    "score",
    "33",
    "test",
    "score",
    "33",
    "letter",
    "grade",
    "f",
    "right",
    "everybody",
    "switch",
    "find",
    "using",
    "lot",
    "lse",
    "statements",
    "would",
    "recommend",
    "using",
    "switch",
    "instead",
    "bad",
    "many",
    "would",
    "use",
    "switch",
    "instead",
    "well",
    "everybody",
    "switches",
    "javascript",
    "hey",
    "today",
    "going",
    "explain",
    "string",
    "methods",
    "javascript",
    "string",
    "methods",
    "allow",
    "manipulate",
    "work",
    "text",
    "also",
    "known",
    "strings",
    "example",
    "username",
    "username",
    "equals",
    "string",
    "text",
    "go",
    "ahead",
    "create",
    "username",
    "variable",
    "set",
    "equal",
    "either",
    "username",
    "one",
    "full",
    "name",
    "strings",
    "different",
    "methods",
    "manipulate",
    "text",
    "one",
    "way",
    "another",
    "examples",
    "suppose",
    "would",
    "like",
    "get",
    "first",
    "character",
    "string",
    "use",
    "char",
    "method",
    "type",
    "string",
    "variable",
    "containing",
    "string",
    "follow",
    "dot",
    "adding",
    "dot",
    "accessing",
    "properties",
    "methods",
    "string",
    "follow",
    "char",
    "list",
    "index",
    "first",
    "character",
    "zero",
    "second",
    "character",
    "would",
    "one",
    "get",
    "character",
    "index",
    "zero",
    "b",
    "however",
    "run",
    "let",
    "go",
    "dev",
    "tools",
    "uh",
    "nothing",
    "appears",
    "happen",
    "going",
    "return",
    "single",
    "character",
    "let",
    "place",
    "within",
    "see",
    "cut",
    "code",
    "paste",
    "within",
    "first",
    "character",
    "string",
    "b",
    "depending",
    "wrote",
    "might",
    "different",
    "character",
    "index",
    "one",
    "would",
    "r",
    "two",
    "char",
    "method",
    "index",
    "method",
    "return",
    "index",
    "first",
    "occurrence",
    "character",
    "let",
    "find",
    "first",
    "occurrence",
    "n",
    "return",
    "index",
    "whatever",
    "returned",
    "let",
    "place",
    "method",
    "within",
    "index",
    "first",
    "occurrence",
    "would",
    "two",
    "0",
    "1",
    "2",
    "otherwise",
    "last",
    "index",
    "let",
    "change",
    "method",
    "last",
    "index",
    "would",
    "four",
    "0",
    "1",
    "2",
    "3",
    "4",
    "length",
    "property",
    "method",
    "get",
    "length",
    "string",
    "type",
    "string",
    "variable",
    "containing",
    "string",
    "dot",
    "length",
    "method",
    "similar",
    "length",
    "username",
    "seven",
    "characters",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "get",
    "length",
    "string",
    "going",
    "trim",
    "string",
    "maybe",
    "bunch",
    "white",
    "spaces",
    "reassign",
    "username",
    "equal",
    "let",
    "take",
    "username",
    "variable",
    "dot",
    "use",
    "trim",
    "method",
    "trim",
    "whit",
    "space",
    "username",
    "name",
    "wh",
    "space",
    "let",
    "add",
    "wh",
    "space",
    "name",
    "yep",
    "white",
    "space",
    "make",
    "name",
    "uppercase",
    "use",
    "two",
    "uppercase",
    "method",
    "string",
    "uppercase",
    "two",
    "lowercase",
    "make",
    "characters",
    "lowercase",
    "repeat",
    "repeat",
    "string",
    "within",
    "parenthesis",
    "method",
    "many",
    "times",
    "want",
    "repeat",
    "string",
    "type",
    "three",
    "repeat",
    "string",
    "three",
    "times",
    "determine",
    "string",
    "starts",
    "given",
    "character",
    "use",
    "starts",
    "method",
    "return",
    "boolean",
    "store",
    "within",
    "result",
    "variable",
    "username",
    "dot",
    "starts",
    "method",
    "check",
    "see",
    "string",
    "starts",
    "empty",
    "space",
    "let",
    "result",
    "false",
    "username",
    "begin",
    "space",
    "add",
    "one",
    "returns",
    "true",
    "could",
    "useful",
    "within",
    "statement",
    "result",
    "string",
    "starts",
    "whit",
    "space",
    "let",
    "username",
    "ca",
    "begin",
    "empty",
    "space",
    "else",
    "let",
    "username",
    "username",
    "whit",
    "space",
    "beginning",
    "username",
    "ca",
    "begin",
    "whit",
    "space",
    "false",
    "display",
    "username",
    "starts",
    "method",
    "also",
    "ends",
    "withth",
    "username",
    "end",
    "whit",
    "space",
    "username",
    "ca",
    "end",
    "empty",
    "space",
    "next",
    "includes",
    "method",
    "string",
    "contain",
    "empty",
    "space",
    "split",
    "username",
    "two",
    "first",
    "last",
    "name",
    "would",
    "work",
    "well",
    "username",
    "ca",
    "include",
    "empty",
    "space",
    "currently",
    "username",
    "ca",
    "include",
    "empty",
    "space",
    "pass",
    "test",
    "display",
    "username",
    "right",
    "time",
    "create",
    "phone",
    "number",
    "let",
    "phone",
    "number",
    "equals",
    "make",
    "phone",
    "number",
    "including",
    "dashes",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7890",
    "phone",
    "number",
    "string",
    "even",
    "though",
    "contains",
    "numbers",
    "strings",
    "contain",
    "numbers",
    "treat",
    "characters",
    "let",
    "eliminate",
    "dashes",
    "phone",
    "number",
    "one",
    "way",
    "let",
    "reassign",
    "phone",
    "number",
    "equals",
    "phone",
    "number",
    "use",
    "replace",
    "method",
    "character",
    "replacing",
    "let",
    "replace",
    "dashes",
    "comma",
    "character",
    "replace",
    "dashes",
    "whatever",
    "put",
    "first",
    "character",
    "replace",
    "dashes",
    "characters",
    "let",
    "phone",
    "number",
    "eliminate",
    "dashes",
    "otherwise",
    "could",
    "replace",
    "different",
    "character",
    "let",
    "forward",
    "slash",
    "1",
    "2",
    "3456",
    "sl",
    "7890",
    "also",
    "pad",
    "start",
    "method",
    "pad",
    "start",
    "first",
    "value",
    "within",
    "pad",
    "start",
    "method",
    "specified",
    "length",
    "many",
    "characters",
    "string",
    "would",
    "like",
    "string",
    "15",
    "characters",
    "long",
    "second",
    "value",
    "make",
    "sure",
    "comma",
    "separate",
    "pad",
    "start",
    "string",
    "given",
    "character",
    "let",
    "say",
    "zero",
    "result",
    "couple",
    "zeros",
    "phone",
    "number",
    "pad",
    "string",
    "zeros",
    "15",
    "characters",
    "long",
    "set",
    "20",
    "would",
    "zeros",
    "padding",
    "pad",
    "end",
    "pad",
    "end",
    "string",
    "character",
    "string",
    "15",
    "characters",
    "long",
    "right",
    "everybody",
    "string",
    "methods",
    "allow",
    "manipulate",
    "work",
    "text",
    "also",
    "known",
    "strings",
    "practice",
    "future",
    "well",
    "useful",
    "string",
    "methods",
    "javascript",
    "hey",
    "everybody",
    "today",
    "going",
    "explain",
    "string",
    "slicing",
    "javascript",
    "string",
    "slicing",
    "process",
    "creating",
    "substring",
    "portion",
    "another",
    "string",
    "wo",
    "alter",
    "original",
    "string",
    "demonstrate",
    "let",
    "create",
    "constant",
    "full",
    "name",
    "go",
    "ahead",
    "type",
    "full",
    "name",
    "copy",
    "going",
    "extract",
    "first",
    "name",
    "full",
    "name",
    "create",
    "new",
    "string",
    "declare",
    "let",
    "first",
    "name",
    "equals",
    "create",
    "substring",
    "follow",
    "formula",
    "take",
    "string",
    "case",
    "full",
    "name",
    "dot",
    "use",
    "slice",
    "method",
    "slice",
    "list",
    "starting",
    "ending",
    "index",
    "would",
    "like",
    "begin",
    "first",
    "character",
    "index",
    "zero",
    "start",
    "beginning",
    "index0",
    "comma",
    "going",
    "end",
    "0",
    "1",
    "2",
    "necessarily",
    "going",
    "work",
    "let",
    "demonstrate",
    "let",
    "first",
    "name",
    "first",
    "name",
    "br",
    "ending",
    "index",
    "index",
    "actually",
    "exclusive",
    "full",
    "name",
    "ending",
    "include",
    "within",
    "substring",
    "ending",
    "index",
    "exclusive",
    "increase",
    "ending",
    "index",
    "three",
    "include",
    "one",
    "character",
    "let",
    "get",
    "last",
    "name",
    "let",
    "last",
    "name",
    "equals",
    "following",
    "formula",
    "take",
    "original",
    "string",
    "use",
    "slice",
    "method",
    "state",
    "beginning",
    "index",
    "0",
    "1",
    "2",
    "3",
    "4",
    "mine",
    "four",
    "may",
    "different",
    "depending",
    "name",
    "ending",
    "index",
    "four",
    "5",
    "6",
    "7",
    "remember",
    "last",
    "index",
    "exclusive",
    "going",
    "increase",
    "eight",
    "display",
    "last",
    "name",
    "last",
    "name",
    "last",
    "name",
    "reason",
    "set",
    "beginning",
    "index",
    "four",
    "three",
    "include",
    "space",
    "within",
    "result",
    "see",
    "going",
    "creating",
    "substring",
    "position",
    "way",
    "end",
    "necessarily",
    "need",
    "ending",
    "index",
    "going",
    "remove",
    "ending",
    "index",
    "work",
    "right",
    "need",
    "first",
    "character",
    "string",
    "let",
    "first",
    "char",
    "meaning",
    "character",
    "equals",
    "take",
    "string",
    "use",
    "slice",
    "method",
    "first",
    "character",
    "use",
    "0",
    "comma",
    "1",
    "let",
    "display",
    "first",
    "character",
    "example",
    "mine",
    "b",
    "last",
    "character",
    "let",
    "last",
    "character",
    "full",
    "name",
    "slice",
    "use",
    "negative",
    "index",
    "even",
    "using",
    "negative",
    "index",
    "begin",
    "end",
    "decreasing",
    "number",
    "work",
    "way",
    "towards",
    "beginning",
    "last",
    "character",
    "name",
    "e",
    "would",
    "de",
    "3",
    "four",
    "c",
    "code",
    "negative",
    "indices",
    "work",
    "well",
    "specific",
    "numbers",
    "listed",
    "going",
    "work",
    "name",
    "exactly",
    "change",
    "first",
    "name",
    "instead",
    "bro",
    "broseph",
    "like",
    "joseph",
    "let",
    "display",
    "first",
    "name",
    "last",
    "name",
    "first",
    "name",
    "bro",
    "last",
    "name",
    "f",
    "correct",
    "make",
    "program",
    "dynamic",
    "combine",
    "string",
    "slicing",
    "index",
    "method",
    "search",
    "string",
    "first",
    "instance",
    "space",
    "depending",
    "space",
    "take",
    "first",
    "part",
    "full",
    "name",
    "create",
    "substring",
    "first",
    "name",
    "anything",
    "space",
    "last",
    "name",
    "let",
    "turn",
    "lines",
    "comments",
    "need",
    "anymore",
    "let",
    "first",
    "name",
    "equals",
    "take",
    "full",
    "name",
    "slice",
    "begin",
    "beginning",
    "index",
    "zero",
    "end",
    "going",
    "count",
    "number",
    "characters",
    "time",
    "going",
    "calculate",
    "ending",
    "index",
    "take",
    "full",
    "name",
    "dot",
    "use",
    "index",
    "method",
    "first",
    "index",
    "space",
    "ending",
    "position",
    "wherever",
    "space",
    "display",
    "first",
    "name",
    "uh",
    "let",
    "get",
    "rid",
    "last",
    "name",
    "brosive",
    "last",
    "name",
    "let",
    "last",
    "name",
    "equals",
    "let",
    "copy",
    "line",
    "code",
    "paste",
    "beginning",
    "index",
    "f",
    "full",
    "name",
    "index",
    "space",
    "list",
    "ending",
    "index",
    "need",
    "would",
    "like",
    "extract",
    "every",
    "character",
    "comes",
    "position",
    "need",
    "ending",
    "index",
    "right",
    "let",
    "see",
    "works",
    "brosi",
    "space",
    "code",
    "including",
    "space",
    "remedy",
    "add",
    "plus",
    "one",
    "find",
    "first",
    "index",
    "space",
    "start",
    "position",
    "adding",
    "plus",
    "one",
    "give",
    "every",
    "letter",
    "comes",
    "works",
    "fine",
    "broi",
    "code",
    "right",
    "let",
    "go",
    "exercise",
    "time",
    "list",
    "email",
    "const",
    "email",
    "equals",
    "go",
    "ahead",
    "type",
    "email",
    "make",
    "one",
    "bro",
    "1",
    "extract",
    "first",
    "part",
    "email",
    "stored",
    "username",
    "let",
    "username",
    "equals",
    "going",
    "take",
    "string",
    "email",
    "use",
    "slice",
    "method",
    "going",
    "begin",
    "begin",
    "index",
    "zero",
    "beginning",
    "string",
    "end",
    "end",
    "wherever",
    "symbol",
    "need",
    "search",
    "use",
    "index",
    "method",
    "string",
    "email",
    "index",
    "searching",
    "searching",
    "symbol",
    "let",
    "see",
    "works",
    "username",
    "yep",
    "bro",
    "one",
    "let",
    "get",
    "extension",
    "let",
    "extension",
    "equals",
    "copy",
    "line",
    "code",
    "paste",
    "make",
    "changes",
    "substring",
    "begin",
    "last",
    "one",
    "ended",
    "extension",
    "like",
    "said",
    "would",
    "like",
    "begin",
    "index",
    "add",
    "plus",
    "one",
    "username",
    "br1",
    "extension",
    "right",
    "everybody",
    "string",
    "slicing",
    "process",
    "creating",
    "substring",
    "portion",
    "another",
    "string",
    "create",
    "substring",
    "wo",
    "alter",
    "original",
    "proven",
    "setting",
    "string",
    "constant",
    "ca",
    "change",
    "constant",
    "create",
    "substring",
    "take",
    "string",
    "use",
    "slice",
    "method",
    "list",
    "starting",
    "ending",
    "indices",
    "well",
    "everybody",
    "string",
    "slicing",
    "javascript",
    "everybody",
    "today",
    "video",
    "got",
    "explained",
    "concept",
    "method",
    "chaining",
    "javascript",
    "method",
    "chaining",
    "programming",
    "technique",
    "call",
    "one",
    "method",
    "another",
    "one",
    "continuous",
    "line",
    "code",
    "give",
    "two",
    "examples",
    "program",
    "one",
    "uses",
    "method",
    "chaining",
    "another",
    "able",
    "see",
    "benefits",
    "method",
    "chaining",
    "first",
    "version",
    "program",
    "create",
    "variable",
    "username",
    "ask",
    "user",
    "input",
    "using",
    "window",
    "prompt",
    "text",
    "enter",
    "username",
    "typing",
    "username",
    "would",
    "like",
    "trim",
    "white",
    "space",
    "around",
    "username",
    "take",
    "first",
    "character",
    "make",
    "uppercase",
    "take",
    "characters",
    "make",
    "lowercase",
    "display",
    "output",
    "program",
    "steps",
    "let",
    "reassign",
    "username",
    "equal",
    "username",
    "use",
    "trim",
    "method",
    "remove",
    "wh",
    "space",
    "name",
    "get",
    "first",
    "character",
    "username",
    "capitalize",
    "create",
    "variable",
    "let",
    "letter",
    "equals",
    "username",
    "follow",
    "char",
    "method",
    "character",
    "index",
    "zero",
    "letter",
    "going",
    "variable",
    "hold",
    "first",
    "letter",
    "username",
    "make",
    "letter",
    "uppercase",
    "reassign",
    "letter",
    "equals",
    "letter",
    "use",
    "two",
    "uppercase",
    "method",
    "make",
    "letter",
    "uppercase",
    "rest",
    "characters",
    "would",
    "like",
    "make",
    "lowercase",
    "anything",
    "besides",
    "first",
    "character",
    "create",
    "separate",
    "variable",
    "extra",
    "characters",
    "let",
    "say",
    "extra",
    "chars",
    "short",
    "characters",
    "equals",
    "take",
    "original",
    "username",
    "use",
    "slice",
    "method",
    "slice",
    "username",
    "everything",
    "first",
    "character",
    "name",
    "bro",
    "code",
    "created",
    "slice",
    "everything",
    "first",
    "character",
    "extra",
    "characters",
    "would",
    "r",
    "code",
    "without",
    "b",
    "let",
    "take",
    "extra",
    "characters",
    "make",
    "lowercase",
    "extra",
    "characters",
    "equals",
    "extra",
    "characters",
    "followed",
    "two",
    "lowercase",
    "method",
    "combine",
    "first",
    "letter",
    "uppercase",
    "extra",
    "characters",
    "lowercase",
    "store",
    "within",
    "username",
    "username",
    "equals",
    "letter",
    "plus",
    "extra",
    "characters",
    "display",
    "username",
    "username",
    "program",
    "lot",
    "steps",
    "run",
    "program",
    "enter",
    "username",
    "enter",
    "whites",
    "spaces",
    "type",
    "name",
    "mix",
    "capitalization",
    "press",
    "okay",
    "username",
    "first",
    "letter",
    "uppercase",
    "rest",
    "letters",
    "lowercase",
    "program",
    "work",
    "lot",
    "write",
    "method",
    "chaining",
    "combine",
    "steps",
    "together",
    "avoid",
    "creating",
    "variables",
    "need",
    "letter",
    "extra",
    "characters",
    "method",
    "training",
    "start",
    "combine",
    "steps",
    "getting",
    "username",
    "take",
    "username",
    "equals",
    "take",
    "username",
    "use",
    "trim",
    "method",
    "going",
    "end",
    "method",
    "semicolon",
    "going",
    "end",
    "dot",
    "write",
    "another",
    "method",
    "trimming",
    "username",
    "get",
    "character",
    "index",
    "zero",
    "sto",
    "let",
    "method",
    "chain",
    "make",
    "letter",
    "uppercase",
    "following",
    "two",
    "uppercase",
    "method",
    "work",
    "kind",
    "like",
    "video",
    "game",
    "combo",
    "well",
    "three",
    "hit",
    "combo",
    "boom",
    "boom",
    "boom",
    "take",
    "username",
    "trim",
    "get",
    "first",
    "character",
    "make",
    "uppercase",
    "one",
    "line",
    "code",
    "let",
    "use",
    "string",
    "concatenation",
    "need",
    "take",
    "rest",
    "characters",
    "username",
    "make",
    "lowercase",
    "combine",
    "together",
    "let",
    "take",
    "username",
    "use",
    "trim",
    "method",
    "method",
    "chain",
    "slice",
    "method",
    "slice",
    "string",
    "first",
    "character",
    "method",
    "chain",
    "use",
    "two",
    "lowercase",
    "method",
    "work",
    "username",
    "using",
    "lot",
    "less",
    "lines",
    "code",
    "zoom",
    "see",
    "everything",
    "ander",
    "username",
    "throw",
    "white",
    "spaces",
    "mix",
    "capitalization",
    "appeared",
    "work",
    "method",
    "chaining",
    "programming",
    "technique",
    "call",
    "one",
    "method",
    "right",
    "another",
    "one",
    "continuous",
    "line",
    "code",
    "like",
    "video",
    "game",
    "combo",
    "say",
    "case",
    "trim",
    "username",
    "give",
    "first",
    "character",
    "make",
    "uppercase",
    "method",
    "chaining",
    "combined",
    "results",
    "using",
    "string",
    "catenation",
    "something",
    "separate",
    "entirely",
    "using",
    "method",
    "chaining",
    "help",
    "helps",
    "avoid",
    "creating",
    "named",
    "variables",
    "method",
    "chain",
    "long",
    "become",
    "difficult",
    "read",
    "like",
    "kind",
    "pushing",
    "limits",
    "well",
    "everybody",
    "method",
    "chaining",
    "javascript",
    "hey",
    "yeah",
    "today",
    "going",
    "explain",
    "logical",
    "operators",
    "three",
    "used",
    "combine",
    "manipulate",
    "boolean",
    "values",
    "boolean",
    "values",
    "remember",
    "true",
    "true",
    "false",
    "let",
    "create",
    "program",
    "const",
    "temp",
    "meaning",
    "temperature",
    "would",
    "like",
    "see",
    "temperature",
    "falls",
    "within",
    "certain",
    "range",
    "celsius",
    "let",
    "say",
    "temperature",
    "c",
    "without",
    "using",
    "logical",
    "operators",
    "let",
    "write",
    "temp",
    "greater",
    "zero",
    "weather",
    "good",
    "else",
    "temperature",
    "less",
    "equal",
    "30",
    "c",
    "also",
    "output",
    "weather",
    "good",
    "else",
    "weather",
    "bad",
    "currently",
    "temperature",
    "c",
    "weather",
    "good",
    "change",
    "something",
    "ridiculous",
    "like",
    "c",
    "well",
    "weather",
    "obviously",
    "good",
    "earth",
    "probably",
    "got",
    "hit",
    "asteroid",
    "something",
    "change",
    "temperature",
    "like",
    "c",
    "well",
    "weather",
    "good",
    "either",
    "know",
    "maybe",
    "sun",
    "disappeared",
    "want",
    "output",
    "weather",
    "good",
    "temperature",
    "falls",
    "range",
    "zero",
    "30",
    "going",
    "change",
    "program",
    "temperature",
    "greater",
    "zero",
    "check",
    "another",
    "condition",
    "temperature",
    "greater",
    "equal",
    "30",
    "eliminate",
    "elif",
    "clause",
    "let",
    "check",
    "temperature",
    "temperature",
    "c",
    "well",
    "weather",
    "bad",
    "temperature",
    "c",
    "weather",
    "also",
    "bad",
    "order",
    "us",
    "execute",
    "statement",
    "conditions",
    "need",
    "true",
    "one",
    "one",
    "join",
    "two",
    "conditions",
    "use",
    "double",
    "per",
    "meaning",
    "temperature",
    "25",
    "well",
    "falls",
    "within",
    "range",
    "weather",
    "good",
    "true",
    "true",
    "execute",
    "code",
    "one",
    "false",
    "execute",
    "skip",
    "logical",
    "operator",
    "check",
    "one",
    "condition",
    "check",
    "one",
    "thing",
    "something",
    "else",
    "double",
    "straight",
    "bars",
    "logical",
    "operator",
    "least",
    "one",
    "conditions",
    "needs",
    "true",
    "true",
    "true",
    "run",
    "program",
    "well",
    "weather",
    "good",
    "let",
    "change",
    "temperature",
    "250",
    "weather",
    "good",
    "let",
    "rewrite",
    "program",
    "temp",
    "less",
    "equal",
    "zero",
    "temperature",
    "greater",
    "30",
    "weather",
    "bad",
    "else",
    "weather",
    "good",
    "temperature",
    "250",
    "weather",
    "bad",
    "netive",
    "weather",
    "also",
    "bad",
    "orological",
    "operator",
    "checking",
    "one",
    "condition",
    "true",
    "yes",
    "less",
    "zero",
    "condition",
    "true",
    "one",
    "false",
    "since",
    "least",
    "one",
    "true",
    "execute",
    "code",
    "cover",
    "logical",
    "operator",
    "let",
    "create",
    "new",
    "program",
    "const",
    "sunny",
    "sunny",
    "outside",
    "true",
    "false",
    "create",
    "statement",
    "condition",
    "sunny",
    "true",
    "sunny",
    "else",
    "cloudy",
    "sunny",
    "set",
    "true",
    "sunny",
    "false",
    "cloudy",
    "using",
    "logical",
    "operator",
    "flip",
    "boolean",
    "true",
    "false",
    "false",
    "true",
    "precede",
    "boolean",
    "logical",
    "operator",
    "exclamation",
    "point",
    "checking",
    "sunny",
    "console",
    "log",
    "cloudy",
    "else",
    "sunny",
    "sunny",
    "outside",
    "cloudy",
    "let",
    "change",
    "true",
    "sunny",
    "basic",
    "basally",
    "logical",
    "operator",
    "change",
    "true",
    "false",
    "false",
    "true",
    "right",
    "everybody",
    "short",
    "topic",
    "today",
    "logical",
    "operators",
    "used",
    "combine",
    "manipulate",
    "boolean",
    "values",
    "use",
    "check",
    "see",
    "least",
    "two",
    "conditions",
    "true",
    "least",
    "one",
    "condition",
    "needs",
    "true",
    "opposite",
    "well",
    "introduction",
    "logical",
    "operators",
    "javascript",
    "uh",
    "yeah",
    "today",
    "going",
    "explain",
    "strict",
    "equality",
    "operator",
    "represented",
    "three",
    "equal",
    "signs",
    "dive",
    "let",
    "make",
    "important",
    "distinctions",
    "single",
    "equal",
    "sign",
    "assignment",
    "operator",
    "usually",
    "see",
    "assign",
    "value",
    "variable",
    "comparison",
    "operator",
    "two",
    "equal",
    "signs",
    "used",
    "compare",
    "two",
    "values",
    "see",
    "equal",
    "strict",
    "equality",
    "operator",
    "whopping",
    "three",
    "equal",
    "signs",
    "compares",
    "two",
    "values",
    "equal",
    "data",
    "type",
    "well",
    "let",
    "give",
    "demonstration",
    "suppose",
    "constant",
    "named",
    "pi",
    "pi",
    "equal",
    "pi",
    "example",
    "data",
    "type",
    "number",
    "create",
    "statement",
    "check",
    "pi",
    "equal",
    "string",
    "let",
    "pi",
    "else",
    "pi",
    "number",
    "equal",
    "string",
    "well",
    "according",
    "javascript",
    "pi",
    "using",
    "comparison",
    "operator",
    "care",
    "data",
    "type",
    "care",
    "value",
    "values",
    "equal",
    "using",
    "strict",
    "equality",
    "operator",
    "three",
    "equal",
    "signs",
    "well",
    "javascript",
    "tells",
    "pi",
    "strict",
    "equality",
    "operator",
    "compare",
    "values",
    "also",
    "compare",
    "data",
    "types",
    "well",
    "values",
    "one",
    "number",
    "data",
    "type",
    "comparing",
    "string",
    "match",
    "technically",
    "strictly",
    "comparing",
    "number",
    "number",
    "well",
    "match",
    "pi",
    "one",
    "case",
    "pretty",
    "helpful",
    "accept",
    "user",
    "input",
    "user",
    "input",
    "tends",
    "string",
    "data",
    "type",
    "extra",
    "measure",
    "use",
    "strict",
    "equality",
    "operator",
    "sure",
    "value",
    "number",
    "data",
    "type",
    "also",
    "inequality",
    "operator",
    "return",
    "true",
    "two",
    "values",
    "equal",
    "let",
    "take",
    "shut",
    "time",
    "examine",
    "pi",
    "equal",
    "string",
    "equal",
    "condition",
    "evaluate",
    "true",
    "pi",
    "else",
    "pi",
    "number",
    "equal",
    "string",
    "well",
    "pi",
    "still",
    "using",
    "inequality",
    "operator",
    "values",
    "still",
    "inequality",
    "operator",
    "return",
    "false",
    "strict",
    "inequality",
    "operator",
    "exclamation",
    "point",
    "two",
    "equal",
    "signs",
    "values",
    "data",
    "type",
    "different",
    "example",
    "pi",
    "values",
    "data",
    "type",
    "different",
    "turned",
    "variable",
    "pi",
    "string",
    "well",
    "pi",
    "string",
    "stored",
    "within",
    "pi",
    "equal",
    "string",
    "condition",
    "turns",
    "false",
    "execute",
    "l",
    "state",
    "might",
    "take",
    "little",
    "bit",
    "time",
    "get",
    "used",
    "okay",
    "little",
    "odd",
    "case",
    "see",
    "future",
    "least",
    "familiar",
    "try",
    "use",
    "strict",
    "equality",
    "operator",
    "well",
    "everybody",
    "strict",
    "equality",
    "operator",
    "guess",
    "well",
    "inequality",
    "operator",
    "strict",
    "inequality",
    "operator",
    "javascript",
    "hey",
    "going",
    "everybody",
    "today",
    "going",
    "explain",
    "loops",
    "javascript",
    "loop",
    "loop",
    "repeat",
    "code",
    "condition",
    "true",
    "take",
    "program",
    "example",
    "variable",
    "username",
    "username",
    "equal",
    "empty",
    "string",
    "enter",
    "name",
    "else",
    "hello",
    "username",
    "run",
    "program",
    "check",
    "within",
    "console",
    "well",
    "enter",
    "username",
    "change",
    "program",
    "loop",
    "usern",
    "name",
    "equal",
    "empty",
    "string",
    "repeat",
    "line",
    "code",
    "forever",
    "condition",
    "longer",
    "true",
    "escape",
    "loop",
    "print",
    "message",
    "hello",
    "username",
    "happens",
    "run",
    "program",
    "print",
    "line",
    "code",
    "forever",
    "computer",
    "probably",
    "going",
    "crash",
    "ca",
    "seem",
    "stop",
    "help",
    "okay",
    "think",
    "broke",
    "loop",
    "continue",
    "code",
    "infinitely",
    "condition",
    "true",
    "longer",
    "true",
    "escape",
    "loop",
    "set",
    "username",
    "something",
    "empty",
    "string",
    "well",
    "never",
    "actually",
    "enter",
    "loop",
    "skip",
    "entirely",
    "go",
    "straight",
    "end",
    "first",
    "check",
    "condition",
    "true",
    "get",
    "sucked",
    "wild",
    "loop",
    "execute",
    "forever",
    "usually",
    "want",
    "sort",
    "way",
    "exit",
    "loop",
    "otherwise",
    "get",
    "known",
    "infinite",
    "loop",
    "let",
    "rewrite",
    "program",
    "let",
    "username",
    "equal",
    "empty",
    "string",
    "username",
    "strictly",
    "equal",
    "empty",
    "string",
    "let",
    "ask",
    "user",
    "enter",
    "name",
    "username",
    "equals",
    "use",
    "window",
    "prompt",
    "enter",
    "name",
    "name",
    "okay",
    "let",
    "try",
    "enter",
    "name",
    "press",
    "okay",
    "ca",
    "seem",
    "close",
    "window",
    "type",
    "something",
    "see",
    "clicking",
    "okay",
    "nothing",
    "happening",
    "type",
    "name",
    "press",
    "okay",
    "console",
    "displays",
    "hello",
    "whatever",
    "name",
    "benefit",
    "wild",
    "loop",
    "repeat",
    "code",
    "condition",
    "longer",
    "true",
    "since",
    "populated",
    "username",
    "username",
    "equal",
    "empty",
    "string",
    "filled",
    "username",
    "characters",
    "instead",
    "press",
    "cancel",
    "hello",
    "null",
    "null",
    "means",
    "value",
    "username",
    "equal",
    "null",
    "press",
    "cancel",
    "button",
    "let",
    "append",
    "condition",
    "username",
    "strictly",
    "equal",
    "null",
    "able",
    "continue",
    "type",
    "something",
    "escape",
    "hit",
    "canc",
    "cancel",
    "one",
    "conditions",
    "true",
    "execute",
    "code",
    "forever",
    "let",
    "type",
    "name",
    "escape",
    "loop",
    "also",
    "another",
    "variation",
    "loop",
    "known",
    "loop",
    "works",
    "move",
    "condition",
    "end",
    "place",
    "preedee",
    "set",
    "curly",
    "braces",
    "always",
    "execute",
    "code",
    "least",
    "check",
    "condition",
    "end",
    "using",
    "loop",
    "necessarily",
    "need",
    "set",
    "username",
    "set",
    "undefined",
    "set",
    "username",
    "undefined",
    "use",
    "standard",
    "loop",
    "never",
    "execute",
    "loop",
    "username",
    "equals",
    "undefined",
    "equal",
    "empty",
    "string",
    "value",
    "null",
    "skip",
    "loop",
    "entirely",
    "loop",
    "another",
    "variation",
    "loop",
    "code",
    "first",
    "check",
    "condition",
    "end",
    "different",
    "ways",
    "write",
    "program",
    "right",
    "let",
    "go",
    "another",
    "example",
    "create",
    "three",
    "variables",
    "let",
    "logged",
    "logged",
    "false",
    "begin",
    "log",
    "type",
    "matching",
    "username",
    "declare",
    "username",
    "sign",
    "password",
    "let",
    "create",
    "loop",
    "escape",
    "loop",
    "let",
    "say",
    "use",
    "logical",
    "operator",
    "loged",
    "logged",
    "true",
    "escape",
    "loop",
    "ask",
    "user",
    "username",
    "username",
    "equals",
    "window",
    "prompt",
    "enter",
    "username",
    "let",
    "ask",
    "password",
    "well",
    "password",
    "equals",
    "enter",
    "password",
    "add",
    "statement",
    "within",
    "wild",
    "loop",
    "check",
    "see",
    "username",
    "strictly",
    "equal",
    "make",
    "username",
    "user",
    "name",
    "password",
    "strictly",
    "equal",
    "password",
    "like",
    "password",
    "username",
    "password",
    "match",
    "values",
    "log",
    "logged",
    "equal",
    "true",
    "confirmation",
    "message",
    "logged",
    "else",
    "let",
    "another",
    "message",
    "invalid",
    "credentials",
    "please",
    "try",
    "right",
    "let",
    "see",
    "works",
    "enter",
    "username",
    "going",
    "press",
    "okay",
    "enter",
    "password",
    "type",
    "something",
    "legitimate",
    "type",
    "password",
    "uh",
    "invalid",
    "credentials",
    "please",
    "try",
    "type",
    "username",
    "type",
    "username",
    "sure",
    "matches",
    "username",
    "password",
    "logged",
    "since",
    "set",
    "logged",
    "true",
    "go",
    "back",
    "beginning",
    "loop",
    "condition",
    "longer",
    "true",
    "logged",
    "since",
    "logged",
    "escape",
    "loop",
    "another",
    "variation",
    "loop",
    "let",
    "cut",
    "condition",
    "along",
    "add",
    "end",
    "add",
    "beginning",
    "check",
    "see",
    "logged",
    "end",
    "pretty",
    "much",
    "thing",
    "one",
    "exception",
    "program",
    "different",
    "set",
    "logged",
    "true",
    "begin",
    "still",
    "receive",
    "prompt",
    "type",
    "username",
    "type",
    "password",
    "currently",
    "logged",
    "continue",
    "wild",
    "loop",
    "used",
    "standard",
    "loop",
    "begin",
    "logged",
    "well",
    "never",
    "ask",
    "never",
    "enter",
    "loop",
    "logged",
    "since",
    "logged",
    "right",
    "everybody",
    "loops",
    "repeat",
    "code",
    "condition",
    "true",
    "condition",
    "remains",
    "true",
    "execute",
    "code",
    "forever",
    "longer",
    "true",
    "well",
    "everybody",
    "loops",
    "javascript",
    "right",
    "going",
    "people",
    "today",
    "going",
    "discuss",
    "loops",
    "loop",
    "repeat",
    "code",
    "limited",
    "amount",
    "times",
    "loop",
    "loop",
    "repeat",
    "code",
    "infinitely",
    "loop",
    "something",
    "certain",
    "limited",
    "amount",
    "times",
    "example",
    "let",
    "say",
    "would",
    "like",
    "display",
    "word",
    "hello",
    "three",
    "times",
    "loop",
    "write",
    "something",
    "like",
    "create",
    "loop",
    "type",
    "four",
    "parenthesis",
    "curly",
    "braces",
    "within",
    "set",
    "parenthesis",
    "three",
    "statements",
    "first",
    "create",
    "temporary",
    "counter",
    "much",
    "like",
    "assigning",
    "variable",
    "let",
    "create",
    "counter",
    "named",
    "let",
    "common",
    "naming",
    "convention",
    "counters",
    "within",
    "loop",
    "meaning",
    "index",
    "let",
    "equal",
    "number",
    "would",
    "like",
    "start",
    "let",
    "start",
    "zero",
    "semicolon",
    "first",
    "statement",
    "create",
    "counter",
    "keep",
    "track",
    "number",
    "iterations",
    "next",
    "statement",
    "condition",
    "continue",
    "loop",
    "continue",
    "loop",
    "long",
    "less",
    "equal",
    "two",
    "going",
    "execute",
    "loop",
    "three",
    "times",
    "0",
    "1",
    "2",
    "would",
    "total",
    "three",
    "third",
    "statement",
    "increment",
    "decrement",
    "counter",
    "let",
    "increment",
    "counter",
    "one",
    "iteration",
    "typing",
    "loop",
    "set",
    "zero",
    "continue",
    "long",
    "less",
    "equal",
    "two",
    "iteration",
    "increment",
    "1",
    "means",
    "execute",
    "loop",
    "three",
    "times",
    "going",
    "execute",
    "iteration",
    "let",
    "hello",
    "display",
    "word",
    "hello",
    "three",
    "times",
    "yep",
    "hello",
    "three",
    "instead",
    "see",
    "first",
    "iteration",
    "counter",
    "zero",
    "one",
    "two",
    "wanted",
    "count",
    "10",
    "could",
    "change",
    "condition",
    "less",
    "10",
    "begin",
    "zero",
    "count",
    "9",
    "need",
    "1",
    "10",
    "set",
    "beginning",
    "1",
    "continue",
    "long",
    "less",
    "equal",
    "10",
    "numbers",
    "1",
    "10",
    "using",
    "loop",
    "even",
    "increment",
    "different",
    "number",
    "instead",
    "incrementing",
    "counter",
    "one",
    "let",
    "increment",
    "two",
    "2",
    "count",
    "twos",
    "1",
    "3",
    "5",
    "7",
    "9",
    "want",
    "start",
    "two",
    "change",
    "counter",
    "start",
    "two",
    "count",
    "2",
    "10",
    "increment",
    "two",
    "2",
    "4",
    "6",
    "8",
    "10",
    "would",
    "like",
    "count",
    "let",
    "start",
    "10",
    "count",
    "zero",
    "let",
    "equal",
    "10",
    "continue",
    "long",
    "greater",
    "zero",
    "iusus",
    "decrement",
    "hey",
    "fun",
    "escape",
    "loop",
    "let",
    "happy",
    "new",
    "year",
    "counting",
    "midnight",
    "new",
    "year",
    "eve",
    "10",
    "9",
    "8",
    "7",
    "6",
    "5",
    "4",
    "3",
    "2",
    "1",
    "happy",
    "new",
    "year",
    "could",
    "count",
    "two",
    "2",
    "10",
    "8642",
    "three",
    "whatever",
    "number",
    "10741",
    "happy",
    "new",
    "year",
    "whatever",
    "number",
    "want",
    "going",
    "cover",
    "continue",
    "break",
    "time",
    "count",
    "20",
    "need",
    "loop",
    "create",
    "counter",
    "let",
    "equal",
    "set",
    "1",
    "first",
    "statement",
    "condition",
    "continue",
    "long",
    "less",
    "equal",
    "20",
    "increment",
    "one",
    "iteration",
    "test",
    "let",
    "numbers",
    "1",
    "20",
    "continue",
    "skip",
    "iteration",
    "going",
    "write",
    "statement",
    "equal",
    "superstition",
    "13",
    "unlucky",
    "number",
    "let",
    "say",
    "equal",
    "13",
    "skip",
    "iteration",
    "know",
    "weird",
    "example",
    "equal",
    "13",
    "let",
    "continue",
    "continue",
    "skip",
    "iteration",
    "loop",
    "else",
    "whatever",
    "run",
    "program",
    "run",
    "program",
    "skip",
    "13",
    "jump",
    "12",
    "14",
    "ever",
    "need",
    "skip",
    "iteration",
    "use",
    "continue",
    "keyword",
    "break",
    "break",
    "break",
    "loop",
    "entirely",
    "seen",
    "keyword",
    "switches",
    "break",
    "switch",
    "equals",
    "13",
    "exit",
    "loop",
    "entirely",
    "example",
    "count",
    "12",
    "since",
    "equals",
    "13",
    "break",
    "loop",
    "entirely",
    "continue",
    "rest",
    "iterations",
    "right",
    "everybody",
    "four",
    "loops",
    "repeat",
    "code",
    "limited",
    "amount",
    "times",
    "three",
    "statements",
    "write",
    "create",
    "temporary",
    "variable",
    "serves",
    "counter",
    "condition",
    "continue",
    "increment",
    "decrement",
    "counter",
    "four",
    "loops",
    "javascript",
    "hey",
    "going",
    "everybody",
    "video",
    "going",
    "create",
    "number",
    "guessing",
    "game",
    "using",
    "javascript",
    "go",
    "ahead",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "let",
    "get",
    "started",
    "everybody",
    "first",
    "thing",
    "going",
    "need",
    "set",
    "minimum",
    "maximum",
    "numbers",
    "number",
    "guessing",
    "game",
    "create",
    "two",
    "constants",
    "const",
    "minum",
    "minimum",
    "set",
    "minimum",
    "one",
    "feel",
    "free",
    "pick",
    "different",
    "number",
    "would",
    "like",
    "maximum",
    "const",
    "max",
    "num",
    "set",
    "maximum",
    "100",
    "got",
    "generate",
    "random",
    "number",
    "minimum",
    "maximum",
    "inclusively",
    "let",
    "create",
    "another",
    "constant",
    "const",
    "answer",
    "generate",
    "random",
    "number",
    "1",
    "100",
    "minimum",
    "maximum",
    "type",
    "math",
    "random",
    "random",
    "method",
    "math",
    "generate",
    "random",
    "number",
    "zero",
    "1",
    "multiply",
    "within",
    "set",
    "parentheses",
    "range",
    "maximum",
    "minus",
    "minimum",
    "add",
    "plus",
    "one",
    "let",
    "see",
    "far",
    "test",
    "everything",
    "going",
    "answer",
    "okay",
    "let",
    "inspect",
    "go",
    "console",
    "answer",
    "currently",
    "56",
    "point",
    "bunch",
    "decimal",
    "places",
    "round",
    "answer",
    "enclosing",
    "equation",
    "math",
    "floor",
    "round",
    "okay",
    "let",
    "see",
    "get",
    "39",
    "89",
    "20",
    "7",
    "71",
    "27",
    "177",
    "46",
    "okay",
    "seems",
    "like",
    "working",
    "higher",
    "minimum",
    "let",
    "say",
    "50",
    "100",
    "well",
    "7",
    "22",
    "43",
    "numbers",
    "minimum",
    "minimum",
    "besides",
    "one",
    "add",
    "end",
    "equation",
    "minimum",
    "okay",
    "let",
    "see",
    "works",
    "need",
    "random",
    "number",
    "50",
    "100",
    "equation",
    "work",
    "97",
    "80",
    "79",
    "52",
    "right",
    "seems",
    "like",
    "working",
    "equation",
    "need",
    "generate",
    "random",
    "number",
    "minimum",
    "set",
    "maximum",
    "let",
    "change",
    "minimum",
    "back",
    "one",
    "make",
    "sure",
    "maximum",
    "100",
    "right",
    "let",
    "move",
    "step",
    "two",
    "create",
    "variable",
    "named",
    "attempts",
    "keep",
    "track",
    "attempts",
    "takes",
    "user",
    "set",
    "attempts",
    "zero",
    "let",
    "guess",
    "declare",
    "variable",
    "assign",
    "quite",
    "yet",
    "take",
    "care",
    "later",
    "also",
    "create",
    "boolean",
    "variable",
    "named",
    "running",
    "set",
    "true",
    "reason",
    "boolean",
    "variable",
    "running",
    "exit",
    "game",
    "set",
    "running",
    "equal",
    "false",
    "keep",
    "game",
    "running",
    "use",
    "loop",
    "running",
    "equals",
    "true",
    "boolean",
    "variable",
    "necessarily",
    "need",
    "portion",
    "equals",
    "true",
    "set",
    "running",
    "boolean",
    "true",
    "keep",
    "game",
    "going",
    "want",
    "exit",
    "game",
    "set",
    "running",
    "equal",
    "false",
    "end",
    "need",
    "accept",
    "user",
    "input",
    "window",
    "prompt",
    "set",
    "guest",
    "equal",
    "window",
    "prompt",
    "use",
    "template",
    "literal",
    "guess",
    "number",
    "add",
    "placeholder",
    "minimum",
    "add",
    "another",
    "placeholder",
    "maximum",
    "right",
    "test",
    "going",
    "type",
    "guess",
    "well",
    "guess",
    "something",
    "need",
    "show",
    "guess",
    "number",
    "one",
    "100",
    "guess",
    "something",
    "right",
    "middle",
    "50",
    "let",
    "inspect",
    "go",
    "console",
    "user",
    "input",
    "50",
    "string",
    "data",
    "type",
    "need",
    "convert",
    "number",
    "comparisons",
    "get",
    "guess",
    "let",
    "reassign",
    "typ",
    "cast",
    "number",
    "type",
    "let",
    "try",
    "guess",
    "number",
    "1",
    "100",
    "type",
    "50",
    "okay",
    "inspect",
    "console",
    "guess",
    "50",
    "number",
    "data",
    "type",
    "type",
    "something",
    "number",
    "like",
    "string",
    "characters",
    "pizza",
    "result",
    "type",
    "cast",
    "characters",
    "know",
    "number",
    "z",
    "n",
    "end",
    "number",
    "pizza",
    "ca",
    "converted",
    "number",
    "unfortunately",
    "delete",
    "line",
    "code",
    "longer",
    "need",
    "add",
    "statement",
    "function",
    "check",
    "see",
    "something",
    "number",
    "number",
    "function",
    "guess",
    "number",
    "evaluates",
    "true",
    "let",
    "add",
    "alert",
    "window",
    "alert",
    "please",
    "enter",
    "valid",
    "number",
    "guess",
    "number",
    "1",
    "100",
    "type",
    "pizza",
    "please",
    "enter",
    "valid",
    "number",
    "somebody",
    "types",
    "guess",
    "minimum",
    "maximum",
    "add",
    "else",
    "statement",
    "else",
    "guess",
    "minimum",
    "guess",
    "maximum",
    "window",
    "alert",
    "please",
    "enter",
    "valid",
    "number",
    "guess",
    "number",
    "1",
    "100",
    "type",
    "150",
    "maximum",
    "please",
    "enter",
    "valid",
    "number",
    "please",
    "enter",
    "number",
    "1",
    "100",
    "netive",
    "please",
    "enter",
    "valid",
    "number",
    "user",
    "guess",
    "number",
    "range",
    "minimum",
    "maximum",
    "execute",
    "l",
    "statement",
    "reach",
    "l",
    "statement",
    "means",
    "valid",
    "number",
    "increase",
    "attempts",
    "variable",
    "one",
    "attempts",
    "increment",
    "guess",
    "yes",
    "less",
    "answer",
    "window",
    "alert",
    "low",
    "try",
    "else",
    "guess",
    "greater",
    "answer",
    "window",
    "alert",
    "high",
    "try",
    "guess",
    "lower",
    "answer",
    "guess",
    "higher",
    "answer",
    "means",
    "guess",
    "must",
    "equal",
    "answer",
    "within",
    "else",
    "statement",
    "congratulate",
    "user",
    "right",
    "answer",
    "window",
    "alert",
    "correct",
    "answer",
    "probably",
    "use",
    "template",
    "literal",
    "inserting",
    "variables",
    "answer",
    "let",
    "user",
    "know",
    "many",
    "attempts",
    "took",
    "took",
    "variable",
    "attempts",
    "word",
    "attempts",
    "end",
    "lse",
    "statement",
    "move",
    "running",
    "equals",
    "false",
    "within",
    "lse",
    "statement",
    "end",
    "exit",
    "game",
    "longer",
    "want",
    "play",
    "correct",
    "answer",
    "right",
    "work",
    "let",
    "try",
    "guess",
    "number",
    "1",
    "100",
    "guess",
    "something",
    "right",
    "middle",
    "50",
    "low",
    "try",
    "okay",
    "answer",
    "50",
    "100",
    "75",
    "high",
    "50",
    "75",
    "62",
    "two",
    "low",
    "68",
    "two",
    "high",
    "62",
    "68",
    "65",
    "high",
    "6",
    "three",
    "low",
    "64",
    "yeah",
    "correct",
    "answer",
    "64",
    "took",
    "seven",
    "attempts",
    "exit",
    "right",
    "everybody",
    "number",
    "guessing",
    "game",
    "javascript",
    "hey",
    "welcome",
    "back",
    "today",
    "got",
    "explain",
    "functions",
    "javascript",
    "function",
    "section",
    "reusable",
    "code",
    "declare",
    "code",
    "use",
    "whenever",
    "want",
    "call",
    "function",
    "execute",
    "code",
    "example",
    "create",
    "function",
    "sing",
    "happy",
    "birthday",
    "whenever",
    "call",
    "function",
    "going",
    "sing",
    "happy",
    "birthday",
    "declare",
    "function",
    "type",
    "function",
    "unique",
    "function",
    "name",
    "let",
    "name",
    "function",
    "happy",
    "birthday",
    "well",
    "happy",
    "birthday",
    "function",
    "add",
    "set",
    "parentheses",
    "add",
    "set",
    "curly",
    "braces",
    "code",
    "write",
    "set",
    "curly",
    "braces",
    "reuse",
    "whenever",
    "want",
    "want",
    "exactly",
    "function",
    "create",
    "lyrics",
    "happy",
    "birthday",
    "song",
    "happy",
    "birthday",
    "let",
    "repeat",
    "happy",
    "birthday",
    "dear",
    "happy",
    "birthday",
    "trust",
    "going",
    "somewhere",
    "function",
    "run",
    "program",
    "currently",
    "anything",
    "execute",
    "code",
    "within",
    "function",
    "function",
    "call",
    "function",
    "name",
    "happy",
    "birthday",
    "add",
    "set",
    "parenthesis",
    "execute",
    "code",
    "yep",
    "happy",
    "birthday",
    "happy",
    "birthday",
    "happy",
    "birthday",
    "dear",
    "happy",
    "birthday",
    "call",
    "function",
    "type",
    "function",
    "name",
    "add",
    "set",
    "parentheses",
    "like",
    "think",
    "parentheses",
    "two",
    "telephones",
    "talking",
    "remember",
    "call",
    "function",
    "think",
    "going",
    "happen",
    "well",
    "going",
    "execute",
    "function",
    "twice",
    "three",
    "times",
    "execute",
    "three",
    "times",
    "many",
    "times",
    "want",
    "fact",
    "function",
    "section",
    "reusable",
    "code",
    "reuse",
    "whenever",
    "want",
    "call",
    "send",
    "function",
    "values",
    "variables",
    "let",
    "change",
    "happy",
    "birthday",
    "function",
    "turn",
    "line",
    "template",
    "literal",
    "let",
    "replace",
    "placeholder",
    "add",
    "username",
    "add",
    "one",
    "one",
    "line",
    "use",
    "template",
    "literal",
    "insert",
    "placeholder",
    "age",
    "years",
    "old",
    "run",
    "program",
    "uncaught",
    "reference",
    "error",
    "username",
    "defined",
    "happy",
    "birthday",
    "happy",
    "birthday",
    "function",
    "know",
    "username",
    "age",
    "send",
    "information",
    "function",
    "call",
    "within",
    "set",
    "parentheses",
    "would",
    "like",
    "send",
    "function",
    "let",
    "send",
    "name",
    "whatever",
    "values",
    "place",
    "within",
    "function",
    "sure",
    "comma",
    "separate",
    "go",
    "ahead",
    "send",
    "happy",
    "birthday",
    "function",
    "name",
    "age",
    "one",
    "step",
    "missing",
    "known",
    "arguments",
    "data",
    "send",
    "function",
    "need",
    "matching",
    "set",
    "parameters",
    "within",
    "parentheses",
    "declaration",
    "way",
    "define",
    "temporary",
    "variables",
    "comma",
    "separated",
    "define",
    "username",
    "parameter",
    "well",
    "age",
    "function",
    "work",
    "properly",
    "happy",
    "birthday",
    "dear",
    "bro",
    "code",
    "25",
    "years",
    "old",
    "parameters",
    "send",
    "function",
    "arguments",
    "let",
    "call",
    "function",
    "send",
    "different",
    "information",
    "happy",
    "birthday",
    "uh",
    "spongebob",
    "spongebob",
    "know",
    "old",
    "according",
    "spongebob",
    "lore",
    "let",
    "say",
    "30",
    "years",
    "old",
    "happy",
    "birthday",
    "dear",
    "spongebob",
    "30",
    "years",
    "old",
    "patrick",
    "time",
    "birthday",
    "everybody",
    "gets",
    "birthday",
    "patrick",
    "37",
    "happy",
    "birthday",
    "dear",
    "patrick",
    "37",
    "years",
    "old",
    "benefit",
    "passing",
    "arguments",
    "function",
    "function",
    "receives",
    "data",
    "something",
    "order",
    "parameters",
    "matter",
    "switch",
    "age",
    "username",
    "happens",
    "happy",
    "birthday",
    "dear",
    "37",
    "patrick",
    "years",
    "old",
    "arguments",
    "passing",
    "function",
    "want",
    "sure",
    "parameters",
    "match",
    "right",
    "going",
    "cover",
    "return",
    "keyword",
    "create",
    "function",
    "examples",
    "create",
    "function",
    "add",
    "two",
    "numbers",
    "function",
    "add",
    "need",
    "two",
    "arguments",
    "name",
    "x",
    "invoke",
    "function",
    "would",
    "like",
    "add",
    "x",
    "together",
    "create",
    "temporary",
    "variable",
    "named",
    "result",
    "store",
    "result",
    "result",
    "x",
    "going",
    "add",
    "two",
    "numbers",
    "together",
    "let",
    "add",
    "two",
    "three",
    "together",
    "let",
    "see",
    "happens",
    "well",
    "nothing",
    "appears",
    "happen",
    "well",
    "send",
    "data",
    "back",
    "place",
    "call",
    "function",
    "need",
    "use",
    "return",
    "keyword",
    "let",
    "return",
    "result",
    "2",
    "3",
    "5",
    "function",
    "resolves",
    "think",
    "function",
    "becoming",
    "value",
    "five",
    "probably",
    "want",
    "something",
    "value",
    "store",
    "within",
    "variable",
    "let",
    "answer",
    "equal",
    "add",
    "2",
    "three",
    "let",
    "answer",
    "five",
    "return",
    "something",
    "function",
    "resolve",
    "function",
    "think",
    "becoming",
    "whatever",
    "returned",
    "case",
    "result",
    "otherwise",
    "place",
    "function",
    "within",
    "plan",
    "store",
    "add",
    "two",
    "three",
    "display",
    "result",
    "five",
    "shortcut",
    "necessarily",
    "need",
    "declare",
    "variable",
    "within",
    "function",
    "could",
    "shorten",
    "return",
    "x",
    "also",
    "valid",
    "return",
    "five",
    "okay",
    "let",
    "create",
    "subtract",
    "function",
    "function",
    "subtract",
    "return",
    "x",
    "need",
    "matching",
    "set",
    "parameters",
    "forgot",
    "okay",
    "let",
    "see",
    "happens",
    "subtract",
    "3",
    "2",
    "give",
    "us",
    "1",
    "let",
    "multiply",
    "function",
    "multiply",
    "multiply",
    "x",
    "together",
    "return",
    "x",
    "multiply",
    "2",
    "3",
    "6",
    "divide",
    "need",
    "parameters",
    "x",
    "return",
    "x",
    "invoke",
    "divide",
    "function",
    "pass",
    "two",
    "three",
    "result",
    "repeating",
    "let",
    "go",
    "complex",
    "example",
    "create",
    "function",
    "determine",
    "number",
    "even",
    "odd",
    "function",
    "function",
    "even",
    "one",
    "parameter",
    "number",
    "invoke",
    "function",
    "pass",
    "number",
    "receive",
    "number",
    "check",
    "see",
    "number",
    "even",
    "one",
    "solution",
    "use",
    "statement",
    "number",
    "modulus",
    "2",
    "modulus",
    "gives",
    "remainder",
    "division",
    "number",
    "divides",
    "two",
    "evenly",
    "equal",
    "zero",
    "yes",
    "using",
    "strict",
    "equality",
    "operator",
    "trying",
    "use",
    "often",
    "number",
    "divisible",
    "two",
    "let",
    "return",
    "boolean",
    "value",
    "true",
    "else",
    "return",
    "false",
    "okay",
    "let",
    "let",
    "check",
    "see",
    "number",
    "even",
    "let",
    "start",
    "10",
    "10",
    "even",
    "true",
    "11",
    "false",
    "12",
    "12",
    "even",
    "kind",
    "cool",
    "would",
    "like",
    "shortcut",
    "use",
    "trary",
    "operator",
    "would",
    "look",
    "something",
    "like",
    "going",
    "return",
    "condition",
    "checking",
    "number",
    "modulus",
    "2",
    "strictly",
    "equal",
    "zero",
    "question",
    "mark",
    "tary",
    "operator",
    "question",
    "mark",
    "true",
    "return",
    "boolean",
    "value",
    "true",
    "colon",
    "false",
    "false",
    "12",
    "even",
    "true",
    "13",
    "even",
    "odd",
    "14",
    "true",
    "right",
    "last",
    "example",
    "think",
    "probably",
    "getting",
    "hang",
    "create",
    "function",
    "see",
    "email",
    "valid",
    "function",
    "valid",
    "email",
    "kind",
    "information",
    "going",
    "send",
    "set",
    "parameter",
    "need",
    "email",
    "invoke",
    "valid",
    "email",
    "function",
    "pass",
    "email",
    "type",
    "email",
    "make",
    "one",
    "bro",
    "invoke",
    "function",
    "string",
    "text",
    "become",
    "email",
    "check",
    "see",
    "email",
    "contains",
    "character",
    "use",
    "statement",
    "email",
    "method",
    "includes",
    "method",
    "email",
    "includes",
    "character",
    "return",
    "true",
    "valid",
    "email",
    "ad",
    "character",
    "else",
    "return",
    "false",
    "email",
    "valid",
    "true",
    "let",
    "remove",
    "character",
    "brof",
    "maybe",
    "website",
    "something",
    "false",
    "let",
    "try",
    "another",
    "email",
    "going",
    "invoke",
    "function",
    "valid",
    "email",
    "actually",
    "go",
    "know",
    "going",
    "pop",
    "uh",
    "valid",
    "email",
    "right",
    "zucker",
    "borg",
    "valid",
    "email",
    "contains",
    "character",
    "something",
    "like",
    "returning",
    "either",
    "true",
    "false",
    "use",
    "tary",
    "operator",
    "return",
    "condition",
    "going",
    "check",
    "email",
    "includes",
    "character",
    "add",
    "tary",
    "operator",
    "true",
    "return",
    "true",
    "else",
    "return",
    "false",
    "right",
    "everybody",
    "introduction",
    "functions",
    "section",
    "reusable",
    "code",
    "declare",
    "code",
    "use",
    "whenever",
    "want",
    "call",
    "function",
    "execute",
    "code",
    "need",
    "send",
    "function",
    "data",
    "need",
    "matching",
    "set",
    "arguments",
    "parameters",
    "return",
    "something",
    "return",
    "keyword",
    "practice",
    "future",
    "worry",
    "introduction",
    "functions",
    "javascript",
    "hey",
    "going",
    "everybody",
    "today",
    "going",
    "explain",
    "variable",
    "scope",
    "javascript",
    "variable",
    "scope",
    "variable",
    "recognized",
    "accessible",
    "beginner",
    "tutorial",
    "discussing",
    "differences",
    "local",
    "scope",
    "global",
    "scope",
    "suppose",
    "variable",
    "let",
    "x",
    "1",
    "variable",
    "name",
    "needs",
    "unique",
    "within",
    "scope",
    "could",
    "declare",
    "another",
    "variable",
    "named",
    "x",
    "set",
    "x",
    "equal",
    "2",
    "run",
    "syntax",
    "error",
    "identifier",
    "x",
    "already",
    "declared",
    "reuse",
    "variable",
    "names",
    "program",
    "long",
    "within",
    "different",
    "scopes",
    "demonstrate",
    "let",
    "create",
    "two",
    "functions",
    "function",
    "function",
    "one",
    "within",
    "function",
    "one",
    "declare",
    "variable",
    "x",
    "x",
    "1",
    "whatever",
    "x",
    "let",
    "create",
    "function",
    "two",
    "copying",
    "function",
    "one",
    "paste",
    "function",
    "2",
    "x",
    "equal",
    "2",
    "x",
    "invoke",
    "function",
    "one",
    "x",
    "1",
    "invoke",
    "function",
    "2",
    "well",
    "x",
    "2",
    "two",
    "variables",
    "name",
    "program",
    "legal",
    "long",
    "different",
    "scopes",
    "variable",
    "declared",
    "inside",
    "function",
    "local",
    "scope",
    "anytime",
    "declare",
    "variable",
    "within",
    "set",
    "curly",
    "braces",
    "naming",
    "conflicts",
    "within",
    "different",
    "scopes",
    "way",
    "declare",
    "variables",
    "name",
    "done",
    "x",
    "functions",
    "ca",
    "see",
    "inside",
    "functions",
    "within",
    "function",
    "two",
    "declare",
    "variable",
    "equal",
    "2",
    "x",
    "within",
    "function",
    "one",
    "invoke",
    "function",
    "one",
    "uncaught",
    "reference",
    "error",
    "defined",
    "function",
    "one",
    "one",
    "functions",
    "ca",
    "see",
    "inside",
    "functions",
    "function",
    "one",
    "idea",
    "declared",
    "within",
    "another",
    "function",
    "kind",
    "like",
    "functions",
    "neighboring",
    "houses",
    "ca",
    "necessarily",
    "see",
    "inside",
    "neighbor",
    "house",
    "function",
    "one",
    "idea",
    "variable",
    "likewise",
    "function",
    "two",
    "invoke",
    "function",
    "two",
    "idea",
    "x",
    "variables",
    "declared",
    "inside",
    "function",
    "local",
    "scope",
    "global",
    "scope",
    "variable",
    "variable",
    "declared",
    "outside",
    "function",
    "function",
    "one",
    "let",
    "get",
    "rid",
    "x",
    "x",
    "function",
    "two",
    "get",
    "rid",
    "x",
    "declare",
    "variable",
    "outside",
    "functions",
    "let",
    "x",
    "equal",
    "3",
    "invoke",
    "function",
    "one",
    "display",
    "x",
    "x",
    "three",
    "let",
    "invoke",
    "function",
    "two",
    "x",
    "three",
    "variable",
    "declared",
    "outside",
    "function",
    "global",
    "scope",
    "available",
    "whole",
    "program",
    "global",
    "variable",
    "recognized",
    "accessible",
    "anywhere",
    "hey",
    "bro",
    "future",
    "editing",
    "video",
    "thought",
    "really",
    "good",
    "analogy",
    "global",
    "variables",
    "let",
    "say",
    "function",
    "house",
    "live",
    "function",
    "one",
    "neighbor",
    "lives",
    "function",
    "two",
    "see",
    "inside",
    "function",
    "one",
    "ca",
    "see",
    "inside",
    "neighbor",
    "house",
    "function",
    "two",
    "anything",
    "declared",
    "global",
    "scope",
    "found",
    "within",
    "houses",
    "outside",
    "everybody",
    "plainly",
    "see",
    "kind",
    "like",
    "creepy",
    "stalker",
    "street",
    "light",
    "morning",
    "everybody",
    "inside",
    "house",
    "still",
    "see",
    "everything",
    "outside",
    "analogy",
    "thought",
    "kind",
    "accurate",
    "describe",
    "global",
    "scope",
    "however",
    "recommended",
    "declare",
    "global",
    "variables",
    "large",
    "program",
    "naming",
    "conflicts",
    "large",
    "program",
    "might",
    "accidentally",
    "reuse",
    "variable",
    "x",
    "change",
    "somewhere",
    "x",
    "common",
    "name",
    "variable",
    "large",
    "program",
    "would",
    "stick",
    "local",
    "variables",
    "small",
    "program",
    "like",
    "fine",
    "inside",
    "function",
    "use",
    "local",
    "instance",
    "variable",
    "first",
    "found",
    "look",
    "global",
    "scope",
    "within",
    "function",
    "one",
    "let",
    "declare",
    "x",
    "one",
    "within",
    "function",
    "two",
    "declare",
    "x",
    "2",
    "within",
    "global",
    "scope",
    "xal",
    "3",
    "declare",
    "function",
    "one",
    "think",
    "x",
    "equal",
    "1",
    "3",
    "well",
    "one",
    "two",
    "variables",
    "name",
    "different",
    "scopes",
    "use",
    "local",
    "version",
    "first",
    "x",
    "one",
    "three",
    "invoke",
    "function",
    "2",
    "well",
    "xal",
    "2",
    "local",
    "variables",
    "available",
    "would",
    "use",
    "global",
    "version",
    "instead",
    "x",
    "equals",
    "3",
    "right",
    "everybody",
    "variable",
    "scope",
    "variable",
    "recognized",
    "accessible",
    "local",
    "scope",
    "anytime",
    "variable",
    "declared",
    "within",
    "set",
    "krly",
    "braces",
    "variable",
    "accessible",
    "anything",
    "within",
    "set",
    "krly",
    "braces",
    "global",
    "scope",
    "variable",
    "declared",
    "outside",
    "functions",
    "available",
    "throughout",
    "whole",
    "program",
    "well",
    "everybody",
    "variable",
    "scope",
    "javascript",
    "hey",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "create",
    "temperature",
    "conversion",
    "program",
    "using",
    "html",
    "css",
    "javascript",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "let",
    "begin",
    "everybody",
    "begin",
    "within",
    "html",
    "file",
    "make",
    "sure",
    "linked",
    "script",
    "javascript",
    "file",
    "fill",
    "later",
    "within",
    "body",
    "document",
    "create",
    "form",
    "element",
    "within",
    "form",
    "create",
    "h1",
    "heading",
    "title",
    "program",
    "name",
    "temperature",
    "conversion",
    "good",
    "h1",
    "element",
    "create",
    "input",
    "element",
    "tag",
    "text",
    "box",
    "since",
    "going",
    "converting",
    "temperatures",
    "set",
    "type",
    "number",
    "give",
    "us",
    "arrows",
    "increase",
    "decrease",
    "number",
    "type",
    "one",
    "need",
    "going",
    "give",
    "text",
    "box",
    "id",
    "textbox",
    "referring",
    "text",
    "box",
    "id",
    "later",
    "also",
    "going",
    "go",
    "ahead",
    "set",
    "initial",
    "value",
    "zero",
    "increase",
    "decrease",
    "number",
    "like",
    "said",
    "little",
    "small",
    "css",
    "increase",
    "size",
    "going",
    "create",
    "two",
    "radio",
    "buttons",
    "along",
    "labels",
    "input",
    "input",
    "tag",
    "type",
    "radio",
    "id",
    "radio",
    "button",
    "convert",
    "fahrenheit",
    "never",
    "spell",
    "fahrenheit",
    "want",
    "radio",
    "buttons",
    "group",
    "set",
    "name",
    "group",
    "unit",
    "oh",
    "looks",
    "like",
    "misspelled",
    "type",
    "go",
    "going",
    "place",
    "radio",
    "button",
    "new",
    "line",
    "within",
    "first",
    "input",
    "element",
    "add",
    "line",
    "break",
    "right",
    "first",
    "radio",
    "button",
    "create",
    "label",
    "label",
    "lab",
    "4",
    "2",
    "fah",
    "text",
    "celsius",
    "fahrenheit",
    "prefer",
    "could",
    "create",
    "like",
    "arrow",
    "really",
    "like",
    "look",
    "let",
    "use",
    "emoji",
    "instead",
    "windows",
    "create",
    "emoji",
    "hold",
    "windows",
    "semicolon",
    "arrow",
    "work",
    "click",
    "label",
    "also",
    "able",
    "select",
    "radio",
    "button",
    "four",
    "attribute",
    "id",
    "attribute",
    "radio",
    "button",
    "okay",
    "let",
    "copy",
    "first",
    "radio",
    "button",
    "label",
    "paste",
    "change",
    "fahrenheit",
    "celsius",
    "let",
    "switch",
    "around",
    "fahrenheit",
    "celsius",
    "celsius",
    "also",
    "going",
    "add",
    "line",
    "break",
    "first",
    "label",
    "right",
    "well",
    "google",
    "wants",
    "translate",
    "web",
    "page",
    "german",
    "english",
    "probably",
    "word",
    "fahrenheit",
    "guessing",
    "create",
    "button",
    "type",
    "button",
    "text",
    "submit",
    "onclick",
    "attribute",
    "buttons",
    "onclick",
    "click",
    "button",
    "execute",
    "javascript",
    "function",
    "eventually",
    "creating",
    "function",
    "named",
    "convert",
    "actually",
    "let",
    "take",
    "care",
    "forget",
    "within",
    "javascript",
    "file",
    "function",
    "convert",
    "fill",
    "later",
    "click",
    "button",
    "execute",
    "convert",
    "function",
    "lastly",
    "going",
    "display",
    "result",
    "whatever",
    "new",
    "temperature",
    "use",
    "paragraph",
    "element",
    "id",
    "result",
    "placeholder",
    "going",
    "type",
    "select",
    "unit",
    "right",
    "far",
    "good",
    "let",
    "style",
    "program",
    "css",
    "sure",
    "save",
    "html",
    "file",
    "move",
    "css",
    "first",
    "change",
    "body",
    "document",
    "let",
    "change",
    "font",
    "family",
    "body",
    "document",
    "pick",
    "aiel",
    "backup",
    "son",
    "serif",
    "change",
    "background",
    "color",
    "color",
    "like",
    "using",
    "hsl",
    "values",
    "let",
    "type",
    "color",
    "black",
    "change",
    "color",
    "hsl",
    "go",
    "light",
    "gray",
    "color",
    "like",
    "95",
    "background",
    "going",
    "slightly",
    "light",
    "gray",
    "fill",
    "form",
    "section",
    "pure",
    "white",
    "select",
    "one",
    "element",
    "going",
    "header",
    "pick",
    "color",
    "using",
    "hsl",
    "values",
    "let",
    "go",
    "know",
    "blue",
    "feel",
    "free",
    "pick",
    "different",
    "color",
    "would",
    "like",
    "bad",
    "fill",
    "form",
    "form",
    "contains",
    "pretty",
    "much",
    "elements",
    "let",
    "select",
    "form",
    "change",
    "background",
    "color",
    "copy",
    "line",
    "paste",
    "make",
    "pure",
    "white",
    "text",
    "align",
    "center",
    "everything",
    "within",
    "form",
    "everything",
    "centered",
    "set",
    "max",
    "width",
    "form",
    "right",
    "taking",
    "100",
    "width",
    "web",
    "browser",
    "max",
    "width",
    "350",
    "pixels",
    "would",
    "like",
    "form",
    "within",
    "middle",
    "aligned",
    "horizontally",
    "set",
    "margin",
    "auto",
    "automatically",
    "center",
    "add",
    "little",
    "bit",
    "padding",
    "around",
    "elements",
    "within",
    "form",
    "padding",
    "let",
    "25",
    "pixels",
    "smooth",
    "corners",
    "form",
    "using",
    "border",
    "radius",
    "border",
    "radius",
    "10",
    "pixels",
    "add",
    "box",
    "shadow",
    "box",
    "shadow",
    "first",
    "value",
    "horizontal",
    "offset",
    "let",
    "set",
    "5",
    "pixels",
    "vertical",
    "offset",
    "set",
    "5",
    "pixels",
    "third",
    "value",
    "blur",
    "radius",
    "right",
    "fairly",
    "concentrated",
    "let",
    "stick",
    "15",
    "pixels",
    "bad",
    "also",
    "select",
    "color",
    "going",
    "use",
    "hsl",
    "values",
    "also",
    "change",
    "transparency",
    "set",
    "mine",
    "30",
    "approximately",
    "30",
    "bad",
    "box",
    "shadow",
    "going",
    "change",
    "text",
    "box",
    "text",
    "box",
    "id",
    "text",
    "box",
    "let",
    "select",
    "element",
    "id",
    "set",
    "width",
    "50",
    "going",
    "take",
    "50",
    "width",
    "available",
    "let",
    "text",
    "align",
    "center",
    "number",
    "going",
    "right",
    "middle",
    "let",
    "change",
    "font",
    "size",
    "let",
    "2",
    "em",
    "200",
    "add",
    "border",
    "pixel",
    "solid",
    "pick",
    "hsl",
    "values",
    "color",
    "make",
    "little",
    "transparent",
    "maybe",
    "like",
    "80",
    "let",
    "select",
    "border",
    "radius",
    "pixels",
    "smooth",
    "corners",
    "add",
    "little",
    "bit",
    "margin",
    "text",
    "box",
    "15",
    "pixels",
    "good",
    "going",
    "push",
    "radio",
    "buttons",
    "give",
    "text",
    "box",
    "space",
    "let",
    "work",
    "radio",
    "buttons",
    "next",
    "selecting",
    "labels",
    "let",
    "take",
    "every",
    "label",
    "change",
    "font",
    "size",
    "little",
    "little",
    "bigger",
    "em",
    "150",
    "make",
    "font",
    "weight",
    "bold",
    "bold",
    "let",
    "select",
    "button",
    "selecting",
    "button",
    "add",
    "little",
    "bit",
    "margin",
    "button",
    "15",
    "pixels",
    "let",
    "change",
    "background",
    "color",
    "button",
    "pick",
    "color",
    "pick",
    "red",
    "going",
    "use",
    "hsl",
    "values",
    "like",
    "ah",
    "decent",
    "change",
    "font",
    "size",
    "button",
    "em",
    "150",
    "remove",
    "border",
    "border",
    "none",
    "add",
    "padding",
    "10",
    "pixels",
    "top",
    "bottom",
    "button",
    "15",
    "sides",
    "round",
    "corners",
    "border",
    "radius",
    "border",
    "radius",
    "5",
    "pixels",
    "going",
    "change",
    "font",
    "color",
    "color",
    "white",
    "hover",
    "cursor",
    "button",
    "change",
    "cursor",
    "pointer",
    "appears",
    "work",
    "hover",
    "button",
    "use",
    "hover",
    "pse",
    "sudo",
    "class",
    "change",
    "background",
    "color",
    "button",
    "selecting",
    "button",
    "select",
    "hover",
    "sudo",
    "class",
    "make",
    "background",
    "color",
    "little",
    "bit",
    "darker",
    "change",
    "lightness",
    "hsl",
    "value",
    "like",
    "10",
    "darker",
    "60",
    "change",
    "50",
    "background",
    "change",
    "hover",
    "button",
    "lastly",
    "let",
    "change",
    "css",
    "properties",
    "result",
    "id",
    "result",
    "result",
    "make",
    "font",
    "size",
    "little",
    "bit",
    "bigger",
    "font",
    "size",
    "em",
    "good",
    "make",
    "font",
    "weight",
    "bold",
    "font",
    "weight",
    "bold",
    "right",
    "css",
    "need",
    "sure",
    "save",
    "everything",
    "move",
    "javascript",
    "file",
    "right",
    "like",
    "top",
    "javascript",
    "program",
    "declare",
    "constants",
    "variables",
    "need",
    "let",
    "get",
    "text",
    "box",
    "set",
    "constant",
    "const",
    "text",
    "box",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "selecting",
    "text",
    "box",
    "need",
    "two",
    "fahrenheit",
    "radio",
    "button",
    "let",
    "copy",
    "line",
    "paste",
    "get",
    "id",
    "two",
    "fahrenheit",
    "const",
    "2",
    "fahrenheit",
    "get",
    "element",
    "id",
    "2",
    "fahrenheit",
    "2",
    "celsius",
    "2",
    "celsius",
    "const",
    "2",
    "celsius",
    "id",
    "2",
    "celsius",
    "radio",
    "button",
    "copy",
    "line",
    "paste",
    "need",
    "result",
    "display",
    "result",
    "result",
    "get",
    "element",
    "id",
    "result",
    "within",
    "html",
    "file",
    "necessarily",
    "need",
    "select",
    "unit",
    "anymore",
    "add",
    "later",
    "somebody",
    "presses",
    "submit",
    "without",
    "selecting",
    "radio",
    "button",
    "need",
    "let",
    "temp",
    "temperature",
    "click",
    "submit",
    "button",
    "execute",
    "function",
    "convert",
    "going",
    "within",
    "function",
    "begin",
    "statement",
    "check",
    "see",
    "two",
    "fahrenheit",
    "radio",
    "button",
    "selected",
    "take",
    "two",
    "fahrenheit",
    "use",
    "checked",
    "property",
    "radio",
    "button",
    "checked",
    "going",
    "return",
    "true",
    "going",
    "false",
    "else",
    "2",
    "celsius",
    "checked",
    "celsius",
    "checked",
    "perform",
    "different",
    "actions",
    "else",
    "let",
    "change",
    "content",
    "result",
    "result",
    "text",
    "content",
    "equals",
    "select",
    "unit",
    "let",
    "see",
    "works",
    "sure",
    "save",
    "everything",
    "going",
    "select",
    "radio",
    "button",
    "going",
    "submit",
    "correct",
    "select",
    "unit",
    "select",
    "one",
    "let",
    "sure",
    "two",
    "radio",
    "buttons",
    "working",
    "temporarily",
    "going",
    "change",
    "result",
    "within",
    "else",
    "statement",
    "selected",
    "two",
    "fahrenheit",
    "selected",
    "2",
    "celsius",
    "want",
    "sure",
    "radio",
    "buttons",
    "working",
    "let",
    "convert",
    "2",
    "fahrenheit",
    "submit",
    "selected",
    "2",
    "fahrenheit",
    "select",
    "second",
    "radio",
    "button",
    "selected",
    "2",
    "celsius",
    "okay",
    "know",
    "program",
    "reading",
    "radio",
    "buttons",
    "successfully",
    "longer",
    "need",
    "two",
    "lines",
    "code",
    "going",
    "get",
    "number",
    "text",
    "box",
    "store",
    "within",
    "temp",
    "temp",
    "temperature",
    "temp",
    "equals",
    "take",
    "text",
    "box",
    "access",
    "value",
    "within",
    "accept",
    "user",
    "input",
    "string",
    "data",
    "type",
    "going",
    "typ",
    "cast",
    "value",
    "number",
    "use",
    "math",
    "okay",
    "going",
    "take",
    "temperature",
    "convert",
    "fahrenheit",
    "formula",
    "temp",
    "equals",
    "temp",
    "9",
    "5",
    "32",
    "going",
    "update",
    "text",
    "content",
    "result",
    "result",
    "text",
    "content",
    "equals",
    "temperature",
    "going",
    "add",
    "plus",
    "fahrenheit",
    "add",
    "degree",
    "symbol",
    "windows",
    "hold",
    "alt",
    "type",
    "0176",
    "numpad",
    "fahrenheit",
    "let",
    "type",
    "100",
    "de",
    "celsius",
    "fahrenheit",
    "gives",
    "us",
    "fah",
    "10",
    "would",
    "50",
    "c",
    "would",
    "0",
    "f",
    "would",
    "like",
    "add",
    "precision",
    "following",
    "temperature",
    "method",
    "fixed",
    "add",
    "one",
    "point",
    "precision",
    "give",
    "us",
    "one",
    "digit",
    "past",
    "decimal",
    "place",
    "cus",
    "converted",
    "fahrenheit",
    "de",
    "f",
    "c",
    "f",
    "let",
    "copy",
    "three",
    "lines",
    "paste",
    "within",
    "else",
    "statement",
    "keep",
    "line",
    "change",
    "formula",
    "temp",
    "equals",
    "within",
    "parentheses",
    "temp",
    "32",
    "5",
    "9",
    "change",
    "fit",
    "celsius",
    "fah",
    "converted",
    "celsius",
    "zero",
    "100",
    "right",
    "everybody",
    "simple",
    "temperature",
    "conversion",
    "program",
    "using",
    "javascript",
    "html",
    "css",
    "hey",
    "going",
    "everybody",
    "today",
    "going",
    "explain",
    "arrays",
    "javascript",
    "think",
    "array",
    "variable",
    "like",
    "structure",
    "hold",
    "one",
    "value",
    "example",
    "let",
    "say",
    "variable",
    "named",
    "fruit",
    "go",
    "ahead",
    "pick",
    "pick",
    "fruit",
    "pick",
    "apple",
    "variable",
    "store",
    "one",
    "value",
    "turn",
    "variable",
    "array",
    "store",
    "one",
    "value",
    "enclosing",
    "values",
    "set",
    "straight",
    "brackets",
    "variable",
    "fruit",
    "array",
    "store",
    "one",
    "value",
    "sure",
    "value",
    "comma",
    "separated",
    "time",
    "add",
    "orange",
    "banana",
    "make",
    "obvious",
    "array",
    "going",
    "add",
    "variable",
    "name",
    "plural",
    "mandatory",
    "helps",
    "readability",
    "array",
    "fruits",
    "let",
    "show",
    "something",
    "array",
    "fruits",
    "well",
    "javascript",
    "going",
    "print",
    "elements",
    "array",
    "item",
    "value",
    "known",
    "element",
    "three",
    "elements",
    "need",
    "access",
    "individual",
    "element",
    "following",
    "array",
    "add",
    "index",
    "number",
    "enclosed",
    "straight",
    "brackets",
    "would",
    "like",
    "element",
    "first",
    "position",
    "would",
    "index",
    "zero",
    "would",
    "give",
    "apple",
    "fruits",
    "index",
    "one",
    "would",
    "orange",
    "fruits",
    "index",
    "two",
    "banana",
    "attempt",
    "access",
    "element",
    "index",
    "3",
    "well",
    "undefined",
    "three",
    "elements",
    "within",
    "array",
    "0",
    "1",
    "2",
    "arrays",
    "always",
    "begin",
    "zero",
    "even",
    "change",
    "one",
    "elements",
    "accessing",
    "array",
    "given",
    "element",
    "let",
    "access",
    "array",
    "fruits",
    "index",
    "zero",
    "set",
    "equal",
    "coconut",
    "coconut",
    "orange",
    "banana",
    "let",
    "change",
    "fruits",
    "index",
    "one",
    "coconut",
    "apple",
    "coconut",
    "banana",
    "index",
    "2",
    "coconut",
    "apple",
    "orange",
    "coconut",
    "set",
    "fruits",
    "index",
    "3",
    "coconut",
    "let",
    "console",
    "log",
    "fruits",
    "index",
    "3",
    "add",
    "new",
    "element",
    "array",
    "otherwise",
    "add",
    "element",
    "method",
    "arrays",
    "fruits",
    "push",
    "push",
    "element",
    "end",
    "add",
    "coconut",
    "end",
    "array",
    "apple",
    "orange",
    "banana",
    "coconut",
    "pop",
    "pop",
    "going",
    "remove",
    "last",
    "element",
    "apple",
    "orange",
    "undefined",
    "unshift",
    "method",
    "add",
    "el",
    "beginning",
    "take",
    "array",
    "use",
    "unshift",
    "method",
    "unshift",
    "add",
    "mango",
    "beginning",
    "array",
    "mango",
    "apple",
    "orange",
    "banana",
    "shift",
    "remove",
    "element",
    "beginning",
    "fruits",
    "shift",
    "orange",
    "banana",
    "last",
    "two",
    "elements",
    "undefined",
    "get",
    "length",
    "array",
    "length",
    "property",
    "let",
    "create",
    "new",
    "variable",
    "let",
    "num",
    "fruits",
    "store",
    "number",
    "fruits",
    "type",
    "array",
    "name",
    "length",
    "let",
    "number",
    "fruits",
    "three",
    "fruits",
    "add",
    "another",
    "add",
    "coconut",
    "end",
    "four",
    "get",
    "length",
    "array",
    "length",
    "property",
    "type",
    "array",
    "name",
    "length",
    "find",
    "index",
    "element",
    "match",
    "let",
    "index",
    "equals",
    "let",
    "search",
    "apple",
    "fruits",
    "index",
    "method",
    "searching",
    "let",
    "search",
    "apple",
    "display",
    "index",
    "apple",
    "located",
    "index",
    "zero",
    "let",
    "search",
    "orange",
    "index",
    "one",
    "banana",
    "two",
    "coconut",
    "three",
    "search",
    "element",
    "exist",
    "like",
    "maino",
    "well",
    "method",
    "return",
    "ne1",
    "could",
    "helpful",
    "within",
    "statement",
    "check",
    "see",
    "method",
    "returns",
    "negative",
    "1",
    "means",
    "element",
    "found",
    "let",
    "user",
    "know",
    "index",
    "equals",
    "display",
    "element",
    "found",
    "would",
    "like",
    "loop",
    "elements",
    "display",
    "easier",
    "way",
    "use",
    "loop",
    "four",
    "three",
    "statements",
    "need",
    "counter",
    "sort",
    "index",
    "let",
    "equal",
    "z",
    "first",
    "statement",
    "continue",
    "long",
    "less",
    "fruits",
    "array",
    "length",
    "property",
    "increment",
    "one",
    "four",
    "elements",
    "execute",
    "loop",
    "four",
    "times",
    "iteration",
    "fruits",
    "array",
    "index",
    "instead",
    "like",
    "z",
    "0",
    "1",
    "2",
    "3",
    "hard",
    "number",
    "use",
    "counter",
    "index",
    "let",
    "get",
    "rid",
    "line",
    "loop",
    "elements",
    "array",
    "print",
    "individually",
    "using",
    "loop",
    "even",
    "increment",
    "different",
    "number",
    "like",
    "two",
    "equals",
    "2",
    "displaying",
    "apple",
    "banana",
    "set",
    "index",
    "one",
    "increment",
    "two",
    "display",
    "orange",
    "coconut",
    "using",
    "loop",
    "different",
    "ways",
    "display",
    "elements",
    "array",
    "need",
    "display",
    "order",
    "array",
    "reverse",
    "change",
    "around",
    "set",
    "counter",
    "length",
    "array",
    "continue",
    "long",
    "greater",
    "equal",
    "zero",
    "iusus",
    "one",
    "change",
    "going",
    "make",
    "undefined",
    "coconut",
    "banana",
    "orange",
    "apple",
    "length",
    "array",
    "four",
    "access",
    "array",
    "fruits",
    "index",
    "4",
    "would",
    "0",
    "1",
    "2",
    "3",
    "bounds",
    "going",
    "set",
    "index",
    "fruits",
    "length",
    "minus",
    "one",
    "0",
    "1",
    "2",
    "3",
    "length",
    "4",
    "minus",
    "1",
    "total",
    "three",
    "printing",
    "array",
    "reverse",
    "coconut",
    "banana",
    "orange",
    "apple",
    "also",
    "enhanced",
    "loop",
    "shortcut",
    "displaying",
    "elements",
    "array",
    "write",
    "something",
    "like",
    "let",
    "fruit",
    "array",
    "fruits",
    "really",
    "variable",
    "anything",
    "like",
    "write",
    "singular",
    "version",
    "array",
    "name",
    "iteration",
    "display",
    "fruit",
    "apple",
    "orange",
    "banana",
    "coconut",
    "enhanced",
    "loop",
    "kind",
    "like",
    "shortcut",
    "displaying",
    "elements",
    "array",
    "array",
    "name",
    "know",
    "like",
    "meets",
    "could",
    "say",
    "let",
    "meat",
    "meats",
    "display",
    "meat",
    "course",
    "still",
    "fruit",
    "shortcut",
    "use",
    "sort",
    "array",
    "use",
    "sort",
    "method",
    "fruits",
    "sort",
    "sort",
    "elements",
    "alphabetical",
    "order",
    "apple",
    "banana",
    "coconut",
    "orange",
    "sort",
    "reverse",
    "order",
    "tack",
    "reverse",
    "method",
    "end",
    "fruits",
    "sort",
    "method",
    "reverse",
    "method",
    "backwards",
    "reverse",
    "alphabetical",
    "order",
    "orange",
    "coconut",
    "banana",
    "apple",
    "right",
    "everybody",
    "introduction",
    "arrays",
    "lot",
    "practice",
    "future",
    "remember",
    "everything",
    "okay",
    "array",
    "variable",
    "like",
    "structure",
    "hold",
    "one",
    "value",
    "variable",
    "hold",
    "one",
    "value",
    "array",
    "hold",
    "many",
    "well",
    "everybody",
    "arrays",
    "javascript",
    "hey",
    "everybody",
    "today",
    "going",
    "explain",
    "spread",
    "operator",
    "javascript",
    "spread",
    "operator",
    "represented",
    "three",
    "dots",
    "spread",
    "operator",
    "allows",
    "iterable",
    "array",
    "string",
    "expanded",
    "two",
    "separate",
    "elements",
    "unpack",
    "elements",
    "example",
    "let",
    "create",
    "array",
    "numbers",
    "pick",
    "numbers",
    "pick",
    "1",
    "five",
    "one",
    "2",
    "3",
    "4",
    "5",
    "test",
    "let",
    "array",
    "numbers",
    "array",
    "would",
    "like",
    "find",
    "greatest",
    "value",
    "well",
    "one",
    "way",
    "could",
    "let",
    "declare",
    "maximum",
    "let",
    "maximum",
    "going",
    "variable",
    "equals",
    "use",
    "max",
    "method",
    "math",
    "would",
    "happen",
    "place",
    "array",
    "within",
    "method",
    "display",
    "maximum",
    "number",
    "using",
    "max",
    "method",
    "ca",
    "place",
    "array",
    "directly",
    "within",
    "method",
    "however",
    "utilizing",
    "spread",
    "operator",
    "spread",
    "array",
    "different",
    "elements",
    "preedee",
    "array",
    "spread",
    "operator",
    "going",
    "unpack",
    "elements",
    "run",
    "program",
    "result",
    "five",
    "use",
    "spread",
    "operator",
    "imagine",
    "opening",
    "box",
    "taking",
    "contents",
    "inside",
    "like",
    "unpacking",
    "something",
    "let",
    "find",
    "minimum",
    "time",
    "let",
    "minimum",
    "equals",
    "pass",
    "array",
    "numbers",
    "use",
    "operator",
    "spread",
    "array",
    "different",
    "elements",
    "minimum",
    "value",
    "array",
    "would",
    "one",
    "also",
    "strings",
    "separate",
    "string",
    "different",
    "characters",
    "let",
    "let",
    "create",
    "username",
    "equals",
    "type",
    "name",
    "first",
    "name",
    "last",
    "name",
    "create",
    "array",
    "named",
    "letters",
    "letters",
    "equals",
    "create",
    "new",
    "array",
    "let",
    "take",
    "username",
    "string",
    "use",
    "spread",
    "operator",
    "display",
    "letters",
    "letters",
    "name",
    "divided",
    "different",
    "characters",
    "array",
    "characters",
    "array",
    "characters",
    "join",
    "back",
    "together",
    "insert",
    "characters",
    "element",
    "method",
    "chain",
    "join",
    "method",
    "array",
    "add",
    "dash",
    "character",
    "username",
    "one",
    "string",
    "dash",
    "character",
    "okay",
    "time",
    "going",
    "create",
    "array",
    "fruits",
    "make",
    "shallow",
    "copy",
    "array",
    "using",
    "spread",
    "operator",
    "add",
    "fruits",
    "add",
    "apple",
    "orange",
    "banana",
    "fruits",
    "create",
    "shallow",
    "copy",
    "array",
    "using",
    "spread",
    "operator",
    "shallow",
    "copy",
    "means",
    "different",
    "data",
    "structure",
    "contains",
    "identical",
    "values",
    "create",
    "copy",
    "fruits",
    "named",
    "new",
    "fruits",
    "equals",
    "array",
    "let",
    "take",
    "fruits",
    "array",
    "use",
    "spread",
    "operator",
    "let",
    "display",
    "new",
    "fruits",
    "identical",
    "copy",
    "yep",
    "apparent",
    "change",
    "two",
    "different",
    "arrays",
    "contain",
    "identical",
    "elements",
    "combine",
    "two",
    "arrays",
    "using",
    "spread",
    "operator",
    "let",
    "create",
    "array",
    "vegetables",
    "let",
    "add",
    "carrots",
    "celery",
    "potatoes",
    "rename",
    "new",
    "fruits",
    "foods",
    "let",
    "add",
    "array",
    "fruits",
    "spreading",
    "comma",
    "spread",
    "sprad",
    "vegetables",
    "array",
    "display",
    "array",
    "foods",
    "array",
    "contains",
    "elements",
    "two",
    "arrays",
    "fruits",
    "vegetables",
    "use",
    "spread",
    "operator",
    "combine",
    "arrays",
    "even",
    "capability",
    "append",
    "separate",
    "elements",
    "along",
    "unpacking",
    "arrays",
    "also",
    "add",
    "eggs",
    "milk",
    "elements",
    "two",
    "arrays",
    "plus",
    "extras",
    "egg",
    "milk",
    "right",
    "everybody",
    "spread",
    "operator",
    "three",
    "dots",
    "allows",
    "iterable",
    "array",
    "string",
    "expanded",
    "separate",
    "elements",
    "well",
    "everybody",
    "spread",
    "operator",
    "javascript",
    "hey",
    "hey",
    "hey",
    "going",
    "everybody",
    "today",
    "going",
    "explain",
    "rest",
    "parameters",
    "javascript",
    "rest",
    "parameters",
    "parameter",
    "prefixed",
    "three",
    "dots",
    "allow",
    "function",
    "work",
    "variable",
    "number",
    "arguments",
    "bundling",
    "array",
    "similar",
    "spread",
    "operator",
    "talked",
    "last",
    "video",
    "spread",
    "operator",
    "expands",
    "array",
    "separate",
    "elements",
    "rest",
    "parameters",
    "opposite",
    "bundle",
    "separate",
    "elements",
    "array",
    "spread",
    "spread",
    "array",
    "separate",
    "elements",
    "rest",
    "parameters",
    "bundle",
    "separate",
    "elements",
    "array",
    "effectively",
    "opposite",
    "could",
    "rest",
    "parameters",
    "useful",
    "let",
    "give",
    "example",
    "say",
    "bunch",
    "different",
    "food",
    "const",
    "food",
    "one",
    "food",
    "one",
    "equals",
    "pizza",
    "create",
    "different",
    "food",
    "variables",
    "let",
    "start",
    "four",
    "food",
    "one",
    "food",
    "two",
    "food",
    "three",
    "food",
    "four",
    "pizza",
    "hamburger",
    "hot",
    "dog",
    "sushi",
    "going",
    "create",
    "function",
    "uses",
    "rest",
    "parameters",
    "going",
    "output",
    "food",
    "send",
    "pretend",
    "opening",
    "fridge",
    "imagine",
    "food",
    "fridge",
    "oh",
    "open",
    "fridge",
    "fridge",
    "short",
    "refrigerator",
    "use",
    "rest",
    "parameters",
    "need",
    "three",
    "dots",
    "going",
    "stick",
    "food",
    "array",
    "array",
    "name",
    "let",
    "say",
    "foods",
    "descriptive",
    "going",
    "array",
    "foods",
    "going",
    "call",
    "function",
    "open",
    "fridge",
    "send",
    "function",
    "variable",
    "number",
    "arguments",
    "method",
    "going",
    "display",
    "array",
    "food",
    "one",
    "pizza",
    "food",
    "2",
    "hamburger",
    "hamburger",
    "also",
    "within",
    "array",
    "food",
    "three",
    "hot",
    "dog",
    "food",
    "four",
    "sushi",
    "let",
    "add",
    "one",
    "food",
    "let",
    "add",
    "ramen",
    "food",
    "five",
    "ramen",
    "add",
    "food",
    "five",
    "see",
    "send",
    "function",
    "number",
    "arguments",
    "would",
    "like",
    "function",
    "designed",
    "accept",
    "number",
    "arguments",
    "could",
    "combine",
    "function",
    "spread",
    "operator",
    "displaying",
    "foods",
    "array",
    "elements",
    "array",
    "could",
    "separate",
    "back",
    "separate",
    "elements",
    "using",
    "spread",
    "operator",
    "three",
    "dots",
    "rest",
    "parameters",
    "rest",
    "parameters",
    "used",
    "parameters",
    "spread",
    "operator",
    "used",
    "whenever",
    "array",
    "sort",
    "collection",
    "something",
    "combine",
    "rest",
    "parameters",
    "spread",
    "operator",
    "display",
    "separate",
    "elements",
    "even",
    "use",
    "rest",
    "parameters",
    "stick",
    "elements",
    "within",
    "array",
    "time",
    "going",
    "create",
    "separate",
    "function",
    "get",
    "food",
    "use",
    "rest",
    "parameters",
    "array",
    "name",
    "foods",
    "going",
    "return",
    "foods",
    "take",
    "separate",
    "elements",
    "stick",
    "within",
    "array",
    "return",
    "array",
    "going",
    "create",
    "new",
    "array",
    "const",
    "foods",
    "equals",
    "call",
    "get",
    "food",
    "method",
    "pass",
    "variable",
    "amount",
    "arguments",
    "let",
    "pass",
    "food",
    "one",
    "food",
    "two",
    "food",
    "three",
    "food",
    "four",
    "food",
    "five",
    "got",
    "display",
    "array",
    "foods",
    "rest",
    "parameters",
    "used",
    "combine",
    "elements",
    "bundle",
    "array",
    "want",
    "return",
    "array",
    "whatever",
    "want",
    "let",
    "go",
    "second",
    "example",
    "create",
    "method",
    "sum",
    "bunch",
    "numbers",
    "together",
    "function",
    "sum",
    "use",
    "rest",
    "parameter",
    "accept",
    "number",
    "arguments",
    "array",
    "name",
    "numbers",
    "within",
    "method",
    "result",
    "result",
    "equals",
    "equal",
    "0",
    "keep",
    "track",
    "current",
    "sum",
    "within",
    "result",
    "create",
    "loop",
    "iterate",
    "array",
    "every",
    "let",
    "number",
    "numbers",
    "take",
    "result",
    "plus",
    "equals",
    "current",
    "number",
    "going",
    "return",
    "result",
    "const",
    "total",
    "equals",
    "function",
    "pass",
    "many",
    "numbers",
    "would",
    "like",
    "let",
    "start",
    "one",
    "oh",
    "probably",
    "display",
    "total",
    "use",
    "template",
    "literal",
    "total",
    "add",
    "placeholder",
    "total",
    "total",
    "1",
    "let",
    "add",
    "arguments",
    "two",
    "total",
    "3",
    "three",
    "6",
    "4",
    "10",
    "5",
    "15",
    "let",
    "create",
    "function",
    "calculate",
    "average",
    "let",
    "copy",
    "sum",
    "function",
    "let",
    "name",
    "function",
    "get",
    "average",
    "returning",
    "result",
    "get",
    "average",
    "divide",
    "result",
    "length",
    "numbers",
    "array",
    "divided",
    "numbers",
    "length",
    "property",
    "give",
    "average",
    "const",
    "total",
    "equals",
    "get",
    "average",
    "maybe",
    "test",
    "scores",
    "one",
    "student",
    "got",
    "75",
    "another",
    "got",
    "100",
    "another",
    "student",
    "85",
    "90",
    "50",
    "let",
    "total",
    "average",
    "80",
    "let",
    "go",
    "example",
    "three",
    "use",
    "rest",
    "parameters",
    "combine",
    "strings",
    "together",
    "create",
    "function",
    "combine",
    "strings",
    "send",
    "title",
    "like",
    "mister",
    "first",
    "name",
    "spongebob",
    "last",
    "name",
    "square",
    "pants",
    "third",
    "still",
    "need",
    "make",
    "function",
    "though",
    "const",
    "full",
    "name",
    "equals",
    "whatever",
    "string",
    "returned",
    "right",
    "let",
    "work",
    "function",
    "function",
    "combine",
    "string",
    "let",
    "make",
    "plural",
    "strings",
    "need",
    "use",
    "rest",
    "parameters",
    "let",
    "name",
    "array",
    "strings",
    "easy",
    "way",
    "return",
    "array",
    "strings",
    "use",
    "join",
    "method",
    "join",
    "strings",
    "together",
    "add",
    "space",
    "string",
    "right",
    "full",
    "name",
    "variable",
    "strings",
    "combined",
    "let",
    "full",
    "name",
    "mr",
    "spongebob",
    "squarepants",
    "third",
    "one",
    "way",
    "could",
    "use",
    "rest",
    "parameters",
    "combine",
    "bunch",
    "strings",
    "one",
    "creating",
    "full",
    "name",
    "right",
    "everybody",
    "rest",
    "parameters",
    "allow",
    "function",
    "work",
    "variable",
    "number",
    "arguments",
    "bundling",
    "array",
    "opposite",
    "spread",
    "operator",
    "spread",
    "operator",
    "expands",
    "array",
    "separate",
    "elements",
    "rest",
    "parameters",
    "bundle",
    "separate",
    "elements",
    "array",
    "well",
    "everybody",
    "rest",
    "parameters",
    "javascript",
    "hey",
    "everybody",
    "today",
    "video",
    "going",
    "use",
    "javascript",
    "html",
    "css",
    "create",
    "dice",
    "roller",
    "program",
    "optional",
    "project",
    "need",
    "images",
    "dice",
    "work",
    "able",
    "find",
    "images",
    "dice",
    "would",
    "save",
    "somewhere",
    "maybe",
    "desktop",
    "images",
    "dice",
    "going",
    "create",
    "new",
    "folder",
    "new",
    "folder",
    "name",
    "folder",
    "diore",
    "images",
    "take",
    "dice",
    "images",
    "move",
    "folder",
    "ready",
    "begin",
    "create",
    "html",
    "elements",
    "need",
    "create",
    "div",
    "section",
    "div",
    "id",
    "container",
    "contain",
    "program",
    "include",
    "h1",
    "heading",
    "text",
    "dice",
    "roller",
    "h1",
    "element",
    "create",
    "label",
    "label",
    "text",
    "number",
    "dice",
    "afterwards",
    "use",
    "input",
    "element",
    "going",
    "zoom",
    "little",
    "bit",
    "temporarily",
    "input",
    "element",
    "type",
    "number",
    "dice",
    "would",
    "like",
    "1",
    "2",
    "3",
    "however",
    "type",
    "characters",
    "would",
    "like",
    "avoid",
    "set",
    "type",
    "attribute",
    "input",
    "element",
    "number",
    "indicating",
    "user",
    "select",
    "number",
    "type",
    "anything",
    "although",
    "ways",
    "circumvent",
    "good",
    "enough",
    "input",
    "element",
    "set",
    "default",
    "value",
    "set",
    "value",
    "attribute",
    "equal",
    "one",
    "default",
    "go",
    "zero",
    "set",
    "minimum",
    "min",
    "attribute",
    "min",
    "equals",
    "1",
    "ca",
    "go",
    "one",
    "select",
    "number",
    "one",
    "create",
    "button",
    "button",
    "text",
    "roll",
    "dice",
    "button",
    "onclick",
    "attribute",
    "keep",
    "spelling",
    "lick",
    "onclick",
    "attribute",
    "set",
    "javascript",
    "function",
    "let",
    "say",
    "roll",
    "dice",
    "still",
    "need",
    "define",
    "function",
    "javascript",
    "button",
    "create",
    "two",
    "div",
    "sections",
    "first",
    "id",
    "dice",
    "result",
    "display",
    "text",
    "numbers",
    "dice",
    "roll",
    "second",
    "development",
    "images",
    "id",
    "dice",
    "images",
    "html",
    "need",
    "let",
    "head",
    "css",
    "file",
    "zoom",
    "back",
    "100",
    "let",
    "select",
    "id",
    "container",
    "container",
    "change",
    "font",
    "family",
    "sance",
    "font",
    "arial",
    "backup",
    "serif",
    "text",
    "al",
    "line",
    "center",
    "increase",
    "font",
    "size",
    "project",
    "going",
    "use",
    "rm",
    "instead",
    "em",
    "working",
    "lot",
    "different",
    "font",
    "sizes",
    "em",
    "font",
    "size",
    "relative",
    "parent",
    "rm",
    "root",
    "specific",
    "project",
    "stick",
    "rm",
    "set",
    "font",
    "weight",
    "bold",
    "let",
    "style",
    "button",
    "next",
    "sel",
    "cting",
    "button",
    "increase",
    "font",
    "size",
    "button",
    "rm",
    "add",
    "little",
    "bit",
    "padding",
    "10",
    "pixels",
    "15",
    "pixels",
    "set",
    "border",
    "radius",
    "round",
    "corners",
    "10",
    "pixels",
    "remove",
    "border",
    "ugly",
    "border",
    "none",
    "pick",
    "background",
    "color",
    "button",
    "pick",
    "something",
    "blue",
    "like",
    "using",
    "hsl",
    "values",
    "something",
    "like",
    "looks",
    "good",
    "change",
    "font",
    "color",
    "white",
    "set",
    "font",
    "weight",
    "bold",
    "bad",
    "hover",
    "cursor",
    "button",
    "change",
    "cursor",
    "pointer",
    "let",
    "change",
    "background",
    "color",
    "button",
    "hover",
    "selecting",
    "hover",
    "suda",
    "class",
    "button",
    "let",
    "take",
    "background",
    "color",
    "increase",
    "lightness",
    "10",
    "change",
    "hover",
    "button",
    "click",
    "button",
    "increase",
    "lightness",
    "even",
    "show",
    "active",
    "button",
    "select",
    "active",
    "pseudo",
    "class",
    "set",
    "lightness",
    "70",
    "click",
    "button",
    "flash",
    "momentarily",
    "let",
    "style",
    "input",
    "element",
    "cuz",
    "barely",
    "see",
    "input",
    "element",
    "need",
    "scroll",
    "let",
    "increase",
    "font",
    "size",
    "two",
    "rm",
    "set",
    "width",
    "of50",
    "pixels",
    "text",
    "align",
    "center",
    "font",
    "weight",
    "bold",
    "html",
    "file",
    "two",
    "empty",
    "div",
    "elements",
    "currently",
    "style",
    "end",
    "get",
    "images",
    "populate",
    "style",
    "last",
    "onclick",
    "attribute",
    "button",
    "set",
    "function",
    "r",
    "dice",
    "need",
    "define",
    "within",
    "javascript",
    "file",
    "define",
    "function",
    "roll",
    "dice",
    "lot",
    "constants",
    "declare",
    "create",
    "constant",
    "number",
    "dice",
    "would",
    "like",
    "value",
    "input",
    "element",
    "define",
    "const",
    "num",
    "dice",
    "number",
    "dice",
    "need",
    "roll",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "input",
    "element",
    "actually",
    "forgot",
    "oh",
    "set",
    "id",
    "okay",
    "let",
    "okay",
    "input",
    "element",
    "id",
    "num",
    "dice",
    "num",
    "dice",
    "would",
    "like",
    "value",
    "access",
    "value",
    "whatever",
    "input",
    "element",
    "next",
    "constant",
    "going",
    "get",
    "dice",
    "result",
    "empty",
    "div",
    "section",
    "const",
    "dice",
    "result",
    "equals",
    "let",
    "copy",
    "line",
    "code",
    "need",
    "value",
    "need",
    "id",
    "dice",
    "result",
    "let",
    "dice",
    "images",
    "copy",
    "paste",
    "const",
    "dice",
    "images",
    "id",
    "dice",
    "images",
    "create",
    "two",
    "empty",
    "arrays",
    "const",
    "values",
    "empty",
    "array",
    "store",
    "dice",
    "rolls",
    "numbers",
    "need",
    "array",
    "images",
    "const",
    "images",
    "images",
    "dice",
    "point",
    "time",
    "going",
    "create",
    "loop",
    "loop",
    "every",
    "dice",
    "roll",
    "generate",
    "random",
    "number",
    "one",
    "six",
    "dice",
    "rolling",
    "rolling",
    "three",
    "dice",
    "need",
    "loop",
    "iterate",
    "three",
    "times",
    "let",
    "create",
    "loop",
    "let",
    "equal",
    "0",
    "continue",
    "long",
    "less",
    "number",
    "dice",
    "increment",
    "one",
    "iteration",
    "need",
    "generate",
    "random",
    "number",
    "1",
    "six",
    "store",
    "within",
    "constant",
    "const",
    "value",
    "random",
    "number",
    "equals",
    "math",
    "random",
    "method",
    "generates",
    "random",
    "number",
    "0",
    "1",
    "going",
    "multiply",
    "six",
    "give",
    "us",
    "random",
    "number",
    "0",
    "5",
    "going",
    "whole",
    "number",
    "though",
    "going",
    "round",
    "using",
    "math",
    "floor",
    "enclose",
    "part",
    "equation",
    "get",
    "random",
    "number",
    "zero",
    "five",
    "need",
    "random",
    "number",
    "1",
    "six",
    "add",
    "one",
    "end",
    "plus",
    "one",
    "get",
    "random",
    "number",
    "1",
    "six",
    "sure",
    "works",
    "temporarily",
    "going",
    "con",
    "console",
    "log",
    "value",
    "roll",
    "one",
    "dice",
    "get",
    "one",
    "random",
    "number",
    "one",
    "let",
    "try",
    "three",
    "dice",
    "546",
    "324",
    "right",
    "need",
    "console",
    "log",
    "statement",
    "anymore",
    "know",
    "working",
    "values",
    "going",
    "push",
    "array",
    "values",
    "take",
    "array",
    "values",
    "use",
    "push",
    "method",
    "add",
    "value",
    "randomly",
    "generate",
    "iteration",
    "let",
    "see",
    "works",
    "going",
    "array",
    "values",
    "sure",
    "numbers",
    "let",
    "roll",
    "dice",
    "inspect",
    "console",
    "array",
    "four",
    "elements",
    "number",
    "6326",
    "work",
    "right",
    "tricky",
    "part",
    "need",
    "take",
    "array",
    "images",
    "use",
    "push",
    "method",
    "create",
    "string",
    "representation",
    "html",
    "element",
    "need",
    "get",
    "one",
    "images",
    "found",
    "within",
    "sce",
    "images",
    "folder",
    "using",
    "angle",
    "brackets",
    "create",
    "image",
    "element",
    "set",
    "source",
    "equal",
    "folder",
    "name",
    "folder",
    "name",
    "dice",
    "uncore",
    "images",
    "dice",
    "uncore",
    "images",
    "slash",
    "images",
    "might",
    "different",
    "mine",
    "labeled",
    "appropriately",
    "know",
    "one",
    "two",
    "two",
    "three",
    "three",
    "forth",
    "use",
    "placeholder",
    "add",
    "value",
    "number",
    "follow",
    "file",
    "extension",
    "images",
    "images",
    "png",
    "images",
    "pay",
    "attention",
    "exit",
    "loop",
    "array",
    "html",
    "images",
    "going",
    "take",
    "dice",
    "result",
    "constant",
    "change",
    "text",
    "content",
    "equal",
    "values",
    "use",
    "template",
    "string",
    "display",
    "word",
    "dice",
    "placeholder",
    "going",
    "join",
    "elements",
    "together",
    "values",
    "take",
    "array",
    "values",
    "use",
    "join",
    "method",
    "join",
    "certain",
    "character",
    "characters",
    "join",
    "numbers",
    "common",
    "space",
    "let",
    "see",
    "works",
    "going",
    "roll",
    "one",
    "dice",
    "yep",
    "dice",
    "rolled",
    "one",
    "rolled",
    "four",
    "rolled",
    "three",
    "let",
    "roll",
    "two",
    "dice",
    "2",
    "comma",
    "5",
    "four",
    "comma",
    "6",
    "2",
    "comma",
    "2",
    "comma",
    "3",
    "6",
    "comma",
    "3",
    "comma",
    "2",
    "get",
    "images",
    "let",
    "take",
    "dice",
    "images",
    "constant",
    "access",
    "inner",
    "html",
    "set",
    "equal",
    "take",
    "array",
    "images",
    "use",
    "join",
    "method",
    "going",
    "join",
    "character",
    "join",
    "empty",
    "string",
    "let",
    "see",
    "works",
    "would",
    "like",
    "one",
    "dice",
    "yeah",
    "two",
    "three",
    "reason",
    "dice",
    "displaying",
    "image",
    "element",
    "set",
    "alt",
    "attribute",
    "equal",
    "string",
    "dice",
    "space",
    "add",
    "placeholder",
    "value",
    "let",
    "say",
    "get",
    "folder",
    "name",
    "wrong",
    "rename",
    "dice",
    "image",
    "attempt",
    "display",
    "one",
    "dice",
    "dice",
    "three",
    "dice",
    "four",
    "dice",
    "three",
    "case",
    "image",
    "ca",
    "display",
    "reason",
    "least",
    "display",
    "alternative",
    "text",
    "good",
    "troubleshooting",
    "screen",
    "readers",
    "accessibility",
    "let",
    "correct",
    "name",
    "folder",
    "dice",
    "images",
    "least",
    "kind",
    "big",
    "like",
    "space",
    "little",
    "bit",
    "last",
    "step",
    "going",
    "go",
    "back",
    "css",
    "stylesheet",
    "select",
    "id",
    "dice",
    "result",
    "going",
    "title",
    "right",
    "add",
    "margin",
    "around",
    "text",
    "right",
    "kind",
    "compressed",
    "set",
    "margin",
    "25",
    "pixels",
    "dice",
    "images",
    "id",
    "dice",
    "images",
    "id",
    "dice",
    "images",
    "take",
    "child",
    "image",
    "set",
    "width",
    "150",
    "pixels",
    "good",
    "yeah",
    "lot",
    "smaller",
    "add",
    "little",
    "bit",
    "margin",
    "margin",
    "5",
    "pixels",
    "yeah",
    "bad",
    "looking",
    "program",
    "right",
    "everybody",
    "dice",
    "roller",
    "program",
    "make",
    "using",
    "javascript",
    "html",
    "css",
    "impress",
    "friends",
    "pretty",
    "much",
    "hey",
    "going",
    "everybody",
    "today",
    "lesson",
    "going",
    "create",
    "project",
    "generate",
    "random",
    "passwords",
    "help",
    "us",
    "solidify",
    "understanding",
    "functions",
    "random",
    "numbers",
    "exercise",
    "beginners",
    "setting",
    "different",
    "options",
    "change",
    "format",
    "password",
    "well",
    "let",
    "begin",
    "everybody",
    "right",
    "let",
    "begin",
    "need",
    "let",
    "program",
    "know",
    "length",
    "password",
    "going",
    "let",
    "create",
    "constant",
    "store",
    "const",
    "password",
    "length",
    "set",
    "equal",
    "maybe",
    "12",
    "adjust",
    "accordingly",
    "create",
    "boolean",
    "specify",
    "generated",
    "password",
    "going",
    "contain",
    "lowercase",
    "characters",
    "create",
    "constant",
    "include",
    "lowercase",
    "want",
    "include",
    "lowercase",
    "characters",
    "set",
    "true",
    "false",
    "set",
    "true",
    "want",
    "include",
    "uppercase",
    "characters",
    "include",
    "uppercase",
    "set",
    "true",
    "want",
    "include",
    "numbers",
    "const",
    "include",
    "numbers",
    "set",
    "true",
    "want",
    "include",
    "symbols",
    "const",
    "include",
    "symbols",
    "define",
    "function",
    "top",
    "program",
    "function",
    "generate",
    "password",
    "lot",
    "parameters",
    "set",
    "going",
    "pass",
    "constants",
    "arguments",
    "length",
    "include",
    "lowercase",
    "include",
    "uppercase",
    "include",
    "numbers",
    "include",
    "symbols",
    "call",
    "function",
    "pass",
    "arguments",
    "call",
    "generate",
    "password",
    "function",
    "pass",
    "password",
    "length",
    "include",
    "lowercase",
    "include",
    "uppercase",
    "include",
    "numbers",
    "include",
    "symbols",
    "bottom",
    "function",
    "returning",
    "password",
    "going",
    "write",
    "empty",
    "string",
    "still",
    "need",
    "determine",
    "password",
    "going",
    "finishing",
    "generate",
    "password",
    "function",
    "return",
    "string",
    "string",
    "password",
    "store",
    "within",
    "const",
    "password",
    "equals",
    "whatever",
    "returned",
    "generate",
    "password",
    "function",
    "readable",
    "although",
    "necessary",
    "going",
    "place",
    "arguments",
    "new",
    "line",
    "ocd",
    "things",
    "alignment",
    "end",
    "program",
    "display",
    "template",
    "string",
    "generated",
    "password",
    "add",
    "placeholder",
    "display",
    "password",
    "generate",
    "right",
    "going",
    "display",
    "anything",
    "returning",
    "empty",
    "string",
    "everything",
    "need",
    "outside",
    "function",
    "generate",
    "password",
    "basically",
    "passing",
    "options",
    "generate",
    "password",
    "want",
    "include",
    "lowercase",
    "characters",
    "uppercase",
    "characters",
    "numbers",
    "symbols",
    "number",
    "bunch",
    "boolean",
    "values",
    "within",
    "password",
    "going",
    "create",
    "constants",
    "within",
    "generate",
    "password",
    "function",
    "create",
    "one",
    "long",
    "string",
    "lowercase",
    "characters",
    "chars",
    "equals",
    "going",
    "go",
    "alphabet",
    "one",
    "long",
    "string",
    "alphabetical",
    "characters",
    "think",
    "got",
    "26",
    "going",
    "uppercase",
    "characters",
    "const",
    "uppercase",
    "chars",
    "equals",
    "going",
    "turn",
    "caps",
    "lock",
    "go",
    "alphabet",
    "create",
    "constant",
    "number",
    "characters",
    "number",
    "chars",
    "equals",
    "0",
    "9",
    "symbols",
    "const",
    "symbol",
    "chars",
    "symbols",
    "would",
    "like",
    "include",
    "add",
    "bunch",
    "probably",
    "good",
    "enough",
    "feel",
    "free",
    "add",
    "less",
    "create",
    "variable",
    "allowed",
    "chars",
    "meaning",
    "characters",
    "empty",
    "pth",
    "password",
    "let",
    "password",
    "equal",
    "empty",
    "string",
    "constants",
    "true",
    "would",
    "like",
    "take",
    "corresponding",
    "set",
    "characters",
    "concatenate",
    "allowed",
    "char",
    "string",
    "take",
    "allowed",
    "characters",
    "variable",
    "use",
    "string",
    "concatenation",
    "using",
    "plus",
    "equals",
    "check",
    "see",
    "include",
    "lowercase",
    "true",
    "false",
    "use",
    "theary",
    "operator",
    "would",
    "like",
    "include",
    "lowercase",
    "characters",
    "string",
    "concatenate",
    "lowercase",
    "chars",
    "lowercase",
    "characters",
    "otherwise",
    "concatenate",
    "empty",
    "string",
    "let",
    "uppercase",
    "characters",
    "allowed",
    "characters",
    "let",
    "string",
    "concatenate",
    "check",
    "including",
    "uppercase",
    "characters",
    "question",
    "mark",
    "true",
    "concatenate",
    "uppercase",
    "characters",
    "declared",
    "otherwise",
    "concatenate",
    "empty",
    "string",
    "include",
    "let",
    "number",
    "chars",
    "include",
    "numbers",
    "including",
    "numbers",
    "within",
    "password",
    "return",
    "number",
    "char",
    "string",
    "symbols",
    "including",
    "symbols",
    "within",
    "password",
    "concatenate",
    "string",
    "symbol",
    "character",
    "right",
    "test",
    "everything",
    "afterwards",
    "going",
    "allowed",
    "characters",
    "right",
    "going",
    "switch",
    "constants",
    "false",
    "right",
    "including",
    "characters",
    "set",
    "include",
    "lowercase",
    "true",
    "would",
    "include",
    "lowercase",
    "characters",
    "one",
    "long",
    "string",
    "let",
    "test",
    "uppercase",
    "yep",
    "including",
    "uppercase",
    "characters",
    "include",
    "numbers",
    "yes",
    "works",
    "include",
    "symbols",
    "also",
    "works",
    "point",
    "program",
    "going",
    "one",
    "gigantic",
    "string",
    "possible",
    "characters",
    "move",
    "program",
    "want",
    "run",
    "checks",
    "using",
    "statements",
    "first",
    "let",
    "check",
    "see",
    "password",
    "length",
    "zero",
    "less",
    "zero",
    "right",
    "set",
    "12",
    "using",
    "statement",
    "length",
    "length",
    "password",
    "less",
    "equal",
    "zero",
    "need",
    "let",
    "user",
    "know",
    "password",
    "length",
    "must",
    "least",
    "one",
    "return",
    "string",
    "password",
    "length",
    "must",
    "least",
    "one",
    "right",
    "generating",
    "password",
    "returning",
    "empty",
    "string",
    "set",
    "password",
    "length",
    "zero",
    "generate",
    "message",
    "pass",
    "password",
    "length",
    "must",
    "least",
    "one",
    "even",
    "negative",
    "number",
    "like1",
    "password",
    "length",
    "must",
    "least",
    "one",
    "let",
    "set",
    "back",
    "12",
    "select",
    "options",
    "character",
    "options",
    "false",
    "check",
    "length",
    "loud",
    "characters",
    "variable",
    "loud",
    "characters",
    "length",
    "property",
    "strictly",
    "equal",
    "zero",
    "possible",
    "options",
    "set",
    "false",
    "return",
    "template",
    "string",
    "least",
    "one",
    "set",
    "characters",
    "needs",
    "selected",
    "let",
    "see",
    "works",
    "yes",
    "least",
    "one",
    "set",
    "characters",
    "needs",
    "selected",
    "select",
    "options",
    "would",
    "like",
    "like",
    "set",
    "true",
    "hard",
    "part",
    "many",
    "iterations",
    "password",
    "select",
    "random",
    "character",
    "different",
    "possibilities",
    "use",
    "loop",
    "let",
    "index",
    "counter",
    "continue",
    "loop",
    "long",
    "less",
    "length",
    "password",
    "length",
    "increment",
    "one",
    "iteration",
    "password",
    "length",
    "12",
    "execute",
    "loop",
    "total",
    "12",
    "times",
    "generate",
    "random",
    "index",
    "const",
    "random",
    "index",
    "equals",
    "use",
    "random",
    "method",
    "math",
    "generates",
    "random",
    "number",
    "0o",
    "one",
    "multiply",
    "number",
    "randomly",
    "generated",
    "length",
    "allowed",
    "characters",
    "let",
    "say",
    "including",
    "lowercase",
    "characters",
    "well",
    "total",
    "26",
    "characters",
    "alphabet",
    "taking",
    "26",
    "given",
    "random",
    "number",
    "0",
    "25",
    "need",
    "round",
    "let",
    "enclose",
    "equation",
    "floor",
    "method",
    "math",
    "round",
    "math",
    "floor",
    "use",
    "string",
    "concatenation",
    "password",
    "cur",
    "password",
    "empty",
    "string",
    "use",
    "string",
    "concatenation",
    "string",
    "concatenate",
    "randomly",
    "chosen",
    "character",
    "string",
    "allowed",
    "characters",
    "password",
    "plus",
    "equals",
    "allowed",
    "characters",
    "index",
    "random",
    "index",
    "end",
    "program",
    "return",
    "password",
    "let",
    "see",
    "works",
    "let",
    "close",
    "function",
    "need",
    "anymore",
    "let",
    "see",
    "works",
    "yeah",
    "password",
    "every",
    "time",
    "run",
    "program",
    "get",
    "new",
    "random",
    "password",
    "turn",
    "options",
    "let",
    "set",
    "options",
    "false",
    "begin",
    "set",
    "length",
    "zero",
    "let",
    "see",
    "happens",
    "password",
    "length",
    "must",
    "least",
    "one",
    "right",
    "password",
    "10",
    "10",
    "characters",
    "long",
    "least",
    "one",
    "set",
    "characters",
    "needs",
    "selected",
    "let",
    "select",
    "lowercase",
    "characters",
    "yep",
    "lowercase",
    "characters",
    "let",
    "allow",
    "uppercase",
    "characters",
    "let",
    "allow",
    "numbers",
    "get",
    "time",
    "let",
    "okay",
    "number",
    "guess",
    "numbers",
    "come",
    "frequently",
    "let",
    "include",
    "symbols",
    "symbols",
    "right",
    "everybody",
    "exercise",
    "generate",
    "random",
    "passwords",
    "give",
    "practice",
    "functions",
    "working",
    "random",
    "numbers",
    "well",
    "everybody",
    "random",
    "password",
    "generator",
    "javascript",
    "hey",
    "welcome",
    "back",
    "everybody",
    "today",
    "got",
    "explain",
    "callbacks",
    "javascript",
    "callback",
    "function",
    "passed",
    "argument",
    "another",
    "function",
    "used",
    "handle",
    "asynchronous",
    "operations",
    "reading",
    "file",
    "network",
    "requests",
    "interacting",
    "databases",
    "activities",
    "take",
    "time",
    "complete",
    "javascript",
    "necessarily",
    "wait",
    "process",
    "finish",
    "continuing",
    "rest",
    "program",
    "example",
    "read",
    "file",
    "takes",
    "long",
    "time",
    "read",
    "file",
    "javascript",
    "might",
    "continue",
    "rest",
    "program",
    "might",
    "attempt",
    "display",
    "contents",
    "file",
    "finished",
    "reading",
    "callbacks",
    "come",
    "telling",
    "javascript",
    "hey",
    "done",
    "call",
    "next",
    "done",
    "reading",
    "file",
    "display",
    "contents",
    "process",
    "complete",
    "give",
    "examples",
    "syntax",
    "call",
    "back",
    "start",
    "something",
    "really",
    "simple",
    "create",
    "function",
    "display",
    "word",
    "hello",
    "hello",
    "function",
    "word",
    "hello",
    "invoke",
    "function",
    "hello",
    "execute",
    "hello",
    "create",
    "function",
    "goodbye",
    "function",
    "goodbye",
    "goodbye",
    "okay",
    "hello",
    "let",
    "invoke",
    "goodbye",
    "hello",
    "goodbye",
    "hello",
    "function",
    "takes",
    "lot",
    "time",
    "process",
    "well",
    "javascript",
    "necessarily",
    "going",
    "wait",
    "around",
    "executing",
    "goodbye",
    "function",
    "going",
    "add",
    "lines",
    "code",
    "need",
    "copy",
    "lines",
    "code",
    "going",
    "make",
    "us",
    "wait",
    "3",
    "seconds",
    "need",
    "write",
    "pay",
    "attention",
    "execute",
    "hello",
    "function",
    "followed",
    "goodbye",
    "function",
    "going",
    "pretend",
    "hello",
    "function",
    "takes",
    "little",
    "bit",
    "time",
    "process",
    "goodbye",
    "already",
    "executed",
    "followed",
    "hello",
    "way",
    "around",
    "would",
    "like",
    "guarantee",
    "goodbye",
    "function",
    "follows",
    "hello",
    "function",
    "well",
    "adding",
    "call",
    "back",
    "goodbye",
    "function",
    "hello",
    "function",
    "complete",
    "get",
    "rid",
    "goodbye",
    "function",
    "invocation",
    "use",
    "call",
    "back",
    "pass",
    "function",
    "argument",
    "another",
    "function",
    "pass",
    "goodbye",
    "function",
    "argument",
    "hello",
    "function",
    "within",
    "set",
    "parentheses",
    "type",
    "name",
    "function",
    "goodbye",
    "sure",
    "add",
    "set",
    "parentheses",
    "function",
    "name",
    "call",
    "right",
    "away",
    "passing",
    "name",
    "function",
    "argument",
    "need",
    "matching",
    "parameter",
    "name",
    "parameter",
    "callback",
    "everything",
    "within",
    "function",
    "complete",
    "let",
    "take",
    "call",
    "back",
    "invoke",
    "adding",
    "set",
    "parentheses",
    "invoke",
    "meaning",
    "call",
    "right",
    "let",
    "see",
    "happens",
    "hello",
    "function",
    "followed",
    "goodbye",
    "function",
    "order",
    "let",
    "create",
    "another",
    "function",
    "leave",
    "function",
    "tell",
    "somebody",
    "leave",
    "leave",
    "pass",
    "pass",
    "name",
    "function",
    "argument",
    "hello",
    "function",
    "leave",
    "call",
    "back",
    "executing",
    "hello",
    "function",
    "execute",
    "call",
    "back",
    "case",
    "leave",
    "function",
    "let",
    "create",
    "another",
    "function",
    "wait",
    "function",
    "waight",
    "wait",
    "pass",
    "name",
    "function",
    "argument",
    "hello",
    "function",
    "wait",
    "call",
    "back",
    "execute",
    "hello",
    "function",
    "followed",
    "weight",
    "function",
    "using",
    "callbacks",
    "guaranteeing",
    "function",
    "passed",
    "execute",
    "next",
    "pass",
    "callbacks",
    "well",
    "arguments",
    "function",
    "let",
    "go",
    "second",
    "example",
    "create",
    "function",
    "sum",
    "two",
    "numbers",
    "together",
    "x",
    "comma",
    "also",
    "add",
    "call",
    "back",
    "call",
    "back",
    "x",
    "comma",
    "three",
    "parameters",
    "total",
    "within",
    "sum",
    "function",
    "create",
    "local",
    "variable",
    "result",
    "add",
    "x",
    "call",
    "callback",
    "pass",
    "result",
    "argument",
    "callback",
    "function",
    "create",
    "function",
    "display",
    "result",
    "console",
    "display",
    "console",
    "one",
    "parameter",
    "result",
    "argument",
    "receiving",
    "result",
    "right",
    "invoke",
    "sum",
    "function",
    "three",
    "arguments",
    "need",
    "pass",
    "call",
    "back",
    "value",
    "x",
    "value",
    "let",
    "invoke",
    "display",
    "console",
    "function",
    "call",
    "back",
    "sure",
    "add",
    "set",
    "parentheses",
    "name",
    "invoke",
    "right",
    "away",
    "x",
    "1",
    "two",
    "let",
    "see",
    "result",
    "result",
    "three",
    "within",
    "sum",
    "function",
    "calculate",
    "result",
    "first",
    "process",
    "finished",
    "display",
    "result",
    "console",
    "let",
    "create",
    "separate",
    "function",
    "display",
    "result",
    "document",
    "object",
    "window",
    "web",
    "page",
    "basically",
    "uh",
    "let",
    "pretend",
    "create",
    "h1",
    "element",
    "id",
    "h1",
    "create",
    "separate",
    "function",
    "display",
    "page",
    "display",
    "web",
    "page",
    "think",
    "display",
    "dom",
    "would",
    "appropriate",
    "explained",
    "document",
    "object",
    "model",
    "yet",
    "let",
    "work",
    "display",
    "page",
    "accept",
    "result",
    "change",
    "text",
    "content",
    "h1",
    "element",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "h1",
    "change",
    "text",
    "content",
    "equal",
    "result",
    "receive",
    "callback",
    "use",
    "display",
    "page",
    "function",
    "display",
    "page",
    "result",
    "three",
    "calculation",
    "processes",
    "execute",
    "call",
    "back",
    "time",
    "passing",
    "display",
    "page",
    "function",
    "created",
    "right",
    "everybody",
    "call",
    "back",
    "function",
    "passed",
    "argument",
    "another",
    "function",
    "used",
    "handle",
    "asynchronous",
    "operations",
    "operations",
    "may",
    "take",
    "variable",
    "amount",
    "time",
    "reading",
    "file",
    "network",
    "requests",
    "interacting",
    "databases",
    "exactly",
    "sure",
    "processes",
    "going",
    "complete",
    "using",
    "callback",
    "ensure",
    "function",
    "executes",
    "processes",
    "complete",
    "accidentally",
    "saying",
    "hey",
    "done",
    "call",
    "next",
    "practice",
    "callbacks",
    "especially",
    "upcoming",
    "topics",
    "everybody",
    "callbacks",
    "javascript",
    "hey",
    "today",
    "going",
    "explain",
    "method",
    "javascript",
    "method",
    "used",
    "iterate",
    "meaning",
    "loop",
    "elements",
    "array",
    "apply",
    "specified",
    "function",
    "element",
    "array",
    "use",
    "method",
    "arrays",
    "send",
    "element",
    "call",
    "back",
    "function",
    "example",
    "create",
    "array",
    "numbers",
    "let",
    "numbers",
    "equals",
    "5",
    "going",
    "create",
    "function",
    "display",
    "element",
    "function",
    "display",
    "one",
    "parameter",
    "element",
    "individually",
    "display",
    "element",
    "within",
    "array",
    "element",
    "display",
    "element",
    "array",
    "using",
    "method",
    "take",
    "array",
    "dot",
    "use",
    "method",
    "pass",
    "call",
    "back",
    "argument",
    "pass",
    "display",
    "function",
    "argument",
    "display",
    "elements",
    "array",
    "console",
    "1",
    "2",
    "3",
    "4",
    "5",
    "believe",
    "element",
    "argument",
    "provided",
    "us",
    "method",
    "behind",
    "scenes",
    "method",
    "provide",
    "callback",
    "element",
    "index",
    "array",
    "argument",
    "element",
    "current",
    "element",
    "looping",
    "array",
    "index",
    "keeps",
    "track",
    "current",
    "index",
    "number",
    "location",
    "array",
    "case",
    "would",
    "numbers",
    "pass",
    "display",
    "function",
    "call",
    "back",
    "already",
    "provided",
    "element",
    "argument",
    "behind",
    "scenes",
    "using",
    "method",
    "display",
    "elements",
    "array",
    "let",
    "use",
    "method",
    "double",
    "element",
    "displaying",
    "create",
    "new",
    "function",
    "function",
    "double",
    "double",
    "value",
    "element",
    "element",
    "index",
    "array",
    "provided",
    "us",
    "automatically",
    "element",
    "going",
    "let",
    "take",
    "array",
    "index",
    "index",
    "index",
    "keeps",
    "track",
    "current",
    "index",
    "number",
    "iteration",
    "going",
    "increment",
    "one",
    "starting",
    "zero",
    "take",
    "element",
    "multiply",
    "two",
    "right",
    "let",
    "take",
    "numbers",
    "array",
    "use",
    "method",
    "pass",
    "call",
    "back",
    "double",
    "function",
    "elements",
    "doubled",
    "let",
    "triple",
    "create",
    "function",
    "triple",
    "function",
    "triple",
    "set",
    "parameters",
    "multiply",
    "element",
    "three",
    "passing",
    "call",
    "back",
    "triple",
    "3",
    "6",
    "9",
    "12",
    "15",
    "tripled",
    "let",
    "square",
    "element",
    "function",
    "square",
    "element",
    "index",
    "array",
    "arguments",
    "provided",
    "us",
    "take",
    "array",
    "receive",
    "index",
    "current",
    "index",
    "number",
    "set",
    "equal",
    "square",
    "number",
    "use",
    "power",
    "method",
    "math",
    "raise",
    "base",
    "given",
    "power",
    "raising",
    "base",
    "element",
    "power",
    "two",
    "pass",
    "square",
    "function",
    "call",
    "back",
    "square",
    "number",
    "displaying",
    "1",
    "49625",
    "time",
    "let",
    "create",
    "cube",
    "function",
    "function",
    "cube",
    "raise",
    "element",
    "power",
    "three",
    "pass",
    "cube",
    "function",
    "call",
    "back",
    "method",
    "number",
    "cubed",
    "1",
    "8",
    "27",
    "64",
    "125",
    "let",
    "create",
    "practical",
    "example",
    "create",
    "array",
    "fruits",
    "let",
    "fruits",
    "equals",
    "fruit",
    "apple",
    "orange",
    "banana",
    "coconut",
    "create",
    "function",
    "display",
    "element",
    "function",
    "display",
    "kind",
    "like",
    "element",
    "argument",
    "going",
    "provided",
    "us",
    "iteration",
    "let",
    "element",
    "use",
    "method",
    "array",
    "fruits",
    "fruits",
    "pass",
    "function",
    "call",
    "back",
    "display",
    "element",
    "array",
    "apple",
    "orange",
    "banana",
    "coconut",
    "let",
    "create",
    "function",
    "make",
    "strings",
    "uppercase",
    "function",
    "uppercase",
    "need",
    "element",
    "index",
    "array",
    "element",
    "index",
    "array",
    "iteration",
    "let",
    "take",
    "array",
    "receive",
    "index",
    "index",
    "equals",
    "take",
    "element",
    "receive",
    "use",
    "two",
    "uppercase",
    "method",
    "uppercase",
    "function",
    "utilizes",
    "two",
    "uppercase",
    "method",
    "remember",
    "method",
    "usually",
    "belongs",
    "something",
    "method",
    "belongs",
    "element",
    "receive",
    "functions",
    "standalone",
    "displaying",
    "element",
    "within",
    "array",
    "fruits",
    "let",
    "take",
    "fruits",
    "array",
    "use",
    "method",
    "apply",
    "call",
    "back",
    "uppercase",
    "make",
    "elements",
    "uppercase",
    "displaying",
    "going",
    "copy",
    "elements",
    "begin",
    "uppercase",
    "create",
    "lowercase",
    "function",
    "function",
    "lowercase",
    "element",
    "index",
    "array",
    "line",
    "code",
    "use",
    "two",
    "lowercase",
    "method",
    "within",
    "method",
    "pass",
    "lowercase",
    "function",
    "callback",
    "make",
    "elements",
    "lowercase",
    "let",
    "set",
    "elements",
    "array",
    "lowercase",
    "challenge",
    "round",
    "capitalize",
    "first",
    "letter",
    "element",
    "array",
    "create",
    "function",
    "function",
    "capitalize",
    "element",
    "index",
    "array",
    "arguments",
    "going",
    "provided",
    "us",
    "take",
    "array",
    "receive",
    "current",
    "index",
    "set",
    "equal",
    "going",
    "get",
    "first",
    "character",
    "element",
    "take",
    "element",
    "get",
    "first",
    "character",
    "char",
    "index",
    "zero",
    "method",
    "uppercase",
    "make",
    "letter",
    "uppercase",
    "strink",
    "catenate",
    "element",
    "use",
    "slice",
    "method",
    "create",
    "substring",
    "begin",
    "index",
    "one",
    "portion",
    "going",
    "create",
    "substring",
    "every",
    "character",
    "besides",
    "first",
    "first",
    "character",
    "going",
    "make",
    "uppercase",
    "work",
    "let",
    "take",
    "capitalize",
    "function",
    "pass",
    "method",
    "first",
    "character",
    "element",
    "uppercase",
    "right",
    "everybody",
    "method",
    "used",
    "iterate",
    "elements",
    "array",
    "apply",
    "specified",
    "function",
    "callback",
    "element",
    "take",
    "array",
    "use",
    "method",
    "pass",
    "call",
    "back",
    "argument",
    "really",
    "useful",
    "need",
    "apply",
    "function",
    "element",
    "array",
    "well",
    "everybody",
    "method",
    "javascript",
    "hey",
    "today",
    "got",
    "explain",
    "map",
    "method",
    "javascript",
    "map",
    "method",
    "accepts",
    "callback",
    "applies",
    "function",
    "element",
    "array",
    "similar",
    "method",
    "however",
    "returns",
    "new",
    "array",
    "key",
    "difference",
    "example",
    "let",
    "create",
    "array",
    "constants",
    "picking",
    "constants",
    "demonstrate",
    "changing",
    "elements",
    "array",
    "const",
    "numbers",
    "select",
    "numbers",
    "1",
    "5",
    "keep",
    "simple",
    "create",
    "function",
    "square",
    "number",
    "function",
    "square",
    "one",
    "parameter",
    "element",
    "going",
    "return",
    "raise",
    "base",
    "given",
    "power",
    "raising",
    "element",
    "power",
    "two",
    "returning",
    "going",
    "take",
    "array",
    "numbers",
    "use",
    "map",
    "method",
    "pass",
    "function",
    "call",
    "back",
    "map",
    "method",
    "return",
    "new",
    "array",
    "create",
    "new",
    "array",
    "store",
    "values",
    "returned",
    "create",
    "const",
    "squares",
    "equals",
    "numbers",
    "map",
    "let",
    "display",
    "squares",
    "use",
    "squares",
    "numbers",
    "squared",
    "1",
    "4",
    "9",
    "16",
    "25",
    "let",
    "create",
    "function",
    "cube",
    "numbers",
    "copy",
    "paste",
    "square",
    "function",
    "change",
    "cube",
    "raise",
    "element",
    "power",
    "three",
    "const",
    "cubes",
    "equals",
    "take",
    "original",
    "array",
    "numbers",
    "dot",
    "use",
    "map",
    "method",
    "pass",
    "call",
    "back",
    "function",
    "would",
    "like",
    "use",
    "cube",
    "r",
    "array",
    "cubes",
    "new",
    "numbers",
    "1",
    "8",
    "27",
    "64",
    "125",
    "map",
    "method",
    "similar",
    "four",
    "completion",
    "map",
    "method",
    "returns",
    "new",
    "array",
    "still",
    "original",
    "numbers",
    "whereas",
    "four",
    "change",
    "key",
    "difference",
    "let",
    "go",
    "new",
    "example",
    "create",
    "array",
    "students",
    "const",
    "students",
    "equals",
    "first",
    "student",
    "pick",
    "spongebob",
    "patrick",
    "squidward",
    "sandy",
    "good",
    "enough",
    "create",
    "function",
    "make",
    "strings",
    "uppercase",
    "function",
    "uppercase",
    "single",
    "element",
    "remember",
    "element",
    "going",
    "provided",
    "us",
    "map",
    "method",
    "element",
    "index",
    "array",
    "need",
    "element",
    "case",
    "return",
    "element",
    "dot",
    "uppercase",
    "method",
    "create",
    "new",
    "array",
    "students",
    "name",
    "uh",
    "students",
    "upper",
    "suppose",
    "take",
    "array",
    "students",
    "use",
    "map",
    "method",
    "pass",
    "function",
    "would",
    "like",
    "apply",
    "callback",
    "students",
    "upper",
    "within",
    "array",
    "students",
    "names",
    "uppercase",
    "let",
    "create",
    "function",
    "lowercase",
    "function",
    "lowercase",
    "lowercase",
    "create",
    "new",
    "array",
    "const",
    "students",
    "lower",
    "equals",
    "name",
    "array",
    "students",
    "map",
    "pass",
    "function",
    "call",
    "back",
    "display",
    "array",
    "students",
    "lower",
    "names",
    "lowercase",
    "right",
    "third",
    "example",
    "one",
    "practical",
    "create",
    "array",
    "dates",
    "const",
    "dates",
    "equals",
    "certain",
    "regions",
    "order",
    "dates",
    "differently",
    "example",
    "might",
    "year",
    "followed",
    "month",
    "day",
    "going",
    "rearrange",
    "order",
    "dates",
    "using",
    "map",
    "method",
    "come",
    "dates",
    "picked",
    "2024",
    "january",
    "10th",
    "2025",
    "february",
    "20th",
    "2026",
    "march",
    "30th",
    "feel",
    "free",
    "rearrange",
    "however",
    "want",
    "create",
    "function",
    "format",
    "dates",
    "one",
    "parameter",
    "single",
    "element",
    "within",
    "function",
    "create",
    "temporary",
    "array",
    "named",
    "parts",
    "going",
    "split",
    "date",
    "parts",
    "within",
    "array",
    "within",
    "function",
    "const",
    "parts",
    "equals",
    "element",
    "split",
    "going",
    "split",
    "element",
    "going",
    "split",
    "dash",
    "example",
    "first",
    "element",
    "split",
    "date",
    "2024",
    "first",
    "element",
    "1",
    "10",
    "reformat",
    "parts",
    "return",
    "template",
    "string",
    "going",
    "need",
    "placeholders",
    "ers",
    "dollar",
    "sign",
    "curly",
    "braces",
    "let",
    "take",
    "array",
    "parts",
    "index",
    "one",
    "month",
    "live",
    "united",
    "states",
    "arrange",
    "dates",
    "month",
    "day",
    "year",
    "place",
    "month",
    "first",
    "forward",
    "slash",
    "let",
    "include",
    "another",
    "placeholder",
    "parts",
    "index",
    "two",
    "day",
    "month",
    "slash",
    "parts",
    "index0",
    "year",
    "create",
    "new",
    "array",
    "const",
    "formatted",
    "dates",
    "equals",
    "take",
    "original",
    "array",
    "dates",
    "use",
    "map",
    "method",
    "pass",
    "function",
    "name",
    "call",
    "back",
    "formatted",
    "dates",
    "dates",
    "january",
    "10th",
    "2024",
    "february",
    "2nd",
    "2025",
    "march",
    "30th",
    "2026",
    "feel",
    "free",
    "arrange",
    "however",
    "like",
    "right",
    "everybody",
    "map",
    "method",
    "similar",
    "method",
    "math",
    "method",
    "accepts",
    "call",
    "back",
    "applies",
    "function",
    "element",
    "array",
    "however",
    "returns",
    "new",
    "array",
    "finished",
    "nice",
    "need",
    "preserve",
    "original",
    "array",
    "elements",
    "came",
    "well",
    "everybody",
    "map",
    "method",
    "javas",
    "script",
    "hey",
    "everybody",
    "big",
    "surprise",
    "today",
    "going",
    "explain",
    "filter",
    "method",
    "javascript",
    "filter",
    "method",
    "creates",
    "new",
    "array",
    "filtering",
    "elements",
    "example",
    "create",
    "array",
    "numbers",
    "filter",
    "numbers",
    "odd",
    "let",
    "add",
    "numbers",
    "1",
    "7",
    "need",
    "function",
    "function",
    "even",
    "one",
    "parameter",
    "element",
    "going",
    "provided",
    "us",
    "filter",
    "method",
    "going",
    "return",
    "write",
    "condition",
    "take",
    "element",
    "modulus",
    "2",
    "modulus",
    "operator",
    "gives",
    "remainder",
    "division",
    "use",
    "modulus",
    "2",
    "check",
    "see",
    "number",
    "even",
    "condition",
    "zero",
    "strictly",
    "equal",
    "zero",
    "return",
    "true",
    "returning",
    "boolean",
    "true",
    "false",
    "filter",
    "method",
    "take",
    "values",
    "return",
    "true",
    "stick",
    "within",
    "new",
    "array",
    "effectively",
    "filter",
    "elements",
    "need",
    "return",
    "true",
    "let",
    "see",
    "works",
    "create",
    "new",
    "array",
    "even",
    "nums",
    "equals",
    "take",
    "original",
    "array",
    "use",
    "filter",
    "method",
    "pass",
    "call",
    "back",
    "even",
    "display",
    "new",
    "new",
    "array",
    "even",
    "numbers",
    "2",
    "4",
    "6",
    "let",
    "odd",
    "numbers",
    "function",
    "odd",
    "take",
    "element",
    "modulus",
    "2",
    "strictly",
    "equal",
    "zero",
    "means",
    "number",
    "odd",
    "let",
    "create",
    "new",
    "array",
    "let",
    "odd",
    "nums",
    "equals",
    "original",
    "array",
    "numbers",
    "use",
    "filter",
    "method",
    "passing",
    "call",
    "back",
    "odd",
    "let",
    "check",
    "new",
    "array",
    "odd",
    "nums",
    "numbers",
    "1",
    "3",
    "5",
    "7",
    "numbers",
    "odd",
    "let",
    "go",
    "another",
    "example",
    "create",
    "array",
    "ages",
    "use",
    "const",
    "time",
    "instead",
    "let",
    "const",
    "ages",
    "pretend",
    "teaching",
    "college",
    "class",
    "might",
    "students",
    "still",
    "high",
    "school",
    "let",
    "say",
    "student",
    "16",
    "another",
    "17",
    "two",
    "18",
    "19",
    "20",
    "somebody",
    "little",
    "bit",
    "older",
    "um",
    "60",
    "use",
    "filter",
    "method",
    "filter",
    "anybody",
    "18",
    "find",
    "adults",
    "need",
    "function",
    "function",
    "adult",
    "one",
    "element",
    "parameter",
    "going",
    "provided",
    "us",
    "return",
    "condition",
    "return",
    "check",
    "element",
    "greater",
    "equal",
    "18",
    "function",
    "let",
    "create",
    "new",
    "array",
    "adults",
    "equals",
    "take",
    "original",
    "array",
    "dot",
    "use",
    "filter",
    "method",
    "pass",
    "call",
    "back",
    "adult",
    "display",
    "new",
    "array",
    "adults",
    "five",
    "elements",
    "age",
    "students",
    "18",
    "18",
    "19",
    "20",
    "60",
    "let",
    "children",
    "find",
    "anybody",
    "18",
    "child",
    "function",
    "return",
    "element",
    "less",
    "18",
    "create",
    "new",
    "array",
    "const",
    "children",
    "equals",
    "take",
    "original",
    "array",
    "use",
    "filter",
    "method",
    "passing",
    "call",
    "back",
    "child",
    "display",
    "new",
    "array",
    "two",
    "students",
    "children",
    "one",
    "16",
    "17",
    "last",
    "example",
    "create",
    "array",
    "words",
    "const",
    "words",
    "add",
    "words",
    "think",
    "add",
    "fruit",
    "add",
    "apple",
    "orange",
    "banana",
    "kiwi",
    "pomegranate",
    "coconut",
    "filter",
    "words",
    "length",
    "word",
    "six",
    "create",
    "function",
    "function",
    "get",
    "short",
    "words",
    "element",
    "parameter",
    "return",
    "condition",
    "check",
    "element",
    "access",
    "length",
    "property",
    "element",
    "strings",
    "length",
    "property",
    "many",
    "characters",
    "long",
    "length",
    "check",
    "see",
    "length",
    "element",
    "less",
    "equal",
    "six",
    "return",
    "true",
    "return",
    "false",
    "create",
    "new",
    "array",
    "let",
    "call",
    "array",
    "short",
    "words",
    "equals",
    "take",
    "array",
    "use",
    "filter",
    "method",
    "pass",
    "call",
    "back",
    "get",
    "short",
    "words",
    "console",
    "log",
    "new",
    "array",
    "short",
    "words",
    "array",
    "four",
    "elements",
    "length",
    "characters",
    "string",
    "six",
    "apple",
    "orange",
    "banana",
    "kiwi",
    "finish",
    "let",
    "get",
    "long",
    "words",
    "create",
    "new",
    "function",
    "get",
    "long",
    "words",
    "check",
    "length",
    "element",
    "see",
    "six",
    "create",
    "new",
    "array",
    "const",
    "long",
    "words",
    "equals",
    "take",
    "original",
    "array",
    "use",
    "filter",
    "method",
    "pass",
    "call",
    "back",
    "get",
    "long",
    "words",
    "display",
    "new",
    "array",
    "long",
    "words",
    "within",
    "original",
    "array",
    "two",
    "words",
    "considered",
    "long",
    "pomegranate",
    "coconut",
    "words",
    "six",
    "characters",
    "coconut",
    "seven",
    "pomegranate",
    "11",
    "right",
    "everybody",
    "filter",
    "method",
    "creates",
    "new",
    "array",
    "filtering",
    "elements",
    "callback",
    "likely",
    "going",
    "checking",
    "condition",
    "element",
    "pass",
    "condition",
    "well",
    "everybody",
    "filter",
    "method",
    "javas",
    "script",
    "going",
    "everybody",
    "today",
    "video",
    "got",
    "explain",
    "reduced",
    "method",
    "javascript",
    "reduce",
    "method",
    "reduces",
    "elements",
    "array",
    "single",
    "value",
    "example",
    "create",
    "array",
    "prices",
    "shopping",
    "cart",
    "sum",
    "prices",
    "within",
    "shopping",
    "cart",
    "return",
    "total",
    "need",
    "array",
    "work",
    "const",
    "prices",
    "equals",
    "array",
    "think",
    "prices",
    "type",
    "anything",
    "long",
    "number",
    "keep",
    "simple",
    "use",
    "whole",
    "numbers",
    "add",
    "something",
    "5",
    "another",
    "30",
    "10",
    "25",
    "15",
    "20",
    "create",
    "variable",
    "total",
    "const",
    "total",
    "equals",
    "take",
    "array",
    "prices",
    "use",
    "reduce",
    "method",
    "arrays",
    "need",
    "pass",
    "call",
    "back",
    "function",
    "need",
    "create",
    "function",
    "sum",
    "values",
    "let",
    "create",
    "function",
    "sum",
    "sum",
    "function",
    "two",
    "parameters",
    "first",
    "accumulator",
    "second",
    "next",
    "element",
    "going",
    "return",
    "accumulator",
    "plus",
    "element",
    "explain",
    "works",
    "momentarily",
    "want",
    "sure",
    "everything",
    "runs",
    "fine",
    "first",
    "within",
    "reduce",
    "method",
    "pass",
    "call",
    "back",
    "sum",
    "function",
    "return",
    "single",
    "value",
    "total",
    "case",
    "let",
    "see",
    "total",
    "use",
    "template",
    "string",
    "pick",
    "unit",
    "currency",
    "pick",
    "american",
    "dollars",
    "add",
    "placeholder",
    "let",
    "display",
    "total",
    "total",
    "15",
    "would",
    "like",
    "add",
    "cents",
    "end",
    "follow",
    "two",
    "fixed",
    "method",
    "add",
    "two",
    "decimal",
    "places",
    "sense",
    "right",
    "work",
    "exactly",
    "two",
    "parameters",
    "accumulator",
    "element",
    "might",
    "easier",
    "rename",
    "parameters",
    "rename",
    "parameters",
    "let",
    "say",
    "accumulator",
    "previous",
    "element",
    "element",
    "next",
    "element",
    "returning",
    "previous",
    "element",
    "plus",
    "next",
    "element",
    "first",
    "iteration",
    "0",
    "five",
    "well",
    "0",
    "5",
    "would",
    "give",
    "us",
    "5",
    "five",
    "returned",
    "accumulator",
    "whatever",
    "value",
    "returned",
    "becomes",
    "accumulator",
    "next",
    "iteration",
    "accumulator",
    "five",
    "next",
    "element",
    "30",
    "going",
    "return",
    "accumulator",
    "30",
    "35",
    "return",
    "accumulator",
    "next",
    "iteration",
    "accumulator",
    "35",
    "next",
    "el",
    "element",
    "10",
    "35",
    "10",
    "would",
    "give",
    "us",
    "45",
    "return",
    "accumulator",
    "add",
    "next",
    "element",
    "25",
    "follow",
    "pattern",
    "right",
    "let",
    "go",
    "another",
    "example",
    "create",
    "array",
    "grades",
    "const",
    "grades",
    "equals",
    "number",
    "grades",
    "75",
    "50",
    "90",
    "80",
    "65",
    "95",
    "find",
    "maximum",
    "value",
    "array",
    "create",
    "constant",
    "hold",
    "maximum",
    "value",
    "maximum",
    "score",
    "const",
    "maximum",
    "equals",
    "take",
    "grades",
    "array",
    "use",
    "reduce",
    "method",
    "need",
    "pass",
    "call",
    "back",
    "reduce",
    "method",
    "need",
    "function",
    "get",
    "max",
    "two",
    "parameters",
    "accumulator",
    "next",
    "element",
    "like",
    "said",
    "feel",
    "free",
    "rename",
    "return",
    "max",
    "method",
    "math",
    "math",
    "max",
    "pass",
    "two",
    "parameters",
    "accumulator",
    "next",
    "element",
    "within",
    "reduce",
    "method",
    "pass",
    "call",
    "back",
    "get",
    "max",
    "value",
    "returned",
    "maximum",
    "grid",
    "array",
    "let",
    "whatever",
    "maximum",
    "maximum",
    "score",
    "array",
    "95",
    "let",
    "minimum",
    "let",
    "copy",
    "function",
    "change",
    "instance",
    "max",
    "min",
    "get",
    "min",
    "math",
    "min",
    "let",
    "create",
    "new",
    "constant",
    "const",
    "minimum",
    "equals",
    "array",
    "grades",
    "use",
    "reduce",
    "method",
    "return",
    "single",
    "value",
    "passing",
    "call",
    "back",
    "get",
    "min",
    "let",
    "minimum",
    "minimum",
    "score",
    "array",
    "50",
    "right",
    "everybody",
    "reduce",
    "method",
    "method",
    "arrays",
    "reduce",
    "elements",
    "array",
    "single",
    "value",
    "use",
    "sum",
    "elements",
    "array",
    "another",
    "possibility",
    "find",
    "minimum",
    "maximum",
    "value",
    "array",
    "well",
    "everybody",
    "reduced",
    "method",
    "javascript",
    "hey",
    "everyone",
    "today",
    "going",
    "explain",
    "function",
    "expressions",
    "javascript",
    "function",
    "expression",
    "way",
    "define",
    "functions",
    "value",
    "variable",
    "confused",
    "function",
    "declarations",
    "define",
    "block",
    "reusable",
    "code",
    "performs",
    "specific",
    "task",
    "already",
    "familiar",
    "function",
    "declarations",
    "function",
    "create",
    "function",
    "name",
    "hello",
    "example",
    "let",
    "word",
    "hello",
    "function",
    "expression",
    "assign",
    "function",
    "variable",
    "pass",
    "value",
    "another",
    "function",
    "time",
    "going",
    "write",
    "function",
    "expression",
    "create",
    "constant",
    "named",
    "hello",
    "equals",
    "function",
    "parentheses",
    "curly",
    "braces",
    "thing",
    "hello",
    "run",
    "identifier",
    "hello",
    "already",
    "declared",
    "going",
    "remove",
    "function",
    "declaration",
    "assigning",
    "function",
    "variable",
    "use",
    "function",
    "stored",
    "within",
    "take",
    "variable",
    "name",
    "add",
    "set",
    "parentheses",
    "invoke",
    "kind",
    "like",
    "pair",
    "telephones",
    "talking",
    "hello",
    "using",
    "javascript",
    "also",
    "capability",
    "passing",
    "function",
    "value",
    "introduce",
    "set",
    "timeout",
    "function",
    "going",
    "two",
    "parameters",
    "call",
    "back",
    "function",
    "amount",
    "time",
    "going",
    "wait",
    "execute",
    "function",
    "mills",
    "milliseconds",
    "translates",
    "3",
    "seconds",
    "let",
    "put",
    "function",
    "back",
    "milliseconds",
    "execute",
    "hello",
    "function",
    "1",
    "2",
    "3",
    "hello",
    "instead",
    "using",
    "function",
    "declaration",
    "going",
    "pass",
    "function",
    "expression",
    "argument",
    "set",
    "timeout",
    "function",
    "instead",
    "call",
    "back",
    "create",
    "function",
    "pass",
    "entire",
    "function",
    "argument",
    "going",
    "3",
    "seconds",
    "thee",
    "word",
    "hello",
    "let",
    "see",
    "works",
    "prove",
    "liar",
    "1",
    "2",
    "3",
    "hello",
    "javascript",
    "legal",
    "pass",
    "entire",
    "function",
    "argument",
    "treat",
    "value",
    "use",
    "previous",
    "examples",
    "map",
    "filter",
    "reduce",
    "methods",
    "arrays",
    "create",
    "array",
    "const",
    "numbers",
    "equals",
    "numbers",
    "1",
    "six",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "would",
    "like",
    "square",
    "numbers",
    "done",
    "previous",
    "lesson",
    "declare",
    "function",
    "function",
    "square",
    "one",
    "parameter",
    "example",
    "element",
    "returned",
    "raise",
    "base",
    "given",
    "power",
    "raising",
    "element",
    "power",
    "two",
    "map",
    "method",
    "return",
    "new",
    "array",
    "const",
    "squares",
    "equals",
    "numbers",
    "map",
    "passing",
    "call",
    "back",
    "square",
    "squares",
    "works",
    "using",
    "function",
    "declaration",
    "time",
    "use",
    "function",
    "expression",
    "treat",
    "function",
    "value",
    "let",
    "cut",
    "function",
    "replace",
    "call",
    "back",
    "paste",
    "within",
    "map",
    "method",
    "need",
    "remove",
    "name",
    "need",
    "name",
    "still",
    "going",
    "work",
    "yeah",
    "still",
    "necessarily",
    "need",
    "think",
    "function",
    "name",
    "one",
    "benefits",
    "polluting",
    "global",
    "nam",
    "space",
    "function",
    "names",
    "going",
    "using",
    "function",
    "need",
    "declare",
    "function",
    "let",
    "create",
    "function",
    "expression",
    "cube",
    "numbers",
    "beginner",
    "might",
    "helpful",
    "write",
    "functions",
    "declaration",
    "first",
    "transform",
    "function",
    "expression",
    "function",
    "cube",
    "element",
    "parameter",
    "going",
    "copy",
    "return",
    "element",
    "power",
    "three",
    "create",
    "new",
    "array",
    "const",
    "cubes",
    "equals",
    "numbers",
    "map",
    "need",
    "pass",
    "call",
    "back",
    "cut",
    "entire",
    "function",
    "paste",
    "within",
    "map",
    "method",
    "need",
    "name",
    "cubes",
    "original",
    "numbers",
    "cubed",
    "right",
    "think",
    "starting",
    "get",
    "hang",
    "let",
    "quickly",
    "use",
    "filter",
    "method",
    "filter",
    "even",
    "odd",
    "numbers",
    "create",
    "const",
    "even",
    "nums",
    "equals",
    "take",
    "array",
    "numbers",
    "use",
    "filter",
    "method",
    "pass",
    "function",
    "expression",
    "argument",
    "one",
    "parameter",
    "element",
    "going",
    "return",
    "element",
    "modulus",
    "2",
    "see",
    "divisible",
    "zero",
    "result",
    "strictly",
    "equal",
    "zero",
    "let",
    "see",
    "works",
    "even",
    "nums",
    "2",
    "46",
    "let",
    "odd",
    "numbers",
    "odd",
    "nums",
    "use",
    "filter",
    "method",
    "going",
    "change",
    "strictly",
    "equal",
    "zero",
    "return",
    "odd",
    "numbers",
    "135",
    "lastly",
    "reduce",
    "sum",
    "elements",
    "array",
    "const",
    "total",
    "equals",
    "numbers",
    "reduce",
    "pass",
    "function",
    "expression",
    "two",
    "parameters",
    "accumulator",
    "element",
    "return",
    "accumulator",
    "plus",
    "element",
    "return",
    "total",
    "21",
    "already",
    "practice",
    "map",
    "filter",
    "reduce",
    "instead",
    "using",
    "function",
    "declarations",
    "passing",
    "call",
    "back",
    "pass",
    "entire",
    "function",
    "expression",
    "argument",
    "methods",
    "next",
    "topic",
    "discuss",
    "arrow",
    "functions",
    "shortens",
    "syntax",
    "even",
    "like",
    "arrow",
    "functions",
    "right",
    "everybody",
    "function",
    "expressions",
    "way",
    "define",
    "functions",
    "value",
    "variable",
    "defined",
    "function",
    "expression",
    "variable",
    "stored",
    "within",
    "hello",
    "variable",
    "also",
    "passed",
    "entire",
    "functions",
    "argument",
    "javascript",
    "benefits",
    "function",
    "expressions",
    "one",
    "need",
    "keep",
    "thinking",
    "function",
    "names",
    "perform",
    "function",
    "forget",
    "also",
    "used",
    "callbacks",
    "asynchronous",
    "operations",
    "higher",
    "order",
    "functions",
    "closures",
    "event",
    "listeners",
    "topics",
    "still",
    "need",
    "discuss",
    "using",
    "function",
    "expressions",
    "lot",
    "worry",
    "practice",
    "well",
    "everybody",
    "function",
    "expressions",
    "javascript",
    "hey",
    "hello",
    "today",
    "going",
    "explain",
    "arrow",
    "functions",
    "javascript",
    "arrow",
    "function",
    "concise",
    "way",
    "write",
    "function",
    "expression",
    "good",
    "simple",
    "functions",
    "use",
    "formula",
    "parameters",
    "arrow",
    "code",
    "would",
    "like",
    "perform",
    "example",
    "suppose",
    "function",
    "declaration",
    "hello",
    "function",
    "work",
    "going",
    "word",
    "hello",
    "use",
    "function",
    "need",
    "call",
    "name",
    "add",
    "set",
    "parenthesis",
    "display",
    "word",
    "hello",
    "concise",
    "way",
    "write",
    "function",
    "use",
    "arrow",
    "function",
    "begin",
    "function",
    "expression",
    "convert",
    "arrow",
    "function",
    "understand",
    "differences",
    "time",
    "create",
    "constant",
    "hello",
    "hello",
    "going",
    "constant",
    "stores",
    "function",
    "expression",
    "using",
    "function",
    "expression",
    "would",
    "say",
    "function",
    "parenthesis",
    "curly",
    "braces",
    "code",
    "want",
    "perform",
    "word",
    "hello",
    "would",
    "thing",
    "hello",
    "concise",
    "way",
    "write",
    "function",
    "expression",
    "would",
    "use",
    "arrow",
    "function",
    "following",
    "formula",
    "list",
    "parameters",
    "need",
    "set",
    "parenthesis",
    "arrow",
    "code",
    "would",
    "like",
    "perform",
    "going",
    "word",
    "hello",
    "works",
    "sticking",
    "arrow",
    "function",
    "within",
    "variable",
    "named",
    "constant",
    "invoke",
    "arrow",
    "function",
    "within",
    "follow",
    "constant",
    "variable",
    "set",
    "parentheses",
    "like",
    "calling",
    "pair",
    "telephones",
    "talking",
    "send",
    "arguments",
    "arrow",
    "function",
    "need",
    "set",
    "parameters",
    "name",
    "parameter",
    "within",
    "code",
    "let",
    "use",
    "template",
    "string",
    "hello",
    "add",
    "placeholder",
    "add",
    "name",
    "parameter",
    "need",
    "pass",
    "argument",
    "right",
    "hello",
    "undefined",
    "pass",
    "first",
    "name",
    "argument",
    "hello",
    "bro",
    "within",
    "code",
    "need",
    "include",
    "one",
    "statement",
    "need",
    "enclose",
    "code",
    "within",
    "set",
    "cly",
    "braces",
    "let",
    "add",
    "new",
    "line",
    "console",
    "log",
    "old",
    "hello",
    "bro",
    "old",
    "okay",
    "let",
    "set",
    "another",
    "parameter",
    "time",
    "accept",
    "age",
    "argument",
    "let",
    "transform",
    "second",
    "placeholder",
    "parameter",
    "age",
    "years",
    "old",
    "pass",
    "second",
    "argument",
    "age",
    "hello",
    "bro",
    "25",
    "years",
    "old",
    "basics",
    "arrow",
    "function",
    "parameters",
    "arrow",
    "code",
    "would",
    "like",
    "perform",
    "need",
    "create",
    "function",
    "declaration",
    "let",
    "go",
    "another",
    "example",
    "set",
    "timeout",
    "function",
    "function",
    "accepts",
    "call",
    "back",
    "given",
    "amount",
    "time",
    "going",
    "execute",
    "code",
    "callback",
    "3",
    "seconds",
    "milliseconds",
    "execute",
    "whatever",
    "call",
    "back",
    "let",
    "create",
    "function",
    "say",
    "hello",
    "function",
    "hello",
    "word",
    "hello",
    "pass",
    "call",
    "back",
    "3",
    "seconds",
    "say",
    "hello",
    "place",
    "callback",
    "could",
    "use",
    "function",
    "expression",
    "let",
    "cut",
    "function",
    "remove",
    "argument",
    "paste",
    "function",
    "expression",
    "remember",
    "need",
    "name",
    "function",
    "expression",
    "works",
    "well",
    "hello",
    "otherwise",
    "use",
    "concise",
    "arrow",
    "function",
    "pass",
    "argument",
    "parameters",
    "arrow",
    "code",
    "word",
    "hello",
    "3",
    "seconds",
    "display",
    "word",
    "hello",
    "use",
    "arrow",
    "functions",
    "map",
    "filter",
    "reduce",
    "array",
    "numbers",
    "const",
    "numbers",
    "equals",
    "numbers",
    "1",
    "six",
    "let",
    "start",
    "using",
    "map",
    "filter",
    "square",
    "numbers",
    "use",
    "arrow",
    "functions",
    "const",
    "squares",
    "equals",
    "original",
    "array",
    "number",
    "numbers",
    "map",
    "normally",
    "would",
    "pass",
    "callback",
    "argument",
    "going",
    "use",
    "arrow",
    "function",
    "one",
    "parameter",
    "element",
    "arrow",
    "take",
    "element",
    "use",
    "raise",
    "element",
    "given",
    "power",
    "let",
    "squares",
    "squares",
    "original",
    "num",
    "squared",
    "1",
    "4",
    "9",
    "16",
    "25",
    "36",
    "let",
    "cube",
    "number",
    "const",
    "cubes",
    "raise",
    "element",
    "power",
    "three",
    "cubes",
    "numbers",
    "cubed",
    "use",
    "filter",
    "method",
    "filter",
    "numbers",
    "odd",
    "const",
    "even",
    "nums",
    "equals",
    "rray",
    "numbers",
    "use",
    "filter",
    "method",
    "pass",
    "call",
    "back",
    "need",
    "pass",
    "arrow",
    "function",
    "element",
    "parameter",
    "arrow",
    "necessarily",
    "need",
    "return",
    "statement",
    "one",
    "line",
    "code",
    "take",
    "element",
    "modulus",
    "2",
    "divisible",
    "two",
    "strictly",
    "equal",
    "z",
    "even",
    "number",
    "let",
    "even",
    "numbers",
    "2",
    "46",
    "let",
    "odd",
    "numbers",
    "odd",
    "nums",
    "take",
    "element",
    "modulus",
    "2",
    "strictly",
    "equal",
    "zero",
    "display",
    "odd",
    "nums",
    "1",
    "35",
    "lastly",
    "let",
    "reduce",
    "get",
    "total",
    "summing",
    "elements",
    "array",
    "const",
    "total",
    "equals",
    "original",
    "array",
    "reduce",
    "pass",
    "call",
    "back",
    "arrow",
    "function",
    "time",
    "two",
    "arguments",
    "accumulator",
    "element",
    "arrow",
    "return",
    "accumulator",
    "plus",
    "element",
    "display",
    "total",
    "total",
    "21",
    "right",
    "everybody",
    "arrow",
    "functions",
    "concise",
    "way",
    "write",
    "function",
    "expression",
    "good",
    "simple",
    "functions",
    "use",
    "list",
    "parameters",
    "within",
    "set",
    "parentheses",
    "arrow",
    "code",
    "would",
    "like",
    "perform",
    "example",
    "written",
    "concise",
    "way",
    "use",
    "map",
    "filter",
    "reduce",
    "methods",
    "normally",
    "pass",
    "call",
    "back",
    "argument",
    "function",
    "expression",
    "arrow",
    "function",
    "well",
    "everybody",
    "arrow",
    "functions",
    "javascript",
    "hey",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "discuss",
    "objects",
    "javascript",
    "object",
    "collection",
    "related",
    "properties",
    "methods",
    "properties",
    "things",
    "object",
    "first",
    "name",
    "age",
    "method",
    "function",
    "belongs",
    "object",
    "example",
    "person",
    "object",
    "person",
    "say",
    "hello",
    "say",
    "methods",
    "functions",
    "belong",
    "object",
    "object",
    "objects",
    "represent",
    "real",
    "world",
    "objects",
    "people",
    "products",
    "places",
    "example",
    "creating",
    "people",
    "objects",
    "people",
    "show",
    "spongebob",
    "start",
    "scratch",
    "though",
    "create",
    "person",
    "object",
    "use",
    "constant",
    "although",
    "necessary",
    "const",
    "person",
    "equals",
    "add",
    "set",
    "curly",
    "braces",
    "start",
    "property",
    "properties",
    "add",
    "many",
    "properties",
    "would",
    "like",
    "key",
    "value",
    "pairs",
    "person",
    "first",
    "name",
    "key",
    "colon",
    "value",
    "person",
    "first",
    "name",
    "spongebob",
    "separate",
    "key",
    "value",
    "pair",
    "comma",
    "let",
    "include",
    "last",
    "name",
    "property",
    "last",
    "name",
    "colon",
    "space",
    "square",
    "pants",
    "add",
    "comma",
    "done",
    "key",
    "value",
    "pair",
    "add",
    "age",
    "property",
    "30",
    "age",
    "different",
    "data",
    "type",
    "number",
    "first",
    "two",
    "example",
    "strings",
    "spongebob",
    "square",
    "pants",
    "let",
    "add",
    "boolean",
    "employed",
    "col",
    "space",
    "set",
    "true",
    "job",
    "crusty",
    "crab",
    "okay",
    "good",
    "enough",
    "would",
    "like",
    "access",
    "properties",
    "let",
    "need",
    "one",
    "properties",
    "take",
    "object",
    "referring",
    "case",
    "person",
    "dot",
    "name",
    "property",
    "let",
    "first",
    "name",
    "person",
    "first",
    "name",
    "property",
    "would",
    "give",
    "spongebob",
    "let",
    "last",
    "name",
    "take",
    "object",
    "name",
    "dot",
    "name",
    "property",
    "person",
    "last",
    "name",
    "squarepants",
    "let",
    "age",
    "person",
    "ag",
    "30",
    "person",
    "employed",
    "set",
    "true",
    "right",
    "let",
    "create",
    "another",
    "object",
    "create",
    "object",
    "patrick",
    "const",
    "person",
    "objects",
    "ca",
    "name",
    "objects",
    "need",
    "different",
    "names",
    "example",
    "ca",
    "two",
    "person",
    "objects",
    "ca",
    "name",
    "syntax",
    "error",
    "identifier",
    "person",
    "already",
    "declared",
    "rename",
    "first",
    "person",
    "person",
    "one",
    "second",
    "person",
    "person",
    "two",
    "place",
    "referencing",
    "person",
    "need",
    "person",
    "one",
    "let",
    "reuse",
    "key",
    "value",
    "pairs",
    "person",
    "two",
    "first",
    "name",
    "patrick",
    "last",
    "name",
    "star",
    "patrick",
    "know",
    "old",
    "according",
    "tv",
    "series",
    "let",
    "say",
    "42",
    "patrick",
    "employed",
    "watches",
    "tv",
    "day",
    "would",
    "like",
    "access",
    "person",
    "2",
    "properties",
    "okay",
    "well",
    "person",
    "2",
    "first",
    "name",
    "person",
    "2",
    "last",
    "name",
    "person",
    "2",
    "age",
    "person",
    "two",
    "employed",
    "okay",
    "person",
    "two",
    "patrick",
    "star",
    "42",
    "false",
    "properties",
    "object",
    "key",
    "value",
    "pairs",
    "add",
    "many",
    "would",
    "like",
    "example",
    "properties",
    "mimic",
    "real",
    "world",
    "attributes",
    "person",
    "might",
    "like",
    "first",
    "name",
    "last",
    "name",
    "age",
    "whatever",
    "think",
    "objects",
    "dedicated",
    "functions",
    "refer",
    "methods",
    "sorts",
    "actions",
    "objects",
    "perform",
    "example",
    "person",
    "could",
    "eat",
    "could",
    "drink",
    "could",
    "sleep",
    "sorts",
    "things",
    "people",
    "keep",
    "simple",
    "going",
    "create",
    "function",
    "say",
    "hello",
    "start",
    "person",
    "one",
    "say",
    "hello",
    "col",
    "space",
    "function",
    "expression",
    "going",
    "invoke",
    "function",
    "let",
    "would",
    "spongebob",
    "say",
    "greeting",
    "somebody",
    "hi",
    "spongebob",
    "sure",
    "including",
    "semicolon",
    "end",
    "work",
    "let",
    "test",
    "going",
    "person",
    "one",
    "invoke",
    "say",
    "hello",
    "method",
    "hi",
    "spongebob",
    "let",
    "add",
    "say",
    "hello",
    "method",
    "patrick",
    "person",
    "two",
    "change",
    "output",
    "say",
    "hello",
    "would",
    "patrick",
    "say",
    "hey",
    "patrick",
    "dot",
    "dot",
    "dot",
    "person",
    "two",
    "use",
    "say",
    "hello",
    "method",
    "hey",
    "patrick",
    "add",
    "many",
    "methods",
    "would",
    "like",
    "functions",
    "using",
    "function",
    "expression",
    "prefer",
    "could",
    "even",
    "use",
    "arrow",
    "function",
    "list",
    "arguments",
    "arrow",
    "code",
    "would",
    "like",
    "perform",
    "would",
    "work",
    "let",
    "add",
    "eat",
    "method",
    "eat",
    "function",
    "use",
    "function",
    "expression",
    "spongebob",
    "let",
    "console",
    "log",
    "spongebob",
    "eating",
    "eating",
    "crabby",
    "patty",
    "include",
    "eat",
    "function",
    "patrick",
    "well",
    "patrick",
    "going",
    "eat",
    "patrick",
    "eating",
    "eating",
    "roast",
    "beef",
    "chicken",
    "pizza",
    "would",
    "like",
    "use",
    "arrow",
    "function",
    "example",
    "list",
    "parameters",
    "arrow",
    "code",
    "would",
    "like",
    "perform",
    "necessary",
    "like",
    "arrow",
    "functions",
    "person",
    "one",
    "spongebob",
    "use",
    "eat",
    "method",
    "thing",
    "goes",
    "patrick",
    "person",
    "two",
    "spongebob",
    "eating",
    "crabby",
    "patty",
    "patrick",
    "eating",
    "roast",
    "beef",
    "chicken",
    "pizza",
    "right",
    "everybody",
    "javascript",
    "objects",
    "collection",
    "related",
    "properties",
    "methods",
    "properties",
    "object",
    "methods",
    "functions",
    "object",
    "perform",
    "represent",
    "real",
    "world",
    "objects",
    "people",
    "products",
    "places",
    "properties",
    "key",
    "value",
    "pairs",
    "methods",
    "functions",
    "belong",
    "another",
    "object",
    "well",
    "everybody",
    "introduction",
    "programming",
    "javascript",
    "hey",
    "got",
    "talk",
    "keyword",
    "reference",
    "object",
    "used",
    "object",
    "depends",
    "immediate",
    "context",
    "person",
    "object",
    "accessing",
    "name",
    "property",
    "could",
    "replace",
    "person",
    "long",
    "within",
    "context",
    "person",
    "object",
    "create",
    "object",
    "const",
    "person",
    "one",
    "let",
    "add",
    "property",
    "name",
    "name",
    "spongebob",
    "favorite",
    "food",
    "property",
    "fave",
    "food",
    "spongebob",
    "likes",
    "hamburgers",
    "specifically",
    "krabby",
    "patties",
    "give",
    "spongebob",
    "say",
    "hello",
    "method",
    "function",
    "going",
    "use",
    "template",
    "string",
    "hi",
    "use",
    "placeholder",
    "let",
    "attempt",
    "use",
    "person",
    "one",
    "name",
    "let",
    "see",
    "happens",
    "let",
    "take",
    "object",
    "person",
    "one",
    "invoke",
    "say",
    "hello",
    "method",
    "let",
    "see",
    "happens",
    "hello",
    "nothing",
    "name",
    "inside",
    "object",
    "person",
    "one",
    "would",
    "like",
    "access",
    "one",
    "properties",
    "going",
    "toe",
    "received",
    "property",
    "name",
    "property",
    "work",
    "hi",
    "spongebob",
    "using",
    "within",
    "context",
    "person",
    "one",
    "would",
    "like",
    "us",
    "saying",
    "person",
    "one",
    "name",
    "would",
    "difference",
    "reference",
    "object",
    "within",
    "said",
    "favorite",
    "food",
    "well",
    "favorite",
    "food",
    "short",
    "hi",
    "hamburgers",
    "would",
    "like",
    "like",
    "us",
    "saying",
    "person",
    "one",
    "fave",
    "food",
    "let",
    "add",
    "another",
    "method",
    "add",
    "eat",
    "method",
    "let",
    "use",
    "another",
    "template",
    "string",
    "add",
    "placeholder",
    "eating",
    "add",
    "another",
    "placeholder",
    "fave",
    "food",
    "let",
    "person",
    "one",
    "use",
    "eat",
    "method",
    "spongebob",
    "eating",
    "hamburgers",
    "cool",
    "thing",
    "keyword",
    "create",
    "new",
    "object",
    "methods",
    "use",
    "second",
    "object",
    "properties",
    "let",
    "copy",
    "person",
    "one",
    "paste",
    "change",
    "person",
    "one",
    "person",
    "two",
    "name",
    "person",
    "two",
    "patrick",
    "favorite",
    "food",
    "pizza",
    "let",
    "person",
    "two",
    "use",
    "eat",
    "method",
    "spongebob",
    "eating",
    "hamburgers",
    "patrick",
    "eating",
    "pizza",
    "since",
    "context",
    "person",
    "two",
    "imagine",
    "replacing",
    "person",
    "two",
    "person",
    "name",
    "person",
    "fave",
    "food",
    "use",
    "outside",
    "objects",
    "going",
    "returned",
    "window",
    "object",
    "basically",
    "returning",
    "window",
    "see",
    "website",
    "technically",
    "inside",
    "object",
    "already",
    "window",
    "object",
    "properties",
    "since",
    "using",
    "keyword",
    "inside",
    "context",
    "person",
    "one",
    "person",
    "two",
    "instead",
    "make",
    "reference",
    "objects",
    "hey",
    "one",
    "thing",
    "forgot",
    "mention",
    "keyword",
    "work",
    "arrow",
    "functions",
    "example",
    "person",
    "two",
    "let",
    "convert",
    "arrow",
    "function",
    "blank",
    "eating",
    "undefined",
    "use",
    "within",
    "arrow",
    "function",
    "making",
    "reference",
    "window",
    "object",
    "still",
    "window",
    "object",
    "name",
    "appearing",
    "empty",
    "fave",
    "food",
    "undefined",
    "window",
    "object",
    "favorite",
    "food",
    "property",
    "right",
    "everybody",
    "keyword",
    "using",
    "keyword",
    "lot",
    "reference",
    "reference",
    "object",
    "used",
    "keyword",
    "javascript",
    "people",
    "today",
    "got",
    "explain",
    "constructors",
    "javascript",
    "constructor",
    "special",
    "method",
    "defining",
    "properties",
    "methods",
    "objects",
    "prior",
    "videos",
    "constructed",
    "objects",
    "like",
    "would",
    "declare",
    "object",
    "assign",
    "properties",
    "methods",
    "know",
    "works",
    "create",
    "lot",
    "objects",
    "manually",
    "creating",
    "three",
    "different",
    "car",
    "objects",
    "lot",
    "lot",
    "work",
    "could",
    "instead",
    "use",
    "constructor",
    "construct",
    "objects",
    "automatically",
    "construct",
    "objects",
    "passing",
    "unique",
    "data",
    "constructor",
    "construct",
    "objects",
    "example",
    "going",
    "create",
    "function",
    "car",
    "pay",
    "attention",
    "capitalization",
    "need",
    "set",
    "parameters",
    "sorts",
    "properties",
    "accept",
    "construct",
    "car",
    "object",
    "make",
    "model",
    "year",
    "color",
    "arguments",
    "receive",
    "construct",
    "car",
    "object",
    "assign",
    "properties",
    "going",
    "use",
    "keyword",
    "doake",
    "equals",
    "make",
    "receive",
    "let",
    "model",
    "dood",
    "model",
    "equals",
    "model",
    "receive",
    "doe",
    "equals",
    "year",
    "color",
    "equals",
    "color",
    "good",
    "enough",
    "car",
    "constructor",
    "reusable",
    "method",
    "define",
    "properties",
    "methods",
    "objects",
    "create",
    "use",
    "constructor",
    "create",
    "instance",
    "object",
    "use",
    "const",
    "car1",
    "first",
    "object",
    "equals",
    "need",
    "use",
    "new",
    "keyword",
    "type",
    "name",
    "constructor",
    "car",
    "car",
    "special",
    "method",
    "need",
    "pass",
    "arguments",
    "need",
    "make",
    "model",
    "year",
    "color",
    "order",
    "first",
    "car",
    "feel",
    "free",
    "send",
    "different",
    "data",
    "constructor",
    "first",
    "car",
    "ford",
    "make",
    "sure",
    "value",
    "comma",
    "separated",
    "mustang",
    "year",
    "2024",
    "color",
    "red",
    "car",
    "object",
    "name",
    "car",
    "one",
    "going",
    "console",
    "log",
    "car",
    "1",
    "properties",
    "car",
    "make",
    "ford",
    "let",
    "properties",
    "model",
    "mustang",
    "year",
    "2024",
    "color",
    "red",
    "method",
    "reusable",
    "reuse",
    "create",
    "car",
    "objects",
    "let",
    "create",
    "const",
    "car",
    "2",
    "equals",
    "new",
    "car",
    "pass",
    "different",
    "data",
    "time",
    "make",
    "chevrolet",
    "pick",
    "camaro",
    "year",
    "2025",
    "color",
    "blue",
    "display",
    "car",
    "2",
    "properties",
    "let",
    "select",
    "car",
    "2make",
    "car",
    "model",
    "car",
    "year",
    "car",
    "color",
    "chevy",
    "camaro",
    "year",
    "2025",
    "color",
    "blue",
    "let",
    "create",
    "one",
    "car",
    "process",
    "const",
    "car",
    "3",
    "equals",
    "new",
    "car",
    "go",
    "dodge",
    "charger",
    "year",
    "2026",
    "color",
    "silver",
    "let",
    "access",
    "k",
    "3",
    "properties",
    "car",
    "make",
    "car",
    "model",
    "car",
    "year",
    "car",
    "dodge",
    "charger",
    "2026",
    "color",
    "silver",
    "another",
    "thing",
    "parameters",
    "name",
    "parameters",
    "anything",
    "assign",
    "properties",
    "kind",
    "confusing",
    "like",
    "make",
    "equals",
    "make",
    "really",
    "write",
    "constructors",
    "way",
    "readability",
    "technically",
    "would",
    "work",
    "renamed",
    "parameters",
    "example",
    "make",
    "parameter",
    "model",
    "b",
    "year",
    "c",
    "color",
    "sure",
    "change",
    "assign",
    "b",
    "c",
    "would",
    "still",
    "work",
    "however",
    "constructor",
    "readable",
    "like",
    "heck",
    "b",
    "c",
    "would",
    "good",
    "practice",
    "clear",
    "clearly",
    "define",
    "parameters",
    "readability",
    "purposes",
    "right",
    "let",
    "add",
    "method",
    "take",
    "drive",
    "equals",
    "function",
    "use",
    "template",
    "string",
    "drive",
    "add",
    "placeholder",
    "model",
    "cars",
    "1",
    "three",
    "let",
    "use",
    "drive",
    "method",
    "car",
    "drive",
    "drive",
    "mustang",
    "car",
    "drive",
    "drive",
    "camaro",
    "car",
    "drive",
    "drive",
    "charger",
    "right",
    "everybody",
    "constructor",
    "special",
    "method",
    "defining",
    "properties",
    "methods",
    "objects",
    "helps",
    "code",
    "reusability",
    "reuse",
    "create",
    "many",
    "objects",
    "instead",
    "type",
    "manually",
    "well",
    "everybody",
    "constructors",
    "javascript",
    "right",
    "let",
    "thing",
    "got",
    "talk",
    "classes",
    "javascript",
    "classes",
    "es6",
    "feature",
    "provides",
    "structured",
    "cleaner",
    "way",
    "work",
    "objects",
    "compared",
    "traditional",
    "constructor",
    "functions",
    "normally",
    "used",
    "classes",
    "going",
    "really",
    "helpful",
    "reach",
    "future",
    "topics",
    "static",
    "keyword",
    "encapsulation",
    "inheritance",
    "example",
    "constructor",
    "product",
    "product",
    "needs",
    "name",
    "price",
    "example",
    "shirt",
    "price",
    "1999",
    "instead",
    "using",
    "constructor",
    "method",
    "instead",
    "going",
    "use",
    "class",
    "class",
    "include",
    "constructor",
    "let",
    "start",
    "beginning",
    "create",
    "class",
    "type",
    "class",
    "name",
    "object",
    "class",
    "going",
    "serve",
    "blueprint",
    "objects",
    "products",
    "add",
    "set",
    "curly",
    "brac",
    "use",
    "constructor",
    "use",
    "constructor",
    "keyword",
    "within",
    "class",
    "list",
    "parameters",
    "name",
    "price",
    "product",
    "assign",
    "properties",
    "equals",
    "name",
    "parameter",
    "receive",
    "price",
    "equals",
    "price",
    "also",
    "create",
    "function",
    "function",
    "display",
    "product",
    "inside",
    "class",
    "need",
    "use",
    "function",
    "keyword",
    "would",
    "like",
    "display",
    "product",
    "product",
    "colon",
    "space",
    "include",
    "placeholder",
    "let",
    "also",
    "output",
    "price",
    "price",
    "pick",
    "unit",
    "currency",
    "use",
    "american",
    "dollars",
    "price",
    "let",
    "create",
    "product",
    "object",
    "objects",
    "const",
    "product",
    "one",
    "equals",
    "create",
    "new",
    "object",
    "use",
    "new",
    "keyword",
    "name",
    "class",
    "product",
    "constructor",
    "going",
    "called",
    "automatically",
    "need",
    "pass",
    "name",
    "price",
    "arguments",
    "pass",
    "shirt",
    "price",
    "sure",
    "everything",
    "works",
    "let",
    "invoke",
    "display",
    "product",
    "method",
    "product",
    "one",
    "display",
    "product",
    "method",
    "details",
    "product",
    "object",
    "product",
    "shirt",
    "priced",
    "let",
    "create",
    "class",
    "reusable",
    "product",
    "two",
    "pants",
    "pick",
    "2250",
    "price",
    "let",
    "display",
    "product",
    "two",
    "product",
    "two",
    "use",
    "use",
    "display",
    "product",
    "method",
    "class",
    "product",
    "pants",
    "price",
    "uh",
    "looks",
    "like",
    "one",
    "decimal",
    "point",
    "going",
    "make",
    "one",
    "change",
    "price",
    "use",
    "two",
    "fixed",
    "method",
    "set",
    "two",
    "decimals",
    "2250",
    "right",
    "product",
    "three",
    "const",
    "product",
    "3",
    "equals",
    "new",
    "product",
    "third",
    "product",
    "going",
    "underwear",
    "underwear",
    "really",
    "expensive",
    "100",
    "really",
    "good",
    "underwear",
    "guys",
    "product",
    "display",
    "product",
    "product",
    "underwear",
    "price",
    "100",
    "challenge",
    "round",
    "going",
    "add",
    "another",
    "method",
    "method",
    "one",
    "parameter",
    "sales",
    "tax",
    "create",
    "method",
    "calculate",
    "total",
    "including",
    "tax",
    "let",
    "create",
    "new",
    "method",
    "inside",
    "class",
    "need",
    "function",
    "keyword",
    "calculate",
    "total",
    "one",
    "parameter",
    "sales",
    "tax",
    "going",
    "return",
    "price",
    "plus",
    "calculate",
    "sales",
    "tax",
    "take",
    "price",
    "times",
    "sales",
    "tax",
    "assuming",
    "percentage",
    "okay",
    "let",
    "display",
    "product",
    "one",
    "product",
    "one",
    "display",
    "product",
    "also",
    "going",
    "create",
    "constant",
    "sales",
    "tax",
    "going",
    "change",
    "const",
    "sales",
    "tax",
    "let",
    "say",
    "sales",
    "tax",
    "5",
    "create",
    "variable",
    "const",
    "total",
    "equals",
    "let",
    "take",
    "product",
    "one",
    "use",
    "calculate",
    "total",
    "method",
    "pass",
    "sales",
    "tax",
    "either",
    "pass",
    "number",
    "variable",
    "total",
    "let",
    "display",
    "use",
    "template",
    "string",
    "total",
    "price",
    "parentheses",
    "tax",
    "add",
    "placeholder",
    "display",
    "total",
    "pick",
    "unit",
    "currency",
    "use",
    "american",
    "dollars",
    "add",
    "two",
    "fixed",
    "two",
    "set",
    "two",
    "decimal",
    "places",
    "right",
    "product",
    "shirt",
    "price",
    "1",
    "total",
    "price",
    "tax",
    "9",
    "let",
    "product",
    "two",
    "product",
    "two",
    "display",
    "product",
    "product",
    "two",
    "calulate",
    "total",
    "pants",
    "2250",
    "total",
    "price",
    "2363",
    "let",
    "check",
    "really",
    "expensive",
    "underwear",
    "product",
    "display",
    "product",
    "product",
    "calculate",
    "total",
    "underwear",
    "100",
    "including",
    "sales",
    "tax",
    "115",
    "right",
    "everybody",
    "classes",
    "es6",
    "feature",
    "provide",
    "structured",
    "cleaner",
    "way",
    "work",
    "objects",
    "compared",
    "traditional",
    "constructor",
    "functions",
    "learned",
    "last",
    "video",
    "classes",
    "going",
    "really",
    "helpful",
    "upcoming",
    "topics",
    "well",
    "everybody",
    "classes",
    "javascript",
    "hey",
    "people",
    "let",
    "thing",
    "static",
    "keyword",
    "static",
    "keyword",
    "defines",
    "properties",
    "methods",
    "belong",
    "class",
    "rather",
    "objects",
    "created",
    "class",
    "summary",
    "class",
    "anything",
    "static",
    "objects",
    "going",
    "create",
    "class",
    "math",
    "utilities",
    "class",
    "math",
    "util",
    "short",
    "create",
    "version",
    "pi",
    "use",
    "static",
    "keyword",
    "name",
    "pi",
    "pi",
    "equal",
    "first",
    "digits",
    "going",
    "zoom",
    "little",
    "would",
    "like",
    "static",
    "property",
    "access",
    "class",
    "let",
    "console",
    "llog",
    "name",
    "class",
    "math",
    "util",
    "dot",
    "name",
    "property",
    "pi",
    "static",
    "property",
    "need",
    "create",
    "object",
    "order",
    "use",
    "property",
    "type",
    "const",
    "math",
    "uil",
    "one",
    "equals",
    "new",
    "math",
    "youtil",
    "would",
    "type",
    "math",
    "util",
    "one",
    "name",
    "object",
    "order",
    "access",
    "pi",
    "type",
    "name",
    "class",
    "pretty",
    "convenient",
    "anything",
    "declared",
    "static",
    "belongs",
    "class",
    "object",
    "created",
    "class",
    "going",
    "create",
    "static",
    "method",
    "use",
    "static",
    "keyword",
    "get",
    "diameter",
    "pass",
    "radius",
    "argument",
    "get",
    "diameter",
    "one",
    "parameter",
    "radius",
    "going",
    "return",
    "radius",
    "time",
    "2",
    "okay",
    "let",
    "console",
    "log",
    "type",
    "name",
    "class",
    "matthew",
    "till",
    "dot",
    "name",
    "method",
    "get",
    "diameter",
    "pass",
    "radius",
    "though",
    "let",
    "pass",
    "10",
    "diameter",
    "20",
    "let",
    "create",
    "new",
    "static",
    "method",
    "get",
    "circumference",
    "get",
    "circumference",
    "formula",
    "going",
    "returning",
    "2",
    "times",
    "meaning",
    "matthew",
    "till",
    "pi",
    "times",
    "radius",
    "receive",
    "let",
    "let",
    "make",
    "c",
    "capital",
    "name",
    "class",
    "matthew",
    "till",
    "dot",
    "get",
    "circumference",
    "pass",
    "radius",
    "circumference",
    "let",
    "create",
    "one",
    "get",
    "area",
    "static",
    "get",
    "area",
    "need",
    "radius",
    "return",
    "pi",
    "time",
    "radius",
    "time",
    "radius",
    "rus",
    "squared",
    "matthew",
    "till",
    "name",
    "class",
    "get",
    "area",
    "pass",
    "10",
    "area",
    "31415",
    "next",
    "example",
    "mix",
    "regular",
    "properties",
    "methods",
    "static",
    "properties",
    "methods",
    "example",
    "two",
    "create",
    "class",
    "users",
    "class",
    "user",
    "create",
    "static",
    "variable",
    "keep",
    "track",
    "amount",
    "users",
    "create",
    "user",
    "count",
    "set",
    "equal",
    "zero",
    "include",
    "constructor",
    "let",
    "space",
    "little",
    "constructor",
    "going",
    "automatically",
    "called",
    "instantiate",
    "new",
    "object",
    "need",
    "one",
    "argument",
    "though",
    "create",
    "new",
    "user",
    "need",
    "username",
    "username",
    "assign",
    "username",
    "equals",
    "username",
    "create",
    "new",
    "user",
    "going",
    "increase",
    "user",
    "count",
    "one",
    "keep",
    "track",
    "many",
    "users",
    "create",
    "inside",
    "constructor",
    "write",
    "additional",
    "code",
    "assigning",
    "properties",
    "let",
    "take",
    "user",
    "user",
    "count",
    "increment",
    "let",
    "create",
    "user",
    "objects",
    "const",
    "user",
    "one",
    "equals",
    "new",
    "user",
    "pass",
    "username",
    "pass",
    "spongebob",
    "let",
    "user",
    "one",
    "username",
    "spongebob",
    "let",
    "attempt",
    "access",
    "user",
    "one",
    "user",
    "count",
    "user",
    "one",
    "user",
    "count",
    "get",
    "undefined",
    "user",
    "user",
    "count",
    "property",
    "static",
    "means",
    "belongs",
    "class",
    "objects",
    "created",
    "class",
    "access",
    "user",
    "count",
    "type",
    "name",
    "class",
    "user",
    "case",
    "one",
    "user",
    "let",
    "see",
    "happens",
    "create",
    "new",
    "user",
    "object",
    "user",
    "2",
    "equal",
    "patrick",
    "user",
    "count",
    "two",
    "let",
    "display",
    "user",
    "2",
    "name",
    "yep",
    "spongebob",
    "patrick",
    "total",
    "user",
    "count",
    "two",
    "let",
    "create",
    "third",
    "user",
    "user",
    "three",
    "sandy",
    "user",
    "username",
    "user",
    "count",
    "three",
    "static",
    "property",
    "keeping",
    "track",
    "amount",
    "users",
    "create",
    "let",
    "create",
    "method",
    "first",
    "one",
    "static",
    "say",
    "hello",
    "going",
    "use",
    "template",
    "string",
    "hello",
    "username",
    "add",
    "placeholder",
    "username",
    "let",
    "user",
    "one",
    "use",
    "say",
    "hello",
    "method",
    "thing",
    "user",
    "two",
    "user",
    "three",
    "hello",
    "username",
    "spongebob",
    "patrick",
    "sandy",
    "create",
    "static",
    "method",
    "get",
    "user",
    "count",
    "get",
    "user",
    "count",
    "use",
    "template",
    "string",
    "add",
    "placeholder",
    "user",
    "user",
    "count",
    "users",
    "online",
    "order",
    "access",
    "method",
    "type",
    "name",
    "class",
    "user",
    "getet",
    "user",
    "count",
    "oops",
    "ca",
    "conso",
    "log",
    "user",
    "getet",
    "user",
    "count",
    "three",
    "users",
    "online",
    "right",
    "everybody",
    "static",
    "keyword",
    "defines",
    "properties",
    "methods",
    "belong",
    "class",
    "rather",
    "objects",
    "created",
    "class",
    "summary",
    "class",
    "owns",
    "anything",
    "static",
    "objects",
    "well",
    "static",
    "keyword",
    "javascript",
    "hey",
    "everybody",
    "today",
    "video",
    "got",
    "explain",
    "inheritance",
    "inheritance",
    "allows",
    "new",
    "class",
    "inherit",
    "properties",
    "methods",
    "existing",
    "class",
    "two",
    "classes",
    "parent",
    "child",
    "relationship",
    "child",
    "inherit",
    "properties",
    "methods",
    "parent",
    "kind",
    "like",
    "family",
    "tree",
    "child",
    "inherit",
    "genes",
    "parent",
    "inheritance",
    "helps",
    "code",
    "reusability",
    "need",
    "keep",
    "repeating",
    "properties",
    "methods",
    "children",
    "share",
    "example",
    "create",
    "animal",
    "class",
    "class",
    "animal",
    "property",
    "alive",
    "animal",
    "start",
    "alive",
    "animals",
    "able",
    "eat",
    "sleep",
    "create",
    "methods",
    "eat",
    "method",
    "going",
    "use",
    "template",
    "string",
    "add",
    "placeholder",
    "name",
    "eating",
    "sleep",
    "method",
    "sleep",
    "name",
    "sleeping",
    "animal",
    "parent",
    "class",
    "create",
    "children",
    "classes",
    "inherit",
    "properties",
    "methods",
    "let",
    "create",
    "children",
    "classes",
    "class",
    "rabbit",
    "rabbit",
    "class",
    "inherit",
    "properties",
    "methods",
    "animal",
    "class",
    "declare",
    "parent",
    "child",
    "relationship",
    "child",
    "extends",
    "parent",
    "animal",
    "rabbit",
    "going",
    "give",
    "class",
    "name",
    "name",
    "equals",
    "rabbit",
    "property",
    "familiar",
    "static",
    "keyword",
    "make",
    "static",
    "create",
    "fish",
    "class",
    "also",
    "extends",
    "animal",
    "class",
    "fish",
    "extends",
    "animal",
    "fish",
    "one",
    "property",
    "name",
    "equals",
    "fish",
    "hawk",
    "class",
    "class",
    "hawk",
    "extends",
    "animal",
    "one",
    "name",
    "property",
    "hawk",
    "right",
    "let",
    "see",
    "works",
    "create",
    "rabbit",
    "fish",
    "hawk",
    "object",
    "access",
    "properties",
    "methods",
    "let",
    "create",
    "const",
    "rabbit",
    "equals",
    "new",
    "rabbit",
    "const",
    "fish",
    "equals",
    "new",
    "fish",
    "const",
    "hawk",
    "equals",
    "new",
    "hawk",
    "right",
    "let",
    "see",
    "rabbit",
    "life",
    "property",
    "take",
    "name",
    "object",
    "rabbit",
    "access",
    "property",
    "method",
    "alive",
    "property",
    "rabbit",
    "alive",
    "hawk",
    "swoops",
    "kills",
    "rabbit",
    "let",
    "change",
    "alive",
    "property",
    "rabbit",
    "rabbit",
    "alive",
    "equals",
    "false",
    "rabbit",
    "longer",
    "alive",
    "let",
    "see",
    "rabbit",
    "access",
    "eat",
    "sleep",
    "method",
    "rabbit",
    "eat",
    "rabbit",
    "eating",
    "sleep",
    "rabbit",
    "sleep",
    "rabbit",
    "sleeping",
    "let",
    "test",
    "fish",
    "fish",
    "alive",
    "fish",
    "eat",
    "method",
    "fish",
    "sle",
    "method",
    "fish",
    "alive",
    "fish",
    "eating",
    "fish",
    "sleeping",
    "hawk",
    "hawk",
    "alive",
    "hawk",
    "eat",
    "method",
    "hawk",
    "sle",
    "method",
    "hawk",
    "alive",
    "hawk",
    "eating",
    "hawk",
    "sleeping",
    "children",
    "classes",
    "rabbit",
    "fish",
    "hawk",
    "inherited",
    "properties",
    "methods",
    "parent",
    "animal",
    "class",
    "helps",
    "code",
    "reusability",
    "need",
    "declare",
    "properties",
    "methods",
    "within",
    "children",
    "classes",
    "like",
    "saving",
    "lot",
    "lines",
    "code",
    "apparent",
    "child",
    "classes",
    "imagine",
    "hundreds",
    "different",
    "child",
    "classes",
    "well",
    "using",
    "inheritance",
    "would",
    "saving",
    "lot",
    "time",
    "children",
    "unique",
    "properties",
    "methods",
    "example",
    "rabbits",
    "able",
    "run",
    "fish",
    "hawks",
    "ca",
    "run",
    "method",
    "belongs",
    "rabbits",
    "within",
    "rabbit",
    "class",
    "let",
    "create",
    "new",
    "method",
    "run",
    "method",
    "use",
    "template",
    "string",
    "add",
    "placeholder",
    "running",
    "within",
    "fish",
    "class",
    "let",
    "create",
    "swim",
    "method",
    "swim",
    "name",
    "swimming",
    "hawks",
    "able",
    "fly",
    "create",
    "fly",
    "method",
    "name",
    "flying",
    "let",
    "minimize",
    "classes",
    "let",
    "take",
    "rabbit",
    "object",
    "display",
    "alive",
    "property",
    "eat",
    "method",
    "sleep",
    "method",
    "run",
    "method",
    "rabbit",
    "run",
    "method",
    "rabbit",
    "eating",
    "rabbit",
    "sleeping",
    "rabbit",
    "running",
    "let",
    "fish",
    "fish",
    "alive",
    "fish",
    "eat",
    "method",
    "fish",
    "sle",
    "method",
    "fish",
    "run",
    "method",
    "fish",
    "run",
    "function",
    "run",
    "method",
    "belongs",
    "rabbit",
    "class",
    "fish",
    "ca",
    "run",
    "well",
    "legs",
    "give",
    "fish",
    "class",
    "run",
    "method",
    "swim",
    "though",
    "ca",
    "run",
    "fish",
    "swim",
    "method",
    "fish",
    "swimming",
    "let",
    "hawk",
    "hawk",
    "swim",
    "fly",
    "use",
    "fly",
    "method",
    "hawk",
    "eating",
    "hawk",
    "sleeping",
    "hawk",
    "flying",
    "course",
    "rabbit",
    "ca",
    "fly",
    "swim",
    "rabbit",
    "fly",
    "method",
    "rabbit",
    "fly",
    "function",
    "right",
    "everybody",
    "inheritance",
    "allows",
    "new",
    "class",
    "inherit",
    "properties",
    "methods",
    "existing",
    "class",
    "child",
    "inherits",
    "properties",
    "methods",
    "parent",
    "helps",
    "code",
    "reusability",
    "need",
    "declare",
    "properties",
    "methods",
    "classes",
    "simply",
    "reuse",
    "helps",
    "us",
    "follow",
    "dry",
    "principle",
    "repeat",
    "well",
    "everybody",
    "introduction",
    "inheritance",
    "javascript",
    "yo",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "explain",
    "super",
    "keyword",
    "javascript",
    "super",
    "keyword",
    "used",
    "classes",
    "call",
    "constructor",
    "access",
    "properties",
    "methods",
    "parent",
    "parent",
    "also",
    "known",
    "super",
    "class",
    "similar",
    "keyword",
    "refers",
    "object",
    "super",
    "refers",
    "parent",
    "object",
    "example",
    "use",
    "inheritance",
    "create",
    "parent",
    "class",
    "animal",
    "class",
    "animal",
    "animal",
    "class",
    "three",
    "children",
    "also",
    "known",
    "sub",
    "classes",
    "class",
    "rabbit",
    "extends",
    "animal",
    "class",
    "fish",
    "extends",
    "animal",
    "class",
    "hawk",
    "extends",
    "animal",
    "add",
    "empty",
    "constructor",
    "animal",
    "class",
    "need",
    "constructor",
    "rabbit",
    "class",
    "rabbits",
    "name",
    "property",
    "run",
    "speed",
    "assign",
    "properties",
    "within",
    "constructor",
    "equals",
    "name",
    "receive",
    "ag",
    "equals",
    "age",
    "runp",
    "speed",
    "equals",
    "run",
    "speed",
    "let",
    "copy",
    "constructor",
    "fish",
    "fish",
    "run",
    "speed",
    "swim",
    "speed",
    "let",
    "replace",
    "run",
    "speed",
    "swim",
    "speed",
    "copy",
    "constructor",
    "paste",
    "hawks",
    "example",
    "wo",
    "swim",
    "speed",
    "fly",
    "speed",
    "though",
    "replace",
    "swim",
    "speed",
    "fly",
    "speed",
    "let",
    "attempt",
    "create",
    "objects",
    "const",
    "rabbit",
    "equals",
    "new",
    "rabbit",
    "need",
    "name",
    "rabbit",
    "could",
    "say",
    "rabbit",
    "want",
    "creative",
    "could",
    "say",
    "something",
    "like",
    "bugs",
    "bunny",
    "uh",
    "let",
    "stick",
    "rabbit",
    "keep",
    "simple",
    "rabbit",
    "oney",
    "old",
    "run",
    "speed",
    "25",
    "mph",
    "use",
    "kilm",
    "feel",
    "free",
    "use",
    "kilom",
    "let",
    "fish",
    "const",
    "fish",
    "equals",
    "new",
    "fish",
    "name",
    "fish",
    "fish",
    "fish",
    "2",
    "years",
    "old",
    "swim",
    "speed",
    "12",
    "mil",
    "hour",
    "hawk",
    "const",
    "hawk",
    "equals",
    "new",
    "hawk",
    "hawk",
    "name",
    "hawk",
    "hawk",
    "3",
    "years",
    "years",
    "old",
    "fly",
    "speed",
    "50",
    "mph",
    "run",
    "program",
    "uncaught",
    "reference",
    "error",
    "must",
    "call",
    "super",
    "constructor",
    "derived",
    "class",
    "accessing",
    "keyword",
    "javascript",
    "telling",
    "us",
    "use",
    "keyword",
    "call",
    "constructor",
    "parent",
    "super",
    "class",
    "within",
    "respective",
    "constructors",
    "invoke",
    "constructor",
    "parent",
    "super",
    "class",
    "super",
    "keyword",
    "let",
    "constructors",
    "program",
    "actually",
    "runs",
    "one",
    "benefits",
    "using",
    "constructors",
    "properties",
    "children",
    "share",
    "common",
    "send",
    "constructor",
    "parent",
    "see",
    "repeating",
    "lot",
    "children",
    "classes",
    "name",
    "age",
    "property",
    "assigning",
    "would",
    "like",
    "follow",
    "dry",
    "principle",
    "repeat",
    "write",
    "code",
    "reuse",
    "within",
    "constructor",
    "parent",
    "accept",
    "name",
    "age",
    "property",
    "assign",
    "equals",
    "name",
    "ag",
    "equals",
    "age",
    "remove",
    "within",
    "child",
    "classes",
    "repeat",
    "less",
    "code",
    "right",
    "need",
    "pass",
    "arguments",
    "parent",
    "constructor",
    "name",
    "age",
    "example",
    "construct",
    "object",
    "either",
    "rabbit",
    "fish",
    "hawk",
    "accept",
    "three",
    "arguments",
    "name",
    "age",
    "either",
    "run",
    "speed",
    "swim",
    "speed",
    "fly",
    "speed",
    "depending",
    "animal",
    "creating",
    "properties",
    "share",
    "common",
    "send",
    "parent",
    "constructor",
    "helps",
    "code",
    "reusability",
    "lot",
    "less",
    "write",
    "evident",
    "three",
    "children",
    "classes",
    "imagine",
    "hundreds",
    "different",
    "classes",
    "like",
    "pokémon",
    "like",
    "pokémon",
    "would",
    "copy",
    "paste",
    "properties",
    "like",
    "thousand",
    "times",
    "constructing",
    "individual",
    "pokémon",
    "since",
    "share",
    "properties",
    "write",
    "one",
    "place",
    "make",
    "changes",
    "one",
    "place",
    "let",
    "test",
    "see",
    "works",
    "let",
    "rabbit",
    "name",
    "named",
    "rabbit",
    "let",
    "rabbit",
    "age",
    "rabbit",
    "oney",
    "old",
    "let",
    "see",
    "rabbit",
    "run",
    "speed",
    "25",
    "25",
    "mph",
    "let",
    "fish",
    "fish",
    "name",
    "fish",
    "ag",
    "let",
    "see",
    "fish",
    "run",
    "speed",
    "name",
    "fish",
    "age",
    "two",
    "run",
    "speed",
    "undefined",
    "fish",
    "ca",
    "run",
    "legs",
    "swim",
    "speed",
    "though",
    "swim",
    "speed",
    "12",
    "milph",
    "hawk",
    "hawk",
    "name",
    "hawk",
    "ag",
    "hawk",
    "flyp",
    "speed",
    "name",
    "hawk",
    "age",
    "3",
    "hawk",
    "fly",
    "speed",
    "50",
    "mph",
    "use",
    "super",
    "keyword",
    "class",
    "call",
    "constructor",
    "parent",
    "helps",
    "code",
    "reusability",
    "properties",
    "children",
    "share",
    "common",
    "case",
    "name",
    "age",
    "constructor",
    "parent",
    "take",
    "care",
    "repeat",
    "set",
    "code",
    "every",
    "single",
    "time",
    "child",
    "write",
    "one",
    "place",
    "reuse",
    "another",
    "thing",
    "super",
    "keyword",
    "extend",
    "method",
    "parent",
    "going",
    "within",
    "animal",
    "par",
    "class",
    "create",
    "move",
    "method",
    "within",
    "method",
    "following",
    "message",
    "placeholder",
    "moves",
    "speed",
    "add",
    "placeholder",
    "speed",
    "mph",
    "miles",
    "per",
    "hour",
    "prefer",
    "use",
    "kilometers",
    "move",
    "method",
    "one",
    "parameter",
    "speed",
    "need",
    "pass",
    "use",
    "within",
    "children",
    "classes",
    "write",
    "method",
    "also",
    "extends",
    "move",
    "method",
    "parent",
    "rabbits",
    "run",
    "method",
    "output",
    "following",
    "message",
    "use",
    "template",
    "string",
    "add",
    "placeholder",
    "run",
    "let",
    "copy",
    "run",
    "method",
    "paste",
    "fish",
    "change",
    "swim",
    "run",
    "fish",
    "ca",
    "run",
    "swim",
    "hawks",
    "fly",
    "method",
    "fly",
    "name",
    "fly",
    "rabbit",
    "object",
    "let",
    "invoke",
    "run",
    "method",
    "rabbit",
    "run",
    "let",
    "fish",
    "fish",
    "swim",
    "fish",
    "swim",
    "hawkfly",
    "method",
    "hawk",
    "fly",
    "within",
    "children",
    "classes",
    "going",
    "extend",
    "move",
    "method",
    "parent",
    "animal",
    "within",
    "run",
    "method",
    "rabbit",
    "class",
    "going",
    "output",
    "message",
    "also",
    "extend",
    "move",
    "method",
    "parent",
    "display",
    "message",
    "well",
    "refer",
    "parent",
    "class",
    "use",
    "super",
    "keyword",
    "similar",
    "means",
    "parent",
    "use",
    "parents",
    "move",
    "method",
    "send",
    "speed",
    "argument",
    "let",
    "send",
    "run",
    "speed",
    "rabbit",
    "runspeed",
    "let",
    "fish",
    "class",
    "extend",
    "move",
    "method",
    "super",
    "move",
    "send",
    "swim",
    "speed",
    "hawk",
    "super",
    "move",
    "flype",
    "speed",
    "let",
    "take",
    "rabbit",
    "use",
    "run",
    "method",
    "extend",
    "move",
    "method",
    "rabbit",
    "run",
    "rabbit",
    "moves",
    "speed",
    "25",
    "mph",
    "let",
    "fish",
    "fish",
    "swim",
    "fish",
    "swim",
    "fish",
    "moves",
    "speed",
    "12",
    "mph",
    "hawk",
    "hawk",
    "fly",
    "method",
    "hawk",
    "fly",
    "hawk",
    "moves",
    "speed",
    "50",
    "mph",
    "use",
    "super",
    "keyword",
    "extend",
    "method",
    "apparent",
    "right",
    "everybody",
    "super",
    "key",
    "word",
    "reference",
    "parent",
    "used",
    "call",
    "constructor",
    "parent",
    "access",
    "properties",
    "methods",
    "parent",
    "well",
    "everybody",
    "super",
    "keyword",
    "javascript",
    "hey",
    "hello",
    "uh",
    "today",
    "going",
    "explain",
    "getters",
    "setters",
    "javascript",
    "getters",
    "special",
    "methods",
    "make",
    "property",
    "readable",
    "setters",
    "special",
    "methods",
    "make",
    "property",
    "writable",
    "use",
    "use",
    "getters",
    "setters",
    "validate",
    "modify",
    "value",
    "reading",
    "writing",
    "property",
    "helps",
    "validation",
    "creating",
    "object",
    "updating",
    "one",
    "properties",
    "example",
    "create",
    "class",
    "rectangle",
    "need",
    "constructor",
    "two",
    "parameters",
    "width",
    "height",
    "assign",
    "width",
    "equals",
    "width",
    "height",
    "equals",
    "height",
    "let",
    "create",
    "rectangle",
    "object",
    "const",
    "rectangle",
    "equals",
    "new",
    "rectangle",
    "width",
    "let",
    "say",
    "million",
    "something",
    "ridiculous",
    "height",
    "want",
    "height",
    "pizza",
    "word",
    "pizza",
    "let",
    "rectangles",
    "width",
    "rectangle",
    "height",
    "created",
    "rectangle",
    "object",
    "width",
    "1",
    "million",
    "height",
    "pizza",
    "make",
    "sense",
    "could",
    "use",
    "validation",
    "creating",
    "object",
    "want",
    "people",
    "enter",
    "garbage",
    "values",
    "like",
    "negative",
    "million",
    "string",
    "expecting",
    "positive",
    "number",
    "width",
    "height",
    "getters",
    "setters",
    "come",
    "begin",
    "set",
    "letters",
    "setting",
    "one",
    "properties",
    "either",
    "initially",
    "constructor",
    "updating",
    "one",
    "later",
    "setting",
    "width",
    "height",
    "equal",
    "value",
    "go",
    "setter",
    "first",
    "outside",
    "constructor",
    "set",
    "property",
    "begin",
    "width",
    "special",
    "type",
    "method",
    "parameter",
    "new",
    "width",
    "want",
    "check",
    "assigning",
    "property",
    "using",
    "statement",
    "let",
    "check",
    "see",
    "new",
    "width",
    "user",
    "sends",
    "us",
    "greater",
    "zero",
    "assign",
    "doore",
    "width",
    "using",
    "underscore",
    "prefix",
    "tells",
    "developers",
    "private",
    "property",
    "touch",
    "could",
    "say",
    "private",
    "property",
    "width",
    "different",
    "standard",
    "width",
    "property",
    "assign",
    "private",
    "property",
    "width",
    "equal",
    "new",
    "width",
    "receive",
    "else",
    "let",
    "console",
    "error",
    "log",
    "use",
    "error",
    "time",
    "width",
    "must",
    "positive",
    "number",
    "right",
    "let",
    "see",
    "happens",
    "width",
    "must",
    "positive",
    "number",
    "width",
    "currently",
    "undefined",
    "good",
    "okay",
    "let",
    "height",
    "let",
    "copy",
    "setter",
    "width",
    "paste",
    "change",
    "every",
    "instance",
    "width",
    "height",
    "set",
    "height",
    "new",
    "height",
    "sure",
    "use",
    "camel",
    "case",
    "naming",
    "convention",
    "new",
    "height",
    "greater",
    "zero",
    "assign",
    "private",
    "property",
    "height",
    "equal",
    "new",
    "height",
    "else",
    "console",
    "error",
    "height",
    "must",
    "positive",
    "number",
    "go",
    "worked",
    "width",
    "must",
    "positive",
    "number",
    "height",
    "must",
    "positive",
    "number",
    "width",
    "height",
    "currently",
    "undefined",
    "order",
    "set",
    "width",
    "height",
    "pass",
    "positive",
    "number",
    "width",
    "say",
    "three",
    "width",
    "four",
    "access",
    "width",
    "height",
    "numbers",
    "still",
    "showing",
    "properties",
    "writable",
    "via",
    "setters",
    "readable",
    "getters",
    "come",
    "create",
    "two",
    "getters",
    "one",
    "width",
    "need",
    "use",
    "get",
    "keyword",
    "get",
    "width",
    "another",
    "type",
    "method",
    "going",
    "return",
    "private",
    "width",
    "appeared",
    "work",
    "three",
    "width",
    "let",
    "height",
    "return",
    "private",
    "height",
    "three",
    "four",
    "using",
    "setters",
    "even",
    "update",
    "values",
    "later",
    "let",
    "take",
    "rectangles",
    "width",
    "set",
    "equal",
    "five",
    "take",
    "height",
    "set",
    "equal",
    "six",
    "also",
    "appears",
    "work",
    "try",
    "update",
    "values",
    "garbage",
    "values",
    "like",
    "negative",
    "million",
    "word",
    "pizza",
    "get",
    "errors",
    "object",
    "retains",
    "initial",
    "values",
    "previously",
    "assigned",
    "three",
    "four",
    "getters",
    "even",
    "use",
    "property",
    "accessor",
    "dot",
    "access",
    "property",
    "necessarily",
    "exist",
    "example",
    "get",
    "area",
    "perform",
    "calculation",
    "return",
    "private",
    "width",
    "times",
    "private",
    "height",
    "access",
    "area",
    "property",
    "three",
    "width",
    "height",
    "four",
    "width",
    "times",
    "height",
    "gives",
    "us",
    "area",
    "12",
    "area",
    "property",
    "technically",
    "found",
    "within",
    "constructor",
    "access",
    "property",
    "getter",
    "getters",
    "even",
    "add",
    "additional",
    "logic",
    "would",
    "like",
    "preserve",
    "initial",
    "values",
    "width",
    "height",
    "return",
    "value",
    "use",
    "two",
    "fixed",
    "method",
    "give",
    "precision",
    "one",
    "let",
    "width",
    "height",
    "area",
    "going",
    "little",
    "complex",
    "enclose",
    "width",
    "time",
    "height",
    "add",
    "fixed",
    "one",
    "stop",
    "add",
    "centimeters",
    "end",
    "use",
    "template",
    "string",
    "add",
    "placeholder",
    "add",
    "cm",
    "cm",
    "area",
    "cm",
    "let",
    "make",
    "centimet",
    "squared",
    "area",
    "technically",
    "assigning",
    "values",
    "even",
    "initially",
    "creating",
    "object",
    "go",
    "setters",
    "input",
    "validation",
    "retrieve",
    "values",
    "try",
    "read",
    "add",
    "additional",
    "logic",
    "let",
    "go",
    "second",
    "example",
    "create",
    "class",
    "person",
    "need",
    "constructor",
    "accept",
    "first",
    "name",
    "last",
    "name",
    "age",
    "first",
    "name",
    "equals",
    "first",
    "name",
    "last",
    "name",
    "equals",
    "last",
    "name",
    "ag",
    "equals",
    "age",
    "let",
    "construct",
    "person",
    "const",
    "person",
    "equals",
    "new",
    "person",
    "let",
    "enter",
    "values",
    "make",
    "sense",
    "person",
    "first",
    "name",
    "number",
    "420",
    "last",
    "name",
    "number",
    "69",
    "age",
    "word",
    "pizza",
    "let",
    "person",
    "objects",
    "first",
    "name",
    "number",
    "420",
    "last",
    "name",
    "69",
    "age",
    "word",
    "pizza",
    "need",
    "validate",
    "input",
    "assigning",
    "properties",
    "need",
    "setters",
    "set",
    "first",
    "name",
    "property",
    "special",
    "type",
    "method",
    "parameter",
    "going",
    "new",
    "first",
    "name",
    "need",
    "sure",
    "value",
    "passed",
    "string",
    "length",
    "greater",
    "zero",
    "could",
    "write",
    "something",
    "like",
    "need",
    "statement",
    "let",
    "check",
    "type",
    "new",
    "first",
    "name",
    "strictly",
    "equal",
    "string",
    "new",
    "first",
    "nam",
    "length",
    "property",
    "greater",
    "zero",
    "checks",
    "assign",
    "private",
    "first",
    "name",
    "equal",
    "new",
    "first",
    "name",
    "receive",
    "else",
    "let",
    "console",
    "error",
    "first",
    "name",
    "must",
    "nonempty",
    "string",
    "let",
    "see",
    "worked",
    "going",
    "save",
    "first",
    "name",
    "must",
    "string",
    "currently",
    "first",
    "name",
    "undefined",
    "okay",
    "worked",
    "let",
    "copy",
    "setter",
    "first",
    "name",
    "paste",
    "change",
    "every",
    "instance",
    "first",
    "name",
    "last",
    "name",
    "new",
    "last",
    "name",
    "check",
    "type",
    "last",
    "name",
    "equal",
    "string",
    "new",
    "last",
    "name",
    "length",
    "greater",
    "zero",
    "assign",
    "private",
    "last",
    "name",
    "property",
    "equal",
    "new",
    "last",
    "name",
    "else",
    "last",
    "name",
    "must",
    "string",
    "also",
    "worked",
    "first",
    "name",
    "last",
    "name",
    "undefined",
    "let",
    "age",
    "set",
    "age",
    "parameter",
    "going",
    "new",
    "age",
    "using",
    "statement",
    "type",
    "new",
    "age",
    "strictly",
    "equal",
    "data",
    "type",
    "number",
    "new",
    "age",
    "greater",
    "equal",
    "zero",
    "take",
    "private",
    "age",
    "equals",
    "new",
    "age",
    "else",
    "going",
    "console",
    "error",
    "age",
    "must",
    "non",
    "negative",
    "number",
    "longer",
    "assign",
    "pizza",
    "age",
    "unfortunately",
    "right",
    "setter",
    "set",
    "let",
    "work",
    "getters",
    "let",
    "assign",
    "legitimate",
    "values",
    "first",
    "name",
    "spongebob",
    "last",
    "name",
    "squarepants",
    "age",
    "30",
    "errors",
    "anymore",
    "means",
    "set",
    "properties",
    "readable",
    "need",
    "getters",
    "let",
    "get",
    "first",
    "name",
    "get",
    "first",
    "name",
    "return",
    "private",
    "first",
    "name",
    "spongebob",
    "first",
    "name",
    "get",
    "last",
    "name",
    "return",
    "private",
    "last",
    "name",
    "last",
    "name",
    "let",
    "create",
    "getter",
    "full",
    "name",
    "let",
    "full",
    "name",
    "even",
    "though",
    "property",
    "undefined",
    "use",
    "getter",
    "mimic",
    "full",
    "name",
    "property",
    "combining",
    "first",
    "name",
    "last",
    "name",
    "properties",
    "get",
    "full",
    "name",
    "return",
    "going",
    "use",
    "string",
    "cination",
    "private",
    "first",
    "name",
    "plus",
    "space",
    "character",
    "private",
    "last",
    "name",
    "full",
    "name",
    "spongebob",
    "squarepants",
    "age",
    "get",
    "age",
    "return",
    "private",
    "age",
    "spongebob",
    "30",
    "right",
    "everybody",
    "getters",
    "setters",
    "getters",
    "special",
    "methods",
    "make",
    "property",
    "readable",
    "setters",
    "special",
    "methods",
    "make",
    "property",
    "writable",
    "using",
    "combination",
    "validate",
    "modify",
    "value",
    "reading",
    "writing",
    "property",
    "well",
    "everybody",
    "getters",
    "setters",
    "javascript",
    "hey",
    "good",
    "everybody",
    "today",
    "video",
    "going",
    "give",
    "lesson",
    "destructuring",
    "javascript",
    "destructuring",
    "allows",
    "us",
    "extract",
    "values",
    "arrays",
    "objects",
    "assign",
    "variables",
    "convenient",
    "way",
    "use",
    "straight",
    "brackets",
    "perform",
    "array",
    "destructuring",
    "curly",
    "braces",
    "perform",
    "object",
    "destructuring",
    "give",
    "five",
    "different",
    "examples",
    "example",
    "one",
    "swap",
    "value",
    "two",
    "variables",
    "let",
    "equal",
    "1",
    "let",
    "b",
    "equal",
    "use",
    "array",
    "structuring",
    "need",
    "set",
    "straight",
    "brackets",
    "add",
    "variables",
    "comma",
    "b",
    "equal",
    "creating",
    "new",
    "array",
    "right",
    "hand",
    "side",
    "b",
    "comma",
    "le",
    "hand",
    "side",
    "equals",
    "using",
    "destructuring",
    "right",
    "hand",
    "side",
    "creating",
    "array",
    "let",
    "see",
    "within",
    "variables",
    "b",
    "variable",
    "variable",
    "b",
    "values",
    "swapped",
    "two",
    "one",
    "one",
    "two",
    "example",
    "one",
    "use",
    "destructuring",
    "swap",
    "value",
    "two",
    "variables",
    "example",
    "two",
    "swap",
    "two",
    "elements",
    "array",
    "let",
    "create",
    "array",
    "colors",
    "const",
    "colors",
    "equals",
    "array",
    "pick",
    "colors",
    "go",
    "rgb",
    "would",
    "red",
    "green",
    "blue",
    "let",
    "add",
    "black",
    "white",
    "suppose",
    "would",
    "like",
    "swap",
    "position",
    "first",
    "element",
    "last",
    "element",
    "first",
    "element",
    "index",
    "zero",
    "particular",
    "last",
    "element",
    "index",
    "four",
    "going",
    "use",
    "array",
    "structuring",
    "need",
    "set",
    "straight",
    "brackets",
    "take",
    "array",
    "colors",
    "index",
    "zero",
    "comma",
    "rray",
    "index",
    "four",
    "want",
    "swap",
    "red",
    "white",
    "0",
    "1",
    "2",
    "3",
    "4",
    "fourth",
    "index",
    "equals",
    "creating",
    "new",
    "array",
    "using",
    "straight",
    "brackets",
    "colors",
    "index",
    "4",
    "comma",
    "colors",
    "index",
    "zero",
    "let",
    "print",
    "array",
    "r",
    "array",
    "colors",
    "go",
    "white",
    "green",
    "blue",
    "black",
    "red",
    "use",
    "destructuring",
    "swap",
    "two",
    "elements",
    "array",
    "example",
    "three",
    "assign",
    "array",
    "elements",
    "variables",
    "declare",
    "bunch",
    "variables",
    "const",
    "use",
    "destructuring",
    "destructuring",
    "array",
    "need",
    "set",
    "straight",
    "brackets",
    "create",
    "variable",
    "names",
    "first",
    "color",
    "second",
    "color",
    "third",
    "color",
    "assign",
    "equal",
    "array",
    "colors",
    "let",
    "print",
    "variables",
    "first",
    "color",
    "red",
    "second",
    "color",
    "green",
    "third",
    "color",
    "blue",
    "could",
    "combine",
    "array",
    "structuring",
    "rest",
    "parameters",
    "two",
    "colors",
    "left",
    "let",
    "assign",
    "new",
    "array",
    "use",
    "rest",
    "parameters",
    "name",
    "array",
    "extra",
    "colors",
    "extra",
    "colors",
    "new",
    "array",
    "remaining",
    "colors",
    "black",
    "white",
    "assign",
    "array",
    "elements",
    "variables",
    "using",
    "destructuring",
    "example",
    "extract",
    "values",
    "objects",
    "create",
    "two",
    "people",
    "objects",
    "const",
    "person",
    "one",
    "person",
    "one",
    "properties",
    "first",
    "name",
    "spongebob",
    "last",
    "name",
    "squarepants",
    "age",
    "30",
    "job",
    "meaning",
    "occupation",
    "john",
    "job",
    "job",
    "fry",
    "cook",
    "right",
    "let",
    "copy",
    "person",
    "one",
    "looks",
    "like",
    "n",
    "capital",
    "last",
    "name",
    "right",
    "let",
    "copy",
    "person",
    "one",
    "paste",
    "change",
    "person",
    "one",
    "person",
    "two",
    "first",
    "name",
    "person",
    "two",
    "patrick",
    "last",
    "name",
    "star",
    "age",
    "34",
    "person",
    "two",
    "going",
    "job",
    "property",
    "unemployed",
    "using",
    "destructuring",
    "extract",
    "values",
    "objects",
    "create",
    "variables",
    "const",
    "use",
    "object",
    "destructuring",
    "need",
    "set",
    "curly",
    "braces",
    "time",
    "create",
    "var",
    "variables",
    "first",
    "name",
    "last",
    "name",
    "age",
    "job",
    "equals",
    "let",
    "start",
    "person",
    "one",
    "let",
    "display",
    "variables",
    "first",
    "name",
    "spongebob",
    "last",
    "name",
    "squarepants",
    "age",
    "30",
    "job",
    "fry",
    "cook",
    "let",
    "person",
    "two",
    "patrick",
    "star",
    "age",
    "34",
    "person",
    "two",
    "job",
    "property",
    "person",
    "one",
    "though",
    "job",
    "variable",
    "undefined",
    "see",
    "set",
    "default",
    "values",
    "using",
    "destructuring",
    "somebody",
    "job",
    "property",
    "set",
    "job",
    "equal",
    "unemployed",
    "let",
    "see",
    "works",
    "yep",
    "patrick",
    "star",
    "age",
    "34",
    "job",
    "unemployed",
    "extract",
    "values",
    "objects",
    "values",
    "extracted",
    "even",
    "default",
    "values",
    "right",
    "last",
    "example",
    "destructure",
    "function",
    "parameters",
    "pass",
    "object",
    "function",
    "destructure",
    "passed",
    "let",
    "create",
    "function",
    "create",
    "function",
    "display",
    "person",
    "parameters",
    "use",
    "destructuring",
    "destructuring",
    "object",
    "need",
    "set",
    "curly",
    "braces",
    "receive",
    "object",
    "going",
    "invoke",
    "display",
    "person",
    "pass",
    "person",
    "one",
    "argument",
    "receive",
    "person",
    "one",
    "argument",
    "destructure",
    "object",
    "right",
    "away",
    "create",
    "first",
    "name",
    "parameter",
    "last",
    "name",
    "age",
    "job",
    "print",
    "lines",
    "using",
    "use",
    "template",
    "string",
    "let",
    "say",
    "name",
    "colon",
    "space",
    "add",
    "placeholder",
    "first",
    "name",
    "last",
    "name",
    "let",
    "add",
    "new",
    "line",
    "age",
    "call",
    "space",
    "add",
    "placeholder",
    "age",
    "lastly",
    "job",
    "job",
    "colon",
    "space",
    "add",
    "placeholder",
    "job",
    "passing",
    "person",
    "one",
    "structuring",
    "display",
    "name",
    "spongebob",
    "squarepants",
    "age",
    "30",
    "job",
    "fry",
    "cook",
    "let",
    "pass",
    "person",
    "two",
    "argument",
    "name",
    "patrick",
    "star",
    "age",
    "34",
    "job",
    "undefined",
    "set",
    "default",
    "value",
    "destructuring",
    "object",
    "job",
    "property",
    "set",
    "equal",
    "unemployed",
    "patrick",
    "star",
    "age",
    "34",
    "job",
    "unemployed",
    "pass",
    "person",
    "one",
    "job",
    "unemployed",
    "fry",
    "cook",
    "job",
    "property",
    "use",
    "default",
    "value",
    "right",
    "everybody",
    "examples",
    "destructuring",
    "lot",
    "destructuring",
    "use",
    "set",
    "straight",
    "brackets",
    "perform",
    "array",
    "destructuring",
    "curly",
    "braces",
    "object",
    "destructuring",
    "allow",
    "extract",
    "values",
    "aray",
    "objects",
    "assign",
    "variables",
    "convenient",
    "way",
    "well",
    "destructuring",
    "javascript",
    "uh",
    "yeah",
    "thing",
    "today",
    "today",
    "got",
    "explain",
    "nested",
    "objects",
    "javascript",
    "nested",
    "objects",
    "objects",
    "inside",
    "objects",
    "allow",
    "represent",
    "complex",
    "data",
    "structures",
    "child",
    "object",
    "enclosed",
    "parent",
    "object",
    "using",
    "nested",
    "objects",
    "cap",
    "capability",
    "creating",
    "complex",
    "data",
    "structures",
    "example",
    "person",
    "object",
    "could",
    "contain",
    "address",
    "object",
    "well",
    "contact",
    "info",
    "object",
    "shopping",
    "cart",
    "object",
    "item",
    "shopping",
    "cart",
    "individual",
    "object",
    "keyboard",
    "mouse",
    "monitor",
    "child",
    "objects",
    "would",
    "properties",
    "methods",
    "example",
    "price",
    "name",
    "specifications",
    "item",
    "shipping",
    "method",
    "nested",
    "objects",
    "objects",
    "inside",
    "objects",
    "let",
    "give",
    "basic",
    "example",
    "create",
    "person",
    "object",
    "const",
    "person",
    "equals",
    "object",
    "need",
    "set",
    "curly",
    "brac",
    "person",
    "might",
    "full",
    "name",
    "property",
    "set",
    "spongebob",
    "example",
    "spongebob",
    "squarepants",
    "age",
    "30",
    "spongebob",
    "student",
    "student",
    "boting",
    "school",
    "let",
    "say",
    "true",
    "objects",
    "also",
    "contain",
    "array",
    "create",
    "array",
    "hobbies",
    "declare",
    "array",
    "need",
    "set",
    "straight",
    "brackets",
    "sorts",
    "hobbies",
    "spongebob",
    "knows",
    "karate",
    "jellyfishing",
    "need",
    "one",
    "uh",
    "let",
    "say",
    "enjoys",
    "cooking",
    "going",
    "create",
    "nested",
    "object",
    "person",
    "object",
    "address",
    "object",
    "need",
    "set",
    "curly",
    "braces",
    "properties",
    "inner",
    "address",
    "object",
    "could",
    "street",
    "spongebob",
    "address",
    "124",
    "con",
    "street",
    "city",
    "bikini",
    "bottom",
    "country",
    "wo",
    "full",
    "address",
    "think",
    "good",
    "enough",
    "example",
    "spongebob",
    "lives",
    "ocean",
    "let",
    "say",
    "country",
    "international",
    "waters",
    "abbreviate",
    "international",
    "person",
    "object",
    "nested",
    "address",
    "object",
    "inside",
    "access",
    "properties",
    "person",
    "object",
    "would",
    "type",
    "name",
    "object",
    "use",
    "property",
    "accessor",
    "dot",
    "name",
    "property",
    "full",
    "name",
    "spongebob",
    "squarepants",
    "let",
    "print",
    "age",
    "30",
    "spongebob",
    "student",
    "true",
    "going",
    "display",
    "array",
    "hob",
    "person",
    "hobbies",
    "give",
    "array",
    "need",
    "individual",
    "elements",
    "list",
    "index",
    "number",
    "hobbies",
    "index",
    "zero",
    "would",
    "karate",
    "one",
    "jellyfishing",
    "index",
    "two",
    "cooking",
    "let",
    "person",
    "object",
    "dot",
    "address",
    "object",
    "would",
    "return",
    "entire",
    "object",
    "need",
    "one",
    "properties",
    "within",
    "object",
    "within",
    "person",
    "object",
    "would",
    "follow",
    "inner",
    "object",
    "property",
    "accessor",
    "dot",
    "person",
    "address",
    "street",
    "would",
    "give",
    "124",
    "con",
    "street",
    "city",
    "person",
    "address",
    "city",
    "bikini",
    "bottom",
    "person",
    "address",
    "country",
    "international",
    "waters",
    "accessing",
    "property",
    "within",
    "nested",
    "object",
    "use",
    "property",
    "accessor",
    "dot",
    "would",
    "like",
    "loop",
    "properties",
    "nested",
    "object",
    "write",
    "loop",
    "like",
    "const",
    "property",
    "person",
    "address",
    "take",
    "person",
    "object",
    "access",
    "nested",
    "object",
    "address",
    "use",
    "index",
    "operator",
    "straight",
    "brackets",
    "give",
    "current",
    "property",
    "right",
    "let",
    "make",
    "something",
    "little",
    "complicated",
    "going",
    "create",
    "class",
    "utilizes",
    "nested",
    "objects",
    "begin",
    "class",
    "address",
    "class",
    "constructor",
    "address",
    "need",
    "three",
    "things",
    "feel",
    "free",
    "add",
    "would",
    "like",
    "street",
    "city",
    "country",
    "assign",
    "properties",
    "street",
    "equals",
    "street",
    "city",
    "equals",
    "city",
    "country",
    "equals",
    "country",
    "create",
    "person",
    "class",
    "class",
    "person",
    "person",
    "class",
    "also",
    "constructor",
    "need",
    "name",
    "age",
    "address",
    "address",
    "going",
    "use",
    "rest",
    "parameters",
    "pass",
    "different",
    "parts",
    "address",
    "store",
    "within",
    "array",
    "create",
    "person",
    "object",
    "assign",
    "equals",
    "name",
    "ag",
    "equals",
    "age",
    "address",
    "going",
    "construct",
    "address",
    "object",
    "address",
    "equals",
    "new",
    "address",
    "going",
    "call",
    "constructor",
    "address",
    "class",
    "pass",
    "address",
    "going",
    "utilize",
    "spread",
    "operator",
    "spread",
    "address",
    "send",
    "address",
    "object",
    "street",
    "city",
    "country",
    "right",
    "let",
    "construct",
    "person",
    "objects",
    "const",
    "person",
    "one",
    "equals",
    "new",
    "person",
    "call",
    "constructor",
    "pass",
    "arguments",
    "match",
    "parameter",
    "name",
    "first",
    "name",
    "keep",
    "short",
    "age",
    "spongebob",
    "30",
    "also",
    "need",
    "address",
    "street",
    "city",
    "country",
    "124",
    "con",
    "street",
    "city",
    "bikini",
    "bottom",
    "country",
    "international",
    "waters",
    "readability",
    "going",
    "put",
    "address",
    "new",
    "line",
    "let",
    "create",
    "person",
    "two",
    "person",
    "two",
    "patrick",
    "age",
    "37",
    "patrick",
    "live",
    "128",
    "con",
    "street",
    "city",
    "country",
    "let",
    "make",
    "person",
    "three",
    "person",
    "three",
    "squidward",
    "age",
    "45",
    "squidward",
    "live",
    "126",
    "constr",
    "right",
    "let",
    "see",
    "worked",
    "let",
    "start",
    "person",
    "one",
    "person",
    "one",
    "name",
    "spongebob",
    "age",
    "30",
    "let",
    "get",
    "address",
    "address",
    "returns",
    "object",
    "good",
    "wanted",
    "nested",
    "object",
    "address",
    "object",
    "properties",
    "within",
    "address",
    "object",
    "street",
    "city",
    "country",
    "use",
    "property",
    "accessor",
    "dot",
    "give",
    "street",
    "124",
    "con",
    "street",
    "city",
    "bikini",
    "bottom",
    "country",
    "international",
    "waters",
    "right",
    "let",
    "confirm",
    "person",
    "3",
    "sure",
    "works",
    "person",
    "3",
    "give",
    "name",
    "squidward",
    "age",
    "45",
    "address",
    "gives",
    "object",
    "use",
    "property",
    "accessor",
    "give",
    "street",
    "126",
    "con",
    "street",
    "city",
    "beini",
    "bottom",
    "country",
    "international",
    "waters",
    "also",
    "work",
    "person",
    "two",
    "worked",
    "person",
    "one",
    "three",
    "right",
    "everybody",
    "nested",
    "objects",
    "objects",
    "inside",
    "objects",
    "allow",
    "represent",
    "complex",
    "data",
    "structures",
    "child",
    "object",
    "enclosed",
    "parent",
    "object",
    "example",
    "address",
    "child",
    "object",
    "person",
    "object",
    "creating",
    "new",
    "object",
    "within",
    "person",
    "object",
    "well",
    "everybody",
    "nested",
    "objects",
    "javascript",
    "hey",
    "everybody",
    "today",
    "video",
    "going",
    "show",
    "work",
    "array",
    "objects",
    "javascript",
    "create",
    "array",
    "fruit",
    "objects",
    "create",
    "five",
    "fruit",
    "objects",
    "create",
    "object",
    "need",
    "set",
    "krly",
    "braces",
    "object",
    "comma",
    "separated",
    "readability",
    "going",
    "place",
    "object",
    "new",
    "line",
    "objects",
    "unique",
    "properties",
    "methods",
    "first",
    "fruit",
    "object",
    "name",
    "apple",
    "color",
    "red",
    "calories",
    "meaning",
    "calories",
    "per",
    "serving",
    "95",
    "first",
    "object",
    "let",
    "copy",
    "properties",
    "paste",
    "object",
    "two",
    "change",
    "name",
    "orange",
    "color",
    "also",
    "orange",
    "calories",
    "45",
    "object",
    "three",
    "name",
    "banana",
    "color",
    "yellow",
    "calories",
    "105",
    "object",
    "4",
    "coconut",
    "color",
    "white",
    "calories",
    "159",
    "last",
    "object",
    "pineapple",
    "color",
    "yellow",
    "calories",
    "37",
    "right",
    "array",
    "objects",
    "lot",
    "ever",
    "need",
    "property",
    "within",
    "one",
    "objects",
    "array",
    "would",
    "take",
    "array",
    "cas",
    "fruits",
    "add",
    "index",
    "number",
    "dot",
    "name",
    "property",
    "example",
    "name",
    "need",
    "name",
    "property",
    "first",
    "object",
    "would",
    "apple",
    "let",
    "test",
    "name",
    "property",
    "aray",
    "fruits",
    "index",
    "zero",
    "would",
    "apple",
    "one",
    "orange",
    "two",
    "banana",
    "three",
    "coconut",
    "four",
    "pineapple",
    "let",
    "select",
    "different",
    "property",
    "let",
    "go",
    "calories",
    "95",
    "45",
    "105",
    "159",
    "37",
    "access",
    "property",
    "within",
    "array",
    "objects",
    "add",
    "new",
    "object",
    "use",
    "push",
    "method",
    "let",
    "take",
    "array",
    "fruits",
    "use",
    "push",
    "method",
    "push",
    "new",
    "object",
    "array",
    "name",
    "grapes",
    "color",
    "purple",
    "calories",
    "62",
    "let",
    "r",
    "array",
    "fruits",
    "six",
    "apple",
    "orange",
    "banana",
    "coconut",
    "pineapple",
    "grapes",
    "uh",
    "misspelled",
    "grap",
    "use",
    "pop",
    "method",
    "remove",
    "element",
    "fruits",
    "pop",
    "remove",
    "pineapple",
    "apple",
    "orange",
    "banana",
    "coconut",
    "pineapple",
    "splice",
    "splice",
    "remove",
    "elements",
    "certain",
    "indices",
    "fruits",
    "splice",
    "let",
    "select",
    "indices",
    "1",
    "two",
    "left",
    "apple",
    "coconut",
    "pineapple",
    "use",
    "method",
    "loop",
    "elements",
    "array",
    "let",
    "display",
    "object",
    "name",
    "fruits",
    "need",
    "call",
    "back",
    "function",
    "expression",
    "arrow",
    "function",
    "let",
    "use",
    "arrow",
    "function",
    "every",
    "fruit",
    "fruit",
    "return",
    "entire",
    "objects",
    "one",
    "properties",
    "select",
    "dot",
    "property",
    "name",
    "fruit",
    "names",
    "let",
    "go",
    "colors",
    "calories",
    "also",
    "map",
    "method",
    "map",
    "method",
    "run",
    "element",
    "function",
    "return",
    "new",
    "array",
    "let",
    "create",
    "array",
    "fruit",
    "names",
    "const",
    "fruit",
    "names",
    "equals",
    "take",
    "array",
    "fruits",
    "use",
    "map",
    "method",
    "use",
    "arrow",
    "function",
    "every",
    "fruit",
    "arrow",
    "return",
    "fruits",
    "name",
    "array",
    "fruit",
    "names",
    "array",
    "fruit",
    "names",
    "let",
    "colors",
    "fruit",
    "colors",
    "return",
    "every",
    "color",
    "property",
    "fruit",
    "fruit",
    "colors",
    "red",
    "orange",
    "yellow",
    "white",
    "yellow",
    "let",
    "calories",
    "fruit",
    "calories",
    "return",
    "calories",
    "property",
    "console",
    "log",
    "fruit",
    "calories",
    "array",
    "map",
    "method",
    "return",
    "new",
    "array",
    "let",
    "cover",
    "filter",
    "filter",
    "return",
    "new",
    "array",
    "using",
    "element",
    "checking",
    "condition",
    "let",
    "return",
    "new",
    "array",
    "color",
    "fruit",
    "yellow",
    "two",
    "const",
    "yellow",
    "fruits",
    "equals",
    "take",
    "array",
    "fruits",
    "use",
    "filter",
    "method",
    "one",
    "parameter",
    "fruit",
    "arrow",
    "condition",
    "return",
    "fruit",
    "fruit",
    "color",
    "property",
    "strictly",
    "equal",
    "yellow",
    "array",
    "yellow",
    "fruits",
    "two",
    "bananas",
    "pineapples",
    "color",
    "yellow",
    "let",
    "create",
    "new",
    "array",
    "fruits",
    "low",
    "calories",
    "calories",
    "100",
    "const",
    "low",
    "cal",
    "fruits",
    "take",
    "ar",
    "array",
    "fruits",
    "use",
    "filter",
    "method",
    "every",
    "fruit",
    "arrow",
    "check",
    "calories",
    "fruit",
    "less",
    "100",
    "put",
    "within",
    "new",
    "array",
    "three",
    "fruits",
    "low",
    "calories",
    "apple",
    "orange",
    "pineapple",
    "calories",
    "95",
    "45",
    "37",
    "less",
    "100",
    "let",
    "find",
    "high",
    "calorie",
    "fruits",
    "change",
    "rate",
    "high",
    "cal",
    "fruits",
    "calories",
    "fruit",
    "greater",
    "equal",
    "100",
    "ar",
    "array",
    "high",
    "cal",
    "fruits",
    "two",
    "banana",
    "coconuts",
    "calories",
    "105",
    "159",
    "let",
    "use",
    "reduce",
    "method",
    "admit",
    "going",
    "little",
    "tricky",
    "try",
    "best",
    "walk",
    "reduce",
    "method",
    "return",
    "single",
    "value",
    "case",
    "object",
    "one",
    "objects",
    "let",
    "return",
    "object",
    "greatest",
    "amount",
    "calories",
    "store",
    "within",
    "constant",
    "const",
    "max",
    "fruit",
    "equals",
    "take",
    "array",
    "fruits",
    "use",
    "reduce",
    "method",
    "going",
    "two",
    "parameters",
    "accumulator",
    "keeps",
    "track",
    "greatest",
    "value",
    "iteration",
    "next",
    "element",
    "think",
    "rename",
    "let",
    "rename",
    "accumulator",
    "max",
    "going",
    "current",
    "record",
    "holder",
    "object",
    "greatest",
    "amount",
    "calories",
    "element",
    "fruit",
    "meaning",
    "next",
    "fruit",
    "two",
    "parameters",
    "arrow",
    "going",
    "check",
    "fruit",
    "next",
    "fruit",
    "line",
    "calories",
    "greater",
    "current",
    "record",
    "holders",
    "calories",
    "max",
    "calories",
    "readability",
    "going",
    "put",
    "new",
    "line",
    "going",
    "use",
    "trary",
    "operator",
    "true",
    "next",
    "fruit",
    "calories",
    "record",
    "holder",
    "return",
    "fruit",
    "meaning",
    "next",
    "fruit",
    "colon",
    "meaning",
    "otherwise",
    "return",
    "max",
    "let",
    "see",
    "works",
    "let",
    "fruit",
    "maximum",
    "amount",
    "calories",
    "coconut",
    "159",
    "calories",
    "need",
    "calories",
    "would",
    "type",
    "dot",
    "calories",
    "give",
    "calories",
    "case",
    "returning",
    "entire",
    "object",
    "object",
    "let",
    "find",
    "fruit",
    "least",
    "amount",
    "calories",
    "let",
    "copy",
    "code",
    "paste",
    "make",
    "changes",
    "min",
    "fruit",
    "change",
    "max",
    "min",
    "condition",
    "calories",
    "next",
    "fruit",
    "less",
    "calories",
    "minimum",
    "record",
    "holder",
    "min",
    "fruit",
    "pineapple",
    "37",
    "calories",
    "right",
    "everybody",
    "ways",
    "work",
    "array",
    "objects",
    "lot",
    "map",
    "filter",
    "reduce",
    "splice",
    "pop",
    "push",
    "sorts",
    "things",
    "well",
    "example",
    "array",
    "objects",
    "javascript",
    "yo",
    "uh",
    "today",
    "going",
    "talking",
    "sort",
    "method",
    "javascript",
    "sort",
    "method",
    "used",
    "sort",
    "elements",
    "array",
    "place",
    "however",
    "sort",
    "method",
    "sort",
    "elements",
    "strings",
    "lexicographic",
    "order",
    "alphabetical",
    "could",
    "summarize",
    "lexicographic",
    "means",
    "means",
    "alphabet",
    "plus",
    "numbers",
    "plus",
    "symbols",
    "strings",
    "let",
    "give",
    "example",
    "alphabetical",
    "characters",
    "array",
    "fruits",
    "sort",
    "array",
    "take",
    "array",
    "name",
    "fruits",
    "use",
    "sort",
    "method",
    "array",
    "fruits",
    "let",
    "expand",
    "array",
    "sorted",
    "sorting",
    "treat",
    "elements",
    "strings",
    "array",
    "numbers",
    "add",
    "numbers",
    "1",
    "10",
    "somewhat",
    "random",
    "order",
    "let",
    "change",
    "array",
    "numbers",
    "numbers",
    "sort",
    "con",
    "cons",
    "log",
    "numbers",
    "result",
    "one",
    "10",
    "rest",
    "seem",
    "order",
    "sorting",
    "array",
    "numerically",
    "sorting",
    "array",
    "lexicographically",
    "treating",
    "numbers",
    "strings",
    "one",
    "10",
    "10",
    "end",
    "expect",
    "would",
    "couple",
    "extra",
    "steps",
    "need",
    "involving",
    "sorting",
    "numbers",
    "inside",
    "sort",
    "method",
    "write",
    "custom",
    "comparison",
    "function",
    "normally",
    "call",
    "back",
    "write",
    "function",
    "expression",
    "even",
    "better",
    "yet",
    "arrow",
    "function",
    "write",
    "arrow",
    "function",
    "case",
    "let",
    "zoom",
    "arrow",
    "function",
    "first",
    "need",
    "parameters",
    "parameters",
    "b",
    "examine",
    "two",
    "contiguous",
    "elements",
    "1",
    "10",
    "10",
    "two",
    "2",
    "9",
    "9",
    "three",
    "forth",
    "need",
    "arrow",
    "write",
    "minus",
    "b",
    "function",
    "minus",
    "b",
    "return",
    "either",
    "negative",
    "zero",
    "positive",
    "value",
    "depending",
    "values",
    "examining",
    "sort",
    "method",
    "sort",
    "values",
    "place",
    "depending",
    "value",
    "returned",
    "array",
    "sorted",
    "see",
    "10",
    "end",
    "instead",
    "right",
    "one",
    "reverse",
    "order",
    "could",
    "say",
    "b",
    "minus",
    "starting",
    "10",
    "ending",
    "one",
    "even",
    "sort",
    "objects",
    "given",
    "property",
    "let",
    "go",
    "example",
    "create",
    "array",
    "people",
    "const",
    "people",
    "equals",
    "array",
    "include",
    "four",
    "objects",
    "comma",
    "separated",
    "first",
    "name",
    "property",
    "spongebob",
    "age",
    "30",
    "gpa",
    "gpa",
    "going",
    "zoom",
    "next",
    "object",
    "going",
    "put",
    "new",
    "line",
    "let",
    "copy",
    "properties",
    "change",
    "name",
    "patrick",
    "age",
    "37",
    "gpa",
    "next",
    "object",
    "squidward",
    "age",
    "51",
    "gpa",
    "lastly",
    "sandy",
    "name",
    "sandy",
    "let",
    "make",
    "sandy",
    "27",
    "gpa",
    "course",
    "going",
    "would",
    "like",
    "sort",
    "array",
    "objects",
    "person",
    "age",
    "take",
    "array",
    "objects",
    "stored",
    "within",
    "people",
    "use",
    "sort",
    "method",
    "use",
    "arrow",
    "function",
    "comma",
    "b",
    "arrow",
    "take",
    "parameter",
    "person",
    "one",
    "access",
    "age",
    "property",
    "minus",
    "parameter",
    "b",
    "access",
    "age",
    "property",
    "got",
    "let",
    "r",
    "people",
    "sandy",
    "youngest",
    "spongebob",
    "patrick",
    "squidward",
    "reverse",
    "order",
    "change",
    "b",
    "b",
    "squidward",
    "patrick",
    "spongebob",
    "sandy",
    "sort",
    "different",
    "property",
    "let",
    "gpa",
    "time",
    "gpa",
    "gpa",
    "patrick",
    "lowest",
    "gpa",
    "followed",
    "squidward",
    "spongebob",
    "sandy",
    "reverse",
    "order",
    "would",
    "gpa",
    "minus",
    "gpa",
    "sandy",
    "spongebob",
    "squidward",
    "patrick",
    "let",
    "try",
    "sorting",
    "name",
    "property",
    "see",
    "happens",
    "minus",
    "name",
    "spongebob",
    "patrick",
    "squidward",
    "sandy",
    "seem",
    "make",
    "sense",
    "alphabetical",
    "order",
    "need",
    "sort",
    "property",
    "contains",
    "string",
    "within",
    "object",
    "different",
    "formula",
    "take",
    "use",
    "local",
    "compare",
    "method",
    "compare",
    "name",
    "method",
    "examine",
    "two",
    "strings",
    "lexicographic",
    "order",
    "arranged",
    "lexicographically",
    "starting",
    "patrick",
    "sandy",
    "spongebob",
    "squidward",
    "reverse",
    "lexicographic",
    "order",
    "would",
    "take",
    "name",
    "local",
    "compare",
    "examine",
    "realized",
    "lot",
    "spongebob",
    "characters",
    "whose",
    "first",
    "name",
    "starts",
    "like",
    "three",
    "right",
    "squidward",
    "spongebob",
    "sandy",
    "patrick",
    "right",
    "everybody",
    "sort",
    "method",
    "used",
    "sort",
    "elements",
    "array",
    "place",
    "sorts",
    "elements",
    "strings",
    "lexicographic",
    "order",
    "alphabetical",
    "well",
    "everybody",
    "sort",
    "method",
    "javascript",
    "hey",
    "everybody",
    "today",
    "video",
    "going",
    "show",
    "shuffle",
    "elements",
    "array",
    "using",
    "javascript",
    "optional",
    "video",
    "might",
    "find",
    "topic",
    "helpful",
    "interested",
    "making",
    "game",
    "using",
    "javascript",
    "sort",
    "application",
    "need",
    "randomness",
    "example",
    "create",
    "deck",
    "cards",
    "deck",
    "cards",
    "array",
    "ace",
    "numbers",
    "2",
    "10",
    "let",
    "finish",
    "typing",
    "j",
    "jack",
    "q",
    "queen",
    "k",
    "king",
    "going",
    "include",
    "suits",
    "cards",
    "ace",
    "hearts",
    "ace",
    "clubs",
    "might",
    "overkill",
    "example",
    "one",
    "method",
    "might",
    "see",
    "floating",
    "around",
    "online",
    "shuffle",
    "elements",
    "array",
    "use",
    "sort",
    "method",
    "pass",
    "arrow",
    "function",
    "take",
    "math",
    "randomus",
    "would",
    "recommend",
    "using",
    "method",
    "results",
    "method",
    "perfectly",
    "uniform",
    "let",
    "cards",
    "array",
    "appears",
    "shuffled",
    "uniform",
    "larger",
    "array",
    "becomes",
    "method",
    "becomes",
    "increasingly",
    "inefficient",
    "would",
    "recommend",
    "using",
    "sort",
    "method",
    "shuffle",
    "array",
    "instead",
    "would",
    "recommend",
    "using",
    "fer",
    "yates",
    "algorithm",
    "create",
    "dedicated",
    "function",
    "define",
    "function",
    "shuffle",
    "one",
    "parameter",
    "array",
    "invoke",
    "function",
    "type",
    "function",
    "name",
    "pass",
    "array",
    "cards",
    "want",
    "exactly",
    "first",
    "going",
    "loop",
    "elements",
    "array",
    "start",
    "end",
    "work",
    "way",
    "towards",
    "beginning",
    "use",
    "loop",
    "decrement",
    "within",
    "shuffle",
    "function",
    "create",
    "loop",
    "declare",
    "index",
    "let",
    "equal",
    "r",
    "array",
    "length",
    "minus",
    "one",
    "first",
    "statement",
    "array",
    "13",
    "elements",
    "last",
    "index",
    "12",
    "array",
    "start",
    "zero",
    "array",
    "length",
    "13",
    "need",
    "subtract",
    "1",
    "get",
    "12",
    "would",
    "give",
    "us",
    "ending",
    "index",
    "12",
    "continue",
    "loop",
    "long",
    "greater",
    "zero",
    "iusus",
    "decrement",
    "generate",
    "random",
    "number",
    "end",
    "beginning",
    "somewhere",
    "within",
    "range",
    "create",
    "const",
    "random",
    "random",
    "store",
    "random",
    "number",
    "take",
    "math",
    "random",
    "method",
    "times",
    "index",
    "one",
    "need",
    "round",
    "number",
    "going",
    "enclose",
    "equation",
    "math",
    "floor",
    "round",
    "math",
    "floor",
    "enclose",
    "equation",
    "right",
    "first",
    "iteration",
    "loop",
    "generate",
    "random",
    "number",
    "end",
    "beginning",
    "swap",
    "king",
    "random",
    "element",
    "within",
    "array",
    "swap",
    "two",
    "elements",
    "array",
    "use",
    "destructuring",
    "context",
    "use",
    "destructuring",
    "take",
    "original",
    "position",
    "array",
    "index",
    "first",
    "iteration",
    "king",
    "swap",
    "king",
    "array",
    "random",
    "index",
    "one",
    "randomly",
    "generated",
    "equals",
    "array",
    "index",
    "ind",
    "random",
    "comma",
    "array",
    "index",
    "finish",
    "using",
    "destructuring",
    "need",
    "enclose",
    "sides",
    "equation",
    "array",
    "swap",
    "two",
    "elements",
    "array",
    "run",
    "program",
    "shuffle",
    "elements",
    "array",
    "would",
    "recommend",
    "using",
    "dedicated",
    "shuffle",
    "function",
    "game",
    "likely",
    "going",
    "shuffle",
    "something",
    "throughout",
    "game",
    "like",
    "said",
    "necessary",
    "topic",
    "continue",
    "series",
    "ever",
    "interested",
    "making",
    "game",
    "using",
    "javascript",
    "need",
    "element",
    "randomness",
    "well",
    "function",
    "would",
    "work",
    "great",
    "shuffle",
    "elements",
    "array",
    "using",
    "javascript",
    "everybody",
    "today",
    "video",
    "going",
    "explain",
    "date",
    "objects",
    "javascript",
    "date",
    "objects",
    "objects",
    "contain",
    "values",
    "represent",
    "dates",
    "times",
    "date",
    "objects",
    "changed",
    "formatted",
    "suit",
    "needs",
    "example",
    "create",
    "date",
    "object",
    "contains",
    "current",
    "date",
    "time",
    "let",
    "create",
    "constant",
    "named",
    "date",
    "date",
    "object",
    "call",
    "date",
    "constructor",
    "new",
    "keyword",
    "date",
    "pass",
    "arguments",
    "current",
    "date",
    "time",
    "going",
    "date",
    "object",
    "gives",
    "current",
    "date",
    "time",
    "right",
    "filming",
    "video",
    "thursday",
    "november",
    "9th",
    "year",
    "2020",
    "23",
    "7",
    "morning",
    "depending",
    "watching",
    "video",
    "date",
    "time",
    "going",
    "different",
    "would",
    "like",
    "create",
    "custom",
    "date",
    "time",
    "object",
    "pass",
    "arguments",
    "follow",
    "order",
    "date",
    "constructor",
    "first",
    "argument",
    "corresponds",
    "year",
    "month",
    "day",
    "hour",
    "minute",
    "second",
    "milliseconds",
    "even",
    "year",
    "let",
    "say",
    "2024",
    "month",
    "zero",
    "corresponds",
    "january",
    "one",
    "february",
    "means",
    "month",
    "11",
    "december",
    "let",
    "say",
    "january",
    "zero",
    "day",
    "one",
    "1",
    "hour",
    "uh",
    "2",
    "2",
    "morning",
    "military",
    "time",
    "way",
    "minute",
    "3",
    "minutes",
    "hour",
    "seconds",
    "4",
    "seconds",
    "minute",
    "even",
    "add",
    "milliseconds",
    "would",
    "like",
    "milliseconds",
    "let",
    "say",
    "five",
    "new",
    "date",
    "object",
    "monday",
    "january",
    "1st",
    "2024",
    "2",
    "morning",
    "passing",
    "string",
    "representation",
    "time",
    "date",
    "constructor",
    "also",
    "valid",
    "let",
    "say",
    "year",
    "2024",
    "january",
    "2nd",
    "time",
    "going",
    "type",
    "time",
    "12",
    "noon",
    "add",
    "z",
    "utc",
    "time",
    "new",
    "date",
    "tuesday",
    "january",
    "2nd",
    "2024",
    "6",
    "morning",
    "another",
    "format",
    "use",
    "within",
    "date",
    "constructor",
    "pass",
    "given",
    "amount",
    "time",
    "milliseconds",
    "since",
    "epic",
    "could",
    "describe",
    "epic",
    "would",
    "describe",
    "date",
    "computer",
    "thinks",
    "time",
    "began",
    "pass",
    "zero",
    "date",
    "constructor",
    "given",
    "date",
    "time",
    "around",
    "december",
    "31st",
    "1969",
    "within",
    "date",
    "constructor",
    "pass",
    "given",
    "amount",
    "milliseconds",
    "since",
    "date",
    "pass",
    "billion",
    "milliseconds",
    "telling",
    "day",
    "constructor",
    "give",
    "date",
    "time",
    "billion",
    "milliseconds",
    "since",
    "epic",
    "date",
    "pass",
    "billion",
    "milliseconds",
    "date",
    "given",
    "tuesday",
    "november",
    "14th",
    "2023",
    "400",
    "passing",
    "milliseconds",
    "would",
    "good",
    "sort",
    "timer",
    "let",
    "use",
    "current",
    "date",
    "time",
    "pass",
    "arguments",
    "extract",
    "individual",
    "values",
    "date",
    "object",
    "would",
    "like",
    "year",
    "const",
    "year",
    "equals",
    "take",
    "date",
    "object",
    "use",
    "get",
    "full",
    "year",
    "method",
    "get",
    "year",
    "year",
    "number",
    "2023",
    "let",
    "get",
    "month",
    "const",
    "month",
    "equals",
    "date",
    "object",
    "use",
    "get",
    "month",
    "method",
    "console",
    "without",
    "log",
    "month",
    "currently",
    "november",
    "october",
    "remember",
    "january",
    "zero",
    "december",
    "11",
    "let",
    "get",
    "day",
    "const",
    "day",
    "equals",
    "date",
    "get",
    "date",
    "day",
    "get",
    "day",
    "give",
    "day",
    "week",
    "like",
    "sunday",
    "monday",
    "tuesday",
    "sort",
    "thing",
    "let",
    "day",
    "9th",
    "let",
    "get",
    "hour",
    "const",
    "hour",
    "equals",
    "date",
    "get",
    "hours",
    "plural",
    "hour",
    "7",
    "morning",
    "let",
    "get",
    "minutes",
    "const",
    "minutes",
    "equals",
    "get",
    "minutes",
    "minutes",
    "morning",
    "get",
    "seconds",
    "get",
    "seconds",
    "seconds",
    "745",
    "21",
    "seconds",
    "minute",
    "need",
    "day",
    "week",
    "const",
    "day",
    "week",
    "equal",
    "equals",
    "date",
    "get",
    "day",
    "give",
    "day",
    "week",
    "day",
    "week",
    "sunday",
    "zero",
    "monday",
    "one",
    "means",
    "thursday",
    "date",
    "object",
    "even",
    "set",
    "date",
    "method",
    "let",
    "date",
    "gna",
    "set",
    "year",
    "date",
    "set",
    "full",
    "year",
    "set",
    "year",
    "2024",
    "yep",
    "saturday",
    "november",
    "9th",
    "2024",
    "let",
    "set",
    "month",
    "set",
    "month",
    "set",
    "month",
    "january",
    "pass",
    "zero",
    "tuesday",
    "january",
    "9th",
    "let",
    "set",
    "day",
    "would",
    "set",
    "date",
    "day",
    "set",
    "first",
    "january",
    "jary",
    "1st",
    "hours",
    "set",
    "hours",
    "let",
    "go",
    "two",
    "two",
    "morning",
    "set",
    "minutes",
    "3",
    "minutes",
    "past",
    "hour",
    "set",
    "seconds",
    "4",
    "seconds",
    "past",
    "minute",
    "even",
    "compare",
    "dates",
    "well",
    "let",
    "create",
    "two",
    "date",
    "objects",
    "const",
    "date",
    "one",
    "equals",
    "new",
    "date",
    "pass",
    "string",
    "representation",
    "date",
    "wo",
    "include",
    "time",
    "though",
    "year",
    "let",
    "say",
    "2023",
    "december",
    "would",
    "12",
    "31st",
    "new",
    "year",
    "eve",
    "basically",
    "date",
    "two",
    "let",
    "say",
    "date",
    "two",
    "new",
    "year",
    "day",
    "2024",
    "january",
    "1st",
    "using",
    "statement",
    "let",
    "compare",
    "see",
    "date",
    "2",
    "greater",
    "date",
    "1",
    "let",
    "happy",
    "new",
    "year",
    "date",
    "two",
    "greater",
    "date",
    "one",
    "print",
    "happy",
    "new",
    "year",
    "let",
    "change",
    "date",
    "two",
    "2023",
    "december",
    "30th",
    "well",
    "nothing",
    "happens",
    "expected",
    "right",
    "everybody",
    "date",
    "objects",
    "objects",
    "contain",
    "values",
    "represent",
    "dates",
    "times",
    "date",
    "objects",
    "changed",
    "formatted",
    "suit",
    "needs",
    "well",
    "everybody",
    "date",
    "objects",
    "javascript",
    "hey",
    "going",
    "everybody",
    "today",
    "video",
    "got",
    "explain",
    "closures",
    "javascript",
    "closure",
    "function",
    "defined",
    "inside",
    "another",
    "function",
    "inner",
    "function",
    "access",
    "variables",
    "scope",
    "outer",
    "function",
    "using",
    "closures",
    "allow",
    "private",
    "variables",
    "state",
    "maintenance",
    "js",
    "libraries",
    "frameworks",
    "react",
    "view",
    "angular",
    "use",
    "closures",
    "time",
    "see",
    "closures",
    "fairly",
    "often",
    "components",
    "functions",
    "inside",
    "functions",
    "let",
    "give",
    "basic",
    "example",
    "outer",
    "function",
    "named",
    "outer",
    "within",
    "outer",
    "function",
    "function",
    "named",
    "inner",
    "inner",
    "function",
    "access",
    "everything",
    "within",
    "outer",
    "function",
    "scope",
    "create",
    "variable",
    "let",
    "message",
    "equal",
    "word",
    "hello",
    "within",
    "inner",
    "function",
    "use",
    "message",
    "variable",
    "message",
    "invoke",
    "outer",
    "function",
    "nothing",
    "appears",
    "happen",
    "call",
    "outer",
    "function",
    "within",
    "scope",
    "one",
    "things",
    "could",
    "would",
    "like",
    "call",
    "inner",
    "function",
    "within",
    "outer",
    "function",
    "would",
    "need",
    "call",
    "somewhere",
    "let",
    "call",
    "inner",
    "function",
    "end",
    "go",
    "displayed",
    "word",
    "hello",
    "everything",
    "within",
    "outer",
    "function",
    "part",
    "closure",
    "function",
    "defined",
    "inside",
    "function",
    "inner",
    "function",
    "access",
    "everything",
    "within",
    "scope",
    "includ",
    "cluding",
    "message",
    "variable",
    "one",
    "benefit",
    "using",
    "closures",
    "variables",
    "considered",
    "private",
    "outside",
    "outer",
    "function",
    "attempt",
    "update",
    "message",
    "message",
    "equals",
    "goodbye",
    "work",
    "see",
    "message",
    "variable",
    "different",
    "scope",
    "kind",
    "like",
    "another",
    "dimension",
    "done",
    "created",
    "different",
    "message",
    "variable",
    "different",
    "scope",
    "outside",
    "outer",
    "scope",
    "way",
    "accessing",
    "message",
    "variable",
    "one",
    "benefits",
    "closures",
    "encapsulate",
    "variables",
    "make",
    "private",
    "let",
    "give",
    "another",
    "example",
    "closure",
    "maintain",
    "state",
    "variable",
    "create",
    "counter",
    "program",
    "going",
    "create",
    "function",
    "increment",
    "within",
    "increment",
    "function",
    "set",
    "count",
    "variable",
    "equal",
    "0o",
    "increment",
    "count",
    "one",
    "use",
    "template",
    "string",
    "count",
    "increased",
    "add",
    "placeholder",
    "display",
    "count",
    "variable",
    "anytime",
    "attempt",
    "call",
    "increment",
    "function",
    "increase",
    "count",
    "one",
    "execute",
    "function",
    "well",
    "redeclaring",
    "variable",
    "count",
    "resetting",
    "every",
    "time",
    "call",
    "function",
    "ca",
    "get",
    "count",
    "go",
    "past",
    "one",
    "keep",
    "resetting",
    "using",
    "closure",
    "state",
    "maintenance",
    "maintain",
    "state",
    "variable",
    "remember",
    "variable",
    "previously",
    "mean",
    "could",
    "take",
    "variable",
    "declare",
    "outside",
    "function",
    "security",
    "variable",
    "set",
    "count",
    "equal",
    "million",
    "maintaining",
    "state",
    "variable",
    "private",
    "anybody",
    "anything",
    "access",
    "change",
    "variable",
    "closure",
    "maintains",
    "state",
    "variable",
    "makes",
    "private",
    "enclose",
    "code",
    "within",
    "another",
    "function",
    "create",
    "function",
    "create",
    "counter",
    "access",
    "scope",
    "within",
    "create",
    "counter",
    "function",
    "another",
    "possibility",
    "return",
    "object",
    "need",
    "set",
    "curly",
    "braces",
    "object",
    "property",
    "increment",
    "associated",
    "value",
    "reference",
    "increment",
    "shorthand",
    "version",
    "use",
    "function",
    "name",
    "property",
    "returning",
    "object",
    "method",
    "increment",
    "going",
    "create",
    "object",
    "named",
    "counter",
    "counter",
    "equals",
    "invoke",
    "create",
    "counter",
    "function",
    "return",
    "object",
    "increment",
    "method",
    "going",
    "take",
    "counter",
    "object",
    "use",
    "increment",
    "method",
    "count",
    "increase",
    "one",
    "increment",
    "method",
    "count",
    "variable",
    "well",
    "could",
    "say",
    "done",
    "outer",
    "function",
    "similar",
    "creating",
    "class",
    "use",
    "classes",
    "instantiate",
    "objects",
    "case",
    "used",
    "function",
    "return",
    "object",
    "take",
    "counter",
    "increment",
    "closure",
    "maintain",
    "state",
    "variable",
    "count",
    "count",
    "increase",
    "two",
    "resetting",
    "every",
    "time",
    "call",
    "method",
    "count",
    "increase",
    "three",
    "let",
    "attempt",
    "access",
    "count",
    "variable",
    "counter",
    "count",
    "equals",
    "z",
    "count",
    "reference",
    "er",
    "count",
    "defined",
    "let",
    "attempt",
    "display",
    "count",
    "variable",
    "take",
    "counter",
    "object",
    "access",
    "account",
    "variable",
    "undefined",
    "know",
    "hidden",
    "closure",
    "one",
    "function",
    "create",
    "get",
    "count",
    "function",
    "use",
    "get",
    "count",
    "function",
    "return",
    "count",
    "need",
    "access",
    "function",
    "get",
    "count",
    "return",
    "count",
    "variable",
    "within",
    "return",
    "statement",
    "returning",
    "object",
    "add",
    "another",
    "property",
    "reference",
    "get",
    "count",
    "function",
    "within",
    "counter",
    "method",
    "get",
    "count",
    "variable",
    "let",
    "use",
    "template",
    "string",
    "curve",
    "current",
    "count",
    "add",
    "placeholder",
    "take",
    "counter",
    "object",
    "use",
    "get",
    "count",
    "method",
    "current",
    "count",
    "three",
    "increment",
    "counter",
    "well",
    "increased",
    "four",
    "right",
    "last",
    "example",
    "going",
    "create",
    "closure",
    "game",
    "keep",
    "track",
    "points",
    "score",
    "let",
    "score",
    "equal",
    "z",
    "define",
    "function",
    "function",
    "increase",
    "score",
    "one",
    "parameter",
    "points",
    "order",
    "score",
    "points",
    "pass",
    "points",
    "argument",
    "take",
    "score",
    "plus",
    "equals",
    "r",
    "points",
    "let",
    "use",
    "template",
    "string",
    "plus",
    "add",
    "placeholder",
    "r",
    "points",
    "add",
    "pts",
    "meaning",
    "points",
    "shortened",
    "let",
    "create",
    "function",
    "decrease",
    "score",
    "change",
    "increase",
    "decrease",
    "score",
    "minus",
    "equals",
    "points",
    "minus",
    "points",
    "let",
    "get",
    "score",
    "function",
    "get",
    "score",
    "return",
    "score",
    "need",
    "increase",
    "score",
    "invoke",
    "increased",
    "score",
    "function",
    "pass",
    "points",
    "scored",
    "five",
    "points",
    "let",
    "scored",
    "six",
    "points",
    "let",
    "decrease",
    "score",
    "subtract",
    "three",
    "points",
    "minus",
    "three",
    "points",
    "let",
    "get",
    "current",
    "score",
    "console",
    "log",
    "use",
    "template",
    "string",
    "final",
    "score",
    "add",
    "placeholder",
    "get",
    "score",
    "final",
    "score",
    "eight",
    "going",
    "add",
    "points",
    "eight",
    "points",
    "right",
    "problem",
    "take",
    "score",
    "set",
    "anything",
    "scored",
    "like",
    "kajillion",
    "points",
    "security",
    "let",
    "enclose",
    "code",
    "within",
    "closure",
    "create",
    "outer",
    "function",
    "function",
    "create",
    "game",
    "return",
    "object",
    "let",
    "cut",
    "code",
    "paste",
    "within",
    "outer",
    "function",
    "create",
    "game",
    "end",
    "return",
    "object",
    "references",
    "functions",
    "return",
    "object",
    "need",
    "curly",
    "braces",
    "reference",
    "increase",
    "score",
    "decrease",
    "score",
    "get",
    "score",
    "use",
    "create",
    "game",
    "function",
    "return",
    "object",
    "const",
    "game",
    "game",
    "object",
    "invoke",
    "create",
    "game",
    "function",
    "return",
    "object",
    "want",
    "increase",
    "score",
    "decrease",
    "get",
    "score",
    "use",
    "methods",
    "object",
    "game",
    "increase",
    "score",
    "game",
    "decrease",
    "score",
    "score",
    "five",
    "points",
    "six",
    "points",
    "minus",
    "three",
    "points",
    "final",
    "score",
    "eight",
    "points",
    "well",
    "everybody",
    "closures",
    "think",
    "function",
    "defined",
    "inside",
    "another",
    "function",
    "inner",
    "function",
    "access",
    "variables",
    "scope",
    "outer",
    "function",
    "used",
    "frequently",
    "js",
    "libraries",
    "frameworks",
    "react",
    "view",
    "angular",
    "especially",
    "work",
    "function",
    "based",
    "components",
    "well",
    "everybody",
    "closures",
    "javascript",
    "hey",
    "going",
    "people",
    "today",
    "video",
    "going",
    "explain",
    "set",
    "timeout",
    "function",
    "javascript",
    "set",
    "timeout",
    "function",
    "allows",
    "schedule",
    "execution",
    "function",
    "amount",
    "time",
    "milliseconds",
    "times",
    "approximate",
    "vary",
    "based",
    "workload",
    "javascript",
    "runtime",
    "environment",
    "would",
    "recommend",
    "using",
    "set",
    "timeout",
    "anything",
    "precise",
    "like",
    "stopwatch",
    "approximation",
    "use",
    "set",
    "timeout",
    "function",
    "pass",
    "call",
    "back",
    "function",
    "delay",
    "milliseconds",
    "example",
    "create",
    "function",
    "say",
    "hello",
    "going",
    "window",
    "alert",
    "word",
    "hello",
    "use",
    "set",
    "timeout",
    "function",
    "pass",
    "call",
    "back",
    "pass",
    "call",
    "back",
    "say",
    "hello",
    "execute",
    "milliseconds",
    "3",
    "seconds",
    "let",
    "see",
    "works",
    "1",
    "2",
    "3",
    "hello",
    "anonymous",
    "function",
    "works",
    "instead",
    "call",
    "back",
    "use",
    "anonymous",
    "function",
    "function",
    "parenthesis",
    "curly",
    "braces",
    "window",
    "alert",
    "word",
    "hello",
    "1",
    "1000",
    "2",
    "1000",
    "3",
    "1000",
    "hello",
    "even",
    "arrow",
    "function",
    "parameters",
    "arrow",
    "going",
    "window",
    "alert",
    "word",
    "hello",
    "1",
    "2",
    "3",
    "hello",
    "use",
    "clear",
    "timeout",
    "function",
    "cancel",
    "timeout",
    "triggers",
    "pass",
    "time",
    "id",
    "set",
    "timeout",
    "function",
    "assign",
    "id",
    "stored",
    "within",
    "variable",
    "constant",
    "const",
    "time",
    "id",
    "equals",
    "set",
    "timeout",
    "function",
    "display",
    "word",
    "hello",
    "clear",
    "time",
    "clear",
    "time",
    "function",
    "pass",
    "id",
    "argument",
    "immediately",
    "calling",
    "set",
    "timeout",
    "function",
    "cancel",
    "let",
    "try",
    "1",
    "1000",
    "2",
    "1000",
    "3",
    "1000",
    "yeah",
    "nothing",
    "happening",
    "canceled",
    "right",
    "time",
    "create",
    "button",
    "using",
    "html",
    "click",
    "button",
    "set",
    "timeout",
    "display",
    "word",
    "hello",
    "let",
    "clear",
    "go",
    "html",
    "file",
    "create",
    "button",
    "button",
    "text",
    "start",
    "going",
    "zoom",
    "set",
    "onclick",
    "attribute",
    "equal",
    "function",
    "start",
    "timer",
    "add",
    "set",
    "parentheses",
    "click",
    "button",
    "function",
    "within",
    "javascript",
    "file",
    "create",
    "start",
    "timer",
    "function",
    "function",
    "start",
    "timer",
    "set",
    "time",
    "use",
    "arrow",
    "function",
    "let",
    "window",
    "alert",
    "word",
    "display",
    "word",
    "hello",
    "milliseconds",
    "right",
    "nothing",
    "going",
    "happen",
    "click",
    "button",
    "going",
    "click",
    "1",
    "2",
    "3",
    "1000",
    "hello",
    "let",
    "create",
    "second",
    "button",
    "clear",
    "timeout",
    "need",
    "stop",
    "let",
    "copy",
    "first",
    "button",
    "paste",
    "change",
    "text",
    "button",
    "clear",
    "clear",
    "timeout",
    "need",
    "another",
    "function",
    "clear",
    "timer",
    "second",
    "button",
    "need",
    "timeout",
    "id",
    "outside",
    "function",
    "declare",
    "variable",
    "let",
    "timeout",
    "id",
    "start",
    "timer",
    "assign",
    "set",
    "timeout",
    "function",
    "id",
    "timeout",
    "id",
    "stop",
    "using",
    "id",
    "create",
    "function",
    "clear",
    "timer",
    "going",
    "use",
    "clear",
    "timeout",
    "function",
    "clear",
    "time",
    "need",
    "pass",
    "timeout",
    "id",
    "argument",
    "sure",
    "everything",
    "works",
    "within",
    "functions",
    "let",
    "something",
    "let",
    "say",
    "word",
    "started",
    "within",
    "start",
    "timer",
    "within",
    "clear",
    "timer",
    "let",
    "display",
    "word",
    "cleared",
    "know",
    "functions",
    "called",
    "going",
    "save",
    "everything",
    "going",
    "start",
    "timer",
    "clear",
    "let",
    "start",
    "1",
    "21000",
    "3",
    "hello",
    "let",
    "go",
    "console",
    "says",
    "started",
    "well",
    "starter",
    "clearly",
    "ca",
    "spell",
    "today",
    "started",
    "going",
    "start",
    "cancel",
    "start",
    "1",
    "clear",
    "nothing",
    "happened",
    "let",
    "go",
    "console",
    "expect",
    "console",
    "started",
    "set",
    "timeout",
    "cleared",
    "right",
    "everybody",
    "set",
    "timeout",
    "function",
    "function",
    "javascript",
    "allows",
    "schedule",
    "execution",
    "function",
    "amount",
    "time",
    "milliseconds",
    "execution",
    "time",
    "may",
    "vary",
    "based",
    "workload",
    "javascript",
    "runtime",
    "environment",
    "well",
    "everybody",
    "set",
    "timeout",
    "function",
    "javascript",
    "hey",
    "going",
    "people",
    "today",
    "video",
    "going",
    "create",
    "digital",
    "clock",
    "using",
    "javascript",
    "html",
    "css",
    "let",
    "get",
    "started",
    "html",
    "project",
    "going",
    "minimal",
    "create",
    "develop",
    "id",
    "development",
    "clock",
    "dash",
    "container",
    "within",
    "development",
    "nested",
    "development",
    "id",
    "clock",
    "clock",
    "within",
    "clock",
    "container",
    "placeholder",
    "temporarily",
    "text",
    "clock",
    "0",
    "0",
    "colon",
    "0",
    "0",
    "colon",
    "0",
    "0",
    "000000000000",
    "0",
    "going",
    "zoom",
    "temporarily",
    "html",
    "need",
    "let",
    "head",
    "css",
    "stylesheet",
    "let",
    "begin",
    "body",
    "set",
    "margin",
    "zero",
    "originally",
    "let",
    "select",
    "clock",
    "container",
    "id",
    "clock",
    "container",
    "use",
    "flex",
    "box",
    "clock",
    "container",
    "display",
    "flex",
    "justify",
    "content",
    "center",
    "justify",
    "content",
    "center",
    "would",
    "also",
    "like",
    "vertically",
    "align",
    "need",
    "add",
    "following",
    "two",
    "lines",
    "code",
    "align",
    "items",
    "center",
    "css",
    "property",
    "vertically",
    "align",
    "elements",
    "clock",
    "container",
    "kind",
    "small",
    "example",
    "add",
    "border",
    "two",
    "pixel",
    "solid",
    "elements",
    "within",
    "clock",
    "container",
    "aligned",
    "horizontally",
    "vertically",
    "container",
    "kind",
    "small",
    "vertically",
    "align",
    "element",
    "within",
    "window",
    "increase",
    "height",
    "clock",
    "container",
    "add",
    "height",
    "100",
    "vh",
    "viewport",
    "height",
    "remove",
    "border",
    "yep",
    "clock",
    "within",
    "middle",
    "container",
    "horizontally",
    "vertically",
    "prefer",
    "top",
    "eliminate",
    "last",
    "two",
    "lines",
    "let",
    "style",
    "clock",
    "selecting",
    "id",
    "clock",
    "change",
    "font",
    "family",
    "monospace",
    "normal",
    "size",
    "zoomed",
    "100",
    "set",
    "font",
    "size",
    "rm",
    "set",
    "font",
    "weight",
    "bold",
    "text",
    "align",
    "center",
    "would",
    "like",
    "background",
    "image",
    "body",
    "document",
    "happen",
    "one",
    "right",
    "picture",
    "central",
    "park",
    "new",
    "york",
    "optional",
    "would",
    "like",
    "include",
    "background",
    "image",
    "project",
    "within",
    "css",
    "stylesheet",
    "add",
    "following",
    "css",
    "properties",
    "set",
    "background",
    "image",
    "property",
    "url",
    "name",
    "image",
    "going",
    "copy",
    "name",
    "paste",
    "within",
    "url",
    "function",
    "set",
    "background",
    "position",
    "center",
    "right",
    "seeing",
    "top",
    "left",
    "image",
    "instead",
    "center",
    "background",
    "position",
    "center",
    "using",
    "small",
    "image",
    "image",
    "might",
    "repeating",
    "take",
    "available",
    "space",
    "prevent",
    "set",
    "background",
    "repeat",
    "property",
    "repeat",
    "mine",
    "already",
    "repeating",
    "though",
    "might",
    "set",
    "background",
    "size",
    "cover",
    "adding",
    "property",
    "image",
    "cover",
    "entire",
    "window",
    "maintain",
    "aspect",
    "ratio",
    "additional",
    "content",
    "besides",
    "clock",
    "keep",
    "background",
    "place",
    "scroll",
    "adding",
    "property",
    "background",
    "attachment",
    "fixed",
    "property",
    "going",
    "apparent",
    "scroll",
    "bar",
    "scroll",
    "bar",
    "background",
    "stay",
    "place",
    "least",
    "let",
    "head",
    "back",
    "clock",
    "element",
    "change",
    "color",
    "font",
    "color",
    "white",
    "would",
    "like",
    "background",
    "blur",
    "effect",
    "add",
    "property",
    "set",
    "backdrop",
    "filter",
    "property",
    "blur",
    "function",
    "greater",
    "number",
    "blur",
    "effect",
    "going",
    "five",
    "pixels",
    "increase",
    "50",
    "well",
    "lot",
    "blur",
    "set",
    "blur",
    "five",
    "would",
    "like",
    "little",
    "bit",
    "looking",
    "glass",
    "increase",
    "width",
    "100",
    "take",
    "100",
    "width",
    "web",
    "browser",
    "width",
    "100",
    "give",
    "glass",
    "look",
    "foggy",
    "appearance",
    "add",
    "background",
    "color",
    "slightly",
    "gray",
    "color",
    "let",
    "select",
    "gray",
    "like",
    "using",
    "hsl",
    "values",
    "lightness",
    "set",
    "100",
    "going",
    "lower",
    "alpha",
    "like",
    "10",
    "background",
    "foggy",
    "glass",
    "appearance",
    "increase",
    "amount",
    "alpha",
    "increase",
    "lightness",
    "keep",
    "mine",
    "10",
    "alpha",
    "right",
    "need",
    "get",
    "clock",
    "run",
    "let",
    "save",
    "everything",
    "go",
    "javascript",
    "file",
    "create",
    "function",
    "update",
    "clock",
    "immediately",
    "begin",
    "program",
    "update",
    "clock",
    "immediately",
    "need",
    "get",
    "current",
    "time",
    "let",
    "declare",
    "constant",
    "time",
    "right",
    "new",
    "date",
    "object",
    "get",
    "hour",
    "say",
    "const",
    "hours",
    "equals",
    "use",
    "builtin",
    "get",
    "hours",
    "method",
    "let",
    "minutes",
    "con",
    "minutes",
    "equals",
    "get",
    "minutes",
    "method",
    "seconds",
    "const",
    "seconds",
    "equals",
    "get",
    "seconds",
    "going",
    "change",
    "text",
    "content",
    "clock",
    "time",
    "string",
    "template",
    "string",
    "want",
    "arrange",
    "numbers",
    "const",
    "time",
    "string",
    "equals",
    "template",
    "string",
    "first",
    "add",
    "placeholder",
    "hours",
    "colon",
    "minutes",
    "colon",
    "seconds",
    "select",
    "id",
    "clock",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "getting",
    "clock",
    "change",
    "text",
    "content",
    "equal",
    "time",
    "string",
    "save",
    "time",
    "clock",
    "update",
    "currently",
    "placeholders",
    "hours",
    "minutes",
    "seconds",
    "would",
    "like",
    "take",
    "two",
    "digits",
    "add",
    "zeros",
    "padding",
    "example",
    "time",
    "08006",
    "string",
    "method",
    "hours",
    "minutes",
    "seconds",
    "convert",
    "strings",
    "use",
    "method",
    "chaining",
    "add",
    "string",
    "hours",
    "minutes",
    "seconds",
    "strings",
    "pad",
    "start",
    "method",
    "first",
    "two",
    "characters",
    "pad",
    "zero",
    "let",
    "copy",
    "method",
    "paste",
    "minutes",
    "seconds",
    "save",
    "time",
    "zero",
    "padding",
    "08",
    "01",
    "54",
    "case",
    "get",
    "clock",
    "update",
    "every",
    "second",
    "follow",
    "update",
    "clock",
    "set",
    "interval",
    "function",
    "set",
    "interval",
    "works",
    "like",
    "set",
    "timeout",
    "except",
    "call",
    "function",
    "repeatedly",
    "need",
    "call",
    "back",
    "call",
    "back",
    "update",
    "clock",
    "call",
    "function",
    "every",
    "milliseconds",
    "clock",
    "run",
    "currently",
    "clock",
    "military",
    "time",
    "although",
    "recording",
    "8",
    "morning",
    "would",
    "like",
    "clock",
    "clock",
    "add",
    "following",
    "changes",
    "going",
    "make",
    "declare",
    "hours",
    "let",
    "instead",
    "const",
    "change",
    "reassign",
    "create",
    "new",
    "constant",
    "meridium",
    "400",
    "equal",
    "hours",
    "greater",
    "equal",
    "12",
    "use",
    "erary",
    "operator",
    "check",
    "greater",
    "equal",
    "12",
    "meridium",
    "pm",
    "otherwise",
    "meridium",
    "reassign",
    "hours",
    "hours",
    "equals",
    "hours",
    "modulus",
    "modulus",
    "gives",
    "remainder",
    "division",
    "modulus",
    "12",
    "zero",
    "use",
    "logical",
    "operator",
    "12",
    "seconds",
    "add",
    "placeholder",
    "meridium",
    "currently",
    "lost",
    "padding",
    "hours",
    "going",
    "cut",
    "part",
    "code",
    "convert",
    "string",
    "pad",
    "take",
    "equals",
    "hours",
    "reassign",
    "follow",
    "hours",
    "converting",
    "string",
    "using",
    "two",
    "string",
    "method",
    "pad",
    "displaying",
    "right",
    "appeared",
    "work",
    "right",
    "everybody",
    "digital",
    "clock",
    "program",
    "make",
    "using",
    "html",
    "css",
    "javascript",
    "hey",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "show",
    "create",
    "stopwatch",
    "program",
    "using",
    "javascript",
    "html",
    "css",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "let",
    "get",
    "started",
    "everybody",
    "create",
    "h1",
    "heading",
    "textt",
    "stopwatch",
    "give",
    "h1",
    "element",
    "unique",
    "id",
    "h1",
    "create",
    "container",
    "stopwatch",
    "div",
    "element",
    "div",
    "element",
    "id",
    "container",
    "contain",
    "everything",
    "container",
    "going",
    "two",
    "sections",
    "two",
    "developments",
    "first",
    "development",
    "going",
    "display",
    "id",
    "display",
    "give",
    "development",
    "initial",
    "text",
    "placeholder",
    "zeros",
    "hours",
    "minutes",
    "seconds",
    "milliseconds",
    "next",
    "development",
    "id",
    "controls",
    "control",
    "buttons",
    "within",
    "development",
    "controls",
    "create",
    "three",
    "buttons",
    "first",
    "button",
    "start",
    "id",
    "button",
    "start",
    "button",
    "btn",
    "short",
    "button",
    "set",
    "onclick",
    "event",
    "handler",
    "equal",
    "javascript",
    "function",
    "eventually",
    "create",
    "start",
    "function",
    "still",
    "need",
    "define",
    "let",
    "copy",
    "button",
    "paste",
    "twice",
    "second",
    "button",
    "stop",
    "id",
    "stop",
    "button",
    "onclick",
    "attribute",
    "stop",
    "function",
    "text",
    "button",
    "stop",
    "reset",
    "button",
    "id",
    "reset",
    "button",
    "onclick",
    "attribute",
    "reset",
    "function",
    "text",
    "button",
    "reset",
    "right",
    "html",
    "need",
    "let",
    "go",
    "css",
    "stylesheet",
    "first",
    "select",
    "body",
    "document",
    "use",
    "flexbox",
    "display",
    "everything",
    "like",
    "flexbox",
    "display",
    "flex",
    "flex",
    "direction",
    "column",
    "align",
    "items",
    "center",
    "set",
    "background",
    "color",
    "application",
    "pick",
    "color",
    "like",
    "using",
    "hsl",
    "values",
    "set",
    "lightness",
    "90",
    "container",
    "going",
    "lighter",
    "color",
    "select",
    "id",
    "h1",
    "going",
    "heading",
    "set",
    "font",
    "size",
    "4",
    "rm",
    "font",
    "family",
    "pick",
    "ariel",
    "backup",
    "serif",
    "font",
    "color",
    "set",
    "color",
    "property",
    "pick",
    "color",
    "pick",
    "black",
    "set",
    "lightness",
    "25",
    "right",
    "going",
    "select",
    "container",
    "contains",
    "everything",
    "besides",
    "heading",
    "area",
    "select",
    "id",
    "container",
    "use",
    "flex",
    "box",
    "within",
    "container",
    "display",
    "flex",
    "flex",
    "direction",
    "column",
    "aligned",
    "item",
    "center",
    "let",
    "add",
    "border",
    "border",
    "around",
    "container",
    "5",
    "pixel",
    "solid",
    "round",
    "corners",
    "border",
    "radius",
    "let",
    "50",
    "pixels",
    "add",
    "little",
    "bit",
    "padding",
    "padding",
    "30",
    "pixels",
    "set",
    "background",
    "color",
    "white",
    "background",
    "color",
    "white",
    "work",
    "time",
    "display",
    "next",
    "select",
    "id",
    "display",
    "set",
    "font",
    "size",
    "5",
    "rm",
    "font",
    "family",
    "going",
    "set",
    "monospace",
    "font",
    "weight",
    "set",
    "bold",
    "change",
    "color",
    "set",
    "lightness",
    "30",
    "give",
    "text",
    "shadow",
    "display",
    "looks",
    "like",
    "somewhat",
    "3d",
    "like",
    "popping",
    "text",
    "shadow",
    "two",
    "pixels",
    "two",
    "pixels",
    "vertical",
    "horizontal",
    "offset",
    "blur",
    "two",
    "pixels",
    "color",
    "going",
    "lower",
    "alpha",
    "75",
    "bad",
    "bad",
    "add",
    "little",
    "bit",
    "margin",
    "bottom",
    "margin",
    "bottom",
    "25",
    "pixels",
    "style",
    "buttons",
    "select",
    "id",
    "controls",
    "would",
    "like",
    "button",
    "elements",
    "within",
    "controls",
    "selecting",
    "id",
    "controls",
    "select",
    "buttons",
    "within",
    "element",
    "increase",
    "font",
    "size",
    "buttons",
    "font",
    "size",
    "rm",
    "set",
    "font",
    "weight",
    "buttons",
    "bold",
    "add",
    "little",
    "bit",
    "padding",
    "10",
    "pixels",
    "20",
    "pixels",
    "add",
    "margin",
    "around",
    "buttons",
    "5",
    "pixels",
    "set",
    "minimum",
    "width",
    "buttons",
    "125",
    "pixels",
    "let",
    "scroll",
    "remove",
    "border",
    "border",
    "none",
    "set",
    "border",
    "radius",
    "buttons",
    "10",
    "pixels",
    "change",
    "cursor",
    "pointer",
    "hover",
    "buttons",
    "let",
    "see",
    "works",
    "yes",
    "set",
    "font",
    "color",
    "buttons",
    "white",
    "let",
    "color",
    "start",
    "button",
    "select",
    "id",
    "start",
    "button",
    "set",
    "background",
    "color",
    "pick",
    "color",
    "start",
    "something",
    "green",
    "pick",
    "whichever",
    "color",
    "would",
    "like",
    "pick",
    "shade",
    "green",
    "values",
    "hover",
    "start",
    "button",
    "access",
    "hover",
    "sudo",
    "class",
    "start",
    "button",
    "decrease",
    "lightness",
    "10",
    "let",
    "copy",
    "markup",
    "start",
    "button",
    "paste",
    "twice",
    "add",
    "color",
    "stop",
    "button",
    "reset",
    "button",
    "set",
    "stop",
    "button",
    "red",
    "hsl",
    "values",
    "picked",
    "hover",
    "button",
    "set",
    "lightness",
    "10",
    "darker",
    "reset",
    "button",
    "set",
    "blue",
    "hover",
    "cursor",
    "reset",
    "button",
    "set",
    "lightness",
    "10",
    "darker",
    "bad",
    "buttons",
    "going",
    "add",
    "transition",
    "effect",
    "transition",
    "select",
    "background",
    "color",
    "create",
    "ease",
    "transition",
    "seconds",
    "ease",
    "hover",
    "cursor",
    "buttons",
    "going",
    "slow",
    "transition",
    "hover",
    "okay",
    "css",
    "need",
    "go",
    "javascript",
    "file",
    "add",
    "functionality",
    "let",
    "declare",
    "variables",
    "need",
    "get",
    "id",
    "display",
    "store",
    "reference",
    "const",
    "display",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "selecting",
    "display",
    "id",
    "create",
    "timer",
    "let",
    "timer",
    "equals",
    "null",
    "timer",
    "going",
    "hold",
    "id",
    "set",
    "interval",
    "keep",
    "track",
    "stop",
    "need",
    "need",
    "start",
    "time",
    "let",
    "start",
    "time",
    "equal",
    "zero",
    "let",
    "elapsed",
    "time",
    "equal",
    "zero",
    "let",
    "running",
    "boolean",
    "set",
    "false",
    "stopwatch",
    "currently",
    "running",
    "flip",
    "true",
    "flip",
    "false",
    "stop",
    "functions",
    "need",
    "start",
    "stop",
    "reset",
    "function",
    "function",
    "start",
    "function",
    "stop",
    "function",
    "reset",
    "add",
    "one",
    "function",
    "update",
    "update",
    "display",
    "function",
    "update",
    "begin",
    "start",
    "method",
    "enclose",
    "everything",
    "within",
    "function",
    "within",
    "statement",
    "need",
    "check",
    "see",
    "stopwatch",
    "running",
    "stopwatch",
    "currently",
    "running",
    "running",
    "start",
    "stopwatch",
    "need",
    "set",
    "start",
    "time",
    "start",
    "time",
    "equals",
    "get",
    "current",
    "date",
    "date",
    "minus",
    "elapse",
    "time",
    "zero",
    "initially",
    "demonstrate",
    "start",
    "time",
    "going",
    "start",
    "time",
    "start",
    "time",
    "going",
    "milliseconds",
    "since",
    "epic",
    "epic",
    "basically",
    "speaking",
    "computer",
    "thinks",
    "time",
    "began",
    "set",
    "timer",
    "equal",
    "set",
    "interval",
    "function",
    "call",
    "update",
    "function",
    "every",
    "10",
    "milliseconds",
    "display",
    "timer",
    "timer",
    "timer",
    "stores",
    "unique",
    "id",
    "work",
    "function",
    "ever",
    "need",
    "stop",
    "take",
    "boolean",
    "variable",
    "running",
    "set",
    "true",
    "stopwatch",
    "running",
    "need",
    "go",
    "update",
    "function",
    "actually",
    "get",
    "working",
    "need",
    "get",
    "current",
    "time",
    "const",
    "current",
    "time",
    "equals",
    "access",
    "date",
    "use",
    "method",
    "date",
    "right",
    "calculate",
    "elapse",
    "time",
    "equals",
    "current",
    "time",
    "minus",
    "start",
    "time",
    "whatever",
    "initially",
    "pressed",
    "start",
    "button",
    "current",
    "time",
    "minus",
    "original",
    "start",
    "time",
    "gives",
    "us",
    "elapse",
    "time",
    "going",
    "milliseconds",
    "need",
    "convert",
    "elapse",
    "time",
    "readable",
    "format",
    "using",
    "hours",
    "minutes",
    "seconds",
    "milliseconds",
    "begin",
    "hours",
    "let",
    "hours",
    "equals",
    "take",
    "lapse",
    "time",
    "divided",
    "convert",
    "milliseconds",
    "hours",
    "follow",
    "formula",
    "elapse",
    "time",
    "divided",
    "milliseconds",
    "60",
    "seconds",
    "times",
    "60",
    "minutes",
    "want",
    "decimal",
    "portions",
    "hours",
    "enclose",
    "floor",
    "method",
    "math",
    "going",
    "something",
    "similar",
    "minutes",
    "let",
    "minutes",
    "equals",
    "take",
    "lapse",
    "time",
    "need",
    "convert",
    "milliseconds",
    "minutes",
    "divided",
    "milliseconds",
    "second",
    "times",
    "60",
    "seconds",
    "minute",
    "modulus",
    "60",
    "modulus",
    "gives",
    "remainder",
    "division",
    "want",
    "minutes",
    "display",
    "hit",
    "60",
    "go",
    "60",
    "hit",
    "60",
    "reset",
    "back",
    "zero",
    "enclose",
    "formula",
    "math",
    "floor",
    "round",
    "math",
    "floor",
    "okay",
    "take",
    "care",
    "seconds",
    "let",
    "seconds",
    "equals",
    "take",
    "lapse",
    "time",
    "divided",
    "convert",
    "milliseconds",
    "seconds",
    "modulus",
    "60",
    "close",
    "math",
    "floor",
    "round",
    "milliseconds",
    "let",
    "milliseconds",
    "equals",
    "take",
    "elapse",
    "time",
    "already",
    "milliseconds",
    "modulus",
    "1000",
    "milliseconds",
    "normally",
    "four",
    "digits",
    "going",
    "divide",
    "10",
    "want",
    "first",
    "two",
    "digits",
    "divided",
    "10",
    "en",
    "close",
    "math",
    "floor",
    "math",
    "floor",
    "let",
    "change",
    "display",
    "access",
    "display",
    "access",
    "text",
    "content",
    "display",
    "set",
    "equal",
    "template",
    "string",
    "would",
    "like",
    "display",
    "hours",
    "optional",
    "add",
    "placeholder",
    "hours",
    "colon",
    "placeholder",
    "minutes",
    "colon",
    "placeholder",
    "seconds",
    "would",
    "like",
    "display",
    "milliseconds",
    "add",
    "placeholder",
    "colon",
    "placeholder",
    "milliseconds",
    "let",
    "see",
    "far",
    "going",
    "hit",
    "start",
    "button",
    "got",
    "stopwatch",
    "running",
    "add",
    "zeros",
    "padding",
    "going",
    "refresh",
    "stop",
    "convert",
    "hours",
    "minutes",
    "seconds",
    "milliseconds",
    "string",
    "add",
    "padding",
    "zeros",
    "number",
    "one",
    "digit",
    "two",
    "convert",
    "hours",
    "minutes",
    "seconds",
    "milliseconds",
    "string",
    "displaying",
    "let",
    "take",
    "hours",
    "equals",
    "hours",
    "typ",
    "cast",
    "string",
    "follow",
    "pad",
    "start",
    "method",
    "first",
    "two",
    "digits",
    "zero",
    "let",
    "minutes",
    "seconds",
    "milliseconds",
    "minutes",
    "seconds",
    "milliseconds",
    "zeros",
    "padding",
    "make",
    "display",
    "two",
    "digits",
    "appear",
    "work",
    "nice",
    "need",
    "get",
    "stopwatch",
    "actually",
    "stop",
    "right",
    "functionality",
    "going",
    "stop",
    "function",
    "need",
    "check",
    "see",
    "program",
    "running",
    "variable",
    "running",
    "true",
    "running",
    "true",
    "stop",
    "stopwatch",
    "use",
    "clear",
    "interval",
    "function",
    "need",
    "pass",
    "unique",
    "id",
    "timer",
    "stop",
    "stopwatch",
    "running",
    "calculate",
    "elapse",
    "time",
    "elapsed",
    "time",
    "equals",
    "date",
    "right",
    "date",
    "method",
    "minus",
    "original",
    "start",
    "time",
    "set",
    "running",
    "equal",
    "false",
    "stopwatch",
    "stopped",
    "running",
    "anymore",
    "start",
    "stopwatch",
    "stop",
    "start",
    "stop",
    "last",
    "thing",
    "need",
    "reset",
    "stopwatch",
    "really",
    "copy",
    "everything",
    "initially",
    "assign",
    "variables",
    "need",
    "clear",
    "timer",
    "clear",
    "interval",
    "p",
    "pass",
    "variable",
    "timer",
    "contains",
    "id",
    "set",
    "interval",
    "function",
    "start",
    "time",
    "zero",
    "elapse",
    "time",
    "zero",
    "running",
    "false",
    "change",
    "text",
    "content",
    "equal",
    "zeros",
    "hours",
    "minutes",
    "seconds",
    "milliseconds",
    "right",
    "let",
    "see",
    "everything",
    "works",
    "fine",
    "start",
    "stop",
    "start",
    "stop",
    "reset",
    "start",
    "stop",
    "right",
    "everybody",
    "create",
    "stopwatch",
    "program",
    "using",
    "javascript",
    "html",
    "css",
    "hey",
    "going",
    "everybody",
    "today",
    "going",
    "explain",
    "es6",
    "modules",
    "javascript",
    "module",
    "external",
    "file",
    "contains",
    "reusable",
    "code",
    "imported",
    "javascript",
    "files",
    "let",
    "say",
    "write",
    "really",
    "difficult",
    "program",
    "well",
    "part",
    "program",
    "import",
    "different",
    "application",
    "feel",
    "like",
    "rewriting",
    "modules",
    "contain",
    "variables",
    "classes",
    "functions",
    "es6",
    "modules",
    "introduced",
    "part",
    "ecmascript",
    "2015",
    "update",
    "using",
    "modules",
    "create",
    "reusable",
    "code",
    "used",
    "different",
    "programs",
    "different",
    "javascript",
    "files",
    "example",
    "create",
    "new",
    "file",
    "create",
    "module",
    "math",
    "utility",
    "functions",
    "file",
    "math",
    "separate",
    "javascript",
    "file",
    "index",
    "file",
    "import",
    "module",
    "mathu",
    "till",
    "js",
    "order",
    "within",
    "html",
    "file",
    "set",
    "type",
    "attribute",
    "equal",
    "module",
    "treat",
    "index",
    "file",
    "module",
    "import",
    "export",
    "modules",
    "freely",
    "sure",
    "include",
    "attribute",
    "set",
    "equal",
    "module",
    "within",
    "math",
    "util",
    "module",
    "write",
    "reusable",
    "code",
    "programs",
    "let",
    "define",
    "pi",
    "pi",
    "equal",
    "create",
    "function",
    "get",
    "circumference",
    "pass",
    "radius",
    "though",
    "going",
    "parameter",
    "function",
    "get",
    "circumference",
    "need",
    "radius",
    "return",
    "2",
    "pi",
    "time",
    "radius",
    "create",
    "function",
    "get",
    "area",
    "get",
    "area",
    "still",
    "need",
    "radius",
    "turn",
    "pi",
    "radius",
    "radius",
    "get",
    "volume",
    "get",
    "volume",
    "sphere",
    "function",
    "get",
    "volume",
    "need",
    "radius",
    "return",
    "4",
    "radius",
    "radius",
    "reuse",
    "variables",
    "functions",
    "javascript",
    "program",
    "import",
    "order",
    "though",
    "need",
    "sure",
    "prefix",
    "variable",
    "function",
    "class",
    "anything",
    "else",
    "export",
    "keyword",
    "import",
    "elsewhere",
    "let",
    "sure",
    "right",
    "sure",
    "save",
    "everything",
    "close",
    "module",
    "index",
    "css",
    "file",
    "import",
    "going",
    "use",
    "object",
    "destructuring",
    "need",
    "set",
    "curly",
    "braces",
    "location",
    "module",
    "files",
    "right",
    "next",
    "relatively",
    "speaking",
    "right",
    "next",
    "would",
    "need",
    "slash",
    "name",
    "file",
    "math",
    "util",
    "javascript",
    "file",
    "anything",
    "would",
    "like",
    "import",
    "place",
    "within",
    "set",
    "curly",
    "braces",
    "going",
    "using",
    "object",
    "destructuring",
    "javascript",
    "module",
    "would",
    "like",
    "pi",
    "comma",
    "separate",
    "entity",
    "would",
    "like",
    "get",
    "circumference",
    "get",
    "area",
    "get",
    "volume",
    "use",
    "variables",
    "functions",
    "already",
    "part",
    "javascript",
    "file",
    "example",
    "going",
    "pi",
    "pi",
    "value",
    "imported",
    "let",
    "get",
    "circumference",
    "need",
    "pass",
    "radius",
    "function",
    "imported",
    "mathutils",
    "module",
    "store",
    "result",
    "within",
    "variable",
    "const",
    "circumference",
    "equals",
    "invoke",
    "get",
    "circumference",
    "function",
    "module",
    "pass",
    "10",
    "going",
    "display",
    "circumference",
    "use",
    "console",
    "log",
    "use",
    "template",
    "string",
    "include",
    "placeholder",
    "display",
    "circumference",
    "plus",
    "unit",
    "measurement",
    "like",
    "cenm",
    "one8",
    "cm",
    "necessary",
    "going",
    "round",
    "number",
    "two",
    "decimal",
    "places",
    "using",
    "two",
    "fixed",
    "method",
    "numbers",
    "let",
    "round",
    "two",
    "decimal",
    "places",
    "let",
    "create",
    "area",
    "variable",
    "const",
    "area",
    "equals",
    "get",
    "area",
    "pass",
    "10",
    "radius",
    "let",
    "copy",
    "line",
    "paste",
    "lazy",
    "let",
    "display",
    "area",
    "variable",
    "cm",
    "cubed",
    "31416",
    "cenm",
    "cubed",
    "create",
    "volume",
    "variable",
    "const",
    "volume",
    "equals",
    "get",
    "volume",
    "pass",
    "10",
    "display",
    "volume",
    "volume",
    "cm",
    "cubed",
    "volume",
    "pass",
    "radius",
    "10",
    "would",
    "64",
    "cm",
    "cubed",
    "right",
    "everybody",
    "modules",
    "external",
    "files",
    "contain",
    "reusable",
    "code",
    "imported",
    "javascript",
    "files",
    "write",
    "variables",
    "classes",
    "functions",
    "reused",
    "programs",
    "sure",
    "import",
    "well",
    "everybody",
    "es6",
    "modules",
    "javascript",
    "yo",
    "going",
    "people",
    "today",
    "video",
    "got",
    "explain",
    "asynchronous",
    "code",
    "javascript",
    "synchronous",
    "code",
    "executes",
    "line",
    "line",
    "consecutively",
    "sequential",
    "manner",
    "synchronous",
    "code",
    "waits",
    "operation",
    "complete",
    "example",
    "use",
    "let",
    "pretend",
    "performing",
    "task",
    "matter",
    "task",
    "pretend",
    "task",
    "one",
    "complete",
    "move",
    "task",
    "two",
    "task",
    "three",
    "code",
    "synchronous",
    "executing",
    "code",
    "line",
    "line",
    "ca",
    "move",
    "task",
    "two",
    "complete",
    "task",
    "one",
    "order",
    "events",
    "need",
    "follow",
    "code",
    "waits",
    "operation",
    "complete",
    "hand",
    "asynchronous",
    "code",
    "allows",
    "multiple",
    "operations",
    "performed",
    "concurrently",
    "without",
    "waiting",
    "asynchronous",
    "code",
    "block",
    "execution",
    "flow",
    "allows",
    "program",
    "continue",
    "imagine",
    "asynchronous",
    "code",
    "kind",
    "like",
    "time",
    "traveler",
    "time",
    "traveler",
    "move",
    "flow",
    "time",
    "rest",
    "world",
    "continues",
    "time",
    "resumes",
    "normally",
    "asynchronous",
    "code",
    "block",
    "execution",
    "flow",
    "time",
    "moves",
    "without",
    "asynchronous",
    "code",
    "typically",
    "found",
    "input",
    "output",
    "operations",
    "network",
    "requests",
    "fetching",
    "data",
    "anything",
    "could",
    "take",
    "indeterminate",
    "amount",
    "time",
    "example",
    "use",
    "set",
    "timeout",
    "function",
    "3",
    "seconds",
    "execute",
    "function",
    "let",
    "let",
    "say",
    "task",
    "one",
    "change",
    "three",
    "lines",
    "task",
    "2",
    "task",
    "three",
    "task",
    "4",
    "finish",
    "task",
    "1",
    "milliseconds",
    "check",
    "already",
    "completed",
    "task",
    "2",
    "3",
    "four",
    "task",
    "one",
    "finished",
    "last",
    "set",
    "timeout",
    "one",
    "many",
    "asynchronous",
    "functions",
    "rest",
    "program",
    "going",
    "wait",
    "around",
    "complete",
    "runs",
    "concurrently",
    "rest",
    "code",
    "task",
    "one",
    "completed",
    "end",
    "beginning",
    "different",
    "ways",
    "handle",
    "synchronous",
    "code",
    "already",
    "familiar",
    "callbacks",
    "also",
    "promises",
    "well",
    "sync",
    "wait",
    "still",
    "need",
    "discuss",
    "topics",
    "future",
    "already",
    "familiar",
    "callbacks",
    "crucial",
    "task",
    "2",
    "4",
    "finishes",
    "task",
    "one",
    "use",
    "callback",
    "necessarily",
    "know",
    "long",
    "asynchronous",
    "function",
    "going",
    "take",
    "could",
    "example",
    "create",
    "function",
    "function",
    "funk",
    "one",
    "meaning",
    "function",
    "one",
    "execute",
    "code",
    "within",
    "function",
    "one",
    "accept",
    "callback",
    "argument",
    "function",
    "funk",
    "2",
    "synchronous",
    "code",
    "function",
    "two",
    "tasks",
    "2",
    "4",
    "task",
    "one",
    "complete",
    "invoke",
    "call",
    "back",
    "function",
    "two",
    "arrow",
    "function",
    "one",
    "line",
    "code",
    "need",
    "add",
    "set",
    "curly",
    "braces",
    "task",
    "one",
    "invoke",
    "call",
    "back",
    "call",
    "function",
    "one",
    "pass",
    "call",
    "back",
    "function",
    "two",
    "function",
    "one",
    "asynchronous",
    "need",
    "synchronous",
    "code",
    "execute",
    "task",
    "one",
    "complete",
    "work",
    "one",
    "2",
    "3",
    "task",
    "one",
    "asynchronous",
    "followed",
    "task",
    "two",
    "task",
    "three",
    "task",
    "four",
    "using",
    "callbacks",
    "one",
    "way",
    "handle",
    "asynchronous",
    "code",
    "still",
    "need",
    "discuss",
    "promises",
    "sync",
    "wait",
    "future",
    "topics",
    "right",
    "everybody",
    "synchronous",
    "code",
    "synchronous",
    "code",
    "executes",
    "line",
    "line",
    "consecutively",
    "sequential",
    "manner",
    "asynchronous",
    "code",
    "allows",
    "multiple",
    "operations",
    "performed",
    "concurrently",
    "without",
    "waiting",
    "asynchronous",
    "code",
    "block",
    "execution",
    "flow",
    "allows",
    "rest",
    "program",
    "continue",
    "asynchronous",
    "code",
    "commonly",
    "found",
    "input",
    "output",
    "operations",
    "network",
    "requests",
    "fetching",
    "data",
    "usually",
    "anything",
    "takes",
    "indeterminate",
    "amount",
    "time",
    "well",
    "everybody",
    "asynchronous",
    "code",
    "javascript",
    "hey",
    "people",
    "today",
    "video",
    "going",
    "explain",
    "error",
    "objects",
    "javascript",
    "handle",
    "error",
    "object",
    "created",
    "represent",
    "problem",
    "occurs",
    "errors",
    "occur",
    "often",
    "usually",
    "accept",
    "user",
    "input",
    "establish",
    "connection",
    "object",
    "created",
    "represent",
    "problem",
    "example",
    "going",
    "word",
    "hello",
    "afterwards",
    "going",
    "display",
    "message",
    "indicate",
    "reached",
    "end",
    "program",
    "reached",
    "end",
    "runs",
    "right",
    "let",
    "say",
    "misspell",
    "log",
    "leg",
    "well",
    "encounter",
    "uncaught",
    "type",
    "error",
    "many",
    "different",
    "types",
    "errors",
    "console",
    "leg",
    "function",
    "type",
    "errors",
    "tend",
    "happen",
    "try",
    "access",
    "something",
    "within",
    "object",
    "exist",
    "one",
    "big",
    "issue",
    "run",
    "prematurely",
    "exit",
    "program",
    "never",
    "finishes",
    "executing",
    "reached",
    "end",
    "errors",
    "uncaught",
    "interrupt",
    "normal",
    "flow",
    "program",
    "another",
    "example",
    "error",
    "would",
    "reference",
    "error",
    "x",
    "x",
    "defined",
    "uncaught",
    "reference",
    "error",
    "x",
    "defined",
    "interrupts",
    "program",
    "never",
    "reach",
    "end",
    "errors",
    "generated",
    "sorts",
    "issues",
    "network",
    "issues",
    "promise",
    "rejection",
    "still",
    "need",
    "talk",
    "security",
    "errors",
    "encounter",
    "problem",
    "one",
    "things",
    "error",
    "object",
    "generated",
    "interrupts",
    "program",
    "solution",
    "though",
    "handle",
    "errors",
    "occur",
    "try",
    "catch",
    "find",
    "blocks",
    "tri",
    "block",
    "enclose",
    "code",
    "might",
    "potentially",
    "cause",
    "error",
    "trying",
    "establish",
    "connection",
    "something",
    "connection",
    "fails",
    "error",
    "occur",
    "handle",
    "going",
    "interrupt",
    "program",
    "code",
    "place",
    "within",
    "tri",
    "block",
    "try",
    "code",
    "need",
    "catch",
    "block",
    "catch",
    "block",
    "one",
    "parameter",
    "catch",
    "error",
    "object",
    "let",
    "error",
    "object",
    "see",
    "let",
    "run",
    "reference",
    "error",
    "defined",
    "see",
    "reaching",
    "end",
    "program",
    "program",
    "interrupted",
    "gracefully",
    "handled",
    "error",
    "uncaught",
    "caught",
    "catching",
    "errors",
    "would",
    "recommend",
    "using",
    "rather",
    "would",
    "use",
    "console",
    "error",
    "highlight",
    "errors",
    "occur",
    "still",
    "handle",
    "good",
    "debugging",
    "clearly",
    "see",
    "error",
    "reference",
    "error",
    "x",
    "defined",
    "interrupt",
    "program",
    "still",
    "reach",
    "end",
    "optionally",
    "add",
    "finally",
    "block",
    "finally",
    "block",
    "always",
    "executes",
    "regardless",
    "error",
    "comes",
    "finally",
    "block",
    "usually",
    "used",
    "closing",
    "files",
    "closing",
    "connections",
    "releasing",
    "resources",
    "usually",
    "open",
    "something",
    "establish",
    "connection",
    "need",
    "close",
    "afterwards",
    "want",
    "leave",
    "open",
    "finally",
    "block",
    "comes",
    "cleanup",
    "end",
    "whether",
    "error",
    "occurs",
    "test",
    "going",
    "always",
    "executes",
    "going",
    "x",
    "reference",
    "error",
    "caught",
    "interrupt",
    "anything",
    "still",
    "executing",
    "finally",
    "block",
    "reach",
    "end",
    "program",
    "run",
    "errors",
    "going",
    "hello",
    "errors",
    "occur",
    "end",
    "catching",
    "anything",
    "always",
    "executes",
    "finally",
    "block",
    "reach",
    "end",
    "program",
    "code",
    "considered",
    "dangerous",
    "could",
    "cause",
    "error",
    "want",
    "surround",
    "tri",
    "block",
    "catch",
    "future",
    "ever",
    "open",
    "files",
    "establish",
    "connection",
    "want",
    "finally",
    "block",
    "two",
    "close",
    "connections",
    "discussed",
    "yet",
    "errors",
    "also",
    "occur",
    "accepting",
    "user",
    "input",
    "know",
    "user",
    "going",
    "type",
    "worst",
    "case",
    "scenario",
    "user",
    "could",
    "type",
    "malicious",
    "script",
    "next",
    "example",
    "going",
    "create",
    "constant",
    "dividend",
    "advisor",
    "const",
    "dividend",
    "equals",
    "window",
    "prompt",
    "enter",
    "dividend",
    "division",
    "dividend",
    "number",
    "divided",
    "need",
    "diviser",
    "divisor",
    "number",
    "dividing",
    "enter",
    "divisor",
    "going",
    "create",
    "constant",
    "result",
    "result",
    "equals",
    "dividend",
    "divided",
    "diviser",
    "result",
    "1",
    "2",
    "mathematically",
    "speaking",
    "ca",
    "divide",
    "number",
    "0",
    "attempt",
    "javascript",
    "divide",
    "1",
    "zero",
    "end",
    "infinity",
    "intentionally",
    "cause",
    "errors",
    "handle",
    "try",
    "catch",
    "optionally",
    "finally",
    "blocks",
    "code",
    "considered",
    "dangerous",
    "place",
    "within",
    "tri",
    "block",
    "need",
    "catch",
    "errors",
    "catch",
    "error",
    "object",
    "occurs",
    "console",
    "error",
    "error",
    "object",
    "test",
    "instead",
    "console",
    "log",
    "misspell",
    "log",
    "leg",
    "probably",
    "add",
    "message",
    "confirm",
    "reached",
    "end",
    "reached",
    "end",
    "1",
    "0",
    "type",
    "error",
    "console",
    "leg",
    "function",
    "still",
    "reach",
    "end",
    "program",
    "interrupted",
    "within",
    "tri",
    "block",
    "certain",
    "situations",
    "intentionally",
    "cause",
    "error",
    "going",
    "use",
    "statement",
    "divisor",
    "equal",
    "zero",
    "throw",
    "new",
    "error",
    "object",
    "calling",
    "error",
    "constructor",
    "constru",
    "conu",
    "new",
    "error",
    "object",
    "within",
    "constructor",
    "one",
    "argument",
    "pass",
    "message",
    "error",
    "going",
    "say",
    "ca",
    "divide",
    "zero",
    "okay",
    "let",
    "try",
    "enter",
    "dividend",
    "one",
    "enter",
    "divisor",
    "type",
    "zero",
    "press",
    "okay",
    "caught",
    "error",
    "ca",
    "divide",
    "zero",
    "program",
    "interrupted",
    "still",
    "reach",
    "end",
    "let",
    "change",
    "console",
    "le",
    "back",
    "log",
    "cuz",
    "forgot",
    "somebody",
    "attempts",
    "type",
    "something",
    "number",
    "enter",
    "dividend",
    "one",
    "enter",
    "divisor",
    "type",
    "word",
    "pizza",
    "number",
    "reached",
    "end",
    "would",
    "like",
    "throw",
    "new",
    "error",
    "somebody",
    "type",
    "number",
    "prompt",
    "typ",
    "cast",
    "number",
    "somebody",
    "enters",
    "characters",
    "either",
    "dividend",
    "diviser",
    "store",
    "within",
    "number",
    "let",
    "check",
    "statement",
    "number",
    "dividend",
    "number",
    "divisor",
    "number",
    "let",
    "throw",
    "new",
    "error",
    "throw",
    "new",
    "error",
    "values",
    "must",
    "number",
    "divide",
    "one",
    "word",
    "pizza",
    "error",
    "values",
    "must",
    "number",
    "still",
    "reach",
    "end",
    "program",
    "error",
    "objects",
    "even",
    "create",
    "certain",
    "situations",
    "handle",
    "however",
    "want",
    "right",
    "everybody",
    "error",
    "objects",
    "handle",
    "error",
    "object",
    "created",
    "represent",
    "problem",
    "occurs",
    "occur",
    "often",
    "user",
    "input",
    "establishing",
    "sort",
    "connection",
    "handle",
    "use",
    "try",
    "catch",
    "optionally",
    "finally",
    "blocks",
    "mostly",
    "used",
    "cleanup",
    "code",
    "cause",
    "error",
    "place",
    "within",
    "tri",
    "block",
    "catch",
    "errors",
    "happen",
    "well",
    "everybody",
    "handle",
    "errors",
    "javascript",
    "hey",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "create",
    "calculator",
    "program",
    "using",
    "html",
    "css",
    "javascript",
    "let",
    "get",
    "started",
    "right",
    "let",
    "thing",
    "everybody",
    "lot",
    "buttons",
    "create",
    "need",
    "container",
    "create",
    "div",
    "element",
    "div",
    "element",
    "id",
    "calculator",
    "within",
    "div",
    "element",
    "create",
    "input",
    "element",
    "input",
    "element",
    "id",
    "display",
    "display",
    "numbers",
    "type",
    "want",
    "somebody",
    "enter",
    "text",
    "display",
    "would",
    "like",
    "display",
    "readon",
    "add",
    "read",
    "property",
    "ca",
    "type",
    "anything",
    "even",
    "though",
    "trying",
    "create",
    "nested",
    "div",
    "element",
    "id",
    "keys",
    "keys",
    "need",
    "add",
    "lot",
    "buttons",
    "begin",
    "first",
    "create",
    "button",
    "element",
    "text",
    "button",
    "plus",
    "set",
    "click",
    "attribute",
    "button",
    "javascript",
    "function",
    "still",
    "need",
    "define",
    "fun",
    "function",
    "eventually",
    "create",
    "append",
    "display",
    "function",
    "one",
    "argument",
    "pass",
    "javascript",
    "function",
    "character",
    "plus",
    "first",
    "button",
    "let",
    "copy",
    "button",
    "paste",
    "13",
    "additional",
    "times",
    "counted",
    "right",
    "okay",
    "second",
    "button",
    "seven",
    "character",
    "passing",
    "seven",
    "followed",
    "8",
    "9",
    "minus",
    "4",
    "5",
    "six",
    "asterisk",
    "multiplication",
    "1",
    "2",
    "3",
    "forward",
    "slash",
    "division",
    "zero",
    "new",
    "buttons",
    "miscounted",
    "need",
    "add",
    "one",
    "dot",
    "decimal",
    "need",
    "equals",
    "button",
    "going",
    "arrange",
    "little",
    "different",
    "let",
    "create",
    "button",
    "text",
    "equals",
    "onclick",
    "attribute",
    "specific",
    "button",
    "going",
    "calculate",
    "need",
    "button",
    "clear",
    "screen",
    "text",
    "button",
    "capital",
    "c",
    "clear",
    "onclick",
    "attribute",
    "button",
    "going",
    "clear",
    "display",
    "buttons",
    "need",
    "let",
    "save",
    "everything",
    "let",
    "go",
    "css",
    "stylesheet",
    "going",
    "zoom",
    "back",
    "100",
    "first",
    "let",
    "style",
    "buttons",
    "select",
    "buttons",
    "button",
    "set",
    "width",
    "100",
    "pixels",
    "height",
    "100",
    "pixels",
    "even",
    "would",
    "like",
    "rounded",
    "buttons",
    "set",
    "border",
    "radius",
    "property",
    "50",
    "pixels",
    "circles",
    "let",
    "remove",
    "border",
    "border",
    "none",
    "change",
    "background",
    "color",
    "buttons",
    "color",
    "use",
    "hsl",
    "values",
    "set",
    "lightness",
    "30",
    "darker",
    "text",
    "button",
    "set",
    "color",
    "white",
    "font",
    "size",
    "set",
    "3",
    "rm",
    "set",
    "font",
    "weight",
    "bold",
    "hover",
    "cursor",
    "one",
    "buttons",
    "would",
    "like",
    "cursor",
    "pointer",
    "cursor",
    "pointer",
    "arrange",
    "buttons",
    "properly",
    "let",
    "select",
    "id",
    "keys",
    "keys",
    "development",
    "containing",
    "buttons",
    "element",
    "buttons",
    "within",
    "arrange",
    "buttons",
    "grid",
    "set",
    "display",
    "property",
    "grid",
    "calculator",
    "would",
    "like",
    "four",
    "columns",
    "set",
    "grid",
    "template",
    "columns",
    "property",
    "use",
    "repeat",
    "function",
    "css",
    "would",
    "like",
    "four",
    "columns",
    "arrange",
    "buttons",
    "evenly",
    "use",
    "one",
    "f",
    "r",
    "f",
    "fr",
    "stands",
    "fractional",
    "unit",
    "one",
    "f",
    "fr",
    "indicates",
    "column",
    "take",
    "even",
    "amount",
    "space",
    "columns",
    "four",
    "set",
    "three",
    "would",
    "columns",
    "three",
    "going",
    "use",
    "columns",
    "four",
    "would",
    "like",
    "operators",
    "left",
    "hand",
    "side",
    "set",
    "gap",
    "10",
    "pixels",
    "gap",
    "rows",
    "add",
    "padding",
    "25",
    "pixels",
    "padding",
    "around",
    "keys",
    "let",
    "select",
    "id",
    "calculator",
    "add",
    "top",
    "keep",
    "everything",
    "organized",
    "calculator",
    "select",
    "font",
    "family",
    "aiel",
    "backup",
    "serif",
    "let",
    "pick",
    "background",
    "color",
    "calculator",
    "select",
    "something",
    "darker",
    "set",
    "lightness",
    "15",
    "round",
    "corners",
    "calculator",
    "border",
    "radius",
    "15",
    "pixels",
    "corners",
    "calculator",
    "smooth",
    "set",
    "max",
    "width",
    "calculator",
    "500",
    "pixels",
    "elements",
    "overflow",
    "set",
    "hidden",
    "mostly",
    "display",
    "long",
    "equation",
    "right",
    "next",
    "let",
    "select",
    "display",
    "right",
    "kind",
    "small",
    "selecting",
    "id",
    "display",
    "let",
    "set",
    "width",
    "100",
    "add",
    "padding",
    "20",
    "pixels",
    "text",
    "display",
    "set",
    "font",
    "size",
    "5",
    "rm",
    "let",
    "text",
    "line",
    "left",
    "remove",
    "border",
    "border",
    "none",
    "change",
    "background",
    "color",
    "copy",
    "property",
    "lazy",
    "let",
    "increase",
    "lightness",
    "20",
    "select",
    "body",
    "document",
    "remove",
    "margin",
    "margin",
    "zero",
    "would",
    "like",
    "calculator",
    "middle",
    "window",
    "right",
    "top",
    "left",
    "corner",
    "would",
    "prefer",
    "leave",
    "set",
    "display",
    "flex",
    "flex",
    "box",
    "justify",
    "content",
    "center",
    "horizontal",
    "alignment",
    "vertical",
    "alignment",
    "set",
    "align",
    "items",
    "center",
    "need",
    "increase",
    "height",
    "body",
    "document",
    "100",
    "set",
    "height",
    "100",
    "vh",
    "100",
    "viewport",
    "height",
    "place",
    "calculator",
    "middle",
    "body",
    "document",
    "horizontally",
    "vertically",
    "background",
    "color",
    "going",
    "decrease",
    "lightness",
    "slightly",
    "background",
    "color",
    "set",
    "lightness",
    "like",
    "95",
    "okay",
    "let",
    "go",
    "bottom",
    "css",
    "stylesheet",
    "hover",
    "one",
    "buttons",
    "would",
    "like",
    "increase",
    "lightness",
    "buttons",
    "hover",
    "sudo",
    "class",
    "change",
    "background",
    "color",
    "lightness",
    "40",
    "instead",
    "30",
    "buttons",
    "light",
    "hover",
    "cursor",
    "one",
    "buttons",
    "click",
    "one",
    "buttons",
    "increase",
    "lightness",
    "flashes",
    "selecting",
    "active",
    "pseudo",
    "class",
    "let",
    "take",
    "background",
    "color",
    "property",
    "increase",
    "lightness",
    "50",
    "hover",
    "button",
    "lights",
    "click",
    "flashes",
    "momentarily",
    "operators",
    "would",
    "like",
    "op",
    "buttons",
    "different",
    "color",
    "pick",
    "orange",
    "going",
    "give",
    "buttons",
    "new",
    "class",
    "let",
    "head",
    "back",
    "html",
    "file",
    "beginning",
    "plus",
    "button",
    "set",
    "class",
    "equal",
    "operator",
    "das",
    "btn",
    "button",
    "let",
    "copy",
    "class",
    "paste",
    "minus",
    "button",
    "multiply",
    "button",
    "divide",
    "button",
    "clear",
    "button",
    "select",
    "class",
    "operator",
    "btn",
    "button",
    "let",
    "change",
    "background",
    "color",
    "going",
    "set",
    "background",
    "color",
    "orange",
    "already",
    "color",
    "hover",
    "cursor",
    "one",
    "operator",
    "buttons",
    "would",
    "like",
    "color",
    "lighter",
    "orangee",
    "instead",
    "gray",
    "let",
    "take",
    "operator",
    "button",
    "access",
    "hover",
    "sudo",
    "class",
    "increase",
    "lightness",
    "65",
    "click",
    "one",
    "buttons",
    "would",
    "like",
    "lightness",
    "increase",
    "operator",
    "button",
    "class",
    "active",
    "pseudo",
    "class",
    "increase",
    "lightness",
    "75",
    "click",
    "one",
    "operator",
    "buttons",
    "going",
    "flash",
    "momentarily",
    "right",
    "html",
    "css",
    "need",
    "need",
    "add",
    "functionality",
    "let",
    "go",
    "javascript",
    "file",
    "javascript",
    "file",
    "lot",
    "write",
    "first",
    "need",
    "get",
    "display",
    "element",
    "id",
    "display",
    "const",
    "display",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "get",
    "id",
    "display",
    "three",
    "functions",
    "create",
    "function",
    "append",
    "display",
    "calculate",
    "clear",
    "display",
    "three",
    "functions",
    "function",
    "append",
    "display",
    "one",
    "parameter",
    "input",
    "passing",
    "character",
    "call",
    "function",
    "function",
    "clear",
    "display",
    "function",
    "calculate",
    "begin",
    "pen",
    "display",
    "going",
    "take",
    "display",
    "element",
    "access",
    "value",
    "append",
    "plus",
    "equals",
    "input",
    "let",
    "see",
    "works",
    "seven",
    "forgot",
    "change",
    "font",
    "color",
    "display",
    "let",
    "within",
    "display",
    "element",
    "let",
    "set",
    "color",
    "white",
    "okay",
    "much",
    "better",
    "5",
    "equals",
    "okay",
    "know",
    "works",
    "click",
    "clear",
    "button",
    "would",
    "like",
    "clear",
    "display",
    "let",
    "access",
    "display",
    "element",
    "access",
    "value",
    "property",
    "set",
    "equal",
    "empty",
    "string",
    "hit",
    "clear",
    "clear",
    "display",
    "lastly",
    "calculate",
    "let",
    "take",
    "display",
    "elements",
    "value",
    "property",
    "set",
    "equal",
    "going",
    "use",
    "eval",
    "function",
    "eval",
    "function",
    "takes",
    "expression",
    "1",
    "2",
    "3",
    "evaluates",
    "gives",
    "result",
    "kind",
    "like",
    "calculator",
    "say",
    "evaluate",
    "value",
    "within",
    "display",
    "display",
    "value",
    "add",
    "plus",
    "given",
    "result",
    "reason",
    "get",
    "error",
    "example",
    "7",
    "equal",
    "well",
    "problem",
    "let",
    "go",
    "console",
    "encountered",
    "uncaught",
    "syntax",
    "error",
    "never",
    "finished",
    "equation",
    "last",
    "lesson",
    "learned",
    "error",
    "handling",
    "dangerous",
    "code",
    "cause",
    "error",
    "let",
    "surround",
    "code",
    "try",
    "block",
    "try",
    "code",
    "catch",
    "errors",
    "happen",
    "need",
    "catch",
    "block",
    "catch",
    "errors",
    "change",
    "value",
    "display",
    "equal",
    "text",
    "error",
    "right",
    "work",
    "times",
    "equals",
    "results",
    "error",
    "clear",
    "start",
    "1",
    "2",
    "3",
    "4",
    "would",
    "10",
    "right",
    "everybody",
    "calculator",
    "program",
    "make",
    "using",
    "javascript",
    "html",
    "css",
    "impress",
    "friends",
    "right",
    "going",
    "people",
    "today",
    "got",
    "explain",
    "dom",
    "javascript",
    "dom",
    "document",
    "object",
    "model",
    "javascript",
    "object",
    "represents",
    "page",
    "see",
    "web",
    "browser",
    "provides",
    "api",
    "interact",
    "web",
    "browser",
    "constructs",
    "dom",
    "loads",
    "html",
    "document",
    "structures",
    "elements",
    "tree",
    "like",
    "representation",
    "within",
    "html",
    "document",
    "html",
    "element",
    "root",
    "element",
    "html",
    "element",
    "contains",
    "head",
    "element",
    "body",
    "element",
    "many",
    "various",
    "elements",
    "found",
    "within",
    "arranged",
    "tree",
    "likee",
    "data",
    "structure",
    "access",
    "tree",
    "like",
    "data",
    "structure",
    "document",
    "object",
    "past",
    "lessons",
    "order",
    "select",
    "element",
    "id",
    "would",
    "type",
    "document",
    "dot",
    "follow",
    "method",
    "like",
    "get",
    "l",
    "element",
    "id",
    "would",
    "select",
    "element",
    "id",
    "document",
    "object",
    "contains",
    "properties",
    "methods",
    "nested",
    "objects",
    "document",
    "well",
    "going",
    "display",
    "html",
    "document",
    "also",
    "use",
    "dur",
    "meaning",
    "directory",
    "list",
    "properties",
    "object",
    "document",
    "object",
    "different",
    "properties",
    "contains",
    "one",
    "gigantic",
    "object",
    "example",
    "title",
    "title",
    "web",
    "page",
    "would",
    "found",
    "right",
    "near",
    "bottom",
    "document",
    "change",
    "access",
    "document",
    "object",
    "access",
    "title",
    "property",
    "change",
    "something",
    "else",
    "like",
    "website",
    "display",
    "title",
    "property",
    "changed",
    "website",
    "dynamically",
    "page",
    "loads",
    "would",
    "like",
    "change",
    "background",
    "color",
    "document",
    "later",
    "series",
    "going",
    "create",
    "toggle",
    "button",
    "toggle",
    "light",
    "dark",
    "mode",
    "give",
    "example",
    "need",
    "change",
    "theme",
    "dark",
    "mode",
    "could",
    "access",
    "document",
    "object",
    "access",
    "body",
    "access",
    "style",
    "change",
    "background",
    "color",
    "property",
    "color",
    "let",
    "stick",
    "black",
    "use",
    "hsl",
    "hue",
    "zero",
    "saturation",
    "0",
    "lightness",
    "15",
    "even",
    "though",
    "css",
    "still",
    "able",
    "dynamically",
    "change",
    "background",
    "color",
    "let",
    "give",
    "another",
    "example",
    "create",
    "h1",
    "element",
    "h1",
    "element",
    "say",
    "welcome",
    "give",
    "element",
    "id",
    "id",
    "msg",
    "meaning",
    "message",
    "going",
    "zoom",
    "little",
    "create",
    "constant",
    "username",
    "type",
    "username",
    "full",
    "name",
    "going",
    "conditionally",
    "change",
    "content",
    "html",
    "document",
    "get",
    "element",
    "id",
    "welcome",
    "message",
    "const",
    "welcome",
    "message",
    "using",
    "camel",
    "case",
    "naming",
    "convention",
    "access",
    "document",
    "use",
    "get",
    "element",
    "id",
    "method",
    "id",
    "message",
    "msg",
    "short",
    "would",
    "like",
    "update",
    "text",
    "content",
    "element",
    "take",
    "welcome",
    "message",
    "access",
    "text",
    "content",
    "appen",
    "text",
    "using",
    "stringy",
    "catnation",
    "use",
    "tary",
    "operator",
    "see",
    "username",
    "strictly",
    "equal",
    "empty",
    "string",
    "username",
    "empty",
    "somebody",
    "type",
    "question",
    "mark",
    "username",
    "empty",
    "append",
    "welcome",
    "message",
    "guest",
    "otherwise",
    "username",
    "username",
    "name",
    "empty",
    "display",
    "name",
    "welcome",
    "thro",
    "code",
    "empty",
    "somebody",
    "type",
    "display",
    "welcome",
    "guest",
    "introduction",
    "document",
    "object",
    "model",
    "document",
    "object",
    "model",
    "javascript",
    "object",
    "represents",
    "page",
    "see",
    "web",
    "browser",
    "provides",
    "api",
    "interact",
    "web",
    "browser",
    "constructs",
    "dom",
    "loads",
    "html",
    "document",
    "structures",
    "elements",
    "tree",
    "likee",
    "representation",
    "using",
    "javascript",
    "access",
    "dom",
    "dynamically",
    "page",
    "loads",
    "change",
    "content",
    "structure",
    "style",
    "web",
    "page",
    "well",
    "everybody",
    "introduction",
    "document",
    "object",
    "model",
    "javascript",
    "hey",
    "today",
    "got",
    "explain",
    "element",
    "selectors",
    "javascript",
    "element",
    "selectors",
    "methods",
    "used",
    "target",
    "manipulate",
    "html",
    "elements",
    "using",
    "methods",
    "allow",
    "select",
    "one",
    "multiple",
    "html",
    "elements",
    "dom",
    "document",
    "object",
    "model",
    "methods",
    "methods",
    "document",
    "dom",
    "select",
    "elements",
    "id",
    "class",
    "tag",
    "name",
    "query",
    "selector",
    "query",
    "selector",
    "methods",
    "return",
    "something",
    "different",
    "either",
    "element",
    "html",
    "collection",
    "node",
    "list",
    "one",
    "method",
    "probably",
    "already",
    "familiar",
    "get",
    "element",
    "id",
    "example",
    "within",
    "html",
    "document",
    "create",
    "h1",
    "element",
    "create",
    "heading",
    "sample",
    "web",
    "page",
    "hungry",
    "going",
    "talk",
    "food",
    "heading",
    "going",
    "food",
    "us",
    "like",
    "toys",
    "r",
    "us",
    "food",
    "going",
    "give",
    "h1",
    "element",
    "id",
    "dash",
    "heading",
    "going",
    "back",
    "javascript",
    "file",
    "select",
    "element",
    "id",
    "store",
    "reference",
    "const",
    "heading",
    "equals",
    "accessing",
    "dom",
    "document",
    "get",
    "element",
    "id",
    "id",
    "heading",
    "access",
    "element",
    "h1",
    "element",
    "using",
    "reference",
    "let",
    "take",
    "heading",
    "access",
    "style",
    "access",
    "background",
    "color",
    "css",
    "properties",
    "javascript",
    "accessing",
    "dom",
    "camel",
    "case",
    "nameing",
    "convention",
    "selecting",
    "properties",
    "css",
    "hyphenated",
    "naming",
    "convention",
    "pay",
    "attention",
    "background",
    "color",
    "set",
    "yellow",
    "highlighting",
    "could",
    "also",
    "apply",
    "different",
    "css",
    "properties",
    "let",
    "take",
    "heading",
    "access",
    "style",
    "access",
    "text",
    "align",
    "property",
    "set",
    "center",
    "centered",
    "element",
    "heading",
    "would",
    "see",
    "displays",
    "html",
    "element",
    "including",
    "style",
    "style",
    "reason",
    "id",
    "exist",
    "example",
    "misspell",
    "heading",
    "heading",
    "extra",
    "g",
    "well",
    "returns",
    "null",
    "eliminate",
    "two",
    "lines",
    "code",
    "see",
    "null",
    "get",
    "element",
    "id",
    "returns",
    "single",
    "element",
    "finds",
    "null",
    "next",
    "method",
    "get",
    "elements",
    "class",
    "name",
    "returns",
    "html",
    "collection",
    "similar",
    "array",
    "limited",
    "methods",
    "within",
    "html",
    "document",
    "create",
    "three",
    "separate",
    "div",
    "sections",
    "first",
    "development",
    "class",
    "fruits",
    "first",
    "fruit",
    "apple",
    "let",
    "copy",
    "development",
    "paste",
    "two",
    "times",
    "change",
    "second",
    "orange",
    "banana",
    "right",
    "going",
    "back",
    "javascript",
    "file",
    "use",
    "method",
    "get",
    "elements",
    "class",
    "name",
    "return",
    "html",
    "collection",
    "similar",
    "array",
    "technically",
    "const",
    "fruits",
    "name",
    "html",
    "collection",
    "equals",
    "docu",
    "doent",
    "accessing",
    "dom",
    "get",
    "elements",
    "class",
    "name",
    "class",
    "name",
    "getting",
    "fruits",
    "let",
    "console",
    "log",
    "fruits",
    "see",
    "working",
    "fruits",
    "html",
    "collection",
    "collection",
    "contains",
    "three",
    "elements",
    "three",
    "objects",
    "within",
    "html",
    "collection",
    "take",
    "look",
    "properties",
    "text",
    "content",
    "first",
    "element",
    "text",
    "content",
    "apple",
    "next",
    "div",
    "element",
    "index",
    "one",
    "text",
    "content",
    "orange",
    "assume",
    "next",
    "element",
    "text",
    "content",
    "banana",
    "change",
    "something",
    "one",
    "elements",
    "let",
    "begin",
    "first",
    "element",
    "html",
    "collection",
    "fruits",
    "select",
    "one",
    "elements",
    "use",
    "index",
    "let",
    "take",
    "html",
    "collection",
    "fruits",
    "index",
    "zero",
    "going",
    "return",
    "first",
    "element",
    "div",
    "element",
    "apple",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "equal",
    "yellow",
    "highlighting",
    "apple",
    "highlighted",
    "next",
    "element",
    "increase",
    "index",
    "one",
    "select",
    "orange",
    "two",
    "would",
    "banana",
    "would",
    "like",
    "iterate",
    "elements",
    "use",
    "enhanced",
    "loop",
    "say",
    "let",
    "fruit",
    "fruits",
    "html",
    "collections",
    "iterable",
    "iterate",
    "enhanced",
    "loop",
    "let",
    "take",
    "fruit",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "highlight",
    "html",
    "collections",
    "method",
    "html",
    "collections",
    "allow",
    "live",
    "updates",
    "unfortunately",
    "limited",
    "amount",
    "utility",
    "methods",
    "attempt",
    "use",
    "html",
    "collection",
    "fruits",
    "attempt",
    "use",
    "method",
    "happens",
    "type",
    "error",
    "fruits",
    "4",
    "function",
    "html",
    "collections",
    "method",
    "able",
    "use",
    "could",
    "typ",
    "cast",
    "html",
    "collection",
    "array",
    "let",
    "access",
    "class",
    "array",
    "use",
    "method",
    "return",
    "new",
    "array",
    "fruits",
    "typ",
    "cast",
    "html",
    "collection",
    "array",
    "could",
    "follow",
    "method",
    "choose",
    "element",
    "within",
    "array",
    "type",
    "casting",
    "let",
    "take",
    "fruit",
    "use",
    "arrow",
    "function",
    "would",
    "like",
    "let",
    "take",
    "fruit",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "highlighting",
    "work",
    "get",
    "elements",
    "class",
    "name",
    "return",
    "html",
    "collection",
    "matching",
    "elements",
    "share",
    "class",
    "would",
    "like",
    "use",
    "array",
    "method",
    "html",
    "collection",
    "would",
    "want",
    "typ",
    "cast",
    "array",
    "right",
    "get",
    "elements",
    "tag",
    "name",
    "within",
    "html",
    "document",
    "create",
    "two",
    "unordered",
    "lists",
    "create",
    "h4",
    "heading",
    "root",
    "vegetables",
    "let",
    "scroll",
    "create",
    "unordered",
    "list",
    "list",
    "items",
    "three",
    "good",
    "first",
    "list",
    "item",
    "beets",
    "beets",
    "root",
    "vegetable",
    "carrots",
    "potatoes",
    "let",
    "copy",
    "unordered",
    "list",
    "h4",
    "heading",
    "paste",
    "change",
    "second",
    "h4",
    "heading",
    "nonroot",
    "vegetables",
    "first",
    "list",
    "item",
    "within",
    "list",
    "broccoli",
    "celer",
    "onions",
    "picked",
    "three",
    "vegetables",
    "kind",
    "random",
    "next",
    "method",
    "get",
    "elements",
    "tag",
    "name",
    "select",
    "one",
    "elements",
    "tag",
    "name",
    "h4",
    "unordered",
    "list",
    "list",
    "items",
    "take",
    "matches",
    "within",
    "html",
    "document",
    "stick",
    "within",
    "html",
    "collection",
    "create",
    "const",
    "const",
    "h4",
    "elements",
    "equal",
    "alss",
    "accessing",
    "dom",
    "use",
    "get",
    "elements",
    "tag",
    "name",
    "method",
    "let",
    "select",
    "h4",
    "elements",
    "html",
    "collection",
    "h4",
    "elements",
    "let",
    "see",
    "looks",
    "like",
    "html",
    "collection",
    "two",
    "elements",
    "two",
    "h4",
    "elements",
    "text",
    "content",
    "first",
    "element",
    "root",
    "vegetables",
    "assume",
    "element",
    "vegetables",
    "yes",
    "vegetables",
    "access",
    "individual",
    "elements",
    "html",
    "collection",
    "index",
    "let",
    "take",
    "reference",
    "h4",
    "elements",
    "access",
    "first",
    "index",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "highlighting",
    "highlight",
    "root",
    "vegetables",
    "next",
    "index",
    "one",
    "would",
    "vegetables",
    "apply",
    "css",
    "properties",
    "elements",
    "use",
    "enhanced",
    "loop",
    "let",
    "h4",
    "element",
    "singular",
    "h4",
    "elements",
    "plural",
    "take",
    "h4",
    "element",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "highlight",
    "h4",
    "elements",
    "let",
    "create",
    "another",
    "html",
    "collection",
    "list",
    "item",
    "elements",
    "create",
    "another",
    "reference",
    "list",
    "item",
    "elements",
    "beets",
    "carrots",
    "potatoes",
    "broccoli",
    "celery",
    "onions",
    "const",
    "li",
    "elements",
    "equals",
    "document",
    "getet",
    "elements",
    "tag",
    "name",
    "tag",
    "selecting",
    "list",
    "item",
    "elements",
    "using",
    "loop",
    "let",
    "iterate",
    "let",
    "li",
    "element",
    "singular",
    "li",
    "elements",
    "plural",
    "list",
    "item",
    "element",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "different",
    "color",
    "let",
    "say",
    "light",
    "green",
    "list",
    "item",
    "elements",
    "light",
    "green",
    "color",
    "since",
    "html",
    "collections",
    "arrays",
    "array",
    "methods",
    "typ",
    "cast",
    "wanted",
    "change",
    "background",
    "color",
    "method",
    "arrays",
    "going",
    "typ",
    "cast",
    "html",
    "collection",
    "h4",
    "elements",
    "array",
    "access",
    "class",
    "array",
    "use",
    "method",
    "pass",
    "html",
    "collection",
    "h4",
    "elements",
    "argument",
    "wanted",
    "use",
    "loop",
    "method",
    "change",
    "follow",
    "want",
    "elements",
    "take",
    "h4",
    "element",
    "use",
    "arrow",
    "function",
    "take",
    "h4",
    "element",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "work",
    "let",
    "list",
    "item",
    "elements",
    "copy",
    "lazy",
    "type",
    "cast",
    "list",
    "item",
    "elements",
    "html",
    "collection",
    "list",
    "item",
    "element",
    "take",
    "list",
    "item",
    "element",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "light",
    "green",
    "work",
    "get",
    "elements",
    "tag",
    "name",
    "selector",
    "select",
    "elements",
    "matching",
    "tag",
    "name",
    "throughout",
    "document",
    "returns",
    "html",
    "collection",
    "going",
    "talk",
    "query",
    "selector",
    "query",
    "selector",
    "return",
    "first",
    "matching",
    "element",
    "null",
    "find",
    "matches",
    "create",
    "const",
    "element",
    "equals",
    "document",
    "query",
    "selector",
    "query",
    "selector",
    "return",
    "first",
    "match",
    "select",
    "element",
    "class",
    "name",
    "use",
    "dot",
    "name",
    "class",
    "three",
    "elements",
    "class",
    "fruits",
    "let",
    "select",
    "dot",
    "fruits",
    "take",
    "element",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "element",
    "think",
    "going",
    "selected",
    "first",
    "apple",
    "first",
    "matching",
    "element",
    "cory",
    "selector",
    "returns",
    "single",
    "element",
    "first",
    "match",
    "selected",
    "tag",
    "name",
    "h4",
    "would",
    "select",
    "root",
    "vegetables",
    "even",
    "though",
    "two",
    "h4",
    "elements",
    "first",
    "matches",
    "selected",
    "selected",
    "first",
    "list",
    "item",
    "element",
    "would",
    "select",
    "beats",
    "first",
    "list",
    "item",
    "element",
    "web",
    "page",
    "changed",
    "ul",
    "meaning",
    "unordered",
    "list",
    "would",
    "select",
    "first",
    "unordered",
    "list",
    "attempt",
    "select",
    "something",
    "exist",
    "like",
    "ordered",
    "lists",
    "well",
    "exist",
    "matches",
    "element",
    "would",
    "return",
    "n",
    "matches",
    "query",
    "selector",
    "selects",
    "first",
    "matching",
    "element",
    "null",
    "select",
    "class",
    "tag",
    "name",
    "last",
    "method",
    "discuss",
    "query",
    "selector",
    "returns",
    "node",
    "list",
    "node",
    "list",
    "similar",
    "html",
    "collection",
    "except",
    "methods",
    "similar",
    "arrays",
    "however",
    "lists",
    "static",
    "html",
    "collections",
    "live",
    "since",
    "node",
    "lists",
    "static",
    "update",
    "automatically",
    "dom",
    "html",
    "collections",
    "live",
    "going",
    "select",
    "elements",
    "class",
    "fruits",
    "create",
    "reference",
    "const",
    "fruits",
    "equals",
    "document",
    "query",
    "selector",
    "getting",
    "class",
    "fruits",
    "access",
    "node",
    "list",
    "index",
    "number",
    "let",
    "select",
    "first",
    "element",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "select",
    "apple",
    "let",
    "select",
    "next",
    "element",
    "orange",
    "next",
    "would",
    "banana",
    "let",
    "select",
    "list",
    "item",
    "elements",
    "going",
    "rename",
    "though",
    "let",
    "rename",
    "fruits",
    "foods",
    "let",
    "select",
    "first",
    "element",
    "would",
    "beets",
    "next",
    "element",
    "would",
    "carrots",
    "potatoes",
    "broccoli",
    "celery",
    "onions",
    "foods",
    "would",
    "give",
    "node",
    "list",
    "six",
    "elements",
    "node",
    "lists",
    "method",
    "let",
    "use",
    "need",
    "typ",
    "cast",
    "array",
    "take",
    "node",
    "list",
    "foods",
    "use",
    "method",
    "want",
    "take",
    "food",
    "use",
    "arrow",
    "function",
    "take",
    "food",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "take",
    "list",
    "item",
    "elements",
    "change",
    "background",
    "color",
    "yellow",
    "highlighting",
    "right",
    "everybody",
    "different",
    "element",
    "selectors",
    "get",
    "element",
    "id",
    "get",
    "elements",
    "class",
    "name",
    "get",
    "elements",
    "tag",
    "name",
    "query",
    "selector",
    "query",
    "selector",
    "lot",
    "overlap",
    "could",
    "select",
    "number",
    "select",
    "something",
    "return",
    "something",
    "different",
    "personally",
    "like",
    "using",
    "combination",
    "get",
    "element",
    "id",
    "query",
    "select",
    "personal",
    "preference",
    "conclusion",
    "element",
    "selectors",
    "methods",
    "used",
    "target",
    "manipulate",
    "html",
    "elements",
    "allow",
    "select",
    "one",
    "multiple",
    "html",
    "elements",
    "dom",
    "select",
    "element",
    "elements",
    "make",
    "sort",
    "changes",
    "would",
    "like",
    "well",
    "everybody",
    "element",
    "selectors",
    "javascript",
    "yo",
    "going",
    "people",
    "today",
    "got",
    "explain",
    "dom",
    "navigation",
    "javascript",
    "dom",
    "navigation",
    "process",
    "navigating",
    "structure",
    "h",
    "html",
    "document",
    "using",
    "javascript",
    "html",
    "elements",
    "include",
    "limited",
    "following",
    "properties",
    "navigation",
    "get",
    "first",
    "child",
    "last",
    "child",
    "next",
    "sibling",
    "previous",
    "sibling",
    "parent",
    "children",
    "element",
    "exercise",
    "within",
    "html",
    "document",
    "going",
    "create",
    "unordered",
    "lists",
    "course",
    "unordered",
    "lists",
    "going",
    "food",
    "like",
    "food",
    "first",
    "unorder",
    "list",
    "id",
    "fruits",
    "let",
    "create",
    "list",
    "item",
    "elements",
    "apple",
    "orange",
    "banana",
    "need",
    "unordered",
    "lists",
    "work",
    "let",
    "copy",
    "unordered",
    "list",
    "paste",
    "twice",
    "second",
    "list",
    "vegetables",
    "pick",
    "vegetables",
    "pick",
    "carrots",
    "onions",
    "potatoes",
    "third",
    "unordered",
    "list",
    "desserts",
    "pick",
    "cake",
    "pie",
    "ice",
    "cream",
    "good",
    "enough",
    "heading",
    "back",
    "javascript",
    "file",
    "discuss",
    "property",
    "first",
    "element",
    "child",
    "unordered",
    "lists",
    "elements",
    "children",
    "child",
    "element",
    "element",
    "found",
    "within",
    "element",
    "unordered",
    "list",
    "fruits",
    "three",
    "children",
    "apple",
    "orange",
    "banana",
    "vegetables",
    "three",
    "children",
    "carrots",
    "onions",
    "potatoes",
    "desserts",
    "three",
    "children",
    "well",
    "cake",
    "pie",
    "ice",
    "cream",
    "let",
    "say",
    "unordered",
    "list",
    "fruits",
    "parent",
    "well",
    "apple",
    "would",
    "firstborn",
    "orange",
    "would",
    "middle",
    "child",
    "banana",
    "would",
    "last",
    "born",
    "actual",
    "children",
    "think",
    "way",
    "going",
    "create",
    "constant",
    "element",
    "using",
    "reference",
    "document",
    "getet",
    "element",
    "id",
    "get",
    "unordered",
    "list",
    "fruits",
    "storing",
    "unordered",
    "list",
    "within",
    "element",
    "create",
    "reference",
    "first",
    "child",
    "equals",
    "take",
    "element",
    "access",
    "first",
    "element",
    "child",
    "take",
    "element",
    "change",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "element",
    "going",
    "highlighted",
    "apple",
    "selected",
    "different",
    "element",
    "like",
    "ida",
    "vegetables",
    "first",
    "child",
    "would",
    "carrots",
    "desserts",
    "first",
    "element",
    "child",
    "desserts",
    "cake",
    "firstborn",
    "children",
    "top",
    "within",
    "un",
    "ordered",
    "lists",
    "used",
    "query",
    "selector",
    "give",
    "demonstration",
    "select",
    "unordered",
    "lists",
    "const",
    "ul",
    "elements",
    "equals",
    "document",
    "dot",
    "query",
    "selector",
    "select",
    "unordered",
    "lists",
    "return",
    "node",
    "list",
    "node",
    "lists",
    "method",
    "take",
    "ul",
    "elements",
    "use",
    "method",
    "want",
    "iterate",
    "every",
    "unordered",
    "list",
    "element",
    "let",
    "create",
    "reference",
    "first",
    "child",
    "equals",
    "take",
    "unordered",
    "list",
    "element",
    "access",
    "first",
    "element",
    "child",
    "store",
    "reference",
    "let",
    "take",
    "first",
    "child",
    "access",
    "style",
    "access",
    "background",
    "color",
    "property",
    "set",
    "yellow",
    "highlight",
    "first",
    "element",
    "children",
    "unordered",
    "lists",
    "use",
    "query",
    "selector",
    "select",
    "first",
    "children",
    "matching",
    "elements",
    "going",
    "access",
    "last",
    "element",
    "child",
    "unordered",
    "lists",
    "select",
    "ing",
    "elements",
    "fruits",
    "vegetables",
    "desserts",
    "would",
    "return",
    "last",
    "child",
    "banana",
    "potatoes",
    "ice",
    "cream",
    "depending",
    "selecting",
    "actual",
    "children",
    "three",
    "elements",
    "last",
    "born",
    "youngest",
    "going",
    "create",
    "reference",
    "element",
    "equals",
    "access",
    "dom",
    "get",
    "element",
    "id",
    "get",
    "id",
    "fruits",
    "create",
    "reference",
    "refence",
    "last",
    "child",
    "equals",
    "take",
    "element",
    "get",
    "last",
    "element",
    "child",
    "take",
    "last",
    "child",
    "element",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "highlight",
    "banano",
    "change",
    "selected",
    "element",
    "vegetables",
    "would",
    "select",
    "potato",
    "es",
    "selected",
    "desserts",
    "would",
    "select",
    "ice",
    "cream",
    "last",
    "element",
    "children",
    "found",
    "within",
    "elements",
    "use",
    "query",
    "selector",
    "select",
    "unordered",
    "lists",
    "let",
    "create",
    "const",
    "ul",
    "elements",
    "equals",
    "document",
    "query",
    "selector",
    "select",
    "unordered",
    "elements",
    "returns",
    "node",
    "list",
    "method",
    "take",
    "node",
    "list",
    "unordered",
    "elements",
    "use",
    "method",
    "take",
    "unordered",
    "list",
    "element",
    "use",
    "arrow",
    "function",
    "create",
    "reference",
    "last",
    "child",
    "equals",
    "take",
    "unordered",
    "list",
    "element",
    "access",
    "last",
    "element",
    "child",
    "take",
    "last",
    "child",
    "iteration",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "select",
    "banana",
    "potatoes",
    "ice",
    "cream",
    "select",
    "unordered",
    "lists",
    "take",
    "last",
    "children",
    "change",
    "background",
    "color",
    "yellow",
    "last",
    "element",
    "child",
    "property",
    "next",
    "example",
    "demonstrate",
    "next",
    "element",
    "sibling",
    "going",
    "make",
    "changes",
    "going",
    "back",
    "h",
    "html",
    "file",
    "give",
    "list",
    "items",
    "unique",
    "id",
    "let",
    "start",
    "first",
    "id",
    "apple",
    "first",
    "list",
    "item",
    "element",
    "copy",
    "id",
    "elements",
    "change",
    "moment",
    "apple",
    "followed",
    "orange",
    "banana",
    "carrots",
    "onions",
    "potatoes",
    "cake",
    "pie",
    "ice",
    "cream",
    "selecting",
    "unordered",
    "list",
    "fruits",
    "apple",
    "orange",
    "banana",
    "children",
    "siblings",
    "select",
    "apple",
    "get",
    "next",
    "sibling",
    "would",
    "orange",
    "select",
    "carrots",
    "next",
    "sibling",
    "would",
    "onions",
    "selected",
    "cake",
    "next",
    "sibling",
    "would",
    "pie",
    "let",
    "create",
    "constant",
    "element",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "going",
    "select",
    "apple",
    "create",
    "reference",
    "next",
    "sibling",
    "equals",
    "take",
    "element",
    "access",
    "next",
    "element",
    "sibling",
    "take",
    "next",
    "sibling",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "selecting",
    "apple",
    "next",
    "sibling",
    "would",
    "orange",
    "select",
    "orange",
    "next",
    "sibling",
    "would",
    "banana",
    "select",
    "banana",
    "well",
    "banana",
    "next",
    "sibling",
    "last",
    "line",
    "would",
    "selecting",
    "anything",
    "next",
    "sibling",
    "banana",
    "select",
    "carrots",
    "next",
    "sibling",
    "onions",
    "selected",
    "onions",
    "next",
    "sibling",
    "potatoes",
    "selected",
    "cake",
    "next",
    "sibling",
    "pie",
    "selected",
    "pie",
    "next",
    "sibling",
    "ice",
    "cream",
    "sel",
    "selected",
    "fruits",
    "vegetables",
    "desserts",
    "would",
    "highlighted",
    "select",
    "id",
    "fruits",
    "would",
    "highlight",
    "unordered",
    "list",
    "fruits",
    "three",
    "unordered",
    "lists",
    "fruits",
    "vegetables",
    "desserts",
    "children",
    "body",
    "siblings",
    "one",
    "another",
    "kind",
    "like",
    "list",
    "item",
    "elements",
    "apple",
    "ice",
    "cream",
    "children",
    "unordered",
    "lists",
    "fruits",
    "vegetables",
    "desserts",
    "parents",
    "body",
    "grandparent",
    "select",
    "unordered",
    "list",
    "fruits",
    "next",
    "sibling",
    "would",
    "vegetables",
    "accessing",
    "next",
    "element",
    "sibling",
    "unordered",
    "list",
    "fruits",
    "selects",
    "unordered",
    "list",
    "vegetables",
    "selected",
    "vegetables",
    "get",
    "next",
    "sibling",
    "would",
    "give",
    "unordered",
    "list",
    "desserts",
    "right",
    "previous",
    "element",
    "sibling",
    "select",
    "element",
    "get",
    "previous",
    "element",
    "sibling",
    "select",
    "orange",
    "would",
    "give",
    "apple",
    "selected",
    "banana",
    "would",
    "give",
    "orange",
    "selected",
    "onions",
    "would",
    "give",
    "carrots",
    "create",
    "constant",
    "element",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "select",
    "orange",
    "const",
    "prev",
    "meaning",
    "previous",
    "sibling",
    "equals",
    "take",
    "element",
    "access",
    "previous",
    "element",
    "sibling",
    "take",
    "previous",
    "sibling",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "previous",
    "sibling",
    "orange",
    "apple",
    "previous",
    "sibling",
    "banana",
    "orange",
    "selected",
    "onions",
    "previous",
    "sibling",
    "carrots",
    "previous",
    "sibling",
    "potatoes",
    "onions",
    "previous",
    "sibling",
    "pie",
    "cake",
    "previous",
    "sibling",
    "ice",
    "cream",
    "pi",
    "selected",
    "first",
    "sibling",
    "attempt",
    "get",
    "previous",
    "sibling",
    "well",
    "select",
    "anything",
    "previous",
    "sibling",
    "first",
    "child",
    "exist",
    "selected",
    "previous",
    "sibling",
    "unordered",
    "list",
    "vegetables",
    "would",
    "select",
    "unordered",
    "list",
    "fruits",
    "selected",
    "unordered",
    "list",
    "desserts",
    "would",
    "give",
    "vegetables",
    "parent",
    "element",
    "property",
    "whichever",
    "element",
    "select",
    "get",
    "parent",
    "parent",
    "element",
    "contains",
    "const",
    "element",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "select",
    "apple",
    "const",
    "parent",
    "equals",
    "access",
    "element",
    "access",
    "parent",
    "element",
    "let",
    "take",
    "parent",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "highlight",
    "unordered",
    "list",
    "fruits",
    "selected",
    "orange",
    "well",
    "would",
    "change",
    "parent",
    "still",
    "fruits",
    "thing",
    "goes",
    "banana",
    "selected",
    "carrots",
    "well",
    "parent",
    "vegetables",
    "unordered",
    "list",
    "selected",
    "ice",
    "cream",
    "parent",
    "desserts",
    "get",
    "parent",
    "element",
    "access",
    "parent",
    "element",
    "property",
    "last",
    "property",
    "discuss",
    "children",
    "return",
    "children",
    "selected",
    "element",
    "create",
    "const",
    "element",
    "equals",
    "document",
    "getet",
    "el",
    "element",
    "id",
    "select",
    "id",
    "fruits",
    "would",
    "like",
    "children",
    "element",
    "create",
    "reference",
    "children",
    "equals",
    "take",
    "element",
    "access",
    "children",
    "property",
    "children",
    "working",
    "accessing",
    "children",
    "element",
    "returns",
    "html",
    "collection",
    "html",
    "collection",
    "three",
    "list",
    "item",
    "elements",
    "html",
    "collections",
    "method",
    "would",
    "need",
    "typ",
    "cast",
    "array",
    "using",
    "method",
    "arrays",
    "let",
    "take",
    "children",
    "convert",
    "array",
    "method",
    "chain",
    "method",
    "let",
    "take",
    "child",
    "children",
    "take",
    "child",
    "iteration",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "yellow",
    "highlight",
    "children",
    "selected",
    "element",
    "apple",
    "orange",
    "banana",
    "selected",
    "vegetables",
    "would",
    "highlight",
    "carrots",
    "onions",
    "potatoes",
    "selected",
    "desserts",
    "would",
    "highlight",
    "cake",
    "pie",
    "ice",
    "cream",
    "even",
    "access",
    "children",
    "index",
    "number",
    "let",
    "say",
    "would",
    "like",
    "highlight",
    "middle",
    "sibling",
    "orange",
    "onions",
    "pie",
    "let",
    "take",
    "children",
    "html",
    "collection",
    "access",
    "index",
    "number",
    "let",
    "access",
    "children",
    "index",
    "one",
    "desserts",
    "would",
    "highlight",
    "pie",
    "let",
    "select",
    "vegetables",
    "would",
    "highlight",
    "onions",
    "fruits",
    "would",
    "highlight",
    "orange",
    "right",
    "everybody",
    "introduction",
    "dom",
    "navigation",
    "process",
    "navigating",
    "structure",
    "html",
    "document",
    "using",
    "javascript",
    "several",
    "different",
    "properties",
    "use",
    "navigate",
    "html",
    "elements",
    "well",
    "everybody",
    "introduction",
    "dom",
    "navigation",
    "javascript",
    "hey",
    "everybody",
    "today",
    "video",
    "going",
    "show",
    "add",
    "change",
    "html",
    "elements",
    "using",
    "javascript",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "break",
    "creating",
    "appending",
    "element",
    "el",
    "dom",
    "three",
    "simple",
    "steps",
    "create",
    "element",
    "add",
    "necessary",
    "attributes",
    "properties",
    "append",
    "element",
    "dom",
    "final",
    "step",
    "begin",
    "within",
    "html",
    "file",
    "create",
    "boxes",
    "exercise",
    "developments",
    "inner",
    "paragraph",
    "first",
    "text",
    "box",
    "one",
    "development",
    "give",
    "id",
    "box",
    "one",
    "class",
    "box",
    "let",
    "copy",
    "div",
    "element",
    "paste",
    "three",
    "times",
    "total",
    "four",
    "boxes",
    "create",
    "box",
    "two",
    "box",
    "three",
    "box",
    "four",
    "apply",
    "following",
    "css",
    "properties",
    "selecting",
    "box",
    "class",
    "add",
    "border",
    "3",
    "pixel",
    "solid",
    "set",
    "width",
    "100",
    "height",
    "125",
    "pixels",
    "ready",
    "begin",
    "step",
    "one",
    "need",
    "create",
    "element",
    "order",
    "work",
    "right",
    "create",
    "constant",
    "new",
    "h1",
    "h1",
    "equals",
    "select",
    "document",
    "use",
    "create",
    "element",
    "method",
    "string",
    "pass",
    "type",
    "element",
    "would",
    "like",
    "create",
    "create",
    "h1",
    "element",
    "h1",
    "element",
    "work",
    "referencing",
    "new",
    "h1",
    "let",
    "add",
    "attributes",
    "css",
    "properties",
    "let",
    "one",
    "take",
    "new",
    "h1",
    "element",
    "access",
    "text",
    "content",
    "set",
    "equal",
    "like",
    "pizza",
    "append",
    "element",
    "dom",
    "access",
    "dom",
    "document",
    "element",
    "would",
    "like",
    "select",
    "let",
    "select",
    "body",
    "element",
    "document",
    "use",
    "append",
    "method",
    "pass",
    "html",
    "element",
    "argument",
    "go",
    "h1",
    "element",
    "append",
    "element",
    "parent",
    "new",
    "element",
    "last",
    "child",
    "could",
    "prepend",
    "would",
    "like",
    "first",
    "child",
    "let",
    "use",
    "prepend",
    "method",
    "change",
    "aend",
    "prepend",
    "beginning",
    "let",
    "add",
    "additional",
    "attribute",
    "take",
    "new",
    "h1",
    "element",
    "set",
    "id",
    "attribute",
    "equal",
    "h1",
    "let",
    "see",
    "worked",
    "rightclick",
    "element",
    "inspect",
    "h1",
    "element",
    "first",
    "child",
    "prepending",
    "h1",
    "element",
    "id",
    "attribute",
    "set",
    "h1",
    "let",
    "change",
    "css",
    "properties",
    "element",
    "access",
    "new",
    "h1",
    "access",
    "style",
    "access",
    "color",
    "f",
    "color",
    "let",
    "set",
    "red",
    "better",
    "yet",
    "let",
    "set",
    "color",
    "tomato",
    "like",
    "tomatoes",
    "think",
    "better",
    "looking",
    "shade",
    "red",
    "let",
    "also",
    "center",
    "text",
    "new",
    "h1",
    "access",
    "style",
    "access",
    "text",
    "align",
    "property",
    "set",
    "center",
    "text",
    "centered",
    "append",
    "element",
    "would",
    "like",
    "append",
    "within",
    "box",
    "one",
    "select",
    "box",
    "one",
    "parent",
    "rather",
    "body",
    "access",
    "document",
    "need",
    "select",
    "element",
    "select",
    "box",
    "one",
    "could",
    "use",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "going",
    "select",
    "box",
    "one",
    "follow",
    "append",
    "append",
    "new",
    "h1",
    "element",
    "h1",
    "element",
    "within",
    "box",
    "one",
    "outside",
    "like",
    "previously",
    "could",
    "append",
    "h1",
    "element",
    "box",
    "two",
    "would",
    "select",
    "get",
    "element",
    "id",
    "select",
    "box",
    "two",
    "put",
    "within",
    "box",
    "two",
    "box",
    "3",
    "box",
    "four",
    "appending",
    "element",
    "box",
    "one",
    "last",
    "child",
    "box",
    "one",
    "child",
    "elements",
    "within",
    "box",
    "paragraph",
    "element",
    "h1",
    "element",
    "come",
    "would",
    "like",
    "h1",
    "element",
    "first",
    "child",
    "prepend",
    "going",
    "copy",
    "want",
    "rewrite",
    "prepend",
    "prepend",
    "new",
    "h1",
    "element",
    "take",
    "box",
    "one",
    "prepend",
    "new",
    "h1",
    "element",
    "h1",
    "element",
    "top",
    "first",
    "child",
    "paragraph",
    "element",
    "comes",
    "let",
    "box",
    "two",
    "box",
    "3",
    "box",
    "four",
    "would",
    "like",
    "take",
    "h1",
    "element",
    "sandwich",
    "box",
    "one",
    "box",
    "two",
    "could",
    "select",
    "box",
    "two",
    "insert",
    "new",
    "h1",
    "element",
    "create",
    "reference",
    "box",
    "2",
    "equals",
    "document",
    "get",
    "element",
    "id",
    "select",
    "id",
    "box",
    "two",
    "access",
    "document",
    "access",
    "body",
    "box",
    "two",
    "child",
    "element",
    "body",
    "use",
    "insert",
    "method",
    "two",
    "arguments",
    "new",
    "element",
    "current",
    "element",
    "new",
    "element",
    "going",
    "new",
    "h1",
    "trying",
    "add",
    "current",
    "element",
    "target",
    "selecting",
    "box",
    "two",
    "insert",
    "new",
    "h1",
    "element",
    "box",
    "two",
    "looks",
    "like",
    "h1",
    "element",
    "box",
    "one",
    "box",
    "two",
    "take",
    "new",
    "h1",
    "element",
    "insert",
    "box",
    "two",
    "box",
    "one",
    "well",
    "going",
    "box",
    "one",
    "let",
    "try",
    "box",
    "three",
    "h1",
    "element",
    "box",
    "three",
    "box",
    "four",
    "elements",
    "ids",
    "select",
    "use",
    "query",
    "selector",
    "select",
    "everything",
    "box",
    "class",
    "create",
    "constant",
    "boxes",
    "node",
    "list",
    "access",
    "document",
    "use",
    "query",
    "selector",
    "select",
    "everything",
    "box",
    "class",
    "use",
    "insert",
    "method",
    "access",
    "document",
    "access",
    "body",
    "insert",
    "new",
    "element",
    "add",
    "current",
    "element",
    "new",
    "element",
    "new",
    "h1",
    "current",
    "element",
    "node",
    "list",
    "boxes",
    "access",
    "specific",
    "element",
    "node",
    "list",
    "index",
    "accessed",
    "boxes",
    "index",
    "zero",
    "would",
    "give",
    "box",
    "one",
    "boxes",
    "index",
    "one",
    "referring",
    "box",
    "two",
    "box",
    "three",
    "box",
    "four",
    "could",
    "use",
    "query",
    "selector",
    "select",
    "many",
    "elements",
    "store",
    "within",
    "node",
    "list",
    "select",
    "specific",
    "elements",
    "index",
    "number",
    "optional",
    "time",
    "need",
    "remove",
    "html",
    "element",
    "let",
    "append",
    "new",
    "h1",
    "element",
    "need",
    "select",
    "location",
    "find",
    "element",
    "within",
    "body",
    "document",
    "use",
    "remove",
    "child",
    "method",
    "remove",
    "new",
    "h1",
    "element",
    "gone",
    "h1",
    "element",
    "within",
    "box",
    "one",
    "right",
    "append",
    "new",
    "h1",
    "element",
    "box",
    "one",
    "need",
    "add",
    "ids",
    "back",
    "boxes",
    "forgot",
    "pending",
    "new",
    "h",
    "one",
    "element",
    "box",
    "one",
    "try",
    "remove",
    "work",
    "still",
    "need",
    "select",
    "box",
    "one",
    "body",
    "document",
    "box",
    "one",
    "direct",
    "parent",
    "h1",
    "element",
    "body",
    "body",
    "case",
    "could",
    "like",
    "grandparent",
    "instead",
    "selecting",
    "body",
    "get",
    "id",
    "box",
    "one",
    "element",
    "selector",
    "get",
    "box",
    "one",
    "use",
    "get",
    "element",
    "id",
    "easy",
    "get",
    "element",
    "id",
    "id",
    "selecting",
    "box",
    "one",
    "remove",
    "new",
    "h1",
    "element",
    "found",
    "within",
    "gone",
    "time",
    "need",
    "remove",
    "element",
    "select",
    "parent",
    "element",
    "follow",
    "remove",
    "child",
    "method",
    "pass",
    "element",
    "trying",
    "remove",
    "argument",
    "last",
    "example",
    "going",
    "work",
    "ordered",
    "lists",
    "going",
    "html",
    "file",
    "create",
    "ordered",
    "list",
    "pair",
    "tags",
    "give",
    "ordered",
    "list",
    "id",
    "fruits",
    "add",
    "list",
    "items",
    "first",
    "list",
    "item",
    "apple",
    "id",
    "apple",
    "create",
    "list",
    "item",
    "element",
    "orange",
    "id",
    "orange",
    "banana",
    "id",
    "banana",
    "add",
    "little",
    "bit",
    "css",
    "styling",
    "going",
    "css",
    "stylesheet",
    "select",
    "id",
    "fruits",
    "add",
    "border",
    "three",
    "pixel",
    "solid",
    "demonstration",
    "increase",
    "font",
    "size",
    "2",
    "rm",
    "right",
    "need",
    "work",
    "creating",
    "list",
    "item",
    "element",
    "create",
    "constant",
    "new",
    "list",
    "item",
    "equals",
    "document",
    "create",
    "element",
    "type",
    "element",
    "trying",
    "create",
    "list",
    "item",
    "element",
    "let",
    "set",
    "attributes",
    "properties",
    "step",
    "two",
    "let",
    "take",
    "new",
    "list",
    "item",
    "set",
    "text",
    "content",
    "equal",
    "coconut",
    "append",
    "element",
    "append",
    "new",
    "list",
    "item",
    "body",
    "document",
    "last",
    "child",
    "body",
    "adding",
    "ordered",
    "list",
    "see",
    "going",
    "add",
    "attributes",
    "properties",
    "let",
    "take",
    "new",
    "list",
    "item",
    "access",
    "id",
    "attribute",
    "set",
    "coconut",
    "let",
    "change",
    "font",
    "weight",
    "new",
    "list",
    "item",
    "access",
    "style",
    "access",
    "font",
    "weight",
    "set",
    "bold",
    "background",
    "color",
    "access",
    "style",
    "access",
    "background",
    "color",
    "set",
    "background",
    "color",
    "light",
    "green",
    "list",
    "item",
    "element",
    "append",
    "body",
    "last",
    "child",
    "body",
    "document",
    "ordered",
    "list",
    "found",
    "within",
    "body",
    "prepend",
    "would",
    "happen",
    "prepend",
    "new",
    "list",
    "item",
    "first",
    "child",
    "select",
    "ordered",
    "list",
    "fruits",
    "get",
    "element",
    "id",
    "fruits",
    "append",
    "new",
    "list",
    "item",
    "end",
    "number",
    "four",
    "let",
    "prepend",
    "ordered",
    "list",
    "get",
    "element",
    "id",
    "fruits",
    "prepend",
    "new",
    "list",
    "item",
    "coconut",
    "number",
    "one",
    "insert",
    "coconut",
    "apple",
    "orange",
    "since",
    "list",
    "item",
    "elements",
    "id",
    "could",
    "use",
    "let",
    "get",
    "id",
    "orange",
    "const",
    "orange",
    "get",
    "element",
    "id",
    "orange",
    "instead",
    "selecting",
    "body",
    "going",
    "select",
    "ordered",
    "list",
    "id",
    "fruits",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "selecting",
    "fruits",
    "select",
    "ordered",
    "list",
    "fruits",
    "insert",
    "new",
    "list",
    "item",
    "orange",
    "coconut",
    "number",
    "two",
    "let",
    "insert",
    "coconut",
    "banana",
    "id",
    "banana",
    "const",
    "banana",
    "insert",
    "new",
    "list",
    "item",
    "banana",
    "coconut",
    "number",
    "three",
    "could",
    "insert",
    "apple",
    "get",
    "id",
    "apple",
    "const",
    "apple",
    "insert",
    "new",
    "list",
    "item",
    "apple",
    "back",
    "beginning",
    "list",
    "items",
    "ids",
    "let",
    "eliminate",
    "would",
    "need",
    "use",
    "query",
    "selector",
    "select",
    "list",
    "items",
    "ordered",
    "list",
    "fruits",
    "going",
    "use",
    "query",
    "selector",
    "select",
    "id",
    "fruits",
    "select",
    "list",
    "item",
    "descendants",
    "within",
    "id",
    "return",
    "node",
    "list",
    "stores",
    "current",
    "list",
    "items",
    "within",
    "ordered",
    "list",
    "need",
    "select",
    "ordered",
    "list",
    "fruits",
    "body",
    "document",
    "getet",
    "element",
    "id",
    "select",
    "order",
    "ordered",
    "list",
    "fruits",
    "insert",
    "new",
    "list",
    "item",
    "list",
    "items",
    "index",
    "zero",
    "insert",
    "coconut",
    "apple",
    "let",
    "increment",
    "index",
    "one",
    "coconut",
    "orange",
    "banana",
    "banana",
    "need",
    "remove",
    "list",
    "item",
    "would",
    "need",
    "select",
    "first",
    "let",
    "append",
    "new",
    "list",
    "item",
    "fruit",
    "get",
    "id",
    "ordered",
    "list",
    "fruits",
    "remove",
    "child",
    "new",
    "list",
    "item",
    "gone",
    "right",
    "everybody",
    "add",
    "change",
    "remove",
    "html",
    "elements",
    "using",
    "javascript",
    "hey",
    "everybody",
    "today",
    "video",
    "got",
    "explain",
    "mouse",
    "events",
    "javascript",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "first",
    "thing",
    "need",
    "discuss",
    "event",
    "listeners",
    "event",
    "listener",
    "listens",
    "specific",
    "events",
    "create",
    "interactive",
    "web",
    "pages",
    "types",
    "events",
    "discuss",
    "click",
    "events",
    "click",
    "something",
    "mouse",
    "hover",
    "something",
    "mouse",
    "hovering",
    "something",
    "leave",
    "element",
    "add",
    "event",
    "listener",
    "use",
    "add",
    "event",
    "listener",
    "method",
    "pass",
    "event",
    "type",
    "including",
    "limited",
    "could",
    "clicking",
    "something",
    "hovering",
    "something",
    "leaving",
    "confines",
    "element",
    "call",
    "back",
    "function",
    "want",
    "interact",
    "something",
    "example",
    "could",
    "use",
    "click",
    "event",
    "change",
    "color",
    "something",
    "click",
    "going",
    "html",
    "file",
    "create",
    "development",
    "box",
    "id",
    "development",
    "box",
    "text",
    "box",
    "click",
    "fun",
    "add",
    "emoji",
    "like",
    "emojis",
    "let",
    "apply",
    "css",
    "styling",
    "kind",
    "small",
    "let",
    "select",
    "id",
    "box",
    "change",
    "background",
    "color",
    "light",
    "green",
    "color",
    "choosing",
    "set",
    "width",
    "300",
    "pixels",
    "height",
    "300",
    "pixels",
    "increase",
    "font",
    "size",
    "something",
    "large",
    "like",
    "rm",
    "set",
    "font",
    "weight",
    "bold",
    "use",
    "flex",
    "box",
    "display",
    "flex",
    "align",
    "items",
    "center",
    "text",
    "align",
    "center",
    "good",
    "enough",
    "sure",
    "save",
    "everything",
    "going",
    "select",
    "id",
    "box",
    "store",
    "constant",
    "const",
    "box",
    "equals",
    "need",
    "select",
    "accessing",
    "dom",
    "document",
    "getet",
    "element",
    "id",
    "select",
    "select",
    "id",
    "box",
    "work",
    "easily",
    "take",
    "box",
    "add",
    "event",
    "listener",
    "method",
    "box",
    "addevent",
    "listener",
    "need",
    "pass",
    "event",
    "type",
    "call",
    "back",
    "function",
    "want",
    "something",
    "click",
    "box",
    "event",
    "type",
    "going",
    "click",
    "need",
    "call",
    "back",
    "function",
    "define",
    "function",
    "change",
    "background",
    "color",
    "function",
    "change",
    "color",
    "going",
    "one",
    "parameter",
    "event",
    "pass",
    "call",
    "back",
    "change",
    "color",
    "event",
    "parameter",
    "event",
    "object",
    "provided",
    "us",
    "automatically",
    "web",
    "browser",
    "something",
    "happens",
    "event",
    "occurs",
    "like",
    "click",
    "something",
    "event",
    "object",
    "contains",
    "information",
    "something",
    "happens",
    "event",
    "demonstration",
    "temporarily",
    "going",
    "event",
    "let",
    "click",
    "box",
    "go",
    "inspect",
    "console",
    "event",
    "clicked",
    "box",
    "web",
    "browser",
    "provided",
    "us",
    "event",
    "object",
    "pointer",
    "event",
    "object",
    "contains",
    "details",
    "happened",
    "exactly",
    "example",
    "target",
    "click",
    "clicked",
    "div",
    "element",
    "id",
    "box",
    "properties",
    "methods",
    "box",
    "target",
    "time",
    "stamp",
    "click",
    "occurred",
    "type",
    "event",
    "click",
    "matches",
    "event",
    "type",
    "coordinates",
    "clicked",
    "screen",
    "event",
    "object",
    "going",
    "provided",
    "us",
    "web",
    "browser",
    "automatically",
    "need",
    "explicitly",
    "pass",
    "event",
    "object",
    "call",
    "back",
    "provided",
    "us",
    "behind",
    "scenes",
    "going",
    "change",
    "background",
    "color",
    "box",
    "click",
    "access",
    "event",
    "op",
    "object",
    "provided",
    "us",
    "access",
    "target",
    "target",
    "clicked",
    "information",
    "target",
    "within",
    "event",
    "object",
    "take",
    "style",
    "target",
    "set",
    "background",
    "color",
    "property",
    "different",
    "color",
    "set",
    "red",
    "prefer",
    "shade",
    "tomato",
    "like",
    "color",
    "click",
    "box",
    "background",
    "color",
    "changes",
    "stop",
    "let",
    "also",
    "change",
    "text",
    "content",
    "add",
    "one",
    "statement",
    "change",
    "color",
    "function",
    "access",
    "event",
    "access",
    "target",
    "access",
    "text",
    "content",
    "target",
    "ouch",
    "add",
    "emoji",
    "good",
    "one",
    "click",
    "box",
    "color",
    "change",
    "text",
    "necessarily",
    "need",
    "pass",
    "call",
    "back",
    "also",
    "pass",
    "anonymous",
    "function",
    "even",
    "arrow",
    "function",
    "let",
    "copy",
    "two",
    "lines",
    "code",
    "reuse",
    "later",
    "longer",
    "need",
    "define",
    "function",
    "within",
    "event",
    "listener",
    "instead",
    "passing",
    "call",
    "back",
    "pass",
    "anonymous",
    "function",
    "one",
    "parameter",
    "event",
    "going",
    "provided",
    "us",
    "click",
    "box",
    "change",
    "background",
    "color",
    "text",
    "could",
    "even",
    "use",
    "eror",
    "function",
    "preference",
    "arrow",
    "functions",
    "concise",
    "syntax",
    "arrow",
    "function",
    "one",
    "parameter",
    "event",
    "single",
    "parameter",
    "need",
    "enclose",
    "within",
    "set",
    "parentheses",
    "one",
    "parameter",
    "event",
    "code",
    "still",
    "work",
    "click",
    "box",
    "color",
    "changes",
    "well",
    "text",
    "add",
    "event",
    "listener",
    "pass",
    "call",
    "back",
    "anonymous",
    "function",
    "arrow",
    "function",
    "depends",
    "preferences",
    "personally",
    "like",
    "arrow",
    "functions",
    "mouse",
    "events",
    "discuss",
    "mouse",
    "mouse",
    "mouse",
    "hover",
    "cursor",
    "something",
    "let",
    "take",
    "box",
    "add",
    "new",
    "event",
    "listener",
    "element",
    "one",
    "event",
    "listener",
    "add",
    "event",
    "listener",
    "event",
    "call",
    "back",
    "arguments",
    "event",
    "going",
    "mouse",
    "call",
    "back",
    "use",
    "arrow",
    "function",
    "one",
    "parameter",
    "event",
    "arrow",
    "let",
    "copy",
    "two",
    "lines",
    "code",
    "change",
    "background",
    "color",
    "yellow",
    "like",
    "warning",
    "text",
    "content",
    "good",
    "face",
    "hover",
    "cursor",
    "element",
    "background",
    "color",
    "text",
    "going",
    "change",
    "event",
    "occurred",
    "mouse",
    "hover",
    "cursor",
    "something",
    "mouse",
    "leave",
    "specified",
    "element",
    "leave",
    "box",
    "would",
    "like",
    "change",
    "back",
    "background",
    "color",
    "text",
    "content",
    "add",
    "additional",
    "event",
    "listener",
    "box",
    "add",
    "event",
    "listener",
    "event",
    "type",
    "going",
    "mouse",
    "write",
    "arrow",
    "function",
    "provided",
    "event",
    "arrow",
    "let",
    "change",
    "background",
    "color",
    "text",
    "content",
    "revert",
    "background",
    "color",
    "light",
    "green",
    "text",
    "click",
    "whatever",
    "text",
    "content",
    "originally",
    "hover",
    "cursor",
    "element",
    "get",
    "mouse",
    "event",
    "leave",
    "get",
    "mouse",
    "event",
    "click",
    "box",
    "get",
    "click",
    "event",
    "leave",
    "box",
    "get",
    "mouse",
    "event",
    "reset",
    "essentially",
    "last",
    "part",
    "demonstration",
    "going",
    "create",
    "button",
    "click",
    "interact",
    "button",
    "change",
    "separate",
    "element",
    "box",
    "within",
    "html",
    "file",
    "let",
    "create",
    "button",
    "text",
    "click",
    "give",
    "button",
    "unique",
    "id",
    "button",
    "increase",
    "font",
    "size",
    "css",
    "select",
    "button",
    "increase",
    "font",
    "size",
    "3",
    "rm",
    "small",
    "let",
    "select",
    "id",
    "button",
    "const",
    "button",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "button",
    "add",
    "event",
    "listener",
    "button",
    "box",
    "interact",
    "button",
    "way",
    "hover",
    "button",
    "created",
    "mouseover",
    "event",
    "button",
    "changes",
    "click",
    "button",
    "changing",
    "html",
    "css",
    "button",
    "button",
    "event",
    "listener",
    "selecting",
    "target",
    "event",
    "change",
    "button",
    "interacted",
    "interact",
    "box",
    "anything",
    "event",
    "listeners",
    "button",
    "though",
    "going",
    "replace",
    "event",
    "target",
    "box",
    "interact",
    "button",
    "change",
    "background",
    "color",
    "text",
    "content",
    "box",
    "hover",
    "button",
    "box",
    "changes",
    "leave",
    "reverts",
    "back",
    "normal",
    "click",
    "button",
    "created",
    "click",
    "event",
    "right",
    "everybody",
    "introduction",
    "mouse",
    "related",
    "events",
    "need",
    "add",
    "event",
    "listener",
    "event",
    "listener",
    "listens",
    "specific",
    "events",
    "create",
    "interactive",
    "web",
    "pages",
    "events",
    "covered",
    "include",
    "click",
    "mouse",
    "mouse",
    "add",
    "event",
    "listener",
    "take",
    "element",
    "use",
    "add",
    "event",
    "listener",
    "method",
    "pass",
    "event",
    "type",
    "call",
    "back",
    "anonymous",
    "function",
    "arrow",
    "function",
    "something",
    "well",
    "everybody",
    "mouse",
    "related",
    "events",
    "javascript",
    "hey",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "give",
    "introduction",
    "key",
    "events",
    "javascript",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "discussed",
    "previous",
    "topic",
    "event",
    "listeners",
    "event",
    "listener",
    "added",
    "html",
    "element",
    "listen",
    "specific",
    "events",
    "create",
    "interactive",
    "web",
    "pages",
    "discussing",
    "key",
    "key",
    "third",
    "type",
    "key",
    "event",
    "called",
    "key",
    "press",
    "however",
    "according",
    "official",
    "documentation",
    "event",
    "compatible",
    "web",
    "browsers",
    "avoid",
    "using",
    "key",
    "press",
    "key",
    "event",
    "occurs",
    "press",
    "key",
    "key",
    "event",
    "occurs",
    "release",
    "key",
    "adding",
    "event",
    "listener",
    "dom",
    "document",
    "detect",
    "press",
    "release",
    "key",
    "access",
    "dom",
    "add",
    "event",
    "listener",
    "add",
    "event",
    "listener",
    "two",
    "arguments",
    "event",
    "type",
    "call",
    "back",
    "press",
    "key",
    "let",
    "something",
    "matter",
    "key",
    "key",
    "next",
    "argument",
    "either",
    "pass",
    "call",
    "back",
    "anonymous",
    "function",
    "arrow",
    "function",
    "like",
    "arrow",
    "functions",
    "going",
    "use",
    "arrow",
    "function",
    "provided",
    "event",
    "parameter",
    "something",
    "happens",
    "within",
    "web",
    "browser",
    "event",
    "object",
    "created",
    "access",
    "going",
    "event",
    "object",
    "see",
    "details",
    "sure",
    "select",
    "web",
    "browser",
    "going",
    "press",
    "q",
    "key",
    "let",
    "go",
    "inspect",
    "console",
    "event",
    "web",
    "browser",
    "provided",
    "us",
    "keyboard",
    "event",
    "key",
    "pressed",
    "q",
    "relevant",
    "key",
    "code",
    "81",
    "properties",
    "like",
    "alt",
    "key",
    "held",
    "time",
    "thing",
    "shift",
    "key",
    "target",
    "body",
    "document",
    "going",
    "output",
    "key",
    "property",
    "event",
    "press",
    "different",
    "key",
    "going",
    "hold",
    "f",
    "key",
    "releasing",
    "holding",
    "going",
    "consistently",
    "fire",
    "key",
    "events",
    "would",
    "like",
    "detect",
    "release",
    "key",
    "use",
    "key",
    "event",
    "let",
    "copy",
    "paste",
    "event",
    "going",
    "key",
    "display",
    "something",
    "else",
    "going",
    "use",
    "template",
    "string",
    "display",
    "key",
    "equals",
    "display",
    "events",
    "key",
    "let",
    "key",
    "key",
    "copy",
    "key",
    "equals",
    "event",
    "key",
    "let",
    "go",
    "back",
    "console",
    "going",
    "hold",
    "key",
    "release",
    "key",
    "event",
    "key",
    "equals",
    "oh",
    "one",
    "important",
    "thing",
    "arrow",
    "keys",
    "arrow",
    "arrow",
    "arrow",
    "left",
    "arrow",
    "right",
    "ever",
    "would",
    "like",
    "make",
    "sort",
    "game",
    "arrow",
    "keys",
    "also",
    "accessible",
    "key",
    "key",
    "change",
    "html",
    "element",
    "make",
    "simple",
    "within",
    "html",
    "document",
    "going",
    "create",
    "div",
    "element",
    "div",
    "element",
    "id",
    "box",
    "add",
    "text",
    "emoji",
    "right",
    "let",
    "add",
    "little",
    "bit",
    "css",
    "select",
    "box",
    "set",
    "background",
    "color",
    "light",
    "blue",
    "picked",
    "light",
    "blue",
    "yet",
    "set",
    "width",
    "200",
    "pixels",
    "height",
    "200",
    "pixels",
    "font",
    "size",
    "rm",
    "use",
    "flex",
    "box",
    "display",
    "flex",
    "justify",
    "content",
    "center",
    "aine",
    "item",
    "center",
    "part",
    "important",
    "next",
    "exercise",
    "going",
    "set",
    "position",
    "relative",
    "relative",
    "positioning",
    "set",
    "body",
    "document",
    "margin",
    "margin",
    "zero",
    "right",
    "ready",
    "going",
    "select",
    "id",
    "box",
    "const",
    "box",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "going",
    "select",
    "box",
    "press",
    "key",
    "going",
    "change",
    "text",
    "content",
    "box",
    "mybox",
    "textcontent",
    "equals",
    "pick",
    "different",
    "emoji",
    "let",
    "one",
    "change",
    "css",
    "mybox",
    "dostyle",
    "background",
    "color",
    "equals",
    "tomato",
    "color",
    "choosing",
    "press",
    "key",
    "html",
    "css",
    "going",
    "change",
    "going",
    "release",
    "key",
    "revert",
    "back",
    "normal",
    "html",
    "element",
    "stays",
    "way",
    "release",
    "key",
    "revert",
    "changes",
    "going",
    "back",
    "original",
    "let",
    "take",
    "box",
    "change",
    "text",
    "content",
    "equal",
    "emoji",
    "like",
    "emojis",
    "use",
    "original",
    "one",
    "set",
    "background",
    "color",
    "light",
    "blue",
    "hold",
    "button",
    "html",
    "css",
    "going",
    "change",
    "release",
    "button",
    "3",
    "2",
    "1",
    "go",
    "going",
    "try",
    "press",
    "space",
    "bar",
    "fast",
    "seizure",
    "warning",
    "let",
    "go",
    "okay",
    "time",
    "move",
    "going",
    "using",
    "arrow",
    "keys",
    "move",
    "element",
    "going",
    "create",
    "const",
    "move",
    "amount",
    "pressing",
    "arrow",
    "key",
    "far",
    "want",
    "move",
    "element",
    "let",
    "say",
    "10",
    "10",
    "pixels",
    "create",
    "variable",
    "x",
    "think",
    "coordinates",
    "set",
    "zero",
    "also",
    "zero",
    "x",
    "horizontal",
    "movement",
    "vertical",
    "movement",
    "document",
    "addevent",
    "listener",
    "key",
    "event",
    "would",
    "like",
    "something",
    "write",
    "arrow",
    "function",
    "provided",
    "event",
    "code",
    "want",
    "something",
    "user",
    "uses",
    "arrow",
    "key",
    "event",
    "access",
    "key",
    "property",
    "let",
    "go",
    "inspect",
    "console",
    "select",
    "document",
    "would",
    "like",
    "something",
    "key",
    "pressed",
    "arrow",
    "arrow",
    "arrow",
    "left",
    "arrow",
    "right",
    "want",
    "keys",
    "write",
    "statement",
    "access",
    "event",
    "access",
    "key",
    "follow",
    "starts",
    "method",
    "key",
    "start",
    "arrow",
    "enter",
    "si",
    "statement",
    "key",
    "event",
    "arrow",
    "arrow",
    "arrow",
    "left",
    "arrow",
    "right",
    "write",
    "switch",
    "written",
    "switches",
    "examine",
    "key",
    "event",
    "switches",
    "examine",
    "value",
    "matching",
    "cases",
    "case",
    "arrow",
    "key",
    "event",
    "matches",
    "case",
    "arrow",
    "take",
    "subtract",
    "movement",
    "amount",
    "10",
    "yus",
    "equals",
    "movement",
    "amount",
    "sure",
    "break",
    "break",
    "switch",
    "need",
    "case",
    "arrow",
    "arrow",
    "equals",
    "movement",
    "amount",
    "arrow",
    "left",
    "arrow",
    "left",
    "x",
    "horizontal",
    "axis",
    "minus",
    "equals",
    "movement",
    "amount",
    "arrow",
    "right",
    "arrow",
    "right",
    "x",
    "plus",
    "equals",
    "movement",
    "amount",
    "outside",
    "switch",
    "within",
    "statement",
    "going",
    "access",
    "box",
    "access",
    "style",
    "access",
    "top",
    "property",
    "set",
    "equal",
    "template",
    "string",
    "going",
    "take",
    "variable",
    "add",
    "pixels",
    "take",
    "top",
    "property",
    "box",
    "set",
    "equal",
    "coordinate",
    "going",
    "copy",
    "left",
    "property",
    "set",
    "equal",
    "x",
    "pixels",
    "sure",
    "select",
    "body",
    "document",
    "move",
    "right",
    "right",
    "arrow",
    "key",
    "left",
    "diagonal",
    "hit",
    "two",
    "keys",
    "arrow",
    "keys",
    "default",
    "behavior",
    "scroll",
    "see",
    "go",
    "far",
    "scroll",
    "bar",
    "right",
    "hand",
    "side",
    "prevent",
    "default",
    "behavior",
    "key",
    "add",
    "line",
    "code",
    "take",
    "event",
    "follow",
    "prevent",
    "default",
    "method",
    "element",
    "scrolls",
    "screen",
    "disappear",
    "going",
    "scroll",
    "increase",
    "distance",
    "element",
    "moves",
    "increase",
    "move",
    "amount",
    "let",
    "set",
    "100",
    "moving",
    "lot",
    "key",
    "press",
    "hey",
    "bro",
    "future",
    "one",
    "thing",
    "would",
    "like",
    "add",
    "project",
    "pressing",
    "key",
    "let",
    "change",
    "text",
    "content",
    "background",
    "color",
    "much",
    "like",
    "first",
    "exercise",
    "release",
    "key",
    "revert",
    "html",
    "css",
    "back",
    "normal",
    "combining",
    "first",
    "exercise",
    "second",
    "one",
    "result",
    "move",
    "arrow",
    "keys",
    "guy",
    "going",
    "freak",
    "let",
    "go",
    "pretty",
    "exciting",
    "right",
    "everybody",
    "introduction",
    "key",
    "events",
    "javascript",
    "going",
    "add",
    "event",
    "listener",
    "document",
    "select",
    "document",
    "press",
    "key",
    "key",
    "pressed",
    "create",
    "key",
    "event",
    "release",
    "key",
    "creates",
    "key",
    "event",
    "well",
    "everybody",
    "introduction",
    "key",
    "events",
    "javascript",
    "hey",
    "everybody",
    "today",
    "video",
    "going",
    "show",
    "show",
    "hide",
    "html",
    "element",
    "using",
    "javascript",
    "video",
    "need",
    "image",
    "work",
    "find",
    "image",
    "add",
    "website",
    "folder",
    "ready",
    "begin",
    "going",
    "create",
    "button",
    "image",
    "element",
    "let",
    "start",
    "button",
    "text",
    "button",
    "initially",
    "hide",
    "hide",
    "element",
    "give",
    "button",
    "unique",
    "id",
    "button",
    "add",
    "break",
    "create",
    "image",
    "element",
    "tag",
    "image",
    "set",
    "source",
    "equal",
    "either",
    "relative",
    "file",
    "path",
    "file",
    "name",
    "file",
    "little",
    "big",
    "set",
    "width",
    "attribute",
    "like",
    "400",
    "pixels",
    "decent",
    "size",
    "give",
    "image",
    "unique",
    "id",
    "image",
    "img",
    "see",
    "button",
    "going",
    "apply",
    "little",
    "bit",
    "css",
    "button",
    "let",
    "select",
    "id",
    "button",
    "take",
    "font",
    "size",
    "set",
    "2",
    "rm",
    "decent",
    "enough",
    "right",
    "let",
    "go",
    "j",
    "javascript",
    "file",
    "going",
    "create",
    "reference",
    "button",
    "image",
    "let",
    "start",
    "button",
    "const",
    "button",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "selecting",
    "button",
    "let",
    "create",
    "reference",
    "image",
    "well",
    "img",
    "id",
    "img",
    "click",
    "button",
    "would",
    "like",
    "something",
    "take",
    "button",
    "add",
    "event",
    "listener",
    "add",
    "event",
    "listener",
    "two",
    "arguments",
    "event",
    "type",
    "call",
    "back",
    "function",
    "event",
    "type",
    "going",
    "click",
    "click",
    "button",
    "going",
    "something",
    "call",
    "back",
    "write",
    "arrow",
    "function",
    "provided",
    "event",
    "parameter",
    "web",
    "browser",
    "arrow",
    "click",
    "button",
    "code",
    "want",
    "perform",
    "going",
    "take",
    "image",
    "access",
    "style",
    "access",
    "display",
    "property",
    "set",
    "string",
    "none",
    "click",
    "button",
    "going",
    "hide",
    "image",
    "display",
    "property",
    "set",
    "none",
    "let",
    "change",
    "text",
    "button",
    "hide",
    "element",
    "let",
    "take",
    "button",
    "change",
    "text",
    "content",
    "equal",
    "show",
    "want",
    "show",
    "element",
    "hide",
    "become",
    "show",
    "click",
    "button",
    "second",
    "time",
    "nothing",
    "happens",
    "would",
    "like",
    "toggle",
    "hiding",
    "displaying",
    "element",
    "write",
    "statement",
    "let",
    "check",
    "see",
    "display",
    "image",
    "strictly",
    "equal",
    "none",
    "display",
    "image",
    "currently",
    "none",
    "going",
    "set",
    "display",
    "black",
    "block",
    "block",
    "level",
    "element",
    "take",
    "image",
    "access",
    "style",
    "access",
    "display",
    "property",
    "set",
    "block",
    "within",
    "lse",
    "statement",
    "place",
    "two",
    "lines",
    "code",
    "change",
    "text",
    "content",
    "button",
    "hide",
    "clicking",
    "button",
    "toggle",
    "hiding",
    "showing",
    "element",
    "image",
    "let",
    "demonstrate",
    "something",
    "take",
    "button",
    "add",
    "image",
    "would",
    "happen",
    "let",
    "add",
    "break",
    "setting",
    "display",
    "none",
    "reserve",
    "space",
    "image",
    "button",
    "moves",
    "near",
    "top",
    "window",
    "show",
    "another",
    "option",
    "would",
    "like",
    "reserve",
    "space",
    "image",
    "toggle",
    "visibility",
    "display",
    "property",
    "replace",
    "display",
    "visibility",
    "going",
    "check",
    "visibility",
    "hidden",
    "set",
    "visibility",
    "equal",
    "hidden",
    "would",
    "like",
    "show",
    "image",
    "visibility",
    "going",
    "set",
    "visible",
    "toggle",
    "vis",
    "ility",
    "image",
    "least",
    "reserve",
    "space",
    "elements",
    "come",
    "going",
    "shift",
    "near",
    "top",
    "window",
    "use",
    "visibility",
    "display",
    "depending",
    "project",
    "creating",
    "right",
    "everybody",
    "show",
    "hide",
    "html",
    "elements",
    "using",
    "javascript",
    "uh",
    "yeah",
    "probably",
    "talk",
    "nod",
    "lists",
    "today",
    "list",
    "javascript",
    "static",
    "collection",
    "html",
    "elements",
    "created",
    "using",
    "query",
    "selector",
    "select",
    "elements",
    "id",
    "class",
    "element",
    "type",
    "nod",
    "lists",
    "similar",
    "array",
    "map",
    "filter",
    "reduce",
    "method",
    "method",
    "least",
    "though",
    "important",
    "thing",
    "note",
    "node",
    "lists",
    "wo",
    "update",
    "automatically",
    "reflect",
    "changes",
    "dom",
    "example",
    "remove",
    "element",
    "dom",
    "within",
    "node",
    "list",
    "would",
    "also",
    "separately",
    "remove",
    "element",
    "node",
    "list",
    "example",
    "create",
    "four",
    "buttons",
    "class",
    "button",
    "one",
    "class",
    "know",
    "good",
    "name",
    "buttons",
    "class",
    "right",
    "let",
    "copy",
    "button",
    "paste",
    "three",
    "additional",
    "times",
    "button",
    "two",
    "button",
    "three",
    "button",
    "four",
    "going",
    "add",
    "little",
    "bit",
    "css",
    "buttons",
    "let",
    "select",
    "class",
    "buttons",
    "increase",
    "font",
    "size",
    "see",
    "font",
    "size",
    "rm",
    "add",
    "little",
    "bit",
    "margin",
    "10",
    "pixels",
    "remove",
    "border",
    "border",
    "none",
    "smooth",
    "corners",
    "border",
    "radius",
    "5",
    "pixels",
    "add",
    "padding",
    "10",
    "pixels",
    "15",
    "pixels",
    "change",
    "background",
    "color",
    "something",
    "blue",
    "background",
    "color",
    "blue",
    "select",
    "hsl",
    "values",
    "turn",
    "lightness",
    "like",
    "60",
    "okay",
    "decent",
    "font",
    "color",
    "white",
    "okay",
    "good",
    "enough",
    "one",
    "way",
    "create",
    "node",
    "list",
    "using",
    "query",
    "selector",
    "talked",
    "previous",
    "video",
    "show",
    "advanced",
    "things",
    "node",
    "lists",
    "select",
    "elements",
    "id",
    "class",
    "element",
    "type",
    "create",
    "node",
    "list",
    "let",
    "buttons",
    "equals",
    "document",
    "query",
    "selector",
    "let",
    "select",
    "elements",
    "class",
    "need",
    "use",
    "dot",
    "class",
    "name",
    "buttons",
    "could",
    "select",
    "elements",
    "element",
    "type",
    "would",
    "like",
    "select",
    "buttons",
    "would",
    "type",
    "button",
    "element",
    "type",
    "would",
    "like",
    "select",
    "elements",
    "class",
    "node",
    "list",
    "going",
    "node",
    "list",
    "buttons",
    "take",
    "look",
    "node",
    "list",
    "contains",
    "four",
    "elements",
    "button",
    "one",
    "button",
    "two",
    "button",
    "three",
    "button",
    "four",
    "length",
    "property",
    "methods",
    "entries",
    "item",
    "keys",
    "different",
    "methods",
    "going",
    "using",
    "lot",
    "change",
    "html",
    "css",
    "properties",
    "elements",
    "within",
    "node",
    "list",
    "use",
    "method",
    "node",
    "list",
    "iterate",
    "elements",
    "take",
    "node",
    "list",
    "buttons",
    "use",
    "method",
    "write",
    "arrow",
    "function",
    "provided",
    "element",
    "arrow",
    "something",
    "going",
    "rename",
    "element",
    "button",
    "easily",
    "understandable",
    "iteration",
    "provided",
    "current",
    "button",
    "would",
    "like",
    "button",
    "well",
    "let",
    "change",
    "background",
    "color",
    "button",
    "style",
    "background",
    "color",
    "set",
    "green",
    "update",
    "color",
    "buttons",
    "one",
    "iterating",
    "buttons",
    "within",
    "list",
    "change",
    "background",
    "colors",
    "green",
    "let",
    "change",
    "text",
    "content",
    "take",
    "button",
    "access",
    "text",
    "content",
    "set",
    "equal",
    "know",
    "emoji",
    "something",
    "let",
    "text",
    "content",
    "buttons",
    "going",
    "change",
    "maybe",
    "let",
    "append",
    "emoji",
    "replace",
    "text",
    "content",
    "better",
    "add",
    "change",
    "html",
    "css",
    "properties",
    "node",
    "list",
    "use",
    "method",
    "write",
    "arrow",
    "function",
    "something",
    "similar",
    "way",
    "going",
    "add",
    "event",
    "listener",
    "button",
    "listen",
    "click",
    "going",
    "take",
    "node",
    "list",
    "buttons",
    "use",
    "method",
    "button",
    "arrow",
    "need",
    "add",
    "event",
    "listener",
    "button",
    "take",
    "parameter",
    "button",
    "add",
    "event",
    "listener",
    "within",
    "event",
    "listener",
    "event",
    "type",
    "call",
    "back",
    "something",
    "event",
    "type",
    "going",
    "click",
    "instead",
    "call",
    "back",
    "write",
    "arrow",
    "function",
    "provided",
    "event",
    "arrow",
    "event",
    "proved",
    "provided",
    "us",
    "web",
    "browser",
    "something",
    "happens",
    "access",
    "event",
    "objects",
    "target",
    "meaning",
    "button",
    "click",
    "going",
    "target",
    "access",
    "style",
    "access",
    "background",
    "color",
    "property",
    "let",
    "set",
    "red",
    "better",
    "yet",
    "tomato",
    "like",
    "tomatoes",
    "button",
    "event",
    "listener",
    "listen",
    "click",
    "events",
    "click",
    "button",
    "background",
    "color",
    "going",
    "change",
    "going",
    "add",
    "event",
    "listener",
    "mouse",
    "mouse",
    "let",
    "begin",
    "mouse",
    "take",
    "node",
    "list",
    "buttons",
    "use",
    "method",
    "button",
    "arrow",
    "take",
    "button",
    "add",
    "event",
    "listener",
    "event",
    "listeners",
    "event",
    "type",
    "call",
    "back",
    "event",
    "type",
    "tye",
    "going",
    "mouse",
    "hover",
    "cursor",
    "something",
    "would",
    "like",
    "write",
    "arrow",
    "function",
    "event",
    "arrow",
    "let",
    "access",
    "events",
    "target",
    "equal",
    "button",
    "click",
    "access",
    "style",
    "access",
    "background",
    "color",
    "current",
    "color",
    "going",
    "go",
    "back",
    "css",
    "copy",
    "color",
    "paste",
    "make",
    "lightness",
    "10",
    "darker",
    "hover",
    "one",
    "buttons",
    "background",
    "color",
    "going",
    "change",
    "set",
    "lightness",
    "like",
    "40",
    "make",
    "much",
    "apparent",
    "better",
    "leave",
    "one",
    "buttons",
    "need",
    "revert",
    "color",
    "back",
    "original",
    "really",
    "copy",
    "code",
    "replace",
    "mouse",
    "mouse",
    "set",
    "background",
    "color",
    "back",
    "original",
    "button",
    "mouse",
    "mouse",
    "event",
    "listener",
    "add",
    "element",
    "node",
    "list",
    "create",
    "new",
    "button",
    "const",
    "new",
    "button",
    "equals",
    "document",
    "create",
    "element",
    "element",
    "creating",
    "button",
    "creating",
    "appending",
    "html",
    "elements",
    "three",
    "steps",
    "step",
    "one",
    "need",
    "create",
    "element",
    "first",
    "step",
    "two",
    "add",
    "necessary",
    "attributes",
    "css",
    "properties",
    "let",
    "take",
    "new",
    "button",
    "change",
    "text",
    "content",
    "button",
    "equal",
    "button",
    "5",
    "would",
    "like",
    "give",
    "new",
    "button",
    "class",
    "buttons",
    "going",
    "access",
    "class",
    "list",
    "property",
    "new",
    "button",
    "class",
    "list",
    "working",
    "element",
    "class",
    "work",
    "class",
    "list",
    "class",
    "class",
    "list",
    "equals",
    "class",
    "buttons",
    "step",
    "three",
    "append",
    "element",
    "dom",
    "parent",
    "element",
    "new",
    "button",
    "going",
    "well",
    "case",
    "going",
    "body",
    "document",
    "going",
    "adding",
    "new",
    "button",
    "right",
    "parent",
    "enclosing",
    "element",
    "body",
    "case",
    "access",
    "document",
    "select",
    "body",
    "append",
    "child",
    "new",
    "button",
    "button",
    "five",
    "since",
    "added",
    "class",
    "buttons",
    "css",
    "properties",
    "remove",
    "line",
    "code",
    "get",
    "default",
    "appearance",
    "button",
    "talk",
    "class",
    "lists",
    "next",
    "video",
    "lot",
    "node",
    "list",
    "buttons",
    "five",
    "buttons",
    "within",
    "dom",
    "within",
    "node",
    "list",
    "four",
    "buttons",
    "button",
    "one",
    "2",
    "3",
    "four",
    "button",
    "five",
    "within",
    "list",
    "lists",
    "static",
    "collection",
    "wo",
    "update",
    "automatically",
    "reflect",
    "changes",
    "dom",
    "even",
    "though",
    "button",
    "five",
    "within",
    "dom",
    "would",
    "need",
    "manually",
    "add",
    "list",
    "want",
    "work",
    "use",
    "query",
    "selector",
    "select",
    "elements",
    "class",
    "let",
    "reassign",
    "buttons",
    "since",
    "reassigning",
    "buttons",
    "declared",
    "buttons",
    "let",
    "instead",
    "const",
    "able",
    "reassign",
    "constant",
    "could",
    "change",
    "elements",
    "within",
    "buttons",
    "equals",
    "document",
    "query",
    "selector",
    "select",
    "elements",
    "class",
    "class",
    "buttons",
    "let",
    "node",
    "list",
    "buttons",
    "inspect",
    "console",
    "go",
    "node",
    "list",
    "five",
    "elements",
    "button",
    "1",
    "2",
    "3",
    "4",
    "5",
    "even",
    "add",
    "element",
    "dom",
    "element",
    "going",
    "automatically",
    "added",
    "node",
    "list",
    "would",
    "recommend",
    "using",
    "query",
    "selector",
    "update",
    "remove",
    "element",
    "node",
    "list",
    "click",
    "give",
    "buttons",
    "event",
    "listener",
    "listen",
    "click",
    "event",
    "click",
    "one",
    "elements",
    "remove",
    "dom",
    "node",
    "list",
    "take",
    "node",
    "list",
    "buttons",
    "use",
    "method",
    "button",
    "within",
    "node",
    "list",
    "take",
    "button",
    "add",
    "event",
    "listener",
    "provided",
    "event",
    "type",
    "call",
    "back",
    "function",
    "event",
    "type",
    "listening",
    "click",
    "call",
    "back",
    "going",
    "arrow",
    "function",
    "provided",
    "event",
    "arrow",
    "remove",
    "element",
    "dom",
    "click",
    "access",
    "event",
    "object",
    "access",
    "target",
    "use",
    "remove",
    "method",
    "remove",
    "let",
    "see",
    "works",
    "currently",
    "let",
    "remove",
    "button",
    "2",
    "1",
    "4",
    "3",
    "buttons",
    "gone",
    "let",
    "show",
    "something",
    "going",
    "node",
    "list",
    "buttons",
    "click",
    "even",
    "remove",
    "buttons",
    "dom",
    "still",
    "within",
    "node",
    "list",
    "even",
    "buttons",
    "gone",
    "node",
    "list",
    "still",
    "four",
    "buttons",
    "update",
    "manually",
    "easy",
    "way",
    "going",
    "use",
    "query",
    "selector",
    "reassign",
    "buttons",
    "equals",
    "document",
    "query",
    "selector",
    "select",
    "elements",
    "dom",
    "class",
    "buttons",
    "see",
    "works",
    "let",
    "node",
    "list",
    "buttons",
    "click",
    "button",
    "removed",
    "dom",
    "node",
    "list",
    "remove",
    "buttons",
    "list",
    "empty",
    "right",
    "everybody",
    "introduction",
    "node",
    "lists",
    "static",
    "collection",
    "html",
    "elements",
    "created",
    "using",
    "query",
    "selector",
    "select",
    "elements",
    "id",
    "class",
    "element",
    "type",
    "similar",
    "array",
    "map",
    "filter",
    "reduce",
    "method",
    "remember",
    "nod",
    "list",
    "wo",
    "update",
    "automatically",
    "reflect",
    "changes",
    "dom",
    "well",
    "everybody",
    "introduction",
    "node",
    "lists",
    "javascript",
    "hey",
    "everybody",
    "today",
    "video",
    "got",
    "explain",
    "class",
    "lists",
    "javascript",
    "class",
    "list",
    "element",
    "property",
    "used",
    "interact",
    "elements",
    "list",
    "classes",
    "meaning",
    "css",
    "classes",
    "accessing",
    "class",
    "list",
    "property",
    "element",
    "make",
    "reusable",
    "classes",
    "many",
    "elements",
    "across",
    "web",
    "page",
    "css",
    "class",
    "dynamically",
    "add",
    "remove",
    "toggle",
    "replace",
    "check",
    "see",
    "element",
    "contains",
    "certain",
    "class",
    "example",
    "html",
    "document",
    "create",
    "button",
    "button",
    "text",
    "button",
    "id",
    "button",
    "button",
    "apply",
    "little",
    "bit",
    "css",
    "initially",
    "let",
    "select",
    "id",
    "button",
    "applying",
    "properties",
    "let",
    "increase",
    "font",
    "size",
    "rm",
    "oh",
    "43",
    "four",
    "go",
    "back",
    "go",
    "back",
    "go",
    "back",
    "add",
    "little",
    "bit",
    "margin",
    "10",
    "pixels",
    "remove",
    "border",
    "border",
    "none",
    "border",
    "radius",
    "smooth",
    "corners",
    "5",
    "pixels",
    "add",
    "little",
    "bit",
    "padding",
    "10",
    "pixels",
    "15",
    "pixels",
    "good",
    "enough",
    "going",
    "create",
    "css",
    "class",
    "enabled",
    "wo",
    "apply",
    "right",
    "away",
    "though",
    "apply",
    "class",
    "button",
    "using",
    "javascript",
    "element",
    "enabled",
    "let",
    "change",
    "background",
    "color",
    "something",
    "blue",
    "going",
    "use",
    "hsl",
    "values",
    "though",
    "set",
    "font",
    "color",
    "white",
    "button",
    "class",
    "yet",
    "add",
    "dynamically",
    "using",
    "javascript",
    "create",
    "reference",
    "button",
    "const",
    "button",
    "name",
    "need",
    "select",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "selecting",
    "button",
    "add",
    "class",
    "element",
    "take",
    "element",
    "button",
    "access",
    "class",
    "list",
    "property",
    "follow",
    "add",
    "method",
    "add",
    "name",
    "name",
    "class",
    "enabled",
    "button",
    "enabled",
    "appended",
    "css",
    "properties",
    "dynamically",
    "inspect",
    "element",
    "rightclick",
    "inspect",
    "added",
    "class",
    "enabled",
    "element",
    "button",
    "id",
    "class",
    "enabled",
    "remove",
    "class",
    "take",
    "element",
    "button",
    "access",
    "class",
    "list",
    "use",
    "remove",
    "method",
    "method",
    "remove",
    "class",
    "enabled",
    "gone",
    "let",
    "right",
    "click",
    "element",
    "inspect",
    "class",
    "list",
    "empty",
    "added",
    "removed",
    "class",
    "enabled",
    "going",
    "create",
    "new",
    "class",
    "hover",
    "hover",
    "element",
    "apply",
    "css",
    "properties",
    "kind",
    "like",
    "using",
    "hover",
    "sudo",
    "class",
    "using",
    "little",
    "bit",
    "different",
    "add",
    "remove",
    "class",
    "dynamically",
    "apply",
    "class",
    "let",
    "set",
    "box",
    "shadow",
    "give",
    "element",
    "3d",
    "pop",
    "effect",
    "horizontal",
    "vertical",
    "offset",
    "let",
    "set",
    "zero",
    "let",
    "add",
    "10",
    "pixels",
    "blur",
    "effect",
    "set",
    "color",
    "know",
    "let",
    "set",
    "black",
    "set",
    "alpha",
    "like",
    "20",
    "hover",
    "would",
    "also",
    "like",
    "set",
    "font",
    "weight",
    "element",
    "bold",
    "let",
    "add",
    "hover",
    "class",
    "appearance",
    "button",
    "changed",
    "would",
    "like",
    "apply",
    "class",
    "hover",
    "hover",
    "cursor",
    "element",
    "add",
    "mouse",
    "event",
    "listener",
    "take",
    "button",
    "add",
    "event",
    "listener",
    "event",
    "type",
    "call",
    "back",
    "function",
    "event",
    "type",
    "mouse",
    "mouse",
    "element",
    "provided",
    "element",
    "object",
    "event",
    "arrow",
    "access",
    "event",
    "objects",
    "target",
    "meaning",
    "button",
    "take",
    "class",
    "list",
    "add",
    "class",
    "hover",
    "let",
    "see",
    "works",
    "hover",
    "cursor",
    "button",
    "apply",
    "hover",
    "class",
    "leave",
    "button",
    "would",
    "like",
    "remove",
    "really",
    "copy",
    "code",
    "event",
    "listener",
    "paste",
    "replace",
    "mouse",
    "mouse",
    "remove",
    "class",
    "apply",
    "class",
    "remove",
    "mouse",
    "mouse",
    "also",
    "toggle",
    "toggle",
    "class",
    "remove",
    "class",
    "present",
    "add",
    "class",
    "let",
    "replace",
    "add",
    "toggle",
    "mouse",
    "mouse",
    "work",
    "hover",
    "cursor",
    "button",
    "toggle",
    "class",
    "hover",
    "mouse",
    "event",
    "toggle",
    "remove",
    "going",
    "use",
    "replace",
    "method",
    "replace",
    "one",
    "class",
    "another",
    "create",
    "new",
    "class",
    "disabled",
    "replacing",
    "enabled",
    "class",
    "disabled",
    "class",
    "click",
    "button",
    "background",
    "color",
    "disabled",
    "class",
    "let",
    "set",
    "background",
    "color",
    "gray",
    "like",
    "using",
    "hsl",
    "colors",
    "set",
    "lightness",
    "like",
    "60",
    "trying",
    "get",
    "faded",
    "appearance",
    "color",
    "let",
    "pick",
    "light",
    "shade",
    "gray",
    "using",
    "hsl",
    "values",
    "set",
    "lightness",
    "80",
    "going",
    "back",
    "javascript",
    "file",
    "let",
    "add",
    "class",
    "enabled",
    "button",
    "access",
    "class",
    "list",
    "use",
    "add",
    "method",
    "add",
    "class",
    "enabled",
    "add",
    "event",
    "listener",
    "button",
    "take",
    "button",
    "add",
    "event",
    "listener",
    "event",
    "call",
    "back",
    "event",
    "going",
    "click",
    "would",
    "like",
    "something",
    "click",
    "button",
    "receive",
    "event",
    "arrow",
    "take",
    "events",
    "target",
    "access",
    "class",
    "list",
    "use",
    "replace",
    "method",
    "replace",
    "old",
    "class",
    "new",
    "class",
    "replace",
    "enabled",
    "class",
    "disabled",
    "class",
    "two",
    "arguments",
    "old",
    "class",
    "new",
    "class",
    "replace",
    "old",
    "class",
    "new",
    "class",
    "click",
    "button",
    "replace",
    "enabled",
    "class",
    "disabled",
    "class",
    "contains",
    "method",
    "element",
    "contains",
    "class",
    "return",
    "true",
    "returns",
    "false",
    "within",
    "event",
    "listener",
    "let",
    "add",
    "statement",
    "else",
    "statement",
    "check",
    "see",
    "events",
    "target",
    "access",
    "class",
    "list",
    "use",
    "contains",
    "method",
    "click",
    "button",
    "class",
    "contains",
    "disabled",
    "want",
    "class",
    "list",
    "contain",
    "disabled",
    "let",
    "change",
    "text",
    "content",
    "take",
    "vents",
    "target",
    "access",
    "text",
    "content",
    "append",
    "emoji",
    "good",
    "one",
    "one",
    "else",
    "replace",
    "enabled",
    "disabled",
    "let",
    "click",
    "button",
    "replace",
    "enabled",
    "class",
    "disabled",
    "class",
    "button",
    "disabled",
    "inspect",
    "element",
    "class",
    "disabled",
    "click",
    "button",
    "well",
    "class",
    "contains",
    "disabled",
    "true",
    "end",
    "code",
    "append",
    "text",
    "content",
    "button",
    "nice",
    "thing",
    "using",
    "class",
    "lists",
    "html",
    "elements",
    "class",
    "list",
    "property",
    "reuse",
    "css",
    "classes",
    "amongst",
    "many",
    "html",
    "elements",
    "create",
    "h1",
    "element",
    "text",
    "element",
    "hello",
    "give",
    "element",
    "unique",
    "id",
    "h1",
    "increase",
    "font",
    "size",
    "see",
    "select",
    "id",
    "h1",
    "increase",
    "font",
    "size",
    "let",
    "try",
    "five",
    "rm",
    "let",
    "create",
    "reference",
    "h1",
    "const",
    "myh1",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "selecting",
    "h1",
    "add",
    "enabled",
    "class",
    "myh1",
    "myh1",
    "classlist",
    "add",
    "ass",
    "add",
    "enabled",
    "go",
    "added",
    "css",
    "properties",
    "element",
    "lazy",
    "going",
    "copy",
    "code",
    "add",
    "event",
    "listener",
    "h1",
    "let",
    "replace",
    "button",
    "h1",
    "click",
    "h1",
    "element",
    "disable",
    "replace",
    "enabled",
    "class",
    "disabled",
    "class",
    "believe",
    "let",
    "take",
    "look",
    "class",
    "h1",
    "disabled",
    "click",
    "element",
    "class",
    "list",
    "contains",
    "disabled",
    "execute",
    "statement",
    "change",
    "text",
    "content",
    "target",
    "challenge",
    "round",
    "going",
    "create",
    "four",
    "buttons",
    "store",
    "buttons",
    "node",
    "list",
    "let",
    "create",
    "button",
    "text",
    "first",
    "button",
    "button",
    "one",
    "give",
    "button",
    "class",
    "buttons",
    "let",
    "copy",
    "button",
    "paste",
    "three",
    "times",
    "button",
    "one",
    "button",
    "two",
    "button",
    "three",
    "button",
    "four",
    "let",
    "remove",
    "css",
    "h1",
    "select",
    "class",
    "buttons",
    "keep",
    "three",
    "classes",
    "enable",
    "hover",
    "disabled",
    "okay",
    "let",
    "eliminate",
    "code",
    "create",
    "node",
    "list",
    "contain",
    "buttons",
    "use",
    "const",
    "plan",
    "adding",
    "removing",
    "buttons",
    "let",
    "let",
    "buttons",
    "equals",
    "document",
    "query",
    "selector",
    "select",
    "elements",
    "class",
    "buttons",
    "apply",
    "enabled",
    "class",
    "buttons",
    "take",
    "node",
    "list",
    "buttons",
    "use",
    "method",
    "button",
    "within",
    "node",
    "list",
    "take",
    "button",
    "access",
    "button",
    "class",
    "list",
    "property",
    "add",
    "class",
    "enabled",
    "applied",
    "class",
    "buttons",
    "need",
    "remove",
    "class",
    "replace",
    "add",
    "remove",
    "move",
    "hover",
    "cursor",
    "one",
    "buttons",
    "toggle",
    "hover",
    "class",
    "need",
    "iterate",
    "node",
    "list",
    "buttons",
    "take",
    "buttons",
    "use",
    "method",
    "button",
    "within",
    "node",
    "list",
    "take",
    "button",
    "add",
    "event",
    "listener",
    "event",
    "listener",
    "event",
    "type",
    "call",
    "back",
    "function",
    "event",
    "type",
    "mouse",
    "hover",
    "cursor",
    "provided",
    "event",
    "argument",
    "arrow",
    "access",
    "event",
    "object",
    "access",
    "target",
    "meaning",
    "button",
    "hover",
    "access",
    "class",
    "list",
    "property",
    "toggle",
    "hover",
    "class",
    "hover",
    "cursor",
    "one",
    "elements",
    "apply",
    "hover",
    "class",
    "cursor",
    "leaves",
    "one",
    "elements",
    "would",
    "like",
    "toggle",
    "class",
    "let",
    "copy",
    "everything",
    "paste",
    "replace",
    "mouse",
    "mouse",
    "leave",
    "one",
    "elements",
    "toggle",
    "hover",
    "class",
    "remove",
    "class",
    "click",
    "one",
    "buttons",
    "going",
    "replace",
    "enabled",
    "class",
    "disabled",
    "class",
    "take",
    "node",
    "list",
    "buttons",
    "use",
    "method",
    "button",
    "arrow",
    "take",
    "button",
    "add",
    "event",
    "listener",
    "need",
    "select",
    "event",
    "type",
    "call",
    "back",
    "function",
    "event",
    "type",
    "going",
    "click",
    "parameter",
    "event",
    "arrow",
    "click",
    "one",
    "buttons",
    "replace",
    "enabled",
    "class",
    "disabled",
    "class",
    "take",
    "event",
    "object",
    "access",
    "target",
    "access",
    "class",
    "list",
    "property",
    "replace",
    "replace",
    "old",
    "class",
    "new",
    "class",
    "replace",
    "enabled",
    "class",
    "disabled",
    "class",
    "let",
    "see",
    "works",
    "click",
    "button",
    "replace",
    "enabled",
    "class",
    "disabled",
    "class",
    "last",
    "thing",
    "click",
    "button",
    "disabled",
    "change",
    "text",
    "content",
    "use",
    "contains",
    "method",
    "within",
    "event",
    "listener",
    "add",
    "statement",
    "access",
    "event",
    "access",
    "target",
    "access",
    "class",
    "list",
    "property",
    "use",
    "contains",
    "method",
    "class",
    "list",
    "contain",
    "class",
    "disabled",
    "access",
    "event",
    "access",
    "target",
    "event",
    "change",
    "text",
    "content",
    "element",
    "append",
    "emoji",
    "one",
    "like",
    "emoji",
    "class",
    "list",
    "element",
    "disabled",
    "contain",
    "class",
    "disabled",
    "execute",
    "l",
    "statement",
    "disable",
    "replacing",
    "enabled",
    "class",
    "disabled",
    "class",
    "three",
    "event",
    "listeners",
    "mouse",
    "mouse",
    "click",
    "utilizing",
    "three",
    "custom",
    "classes",
    "enabled",
    "hover",
    "disabled",
    "hover",
    "elements",
    "mouse",
    "mouse",
    "events",
    "click",
    "one",
    "buttons",
    "apply",
    "disabled",
    "class",
    "within",
    "click",
    "event",
    "listener",
    "statement",
    "click",
    "element",
    "already",
    "disabled",
    "append",
    "text",
    "content",
    "right",
    "everybody",
    "class",
    "list",
    "property",
    "used",
    "interact",
    "elements",
    "list",
    "classes",
    "css",
    "classes",
    "allow",
    "make",
    "reusable",
    "classes",
    "many",
    "elements",
    "across",
    "web",
    "page",
    "well",
    "everybody",
    "class",
    "list",
    "property",
    "javascript",
    "hey",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "create",
    "game",
    "rock",
    "paper",
    "scissors",
    "using",
    "javascript",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "let",
    "thing",
    "going",
    "create",
    "h1",
    "heading",
    "text",
    "rock",
    "paper",
    "scissors",
    "title",
    "create",
    "three",
    "buttons",
    "first",
    "one",
    "rock",
    "add",
    "text",
    "rock",
    "know",
    "like",
    "using",
    "emojis",
    "going",
    "use",
    "emoji",
    "instead",
    "would",
    "like",
    "emoji",
    "fist",
    "going",
    "zoom",
    "add",
    "css",
    "let",
    "create",
    "button",
    "paper",
    "work",
    "scissors",
    "maybe",
    "p",
    "sign",
    "buttons",
    "set",
    "onclick",
    "event",
    "handler",
    "equal",
    "javascript",
    "function",
    "name",
    "function",
    "play",
    "game",
    "functions",
    "going",
    "pass",
    "argument",
    "first",
    "string",
    "rock",
    "use",
    "double",
    "quotes",
    "html",
    "going",
    "confused",
    "event",
    "handler",
    "ends",
    "argument",
    "going",
    "string",
    "going",
    "within",
    "single",
    "quotes",
    "already",
    "using",
    "double",
    "quotes",
    "let",
    "copy",
    "attribute",
    "cuz",
    "feel",
    "like",
    "typing",
    "second",
    "argument",
    "string",
    "paper",
    "scissors",
    "let",
    "enclose",
    "buttons",
    "within",
    "div",
    "element",
    "div",
    "element",
    "id",
    "choices",
    "let",
    "cut",
    "buttons",
    "paste",
    "within",
    "div",
    "element",
    "outside",
    "div",
    "element",
    "create",
    "create",
    "another",
    "div",
    "element",
    "display",
    "player",
    "choice",
    "player",
    "colon",
    "space",
    "id",
    "development",
    "player",
    "display",
    "display",
    "word",
    "rock",
    "paper",
    "scissors",
    "depending",
    "button",
    "pick",
    "let",
    "computer",
    "text",
    "computer",
    "id",
    "computer",
    "display",
    "display",
    "result",
    "id",
    "result",
    "display",
    "temporary",
    "text",
    "going",
    "add",
    "tie",
    "style",
    "css",
    "would",
    "like",
    "able",
    "see",
    "updates",
    "get",
    "rid",
    "pretty",
    "soon",
    "eventually",
    "add",
    "score",
    "tracker",
    "game",
    "least",
    "working",
    "okay",
    "let",
    "head",
    "css",
    "stylesheet",
    "going",
    "zoom",
    "back",
    "100",
    "let",
    "select",
    "body",
    "document",
    "set",
    "font",
    "family",
    "aial",
    "backup",
    "serif",
    "let",
    "set",
    "font",
    "weight",
    "bold",
    "throughout",
    "application",
    "set",
    "margin",
    "zero",
    "around",
    "body",
    "use",
    "flex",
    "box",
    "display",
    "elements",
    "display",
    "flex",
    "flex",
    "direction",
    "column",
    "align",
    "items",
    "center",
    "let",
    "select",
    "h1",
    "element",
    "need",
    "increase",
    "font",
    "size",
    "font",
    "size",
    "rm",
    "color",
    "pick",
    "color",
    "set",
    "lightness",
    "20",
    "going",
    "select",
    "development",
    "choices",
    "actually",
    "let",
    "make",
    "class",
    "class",
    "choices",
    "select",
    "class",
    "choices",
    "add",
    "margin",
    "bottom",
    "30",
    "pixels",
    "within",
    "development",
    "need",
    "select",
    "buttons",
    "select",
    "class",
    "choices",
    "select",
    "buttons",
    "within",
    "class",
    "increase",
    "font",
    "size",
    "rm",
    "buttons",
    "need",
    "big",
    "set",
    "minimum",
    "width",
    "160",
    "pixels",
    "little",
    "bit",
    "margin",
    "button",
    "zero",
    "pixels",
    "top",
    "bottom",
    "10",
    "pixels",
    "sides",
    "buttons",
    "would",
    "like",
    "rounded",
    "corners",
    "would",
    "like",
    "buttons",
    "circle",
    "set",
    "border",
    "radius",
    "something",
    "massive",
    "like",
    "250",
    "pixels",
    "give",
    "us",
    "rounded",
    "buttons",
    "pick",
    "background",
    "color",
    "background",
    "color",
    "want",
    "something",
    "blue",
    "already",
    "color",
    "going",
    "use",
    "hover",
    "cursor",
    "one",
    "buttons",
    "would",
    "like",
    "cursor",
    "change",
    "pointer",
    "work",
    "let",
    "also",
    "add",
    "transition",
    "effect",
    "let",
    "change",
    "background",
    "color",
    "e",
    "half",
    "second",
    "let",
    "access",
    "hover",
    "sudo",
    "class",
    "buttons",
    "choices",
    "take",
    "background",
    "color",
    "set",
    "lightness",
    "20",
    "lighter",
    "button",
    "going",
    "light",
    "hover",
    "cursor",
    "button",
    "work",
    "display",
    "displays",
    "next",
    "going",
    "select",
    "player",
    "display",
    "computer",
    "display",
    "ideas",
    "player",
    "display",
    "computer",
    "display",
    "let",
    "set",
    "font",
    "size",
    "rm",
    "result",
    "display",
    "says",
    "tie",
    "id",
    "result",
    "display",
    "set",
    "font",
    "size",
    "5",
    "r",
    "add",
    "margin",
    "top",
    "bottom",
    "30",
    "pixels",
    "top",
    "bottom",
    "zero",
    "sides",
    "okay",
    "good",
    "enough",
    "longer",
    "need",
    "placeholder",
    "result",
    "display",
    "let",
    "add",
    "functionality",
    "lot",
    "constants",
    "declare",
    "const",
    "choices",
    "choices",
    "array",
    "strings",
    "rock",
    "paper",
    "scissors",
    "need",
    "get",
    "player",
    "display",
    "computer",
    "display",
    "update",
    "const",
    "player",
    "display",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "selecting",
    "player",
    "display",
    "computer",
    "display",
    "computer",
    "display",
    "result",
    "display",
    "one",
    "empty",
    "currently",
    "const",
    "result",
    "display",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "result",
    "display",
    "factor",
    "scoring",
    "later",
    "need",
    "function",
    "play",
    "game",
    "accepts",
    "one",
    "argument",
    "player",
    "choice",
    "function",
    "play",
    "game",
    "one",
    "parameter",
    "player",
    "choice",
    "play",
    "new",
    "game",
    "pick",
    "choice",
    "computer",
    "rock",
    "paper",
    "scissors",
    "could",
    "generate",
    "random",
    "number",
    "zero",
    "two",
    "rock",
    "index",
    "zero",
    "paper",
    "index",
    "one",
    "scissors",
    "index",
    "2",
    "create",
    "constant",
    "within",
    "play",
    "game",
    "computer",
    "choice",
    "declaring",
    "within",
    "function",
    "update",
    "every",
    "time",
    "play",
    "new",
    "game",
    "equals",
    "take",
    "array",
    "choices",
    "index",
    "index",
    "generate",
    "random",
    "number",
    "using",
    "random",
    "method",
    "math",
    "math",
    "random",
    "method",
    "3",
    "need",
    "round",
    "going",
    "whole",
    "number",
    "math",
    "floor",
    "round",
    "computer",
    "choice",
    "random",
    "index",
    "0",
    "two",
    "give",
    "us",
    "randomly",
    "either",
    "rock",
    "paper",
    "scissors",
    "hey",
    "bro",
    "future",
    "one",
    "thing",
    "would",
    "good",
    "us",
    "along",
    "way",
    "use",
    "sure",
    "writing",
    "working",
    "within",
    "computer",
    "choice",
    "let",
    "whatever",
    "work",
    "clicking",
    "one",
    "buttons",
    "computer",
    "either",
    "going",
    "pick",
    "rock",
    "paper",
    "scissors",
    "computer",
    "picked",
    "scissors",
    "scissors",
    "scissors",
    "really",
    "like",
    "scissors",
    "apparently",
    "yeah",
    "player",
    "choice",
    "populated",
    "string",
    "rock",
    "paper",
    "scissors",
    "wanted",
    "confirm",
    "need",
    "result",
    "going",
    "display",
    "screen",
    "result",
    "empty",
    "string",
    "first",
    "let",
    "check",
    "see",
    "player",
    "choice",
    "equal",
    "computer",
    "choice",
    "means",
    "tie",
    "player",
    "choice",
    "strictly",
    "equal",
    "computer",
    "choice",
    "maybe",
    "pick",
    "rock",
    "well",
    "well",
    "take",
    "result",
    "displayed",
    "set",
    "equal",
    "tie",
    "else",
    "somebody",
    "going",
    "win",
    "let",
    "add",
    "else",
    "statement",
    "use",
    "switch",
    "examine",
    "value",
    "matching",
    "cases",
    "examine",
    "player",
    "choice",
    "player",
    "choice",
    "match",
    "case",
    "rock",
    "two",
    "val",
    "use",
    "match",
    "use",
    "tary",
    "operator",
    "check",
    "condition",
    "computer",
    "choice",
    "strictly",
    "equal",
    "scissors",
    "question",
    "mark",
    "tary",
    "operator",
    "pick",
    "rock",
    "computer",
    "picks",
    "scissors",
    "return",
    "u",
    "win",
    "otherwise",
    "condition",
    "false",
    "well",
    "means",
    "computer",
    "picked",
    "paper",
    "choices",
    "already",
    "match",
    "picked",
    "rock",
    "means",
    "either",
    "picked",
    "scissors",
    "paper",
    "pick",
    "scissors",
    "means",
    "picked",
    "paper",
    "win",
    "means",
    "lose",
    "lose",
    "whatever",
    "string",
    "returned",
    "going",
    "assign",
    "result",
    "result",
    "equals",
    "whatever",
    "returned",
    "either",
    "win",
    "lose",
    "add",
    "break",
    "case",
    "right",
    "let",
    "copy",
    "case",
    "everything",
    "within",
    "let",
    "paste",
    "player",
    "choice",
    "matches",
    "case",
    "paper",
    "computer",
    "choice",
    "strictly",
    "equal",
    "rock",
    "means",
    "true",
    "win",
    "else",
    "lose",
    "let",
    "copy",
    "case",
    "everything",
    "within",
    "case",
    "scissors",
    "computer",
    "choice",
    "equals",
    "paper",
    "win",
    "otherwise",
    "lose",
    "move",
    "beyond",
    "ifl",
    "statements",
    "need",
    "update",
    "text",
    "screen",
    "take",
    "players",
    "display",
    "set",
    "text",
    "content",
    "equal",
    "template",
    "string",
    "player",
    "col",
    "space",
    "add",
    "placeholder",
    "player",
    "choice",
    "pick",
    "rock",
    "paper",
    "scissors",
    "let",
    "computer",
    "choice",
    "select",
    "text",
    "content",
    "computer",
    "display",
    "text",
    "computer",
    "display",
    "variable",
    "computer",
    "choice",
    "one",
    "picked",
    "randomly",
    "take",
    "result",
    "display",
    "text",
    "content",
    "currently",
    "set",
    "equal",
    "result",
    "okay",
    "let",
    "see",
    "currently",
    "let",
    "pick",
    "rock",
    "tie",
    "paper",
    "win",
    "scissors",
    "lose",
    "work",
    "next",
    "depending",
    "result",
    "displayed",
    "win",
    "would",
    "like",
    "text",
    "green",
    "lose",
    "want",
    "text",
    "red",
    "going",
    "css",
    "stylesheet",
    "going",
    "add",
    "three",
    "classes",
    "green",
    "text",
    "red",
    "text",
    "pick",
    "font",
    "color",
    "pick",
    "something",
    "green",
    "red",
    "text",
    "pick",
    "red",
    "font",
    "color",
    "win",
    "lose",
    "going",
    "add",
    "one",
    "classes",
    "class",
    "list",
    "result",
    "display",
    "going",
    "back",
    "javascript",
    "file",
    "display",
    "result",
    "going",
    "add",
    "switch",
    "going",
    "examine",
    "result",
    "add",
    "case",
    "win",
    "value",
    "matches",
    "case",
    "let",
    "take",
    "result",
    "display",
    "access",
    "class",
    "list",
    "use",
    "add",
    "method",
    "add",
    "class",
    "green",
    "text",
    "break",
    "let",
    "copy",
    "case",
    "paste",
    "add",
    "case",
    "lose",
    "add",
    "class",
    "red",
    "text",
    "lose",
    "let",
    "see",
    "currently",
    "win",
    "get",
    "green",
    "text",
    "lose",
    "get",
    "red",
    "text",
    "tie",
    "red",
    "text",
    "new",
    "game",
    "reset",
    "color",
    "back",
    "original",
    "updating",
    "color",
    "displaying",
    "let",
    "take",
    "result",
    "display",
    "access",
    "class",
    "list",
    "use",
    "remove",
    "method",
    "remove",
    "class",
    "green",
    "text",
    "red",
    "text",
    "let",
    "see",
    "works",
    "lose",
    "tie",
    "black",
    "lose",
    "win",
    "colors",
    "seem",
    "working",
    "right",
    "let",
    "add",
    "scoring",
    "mechanism",
    "head",
    "back",
    "html",
    "file",
    "result",
    "display",
    "going",
    "create",
    "div",
    "element",
    "first",
    "div",
    "el",
    "class",
    "score",
    "display",
    "text",
    "score",
    "display",
    "player",
    "score",
    "colon",
    "space",
    "add",
    "span",
    "element",
    "within",
    "text",
    "zero",
    "row",
    "give",
    "span",
    "element",
    "unique",
    "id",
    "player",
    "score",
    "display",
    "reason",
    "putting",
    "number",
    "within",
    "span",
    "element",
    "going",
    "style",
    "number",
    "different",
    "rest",
    "div",
    "element",
    "player",
    "score",
    "okay",
    "let",
    "copy",
    "div",
    "element",
    "paste",
    "need",
    "another",
    "computer",
    "computer",
    "score",
    "id",
    "span",
    "element",
    "computer",
    "score",
    "display",
    "going",
    "back",
    "c",
    "stylesheet",
    "add",
    "following",
    "result",
    "display",
    "select",
    "class",
    "score",
    "display",
    "increase",
    "font",
    "size",
    "font",
    "size",
    "2",
    "r",
    "actual",
    "numbers",
    "going",
    "change",
    "color",
    "css",
    "property",
    "font",
    "color",
    "green",
    "add",
    "additional",
    "selector",
    "let",
    "select",
    "id",
    "player",
    "score",
    "display",
    "would",
    "also",
    "like",
    "shade",
    "green",
    "red",
    "text",
    "let",
    "select",
    "id",
    "computer",
    "score",
    "display",
    "computer",
    "score",
    "number",
    "red",
    "okay",
    "need",
    "add",
    "functionality",
    "scoring",
    "mechanism",
    "back",
    "top",
    "going",
    "select",
    "id",
    "player",
    "score",
    "display",
    "const",
    "player",
    "score",
    "display",
    "equals",
    "doc",
    "min",
    "getet",
    "element",
    "id",
    "player",
    "score",
    "display",
    "need",
    "thing",
    "computer",
    "computer",
    "score",
    "display",
    "need",
    "score",
    "value",
    "number",
    "work",
    "let",
    "player",
    "score",
    "equals",
    "zero",
    "let",
    "computer",
    "score",
    "equals",
    "z",
    "going",
    "bottom",
    "function",
    "within",
    "switch",
    "within",
    "case",
    "win",
    "going",
    "increment",
    "player",
    "score",
    "player",
    "score",
    "take",
    "player",
    "score",
    "display",
    "update",
    "access",
    "text",
    "content",
    "set",
    "equal",
    "whatever",
    "player",
    "score",
    "let",
    "computer",
    "computer",
    "score",
    "lose",
    "computer",
    "score",
    "display",
    "equals",
    "computer",
    "score",
    "everything",
    "let",
    "see",
    "program",
    "works",
    "lose",
    "win",
    "win",
    "tie",
    "win",
    "win",
    "lose",
    "player",
    "score",
    "four",
    "computer",
    "score",
    "two",
    "right",
    "everybody",
    "game",
    "rock",
    "paper",
    "scissors",
    "make",
    "using",
    "javascript",
    "hey",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "show",
    "create",
    "image",
    "slider",
    "program",
    "using",
    "javascript",
    "need",
    "images",
    "work",
    "would",
    "recommend",
    "finding",
    "three",
    "somewhat",
    "related",
    "images",
    "whatever",
    "would",
    "like",
    "create",
    "image",
    "slider",
    "find",
    "images",
    "put",
    "within",
    "website",
    "folder",
    "ready",
    "begin",
    "okay",
    "let",
    "thing",
    "everybody",
    "create",
    "development",
    "contain",
    "everything",
    "development",
    "class",
    "slider",
    "within",
    "development",
    "create",
    "another",
    "development",
    "development",
    "class",
    "slides",
    "contain",
    "images",
    "within",
    "inner",
    "div",
    "element",
    "create",
    "three",
    "image",
    "elements",
    "first",
    "image",
    "class",
    "slide",
    "image",
    "element",
    "set",
    "source",
    "attribute",
    "relative",
    "absolute",
    "file",
    "path",
    "let",
    "begin",
    "image",
    "one",
    "whatever",
    "currently",
    "copy",
    "name",
    "image",
    "including",
    "extension",
    "image",
    "name",
    "image",
    "reason",
    "image",
    "ca",
    "display",
    "add",
    "alternative",
    "text",
    "alt",
    "attribute",
    "let",
    "say",
    "image",
    "number",
    "one",
    "image",
    "copy",
    "image",
    "element",
    "paste",
    "twice",
    "every",
    "image",
    "image",
    "two",
    "image",
    "three",
    "let",
    "change",
    "image",
    "two",
    "image",
    "three",
    "three",
    "images",
    "depending",
    "pictures",
    "using",
    "many",
    "going",
    "add",
    "arrow",
    "buttons",
    "time",
    "bottom",
    "create",
    "button",
    "element",
    "could",
    "use",
    "left",
    "angle",
    "bracket",
    "let",
    "zoom",
    "think",
    "better",
    "option",
    "unic",
    "code",
    "character",
    "left",
    "pointing",
    "angle",
    "bracket",
    "looks",
    "like",
    "use",
    "unicode",
    "character",
    "ampersand",
    "100094",
    "think",
    "looks",
    "better",
    "right",
    "let",
    "create",
    "right",
    "angle",
    "bracket",
    "another",
    "button",
    "number",
    "1",
    "95",
    "create",
    "button",
    "arrow",
    "points",
    "right",
    "previous",
    "button",
    "left",
    "one",
    "assign",
    "class",
    "prev",
    "meaning",
    "previous",
    "next",
    "button",
    "class",
    "next",
    "click",
    "buttons",
    "call",
    "javascript",
    "function",
    "need",
    "set",
    "onclick",
    "vent",
    "handler",
    "equal",
    "javascript",
    "function",
    "previous",
    "button",
    "call",
    "function",
    "prev",
    "slide",
    "meaning",
    "previous",
    "next",
    "button",
    "call",
    "function",
    "next",
    "slide",
    "go",
    "next",
    "slide",
    "okay",
    "html",
    "need",
    "let",
    "go",
    "css",
    "stylesheet",
    "select",
    "class",
    "slider",
    "contains",
    "everything",
    "class",
    "slider",
    "going",
    "use",
    "relative",
    "positioning",
    "elements",
    "move",
    "relative",
    "normal",
    "position",
    "using",
    "relative",
    "position",
    "relative",
    "set",
    "width",
    "100",
    "well",
    "margin",
    "auto",
    "center",
    "everything",
    "horizontally",
    "case",
    "images",
    "really",
    "big",
    "set",
    "overflow",
    "property",
    "hidden",
    "take",
    "class",
    "slider",
    "select",
    "images",
    "images",
    "set",
    "width",
    "100",
    "set",
    "display",
    "property",
    "none",
    "want",
    "display",
    "images",
    "right",
    "away",
    "disappear",
    "let",
    "add",
    "little",
    "bit",
    "functionality",
    "continuing",
    "let",
    "go",
    "javascript",
    "file",
    "going",
    "create",
    "node",
    "list",
    "images",
    "within",
    "class",
    "slides",
    "create",
    "constant",
    "slides",
    "node",
    "list",
    "equals",
    "document",
    "query",
    "selector",
    "select",
    "elements",
    "within",
    "class",
    "slides",
    "images",
    "image",
    "elements",
    "also",
    "declare",
    "index",
    "current",
    "slide",
    "let",
    "slide",
    "index",
    "zero",
    "initially",
    "start",
    "first",
    "slide",
    "using",
    "set",
    "interval",
    "function",
    "set",
    "interval",
    "return",
    "id",
    "work",
    "declare",
    "variable",
    "hold",
    "let",
    "interval",
    "id",
    "set",
    "null",
    "meaning",
    "value",
    "okay",
    "let",
    "declare",
    "functions",
    "function",
    "initialize",
    "slider",
    "populate",
    "web",
    "browser",
    "first",
    "image",
    "call",
    "function",
    "need",
    "function",
    "show",
    "slide",
    "one",
    "parameter",
    "index",
    "index",
    "next",
    "slide",
    "would",
    "like",
    "go",
    "function",
    "previous",
    "slide",
    "prev",
    "slide",
    "function",
    "next",
    "slide",
    "function",
    "next",
    "slide",
    "within",
    "function",
    "initialized",
    "slider",
    "take",
    "node",
    "list",
    "slides",
    "index",
    "current",
    "slide",
    "index",
    "zero",
    "initially",
    "access",
    "class",
    "list",
    "add",
    "class",
    "display",
    "slide",
    "still",
    "need",
    "work",
    "call",
    "function",
    "right",
    "away",
    "okay",
    "need",
    "build",
    "class",
    "still",
    "display",
    "slide",
    "select",
    "image",
    "elements",
    "class",
    "within",
    "class",
    "list",
    "display",
    "slide",
    "image",
    "class",
    "set",
    "display",
    "property",
    "display",
    "block",
    "get",
    "first",
    "image",
    "would",
    "like",
    "although",
    "necessary",
    "could",
    "display",
    "image",
    "dom",
    "content",
    "loads",
    "using",
    "event",
    "listener",
    "would",
    "prefer",
    "wait",
    "dom",
    "content",
    "load",
    "take",
    "document",
    "add",
    "event",
    "listener",
    "wait",
    "event",
    "dom",
    "content",
    "loaded",
    "dom",
    "content",
    "loads",
    "pass",
    "call",
    "back",
    "initialize",
    "slider",
    "would",
    "work",
    "would",
    "say",
    "preferred",
    "way",
    "rather",
    "calling",
    "function",
    "initially",
    "wait",
    "dom",
    "content",
    "load",
    "display",
    "first",
    "image",
    "calling",
    "function",
    "within",
    "initialized",
    "slider",
    "function",
    "use",
    "set",
    "interval",
    "function",
    "call",
    "next",
    "slide",
    "function",
    "given",
    "amount",
    "seconds",
    "let",
    "say",
    "5",
    "seconds",
    "would",
    "like",
    "go",
    "next",
    "slide",
    "display",
    "next",
    "image",
    "whatever",
    "next",
    "within",
    "node",
    "list",
    "order",
    "us",
    "work",
    "interval",
    "function",
    "going",
    "return",
    "interval",
    "id",
    "clear",
    "later",
    "need",
    "take",
    "interval",
    "id",
    "set",
    "equal",
    "set",
    "interval",
    "function",
    "going",
    "interval",
    "id",
    "see",
    "let",
    "save",
    "run",
    "everything",
    "go",
    "console",
    "interval",
    "id",
    "one",
    "need",
    "clear",
    "set",
    "interval",
    "function",
    "access",
    "id",
    "currently",
    "one",
    "get",
    "rid",
    "line",
    "avoid",
    "displaying",
    "image",
    "one",
    "wrap",
    "two",
    "lines",
    "code",
    "within",
    "statement",
    "check",
    "node",
    "list",
    "slides",
    "length",
    "property",
    "greater",
    "zero",
    "slides",
    "display",
    "use",
    "set",
    "interval",
    "function",
    "slides",
    "images",
    "okay",
    "going",
    "go",
    "next",
    "slide",
    "function",
    "going",
    "increment",
    "slide",
    "index",
    "one",
    "slide",
    "index",
    "call",
    "show",
    "slide",
    "function",
    "pass",
    "slide",
    "index",
    "incrementing",
    "need",
    "next",
    "slide",
    "show",
    "slide",
    "function",
    "within",
    "show",
    "slide",
    "function",
    "access",
    "node",
    "list",
    "slides",
    "use",
    "method",
    "iterate",
    "would",
    "like",
    "take",
    "slide",
    "arrow",
    "take",
    "slide",
    "access",
    "class",
    "list",
    "remove",
    "class",
    "class",
    "list",
    "remove",
    "class",
    "display",
    "slide",
    "time",
    "move",
    "next",
    "slide",
    "want",
    "display",
    "current",
    "slide",
    "anymore",
    "remove",
    "display",
    "slide",
    "longer",
    "displaying",
    "block",
    "remove",
    "properties",
    "outside",
    "method",
    "add",
    "display",
    "slide",
    "next",
    "slide",
    "take",
    "slides",
    "index",
    "slide",
    "index",
    "access",
    "class",
    "list",
    "next",
    "slide",
    "add",
    "new",
    "class",
    "add",
    "class",
    "display",
    "slide",
    "displays",
    "block",
    "let",
    "see",
    "works",
    "5",
    "seconds",
    "move",
    "next",
    "slide",
    "fact",
    "work",
    "let",
    "wait",
    "next",
    "slide",
    "worked",
    "need",
    "reset",
    "slide",
    "index",
    "right",
    "going",
    "bounds",
    "three",
    "slides",
    "example",
    "within",
    "show",
    "slide",
    "function",
    "add",
    "statement",
    "lse",
    "statement",
    "reach",
    "end",
    "slides",
    "need",
    "reset",
    "slide",
    "index",
    "set",
    "back",
    "zero",
    "index",
    "passed",
    "greater",
    "equal",
    "node",
    "list",
    "slides",
    "length",
    "property",
    "reach",
    "end",
    "need",
    "take",
    "slide",
    "index",
    "reset",
    "zero",
    "go",
    "backwards",
    "previous",
    "button",
    "index",
    "less",
    "zero",
    "take",
    "slide",
    "index",
    "set",
    "equal",
    "slides",
    "length",
    "property",
    "minus",
    "one",
    "set",
    "end",
    "first",
    "slide",
    "hit",
    "previous",
    "button",
    "bring",
    "us",
    "last",
    "slide",
    "images",
    "loop",
    "let",
    "see",
    "see",
    "work",
    "green",
    "car",
    "go",
    "blue",
    "car",
    "next",
    "work",
    "initialized",
    "slider",
    "function",
    "done",
    "click",
    "next",
    "button",
    "able",
    "go",
    "next",
    "slide",
    "right",
    "away",
    "work",
    "previous",
    "button",
    "add",
    "functionality",
    "within",
    "previous",
    "slide",
    "function",
    "take",
    "slide",
    "index",
    "decrement",
    "minus",
    "minus",
    "call",
    "show",
    "slide",
    "function",
    "pass",
    "current",
    "index",
    "able",
    "move",
    "forward",
    "back",
    "hit",
    "previous",
    "button",
    "cu",
    "want",
    "look",
    "image",
    "timer",
    "still",
    "going",
    "still",
    "go",
    "next",
    "slide",
    "would",
    "like",
    "take",
    "time",
    "admire",
    "one",
    "images",
    "clear",
    "set",
    "interval",
    "function",
    "using",
    "interval",
    "id",
    "somebody",
    "hit",
    "previous",
    "button",
    "let",
    "clear",
    "timer",
    "use",
    "clear",
    "interval",
    "function",
    "pass",
    "interval",
    "id",
    "set",
    "interval",
    "function",
    "still",
    "going",
    "move",
    "slides",
    "forward",
    "hit",
    "previous",
    "button",
    "interval",
    "going",
    "stop",
    "done",
    "javascript",
    "functionality",
    "going",
    "apply",
    "css",
    "styling",
    "buttons",
    "even",
    "add",
    "transition",
    "animation",
    "next",
    "image",
    "style",
    "buttons",
    "next",
    "within",
    "class",
    "slider",
    "select",
    "buttons",
    "set",
    "position",
    "property",
    "absolute",
    "positions",
    "element",
    "relative",
    "parent",
    "meaning",
    "slider",
    "element",
    "absolute",
    "positioning",
    "set",
    "top",
    "property",
    "50",
    "buttons",
    "positioned",
    "ais",
    "50",
    "meaning",
    "middle",
    "use",
    "transform",
    "property",
    "translate",
    "ais",
    "minus",
    "translate",
    "function",
    "moving",
    "buttons",
    "50",
    "element",
    "height",
    "put",
    "button",
    "right",
    "middle",
    "take",
    "50",
    "height",
    "button",
    "move",
    "amount",
    "increase",
    "font",
    "size",
    "font",
    "size",
    "25",
    "pixels",
    "better",
    "yet",
    "let",
    "like",
    "2",
    "rm",
    "okay",
    "background",
    "color",
    "set",
    "black",
    "going",
    "lower",
    "alpha",
    "transparent",
    "set",
    "alpha",
    "50",
    "font",
    "color",
    "color",
    "set",
    "white",
    "okay",
    "see",
    "two",
    "buttons",
    "overlapping",
    "currently",
    "going",
    "remove",
    "border",
    "around",
    "buttons",
    "order",
    "none",
    "change",
    "cursor",
    "pointer",
    "hover",
    "one",
    "buttons",
    "buttons",
    "class",
    "previous",
    "next",
    "let",
    "select",
    "previous",
    "class",
    "set",
    "left",
    "property",
    "zero",
    "left",
    "align",
    "next",
    "class",
    "next",
    "button",
    "set",
    "right",
    "property",
    "zero",
    "align",
    "right",
    "also",
    "going",
    "add",
    "little",
    "bit",
    "padding",
    "around",
    "buttons",
    "let",
    "add",
    "padding",
    "padding",
    "10",
    "pixels",
    "15",
    "pixels",
    "looks",
    "pretty",
    "good",
    "going",
    "add",
    "animation",
    "key",
    "frames",
    "need",
    "animation",
    "name",
    "name",
    "animation",
    "fade",
    "fade",
    "effect",
    "property",
    "opacity",
    "ca",
    "spell",
    "today",
    "meaning",
    "50",
    "two",
    "property",
    "opacity",
    "one",
    "100",
    "new",
    "image",
    "displayed",
    "opacity",
    "going",
    "50",
    "transparent",
    "animation",
    "complete",
    "set",
    "one",
    "100",
    "utilize",
    "animation",
    "fade",
    "images",
    "display",
    "slide",
    "class",
    "set",
    "animation",
    "name",
    "image",
    "displayed",
    "fade",
    "long",
    "want",
    "animation",
    "take",
    "set",
    "animation",
    "duration",
    "seconds",
    "okay",
    "let",
    "see",
    "works",
    "get",
    "fade",
    "animation",
    "new",
    "slide",
    "appears",
    "move",
    "forward",
    "move",
    "back",
    "right",
    "everybody",
    "image",
    "slider",
    "create",
    "using",
    "javascript",
    "html",
    "css",
    "hey",
    "everybody",
    "today",
    "video",
    "got",
    "introduce",
    "wonderful",
    "world",
    "callback",
    "hell",
    "callback",
    "hell",
    "situation",
    "javascript",
    "callbacks",
    "nested",
    "within",
    "callbacks",
    "degree",
    "code",
    "difficult",
    "read",
    "nest",
    "many",
    "callbacks",
    "within",
    "callbacks",
    "code",
    "starts",
    "form",
    "pyramid",
    "really",
    "difficult",
    "work",
    "callback",
    "hell",
    "old",
    "pattern",
    "handle",
    "asynchronous",
    "functions",
    "java",
    "script",
    "nowadays",
    "promises",
    "well",
    "sync",
    "wait",
    "avoid",
    "callback",
    "hell",
    "discuss",
    "pretty",
    "soon",
    "help",
    "us",
    "avoid",
    "callback",
    "hell",
    "familiar",
    "going",
    "create",
    "four",
    "tasks",
    "functions",
    "function",
    "task",
    "one",
    "synchronous",
    "functions",
    "need",
    "use",
    "callbacks",
    "synchronous",
    "functions",
    "change",
    "asyrus",
    "functions",
    "within",
    "task",
    "one",
    "task",
    "one",
    "complete",
    "okay",
    "let",
    "copy",
    "task",
    "one",
    "paste",
    "three",
    "times",
    "total",
    "four",
    "tasks",
    "task",
    "two",
    "task",
    "three",
    "task",
    "four",
    "order",
    "top",
    "execute",
    "task",
    "one",
    "followed",
    "task",
    "two",
    "task",
    "three",
    "task",
    "four",
    "four",
    "tasks",
    "complete",
    "tasks",
    "complete",
    "functions",
    "work",
    "synchronously",
    "order",
    "task",
    "one",
    "complete",
    "two",
    "3",
    "four",
    "get",
    "final",
    "message",
    "tasks",
    "complete",
    "asynchronous",
    "functions",
    "going",
    "follow",
    "order",
    "top",
    "make",
    "functions",
    "asynchronous",
    "one",
    "thing",
    "could",
    "enclose",
    "code",
    "within",
    "set",
    "timeout",
    "function",
    "set",
    "timeout",
    "set",
    "timeout",
    "takes",
    "two",
    "arguments",
    "call",
    "back",
    "time",
    "milliseconds",
    "complete",
    "code",
    "call",
    "back",
    "could",
    "call",
    "back",
    "anonymous",
    "function",
    "arrow",
    "function",
    "write",
    "arrow",
    "function",
    "parameters",
    "arrow",
    "say",
    "task",
    "complete",
    "milliseconds",
    "let",
    "tasks",
    "task",
    "two",
    "complete",
    "1",
    "second",
    "milliseconds",
    "task",
    "three",
    "complete",
    "milliseconds",
    "task",
    "4",
    "task",
    "4",
    "complete",
    "milliseconds",
    "okay",
    "let",
    "try",
    "need",
    "tasks",
    "completed",
    "order",
    "starting",
    "one",
    "way",
    "four",
    "says",
    "tasks",
    "already",
    "complete",
    "tasks",
    "completed",
    "order",
    "task",
    "2",
    "task",
    "4",
    "task",
    "1",
    "task",
    "three",
    "problem",
    "asynchronous",
    "code",
    "asynchronous",
    "functions",
    "complete",
    "time",
    "rest",
    "program",
    "wait",
    "around",
    "finish",
    "absolutely",
    "need",
    "tasks",
    "complete",
    "order",
    "starting",
    "1",
    "2",
    "3",
    "4",
    "functions",
    "accept",
    "call",
    "back",
    "need",
    "set",
    "parameter",
    "say",
    "task",
    "complete",
    "execute",
    "call",
    "back",
    "next",
    "function",
    "let",
    "rest",
    "tasks",
    "need",
    "tasks",
    "complete",
    "order",
    "starting",
    "one",
    "would",
    "take",
    "one",
    "one",
    "parameter",
    "call",
    "back",
    "pass",
    "call",
    "back",
    "task",
    "two",
    "pass",
    "call",
    "back",
    "anonymous",
    "function",
    "arrow",
    "function",
    "like",
    "arrow",
    "functions",
    "though",
    "parameters",
    "arrow",
    "going",
    "task",
    "one",
    "complete",
    "call",
    "task",
    "two",
    "task",
    "two",
    "also",
    "accepts",
    "call",
    "back",
    "call",
    "back",
    "anonymous",
    "function",
    "arrow",
    "function",
    "arrow",
    "function",
    "parameters",
    "arrow",
    "want",
    "task",
    "two",
    "complete",
    "call",
    "task",
    "three",
    "task",
    "three",
    "also",
    "accepts",
    "call",
    "back",
    "use",
    "arrow",
    "function",
    "parameters",
    "arrow",
    "task",
    "three",
    "complete",
    "guess",
    "going",
    "call",
    "task",
    "four",
    "task",
    "four",
    "task",
    "4",
    "accepts",
    "call",
    "back",
    "parameters",
    "arrow",
    "would",
    "like",
    "tasks",
    "complete",
    "tasks",
    "complete",
    "work",
    "task",
    "one",
    "complete",
    "task",
    "two",
    "complete",
    "task",
    "three",
    "complete",
    "task",
    "4",
    "complete",
    "tasks",
    "complete",
    "done",
    "use",
    "callback",
    "hell",
    "nesting",
    "callbacks",
    "inside",
    "callbacks",
    "lot",
    "tasks",
    "complete",
    "order",
    "become",
    "unman",
    "manageable",
    "hey",
    "bro",
    "future",
    "one",
    "thing",
    "wanted",
    "mention",
    "four",
    "levels",
    "callbacks",
    "unreasonable",
    "add",
    "additional",
    "levels",
    "top",
    "starting",
    "approach",
    "levels",
    "callback",
    "hell",
    "code",
    "become",
    "unmanageable",
    "really",
    "difficult",
    "read",
    "written",
    "video",
    "unreasonable",
    "hopefully",
    "see",
    "come",
    "start",
    "pyramid",
    "pattern",
    "right",
    "everybody",
    "callback",
    "hell",
    "situation",
    "javascript",
    "callbacks",
    "nested",
    "callback",
    "code",
    "difficult",
    "read",
    "old",
    "pattern",
    "handle",
    "asynchronous",
    "functions",
    "upcoming",
    "videos",
    "discussing",
    "promises",
    "well",
    "sync",
    "wait",
    "avoid",
    "callback",
    "hell",
    "well",
    "everybody",
    "callback",
    "hell",
    "avoid",
    "javascript",
    "going",
    "everybody",
    "today",
    "video",
    "got",
    "talk",
    "promises",
    "javascript",
    "promise",
    "object",
    "object",
    "manages",
    "asynchronous",
    "operations",
    "querying",
    "database",
    "space",
    "fetching",
    "file",
    "gathering",
    "resources",
    "could",
    "consider",
    "asynchronous",
    "operations",
    "take",
    "indeterminate",
    "amount",
    "time",
    "wrap",
    "promise",
    "object",
    "around",
    "asynchronous",
    "code",
    "promise",
    "object",
    "promises",
    "return",
    "value",
    "promise",
    "object",
    "pending",
    "either",
    "promise",
    "resolved",
    "task",
    "completed",
    "successfully",
    "rejected",
    "failed",
    "reason",
    "maybe",
    "promise",
    "could",
    "fetch",
    "file",
    "resolved",
    "promise",
    "object",
    "create",
    "new",
    "promise",
    "object",
    "new",
    "prom",
    "pass",
    "function",
    "usually",
    "see",
    "arrow",
    "function",
    "two",
    "parameters",
    "resolve",
    "reject",
    "arrow",
    "asynchronous",
    "code",
    "demonstration",
    "going",
    "chores",
    "live",
    "parents",
    "maybe",
    "mom",
    "asked",
    "chores",
    "roommate",
    "tasks",
    "need",
    "significant",
    "wants",
    "tasks",
    "anyways",
    "chores",
    "walk",
    "dog",
    "clean",
    "kitchen",
    "take",
    "trash",
    "create",
    "functions",
    "chores",
    "first",
    "start",
    "using",
    "callbacks",
    "demonstrate",
    "use",
    "promises",
    "helpful",
    "let",
    "create",
    "function",
    "walk",
    "dog",
    "make",
    "asynchronous",
    "going",
    "add",
    "set",
    "timeout",
    "function",
    "takes",
    "call",
    "back",
    "amount",
    "time",
    "milliseconds",
    "complete",
    "code",
    "let",
    "say",
    "walking",
    "dog",
    "takes",
    "milliseconds",
    "code",
    "would",
    "like",
    "perform",
    "let",
    "write",
    "arrow",
    "function",
    "keep",
    "simple",
    "parameters",
    "arrow",
    "let",
    "completing",
    "chore",
    "walk",
    "dog",
    "okay",
    "first",
    "function",
    "let",
    "create",
    "function",
    "clean",
    "kitchen",
    "function",
    "clean",
    "kitchen",
    "take",
    "long",
    "time",
    "milliseconds",
    "let",
    "say",
    "complete",
    "task",
    "print",
    "clean",
    "kitchen",
    "third",
    "function",
    "take",
    "trash",
    "take",
    "trash",
    "taking",
    "trash",
    "really",
    "quick",
    "takes",
    "half",
    "second",
    "500",
    "milliseconds",
    "need",
    "chores",
    "order",
    "would",
    "need",
    "use",
    "callbacks",
    "walking",
    "dog",
    "call",
    "call",
    "back",
    "clean",
    "kitchen",
    "clean",
    "kitchen",
    "take",
    "trash",
    "need",
    "modify",
    "functions",
    "accept",
    "call",
    "backs",
    "code",
    "complete",
    "invoke",
    "call",
    "back",
    "call",
    "callback",
    "let",
    "add",
    "parameter",
    "functions",
    "want",
    "call",
    "functions",
    "order",
    "would",
    "start",
    "using",
    "call",
    "back",
    "hell",
    "learned",
    "last",
    "video",
    "first",
    "would",
    "like",
    "walk",
    "dog",
    "call",
    "function",
    "pass",
    "call",
    "back",
    "use",
    "arrow",
    "function",
    "clean",
    "kitchen",
    "pass",
    "call",
    "back",
    "use",
    "arrow",
    "function",
    "take",
    "trash",
    "pass",
    "call",
    "back",
    "complete",
    "chores",
    "finished",
    "chores",
    "okay",
    "let",
    "see",
    "works",
    "walk",
    "dog",
    "clean",
    "kitchen",
    "take",
    "trash",
    "finished",
    "chores",
    "lot",
    "callbacks",
    "work",
    "end",
    "going",
    "call",
    "back",
    "hell",
    "want",
    "go",
    "call",
    "back",
    "hell",
    "use",
    "instead",
    "promises",
    "asynchronous",
    "code",
    "wrap",
    "within",
    "promise",
    "using",
    "promise",
    "need",
    "callbacks",
    "instead",
    "using",
    "callbacks",
    "use",
    "method",
    "chaining",
    "method",
    "chain",
    "pro",
    "promises",
    "modify",
    "functions",
    "end",
    "function",
    "return",
    "object",
    "return",
    "new",
    "promise",
    "return",
    "new",
    "promise",
    "object",
    "follow",
    "formula",
    "two",
    "parameters",
    "resolve",
    "reject",
    "resolve",
    "reject",
    "arrow",
    "asynchronous",
    "code",
    "within",
    "arrow",
    "function",
    "take",
    "asynchronous",
    "code",
    "cut",
    "place",
    "within",
    "promise",
    "promise",
    "promises",
    "return",
    "value",
    "either",
    "going",
    "resolved",
    "rejected",
    "going",
    "modify",
    "function",
    "need",
    "work",
    "call",
    "backs",
    "anymore",
    "get",
    "rid",
    "get",
    "rid",
    "parameter",
    "portion",
    "code",
    "call",
    "call",
    "back",
    "would",
    "like",
    "display",
    "message",
    "promise",
    "resolves",
    "finishes",
    "successfully",
    "instead",
    "call",
    "resolve",
    "parameter",
    "function",
    "message",
    "value",
    "argument",
    "passing",
    "finish",
    "walking",
    "dog",
    "completion",
    "message",
    "promise",
    "resolves",
    "let",
    "modify",
    "rest",
    "functions",
    "use",
    "promises",
    "return",
    "new",
    "promise",
    "two",
    "parameters",
    "resolve",
    "reject",
    "arrow",
    "asynchronous",
    "code",
    "let",
    "cut",
    "current",
    "asynchronous",
    "code",
    "paste",
    "remove",
    "call",
    "back",
    "parameter",
    "need",
    "anymore",
    "need",
    "call",
    "call",
    "back",
    "promise",
    "resolves",
    "pass",
    "along",
    "message",
    "clean",
    "kitchen",
    "let",
    "take",
    "trash",
    "return",
    "new",
    "promise",
    "two",
    "parameters",
    "resolve",
    "reject",
    "arrow",
    "cut",
    "asynchronous",
    "code",
    "paste",
    "within",
    "promise",
    "remove",
    "call",
    "back",
    "call",
    "call",
    "back",
    "resolve",
    "promise",
    "pass",
    "along",
    "message",
    "longer",
    "need",
    "use",
    "callback",
    "hell",
    "instead",
    "going",
    "use",
    "method",
    "chaining",
    "first",
    "going",
    "walk",
    "dog",
    "clean",
    "kitchen",
    "take",
    "trash",
    "order",
    "call",
    "walk",
    "dog",
    "function",
    "going",
    "method",
    "chain",
    "follow",
    "method",
    "walk",
    "dog",
    "saying",
    "walk",
    "dog",
    "function",
    "provide",
    "value",
    "parameter",
    "message",
    "use",
    "message",
    "something",
    "going",
    "stored",
    "within",
    "value",
    "going",
    "parameter",
    "provided",
    "us",
    "take",
    "value",
    "let",
    "print",
    "value",
    "run",
    "program",
    "walking",
    "dog",
    "walk",
    "dog",
    "nothing",
    "else",
    "looks",
    "like",
    "misspelled",
    "resolve",
    "resolves",
    "walking",
    "dog",
    "would",
    "like",
    "clean",
    "kitchen",
    "need",
    "call",
    "function",
    "next",
    "within",
    "arrow",
    "function",
    "write",
    "one",
    "statement",
    "need",
    "enclose",
    "within",
    "set",
    "curly",
    "braces",
    "print",
    "value",
    "function",
    "return",
    "clean",
    "kitchen",
    "call",
    "add",
    "another",
    "method",
    "take",
    "value",
    "provided",
    "clean",
    "kitchen",
    "one",
    "take",
    "value",
    "arrow",
    "value",
    "walk",
    "dog",
    "clean",
    "kitchen",
    "take",
    "trash",
    "end",
    "add",
    "another",
    "statement",
    "method",
    "return",
    "take",
    "trash",
    "invoke",
    "method",
    "take",
    "value",
    "provided",
    "us",
    "resolves",
    "value",
    "code",
    "value",
    "walk",
    "dog",
    "clean",
    "kitchen",
    "take",
    "trash",
    "taking",
    "trash",
    "last",
    "chore",
    "let",
    "add",
    "another",
    "line",
    "code",
    "displaying",
    "take",
    "trash",
    "let",
    "finish",
    "chores",
    "walk",
    "dog",
    "clean",
    "kitchen",
    "take",
    "trash",
    "finished",
    "chores",
    "method",
    "chaining",
    "methods",
    "lot",
    "easier",
    "write",
    "nesting",
    "call",
    "backs",
    "sometimes",
    "asynchronous",
    "functions",
    "depending",
    "task",
    "task",
    "may",
    "fail",
    "let",
    "say",
    "trying",
    "locate",
    "resource",
    "file",
    "ca",
    "locate",
    "file",
    "using",
    "promises",
    "want",
    "resolve",
    "promise",
    "could",
    "locate",
    "file",
    "instead",
    "want",
    "reject",
    "happens",
    "asynchronous",
    "function",
    "fails",
    "something",
    "inside",
    "promise",
    "let",
    "change",
    "functions",
    "around",
    "within",
    "set",
    "timeout",
    "let",
    "create",
    "variable",
    "const",
    "dog",
    "walked",
    "accomplish",
    "true",
    "false",
    "use",
    "statement",
    "dog",
    "walked",
    "resolve",
    "walked",
    "dog",
    "else",
    "reject",
    "pass",
    "different",
    "value",
    "walk",
    "dog",
    "okay",
    "let",
    "functions",
    "let",
    "create",
    "constant",
    "kitchen",
    "cleaned",
    "equals",
    "true",
    "kitchen",
    "cleaned",
    "true",
    "resolve",
    "promise",
    "clean",
    "kitchen",
    "else",
    "let",
    "reject",
    "pass",
    "along",
    "message",
    "clean",
    "kitchen",
    "lastly",
    "take",
    "trash",
    "const",
    "trash",
    "taken",
    "let",
    "set",
    "true",
    "trash",
    "taken",
    "resolve",
    "promise",
    "else",
    "reject",
    "take",
    "trash",
    "promise",
    "might",
    "reject",
    "one",
    "method",
    "need",
    "add",
    "end",
    "chain",
    "need",
    "add",
    "catch",
    "method",
    "catch",
    "errors",
    "catch",
    "rejects",
    "similar",
    "error",
    "handling",
    "provided",
    "one",
    "value",
    "error",
    "arrow",
    "let",
    "even",
    "console",
    "error",
    "message",
    "provided",
    "us",
    "reject",
    "error",
    "going",
    "successfully",
    "walk",
    "dog",
    "true",
    "cleaning",
    "kitchen",
    "true",
    "taking",
    "trash",
    "false",
    "able",
    "complete",
    "chore",
    "results",
    "walk",
    "dog",
    "clean",
    "kitchen",
    "take",
    "trash",
    "dare",
    "keep",
    "completing",
    "tasks",
    "fail",
    "one",
    "walking",
    "dog",
    "false",
    "first",
    "task",
    "first",
    "promise",
    "rejected",
    "even",
    "attempt",
    "resolve",
    "promises",
    "right",
    "everybody",
    "promises",
    "object",
    "manages",
    "asynchronous",
    "operations",
    "wrap",
    "promise",
    "object",
    "around",
    "asynchronous",
    "code",
    "promise",
    "objects",
    "promise",
    "return",
    "value",
    "pending",
    "complete",
    "either",
    "resolved",
    "task",
    "completed",
    "successfully",
    "rejected",
    "failed",
    "reason",
    "well",
    "everybody",
    "promises",
    "javascript",
    "hey",
    "everybody",
    "today",
    "got",
    "talk",
    "sync",
    "weight",
    "javascript",
    "sync",
    "waight",
    "two",
    "keywords",
    "using",
    "two",
    "keywords",
    "together",
    "allow",
    "write",
    "asynchronous",
    "code",
    "synchronous",
    "manner",
    "sync",
    "makes",
    "function",
    "return",
    "promise",
    "wait",
    "makes",
    "async",
    "function",
    "wait",
    "promise",
    "discuss",
    "async",
    "first",
    "sample",
    "program",
    "last",
    "topic",
    "chores",
    "walk",
    "dog",
    "clean",
    "kitchen",
    "take",
    "trash",
    "functions",
    "returns",
    "promise",
    "promise",
    "either",
    "resolve",
    "reject",
    "based",
    "code",
    "written",
    "dog",
    "walked",
    "true",
    "resolve",
    "false",
    "reject",
    "function",
    "declared",
    "sync",
    "function",
    "declared",
    "sync",
    "return",
    "promise",
    "however",
    "promise",
    "returned",
    "resolve",
    "reject",
    "way",
    "could",
    "say",
    "empty",
    "promise",
    "run",
    "code",
    "happens",
    "uncaught",
    "reference",
    "error",
    "resolve",
    "defined",
    "asynchronous",
    "function",
    "returns",
    "promise",
    "either",
    "needs",
    "resolve",
    "reject",
    "adding",
    "sync",
    "really",
    "benefit",
    "us",
    "sync",
    "works",
    "together",
    "weight",
    "using",
    "two",
    "keywords",
    "together",
    "calling",
    "asynchronous",
    "functions",
    "order",
    "need",
    "method",
    "chain",
    "statements",
    "synchronous",
    "manner",
    "write",
    "code",
    "need",
    "contain",
    "within",
    "async",
    "function",
    "async",
    "function",
    "create",
    "function",
    "chores",
    "need",
    "call",
    "function",
    "somewhere",
    "let",
    "right",
    "first",
    "need",
    "walk",
    "dog",
    "walk",
    "dog",
    "returns",
    "promise",
    "await",
    "keyword",
    "comes",
    "wait",
    "makes",
    "async",
    "function",
    "wait",
    "promise",
    "continuing",
    "going",
    "create",
    "constant",
    "walk",
    "dog",
    "result",
    "equals",
    "use",
    "await",
    "keyword",
    "await",
    "walk",
    "dog",
    "walk",
    "dog",
    "result",
    "walk",
    "dog",
    "let",
    "clean",
    "kitchen",
    "going",
    "writing",
    "code",
    "synchronous",
    "manner",
    "line",
    "line",
    "linearly",
    "create",
    "constant",
    "clean",
    "kitchen",
    "result",
    "equals",
    "await",
    "next",
    "promise",
    "await",
    "clean",
    "kitchen",
    "clean",
    "kitchen",
    "result",
    "let",
    "close",
    "walk",
    "dog",
    "clean",
    "kitchen",
    "last",
    "take",
    "trash",
    "const",
    "takeout",
    "trash",
    "result",
    "equals",
    "wait",
    "take",
    "trash",
    "result",
    "walk",
    "dog",
    "clean",
    "kitchen",
    "take",
    "trash",
    "let",
    "add",
    "one",
    "line",
    "finish",
    "everything",
    "one",
    "line",
    "code",
    "finished",
    "chores",
    "walk",
    "dog",
    "clean",
    "kitchen",
    "take",
    "trash",
    "finished",
    "chores",
    "let",
    "show",
    "happens",
    "attempt",
    "use",
    "weight",
    "within",
    "function",
    "declared",
    "sync",
    "uncaught",
    "syntax",
    "error",
    "weight",
    "valid",
    "async",
    "functions",
    "weight",
    "depends",
    "async",
    "weight",
    "makes",
    "async",
    "function",
    "wait",
    "promise",
    "continuing",
    "promises",
    "reject",
    "let",
    "say",
    "dog",
    "walked",
    "false",
    "uncaught",
    "promise",
    "walk",
    "dog",
    "surround",
    "code",
    "within",
    "tri",
    "block",
    "catch",
    "errors",
    "catch",
    "one",
    "parameter",
    "error",
    "console",
    "error",
    "error",
    "walk",
    "dog",
    "right",
    "everybody",
    "sync",
    "wait",
    "sync",
    "makes",
    "function",
    "return",
    "promise",
    "wait",
    "makes",
    "async",
    "function",
    "wait",
    "promise",
    "using",
    "two",
    "keywords",
    "together",
    "write",
    "asynchronous",
    "code",
    "synchronous",
    "manner",
    "well",
    "everybody",
    "sync",
    "wait",
    "javascript",
    "everybody",
    "today",
    "got",
    "talk",
    "json",
    "files",
    "using",
    "javascript",
    "json",
    "means",
    "javascript",
    "object",
    "notation",
    "data",
    "interchange",
    "format",
    "time",
    "used",
    "exchanging",
    "data",
    "server",
    "web",
    "application",
    "different",
    "formats",
    "usually",
    "see",
    "json",
    "file",
    "object",
    "object",
    "made",
    "key",
    "value",
    "pairs",
    "may",
    "see",
    "array",
    "array",
    "values",
    "combination",
    "object",
    "one",
    "values",
    "array",
    "could",
    "array",
    "objects",
    "like",
    "understand",
    "format",
    "create",
    "new",
    "json",
    "file",
    "let",
    "go",
    "website",
    "folder",
    "create",
    "new",
    "file",
    "create",
    "array",
    "names",
    "file",
    "extension",
    "json",
    "begin",
    "writing",
    "array",
    "set",
    "straight",
    "brackets",
    "let",
    "add",
    "names",
    "first",
    "names",
    "spongebob",
    "patrick",
    "squidward",
    "sandy",
    "valid",
    "json",
    "format",
    "let",
    "create",
    "new",
    "json",
    "file",
    "single",
    "person",
    "object",
    "new",
    "file",
    "person",
    "json",
    "time",
    "create",
    "single",
    "object",
    "object",
    "key",
    "value",
    "pairs",
    "name",
    "key",
    "value",
    "spongebob",
    "key",
    "value",
    "pair",
    "going",
    "comma",
    "separated",
    "spongebob",
    "age",
    "key",
    "30",
    "boolean",
    "employed",
    "spongebob",
    "currently",
    "employed",
    "true",
    "also",
    "valid",
    "format",
    "json",
    "file",
    "contains",
    "one",
    "object",
    "object",
    "made",
    "key",
    "value",
    "pairs",
    "objects",
    "even",
    "arrays",
    "one",
    "values",
    "create",
    "array",
    "hobbies",
    "spongebob",
    "like",
    "array",
    "jellyfishing",
    "karate",
    "cooking",
    "let",
    "create",
    "one",
    "json",
    "file",
    "create",
    "json",
    "file",
    "people",
    "array",
    "objects",
    "people",
    "json",
    "going",
    "create",
    "array",
    "objects",
    "within",
    "array",
    "create",
    "one",
    "object",
    "key",
    "value",
    "pairs",
    "object",
    "reuse",
    "spongebob",
    "excluding",
    "array",
    "keep",
    "simple",
    "okay",
    "first",
    "object",
    "let",
    "create",
    "another",
    "object",
    "need",
    "another",
    "set",
    "curly",
    "braces",
    "second",
    "object",
    "name",
    "property",
    "patrick",
    "age",
    "34",
    "employed",
    "false",
    "next",
    "object",
    "squidward",
    "age",
    "50",
    "employed",
    "true",
    "works",
    "crusty",
    "crab",
    "one",
    "last",
    "object",
    "name",
    "sandy",
    "age",
    "27",
    "employed",
    "false",
    "sandy",
    "right",
    "array",
    "objects",
    "object",
    "unique",
    "key",
    "value",
    "pairs",
    "let",
    "close",
    "json",
    "files",
    "hold",
    "json",
    "formats",
    "one",
    "long",
    "string",
    "represent",
    "object",
    "array",
    "using",
    "stringify",
    "method",
    "json",
    "convert",
    "javascript",
    "object",
    "array",
    "json",
    "string",
    "let",
    "copy",
    "names",
    "create",
    "constant",
    "names",
    "equals",
    "array",
    "convert",
    "json",
    "string",
    "const",
    "json",
    "string",
    "equals",
    "access",
    "json",
    "json",
    "object",
    "provided",
    "us",
    "work",
    "json",
    "files",
    "use",
    "stringify",
    "method",
    "pass",
    "array",
    "object",
    "currently",
    "names",
    "stringifying",
    "result",
    "array",
    "strings",
    "work",
    "using",
    "stringify",
    "method",
    "names",
    "given",
    "one",
    "long",
    "string",
    "represent",
    "array",
    "use",
    "object",
    "let",
    "copy",
    "person",
    "create",
    "const",
    "person",
    "object",
    "paste",
    "spongebob",
    "first",
    "let",
    "person",
    "person",
    "object",
    "let",
    "stringify",
    "display",
    "json",
    "string",
    "json",
    "files",
    "work",
    "one",
    "long",
    "string",
    "represents",
    "object",
    "array",
    "let",
    "stringify",
    "people",
    "array",
    "objects",
    "const",
    "people",
    "equals",
    "paste",
    "let",
    "show",
    "happens",
    "people",
    "stringifying",
    "array",
    "objects",
    "object",
    "key",
    "value",
    "pairs",
    "stringify",
    "result",
    "one",
    "extremely",
    "long",
    "string",
    "use",
    "parse",
    "parse",
    "converts",
    "json",
    "string",
    "javascript",
    "object",
    "let",
    "reformat",
    "convert",
    "objects",
    "arrays",
    "string",
    "surround",
    "pair",
    "back",
    "ticks",
    "let",
    "rename",
    "let",
    "say",
    "json",
    "names",
    "json",
    "person",
    "json",
    "people",
    "objects",
    "arrays",
    "json",
    "format",
    "convert",
    "original",
    "form",
    "use",
    "parse",
    "method",
    "json",
    "create",
    "constant",
    "par",
    "data",
    "equals",
    "json",
    "parse",
    "pass",
    "data",
    "json",
    "names",
    "let",
    "let",
    "show",
    "json",
    "names",
    "first",
    "parsing",
    "string",
    "representation",
    "array",
    "parsing",
    "becomes",
    "javascript",
    "array",
    "let",
    "string",
    "representation",
    "object",
    "json",
    "person",
    "normally",
    "looks",
    "like",
    "parsing",
    "javascript",
    "object",
    "json",
    "people",
    "array",
    "objects",
    "parse",
    "result",
    "array",
    "objects",
    "going",
    "show",
    "fetch",
    "json",
    "file",
    "talk",
    "fetch",
    "next",
    "topic",
    "fetch",
    "function",
    "argument",
    "pass",
    "relative",
    "absolute",
    "file",
    "path",
    "url",
    "discuss",
    "next",
    "topic",
    "would",
    "like",
    "get",
    "json",
    "file",
    "let",
    "go",
    "person",
    "list",
    "relative",
    "file",
    "path",
    "files",
    "right",
    "next",
    "need",
    "type",
    "person",
    "json",
    "fetch",
    "returns",
    "promise",
    "follow",
    "method",
    "provided",
    "response",
    "object",
    "take",
    "response",
    "arrow",
    "take",
    "response",
    "object",
    "convert",
    "json",
    "format",
    "using",
    "json",
    "method",
    "let",
    "display",
    "currently",
    "take",
    "value",
    "arrow",
    "value",
    "let",
    "see",
    "yep",
    "spongebob",
    "successfully",
    "fetched",
    "json",
    "file",
    "let",
    "array",
    "names",
    "array",
    "strings",
    "first",
    "names",
    "people",
    "people",
    "json",
    "array",
    "objects",
    "one",
    "object",
    "person",
    "would",
    "like",
    "iterate",
    "objects",
    "let",
    "rename",
    "value",
    "values",
    "use",
    "method",
    "arrays",
    "values",
    "take",
    "value",
    "arrow",
    "value",
    "iterating",
    "printing",
    "object",
    "would",
    "like",
    "specific",
    "properties",
    "like",
    "make",
    "name",
    "follow",
    "value",
    "name",
    "spongebob",
    "patrick",
    "squidward",
    "sandy",
    "age",
    "employed",
    "oh",
    "another",
    "thing",
    "forgetting",
    "sure",
    "add",
    "catch",
    "method",
    "catch",
    "errors",
    "case",
    "ca",
    "fetch",
    "json",
    "file",
    "reason",
    "console",
    "error",
    "error",
    "message",
    "talk",
    "fetch",
    "next",
    "topic",
    "right",
    "everybody",
    "json",
    "files",
    "json",
    "means",
    "javascript",
    "object",
    "notation",
    "data",
    "interchange",
    "format",
    "mostly",
    "used",
    "exchanging",
    "data",
    "server",
    "web",
    "application",
    "json",
    "files",
    "usually",
    "objects",
    "array",
    "combination",
    "convert",
    "json",
    "object",
    "string",
    "use",
    "stringify",
    "method",
    "convert",
    "json",
    "string",
    "object",
    "use",
    "parse",
    "method",
    "fetch",
    "json",
    "file",
    "use",
    "fetch",
    "function",
    "talk",
    "next",
    "get",
    "depth",
    "well",
    "everybody",
    "json",
    "files",
    "using",
    "javascript",
    "well",
    "going",
    "everybody",
    "today",
    "video",
    "going",
    "show",
    "fetch",
    "data",
    "api",
    "using",
    "javascript",
    "end",
    "video",
    "going",
    "create",
    "project",
    "fetch",
    "images",
    "pokémon",
    "depending",
    "pokemon",
    "type",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "right",
    "people",
    "got",
    "talk",
    "fetch",
    "fetch",
    "javascript",
    "function",
    "used",
    "making",
    "http",
    "requests",
    "fetch",
    "resources",
    "including",
    "limited",
    "json",
    "styled",
    "data",
    "images",
    "files",
    "resources",
    "nature",
    "fetch",
    "function",
    "simplifies",
    "asynchronous",
    "data",
    "fetching",
    "used",
    "interacting",
    "apis",
    "retrieve",
    "send",
    "data",
    "asynchronously",
    "web",
    "fetch",
    "two",
    "arguments",
    "url",
    "resource",
    "object",
    "object",
    "options",
    "wo",
    "talking",
    "options",
    "video",
    "advanced",
    "javascript",
    "one",
    "may",
    "see",
    "method",
    "property",
    "default",
    "get",
    "get",
    "resource",
    "use",
    "post",
    "send",
    "data",
    "put",
    "replace",
    "data",
    "delete",
    "delete",
    "data",
    "default",
    "get",
    "need",
    "explicitly",
    "state",
    "focusing",
    "getting",
    "data",
    "url",
    "fetch",
    "something",
    "use",
    "fetch",
    "function",
    "pass",
    "url",
    "thought",
    "could",
    "video",
    "fetch",
    "pokemon",
    "data",
    "pokémon",
    "api",
    "want",
    "follow",
    "along",
    "go",
    "url",
    "would",
    "like",
    "fetch",
    "data",
    "pikachu",
    "everybody",
    "knows",
    "pikachu",
    "data",
    "pikachu",
    "resource",
    "one",
    "gigantic",
    "object",
    "pikachu",
    "name",
    "id",
    "number",
    "type",
    "pikachu",
    "electric",
    "type",
    "stats",
    "attack",
    "power",
    "hp",
    "even",
    "image",
    "sprite",
    "work",
    "later",
    "copy",
    "url",
    "paste",
    "within",
    "fetch",
    "function",
    "pass",
    "string",
    "representation",
    "url",
    "fetch",
    "function",
    "either",
    "going",
    "resolve",
    "reject",
    "add",
    "catch",
    "method",
    "catch",
    "errors",
    "error",
    "arrow",
    "let",
    "console",
    "error",
    "error",
    "promise",
    "resolves",
    "provided",
    "object",
    "response",
    "object",
    "take",
    "response",
    "object",
    "arrow",
    "time",
    "let",
    "response",
    "see",
    "exactly",
    "response",
    "object",
    "body",
    "contains",
    "data",
    "looking",
    "pikachu",
    "response",
    "object",
    "status",
    "code",
    "200",
    "means",
    "okay",
    "may",
    "see",
    "status",
    "code",
    "404",
    "ca",
    "locate",
    "resource",
    "okay",
    "property",
    "fetching",
    "resource",
    "okay",
    "going",
    "true",
    "false",
    "also",
    "url",
    "next",
    "step",
    "convert",
    "readable",
    "format",
    "different",
    "methods",
    "array",
    "buffer",
    "blob",
    "text",
    "json",
    "methods",
    "interested",
    "json",
    "method",
    "example",
    "next",
    "step",
    "take",
    "response",
    "object",
    "convert",
    "json",
    "using",
    "json",
    "method",
    "also",
    "promise",
    "based",
    "promise",
    "resolves",
    "let",
    "follow",
    "method",
    "take",
    "data",
    "json",
    "data",
    "going",
    "returned",
    "us",
    "arrow",
    "let",
    "data",
    "see",
    "fetching",
    "data",
    "pikachu",
    "convert",
    "response",
    "object",
    "json",
    "format",
    "data",
    "pikachu",
    "name",
    "id",
    "pikachu",
    "stats",
    "hp",
    "attack",
    "wait",
    "many",
    "things",
    "json",
    "data",
    "access",
    "one",
    "properties",
    "would",
    "like",
    "pikachu",
    "name",
    "data",
    "name",
    "pikachu",
    "data",
    "dot",
    "weight",
    "much",
    "pikachu",
    "way",
    "60",
    "60",
    "units",
    "something",
    "whatever",
    "unit",
    "measurement",
    "use",
    "anto",
    "pikachu",
    "id",
    "25",
    "near",
    "end",
    "video",
    "going",
    "fetch",
    "sprites",
    "pokémon",
    "reason",
    "try",
    "access",
    "pokemon",
    "exist",
    "filming",
    "video",
    "spongebob",
    "still",
    "pokemon",
    "get",
    "status",
    "code",
    "404",
    "meaning",
    "could",
    "find",
    "resource",
    "spongebob",
    "pokemon",
    "unfortunately",
    "even",
    "ca",
    "locate",
    "resource",
    "promise",
    "still",
    "going",
    "resolve",
    "going",
    "reject",
    "need",
    "check",
    "see",
    "response",
    "okay",
    "let",
    "demonstrate",
    "response",
    "object",
    "response",
    "object",
    "okay",
    "response",
    "okay",
    "status",
    "within",
    "200",
    "range",
    "since",
    "status",
    "404",
    "could",
    "locate",
    "resource",
    "okay",
    "false",
    "going",
    "throw",
    "error",
    "property",
    "okay",
    "false",
    "within",
    "first",
    "method",
    "write",
    "statements",
    "need",
    "set",
    "angle",
    "brackets",
    "continuing",
    "let",
    "check",
    "see",
    "response",
    "access",
    "okay",
    "property",
    "use",
    "logical",
    "operator",
    "response",
    "okay",
    "false",
    "going",
    "throw",
    "new",
    "error",
    "catch",
    "using",
    "catch",
    "method",
    "write",
    "custom",
    "message",
    "let",
    "say",
    "something",
    "like",
    "could",
    "fetch",
    "resource",
    "resource",
    "okay",
    "wo",
    "execute",
    "code",
    "otherwise",
    "return",
    "response",
    "object",
    "json",
    "format",
    "let",
    "try",
    "retrieve",
    "pokemon",
    "data",
    "spongebob",
    "okay",
    "error",
    "caught",
    "error",
    "using",
    "catch",
    "method",
    "error",
    "could",
    "fetch",
    "resource",
    "let",
    "get",
    "data",
    "pikachu",
    "pikachu",
    "id",
    "number",
    "would",
    "prefer",
    "use",
    "sync",
    "weight",
    "let",
    "delete",
    "create",
    "async",
    "function",
    "use",
    "weight",
    "within",
    "declare",
    "function",
    "fetch",
    "data",
    "parameters",
    "create",
    "try",
    "catch",
    "block",
    "try",
    "catch",
    "catch",
    "one",
    "parameter",
    "error",
    "receive",
    "error",
    "let",
    "console",
    "error",
    "error",
    "within",
    "tri",
    "block",
    "create",
    "constant",
    "response",
    "fetch",
    "function",
    "going",
    "return",
    "object",
    "response",
    "object",
    "await",
    "promise",
    "returned",
    "fetch",
    "need",
    "get",
    "url",
    "let",
    "get",
    "data",
    "different",
    "pokémon",
    "another",
    "pokemon",
    "like",
    "tyion",
    "honestly",
    "think",
    "tyion",
    "favorite",
    "pokemon",
    "right",
    "stats",
    "tyion",
    "going",
    "copy",
    "url",
    "pass",
    "fetch",
    "function",
    "string",
    "promise",
    "fetch",
    "resolves",
    "see",
    "response",
    "okay",
    "use",
    "statement",
    "response",
    "object",
    "okay",
    "property",
    "okay",
    "response",
    "okay",
    "ca",
    "locate",
    "resource",
    "throw",
    "new",
    "error",
    "let",
    "say",
    "could",
    "fetch",
    "resource",
    "response",
    "okay",
    "create",
    "constant",
    "data",
    "equals",
    "await",
    "take",
    "response",
    "convert",
    "json",
    "also",
    "returns",
    "promise",
    "using",
    "wait",
    "data",
    "call",
    "fetch",
    "data",
    "function",
    "forgot",
    "call",
    "fetch",
    "data",
    "stats",
    "tyion",
    "name",
    "tyion",
    "id",
    "157",
    "tyion",
    "fire",
    "type",
    "use",
    "sync",
    "weight",
    "fetch",
    "resource",
    "know",
    "going",
    "create",
    "text",
    "box",
    "button",
    "search",
    "pokemon",
    "pull",
    "sprite",
    "pokemon",
    "display",
    "going",
    "html",
    "file",
    "create",
    "input",
    "element",
    "type",
    "attribute",
    "text",
    "text",
    "box",
    "set",
    "id",
    "input",
    "element",
    "pokemon",
    "name",
    "little",
    "small",
    "right",
    "applied",
    "css",
    "add",
    "placeholder",
    "enter",
    "pokemon",
    "name",
    "need",
    "button",
    "create",
    "button",
    "element",
    "text",
    "fetch",
    "pokemon",
    "set",
    "onclick",
    "event",
    "handler",
    "equal",
    "javascript",
    "function",
    "let",
    "call",
    "function",
    "fetch",
    "data",
    "add",
    "break",
    "fetching",
    "pokemon",
    "data",
    "image",
    "work",
    "set",
    "source",
    "currently",
    "empty",
    "string",
    "display",
    "alternative",
    "text",
    "ca",
    "display",
    "image",
    "pokemon",
    "sprite",
    "give",
    "element",
    "id",
    "pokemon",
    "sprite",
    "display",
    "image",
    "currently",
    "access",
    "style",
    "access",
    "display",
    "property",
    "set",
    "none",
    "want",
    "display",
    "set",
    "display",
    "block",
    "let",
    "go",
    "javascript",
    "file",
    "within",
    "tri",
    "block",
    "create",
    "constant",
    "pokemon",
    "name",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "selecting",
    "pokemon",
    "name",
    "access",
    "value",
    "input",
    "element",
    "somebody",
    "types",
    "uppercase",
    "characters",
    "take",
    "value",
    "make",
    "letters",
    "lowercase",
    "method",
    "chain",
    "two",
    "lowercase",
    "method",
    "two",
    "lowercase",
    "method",
    "fetch",
    "function",
    "going",
    "use",
    "template",
    "string",
    "pair",
    "back",
    "ticks",
    "pokémon",
    "name",
    "use",
    "placeholder",
    "pass",
    "pokemon",
    "name",
    "variable",
    "type",
    "pokemon",
    "name",
    "like",
    "bulbasaur",
    "get",
    "data",
    "pokemon",
    "exists",
    "let",
    "go",
    "inspect",
    "console",
    "data",
    "bulbasaur",
    "bulbasaur",
    "id",
    "one",
    "bulbasaur",
    "grass",
    "type",
    "think",
    "poison",
    "type",
    "mistaken",
    "json",
    "data",
    "also",
    "sprites",
    "images",
    "pokemon",
    "going",
    "fetch",
    "front",
    "default",
    "need",
    "anymore",
    "create",
    "constant",
    "pokemon",
    "sprite",
    "get",
    "image",
    "equals",
    "take",
    "data",
    "access",
    "sprites",
    "property",
    "get",
    "front",
    "default",
    "sprite",
    "get",
    "image",
    "element",
    "one",
    "id",
    "pokemon",
    "sprite",
    "const",
    "image",
    "element",
    "equals",
    "document",
    "getet",
    "element",
    "id",
    "id",
    "getting",
    "pokemon",
    "sprite",
    "change",
    "css",
    "element",
    "take",
    "image",
    "element",
    "access",
    "source",
    "attribute",
    "right",
    "currently",
    "empty",
    "source",
    "empty",
    "string",
    "set",
    "source",
    "equal",
    "pokemon",
    "sprite",
    "constant",
    "take",
    "image",
    "element",
    "access",
    "style",
    "attribute",
    "access",
    "display",
    "property",
    "set",
    "equal",
    "block",
    "right",
    "none",
    "type",
    "pokémon",
    "name",
    "like",
    "charizard",
    "fetch",
    "pokémon",
    "get",
    "image",
    "pokémon",
    "little",
    "small",
    "however",
    "sprite",
    "sprites",
    "tend",
    "small",
    "get",
    "meww",
    "whatever",
    "pokemon",
    "think",
    "think",
    "like",
    "thousand",
    "tyion",
    "tyion",
    "right",
    "everybody",
    "fetch",
    "data",
    "api",
    "got",
    "use",
    "fetch",
    "function",
    "used",
    "making",
    "http",
    "requests",
    "fetch",
    "resources",
    "fetch",
    "json",
    "style",
    "data",
    "images",
    "files",
    "fetch",
    "function",
    "simplifies",
    "asynchronous",
    "data",
    "fetching",
    "used",
    "interacting",
    "apis",
    "retrieve",
    "send",
    "data",
    "asynchronously",
    "web",
    "well",
    "everybody",
    "fetch",
    "data",
    "api",
    "using",
    "javascript",
    "hey",
    "everybody",
    "today",
    "video",
    "going",
    "create",
    "weather",
    "app",
    "fetches",
    "data",
    "api",
    "look",
    "get",
    "weather",
    "sounds",
    "good",
    "sit",
    "back",
    "relax",
    "enjoy",
    "show",
    "would",
    "like",
    "follow",
    "along",
    "need",
    "api",
    "key",
    "api",
    "using",
    "need",
    "sign",
    "account",
    "though",
    "free",
    "sign",
    "account",
    "go",
    "sign",
    "currently",
    "registered",
    "create",
    "account",
    "free",
    "signed",
    "need",
    "api",
    "key",
    "go",
    "api",
    "keys",
    "may",
    "take",
    "time",
    "get",
    "api",
    "key",
    "generated",
    "mine",
    "took",
    "15",
    "minutes",
    "get",
    "make",
    "sure",
    "active",
    "need",
    "api",
    "key",
    "20",
    "minutes",
    "topic",
    "hopefully",
    "generated",
    "okay",
    "let",
    "everybody",
    "begin",
    "creating",
    "form",
    "element",
    "form",
    "element",
    "class",
    "weather",
    "form",
    "form",
    "element",
    "going",
    "input",
    "element",
    "button",
    "within",
    "input",
    "element",
    "type",
    "name",
    "city",
    "would",
    "like",
    "retrieve",
    "weather",
    "data",
    "4",
    "type",
    "input",
    "element",
    "going",
    "text",
    "text",
    "class",
    "city",
    "input",
    "user",
    "type",
    "city",
    "add",
    "placeholder",
    "let",
    "zoom",
    "little",
    "see",
    "placeholder",
    "equal",
    "enter",
    "city",
    "need",
    "button",
    "let",
    "create",
    "button",
    "element",
    "text",
    "get",
    "weather",
    "type",
    "button",
    "submit",
    "submit",
    "button",
    "form",
    "retrieving",
    "weather",
    "data",
    "display",
    "weather",
    "data",
    "card",
    "format",
    "like",
    "pokemon",
    "card",
    "create",
    "div",
    "elopement",
    "class",
    "card",
    "applying",
    "css",
    "least",
    "add",
    "placeholder",
    "elements",
    "style",
    "see",
    "changes",
    "time",
    "let",
    "create",
    "h1",
    "element",
    "deleting",
    "elements",
    "later",
    "get",
    "attached",
    "set",
    "class",
    "element",
    "city",
    "display",
    "add",
    "sample",
    "city",
    "let",
    "say",
    "miami",
    "pick",
    "city",
    "choosing",
    "create",
    "paragraph",
    "element",
    "class",
    "temp",
    "display",
    "meaning",
    "temperature",
    "let",
    "say",
    "temperature",
    "fah",
    "pick",
    "something",
    "celsius",
    "windows",
    "add",
    "degree",
    "symbol",
    "hold",
    "alt",
    "type",
    "0176",
    "miami",
    "going",
    "f",
    "create",
    "paragraph",
    "element",
    "humidity",
    "class",
    "equals",
    "humidity",
    "display",
    "text",
    "let",
    "say",
    "humidity",
    "colon",
    "space",
    "percentage",
    "75",
    "need",
    "description",
    "weather",
    "another",
    "paragraph",
    "element",
    "class",
    "equal",
    "description",
    "display",
    "desk",
    "meaning",
    "description",
    "description",
    "let",
    "say",
    "clear",
    "skies",
    "also",
    "display",
    "emoji",
    "depending",
    "weather",
    "class",
    "weather",
    "emoji",
    "use",
    "sun",
    "reason",
    "ca",
    "display",
    "weather",
    "data",
    "ca",
    "locate",
    "city",
    "let",
    "add",
    "following",
    "paragraph",
    "class",
    "element",
    "error",
    "display",
    "add",
    "text",
    "please",
    "enter",
    "city",
    "html",
    "need",
    "going",
    "apply",
    "css",
    "styling",
    "next",
    "let",
    "head",
    "css",
    "stylesheet",
    "going",
    "select",
    "body",
    "document",
    "select",
    "font",
    "family",
    "pick",
    "ariel",
    "backup",
    "serif",
    "change",
    "background",
    "color",
    "body",
    "background",
    "color",
    "pick",
    "color",
    "going",
    "use",
    "hsl",
    "values",
    "set",
    "lightness",
    "95",
    "light",
    "gray",
    "color",
    "set",
    "margin",
    "around",
    "body",
    "zero",
    "use",
    "flexbox",
    "display",
    "element",
    "elements",
    "display",
    "flex",
    "flex",
    "direction",
    "column",
    "arrange",
    "elements",
    "column",
    "align",
    "item",
    "center",
    "horizontally",
    "align",
    "elements",
    "align",
    "item",
    "center",
    "select",
    "class",
    "weather",
    "form",
    "form",
    "input",
    "element",
    "button",
    "add",
    "little",
    "bit",
    "margin",
    "around",
    "entire",
    "form",
    "20",
    "pixels",
    "select",
    "city",
    "input",
    "going",
    "text",
    "box",
    "class",
    "city",
    "input",
    "add",
    "padding",
    "10",
    "pixels",
    "let",
    "zoom",
    "100",
    "increase",
    "font",
    "size",
    "2",
    "rm",
    "set",
    "font",
    "weight",
    "bold",
    "add",
    "border",
    "two",
    "pixel",
    "solid",
    "pick",
    "color",
    "lower",
    "alpha",
    "transparent",
    "30",
    "border",
    "currently",
    "border",
    "radius",
    "around",
    "corners",
    "let",
    "10",
    "pixels",
    "add",
    "margin",
    "10",
    "pixels",
    "separate",
    "element",
    "button",
    "set",
    "width",
    "300",
    "pixels",
    "okay",
    "let",
    "style",
    "button",
    "next",
    "okay",
    "going",
    "select",
    "buttons",
    "attribute",
    "type",
    "equals",
    "submit",
    "going",
    "submit",
    "button",
    "says",
    "get",
    "weather",
    "let",
    "scroll",
    "okay",
    "going",
    "add",
    "padding",
    "around",
    "button",
    "10",
    "pixels",
    "20",
    "pixels",
    "set",
    "font",
    "weight",
    "bold",
    "increase",
    "font",
    "size",
    "r",
    "pick",
    "background",
    "color",
    "button",
    "pick",
    "something",
    "green",
    "use",
    "hsl",
    "values",
    "already",
    "color",
    "let",
    "go",
    "122",
    "39",
    "50",
    "good",
    "shade",
    "green",
    "set",
    "color",
    "white",
    "font",
    "color",
    "remove",
    "border",
    "border",
    "none",
    "border",
    "radius",
    "5",
    "pixels",
    "round",
    "corners",
    "hover",
    "cursor",
    "button",
    "would",
    "like",
    "pointer",
    "work",
    "hover",
    "cursor",
    "button",
    "use",
    "hover",
    "pudo",
    "class",
    "change",
    "background",
    "color",
    "let",
    "take",
    "button",
    "type",
    "attribute",
    "submit",
    "access",
    "hover",
    "sudo",
    "class",
    "take",
    "background",
    "color",
    "make",
    "little",
    "bit",
    "darker",
    "bring",
    "lightness",
    "10",
    "40",
    "fact",
    "work",
    "okay",
    "going",
    "select",
    "card",
    "class",
    "contains",
    "weather",
    "data",
    "select",
    "class",
    "card",
    "background",
    "going",
    "something",
    "little",
    "bit",
    "different",
    "going",
    "use",
    "linear",
    "gradient",
    "instead",
    "selecting",
    "background",
    "color",
    "select",
    "background",
    "use",
    "linear",
    "gradient",
    "function",
    "three",
    "arguments",
    "think",
    "linear",
    "gradient",
    "slow",
    "transition",
    "two",
    "colors",
    "need",
    "angle",
    "degrees",
    "say",
    "color",
    "let",
    "pick",
    "something",
    "blue",
    "orange",
    "going",
    "pick",
    "colors",
    "look",
    "little",
    "bit",
    "better",
    "blue",
    "let",
    "set",
    "hue",
    "210",
    "100",
    "saturation",
    "lightness",
    "75",
    "good",
    "shade",
    "blue",
    "orange",
    "use",
    "another",
    "hsl",
    "value",
    "hue",
    "say",
    "40",
    "saturation",
    "100",
    "lightness",
    "75",
    "hoping",
    "linear",
    "gradient",
    "background",
    "color",
    "looks",
    "kind",
    "like",
    "sunrise",
    "sunset",
    "background",
    "add",
    "padding",
    "50",
    "pixels",
    "add",
    "box",
    "shadow",
    "card",
    "add",
    "vertical",
    "horizontal",
    "offset",
    "two",
    "pixels",
    "blur",
    "effect",
    "radius",
    "5",
    "pixels",
    "pick",
    "color",
    "going",
    "lower",
    "alpha",
    "50",
    "bad",
    "gives",
    "card",
    "3d",
    "pop",
    "effect",
    "set",
    "minimum",
    "width",
    "card",
    "300",
    "pixels",
    "align",
    "everything",
    "within",
    "use",
    "flex",
    "box",
    "like",
    "flex",
    "box",
    "display",
    "flex",
    "flex",
    "direction",
    "column",
    "align",
    "items",
    "center",
    "horizontally",
    "align",
    "items",
    "go",
    "select",
    "h1",
    "elements",
    "going",
    "city",
    "name",
    "select",
    "h1",
    "elements",
    "increase",
    "font",
    "size",
    "rm",
    "remove",
    "margin",
    "top",
    "margin",
    "top",
    "zero",
    "add",
    "margin",
    "bottom",
    "25",
    "pixels",
    "select",
    "paragraphs",
    "going",
    "everything",
    "underneath",
    "city",
    "select",
    "paragraphs",
    "increase",
    "font",
    "size",
    "rm",
    "lot",
    "natural",
    "margin",
    "paragraphs",
    "let",
    "set",
    "margin",
    "zero",
    "see",
    "looks",
    "like",
    "okay",
    "let",
    "add",
    "little",
    "bit",
    "margin",
    "five",
    "pixels",
    "top",
    "bottom",
    "zero",
    "margin",
    "sides",
    "lot",
    "better",
    "select",
    "city",
    "display",
    "temperature",
    "display",
    "going",
    "selecting",
    "two",
    "classes",
    "city",
    "display",
    "comma",
    "temp",
    "display",
    "take",
    "two",
    "classes",
    "apply",
    "following",
    "properties",
    "know",
    "font",
    "size",
    "let",
    "set",
    "rm",
    "honestly",
    "remove",
    "h1",
    "font",
    "weight",
    "set",
    "bold",
    "color",
    "make",
    "color",
    "little",
    "transparent",
    "set",
    "alpha",
    "75",
    "city",
    "temperature",
    "going",
    "transparent",
    "add",
    "margin",
    "bottom",
    "margin",
    "bottom",
    "25",
    "pixels",
    "okay",
    "let",
    "select",
    "humidity",
    "display",
    "class",
    "humidity",
    "display",
    "set",
    "font",
    "weight",
    "bold",
    "add",
    "margin",
    "bottom",
    "25",
    "pixels",
    "select",
    "description",
    "display",
    "shortened",
    "desk",
    "display",
    "font",
    "style",
    "set",
    "italic",
    "font",
    "weight",
    "bold",
    "increase",
    "font",
    "size",
    "2",
    "rm",
    "select",
    "weather",
    "emoji",
    "class",
    "weather",
    "emoji",
    "remove",
    "margin",
    "around",
    "emoji",
    "margin",
    "zero",
    "increase",
    "font",
    "size",
    "emoji",
    "size",
    "rm",
    "kind",
    "big",
    "reason",
    "display",
    "error",
    "display",
    "text",
    "class",
    "error",
    "display",
    "set",
    "font",
    "size",
    "rm",
    "font",
    "weight",
    "bold",
    "set",
    "color",
    "something",
    "transparent",
    "lower",
    "alpha",
    "75",
    "okay",
    "css",
    "need",
    "let",
    "go",
    "back",
    "html",
    "file",
    "delete",
    "everything",
    "within",
    "card",
    "class",
    "wanted",
    "see",
    "would",
    "look",
    "like",
    "elements",
    "populated",
    "card",
    "element",
    "set",
    "style",
    "attribute",
    "take",
    "display",
    "property",
    "set",
    "none",
    "want",
    "display",
    "card",
    "get",
    "weather",
    "data",
    "returned",
    "us",
    "html",
    "done",
    "css",
    "done",
    "ready",
    "add",
    "javascript",
    "functionality",
    "declare",
    "constants",
    "need",
    "const",
    "weather",
    "form",
    "equals",
    "document",
    "dot",
    "since",
    "working",
    "ids",
    "ca",
    "get",
    "element",
    "id",
    "working",
    "classes",
    "use",
    "query",
    "selector",
    "query",
    "selector",
    "going",
    "use",
    "query",
    "selector",
    "return",
    "first",
    "element",
    "class",
    "one",
    "element",
    "class",
    "class",
    "weather",
    "form",
    "store",
    "reference",
    "const",
    "city",
    "input",
    "equals",
    "document",
    "query",
    "selector",
    "selecting",
    "class",
    "city",
    "input",
    "going",
    "text",
    "box",
    "const",
    "card",
    "card",
    "contains",
    "weather",
    "data",
    "document",
    "query",
    "selector",
    "select",
    "class",
    "card",
    "give",
    "first",
    "element",
    "need",
    "api",
    "key",
    "const",
    "api",
    "key",
    "equals",
    "api",
    "key",
    "please",
    "try",
    "use",
    "one",
    "specifically",
    "deactivating",
    "end",
    "video",
    "hopefully",
    "api",
    "key",
    "given",
    "first",
    "take",
    "weather",
    "form",
    "add",
    "event",
    "listener",
    "form",
    "text",
    "element",
    "submit",
    "button",
    "click",
    "button",
    "event",
    "type",
    "going",
    "submit",
    "attempt",
    "submit",
    "form",
    "following",
    "code",
    "one",
    "parameter",
    "event",
    "going",
    "provided",
    "us",
    "arrow",
    "fill",
    "later",
    "declare",
    "functions",
    "need",
    "need",
    "async",
    "function",
    "get",
    "weather",
    "data",
    "one",
    "parameter",
    "city",
    "going",
    "passed",
    "need",
    "function",
    "display",
    "weather",
    "info",
    "one",
    "parameter",
    "data",
    "data",
    "json",
    "like",
    "format",
    "create",
    "function",
    "get",
    "weather",
    "emoji",
    "based",
    "weather",
    "one",
    "parameter",
    "weather",
    "id",
    "create",
    "function",
    "display",
    "screen",
    "errors",
    "function",
    "display",
    "error",
    "one",
    "parameter",
    "message",
    "message",
    "displayed",
    "window",
    "within",
    "event",
    "listener",
    "submit",
    "event",
    "click",
    "button",
    "forms",
    "default",
    "behavior",
    "refresh",
    "page",
    "would",
    "like",
    "prevent",
    "let",
    "take",
    "event",
    "use",
    "prevent",
    "default",
    "method",
    "prevent",
    "default",
    "behavior",
    "form",
    "want",
    "refresh",
    "page",
    "get",
    "city",
    "value",
    "within",
    "text",
    "box",
    "const",
    "city",
    "equals",
    "take",
    "city",
    "input",
    "access",
    "value",
    "store",
    "within",
    "variable",
    "string",
    "use",
    "statement",
    "city",
    "value",
    "within",
    "true",
    "use",
    "within",
    "statement",
    "city",
    "else",
    "call",
    "display",
    "error",
    "function",
    "else",
    "display",
    "error",
    "pass",
    "along",
    "message",
    "please",
    "enter",
    "city",
    "let",
    "fill",
    "display",
    "error",
    "function",
    "want",
    "sure",
    "works",
    "continuing",
    "display",
    "error",
    "function",
    "bottom",
    "provided",
    "message",
    "display",
    "create",
    "constant",
    "error",
    "display",
    "equals",
    "document",
    "create",
    "element",
    "create",
    "element",
    "create",
    "paragraph",
    "need",
    "change",
    "text",
    "content",
    "element",
    "error",
    "display",
    "access",
    "text",
    "content",
    "set",
    "equal",
    "message",
    "going",
    "add",
    "class",
    "error",
    "display",
    "would",
    "like",
    "css",
    "properties",
    "take",
    "error",
    "display",
    "element",
    "access",
    "class",
    "list",
    "add",
    "class",
    "add",
    "css",
    "class",
    "error",
    "display",
    "take",
    "card",
    "element",
    "normally",
    "displays",
    "weather",
    "data",
    "take",
    "card",
    "reset",
    "text",
    "content",
    "something",
    "set",
    "empty",
    "string",
    "normally",
    "card",
    "display",
    "set",
    "none",
    "set",
    "display",
    "block",
    "even",
    "flex",
    "access",
    "card",
    "access",
    "style",
    "access",
    "display",
    "set",
    "display",
    "flex",
    "display",
    "take",
    "card",
    "append",
    "child",
    "element",
    "append",
    "child",
    "append",
    "par",
    "paragraph",
    "error",
    "display",
    "card",
    "type",
    "anything",
    "press",
    "get",
    "weather",
    "get",
    "error",
    "message",
    "please",
    "enter",
    "city",
    "card",
    "going",
    "round",
    "corners",
    "make",
    "look",
    "better",
    "border",
    "radius",
    "let",
    "10",
    "pixels",
    "better",
    "okay",
    "moving",
    "city",
    "text",
    "within",
    "try",
    "code",
    "might",
    "cause",
    "errors",
    "catch",
    "errors",
    "happen",
    "one",
    "parameter",
    "error",
    "error",
    "console",
    "error",
    "error",
    "let",
    "call",
    "display",
    "error",
    "function",
    "pass",
    "along",
    "error",
    "display",
    "need",
    "get",
    "weather",
    "data",
    "within",
    "tri",
    "block",
    "create",
    "constant",
    "weather",
    "data",
    "equals",
    "need",
    "await",
    "get",
    "weather",
    "data",
    "function",
    "pass",
    "city",
    "weight",
    "use",
    "weight",
    "within",
    "async",
    "function",
    "since",
    "within",
    "arrow",
    "function",
    "could",
    "declare",
    "arrow",
    "function",
    "sync",
    "function",
    "let",
    "preedee",
    "event",
    "parameter",
    "sync",
    "use",
    "weight",
    "going",
    "wait",
    "function",
    "return",
    "weather",
    "data",
    "receive",
    "weather",
    "data",
    "call",
    "display",
    "weather",
    "info",
    "function",
    "pass",
    "along",
    "data",
    "weather",
    "data",
    "okay",
    "function",
    "complete",
    "typed",
    "everything",
    "going",
    "close",
    "function",
    "close",
    "display",
    "error",
    "function",
    "want",
    "get",
    "weather",
    "data",
    "city",
    "actually",
    "need",
    "fetch",
    "weather",
    "data",
    "create",
    "url",
    "create",
    "constant",
    "api",
    "url",
    "pass",
    "fetch",
    "function",
    "use",
    "template",
    "string",
    "sure",
    "use",
    "pair",
    "back",
    "ticks",
    "need",
    "get",
    "following",
    "url",
    "web",
    "page",
    "need",
    "find",
    "api",
    "call",
    "pass",
    "city",
    "name",
    "copy",
    "within",
    "template",
    "string",
    "paste",
    "replace",
    "city",
    "name",
    "placeholder",
    "use",
    "city",
    "variable",
    "api",
    "key",
    "use",
    "placeholder",
    "pass",
    "api",
    "key",
    "pass",
    "fetch",
    "function",
    "create",
    "response",
    "const",
    "response",
    "equals",
    "weight",
    "use",
    "weight",
    "within",
    "async",
    "function",
    "fetch",
    "api",
    "url",
    "response",
    "let",
    "check",
    "response",
    "let",
    "response",
    "see",
    "okay",
    "type",
    "city",
    "miami",
    "get",
    "weather",
    "data",
    "within",
    "response",
    "status",
    "200",
    "okay",
    "need",
    "check",
    "see",
    "response",
    "okay",
    "could",
    "retrieve",
    "data",
    "make",
    "gibberish",
    "city",
    "let",
    "go",
    "inspect",
    "console",
    "response",
    "status",
    "404",
    "response",
    "okay",
    "write",
    "statement",
    "response",
    "okay",
    "throw",
    "new",
    "error",
    "pass",
    "along",
    "message",
    "could",
    "fetch",
    "weather",
    "data",
    "else",
    "response",
    "okay",
    "return",
    "response",
    "await",
    "response",
    "convert",
    "json",
    "format",
    "using",
    "json",
    "method",
    "end",
    "function",
    "return",
    "object",
    "json",
    "like",
    "format",
    "data",
    "going",
    "returned",
    "event",
    "listener",
    "get",
    "weather",
    "data",
    "need",
    "display",
    "work",
    "display",
    "weather",
    "info",
    "function",
    "next",
    "one",
    "let",
    "data",
    "receive",
    "type",
    "miami",
    "looks",
    "like",
    "worked",
    "name",
    "miami",
    "city",
    "weather",
    "array",
    "array",
    "objects",
    "coordinates",
    "clouds",
    "pretty",
    "much",
    "anything",
    "think",
    "regarding",
    "weather",
    "let",
    "get",
    "name",
    "within",
    "main",
    "temperature",
    "temperature",
    "kelvin",
    "need",
    "convert",
    "get",
    "humidity",
    "within",
    "weather",
    "array",
    "objects",
    "get",
    "description",
    "overcast",
    "clouds",
    "id",
    "eventually",
    "use",
    "id",
    "return",
    "emoji",
    "different",
    "weather",
    "codes",
    "explain",
    "later",
    "going",
    "use",
    "object",
    "destructuring",
    "const",
    "use",
    "object",
    "destructuring",
    "set",
    "ac",
    "krly",
    "brackets",
    "access",
    "name",
    "property",
    "create",
    "variable",
    "city",
    "city",
    "miami",
    "case",
    "access",
    "main",
    "main",
    "property",
    "contains",
    "array",
    "take",
    "main",
    "use",
    "object",
    "destructuring",
    "within",
    "nested",
    "object",
    "would",
    "like",
    "temp",
    "humidity",
    "let",
    "select",
    "weather",
    "whether",
    "array",
    "objects",
    "use",
    "array",
    "destructuring",
    "followed",
    "object",
    "destructuring",
    "give",
    "description",
    "id",
    "set",
    "equal",
    "data",
    "use",
    "destructuring",
    "let",
    "organize",
    "make",
    "look",
    "nice",
    "data",
    "one",
    "gigantic",
    "object",
    "nested",
    "objects",
    "nested",
    "arrays",
    "destructuring",
    "variables",
    "city",
    "temperature",
    "humidity",
    "description",
    "weather",
    "id",
    "weather",
    "code",
    "use",
    "like",
    "variables",
    "card",
    "currently",
    "displaying",
    "would",
    "like",
    "display",
    "going",
    "take",
    "card",
    "set",
    "text",
    "content",
    "empty",
    "string",
    "already",
    "text",
    "would",
    "like",
    "reset",
    "error",
    "message",
    "take",
    "card",
    "access",
    "style",
    "set",
    "display",
    "property",
    "flex",
    "flex",
    "box",
    "sure",
    "working",
    "going",
    "get",
    "weather",
    "without",
    "entering",
    "city",
    "type",
    "city",
    "reset",
    "good",
    "wanted",
    "make",
    "gibberish",
    "error",
    "could",
    "fetch",
    "weather",
    "data",
    "type",
    "something",
    "legitimate",
    "get",
    "weather",
    "reset",
    "would",
    "like",
    "okay",
    "create",
    "elements",
    "elements",
    "previously",
    "deleted",
    "div",
    "element",
    "need",
    "recreate",
    "create",
    "constant",
    "city",
    "display",
    "display",
    "city",
    "document",
    "create",
    "element",
    "city",
    "display",
    "h1",
    "element",
    "let",
    "copy",
    "line",
    "code",
    "paste",
    "times",
    "four",
    "additional",
    "times",
    "city",
    "display",
    "temp",
    "display",
    "temperature",
    "paragraph",
    "element",
    "humidity",
    "display",
    "humidity",
    "display",
    "also",
    "paragraph",
    "element",
    "description",
    "display",
    "shortened",
    "desk",
    "desk",
    "display",
    "also",
    "paragraph",
    "weather",
    "emoji",
    "weather",
    "emoji",
    "also",
    "paragraph",
    "okay",
    "need",
    "change",
    "text",
    "content",
    "elements",
    "empty",
    "say",
    "let",
    "take",
    "text",
    "content",
    "city",
    "display",
    "text",
    "content",
    "property",
    "equals",
    "city",
    "variable",
    "destructured",
    "okay",
    "let",
    "see",
    "works",
    "type",
    "city",
    "get",
    "weather",
    "oh",
    "need",
    "append",
    "take",
    "card",
    "append",
    "child",
    "append",
    "city",
    "display",
    "element",
    "let",
    "try",
    "type",
    "miami",
    "get",
    "weather",
    "display",
    "miami",
    "let",
    "try",
    "dallas",
    "texas",
    "dallas",
    "oh",
    "displaying",
    "need",
    "add",
    "class",
    "list",
    "css",
    "class",
    "city",
    "display",
    "adding",
    "text",
    "content",
    "take",
    "city",
    "display",
    "access",
    "class",
    "list",
    "add",
    "class",
    "css",
    "class",
    "city",
    "display",
    "type",
    "city",
    "css",
    "styling",
    "right",
    "add",
    "temperature",
    "following",
    "format",
    "take",
    "temp",
    "display",
    "access",
    "text",
    "content",
    "equals",
    "use",
    "template",
    "string",
    "pair",
    "back",
    "ticks",
    "add",
    "placeholder",
    "pass",
    "temperature",
    "add",
    "degree",
    "symbol",
    "hold",
    "alt",
    "type",
    "0176",
    "degree",
    "symbol",
    "normally",
    "kelvin",
    "actually",
    "think",
    "kelvin",
    "uses",
    "degree",
    "symbol",
    "changing",
    "momentarily",
    "take",
    "temperature",
    "display",
    "access",
    "class",
    "list",
    "add",
    "following",
    "class",
    "add",
    "css",
    "class",
    "class",
    "temp",
    "display",
    "append",
    "element",
    "card",
    "element",
    "take",
    "card",
    "append",
    "child",
    "element",
    "temperature",
    "display",
    "see",
    "temperature",
    "going",
    "kelvin",
    "city",
    "temperature",
    "temperature",
    "would",
    "like",
    "celsius",
    "let",
    "use",
    "deg",
    "ci",
    "subtract",
    "temperature",
    "200",
    "17315",
    "okay",
    "probably",
    "round",
    "let",
    "enclose",
    "equation",
    "set",
    "parentheses",
    "follow",
    "two",
    "fixed",
    "method",
    "numbers",
    "round",
    "one",
    "decimal",
    "place",
    "de",
    "c",
    "would",
    "like",
    "fahrenheit",
    "temperature",
    "formula",
    "take",
    "temp",
    "kelvin",
    "minus",
    "multiply",
    "9",
    "5",
    "plus",
    "32",
    "let",
    "enclose",
    "within",
    "set",
    "parentheses",
    "get",
    "temperature",
    "fahrenheit",
    "oh",
    "add",
    "f",
    "end",
    "f",
    "get",
    "humidity",
    "take",
    "humidity",
    "display",
    "element",
    "created",
    "access",
    "text",
    "content",
    "set",
    "equal",
    "template",
    "string",
    "using",
    "pair",
    "back",
    "ticks",
    "let",
    "add",
    "word",
    "humidity",
    "coin",
    "space",
    "add",
    "placeholder",
    "display",
    "humidity",
    "variable",
    "add",
    "class",
    "list",
    "humidity",
    "display",
    "humidity",
    "display",
    "access",
    "class",
    "list",
    "add",
    "following",
    "class",
    "humidity",
    "display",
    "append",
    "element",
    "card",
    "element",
    "card",
    "append",
    "child",
    "append",
    "humidity",
    "display",
    "get",
    "humidity",
    "miami",
    "fhe",
    "humidity",
    "81",
    "let",
    "add",
    "percent",
    "81",
    "yep",
    "work",
    "add",
    "description",
    "description",
    "weather",
    "take",
    "element",
    "description",
    "display",
    "access",
    "text",
    "content",
    "equals",
    "description",
    "add",
    "css",
    "class",
    "class",
    "list",
    "element",
    "description",
    "display",
    "access",
    "class",
    "list",
    "add",
    "following",
    "class",
    "description",
    "display",
    "add",
    "element",
    "card",
    "append",
    "child",
    "append",
    "description",
    "display",
    "let",
    "type",
    "miami",
    "get",
    "weather",
    "currently",
    "miami",
    "overcast",
    "clouds",
    "get",
    "emoji",
    "based",
    "weather",
    "element",
    "weather",
    "emoji",
    "access",
    "text",
    "content",
    "equals",
    "call",
    "get",
    "weather",
    "emoji",
    "function",
    "pass",
    "weather",
    "id",
    "pass",
    "id",
    "variable",
    "receive",
    "data",
    "get",
    "weather",
    "emoji",
    "work",
    "momentarily",
    "take",
    "element",
    "weather",
    "emoji",
    "access",
    "class",
    "list",
    "add",
    "following",
    "css",
    "class",
    "weather",
    "emoji",
    "append",
    "card",
    "card",
    "append",
    "child",
    "append",
    "weather",
    "emoji",
    "right",
    "canest",
    "need",
    "fill",
    "get",
    "weather",
    "emoi",
    "function",
    "open",
    "weather",
    "ai",
    "different",
    "group",
    "codes",
    "weather",
    "id",
    "going",
    "either",
    "within",
    "200",
    "range",
    "meaning",
    "thunderstorm",
    "300",
    "range",
    "means",
    "drizzle",
    "500",
    "rain",
    "600",
    "snow",
    "700",
    "atmosphere",
    "mist",
    "smoke",
    "even",
    "tornado",
    "800",
    "exactly",
    "clear",
    "sky",
    "anything",
    "greater",
    "800",
    "means",
    "clouds",
    "weather",
    "id",
    "going",
    "one",
    "codes",
    "going",
    "use",
    "switch",
    "examine",
    "boolean",
    "value",
    "true",
    "value",
    "true",
    "match",
    "one",
    "cases",
    "case",
    "group",
    "200",
    "weather",
    "id",
    "pass",
    "greater",
    "equal",
    "200",
    "00",
    "weather",
    "id",
    "less",
    "300",
    "means",
    "thunderstorm",
    "return",
    "emoji",
    "thunderstorm",
    "emoji",
    "thunderstorm",
    "like",
    "look",
    "one",
    "better",
    "okay",
    "group",
    "300",
    "drizzle",
    "let",
    "copy",
    "case",
    "feel",
    "like",
    "retyping",
    "weather",
    "id",
    "greater",
    "equal",
    "300",
    "less",
    "400",
    "means",
    "drizzle",
    "add",
    "emoji",
    "raining",
    "cloud",
    "group",
    "500",
    "also",
    "rain",
    "heavier",
    "rain",
    "let",
    "copy",
    "case",
    "paste",
    "weather",
    "greater",
    "equal",
    "500",
    "less",
    "600",
    "return",
    "rain",
    "well",
    "group",
    "600",
    "snow",
    "weather",
    "id",
    "greater",
    "equal",
    "600",
    "less",
    "700",
    "return",
    "snowflake",
    "meaning",
    "snow",
    "group",
    "700",
    "weather",
    "id",
    "greater",
    "equal",
    "700",
    "less",
    "800",
    "return",
    "fog",
    "emoji",
    "800",
    "exactly",
    "means",
    "clear",
    "sky",
    "display",
    "sun",
    "weather",
    "id",
    "strictly",
    "equal",
    "800",
    "exactly",
    "return",
    "sun",
    "emoji",
    "anything",
    "within",
    "800",
    "range",
    "means",
    "clouds",
    "weather",
    "id",
    "greater",
    "equal",
    "801",
    "800",
    "means",
    "clear",
    "sky",
    "group",
    "code",
    "goes",
    "809",
    "weather",
    "id",
    "less",
    "810",
    "return",
    "cloud",
    "let",
    "add",
    "default",
    "case",
    "get",
    "weird",
    "weather",
    "code",
    "default",
    "return",
    "know",
    "question",
    "mark",
    "get",
    "unknown",
    "weather",
    "phenomena",
    "ufos",
    "something",
    "know",
    "okay",
    "think",
    "everything",
    "let",
    "close",
    "close",
    "functions",
    "type",
    "miami",
    "get",
    "weather",
    "miami",
    "de",
    "f",
    "humidity",
    "81",
    "overcast",
    "clouds",
    "get",
    "cloud",
    "emoji",
    "cloudy",
    "let",
    "try",
    "dallas",
    "clear",
    "sky",
    "fah",
    "humidity",
    "63",
    "clear",
    "sky",
    "get",
    "sun",
    "emoji",
    "right",
    "everybody",
    "weather",
    "app",
    "make",
    "using",
    "java",
    "javascript",
    "html",
    "css"
  ],
  "keywords": [
    "hey",
    "everybody",
    "today",
    "going",
    "everything",
    "need",
    "know",
    "get",
    "working",
    "javascript",
    "could",
    "add",
    "include",
    "clock",
    "stopwatch",
    "calculator",
    "game",
    "rock",
    "paper",
    "scissors",
    "image",
    "weather",
    "data",
    "api",
    "good",
    "back",
    "show",
    "give",
    "video",
    "like",
    "random",
    "bro",
    "anything",
    "used",
    "create",
    "web",
    "whatever",
    "use",
    "using",
    "user",
    "input",
    "somebody",
    "example",
    "html",
    "pretty",
    "function",
    "least",
    "though",
    "css",
    "color",
    "style",
    "still",
    "including",
    "code",
    "perform",
    "well",
    "would",
    "full",
    "free",
    "either",
    "walk",
    "go",
    "begin",
    "text",
    "one",
    "feel",
    "check",
    "way",
    "let",
    "right",
    "new",
    "folder",
    "left",
    "place",
    "name",
    "contain",
    "files",
    "select",
    "within",
    "three",
    "file",
    "window",
    "next",
    "named",
    "stylesheet",
    "page",
    "colors",
    "together",
    "switch",
    "generate",
    "type",
    "change",
    "want",
    "tag",
    "attribute",
    "set",
    "last",
    "thing",
    "save",
    "changes",
    "test",
    "currently",
    "uh",
    "elements",
    "h1",
    "element",
    "say",
    "hello",
    "update",
    "press",
    "button",
    "since",
    "paragraph",
    "looks",
    "body",
    "document",
    "font",
    "something",
    "else",
    "different",
    "increase",
    "size",
    "property",
    "pixels",
    "2",
    "means",
    "3",
    "little",
    "bottom",
    "case",
    "error",
    "first",
    "running",
    "sure",
    "work",
    "output",
    "zoom",
    "bit",
    "end",
    "parentheses",
    "single",
    "template",
    "literal",
    "variables",
    "discuss",
    "word",
    "click",
    "inspect",
    "console",
    "line",
    "message",
    "pizza",
    "second",
    "move",
    "better",
    "box",
    "another",
    "copy",
    "paste",
    "okay",
    "two",
    "run",
    "program",
    "see",
    "people",
    "green",
    "able",
    "kind",
    "content",
    "id",
    "unique",
    "pick",
    "also",
    "equal",
    "meaning",
    "start",
    "follow",
    "dot",
    "display",
    "time",
    "getet",
    "lot",
    "value",
    "x",
    "variable",
    "container",
    "contains",
    "creating",
    "declare",
    "keyword",
    "already",
    "declared",
    "names",
    "ca",
    "step",
    "assign",
    "number",
    "100",
    "accept",
    "might",
    "later",
    "really",
    "write",
    "age",
    "store",
    "25",
    "price",
    "10",
    "maybe",
    "gpa",
    "c",
    "insert",
    "placeholder",
    "sign",
    "curly",
    "braces",
    "continue",
    "old",
    "colon",
    "space",
    "displaying",
    "numbers",
    "strings",
    "string",
    "characters",
    "food",
    "email",
    "equals",
    "make",
    "lowercase",
    "1",
    "sort",
    "math",
    "lines",
    "true",
    "false",
    "boolean",
    "car",
    "student",
    "classes",
    "statements",
    "explain",
    "values",
    "equation",
    "5",
    "operator",
    "students",
    "class",
    "30",
    "current",
    "minus",
    "6",
    "15",
    "power",
    "modulus",
    "zero",
    "separate",
    "extra",
    "plus",
    "times",
    "us",
    "60",
    "even",
    "odd",
    "increment",
    "take",
    "given",
    "order",
    "beginning",
    "result",
    "skip",
    "4",
    "7",
    "six",
    "12",
    "four",
    "round",
    "expression",
    "decrease",
    "following",
    "prompt",
    "submit",
    "username",
    "happens",
    "try",
    "label",
    "break",
    "works",
    "execute",
    "access",
    "onclick",
    "outside",
    "log",
    "replace",
    "convert",
    "think",
    "reason",
    "z",
    "attempt",
    "returns",
    "long",
    "empty",
    "undefined",
    "const",
    "constants",
    "circumference",
    "radius",
    "define",
    "pi",
    "enter",
    "answer",
    "constant",
    "uppercase",
    "reference",
    "counter",
    "count",
    "buttons",
    "reset",
    "div",
    "center",
    "align",
    "block",
    "padding",
    "20",
    "white",
    "background",
    "hsl",
    "border",
    "five",
    "cursor",
    "hover",
    "seconds",
    "apply",
    "accessing",
    "selecting",
    "functions",
    "every",
    "object",
    "collection",
    "properties",
    "methods",
    "rest",
    "method",
    "floor",
    "9",
    "square",
    "find",
    "maximum",
    "minimum",
    "max",
    "comma",
    "roll",
    "dice",
    "0",
    "enclose",
    "50",
    "depending",
    "got",
    "condition",
    "statement",
    "greater",
    "18",
    "enough",
    "must",
    "instead",
    "hours",
    "less",
    "nested",
    "license",
    "keep",
    "many",
    "top",
    "response",
    "index",
    "checked",
    "radio",
    "selected",
    "card",
    "repeat",
    "none",
    "amount",
    "total",
    "day",
    "matching",
    "default",
    "remove",
    "score",
    "letter",
    "receive",
    "b",
    "character",
    "list",
    "return",
    "returned",
    "length",
    "pass",
    "original",
    "call",
    "around",
    "temp",
    "temperature",
    "celsius",
    "strictly",
    "guess",
    "loop",
    "computer",
    "stop",
    "append",
    "password",
    "iteration",
    "happy",
    "year",
    "valid",
    "birthday",
    "send",
    "arguments",
    "parameters",
    "parameter",
    "spongebob",
    "patrick",
    "passing",
    "invoke",
    "resolve",
    "scope",
    "inside",
    "form",
    "heading",
    "fahrenheit",
    "arrow",
    "emoji",
    "blue",
    "width",
    "margin",
    "weight",
    "bold",
    "red",
    "lightness",
    "arrays",
    "array",
    "fruit",
    "apple",
    "orange",
    "banana",
    "fruits",
    "item",
    "coconut",
    "spread",
    "vegetables",
    "dog",
    "images",
    "development",
    "rm",
    "parent",
    "child",
    "format",
    "callbacks",
    "callback",
    "argument",
    "asynchronous",
    "complete",
    "wait",
    "dom",
    "provided",
    "map",
    "key",
    "date",
    "filter",
    "children",
    "reduce",
    "accumulator",
    "previous",
    "task",
    "timeout",
    "milliseconds",
    "event",
    "objects",
    "person",
    "job",
    "constructor",
    "clear",
    "static",
    "product",
    "area",
    "animal",
    "rabbit",
    "fish",
    "hawk",
    "swim",
    "fly",
    "speed",
    "height",
    "private",
    "errors",
    "destructuring",
    "address",
    "mouse",
    "city",
    "calories",
    "yellow",
    "minutes",
    "timer",
    "points",
    "flex",
    "interval",
    "events",
    "sync",
    "tasks",
    "promise",
    "catch",
    "target",
    "query",
    "selector",
    "node",
    "unordered",
    "lists",
    "h4",
    "sibling",
    "listener",
    "enabled",
    "disabled",
    "player",
    "choice",
    "slide",
    "fetch",
    "reject",
    "clean",
    "kitchen",
    "trash",
    "json",
    "pokemon",
    "humidity"
  ]
}